pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1405224895,Create java http package,"This is the first pull request for the java_http package! :tada: Relevant issue: #957.

In this PR I created a new Dart package called java_http using the Dart create command with the package template. This package was placed in the pkgs directory along with the other package:http clients. Functionality wise it doesn't do anything yet. It is the basic structure of a Dart package to build upon with future pull requests.

The main changes made to the code generated by the Dart create command were:
- Set the version to 0.0.1 in CHANGELOG.md and pubspec.yaml.
- Set publish_to: none in pubspec.yaml.
- Set SDK to ^3.0.0 in pubspec.yaml. This is the same as cronet_http, cupertino_http and http.

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>
",True,971,https://api.github.com/repos/dart-lang/http/pulls/971,https://github.com/dart-lang/http/pull/971,closed,119,0,8,11,0,3,0,1,[],2023-06-23 15:17:48+00:00,2023-06-26 21:34:21+00:00,281793.0,"3 days, 6:16:33","[{'comment_id': 1242368348, 'comment_body': 'Could you use the same formatting as https://github.com/dart-lang/http/blob/master/pkgs/cronet_http/README.md ?\r\n\r\nThat is:\r\n- Start with a description of the package.\r\n- Copy the experimental section from `package:cronet_http` verbatim\r\n\r\nOtherwise looks good! ', 'comment_created': datetime.datetime(2023, 6, 26, 15, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1242770853, 'comment_body': 'Hey Brian,\r\n\r\nI made the following changes:\r\n\r\n- Copied the ""Status: Experimental"" section from `package:cronet_http`\'s README verbatim.\r\n\r\n- Moved the package description so that it is above the ""Status: Experimental"" section as it is with `package:cronet_http`\'s README.\r\n\r\nI also updated the description to include the advantages of using java_http on Android.\r\nThis was borrowed from the [Dart GSoC 2023 Project Ideas](https://github.com/dart-lang/sdk/wiki/Dart-GSoC-2023-Project-Ideas#idea-build-a-dart-http-client-using-java-apis) wiki. What are your thoughts?\r\n\r\nThank you! ', 'comment_created': datetime.datetime(2023, 6, 26, 21, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1242773638, 'comment_body': 'Sounds good to me!', 'comment_created': datetime.datetime(2023, 6, 26, 21, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}]","[{'commit_sha': 'bd8e3f6d296cda13063c1d965ab8c7bac5f0160d', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '224291b786d07a4ca6b99c8f3e476be13c5da198', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09640d48dba4b7b3af44af985e38b34a3bccdb0c', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '552e014f6ca227a570536a12f870af74f8ca24eb', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aec80d3a1a5f5126710a8c924b10b4b8bb0051ea', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aca5be989342dbb9c93b58a7f766febe51ec452', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f368b0bc72331352f33b4bd3599753f5f8dde086', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541ae697aa49289c5a829a4ba4f4352df1fce535', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d2b0d62a421ddd0318deb461ed136da41d614c2', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca2a835efb7960308f4e9c51629ab90b81f49d08', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f14bbaa4ce75f8037a7b1550352595371476813', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2
1421813670,Java http BaseClient implementation,"This is a PR for the java_http project :coffee:.
Relevant issue: https://github.com/dart-lang/http/issues/957

In this PR we:

* Generate Dart only bindings for `java.net.URL` using jnigen.
We are not including the JAR file which was used to generate the bindings.
analysis_options.yaml was modified so that the generated bindings are excluded from the Dart analyzer.

* Create `JavaClient` which is a subclass of package:http `BaseClient`.
In this class we implement the send method of `BaseClient`. 
In the send method we initialise the JVM using package:jni. 
We create a `java.net.URL` object using the generated bindings.
We return a `StreamedResponse` which hard-codes the response body, response status etc.

* Create a test file for the new `JavaClient` class.
In this test file we are running the `testResponseBody` method from package:http_client_conformance_tests.
These tests only pass because `JavaClient` has been hard-coded to return exactly what the test is expecting.

* Create a new GitHub workflow file to automatically run these tests.
This workflow file is a standard Dart/Flutter GitHub workflow, the main difference is we run
`dart run jni:setup` to build the dynamic libraries for jni.

### Reviewers
@brianquinlan 
@HosseinYousefi 

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>
",True,980,https://api.github.com/repos/dart-lang/http/pulls/980,https://github.com/dart-lang/http/pull/980,closed,552,2,10,14,0,17,1,2,[{'name': 'type-infra'}],2023-07-05 21:18:57+00:00,2023-07-07 17:15:49+00:00,158212.0,"1 day, 19:56:52","[{'comment_id': 1253689636, 'comment_body': ""I'd create three steps, like:\r\n\r\njobs:\r\n  analysis:\r\n    ... do steps up to `dart analyze` here\r\n  build:\r\n    needs: analyze\r\n    ...do `dart run jni:setup` here\r\n  test:\r\n    needs: build\r\n    ...do `dart test` here\r\n"", 'comment_created': datetime.datetime(2023, 7, 5, 21, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1253689925, 'comment_body': 'Add end-of-line', 'comment_created': datetime.datetime(2023, 7, 5, 21, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1253690077, 'comment_body': 'Add end-of-line', 'comment_created': datetime.datetime(2023, 7, 5, 21, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1253690204, 'comment_body': 'Add end-of-line', 'comment_created': datetime.datetime(2023, 7, 5, 21, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1253693596, 'comment_body': 'Please create a follow-up PR that removes the example test.', 'comment_created': datetime.datetime(2023, 7, 5, 21, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1253697461, 'comment_body': ""Eventually, you should add a description of the implementation. \r\n\r\n`CupertinoClient`'s description looks like this:\r\nhttps://github.com/dart-lang/http/blob/9833a20b257d3ffd9503e530a841f06688340d21/pkgs/cupertino_http/lib/src/cupertino_client.dart#L31\r\n\r\n"", 'comment_created': datetime.datetime(2023, 7, 5, 21, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1253700470, 'comment_body': ""Would it make sense to do this in the constructor so it is only done once per class (and you don't get an unexpected exception later on in your application run)? Feel free to fix in a follow-up PR."", 'comment_created': datetime.datetime(2023, 7, 5, 22, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1253703891, 'comment_body': 'Could you add a quick comment describing how to run this e.g.\r\n\r\n```\r\n# Regenerate bindings with `dart run jnigen --config jnigen.yaml`.\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 22, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1254693218, 'comment_body': ""Interesting, I didn't know that text files should have a newline at end of file. You learn something new every day! :brain: \r\n\r\nI can see now that `git diff` on the command line has a warning `\\ No newline at end of file\r\n`. I've being using VS Code's diff viewer which didn't show this warning.\r\n\r\nI also changed my VS Code settings to automatically insert a newline at end of file if it doesn't have one.\r\n\r\nThank you!"", 'comment_created': datetime.datetime(2023, 7, 6, 16, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1254693821, 'comment_body': 'Fixed! :hammer: ', 'comment_created': datetime.datetime(2023, 7, 6, 16, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1254694192, 'comment_body': 'Fixed! :hammer: ', 'comment_created': datetime.datetime(2023, 7, 6, 16, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1254746936, 'comment_body': ""Good idea, I've added your comment verbatim as I couldn't think of any way to improve it :smiley: "", 'comment_created': datetime.datetime(2023, 7, 6, 17, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1254847113, 'comment_body': ""Yeah you're right, it definitely makes more sense to put the call to `_initJVM()` in the constructor.\r\nI'll make the change in a follow-up PR and I've added a TODO comment for now to remind me."", 'comment_created': datetime.datetime(2023, 7, 6, 19, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1255287317, 'comment_body': ':heavy_check_mark: All done!\r\nThanks for the precise instructions, they were very helpful :+1: ', 'comment_created': datetime.datetime(2023, 7, 7, 6, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1255316738, 'comment_body': ""Ah I spoke too soon, the `package:java_http` CI went from passing to failing with this change. Here's the link: https://github.com/dart-lang/http/actions/runs/5483272068\r\n\r\nThe `Lint and static analysis` and `Build` jobs were successful, it was the `Test` job that failed. The error suggests that it couldn't find the jni shared library. I'm guessing the jni library file is only available within the `Build` job, there might be a way to share the library file between jobs?\r\n\r\nBy merging the `Build` and `Test` jobs together to form `Build and test` the `package:java_http` CI is passing again :tada:"", 'comment_created': datetime.datetime(2023, 7, 7, 6, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1255325938, 'comment_body': ""SGTM!\r\nI've added a TODO comment to `java_client.dart` for the moment to remind me to do this. Thanks for the link to `cupertino_client.dart`'s description, I will use this description as a template."", 'comment_created': datetime.datetime(2023, 7, 7, 6, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1255331787, 'comment_body': ""Will do!\r\n\r\nI forgot about the code which was generated by the Dart create command. I'm wondering if we still need the other files generated by Dart create or can we remove them as well? Removing these files would be in a follow-up PR. I thought it would be helpful to create a GitHub issue to discuss removing these files, here's the link: https://github.com/dart-lang/http/issues/982."", 'comment_created': datetime.datetime(2023, 7, 7, 6, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}]","[{'commit_sha': 'bd80f317ef187f199ed6d352468c5ce8251ee520', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7518a4ad76dd5ff0857bb46ec7b43268c6c15164', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cbf419c4fbf982feb0709d25b1fcc3de168c0b4', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4354379a8184c00cf8defa6b13cecf054ef309e', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7112656d6e5126219a19d4349b179c09eea0d99b', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3618a150f5c5952fe173ef435526573cd5aef68e', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aa5cc85985b23ff3fc1b03acbc5f66ce074161f', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4328eb04cbc6eb354f6ff462d59180c46251ddbf', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '684ba1e299897aa60cb55c9af765bfe653647211', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '296e4b46031426c8d8691ec39d5e0ccc098602fa', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e056da84a7d6c64b9f992188bfa8e8554e143ab', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c930c6acb79d7a520399923e53146132c1cbaf53', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c6076f58fc2f35d35dce14d6b0a44ee87167fd', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd660e42a47278ccdee2bc164ca6e8288b998ee0a', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2
1431522440,Java http send method,"Hey @brianquinlan,

The tests are passing when I run locally on my machine, but they are failing when run on the GitHub workflow :thinking: 

## Context
This is a PR for the `java_http` [GSoC '23 project](https://summerofcode.withgoogle.com/programs/2023/projects/NKUQqmSA) :sun_with_face:.
Relevant tracking issue: https://github.com/dart-lang/http/issues/957.

## Purpose
The purpose of this PR is to improve the implementation of the `send` method of `JavaClient` (a subclass of `package:http` `BaseClient`). This takes us closer to our goal of `JavaClient` passing all the tests in [package:http_client_conformance_tests](https://github.com/dart-lang/http/tree/b2067710f88980fc0fee43ec3380bce089f001db/pkgs/http_client_conformance_tests).

## Changes
In this PR we:

- Connect to the URL.

- Set the request headers to those given in `BaseRequest.headers`.

- Set the request method to the given method in `BaseRequest.method`.

- Send the request.

- Retrieve the status code, reason phrase, response headers, content length and response body.

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>
",True,987,https://api.github.com/repos/dart-lang/http/pulls/987,https://github.com/dart-lang/http/pull/987,closed,2199,22,11,14,1,6,0,1,[],2023-07-12 15:33:10+00:00,2023-07-21 15:34:05+00:00,777655.0,"9 days, 0:00:55","[{'comment_id': 1265805543, 'comment_body': 'Could you add a TODO comment to remove this?', 'comment_created': datetime.datetime(2023, 7, 17, 19, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1265845056, 'comment_body': ""I would `throw` if the header isn't an integer."", 'comment_created': datetime.datetime(2023, 7, 17, 20, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1267329623, 'comment_body': ""I've pushed a commit which changes it to :\r\n```dart \r\nint.parse(contentLengthHeader);\r\n```\r\nthis should throw a `FormatException` if the header isn't an integer.\r\n\r\n### Alternative Solution 1\r\nWe could catch the `FormatException` and throw a `ClientException` with a more detailed message:\r\n```dart\r\nint? contentLength;\r\ntry {\r\n  contentLength =\r\n      (contentLengthHeader == null) ? null : int.parse(contentLengthHeader);\r\n} on FormatException {\r\n  throw ClientException(\r\n      'Invalid content-length header: $contentLengthHeader.'\r\n      ' Content-length must be a non-negative integer.',\r\n      request.url);\r\n}\r\n```\r\n\r\n### Alternative Solution 2\r\nWe could use the [`getContentLengthLong()`](https://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#getContentLengthLong--) method in `URLConnection`, which returns -1 if the content length is not known:\r\n\r\n```dart\r\nint? contentLength = httpUrlConnection.getContentLengthLong();\r\ncontentLength = (contentLength == -1) ? null : contentLength;\r\n```"", 'comment_created': datetime.datetime(2023, 7, 18, 21, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1267332122, 'comment_body': 'You want to throw `ClientException` for a non-integer contentLength. You can use ""Alternative Solution 1"" or whatever approach that you think is best to achieve that.\r\n', 'comment_created': datetime.datetime(2023, 7, 18, 21, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1267372262, 'comment_body': "":heavy_check_mark: Done!\r\n\r\nI've added the following TODO comment:\r\n\r\n```dart\r\n// TODO: Determine if we can remove this.\r\n// It's a workaround to fix the tests not passing on GitHub CI.\r\n// See https://github.com/dart-lang/http/pull/987#issuecomment-1636170371.\r\nSystem.setProperty(\r\n    'java.net.preferIPv6Addresses'.toJString(), 'true'.toJString());\r\n```"", 'comment_created': datetime.datetime(2023, 7, 18, 22, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1269861535, 'comment_body': ':heavy_check_mark: Done! \r\n\r\nThe code now throws a `ClientException` instead of a `FormatException` if the content length is not an integer.\r\n\r\nI ended up using a slightly different approach to the code in ""Alternative Solution 1"".\r\nI also put the code for getting the content length header into its own method.\r\n\r\nThank you!', 'comment_created': datetime.datetime(2023, 7, 20, 19, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}]","[{'commit_sha': '5877e7908a935ae54e43587fbf3af8e0bb0237b2', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83dda70f501189cd18657e5f3b37a54af6b7fa11', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e928ef325f373dbb7490b63eb634c07193b014e', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9d67997f5011f80fe4573d46b01b71efcf46b23', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02684fdf3dd4ea17b394e0d49010a8f198546729', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cd4ebc4868a5c37cffba4642e4a80bbbe05a409', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19fdb7258362d5ffab070dd1886fdeaa9355e3fe', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37b00916d6741e930e4fd8a4ab56cb9b9ceaddd6', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f618843ca833eefbc7c4a49965597afe7b57fa9', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d4650eb5019dee2675773e3d3ae0ba9f8eb57e7', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e1152b1b4426a8287e9a385c7c0d29aba7bcbc', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f453e314282ffdd888a391234db0f6d071091a5', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9774f84a87dd17e70f6da29de66d1b1cb4e16246', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fed24f9fde55f12063626d2e42b043f547ac19be', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2
1451971440,[java_http] send request body,"This is a PR for the `java_http` [GSoC '23 project](https://summerofcode.withgoogle.com/programs/2023/projects/NKUQqmSA) 🌞.
Relevant tracking issue: https://github.com/dart-lang/http/issues/957.

## Purpose
The purpose of this PR is to make the `package:java_http` client send the request body to the server.
We are now passing another two [package:http_client_conformance_tests](https://github.com/dart-lang/http/tree/b2067710f88980fc0fee43ec3380bce089f001db/pkgs/http_client_conformance_tests) :tada::

1. testIsolate()
2. testRequestBody()

The testRequestBody() tests were initially failing because we can't send a StreamedRequest object between isolates.

## Reviewers
@HosseinYousefi
@natebosch

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>",True,995,https://api.github.com/repos/dart-lang/http/pulls/995,https://github.com/dart-lang/http/pull/995,closed,183,13,7,10,3,5,0,0,[],2023-07-27 13:08:01+00:00,2023-07-31 19:20:07+00:00,367926.0,"4 days, 6:12:06","[{'comment_id': 1276779011, 'comment_body': '[optional] Is there any value in minimizing the uses of `callMethodWithArgs` and avoiding interop calls in a loop?\r\n\r\n(untested suggestion)\r\n\r\n```suggestion\r\n    httpUrlConnection.setDoOutput(true);\r\n    final outputStream = httpUrlConnection.getOutputStream();\r\n    final bodyArray = JArray(jbyte.type, requestBody.length)\r\n      ..setRange(0, requestBody.length, requestBody);\r\n    outputStream\r\n      ..write1(bodyArray)\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 20, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'natebosch', 'type': 'User'}, {'comment_id': 1276985863, 'comment_body': ""Sounds like a good idea to me!\r\n\r\nI've pushed a commit with the suggestions and the tests were all passing locally.\r\n\r\nThank you :smile: "", 'comment_created': datetime.datetime(2023, 7, 28, 1, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1276987816, 'comment_body': ""I've been learning about extension methods recently, could we add an extension method to `Uint8List`?\r\n\r\n```dart\r\nextension on Uint8List {\r\n  JArray<jbyte> toJArray() =>\r\n      JArray(jbyte.type, length)..setRange(0, length, this);\r\n}\r\n```\r\n\r\nThen, the code would go from:\r\n```dart\r\n    final bodyArray = JArray(jbyte.type, requestBody.length)\r\n      ..setRange(0, requestBody.length, requestBody);\r\n\r\n    httpUrlConnection.getOutputStream()\r\n      ..write1(bodyArray)\r\n      ..flush()\r\n      ..close();\r\n```\r\n\r\nto:\r\n\r\n```dart\r\n    httpUrlConnection.getOutputStream()\r\n      ..write1(requestBody.toJArray())\r\n      ..flush()\r\n      ..close();\r\n```\r\n\r\nMy intuition is that adding an extension method to `Uint8List` is unnecessary at the moment. But if it becomes a common occurence to convert `Uint8List` to `JArray<jbyte>` in `java_http` then it would be a nice idea to add an extension method. "", 'comment_created': datetime.datetime(2023, 7, 28, 1, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1277916471, 'comment_body': '> could we add an extension method to `Uint8List`?\r\n\r\nThis extension method does look like a good idea.', 'comment_created': datetime.datetime(2023, 7, 28, 17, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'natebosch', 'type': 'User'}, {'comment_id': 1278152079, 'comment_body': ""Awesome! Let's go for the extension method `toJArray()` on `Uint8List`."", 'comment_created': datetime.datetime(2023, 7, 28, 23, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}]","[{'commit_sha': '36a8eb8d8e998f3f9cefe50ec7d83117edc74552', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b19c7c0c56e55441dc0fc5790924bdbc20275a0f', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04241b31d380f3e432989dd33f23fc9f04b4ad79', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c8867c631860a01af98dd08ba31e8368500d01b', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc126265e3a5cab3d74fa619572196af7e1ccc38', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa243dc4e60afb27ec5252fd7df65048fba4bbcb', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '788d8c1eeab28b1b0c811d1c8adeccd631e469a6', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '140f638521129fd78bab60543747c5d789528043', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5335c7574fd5ee958f2c860c7d6245a44557d7ca', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e921cf63228a531da74ceacffa3a7e302fc280a', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2
1457188292,Add java_http .gitattributes file,"This is a PR for the `java_http` [GSoC '23 project](https://summerofcode.withgoogle.com/programs/2023/projects/NKUQqmSA) 🌞.
Relevant tracking issue: https://github.com/dart-lang/http/issues/957.

## Purpose
The purpose of this PR is to make `jnigen` generated code in `java_http` hidden by default in GitHub diffs.
`cronet_http` and `cupertino_http` already hide their generated files in GitHub diffs:
- [`cronet_http`'s .gitattributes](https://github.com/dart-lang/http/blob/1a42b4a16636e86b5fed60666b0de91219c5110c/pkgs/cronet_http/.gitattributes)
- [`cupertino_http`'s .gitattributes](https://github.com/dart-lang/http/blob/1a42b4a16636e86b5fed60666b0de91219c5110c/pkgs/cupertino_http/.gitattributes)

This PR makes `java_http` have the same behaviour as the other `package:http` clients by hiding generated code in GitHub diffs.

## Reviewers
@natebosch

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>",True,999,https://api.github.com/repos/dart-lang/http/pulls/999,https://github.com/dart-lang/http/pull/999,closed,5,0,1,3,0,5,0,0,[],2023-07-31 23:52:32+00:00,2023-08-18 16:17:46+00:00,1527914.0,"17 days, 16:25:14","[{'comment_id': 1280002348, 'comment_body': ""Hmm, Is it possible to more narrowly target this?\r\n\r\nI agree that marking these existing generated files as generated is a good idea - I understanding the reasoning for using this target. When I saw the path I was expecting to see `linguist-vendored`, not `linguist-generated`.\r\n\r\nI think the sole next directory is probably specific enough to assume it's generated. How about\r\n\r\n```suggestion\r\nlib/src/third_party/** linguist-vendored\r\nlib/src/third_party/java/** linguist-generated\r\n```\r\n\r\nThe first line will catch if we happen to add other third party source for some other reason."", 'comment_created': datetime.datetime(2023, 8, 1, 0, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'natebosch', 'type': 'User'}, {'comment_id': 1281111935, 'comment_body': ""Ah I see what you mean, just because it's in the `third-party` directory it doesn't necessarily mean it's been generated by `jnigen`. In the future, we could add third-party code to `third_party` that hasn't been generated by `jnigen`.  Therefore, we shouldn't mark the entire `third_party` directory as `linguist-generated` but instead `linguist-vendored`.\r\n\r\nThe suggestions look good and have been committed :heavy_check_mark:\r\n\r\nThanks @natebosch!"", 'comment_created': datetime.datetime(2023, 8, 1, 20, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1281112118, 'comment_body': ""> I think the sole next directory is probably specific enough to assume it's generated.\r\n\r\nWould this catch the case where we are generating bindings for classes whose package name doesn't begin with `java`. For example, I think `okhttp3.Request` bindings would currently go in `third_party/okhttp3/Request.dart`.\r\n\r\nTo solve this we could put all the `jnigen` generated bindings in their own directory such as `third_party/generated`. Then `.gitattributes` would be something like:\r\n\r\n```gitattributes\r\nlib/src/third_party/** linguist-vendored\r\nlib/src/third_party/generated/** linguist-generated\r\n```\r\n\r\nAlthough, at the moment we are only generating bindings for classes whose package name does begin with `java`. So we might not need to handle this case for now.\r\n\r\n> Hmm, Is it possible to more narrowly target this?\r\n\r\nAlternatively, we could also consider generating the `jnigen` bindings as a single file such as `native_java_bindings.dart`. Then `.gitattributes` would be something like:\r\n\r\n```gitattributes\r\nlib/src/third_party/** linguist-vendored\r\nlib/src/third_party/native_java_bindings.dart linguist-generated\r\n```\r\n\r\n@natebosch What are your thoughts? :brain:"", 'comment_created': datetime.datetime(2023, 8, 1, 20, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1281131315, 'comment_body': ""> To solve this we could put all the `jnigen` generated bindings in their own directory such as `third_party/generated`.\r\n\r\nThis sounds like the optimal layout, but I'm also on board with _not_ making this change in favor of reduced churn.\r\n\r\nI'd be fine with either (in slight preference order):\r\n\r\n1. Keeping this PR as is - we can deal with handling other `linguist-generated` content if and when it starts showing up in PRs, which may never happen.\r\n2. Refactor into a `lib/src/third_party/generated/**` so that we never have to worry about adjusting the config for new generated content, which may be unnecessary churn if we never generate for other classes."", 'comment_created': datetime.datetime(2023, 8, 1, 20, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'natebosch', 'type': 'User'}, {'comment_id': 1281150071, 'comment_body': '> Keeping this PR as is - we can deal with handling other linguist-generated content if and when it starts showing up in PRs, which may never happen.\r\n\r\nI think we should go ahead with keeping the PR as is, it feels like the best option to me! ', 'comment_created': datetime.datetime(2023, 8, 1, 21, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}]","[{'commit_sha': '9e93bcd838beb2eb70c6d14780fa2bd05d128084', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '078444acea80ce759a58b8c2562543064ba0ac21', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf600050c6d66284e4b7951e24557f0b104f209b', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2
1463386097,Remove example test from java_http,"This is a PR for the `java_http` [GSoC '23 project](https://summerofcode.withgoogle.com/programs/2023/projects/NKUQqmSA) 🌞.
Relevant tracking issue: https://github.com/dart-lang/http/issues/957.

## Purpose
The purpose of this PR is to remove the example test that was generated by the `dart create` command as requested in https://github.com/dart-lang/http/pull/980#discussion_r1253693596.

We plan to remove the other files generated by the `dart create` command that we don't need, see #982.

## Reviewers
@natebosch

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>",True,1001,https://api.github.com/repos/dart-lang/http/pulls/1001,https://github.com/dart-lang/http/pull/1001,closed,0,22,1,1,0,0,0,0,[],2023-08-04 19:44:43+00:00,2023-08-08 13:05:42+00:00,321659.0,"3 days, 17:20:59",[],"[{'commit_sha': '0f601db6bb4cb2af6375ba4c93ef58f29bb13c62', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2
1472049153,JavaClient can stream the HTTP response body,"Make java_http stream the HTTP response body one byte at a time. Currently, java_http
gets all the bytes of the HTTP response body and then creates a stream from these bytes.

- Use `Isolate.spawn` instead of `Isolate.run` so that we can send more than one message from the worker isolate.

- Make the worker isolate send the HTTP response status code, reason phrase and response headers (in that order) to the main isolate.

- The rest of the messages from the worker isolate are the HTTP response body bytes. Create the response body stream from these bytes.

- Handle the worker isolate sending `ClientException` as well as the HTTP response data.

- Close the worker isolate if there is a `ClientException` when getting the HTTP response status code.

- Make java_http pass `testResponseBodyStreamed` in `package:http_client_conformance_tests`.

 Relevant tracking issue: [#957](https://github.com/dart-lang/http/issues/957).

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>
",True,1005,https://api.github.com/repos/dart-lang/http/pulls/1005,https://github.com/dart-lang/http/pull/1005,closed,127,48,3,7,4,8,0,0,[],2023-08-11 16:12:05+00:00,2023-08-17 16:16:13+00:00,518648.0,"6 days, 0:04:08","[{'comment_id': 1291687791, 'comment_body': 'You should probably either listen to `events.rest` or use a [`StreamTransformer`](https://api.flutter.dev/flutter/dart-async/Stream/Stream.eventTransformed.html)\r\n\r\nAnd then dispatch based on type e.g.\r\n\r\n```dart\r\nif (object is ClientException) {\r\n   sink.addError(object)\r\n} else if (object is List) {\r\n  sink.add(object);\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 8, 11, 18, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1295148240, 'comment_body': 'I ended up listening to `events.rest` as using a `StreamTransformer` looked a bit fiddly. Perhaps in the future, I could refactor to use a `StreamTransformer` to make the code cleaner.\r\n\r\nThanks for your help!', 'comment_created': datetime.datetime(2023, 8, 15, 21, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1295150841, 'comment_body': 'I think this is where the unhandled ClientException is being thrown inside the worker isolate. ', 'comment_created': datetime.datetime(2023, 8, 15, 21, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1295151470, 'comment_body': ""Won't it exit on it's own?"", 'comment_created': datetime.datetime(2023, 8, 15, 21, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1295152164, 'comment_body': 'Here we are throwing a `ClientException` in the worker isolate, I can change this in a separate PR.', 'comment_created': datetime.datetime(2023, 8, 15, 21, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1295176886, 'comment_body': ""Hey @brianquinlan,\r\n\r\nI think it does exit on its own normally although I'm not 100% sure about when the user cancels the `StreamSubscription` of the `StreamedResponse.stream`. But perhaps we don't have to worry too much about this?"", 'comment_created': datetime.datetime(2023, 8, 15, 22, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1296064974, 'comment_body': ':heavy_check_mark: This has been fixed in this PR!\r\n\r\nWe are now throwing the ClientException in the main isolate instead of the worker isolate :tada:.', 'comment_created': datetime.datetime(2023, 8, 16, 15, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1296579119, 'comment_body': ""I'll make this change in a separate PR."", 'comment_created': datetime.datetime(2023, 8, 17, 1, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}]","[{'commit_sha': '701ed0ecb534044fcbc71b7562505666ea8ebc17', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d678503de6c4fc0f156350fd3f25b8897d455a7', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1d9d7fdad998a62a6f7df7aa28f410e780016c9', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c9f3ba03daf6e93af131d604e6bf9d004f5ac4', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1845e3821605d1d29b7089b4b951e55c51836093', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f409fb7f8dfde47e218e54490563137196b9754', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b83a98d2f552aeb2b122b6a4cad3fe11e7da0251', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2
1480800594,JavaClient stream response body using byte arrays,"- Currently, `JavaClient` streams the HTTP response body one byte at a time; this is slow. Make `JavaClient` stream the HTTP response body using byte arrays; this is faster. Each byte array can contain up to 4096 bytes.

- If none of the HTTP response body bytes are available without blocking, let the worker isolate's event loop run.

- Generate bindings for `java.io.BufferedInputStream` using `jnigen`.

- Create a `BufferedInputStream` from the HTTP response body `InputStream` to improve performance.

## Context
This is a PR for the `java_http` [GSoC '23 project](https://summerofcode.withgoogle.com/programs/2023/projects/NKUQqmSA) 🌞.
Relevant tracking issue: https://github.com/dart-lang/http/issues/957.

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>
",True,1007,https://api.github.com/repos/dart-lang/http/pulls/1007,https://github.com/dart-lang/http/pull/1007,closed,291,14,4,11,2,8,0,0,[],2023-08-18 16:13:15+00:00,2023-08-24 00:12:02+00:00,460727.0,"5 days, 7:58:47","[{'comment_id': 1298685625, 'comment_body': '```dart\r\nif (bytesRead == 0) {\r\n  // No more data is available without blocking so give other Isolates an opportunity\r\n  // to run.\r\n  await Future.delayed(Duration(seconds: 0));\r\n}', 'comment_created': datetime.datetime(2023, 8, 18, 17, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1300313458, 'comment_body': ':heavy_check_mark: Done!\r\n\r\nThanks :smile: ', 'comment_created': datetime.datetime(2023, 8, 21, 15, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1302298183, 'comment_body': ""I'll delete the print statement."", 'comment_created': datetime.datetime(2023, 8, 22, 23, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1302300338, 'comment_body': ""I'm not too keen on the while loop condition going over to the next line, I think I will refactor it to make the code cleaner. "", 'comment_created': datetime.datetime(2023, 8, 22, 23, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1302301346, 'comment_body': ':heavy_check_mark: Done!', 'comment_created': datetime.datetime(2023, 8, 22, 23, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1302305711, 'comment_body': ':heavy_check_mark: Done!\r\n\r\nTo simplify the while loop condition, we no longer do the variable assignment within the loop condition.', 'comment_created': datetime.datetime(2023, 8, 22, 23, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1303375348, 'comment_body': 'This might be easier:\r\n\r\n```dart\r\nwhile (true) {\r\n  final bytesCount = responseBodyStream.read1(bytesBuffer, 0, bytesBuffer.length); \r\n  if (bytesCount == -1) {\r\n    break;\r\n  }\r\n      if (bytesCount == 0) {\r\n        // No more data is available without blocking so give other Isolates an\r\n        // opportunity to run.\r\n        await Future<void>.delayed(Duration.zero);\r\n        continue;\r\n    }\r\n\r\n   sendPort.send(bytesBuffer.toUint8List(length: bytesCount));\r\n   actualBodyLength += bytesCount;\r\n}\r\n\r\n} ', 'comment_created': datetime.datetime(2023, 8, 23, 18, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1303656416, 'comment_body': ""Hey @brianquinlan,\r\n\r\nI like your approach because it removes the duplication of:\r\n\r\n```dart \r\nbytesCount = responseBodyStream.read1(bytesBuffer, 0, bytesBuffer.length);\r\n```\r\n\r\nIncluding a continue statement when bytesCount == 0 is a good idea.\r\n\r\nI've pushed both of these changes :muscle:. \r\n\r\nThank you! "", 'comment_created': datetime.datetime(2023, 8, 24, 0, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}]","[{'commit_sha': 'cfbf5e274cac25b0e6b0bcf6633e8b4f6547136e', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98b98d01777728562e5284c8b7085c6a7cf144ca', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '660daf12c914ae76708f547ef99a318b5655565c', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a01c6a026a67a495040d05b1a249058312c8648', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e504f872b945a660687bd590d2be0deb39fe7010', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '877f221a577bcbc9fd6daa24675ad784a2e04b1b', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '403491c29b18e2b3d3197f8c7952b580f7bd9513', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abfd68332a7b3cc0f0953e2644edcdc51ba0e1a8', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e987d4972fd515ef6035cb041eaf526d28054a1', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '026d10a6549e88f2ec79621e782711e8706b9cb8', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea4d668dabe404a4ef1e18f00e822b85de01ba9d', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2
1483120470,Add response status code test,"- Created a new test group `response status line` to test that `package:http` clients correctly process the response status line.

- Added a new test `without status code` to the `response status line` test group.

- The `without status code` test checks that `package:http` clients can handle an HTTP response status line with a missing status code, e.g. `HTTP/1.1 OK`.

- `cronet_http` is failing `without status code test`, we are skipping the test until we fix this issue: #1013.

- Created a new test server `response_status_line_server.dart` that receives a status line from the client and sets this as the response status line.

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>
",True,1009,https://api.github.com/repos/dart-lang/http/pulls/1009,https://github.com/dart-lang/http/pull/1009,closed,107,0,6,6,2,8,1,0,[{'name': 'package:http_client_conformance_tests'}],2023-08-21 15:28:53+00:00,2023-08-26 00:17:02+00:00,377289.0,"4 days, 8:48:09","[{'comment_id': 1300765287, 'comment_body': '2023', 'comment_created': datetime.datetime(2023, 8, 21, 23, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1300765515, 'comment_body': 'returns a custom status line.', 'comment_created': datetime.datetime(2023, 8, 21, 23, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1300765582, 'comment_body': 'Remove this line', 'comment_created': datetime.datetime(2023, 8, 21, 23, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1300766675, 'comment_body': '2023', 'comment_created': datetime.datetime(2023, 8, 21, 23, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1306218246, 'comment_body': ':heavy_check_mark: Done!', 'comment_created': datetime.datetime(2023, 8, 25, 23, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1306218287, 'comment_body': ':heavy_check_mark: Done!', 'comment_created': datetime.datetime(2023, 8, 25, 23, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1306218409, 'comment_body': ':heavy_check_mark: Done!', 'comment_created': datetime.datetime(2023, 8, 25, 23, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1306218524, 'comment_body': ':heavy_check_mark: Done!', 'comment_created': datetime.datetime(2023, 8, 25, 23, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}]","[{'commit_sha': 'e1beabaa259fa0b71fb05d59dda8f2fe9843a8a1', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73cf408e3071c40a1131b6d3eb88089fcfcddd65', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d14d9470cf60699e5d0e1c4665ef9cb6d12821d', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf2ed369254956ec28315b1741192c6c6b453559', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea8ccdf7c1428d790a17b69f7b11e126b242adc4', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea93bcb636bf97918c4bfa345eff931e24c2ff2', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2
1483120470,Add response status code test,"- Created a new test group `response status line` to test that `package:http` clients correctly process the response status line.

- Added a new test `without status code` to the `response status line` test group.

- The `without status code` test checks that `package:http` clients can handle an HTTP response status line with a missing status code, e.g. `HTTP/1.1 OK`.

- `cronet_http` is failing `without status code test`, we are skipping the test until we fix this issue: #1013.

- Created a new test server `response_status_line_server.dart` that receives a status line from the client and sets this as the response status line.

---

- [x] I’ve reviewed the contributor guide and applied the relevant portions to this PR.

<details>
  <summary>Contribution guidelines:</summary><br>

- See our [contributor guide](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md) for general expectations for PRs.
- Larger or significant changes should be discussed in an issue before creating a PR.
- Contributions to our repos should follow the [Dart style guide](https://dart.dev/guides/language/effective-dart) and use `dart format`.
- Most changes should add an entry to the changelog and may need to [rev the pubspec package version](https://github.com/dart-lang/sdk/wiki/External-Package-Maintenance#making-a-change).
- Changes to packages require [corresponding tests](https://github.com/dart-lang/.github/blob/main/CONTRIBUTING.md#Testing).

Note that many Dart repos have a weekly cadence for reviewing PRs - please allow for some latency before initial review feedback.
</details>
",True,1009,https://api.github.com/repos/dart-lang/http/pulls/1009,https://github.com/dart-lang/http/pull/1009,closed,107,0,6,6,2,8,1,0,[{'name': 'package:http_client_conformance_tests'}],2023-08-21 15:28:53+00:00,2023-08-26 00:17:02+00:00,377289.0,"4 days, 8:48:09","[{'comment_id': 1300765287, 'comment_body': '2023', 'comment_created': datetime.datetime(2023, 8, 21, 23, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1300765515, 'comment_body': 'returns a custom status line.', 'comment_created': datetime.datetime(2023, 8, 21, 23, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1300765582, 'comment_body': 'Remove this line', 'comment_created': datetime.datetime(2023, 8, 21, 23, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1300766675, 'comment_body': '2023', 'comment_created': datetime.datetime(2023, 8, 21, 23, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'brianquinlan', 'type': 'User'}, {'comment_id': 1306218246, 'comment_body': ':heavy_check_mark: Done!', 'comment_created': datetime.datetime(2023, 8, 25, 23, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1306218287, 'comment_body': ':heavy_check_mark: Done!', 'comment_created': datetime.datetime(2023, 8, 25, 23, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1306218409, 'comment_body': ':heavy_check_mark: Done!', 'comment_created': datetime.datetime(2023, 8, 25, 23, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}, {'comment_id': 1306218524, 'comment_body': ':heavy_check_mark: Done!', 'comment_created': datetime.datetime(2023, 8, 25, 23, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alex-james-dev', 'type': 'User'}]","[{'commit_sha': 'e1beabaa259fa0b71fb05d59dda8f2fe9843a8a1', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73cf408e3071c40a1131b6d3eb88089fcfcddd65', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d14d9470cf60699e5d0e1c4665ef9cb6d12821d', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf2ed369254956ec28315b1741192c6c6b453559', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea8ccdf7c1428d790a17b69f7b11e126b242adc4', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bea93bcb636bf97918c4bfa345eff931e24c2ff2', 'committer_username': 'alex-james-dev', 'committer_name': 'Alex James', 'committer_email': 'alexander.james.developer@gmail.com', 'commit_date': datetime.datetime(2021, 7, 1, 9, 54, 53, tzinfo=datetime.timezone.utc)}]",Alex James,86776005,alexander.james.developer@gmail.com,User,,4,,0,2

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28158642,http,dart-lang/http,Dart,351,1011,58,64,634,231,8,18,"[{'id': 1483120470, 'number': 1009, 'closed': datetime.datetime(2023, 8, 26, 0, 17, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 15, 28, 53, tzinfo=datetime.timezone.utc), 'time_taken': 377289.0, 'time_delta': '4 days, 8:48:09', 'additions': 107, 'deletions': 0, 'state': 'closed'}, {'id': 1480800594, 'number': 1007, 'closed': datetime.datetime(2023, 8, 24, 0, 12, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 18, 16, 13, 15, tzinfo=datetime.timezone.utc), 'time_taken': 460727.0, 'time_delta': '5 days, 7:58:47', 'additions': 291, 'deletions': 14, 'state': 'closed'}, {'id': 1472049153, 'number': 1005, 'closed': datetime.datetime(2023, 8, 17, 16, 16, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 11, 16, 12, 5, tzinfo=datetime.timezone.utc), 'time_taken': 518648.0, 'time_delta': '6 days, 0:04:08', 'additions': 127, 'deletions': 48, 'state': 'closed'}, {'id': 1463386097, 'number': 1001, 'closed': datetime.datetime(2023, 8, 8, 13, 5, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 4, 19, 44, 43, tzinfo=datetime.timezone.utc), 'time_taken': 321659.0, 'time_delta': '3 days, 17:20:59', 'additions': 0, 'deletions': 22, 'state': 'closed'}, {'id': 1457188292, 'number': 999, 'closed': datetime.datetime(2023, 8, 18, 16, 17, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 31, 23, 52, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1527914.0, 'time_delta': '17 days, 16:25:14', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1451971440, 'number': 995, 'closed': datetime.datetime(2023, 7, 31, 19, 20, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 13, 8, 1, tzinfo=datetime.timezone.utc), 'time_taken': 367926.0, 'time_delta': '4 days, 6:12:06', 'additions': 183, 'deletions': 13, 'state': 'closed'}, {'id': 1431522440, 'number': 987, 'closed': datetime.datetime(2023, 7, 21, 15, 34, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 15, 33, 10, tzinfo=datetime.timezone.utc), 'time_taken': 777655.0, 'time_delta': '9 days, 0:00:55', 'additions': 2199, 'deletions': 22, 'state': 'closed'}, {'id': 1421813670, 'number': 980, 'closed': datetime.datetime(2023, 7, 7, 17, 15, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 21, 18, 57, tzinfo=datetime.timezone.utc), 'time_taken': 158212.0, 'time_delta': '1 day, 19:56:52', 'additions': 552, 'deletions': 2, 'state': 'closed'}, {'id': 1405224895, 'number': 971, 'closed': datetime.datetime(2023, 6, 26, 21, 34, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 15, 17, 48, tzinfo=datetime.timezone.utc), 'time_taken': 281793.0, 'time_delta': '3 days, 6:16:33', 'additions': 119, 'deletions': 0, 'state': 'closed'}]"
