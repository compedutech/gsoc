pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1446264843,add multicast support,"This adds multicast support to the mavesp8266 firmware. The user can select between unicast and multicast mode using the web interface and specify the multicast ip and the port. The multicast functionality works only when the esp module is connected to an access point using the STA interface. When doing multicast, the esp modules can communicate with each other on the specified multicast ip and port. 
The default multicast ip and port are `239.255.145.50` and `14550` respectively.
The user can connect mavproxy to all the vehicles in multicast mode using the command `mavproxy.py --master mcast: --console --map` (if the multicast ip and port are set to default and the gcs is also connected to the same access point).
![image](https://github.com/ArduPilot/mavesp8266/assets/67995771/7cde78cb-c892-40fe-8e89-0fa3af4ca3a1)

",False,11,https://api.github.com/repos/ArduPilot/mavesp8266/pulls/11,https://github.com/ArduPilot/mavesp8266/pull/11,open,151,45,5,2,2,2,0,0,[],2023-07-24 08:24:03+00:00,,0.0,,"[{'comment_id': 1303812298, 'comment_body': 'Should we really change the default?\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 5, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1306317799, 'comment_body': 'As discussed on discord, we are not changing any defaults here. Thanks.', 'comment_created': datetime.datetime(2023, 8, 26, 4, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': 'c04803aab5b61999f4b4b10b4b74b16b68b00b51', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96c0ce1a72dbdef1e2c9aa1226820b3b117f6d9', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1446264843,add multicast support,"This adds multicast support to the mavesp8266 firmware. The user can select between unicast and multicast mode using the web interface and specify the multicast ip and the port. The multicast functionality works only when the esp module is connected to an access point using the STA interface. When doing multicast, the esp modules can communicate with each other on the specified multicast ip and port. 
The default multicast ip and port are `239.255.145.50` and `14550` respectively.
The user can connect mavproxy to all the vehicles in multicast mode using the command `mavproxy.py --master mcast: --console --map` (if the multicast ip and port are set to default and the gcs is also connected to the same access point).
![image](https://github.com/ArduPilot/mavesp8266/assets/67995771/7cde78cb-c892-40fe-8e89-0fa3af4ca3a1)

",False,11,https://api.github.com/repos/ArduPilot/mavesp8266/pulls/11,https://github.com/ArduPilot/mavesp8266/pull/11,open,151,45,5,2,2,2,0,0,[],2023-07-24 08:24:03+00:00,,0.0,,"[{'comment_id': 1303812298, 'comment_body': 'Should we really change the default?\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 5, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1306317799, 'comment_body': 'As discussed on discord, we are not changing any defaults here. Thanks.', 'comment_created': datetime.datetime(2023, 8, 26, 4, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': 'c04803aab5b61999f4b4b10b4b74b16b68b00b51', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96c0ce1a72dbdef1e2c9aa1226820b3b117f6d9', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1446264843,add multicast support,"This adds multicast support to the mavesp8266 firmware. The user can select between unicast and multicast mode using the web interface and specify the multicast ip and the port. The multicast functionality works only when the esp module is connected to an access point using the STA interface. When doing multicast, the esp modules can communicate with each other on the specified multicast ip and port. 
The default multicast ip and port are `239.255.145.50` and `14550` respectively.
The user can connect mavproxy to all the vehicles in multicast mode using the command `mavproxy.py --master mcast: --console --map` (if the multicast ip and port are set to default and the gcs is also connected to the same access point).
![image](https://github.com/ArduPilot/mavesp8266/assets/67995771/7cde78cb-c892-40fe-8e89-0fa3af4ca3a1)

",False,11,https://api.github.com/repos/ArduPilot/mavesp8266/pulls/11,https://github.com/ArduPilot/mavesp8266/pull/11,open,151,45,5,2,2,2,0,0,[],2023-07-24 08:24:03+00:00,,0.0,,"[{'comment_id': 1303812298, 'comment_body': 'Should we really change the default?\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 5, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1306317799, 'comment_body': 'As discussed on discord, we are not changing any defaults here. Thanks.', 'comment_created': datetime.datetime(2023, 8, 26, 4, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': 'c04803aab5b61999f4b4b10b4b74b16b68b00b51', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b96c0ce1a72dbdef1e2c9aa1226820b3b117f6d9', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1446277846,Add conservative multicast mode for location sharing,"This provides a _conservative_ multicast mode in esp firmware to allow users to share ONLY the position of vehicles among each other when they are connected to a common access point. The method of establishing communication among the vehicles is similar to the _full_ multicast mode. The esp modules need to be connected to a common access point and have same multicast ip and port. The vehicles would be able to share just the GLOBAL_POS_INT (and FOLLOW_TARGET) messages with each other this way. This would save huge amount of bandwidth. The reduction in traffic would allow more vehicles to be connected using multicast and ensure reliable connection for follow and avoidance purposes.
This should be merged after #11.",False,12,https://api.github.com/repos/ArduPilot/mavesp8266/pulls/12,https://github.com/ArduPilot/mavesp8266/pull/12,closed,181,43,7,2,1,0,0,0,[],2023-07-24 08:32:16+00:00,2023-08-24 12:52:40+00:00,2694024.0,"31 days, 4:20:24",[],"[{'commit_sha': '78f81a8e7e539b790dd30d0907d14877f207af28', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90fc067b98efc42b45ae45078c88880754f7853c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1446277846,Add conservative multicast mode for location sharing,"This provides a _conservative_ multicast mode in esp firmware to allow users to share ONLY the position of vehicles among each other when they are connected to a common access point. The method of establishing communication among the vehicles is similar to the _full_ multicast mode. The esp modules need to be connected to a common access point and have same multicast ip and port. The vehicles would be able to share just the GLOBAL_POS_INT (and FOLLOW_TARGET) messages with each other this way. This would save huge amount of bandwidth. The reduction in traffic would allow more vehicles to be connected using multicast and ensure reliable connection for follow and avoidance purposes.
This should be merged after #11.",False,12,https://api.github.com/repos/ArduPilot/mavesp8266/pulls/12,https://github.com/ArduPilot/mavesp8266/pull/12,closed,181,43,7,2,1,0,0,0,[],2023-07-24 08:32:16+00:00,2023-08-24 12:52:40+00:00,2694024.0,"31 days, 4:20:24",[],"[{'commit_sha': '78f81a8e7e539b790dd30d0907d14877f207af28', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90fc067b98efc42b45ae45078c88880754f7853c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1446277846,Add conservative multicast mode for location sharing,"This provides a _conservative_ multicast mode in esp firmware to allow users to share ONLY the position of vehicles among each other when they are connected to a common access point. The method of establishing communication among the vehicles is similar to the _full_ multicast mode. The esp modules need to be connected to a common access point and have same multicast ip and port. The vehicles would be able to share just the GLOBAL_POS_INT (and FOLLOW_TARGET) messages with each other this way. This would save huge amount of bandwidth. The reduction in traffic would allow more vehicles to be connected using multicast and ensure reliable connection for follow and avoidance purposes.
This should be merged after #11.",False,12,https://api.github.com/repos/ArduPilot/mavesp8266/pulls/12,https://github.com/ArduPilot/mavesp8266/pull/12,closed,181,43,7,2,1,0,0,0,[],2023-07-24 08:32:16+00:00,2023-08-24 12:52:40+00:00,2694024.0,"31 days, 4:20:24",[],"[{'commit_sha': '78f81a8e7e539b790dd30d0907d14877f207af28', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90fc067b98efc42b45ae45078c88880754f7853c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1454638935,AP_LocationDB: add implementation of location database,"This adds a global location database which can be used to store the location (as well other information like velocity, acceleration etc.) of other vehicles in neighborhood of a vehicle. This serves as a central repository for all such information and can be used for many purposes like following vehicles, tracking vehicles, avoiding vehicles etc.
Items can be added to this database from mavlink, ADSB and scripting as sources. This can be extended in future to support more sources. This has been tested thoroughly on SITL and units test for this have also been added to make sure this doesn't break in future.
This is used to implement multicopter avoidance to avoid collisions with neighboring vehicles around a copter.
More about the idea of implementing this database and its use cases are posted in [this](https://discuss.ardupilot.org/t/gsoc-2023-multicopter-swarm-avoidance/102108) blog post.

Should be merged after #24508 ",False,24429,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24429,https://github.com/ArduPilot/ardupilot/pull/24429,open,1688,44,73,22,7,91,1,0,[{'name': 'WikiNeeded'}],2023-07-29 05:57:47+00:00,,0.0,,"[{'comment_id': 1282810315, 'comment_body': '```suggestion\r\n    const bool readonly = ((flags & O_ACCMODE) == O_RDONLY);\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282810491, 'comment_body': '```suggestion\r\n    const uint32_t now = AP_HAL::millis();\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282811171, 'comment_body': 'Move this up and eliminate the local?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282812293, 'comment_body': 'Should this be checking only to see if the O_RDONLY bit is present? i.e. `flags & O_RDONLY`\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282815806, 'comment_body': ""We need a sanity check here that we don't do too many oops.\r\n\r\nCan't have anything that even remotely looks like an infinite loop in here.\r\n\r\nI mean this looks right, but just a check that we don't stay in this loop more that 500 time would be good.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282820191, 'comment_body': '```suggestion\r\n        packet_t packet;\r\n        construct_packet_from_DBItem(packet, item);\r\n```\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282827184, 'comment_body': 'Does the header need to be included in this size?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282829582, 'comment_body': ""```suggestion\r\nvoid AP_Filesystem_LocationDB::construct_packet_from_DBItem(packet_t, AP_LocationDB_Item item)\r\n{   \r\n```\r\n\r\n... and associated changes.\r\n\r\nBasically have the caller allocate the space rather than this function.  Returning large objects on the stack isn't a good signature, but filling in a structure where the caller has made the allocation is better.  The fact that the vast majority of the time that's on the stack in the caller is besides the point :-)\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282832289, 'comment_body': 'perhaps we should put the frame into message?  Caller is unable to tell the frame of the alt ATM...\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282834039, 'comment_body': ""I think we should probably use the populated fields mask rather than relying on the return values here.  If the return value is false after checking the populated field bit then that would be bad and you'd probably just return?\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282835315, 'comment_body': '```suggestion\r\n#include ""AP_LocationDB_config.h""\r\n\r\n#if AP_LOCATIONDB_ENABLED\r\n\r\n#include ""AP_LocationDB.h""\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282836078, 'comment_body': '```suggestion\r\n#define AP_LOCATIONDB_CAPACITY_DEFAULT 100\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282838067, 'comment_body': '```suggestion\r\n        GCS_SEND_TEXT(MAV_SEVERITY_INFO, ""LocationDB init failed . DB size: %u"", _capacity);\r\n```\r\n\r\nsimilarly elsewhere\r\n\r\nYou should be able to get rid of the #if\'s around these after this change.\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282839203, 'comment_body': '```suggestion\r\nvoid AP_LocationDB::update()\r\n{\r\n```\r\n\r\nsimilarly elsewhere\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282839636, 'comment_body': '```suggestion\r\n        // move to next item if we fail to retrieve the current item\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282841297, 'comment_body': ""```suggestion\r\n#if AP_AHRS_ENABLED\r\n```\r\n\r\n... unless that define is set but we're not creating the singleton...\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282842900, 'comment_body': '```suggestion\r\n        }\r\n         // add new position\r\n        _items[_size] = item;\r\n        _size += 1;\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282843751, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282846839, 'comment_body': ""Why is this protection in here and not in `get_item_index`?  A comment indicating the sem must be held before calling `get_item_index` would be appropriate if that's the case.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282850238, 'comment_body': ""Shouldn't we remove the item in this case?\r\n\r\n... also, shouldn't this check be in `update_item_at_index`?\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282865514, 'comment_body': 'Zero is the broadcast ID for mavlink; should it be a valid key?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282869149, 'comment_body': ""I wonder if we should change the balance here by reducing the number of domains we'll ever support.\r\n\r\ni.e. ATM we're using 8 bits for 256 values, which seems over-kill.  We could perhaps use 4 bits and allow the other 4 to be used within the domain-specific part.\r\n\r\nIf so, that probably just means <<28 rather than <<24 here?\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282870129, 'comment_body': '```suggestion\r\n// return 8 bits short message id for mavlink message\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282878458, 'comment_body': 'Why not `sizeof()` here?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282878949, 'comment_body': 'Commented out?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282880992, 'comment_body': ""```suggestion\r\n```\r\n\r\nUnless you're putting an `AP_LocationDB` on the stack (or something truly bizarre) these are implicitly zeroed.\r\n\r\nZeroing here just wastes flash.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 9, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282882174, 'comment_body': 'Do we compile these tests for things other than those two?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 9, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282882455, 'comment_body': 'Is this a sensible include?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 9, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282884476, 'comment_body': ""We have a HAL function to get random numbers, I believe.\r\n\r\nBut... we shouldn't be using random numbers in tests like this unless it is strictly required.  Repeatability is key.  *other* sorts of tests can monte-carlo all they like, but these unit tests shouldn't change run-to-run.\r\n\r\nWhich is to say you should be testing codepaths with crafted identifiers here, not relying on random numbers to explore the space.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 9, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282888162, 'comment_body': '```suggestion\r\n#if AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED\r\n// helper method to construct location database key for an adsb item\r\n```\r\n\r\n... and in the configuration file you would\r\n```\r\n#ifndef AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED\r\n#define AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED HAL_ADSB_ENABLED\r\n#24377 \r\n```\r\n\r\n(and include `AP_ADSB_config.h` in `AP_LocationDB_config.h`)\r\n\r\nSimilarly for the other domains.\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 9, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1284379169, 'comment_body': 'I think yes, we can do this but I followed AP_Filesystem_Mission. Also, what if more bits like O_WRONLY are also set? I mean, it might be due to an error but just in case.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379225, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379264, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379290, 'comment_body': 'Okay. I have replaced it with a for loop with a limit on number of iterations.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379328, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379375, 'comment_body': '> Does the header need to be included in this size?\r\n\r\nI followed AP_Filesystem_Mission and I think the header is not included in the size there.\r\n\r\n\r\n\r\n> Why not `sizeof()` here?\r\n\r\nChanged it. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379417, 'comment_body': 'Ah okay. Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379461, 'comment_body': 'I think that would increase the size of an already huge message.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379494, 'comment_body': 'Fixed it. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379602, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379750, 'comment_body': ""Tried this. Didn't work. The build for unit tests were failing after this change."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379784, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379831, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379978, 'comment_body': ""The code to test if the item is within inclusion radius requires to access a parameter which we can't do if we build for unit tests. Hence, that code needs to be compiled out in that case."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380021, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380262, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380381, 'comment_body': 'Comment added.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380530, 'comment_body': ""> Shouldn't we remove the item in this case?\r\n\r\nIf they are not updated for long enough they would automatically get timed out and hence removed. This gives them a small window to return back so that we do not have to add a new position for them if they just go out of the radius and return back quickly.\r\n\r\n\r\n\r\n> ... also, shouldn't this check be in `update_item_at_index`?\r\n\r\nWe can move that but I think it would be good to check if the item is even inside the radius or not before iterating through the database and finding index for the element. That would just be a lot of extra work for no use if the item is outside the radius."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380572, 'comment_body': 'I have added a check to invalidate the key with 0 as sysid.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380697, 'comment_body': 'Umm yes but that might break things which are already working good :) \r\nA lot of code have been written assuming this key structure and all of that would needed to be changed. Can we leave it for future when we need to increase the length of the domain-specific part of the key?', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380753, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380814, 'comment_body': 'Moved it to AP_LocationDB.cpp', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380876, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284381028, 'comment_body': 'Oops. Sorry. This must a copy and paste error from somewhere.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284381094, 'comment_body': 'Okay. I have removed the use of random numbers from the tests. Thanks for the suggestion.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284381136, 'comment_body': ""Done for ADSB and SCRIPTING domains. Thanks. I couldn't find right define for MAVLINK domain though."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1285130827, 'comment_body': 'Instead of a new define, could you try :\r\n`static constexpr uint8_t AP_LOCATIONDB_ITEM_SIZE = 56;`\r\n\r\nThis has advantages for compile time type validation.\r\n', 'comment_created': datetime.datetime(2023, 8, 5, 22, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285131238, 'comment_body': 'Consider evaluating the functions for `const arguments`, `const` member functions to clarify intent that these are pass-by-value and not modified. \r\n\r\nI see you have used const on some functions, but not consistently. Would you be able to uniformly apply `const` to the `AP_LocationDB.h` file?', 'comment_created': datetime.datetime(2023, 8, 5, 22, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285131573, 'comment_body': ""Any reason this isn't SI units (seconds)? Do you expect users to want to have fractional timeouts?"", 'comment_created': datetime.datetime(2023, 8, 5, 22, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285131615, 'comment_body': 'I would reword to `AP_LocationDB must be null`. It is a singleton.', 'comment_created': datetime.datetime(2023, 8, 5, 22, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285136074, 'comment_body': 'Missing `t` in `represent`', 'comment_created': datetime.datetime(2023, 8, 6, 0, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285149965, 'comment_body': ""I'm wondering why Bendy Ruler should be a friend class? Should we not try to avoid entangling the producer and consumer?"", 'comment_created': datetime.datetime(2023, 8, 6, 4, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timtuxworth', 'type': 'User'}, {'comment_id': 1285150968, 'comment_body': 'We do not give sequential access to the database elements to the outside world. To access any element, we need to have the key to the element. This works good in most of the cases. AP_OABendyRuler needs to access all the elements sequentially and it does not have keys to all the elements. Hence, I have made AP_OABendyRuler a friend class so that it can access the private method `get_item_at_index`', 'comment_created': datetime.datetime(2023, 8, 6, 4, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1285151199, 'comment_body': 'It would be better IMO to provide an iterator that can allow Bendy Ruler (or any consumer) to access the elements sequentially. ', 'comment_created': datetime.datetime(2023, 8, 6, 4, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'timtuxworth', 'type': 'User'}, {'comment_id': 1285246020, 'comment_body': ""This needs to be refined. Ideally it should be enabled based on the features that require it (OA at the moment?). Either way I think we should now avoid putting board size checks in the source code, but instead use whatever is the final result of @peterbarker 's minimal_config.inc"", 'comment_created': datetime.datetime(2023, 8, 6, 17, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'andyp1per', 'type': 'User'}, {'comment_id': 1285260726, 'comment_body': 'Change the header just to this\r\n```python3\r\n#!/usr/bin/env python3\r\n```\r\n\r\nNo need to set the encoding to utf-8 in python3. ', 'comment_created': datetime.datetime(2023, 8, 6, 20, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285294020, 'comment_body': ""> This needs to be refined. Ideally it should be enabled based on the features that require it (OA at the moment?). Either way I think we should now avoid putting board size checks in the source code, but instead use whatever is the final result of @peterbarker 's minimal_config.inc\r\n\r\nI actually suggested this change - previously it was on on all boards, including 1MB boards.\r\n\r\nWe do have some 1MB boards which haven't been minimized yet, and I don't think we can use the minimize files.\r\n\r\nI *have* wondered about how we might remove the BOARD_FLASH_SIZE checks throughout the code, but haven't really come up with any great ideas.  We could add them in the `chibios_hwdef.py` in-line includes, I guess?  In any case, I don't think the pattern I suggested here is uncommon in AP, so do you think we should hold things up here?\r\n"", 'comment_created': datetime.datetime(2023, 8, 7, 1, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1287159846, 'comment_body': 'Fixed. Thanks.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287160632, 'comment_body': ""I've actually removed the define. Thanks for the suggestion though."", 'comment_created': datetime.datetime(2023, 8, 8, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287161677, 'comment_body': ""I've tried adding const to some methods which I could spot. Thanks for the suggestion."", 'comment_created': datetime.datetime(2023, 8, 8, 13, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287162073, 'comment_body': 'Agreed. Unit changed to seconds.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287170190, 'comment_body': ""These wordings are used almost everywhere in AP's code for singletons. Probably this is to tell developers that they are trying to break the singleton pattern by allocating an object to a pointer which is not already null and is pointing to an object of singleton class. I would like to keep this similar to how it is done at other places to maintain consistency. Thanks."", 'comment_created': datetime.datetime(2023, 8, 8, 14, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287172476, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 8, 14, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287376626, 'comment_body': ""Why not make it dependent on the features that are using it? I think these are fairly specific\r\n\r\nAlso shouldn't below be:\r\n```\r\n#define AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED HAL_ADSB_ENABLED &&  AP_LOCATIONDB_ENABLED\r\n```\r\nFor example, otherwise switching it off is hard"", 'comment_created': datetime.datetime(2023, 8, 8, 16, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andyp1per', 'type': 'User'}, {'comment_id': 1287771699, 'comment_body': ""All arguments passed by value can have added const if you don't plan to change them within the scope of the constructor. \r\n```suggestion\r\n    AP_LocationDB_Item(const uint32_t key, const uint32_t timestamp_ms, const Vector3f pos_cm_NEU, const Vector3f vel_cm_NEU, const Vector3f acc_cm_NEU, const float heading_cdeg, const float radius_cm, const uint8_t populated_fields);\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774055, 'comment_body': ""Const member function since it doesn't modify the class, it's a getter. Same for all the getters\r\n```suggestion\r\n    uint32_t get_timestamp_ms() const { return _timestamp_ms; }\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774379, 'comment_body': 'const arguments\r\n```suggestion\r\n    bool add_item(const AP_LocationDB_Item item); // add item to the location database\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 23, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774571, 'comment_body': ""Doesn't modify the class\r\n```suggestion\r\n    bool get_item(const uint32_t key, AP_LocationDB_Item &ret) const;// get item with given key from location database\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774739, 'comment_body': '```suggestion\r\n    bool get_item_index(const uint32_t key, uint16_t &index) const; // get index of a database item with given key\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 23, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287876205, 'comment_body': ""Yep, the individual key domains would probably look something like this:\r\n\r\n```\r\n#define AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED AP_LOCATIONDB_KEYDOMAIN_DEFAULT_ENABLED && HAL_ADSB_ENABLED\r\n```\r\n\r\nThat's the way we're moving with a lot of our libraries.\r\n\r\nWe could potentially make it dependent on whether there's any consume of the data - could you investigate that, @shiv-tyagi , please?\r\n"", 'comment_created': datetime.datetime(2023, 8, 9, 2, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1287962312, 'comment_body': ""I think we can't make this method const as it modifies the value of semaphore internally."", 'comment_created': datetime.datetime(2023, 8, 9, 5, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962579, 'comment_body': 'Same goes here. It needs to acquire a semaphore internally.', 'comment_created': datetime.datetime(2023, 8, 9, 5, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962812, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 9, 5, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962928, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 9, 5, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962992, 'comment_body': 'Done. Thanks.\r\n', 'comment_created': datetime.datetime(2023, 8, 9, 5, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287978892, 'comment_body': 'Thanks for the explanation.', 'comment_created': datetime.datetime(2023, 8, 9, 5, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287979563, 'comment_body': 'Ah ok, worth a shot:)', 'comment_created': datetime.datetime(2023, 8, 9, 5, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287980718, 'comment_body': ""This is a good application for the `mutable` keyword, but it's not allowed in AP. Leave it as-is. "", 'comment_created': datetime.datetime(2023, 8, 9, 5, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287990728, 'comment_body': ""> Yep, the individual key domains would probably look something like this:\r\n\r\nI have applied these changes. Thanks.\r\n\r\n\r\n\r\n> We could potentially make it dependent on whether there's any consume of the data - could you investigate that, @shiv-tyagi , please?\r\n\r\nYes, we can probably make it dependent on MODE_FOLLOW_ENABLED || AC_AVOID_ENABLED."", 'comment_created': datetime.datetime(2023, 8, 9, 6, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1299618815, 'comment_body': 'Update: I tried making AP_LOCATIONDB_ENABLED dependent on AP_FOLLOW_ENABLED (which is one of the consumers of the data) and it did not work out because AP_FOLLOW_ENABLED itself is dependent on AP_LOCATIONDB_ENABLED.', 'comment_created': datetime.datetime(2023, 8, 21, 5, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': '25e7f260944a4272cf77cc19e4d255b1e9b1561a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c911392d26b77177442e4a4cb8f8f2f3bbfb9b', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a464b2b3ab0c96e123eed4c82dd58e13a9604af', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2abeea5b44208c9d65f72f55ee9a65e5384838', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e3611e031a42da771e4a6f47e1ce287e4d88bb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8cc7373bafa2dea5b54d3fad6e813a83b5d35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1943d121165e6c639059e611167f505e5f6ee2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcb09f615e927fa6012504d10ab3ee4e49cf61', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319a7d7f96e24807a3030979843d8d95f508a380', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46659d57619ae7540bc9b0427ab2b1d13bd01c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc11bb23abf60d0b11ab6320c602db14eb34c5a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b143780359afb59083d07543f7108be6b59959', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c620fc6926844460a8ae5ce1b9d082c9303dbc4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4138b147dcd3d2210a7381a64cf1716590ee788', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61945cdb83a4e9bad22b0e36535f9f3dd46b7f6c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fa81646e8b5ace809171c181c67670a1e077e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e970b678492f27684807200f77fbfff938f51f', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d59953c3b9bf52b027e304303567572e010527e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7947b6f01da7bd9926c753e0e328d217a932b9a4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d93c4751d90548eb57a0879db4f84cb1f445c87', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534358a1ddc832f67352978c218346b49f0800f2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb2e91e05a5c33ac6bdd38764e962bf8a6b24', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1454638935,AP_LocationDB: add implementation of location database,"This adds a global location database which can be used to store the location (as well other information like velocity, acceleration etc.) of other vehicles in neighborhood of a vehicle. This serves as a central repository for all such information and can be used for many purposes like following vehicles, tracking vehicles, avoiding vehicles etc.
Items can be added to this database from mavlink, ADSB and scripting as sources. This can be extended in future to support more sources. This has been tested thoroughly on SITL and units test for this have also been added to make sure this doesn't break in future.
This is used to implement multicopter avoidance to avoid collisions with neighboring vehicles around a copter.
More about the idea of implementing this database and its use cases are posted in [this](https://discuss.ardupilot.org/t/gsoc-2023-multicopter-swarm-avoidance/102108) blog post.

Should be merged after #24508 ",False,24429,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24429,https://github.com/ArduPilot/ardupilot/pull/24429,open,1688,44,73,22,7,91,1,0,[{'name': 'WikiNeeded'}],2023-07-29 05:57:47+00:00,,0.0,,"[{'comment_id': 1282810315, 'comment_body': '```suggestion\r\n    const bool readonly = ((flags & O_ACCMODE) == O_RDONLY);\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282810491, 'comment_body': '```suggestion\r\n    const uint32_t now = AP_HAL::millis();\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282811171, 'comment_body': 'Move this up and eliminate the local?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282812293, 'comment_body': 'Should this be checking only to see if the O_RDONLY bit is present? i.e. `flags & O_RDONLY`\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282815806, 'comment_body': ""We need a sanity check here that we don't do too many oops.\r\n\r\nCan't have anything that even remotely looks like an infinite loop in here.\r\n\r\nI mean this looks right, but just a check that we don't stay in this loop more that 500 time would be good.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282820191, 'comment_body': '```suggestion\r\n        packet_t packet;\r\n        construct_packet_from_DBItem(packet, item);\r\n```\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282827184, 'comment_body': 'Does the header need to be included in this size?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282829582, 'comment_body': ""```suggestion\r\nvoid AP_Filesystem_LocationDB::construct_packet_from_DBItem(packet_t, AP_LocationDB_Item item)\r\n{   \r\n```\r\n\r\n... and associated changes.\r\n\r\nBasically have the caller allocate the space rather than this function.  Returning large objects on the stack isn't a good signature, but filling in a structure where the caller has made the allocation is better.  The fact that the vast majority of the time that's on the stack in the caller is besides the point :-)\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282832289, 'comment_body': 'perhaps we should put the frame into message?  Caller is unable to tell the frame of the alt ATM...\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282834039, 'comment_body': ""I think we should probably use the populated fields mask rather than relying on the return values here.  If the return value is false after checking the populated field bit then that would be bad and you'd probably just return?\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282835315, 'comment_body': '```suggestion\r\n#include ""AP_LocationDB_config.h""\r\n\r\n#if AP_LOCATIONDB_ENABLED\r\n\r\n#include ""AP_LocationDB.h""\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282836078, 'comment_body': '```suggestion\r\n#define AP_LOCATIONDB_CAPACITY_DEFAULT 100\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282838067, 'comment_body': '```suggestion\r\n        GCS_SEND_TEXT(MAV_SEVERITY_INFO, ""LocationDB init failed . DB size: %u"", _capacity);\r\n```\r\n\r\nsimilarly elsewhere\r\n\r\nYou should be able to get rid of the #if\'s around these after this change.\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282839203, 'comment_body': '```suggestion\r\nvoid AP_LocationDB::update()\r\n{\r\n```\r\n\r\nsimilarly elsewhere\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282839636, 'comment_body': '```suggestion\r\n        // move to next item if we fail to retrieve the current item\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282841297, 'comment_body': ""```suggestion\r\n#if AP_AHRS_ENABLED\r\n```\r\n\r\n... unless that define is set but we're not creating the singleton...\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282842900, 'comment_body': '```suggestion\r\n        }\r\n         // add new position\r\n        _items[_size] = item;\r\n        _size += 1;\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282843751, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282846839, 'comment_body': ""Why is this protection in here and not in `get_item_index`?  A comment indicating the sem must be held before calling `get_item_index` would be appropriate if that's the case.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282850238, 'comment_body': ""Shouldn't we remove the item in this case?\r\n\r\n... also, shouldn't this check be in `update_item_at_index`?\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282865514, 'comment_body': 'Zero is the broadcast ID for mavlink; should it be a valid key?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282869149, 'comment_body': ""I wonder if we should change the balance here by reducing the number of domains we'll ever support.\r\n\r\ni.e. ATM we're using 8 bits for 256 values, which seems over-kill.  We could perhaps use 4 bits and allow the other 4 to be used within the domain-specific part.\r\n\r\nIf so, that probably just means <<28 rather than <<24 here?\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282870129, 'comment_body': '```suggestion\r\n// return 8 bits short message id for mavlink message\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282878458, 'comment_body': 'Why not `sizeof()` here?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282878949, 'comment_body': 'Commented out?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282880992, 'comment_body': ""```suggestion\r\n```\r\n\r\nUnless you're putting an `AP_LocationDB` on the stack (or something truly bizarre) these are implicitly zeroed.\r\n\r\nZeroing here just wastes flash.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 9, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282882174, 'comment_body': 'Do we compile these tests for things other than those two?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 9, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282882455, 'comment_body': 'Is this a sensible include?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 9, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282884476, 'comment_body': ""We have a HAL function to get random numbers, I believe.\r\n\r\nBut... we shouldn't be using random numbers in tests like this unless it is strictly required.  Repeatability is key.  *other* sorts of tests can monte-carlo all they like, but these unit tests shouldn't change run-to-run.\r\n\r\nWhich is to say you should be testing codepaths with crafted identifiers here, not relying on random numbers to explore the space.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 9, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282888162, 'comment_body': '```suggestion\r\n#if AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED\r\n// helper method to construct location database key for an adsb item\r\n```\r\n\r\n... and in the configuration file you would\r\n```\r\n#ifndef AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED\r\n#define AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED HAL_ADSB_ENABLED\r\n#24377 \r\n```\r\n\r\n(and include `AP_ADSB_config.h` in `AP_LocationDB_config.h`)\r\n\r\nSimilarly for the other domains.\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 9, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1284379169, 'comment_body': 'I think yes, we can do this but I followed AP_Filesystem_Mission. Also, what if more bits like O_WRONLY are also set? I mean, it might be due to an error but just in case.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379225, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379264, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379290, 'comment_body': 'Okay. I have replaced it with a for loop with a limit on number of iterations.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379328, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379375, 'comment_body': '> Does the header need to be included in this size?\r\n\r\nI followed AP_Filesystem_Mission and I think the header is not included in the size there.\r\n\r\n\r\n\r\n> Why not `sizeof()` here?\r\n\r\nChanged it. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379417, 'comment_body': 'Ah okay. Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379461, 'comment_body': 'I think that would increase the size of an already huge message.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379494, 'comment_body': 'Fixed it. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379602, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379750, 'comment_body': ""Tried this. Didn't work. The build for unit tests were failing after this change."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379784, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379831, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379978, 'comment_body': ""The code to test if the item is within inclusion radius requires to access a parameter which we can't do if we build for unit tests. Hence, that code needs to be compiled out in that case."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380021, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380262, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380381, 'comment_body': 'Comment added.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380530, 'comment_body': ""> Shouldn't we remove the item in this case?\r\n\r\nIf they are not updated for long enough they would automatically get timed out and hence removed. This gives them a small window to return back so that we do not have to add a new position for them if they just go out of the radius and return back quickly.\r\n\r\n\r\n\r\n> ... also, shouldn't this check be in `update_item_at_index`?\r\n\r\nWe can move that but I think it would be good to check if the item is even inside the radius or not before iterating through the database and finding index for the element. That would just be a lot of extra work for no use if the item is outside the radius."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380572, 'comment_body': 'I have added a check to invalidate the key with 0 as sysid.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380697, 'comment_body': 'Umm yes but that might break things which are already working good :) \r\nA lot of code have been written assuming this key structure and all of that would needed to be changed. Can we leave it for future when we need to increase the length of the domain-specific part of the key?', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380753, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380814, 'comment_body': 'Moved it to AP_LocationDB.cpp', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380876, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284381028, 'comment_body': 'Oops. Sorry. This must a copy and paste error from somewhere.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284381094, 'comment_body': 'Okay. I have removed the use of random numbers from the tests. Thanks for the suggestion.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284381136, 'comment_body': ""Done for ADSB and SCRIPTING domains. Thanks. I couldn't find right define for MAVLINK domain though."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1285130827, 'comment_body': 'Instead of a new define, could you try :\r\n`static constexpr uint8_t AP_LOCATIONDB_ITEM_SIZE = 56;`\r\n\r\nThis has advantages for compile time type validation.\r\n', 'comment_created': datetime.datetime(2023, 8, 5, 22, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285131238, 'comment_body': 'Consider evaluating the functions for `const arguments`, `const` member functions to clarify intent that these are pass-by-value and not modified. \r\n\r\nI see you have used const on some functions, but not consistently. Would you be able to uniformly apply `const` to the `AP_LocationDB.h` file?', 'comment_created': datetime.datetime(2023, 8, 5, 22, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285131573, 'comment_body': ""Any reason this isn't SI units (seconds)? Do you expect users to want to have fractional timeouts?"", 'comment_created': datetime.datetime(2023, 8, 5, 22, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285131615, 'comment_body': 'I would reword to `AP_LocationDB must be null`. It is a singleton.', 'comment_created': datetime.datetime(2023, 8, 5, 22, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285136074, 'comment_body': 'Missing `t` in `represent`', 'comment_created': datetime.datetime(2023, 8, 6, 0, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285149965, 'comment_body': ""I'm wondering why Bendy Ruler should be a friend class? Should we not try to avoid entangling the producer and consumer?"", 'comment_created': datetime.datetime(2023, 8, 6, 4, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timtuxworth', 'type': 'User'}, {'comment_id': 1285150968, 'comment_body': 'We do not give sequential access to the database elements to the outside world. To access any element, we need to have the key to the element. This works good in most of the cases. AP_OABendyRuler needs to access all the elements sequentially and it does not have keys to all the elements. Hence, I have made AP_OABendyRuler a friend class so that it can access the private method `get_item_at_index`', 'comment_created': datetime.datetime(2023, 8, 6, 4, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1285151199, 'comment_body': 'It would be better IMO to provide an iterator that can allow Bendy Ruler (or any consumer) to access the elements sequentially. ', 'comment_created': datetime.datetime(2023, 8, 6, 4, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'timtuxworth', 'type': 'User'}, {'comment_id': 1285246020, 'comment_body': ""This needs to be refined. Ideally it should be enabled based on the features that require it (OA at the moment?). Either way I think we should now avoid putting board size checks in the source code, but instead use whatever is the final result of @peterbarker 's minimal_config.inc"", 'comment_created': datetime.datetime(2023, 8, 6, 17, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'andyp1per', 'type': 'User'}, {'comment_id': 1285260726, 'comment_body': 'Change the header just to this\r\n```python3\r\n#!/usr/bin/env python3\r\n```\r\n\r\nNo need to set the encoding to utf-8 in python3. ', 'comment_created': datetime.datetime(2023, 8, 6, 20, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285294020, 'comment_body': ""> This needs to be refined. Ideally it should be enabled based on the features that require it (OA at the moment?). Either way I think we should now avoid putting board size checks in the source code, but instead use whatever is the final result of @peterbarker 's minimal_config.inc\r\n\r\nI actually suggested this change - previously it was on on all boards, including 1MB boards.\r\n\r\nWe do have some 1MB boards which haven't been minimized yet, and I don't think we can use the minimize files.\r\n\r\nI *have* wondered about how we might remove the BOARD_FLASH_SIZE checks throughout the code, but haven't really come up with any great ideas.  We could add them in the `chibios_hwdef.py` in-line includes, I guess?  In any case, I don't think the pattern I suggested here is uncommon in AP, so do you think we should hold things up here?\r\n"", 'comment_created': datetime.datetime(2023, 8, 7, 1, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1287159846, 'comment_body': 'Fixed. Thanks.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287160632, 'comment_body': ""I've actually removed the define. Thanks for the suggestion though."", 'comment_created': datetime.datetime(2023, 8, 8, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287161677, 'comment_body': ""I've tried adding const to some methods which I could spot. Thanks for the suggestion."", 'comment_created': datetime.datetime(2023, 8, 8, 13, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287162073, 'comment_body': 'Agreed. Unit changed to seconds.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287170190, 'comment_body': ""These wordings are used almost everywhere in AP's code for singletons. Probably this is to tell developers that they are trying to break the singleton pattern by allocating an object to a pointer which is not already null and is pointing to an object of singleton class. I would like to keep this similar to how it is done at other places to maintain consistency. Thanks."", 'comment_created': datetime.datetime(2023, 8, 8, 14, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287172476, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 8, 14, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287376626, 'comment_body': ""Why not make it dependent on the features that are using it? I think these are fairly specific\r\n\r\nAlso shouldn't below be:\r\n```\r\n#define AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED HAL_ADSB_ENABLED &&  AP_LOCATIONDB_ENABLED\r\n```\r\nFor example, otherwise switching it off is hard"", 'comment_created': datetime.datetime(2023, 8, 8, 16, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andyp1per', 'type': 'User'}, {'comment_id': 1287771699, 'comment_body': ""All arguments passed by value can have added const if you don't plan to change them within the scope of the constructor. \r\n```suggestion\r\n    AP_LocationDB_Item(const uint32_t key, const uint32_t timestamp_ms, const Vector3f pos_cm_NEU, const Vector3f vel_cm_NEU, const Vector3f acc_cm_NEU, const float heading_cdeg, const float radius_cm, const uint8_t populated_fields);\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774055, 'comment_body': ""Const member function since it doesn't modify the class, it's a getter. Same for all the getters\r\n```suggestion\r\n    uint32_t get_timestamp_ms() const { return _timestamp_ms; }\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774379, 'comment_body': 'const arguments\r\n```suggestion\r\n    bool add_item(const AP_LocationDB_Item item); // add item to the location database\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 23, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774571, 'comment_body': ""Doesn't modify the class\r\n```suggestion\r\n    bool get_item(const uint32_t key, AP_LocationDB_Item &ret) const;// get item with given key from location database\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774739, 'comment_body': '```suggestion\r\n    bool get_item_index(const uint32_t key, uint16_t &index) const; // get index of a database item with given key\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 23, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287876205, 'comment_body': ""Yep, the individual key domains would probably look something like this:\r\n\r\n```\r\n#define AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED AP_LOCATIONDB_KEYDOMAIN_DEFAULT_ENABLED && HAL_ADSB_ENABLED\r\n```\r\n\r\nThat's the way we're moving with a lot of our libraries.\r\n\r\nWe could potentially make it dependent on whether there's any consume of the data - could you investigate that, @shiv-tyagi , please?\r\n"", 'comment_created': datetime.datetime(2023, 8, 9, 2, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1287962312, 'comment_body': ""I think we can't make this method const as it modifies the value of semaphore internally."", 'comment_created': datetime.datetime(2023, 8, 9, 5, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962579, 'comment_body': 'Same goes here. It needs to acquire a semaphore internally.', 'comment_created': datetime.datetime(2023, 8, 9, 5, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962812, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 9, 5, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962928, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 9, 5, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962992, 'comment_body': 'Done. Thanks.\r\n', 'comment_created': datetime.datetime(2023, 8, 9, 5, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287978892, 'comment_body': 'Thanks for the explanation.', 'comment_created': datetime.datetime(2023, 8, 9, 5, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287979563, 'comment_body': 'Ah ok, worth a shot:)', 'comment_created': datetime.datetime(2023, 8, 9, 5, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287980718, 'comment_body': ""This is a good application for the `mutable` keyword, but it's not allowed in AP. Leave it as-is. "", 'comment_created': datetime.datetime(2023, 8, 9, 5, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287990728, 'comment_body': ""> Yep, the individual key domains would probably look something like this:\r\n\r\nI have applied these changes. Thanks.\r\n\r\n\r\n\r\n> We could potentially make it dependent on whether there's any consume of the data - could you investigate that, @shiv-tyagi , please?\r\n\r\nYes, we can probably make it dependent on MODE_FOLLOW_ENABLED || AC_AVOID_ENABLED."", 'comment_created': datetime.datetime(2023, 8, 9, 6, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1299618815, 'comment_body': 'Update: I tried making AP_LOCATIONDB_ENABLED dependent on AP_FOLLOW_ENABLED (which is one of the consumers of the data) and it did not work out because AP_FOLLOW_ENABLED itself is dependent on AP_LOCATIONDB_ENABLED.', 'comment_created': datetime.datetime(2023, 8, 21, 5, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': '25e7f260944a4272cf77cc19e4d255b1e9b1561a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c911392d26b77177442e4a4cb8f8f2f3bbfb9b', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a464b2b3ab0c96e123eed4c82dd58e13a9604af', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2abeea5b44208c9d65f72f55ee9a65e5384838', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e3611e031a42da771e4a6f47e1ce287e4d88bb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8cc7373bafa2dea5b54d3fad6e813a83b5d35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1943d121165e6c639059e611167f505e5f6ee2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcb09f615e927fa6012504d10ab3ee4e49cf61', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319a7d7f96e24807a3030979843d8d95f508a380', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46659d57619ae7540bc9b0427ab2b1d13bd01c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc11bb23abf60d0b11ab6320c602db14eb34c5a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b143780359afb59083d07543f7108be6b59959', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c620fc6926844460a8ae5ce1b9d082c9303dbc4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4138b147dcd3d2210a7381a64cf1716590ee788', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61945cdb83a4e9bad22b0e36535f9f3dd46b7f6c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fa81646e8b5ace809171c181c67670a1e077e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e970b678492f27684807200f77fbfff938f51f', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d59953c3b9bf52b027e304303567572e010527e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7947b6f01da7bd9926c753e0e328d217a932b9a4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d93c4751d90548eb57a0879db4f84cb1f445c87', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534358a1ddc832f67352978c218346b49f0800f2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb2e91e05a5c33ac6bdd38764e962bf8a6b24', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1454638935,AP_LocationDB: add implementation of location database,"This adds a global location database which can be used to store the location (as well other information like velocity, acceleration etc.) of other vehicles in neighborhood of a vehicle. This serves as a central repository for all such information and can be used for many purposes like following vehicles, tracking vehicles, avoiding vehicles etc.
Items can be added to this database from mavlink, ADSB and scripting as sources. This can be extended in future to support more sources. This has been tested thoroughly on SITL and units test for this have also been added to make sure this doesn't break in future.
This is used to implement multicopter avoidance to avoid collisions with neighboring vehicles around a copter.
More about the idea of implementing this database and its use cases are posted in [this](https://discuss.ardupilot.org/t/gsoc-2023-multicopter-swarm-avoidance/102108) blog post.

Should be merged after #24508 ",False,24429,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24429,https://github.com/ArduPilot/ardupilot/pull/24429,open,1688,44,73,22,7,91,1,0,[{'name': 'WikiNeeded'}],2023-07-29 05:57:47+00:00,,0.0,,"[{'comment_id': 1282810315, 'comment_body': '```suggestion\r\n    const bool readonly = ((flags & O_ACCMODE) == O_RDONLY);\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282810491, 'comment_body': '```suggestion\r\n    const uint32_t now = AP_HAL::millis();\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282811171, 'comment_body': 'Move this up and eliminate the local?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282812293, 'comment_body': 'Should this be checking only to see if the O_RDONLY bit is present? i.e. `flags & O_RDONLY`\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282815806, 'comment_body': ""We need a sanity check here that we don't do too many oops.\r\n\r\nCan't have anything that even remotely looks like an infinite loop in here.\r\n\r\nI mean this looks right, but just a check that we don't stay in this loop more that 500 time would be good.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282820191, 'comment_body': '```suggestion\r\n        packet_t packet;\r\n        construct_packet_from_DBItem(packet, item);\r\n```\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282827184, 'comment_body': 'Does the header need to be included in this size?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282829582, 'comment_body': ""```suggestion\r\nvoid AP_Filesystem_LocationDB::construct_packet_from_DBItem(packet_t, AP_LocationDB_Item item)\r\n{   \r\n```\r\n\r\n... and associated changes.\r\n\r\nBasically have the caller allocate the space rather than this function.  Returning large objects on the stack isn't a good signature, but filling in a structure where the caller has made the allocation is better.  The fact that the vast majority of the time that's on the stack in the caller is besides the point :-)\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282832289, 'comment_body': 'perhaps we should put the frame into message?  Caller is unable to tell the frame of the alt ATM...\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282834039, 'comment_body': ""I think we should probably use the populated fields mask rather than relying on the return values here.  If the return value is false after checking the populated field bit then that would be bad and you'd probably just return?\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282835315, 'comment_body': '```suggestion\r\n#include ""AP_LocationDB_config.h""\r\n\r\n#if AP_LOCATIONDB_ENABLED\r\n\r\n#include ""AP_LocationDB.h""\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282836078, 'comment_body': '```suggestion\r\n#define AP_LOCATIONDB_CAPACITY_DEFAULT 100\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282838067, 'comment_body': '```suggestion\r\n        GCS_SEND_TEXT(MAV_SEVERITY_INFO, ""LocationDB init failed . DB size: %u"", _capacity);\r\n```\r\n\r\nsimilarly elsewhere\r\n\r\nYou should be able to get rid of the #if\'s around these after this change.\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282839203, 'comment_body': '```suggestion\r\nvoid AP_LocationDB::update()\r\n{\r\n```\r\n\r\nsimilarly elsewhere\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282839636, 'comment_body': '```suggestion\r\n        // move to next item if we fail to retrieve the current item\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282841297, 'comment_body': ""```suggestion\r\n#if AP_AHRS_ENABLED\r\n```\r\n\r\n... unless that define is set but we're not creating the singleton...\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282842900, 'comment_body': '```suggestion\r\n        }\r\n         // add new position\r\n        _items[_size] = item;\r\n        _size += 1;\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282843751, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282846839, 'comment_body': ""Why is this protection in here and not in `get_item_index`?  A comment indicating the sem must be held before calling `get_item_index` would be appropriate if that's the case.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282850238, 'comment_body': ""Shouldn't we remove the item in this case?\r\n\r\n... also, shouldn't this check be in `update_item_at_index`?\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282865514, 'comment_body': 'Zero is the broadcast ID for mavlink; should it be a valid key?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282869149, 'comment_body': ""I wonder if we should change the balance here by reducing the number of domains we'll ever support.\r\n\r\ni.e. ATM we're using 8 bits for 256 values, which seems over-kill.  We could perhaps use 4 bits and allow the other 4 to be used within the domain-specific part.\r\n\r\nIf so, that probably just means <<28 rather than <<24 here?\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 8, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282870129, 'comment_body': '```suggestion\r\n// return 8 bits short message id for mavlink message\r\n```', 'comment_created': datetime.datetime(2023, 8, 3, 8, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282878458, 'comment_body': 'Why not `sizeof()` here?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282878949, 'comment_body': 'Commented out?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 8, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282880992, 'comment_body': ""```suggestion\r\n```\r\n\r\nUnless you're putting an `AP_LocationDB` on the stack (or something truly bizarre) these are implicitly zeroed.\r\n\r\nZeroing here just wastes flash.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 9, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282882174, 'comment_body': 'Do we compile these tests for things other than those two?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 9, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282882455, 'comment_body': 'Is this a sensible include?\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 9, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282884476, 'comment_body': ""We have a HAL function to get random numbers, I believe.\r\n\r\nBut... we shouldn't be using random numbers in tests like this unless it is strictly required.  Repeatability is key.  *other* sorts of tests can monte-carlo all they like, but these unit tests shouldn't change run-to-run.\r\n\r\nWhich is to say you should be testing codepaths with crafted identifiers here, not relying on random numbers to explore the space.\r\n"", 'comment_created': datetime.datetime(2023, 8, 3, 9, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1282888162, 'comment_body': '```suggestion\r\n#if AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED\r\n// helper method to construct location database key for an adsb item\r\n```\r\n\r\n... and in the configuration file you would\r\n```\r\n#ifndef AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED\r\n#define AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED HAL_ADSB_ENABLED\r\n#24377 \r\n```\r\n\r\n(and include `AP_ADSB_config.h` in `AP_LocationDB_config.h`)\r\n\r\nSimilarly for the other domains.\r\n', 'comment_created': datetime.datetime(2023, 8, 3, 9, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1284379169, 'comment_body': 'I think yes, we can do this but I followed AP_Filesystem_Mission. Also, what if more bits like O_WRONLY are also set? I mean, it might be due to an error but just in case.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379225, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379264, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379290, 'comment_body': 'Okay. I have replaced it with a for loop with a limit on number of iterations.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379328, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379375, 'comment_body': '> Does the header need to be included in this size?\r\n\r\nI followed AP_Filesystem_Mission and I think the header is not included in the size there.\r\n\r\n\r\n\r\n> Why not `sizeof()` here?\r\n\r\nChanged it. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379417, 'comment_body': 'Ah okay. Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379461, 'comment_body': 'I think that would increase the size of an already huge message.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379494, 'comment_body': 'Fixed it. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379602, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379750, 'comment_body': ""Tried this. Didn't work. The build for unit tests were failing after this change."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379784, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379831, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284379978, 'comment_body': ""The code to test if the item is within inclusion radius requires to access a parameter which we can't do if we build for unit tests. Hence, that code needs to be compiled out in that case."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380021, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380262, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380381, 'comment_body': 'Comment added.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380530, 'comment_body': ""> Shouldn't we remove the item in this case?\r\n\r\nIf they are not updated for long enough they would automatically get timed out and hence removed. This gives them a small window to return back so that we do not have to add a new position for them if they just go out of the radius and return back quickly.\r\n\r\n\r\n\r\n> ... also, shouldn't this check be in `update_item_at_index`?\r\n\r\nWe can move that but I think it would be good to check if the item is even inside the radius or not before iterating through the database and finding index for the element. That would just be a lot of extra work for no use if the item is outside the radius."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380572, 'comment_body': 'I have added a check to invalidate the key with 0 as sysid.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380697, 'comment_body': 'Umm yes but that might break things which are already working good :) \r\nA lot of code have been written assuming this key structure and all of that would needed to be changed. Can we leave it for future when we need to increase the length of the domain-specific part of the key?', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380753, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380814, 'comment_body': 'Moved it to AP_LocationDB.cpp', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284380876, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284381028, 'comment_body': 'Oops. Sorry. This must a copy and paste error from somewhere.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284381094, 'comment_body': 'Okay. I have removed the use of random numbers from the tests. Thanks for the suggestion.', 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1284381136, 'comment_body': ""Done for ADSB and SCRIPTING domains. Thanks. I couldn't find right define for MAVLINK domain though."", 'comment_created': datetime.datetime(2023, 8, 4, 12, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1285130827, 'comment_body': 'Instead of a new define, could you try :\r\n`static constexpr uint8_t AP_LOCATIONDB_ITEM_SIZE = 56;`\r\n\r\nThis has advantages for compile time type validation.\r\n', 'comment_created': datetime.datetime(2023, 8, 5, 22, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285131238, 'comment_body': 'Consider evaluating the functions for `const arguments`, `const` member functions to clarify intent that these are pass-by-value and not modified. \r\n\r\nI see you have used const on some functions, but not consistently. Would you be able to uniformly apply `const` to the `AP_LocationDB.h` file?', 'comment_created': datetime.datetime(2023, 8, 5, 22, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285131573, 'comment_body': ""Any reason this isn't SI units (seconds)? Do you expect users to want to have fractional timeouts?"", 'comment_created': datetime.datetime(2023, 8, 5, 22, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285131615, 'comment_body': 'I would reword to `AP_LocationDB must be null`. It is a singleton.', 'comment_created': datetime.datetime(2023, 8, 5, 22, 56, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285136074, 'comment_body': 'Missing `t` in `represent`', 'comment_created': datetime.datetime(2023, 8, 6, 0, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285149965, 'comment_body': ""I'm wondering why Bendy Ruler should be a friend class? Should we not try to avoid entangling the producer and consumer?"", 'comment_created': datetime.datetime(2023, 8, 6, 4, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'timtuxworth', 'type': 'User'}, {'comment_id': 1285150968, 'comment_body': 'We do not give sequential access to the database elements to the outside world. To access any element, we need to have the key to the element. This works good in most of the cases. AP_OABendyRuler needs to access all the elements sequentially and it does not have keys to all the elements. Hence, I have made AP_OABendyRuler a friend class so that it can access the private method `get_item_at_index`', 'comment_created': datetime.datetime(2023, 8, 6, 4, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1285151199, 'comment_body': 'It would be better IMO to provide an iterator that can allow Bendy Ruler (or any consumer) to access the elements sequentially. ', 'comment_created': datetime.datetime(2023, 8, 6, 4, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'timtuxworth', 'type': 'User'}, {'comment_id': 1285246020, 'comment_body': ""This needs to be refined. Ideally it should be enabled based on the features that require it (OA at the moment?). Either way I think we should now avoid putting board size checks in the source code, but instead use whatever is the final result of @peterbarker 's minimal_config.inc"", 'comment_created': datetime.datetime(2023, 8, 6, 17, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'andyp1per', 'type': 'User'}, {'comment_id': 1285260726, 'comment_body': 'Change the header just to this\r\n```python3\r\n#!/usr/bin/env python3\r\n```\r\n\r\nNo need to set the encoding to utf-8 in python3. ', 'comment_created': datetime.datetime(2023, 8, 6, 20, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1285294020, 'comment_body': ""> This needs to be refined. Ideally it should be enabled based on the features that require it (OA at the moment?). Either way I think we should now avoid putting board size checks in the source code, but instead use whatever is the final result of @peterbarker 's minimal_config.inc\r\n\r\nI actually suggested this change - previously it was on on all boards, including 1MB boards.\r\n\r\nWe do have some 1MB boards which haven't been minimized yet, and I don't think we can use the minimize files.\r\n\r\nI *have* wondered about how we might remove the BOARD_FLASH_SIZE checks throughout the code, but haven't really come up with any great ideas.  We could add them in the `chibios_hwdef.py` in-line includes, I guess?  In any case, I don't think the pattern I suggested here is uncommon in AP, so do you think we should hold things up here?\r\n"", 'comment_created': datetime.datetime(2023, 8, 7, 1, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1287159846, 'comment_body': 'Fixed. Thanks.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287160632, 'comment_body': ""I've actually removed the define. Thanks for the suggestion though."", 'comment_created': datetime.datetime(2023, 8, 8, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287161677, 'comment_body': ""I've tried adding const to some methods which I could spot. Thanks for the suggestion."", 'comment_created': datetime.datetime(2023, 8, 8, 13, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287162073, 'comment_body': 'Agreed. Unit changed to seconds.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287170190, 'comment_body': ""These wordings are used almost everywhere in AP's code for singletons. Probably this is to tell developers that they are trying to break the singleton pattern by allocating an object to a pointer which is not already null and is pointing to an object of singleton class. I would like to keep this similar to how it is done at other places to maintain consistency. Thanks."", 'comment_created': datetime.datetime(2023, 8, 8, 14, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287172476, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 8, 14, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287376626, 'comment_body': ""Why not make it dependent on the features that are using it? I think these are fairly specific\r\n\r\nAlso shouldn't below be:\r\n```\r\n#define AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED HAL_ADSB_ENABLED &&  AP_LOCATIONDB_ENABLED\r\n```\r\nFor example, otherwise switching it off is hard"", 'comment_created': datetime.datetime(2023, 8, 8, 16, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andyp1per', 'type': 'User'}, {'comment_id': 1287771699, 'comment_body': ""All arguments passed by value can have added const if you don't plan to change them within the scope of the constructor. \r\n```suggestion\r\n    AP_LocationDB_Item(const uint32_t key, const uint32_t timestamp_ms, const Vector3f pos_cm_NEU, const Vector3f vel_cm_NEU, const Vector3f acc_cm_NEU, const float heading_cdeg, const float radius_cm, const uint8_t populated_fields);\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774055, 'comment_body': ""Const member function since it doesn't modify the class, it's a getter. Same for all the getters\r\n```suggestion\r\n    uint32_t get_timestamp_ms() const { return _timestamp_ms; }\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774379, 'comment_body': 'const arguments\r\n```suggestion\r\n    bool add_item(const AP_LocationDB_Item item); // add item to the location database\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 23, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774571, 'comment_body': ""Doesn't modify the class\r\n```suggestion\r\n    bool get_item(const uint32_t key, AP_LocationDB_Item &ret) const;// get item with given key from location database\r\n```"", 'comment_created': datetime.datetime(2023, 8, 8, 23, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287774739, 'comment_body': '```suggestion\r\n    bool get_item_index(const uint32_t key, uint16_t &index) const; // get index of a database item with given key\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 23, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287876205, 'comment_body': ""Yep, the individual key domains would probably look something like this:\r\n\r\n```\r\n#define AP_LOCATIONDB_KEYDOMAIN_ADSB_ENABLED AP_LOCATIONDB_KEYDOMAIN_DEFAULT_ENABLED && HAL_ADSB_ENABLED\r\n```\r\n\r\nThat's the way we're moving with a lot of our libraries.\r\n\r\nWe could potentially make it dependent on whether there's any consume of the data - could you investigate that, @shiv-tyagi , please?\r\n"", 'comment_created': datetime.datetime(2023, 8, 9, 2, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1287962312, 'comment_body': ""I think we can't make this method const as it modifies the value of semaphore internally."", 'comment_created': datetime.datetime(2023, 8, 9, 5, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962579, 'comment_body': 'Same goes here. It needs to acquire a semaphore internally.', 'comment_created': datetime.datetime(2023, 8, 9, 5, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962812, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 8, 9, 5, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962928, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 9, 5, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287962992, 'comment_body': 'Done. Thanks.\r\n', 'comment_created': datetime.datetime(2023, 8, 9, 5, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1287978892, 'comment_body': 'Thanks for the explanation.', 'comment_created': datetime.datetime(2023, 8, 9, 5, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287979563, 'comment_body': 'Ah ok, worth a shot:)', 'comment_created': datetime.datetime(2023, 8, 9, 5, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287980718, 'comment_body': ""This is a good application for the `mutable` keyword, but it's not allowed in AP. Leave it as-is. "", 'comment_created': datetime.datetime(2023, 8, 9, 5, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1287990728, 'comment_body': ""> Yep, the individual key domains would probably look something like this:\r\n\r\nI have applied these changes. Thanks.\r\n\r\n\r\n\r\n> We could potentially make it dependent on whether there's any consume of the data - could you investigate that, @shiv-tyagi , please?\r\n\r\nYes, we can probably make it dependent on MODE_FOLLOW_ENABLED || AC_AVOID_ENABLED."", 'comment_created': datetime.datetime(2023, 8, 9, 6, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1299618815, 'comment_body': 'Update: I tried making AP_LOCATIONDB_ENABLED dependent on AP_FOLLOW_ENABLED (which is one of the consumers of the data) and it did not work out because AP_FOLLOW_ENABLED itself is dependent on AP_LOCATIONDB_ENABLED.', 'comment_created': datetime.datetime(2023, 8, 21, 5, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': '25e7f260944a4272cf77cc19e4d255b1e9b1561a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c911392d26b77177442e4a4cb8f8f2f3bbfb9b', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a464b2b3ab0c96e123eed4c82dd58e13a9604af', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2abeea5b44208c9d65f72f55ee9a65e5384838', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e3611e031a42da771e4a6f47e1ce287e4d88bb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8cc7373bafa2dea5b54d3fad6e813a83b5d35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1943d121165e6c639059e611167f505e5f6ee2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcb09f615e927fa6012504d10ab3ee4e49cf61', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319a7d7f96e24807a3030979843d8d95f508a380', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46659d57619ae7540bc9b0427ab2b1d13bd01c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc11bb23abf60d0b11ab6320c602db14eb34c5a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b143780359afb59083d07543f7108be6b59959', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c620fc6926844460a8ae5ce1b9d082c9303dbc4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4138b147dcd3d2210a7381a64cf1716590ee788', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61945cdb83a4e9bad22b0e36535f9f3dd46b7f6c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fa81646e8b5ace809171c181c67670a1e077e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e970b678492f27684807200f77fbfff938f51f', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d59953c3b9bf52b027e304303567572e010527e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7947b6f01da7bd9926c753e0e328d217a932b9a4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d93c4751d90548eb57a0879db4f84cb1f445c87', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534358a1ddc832f67352978c218346b49f0800f2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb2e91e05a5c33ac6bdd38764e962bf8a6b24', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1468525831,AP_Follow: use the new AP_LocationDB to follow vehicles ,"
This uses the new AP_LocationDB for following the vehicles. The location database can store information about vehicles from multiple sources like MAVLINK, Scripting and ADSB (these can be extended in future) and we can simply provide the key to an entry for a vehicle in location database to follow it. That means now we can follow ADSB vehicles using AP_Follow. In future we can also integrate AP_AIS to feed information to the location database so that we can even follow an AIS vessel using the same library. I have also provided an option for users to specify a vehicle to follow using the MAVLINK sysid instead of locationdb key (in case the user only wants to use the MAVLINK source). With the mavproxy module for location database (not merged yet), we can simply tell which vehicle to follow just by a click.
This should be merged after #24429.

![IMG_1290](https://github.com/ArduPilot/ardupilot/assets/67995771/f4ee16ea-c622-44a0-a893-3ac3de9721e8)
A screenshot from a sitl test demonstrating how we can specify which vehicle to follow just by a click.",False,24558,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24558,https://github.com/ArduPilot/ardupilot/pull/24558,open,2035,282,79,37,0,16,1,0,[{'name': 'WikiNeeded'}],2023-08-09 12:32:22+00:00,,0.0,,"[{'comment_id': 1303953434, 'comment_body': 'This line should be removed\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303953728, 'comment_body': '```suggestion\r\n#if AP_OAPATHPLANNER_ENABLED\r\n```\r\n\r\netc\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304156750, 'comment_body': 'This PR moves handling of follow messages up to mavlink:https://github.com/ArduPilot/ardupilot/pull/24752\r\n\r\n\r\nCan make this change in just one place then.\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 10, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304157433, 'comment_body': '```suggestion\r\n```\r\n\r\nNo erason not to support it as long.  It will get magically translated by the infrastructure now.\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 10, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304203075, 'comment_body': 'Do we need all of these?\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304204507, 'comment_body': '```suggestion\r\n    bool field_is_populated(DataField option) const {\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 11, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304205519, 'comment_body': '```suggestion\r\n#if AP_LOCATIONDB_KEYDOMAIN_MAVLINK_ENABLED\r\n        MAVLINK = 1U,\r\n#endif\r\n```\r\n\r\n\r\nTh define would be based on HAL_GCS_ENABLED\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304208793, 'comment_body': '```suggestion\r\n        packet.alt / 10,  // mm -> cm\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 11, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304209383, 'comment_body': '```suggestion\r\n    Vector3f vel{packet.vx, packet.vy, -packet.vz};\r\n```\r\n\r\nassuming they are floats already...\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304210190, 'comment_body': '```suggestion\r\n    AP_LocationDB_Item item(key, AP_HAL::millis(), pos, vel, Vector3f{}, packet.hdg, 0, populated_fields);\r\n```\r\n\r\nI think that works...\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1306405740, 'comment_body': 'Removed the redundant ones. Thanks for spotting it out. ', 'comment_created': datetime.datetime(2023, 8, 26, 11, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405779, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405805, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405829, 'comment_body': 'Yes. Looks like it. Thanks.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405906, 'comment_body': 'They are `int16_t` actually.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405927, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': '25e7f260944a4272cf77cc19e4d255b1e9b1561a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c911392d26b77177442e4a4cb8f8f2f3bbfb9b', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a464b2b3ab0c96e123eed4c82dd58e13a9604af', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2abeea5b44208c9d65f72f55ee9a65e5384838', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e3611e031a42da771e4a6f47e1ce287e4d88bb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8cc7373bafa2dea5b54d3fad6e813a83b5d35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1943d121165e6c639059e611167f505e5f6ee2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcb09f615e927fa6012504d10ab3ee4e49cf61', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319a7d7f96e24807a3030979843d8d95f508a380', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46659d57619ae7540bc9b0427ab2b1d13bd01c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc11bb23abf60d0b11ab6320c602db14eb34c5a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b143780359afb59083d07543f7108be6b59959', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c620fc6926844460a8ae5ce1b9d082c9303dbc4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4138b147dcd3d2210a7381a64cf1716590ee788', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61945cdb83a4e9bad22b0e36535f9f3dd46b7f6c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fa81646e8b5ace809171c181c67670a1e077e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e970b678492f27684807200f77fbfff938f51f', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d59953c3b9bf52b027e304303567572e010527e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7947b6f01da7bd9926c753e0e328d217a932b9a4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d93c4751d90548eb57a0879db4f84cb1f445c87', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534358a1ddc832f67352978c218346b49f0800f2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb2e91e05a5c33ac6bdd38764e962bf8a6b24', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3901281c7d0c4fe24d679786217ec4e15df5a5', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b13561a535cee2e93469f927059021c16c36fbb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e3cd0fd38e98728de1295ad8eb12956c2f0a35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5ed1dab860dab0f4e661d8570e4bb205624896', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d2387f2f3f7c2bc455ba65e9c77f365f8fad818', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56310e3c913b70980966e869bd9526394e92bfc1', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d791592d450171268c9ce61673f0da8051fd5d', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c79fbcfeda1cdd189586cf93d55725acfe25dda', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6807bf5865ac016e3b228a25bd160947d395b907', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ebcf424e59abb1816a498ec14a2ee2a3e39d9c1', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e6d0437a97a18d34f8825095b23179b81116744', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ab4c649dbff7ebbf33588455380ca50551adcb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc76f9c5b8369777cdba27fcdfcfaaf4c29a85a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6c5fd85bf5c2d341e70a0128e9f69a7ca096ab7', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7720cd912ea74e719ab7110695fdd3c52443f6a3', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1468525831,AP_Follow: use the new AP_LocationDB to follow vehicles ,"
This uses the new AP_LocationDB for following the vehicles. The location database can store information about vehicles from multiple sources like MAVLINK, Scripting and ADSB (these can be extended in future) and we can simply provide the key to an entry for a vehicle in location database to follow it. That means now we can follow ADSB vehicles using AP_Follow. In future we can also integrate AP_AIS to feed information to the location database so that we can even follow an AIS vessel using the same library. I have also provided an option for users to specify a vehicle to follow using the MAVLINK sysid instead of locationdb key (in case the user only wants to use the MAVLINK source). With the mavproxy module for location database (not merged yet), we can simply tell which vehicle to follow just by a click.
This should be merged after #24429.

![IMG_1290](https://github.com/ArduPilot/ardupilot/assets/67995771/f4ee16ea-c622-44a0-a893-3ac3de9721e8)
A screenshot from a sitl test demonstrating how we can specify which vehicle to follow just by a click.",False,24558,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24558,https://github.com/ArduPilot/ardupilot/pull/24558,open,2035,282,79,37,0,16,1,0,[{'name': 'WikiNeeded'}],2023-08-09 12:32:22+00:00,,0.0,,"[{'comment_id': 1303953434, 'comment_body': 'This line should be removed\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303953728, 'comment_body': '```suggestion\r\n#if AP_OAPATHPLANNER_ENABLED\r\n```\r\n\r\netc\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304156750, 'comment_body': 'This PR moves handling of follow messages up to mavlink:https://github.com/ArduPilot/ardupilot/pull/24752\r\n\r\n\r\nCan make this change in just one place then.\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 10, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304157433, 'comment_body': '```suggestion\r\n```\r\n\r\nNo erason not to support it as long.  It will get magically translated by the infrastructure now.\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 10, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304203075, 'comment_body': 'Do we need all of these?\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304204507, 'comment_body': '```suggestion\r\n    bool field_is_populated(DataField option) const {\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 11, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304205519, 'comment_body': '```suggestion\r\n#if AP_LOCATIONDB_KEYDOMAIN_MAVLINK_ENABLED\r\n        MAVLINK = 1U,\r\n#endif\r\n```\r\n\r\n\r\nTh define would be based on HAL_GCS_ENABLED\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304208793, 'comment_body': '```suggestion\r\n        packet.alt / 10,  // mm -> cm\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 11, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304209383, 'comment_body': '```suggestion\r\n    Vector3f vel{packet.vx, packet.vy, -packet.vz};\r\n```\r\n\r\nassuming they are floats already...\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304210190, 'comment_body': '```suggestion\r\n    AP_LocationDB_Item item(key, AP_HAL::millis(), pos, vel, Vector3f{}, packet.hdg, 0, populated_fields);\r\n```\r\n\r\nI think that works...\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1306405740, 'comment_body': 'Removed the redundant ones. Thanks for spotting it out. ', 'comment_created': datetime.datetime(2023, 8, 26, 11, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405779, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405805, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405829, 'comment_body': 'Yes. Looks like it. Thanks.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405906, 'comment_body': 'They are `int16_t` actually.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405927, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': '25e7f260944a4272cf77cc19e4d255b1e9b1561a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c911392d26b77177442e4a4cb8f8f2f3bbfb9b', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a464b2b3ab0c96e123eed4c82dd58e13a9604af', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2abeea5b44208c9d65f72f55ee9a65e5384838', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e3611e031a42da771e4a6f47e1ce287e4d88bb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8cc7373bafa2dea5b54d3fad6e813a83b5d35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1943d121165e6c639059e611167f505e5f6ee2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcb09f615e927fa6012504d10ab3ee4e49cf61', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319a7d7f96e24807a3030979843d8d95f508a380', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46659d57619ae7540bc9b0427ab2b1d13bd01c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc11bb23abf60d0b11ab6320c602db14eb34c5a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b143780359afb59083d07543f7108be6b59959', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c620fc6926844460a8ae5ce1b9d082c9303dbc4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4138b147dcd3d2210a7381a64cf1716590ee788', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61945cdb83a4e9bad22b0e36535f9f3dd46b7f6c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fa81646e8b5ace809171c181c67670a1e077e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e970b678492f27684807200f77fbfff938f51f', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d59953c3b9bf52b027e304303567572e010527e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7947b6f01da7bd9926c753e0e328d217a932b9a4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d93c4751d90548eb57a0879db4f84cb1f445c87', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534358a1ddc832f67352978c218346b49f0800f2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb2e91e05a5c33ac6bdd38764e962bf8a6b24', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3901281c7d0c4fe24d679786217ec4e15df5a5', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b13561a535cee2e93469f927059021c16c36fbb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e3cd0fd38e98728de1295ad8eb12956c2f0a35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5ed1dab860dab0f4e661d8570e4bb205624896', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d2387f2f3f7c2bc455ba65e9c77f365f8fad818', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56310e3c913b70980966e869bd9526394e92bfc1', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d791592d450171268c9ce61673f0da8051fd5d', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c79fbcfeda1cdd189586cf93d55725acfe25dda', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6807bf5865ac016e3b228a25bd160947d395b907', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ebcf424e59abb1816a498ec14a2ee2a3e39d9c1', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e6d0437a97a18d34f8825095b23179b81116744', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ab4c649dbff7ebbf33588455380ca50551adcb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc76f9c5b8369777cdba27fcdfcfaaf4c29a85a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6c5fd85bf5c2d341e70a0128e9f69a7ca096ab7', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7720cd912ea74e719ab7110695fdd3c52443f6a3', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1468525831,AP_Follow: use the new AP_LocationDB to follow vehicles ,"
This uses the new AP_LocationDB for following the vehicles. The location database can store information about vehicles from multiple sources like MAVLINK, Scripting and ADSB (these can be extended in future) and we can simply provide the key to an entry for a vehicle in location database to follow it. That means now we can follow ADSB vehicles using AP_Follow. In future we can also integrate AP_AIS to feed information to the location database so that we can even follow an AIS vessel using the same library. I have also provided an option for users to specify a vehicle to follow using the MAVLINK sysid instead of locationdb key (in case the user only wants to use the MAVLINK source). With the mavproxy module for location database (not merged yet), we can simply tell which vehicle to follow just by a click.
This should be merged after #24429.

![IMG_1290](https://github.com/ArduPilot/ardupilot/assets/67995771/f4ee16ea-c622-44a0-a893-3ac3de9721e8)
A screenshot from a sitl test demonstrating how we can specify which vehicle to follow just by a click.",False,24558,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24558,https://github.com/ArduPilot/ardupilot/pull/24558,open,2035,282,79,37,0,16,1,0,[{'name': 'WikiNeeded'}],2023-08-09 12:32:22+00:00,,0.0,,"[{'comment_id': 1303953434, 'comment_body': 'This line should be removed\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303953728, 'comment_body': '```suggestion\r\n#if AP_OAPATHPLANNER_ENABLED\r\n```\r\n\r\netc\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304156750, 'comment_body': 'This PR moves handling of follow messages up to mavlink:https://github.com/ArduPilot/ardupilot/pull/24752\r\n\r\n\r\nCan make this change in just one place then.\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 10, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304157433, 'comment_body': '```suggestion\r\n```\r\n\r\nNo erason not to support it as long.  It will get magically translated by the infrastructure now.\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 10, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304203075, 'comment_body': 'Do we need all of these?\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304204507, 'comment_body': '```suggestion\r\n    bool field_is_populated(DataField option) const {\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 11, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304205519, 'comment_body': '```suggestion\r\n#if AP_LOCATIONDB_KEYDOMAIN_MAVLINK_ENABLED\r\n        MAVLINK = 1U,\r\n#endif\r\n```\r\n\r\n\r\nTh define would be based on HAL_GCS_ENABLED\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304208793, 'comment_body': '```suggestion\r\n        packet.alt / 10,  // mm -> cm\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 11, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304209383, 'comment_body': '```suggestion\r\n    Vector3f vel{packet.vx, packet.vy, -packet.vz};\r\n```\r\n\r\nassuming they are floats already...\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304210190, 'comment_body': '```suggestion\r\n    AP_LocationDB_Item item(key, AP_HAL::millis(), pos, vel, Vector3f{}, packet.hdg, 0, populated_fields);\r\n```\r\n\r\nI think that works...\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 11, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1306405740, 'comment_body': 'Removed the redundant ones. Thanks for spotting it out. ', 'comment_created': datetime.datetime(2023, 8, 26, 11, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405779, 'comment_body': 'Changed.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405805, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405829, 'comment_body': 'Yes. Looks like it. Thanks.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405906, 'comment_body': 'They are `int16_t` actually.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1306405927, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 26, 11, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': '25e7f260944a4272cf77cc19e4d255b1e9b1561a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c911392d26b77177442e4a4cb8f8f2f3bbfb9b', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a464b2b3ab0c96e123eed4c82dd58e13a9604af', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2abeea5b44208c9d65f72f55ee9a65e5384838', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e3611e031a42da771e4a6f47e1ce287e4d88bb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8cc7373bafa2dea5b54d3fad6e813a83b5d35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1943d121165e6c639059e611167f505e5f6ee2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcb09f615e927fa6012504d10ab3ee4e49cf61', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319a7d7f96e24807a3030979843d8d95f508a380', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46659d57619ae7540bc9b0427ab2b1d13bd01c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc11bb23abf60d0b11ab6320c602db14eb34c5a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b143780359afb59083d07543f7108be6b59959', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c620fc6926844460a8ae5ce1b9d082c9303dbc4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4138b147dcd3d2210a7381a64cf1716590ee788', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61945cdb83a4e9bad22b0e36535f9f3dd46b7f6c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fa81646e8b5ace809171c181c67670a1e077e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e970b678492f27684807200f77fbfff938f51f', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d59953c3b9bf52b027e304303567572e010527e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7947b6f01da7bd9926c753e0e328d217a932b9a4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d93c4751d90548eb57a0879db4f84cb1f445c87', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534358a1ddc832f67352978c218346b49f0800f2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb2e91e05a5c33ac6bdd38764e962bf8a6b24', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3901281c7d0c4fe24d679786217ec4e15df5a5', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b13561a535cee2e93469f927059021c16c36fbb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e3cd0fd38e98728de1295ad8eb12956c2f0a35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5ed1dab860dab0f4e661d8570e4bb205624896', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d2387f2f3f7c2bc455ba65e9c77f365f8fad818', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56310e3c913b70980966e869bd9526394e92bfc1', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65d791592d450171268c9ce61673f0da8051fd5d', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c79fbcfeda1cdd189586cf93d55725acfe25dda', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6807bf5865ac016e3b228a25bd160947d395b907', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ebcf424e59abb1816a498ec14a2ee2a3e39d9c1', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e6d0437a97a18d34f8825095b23179b81116744', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ab4c649dbff7ebbf33588455380ca50551adcb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc76f9c5b8369777cdba27fcdfcfaaf4c29a85a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6c5fd85bf5c2d341e70a0128e9f69a7ca096ab7', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7720cd912ea74e719ab7110695fdd3c52443f6a3', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1468751716,mavproxy_locdb.py: add a module to fetch locationdb items,"This adds a module to visualise AP_LocationDB objects on mavproxy map. The transfer of the database items happens through ftp. 
The PR to add location database to AP is [here](https://github.com/ArduPilot/ardupilot/pull/24429).",False,1219,https://api.github.com/repos/ArduPilot/MAVProxy/pulls/1219,https://github.com/ArduPilot/MAVProxy/pull/1219,open,199,0,1,1,1,8,0,0,[],2023-08-09 14:33:21+00:00,,0.0,,"[{'comment_id': 1303940337, 'comment_body': 'Duplicate includes.\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303943581, 'comment_body': ""Put a carriage return after the open parenthesis to tidy this (i.e. wrap onto a fresh line so the stuff isn't massively indented)\r\n"", 'comment_created': datetime.datetime(2023, 8, 24, 7, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303945178, 'comment_body': '```suggestion\r\n                if not new_item.onMap:\r\n                    continue\r\n```\r\n\r\n.. and reindent\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303947284, 'comment_body': '```suggestion\r\n        if item.populated_fields & (1 << 0) != 0:\r\n```\r\n\r\netc\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304732995, 'comment_body': 'I have fixed it now. Apologies.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1304733187, 'comment_body': 'Fixed it.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1304737510, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1304737726, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': '9dff8aa144f26f2cf050b3890d41a8e305191eed', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1468751716,mavproxy_locdb.py: add a module to fetch locationdb items,"This adds a module to visualise AP_LocationDB objects on mavproxy map. The transfer of the database items happens through ftp. 
The PR to add location database to AP is [here](https://github.com/ArduPilot/ardupilot/pull/24429).",False,1219,https://api.github.com/repos/ArduPilot/MAVProxy/pulls/1219,https://github.com/ArduPilot/MAVProxy/pull/1219,open,199,0,1,1,1,8,0,0,[],2023-08-09 14:33:21+00:00,,0.0,,"[{'comment_id': 1303940337, 'comment_body': 'Duplicate includes.\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303943581, 'comment_body': ""Put a carriage return after the open parenthesis to tidy this (i.e. wrap onto a fresh line so the stuff isn't massively indented)\r\n"", 'comment_created': datetime.datetime(2023, 8, 24, 7, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303945178, 'comment_body': '```suggestion\r\n                if not new_item.onMap:\r\n                    continue\r\n```\r\n\r\n.. and reindent\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303947284, 'comment_body': '```suggestion\r\n        if item.populated_fields & (1 << 0) != 0:\r\n```\r\n\r\netc\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304732995, 'comment_body': 'I have fixed it now. Apologies.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1304733187, 'comment_body': 'Fixed it.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1304737510, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1304737726, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': '9dff8aa144f26f2cf050b3890d41a8e305191eed', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1468751716,mavproxy_locdb.py: add a module to fetch locationdb items,"This adds a module to visualise AP_LocationDB objects on mavproxy map. The transfer of the database items happens through ftp. 
The PR to add location database to AP is [here](https://github.com/ArduPilot/ardupilot/pull/24429).",False,1219,https://api.github.com/repos/ArduPilot/MAVProxy/pulls/1219,https://github.com/ArduPilot/MAVProxy/pull/1219,open,199,0,1,1,1,8,0,0,[],2023-08-09 14:33:21+00:00,,0.0,,"[{'comment_id': 1303940337, 'comment_body': 'Duplicate includes.\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303943581, 'comment_body': ""Put a carriage return after the open parenthesis to tidy this (i.e. wrap onto a fresh line so the stuff isn't massively indented)\r\n"", 'comment_created': datetime.datetime(2023, 8, 24, 7, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303945178, 'comment_body': '```suggestion\r\n                if not new_item.onMap:\r\n                    continue\r\n```\r\n\r\n.. and reindent\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1303947284, 'comment_body': '```suggestion\r\n        if item.populated_fields & (1 << 0) != 0:\r\n```\r\n\r\netc\r\n', 'comment_created': datetime.datetime(2023, 8, 24, 7, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1304732995, 'comment_body': 'I have fixed it now. Apologies.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1304733187, 'comment_body': 'Fixed it.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1304737510, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}, {'comment_id': 1304737726, 'comment_body': 'Done. Thanks.', 'comment_created': datetime.datetime(2023, 8, 24, 18, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shiv-tyagi', 'type': 'User'}]","[{'commit_sha': '9dff8aa144f26f2cf050b3890d41a8e305191eed', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1464215742,AC_Avoidance: avoid items in location database using BendyRuler,"This adds a method to avoid vehicles in location database using the Bendy Ruler algorithm. This has been tested on sitl as well as on a copter. 
Some video demonstrations of this working in sitl are posted in [this](https://discuss.ardupilot.org/t/gsoc-2023-multicopter-swarm-avoidance/102108) blog post.
This should be merged after #24429.
",False,24517,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24517,https://github.com/ArduPilot/ardupilot/pull/24517,open,1863,45,74,24,0,0,0,0,[],2023-08-06 17:34:03+00:00,,0.0,,[],"[{'commit_sha': '25e7f260944a4272cf77cc19e4d255b1e9b1561a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c911392d26b77177442e4a4cb8f8f2f3bbfb9b', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a464b2b3ab0c96e123eed4c82dd58e13a9604af', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2abeea5b44208c9d65f72f55ee9a65e5384838', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e3611e031a42da771e4a6f47e1ce287e4d88bb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8cc7373bafa2dea5b54d3fad6e813a83b5d35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1943d121165e6c639059e611167f505e5f6ee2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcb09f615e927fa6012504d10ab3ee4e49cf61', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319a7d7f96e24807a3030979843d8d95f508a380', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46659d57619ae7540bc9b0427ab2b1d13bd01c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc11bb23abf60d0b11ab6320c602db14eb34c5a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b143780359afb59083d07543f7108be6b59959', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c620fc6926844460a8ae5ce1b9d082c9303dbc4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4138b147dcd3d2210a7381a64cf1716590ee788', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61945cdb83a4e9bad22b0e36535f9f3dd46b7f6c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fa81646e8b5ace809171c181c67670a1e077e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e970b678492f27684807200f77fbfff938f51f', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d59953c3b9bf52b027e304303567572e010527e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7947b6f01da7bd9926c753e0e328d217a932b9a4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d93c4751d90548eb57a0879db4f84cb1f445c87', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534358a1ddc832f67352978c218346b49f0800f2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb2e91e05a5c33ac6bdd38764e962bf8a6b24', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7ad42530b4968e0ca16b1edec086711d6fb62b8', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b31df19fff41dd3ee900b69c1160a2bdae31a0', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1464215742,AC_Avoidance: avoid items in location database using BendyRuler,"This adds a method to avoid vehicles in location database using the Bendy Ruler algorithm. This has been tested on sitl as well as on a copter. 
Some video demonstrations of this working in sitl are posted in [this](https://discuss.ardupilot.org/t/gsoc-2023-multicopter-swarm-avoidance/102108) blog post.
This should be merged after #24429.
",False,24517,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24517,https://github.com/ArduPilot/ardupilot/pull/24517,open,1863,45,74,24,0,0,0,0,[],2023-08-06 17:34:03+00:00,,0.0,,[],"[{'commit_sha': '25e7f260944a4272cf77cc19e4d255b1e9b1561a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c911392d26b77177442e4a4cb8f8f2f3bbfb9b', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a464b2b3ab0c96e123eed4c82dd58e13a9604af', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2abeea5b44208c9d65f72f55ee9a65e5384838', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e3611e031a42da771e4a6f47e1ce287e4d88bb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8cc7373bafa2dea5b54d3fad6e813a83b5d35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1943d121165e6c639059e611167f505e5f6ee2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcb09f615e927fa6012504d10ab3ee4e49cf61', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319a7d7f96e24807a3030979843d8d95f508a380', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46659d57619ae7540bc9b0427ab2b1d13bd01c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc11bb23abf60d0b11ab6320c602db14eb34c5a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b143780359afb59083d07543f7108be6b59959', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c620fc6926844460a8ae5ce1b9d082c9303dbc4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4138b147dcd3d2210a7381a64cf1716590ee788', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61945cdb83a4e9bad22b0e36535f9f3dd46b7f6c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fa81646e8b5ace809171c181c67670a1e077e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e970b678492f27684807200f77fbfff938f51f', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d59953c3b9bf52b027e304303567572e010527e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7947b6f01da7bd9926c753e0e328d217a932b9a4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d93c4751d90548eb57a0879db4f84cb1f445c87', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534358a1ddc832f67352978c218346b49f0800f2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb2e91e05a5c33ac6bdd38764e962bf8a6b24', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7ad42530b4968e0ca16b1edec086711d6fb62b8', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b31df19fff41dd3ee900b69c1160a2bdae31a0', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10
1464215742,AC_Avoidance: avoid items in location database using BendyRuler,"This adds a method to avoid vehicles in location database using the Bendy Ruler algorithm. This has been tested on sitl as well as on a copter. 
Some video demonstrations of this working in sitl are posted in [this](https://discuss.ardupilot.org/t/gsoc-2023-multicopter-swarm-avoidance/102108) blog post.
This should be merged after #24429.
",False,24517,https://api.github.com/repos/ArduPilot/ardupilot/pulls/24517,https://github.com/ArduPilot/ardupilot/pull/24517,open,1863,45,74,24,0,0,0,0,[],2023-08-06 17:34:03+00:00,,0.0,,[],"[{'commit_sha': '25e7f260944a4272cf77cc19e4d255b1e9b1561a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c911392d26b77177442e4a4cb8f8f2f3bbfb9b', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a464b2b3ab0c96e123eed4c82dd58e13a9604af', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c2abeea5b44208c9d65f72f55ee9a65e5384838', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3e3611e031a42da771e4a6f47e1ce287e4d88bb', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8cc7373bafa2dea5b54d3fad6e813a83b5d35', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1943d121165e6c639059e611167f505e5f6ee2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bcb09f615e927fa6012504d10ab3ee4e49cf61', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '319a7d7f96e24807a3030979843d8d95f508a380', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a46659d57619ae7540bc9b0427ab2b1d13bd01c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc11bb23abf60d0b11ab6320c602db14eb34c5a', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2b143780359afb59083d07543f7108be6b59959', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c620fc6926844460a8ae5ce1b9d082c9303dbc4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4138b147dcd3d2210a7381a64cf1716590ee788', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61945cdb83a4e9bad22b0e36535f9f3dd46b7f6c', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404fa81646e8b5ace809171c181c67670a1e077e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51e970b678492f27684807200f77fbfff938f51f', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d59953c3b9bf52b027e304303567572e010527e', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7947b6f01da7bd9926c753e0e328d217a932b9a4', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d93c4751d90548eb57a0879db4f84cb1f445c87', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '534358a1ddc832f67352978c218346b49f0800f2', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4eb2e91e05a5c33ac6bdd38764e962bf8a6b24', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7ad42530b4968e0ca16b1edec086711d6fb62b8', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62b31df19fff41dd3ee900b69c1160a2bdae31a0', 'committer_username': 'shiv-tyagi', 'committer_name': 'Shiv Tyagi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 7, 8, 5, 50, 51, tzinfo=datetime.timezone.utc)}]",Shiv Tyagi,67995771,,User,,26,,11,10

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
136599061,mavesp8266,ArduPilot/mavesp8266,C++,29,20,9,8,133,4,3,2,"[{'id': 1446277846, 'number': 12, 'closed': datetime.datetime(2023, 8, 24, 12, 52, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 24, 8, 32, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2694024.0, 'time_delta': '31 days, 4:20:24', 'additions': 181, 'deletions': 43, 'state': 'closed'}, {'id': 1446264843, 'number': 11, 'closed': None, 'created': datetime.datetime(2023, 7, 24, 8, 24, 3, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 151, 'deletions': 45, 'state': 'open'}]"
7512484,ardupilot,ArduPilot/ardupilot,C++,17040,10408,658,1076,64547,2454,71,1024,"[{'id': 1472928136, 'number': 24624, 'closed': None, 'created': datetime.datetime(2023, 8, 12, 15, 26, 56, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 187, 'deletions': 43, 'state': 'open'}, {'id': 1472110274, 'number': 24597, 'closed': datetime.datetime(2023, 8, 14, 23, 57, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 11, 17, 6, 41, tzinfo=datetime.timezone.utc), 'time_taken': 283854.0, 'time_delta': '3 days, 6:50:54', 'additions': 54, 'deletions': 7, 'state': 'closed'}, {'id': 1468525831, 'number': 24558, 'closed': None, 'created': datetime.datetime(2023, 8, 9, 12, 32, 22, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2035, 'deletions': 282, 'state': 'open'}, {'id': 1464215742, 'number': 24517, 'closed': None, 'created': datetime.datetime(2023, 8, 6, 17, 34, 3, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1863, 'deletions': 45, 'state': 'open'}, {'id': 1454638935, 'number': 24429, 'closed': None, 'created': datetime.datetime(2023, 7, 29, 5, 57, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1688, 'deletions': 44, 'state': 'open'}, {'id': 1425084900, 'number': 24244, 'closed': None, 'created': datetime.datetime(2023, 7, 7, 18, 13, 29, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 34, 'deletions': 2, 'state': 'open'}, {'id': 1321459582, 'number': 23558, 'closed': datetime.datetime(2023, 4, 20, 23, 22, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 20, 12, 55, 51, tzinfo=datetime.timezone.utc), 'time_taken': 37602.0, 'time_delta': '10:26:42', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1236786479, 'number': 22898, 'closed': datetime.datetime(2023, 2, 11, 1, 31, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 10, 14, 39, 56, tzinfo=datetime.timezone.utc), 'time_taken': 39067.0, 'time_delta': '10:51:07', 'additions': 13, 'deletions': 3, 'state': 'closed'}, {'id': 1173218816, 'number': 22457, 'closed': None, 'created': datetime.datetime(2022, 12, 21, 6, 14, 39, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 75, 'deletions': 64, 'state': 'open'}, {'id': 1121740478, 'number': 22203, 'closed': None, 'created': datetime.datetime(2022, 11, 14, 17, 45, 46, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 5, 'deletions': 5, 'state': 'open'}, {'id': 1121506717, 'number': 22202, 'closed': datetime.datetime(2022, 11, 17, 4, 46, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 14, 14, 57, 13, tzinfo=datetime.timezone.utc), 'time_taken': 222573.0, 'time_delta': '2 days, 13:49:33', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1111915227, 'number': 22129, 'closed': None, 'created': datetime.datetime(2022, 11, 6, 10, 2, 20, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 9, 'deletions': 5, 'state': 'open'}, {'id': 1090281934, 'number': 21991, 'closed': datetime.datetime(2024, 7, 25, 3, 31, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 18, 6, 22, 32, tzinfo=datetime.timezone.utc), 'time_taken': 55804136.0, 'time_delta': '645 days, 21:08:56', 'additions': 15, 'deletions': 18, 'state': 'closed'}, {'id': 1073759230, 'number': 21856, 'closed': datetime.datetime(2022, 10, 2, 8, 18, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 2, 6, 32, 45, tzinfo=datetime.timezone.utc), 'time_taken': 6338.0, 'time_delta': '1:45:38', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1050291512, 'number': 21672, 'closed': datetime.datetime(2022, 9, 9, 8, 24, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 13, 49, 2, tzinfo=datetime.timezone.utc), 'time_taken': 66937.0, 'time_delta': '18:35:37', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 1050277776, 'number': 21671, 'closed': datetime.datetime(2022, 9, 9, 9, 12, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 13, 41, 27, tzinfo=datetime.timezone.utc), 'time_taken': 70263.0, 'time_delta': '19:31:03', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1045476039, 'number': 21628, 'closed': datetime.datetime(2022, 12, 12, 10, 59, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 13, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 8631665.0, 'time_delta': '99 days, 21:41:05', 'additions': 7, 'deletions': 8, 'state': 'closed'}, {'id': 1031032800, 'number': 21491, 'closed': datetime.datetime(2022, 8, 22, 0, 4, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 19, 11, 5, 19, tzinfo=datetime.timezone.utc), 'time_taken': 219544.0, 'time_delta': '2 days, 12:59:04', 'additions': 11, 'deletions': 25, 'state': 'closed'}, {'id': 1019319687, 'number': 21367, 'closed': datetime.datetime(2022, 8, 18, 12, 47, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 6, 11, 3, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1043064.0, 'time_delta': '12 days, 1:44:24', 'additions': 22, 'deletions': 1, 'state': 'closed'}, {'id': 1015156862, 'number': 21334, 'closed': datetime.datetime(2022, 8, 9, 8, 0, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 13, 57, 58, tzinfo=datetime.timezone.utc), 'time_taken': 583333.0, 'time_delta': '6 days, 18:02:13', 'additions': 28, 'deletions': 28, 'state': 'closed'}, {'id': 992367927, 'number': 21160, 'closed': datetime.datetime(2022, 7, 11, 0, 10, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 10, 7, 23, 36, tzinfo=datetime.timezone.utc), 'time_taken': 60440.0, 'time_delta': '16:47:20', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 988992926, 'number': 21134, 'closed': datetime.datetime(2022, 9, 6, 2, 23, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 15, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 5307919.0, 'time_delta': '61 days, 10:25:19', 'additions': 409, 'deletions': 1, 'state': 'closed'}, {'id': 988980914, 'number': 21133, 'closed': datetime.datetime(2022, 8, 5, 0, 17, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 15, 50, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2536033.0, 'time_delta': '29 days, 8:27:13', 'additions': 3, 'deletions': 4, 'state': 'closed'}, {'id': 988977791, 'number': 21132, 'closed': datetime.datetime(2022, 8, 30, 7, 44, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 15, 47, 33, tzinfo=datetime.timezone.utc), 'time_taken': 4723013.0, 'time_delta': '54 days, 15:56:53', 'additions': 117, 'deletions': 8, 'state': 'closed'}, {'id': 965012608, 'number': 20964, 'closed': datetime.datetime(2022, 6, 13, 0, 6, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 12, 14, 15, 37, tzinfo=datetime.timezone.utc), 'time_taken': 35452.0, 'time_delta': '9:50:52', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 964209858, 'number': 20944, 'closed': datetime.datetime(2022, 6, 16, 2, 43, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 10, 14, 29, 6, tzinfo=datetime.timezone.utc), 'time_taken': 476089.0, 'time_delta': '5 days, 12:14:49', 'additions': 41, 'deletions': 16, 'state': 'closed'}, {'id': 943475262, 'number': 20813, 'closed': None, 'created': datetime.datetime(2022, 5, 21, 16, 21, 21, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 23, 'deletions': 9, 'state': 'open'}, {'id': 919850356, 'number': 20632, 'closed': None, 'created': datetime.datetime(2022, 4, 26, 20, 32, 16, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 16, 'deletions': 4, 'state': 'open'}, {'id': 865056079, 'number': 20183, 'closed': datetime.datetime(2022, 3, 1, 0, 31, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 26, 19, 47, 5, tzinfo=datetime.timezone.utc), 'time_taken': 189845.0, 'time_delta': '2 days, 4:44:05', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 858438629, 'number': 20122, 'closed': datetime.datetime(2022, 2, 28, 23, 55, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 19, 7, 15, 52, tzinfo=datetime.timezone.utc), 'time_taken': 837580.0, 'time_delta': '9 days, 16:39:40', 'additions': 24, 'deletions': 15, 'state': 'closed'}, {'id': 816333387, 'number': 19718, 'closed': None, 'created': datetime.datetime(2022, 1, 7, 12, 20, 57, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 321, 'deletions': 102, 'state': 'open'}, {'id': 813136523, 'number': 19659, 'closed': None, 'created': datetime.datetime(2022, 1, 3, 13, 11, 32, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 83, 'deletions': 20, 'state': 'open'}, {'id': 811782796, 'number': 19637, 'closed': datetime.datetime(2022, 1, 26, 12, 36, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 30, 5, 0, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2360201.0, 'time_delta': '27 days, 7:36:41', 'additions': 83, 'deletions': 29, 'state': 'closed'}, {'id': 809775991, 'number': 19605, 'closed': datetime.datetime(2022, 1, 3, 0, 31, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 24, 16, 15, 25, tzinfo=datetime.timezone.utc), 'time_taken': 807377.0, 'time_delta': '9 days, 8:16:17', 'additions': 0, 'deletions': 17, 'state': 'closed'}, {'id': 807202277, 'number': 19582, 'closed': datetime.datetime(2021, 12, 24, 22, 14, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 21, 5, 19, 26, tzinfo=datetime.timezone.utc), 'time_taken': 320105.0, 'time_delta': '3 days, 16:55:05', 'additions': 293, 'deletions': 173, 'state': 'closed'}, {'id': 805061292, 'number': 19549, 'closed': datetime.datetime(2021, 12, 17, 11, 24, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 17, 5, 37, 7, tzinfo=datetime.timezone.utc), 'time_taken': 20838.0, 'time_delta': '5:47:18', 'additions': 6, 'deletions': 14, 'state': 'closed'}, {'id': 800514228, 'number': 19494, 'closed': datetime.datetime(2021, 12, 12, 22, 24, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 11, 18, 38, 22, tzinfo=datetime.timezone.utc), 'time_taken': 99995.0, 'time_delta': '1 day, 3:46:35', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 797120146, 'number': 19458, 'closed': datetime.datetime(2021, 12, 16, 0, 39, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 7, 17, 2, 37, tzinfo=datetime.timezone.utc), 'time_taken': 718626.0, 'time_delta': '8 days, 7:37:06', 'additions': 0, 'deletions': 451, 'state': 'closed'}, {'id': 786331250, 'number': 19334, 'closed': datetime.datetime(2021, 11, 24, 2, 1, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 22, 18, 52, 21, tzinfo=datetime.timezone.utc), 'time_taken': 112138.0, 'time_delta': '1 day, 7:08:58', 'additions': 12, 'deletions': 7, 'state': 'closed'}, {'id': 784332034, 'number': 19307, 'closed': datetime.datetime(2021, 12, 1, 8, 16, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 19, 3, 40, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1053375.0, 'time_delta': '12 days, 4:36:15', 'additions': 35, 'deletions': 7, 'state': 'closed'}, {'id': 778746081, 'number': 19227, 'closed': datetime.datetime(2021, 11, 16, 0, 37, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 11, 16, 54, 29, tzinfo=datetime.timezone.utc), 'time_taken': 373362.0, 'time_delta': '4 days, 7:42:42', 'additions': 161, 'deletions': 5, 'state': 'closed'}, {'id': 773083862, 'number': 19146, 'closed': datetime.datetime(2021, 12, 20, 23, 6, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 4, 7, 33, 35, tzinfo=datetime.timezone.utc), 'time_taken': 4030347.0, 'time_delta': '46 days, 15:32:27', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 772055202, 'number': 19129, 'closed': datetime.datetime(2021, 11, 13, 0, 47, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 3, 6, 16, 41, tzinfo=datetime.timezone.utc), 'time_taken': 844259.0, 'time_delta': '9 days, 18:30:59', 'additions': 37, 'deletions': 14, 'state': 'closed'}, {'id': 769749614, 'number': 19083, 'closed': datetime.datetime(2021, 12, 15, 3, 2, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 30, 16, 11, 12, tzinfo=datetime.timezone.utc), 'time_taken': 3927099.0, 'time_delta': '45 days, 10:51:39', 'additions': 1, 'deletions': 37, 'state': 'closed'}, {'id': 768589574, 'number': 19064, 'closed': datetime.datetime(2021, 10, 30, 6, 47, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 28, 18, 7, 57, tzinfo=datetime.timezone.utc), 'time_taken': 131996.0, 'time_delta': '1 day, 12:39:56', 'additions': 17, 'deletions': 1, 'state': 'closed'}, {'id': 766682906, 'number': 19048, 'closed': datetime.datetime(2021, 10, 28, 9, 37, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 26, 17, 13, 47, tzinfo=datetime.timezone.utc), 'time_taken': 145417.0, 'time_delta': '1 day, 16:23:37', 'additions': 19, 'deletions': 37, 'state': 'closed'}, {'id': 764673008, 'number': 19031, 'closed': datetime.datetime(2021, 11, 29, 23, 9, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 23, 12, 15, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3236028.0, 'time_delta': '37 days, 10:53:48', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 763503960, 'number': 19010, 'closed': datetime.datetime(2021, 11, 23, 6, 52, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 21, 17, 43, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2812112.0, 'time_delta': '32 days, 13:08:32', 'additions': 11, 'deletions': 6, 'state': 'closed'}, {'id': 761618503, 'number': 18983, 'closed': datetime.datetime(2021, 12, 17, 0, 58, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 19, 16, 50, 20, tzinfo=datetime.timezone.utc), 'time_taken': 5040479.0, 'time_delta': '58 days, 8:07:59', 'additions': 36, 'deletions': 9, 'state': 'closed'}, {'id': 760537156, 'number': 18972, 'closed': datetime.datetime(2021, 10, 20, 3, 22, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 18, 14, 31, 39, tzinfo=datetime.timezone.utc), 'time_taken': 132670.0, 'time_delta': '1 day, 12:51:10', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 741073930, 'number': 18751, 'closed': datetime.datetime(2021, 10, 3, 13, 21, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 23, 5, 40, 35, tzinfo=datetime.timezone.utc), 'time_taken': 891656.0, 'time_delta': '10 days, 7:40:56', 'additions': 74, 'deletions': 56, 'state': 'closed'}, {'id': 738918436, 'number': 18731, 'closed': datetime.datetime(2021, 9, 27, 23, 54, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 21, 13, 54, 21, tzinfo=datetime.timezone.utc), 'time_taken': 554434.0, 'time_delta': '6 days, 10:00:34', 'additions': 14, 'deletions': 6, 'state': 'closed'}, {'id': 737112472, 'number': 18716, 'closed': datetime.datetime(2021, 11, 13, 2, 52, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 19, 17, 29, 36, tzinfo=datetime.timezone.utc), 'time_taken': 4699382.0, 'time_delta': '54 days, 9:23:02', 'additions': 15, 'deletions': 1, 'state': 'closed'}, {'id': 736836393, 'number': 18702, 'closed': datetime.datetime(2021, 9, 21, 1, 17, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 18, 5, 35, 7, tzinfo=datetime.timezone.utc), 'time_taken': 243723.0, 'time_delta': '2 days, 19:42:03', 'additions': 26, 'deletions': 5, 'state': 'closed'}, {'id': 735669799, 'number': 18685, 'closed': datetime.datetime(2021, 9, 18, 3, 6, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 16, 17, 23, 57, tzinfo=datetime.timezone.utc), 'time_taken': 121347.0, 'time_delta': '1 day, 9:42:27', 'additions': 68, 'deletions': 18, 'state': 'closed'}, {'id': 679882773, 'number': 17899, 'closed': datetime.datetime(2021, 6, 30, 0, 23, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 11, 55, tzinfo=datetime.timezone.utc), 'time_taken': 44904.0, 'time_delta': '12:28:24', 'additions': 35, 'deletions': 35, 'state': 'closed'}, {'id': 679271428, 'number': 17883, 'closed': datetime.datetime(2021, 6, 29, 11, 31, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 18, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 61807.0, 'time_delta': '17:10:07', 'additions': 30, 'deletions': 30, 'state': 'closed'}]"
4198043,MAVProxy,ArduPilot/MAVProxy,Python,667,449,43,123,3163,222,8,41,"[{'id': 1468751716, 'number': 1219, 'closed': None, 'created': datetime.datetime(2023, 8, 9, 14, 33, 21, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 199, 'deletions': 0, 'state': 'open'}]"
