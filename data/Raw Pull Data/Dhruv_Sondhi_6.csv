pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
663807275,Implementing Logging Configuration for Notebook Logging,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to implement a configuration for the Notebook logging such that logging can be turned on, off or set to a particular log level for better information.

**Description**
<!--- Describe your changes in detail -->
This implementation of the logging function allows for the following possible state:
- ***Log_level***, a string value which can be any of the following values: [Notset, Debug, Info, Warning, Error, Critical], allows for logging the output at any of these mention levels 
- Default value has been set to ***""Critical""***, thus no logging output is generated.

Implementation via YAML has also been done. New **log_state** flag is used to control the logging level as well as the state of the logger.
A new **Debug** section has been created for the JSON Schema. This section caters to all the Debugging parameters that can be set for TARDIS configuration. Debug Packets will also be moved here soon after discussion.

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
Allowing for configurable logging levels & state would be a good addition to TARDIS. It would allow for running the simulation without the logs for graphs & other relevant information. Also, gives the opportunity to get only the specified information from the logger for the simulation ie logs of a particular level. 

**Screenshots**

The screenshots here shows some of the different settings & their corresponding output for the logging configuration.

*Without specifying any flag:*
![image](https://user-images.githubusercontent.com/66117751/121484754-27f91700-c9ed-11eb-901a-63144ec01719.png)
The logger doesn't print any information for the Simulation.

*Specifying the `log_state` flag (functional argument) {setting to **""Debug""** Level}:*
![image](https://user-images.githubusercontent.com/66117751/121485106-832b0980-c9ed-11eb-9a76-528b14fe4f97.png)
The simulation runs for 2 iterations. 

*Specifying the `logging_level: ` flag (YAML argument) {setting to **""Warning""** Level}:*
![image](https://user-images.githubusercontent.com/66117751/121485511-e157ec80-c9ed-11eb-8da1-9f428c6163b6.png)
The simulation runs for 2 iterations. 

*Specifying the `logging_level: ` as well as `log_state` flag (functional & YAML argument, both specified) {setting to **""Info""** Level for functional parameter & **""Warning""** Level for YAML}:*
![image](https://user-images.githubusercontent.com/66117751/121485860-3bf14880-c9ee-11eb-9281-a9120ebc98cd.png)
The simulation runs for 2 iterations. 
**Note:** `Log_state & log_state {YAML file parameter} both specified` & `Log_state will be used for Log Level Determination` will be printed for the user to notify that both parameters have been given. Later on this will implemented via a logging statement as well.

**Documentation Preview** : https://dhruvsondhi.github.io/tardis/branch/notebook_logging_config/io/optional/logging_configuration.html

**How has this been tested?**
- [ ] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [x] I have updated the documentation accordingly.
    - [x] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1633,https://api.github.com/repos/tardis-sn/tardis/pulls/1633,https://github.com/tardis-sn/tardis/pull/1633,closed,878,12,11,31,10,115,3,0,"[{'name': 'work in progress üöß'}, {'name': 'feature request :rocket:'}, {'name': 'feature'}]",2021-06-07 18:28:08+00:00,2021-07-01 14:52:12+00:00,2060644.0,"23 days, 20:24:04","[{'comment_id': 648552462, 'comment_body': 'Why has this been moved?', 'comment_created': datetime.datetime(2021, 6, 9, 18, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648553516, 'comment_body': '""Debugging setup for the simulation"" may be more descriptive', 'comment_created': datetime.datetime(2021, 6, 9, 18, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648553832, 'comment_body': '""Logging state for the simulation execution""', 'comment_created': datetime.datetime(2021, 6, 9, 18, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648553984, 'comment_body': 'Are these comments needed?', 'comment_created': datetime.datetime(2021, 6, 9, 18, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648555984, 'comment_body': 'I am not in favour of parameters that have multiple types. It is unclear for the user even with documentation. Instead set a default string e.g. `log_state = ""CRITICAL""`', 'comment_created': datetime.datetime(2021, 6, 9, 18, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648604201, 'comment_body': 'This has been moved because initially the order instantiated the atomic data before the configuration. For accessing values for the **_Logging level_** & **_Logging state_**, we need it through the configuration dictionary. Thus instantiating the config dictionary would allow for passing the required values to the `logging_state()` function. Calling `logging_state()` before the `atom_data` is also important as we are required to capture all the loggers for the simulation. I need to check whether vice versa (ie calling `logging_state` after `atom_data` does the job or not) is valid as well üòÖ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648604577, 'comment_body': 'Absoultely üíØ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648604720, 'comment_body': 'Cool üéê ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648605039, 'comment_body': 'No, I was just testing it. This is a draft PR right now üôÉ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648605552, 'comment_body': 'Sure, easier way to keep track of the logging üöÄ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648608268, 'comment_body': 'These properties will be eventually moved to this Schema for having one place for all the Debugging related setups üòâ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651368994, 'comment_body': 'should this be moved to another module, `util` maybe?', 'comment_created': datetime.datetime(2021, 6, 15, 0, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 651369708, 'comment_body': 'this also seems like a very generic class? Is this from SO? ', 'comment_created': datetime.datetime(2021, 6, 15, 0, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 651427589, 'comment_body': 'Hello @wkerzendorf, this has been implemented taking into consideration the [Filter()](https://docs.python.org/3/library/logging.html#filter-objects) documentation present. The `filter()` function is created using [this](https://docs.python.org/3/howto/logging-cookbook.html#filters-contextual) in mind & some SO discussions for logging level specification. ', 'comment_created': datetime.datetime(2021, 6, 15, 3, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651428035, 'comment_body': 'Sure, but I was thinking that we can restructure this after this gets merged. I will create a new sub module with this Logger as well as the Numba logger for consistency & for easier tracking of the logging present in TARDIS üòÑ ', 'comment_created': datetime.datetime(2021, 6, 15, 3, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654528400, 'comment_body': 'Allows for logging on the specified logging levels', 'comment_created': datetime.datetime(2021, 6, 18, 15, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 654555630, 'comment_body': 'Sure, Done üöÄ \r\n', 'comment_created': datetime.datetime(2021, 6, 18, 16, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654673361, 'comment_body': 'why is this a docstring in the code - should this be an issue. ', 'comment_created': datetime.datetime(2021, 6, 18, 20, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654674088, 'comment_body': 'why are we testing different cases? ', 'comment_created': datetime.datetime(2021, 6, 18, 20, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654674189, 'comment_body': 'upper/lower cases', 'comment_created': datetime.datetime(2021, 6, 18, 20, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654674504, 'comment_body': 'this seems to be a repeat of the parameterize before (in the sense of it should be in a variable', 'comment_created': datetime.datetime(2021, 6, 18, 21, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654751418, 'comment_body': 'Yes, I was thinking about this. I think I can make it such that it accessible to both the cases. \r\nI will also add another test when both are specified ie Functional argument & YAML property üòÑ ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654751532, 'comment_body': 'Yes absolutely. I was testing for different cases for the input values. I will add an expected failure tests for parameters if they are not valid. That way we could test for failures as well. ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654751897, 'comment_body': 'Oh, sorry. I have implemented both of the ways to invoke the logging configurations üòÑ. I will restructure the Docstring to make it meaningful üòâ ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654781318, 'comment_body': 'Yes, made it available for mutliple uses üòâ ', 'comment_created': datetime.datetime(2021, 6, 19, 10, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655378163, 'comment_body': 'Set to 1', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378349, 'comment_body': 'Set to 1, remove atoms below', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378514, 'comment_body': 'Set to a small number', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378684, 'comment_body': 'Set to a small number', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378816, 'comment_body': 'Set to 0', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655405973, 'comment_body': 'Done üöÄ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406136, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406261, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406431, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406630, 'comment_body': 'Done üöÄ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656237105, 'comment_body': 'You need to update your environment, the Python version is now pinned to 3.7.10 so this change is incorrect', 'comment_created': datetime.datetime(2021, 6, 22, 13, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 656237864, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 13, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656255857, 'comment_body': ""<p>I believe that there is a trailing space after TARDIS. Can you remove it?</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='0'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255862, 'comment_body': '<p>Change colon to period at the end of the second line.</p><p>Remove the first for of the second line, so it is ""<strong>TARDIS</strong> allows configuring of the logger...""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'1\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255863, 'comment_body': ""<p>Insert a comma after ).</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='4'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255865, 'comment_body': ""<p>Remove the unnecessary comma after seen.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='8'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255867, 'comment_body': ""<p>Change the comma to a colon.&nbsp;</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='10'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255874, 'comment_body': ""<p>Reword this to below:</p><p>Both <strong>log_state</strong> &amp; <strong>specific</strong> are optional arguments for the <strong>run_tardis()</strong> function, however, if the <strong>specific</strong> argument is used, then <strong>log_state</strong> must be set to a particular level.</p><p>Changes the wording by replacing the period with a however statement, and also moves the comma to be before 'then'.</p><p>Also there is a trailing space at the end of the second sentence.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='11'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255875, 'comment_body': ""<p>Add period after <strong>Critical</strong>.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='13'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255878, 'comment_body': '<p>Insert ""By"" at the beginning of the sentence, and insert ""the"" before the second ""<strong>Info</strong>"".&nbsp;</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'15\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255881, 'comment_body': '<p>Wording of the first sentence can be improved slightly.</p><p> </p><p>The specific argument tells the logger to only capture the log messages that are the level set by the log_state parameter.</p><p> </p><p>Add a comma before and after i.e. so it is ""input, i.e., ""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'17\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255885, 'comment_body': ""<p>Remove the comma after messages.  Change if to when. </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='20'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255888, 'comment_body': '<p>Change Whenever to When. Remove ""Even"".&nbsp;</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'27\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255892, 'comment_body': ""<p>Remove space before and after colon.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='28'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255900, 'comment_body': ""<p>Rewording of the first sentence, removing both commas, moving 'in functionality' for clarity, and changed 'functional argument' to 'parameter'.</p><p> </p><p>The <code>logging_level</code> parameter is similar in functionality to the <code>log_state</code> parameter that can be passed via the <code>run_tardis()</code> function.</p><p> </p><p>Remove the space before the colon. </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='32'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255903, 'comment_body': ""<p>The <code>specific_logging</code> is similar in functionality to the <code>specific</code> parameter that can be passed via the <code>run_tardis()</code> function. It takes <strong>Boolean</strong> values, i.e., True or False. It is an optional parameter.</p><p> </p><p>Reworded to be similar structure as earlier sentence about logging_level. Added commas around i.e.</p><p> </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='37'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255907, 'comment_body': '<p>Insert ""the"" before Debug?</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'38\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255912, 'comment_body': '<p>Change ""an User"" to ""a user"".</p><p> </p><p>Remove ""the arguemnts that is"", so it reads as ""If a user specifies both the parameters..."".</p><p> </p><p>Remove \'then\' after the comma.</p><p> </p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'45\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255916, 'comment_body': ""<p>Remove space before colon.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='46'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255919, 'comment_body': '<p>Remove the i.e. section so it reads ""the <code>config[""debug""][""logging_level""]</code> is set to <code>Debug</code> via the <strong>YAML</strong> file.""</p><p>Reword second sentence to be ""The user will also set the log_state parameter as Info.""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'47\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255921, 'comment_body': '<p>Reword first sentence to be ""A new message can be seen from the execution of the simulation,""</p><p>...</p><p>""that is informing the user which input log level..."".</p><p>Removal trailing space after output.</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'49\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255924, 'comment_body': '<p>Reword this for clarity.</p><p>""In regards to the specific parameter, if any of the config input value is True, then specific logging will be set to True for the simulation output.""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'50\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656294887, 'comment_body': 'You want to remove the comma after parameters, and I think you should re-add the \'then\' before the. I was mistaken to suggest changes your correct ""If..., then..."" structure. That\'s my fault. Both work, but I think your original is better and more consistent than mine.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656296688, 'comment_body': 'add ""the"" so it reads as ""be set to `True` for the simulation output.""', 'comment_created': datetime.datetime(2021, 6, 22, 14, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656355624, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 15, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656357327, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 15, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656426188, 'comment_body': 'Can you remove the space before the colon. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656427130, 'comment_body': 'Can you remove the space before the colon. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656429129, 'comment_body': 'remove the comma after parameter. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656430750, 'comment_body': 'You also need to fix the i.e., it should read ""values for input, i.e., `True` or `False`. You need a comma before and after i.e. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656432043, 'comment_body': 'Slight reword. ""It can be examined in this example that when we kept `specific` to `False`, the captured log output includes all log messages from `DEBUG` and higher logging levels, which is the default behavior of the logger.""\r\n\r\nChanges that I made: remove then and add a comma after `False`, and makes levels plural as there are more than one level. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656433647, 'comment_body': 'remove the "" that there is a new message,"", as it repeats itself currently. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656440182, 'comment_body': 'If you want, you could then remove the final comma and replace it with a colon, and then capitalize the first work on line 467 as another possible syntax route. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656451146, 'comment_body': 'Regardless of i.e. or not, you need a comma after input, as you are expanding/explaining what those Boolean values are. So with the current changes, it would be ""values for input, which are `True` or `False`."" Changed ""that is"" to ""which are"" as it is correct. I don\'t know the exact rule for this other than it sounds much better, to me, to say "", which are `True` or `False`. "" in this case.', 'comment_created': datetime.datetime(2021, 6, 22, 17, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656458962, 'comment_body': ""I don't think this small detail will matter. Though I am not sure üòì "", 'comment_created': datetime.datetime(2021, 6, 22, 17, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656461022, 'comment_body': ""It probably won't üòõ, but it is a simple (and last üòÉ change). I've had a lot of smaller grammar comments as that's what I am good at, but yeah overall it's not big at all. The content of the notebook is, and that's some great content..  "", 'comment_created': datetime.datetime(2021, 6, 22, 18, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656486156, 'comment_body': 'Resolved this üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 18, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656614147, 'comment_body': 'this is not what I meant. ultimately this is not something that you should test, because it should be tested by the string class in python. Users put it in in any form they like and you put it to a specific form (my suggestion `""DeBuG"".lower()`) to the form that you are testing against. ', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656614437, 'comment_body': 'this is a constant. please define it somewhere. ', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656618824, 'comment_body': '`logging_levels` is repeated and should defined as a CONSTANT above and then you can check both. ', 'comment_created': datetime.datetime(2021, 6, 22, 22, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656619655, 'comment_body': 'PEP8 - style guide for classes', 'comment_created': datetime.datetime(2021, 6, 22, 22, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656754745, 'comment_body': 'Yes, Sure. That makes a lot of sense. üòÑ ', 'comment_created': datetime.datetime(2021, 6, 23, 4, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656759125, 'comment_body': 'Resolved üòâ ', 'comment_created': datetime.datetime(2021, 6, 23, 4, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 657111954, 'comment_body': 'Resolved üòÑ ', 'comment_created': datetime.datetime(2021, 6, 23, 13, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 657251370, 'comment_body': 'why is this  changed? Is this necessary? ', 'comment_created': datetime.datetime(2021, 6, 23, 16, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 657286180, 'comment_body': 'No, I made it such that the output was not scrollable, instead in full. I will revert it to its original state üòÑ ', 'comment_created': datetime.datetime(2021, 6, 23, 16, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660685789, 'comment_body': 'Can you add a comment explaining what this list is used for?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660689764, 'comment_body': 'Empty lists evaluate to False, so you can do `if list_of_filter`.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660691034, 'comment_body': 'Otherwise I think `if len(list_of_filter) > 0` is less confusing.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660692944, 'comment_body': 'Can we make a variable for 20 with a descriptive name, like `MAX_LOG_LEVEL`?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660712978, 'comment_body': 'Yes, absolutely, üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660713368, 'comment_body': 'Yes, I was thinking about this but it got under my nose ü§£ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660714464, 'comment_body': 'Yes, actually that number 20 is the numerical `log_level` value of `INFO`. I can compare it with the value of the `Info` log level üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660737530, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660737701, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660737875, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660892309, 'comment_body': 'This conditional passes without error if the specified log level is *not* in the LOGGING_LEVELS dict.  There should be an error raised if a user gives an invalid input.  Similarly, something should happen in line 142.\r\n\r\nThe error message that gets returned should enumerate the valid logging states for the user.', 'comment_created': datetime.datetime(2021, 6, 29, 19, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 660909890, 'comment_body': ""Yes, this is a nice thing to have üòÑ. I have added an `Value Error` which is raised whenever the user doesn't enter a valid value to the `log_state` parameter. \r\nFor the `specific` parameter, I don't think an exception would be needed as it only has boolean states. Log levels are managed by the `log_state` parameter & hence, raising the above exception would suffice for this case as well üòâ "", 'comment_created': datetime.datetime(2021, 6, 29, 19, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661464216, 'comment_body': ""This is unnecessary since iterating over an empty list won't run anything inside the loop"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661472296, 'comment_body': 'This might be a little confusing from an end-user point of view because it will set `specific` to be true if it is specified in the function call or in the config.  You should have the priority for the selection be one or the other, rather than prioritize a value.  Additionally, this might be good reason to make `specific` a kwarg set to `None` by default, then check if a value is provided.  If a value is given, then use that value, if not use the value from config\r\n\r\n```suggestion\r\n         specific = tardis_config[""debug""][""specific""] if specific is None else specific\r\n```\r\n\r\nIn this code example, `specific` would be a keyword arg of the function with default value `None`.  If a value is given by the user, that value is used.  If not, then it uses the value from the config.', 'comment_created': datetime.datetime(2021, 6, 30, 13, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661472617, 'comment_body': 'See Comment about lines 103-106\r\n\r\n```suggestion\r\ndef logging_state(log_state, tardis_config, specific=None):\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 13, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661474688, 'comment_body': ""Again, we shouldn't be prioritizing `True`, we should be prioritizing an option.  So we should either only check the `log_state` or have `log_state` be a kwarg set to `None`  and use a similar pattern to what is above."", 'comment_created': datetime.datetime(2021, 6, 30, 13, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661476474, 'comment_body': ""Doesn't this also happen if `log_state` is defined in both places?  Why no warning here?"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661478398, 'comment_body': 'Instead of calling `<...>.upper() over and over, why not just make the variables uppercase at the start when they are input to the function?', 'comment_created': datetime.datetime(2021, 6, 30, 13, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661480152, 'comment_body': ""Mutable globals aren't generally a great idea and indicate that it might be a good idea to use a class"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661635434, 'comment_body': 'This is invalid code, make sure your tests hit all cases', 'comment_created': datetime.datetime(2021, 6, 30, 16, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661635623, 'comment_body': '```suggestion\r\n    if logging_level in LOGGING_LEVELS:\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 16, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661705715, 'comment_body': 'Yes, absolutely. This change will make it easier for understanding the code & remove the redundancies that I have created via this implemented. Thank you very much for this suggestion üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661706200, 'comment_body': 'Yes, I have changed the way `log_state` now behaves. It has a default value of `None` now üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661707172, 'comment_body': 'Sure, I moved the checking now before the actual setting up of the logging level. Appropriate exception is raised when the `log_state` parameter is not a valid input string üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661707531, 'comment_body': 'Sure, made it such that it is changed to `Upper` case only once üòâ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661707900, 'comment_body': 'Sure, I have made changes such that is taken care in the `run_tardis()` function üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661708029, 'comment_body': '```suggestion\r\n        tardis_config[""debug""][""log_state""] = ""CRITICAL""\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 18, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661708422, 'comment_body': ""Awesome, Thank you for this suggestion. I didn't know about this implementation for checking of the condition üòÑ "", 'comment_created': datetime.datetime(2021, 6, 30, 18, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661709470, 'comment_body': 'Sure, and **CRITICAL** will be made into a global constant value such as `DEFAULT_LOG_STATE` such that it makes more sense why this value has been assigned üòâ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661715195, 'comment_body': 'Resolved üòâ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661716180, 'comment_body': 'Resolved üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661724944, 'comment_body': 'I think so this cannot be done. It is failing the tests again ü§î ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661745739, 'comment_body': 'This list gets populated when we add new filters for logging at a particular level. Thus, this snippet of the code is actually checking that we cannot stack multiple filters such as a case where we are filtering `INFO` based log messages inside `DEBUG` log messages. This removes all the filters before applying a new filter.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661982186, 'comment_body': 'There is a problem with this kind of assignment. What is happening is that when we are assigning the value through `tardis_config[""debug""][""log_state""] = ""CRITICAL""`, it actually checks for the key `debug` & then for `log_state` for assignment. But if the keys are not already present then, it raises `KeyError`. \r\nIn my implementation, I have actually first added the `debug` key then through a dictionary added the value to the `log_state` parameter. Hence, when assigning the value in the subsequent line, the key is actually present & no error is raised.', 'comment_created': datetime.datetime(2021, 7, 1, 5, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': 'b7ac82e05be7e7358e58dbfd83e22258c332c687', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9814e917ba73bce46203602ebc04d94dca99ff', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a856ab0ccef87de35a3b0935837478214ac7ea3c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e06f7863bf2ddd604b674c96ebc41cdef166f2cb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a348d42230438d6da1ed0846b642884dd48b3b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53111dadca1b01d80041f10d69f1ea769b6ef1bf', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2876253a7e4bcfd0a219ffbce9c8af51fc82a42', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4092d47009333d84c9441ffd2beb45d67ec828da', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436b6b5b0c6403cdb8f63332b4d15a61f89a68d4', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ce036bb2132025c699d849d69f5ac0a7ceadcdb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4247835b3f01ec8c5e318df662ba2cbb16445de', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd230d911ea51bbee9dd52d358a51fd70c06eec5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87868955f45176792a90b4b2bf6e279e9e90b7a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b377f077eeb4a0c12580e8adec15825e094ab97', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba4d2c149b49fe0acd253bfad9d273198e390dca', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b6568c09ec7a3f507e16f415b4b412bb3aab85', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1936d5dc63ae3e9a988469d3fa8947f94eae12c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4850ca8e7e6b5b8ff43a439706a26fdbeb05f6', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a4da17d37814e28082d6fd0300a8665119039e1', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a40da76fc303099c05efb312d86a14cc66875369', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c9d7990bd196235a347f9ccb8abd3a6aee2993', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230e4e699a3ec5d71dbc43115109fcda10a8f91c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '928000dddcfb272cde7af54f8935a05d6b7a99bb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d4cb5f3dc8b1690e3e85898dbcbb3155c0b3bd0', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be1da5d1ce48f2fad8b32ff8d96b7ab503504359', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ec785657dfb316bc3b4e62abcfc4cdbdc06067', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ea04ef897de189298da390ce24030a3f821a8e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd947a2a373f8c453f4e19d39400a323beb7ae3b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f63b8d5e97da8a3600e8384bea4a27ae91c25cc7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f23f59ee300bfd8a71b8f132fa8f750059a6552e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37388fc9c0a1ce5942a00f7aee989c31c5761d6c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
663807275,Implementing Logging Configuration for Notebook Logging,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to implement a configuration for the Notebook logging such that logging can be turned on, off or set to a particular log level for better information.

**Description**
<!--- Describe your changes in detail -->
This implementation of the logging function allows for the following possible state:
- ***Log_level***, a string value which can be any of the following values: [Notset, Debug, Info, Warning, Error, Critical], allows for logging the output at any of these mention levels 
- Default value has been set to ***""Critical""***, thus no logging output is generated.

Implementation via YAML has also been done. New **log_state** flag is used to control the logging level as well as the state of the logger.
A new **Debug** section has been created for the JSON Schema. This section caters to all the Debugging parameters that can be set for TARDIS configuration. Debug Packets will also be moved here soon after discussion.

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
Allowing for configurable logging levels & state would be a good addition to TARDIS. It would allow for running the simulation without the logs for graphs & other relevant information. Also, gives the opportunity to get only the specified information from the logger for the simulation ie logs of a particular level. 

**Screenshots**

The screenshots here shows some of the different settings & their corresponding output for the logging configuration.

*Without specifying any flag:*
![image](https://user-images.githubusercontent.com/66117751/121484754-27f91700-c9ed-11eb-901a-63144ec01719.png)
The logger doesn't print any information for the Simulation.

*Specifying the `log_state` flag (functional argument) {setting to **""Debug""** Level}:*
![image](https://user-images.githubusercontent.com/66117751/121485106-832b0980-c9ed-11eb-9a76-528b14fe4f97.png)
The simulation runs for 2 iterations. 

*Specifying the `logging_level: ` flag (YAML argument) {setting to **""Warning""** Level}:*
![image](https://user-images.githubusercontent.com/66117751/121485511-e157ec80-c9ed-11eb-8da1-9f428c6163b6.png)
The simulation runs for 2 iterations. 

*Specifying the `logging_level: ` as well as `log_state` flag (functional & YAML argument, both specified) {setting to **""Info""** Level for functional parameter & **""Warning""** Level for YAML}:*
![image](https://user-images.githubusercontent.com/66117751/121485860-3bf14880-c9ee-11eb-9281-a9120ebc98cd.png)
The simulation runs for 2 iterations. 
**Note:** `Log_state & log_state {YAML file parameter} both specified` & `Log_state will be used for Log Level Determination` will be printed for the user to notify that both parameters have been given. Later on this will implemented via a logging statement as well.

**Documentation Preview** : https://dhruvsondhi.github.io/tardis/branch/notebook_logging_config/io/optional/logging_configuration.html

**How has this been tested?**
- [ ] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [x] I have updated the documentation accordingly.
    - [x] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1633,https://api.github.com/repos/tardis-sn/tardis/pulls/1633,https://github.com/tardis-sn/tardis/pull/1633,closed,878,12,11,31,10,115,3,0,"[{'name': 'work in progress üöß'}, {'name': 'feature request :rocket:'}, {'name': 'feature'}]",2021-06-07 18:28:08+00:00,2021-07-01 14:52:12+00:00,2060644.0,"23 days, 20:24:04","[{'comment_id': 648552462, 'comment_body': 'Why has this been moved?', 'comment_created': datetime.datetime(2021, 6, 9, 18, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648553516, 'comment_body': '""Debugging setup for the simulation"" may be more descriptive', 'comment_created': datetime.datetime(2021, 6, 9, 18, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648553832, 'comment_body': '""Logging state for the simulation execution""', 'comment_created': datetime.datetime(2021, 6, 9, 18, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648553984, 'comment_body': 'Are these comments needed?', 'comment_created': datetime.datetime(2021, 6, 9, 18, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648555984, 'comment_body': 'I am not in favour of parameters that have multiple types. It is unclear for the user even with documentation. Instead set a default string e.g. `log_state = ""CRITICAL""`', 'comment_created': datetime.datetime(2021, 6, 9, 18, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648604201, 'comment_body': 'This has been moved because initially the order instantiated the atomic data before the configuration. For accessing values for the **_Logging level_** & **_Logging state_**, we need it through the configuration dictionary. Thus instantiating the config dictionary would allow for passing the required values to the `logging_state()` function. Calling `logging_state()` before the `atom_data` is also important as we are required to capture all the loggers for the simulation. I need to check whether vice versa (ie calling `logging_state` after `atom_data` does the job or not) is valid as well üòÖ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648604577, 'comment_body': 'Absoultely üíØ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648604720, 'comment_body': 'Cool üéê ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648605039, 'comment_body': 'No, I was just testing it. This is a draft PR right now üôÉ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648605552, 'comment_body': 'Sure, easier way to keep track of the logging üöÄ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648608268, 'comment_body': 'These properties will be eventually moved to this Schema for having one place for all the Debugging related setups üòâ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651368994, 'comment_body': 'should this be moved to another module, `util` maybe?', 'comment_created': datetime.datetime(2021, 6, 15, 0, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 651369708, 'comment_body': 'this also seems like a very generic class? Is this from SO? ', 'comment_created': datetime.datetime(2021, 6, 15, 0, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 651427589, 'comment_body': 'Hello @wkerzendorf, this has been implemented taking into consideration the [Filter()](https://docs.python.org/3/library/logging.html#filter-objects) documentation present. The `filter()` function is created using [this](https://docs.python.org/3/howto/logging-cookbook.html#filters-contextual) in mind & some SO discussions for logging level specification. ', 'comment_created': datetime.datetime(2021, 6, 15, 3, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651428035, 'comment_body': 'Sure, but I was thinking that we can restructure this after this gets merged. I will create a new sub module with this Logger as well as the Numba logger for consistency & for easier tracking of the logging present in TARDIS üòÑ ', 'comment_created': datetime.datetime(2021, 6, 15, 3, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654528400, 'comment_body': 'Allows for logging on the specified logging levels', 'comment_created': datetime.datetime(2021, 6, 18, 15, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 654555630, 'comment_body': 'Sure, Done üöÄ \r\n', 'comment_created': datetime.datetime(2021, 6, 18, 16, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654673361, 'comment_body': 'why is this a docstring in the code - should this be an issue. ', 'comment_created': datetime.datetime(2021, 6, 18, 20, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654674088, 'comment_body': 'why are we testing different cases? ', 'comment_created': datetime.datetime(2021, 6, 18, 20, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654674189, 'comment_body': 'upper/lower cases', 'comment_created': datetime.datetime(2021, 6, 18, 20, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654674504, 'comment_body': 'this seems to be a repeat of the parameterize before (in the sense of it should be in a variable', 'comment_created': datetime.datetime(2021, 6, 18, 21, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654751418, 'comment_body': 'Yes, I was thinking about this. I think I can make it such that it accessible to both the cases. \r\nI will also add another test when both are specified ie Functional argument & YAML property üòÑ ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654751532, 'comment_body': 'Yes absolutely. I was testing for different cases for the input values. I will add an expected failure tests for parameters if they are not valid. That way we could test for failures as well. ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654751897, 'comment_body': 'Oh, sorry. I have implemented both of the ways to invoke the logging configurations üòÑ. I will restructure the Docstring to make it meaningful üòâ ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654781318, 'comment_body': 'Yes, made it available for mutliple uses üòâ ', 'comment_created': datetime.datetime(2021, 6, 19, 10, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655378163, 'comment_body': 'Set to 1', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378349, 'comment_body': 'Set to 1, remove atoms below', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378514, 'comment_body': 'Set to a small number', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378684, 'comment_body': 'Set to a small number', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378816, 'comment_body': 'Set to 0', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655405973, 'comment_body': 'Done üöÄ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406136, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406261, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406431, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406630, 'comment_body': 'Done üöÄ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656237105, 'comment_body': 'You need to update your environment, the Python version is now pinned to 3.7.10 so this change is incorrect', 'comment_created': datetime.datetime(2021, 6, 22, 13, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 656237864, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 13, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656255857, 'comment_body': ""<p>I believe that there is a trailing space after TARDIS. Can you remove it?</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='0'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255862, 'comment_body': '<p>Change colon to period at the end of the second line.</p><p>Remove the first for of the second line, so it is ""<strong>TARDIS</strong> allows configuring of the logger...""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'1\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255863, 'comment_body': ""<p>Insert a comma after ).</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='4'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255865, 'comment_body': ""<p>Remove the unnecessary comma after seen.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='8'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255867, 'comment_body': ""<p>Change the comma to a colon.&nbsp;</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='10'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255874, 'comment_body': ""<p>Reword this to below:</p><p>Both <strong>log_state</strong> &amp; <strong>specific</strong> are optional arguments for the <strong>run_tardis()</strong> function, however, if the <strong>specific</strong> argument is used, then <strong>log_state</strong> must be set to a particular level.</p><p>Changes the wording by replacing the period with a however statement, and also moves the comma to be before 'then'.</p><p>Also there is a trailing space at the end of the second sentence.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='11'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255875, 'comment_body': ""<p>Add period after <strong>Critical</strong>.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='13'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255878, 'comment_body': '<p>Insert ""By"" at the beginning of the sentence, and insert ""the"" before the second ""<strong>Info</strong>"".&nbsp;</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'15\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255881, 'comment_body': '<p>Wording of the first sentence can be improved slightly.</p><p> </p><p>The specific argument tells the logger to only capture the log messages that are the level set by the log_state parameter.</p><p> </p><p>Add a comma before and after i.e. so it is ""input, i.e., ""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'17\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255885, 'comment_body': ""<p>Remove the comma after messages.  Change if to when. </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='20'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255888, 'comment_body': '<p>Change Whenever to When. Remove ""Even"".&nbsp;</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'27\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255892, 'comment_body': ""<p>Remove space before and after colon.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='28'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255900, 'comment_body': ""<p>Rewording of the first sentence, removing both commas, moving 'in functionality' for clarity, and changed 'functional argument' to 'parameter'.</p><p> </p><p>The <code>logging_level</code> parameter is similar in functionality to the <code>log_state</code> parameter that can be passed via the <code>run_tardis()</code> function.</p><p> </p><p>Remove the space before the colon. </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='32'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255903, 'comment_body': ""<p>The <code>specific_logging</code> is similar in functionality to the <code>specific</code> parameter that can be passed via the <code>run_tardis()</code> function. It takes <strong>Boolean</strong> values, i.e., True or False. It is an optional parameter.</p><p> </p><p>Reworded to be similar structure as earlier sentence about logging_level. Added commas around i.e.</p><p> </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='37'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255907, 'comment_body': '<p>Insert ""the"" before Debug?</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'38\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255912, 'comment_body': '<p>Change ""an User"" to ""a user"".</p><p> </p><p>Remove ""the arguemnts that is"", so it reads as ""If a user specifies both the parameters..."".</p><p> </p><p>Remove \'then\' after the comma.</p><p> </p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'45\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255916, 'comment_body': ""<p>Remove space before colon.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='46'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255919, 'comment_body': '<p>Remove the i.e. section so it reads ""the <code>config[""debug""][""logging_level""]</code> is set to <code>Debug</code> via the <strong>YAML</strong> file.""</p><p>Reword second sentence to be ""The user will also set the log_state parameter as Info.""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'47\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255921, 'comment_body': '<p>Reword first sentence to be ""A new message can be seen from the execution of the simulation,""</p><p>...</p><p>""that is informing the user which input log level..."".</p><p>Removal trailing space after output.</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'49\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255924, 'comment_body': '<p>Reword this for clarity.</p><p>""In regards to the specific parameter, if any of the config input value is True, then specific logging will be set to True for the simulation output.""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'50\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656294887, 'comment_body': 'You want to remove the comma after parameters, and I think you should re-add the \'then\' before the. I was mistaken to suggest changes your correct ""If..., then..."" structure. That\'s my fault. Both work, but I think your original is better and more consistent than mine.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656296688, 'comment_body': 'add ""the"" so it reads as ""be set to `True` for the simulation output.""', 'comment_created': datetime.datetime(2021, 6, 22, 14, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656355624, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 15, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656357327, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 15, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656426188, 'comment_body': 'Can you remove the space before the colon. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656427130, 'comment_body': 'Can you remove the space before the colon. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656429129, 'comment_body': 'remove the comma after parameter. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656430750, 'comment_body': 'You also need to fix the i.e., it should read ""values for input, i.e., `True` or `False`. You need a comma before and after i.e. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656432043, 'comment_body': 'Slight reword. ""It can be examined in this example that when we kept `specific` to `False`, the captured log output includes all log messages from `DEBUG` and higher logging levels, which is the default behavior of the logger.""\r\n\r\nChanges that I made: remove then and add a comma after `False`, and makes levels plural as there are more than one level. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656433647, 'comment_body': 'remove the "" that there is a new message,"", as it repeats itself currently. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656440182, 'comment_body': 'If you want, you could then remove the final comma and replace it with a colon, and then capitalize the first work on line 467 as another possible syntax route. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656451146, 'comment_body': 'Regardless of i.e. or not, you need a comma after input, as you are expanding/explaining what those Boolean values are. So with the current changes, it would be ""values for input, which are `True` or `False`."" Changed ""that is"" to ""which are"" as it is correct. I don\'t know the exact rule for this other than it sounds much better, to me, to say "", which are `True` or `False`. "" in this case.', 'comment_created': datetime.datetime(2021, 6, 22, 17, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656458962, 'comment_body': ""I don't think this small detail will matter. Though I am not sure üòì "", 'comment_created': datetime.datetime(2021, 6, 22, 17, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656461022, 'comment_body': ""It probably won't üòõ, but it is a simple (and last üòÉ change). I've had a lot of smaller grammar comments as that's what I am good at, but yeah overall it's not big at all. The content of the notebook is, and that's some great content..  "", 'comment_created': datetime.datetime(2021, 6, 22, 18, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656486156, 'comment_body': 'Resolved this üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 18, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656614147, 'comment_body': 'this is not what I meant. ultimately this is not something that you should test, because it should be tested by the string class in python. Users put it in in any form they like and you put it to a specific form (my suggestion `""DeBuG"".lower()`) to the form that you are testing against. ', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656614437, 'comment_body': 'this is a constant. please define it somewhere. ', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656618824, 'comment_body': '`logging_levels` is repeated and should defined as a CONSTANT above and then you can check both. ', 'comment_created': datetime.datetime(2021, 6, 22, 22, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656619655, 'comment_body': 'PEP8 - style guide for classes', 'comment_created': datetime.datetime(2021, 6, 22, 22, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656754745, 'comment_body': 'Yes, Sure. That makes a lot of sense. üòÑ ', 'comment_created': datetime.datetime(2021, 6, 23, 4, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656759125, 'comment_body': 'Resolved üòâ ', 'comment_created': datetime.datetime(2021, 6, 23, 4, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 657111954, 'comment_body': 'Resolved üòÑ ', 'comment_created': datetime.datetime(2021, 6, 23, 13, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 657251370, 'comment_body': 'why is this  changed? Is this necessary? ', 'comment_created': datetime.datetime(2021, 6, 23, 16, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 657286180, 'comment_body': 'No, I made it such that the output was not scrollable, instead in full. I will revert it to its original state üòÑ ', 'comment_created': datetime.datetime(2021, 6, 23, 16, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660685789, 'comment_body': 'Can you add a comment explaining what this list is used for?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660689764, 'comment_body': 'Empty lists evaluate to False, so you can do `if list_of_filter`.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660691034, 'comment_body': 'Otherwise I think `if len(list_of_filter) > 0` is less confusing.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660692944, 'comment_body': 'Can we make a variable for 20 with a descriptive name, like `MAX_LOG_LEVEL`?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660712978, 'comment_body': 'Yes, absolutely, üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660713368, 'comment_body': 'Yes, I was thinking about this but it got under my nose ü§£ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660714464, 'comment_body': 'Yes, actually that number 20 is the numerical `log_level` value of `INFO`. I can compare it with the value of the `Info` log level üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660737530, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660737701, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660737875, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660892309, 'comment_body': 'This conditional passes without error if the specified log level is *not* in the LOGGING_LEVELS dict.  There should be an error raised if a user gives an invalid input.  Similarly, something should happen in line 142.\r\n\r\nThe error message that gets returned should enumerate the valid logging states for the user.', 'comment_created': datetime.datetime(2021, 6, 29, 19, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 660909890, 'comment_body': ""Yes, this is a nice thing to have üòÑ. I have added an `Value Error` which is raised whenever the user doesn't enter a valid value to the `log_state` parameter. \r\nFor the `specific` parameter, I don't think an exception would be needed as it only has boolean states. Log levels are managed by the `log_state` parameter & hence, raising the above exception would suffice for this case as well üòâ "", 'comment_created': datetime.datetime(2021, 6, 29, 19, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661464216, 'comment_body': ""This is unnecessary since iterating over an empty list won't run anything inside the loop"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661472296, 'comment_body': 'This might be a little confusing from an end-user point of view because it will set `specific` to be true if it is specified in the function call or in the config.  You should have the priority for the selection be one or the other, rather than prioritize a value.  Additionally, this might be good reason to make `specific` a kwarg set to `None` by default, then check if a value is provided.  If a value is given, then use that value, if not use the value from config\r\n\r\n```suggestion\r\n         specific = tardis_config[""debug""][""specific""] if specific is None else specific\r\n```\r\n\r\nIn this code example, `specific` would be a keyword arg of the function with default value `None`.  If a value is given by the user, that value is used.  If not, then it uses the value from the config.', 'comment_created': datetime.datetime(2021, 6, 30, 13, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661472617, 'comment_body': 'See Comment about lines 103-106\r\n\r\n```suggestion\r\ndef logging_state(log_state, tardis_config, specific=None):\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 13, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661474688, 'comment_body': ""Again, we shouldn't be prioritizing `True`, we should be prioritizing an option.  So we should either only check the `log_state` or have `log_state` be a kwarg set to `None`  and use a similar pattern to what is above."", 'comment_created': datetime.datetime(2021, 6, 30, 13, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661476474, 'comment_body': ""Doesn't this also happen if `log_state` is defined in both places?  Why no warning here?"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661478398, 'comment_body': 'Instead of calling `<...>.upper() over and over, why not just make the variables uppercase at the start when they are input to the function?', 'comment_created': datetime.datetime(2021, 6, 30, 13, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661480152, 'comment_body': ""Mutable globals aren't generally a great idea and indicate that it might be a good idea to use a class"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661635434, 'comment_body': 'This is invalid code, make sure your tests hit all cases', 'comment_created': datetime.datetime(2021, 6, 30, 16, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661635623, 'comment_body': '```suggestion\r\n    if logging_level in LOGGING_LEVELS:\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 16, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661705715, 'comment_body': 'Yes, absolutely. This change will make it easier for understanding the code & remove the redundancies that I have created via this implemented. Thank you very much for this suggestion üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661706200, 'comment_body': 'Yes, I have changed the way `log_state` now behaves. It has a default value of `None` now üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661707172, 'comment_body': 'Sure, I moved the checking now before the actual setting up of the logging level. Appropriate exception is raised when the `log_state` parameter is not a valid input string üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661707531, 'comment_body': 'Sure, made it such that it is changed to `Upper` case only once üòâ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661707900, 'comment_body': 'Sure, I have made changes such that is taken care in the `run_tardis()` function üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661708029, 'comment_body': '```suggestion\r\n        tardis_config[""debug""][""log_state""] = ""CRITICAL""\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 18, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661708422, 'comment_body': ""Awesome, Thank you for this suggestion. I didn't know about this implementation for checking of the condition üòÑ "", 'comment_created': datetime.datetime(2021, 6, 30, 18, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661709470, 'comment_body': 'Sure, and **CRITICAL** will be made into a global constant value such as `DEFAULT_LOG_STATE` such that it makes more sense why this value has been assigned üòâ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661715195, 'comment_body': 'Resolved üòâ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661716180, 'comment_body': 'Resolved üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661724944, 'comment_body': 'I think so this cannot be done. It is failing the tests again ü§î ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661745739, 'comment_body': 'This list gets populated when we add new filters for logging at a particular level. Thus, this snippet of the code is actually checking that we cannot stack multiple filters such as a case where we are filtering `INFO` based log messages inside `DEBUG` log messages. This removes all the filters before applying a new filter.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661982186, 'comment_body': 'There is a problem with this kind of assignment. What is happening is that when we are assigning the value through `tardis_config[""debug""][""log_state""] = ""CRITICAL""`, it actually checks for the key `debug` & then for `log_state` for assignment. But if the keys are not already present then, it raises `KeyError`. \r\nIn my implementation, I have actually first added the `debug` key then through a dictionary added the value to the `log_state` parameter. Hence, when assigning the value in the subsequent line, the key is actually present & no error is raised.', 'comment_created': datetime.datetime(2021, 7, 1, 5, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': 'b7ac82e05be7e7358e58dbfd83e22258c332c687', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9814e917ba73bce46203602ebc04d94dca99ff', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a856ab0ccef87de35a3b0935837478214ac7ea3c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e06f7863bf2ddd604b674c96ebc41cdef166f2cb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a348d42230438d6da1ed0846b642884dd48b3b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53111dadca1b01d80041f10d69f1ea769b6ef1bf', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2876253a7e4bcfd0a219ffbce9c8af51fc82a42', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4092d47009333d84c9441ffd2beb45d67ec828da', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436b6b5b0c6403cdb8f63332b4d15a61f89a68d4', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ce036bb2132025c699d849d69f5ac0a7ceadcdb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4247835b3f01ec8c5e318df662ba2cbb16445de', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd230d911ea51bbee9dd52d358a51fd70c06eec5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87868955f45176792a90b4b2bf6e279e9e90b7a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b377f077eeb4a0c12580e8adec15825e094ab97', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba4d2c149b49fe0acd253bfad9d273198e390dca', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b6568c09ec7a3f507e16f415b4b412bb3aab85', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1936d5dc63ae3e9a988469d3fa8947f94eae12c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4850ca8e7e6b5b8ff43a439706a26fdbeb05f6', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a4da17d37814e28082d6fd0300a8665119039e1', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a40da76fc303099c05efb312d86a14cc66875369', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c9d7990bd196235a347f9ccb8abd3a6aee2993', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230e4e699a3ec5d71dbc43115109fcda10a8f91c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '928000dddcfb272cde7af54f8935a05d6b7a99bb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d4cb5f3dc8b1690e3e85898dbcbb3155c0b3bd0', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be1da5d1ce48f2fad8b32ff8d96b7ab503504359', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ec785657dfb316bc3b4e62abcfc4cdbdc06067', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ea04ef897de189298da390ce24030a3f821a8e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd947a2a373f8c453f4e19d39400a323beb7ae3b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f63b8d5e97da8a3600e8384bea4a27ae91c25cc7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f23f59ee300bfd8a71b8f132fa8f750059a6552e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37388fc9c0a1ce5942a00f7aee989c31c5761d6c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
669670524,Adding functionality to Detect Running Environments for TARDIS Simulations,"<!--- Provide a general summary of your changes in the title above -->
This PR adds the functionality to check the environment in which the TARDIS Simulation is run. 
Needs to be merged before the #1632 

**Description**
<!--- Describe your changes in detail -->
This PR aims to add a new function `check_simulation_env()` which checks if the simulation is being run in a IPython environment or any other environment such as a Terminal, etc. 
This function returns `True` in the former option & `False` in the latter. 

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
This function is vital for the implementation of the Logging Formatting which is being done in #1632. It would allow us to control the output of the logging & would allow for better formatting for the logging output generated while running the simulation.

**How has this been tested?**
- [ ] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. --> Local Testing

**Examples**
<!-- If appropriate, link notebooks, screenshots and other demo stuff -->
Check PR #1632 

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1650,https://api.github.com/repos/tardis-sn/tardis/pulls/1650,https://github.com/tardis-sn/tardis/pull/1650,closed,23,0,1,1,8,4,3,0,"[{'name': 'feature request :rocket:'}, {'name': 'configuration'}, {'name': 'io'}]",2021-06-14 15:35:40+00:00,2021-06-15 16:45:13+00:00,90573.0,"1 day, 1:09:33","[{'comment_id': 651218268, 'comment_body': 'Only the command that throws the exception should be in the `try` statement', 'comment_created': datetime.datetime(2021, 6, 14, 19, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 651368294, 'comment_body': 'when does this else statement happen?', 'comment_created': datetime.datetime(2021, 6, 15, 0, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 651431752, 'comment_body': 'The following needs to be considered for the conditional check:\r\n- If we are in IPython Kernel environment, ie Jupyter Notebook, Jupyter Lab, etc, then we are in the `ZMQInteractiveShell`. Please check [this](https://ipython.readthedocs.io/en/stable/config/options/kernel.html).\r\n- If we are in the Terminal IPython environment, ie IPython Kernel running in Terminal, more of like a REPL, then we are in the `TerminalInteractiveShell`. Please check [this](https://ipython.readthedocs.io/en/stable/config/options/terminal.html).\r\n- If we are in any other environment, ie Google Colab or Normal Shell based Terminal, etc, then we are in the else condition. Hence, the main `else` condition allows us to print the values as a str in #1632 \r\n\r\nThis [Link](https://plotly.com/python/ipython-vs-python/) explains exactly what I mean by these conditions. ', 'comment_created': datetime.datetime(2021, 6, 15, 4, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651472197, 'comment_body': '![image](https://user-images.githubusercontent.com/66117751/122001004-48e6b100-cdcd-11eb-8059-c55f502cd2b5.png)\r\n*This is Jupyter Notebook*\r\n\r\n![image](https://user-images.githubusercontent.com/66117751/122000866-1b9a0300-cdcd-11eb-9c86-8490b3b535f4.png)\r\n*This is IPython in terminal*\r\n\r\n![image](https://user-images.githubusercontent.com/66117751/122000914-2eacd300-cdcd-11eb-913d-0dc742a8d27e.png)\r\n*This is normal Python from command line \r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 15, 6, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': 'ebecc9d0c10a0d1f49ec262e229f1afe816e5172', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
665234330,Added New Interactive Plasma Displaying Widget for Notebook Simulation,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to add a new interactive widget that can display the plasma stratification value (t_rad & w) for a particular iteration üöÄ . Allows to access values of all the iterations generated when running the simulation.

**Description**
<!--- Describe your changes in detail -->
This is feature request from @marxwillia, about the ability to see all the iteration values that were generated when running the simulation. Allows to infer the `t_rad` as well as `w` values.

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
If the logger is set to log nothing, then the information cannot be inferred correctly. This widget aims to provide a way to access this without any changes to the code üòâ 

**Screenshot**

*Wiget shows all the values for a particular iteration:*
![image](https://user-images.githubusercontent.com/66117751/121490876-11ee5500-c9f3-11eb-925b-348f35caeaa0.png)

*Wiget allows to select any iteration from the list & hence disply's value:*
![image](https://user-images.githubusercontent.com/66117751/121491054-3ba77c00-c9f3-11eb-8805-e91d151aa1f2.png)


**How has this been tested?**
- [ ] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Examples**
<!-- If appropiate, link notebooks, screenshots and other demo stuff -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [ ] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",False,1640,https://api.github.com/repos/tardis-sn/tardis/pulls/1640,https://github.com/tardis-sn/tardis/pull/1640,closed,52,0,1,3,7,12,4,0,"[{'name': 'plasma'}, {'name': 'work in progress üöß'}, {'name': 'feature request :rocket:'}, {'name': 'feature'}]",2021-06-08 19:52:49+00:00,2022-02-23 16:30:31+00:00,22451862.0,"259 days, 20:37:42","[{'comment_id': 647997168, 'comment_body': 'This Import can be removed without any issues. Ran the `generating_widgets` notebook without any problems üòâ \r\n', 'comment_created': datetime.datetime(2021, 6, 9, 6, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648547348, 'comment_body': 'Clean up unneeded comments', 'comment_created': datetime.datetime(2021, 6, 9, 18, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648548165, 'comment_body': 'Use numpy arange to generate a list of integers', 'comment_created': datetime.datetime(2021, 6, 9, 18, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648548569, 'comment_body': 'Replace range with iteration_number array', 'comment_created': datetime.datetime(2021, 6, 9, 18, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648549298, 'comment_body': 'Not a descriptive function name', 'comment_created': datetime.datetime(2021, 6, 9, 18, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648549564, 'comment_body': 'Is this relevant to the current PR, though?', 'comment_created': datetime.datetime(2021, 6, 9, 18, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648576302, 'comment_body': 'Yes, Replied after the changes üòÑ ', 'comment_created': datetime.datetime(2021, 6, 9, 18, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648590031, 'comment_body': 'Yes, Sure üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 9, 18, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648598374, 'comment_body': 'This is cool. Forgot about this üöÄ \r\n', 'comment_created': datetime.datetime(2021, 6, 9, 19, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648598641, 'comment_body': 'Sure, changed it to something more tangible üòâ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654825713, 'comment_body': '""interactive widget"" isn\'t very descriptive.  What about ""iteration_widget""?', 'comment_created': datetime.datetime(2021, 6, 19, 18, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 654875171, 'comment_body': 'Yes, this seems to be more descriptive of what this widget is doing. :) \r\nI would move it somewhere in the visualization module so that all visualization stuff is in one place üòâ ', 'comment_created': datetime.datetime(2021, 6, 20, 4, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': '8c58df1d6aa22117b400f7ce445eb1d65a367ebd', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ded9a191a12ed62163e933d54313d307956e83c5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '456f3ace65009894e13f78536720e652b809545b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
682386185,Moved Simulation & Montecarlo Logging Frameworks to `tardis/io/logger` folder,"<!--- Provide a general summary of your changes in the title above -->
Moved the logging frameworks along with the tests to a new `logger` folder inside the `tardis/io` directory.

**Description**
<!--- Describe your changes in detail -->

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->

**How has this been tested?**
- [x] Testing pipeline.
- [ ] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [x] Bug fix. <!-- non-breaking change which fixes an issue -->
- [ ] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [x] None of the above. <!-- please describe --> Restructure of the Logging Framework

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1684,https://api.github.com/repos/tardis-sn/tardis/pulls/1684,https://github.com/tardis-sn/tardis/pull/1684,closed,267,241,11,5,5,4,3,0,"[{'name': 'io'}, {'name': 'restructure'}, {'name': 'logging'}]",2021-07-02 06:59:37+00:00,2021-07-12 17:05:39+00:00,900362.0,"10 days, 10:06:02","[{'comment_id': 664650852, 'comment_body': 'Rename this file to just logger.py', 'comment_created': datetime.datetime(2021, 7, 6, 15, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 664657958, 'comment_body': 'Duplicate code\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 15, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 664679295, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 7, 6, 15, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 664680541, 'comment_body': ""Oh, I didn't see that üòì, Yes I will remove this üòÑ "", 'comment_created': datetime.datetime(2021, 7, 6, 15, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': '534ce24097319b6a48f1d939e1e361ca6889f5f3', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08fbe6bfeb57e4aafe317167c6d251a542253c7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94ee0b0032e1c720563573a6e7a36c23495f197a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a240f15f2545e527e8e26e5689e87f399e15b38a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9008e5b64ba2effc54f0d13bfb09cf2a707c7f80', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
686115150,Adding Logging Support for Caught Exceptions,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to add logging support to caught exceptions.

**Description**
<!--- Describe your changes in detail -->
There are numerous exceptions that are caught but are not visible to the user. This PR aims to add support via logging for these exceptions such that it is visible when logging is turned on. Logs at `DEBUG` level üòÑ 

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
Allows for better explanation for silent errors or exceptions that may happen. Logging them will benefit & make it more descriptive for the user to fix and see what is going on in the simulation. 

**How has this been tested?**
- [x] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. --> Local Tests

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [x] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [ ] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1701,https://api.github.com/repos/tardis-sn/tardis/pulls/1701,https://github.com/tardis-sn/tardis/pull/1701,closed,68,3,9,2,6,9,1,0,[{'name': 'logging'}],2021-07-08 15:23:50+00:00,2021-07-12 17:18:48+00:00,352498.0,"4 days, 1:54:58","[{'comment_id': 666302890, 'comment_body': ""Why are there changes in this file? They don't do anything."", 'comment_created': datetime.datetime(2021, 7, 8, 15, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666302972, 'comment_body': 'Why is this changed?', 'comment_created': datetime.datetime(2021, 7, 8, 15, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666303963, 'comment_body': 'I think NONE should be written as None to make it clear that it is the Python object None.', 'comment_created': datetime.datetime(2021, 7, 8, 15, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666304478, 'comment_body': 'See previous comment. Perhaps specify which ""data"" this is?', 'comment_created': datetime.datetime(2021, 7, 8, 15, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666305124, 'comment_body': 'I think this should be a warning', 'comment_created': datetime.datetime(2021, 7, 8, 15, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666305233, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 7, 8, 15, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666305320, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 7, 8, 15, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666327606, 'comment_body': 'Just for formatting consistency with Docstrings üòÑ \r\n', 'comment_created': datetime.datetime(2021, 7, 8, 16, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 666330692, 'comment_body': 'I wanted to ask about this. Do we need to log exceptions for this part of the source code ü§î ', 'comment_created': datetime.datetime(2021, 7, 8, 16, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': '95ac507ce36ac42ca1bbf62dec488755ae5f95ac', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6482c1f19eb7ab13249ec5f5d39ee79e3353b34', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
687134080,Adding Debug Messages to Log the Status of Simulation ,"This PR aims to add more debugging messages to the Simulation Logs to display the simulation's flow.

<!--- Provide a general summary of your changes in the title above -->

**Description**
<!--- Describe your changes in detail -->

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->

**Screenshots**
The new messages look something on these lines. Subject to iterative change.
![image](https://user-images.githubusercontent.com/66117751/125895392-cb156168-8ce3-4a80-9c19-c3af514ae3fa.png)

**How has this been tested?**
- [x] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",False,1704,https://api.github.com/repos/tardis-sn/tardis/pulls/1704,https://github.com/tardis-sn/tardis/pull/1704,closed,347,26,11,12,9,24,3,0,"[{'name': 'work in progress üöß'}, {'name': 'io'}, {'name': 'logging'}]",2021-07-10 06:02:50+00:00,2023-06-16 15:18:57+00:00,61031767.0,"706 days, 9:16:07","[{'comment_id': 670527471, 'comment_body': ""`UnboundLocalError: local variable 't_radiative' referenced before assignment` I believe this is happening here (test failure)"", 'comment_created': datetime.datetime(2021, 7, 15, 14, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 670533953, 'comment_body': 'Sure, this PR has many errors. I will fix them as I go through the code once again making it ready for review üòÑ ', 'comment_created': datetime.datetime(2021, 7, 15, 14, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 670967173, 'comment_body': 'Yes, you are absolutely correct @andrewfullard. There is a complex code there which assigns `t_radiative` in multiple locations based on the conditions that are passed to the CSVY. I have fixed it hopefully & will push the changes :)', 'comment_created': datetime.datetime(2021, 7, 16, 5, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 689571348, 'comment_body': 'You are capitalizing words that are not variables. I think it would be best to move from `Title Case` to `Sentence case`.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 689655600, 'comment_body': 'Should this be done throughout the PR or this specific instance?', 'comment_created': datetime.datetime(2021, 8, 16, 15, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 694856227, 'comment_body': 'Resolved, making the required changes üòâ ', 'comment_created': datetime.datetime(2021, 8, 24, 13, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 695819622, 'comment_body': ""I don't think this iteration function is used any more."", 'comment_created': datetime.datetime(2021, 8, 25, 14, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695819833, 'comment_body': 'Remove this function if it is unused.', 'comment_created': datetime.datetime(2021, 8, 25, 14, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695820151, 'comment_body': 'Otherwise rename to `config_iteration`', 'comment_created': datetime.datetime(2021, 8, 25, 14, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695820628, 'comment_body': 'Unused import', 'comment_created': datetime.datetime(2021, 8, 25, 14, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695821193, 'comment_body': 'Either remove the comment characters or remove the message. This message seems useful.', 'comment_created': datetime.datetime(2021, 8, 25, 14, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695822099, 'comment_body': 'Remove commented code', 'comment_created': datetime.datetime(2021, 8, 25, 14, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695822314, 'comment_body': 'Unused import', 'comment_created': datetime.datetime(2021, 8, 25, 14, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695848275, 'comment_body': 'Sorry that is a spelling mistake from my side üòì ', 'comment_created': datetime.datetime(2021, 8, 25, 15, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 695848611, 'comment_body': 'Sure, will remove unused, unnecessary imports\r\n', 'comment_created': datetime.datetime(2021, 8, 25, 15, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262830, 'comment_body': ""Didn't remove the import as it was being used, renamed it correctly. "", 'comment_created': datetime.datetime(2021, 11, 7, 14, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262893, 'comment_body': 'Renamed the function to correctly spell `iteration` :) ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262936, 'comment_body': 'This still needs to be looked at ü§î ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262981, 'comment_body': 'Uncommented this line as it would be useful bit of information ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262998, 'comment_body': 'Removed this code ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744263048, 'comment_body': 'Needs to be looked at once again ü§î ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744263602, 'comment_body': '@andrewfullard please confirm about the status of the log messages in this file. Are they useful? ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744263824, 'comment_body': 'Removed this import, unused üòâ ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744263843, 'comment_body': 'Removed this import as well :)', 'comment_created': datetime.datetime(2021, 11, 7, 14, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': 'af140c9f61e40188938a3b5efffdb319b0bfa84f', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff627b9c9932959e44897fc53e2f5ddf9caa9379', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84bfb06e4b787865f753079292ecd5d9363b789e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3c4bdb0d71513b3fe97e1e24bfeee589d4d612e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b46eaa16c8983bcb380e9ca071eee5614a072d32', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8be64f8b35e0d7112ec36c4852237d6973b4c31', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99edda83deec865c450e524b0440d3e9ba79844', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f709cb37b4fb99ed60d6cd667c31e6d85024f362', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '860c844a8fa3e948d652b5a73b8c056d3e7f9b36', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '684bc7547bbd58ffa87efa8a32d4295a4f3a0a9f', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66f0730cccfd515d52ccbb6d5cb42f9c89972311', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6dadc5ee7cc84f6fd85d7196487d45766f34658', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
694377964,Tracking RPacket Properties in Montecarlo Single Packet Loop Function,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to add tracking functionality to Single Packet Loop via a new `RPacketCollection` Jitclass. It tracks all the properties to a single instance of the `RPacketCollection` class. The class object has the following properties available to access for the tracked packets:
- `index` of the packets
- `seed` of the packets
- `status` of the packets
- `r` (radius) of the packets
- `nu` of the packets
- `mu` of the packets
- `energy` of the packets

**Description**
<!--- Describe your changes in detail -->
Functionality to Track R_Packet interactions with the respective properties. It tracks every interaction for each packet.
Stored in a `RPacketCollection` Class object namely `r_packet_track`

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
Important for visualising the montecarlo packets. Allows to debug the interactions a packet may undergo.

**Documentation Preview**
https://dhruvsondhi.github.io/tardis/branch/packet_tracking/io/output/rpacket_tracking.html

**How has this been tested?**
- [x] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. --> Local Testing

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [ ] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1748,https://api.github.com/repos/tardis-sn/tardis/pulls/1748,https://github.com/tardis-sn/tardis/pull/1748,closed,553,31,9,23,8,57,3,0,"[{'name': 'numba-montecarlo'}, {'name': 'feature'}, {'name': 'logging'}]",2021-07-21 13:37:07+00:00,2021-12-10 15:10:16+00:00,12274389.0,"142 days, 1:33:09","[{'comment_id': 673980484, 'comment_body': 'I will revert these formatting changes.', 'comment_created': datetime.datetime(2021, 7, 21, 13, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 673981443, 'comment_body': 'Commented out some code. This is subject to change based on discussions.', 'comment_created': datetime.datetime(2021, 7, 21, 13, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 673997317, 'comment_body': 'Why is this commented out instead of just removed?', 'comment_created': datetime.datetime(2021, 7, 21, 13, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 673997532, 'comment_body': 'Again why comment instead of remove?', 'comment_created': datetime.datetime(2021, 7, 21, 13, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674000829, 'comment_body': ' Better to just remove if it is not needed. The current montecarlo log does not produce useful information so it may as well be removed. Agree that it should be discussed since some may disagree with me!', 'comment_created': datetime.datetime(2021, 7, 21, 14, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674001661, 'comment_body': 'Why commented?', 'comment_created': datetime.datetime(2021, 7, 21, 14, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674002497, 'comment_body': 'Could the seed test be done in the packet_tracking function?', 'comment_created': datetime.datetime(2021, 7, 21, 14, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674003008, 'comment_body': 'Is this the best location for this function?', 'comment_created': datetime.datetime(2021, 7, 21, 14, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674003543, 'comment_body': 'Where is the index selection?', 'comment_created': datetime.datetime(2021, 7, 21, 14, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674900136, 'comment_body': 'I am not sure about the status of the implementation for the `Numba` Function-based logger. Thus, I commented out the code instead of removing it.', 'comment_created': datetime.datetime(2021, 7, 22, 15, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674900397, 'comment_body': 'Removed üòÑ ', 'comment_created': datetime.datetime(2021, 7, 22, 15, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674900670, 'comment_body': 'Moved to another file üòÑ ', 'comment_created': datetime.datetime(2021, 7, 22, 15, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674901082, 'comment_body': 'Implemented in a new logic. üòÑ ', 'comment_created': datetime.datetime(2021, 7, 22, 15, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674907963, 'comment_body': ""I am not absolutely sure how we want to proceed with the Numba Logging for functions. That's why it is commented atm."", 'comment_created': datetime.datetime(2021, 7, 22, 15, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674909080, 'comment_body': 'Yes I have changed the implementation üòÑ ', 'comment_created': datetime.datetime(2021, 7, 22, 15, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 676645317, 'comment_body': 'maybe remove `montecarlo`', 'comment_created': datetime.datetime(2021, 7, 26, 14, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 679307386, 'comment_body': 'Resolved :)', 'comment_created': datetime.datetime(2021, 7, 29, 16, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679307624, 'comment_body': 'Sure, Changed accordingly.', 'comment_created': datetime.datetime(2021, 7, 29, 16, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679439535, 'comment_body': 'Should this be a boolean?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679440989, 'comment_body': 'Is this import used?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679441668, 'comment_body': ""Is there a better name for this? It's a bit confusing to have `track_r_packet` and `r_packet_track`"", 'comment_created': datetime.datetime(2021, 7, 29, 19, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679442308, 'comment_body': 'Is this used?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679442682, 'comment_body': 'random whitespace?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679443105, 'comment_body': 'If this is a condition, I think the original variable `runner.r_packet_tracking` should be a boolean.', 'comment_created': datetime.datetime(2021, 7, 29, 19, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679656407, 'comment_body': ""I don't think so this needs to be a boolean. This property of the runner actually stores the `r_packet_track` array's data. Thus it is just initialised in this place."", 'comment_created': datetime.datetime(2021, 7, 30, 5, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679656645, 'comment_body': 'No. I will remove it. Was added when I was trying to test out a new implementation üòì ', 'comment_created': datetime.datetime(2021, 7, 30, 5, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679656932, 'comment_body': 'Yes, please do let me know your opinions on a new name for the variable. It should be concise & should be easily called via the `sim` simulation object.', 'comment_created': datetime.datetime(2021, 7, 30, 5, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679657065, 'comment_body': 'No. Again unused import. Was used when I was testing out a new implementation.', 'comment_created': datetime.datetime(2021, 7, 30, 5, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679657297, 'comment_body': 'This Whitespace was added so that it could demarcate that the initialisation ends here & value assignment starts afterwards.', 'comment_created': datetime.datetime(2021, 7, 30, 5, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679657763, 'comment_body': 'I forgot about this. I was going to put a condition here such that the value will only be assigned if the tracking is turned on. The actual boolean storing the state of the tracking is `montecarlo_configuration.RPACKET_TRACKING`', 'comment_created': datetime.datetime(2021, 7, 30, 5, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 681174649, 'comment_body': 'Renamed to `tracked_rpacket_properties` üòÑ ', 'comment_created': datetime.datetime(2021, 8, 2, 18, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 683441850, 'comment_body': 'Remove unnecessary whitespace changes', 'comment_created': datetime.datetime(2021, 8, 5, 13, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 683718959, 'comment_body': 'Yes, I will make the requested changes shortly :)', 'comment_created': datetime.datetime(2021, 8, 5, 19, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 685276247, 'comment_body': 'We should make sure that if RPACKET_TRACKING is disabled then montecarlo_main_loop should not do any RPacket tracking', 'comment_created': datetime.datetime(2021, 8, 9, 15, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 685276866, 'comment_body': 'You instantiate this outside the main loop.  Will this still work with multi-threading enabled?', 'comment_created': datetime.datetime(2021, 8, 9, 15, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 685277829, 'comment_body': 'Try using the numba TypedList instead of default python lists', 'comment_created': datetime.datetime(2021, 8, 9, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 685716280, 'comment_body': ""I haven't tested the multi thread performance for this PR, thus I am not sure about the multi-threading capabilities of this feature. Need to test this & make appropriate changes ü§î "", 'comment_created': datetime.datetime(2021, 8, 10, 6, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 685716518, 'comment_body': ""Sorry, I didn't get where this needs to be incorporated üòì "", 'comment_created': datetime.datetime(2021, 8, 10, 6, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 686183767, 'comment_body': 'Yes moved to the discussed location :)', 'comment_created': datetime.datetime(2021, 8, 10, 17, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 686861938, 'comment_body': 'Perhaps the `runner.tracked_rpacket` should be named `runner.tracked_rpacket_df` to show it is a dataframe', 'comment_created': datetime.datetime(2021, 8, 11, 14, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 686863785, 'comment_body': 'Perhaps `tracked_rpacket` should be `tracked_rpackets` because there is more than 1 packet being tracked in this variable', 'comment_created': datetime.datetime(2021, 8, 11, 14, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 687399267, 'comment_body': 'Moved to another PR :)', 'comment_created': datetime.datetime(2021, 8, 12, 5, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687402818, 'comment_body': 'Moved to #1776 ', 'comment_created': datetime.datetime(2021, 8, 12, 5, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687747677, 'comment_body': 'rename to `rpacket_tracker`', 'comment_created': datetime.datetime(2021, 8, 12, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 687759417, 'comment_body': 'I will make this change here. Moved it to PR #1776 ', 'comment_created': datetime.datetime(2021, 8, 12, 14, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687759760, 'comment_body': 'Sure :)', 'comment_created': datetime.datetime(2021, 8, 12, 14, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687819219, 'comment_body': 'No this is not working ... Tests are failing if we try to instantiate this outside the `montecarlo_main_loop`. Multi threading is also not working.\r\n', 'comment_created': datetime.datetime(2021, 8, 12, 15, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687838477, 'comment_body': 'Yes, with the current implementation for the instantiation of the `RPacketCollection()` outside the main loop, the multi threading setting allows it to work. It is not working other way around ü§î ', 'comment_created': datetime.datetime(2021, 8, 12, 15, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 689572640, 'comment_body': 'Missing a space before the `=`', 'comment_created': datetime.datetime(2021, 8, 16, 14, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 689573257, 'comment_body': 'This is not the variable name in the argument', 'comment_created': datetime.datetime(2021, 8, 16, 14, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 689647096, 'comment_body': 'Resolved ', 'comment_created': datetime.datetime(2021, 8, 16, 15, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 689648089, 'comment_body': 'Resolved', 'comment_created': datetime.datetime(2021, 8, 16, 15, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761242138, 'comment_body': 'Why not just have the r_packet track at the end of all of the conditionals?', 'comment_created': datetime.datetime(2021, 12, 2, 16, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761242921, 'comment_body': 'A test for RPacketCollection.track() should also be included.', 'comment_created': datetime.datetime(2021, 12, 2, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761671208, 'comment_body': 'Yes, this seems to be more logical. I will move the tracking after the conditionals :)', 'comment_created': datetime.datetime(2021, 12, 3, 6, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 764996877, 'comment_body': 'Needs docstring', 'comment_created': datetime.datetime(2021, 12, 8, 15, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 765935603, 'comment_body': 'Sure, added :)', 'comment_created': datetime.datetime(2021, 12, 9, 16, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': '250989a23fe56722a82dfdfde4a59ff4bfb8a0f5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b132079f6649a3e457197cbc20f11a66f77127fc', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99890ae99487e10672273b04eeb2eaf8dfdd1451', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d8f5894a70c426e0ce1d40c51fd8a908782cdf', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6135d125d6389bc4230041747c447e95975cc961', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd61b9ae00d83009db94df53d3f1b2d205110e4bd', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86b9cdca39d5c54489e1ee4dd36a856f31c3ed6', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b4eef1c148e7b1cb87d299c572255882440e099', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d054381fb030a0efaa7a3b340698b2016bc34b4', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf4c3cf45be7de91a302e3597f66d24593711bf', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03683c3a3691564d356ad810d39ca03e7d684f78', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2fcf38bc7faff0feab0ca92912c402f587b7fb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c8b5de05ae8b69633f49ccc9fc611dba7dd1afe', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa436cffe082cad18744542013f5394f070a4f9', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f110cbebcdae5509ada97573a6217087793a19b3', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff4301c8841a4288efd08eedf330170ba067bac8', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b380bbcd5f51d6757c8c2f43abfceadb9c4ebbb2', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e418e1185951b4ccb5bae0cd9ef841763a8dde24', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4722b5a3b950be52e3bb4e86d27203f5c392b9de', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bfd6fd80351257083916e92fbd67cf500e01f61', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d6e0c5346f6c69595ce858debc93346c7b6493', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a804fc6f93466c674288840b293d71b04f3df67', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97216e9aa2bc8454ccab9b0ac2df73f9c50cb9d3', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
710225436,Adding DataFrame for the RPacket Tracking Functionality,"<!--- Provide a general summary of your changes in the title above -->
This is in continuation of the #1748 
Adds the functionality of creating a dataframe from the interactions values of the packets tracked.
This PR will be rebased once #1748 is merged leading to addition of only a few commits.

**Description**
<!--- Describe your changes in detail -->

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->

**How has this been tested?**
- [x] Testing pipeline.
- [ ] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Examples**
<!-- If appropriate, link notebooks, screenshots and other demo stuff -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [x] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.

Link to Documentation : https://dhruvsondhi.github.io/tardis/branch/packet_interaction_dataframe/io/output/rpacket_tracking.html
",False,1776,https://api.github.com/repos/tardis-sn/tardis/pulls/1776,https://github.com/tardis-sn/tardis/pull/1776,closed,428,85,10,35,11,25,2,0,"[{'name': 'numba-montecarlo'}, {'name': 'feature'}]",2021-08-12 05:28:32+00:00,2022-07-20 15:05:27+00:00,29583415.0,"342 days, 9:36:55","[{'comment_id': 690512532, 'comment_body': 'This is causing the Multithreading to fail. Investigation needed ', 'comment_created': datetime.datetime(2021, 8, 17, 16, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761244217, 'comment_body': 'Has this been resolved?', 'comment_created': datetime.datetime(2021, 12, 2, 16, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761245647, 'comment_body': 'Please update the docstring to include the returned tracks', 'comment_created': datetime.datetime(2021, 12, 2, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761246071, 'comment_body': 'Please add docstrings', 'comment_created': datetime.datetime(2021, 12, 2, 16, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761250928, 'comment_body': 'Put this above the loop and iterate from 1 to len(rpacket_collections)', 'comment_created': datetime.datetime(2021, 12, 2, 16, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761252517, 'comment_body': 'Look into `itertools.chain`', 'comment_created': datetime.datetime(2021, 12, 2, 16, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761252737, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2021, 12, 2, 16, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761643903, 'comment_body': 'Yes, this has been resolved.', 'comment_created': datetime.datetime(2021, 12, 3, 4, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761650291, 'comment_body': 'Thank you for this. This works as intended :) ', 'comment_created': datetime.datetime(2021, 12, 3, 5, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761650753, 'comment_body': 'I have made it such that it will explicitly create a array with the values from the `0` index and then append the other outputs to the previously created array. Thus, increasing the array dynamically.', 'comment_created': datetime.datetime(2021, 12, 3, 5, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761667927, 'comment_body': 'Added as required ', 'comment_created': datetime.datetime(2021, 12, 3, 6, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761667962, 'comment_body': 'Added as required', 'comment_created': datetime.datetime(2021, 12, 3, 6, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 777520590, 'comment_body': ""okay this shouldn't be part of the PR, right? "", 'comment_created': datetime.datetime(2022, 1, 3, 14, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 777521418, 'comment_body': 'this feels like the standard example?', 'comment_created': datetime.datetime(2022, 1, 3, 14, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 777528212, 'comment_body': 'This was rebased. I will check this.', 'comment_created': datetime.datetime(2022, 1, 3, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 781299940, 'comment_body': '```suggestion\r\nsize=0\r\nfor i in range(len(rpacket_collections)):\r\n    size += rpacket_collections[i].interation_id\r\n\r\n... allocate arrays of size `size`        \r\npos = 0\r\nfor i in range(len(rpacket_collections)):\r\n    ... arrays[pos:pos+rpacket_collections[i].interaction_id] = rpacket_collections[i].whatever[::]\r\n    pos += rpacket_collections[i].interactions_id\r\n    \r\n    \r\n```', 'comment_created': datetime.datetime(2022, 1, 10, 15, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 781325564, 'comment_body': '```suggestion\r\n    for rpacket_tracker in rpacket_trackers:\r\n```', 'comment_created': datetime.datetime(2022, 1, 10, 16, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 781331228, 'comment_body': ""```suggestion\r\n        for attribute in ['status', 'r', 'nu', 'mu', 'energy', 'shell_id']:\r\n            rpacket_tracker_all[attribute].append(getattr(rpacket_tracker, attribute))\r\n```"", 'comment_created': datetime.datetime(2022, 1, 10, 16, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 781333497, 'comment_body': ""```suggestion\r\n         rpacket_tracker_all['index'].append(np.ones_like(rpacket_tracker.shell_id)*rpacket_tracker.index)\r\n         rpacket_tracker_all['seed'].append(np.ones_like(rpacket_tracker.shell_id)*rpacket_tracker.seed)\r\n```"", 'comment_created': datetime.datetime(2022, 1, 10, 16, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 785651153, 'comment_body': 'This is not a standard example. There is changes to the number of packets so as to make it run fast for the tracking. More changes would be done in the future so as to make it very fast & not consume much time in testing.', 'comment_created': datetime.datetime(2022, 1, 17, 5, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 786135304, 'comment_body': ""let's change this after"", 'comment_created': datetime.datetime(2022, 1, 17, 16, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 786135790, 'comment_body': 'same comment as above', 'comment_created': datetime.datetime(2022, 1, 17, 16, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 790832529, 'comment_body': 'Clean out these comments', 'comment_created': datetime.datetime(2022, 1, 24, 15, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 790833590, 'comment_body': ""I don't think this import, and perhaps some others, are being used any more"", 'comment_created': datetime.datetime(2022, 1, 24, 15, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 790834375, 'comment_body': 'Changes to this file should be reverted, they are formatting only.', 'comment_created': datetime.datetime(2022, 1, 24, 15, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}]","[{'commit_sha': '190492431199c29399848e69c723510564bf9c74', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cabea5fe59625762097f357bca4bbc2ef273e7f7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aed2e56f68f326a09a626c0e84e544ccbaaa6972', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e7f36a8150eb93d4fb0a73368f3496289ae03f', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fbf57eaae869ae4ca4358eaaafbe4e90640b7d9', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db2a023b2a9efd985fa82b2947e19570fe009fba', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e92303fa802712029e92eb4f6cab06f0bf645c3', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c3ed89d538ef49d022e3ba70f679c6151146c5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580fc32cd1db4a2a632207ebb5f1f2ea7218ba59', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae55073ad72b7c3110fe6ee5dfbf46e28e66184', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e16ccc08e4c9a3a61f2026d0793bccba4af7b5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b2de2b826431cdb8b1bebb8270e8810b00360fe', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7762fa1dd94ebfa762e98e1cbd49995adf890e6a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61b39bf14b3ea86236f7f687c66a457f2d4bce83', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de7cdfbf4e1e4c8c959a705040c15dbfdad3148b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd596a96d36cdb4d438d8d35fa4ed50d7b4c937d8', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56fee6b0c0d874c474f7d305333259004de1d9a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '947d02b2b093b2970e27473367981284792d540a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dddce2f0a2964bf7b9d077c18ae1301d5910d6f1', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbba9974c91e6e726f8ae2ea8782f22373a56370', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d496f613ad2c4a4a31679288f53a7e8e0e90f58', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3bf9f22e3eb7341ce61e8aeca4f25226ddab663', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbe0b79513f12a50c90616e98fea7f2c9da7f5a2', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d0b130e73baab687fc9204131bd7f5c8d622f6f', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a43301e217d9333372cc4a648280c1228fba5cb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '789de234835ea99a92d59d601c8d19fbcc99d8b7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5638ac745fffb439f5968d79a0c32101798a125e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '154abcb3b51ade2cb3834dbcd1fb0f027a62ec11', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f1326a5033ab73d190c42f7ae65fce9ff4ca0a8', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec9b478acc6e40ea859b34443225fbcce6e69203', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d17d08378f7a7d817486d38732a4f5bedb11f92', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead38b589f24774c9c812e517684c71ebe93c0e9', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '135b22f5aeb65e669a32b12e65e94906cb2c75b6', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d6292f84cae0d6a1d47322922e020ecd984ff26', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a4ad399c2a62d1661bca38f178037ac0e1143d7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
663805158,Formatting Logging Output for Simulation,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to change the Formatting of the current Logging done in the Notebook.
Implements decimal up to 3 places in Plasma Stratification values
Better formatted output for `luminosities` values as well as `t_inner` values 

**Description**
<!--- Describe your changes in detail -->
Some formatting changes have been done to the logging output for the simulation. Screenshots below differentiate the output, before & after the changes. 

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
Allows for a better, more digestible formatting for the logging output. Data is more readable & accessible to the User.

**Screenshots**

*Original Logger Output:*
![image](https://user-images.githubusercontent.com/66117751/121481019-54ab2f80-c9e9-11eb-860b-c759ffae6cb5.png)

*New Formatted Logger Output:*
![image](https://user-images.githubusercontent.com/66117751/122161552-8d3a8580-ce8f-11eb-9da8-fa88993b2d01.png)
*Jupyter Notebook*

![image](https://user-images.githubusercontent.com/66117751/122161480-6bd99980-ce8f-11eb-88dc-223976f89cb7.png)
![image](https://user-images.githubusercontent.com/66117751/122161413-4cdb0780-ce8f-11eb-97d4-5f189c8fa4c1.png)
*Terminal*

**How has this been tested?**
- [ ] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [ ] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1632,https://api.github.com/repos/tardis-sn/tardis/pulls/1632,https://github.com/tardis-sn/tardis/pull/1632,closed,80,25,6,12,6,16,1,0,[{'name': 'work in progress üöß'}],2021-06-07 18:25:28+00:00,2021-06-17 15:48:03+00:00,854555.0,"9 days, 21:22:35","[{'comment_id': 648550520, 'comment_body': 'Note that this is removed now- the PR needs rebasing.', 'comment_created': datetime.datetime(2021, 6, 9, 18, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648681878, 'comment_body': 'why are you rounding things there. ', 'comment_created': datetime.datetime(2021, 6, 9, 21, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 648682243, 'comment_body': 'and here it is 5 significant digits. ', 'comment_created': datetime.datetime(2021, 6, 9, 21, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 648682505, 'comment_body': 'why are the column names changed? ', 'comment_created': datetime.datetime(2021, 6, 9, 21, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 648853761, 'comment_body': 'The columns name had an addition of the Unit. The radiative temperature has a specified Unit next to it ie K. ', 'comment_created': datetime.datetime(2021, 6, 10, 5, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648854849, 'comment_body': ""Yes, I can change it to have 3 significant digits but this can be discussed üòâ. For the time, I will change it to 3 digits as I didn't know if this needs to be changed or not üòÖ "", 'comment_created': datetime.datetime(2021, 6, 10, 5, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648857864, 'comment_body': 'This variable is a `np.ndarray` which consists of floating values. There were two ways which allowed to have the significant digits in any precision. \r\n- One of them was `np.around()` which rounds up the value to the decimals that would be passed via the parameter. \r\n- Another, one is the `np.format_float_positional()` but this is performance intensive in terms of calculation & will increase the runtime. These two were the most viable options to have the desired result on the `ndarray` without any other code change. \r\n\r\nOne another way could be to create a function, which will change the decimal precision by dividing the values for each item in the `ndarray` for the appropriate decimal but this may increase the runtime in unexpected ways. \r\n\r\nI will check if something better can be done to have the same results üòâ ', 'comment_created': datetime.datetime(2021, 6, 10, 5, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 649881625, 'comment_body': 'Removed the rounding done to the value. Values are now automatically truncated to 3 decimal when displaying the dataframe for plasma values ie `t_rad` and `w`. ', 'comment_created': datetime.datetime(2021, 6, 11, 10, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 649881818, 'comment_body': 'Changed to 3 decimal places for consistency üöÄ ', 'comment_created': datetime.datetime(2021, 6, 11, 10, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 649882728, 'comment_body': 'Column names have been reverted back to original values. ', 'comment_created': datetime.datetime(2021, 6, 11, 10, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651054333, 'comment_body': 'Please provide examples of this function working as expected e.g. in a Jupyter notebook showing the dataframe display, or in a terminal showing just the printed output.', 'comment_created': datetime.datetime(2021, 6, 14, 15, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 651056088, 'comment_body': 'Hello @andrewfullard, I would be creating a new PR for adding this function to the appropriate place üòÑ  \r\nI will make this, such that it automatically takes import from that function üòâ ', 'comment_created': datetime.datetime(2021, 6, 14, 15, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651057112, 'comment_body': 'Right, but I want to see it working in this PR. Currently your screenshots are outdated.', 'comment_created': datetime.datetime(2021, 6, 14, 15, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 651057963, 'comment_body': 'Sure, I will update the screenshots here üöÄ \r\n', 'comment_created': datetime.datetime(2021, 6, 14, 15, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651062042, 'comment_body': 'Also, please make a docstring and test for this new function, and rebase your other PR where you relocate the function so that it follows the changes made here..', 'comment_created': datetime.datetime(2021, 6, 14, 15, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 651165212, 'comment_body': 'I have updated the screenshots for the respective outputs.', 'comment_created': datetime.datetime(2021, 6, 14, 18, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': '635d9bcda0d0d95612ce39d767d1bb230b9b110f', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2a54f6e3457fee0ca1512fa8ddeae38d13fcd3e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d91aeccf957a1e96b8cdbb2a9fa505ad3fe3eb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0a2c08a491faffe038f7f5e3b0394db2ad14c70', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98a65caf79b705ce402d6f9d03d580ab23c3cdc2', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d5e9be5346a7094c7bbae62f1d4e0713f244380', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df2ae27c90a59a3071ccb1a33df604038133eb03', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '941b9567a6f820c635bc098e53a65bffdb3cace7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '604cb7c6984f861b575f49cbfa854466d3938258', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02980765b6caaf3c33522a361b611cc0c226cc35', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd13cbe1906c343ca07ff8feccb694547d5ceb4e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c92e1b942878fe3be72c5e0f0b34ef744e25fd2', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
663807275,Implementing Logging Configuration for Notebook Logging,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to implement a configuration for the Notebook logging such that logging can be turned on, off or set to a particular log level for better information.

**Description**
<!--- Describe your changes in detail -->
This implementation of the logging function allows for the following possible state:
- ***Log_level***, a string value which can be any of the following values: [Notset, Debug, Info, Warning, Error, Critical], allows for logging the output at any of these mention levels 
- Default value has been set to ***""Critical""***, thus no logging output is generated.

Implementation via YAML has also been done. New **log_state** flag is used to control the logging level as well as the state of the logger.
A new **Debug** section has been created for the JSON Schema. This section caters to all the Debugging parameters that can be set for TARDIS configuration. Debug Packets will also be moved here soon after discussion.

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
Allowing for configurable logging levels & state would be a good addition to TARDIS. It would allow for running the simulation without the logs for graphs & other relevant information. Also, gives the opportunity to get only the specified information from the logger for the simulation ie logs of a particular level. 

**Screenshots**

The screenshots here shows some of the different settings & their corresponding output for the logging configuration.

*Without specifying any flag:*
![image](https://user-images.githubusercontent.com/66117751/121484754-27f91700-c9ed-11eb-901a-63144ec01719.png)
The logger doesn't print any information for the Simulation.

*Specifying the `log_state` flag (functional argument) {setting to **""Debug""** Level}:*
![image](https://user-images.githubusercontent.com/66117751/121485106-832b0980-c9ed-11eb-9a76-528b14fe4f97.png)
The simulation runs for 2 iterations. 

*Specifying the `logging_level: ` flag (YAML argument) {setting to **""Warning""** Level}:*
![image](https://user-images.githubusercontent.com/66117751/121485511-e157ec80-c9ed-11eb-8da1-9f428c6163b6.png)
The simulation runs for 2 iterations. 

*Specifying the `logging_level: ` as well as `log_state` flag (functional & YAML argument, both specified) {setting to **""Info""** Level for functional parameter & **""Warning""** Level for YAML}:*
![image](https://user-images.githubusercontent.com/66117751/121485860-3bf14880-c9ee-11eb-9281-a9120ebc98cd.png)
The simulation runs for 2 iterations. 
**Note:** `Log_state & log_state {YAML file parameter} both specified` & `Log_state will be used for Log Level Determination` will be printed for the user to notify that both parameters have been given. Later on this will implemented via a logging statement as well.

**Documentation Preview** : https://dhruvsondhi.github.io/tardis/branch/notebook_logging_config/io/optional/logging_configuration.html

**How has this been tested?**
- [ ] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [x] I have updated the documentation accordingly.
    - [x] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1633,https://api.github.com/repos/tardis-sn/tardis/pulls/1633,https://github.com/tardis-sn/tardis/pull/1633,closed,878,12,11,31,10,115,3,0,"[{'name': 'work in progress üöß'}, {'name': 'feature request :rocket:'}, {'name': 'feature'}]",2021-06-07 18:28:08+00:00,2021-07-01 14:52:12+00:00,2060644.0,"23 days, 20:24:04","[{'comment_id': 648552462, 'comment_body': 'Why has this been moved?', 'comment_created': datetime.datetime(2021, 6, 9, 18, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648553516, 'comment_body': '""Debugging setup for the simulation"" may be more descriptive', 'comment_created': datetime.datetime(2021, 6, 9, 18, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648553832, 'comment_body': '""Logging state for the simulation execution""', 'comment_created': datetime.datetime(2021, 6, 9, 18, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648553984, 'comment_body': 'Are these comments needed?', 'comment_created': datetime.datetime(2021, 6, 9, 18, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648555984, 'comment_body': 'I am not in favour of parameters that have multiple types. It is unclear for the user even with documentation. Instead set a default string e.g. `log_state = ""CRITICAL""`', 'comment_created': datetime.datetime(2021, 6, 9, 18, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648604201, 'comment_body': 'This has been moved because initially the order instantiated the atomic data before the configuration. For accessing values for the **_Logging level_** & **_Logging state_**, we need it through the configuration dictionary. Thus instantiating the config dictionary would allow for passing the required values to the `logging_state()` function. Calling `logging_state()` before the `atom_data` is also important as we are required to capture all the loggers for the simulation. I need to check whether vice versa (ie calling `logging_state` after `atom_data` does the job or not) is valid as well üòÖ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648604577, 'comment_body': 'Absoultely üíØ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648604720, 'comment_body': 'Cool üéê ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648605039, 'comment_body': 'No, I was just testing it. This is a draft PR right now üôÉ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648605552, 'comment_body': 'Sure, easier way to keep track of the logging üöÄ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648608268, 'comment_body': 'These properties will be eventually moved to this Schema for having one place for all the Debugging related setups üòâ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651368994, 'comment_body': 'should this be moved to another module, `util` maybe?', 'comment_created': datetime.datetime(2021, 6, 15, 0, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 651369708, 'comment_body': 'this also seems like a very generic class? Is this from SO? ', 'comment_created': datetime.datetime(2021, 6, 15, 0, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 651427589, 'comment_body': 'Hello @wkerzendorf, this has been implemented taking into consideration the [Filter()](https://docs.python.org/3/library/logging.html#filter-objects) documentation present. The `filter()` function is created using [this](https://docs.python.org/3/howto/logging-cookbook.html#filters-contextual) in mind & some SO discussions for logging level specification. ', 'comment_created': datetime.datetime(2021, 6, 15, 3, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651428035, 'comment_body': 'Sure, but I was thinking that we can restructure this after this gets merged. I will create a new sub module with this Logger as well as the Numba logger for consistency & for easier tracking of the logging present in TARDIS üòÑ ', 'comment_created': datetime.datetime(2021, 6, 15, 3, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654528400, 'comment_body': 'Allows for logging on the specified logging levels', 'comment_created': datetime.datetime(2021, 6, 18, 15, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 654555630, 'comment_body': 'Sure, Done üöÄ \r\n', 'comment_created': datetime.datetime(2021, 6, 18, 16, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654673361, 'comment_body': 'why is this a docstring in the code - should this be an issue. ', 'comment_created': datetime.datetime(2021, 6, 18, 20, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654674088, 'comment_body': 'why are we testing different cases? ', 'comment_created': datetime.datetime(2021, 6, 18, 20, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654674189, 'comment_body': 'upper/lower cases', 'comment_created': datetime.datetime(2021, 6, 18, 20, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654674504, 'comment_body': 'this seems to be a repeat of the parameterize before (in the sense of it should be in a variable', 'comment_created': datetime.datetime(2021, 6, 18, 21, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 654751418, 'comment_body': 'Yes, I was thinking about this. I think I can make it such that it accessible to both the cases. \r\nI will also add another test when both are specified ie Functional argument & YAML property üòÑ ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654751532, 'comment_body': 'Yes absolutely. I was testing for different cases for the input values. I will add an expected failure tests for parameters if they are not valid. That way we could test for failures as well. ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654751897, 'comment_body': 'Oh, sorry. I have implemented both of the ways to invoke the logging configurations üòÑ. I will restructure the Docstring to make it meaningful üòâ ', 'comment_created': datetime.datetime(2021, 6, 19, 5, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654781318, 'comment_body': 'Yes, made it available for mutliple uses üòâ ', 'comment_created': datetime.datetime(2021, 6, 19, 10, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655378163, 'comment_body': 'Set to 1', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378349, 'comment_body': 'Set to 1, remove atoms below', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378514, 'comment_body': 'Set to a small number', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378684, 'comment_body': 'Set to a small number', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655378816, 'comment_body': 'Set to 0', 'comment_created': datetime.datetime(2021, 6, 21, 13, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 655405973, 'comment_body': 'Done üöÄ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406136, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406261, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406431, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 655406630, 'comment_body': 'Done üöÄ ', 'comment_created': datetime.datetime(2021, 6, 21, 14, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656237105, 'comment_body': 'You need to update your environment, the Python version is now pinned to 3.7.10 so this change is incorrect', 'comment_created': datetime.datetime(2021, 6, 22, 13, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 656237864, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 13, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656255857, 'comment_body': ""<p>I believe that there is a trailing space after TARDIS. Can you remove it?</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='0'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255862, 'comment_body': '<p>Change colon to period at the end of the second line.</p><p>Remove the first for of the second line, so it is ""<strong>TARDIS</strong> allows configuring of the logger...""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'1\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255863, 'comment_body': ""<p>Insert a comma after ).</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='4'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255865, 'comment_body': ""<p>Remove the unnecessary comma after seen.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='8'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255867, 'comment_body': ""<p>Change the comma to a colon.&nbsp;</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='10'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255874, 'comment_body': ""<p>Reword this to below:</p><p>Both <strong>log_state</strong> &amp; <strong>specific</strong> are optional arguments for the <strong>run_tardis()</strong> function, however, if the <strong>specific</strong> argument is used, then <strong>log_state</strong> must be set to a particular level.</p><p>Changes the wording by replacing the period with a however statement, and also moves the comma to be before 'then'.</p><p>Also there is a trailing space at the end of the second sentence.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='11'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255875, 'comment_body': ""<p>Add period after <strong>Critical</strong>.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='13'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255878, 'comment_body': '<p>Insert ""By"" at the beginning of the sentence, and insert ""the"" before the second ""<strong>Info</strong>"".&nbsp;</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'15\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255881, 'comment_body': '<p>Wording of the first sentence can be improved slightly.</p><p> </p><p>The specific argument tells the logger to only capture the log messages that are the level set by the log_state parameter.</p><p> </p><p>Add a comma before and after i.e. so it is ""input, i.e., ""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'17\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255885, 'comment_body': ""<p>Remove the comma after messages.  Change if to when. </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='20'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255888, 'comment_body': '<p>Change Whenever to When. Remove ""Even"".&nbsp;</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'27\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255892, 'comment_body': ""<p>Remove space before and after colon.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='28'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255900, 'comment_body': ""<p>Rewording of the first sentence, removing both commas, moving 'in functionality' for clarity, and changed 'functional argument' to 'parameter'.</p><p> </p><p>The <code>logging_level</code> parameter is similar in functionality to the <code>log_state</code> parameter that can be passed via the <code>run_tardis()</code> function.</p><p> </p><p>Remove the space before the colon. </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='32'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255903, 'comment_body': ""<p>The <code>specific_logging</code> is similar in functionality to the <code>specific</code> parameter that can be passed via the <code>run_tardis()</code> function. It takes <strong>Boolean</strong> values, i.e., True or False. It is an optional parameter.</p><p> </p><p>Reworded to be similar structure as earlier sentence about logging_level. Added commas around i.e.</p><p> </p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='37'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255907, 'comment_body': '<p>Insert ""the"" before Debug?</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'38\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255912, 'comment_body': '<p>Change ""an User"" to ""a user"".</p><p> </p><p>Remove ""the arguemnts that is"", so it reads as ""If a user specifies both the parameters..."".</p><p> </p><p>Remove \'then\' after the comma.</p><p> </p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'45\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255916, 'comment_body': ""<p>Remove space before colon.</p>\n<br/>\n\n _Reply via <a href='https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/'>ReviewNB</a>_ <div id='ReviewNBCommentContext-DoNotDelete' style='display:none' data-state='OPEN' data-cellIndex='46'/>"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255919, 'comment_body': '<p>Remove the i.e. section so it reads ""the <code>config[""debug""][""logging_level""]</code> is set to <code>Debug</code> via the <strong>YAML</strong> file.""</p><p>Reword second sentence to be ""The user will also set the log_state parameter as Info.""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'47\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255921, 'comment_body': '<p>Reword first sentence to be ""A new message can be seen from the execution of the simulation,""</p><p>...</p><p>""that is informing the user which input log level..."".</p><p>Removal trailing space after output.</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'49\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656255924, 'comment_body': '<p>Reword this for clarity.</p><p>""In regards to the specific parameter, if any of the config input value is True, then specific logging will be set to True for the simulation output.""</p>\n<br/>\n\n _Reply via <a href=\'https://app.reviewnb.com/tardis-sn/tardis/pull/1633/discussion/\'>ReviewNB</a>_ <div id=\'ReviewNBCommentContext-DoNotDelete\' style=\'display:none\' data-state=\'OPEN\' data-cellIndex=\'50\'/>', 'comment_created': datetime.datetime(2021, 6, 22, 14, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656294887, 'comment_body': 'You want to remove the comma after parameters, and I think you should re-add the \'then\' before the. I was mistaken to suggest changes your correct ""If..., then..."" structure. That\'s my fault. Both work, but I think your original is better and more consistent than mine.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656296688, 'comment_body': 'add ""the"" so it reads as ""be set to `True` for the simulation output.""', 'comment_created': datetime.datetime(2021, 6, 22, 14, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656355624, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 15, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656357327, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 15, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656426188, 'comment_body': 'Can you remove the space before the colon. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656427130, 'comment_body': 'Can you remove the space before the colon. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656429129, 'comment_body': 'remove the comma after parameter. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656430750, 'comment_body': 'You also need to fix the i.e., it should read ""values for input, i.e., `True` or `False`. You need a comma before and after i.e. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656432043, 'comment_body': 'Slight reword. ""It can be examined in this example that when we kept `specific` to `False`, the captured log output includes all log messages from `DEBUG` and higher logging levels, which is the default behavior of the logger.""\r\n\r\nChanges that I made: remove then and add a comma after `False`, and makes levels plural as there are more than one level. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656433647, 'comment_body': 'remove the "" that there is a new message,"", as it repeats itself currently. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656440182, 'comment_body': 'If you want, you could then remove the final comma and replace it with a colon, and then capitalize the first work on line 467 as another possible syntax route. ', 'comment_created': datetime.datetime(2021, 6, 22, 17, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656451146, 'comment_body': 'Regardless of i.e. or not, you need a comma after input, as you are expanding/explaining what those Boolean values are. So with the current changes, it would be ""values for input, which are `True` or `False`."" Changed ""that is"" to ""which are"" as it is correct. I don\'t know the exact rule for this other than it sounds much better, to me, to say "", which are `True` or `False`. "" in this case.', 'comment_created': datetime.datetime(2021, 6, 22, 17, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656458962, 'comment_body': ""I don't think this small detail will matter. Though I am not sure üòì "", 'comment_created': datetime.datetime(2021, 6, 22, 17, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656461022, 'comment_body': ""It probably won't üòõ, but it is a simple (and last üòÉ change). I've had a lot of smaller grammar comments as that's what I am good at, but yeah overall it's not big at all. The content of the notebook is, and that's some great content..  "", 'comment_created': datetime.datetime(2021, 6, 22, 18, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'KevinCawley', 'type': 'User'}, {'comment_id': 656486156, 'comment_body': 'Resolved this üòÑ ', 'comment_created': datetime.datetime(2021, 6, 22, 18, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656614147, 'comment_body': 'this is not what I meant. ultimately this is not something that you should test, because it should be tested by the string class in python. Users put it in in any form they like and you put it to a specific form (my suggestion `""DeBuG"".lower()`) to the form that you are testing against. ', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656614437, 'comment_body': 'this is a constant. please define it somewhere. ', 'comment_created': datetime.datetime(2021, 6, 22, 22, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656618824, 'comment_body': '`logging_levels` is repeated and should defined as a CONSTANT above and then you can check both. ', 'comment_created': datetime.datetime(2021, 6, 22, 22, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656619655, 'comment_body': 'PEP8 - style guide for classes', 'comment_created': datetime.datetime(2021, 6, 22, 22, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 656754745, 'comment_body': 'Yes, Sure. That makes a lot of sense. üòÑ ', 'comment_created': datetime.datetime(2021, 6, 23, 4, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 656759125, 'comment_body': 'Resolved üòâ ', 'comment_created': datetime.datetime(2021, 6, 23, 4, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 657111954, 'comment_body': 'Resolved üòÑ ', 'comment_created': datetime.datetime(2021, 6, 23, 13, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 657251370, 'comment_body': 'why is this  changed? Is this necessary? ', 'comment_created': datetime.datetime(2021, 6, 23, 16, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 657286180, 'comment_body': 'No, I made it such that the output was not scrollable, instead in full. I will revert it to its original state üòÑ ', 'comment_created': datetime.datetime(2021, 6, 23, 16, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660685789, 'comment_body': 'Can you add a comment explaining what this list is used for?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660689764, 'comment_body': 'Empty lists evaluate to False, so you can do `if list_of_filter`.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660691034, 'comment_body': 'Otherwise I think `if len(list_of_filter) > 0` is less confusing.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660692944, 'comment_body': 'Can we make a variable for 20 with a descriptive name, like `MAX_LOG_LEVEL`?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 660712978, 'comment_body': 'Yes, absolutely, üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660713368, 'comment_body': 'Yes, I was thinking about this but it got under my nose ü§£ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660714464, 'comment_body': 'Yes, actually that number 20 is the numerical `log_level` value of `INFO`. I can compare it with the value of the `Info` log level üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660737530, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660737701, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660737875, 'comment_body': 'Done üòÑ ', 'comment_created': datetime.datetime(2021, 6, 29, 15, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 660892309, 'comment_body': 'This conditional passes without error if the specified log level is *not* in the LOGGING_LEVELS dict.  There should be an error raised if a user gives an invalid input.  Similarly, something should happen in line 142.\r\n\r\nThe error message that gets returned should enumerate the valid logging states for the user.', 'comment_created': datetime.datetime(2021, 6, 29, 19, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 660909890, 'comment_body': ""Yes, this is a nice thing to have üòÑ. I have added an `Value Error` which is raised whenever the user doesn't enter a valid value to the `log_state` parameter. \r\nFor the `specific` parameter, I don't think an exception would be needed as it only has boolean states. Log levels are managed by the `log_state` parameter & hence, raising the above exception would suffice for this case as well üòâ "", 'comment_created': datetime.datetime(2021, 6, 29, 19, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661464216, 'comment_body': ""This is unnecessary since iterating over an empty list won't run anything inside the loop"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661472296, 'comment_body': 'This might be a little confusing from an end-user point of view because it will set `specific` to be true if it is specified in the function call or in the config.  You should have the priority for the selection be one or the other, rather than prioritize a value.  Additionally, this might be good reason to make `specific` a kwarg set to `None` by default, then check if a value is provided.  If a value is given, then use that value, if not use the value from config\r\n\r\n```suggestion\r\n         specific = tardis_config[""debug""][""specific""] if specific is None else specific\r\n```\r\n\r\nIn this code example, `specific` would be a keyword arg of the function with default value `None`.  If a value is given by the user, that value is used.  If not, then it uses the value from the config.', 'comment_created': datetime.datetime(2021, 6, 30, 13, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661472617, 'comment_body': 'See Comment about lines 103-106\r\n\r\n```suggestion\r\ndef logging_state(log_state, tardis_config, specific=None):\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 13, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661474688, 'comment_body': ""Again, we shouldn't be prioritizing `True`, we should be prioritizing an option.  So we should either only check the `log_state` or have `log_state` be a kwarg set to `None`  and use a similar pattern to what is above."", 'comment_created': datetime.datetime(2021, 6, 30, 13, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661476474, 'comment_body': ""Doesn't this also happen if `log_state` is defined in both places?  Why no warning here?"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661478398, 'comment_body': 'Instead of calling `<...>.upper() over and over, why not just make the variables uppercase at the start when they are input to the function?', 'comment_created': datetime.datetime(2021, 6, 30, 13, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661480152, 'comment_body': ""Mutable globals aren't generally a great idea and indicate that it might be a good idea to use a class"", 'comment_created': datetime.datetime(2021, 6, 30, 13, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661635434, 'comment_body': 'This is invalid code, make sure your tests hit all cases', 'comment_created': datetime.datetime(2021, 6, 30, 16, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661635623, 'comment_body': '```suggestion\r\n    if logging_level in LOGGING_LEVELS:\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 16, 28, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661705715, 'comment_body': 'Yes, absolutely. This change will make it easier for understanding the code & remove the redundancies that I have created via this implemented. Thank you very much for this suggestion üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661706200, 'comment_body': 'Yes, I have changed the way `log_state` now behaves. It has a default value of `None` now üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661707172, 'comment_body': 'Sure, I moved the checking now before the actual setting up of the logging level. Appropriate exception is raised when the `log_state` parameter is not a valid input string üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661707531, 'comment_body': 'Sure, made it such that it is changed to `Upper` case only once üòâ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661707900, 'comment_body': 'Sure, I have made changes such that is taken care in the `run_tardis()` function üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661708029, 'comment_body': '```suggestion\r\n        tardis_config[""debug""][""log_state""] = ""CRITICAL""\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 18, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 661708422, 'comment_body': ""Awesome, Thank you for this suggestion. I didn't know about this implementation for checking of the condition üòÑ "", 'comment_created': datetime.datetime(2021, 6, 30, 18, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661709470, 'comment_body': 'Sure, and **CRITICAL** will be made into a global constant value such as `DEFAULT_LOG_STATE` such that it makes more sense why this value has been assigned üòâ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661715195, 'comment_body': 'Resolved üòâ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661716180, 'comment_body': 'Resolved üòÑ ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661724944, 'comment_body': 'I think so this cannot be done. It is failing the tests again ü§î ', 'comment_created': datetime.datetime(2021, 6, 30, 18, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661745739, 'comment_body': 'This list gets populated when we add new filters for logging at a particular level. Thus, this snippet of the code is actually checking that we cannot stack multiple filters such as a case where we are filtering `INFO` based log messages inside `DEBUG` log messages. This removes all the filters before applying a new filter.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 661982186, 'comment_body': 'There is a problem with this kind of assignment. What is happening is that when we are assigning the value through `tardis_config[""debug""][""log_state""] = ""CRITICAL""`, it actually checks for the key `debug` & then for `log_state` for assignment. But if the keys are not already present then, it raises `KeyError`. \r\nIn my implementation, I have actually first added the `debug` key then through a dictionary added the value to the `log_state` parameter. Hence, when assigning the value in the subsequent line, the key is actually present & no error is raised.', 'comment_created': datetime.datetime(2021, 7, 1, 5, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': 'b7ac82e05be7e7358e58dbfd83e22258c332c687', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9814e917ba73bce46203602ebc04d94dca99ff', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a856ab0ccef87de35a3b0935837478214ac7ea3c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e06f7863bf2ddd604b674c96ebc41cdef166f2cb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a348d42230438d6da1ed0846b642884dd48b3b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53111dadca1b01d80041f10d69f1ea769b6ef1bf', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2876253a7e4bcfd0a219ffbce9c8af51fc82a42', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4092d47009333d84c9441ffd2beb45d67ec828da', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436b6b5b0c6403cdb8f63332b4d15a61f89a68d4', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ce036bb2132025c699d849d69f5ac0a7ceadcdb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4247835b3f01ec8c5e318df662ba2cbb16445de', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd230d911ea51bbee9dd52d358a51fd70c06eec5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c87868955f45176792a90b4b2bf6e279e9e90b7a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b377f077eeb4a0c12580e8adec15825e094ab97', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba4d2c149b49fe0acd253bfad9d273198e390dca', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24b6568c09ec7a3f507e16f415b4b412bb3aab85', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1936d5dc63ae3e9a988469d3fa8947f94eae12c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4850ca8e7e6b5b8ff43a439706a26fdbeb05f6', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a4da17d37814e28082d6fd0300a8665119039e1', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a40da76fc303099c05efb312d86a14cc66875369', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c9d7990bd196235a347f9ccb8abd3a6aee2993', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '230e4e699a3ec5d71dbc43115109fcda10a8f91c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '928000dddcfb272cde7af54f8935a05d6b7a99bb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d4cb5f3dc8b1690e3e85898dbcbb3155c0b3bd0', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be1da5d1ce48f2fad8b32ff8d96b7ab503504359', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ec785657dfb316bc3b4e62abcfc4cdbdc06067', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ea04ef897de189298da390ce24030a3f821a8e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd947a2a373f8c453f4e19d39400a323beb7ae3b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f63b8d5e97da8a3600e8384bea4a27ae91c25cc7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f23f59ee300bfd8a71b8f132fa8f750059a6552e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37388fc9c0a1ce5942a00f7aee989c31c5761d6c', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
665234330,Added New Interactive Plasma Displaying Widget for Notebook Simulation,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to add a new interactive widget that can display the plasma stratification value (t_rad & w) for a particular iteration üöÄ . Allows to access values of all the iterations generated when running the simulation.

**Description**
<!--- Describe your changes in detail -->
This is feature request from @marxwillia, about the ability to see all the iteration values that were generated when running the simulation. Allows to infer the `t_rad` as well as `w` values.

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
If the logger is set to log nothing, then the information cannot be inferred correctly. This widget aims to provide a way to access this without any changes to the code üòâ 

**Screenshot**

*Wiget shows all the values for a particular iteration:*
![image](https://user-images.githubusercontent.com/66117751/121490876-11ee5500-c9f3-11eb-925b-348f35caeaa0.png)

*Wiget allows to select any iteration from the list & hence disply's value:*
![image](https://user-images.githubusercontent.com/66117751/121491054-3ba77c00-c9f3-11eb-8805-e91d151aa1f2.png)


**How has this been tested?**
- [ ] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Examples**
<!-- If appropiate, link notebooks, screenshots and other demo stuff -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [ ] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",False,1640,https://api.github.com/repos/tardis-sn/tardis/pulls/1640,https://github.com/tardis-sn/tardis/pull/1640,closed,52,0,1,3,7,12,4,0,"[{'name': 'plasma'}, {'name': 'work in progress üöß'}, {'name': 'feature request :rocket:'}, {'name': 'feature'}]",2021-06-08 19:52:49+00:00,2022-02-23 16:30:31+00:00,22451862.0,"259 days, 20:37:42","[{'comment_id': 647997168, 'comment_body': 'This Import can be removed without any issues. Ran the `generating_widgets` notebook without any problems üòâ \r\n', 'comment_created': datetime.datetime(2021, 6, 9, 6, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648547348, 'comment_body': 'Clean up unneeded comments', 'comment_created': datetime.datetime(2021, 6, 9, 18, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648548165, 'comment_body': 'Use numpy arange to generate a list of integers', 'comment_created': datetime.datetime(2021, 6, 9, 18, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648548569, 'comment_body': 'Replace range with iteration_number array', 'comment_created': datetime.datetime(2021, 6, 9, 18, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648549298, 'comment_body': 'Not a descriptive function name', 'comment_created': datetime.datetime(2021, 6, 9, 18, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648549564, 'comment_body': 'Is this relevant to the current PR, though?', 'comment_created': datetime.datetime(2021, 6, 9, 18, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 648576302, 'comment_body': 'Yes, Replied after the changes üòÑ ', 'comment_created': datetime.datetime(2021, 6, 9, 18, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648590031, 'comment_body': 'Yes, Sure üëçüèº ', 'comment_created': datetime.datetime(2021, 6, 9, 18, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648598374, 'comment_body': 'This is cool. Forgot about this üöÄ \r\n', 'comment_created': datetime.datetime(2021, 6, 9, 19, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 648598641, 'comment_body': 'Sure, changed it to something more tangible üòâ ', 'comment_created': datetime.datetime(2021, 6, 9, 19, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 654825713, 'comment_body': '""interactive widget"" isn\'t very descriptive.  What about ""iteration_widget""?', 'comment_created': datetime.datetime(2021, 6, 19, 18, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marxwillia', 'type': 'User'}, {'comment_id': 654875171, 'comment_body': 'Yes, this seems to be more descriptive of what this widget is doing. :) \r\nI would move it somewhere in the visualization module so that all visualization stuff is in one place üòâ ', 'comment_created': datetime.datetime(2021, 6, 20, 4, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': '8c58df1d6aa22117b400f7ce445eb1d65a367ebd', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ded9a191a12ed62163e933d54313d307956e83c5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '456f3ace65009894e13f78536720e652b809545b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
669670524,Adding functionality to Detect Running Environments for TARDIS Simulations,"<!--- Provide a general summary of your changes in the title above -->
This PR adds the functionality to check the environment in which the TARDIS Simulation is run. 
Needs to be merged before the #1632 

**Description**
<!--- Describe your changes in detail -->
This PR aims to add a new function `check_simulation_env()` which checks if the simulation is being run in a IPython environment or any other environment such as a Terminal, etc. 
This function returns `True` in the former option & `False` in the latter. 

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
This function is vital for the implementation of the Logging Formatting which is being done in #1632. It would allow us to control the output of the logging & would allow for better formatting for the logging output generated while running the simulation.

**How has this been tested?**
- [ ] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. --> Local Testing

**Examples**
<!-- If appropriate, link notebooks, screenshots and other demo stuff -->
Check PR #1632 

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1650,https://api.github.com/repos/tardis-sn/tardis/pulls/1650,https://github.com/tardis-sn/tardis/pull/1650,closed,23,0,1,1,8,4,3,0,"[{'name': 'feature request :rocket:'}, {'name': 'configuration'}, {'name': 'io'}]",2021-06-14 15:35:40+00:00,2021-06-15 16:45:13+00:00,90573.0,"1 day, 1:09:33","[{'comment_id': 651218268, 'comment_body': 'Only the command that throws the exception should be in the `try` statement', 'comment_created': datetime.datetime(2021, 6, 14, 19, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 651368294, 'comment_body': 'when does this else statement happen?', 'comment_created': datetime.datetime(2021, 6, 15, 0, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 651431752, 'comment_body': 'The following needs to be considered for the conditional check:\r\n- If we are in IPython Kernel environment, ie Jupyter Notebook, Jupyter Lab, etc, then we are in the `ZMQInteractiveShell`. Please check [this](https://ipython.readthedocs.io/en/stable/config/options/kernel.html).\r\n- If we are in the Terminal IPython environment, ie IPython Kernel running in Terminal, more of like a REPL, then we are in the `TerminalInteractiveShell`. Please check [this](https://ipython.readthedocs.io/en/stable/config/options/terminal.html).\r\n- If we are in any other environment, ie Google Colab or Normal Shell based Terminal, etc, then we are in the else condition. Hence, the main `else` condition allows us to print the values as a str in #1632 \r\n\r\nThis [Link](https://plotly.com/python/ipython-vs-python/) explains exactly what I mean by these conditions. ', 'comment_created': datetime.datetime(2021, 6, 15, 4, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 651472197, 'comment_body': '![image](https://user-images.githubusercontent.com/66117751/122001004-48e6b100-cdcd-11eb-8059-c55f502cd2b5.png)\r\n*This is Jupyter Notebook*\r\n\r\n![image](https://user-images.githubusercontent.com/66117751/122000866-1b9a0300-cdcd-11eb-9c86-8490b3b535f4.png)\r\n*This is IPython in terminal*\r\n\r\n![image](https://user-images.githubusercontent.com/66117751/122000914-2eacd300-cdcd-11eb-913d-0dc742a8d27e.png)\r\n*This is normal Python from command line \r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 15, 6, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': 'ebecc9d0c10a0d1f49ec262e229f1afe816e5172', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
682386185,Moved Simulation & Montecarlo Logging Frameworks to `tardis/io/logger` folder,"<!--- Provide a general summary of your changes in the title above -->
Moved the logging frameworks along with the tests to a new `logger` folder inside the `tardis/io` directory.

**Description**
<!--- Describe your changes in detail -->

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->

**How has this been tested?**
- [x] Testing pipeline.
- [ ] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [x] Bug fix. <!-- non-breaking change which fixes an issue -->
- [ ] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [x] None of the above. <!-- please describe --> Restructure of the Logging Framework

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1684,https://api.github.com/repos/tardis-sn/tardis/pulls/1684,https://github.com/tardis-sn/tardis/pull/1684,closed,267,241,11,5,5,4,3,0,"[{'name': 'io'}, {'name': 'restructure'}, {'name': 'logging'}]",2021-07-02 06:59:37+00:00,2021-07-12 17:05:39+00:00,900362.0,"10 days, 10:06:02","[{'comment_id': 664650852, 'comment_body': 'Rename this file to just logger.py', 'comment_created': datetime.datetime(2021, 7, 6, 15, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 664657958, 'comment_body': 'Duplicate code\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 15, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 664679295, 'comment_body': 'Sure üòÑ ', 'comment_created': datetime.datetime(2021, 7, 6, 15, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 664680541, 'comment_body': ""Oh, I didn't see that üòì, Yes I will remove this üòÑ "", 'comment_created': datetime.datetime(2021, 7, 6, 15, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': '534ce24097319b6a48f1d939e1e361ca6889f5f3', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd08fbe6bfeb57e4aafe317167c6d251a542253c7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94ee0b0032e1c720563573a6e7a36c23495f197a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a240f15f2545e527e8e26e5689e87f399e15b38a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9008e5b64ba2effc54f0d13bfb09cf2a707c7f80', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
686115150,Adding Logging Support for Caught Exceptions,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to add logging support to caught exceptions.

**Description**
<!--- Describe your changes in detail -->
There are numerous exceptions that are caught but are not visible to the user. This PR aims to add support via logging for these exceptions such that it is visible when logging is turned on. Logs at `DEBUG` level üòÑ 

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
Allows for better explanation for silent errors or exceptions that may happen. Logging them will benefit & make it more descriptive for the user to fix and see what is going on in the simulation. 

**How has this been tested?**
- [x] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. --> Local Tests

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [x] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [ ] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1701,https://api.github.com/repos/tardis-sn/tardis/pulls/1701,https://github.com/tardis-sn/tardis/pull/1701,closed,68,3,9,2,6,9,1,0,[{'name': 'logging'}],2021-07-08 15:23:50+00:00,2021-07-12 17:18:48+00:00,352498.0,"4 days, 1:54:58","[{'comment_id': 666302890, 'comment_body': ""Why are there changes in this file? They don't do anything."", 'comment_created': datetime.datetime(2021, 7, 8, 15, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666302972, 'comment_body': 'Why is this changed?', 'comment_created': datetime.datetime(2021, 7, 8, 15, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666303963, 'comment_body': 'I think NONE should be written as None to make it clear that it is the Python object None.', 'comment_created': datetime.datetime(2021, 7, 8, 15, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666304478, 'comment_body': 'See previous comment. Perhaps specify which ""data"" this is?', 'comment_created': datetime.datetime(2021, 7, 8, 15, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666305124, 'comment_body': 'I think this should be a warning', 'comment_created': datetime.datetime(2021, 7, 8, 15, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666305233, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 7, 8, 15, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666305320, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 7, 8, 15, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 666327606, 'comment_body': 'Just for formatting consistency with Docstrings üòÑ \r\n', 'comment_created': datetime.datetime(2021, 7, 8, 16, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 666330692, 'comment_body': 'I wanted to ask about this. Do we need to log exceptions for this part of the source code ü§î ', 'comment_created': datetime.datetime(2021, 7, 8, 16, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': '95ac507ce36ac42ca1bbf62dec488755ae5f95ac', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6482c1f19eb7ab13249ec5f5d39ee79e3353b34', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
687134080,Adding Debug Messages to Log the Status of Simulation ,"This PR aims to add more debugging messages to the Simulation Logs to display the simulation's flow.

<!--- Provide a general summary of your changes in the title above -->

**Description**
<!--- Describe your changes in detail -->

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->

**Screenshots**
The new messages look something on these lines. Subject to iterative change.
![image](https://user-images.githubusercontent.com/66117751/125895392-cb156168-8ce3-4a80-9c19-c3af514ae3fa.png)

**How has this been tested?**
- [x] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",False,1704,https://api.github.com/repos/tardis-sn/tardis/pulls/1704,https://github.com/tardis-sn/tardis/pull/1704,closed,347,26,11,12,9,24,3,0,"[{'name': 'work in progress üöß'}, {'name': 'io'}, {'name': 'logging'}]",2021-07-10 06:02:50+00:00,2023-06-16 15:18:57+00:00,61031767.0,"706 days, 9:16:07","[{'comment_id': 670527471, 'comment_body': ""`UnboundLocalError: local variable 't_radiative' referenced before assignment` I believe this is happening here (test failure)"", 'comment_created': datetime.datetime(2021, 7, 15, 14, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 670533953, 'comment_body': 'Sure, this PR has many errors. I will fix them as I go through the code once again making it ready for review üòÑ ', 'comment_created': datetime.datetime(2021, 7, 15, 14, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 670967173, 'comment_body': 'Yes, you are absolutely correct @andrewfullard. There is a complex code there which assigns `t_radiative` in multiple locations based on the conditions that are passed to the CSVY. I have fixed it hopefully & will push the changes :)', 'comment_created': datetime.datetime(2021, 7, 16, 5, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 689571348, 'comment_body': 'You are capitalizing words that are not variables. I think it would be best to move from `Title Case` to `Sentence case`.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 689655600, 'comment_body': 'Should this be done throughout the PR or this specific instance?', 'comment_created': datetime.datetime(2021, 8, 16, 15, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 694856227, 'comment_body': 'Resolved, making the required changes üòâ ', 'comment_created': datetime.datetime(2021, 8, 24, 13, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 695819622, 'comment_body': ""I don't think this iteration function is used any more."", 'comment_created': datetime.datetime(2021, 8, 25, 14, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695819833, 'comment_body': 'Remove this function if it is unused.', 'comment_created': datetime.datetime(2021, 8, 25, 14, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695820151, 'comment_body': 'Otherwise rename to `config_iteration`', 'comment_created': datetime.datetime(2021, 8, 25, 14, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695820628, 'comment_body': 'Unused import', 'comment_created': datetime.datetime(2021, 8, 25, 14, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695821193, 'comment_body': 'Either remove the comment characters or remove the message. This message seems useful.', 'comment_created': datetime.datetime(2021, 8, 25, 14, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695822099, 'comment_body': 'Remove commented code', 'comment_created': datetime.datetime(2021, 8, 25, 14, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695822314, 'comment_body': 'Unused import', 'comment_created': datetime.datetime(2021, 8, 25, 14, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 695848275, 'comment_body': 'Sorry that is a spelling mistake from my side üòì ', 'comment_created': datetime.datetime(2021, 8, 25, 15, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 695848611, 'comment_body': 'Sure, will remove unused, unnecessary imports\r\n', 'comment_created': datetime.datetime(2021, 8, 25, 15, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262830, 'comment_body': ""Didn't remove the import as it was being used, renamed it correctly. "", 'comment_created': datetime.datetime(2021, 11, 7, 14, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262893, 'comment_body': 'Renamed the function to correctly spell `iteration` :) ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262936, 'comment_body': 'This still needs to be looked at ü§î ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262981, 'comment_body': 'Uncommented this line as it would be useful bit of information ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744262998, 'comment_body': 'Removed this code ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744263048, 'comment_body': 'Needs to be looked at once again ü§î ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744263602, 'comment_body': '@andrewfullard please confirm about the status of the log messages in this file. Are they useful? ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744263824, 'comment_body': 'Removed this import, unused üòâ ', 'comment_created': datetime.datetime(2021, 11, 7, 14, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 744263843, 'comment_body': 'Removed this import as well :)', 'comment_created': datetime.datetime(2021, 11, 7, 14, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': 'af140c9f61e40188938a3b5efffdb319b0bfa84f', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff627b9c9932959e44897fc53e2f5ddf9caa9379', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84bfb06e4b787865f753079292ecd5d9363b789e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3c4bdb0d71513b3fe97e1e24bfeee589d4d612e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b46eaa16c8983bcb380e9ca071eee5614a072d32', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8be64f8b35e0d7112ec36c4852237d6973b4c31', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b99edda83deec865c450e524b0440d3e9ba79844', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f709cb37b4fb99ed60d6cd667c31e6d85024f362', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '860c844a8fa3e948d652b5a73b8c056d3e7f9b36', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '684bc7547bbd58ffa87efa8a32d4295a4f3a0a9f', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66f0730cccfd515d52ccbb6d5cb42f9c89972311', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6dadc5ee7cc84f6fd85d7196487d45766f34658', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
689071368,Changed Formatting for the logger based on Log Level,"This PR aims to add Logging Formatting based on log level. Debug Level has different formatting due to the number of messages that would be printed to the `strerr`. All other logging level follow the existing formatting (with the `\n\t` formatting).

<!--- Provide a general summary of your changes in the title above -->

**Description**
<!--- Describe your changes in detail -->

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->

**How has this been tested?**
- [ ] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Examples**
<!-- If appropriate, link notebooks, screenshots and other demo stuff -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [x] Bug fix. <!-- non-breaking change which fixes an issue -->
- [ ] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [x] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [ ] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1710,https://api.github.com/repos/tardis-sn/tardis/pulls/1710,https://github.com/tardis-sn/tardis/pull/1710,closed,25,18,6,3,4,12,1,0,[{'name': 'logging'}],2021-07-13 14:09:12+00:00,2022-02-23 16:23:13+00:00,19448041.0,"225 days, 2:14:01","[{'comment_id': 668802042, 'comment_body': 'The format of the logging message has been changed from Python 2 to Python 3 `f-string`.', 'comment_created': datetime.datetime(2021, 7, 13, 14, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 668803971, 'comment_body': 'Added the formatting inside the `ColoredFormatter` Class so that it can be accessed for the log messages. For both these messages, the `formatter_message` function is called for adding the relevant colours. ', 'comment_created': datetime.datetime(2021, 7, 13, 14, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 668826993, 'comment_body': 'What does this print? Is it a column header or an entire column?', 'comment_created': datetime.datetime(2021, 7, 13, 14, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 668830293, 'comment_body': ""Shouldn't these be `self` variables inside `__init__`?"", 'comment_created': datetime.datetime(2021, 7, 13, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 668831368, 'comment_body': 'If there is the debug/non-debug variables, why does this still exist?', 'comment_created': datetime.datetime(2021, 7, 13, 14, 41, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 668831715, 'comment_body': 'See previous comment about the debug/non_debug variables', 'comment_created': datetime.datetime(2021, 7, 13, 14, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 668834843, 'comment_body': 'This is what it used to print\r\n![image](https://user-images.githubusercontent.com/66117751/125472494-0a2f921b-55d2-4108-aca8-76c3f1d9828d.png)\r\nAnd this is what it prints right now (after the change)\r\n![image](https://user-images.githubusercontent.com/66117751/125472644-c9ffc7a0-7926-4046-a5ed-e37a32ea213f.png)\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 13, 14, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 668836738, 'comment_body': 'This is just because of the way the `__init__` method inside the `ColoredFormatter` Class works. It takes a message (this is the message) & the `use_color` variable boolean. We would need to refactor the `__init__` function for this to be removed.', 'comment_created': datetime.datetime(2021, 7, 13, 14, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 668946923, 'comment_body': 'Much better, thanks', 'comment_created': datetime.datetime(2021, 7, 13, 16, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 669282224, 'comment_body': 'Yes, this seems to be a better way to proceed. I have restructured the `colored_logger.py` to adhere to this change.', 'comment_created': datetime.datetime(2021, 7, 14, 4, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 670114521, 'comment_body': 'Yes, I have made the required changes.', 'comment_created': datetime.datetime(2021, 7, 15, 3, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 670974996, 'comment_body': '@andrewfullard @Rodot- This change needs to be merged. What should be done here? The PR will remain Draft. ', 'comment_created': datetime.datetime(2021, 7, 16, 5, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': 'a869c418e0a9b701de79abe2150e69b8f2839cc6', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14aab0a21cc8d6fc6f2170adfde984902d7608eb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82b1e795f9d0824a3de01d2c5b48ea3089ea2e49', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
691946580,Renamed `montecarlo_logger.py` to `montecarlo_tracking.py`,"<!--- Provide a general summary of your changes in the title above -->
The `monetcarlo_logger.py` has been renamed to `montecarlo_tracking.py`. The new name signifies the actual working of this module. We are tracking the packet properties thus the new name is apt.

**Description**
<!--- Describe your changes in detail -->
This is currently only a File rename PR.

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
Better explanation of what is happening inside the module. Though this does have a logging configuration, it is just to set it up to output to a file.

**How has this been tested?**
- [x] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Examples**
<!-- If appropriate, link notebooks, screenshots and other demo stuff -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [ ] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [x] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1740,https://api.github.com/repos/tardis-sn/tardis/pulls/1740,https://github.com/tardis-sn/tardis/pull/1740,closed,8,8,3,3,2,2,3,0,"[{'name': 'montecarlo :game_die:'}, {'name': 'restructure'}, {'name': 'logging'}]",2021-07-17 15:15:55+00:00,2021-07-26 18:06:49+00:00,787854.0,"9 days, 2:50:54","[{'comment_id': 672321672, 'comment_body': 'This seems inconsistent. What do you think `mc_logger` should be renamed to, to better match the new module name?', 'comment_created': datetime.datetime(2021, 7, 19, 13, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 672333501, 'comment_body': 'I had a discussion with @wkerzendorf. This `mc_logger` is just used to track the packet properties & hence it is not a logger (kind of a tracker more than a logger). Thus, the name for the `montecarlo_logger` module was changed to `montecarlo_tracking`. \r\nSure, I will change the `import` name as well :)', 'comment_created': datetime.datetime(2021, 7, 19, 14, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': 'b60a1eaf24a3e11535b261b944ed9ccdd419f4c3', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c204b94f9498e1ef3cfe5940507c19717d82cfa', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a56cd411af1d132569e1afe5cbd4ee1be2195ed0', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
694377964,Tracking RPacket Properties in Montecarlo Single Packet Loop Function,"<!--- Provide a general summary of your changes in the title above -->
This PR aims to add tracking functionality to Single Packet Loop via a new `RPacketCollection` Jitclass. It tracks all the properties to a single instance of the `RPacketCollection` class. The class object has the following properties available to access for the tracked packets:
- `index` of the packets
- `seed` of the packets
- `status` of the packets
- `r` (radius) of the packets
- `nu` of the packets
- `mu` of the packets
- `energy` of the packets

**Description**
<!--- Describe your changes in detail -->
Functionality to Track R_Packet interactions with the respective properties. It tracks every interaction for each packet.
Stored in a `RPacketCollection` Class object namely `r_packet_track`

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->
Important for visualising the montecarlo packets. Allows to debug the interactions a packet may undergo.

**Documentation Preview**
https://dhruvsondhi.github.io/tardis/branch/packet_tracking/io/output/rpacket_tracking.html

**How has this been tested?**
- [x] Testing pipeline.
- [x] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. --> Local Testing

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [ ] My change requires a change to the documentation.
    - [ ] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.
",True,1748,https://api.github.com/repos/tardis-sn/tardis/pulls/1748,https://github.com/tardis-sn/tardis/pull/1748,closed,553,31,9,23,8,57,3,0,"[{'name': 'numba-montecarlo'}, {'name': 'feature'}, {'name': 'logging'}]",2021-07-21 13:37:07+00:00,2021-12-10 15:10:16+00:00,12274389.0,"142 days, 1:33:09","[{'comment_id': 673980484, 'comment_body': 'I will revert these formatting changes.', 'comment_created': datetime.datetime(2021, 7, 21, 13, 38, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 673981443, 'comment_body': 'Commented out some code. This is subject to change based on discussions.', 'comment_created': datetime.datetime(2021, 7, 21, 13, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 673997317, 'comment_body': 'Why is this commented out instead of just removed?', 'comment_created': datetime.datetime(2021, 7, 21, 13, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 673997532, 'comment_body': 'Again why comment instead of remove?', 'comment_created': datetime.datetime(2021, 7, 21, 13, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674000829, 'comment_body': ' Better to just remove if it is not needed. The current montecarlo log does not produce useful information so it may as well be removed. Agree that it should be discussed since some may disagree with me!', 'comment_created': datetime.datetime(2021, 7, 21, 14, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674001661, 'comment_body': 'Why commented?', 'comment_created': datetime.datetime(2021, 7, 21, 14, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674002497, 'comment_body': 'Could the seed test be done in the packet_tracking function?', 'comment_created': datetime.datetime(2021, 7, 21, 14, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674003008, 'comment_body': 'Is this the best location for this function?', 'comment_created': datetime.datetime(2021, 7, 21, 14, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674003543, 'comment_body': 'Where is the index selection?', 'comment_created': datetime.datetime(2021, 7, 21, 14, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 674900136, 'comment_body': 'I am not sure about the status of the implementation for the `Numba` Function-based logger. Thus, I commented out the code instead of removing it.', 'comment_created': datetime.datetime(2021, 7, 22, 15, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674900397, 'comment_body': 'Removed üòÑ ', 'comment_created': datetime.datetime(2021, 7, 22, 15, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674900670, 'comment_body': 'Moved to another file üòÑ ', 'comment_created': datetime.datetime(2021, 7, 22, 15, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674901082, 'comment_body': 'Implemented in a new logic. üòÑ ', 'comment_created': datetime.datetime(2021, 7, 22, 15, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674907963, 'comment_body': ""I am not absolutely sure how we want to proceed with the Numba Logging for functions. That's why it is commented atm."", 'comment_created': datetime.datetime(2021, 7, 22, 15, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 674909080, 'comment_body': 'Yes I have changed the implementation üòÑ ', 'comment_created': datetime.datetime(2021, 7, 22, 15, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 676645317, 'comment_body': 'maybe remove `montecarlo`', 'comment_created': datetime.datetime(2021, 7, 26, 14, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 679307386, 'comment_body': 'Resolved :)', 'comment_created': datetime.datetime(2021, 7, 29, 16, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679307624, 'comment_body': 'Sure, Changed accordingly.', 'comment_created': datetime.datetime(2021, 7, 29, 16, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679439535, 'comment_body': 'Should this be a boolean?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679440989, 'comment_body': 'Is this import used?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679441668, 'comment_body': ""Is there a better name for this? It's a bit confusing to have `track_r_packet` and `r_packet_track`"", 'comment_created': datetime.datetime(2021, 7, 29, 19, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679442308, 'comment_body': 'Is this used?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679442682, 'comment_body': 'random whitespace?', 'comment_created': datetime.datetime(2021, 7, 29, 19, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679443105, 'comment_body': 'If this is a condition, I think the original variable `runner.r_packet_tracking` should be a boolean.', 'comment_created': datetime.datetime(2021, 7, 29, 19, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 679656407, 'comment_body': ""I don't think so this needs to be a boolean. This property of the runner actually stores the `r_packet_track` array's data. Thus it is just initialised in this place."", 'comment_created': datetime.datetime(2021, 7, 30, 5, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679656645, 'comment_body': 'No. I will remove it. Was added when I was trying to test out a new implementation üòì ', 'comment_created': datetime.datetime(2021, 7, 30, 5, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679656932, 'comment_body': 'Yes, please do let me know your opinions on a new name for the variable. It should be concise & should be easily called via the `sim` simulation object.', 'comment_created': datetime.datetime(2021, 7, 30, 5, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679657065, 'comment_body': 'No. Again unused import. Was used when I was testing out a new implementation.', 'comment_created': datetime.datetime(2021, 7, 30, 5, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679657297, 'comment_body': 'This Whitespace was added so that it could demarcate that the initialisation ends here & value assignment starts afterwards.', 'comment_created': datetime.datetime(2021, 7, 30, 5, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 679657763, 'comment_body': 'I forgot about this. I was going to put a condition here such that the value will only be assigned if the tracking is turned on. The actual boolean storing the state of the tracking is `montecarlo_configuration.RPACKET_TRACKING`', 'comment_created': datetime.datetime(2021, 7, 30, 5, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 681174649, 'comment_body': 'Renamed to `tracked_rpacket_properties` üòÑ ', 'comment_created': datetime.datetime(2021, 8, 2, 18, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 683441850, 'comment_body': 'Remove unnecessary whitespace changes', 'comment_created': datetime.datetime(2021, 8, 5, 13, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 683718959, 'comment_body': 'Yes, I will make the requested changes shortly :)', 'comment_created': datetime.datetime(2021, 8, 5, 19, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 685276247, 'comment_body': 'We should make sure that if RPACKET_TRACKING is disabled then montecarlo_main_loop should not do any RPacket tracking', 'comment_created': datetime.datetime(2021, 8, 9, 15, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 685276866, 'comment_body': 'You instantiate this outside the main loop.  Will this still work with multi-threading enabled?', 'comment_created': datetime.datetime(2021, 8, 9, 15, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 685277829, 'comment_body': 'Try using the numba TypedList instead of default python lists', 'comment_created': datetime.datetime(2021, 8, 9, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 685716280, 'comment_body': ""I haven't tested the multi thread performance for this PR, thus I am not sure about the multi-threading capabilities of this feature. Need to test this & make appropriate changes ü§î "", 'comment_created': datetime.datetime(2021, 8, 10, 6, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 685716518, 'comment_body': ""Sorry, I didn't get where this needs to be incorporated üòì "", 'comment_created': datetime.datetime(2021, 8, 10, 6, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 686183767, 'comment_body': 'Yes moved to the discussed location :)', 'comment_created': datetime.datetime(2021, 8, 10, 17, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 686861938, 'comment_body': 'Perhaps the `runner.tracked_rpacket` should be named `runner.tracked_rpacket_df` to show it is a dataframe', 'comment_created': datetime.datetime(2021, 8, 11, 14, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 686863785, 'comment_body': 'Perhaps `tracked_rpacket` should be `tracked_rpackets` because there is more than 1 packet being tracked in this variable', 'comment_created': datetime.datetime(2021, 8, 11, 14, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 687399267, 'comment_body': 'Moved to another PR :)', 'comment_created': datetime.datetime(2021, 8, 12, 5, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687402818, 'comment_body': 'Moved to #1776 ', 'comment_created': datetime.datetime(2021, 8, 12, 5, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687747677, 'comment_body': 'rename to `rpacket_tracker`', 'comment_created': datetime.datetime(2021, 8, 12, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 687759417, 'comment_body': 'I will make this change here. Moved it to PR #1776 ', 'comment_created': datetime.datetime(2021, 8, 12, 14, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687759760, 'comment_body': 'Sure :)', 'comment_created': datetime.datetime(2021, 8, 12, 14, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687819219, 'comment_body': 'No this is not working ... Tests are failing if we try to instantiate this outside the `montecarlo_main_loop`. Multi threading is also not working.\r\n', 'comment_created': datetime.datetime(2021, 8, 12, 15, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 687838477, 'comment_body': 'Yes, with the current implementation for the instantiation of the `RPacketCollection()` outside the main loop, the multi threading setting allows it to work. It is not working other way around ü§î ', 'comment_created': datetime.datetime(2021, 8, 12, 15, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 689572640, 'comment_body': 'Missing a space before the `=`', 'comment_created': datetime.datetime(2021, 8, 16, 14, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 689573257, 'comment_body': 'This is not the variable name in the argument', 'comment_created': datetime.datetime(2021, 8, 16, 14, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 689647096, 'comment_body': 'Resolved ', 'comment_created': datetime.datetime(2021, 8, 16, 15, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 689648089, 'comment_body': 'Resolved', 'comment_created': datetime.datetime(2021, 8, 16, 15, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761242138, 'comment_body': 'Why not just have the r_packet track at the end of all of the conditionals?', 'comment_created': datetime.datetime(2021, 12, 2, 16, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761242921, 'comment_body': 'A test for RPacketCollection.track() should also be included.', 'comment_created': datetime.datetime(2021, 12, 2, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761671208, 'comment_body': 'Yes, this seems to be more logical. I will move the tracking after the conditionals :)', 'comment_created': datetime.datetime(2021, 12, 3, 6, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 764996877, 'comment_body': 'Needs docstring', 'comment_created': datetime.datetime(2021, 12, 8, 15, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 765935603, 'comment_body': 'Sure, added :)', 'comment_created': datetime.datetime(2021, 12, 9, 16, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}]","[{'commit_sha': '250989a23fe56722a82dfdfde4a59ff4bfb8a0f5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b132079f6649a3e457197cbc20f11a66f77127fc', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99890ae99487e10672273b04eeb2eaf8dfdd1451', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d8f5894a70c426e0ce1d40c51fd8a908782cdf', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6135d125d6389bc4230041747c447e95975cc961', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd61b9ae00d83009db94df53d3f1b2d205110e4bd', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd86b9cdca39d5c54489e1ee4dd36a856f31c3ed6', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b4eef1c148e7b1cb87d299c572255882440e099', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d054381fb030a0efaa7a3b340698b2016bc34b4', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf4c3cf45be7de91a302e3597f66d24593711bf', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03683c3a3691564d356ad810d39ca03e7d684f78', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2fcf38bc7faff0feab0ca92912c402f587b7fb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c8b5de05ae8b69633f49ccc9fc611dba7dd1afe', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa436cffe082cad18744542013f5394f070a4f9', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f110cbebcdae5509ada97573a6217087793a19b3', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff4301c8841a4288efd08eedf330170ba067bac8', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b380bbcd5f51d6757c8c2f43abfceadb9c4ebbb2', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e418e1185951b4ccb5bae0cd9ef841763a8dde24', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4722b5a3b950be52e3bb4e86d27203f5c392b9de', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bfd6fd80351257083916e92fbd67cf500e01f61', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d6e0c5346f6c69595ce858debc93346c7b6493', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a804fc6f93466c674288840b293d71b04f3df67', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97216e9aa2bc8454ccab9b0ac2df73f9c50cb9d3', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50
710225436,Adding DataFrame for the RPacket Tracking Functionality,"<!--- Provide a general summary of your changes in the title above -->
This is in continuation of the #1748 
Adds the functionality of creating a dataframe from the interactions values of the packets tracked.
This PR will be rebased once #1748 is merged leading to addition of only a few commits.

**Description**
<!--- Describe your changes in detail -->

**Motivation and context**
<!--- Why is this change required? What problem does it solve? Link issues here -->

**How has this been tested?**
- [x] Testing pipeline.
- [ ] Other. <!--- please describe how you tested your changes, `pytest` flags used, etc. -->

**Examples**
<!-- If appropriate, link notebooks, screenshots and other demo stuff -->

**Type of change**
<!--- Put an `x` in all the boxes that apply -->
- [ ] Bug fix. <!-- non-breaking change which fixes an issue -->
- [x] New feature. <!-- non-breaking change which adds functionality -->
- [ ] Breaking change. <!-- fix or feature that would cause existing functionality to not work as expected -->
- [ ] None of the above. <!-- please describe -->

**Checklist**
<!--- Put an `x` in all the boxes that apply -->
- [x] My change requires a change to the documentation.
    - [x] I have updated the documentation accordingly.
    - [ ] (optional) I have built the documentation on my fork following [the instructions](https://tardis-sn.github.io/tardis/development/documentation_preview.html).
- [x] I have assigned and requested two reviewers for this pull request.

Link to Documentation : https://dhruvsondhi.github.io/tardis/branch/packet_interaction_dataframe/io/output/rpacket_tracking.html
",False,1776,https://api.github.com/repos/tardis-sn/tardis/pulls/1776,https://github.com/tardis-sn/tardis/pull/1776,closed,428,85,10,35,11,25,2,0,"[{'name': 'numba-montecarlo'}, {'name': 'feature'}]",2021-08-12 05:28:32+00:00,2022-07-20 15:05:27+00:00,29583415.0,"342 days, 9:36:55","[{'comment_id': 690512532, 'comment_body': 'This is causing the Multithreading to fail. Investigation needed ', 'comment_created': datetime.datetime(2021, 8, 17, 16, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761244217, 'comment_body': 'Has this been resolved?', 'comment_created': datetime.datetime(2021, 12, 2, 16, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761245647, 'comment_body': 'Please update the docstring to include the returned tracks', 'comment_created': datetime.datetime(2021, 12, 2, 16, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761246071, 'comment_body': 'Please add docstrings', 'comment_created': datetime.datetime(2021, 12, 2, 16, 9, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761250928, 'comment_body': 'Put this above the loop and iterate from 1 to len(rpacket_collections)', 'comment_created': datetime.datetime(2021, 12, 2, 16, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761252517, 'comment_body': 'Look into `itertools.chain`', 'comment_created': datetime.datetime(2021, 12, 2, 16, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761252737, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2021, 12, 2, 16, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 761643903, 'comment_body': 'Yes, this has been resolved.', 'comment_created': datetime.datetime(2021, 12, 3, 4, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761650291, 'comment_body': 'Thank you for this. This works as intended :) ', 'comment_created': datetime.datetime(2021, 12, 3, 5, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761650753, 'comment_body': 'I have made it such that it will explicitly create a array with the values from the `0` index and then append the other outputs to the previously created array. Thus, increasing the array dynamically.', 'comment_created': datetime.datetime(2021, 12, 3, 5, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761667927, 'comment_body': 'Added as required ', 'comment_created': datetime.datetime(2021, 12, 3, 6, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 761667962, 'comment_body': 'Added as required', 'comment_created': datetime.datetime(2021, 12, 3, 6, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 777520590, 'comment_body': ""okay this shouldn't be part of the PR, right? "", 'comment_created': datetime.datetime(2022, 1, 3, 14, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 777521418, 'comment_body': 'this feels like the standard example?', 'comment_created': datetime.datetime(2022, 1, 3, 14, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 777528212, 'comment_body': 'This was rebased. I will check this.', 'comment_created': datetime.datetime(2022, 1, 3, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 781299940, 'comment_body': '```suggestion\r\nsize=0\r\nfor i in range(len(rpacket_collections)):\r\n    size += rpacket_collections[i].interation_id\r\n\r\n... allocate arrays of size `size`        \r\npos = 0\r\nfor i in range(len(rpacket_collections)):\r\n    ... arrays[pos:pos+rpacket_collections[i].interaction_id] = rpacket_collections[i].whatever[::]\r\n    pos += rpacket_collections[i].interactions_id\r\n    \r\n    \r\n```', 'comment_created': datetime.datetime(2022, 1, 10, 15, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rodot-', 'type': 'User'}, {'comment_id': 781325564, 'comment_body': '```suggestion\r\n    for rpacket_tracker in rpacket_trackers:\r\n```', 'comment_created': datetime.datetime(2022, 1, 10, 16, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 781331228, 'comment_body': ""```suggestion\r\n        for attribute in ['status', 'r', 'nu', 'mu', 'energy', 'shell_id']:\r\n            rpacket_tracker_all[attribute].append(getattr(rpacket_tracker, attribute))\r\n```"", 'comment_created': datetime.datetime(2022, 1, 10, 16, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 781333497, 'comment_body': ""```suggestion\r\n         rpacket_tracker_all['index'].append(np.ones_like(rpacket_tracker.shell_id)*rpacket_tracker.index)\r\n         rpacket_tracker_all['seed'].append(np.ones_like(rpacket_tracker.shell_id)*rpacket_tracker.seed)\r\n```"", 'comment_created': datetime.datetime(2022, 1, 10, 16, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 785651153, 'comment_body': 'This is not a standard example. There is changes to the number of packets so as to make it run fast for the tracking. More changes would be done in the future so as to make it very fast & not consume much time in testing.', 'comment_created': datetime.datetime(2022, 1, 17, 5, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'DhruvSondhi', 'type': 'User'}, {'comment_id': 786135304, 'comment_body': ""let's change this after"", 'comment_created': datetime.datetime(2022, 1, 17, 16, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 786135790, 'comment_body': 'same comment as above', 'comment_created': datetime.datetime(2022, 1, 17, 16, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'wkerzendorf', 'type': 'User'}, {'comment_id': 790832529, 'comment_body': 'Clean out these comments', 'comment_created': datetime.datetime(2022, 1, 24, 15, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 790833590, 'comment_body': ""I don't think this import, and perhaps some others, are being used any more"", 'comment_created': datetime.datetime(2022, 1, 24, 15, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}, {'comment_id': 790834375, 'comment_body': 'Changes to this file should be reverted, they are formatting only.', 'comment_created': datetime.datetime(2022, 1, 24, 15, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'andrewfullard', 'type': 'User'}]","[{'commit_sha': '190492431199c29399848e69c723510564bf9c74', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cabea5fe59625762097f357bca4bbc2ef273e7f7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aed2e56f68f326a09a626c0e84e544ccbaaa6972', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e7f36a8150eb93d4fb0a73368f3496289ae03f', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fbf57eaae869ae4ca4358eaaafbe4e90640b7d9', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db2a023b2a9efd985fa82b2947e19570fe009fba', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e92303fa802712029e92eb4f6cab06f0bf645c3', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c3ed89d538ef49d022e3ba70f679c6151146c5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580fc32cd1db4a2a632207ebb5f1f2ea7218ba59', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ae55073ad72b7c3110fe6ee5dfbf46e28e66184', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e16ccc08e4c9a3a61f2026d0793bccba4af7b5', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b2de2b826431cdb8b1bebb8270e8810b00360fe', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7762fa1dd94ebfa762e98e1cbd49995adf890e6a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61b39bf14b3ea86236f7f687c66a457f2d4bce83', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de7cdfbf4e1e4c8c959a705040c15dbfdad3148b', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd596a96d36cdb4d438d8d35fa4ed50d7b4c937d8', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b56fee6b0c0d874c474f7d305333259004de1d9a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '947d02b2b093b2970e27473367981284792d540a', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dddce2f0a2964bf7b9d077c18ae1301d5910d6f1', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbba9974c91e6e726f8ae2ea8782f22373a56370', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d496f613ad2c4a4a31679288f53a7e8e0e90f58', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3bf9f22e3eb7341ce61e8aeca4f25226ddab663', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbe0b79513f12a50c90616e98fea7f2c9da7f5a2', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d0b130e73baab687fc9204131bd7f5c8d622f6f', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a43301e217d9333372cc4a648280c1228fba5cb', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '789de234835ea99a92d59d601c8d19fbcc99d8b7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5638ac745fffb439f5968d79a0c32101798a125e', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '154abcb3b51ade2cb3834dbcd1fb0f027a62ec11', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f1326a5033ab73d190c42f7ae65fce9ff4ca0a8', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec9b478acc6e40ea859b34443225fbcce6e69203', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d17d08378f7a7d817486d38732a4f5bedb11f92', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead38b589f24774c9c812e517684c71ebe93c0e9', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '135b22f5aeb65e669a32b12e65e94906cb2c75b6', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d6292f84cae0d6a1d47322922e020ecd984ff26', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a4ad399c2a62d1661bca38f178037ac0e1143d7', 'committer_username': 'DhruvSondhi', 'committer_name': 'Dhruv Sondhi', 'committer_email': None, 'commit_date': datetime.datetime(2020, 5, 29, 10, 7, 7, tzinfo=datetime.timezone.utc)}]",Dhruv Sondhi,66117751,,User,,38,,148,50

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
2938270,tardis,tardis-sn/tardis,Python,404,198,32,104,4662,184,76,22,"[{'id': 837450290, 'number': 1885, 'closed': datetime.datetime(2022, 7, 20, 15, 4, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 1, 16, 35, 19, tzinfo=datetime.timezone.utc), 'time_taken': 14596146.0, 'time_delta': '168 days, 22:29:06', 'additions': 484, 'deletions': 79, 'state': 'closed'}, {'id': 835297709, 'number': 1881, 'closed': datetime.datetime(2022, 1, 31, 14, 24, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 30, 7, 5, 22, tzinfo=datetime.timezone.utc), 'time_taken': 112773.0, 'time_delta': '1 day, 7:19:33', 'additions': 6, 'deletions': 14, 'state': 'closed'}, {'id': 822379596, 'number': 1861, 'closed': datetime.datetime(2022, 1, 16, 9, 52, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 14, 9, 13, 24, tzinfo=datetime.timezone.utc), 'time_taken': 175117.0, 'time_delta': '2 days, 0:38:37', 'additions': 15, 'deletions': 15, 'state': 'closed'}, {'id': 802019973, 'number': 1843, 'closed': datetime.datetime(2022, 1, 25, 21, 26, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 14, 7, 5, 19, tzinfo=datetime.timezone.utc), 'time_taken': 3680451.0, 'time_delta': '42 days, 14:20:51', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 800399500, 'number': 1841, 'closed': datetime.datetime(2021, 12, 13, 15, 23, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 11, 7, 32, 10, tzinfo=datetime.timezone.utc), 'time_taken': 201099.0, 'time_delta': '2 days, 7:51:39', 'additions': 51, 'deletions': 16, 'state': 'closed'}, {'id': 710225436, 'number': 1776, 'closed': datetime.datetime(2022, 7, 20, 15, 5, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 5, 28, 32, tzinfo=datetime.timezone.utc), 'time_taken': 29583415.0, 'time_delta': '342 days, 9:36:55', 'additions': 428, 'deletions': 85, 'state': 'closed'}, {'id': 703618210, 'number': 1769, 'closed': datetime.datetime(2021, 9, 9, 11, 15, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 15, 16, 23, tzinfo=datetime.timezone.utc), 'time_taken': 3095939.0, 'time_delta': '35 days, 19:58:59', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 702286894, 'number': 1768, 'closed': datetime.datetime(2021, 8, 5, 18, 49, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 13, 34, 6, tzinfo=datetime.timezone.utc), 'time_taken': 191711.0, 'time_delta': '2 days, 5:15:11', 'additions': 63, 'deletions': 53, 'state': 'closed'}, {'id': 694377964, 'number': 1748, 'closed': datetime.datetime(2021, 12, 10, 15, 10, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 13, 37, 7, tzinfo=datetime.timezone.utc), 'time_taken': 12274389.0, 'time_delta': '142 days, 1:33:09', 'additions': 553, 'deletions': 31, 'state': 'closed'}, {'id': 694072423, 'number': 1747, 'closed': datetime.datetime(2021, 12, 8, 16, 1, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 5, 56, 22, tzinfo=datetime.timezone.utc), 'time_taken': 12132331.0, 'time_delta': '140 days, 10:05:31', 'additions': 27, 'deletions': 11, 'state': 'closed'}, {'id': 693572237, 'number': 1745, 'closed': datetime.datetime(2021, 7, 26, 14, 53, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 15, 36, 49, tzinfo=datetime.timezone.utc), 'time_taken': 515808.0, 'time_delta': '5 days, 23:16:48', 'additions': 17, 'deletions': 4, 'state': 'closed'}, {'id': 691946580, 'number': 1740, 'closed': datetime.datetime(2021, 7, 26, 18, 6, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 15, 15, 55, tzinfo=datetime.timezone.utc), 'time_taken': 787854.0, 'time_delta': '9 days, 2:50:54', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 691876915, 'number': 1739, 'closed': datetime.datetime(2021, 7, 20, 14, 53, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 8, 29, 23, tzinfo=datetime.timezone.utc), 'time_taken': 282260.0, 'time_delta': '3 days, 6:24:20', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 691261303, 'number': 1731, 'closed': datetime.datetime(2021, 7, 26, 14, 51, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 7, 29, 26, tzinfo=datetime.timezone.utc), 'time_taken': 890528.0, 'time_delta': '10 days, 7:22:08', 'additions': 37, 'deletions': 26, 'state': 'closed'}, {'id': 691209206, 'number': 1730, 'closed': datetime.datetime(2021, 7, 20, 22, 17, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 5, 33, 52, tzinfo=datetime.timezone.utc), 'time_taken': 405829.0, 'time_delta': '4 days, 16:43:49', 'additions': 57, 'deletions': 57, 'state': 'closed'}, {'id': 690432102, 'number': 1722, 'closed': datetime.datetime(2021, 7, 15, 17, 11, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 6, 23, 11, tzinfo=datetime.timezone.utc), 'time_taken': 38915.0, 'time_delta': '10:48:35', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 689237535, 'number': 1714, 'closed': datetime.datetime(2021, 7, 15, 14, 27, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 16, 54, 19, tzinfo=datetime.timezone.utc), 'time_taken': 164012.0, 'time_delta': '1 day, 21:33:32', 'additions': 9, 'deletions': 9, 'state': 'closed'}, {'id': 689104940, 'number': 1712, 'closed': datetime.datetime(2022, 2, 23, 16, 23, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 14, 33, 37, tzinfo=datetime.timezone.utc), 'time_taken': 19446614.0, 'time_delta': '225 days, 1:50:14', 'additions': 35, 'deletions': 19, 'state': 'closed'}, {'id': 689071368, 'number': 1710, 'closed': datetime.datetime(2022, 2, 23, 16, 23, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 14, 9, 12, tzinfo=datetime.timezone.utc), 'time_taken': 19448041.0, 'time_delta': '225 days, 2:14:01', 'additions': 25, 'deletions': 18, 'state': 'closed'}, {'id': 687134080, 'number': 1704, 'closed': datetime.datetime(2023, 6, 16, 15, 18, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 10, 6, 2, 50, tzinfo=datetime.timezone.utc), 'time_taken': 61031767.0, 'time_delta': '706 days, 9:16:07', 'additions': 347, 'deletions': 26, 'state': 'closed'}, {'id': 686115150, 'number': 1701, 'closed': datetime.datetime(2021, 7, 12, 17, 18, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 15, 23, 50, tzinfo=datetime.timezone.utc), 'time_taken': 352498.0, 'time_delta': '4 days, 1:54:58', 'additions': 68, 'deletions': 3, 'state': 'closed'}, {'id': 682555592, 'number': 1685, 'closed': datetime.datetime(2021, 7, 6, 15, 22, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 11, 30, 26, tzinfo=datetime.timezone.utc), 'time_taken': 359503.0, 'time_delta': '4 days, 3:51:43', 'additions': 108, 'deletions': 64, 'state': 'closed'}, {'id': 682386185, 'number': 1684, 'closed': datetime.datetime(2021, 7, 12, 17, 5, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 6, 59, 37, tzinfo=datetime.timezone.utc), 'time_taken': 900362.0, 'time_delta': '10 days, 10:06:02', 'additions': 267, 'deletions': 241, 'state': 'closed'}, {'id': 680674042, 'number': 1679, 'closed': datetime.datetime(2021, 7, 1, 17, 21, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 9, 9, 15, tzinfo=datetime.timezone.utc), 'time_taken': 115914.0, 'time_delta': '1 day, 8:11:54', 'additions': 876, 'deletions': 618, 'state': 'closed'}, {'id': 669670524, 'number': 1650, 'closed': datetime.datetime(2021, 6, 15, 16, 45, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 15, 35, 40, tzinfo=datetime.timezone.utc), 'time_taken': 90573.0, 'time_delta': '1 day, 1:09:33', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 665234330, 'number': 1640, 'closed': datetime.datetime(2022, 2, 23, 16, 30, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 19, 52, 49, tzinfo=datetime.timezone.utc), 'time_taken': 22451862.0, 'time_delta': '259 days, 20:37:42', 'additions': 52, 'deletions': 0, 'state': 'closed'}, {'id': 663807275, 'number': 1633, 'closed': datetime.datetime(2021, 7, 1, 14, 52, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 18, 28, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2060644.0, 'time_delta': '23 days, 20:24:04', 'additions': 878, 'deletions': 12, 'state': 'closed'}, {'id': 663805158, 'number': 1632, 'closed': datetime.datetime(2021, 6, 17, 15, 48, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 7, 18, 25, 28, tzinfo=datetime.timezone.utc), 'time_taken': 854555.0, 'time_delta': '9 days, 21:22:35', 'additions': 80, 'deletions': 25, 'state': 'closed'}, {'id': 661527073, 'number': 1617, 'closed': datetime.datetime(2021, 6, 9, 18, 22, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 4, 7, 36, 3, tzinfo=datetime.timezone.utc), 'time_taken': 470778.0, 'time_delta': '5 days, 10:46:18', 'additions': 104, 'deletions': 77, 'state': 'closed'}, {'id': 657484381, 'number': 1594, 'closed': datetime.datetime(2021, 6, 3, 18, 15, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 29, 15, 9, 12, tzinfo=datetime.timezone.utc), 'time_taken': 443169.0, 'time_delta': '5 days, 3:06:09', 'additions': 342, 'deletions': 297, 'state': 'closed'}, {'id': 653300325, 'number': 1590, 'closed': datetime.datetime(2021, 5, 31, 18, 33, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 26, 7, 17, 44, tzinfo=datetime.timezone.utc), 'time_taken': 472557.0, 'time_delta': '5 days, 11:15:57', 'additions': 18, 'deletions': 14, 'state': 'closed'}, {'id': 649968236, 'number': 1582, 'closed': datetime.datetime(2021, 5, 21, 18, 44, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 13, 32, 40, tzinfo=datetime.timezone.utc), 'time_taken': 18689.0, 'time_delta': '5:11:29', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 649056190, 'number': 1577, 'closed': datetime.datetime(2021, 5, 25, 15, 24, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 20, 15, 48, 42, tzinfo=datetime.timezone.utc), 'time_taken': 430557.0, 'time_delta': '4 days, 23:35:57', 'additions': 61, 'deletions': 36, 'state': 'closed'}, {'id': 645916658, 'number': 1575, 'closed': datetime.datetime(2021, 5, 18, 10, 4, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 17, 14, 31, 43, tzinfo=datetime.timezone.utc), 'time_taken': 70360.0, 'time_delta': '19:32:40', 'additions': 12, 'deletions': 1, 'state': 'closed'}, {'id': 623365417, 'number': 1554, 'closed': datetime.datetime(2021, 5, 4, 13, 37, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 26, 14, 5, 20, tzinfo=datetime.timezone.utc), 'time_taken': 689529.0, 'time_delta': '7 days, 23:32:09', 'additions': 287, 'deletions': 3, 'state': 'closed'}, {'id': 623002397, 'number': 1553, 'closed': datetime.datetime(2021, 5, 14, 17, 43, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 26, 6, 27, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1595759.0, 'time_delta': '18 days, 11:15:59', 'additions': 23, 'deletions': 13, 'state': 'closed'}, {'id': 622725777, 'number': 1551, 'closed': datetime.datetime(2021, 5, 14, 17, 42, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 25, 8, 51, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1673482.0, 'time_delta': '19 days, 8:51:22', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 622702913, 'number': 1550, 'closed': datetime.datetime(2021, 6, 14, 14, 59, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 25, 5, 53, 47, tzinfo=datetime.timezone.utc), 'time_taken': 4352719.0, 'time_delta': '50 days, 9:05:19', 'additions': 10, 'deletions': 6, 'state': 'closed'}, {'id': 597452321, 'number': 1503, 'closed': datetime.datetime(2021, 5, 17, 18, 3, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 21, 9, 49, 56, tzinfo=datetime.timezone.utc), 'time_taken': 4954396.0, 'time_delta': '57 days, 8:13:16', 'additions': 43071, 'deletions': 1, 'state': 'closed'}, {'id': 594226733, 'number': 1491, 'closed': datetime.datetime(2021, 5, 17, 18, 3, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 20, 48, 11, tzinfo=datetime.timezone.utc), 'time_taken': 5346900.0, 'time_delta': '61 days, 21:15:00', 'additions': 518, 'deletions': 0, 'state': 'closed'}, {'id': 565692217, 'number': 1446, 'closed': datetime.datetime(2021, 2, 12, 9, 1, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 2, 6, 13, 30, tzinfo=datetime.timezone.utc), 'time_taken': 874070.0, 'time_delta': '10 days, 2:47:50', 'additions': 7, 'deletions': 3, 'state': 'closed'}, {'id': 560554364, 'number': 1420, 'closed': datetime.datetime(2021, 1, 25, 16, 30, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 24, 6, 42, 8, tzinfo=datetime.timezone.utc), 'time_taken': 121692.0, 'time_delta': '1 day, 9:48:12', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 546974095, 'number': 1404, 'closed': datetime.datetime(2021, 1, 5, 20, 12, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 30, 14, 50, 46, tzinfo=datetime.timezone.utc), 'time_taken': 537710.0, 'time_delta': '6 days, 5:21:50', 'additions': 3, 'deletions': 1, 'state': 'closed'}]"
