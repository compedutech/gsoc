pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1431058045,api: Rename API fields related to stream and group level group settings.,"This PR renames the API fields `can_remove_subscribers_group_id` and `can_mention_group_id` to `can_remove_subscribers_group` and `can_mention_group`. 

<!-- Describe your pull request here.-->

Related Discussion: https://chat.zulip.org/#narrow/stream/378-api-design/topic/single.20user.20groups/near/1607964

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26243,https://api.github.com/repos/zulip/zulip/pulls/26243,https://github.com/zulip/zulip/pull/26243,closed,191,131,30,2,4,8,1,0,[{'name': 'size: XL'}],2023-07-12 11:02:41+00:00,2023-07-26 01:33:05+00:00,1175424.0,"13 days, 14:30:24","[{'comment_id': 1261797687, 'comment_body': ""I'd group these together and describe it as one thing that got renamed, namely a stream setting:\r\n\r\n```suggestion\r\n* [`POST /users/me/subscriptions`](/api/subscribe),\r\n  [`PATCH /streams/{stream_id}`](/api/update-stream),\r\n  [`GET users/me/subscriptions`](/api/get-subscriptions),\r\n  [`GET /streams`](/api/get-streams),\r\n  [`POST /register`](/api/register-queue),\r\n  [`GET /events`](/api/get-events): Renamed\r\n  stream setting `can_remove_subscribers_group_id`\r\n  to `can_remove_subscribers_group`.\r\n```\r\n"", 'comment_created': datetime.datetime(2023, 7, 12, 22, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1261802040, 'comment_body': 'Generally we write the ""Changes"" items to be read going back in time from the present: the reader has started by reading about how this part of the API works for current servers, and then they\'re building on that to understand how it used to work.\r\n\r\nSo that produces something like:\r\n```suggestion\r\n        **Changes**: Before Zulip 8.0 (feature level 192),\r\n        the `can_remove_subscribers_group` setting\r\n        was named `can_remove_subscribers_group_id`.\r\n```\r\n\r\n(We should really write that down somewhere. I guess https://zulip.readthedocs.io/en/latest/documentation/openapi.html#zulip-swagger-yaml-style is the spot to add it; that page is linked from a comment at the top of this YAML file.)\r\n', 'comment_created': datetime.datetime(2023, 7, 12, 23, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 1272672348, 'comment_body': 'I am not very much familiar with our style of writing documentation and explaining them through examples. So, better to add this tip in separate PR.', 'comment_created': datetime.datetime(2023, 7, 24, 19, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1272886106, 'comment_body': '@laurynmm FYI for the suggested changes to documentation for API docs.', 'comment_created': datetime.datetime(2023, 7, 25, 0, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1273857034, 'comment_body': ""Hmm, this logic looks wrong to me -- won't `getattr(stream, setting_name)` always be a `Stream` object, not an ID?\r\n\r\nI think we would do better preserving the previous model of having clear variable names like `setting_group_id_name` and using the `REQ` support for having the API name be different from the function parameter name."", 'comment_created': datetime.datetime(2023, 7, 25, 17, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1273888190, 'comment_body': 'Yes, `getattr(stream, ""can_remove_subscribers_group"")` should return a group object while `getattr(stream, ""can_remove_subscribers_group_id"")` should return group ID.', 'comment_created': datetime.datetime(2023, 7, 25, 17, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1273892630, 'comment_body': 'Though, it is not clear to me what you mean by using `REQ` support. Do you mean doing something like we do in https://github.com/zulip/zulip/blob/befcb46ba39a4e37d6ed1b73b362a2d657d1e4c5/zerver/views/realm.py#L74-L76\r\n\r\nIf yes, then I guess I did something similar for one of the existing group settings and you suggested to avoid doing this. I am not sure though as I cannot find the PR where I think you suggested so.', 'comment_created': datetime.datetime(2023, 7, 25, 17, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1273897703, 'comment_body': ""Yes, this is what I'd had in mind. I think the reason it'd be nice here is for typing -- we can have the `_id` name be for the integer, and the bare name for a `UserGroup` object.\r\n\r\nI don't remember the context of the previous conversation, but I'd guess my motivation there was just that I preferred the default names for readability reasons."", 'comment_created': datetime.datetime(2023, 7, 25, 17, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '33b0771e45e9d54d4197148dd981f0ff3ebe1057', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5987ab0f0e2761f985d7083549c6215e6c98693', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1453229064,user_groups: Update code for changing group level settings.,"Earlier while changing group level group based settings there was no check if the new value for setting is same as the current value.
This PR adds this check now a setting value will be only changed when it is not equal to present value.

<!-- Describe your pull request here.-->

This PR is a followup work for changes in #26243.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [ ] Each commit is a coherent idea.
- [ ] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [ ] Visual appearance of the changes.
- [ ] Responsiveness and internationalization.
- [ ] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [ ] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26372,https://api.github.com/repos/zulip/zulip/pulls/26372,https://github.com/zulip/zulip/pull/26372,closed,3,1,1,1,2,0,2,0,"[{'name': 'size: XS'}, {'name': 'integration review'}]",2023-07-28 05:49:17+00:00,2023-08-06 20:42:52+00:00,831215.0,"9 days, 14:53:35",[],"[{'commit_sha': '0875f5d07fc34f53a4a7bb0cd63f8071d24c7fca', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1377731751,invitations: Add a new setting `Who can create multiuse invite link`.,"This PR adds a new realm level setting `Who can create multiuse invite link` based on the group permissions
model.  

Relevant discussions
1. [Regarding refactor of code to flush cache](https://chat.zulip.org/#narrow/stream/49-development-help/topic/Circular.20dependency.20of.20Django.20models)
2. [Discussion for adding realm level group setting](https://chat.zulip.org/#narrow/stream/101-design/topic/New.20permissions.20model)

Fixes: #15159 

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
New organization settings panel
![image](https://github.com/zulip/zulip/assets/99073049/e1c1a079-5198-45cf-9452-d97b953339dd)

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25884,https://api.github.com/repos/zulip/zulip/pulls/25884,https://github.com/zulip/zulip/pull/25884,closed,961,123,57,14,32,126,5,0,"[{'name': 'area: settings (admin/org)'}, {'name': 'size: XL'}, {'name': 'area: settings (user groups)'}, {'name': 'integration review'}, {'name': 'api docs review'}]",2023-06-04 12:34:58+00:00,2023-09-07 21:21:01+00:00,8239563.0,"95 days, 8:46:03","[{'comment_id': 1218280325, 'comment_body': 'I think it would be good idea to move all entries of system_groups names from `UserGroup` model to `Realm` model as a follow up after this PR.', 'comment_created': datetime.datetime(2023, 6, 5, 15, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1218281704, 'comment_body': 'I was getting a circular dependency error if it was imported at the beginning of module. ', 'comment_created': datetime.datetime(2023, 6, 5, 15, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1224869239, 'comment_body': 'I initially wrote the function like this \r\n```\r\nexport function user_can_create_muliuse_invite(): boolean {\r\n    return user_groups.is_user_in_group(\r\n        page_params.realm_create_multiuse_invite_group_id,\r\n        people.my_current_user_id()\r\n    );\r\n}\r\n```\r\nBut `People` module can not be imported because of circular dependancy. ', 'comment_created': datetime.datetime(2023, 6, 9, 22, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1225146966, 'comment_body': 'I think adding a type hint here and dictionary below would be helpful.', 'comment_created': datetime.datetime(2023, 6, 10, 6, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225186453, 'comment_body': 'I think you can drop `group_name_to_group_dict` if you want to retrieve a `UserGroup` by its name, you can use `all_system_user_groups.get(name=group_name)` instead.', 'comment_created': datetime.datetime(2023, 6, 10, 7, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225291105, 'comment_body': ""Using `local()` inside a loop is expensive and a it's a bit of code smell already as mentioned in above comment. Here's an alternative approach I can suggest:\r\n\r\nOutside this loop\r\n```\r\nreq_vars = {}\r\nreq_group_vars = {} # You may need to adjust the exact variable name here\r\n\r\nfor k, v in list(locals().items()):\r\n    if k in realm.property_types:\r\n        req_vars[k] = v\r\n    if k in Realm.REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING:\r\n        req_group_vars[k] = v \r\n```\r\nAlternatively, if you want to include group settings in req_vars, you will need to make changes to the above loop to skip group settings."", 'comment_created': datetime.datetime(2023, 6, 10, 11, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225467687, 'comment_body': 'I think this list is in alphabetic order and we should follow that. ', 'comment_created': datetime.datetime(2023, 6, 10, 17, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768244, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768580, 'comment_body': 'Since we use `default_group` multiple times, it would be better to store it in a variable.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225769998, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225779764, 'comment_body': 'As most of the fields have comments that explain what they do, I think we should do the same for this field.', 'comment_created': datetime.datetime(2023, 6, 11, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225793089, 'comment_body': ""I think you missed it. This link shouldn't be part of this commit; the later one should be."", 'comment_created': datetime.datetime(2023, 6, 11, 12, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873239, 'comment_body': '*multiuse', 'comment_created': datetime.datetime(2023, 6, 11, 17, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873301, 'comment_body': '*links', 'comment_created': datetime.datetime(2023, 6, 11, 17, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226203473, 'comment_body': 'We can move this inside the if statement below. No need for the query if we are not using it.', 'comment_created': datetime.datetime(2023, 6, 12, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226222153, 'comment_body': ""I was just thinking that inside the action function, we don't check the permission configuration. So if we drop these checks, it will work just fine. However, we still need to keep `user_group.name == default_group_name` to make sure state changes."", 'comment_created': datetime.datetime(2023, 6, 12, 7, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1227958319, 'comment_body': 'I added this code after adding all event listener so that we can avoid some duplicate code by using `$(""#generate_multiuse_invite_radio"").trigger(""change"")`', 'comment_created': datetime.datetime(2023, 6, 13, 11, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228023141, 'comment_body': ""I don't know why git is changing this line rather than the later one."", 'comment_created': datetime.datetime(2023, 6, 13, 12, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228027746, 'comment_body': 'I liked the suggested approach. So, updated the code accordingly.', 'comment_created': datetime.datetime(2023, 6, 13, 12, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1232384665, 'comment_body': 'I think it is better to pass `update_fields` in `save()`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232385207, 'comment_body': 'I think can be better spelled as `if X is None:`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232968223, 'comment_body': 'This list is in alphabetical order.', 'comment_created': datetime.datetime(2023, 6, 17, 5, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232978644, 'comment_body': 'These two classes could have been added in a single line: `$(""#email_invite_radio_container"").addClass(""control-label-disabled disabled_setting_tooltip"")`;.', 'comment_created': datetime.datetime(2023, 6, 17, 6, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1233000780, 'comment_body': 'Here also `elif X is Y:`.', 'comment_created': datetime.datetime(2023, 6, 17, 8, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1234164981, 'comment_body': 'You should add `durable=True` here inside `transaction.atomic`. And we should also add `savepoint=False` for transactions that are performed inside a transaction.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234165520, 'comment_body': 'This should also contain `durable=True`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234176574, 'comment_body': 'We can create a system group dict with group name as key and group object as value outside the loop. This way we would avoid calling `.get` in a loop. This works fine currently because there is ony one setting in `REALM_PERMISSION_GROUP_SETTINGS`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234178408, 'comment_body': 'We are avoiding sending the `can_...` properties for new settings here. We instead expect client to calculate whether user can create the links or not using the setting value which is passed above.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234233270, 'comment_body': '`rrealm.POLICY_NOBODY` is not `None` so I made it `realm.invite_to_realm_policy is realm.POLICY_NOBODY:`', 'comment_created': datetime.datetime(2023, 6, 19, 15, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1234257628, 'comment_body': 'We can have a separate function for group-based settings but I am not sure. We can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234258578, 'comment_body': 'I think it would be better to combine both these functions for owner and admin and name it accordingly.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234272522, 'comment_body': 'I get how this is used, but we can directly add ""_id"" to the setting name. I feel it is unnecessary, but we can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234273090, 'comment_body': 'But this may be fine since we would convert other settings to group based settings eventually.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237946384, 'comment_body': 'Hmm, this seems confusing to have a `check_if_owner_or_administrator_required` function and also another check to verify the user is an admin or not. I think we can instead rename the function to something like `check_admin_permissions` or `check_role_based_permissions` and add a parameter like `require_atleast_admin`. The function could be something like -\r\n```python\r\ndef func_name():\r\n    # owner check based on invite_as value\r\n\r\n    if require_atleast_admin and not user_profile.is_realm_admin:\r\n        raise JsonableError(""Must be an organization administrator"")\r\n\r\n    # admin check based on invite_as value\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 3, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237950835, 'comment_body': 'Why the key for this dict is `Optional[str]`? I expect the `user_group` object would have name set in all cases. Also, we could possibly extract this as a function to get a dict for system groups since that would be re-used at a couple of places.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237952560, 'comment_body': 'I guess this has `Optional` because we do not set it for `can_remove_subscribers_group` setting. Just noting here that I have added a commit for this in my PR #26070. We can rebase one of the PRs depending on which PR is merged first, so it is fine for now.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237965688, 'comment_body': 'This `login` call can be removed I guess and there are a couple of such lines below as well. Basically there is no need to login as a admin user when changing setting using `do_...` function.', 'comment_created': datetime.datetime(2023, 6, 22, 4, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238067677, 'comment_body': 'Running this migration gives an error on my system because you cannot access constants like `POLICY_NOBODY` and `NOBODY_GROUP_NAME`. You would need to define them at the top. You can see other such migrations where we do this.', 'comment_created': datetime.datetime(2023, 6, 22, 6, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238086632, 'comment_body': 'Would also be good to rename `user_can_invite_others_to_realm` to something like `user_can_send_email_invite_to_others`.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238103213, 'comment_body': 'A better fix here would to make the selector for setting margin-top to 10px more selective probably by using `input-group` class.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238129700, 'comment_body': 'I think we should also test the cases where a user tries to set the setting to these groups and check that these raise an error.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238221853, 'comment_body': 'Should I just rename this function or all the variables related to this setting?', 'comment_created': datetime.datetime(2023, 6, 22, 8, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1238253708, 'comment_body': 'I think both because having `can_invite_others_to_realm` as `False`, feels user is not allowed to create multiuse link as well. Would probably be better to do this change in a separate prep commit.', 'comment_created': datetime.datetime(2023, 6, 22, 9, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1241470412, 'comment_body': 'Ohh, sorry for the confusion here. But I did not meant to rename the database field and the API fields sent through `/events`, `/register`,etc. endpoints. I only meant the variables used internally. It would be better to get feedback from others before renaming the database fields and the fields sent in API responses.', 'comment_created': datetime.datetime(2023, 6, 26, 3, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1242838590, 'comment_body': 'I have updated the PR. Please have a look.', 'comment_created': datetime.datetime(2023, 6, 26, 21, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1243305251, 'comment_body': 'Would be better to use `==` for comparing values here. We generally use `is` for checking if  value is `None` or not.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1243315109, 'comment_body': 'This should have `durable=True` and not `savepoint=False` since we do not call this function inside another atomic transaction as of now.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1244924578, 'comment_body': 'There is an extra space here.', 'comment_created': datetime.datetime(2023, 6, 28, 9, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1253737339, 'comment_body': ""What's the thinking behind doing this here rather than around all of `create_internal_realm`? The latter certainly seems more correct to me, since then either we have a fully initialized server or a server that's not initialized at all."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253738706, 'comment_body': '`require_admin` would be a more traditional name for this parameter.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740414, 'comment_body': 'I think this block could be replaced by having the one caller pass `require_admin=invited_as in [PreregistrationUser.INVITE_AS[""REALM_ADMIN""], ...]`, maybe with that variable being set on its own line, in the one caller that uses this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740962, 'comment_body': 'The writing style here feels a lot more sloppy than existing API changelog entries; please read some similar ones and polish this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253741804, 'comment_body': 'I think a better change here would be to add a prep commit that makes this test call `do_create_realm` properly rather than trying to make a realm object hackily this other way.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253742817, 'comment_body': '`do_change_realm_permission_group_setting` (singular, and using `change`) feels clearer to me. We\'re changing a single group setting.\r\n\r\nThe reason I prefer ""change"" over ""set"" is that we\'re moving a pointer (the group ID), effectively, rather than changing a value. ', 'comment_created': datetime.datetime(2023, 7, 5, 23, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743143, 'comment_body': ""Let's change `name` to `setting_name`, and have an `assert setting_name in REALM_PERMISSION_GROUP_SETTINGS` line, just for readability that we expect this to be one of those values."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743668, 'comment_body': ""As discussed in https://chat.zulip.org/#narrow/stream/378-api-design/topic/event.20for.20updating.20group.20setting/near/1600758, let's avoid the property/value format here."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744122, 'comment_body': 'This is an old pattern; switch this to `send_event_on_commit`. @HemantUmre12 @sahil839 FYI too since you may have some PRs that need this tweak too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744828, 'comment_body': 'This could be accessing the shorter `REALM_PERMISSION_GROUP_SETTINGS`, right? I think there may be a few more cases in this PR too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253746983, 'comment_body': 'I think an even better plan might be to move them to a central object or dataclass, rather than hanging off a model at all, but agreed this is a good follow-up.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253747643, 'comment_body': ""I'm not opposed to this existing; I guess most places that currently reference `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` feel like they should access `REALM_PERMISSION_GROUP_SETTINGS` instead, but maybe that doesn't work because of the `_id` suffix. \r\n\r\nI think the right larger model would be to have `GroupPermissionSetting` have an `id_field_name` field."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1254011956, 'comment_body': 'Most of the places we use the `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` object in a loop. So in those places we can just loop over `REALM_PERMISSION_GROUP_SETTINGS` and add ""_id"" to the string like we do for stream settings currently.\r\n\r\nAnd a couple of other places where we use this differently is in `has_permission` code in `models.py` and in `views/realm.py` to check whether a setting is a group-based settings to add its new value in `req_group_setting_vars` object.\r\n\r\nWe can actually directly use `create_multiuse_invite_group` instead of `create_multiuse_invite_group_id` in `has_permission` as we eventually pass user group object in `is_user_in_group`.\r\nWhile this dict is actually helpful to use in the `views/realm.py` code. And that also might be changed if we change the parameters to not have ""_id"" to allow setting them to single user groups.\r\n', 'comment_created': datetime.datetime(2023, 7, 6, 6, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254013215, 'comment_body': 'But yeah, I agree that having `id_field_name` would be a better plan.', 'comment_created': datetime.datetime(2023, 7, 6, 6, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254148649, 'comment_body': 'Hmm, keeping this dict is helpful in `views/realm.py`. If we will change the parameters to not have ""_id"" than we can remove this dict. But in that case I think we should also make changes in name of `page_params` and `events` because our current logic in frontend for changing the settings is based on the assumption that name of the setting received in `page_params` is same as name of the parameter used for changing the setting. Otherwise we need to maintain an array in frontend to distinguish between role based and group based setting.', 'comment_created': datetime.datetime(2023, 7, 6, 9, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1254735119, 'comment_body': 'By default `do_create_realm` creates a realm with `plan_type`=2. But the test expects realm of `plan_type`=1.', 'comment_created': datetime.datetime(2023, 7, 6, 17, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1255697129, 'comment_body': 'I am not sure whether there is anything better which can be done here.', 'comment_created': datetime.datetime(2023, 7, 7, 11, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1263144650, 'comment_body': ""Please don't use numerical values like `1`; always use readable values like `Realm.PLAN_TYPE_FOO` instead."", 'comment_created': datetime.datetime(2023, 7, 13, 23, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1283324310, 'comment_body': ""I don't think there is need for this code. It was only needed to pass [this](https://github.com/zulip/zulip/blob/6632eca2dcf2051043e95348658d6da02305669f/zerver/tests/test_import_export.py#L1554) test. In this test `zerver_usergroup` is not present in data but `create_multiuse_invite` field have a value. As `zerver_usergroup` is not present I need  to delete this from imported data. "", 'comment_created': datetime.datetime(2023, 8, 3, 14, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1285228813, 'comment_body': 'I am not sure whether we want a separate feature level entry for these API changes.', 'comment_created': datetime.datetime(2023, 8, 6, 14, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1286671358, 'comment_body': ""Yeah, this will not be needed. Can we instead modify the test data to set the setting fields to `None`? I guess that's what happens when a slack organization or data from any other product is imported."", 'comment_created': datetime.datetime(2023, 8, 8, 6, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286682747, 'comment_body': 'I think we should add `atomic = False` here to prevent running a one large transaction.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286687625, 'comment_body': 'We can avoid looping over objects here and instead run three queries - one for `invite_to_realm_policy` set to `POLICY_NOBODY`, one for `invite_to_realm_policy` set to `POLICY_ADMINS_ONLY` and one for rest of the realms where each query would be similar to what we do in the `0455` migration (without the batching I guess).\r\n\r\nBut I am not sure whether the complexity is required here for `Realm` table, so we can leave it as it is for now and just add the `atomic = False` as mentioned in the below comment.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710032, 'comment_body': 'I think using same feature level should be fine.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710250, 'comment_body': 'We can use `DELETE` instead of `DEL`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286716392, 'comment_body': 'This change should be done in the last commit that includes changes for this particular feature level.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286725398, 'comment_body': 'We should also verify whether the event format sent here is as expected or not like we do in `do_set_realm_property_test`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286865415, 'comment_body': 'Should we just sent the event to admins and the user who would be affected like the one who sent the invite only and not all the non-admin users?', 'comment_created': datetime.datetime(2023, 8, 8, 9, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286943690, 'comment_body': 'This should mirror the API changelog entries for new realm settings. See feature levels 162, 137, 129, 109.\r\n\r\nAlso, ID should be capitalized and normal text vs formatted as inline code.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286952147, 'comment_body': 'Revised text w/link:\r\n`PATCH /realm`: Added `create_multiuse_invite_group` parameter to support changing the user group whose members can create [reusable invitation links](relative link to help center article).\r\n\r\nPerhaps a ""Previously, creating reusable invite links was ..."" note for when this endpoint is documented.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286969053, 'comment_body': 'Revised text:\r\n`GET /invites`: Endpoint response for non-admin users now includes both email invitations and reusable invitation links that they have created. Previously, non-admin users could only create email invitations, and therefore the response did not include reusable invitation links for these users.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286971070, 'comment_body': 'Also, maybe revise text to: \r\n\r\n""Non-admin users can now revoke reusable invite links they have created. Previously, only admin users could create and revoke reusable invite links.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286978965, 'comment_body': 'Link to help center documentation, and maybe use ""reusable invitation links"" vs ""invite links"".\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286981821, 'comment_body': 'I think we removed the `@` from these system group names. See `can_mention_group` in documentation.\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287000573, 'comment_body': 'How about move the sentence from below here:\r\n\r\n```\r\n* You can [restrict the ability to invite new users](#change-who-can-send-invitations) to\r\n join your Zulip organzation to specific [roles](/help/roles-and-permissions).\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 11, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287001075, 'comment_body': 'Delete this content here and move first sentence to bullet point above.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287002223, 'comment_body': 'I think it would be good to have this be ""Who can create reusable invitation links"" here and in the UI.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287003607, 'comment_body': 'Maybe ""Who can create reusable invitation links""?', 'comment_created': datetime.datetime(2023, 8, 8, 11, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287028843, 'comment_body': 'Maybe change to ""Create a reusable invitation link"" for consistency.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287107032, 'comment_body': 'I could not figure out how to define data type of events corresponding to group setting updates. We need to define required keys and optional keys but for these events there should be atleast one key from `Realm.REALM_GROUP_PERMISSIONS_SETTING` . I tried something like this but there was an error because of enum type.\r\n```\r\n    required_keys=[\r\n      (EnumType([setting_name for setting_name in Realm.REALM_PERMISSION_GROUP_SETTINGS]),int),\r\n    ]\r\n```\r\nI looked at other definitions but could not find any where we need to do such thing.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1287116657, 'comment_body': 'Yes we can do that. So I think we should change the function to something like this\r\n```\r\ndef notify_invites_changed(realm: Realm, acting_user: Optional[UserProfile]=None) -> None:\r\n    event = dict(type=""invites_changed"")\r\n    admin_ids = [user.id for user in realm.get_admin_users_and_bots()]\r\n    recipient_ids=admin_ids\r\n    if(acting_user):\r\n        recipient_ids.append(acting_user.id)\r\n   send_event(realm, event, recipient_ids)\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1288058636, 'comment_body': ""I don't think you can use `EnumType` as a first element of a tuple, it has to be a `str`.\r\n\r\nI think what we can do is define something like `group_setting_update_data_type` as a `DictType` with only `optional_keys` and then check that atlease one field is present. Something similar to what we do for `check_user_group_update`."", 'comment_created': datetime.datetime(2023, 8, 9, 7, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288059577, 'comment_body': 'Yes, that seems correct.', 'comment_created': datetime.datetime(2023, 8, 9, 7, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288482928, 'comment_body': 'Yes, I have modified the test data and have removed this code.', 'comment_created': datetime.datetime(2023, 8, 9, 13, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1290227395, 'comment_body': ""So, we can just combine these two bullet points, like we do for other new realm settings:\r\n\r\n```markdown\r\n* `PATCH /realm`, [`POST /register`](/api/register-queue),\r\n  [`GET /events`](/api/get-events): Added `create_multiuse_invite_group`\r\n  realm setting, which is the ID of the user group whose members can\r\n  create [reusable invitation links](/help/invite-new-users#create-a-reusable-invitation-link)\r\n  to an organization. Previously, only admin users could create these\r\n  links.\r\n```\r\n\r\nI switched the word order up a little bit so that the text wrapping in the rendered changelog looks better. Also, I think it's best to have the help link in the first bullet point."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290230568, 'comment_body': 'We\'ll want a comma after ""Previously"" when it starts a sentence. Again, it would be good to be consistently using ""reusable invitation links"". And let\'s modify the second sentence to focus on the change to the endpoint:\r\n\r\n```markdown\r\n* `POST /invites/multiuse`: Non-admin users can now use this endpoint\r\n  to create reusable invitation links. Previously, this endpoint was\r\n  restricted to admin users only.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290234905, 'comment_body': ""Small note, there's an extra space after the colon here. I always find it useful to look at the documentation changes in a browser to catch these little things."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290237895, 'comment_body': 'Again, let\'s be consistent with ""reusable invitation links"" here.', 'comment_created': datetime.datetime(2023, 8, 10, 14, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290240323, 'comment_body': ""Again, I think we can just delete all the content before the header here, even the `{!owner-only.md!)` since that's at the top of this page."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290243768, 'comment_body': 'One more small tweak here and in the register response:\r\n\r\n```markdown\r\nThe ID of the [user group](/api/get-user-groups) whose members are\r\nallowed to create [reusable invitation\r\nlinks](/help/invite-new-users#create-a-reusable-invitation-link)\r\nto the organization.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290247785, 'comment_body': 'I think this is being rendered a little differently than the other settings ...\r\n\r\n<details>\r\n<summary>screenshot as Iago</summary>\r\n\r\n![Screenshot from 2023-08-10 15-41-14](https://github.com/zulip/zulip/assets/63245456/ec0db657-6adf-4126-aa87-d2bef86a3df5)\r\n</details>\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 14, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293039436, 'comment_body': 'Yeah we use the custom dropdown widget, like the ones used for `New stream announcements` setting for group-based settings. And other settings used the default `select` element.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293045784, 'comment_body': 'I am not completely sure, but we might need a changelog entry for this too. @laurynmm FYI.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293059131, 'comment_body': 'I think duplicate events are being sent here for admins here. ', 'comment_created': datetime.datetime(2023, 8, 14, 7, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293062082, 'comment_body': ""I think we don't need to send the event here to `user_profile` since this is called as a result of deactivating the user."", 'comment_created': datetime.datetime(2023, 8, 14, 7, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293084934, 'comment_body': 'And the setting should be disabled for `Iago`. It is disabled for me.', 'comment_created': datetime.datetime(2023, 8, 14, 7, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293168058, 'comment_body': 'Yeah, earlier the UI of dropdown widget was not consistent with the other select fields. I made changes in last push and now it looks consistent.', 'comment_created': datetime.datetime(2023, 8, 14, 8, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293239011, 'comment_body': 'Yes, earlier there were duplicate eevents. I have made changes now.', 'comment_created': datetime.datetime(2023, 8, 14, 9, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293403181, 'comment_body': 'Yeah, looking at https://zulip.com/api/get-events#invites_changed, we would need to update the event description for the new users that get these events as well as make a **Changes** note for the previous state (only admins received these events) and a corresponding entry/bullet point in the API changelog for feature level 202 (at this point).', 'comment_created': datetime.datetime(2023, 8, 14, 12, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293413322, 'comment_body': 'Pulled up the latest changes and the color looks good now, but the down arrow/chevron in the new setting dropdown is still a bit bigger than the other ones (at least in Chrome and Firefox on Linux) ...\r\n\r\n<details>\r\n<summary>Organization settings - Joining the organization - Iago</summary>\r\n\r\n![Screenshot from 2023-08-14 14-41-29](https://github.com/zulip/zulip/assets/63245456/c7ca91b6-ce49-4f8e-a52b-20478b9858dd)\r\n</details>', 'comment_created': datetime.datetime(2023, 8, 14, 12, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294429696, 'comment_body': 'Needs to be ""the creator of the changed invitation"" because we\'re referring to a specific user and invitation. Might be nice to expand the first sentence for clarity too...\r\n\r\n> A simple event sent when the set of invitations in the organization changes. This event is sent to organization administrators and the creator of the changed invitation; this tells clients ...\r\n\r\nAnd in the **Changes** note below, maybe expand to ""organization administrators"" for consistency with the text above.', 'comment_created': datetime.datetime(2023, 8, 15, 10, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294432884, 'comment_body': 'Using feature level 163 as a template, how about ...\r\n\r\n```markdown\r\n* [`GET /events`](/api/get-events): When the set of invitations in an\r\n  organization changes, an `invites_changed` event is now sent to the\r\n  creator of the changed invitation, as well as all admin users.\r\n  Previously, this event was only sent to admin users.\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 10, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294681898, 'comment_body': 'I think we can do this for other dropdown widgets as well. The widget for ""Who can remove subscribers from this stream"" setting is also different from other dropdowns on the page.\r\n\r\nWould be good to have a discussion on CZO, but should not be a blocker for this PR.', 'comment_created': datetime.datetime(2023, 8, 15, 14, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1317856586, 'comment_body': ""@sahil839 is there a reason `allow_owners_group` should be false here? I can see situations where one might want to limit it to just owners, but wasn't sure if there was some policy situation to think about here."", 'comment_created': datetime.datetime(2023, 9, 6, 21, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317857432, 'comment_body': 'This is probably fine but deserves a comment. Later we might refactor this function away from living in `models.py` to some `zerver/lib/` space of its own to resolve that.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317872713, 'comment_body': 'This is a known issue with the component in general and we can deal with separately.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317880509, 'comment_body': 'Yeah, this would be good to discuss in chat.zulip.org @Ujjawal3 can you start such a thread and link back to it here?', 'comment_created': datetime.datetime(2023, 9, 6, 22, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317890034, 'comment_body': ""I'm pretty sure it's going to be an import cycle to have `server_events_disptach` call a function in the `ui_init` module. I think what we should do is move `update_invite_user_option` into either `gear_menu.js` to or maybe better a new `right_sidebar_ui.js` module that's responsible for that little component.\r\n\r\nThis is OK to merge since we're not trying to avoid import cycles in this module right now, but please start a #frontend discussion about this detail."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317892153, 'comment_body': 'There shouldn\'t be a space before the `?` here; I\'ll just fix that before merging.\r\n\r\nAlso, I wonder if it\'d be better to make the check ""If the referrer is anyone other than me""? \r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 6, 22, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317898370, 'comment_body': ""This logic does not match the API documentation -- we're notifying the **acting user**, not the user who created the modified invitation. I'm pretty sure this implementation is thus wrong if say an administrator revokes an invitation that a normal user had created.\r\n\r\nThis is definitely a bug and we should fix it but it's also obscure enough that I'm not going to block merging this on doing so; we can just fix it in a near-term follow-up."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317907529, 'comment_body': ""So I think we actually want the default for existing administrators that hadn't specified `NOBODY` as their policy to be `role:administrators`, because that way we don't adjust permissions for anyone upwards unexpectedly. "", 'comment_created': datetime.datetime(2023, 9, 6, 22, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317912629, 'comment_body': '``` diff\r\ndiff --git a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\nindex f162fb3e05..6a82d6afea 100644\r\n--- a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n+++ b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n@@ -11,34 +11,23 @@ def set_default_value_for_create_multiuse_invite_group(\r\n     Realm = apps.get_model(""zerver"", ""Realm"")\r\n     UserGroup = apps.get_model(""zerver"", ""UserGroup"")\r\n \r\n-    Realm.POLICY_NOBODY = 6\r\n-    Realm.POLICY_ADMINS_ONLY = 2\r\n-\r\n-    UserGroup.NOBODY_GROUP_NAME = ""role:nobody""\r\n     UserGroup.ADMINISTRATORS_GROUP_NAME = ""role:administrators""\r\n-    default_group_name = ""role:moderators""\r\n \r\n     for realm in Realm.objects.all():\r\n-        if realm.create_multiuse_invite_group is None:\r\n-            if realm.invite_to_realm_policy == Realm.POLICY_NOBODY:\r\n-                nobody_group = UserGroup.objects.get(\r\n-                    name=UserGroup.NOBODY_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = nobody_group\r\n-\r\n-            elif realm.invite_to_realm_policy == Realm.POLICY_ADMINS_ONLY:\r\n-                admins_group = UserGroup.objects.get(\r\n-                    name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = admins_group\r\n-\r\n-            else:\r\n-                default_group = UserGroup.objects.get(\r\n-                    name=default_group_name, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = default_group\r\n-\r\n-            realm.save(update_fields=[""create_multiuse_invite_group""])\r\n+        if realm.create_multiuse_invite_group is not None:\r\n+            continue\r\n+\r\n+        # Prior to the new create_multiuse_invite_group field being\r\n+        # created, multi-use invitation links could only be created\r\n+        # and managed by administrators, regardless of\r\n+        # invite_to_realm_policy. We replicate that policy for the\r\n+        # initial value of the new setting.\r\n+        admins_group = UserGroup.objects.get(\r\n+            name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n+        )\r\n+        realm.create_multiuse_invite_group = admins_group\r\n+\r\n+        realm.save(update_fields=[""create_multiuse_invite_group""])\r\n \r\n \r\n class Migration(migrations.Migration):\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 23, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317914970, 'comment_body': ""After discussion with @alya, I think we should change this to `ADMINISTRATORS_GROUP_NAME`; we couldn't come up with a ton of use cases for moderator use of this, and I feel like that might better match user expectations in new organizations."", 'comment_created': datetime.datetime(2023, 9, 6, 23, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1318000872, 'comment_body': 'I think there is nothing wrong. We are passing the user who created the invitation not the one changing the invitation to `acting_user`. We must change the `acting_user` to some other name to avoid this confusion. ', 'comment_created': datetime.datetime(2023, 9, 7, 2, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318002423, 'comment_body': 'I have started the discussion about this earlier [here](https://chat.zulip.org/#narrow/stream/101-design/topic/Large.20down.20arrow.20in.20dropdown.20list.20widget)', 'comment_created': datetime.datetime(2023, 9, 7, 2, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318169422, 'comment_body': ""I am not sure. I thought it was described as such in the issue, but it isn't. I don't think there would be any issues to allow `Owners only` option. @Ujjawal3 can you confirm if we are missing something here? If not then we can set `allow_owners_group` as true."", 'comment_created': datetime.datetime(2023, 9, 7, 7, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318178236, 'comment_body': 'Yeah, I think we can just rename the `acting_user` to something else. I was thinking of `referred_by` first, but that would also be confusing since we do not include which invite wass changed in the event. Probably something like `changed_invite_referrer` could be better.', 'comment_created': datetime.datetime(2023, 9, 7, 7, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318884468, 'comment_body': 'Yeah `changed_invite_referrer` works for me.', 'comment_created': datetime.datetime(2023, 9, 7, 16, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '65e1b14dcd3aaec1999f37e32332fe6bf11a5993', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1076b91b58be1ba718faff4c7fb69f9ad01cc367', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f942d8d15dbc5a9bc7cf04dd4cac25243ed43adf', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4313be654becad21e2cec648d0ec20273e40818f', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805c4906403b32e6b05cd6e0f0079c148aa7b4f', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b22927e94f87e0e3801575910e9ce8576f6bf5', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc974815de7f92daeb18617b015a8c6a7915ccf0', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47cb883d681a246023e52f3476db089d4a1e2393', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05af0ce504b3a0ab8cfd10fd483d786a707359f7', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f43281518b4f1f138928a58ba96e9dab4ca9c65a', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9100f8756f716014fdddbe71d861b43443fae0a4', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb18fd117c93147092abca881d3fe5059269c85', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96f4749edaafcfc9bd5f0380457b7b2bb2723207', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9c7145f2ea7c18720ec776e54a6ea9ee8e0d30', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1377731751,invitations: Add a new setting `Who can create multiuse invite link`.,"This PR adds a new realm level setting `Who can create multiuse invite link` based on the group permissions
model.  

Relevant discussions
1. [Regarding refactor of code to flush cache](https://chat.zulip.org/#narrow/stream/49-development-help/topic/Circular.20dependency.20of.20Django.20models)
2. [Discussion for adding realm level group setting](https://chat.zulip.org/#narrow/stream/101-design/topic/New.20permissions.20model)

Fixes: #15159 

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
New organization settings panel
![image](https://github.com/zulip/zulip/assets/99073049/e1c1a079-5198-45cf-9452-d97b953339dd)

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25884,https://api.github.com/repos/zulip/zulip/pulls/25884,https://github.com/zulip/zulip/pull/25884,closed,961,123,57,14,32,126,5,0,"[{'name': 'area: settings (admin/org)'}, {'name': 'size: XL'}, {'name': 'area: settings (user groups)'}, {'name': 'integration review'}, {'name': 'api docs review'}]",2023-06-04 12:34:58+00:00,2023-09-07 21:21:01+00:00,8239563.0,"95 days, 8:46:03","[{'comment_id': 1218280325, 'comment_body': 'I think it would be good idea to move all entries of system_groups names from `UserGroup` model to `Realm` model as a follow up after this PR.', 'comment_created': datetime.datetime(2023, 6, 5, 15, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1218281704, 'comment_body': 'I was getting a circular dependency error if it was imported at the beginning of module. ', 'comment_created': datetime.datetime(2023, 6, 5, 15, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1224869239, 'comment_body': 'I initially wrote the function like this \r\n```\r\nexport function user_can_create_muliuse_invite(): boolean {\r\n    return user_groups.is_user_in_group(\r\n        page_params.realm_create_multiuse_invite_group_id,\r\n        people.my_current_user_id()\r\n    );\r\n}\r\n```\r\nBut `People` module can not be imported because of circular dependancy. ', 'comment_created': datetime.datetime(2023, 6, 9, 22, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1225146966, 'comment_body': 'I think adding a type hint here and dictionary below would be helpful.', 'comment_created': datetime.datetime(2023, 6, 10, 6, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225186453, 'comment_body': 'I think you can drop `group_name_to_group_dict` if you want to retrieve a `UserGroup` by its name, you can use `all_system_user_groups.get(name=group_name)` instead.', 'comment_created': datetime.datetime(2023, 6, 10, 7, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225291105, 'comment_body': ""Using `local()` inside a loop is expensive and a it's a bit of code smell already as mentioned in above comment. Here's an alternative approach I can suggest:\r\n\r\nOutside this loop\r\n```\r\nreq_vars = {}\r\nreq_group_vars = {} # You may need to adjust the exact variable name here\r\n\r\nfor k, v in list(locals().items()):\r\n    if k in realm.property_types:\r\n        req_vars[k] = v\r\n    if k in Realm.REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING:\r\n        req_group_vars[k] = v \r\n```\r\nAlternatively, if you want to include group settings in req_vars, you will need to make changes to the above loop to skip group settings."", 'comment_created': datetime.datetime(2023, 6, 10, 11, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225467687, 'comment_body': 'I think this list is in alphabetic order and we should follow that. ', 'comment_created': datetime.datetime(2023, 6, 10, 17, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768244, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225768580, 'comment_body': 'Since we use `default_group` multiple times, it would be better to store it in a variable.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225769998, 'comment_body': 'As suggested above, see if you can also drop this dictionary here.', 'comment_created': datetime.datetime(2023, 6, 11, 10, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225779764, 'comment_body': 'As most of the fields have comments that explain what they do, I think we should do the same for this field.', 'comment_created': datetime.datetime(2023, 6, 11, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225793089, 'comment_body': ""I think you missed it. This link shouldn't be part of this commit; the later one should be."", 'comment_created': datetime.datetime(2023, 6, 11, 12, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873239, 'comment_body': '*multiuse', 'comment_created': datetime.datetime(2023, 6, 11, 17, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1225873301, 'comment_body': '*links', 'comment_created': datetime.datetime(2023, 6, 11, 17, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226203473, 'comment_body': 'We can move this inside the if statement below. No need for the query if we are not using it.', 'comment_created': datetime.datetime(2023, 6, 12, 7, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1226222153, 'comment_body': ""I was just thinking that inside the action function, we don't check the permission configuration. So if we drop these checks, it will work just fine. However, we still need to keep `user_group.name == default_group_name` to make sure state changes."", 'comment_created': datetime.datetime(2023, 6, 12, 7, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1227958319, 'comment_body': 'I added this code after adding all event listener so that we can avoid some duplicate code by using `$(""#generate_multiuse_invite_radio"").trigger(""change"")`', 'comment_created': datetime.datetime(2023, 6, 13, 11, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228023141, 'comment_body': ""I don't know why git is changing this line rather than the later one."", 'comment_created': datetime.datetime(2023, 6, 13, 12, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1228027746, 'comment_body': 'I liked the suggested approach. So, updated the code accordingly.', 'comment_created': datetime.datetime(2023, 6, 13, 12, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1232384665, 'comment_body': 'I think it is better to pass `update_fields` in `save()`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232385207, 'comment_body': 'I think can be better spelled as `if X is None:`.', 'comment_created': datetime.datetime(2023, 6, 16, 15, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232968223, 'comment_body': 'This list is in alphabetical order.', 'comment_created': datetime.datetime(2023, 6, 17, 5, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1232978644, 'comment_body': 'These two classes could have been added in a single line: `$(""#email_invite_radio_container"").addClass(""control-label-disabled disabled_setting_tooltip"")`;.', 'comment_created': datetime.datetime(2023, 6, 17, 6, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1233000780, 'comment_body': 'Here also `elif X is Y:`.', 'comment_created': datetime.datetime(2023, 6, 17, 8, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1234164981, 'comment_body': 'You should add `durable=True` here inside `transaction.atomic`. And we should also add `savepoint=False` for transactions that are performed inside a transaction.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234165520, 'comment_body': 'This should also contain `durable=True`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234176574, 'comment_body': 'We can create a system group dict with group name as key and group object as value outside the loop. This way we would avoid calling `.get` in a loop. This works fine currently because there is ony one setting in `REALM_PERMISSION_GROUP_SETTINGS`.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234178408, 'comment_body': 'We are avoiding sending the `can_...` properties for new settings here. We instead expect client to calculate whether user can create the links or not using the setting value which is passed above.', 'comment_created': datetime.datetime(2023, 6, 19, 14, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234233270, 'comment_body': '`rrealm.POLICY_NOBODY` is not `None` so I made it `realm.invite_to_realm_policy is realm.POLICY_NOBODY:`', 'comment_created': datetime.datetime(2023, 6, 19, 15, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1234257628, 'comment_body': 'We can have a separate function for group-based settings but I am not sure. We can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234258578, 'comment_body': 'I think it would be better to combine both these functions for owner and admin and name it accordingly.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234272522, 'comment_body': 'I get how this is used, but we can directly add ""_id"" to the setting name. I feel it is unnecessary, but we can wait for more feedback.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1234273090, 'comment_body': 'But this may be fine since we would convert other settings to group based settings eventually.', 'comment_created': datetime.datetime(2023, 6, 19, 16, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237946384, 'comment_body': 'Hmm, this seems confusing to have a `check_if_owner_or_administrator_required` function and also another check to verify the user is an admin or not. I think we can instead rename the function to something like `check_admin_permissions` or `check_role_based_permissions` and add a parameter like `require_atleast_admin`. The function could be something like -\r\n```python\r\ndef func_name():\r\n    # owner check based on invite_as value\r\n\r\n    if require_atleast_admin and not user_profile.is_realm_admin:\r\n        raise JsonableError(""Must be an organization administrator"")\r\n\r\n    # admin check based on invite_as value\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 3, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237950835, 'comment_body': 'Why the key for this dict is `Optional[str]`? I expect the `user_group` object would have name set in all cases. Also, we could possibly extract this as a function to get a dict for system groups since that would be re-used at a couple of places.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237952560, 'comment_body': 'I guess this has `Optional` because we do not set it for `can_remove_subscribers_group` setting. Just noting here that I have added a commit for this in my PR #26070. We can rebase one of the PRs depending on which PR is merged first, so it is fine for now.', 'comment_created': datetime.datetime(2023, 6, 22, 3, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1237965688, 'comment_body': 'This `login` call can be removed I guess and there are a couple of such lines below as well. Basically there is no need to login as a admin user when changing setting using `do_...` function.', 'comment_created': datetime.datetime(2023, 6, 22, 4, 2, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238067677, 'comment_body': 'Running this migration gives an error on my system because you cannot access constants like `POLICY_NOBODY` and `NOBODY_GROUP_NAME`. You would need to define them at the top. You can see other such migrations where we do this.', 'comment_created': datetime.datetime(2023, 6, 22, 6, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238086632, 'comment_body': 'Would also be good to rename `user_can_invite_others_to_realm` to something like `user_can_send_email_invite_to_others`.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238103213, 'comment_body': 'A better fix here would to make the selector for setting margin-top to 10px more selective probably by using `input-group` class.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238129700, 'comment_body': 'I think we should also test the cases where a user tries to set the setting to these groups and check that these raise an error.', 'comment_created': datetime.datetime(2023, 6, 22, 7, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1238221853, 'comment_body': 'Should I just rename this function or all the variables related to this setting?', 'comment_created': datetime.datetime(2023, 6, 22, 8, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1238253708, 'comment_body': 'I think both because having `can_invite_others_to_realm` as `False`, feels user is not allowed to create multiuse link as well. Would probably be better to do this change in a separate prep commit.', 'comment_created': datetime.datetime(2023, 6, 22, 9, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1241470412, 'comment_body': 'Ohh, sorry for the confusion here. But I did not meant to rename the database field and the API fields sent through `/events`, `/register`,etc. endpoints. I only meant the variables used internally. It would be better to get feedback from others before renaming the database fields and the fields sent in API responses.', 'comment_created': datetime.datetime(2023, 6, 26, 3, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1242838590, 'comment_body': 'I have updated the PR. Please have a look.', 'comment_created': datetime.datetime(2023, 6, 26, 21, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1243305251, 'comment_body': 'Would be better to use `==` for comparing values here. We generally use `is` for checking if  value is `None` or not.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1243315109, 'comment_body': 'This should have `durable=True` and not `savepoint=False` since we do not call this function inside another atomic transaction as of now.', 'comment_created': datetime.datetime(2023, 6, 27, 8, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1244924578, 'comment_body': 'There is an extra space here.', 'comment_created': datetime.datetime(2023, 6, 28, 9, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1253737339, 'comment_body': ""What's the thinking behind doing this here rather than around all of `create_internal_realm`? The latter certainly seems more correct to me, since then either we have a fully initialized server or a server that's not initialized at all."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253738706, 'comment_body': '`require_admin` would be a more traditional name for this parameter.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740414, 'comment_body': 'I think this block could be replaced by having the one caller pass `require_admin=invited_as in [PreregistrationUser.INVITE_AS[""REALM_ADMIN""], ...]`, maybe with that variable being set on its own line, in the one caller that uses this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253740962, 'comment_body': 'The writing style here feels a lot more sloppy than existing API changelog entries; please read some similar ones and polish this.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253741804, 'comment_body': 'I think a better change here would be to add a prep commit that makes this test call `do_create_realm` properly rather than trying to make a realm object hackily this other way.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253742817, 'comment_body': '`do_change_realm_permission_group_setting` (singular, and using `change`) feels clearer to me. We\'re changing a single group setting.\r\n\r\nThe reason I prefer ""change"" over ""set"" is that we\'re moving a pointer (the group ID), effectively, rather than changing a value. ', 'comment_created': datetime.datetime(2023, 7, 5, 23, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743143, 'comment_body': ""Let's change `name` to `setting_name`, and have an `assert setting_name in REALM_PERMISSION_GROUP_SETTINGS` line, just for readability that we expect this to be one of those values."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253743668, 'comment_body': ""As discussed in https://chat.zulip.org/#narrow/stream/378-api-design/topic/event.20for.20updating.20group.20setting/near/1600758, let's avoid the property/value format here."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744122, 'comment_body': 'This is an old pattern; switch this to `send_event_on_commit`. @HemantUmre12 @sahil839 FYI too since you may have some PRs that need this tweak too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253744828, 'comment_body': 'This could be accessing the shorter `REALM_PERMISSION_GROUP_SETTINGS`, right? I think there may be a few more cases in this PR too.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253746983, 'comment_body': 'I think an even better plan might be to move them to a central object or dataclass, rather than hanging off a model at all, but agreed this is a good follow-up.', 'comment_created': datetime.datetime(2023, 7, 5, 23, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1253747643, 'comment_body': ""I'm not opposed to this existing; I guess most places that currently reference `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` feel like they should access `REALM_PERMISSION_GROUP_SETTINGS` instead, but maybe that doesn't work because of the `_id` suffix. \r\n\r\nI think the right larger model would be to have `GroupPermissionSetting` have an `id_field_name` field."", 'comment_created': datetime.datetime(2023, 7, 5, 23, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1254011956, 'comment_body': 'Most of the places we use the `REALM_PERMISSION_GROUP_SETTING_ID_TO_GROUP_SETTING` object in a loop. So in those places we can just loop over `REALM_PERMISSION_GROUP_SETTINGS` and add ""_id"" to the string like we do for stream settings currently.\r\n\r\nAnd a couple of other places where we use this differently is in `has_permission` code in `models.py` and in `views/realm.py` to check whether a setting is a group-based settings to add its new value in `req_group_setting_vars` object.\r\n\r\nWe can actually directly use `create_multiuse_invite_group` instead of `create_multiuse_invite_group_id` in `has_permission` as we eventually pass user group object in `is_user_in_group`.\r\nWhile this dict is actually helpful to use in the `views/realm.py` code. And that also might be changed if we change the parameters to not have ""_id"" to allow setting them to single user groups.\r\n', 'comment_created': datetime.datetime(2023, 7, 6, 6, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254013215, 'comment_body': 'But yeah, I agree that having `id_field_name` would be a better plan.', 'comment_created': datetime.datetime(2023, 7, 6, 6, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1254148649, 'comment_body': 'Hmm, keeping this dict is helpful in `views/realm.py`. If we will change the parameters to not have ""_id"" than we can remove this dict. But in that case I think we should also make changes in name of `page_params` and `events` because our current logic in frontend for changing the settings is based on the assumption that name of the setting received in `page_params` is same as name of the parameter used for changing the setting. Otherwise we need to maintain an array in frontend to distinguish between role based and group based setting.', 'comment_created': datetime.datetime(2023, 7, 6, 9, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1254735119, 'comment_body': 'By default `do_create_realm` creates a realm with `plan_type`=2. But the test expects realm of `plan_type`=1.', 'comment_created': datetime.datetime(2023, 7, 6, 17, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1255697129, 'comment_body': 'I am not sure whether there is anything better which can be done here.', 'comment_created': datetime.datetime(2023, 7, 7, 11, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1263144650, 'comment_body': ""Please don't use numerical values like `1`; always use readable values like `Realm.PLAN_TYPE_FOO` instead."", 'comment_created': datetime.datetime(2023, 7, 13, 23, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1283324310, 'comment_body': ""I don't think there is need for this code. It was only needed to pass [this](https://github.com/zulip/zulip/blob/6632eca2dcf2051043e95348658d6da02305669f/zerver/tests/test_import_export.py#L1554) test. In this test `zerver_usergroup` is not present in data but `create_multiuse_invite` field have a value. As `zerver_usergroup` is not present I need  to delete this from imported data. "", 'comment_created': datetime.datetime(2023, 8, 3, 14, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1285228813, 'comment_body': 'I am not sure whether we want a separate feature level entry for these API changes.', 'comment_created': datetime.datetime(2023, 8, 6, 14, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1286671358, 'comment_body': ""Yeah, this will not be needed. Can we instead modify the test data to set the setting fields to `None`? I guess that's what happens when a slack organization or data from any other product is imported."", 'comment_created': datetime.datetime(2023, 8, 8, 6, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286682747, 'comment_body': 'I think we should add `atomic = False` here to prevent running a one large transaction.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286687625, 'comment_body': 'We can avoid looping over objects here and instead run three queries - one for `invite_to_realm_policy` set to `POLICY_NOBODY`, one for `invite_to_realm_policy` set to `POLICY_ADMINS_ONLY` and one for rest of the realms where each query would be similar to what we do in the `0455` migration (without the batching I guess).\r\n\r\nBut I am not sure whether the complexity is required here for `Realm` table, so we can leave it as it is for now and just add the `atomic = False` as mentioned in the below comment.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710032, 'comment_body': 'I think using same feature level should be fine.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286710250, 'comment_body': 'We can use `DELETE` instead of `DEL`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286716392, 'comment_body': 'This change should be done in the last commit that includes changes for this particular feature level.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286725398, 'comment_body': 'We should also verify whether the event format sent here is as expected or not like we do in `do_set_realm_property_test`.', 'comment_created': datetime.datetime(2023, 8, 8, 7, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286865415, 'comment_body': 'Should we just sent the event to admins and the user who would be affected like the one who sent the invite only and not all the non-admin users?', 'comment_created': datetime.datetime(2023, 8, 8, 9, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1286943690, 'comment_body': 'This should mirror the API changelog entries for new realm settings. See feature levels 162, 137, 129, 109.\r\n\r\nAlso, ID should be capitalized and normal text vs formatted as inline code.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286952147, 'comment_body': 'Revised text w/link:\r\n`PATCH /realm`: Added `create_multiuse_invite_group` parameter to support changing the user group whose members can create [reusable invitation links](relative link to help center article).\r\n\r\nPerhaps a ""Previously, creating reusable invite links was ..."" note for when this endpoint is documented.', 'comment_created': datetime.datetime(2023, 8, 8, 10, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286969053, 'comment_body': 'Revised text:\r\n`GET /invites`: Endpoint response for non-admin users now includes both email invitations and reusable invitation links that they have created. Previously, non-admin users could only create email invitations, and therefore the response did not include reusable invitation links for these users.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286971070, 'comment_body': 'Also, maybe revise text to: \r\n\r\n""Non-admin users can now revoke reusable invite links they have created. Previously, only admin users could create and revoke reusable invite links.""', 'comment_created': datetime.datetime(2023, 8, 8, 11, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286978965, 'comment_body': 'Link to help center documentation, and maybe use ""reusable invitation links"" vs ""invite links"".\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1286981821, 'comment_body': 'I think we removed the `@` from these system group names. See `can_mention_group` in documentation.\r\n\r\nSame note for register response feature level note.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287000573, 'comment_body': 'How about move the sentence from below here:\r\n\r\n```\r\n* You can [restrict the ability to invite new users](#change-who-can-send-invitations) to\r\n join your Zulip organzation to specific [roles](/help/roles-and-permissions).\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 11, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287001075, 'comment_body': 'Delete this content here and move first sentence to bullet point above.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287002223, 'comment_body': 'I think it would be good to have this be ""Who can create reusable invitation links"" here and in the UI.', 'comment_created': datetime.datetime(2023, 8, 8, 11, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287003607, 'comment_body': 'Maybe ""Who can create reusable invitation links""?', 'comment_created': datetime.datetime(2023, 8, 8, 11, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287028843, 'comment_body': 'Maybe change to ""Create a reusable invitation link"" for consistency.', 'comment_created': datetime.datetime(2023, 8, 8, 12, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1287107032, 'comment_body': 'I could not figure out how to define data type of events corresponding to group setting updates. We need to define required keys and optional keys but for these events there should be atleast one key from `Realm.REALM_GROUP_PERMISSIONS_SETTING` . I tried something like this but there was an error because of enum type.\r\n```\r\n    required_keys=[\r\n      (EnumType([setting_name for setting_name in Realm.REALM_PERMISSION_GROUP_SETTINGS]),int),\r\n    ]\r\n```\r\nI looked at other definitions but could not find any where we need to do such thing.', 'comment_created': datetime.datetime(2023, 8, 8, 13, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1287116657, 'comment_body': 'Yes we can do that. So I think we should change the function to something like this\r\n```\r\ndef notify_invites_changed(realm: Realm, acting_user: Optional[UserProfile]=None) -> None:\r\n    event = dict(type=""invites_changed"")\r\n    admin_ids = [user.id for user in realm.get_admin_users_and_bots()]\r\n    recipient_ids=admin_ids\r\n    if(acting_user):\r\n        recipient_ids.append(acting_user.id)\r\n   send_event(realm, event, recipient_ids)\r\n```', 'comment_created': datetime.datetime(2023, 8, 8, 13, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1288058636, 'comment_body': ""I don't think you can use `EnumType` as a first element of a tuple, it has to be a `str`.\r\n\r\nI think what we can do is define something like `group_setting_update_data_type` as a `DictType` with only `optional_keys` and then check that atlease one field is present. Something similar to what we do for `check_user_group_update`."", 'comment_created': datetime.datetime(2023, 8, 9, 7, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288059577, 'comment_body': 'Yes, that seems correct.', 'comment_created': datetime.datetime(2023, 8, 9, 7, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1288482928, 'comment_body': 'Yes, I have modified the test data and have removed this code.', 'comment_created': datetime.datetime(2023, 8, 9, 13, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1290227395, 'comment_body': ""So, we can just combine these two bullet points, like we do for other new realm settings:\r\n\r\n```markdown\r\n* `PATCH /realm`, [`POST /register`](/api/register-queue),\r\n  [`GET /events`](/api/get-events): Added `create_multiuse_invite_group`\r\n  realm setting, which is the ID of the user group whose members can\r\n  create [reusable invitation links](/help/invite-new-users#create-a-reusable-invitation-link)\r\n  to an organization. Previously, only admin users could create these\r\n  links.\r\n```\r\n\r\nI switched the word order up a little bit so that the text wrapping in the rendered changelog looks better. Also, I think it's best to have the help link in the first bullet point."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290230568, 'comment_body': 'We\'ll want a comma after ""Previously"" when it starts a sentence. Again, it would be good to be consistently using ""reusable invitation links"". And let\'s modify the second sentence to focus on the change to the endpoint:\r\n\r\n```markdown\r\n* `POST /invites/multiuse`: Non-admin users can now use this endpoint\r\n  to create reusable invitation links. Previously, this endpoint was\r\n  restricted to admin users only.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290234905, 'comment_body': ""Small note, there's an extra space after the colon here. I always find it useful to look at the documentation changes in a browser to catch these little things."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290237895, 'comment_body': 'Again, let\'s be consistent with ""reusable invitation links"" here.', 'comment_created': datetime.datetime(2023, 8, 10, 14, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290240323, 'comment_body': ""Again, I think we can just delete all the content before the header here, even the `{!owner-only.md!)` since that's at the top of this page."", 'comment_created': datetime.datetime(2023, 8, 10, 14, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290243768, 'comment_body': 'One more small tweak here and in the register response:\r\n\r\n```markdown\r\nThe ID of the [user group](/api/get-user-groups) whose members are\r\nallowed to create [reusable invitation\r\nlinks](/help/invite-new-users#create-a-reusable-invitation-link)\r\nto the organization.\r\n```', 'comment_created': datetime.datetime(2023, 8, 10, 14, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1290247785, 'comment_body': 'I think this is being rendered a little differently than the other settings ...\r\n\r\n<details>\r\n<summary>screenshot as Iago</summary>\r\n\r\n![Screenshot from 2023-08-10 15-41-14](https://github.com/zulip/zulip/assets/63245456/ec0db657-6adf-4126-aa87-d2bef86a3df5)\r\n</details>\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 10, 14, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293039436, 'comment_body': 'Yeah we use the custom dropdown widget, like the ones used for `New stream announcements` setting for group-based settings. And other settings used the default `select` element.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293045784, 'comment_body': 'I am not completely sure, but we might need a changelog entry for this too. @laurynmm FYI.', 'comment_created': datetime.datetime(2023, 8, 14, 6, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293059131, 'comment_body': 'I think duplicate events are being sent here for admins here. ', 'comment_created': datetime.datetime(2023, 8, 14, 7, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293062082, 'comment_body': ""I think we don't need to send the event here to `user_profile` since this is called as a result of deactivating the user."", 'comment_created': datetime.datetime(2023, 8, 14, 7, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293084934, 'comment_body': 'And the setting should be disabled for `Iago`. It is disabled for me.', 'comment_created': datetime.datetime(2023, 8, 14, 7, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1293168058, 'comment_body': 'Yeah, earlier the UI of dropdown widget was not consistent with the other select fields. I made changes in last push and now it looks consistent.', 'comment_created': datetime.datetime(2023, 8, 14, 8, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293239011, 'comment_body': 'Yes, earlier there were duplicate eevents. I have made changes now.', 'comment_created': datetime.datetime(2023, 8, 14, 9, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1293403181, 'comment_body': 'Yeah, looking at https://zulip.com/api/get-events#invites_changed, we would need to update the event description for the new users that get these events as well as make a **Changes** note for the previous state (only admins received these events) and a corresponding entry/bullet point in the API changelog for feature level 202 (at this point).', 'comment_created': datetime.datetime(2023, 8, 14, 12, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1293413322, 'comment_body': 'Pulled up the latest changes and the color looks good now, but the down arrow/chevron in the new setting dropdown is still a bit bigger than the other ones (at least in Chrome and Firefox on Linux) ...\r\n\r\n<details>\r\n<summary>Organization settings - Joining the organization - Iago</summary>\r\n\r\n![Screenshot from 2023-08-14 14-41-29](https://github.com/zulip/zulip/assets/63245456/c7ca91b6-ce49-4f8e-a52b-20478b9858dd)\r\n</details>', 'comment_created': datetime.datetime(2023, 8, 14, 12, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294429696, 'comment_body': 'Needs to be ""the creator of the changed invitation"" because we\'re referring to a specific user and invitation. Might be nice to expand the first sentence for clarity too...\r\n\r\n> A simple event sent when the set of invitations in the organization changes. This event is sent to organization administrators and the creator of the changed invitation; this tells clients ...\r\n\r\nAnd in the **Changes** note below, maybe expand to ""organization administrators"" for consistency with the text above.', 'comment_created': datetime.datetime(2023, 8, 15, 10, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294432884, 'comment_body': 'Using feature level 163 as a template, how about ...\r\n\r\n```markdown\r\n* [`GET /events`](/api/get-events): When the set of invitations in an\r\n  organization changes, an `invites_changed` event is now sent to the\r\n  creator of the changed invitation, as well as all admin users.\r\n  Previously, this event was only sent to admin users.\r\n```', 'comment_created': datetime.datetime(2023, 8, 15, 10, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'laurynmm', 'type': 'User'}, {'comment_id': 1294681898, 'comment_body': 'I think we can do this for other dropdown widgets as well. The widget for ""Who can remove subscribers from this stream"" setting is also different from other dropdowns on the page.\r\n\r\nWould be good to have a discussion on CZO, but should not be a blocker for this PR.', 'comment_created': datetime.datetime(2023, 8, 15, 14, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1317856586, 'comment_body': ""@sahil839 is there a reason `allow_owners_group` should be false here? I can see situations where one might want to limit it to just owners, but wasn't sure if there was some policy situation to think about here."", 'comment_created': datetime.datetime(2023, 9, 6, 21, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317857432, 'comment_body': 'This is probably fine but deserves a comment. Later we might refactor this function away from living in `models.py` to some `zerver/lib/` space of its own to resolve that.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317872713, 'comment_body': 'This is a known issue with the component in general and we can deal with separately.', 'comment_created': datetime.datetime(2023, 9, 6, 21, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317880509, 'comment_body': 'Yeah, this would be good to discuss in chat.zulip.org @Ujjawal3 can you start such a thread and link back to it here?', 'comment_created': datetime.datetime(2023, 9, 6, 22, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317890034, 'comment_body': ""I'm pretty sure it's going to be an import cycle to have `server_events_disptach` call a function in the `ui_init` module. I think what we should do is move `update_invite_user_option` into either `gear_menu.js` to or maybe better a new `right_sidebar_ui.js` module that's responsible for that little component.\r\n\r\nThis is OK to merge since we're not trying to avoid import cycles in this module right now, but please start a #frontend discussion about this detail."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317892153, 'comment_body': 'There shouldn\'t be a space before the `?` here; I\'ll just fix that before merging.\r\n\r\nAlso, I wonder if it\'d be better to make the check ""If the referrer is anyone other than me""? \r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 6, 22, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317898370, 'comment_body': ""This logic does not match the API documentation -- we're notifying the **acting user**, not the user who created the modified invitation. I'm pretty sure this implementation is thus wrong if say an administrator revokes an invitation that a normal user had created.\r\n\r\nThis is definitely a bug and we should fix it but it's also obscure enough that I'm not going to block merging this on doing so; we can just fix it in a near-term follow-up."", 'comment_created': datetime.datetime(2023, 9, 6, 22, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317907529, 'comment_body': ""So I think we actually want the default for existing administrators that hadn't specified `NOBODY` as their policy to be `role:administrators`, because that way we don't adjust permissions for anyone upwards unexpectedly. "", 'comment_created': datetime.datetime(2023, 9, 6, 22, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317912629, 'comment_body': '``` diff\r\ndiff --git a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\nindex f162fb3e05..6a82d6afea 100644\r\n--- a/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n+++ b/zerver/migrations/0470_set_default_value_for_create_multiuse_invite_group.py\r\n@@ -11,34 +11,23 @@ def set_default_value_for_create_multiuse_invite_group(\r\n     Realm = apps.get_model(""zerver"", ""Realm"")\r\n     UserGroup = apps.get_model(""zerver"", ""UserGroup"")\r\n \r\n-    Realm.POLICY_NOBODY = 6\r\n-    Realm.POLICY_ADMINS_ONLY = 2\r\n-\r\n-    UserGroup.NOBODY_GROUP_NAME = ""role:nobody""\r\n     UserGroup.ADMINISTRATORS_GROUP_NAME = ""role:administrators""\r\n-    default_group_name = ""role:moderators""\r\n \r\n     for realm in Realm.objects.all():\r\n-        if realm.create_multiuse_invite_group is None:\r\n-            if realm.invite_to_realm_policy == Realm.POLICY_NOBODY:\r\n-                nobody_group = UserGroup.objects.get(\r\n-                    name=UserGroup.NOBODY_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = nobody_group\r\n-\r\n-            elif realm.invite_to_realm_policy == Realm.POLICY_ADMINS_ONLY:\r\n-                admins_group = UserGroup.objects.get(\r\n-                    name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = admins_group\r\n-\r\n-            else:\r\n-                default_group = UserGroup.objects.get(\r\n-                    name=default_group_name, realm=realm, is_system_group=True\r\n-                )\r\n-                realm.create_multiuse_invite_group = default_group\r\n-\r\n-            realm.save(update_fields=[""create_multiuse_invite_group""])\r\n+        if realm.create_multiuse_invite_group is not None:\r\n+            continue\r\n+\r\n+        # Prior to the new create_multiuse_invite_group field being\r\n+        # created, multi-use invitation links could only be created\r\n+        # and managed by administrators, regardless of\r\n+        # invite_to_realm_policy. We replicate that policy for the\r\n+        # initial value of the new setting.\r\n+        admins_group = UserGroup.objects.get(\r\n+            name=UserGroup.ADMINISTRATORS_GROUP_NAME, realm=realm, is_system_group=True\r\n+        )\r\n+        realm.create_multiuse_invite_group = admins_group\r\n+\r\n+        realm.save(update_fields=[""create_multiuse_invite_group""])\r\n \r\n \r\n class Migration(migrations.Migration):\r\n```', 'comment_created': datetime.datetime(2023, 9, 6, 23, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1317914970, 'comment_body': ""After discussion with @alya, I think we should change this to `ADMINISTRATORS_GROUP_NAME`; we couldn't come up with a ton of use cases for moderator use of this, and I feel like that might better match user expectations in new organizations."", 'comment_created': datetime.datetime(2023, 9, 6, 23, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1318000872, 'comment_body': 'I think there is nothing wrong. We are passing the user who created the invitation not the one changing the invitation to `acting_user`. We must change the `acting_user` to some other name to avoid this confusion. ', 'comment_created': datetime.datetime(2023, 9, 7, 2, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318002423, 'comment_body': 'I have started the discussion about this earlier [here](https://chat.zulip.org/#narrow/stream/101-design/topic/Large.20down.20arrow.20in.20dropdown.20list.20widget)', 'comment_created': datetime.datetime(2023, 9, 7, 2, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1318169422, 'comment_body': ""I am not sure. I thought it was described as such in the issue, but it isn't. I don't think there would be any issues to allow `Owners only` option. @Ujjawal3 can you confirm if we are missing something here? If not then we can set `allow_owners_group` as true."", 'comment_created': datetime.datetime(2023, 9, 7, 7, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318178236, 'comment_body': 'Yeah, I think we can just rename the `acting_user` to something else. I was thinking of `referred_by` first, but that would also be confusing since we do not include which invite wass changed in the event. Probably something like `changed_invite_referrer` could be better.', 'comment_created': datetime.datetime(2023, 9, 7, 7, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1318884468, 'comment_body': 'Yeah `changed_invite_referrer` works for me.', 'comment_created': datetime.datetime(2023, 9, 7, 16, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '65e1b14dcd3aaec1999f37e32332fe6bf11a5993', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1076b91b58be1ba718faff4c7fb69f9ad01cc367', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f942d8d15dbc5a9bc7cf04dd4cac25243ed43adf', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4313be654becad21e2cec648d0ec20273e40818f', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c805c4906403b32e6b05cd6e0f0079c148aa7b4f', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b22927e94f87e0e3801575910e9ce8576f6bf5', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc974815de7f92daeb18617b015a8c6a7915ccf0', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47cb883d681a246023e52f3476db089d4a1e2393', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05af0ce504b3a0ab8cfd10fd483d786a707359f7', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f43281518b4f1f138928a58ba96e9dab4ca9c65a', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9100f8756f716014fdddbe71d861b43443fae0a4', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb18fd117c93147092abca881d3fe5059269c85', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96f4749edaafcfc9bd5f0380457b7b2bb2723207', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e9c7145f2ea7c18720ec776e54a6ea9ee8e0d30', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1448851196,user_groups: Add group level setting for configuring who can manage that group.,"This PR adds a group level setting for configuring the permissions for managing the group.

Fixes part of #25928 (I am not sure what more work will be needed for single user system groups for other settings and we defintely do not have the UI part) and part of #25929.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",False,26355,https://api.github.com/repos/zulip/zulip/pulls/26355,https://github.com/zulip/zulip/pull/26355,open,1049,282,36,12,10,65,2,0,"[{'name': 'size: XL'}, {'name': 'integration review'}]",2023-07-25 17:28:43+00:00,,0.0,,"[{'comment_id': 1276037173, 'comment_body': 'I think its good to remove this test as now we also have a group level setting. I also have a question for the cases that should be added for testing editing permissions. I think  we need to make changes in `test_user_group_edit_policy_for_creating_and_deleting_user_group`, `test_user_group_edit_policy_for_updating_user_groups`,  and `test_user_group_edit_policy_for_updating_members`. Currently in these tests we test for all possible values of `user_group_edit_policy` field. I think now for each value of `user_group_edit_policy` we should test by having value of `can_manage_group` as everyone system group and nobody system group. Tagging you @sahil839 as I think you can answer whether we need to test any other scenario too. You can take a look to code changes to answer this as apart than test changes other things are completed.', 'comment_created': datetime.datetime(2023, 7, 27, 9, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1276043922, 'comment_body': 'Also I am not sure whether we need to separate test of permissions for creating and deleting user groups. I think we should separate them as now we also make use of group  level setting in determining whether a user group can be deleted by user or not and we would be also adding a separate setting for configuring user group creation permissions soon.  ', 'comment_created': datetime.datetime(2023, 7, 27, 9, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1277912676, 'comment_body': '> I think now for each value of user_group_edit_policy we should test by having value of can_manage_group as everyone system group and nobody system group.\r\n\r\nIt is not clear that tests for which settings you are referring to here. Are you referring to test the realm level setting or the group level setting. ', 'comment_created': datetime.datetime(2023, 7, 28, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1277916168, 'comment_body': '> Also I am not sure whether we need to separate test of permissions for creating and deleting user groups. I think we should separate them as now we also make use of group level setting in determining whether a user group can be deleted by user or not and we would be also adding a separate setting for configuring user group creation permissions soon.\r\n\r\nIs it decided that we would have a group-level setting for deleting groups? I cannot see in any of the issues that I have looked at. And it\'s not clear to me whether it will be a separate setting or ""Who can manage that group"" setting.', 'comment_created': datetime.datetime(2023, 7, 28, 17, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1277976251, 'comment_body': '> > I think now for each value of user_group_edit_policy we should test by having value of can_manage_group as everyone system group and nobody system group.\r\n> \r\n> It is not clear that tests for which settings you are referring to here. Are you referring to test the realm level setting or the group level setting.\r\n\r\nDo we need separate test for both settings? I was thinking to test both realm and group level settings in a single test beacuse to decide whether user has permissions to update user group will be determined both by group and realm level setting.', 'comment_created': datetime.datetime(2023, 7, 28, 18, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1277980660, 'comment_body': '> > Also I am not sure whether we need to separate test of permissions for creating and deleting user groups. I think we should separate them as now we also make use of group level setting in determining whether a user group can be deleted by user or not and we would be also adding a separate setting for configuring user group creation permissions soon.\r\n> \r\n> Is it decided that we would have a group-level setting for deleting groups? I cannot see in any of the issues that I have looked at. And it\'s not clear to me whether it will be a separate setting or ""Who can manage that group"" setting.\r\n\r\nNo, there is no issue which mentions adding a separate setting for configuring user group deletion permissions. From my understanding and work done in this PR till now I have assumed that user can delete the group if he has the permissions to manage the group.  ', 'comment_created': datetime.datetime(2023, 7, 28, 18, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1278840282, 'comment_body': '> Do we need separate test for both settings? I was thinking to test both realm and group level settings in a single test beacuse to decide whether user has permissions to update user group will be determined both by group and realm level setting.\r\n\r\nThe realm setting will be ""Who can manage all groups"" and this would override the group level permission I guess. So, would be better to have separate tests I guess. One for the realm setting where we can include tests to make sure that the group-level permissions are overridden correctly. And one for the group level setting, where realm level setting would not matter. \r\n\r\nI am not sure whether we should test all the system groups or not. But would definitely be helpful to include a couple of role-based groups like ""admins"" and ""moderators"" and not just ""everyone"" and ""nobody"" groups.', 'comment_created': datetime.datetime(2023, 7, 31, 6, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1278841757, 'comment_body': '> No, there is no issue which mentions adding a separate setting for configuring user group deletion permissions. From my understanding and work done in this PR till now I have assumed that user can delete the group if he has the permissions to manage the group.\r\n\r\nI am not sure whether we would want all the users who are allowed to add/remove the members to delete the group. Would be good to discuss this on CZO first before moving forward.', 'comment_created': datetime.datetime(2023, 7, 31, 6, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1294386788, 'comment_body': 'As discussed [here](https://chat.zulip.org/#narrow/stream/101-design/topic/New.20permissions.20model/near/1625159) there is no need to add a separate setting for group deletion permissions. I think we should now separate `test_user_group_edit_policy_for_creating_and_deleting_user_group` into `test_user_group_edit_policy_for_creating_user_group`, `test_realm_level_setting_for_deleting_user_group` and `test_group_level_setting_for_deleting_user_group`. @sahil839 FYI.', 'comment_created': datetime.datetime(2023, 8, 15, 9, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1294462852, 'comment_body': 'Yes, sounds good. ', 'comment_created': datetime.datetime(2023, 8, 15, 11, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1295503635, 'comment_body': 'Although this CSS property will be applied to widgets at other places also but I think it will not affect the UI. Because in most of the places height is `20px`, only when a user pill in rendered height was `27px` which was looking odd. So, using this necessary. ', 'comment_created': datetime.datetime(2023, 8, 16, 7, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1296173438, 'comment_body': 'I have to use data type as `string` here because with `number` there was problem with options `All members of this group` and `You`. So, now `unique_id` for role based system groups will be `group_id` only but in the form of `string` rather than `number`.', 'comment_created': datetime.datetime(2023, 8, 16, 16, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1296200808, 'comment_body': ""Don't know why but there was linting error without having this change."", 'comment_created': datetime.datetime(2023, 8, 16, 17, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1298151865, 'comment_body': 'Can we move these changes to set `acting_user` to a prep commit?', 'comment_created': datetime.datetime(2023, 8, 18, 8, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298258483, 'comment_body': 'This migration should be updated to be similar to `0455_set_default_for_can_mention_group` since looping over objects and calling `bulk_update` is not efficient for a server with large number of groups.', 'comment_created': datetime.datetime(2023, 8, 18, 9, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298304448, 'comment_body': 'I guess we can rename this to `can_edit_all_user_groups` when we add the new realm level setting.', 'comment_created': datetime.datetime(2023, 8, 18, 10, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298331871, 'comment_body': 'I think the `get_default_user_group_for_group_setting` can contain all the code here and would be just a single function which returns the user group.\r\n\r\nIt can be something similar to -\r\n```python\r\ndef get_default_group_for_setting(\r\n    user_group: UserGroup, setting_name: str, system_groups_name_dict: Dict[str, UserGroup]\r\n) -> UserGroup:\r\n    permission_config = UserGroup.GROUP_PERMISSION_SETTINGS[setting_name]\r\n    if user_group.is_system_group and permission_config.default_for_system_groups is not None:\r\n        return system_groups_name_dict[permission_config.default_for_system_groups]\r\n\r\n    default_group_name = permission_config.default_group_name\r\n    if default_group_name in system_groups_name_dict:\r\n        return system_groups_name_dict[default_group_name]\r\n\r\n    assert default_group_name == ""creating_user""\r\n    return create_single_user_system_group(group_name, user_group.realm)\r\n```', 'comment_created': datetime.datetime(2023, 8, 18, 11, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298333614, 'comment_body': 'This can be renamed as `get_or_create_single_user_group`.', 'comment_created': datetime.datetime(2023, 8, 18, 11, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298358118, 'comment_body': 'This was because you removed one of the function in `user_groups: Update code to check whether user can edit a user group.` commit, so this should be changed there.', 'comment_created': datetime.datetime(2023, 8, 18, 11, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298362604, 'comment_body': 'We can extract this a separate function by naming it something like - `check_setting_value_changed()` to keep this function somewhat easy to read and understand.', 'comment_created': datetime.datetime(2023, 8, 18, 11, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298371420, 'comment_body': 'Ok, calling `getattr(user_group, setting_name)` instead of `getattr(user_group, setting_group_id_name)` will result in a database query since we do not use `select_related` while fetching the `UserGroup` objects. There can be two ways to handle this -\r\n- One is that we fetch all the settings using `select_related` initially itself when fetching the `UserGroup` object in `access_user_group_by_id`.\r\n- Other is that for settings which are passed as `strings` we get the user group object for the new value if it exists (and probably create the group here itself if it does not exist already) and then compare the IDs for both to check whether the old value is same as the new value. If the single user group does not exist then we anyways know that the setting will be definitely changed. We will anyways do this query when changing the group setting so should be fine I guess. But yeah using `select_related` will save a query if the new value passed is same as the old value.', 'comment_created': datetime.datetime(2023, 8, 18, 12, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298377578, 'comment_body': 'If we create the new user group here by following the approach mentioned in second point in [the above comment](https://github.com/zulip/zulip/pull/26355#discussion_r1298371420), then we would not need this and we can simply call `do_change_user_group_permission_setting` without `access_user_group_for_setting`.\r\n\r\nAlso, another thing to consider here is do we want to send a single event for all the settings changed in one request and also do not call `.save` in a loop. We discussed this [here](https://chat.zulip.org/#narrow/stream/378-api-design/topic/event.20for.20updating.20group.20setting). Not sure it would be of much benefit if we do not have a large number of group-level settings (we currently only have two including the one added in this PR). ', 'comment_created': datetime.datetime(2023, 8, 18, 12, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298466957, 'comment_body': '@timabbott would be good to get your feedback for this and the [below comment](https://github.com/zulip/zulip/pull/26355#discussion_r1298377578) as well.', 'comment_created': datetime.datetime(2023, 8, 18, 13, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1298507200, 'comment_body': 'So, is it final that we want to keep this changes? I hope you have looked at second point of my comment [here](https://github.com/zulip/zulip/pull/26355#issuecomment-1680992834). Currently, there is no scenario in which we are sending `string` to server from frontend for changing a group level setting. So, this change is not used  presently. I did because earlier I misunderstood the design. ', 'comment_created': datetime.datetime(2023, 8, 18, 14, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1298512617, 'comment_body': 'I am not sure whether we would have such case as I am not sure how would be the UI in future. Will we directly provide single users in the options, or we would provide a UI for creating a new group, where ultimately a single user group will be created and its ID will be sent to the server.\r\n\r\nWe can decide this once we have feedback from Tim on other comments.', 'comment_created': datetime.datetime(2023, 8, 18, 14, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1299976048, 'comment_body': 'Yes, I have made a separate commit for that.', 'comment_created': datetime.datetime(2023, 8, 21, 11, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1299977991, 'comment_body': 'I have done this change, I also made the function to accept `acting_user` since it is required for getting single user group name. ', 'comment_created': datetime.datetime(2023, 8, 21, 11, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1308371620, 'comment_body': 'Can we move this to the `except` block? Since it is only used when there is no existing group with the name.', 'comment_created': datetime.datetime(2023, 8, 29, 7, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310033784, 'comment_body': 'I think we discussed this somewhere to not have `USER_GROUP_GROUP_BASED_SETTING_CHANGED` entry while creating groups, but am not sure whether we came to a conclusion or not. But I think we should not have such an entry and we can instead set these data in the `USER_GROUP_CREATED` entry if needed. We can continue the discussion in the same topic that we discussed this on before.', 'comment_created': datetime.datetime(2023, 8, 30, 10, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310070004, 'comment_body': 'Can we also check ordering of events here? I think the first one would be for single user group.', 'comment_created': datetime.datetime(2023, 8, 30, 10, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310096714, 'comment_body': 'I am not sure about the readability of this. But can we atleast move the ` expected_group_cnt -= 1` line after we delete the group to make it clear why we are reducing the count. And also might be worth to add a comment before at least one ` expected_group_cnt += 2` line that it is due to the new single user group being created.', 'comment_created': datetime.datetime(2023, 8, 30, 11, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310104906, 'comment_body': 'We could probably avoid doing this queries when user is admin or moderator, but I think we can leave it as it is for now since we would add a new realm level seting anyway and we would not require this check after that.', 'comment_created': datetime.datetime(2023, 8, 30, 11, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310113058, 'comment_body': 'I remember that we discussed about removing this in some `#api design` discussion. I think we can do this as a follow-up.', 'comment_created': datetime.datetime(2023, 8, 30, 11, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310118015, 'comment_body': 'I think we can just receive a list of strings here instead of `Mapping` which will contain the name of the settings which are already set. I guess would be better to do it as a prep commit.', 'comment_created': datetime.datetime(2023, 8, 30, 11, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310130766, 'comment_body': 'We would eventually need to set the height same for all dropdowns I guess.', 'comment_created': datetime.datetime(2023, 8, 30, 11, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310135506, 'comment_body': 'Can we write this function such that we can use this for other settings as well now only? Would probably be easier to change this now than refactor it later.', 'comment_created': datetime.datetime(2023, 8, 30, 11, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310140829, 'comment_body': 'I am not sure whether this has been discussed or not, but do we want to show the pill (the pill of the acting user itself) instead of ""You"" here as well. And we show the ""You"" only if it is set to that option and not after we change it to any other group even if the single user group for that user exists.\r\n\r\nI think we can have these discussion on CZO about what the initial UI should be for this feature and what we want to leave it for future.', 'comment_created': datetime.datetime(2023, 8, 30, 11, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310141487, 'comment_body': 'The font size for this heading seems smaller than what we have for ""Stream permissions"".', 'comment_created': datetime.datetime(2023, 8, 30, 11, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310183703, 'comment_body': 'Should we also add a test to assert query count for case when single user group is not created?', 'comment_created': datetime.datetime(2023, 8, 30, 12, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1310189447, 'comment_body': 'I think these points are quite clear from the discussion [here](https://chat.zulip.org/#narrow/stream/101-design/topic/New.20permissions.20model/near/1625136). Discussion about the options that should be shown in edit user group form is also done there. Let me know if there is anything which should be discussed. ', 'comment_created': datetime.datetime(2023, 8, 30, 12, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1311203031, 'comment_body': 'So, the discussion mentions that in the ""Edit user group"" form, the option would be like ""{user_icon} user-name"" but we currently show ""You"" as the option. And I don\'t think we have discussed about showing user pill or just appending a user icon with name. Would be good to get some feedback on design till this get further review from Tim.', 'comment_created': datetime.datetime(2023, 8, 31, 7, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1311536358, 'comment_body': 'Yeah, I have moved it to except block.', 'comment_created': datetime.datetime(2023, 8, 31, 12, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1311536954, 'comment_body': 'Yes, I have now tested the ordering of events.', 'comment_created': datetime.datetime(2023, 8, 31, 12, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1311538411, 'comment_body': 'I have added test for query counts for the case when  single user group is not created.', 'comment_created': datetime.datetime(2023, 8, 31, 12, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1312921973, 'comment_body': 'Yes, we can do that. I think we can rename this function to `get_dropdown_options_for_group_level_setting` so that it can be used for all group-level settings in the future and also pass `setting_name` as parameter to the function.\r\nI am not not sure whether we will show `group_creator` option and `All members of this group` for all group level setting or only some specific group level setting so we might also add option like `show_group_creator_option` and `show_all_group_members_option` in `group_permission_setting_config` . But not sure about the readability after adding this option since these options does not make any sense for stream or realm level setting.\r\n\r\n@sahil839 do you have any suggestions which is better than above approach ?', 'comment_created': datetime.datetime(2023, 9, 1, 11, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1314246862, 'comment_body': 'I could not think of any better name for this variable. ', 'comment_created': datetime.datetime(2023, 9, 3, 12, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1314247704, 'comment_body': 'I have made changes. Now the size is consistent with that of ""Stream permissions"".', 'comment_created': datetime.datetime(2023, 9, 3, 12, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1314247916, 'comment_body': 'Yeah, as per the discussion in czo I have added a commit and now no such entry is created. ', 'comment_created': datetime.datetime(2023, 9, 3, 12, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1314689877, 'comment_body': 'Yeah, we cannot say about what will be the options for future settings currently. Maybe we can add an option like `is_group_level_setting` in `group_permission_setting_config` for now instead of adding two options, and then show the `group_creator` and `All members of this group` options when `is_group_level_setting` is true.', 'comment_created': datetime.datetime(2023, 9, 4, 9, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1314690467, 'comment_body': 'But yeah we would still need to differentiate between group creation and group editing form.\r\n\r\nAnd these would only be required in creation context I guess, because for editing context we would treat them as other groups like `group_creator` will be treated as any other ""single-user group"" and ""All members of this group"" will be the group itself.', 'comment_created': datetime.datetime(2023, 9, 4, 9, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1314720323, 'comment_body': 'Maybe we can have pass a parameter like `include_special_groups` or something similar to `get_realm_user_groups_for_dropdown_list_widget` and pass that as true only when we need options for creation form.\r\n\r\nAnd for defining which fields to inlcude we can probably have a single field in `group_permission_config_dict` like `other_options_config` which can be an object itself instead of having multiple fields which will not be of use for realm and stream level settings.\r\n \r\nWe might also need `stream_creator` and `subscribers of this stream` field for strealm-level settings in future and this might help then.', 'comment_created': datetime.datetime(2023, 9, 4, 10, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1328134706, 'comment_body': 'I think it is better to look into this once we finalize the whether we want to show user pill or ""{user_icon} user-name"" in options. So, currently I have not done any changes. ', 'comment_created': datetime.datetime(2023, 9, 17, 19, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1328390920, 'comment_body': 'As discussed [here](https://github.com/zulip/zulip/pull/25884#issuecomment-1710802642) we are planning to send data from server, so I am not sure whether we want the discussed changes. Currently I have not done any change. Let me know if we want the changes.   ', 'comment_created': datetime.datetime(2023, 9, 18, 8, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1328566771, 'comment_body': 'Yeah, that would conflict with the changes to send data from server, but we might still keep UI related options here itself. Would be fine to keep it as it is for now and I will try to complete the follow-ups of #25884 soon.', 'comment_created': datetime.datetime(2023, 9, 18, 11, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1459416107, 'comment_body': 'These tests were added originally in the PR. I think we can remove these since it essentially just tests `is_user_in_group` function, but am not sure so have kept this for now.', 'comment_created': datetime.datetime(2024, 1, 19, 17, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1459428026, 'comment_body': 'We do not have existing template that includes `pill-container`, so have done this. Might be better if we use a handlebar template directly in `.html()`.', 'comment_created': datetime.datetime(2024, 1, 19, 17, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1459429238, 'comment_body': 'For now, we only show the single user group if the setting is set to that group or not. ', 'comment_created': datetime.datetime(2024, 1, 19, 17, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1461958825, 'comment_body': 'This is just to avoid additional query to get `name` when we can directly compare using ID if the new setting value is an integer.', 'comment_created': datetime.datetime(2024, 1, 22, 14, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1720022381, 'comment_body': 'I am assuming the new realm-level setting will just be `Who can manage all user groups` and the permission will depend whether the user is member of the group irrespective of role, so have named this like this for now.', 'comment_created': datetime.datetime(2024, 8, 16, 15, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1720024094, 'comment_body': ""We haven't decided how to point to the permission config here."", 'comment_created': datetime.datetime(2024, 8, 16, 15, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1720031217, 'comment_body': 'Can update this to be a single function for all the settings as a follow-up.', 'comment_created': datetime.datetime(2024, 8, 16, 15, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1720983424, 'comment_body': 'Working on the TODO mentioned here to avoid having two `prefetch` queries for each setting.', 'comment_created': datetime.datetime(2024, 8, 18, 13, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1722125473, 'comment_body': 'Yep, that sounds right!', 'comment_created': datetime.datetime(2024, 8, 19, 17, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1722125698, 'comment_body': 'Yeah, we can clean this up in a follow-up sweep.', 'comment_created': datetime.datetime(2024, 8, 19, 17, 29, 48, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1722125895, 'comment_body': 'Sounds reasonable.', 'comment_created': datetime.datetime(2024, 8, 19, 17, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': 'd1f8ddf6c94a229509c48eb3f10efc2401436d36', 'committer_username': 'sahil839', 'committer_name': 'Sahil Batra', 'committer_email': None, 'commit_date': datetime.datetime(2018, 1, 16, 13, 59, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '893ed98942676fd265d5bf002e8adfa2d66b2d04', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4cba6e2ed469031d39ce8111df9f8815fd0deb4', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c977ac1a2be3557ca5baa0059cc9d37b61a85e', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b455cd5be90938c8c449188147df30a7d749ee8', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eb868a4576cde397331f7492a763d0dc25e5c32', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab80f16872d3fd8f12f8d1467244ca1b0341c652', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a2b33c857379291a7f32e2f864147097a63905', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd91d5a8e735862ba577a162863bfb55e8287e887', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60c8006bb7f1f00bb3bcd0c955656e116ee2f3fa', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4df1728cbf923176e8194016b3f1610915abf107', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4396fdeff65da7b647a8db61c3d59cbc7618ea16', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1369910370,"invite: Restructure ""Invite user"" modal for improved user experience.","This PR is an updated version of [#24729](https://github.com/zulip/zulip/pull/24729) as it address all the changes suggested in review.
Fixes #24692.


<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
![Screenshot from 2023-05-29 23-09-13](https://github.com/zulip/zulip/assets/99073049/688b01f7-ee5b-412e-bded-c1dcba2cf59d)
![Screenshot from 2023-05-29 23-08-24](https://github.com/zulip/zulip/assets/99073049/cafdd494-d9ae-4548-9a63-d72b2b6aa1af)
![Screenshot from 2023-05-30 12-48-11](https://github.com/zulip/zulip/assets/99073049/b6ddab46-d42f-45bd-a59e-2819d78472e0)

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,25827,https://api.github.com/repos/zulip/zulip/pulls/25827,https://github.com/zulip/zulip/pull/25827,closed,59,27,5,1,5,10,6,0,"[{'name': 'area: onboarding'}, {'name': 'priority: high'}, {'name': 'area: invitations'}, {'name': 'size: L'}, {'name': 'area: popovers'}, {'name': 'integration review'}]",2023-05-30 07:02:07+00:00,2023-06-07 00:48:30+00:00,668783.0,"7 days, 17:46:23","[{'comment_id': 1210379843, 'comment_body': 'We can use some other class instead of `display-settings-radio-choice-label` here if we actually need a class here because this does not belong to the display settings section. ', 'comment_created': datetime.datetime(2023, 5, 30, 14, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1210385476, 'comment_body': 'You can just use the class name here and we do not need `& label` part.', 'comment_created': datetime.datetime(2023, 5, 30, 14, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1210398882, 'comment_body': 'Is this needed? I cannot see any change after I remove this, but maybe I am missing something.', 'comment_created': datetime.datetime(2023, 5, 30, 14, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1210503317, 'comment_body': 'Yes, it was not needed. So, I have removed this. ', 'comment_created': datetime.datetime(2023, 5, 30, 16, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1210504820, 'comment_body': 'Earlier when I used `display-settings-radio-choice-label` class also, I was facing an issue of tooltip not getting visible in disbaled look. So it was needed. But now it is not needed. ', 'comment_created': datetime.datetime(2023, 5, 30, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1210522569, 'comment_body': '[simplescreenrecorder-2023-05-30_21.44.38.webm](https://github.com/zulip/zulip/assets/99073049/55b3cc9e-ac7e-4b3f-be0d-775aafa715d3)', 'comment_created': datetime.datetime(2023, 5, 30, 16, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1210523275, 'comment_body': 'I was facing this issue of tooltip not visible without `pointer-events`. ', 'comment_created': datetime.datetime(2023, 5, 30, 16, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1211386443, 'comment_body': 'I think this `pointer-events` property is also not required. Can you confirm once?', 'comment_created': datetime.datetime(2023, 5, 31, 9, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1211398483, 'comment_body': 'Please have a look to [this](https://github.com/zulip/zulip/pull/25827#discussion_r1210522569) comment where I have stated the reason of adding this.', 'comment_created': datetime.datetime(2023, 5, 31, 9, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1211496130, 'comment_body': 'Ohh sorry I missed that comment. I remember seeing something similar in one of the other PR also. i guess this is due to where the `mouseover` event is triggered and its delegation, but am not sure.', 'comment_created': datetime.datetime(2023, 5, 31, 10, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}]","[{'commit_sha': 'fe0203e760bd87c2adced71d87411c3af3d03cb0', 'committer_username': 'akarsh-jain-790', 'committer_name': 'Akarsh Jain', 'committer_email': None, 'commit_date': datetime.datetime(2020, 9, 29, 6, 11, 15, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1405812206,streams: Warn when archiving a notification stream.,"Archiving a user/stream notification stream disables user/stream notifications.This commit adds a warning that notifications will be disabled while archiving any notification stream.

This PR address the review comments of #23735.

Fixes: #22110.

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**
![Screenshot from 2023-07-03 16-51-19](https://github.com/zulip/zulip/assets/99073049/6930617f-694e-45b8-b085-1216ab1e6fae)
![Screenshot from 2023-07-03 16-50-50](https://github.com/zulip/zulip/assets/99073049/ada5b822-9c60-4e73-acf3-45aaaee70ea2)
![Screenshot from 2023-07-03 16-50-37](https://github.com/zulip/zulip/assets/99073049/faef1887-522f-42b9-81c5-a0838a1945f6)
<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [ ] Explains differences from previous plans (e.g., issue description).
- [ ] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26111,https://api.github.com/repos/zulip/zulip/pulls/26111,https://github.com/zulip/zulip/pull/26111,closed,32,4,3,1,10,5,4,0,"[{'name': 'area: channel settings'}, {'name': 'area: settings (admin/org)'}, {'name': 'size: M'}, {'name': 'integration review'}]",2023-06-23 23:41:36+00:00,2023-07-06 23:04:11+00:00,1120955.0,"12 days, 23:22:35","[{'comment_id': 1242527940, 'comment_body': 'I think this needs a wrapper as it is no longer alone here. A `<p>` tag would do the job, and then you might not need additional styling.', 'comment_created': datetime.datetime(2023, 6, 26, 17, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1245066456, 'comment_body': ""I think we don't need `margin-top` anymore, and I'm not sure, but removing `margin-bottom` and the UI still looks decent."", 'comment_created': datetime.datetime(2023, 6, 28, 11, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1245069390, 'comment_body': ""Do we need this class if we're not using it?"", 'comment_created': datetime.datetime(2023, 6, 28, 11, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1250939230, 'comment_body': 'There is no such setting currently. I am not sure whether we should include this now or wait till the setting is added since we might possible name the setting something else.', 'comment_created': datetime.datetime(2023, 7, 3, 14, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1252579658, 'comment_body': 'As per the discussion [here](https://chat.zulip.org/#narrow/stream/101-design/topic/warning.20when.20archiving.20a.20stream.20used.20for.20announcements.2E/near/1603027), I have removed the code. You can take a look now.', 'comment_created': datetime.datetime(2023, 7, 5, 6, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}]","[{'commit_sha': '18b77c8de6aa79686980346da015164a223f9d07', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14

1412098441,settings: Improve UI of deactivated and reactivated users.,"<!-- Describe your pull request here.-->

Fixes: #21653

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

**Screenshots and screen captures:**

![Screenshot from 2023-06-28 23-08-06](https://github.com/zulip/zulip/assets/99073049/babb415a-2565-4c3b-bfd9-ce7e38b2d685)
![Screenshot from 2023-06-28 23-07-23](https://github.com/zulip/zulip/assets/99073049/a6d76b0d-6367-4d9d-bd06-1471d58b58e5)

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>",True,26147,https://api.github.com/repos/zulip/zulip/pulls/26147,https://github.com/zulip/zulip/pull/26147,closed,30,18,4,3,9,7,2,0,"[{'name': 'size: M'}, {'name': 'integration review'}]",2023-06-28 17:56:07+00:00,2023-10-03 18:15:40+00:00,8381973.0,"97 days, 0:19:33","[{'comment_id': 1247844106, 'comment_body': 'We can combine the shared styles using a comma.\r\n````\r\n#admin_users_table .deactivated_user,\r\n#admin_deactivated_users_table .active_user {\r\n    color: hsl(0deg 0% 20% / 50%);\r\n\r\n    & a {\r\n        color: inherit;\r\n    }\r\n}\r\n````', 'comment_created': datetime.datetime(2023, 6, 30, 13, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1247977903, 'comment_body': 'is `reactivated_user` a better name?', 'comment_created': datetime.datetime(2023, 6, 30, 15, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1250739467, 'comment_body': 'Hmm, it sounds better. Updated the PR.  ', 'comment_created': datetime.datetime(2023, 7, 3, 11, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1252638972, 'comment_body': 'I am not sure how these colors are selected, but they are definitely not the ones used in the Notification settings panel.\r\nThough this looks fine to me, I think would be better to get more feedback on it.', 'comment_created': datetime.datetime(2023, 7, 5, 7, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1261391480, 'comment_body': 'This function will be triggered for the following buttons:-\r\n\r\n- `Edit User` button\r\n- `Deactivate User` button\r\n- `Reactivate User` button\r\n\r\nWhen the function is triggered due to `Edit User` button we return `False` so that no tooltip is shown, otherwise return `True` to show the tooltip', 'comment_created': datetime.datetime(2023, 7, 12, 15, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1262374665, 'comment_body': 'I have changed the color now. Now the color used in Notification settings panel is used ', 'comment_created': datetime.datetime(2023, 7, 13, 10, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1262788184, 'comment_body': 'I am not sure why the tooltip did not work properly before but this change seems fine for now I guess.', 'comment_created': datetime.datetime(2023, 7, 13, 16, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}]","[{'commit_sha': '5eb5b9f33a966a59d5381f57ecf766f7ba1bc1c0', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '411fef84847d1232b1a6a78899c95fcd10cc5a63', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4901712b061086a5d59b0257e79799b6f0b983a', 'committer_username': 'Ujjawal3', 'committer_name': 'Ujjawal Modi', 'committer_email': None, 'commit_date': datetime.datetime(2022, 2, 5, 9, 46, 12, tzinfo=datetime.timezone.utc)}]",Ujjawal Modi,99073049,,User,,30,,28,14
1421680175,Improve design of empty list view.,"<!-- Describe your pull request here.-->
Based on the discussion [here](https://chat.zulip.org/#narrow/stream/9-issues/topic/.22No.20topics.20match.22.20on.20Recent.20conversations/near/1600888), we wanted to avoid using the `::after` pseudo-element for non-decorative content. As a solution, This PR adds a new function `render_empty_list_message_if_needed` to the list widget in `list_widget.js`. This function displays a message using the `data-empty` dataset when the list is empty, effectively replacing the need for the `::after` pseudo-element in rendering the empty list message.

Fixes: #23072<!-- Issue link, or clear description.-->

Related PR: #23134

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Screenshots and screen captures</summary>

![image](https://github.com/zulip/zulip/assets/87542880/dd9b3c2b-eea3-4697-abd5-e6dee1d05d54)
![image](https://github.com/zulip/zulip/assets/87542880/1eed95b3-3c15-4284-8ec4-dd65742259d7)

![image](https://github.com/zulip/zulip/assets/87542880/e37279c7-169a-4090-956e-f4e9d6a7bd17)

![image](https://github.com/zulip/zulip/assets/87542880/97ad6c4c-1959-4eac-976e-e8058dbb3322)

![image](https://github.com/zulip/zulip/assets/87542880/02dfdab1-6ed6-47bc-9523-2044c561be6c)

![image](https://github.com/zulip/zulip/assets/87542880/1f50b998-272e-4c78-91d8-ed8f87074b6b)

![image](https://github.com/zulip/zulip/assets/87542880/83f2bd93-0a03-4d03-a006-7cded6d571f3)
![image](https://github.com/zulip/zulip/assets/87542880/55a73316-5864-42c7-8a1e-968b9e0e8588)

![image](https://github.com/zulip/zulip/assets/87542880/4d7e55a8-0bec-43c2-a36b-6d93f02b15cb)

![image](https://github.com/zulip/zulip/assets/87542880/8473a757-c818-4d25-b1c7-dfaaf31ffdbd)
![image](https://github.com/zulip/zulip/assets/87542880/95fcad68-95ac-4cbe-ae8c-27a75c7e32d3)

![image](https://github.com/zulip/zulip/assets/87542880/613ee677-37b9-4070-84e1-4b67eed36fef)

![image](https://github.com/zulip/zulip/assets/87542880/57e3f723-043a-44e2-8a41-a1fd31d40116)

![image](https://github.com/zulip/zulip/assets/87542880/a3c6ad2d-d56b-4610-8622-65c0f68b634b)


</details>

<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [x] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [ ] Calls out remaining decisions and concerns.
- [ ] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [ ] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26196,https://api.github.com/repos/zulip/zulip/pulls/26196,https://github.com/zulip/zulip/pull/26196,closed,173,72,32,7,9,22,2,0,"[{'name': 'size: XL'}, {'name': 'integration review'}]",2023-07-05 19:54:05+00:00,2023-10-12 01:03:53+00:00,8485788.0,"98 days, 5:09:48","[{'comment_id': 1254437915, 'comment_body': ""The idea of reaching into `list_widget` to get this functionality feels like it breaks the encapsulation of `buddy_list`, which already has its own separate widget for building lists.  I'm not saying it's **definitely** a bad strategy, but it's worthy of debate.  If there's a somewhat simple way to just extend `buddy_list` code to support this paradigm, even with a tiny bit of code duplication, I think I would prefer things to be decoupled here."", 'comment_created': datetime.datetime(2023, 7, 6, 13, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'showell', 'type': 'User'}, {'comment_id': 1254572967, 'comment_body': ""BTW I don't think any discussion here should block the PR, as it can always be addressed after the fact."", 'comment_created': datetime.datetime(2023, 7, 6, 15, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'showell', 'type': 'User'}, {'comment_id': 1255854726, 'comment_body': 'This small chunk of code seems really easy to extract into a function called `get_column_count_for_table($table)` and call it with `const column_count = get_column_count_for_table($container)`.', 'comment_created': datetime.datetime(2023, 7, 7, 13, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'showell', 'type': 'User'}, {'comment_id': 1255857499, 'comment_body': ""It seems like we should just have two separate templates for the table version and the list version, and then just push up the conditional into actual JavaScript.  The two code paths don't seem to have enough in common to justify having all these ugly conditionals in the template."", 'comment_created': datetime.datetime(2023, 7, 7, 13, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'showell', 'type': 'User'}, {'comment_id': 1257844135, 'comment_body': 'Is `render_empty_list_message` or `show_empty_list_message` a better name? Using toggle fells like it will also hide the message if it is rendered.', 'comment_created': datetime.datetime(2023, 7, 10, 7, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1257891576, 'comment_body': 'I think `show_empty_results_message` is a better name for `filter_value`.', 'comment_created': datetime.datetime(2023, 7, 10, 8, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ujjawal3', 'type': 'User'}, {'comment_id': 1264075304, 'comment_body': ""Makes sense. I've named it `render_empty_list_message_if_needed` for now. We directly call it in places and the function itself checks whether to render the message or not."", 'comment_created': datetime.datetime(2023, 7, 14, 19, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1264081568, 'comment_body': ""I'm not sure about that. I think `filter_value` simply represents what it contains. Since `filter_value` is expected to contain `strings`, naming it as `show_empty_results_message` doesn't sound correct."", 'comment_created': datetime.datetime(2023, 7, 14, 19, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1269507832, 'comment_body': 'This UI does not uses `list_widget` module to render the bot list but seems fine for now to use this to avoid duplication. This should not require much duplication though.', 'comment_created': datetime.datetime(2023, 7, 20, 14, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1269512956, 'comment_body': 'I am not sure we need this `!empty_list_message` check here if this function is used for this list only as we know that this list has the `data-empty` attribute set. And we can probably anyway define the message here itself, but am not sure. We can wait for more feedback.', 'comment_created': datetime.datetime(2023, 7, 20, 14, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1269514524, 'comment_body': 'There is no filter object in alert words pannel currently, so we can probably remove `data-search-results-empty` for now.', 'comment_created': datetime.datetime(2023, 7, 20, 14, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1291203713, 'comment_body': 'From reading the code, I understand that this class needs to be added to hide the border around the container parent for list in user profile modal. Would be better to not have this here and only have this code specifically only for the lists which need this.\r\n\r\nI think this can be done by using `callback_after_render` and defining `onupdate` function in `filter`.', 'comment_created': datetime.datetime(2023, 8, 11, 10, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1291212202, 'comment_body': '`empty-list-message-for-table` sounds weird. `empty-table-message` or `empty-list-message` might be better. ', 'comment_created': datetime.datetime(2023, 8, 11, 11, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1296763507, 'comment_body': 'Can this be in a separate commit as we are not handling the search filter case here?', 'comment_created': datetime.datetime(2023, 8, 17, 7, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1299375985, 'comment_body': ""Added a separate commit. It's not a mandatory change though."", 'comment_created': datetime.datetime(2023, 8, 20, 13, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1299378399, 'comment_body': '> Posted one comment. And I cannot see the empty message in ""Custom emoji"" panel if there are no custom emojis for the realm.\r\n\r\n@sahil839 fixed it here. You can take a look. Thanks!', 'comment_created': datetime.datetime(2023, 8, 20, 13, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1301660074, 'comment_body': 'Can a better solution for this would be just exclude deactivated emojis from the list at the start only, i.e. before passing the data to `ListWidget`.', 'comment_created': datetime.datetime(2023, 8, 22, 13, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1301668966, 'comment_body': 'So, would be god to have this as a separate commit, in case we do not want to merge it.', 'comment_created': datetime.datetime(2023, 8, 22, 13, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1356119089, 'comment_body': ""Are we okay having `id`s that occur multiple times in the DOM? I thought it was best practice to use classnames for things we can't guarantee only appear once."", 'comment_created': datetime.datetime(2023, 10, 12, 6, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'evykassirer', 'type': 'User'}, {'comment_id': 1356377647, 'comment_body': '@HemantUmre12 is there a reason for this and `empty-table-message` be not classes?', 'comment_created': datetime.datetime(2023, 10, 12, 7, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 1359858747, 'comment_body': 'Opened #27225', 'comment_created': datetime.datetime(2023, 10, 15, 11, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'amanagr', 'type': 'User'}, {'comment_id': 1359921971, 'comment_body': 'Sorry for the late reply. I used `id` here to raise the specificity of the style. I agree with @evykassirer that if we can avoid using `id`, it would be better. Alternatively, we might need to write couple lines of CSS in a few places.', 'comment_created': datetime.datetime(2023, 10, 15, 18, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}]","[{'commit_sha': 'e22c25646460bfe38d999eb37144daafea09f493', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b86f39fc0aac17bdbd3035a27368b2544b24803', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89fb67958211c0d5925fd971363fa6afbb3d1d7a', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46bce9613f15f7c08a1727b24dbfb827bb369f54', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f3ab376f86b480a2ad0b46dc728edb8c7bd9e6c', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ec2699c7f2b2a33c89223237ca9d67e56033b03', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '043e95a772010706a82363cfbbee81c156ee543c', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6
1404689508,Allow admin to set organization language at creation time,"Commit-1: Adds a new dropdown, 'Organization language,' to the `/new` and `/realm/register` pages and utilizes it to set the `default_language` field of the `Realm` model.

Commit-2: Uses the `Realm.default_language` value, which is set by selecting the 'Organization language,' to internationalize the introductory messages of the initial streams.

Fixes: #25729.

<!-- Describe your pull request here.-->

<!-- If the PR makes UI changes, always include one or more still screenshots to demonstrate your changes. If it seems helpful, add a screen capture of the new functionality as well.

Tooling tips: https://zulip.readthedocs.io/en/latest/tutorials/screenshot-and-gif-software.html
-->

<details>
<summary>Screenshots and screen captures</summary>



https://github.com/zulip/zulip/assets/87542880/f989f46d-2055-4fe3-90d5-860b476cb233



</details>


<details>
<summary>Self-review checklist</summary>

<!-- Prior to submitting a PR, follow our step-by-step guide to review your own code:
https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code -->

<!-- Once you create the PR, check off all the steps below that you have completed.
If any of these steps are not relevant or you have not completed, leave them unchecked.-->

- [ ] [Self-reviewed](https://zulip.readthedocs.io/en/latest/contributing/code-reviewing.html#how-to-review-code) the changes for clarity and maintainability
      (variable names, code reuse, readability, etc.).

Communicate decisions, questions, and potential concerns.

- [x] Explains differences from previous plans (e.g., issue description).
- [x] Highlights technical choices and bugs encountered.
- [x] Calls out remaining decisions and concerns.
- [x] Automated tests verify logic where appropriate.

Individual commits are ready for review (see [commit discipline](https://zulip.readthedocs.io/en/latest/contributing/commit-discipline.html)).

- [x] Each commit is a coherent idea.
- [x] Commit message(s) explain reasoning and motivation for changes.

Completed manual review and testing of the following:

- [x] Visual appearance of the changes.
- [x] Responsiveness and internationalization.
- [x] Strings and tooltips.
- [x] End-to-end functionality of buttons, interactions and flows.
- [x] Corner cases, error conditions, and easily imagined bugs.
</details>
",True,26102,https://api.github.com/repos/zulip/zulip/pulls/26102,https://github.com/zulip/zulip/pull/26102,closed,259,77,19,5,16,14,2,0,"[{'name': 'size: XL'}, {'name': 'maintainer review'}]",2023-06-23 08:24:58+00:00,2023-10-26 23:27:36+00:00,10854158.0,"125 days, 15:02:38","[{'comment_id': 1242031069, 'comment_body': 'I added this since I received the following error. I don\'t know if it\'s the correct way to fix it.\r\n````\r\nDROP DATABASE\r\nnu.validator.servlet.VerifierServletTransaction - Starting static initializer.\r\nnu.validator.servlet.VerifierServletTransaction - Reading miscellaneous properties.\r\nnu.validator.servlet.VerifierServletTransaction - Starting to loop over config file lines.\r\nnu.validator.servlet.VerifierServletTransaction - Finished reading config.\r\nnu.validator.servlet.VerifierServletTransaction - Converted config to arrays.\r\nnu.validator.servlet.VerifierServletTransaction - Prepared namespace array.\r\nnu.validator.servlet.VerifierServletTransaction - Parsed doctype numbers into ints.\r\nnu.validator.servlet.VerifierServletTransaction - The cache path prefix is: null\r\nnu.validator.servlet.VerifierServletTransaction - Parsing set up. Starting to read schemas.\r\nnu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/html5.rnc\r\nCREATE DATABASE\r\nnu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/html5-all.rnc\r\nnu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/xhtml5.rnc\r\n\r\nWaiting for test server (may take a while).nu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/xhtml5-all.rnc\r\nnu.validator.servlet.VerifierServletTransaction - Will load schema: http://s.validator.nu/svg-xhtml5-rdf-mathml.rnc\r\n.nu.validator.servlet.VerifierServletTransaction - Schemas read.\r\nnu.validator.servlet.VerifierServletTransaction - Reading spec.\r\n..........nu.validator.servlet.VerifierServletTransaction - Spec read.\r\n.\r\nWARNING: Future checker releases will bind by default to 127.0.0.1.\r\nYour checker deployment might become unreachable unless you use the\r\nnu.validator.servlet.bind-address system property or --bind-address\r\nscript option to bind the checker to a different address:\r\n\r\n  python ./checker.py --bind-address 172.18.0.2 run\r\n  java -Dnu.validator.servlet.bind-address=172.18.0.2 -cp vnu.jar nu.validator.servlet.Main 8888\r\n  vnu-runtime-image/bin/java -Dnu.validator.servlet.bind-address=172.18.0.2 nu.validator.servlet.Main 8888\r\n  vnu-runtime-image\\bin\\java.exe -Dnu.validator.servlet.bind-address=172.18.0.2 nu.validator.servlet.Main 8888\r\n\r\nChecker service started at http://127.0.0.1:9988/\r\n\r\n\r\n--- SERVER IS UP! ---\r\n\r\n2023-06-25 16:01:04 [portico_documentation_crawler] ERROR: ""http://localhost:9981/new/"":243.46-243.57: info: Text run is not in Unicode Normalization Form C.\r\n\r\nFailed\r\n\r\nError: Process completed with exit code 1.\r\n````', 'comment_created': datetime.datetime(2023, 6, 26, 11, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1245242587, 'comment_body': 'It is not clear to me when you are seeing this error. Are you seeing this on locally or on CI?', 'comment_created': datetime.datetime(2023, 6, 28, 13, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1245253868, 'comment_body': 'Might be better to use `default_language` as the parameter here since we use the same in models.py.', 'comment_created': datetime.datetime(2023, 6, 28, 13, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1245268439, 'comment_body': 'We should use `default_language` here so that we have the same field name in `PreregistrationRealm` and `Realm` objects.', 'comment_created': datetime.datetime(2023, 6, 28, 14, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1245276506, 'comment_body': '`realm_default_language` should be more clear than `realm_language`.', 'comment_created': datetime.datetime(2023, 6, 28, 14, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1245326051, 'comment_body': 'Having passed all tests locally, I encounter this error during CI.', 'comment_created': datetime.datetime(2023, 6, 28, 14, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'HemantUmre12', 'type': 'User'}, {'comment_id': 1245484037, 'comment_body': 'I am not sure as well that why the test is failing. You can ask in #automated-testing stream on CZO. Sharing a link to the failed job might be helpful. I can see this at https://github.com/zulip/zulip/actions/runs/5370569466/jobs/9742740276#step:16:98 but I am not sure about who all can access this.', 'comment_created': datetime.datetime(2023, 6, 28, 16, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1267498533, 'comment_body': 'Would be better to this text in a variable for readability like `italian_translation_for_private_stream` or something similar.', 'comment_created': datetime.datetime(2023, 7, 19, 3, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1267503246, 'comment_body': ""We use a simple `CharField` for `default_languge` in models.py, so that would have worked fine too. Let's keep it like this for now and update after some more feedback."", 'comment_created': datetime.datetime(2023, 7, 19, 3, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1267505616, 'comment_body': 'Would have been good to avoid this duplication here. Can we just pass the default code in `RealmCreationForm` as `initial_data`?', 'comment_created': datetime.datetime(2023, 7, 19, 3, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1271862752, 'comment_body': 'We should check whether the result contains something like `Enter valid langauge` or something like that.', 'comment_created': datetime.datetime(2023, 7, 24, 7, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sahil839', 'type': 'User'}, {'comment_id': 1320423967, 'comment_body': 'So adding this bit of code to see which language has unicode normalization inconsistency, I get this:\r\n\r\n`Tiếng Việt Tiếng Việt False`\r\n\r\n```\r\n                normalized = unicodedata.normalize(""NFC"", lang_info[""name_local""])                      \r\n                print(lang_info[""name_local""], normalized, normalized == lang_info[""name_local""])       \r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 9, 8, 23, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}, {'comment_id': 1320425397, 'comment_body': 'Linking a previous discussion: [#automated testing > Unicode normalization error](https://chat.zulip.org/#narrow/stream/43-automated-testing/topic/Unicode.20normalization.20error/near/1600910).\r\n\r\nOpened\r\n\r\n- #26674', 'comment_created': datetime.datetime(2023, 9, 8, 23, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'andersk', 'type': 'User'}, {'comment_id': 1320427991, 'comment_body': '(In the future, @HemantUmre12, please cross-link in both directions when you start a conversation about some detail in a PR)', 'comment_created': datetime.datetime(2023, 9, 8, 23, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'timabbott', 'type': 'User'}]","[{'commit_sha': '86b57d79ee1fa6aa4f1e412f96af2cb3cefdd184', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25b89a35ba2ec98448b9b34d5575be2b136422cb', 'committer_username': 'HemantUmre12', 'committer_name': 'Hemant Umre', 'committer_email': None, 'commit_date': datetime.datetime(2021, 7, 16, 17, 44, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfe7b692347ad4efb059129124aa61c2dfd310d4', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21a6ffad5368c50ded8407775e4ff58184419a4e', 'committer_username': 'timabbott', 'committer_name': 'Tim Abbott', 'committer_email': None, 'commit_date': datetime.datetime(2012, 11, 7, 21, 18, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '447ff901e237245b3b718f29adfecd4c9e0493f9', 'committer_username': 'andersk', 'committer_name': 'Anders Kaseorg', 'committer_email': 'andersk@mit.edu', 'commit_date': datetime.datetime(2008, 9, 27, 3, 31, 9, tzinfo=datetime.timezone.utc)}]",Hemant Umre,87542880,,User,,42,,0,6

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43160685,zulip,zulip/zulip,Python,7615,21004,376,1133,60235,2483,28,806,"[{'id': 1453229064, 'number': 26372, 'closed': datetime.datetime(2023, 8, 6, 20, 42, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 5, 49, 17, tzinfo=datetime.timezone.utc), 'time_taken': 831215.0, 'time_delta': '9 days, 14:53:35', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 1448851196, 'number': 26355, 'closed': None, 'created': datetime.datetime(2023, 7, 25, 17, 28, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1049, 'deletions': 282, 'state': 'open'}, {'id': 1431058045, 'number': 26243, 'closed': datetime.datetime(2023, 7, 26, 1, 33, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 11, 2, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1175424.0, 'time_delta': '13 days, 14:30:24', 'additions': 191, 'deletions': 131, 'state': 'closed'}, {'id': 1412098441, 'number': 26147, 'closed': datetime.datetime(2023, 10, 3, 18, 15, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 17, 56, 7, tzinfo=datetime.timezone.utc), 'time_taken': 8381973.0, 'time_delta': '97 days, 0:19:33', 'additions': 30, 'deletions': 18, 'state': 'closed'}, {'id': 1405812206, 'number': 26111, 'closed': datetime.datetime(2023, 7, 6, 23, 4, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 23, 41, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1120955.0, 'time_delta': '12 days, 23:22:35', 'additions': 32, 'deletions': 4, 'state': 'closed'}, {'id': 1405683708, 'number': 26109, 'closed': None, 'created': datetime.datetime(2023, 6, 23, 21, 12, 38, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 604, 'deletions': 80, 'state': 'open'}, {'id': 1377731751, 'number': 25884, 'closed': datetime.datetime(2023, 9, 7, 21, 21, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 12, 34, 58, tzinfo=datetime.timezone.utc), 'time_taken': 8239563.0, 'time_delta': '95 days, 8:46:03', 'additions': 961, 'deletions': 123, 'state': 'closed'}, {'id': 1369910370, 'number': 25827, 'closed': datetime.datetime(2023, 6, 7, 0, 48, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 30, 7, 2, 7, tzinfo=datetime.timezone.utc), 'time_taken': 668783.0, 'time_delta': '7 days, 17:46:23', 'additions': 59, 'deletions': 27, 'state': 'closed'}, {'id': 1343180941, 'number': 25487, 'closed': datetime.datetime(2023, 5, 9, 14, 36, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 9, 5, 46, 19, tzinfo=datetime.timezone.utc), 'time_taken': 31806.0, 'time_delta': '8:50:06', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1321861376, 'number': 25212, 'closed': None, 'created': datetime.datetime(2023, 4, 20, 17, 23, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 35, 'deletions': 5, 'state': 'open'}, {'id': 1308902069, 'number': 25073, 'closed': None, 'created': datetime.datetime(2023, 4, 11, 12, 10, 6, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 53, 'deletions': 28, 'state': 'open'}, {'id': 1304205868, 'number': 25012, 'closed': datetime.datetime(2023, 4, 7, 16, 24, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 6, 53, 11, tzinfo=datetime.timezone.utc), 'time_taken': 120664.0, 'time_delta': '1 day, 9:31:04', 'additions': 36, 'deletions': 40, 'state': 'closed'}, {'id': 1293403895, 'number': 24900, 'closed': datetime.datetime(2023, 5, 14, 18, 20, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 28, 17, 44, 56, tzinfo=datetime.timezone.utc), 'time_taken': 4062954.0, 'time_delta': '47 days, 0:35:54', 'additions': 172, 'deletions': 40, 'state': 'closed'}, {'id': 1286115160, 'number': 24816, 'closed': datetime.datetime(2023, 4, 25, 0, 2, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 22, 15, 53, 49, tzinfo=datetime.timezone.utc), 'time_taken': 2880525.0, 'time_delta': '33 days, 8:08:45', 'additions': 60, 'deletions': 20, 'state': 'closed'}, {'id': 1272624709, 'number': 24661, 'closed': datetime.datetime(2023, 3, 28, 21, 40, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 13, 4, 29, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1357857.0, 'time_delta': '15 days, 17:10:57', 'additions': 116, 'deletions': 6, 'state': 'closed'}, {'id': 1263052116, 'number': 24580, 'closed': None, 'created': datetime.datetime(2023, 3, 4, 11, 51, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 761, 'deletions': 45, 'state': 'open'}, {'id': 1262101675, 'number': 24562, 'closed': datetime.datetime(2023, 3, 10, 1, 52, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 3, 13, 38, 5, tzinfo=datetime.timezone.utc), 'time_taken': 562466.0, 'time_delta': '6 days, 12:14:26', 'additions': 35, 'deletions': 17, 'state': 'closed'}, {'id': 1261741447, 'number': 24556, 'closed': datetime.datetime(2023, 3, 3, 19, 3, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 3, 9, 22, 26, tzinfo=datetime.timezone.utc), 'time_taken': 34847.0, 'time_delta': '9:40:47', 'additions': 23, 'deletions': 14, 'state': 'closed'}, {'id': 1258249115, 'number': 24528, 'closed': datetime.datetime(2023, 3, 27, 16, 3, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 1, 6, 20, 23, tzinfo=datetime.timezone.utc), 'time_taken': 2281411.0, 'time_delta': '26 days, 9:43:31', 'additions': 12, 'deletions': 6, 'state': 'closed'}, {'id': 1255285630, 'number': 24493, 'closed': datetime.datetime(2023, 3, 2, 1, 29, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 27, 11, 11, 39, tzinfo=datetime.timezone.utc), 'time_taken': 224243.0, 'time_delta': '2 days, 14:17:23', 'additions': 27, 'deletions': 18, 'state': 'closed'}, {'id': 1237871520, 'number': 24371, 'closed': datetime.datetime(2023, 3, 29, 1, 36, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 11, 22, 19, 57, tzinfo=datetime.timezone.utc), 'time_taken': 3899819.0, 'time_delta': '45 days, 3:16:59', 'additions': 49, 'deletions': 1, 'state': 'closed'}, {'id': 1228966241, 'number': 24294, 'closed': None, 'created': datetime.datetime(2023, 2, 4, 5, 30, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 121, 'deletions': 18, 'state': 'open'}, {'id': 1220622046, 'number': 24219, 'closed': datetime.datetime(2023, 4, 7, 2, 3, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 29, 13, 5, 59, tzinfo=datetime.timezone.utc), 'time_taken': 5835447.0, 'time_delta': '67 days, 12:57:27', 'additions': 138, 'deletions': 16, 'state': 'closed'}, {'id': 1218350756, 'number': 24188, 'closed': datetime.datetime(2023, 4, 10, 23, 28, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 26, 19, 41, 33, tzinfo=datetime.timezone.utc), 'time_taken': 6407200.0, 'time_delta': '74 days, 3:46:40', 'additions': 25, 'deletions': 18, 'state': 'closed'}, {'id': 1215727576, 'number': 24170, 'closed': datetime.datetime(2023, 2, 6, 23, 4, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 24, 21, 23, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1129286.0, 'time_delta': '13 days, 1:41:26', 'additions': 59, 'deletions': 2, 'state': 'closed'}, {'id': 1198588521, 'number': 24083, 'closed': None, 'created': datetime.datetime(2023, 1, 16, 7, 57, 17, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 33, 'deletions': 6, 'state': 'open'}, {'id': 1197990527, 'number': 24077, 'closed': datetime.datetime(2023, 1, 15, 11, 24, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 15, 11, 23, 4, tzinfo=datetime.timezone.utc), 'time_taken': 82.0, 'time_delta': '0:01:22', 'additions': 40, 'deletions': 0, 'state': 'closed'}, {'id': 1182406797, 'number': 23943, 'closed': None, 'created': datetime.datetime(2023, 1, 2, 9, 1, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 441, 'deletions': 10, 'state': 'open'}, {'id': 1162266040, 'number': 23852, 'closed': datetime.datetime(2024, 8, 19, 22, 20, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 13, 5, 47, 46, tzinfo=datetime.timezone.utc), 'time_taken': 53195561.0, 'time_delta': '615 days, 16:32:41', 'additions': 289, 'deletions': 42, 'state': 'closed'}, {'id': 1144432642, 'number': 23743, 'closed': datetime.datetime(2023, 2, 11, 1, 30, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 3, 19, 25, 32, tzinfo=datetime.timezone.utc), 'time_taken': 5983512.0, 'time_delta': '69 days, 6:05:12', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1136813129, 'number': 23677, 'closed': datetime.datetime(2022, 12, 14, 0, 29, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 27, 22, 16, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1390432.0, 'time_delta': '16 days, 2:13:52', 'additions': 15, 'deletions': 5, 'state': 'closed'}, {'id': 1113633062, 'number': 23485, 'closed': datetime.datetime(2022, 11, 23, 0, 24, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 8, 2, 14, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1289371.0, 'time_delta': '14 days, 22:09:31', 'additions': 15, 'deletions': 9, 'state': 'closed'}]"

