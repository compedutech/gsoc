pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
884236108,"Add `cupyx.scipy.special.{i0e, i1e}`","Hi,
The PR adds `cupyx.special.{i0e, i1e}` special functions in cupy. Looking forward to your viewpoints. Thanks!",True,6571,https://api.github.com/repos/cupy/cupy/pulls/6571,https://github.com/cupy/cupy/pull/6571,closed,36,0,4,3,7,0,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-03-20 18:57:43+00:00,2022-03-28 04:45:17+00:00,640054.0,"7 days, 9:47:34",[],"[{'commit_sha': '5892f0f2946733772c906c9f3c5d211ae50aa4b9', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6409a41b5611def5b3e147589a9bd113a2ffbb7f', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0fa344f8a5f9517ce7ffa7f17c73ad79fcdc0c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
841079361,Add `cupy.setdiff1d` api.,"Hi,
The PR adds `cupy.setdiff1d1`. It follows #6078. Always a pleasure to hear from you all.
Thanks!",True,6433,https://api.github.com/repos/cupy/cupy/pulls/6433,https://github.com/cupy/cupy/pull/6433,closed,95,0,4,4,6,2,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-02-06 14:19:02+00:00,2022-02-10 16:35:02+00:00,353760.0,"4 days, 2:16:00","[{'comment_id': 800389622, 'comment_body': 'Can you add more exhaustive test cases?\r\nif the routine deals with arrays with duplicate elements we expect to see that tested as well.\r\nWhat happens if you feed a 2d array? or a simple scalar? are the errors consistent with NumPy ones?\r\nyou should test not only 1 or 2 working cases but cover all the edge cases and erratic behavior.', 'comment_created': datetime.datetime(2022, 2, 7, 7, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'emcastillo', 'type': 'User'}, {'comment_id': 800394865, 'comment_body': ""Yep, good points. I'll update soon. Thanks!"", 'comment_created': datetime.datetime(2022, 2, 7, 8, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': 'b312b83e67570786b7e8ef0fbf673fa0ff738415', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3be8c6dec4c0212e01ece87ad91db3938006d66d', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4dd918e33ad6ed6b3a92b89f17d3d44fe73834c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa3a9cdacd9437e3dbfd20bd5c6c45d6c555a092', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
835335406,Add `cupy.intersect1d` API.,"Hi,
The PR aims to add `cupy.intersect1d` API. It follows #6078

Looking forward to your viewpoints :)
Thanks!",True,6402,https://api.github.com/repos/cupy/cupy/pulls/6402,https://github.com/cupy/cupy/pull/6402,closed,181,44,4,8,4,14,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-01-30 11:08:28+00:00,2022-02-10 04:03:21+00:00,924893.0,"10 days, 16:54:53","[{'comment_id': 795283949, 'comment_body': '~Please, keep the docstring format consistent with the code base~', 'comment_created': datetime.datetime(2022, 1, 31, 0, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'emcastillo', 'type': 'User'}, {'comment_id': 795302152, 'comment_body': 'Sorry, it seems that numpy docstrings style is actually ok. https://github.com/cupy/cupy/issues/5437#issuecomment-879148251\r\nMy bad! ðŸ˜…\r\n\r\nthanks to @grlee77 for pointing this out to me!', 'comment_created': datetime.datetime(2022, 1, 31, 2, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'emcastillo', 'type': 'User'}, {'comment_id': 795334082, 'comment_body': 'No worries :v: \r\n\r\nI think it will be good to update other functions too :)', 'comment_created': datetime.datetime(2022, 1, 31, 4, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 795418783, 'comment_body': 'According to [numPy.intersect1d documentation](https://numpy.org/doc/stable/reference/generated/numpy.intersect1d.html), the first instance of a value is used if there are multiple.\r\n```suggestion\r\n        return xp.intersect1d(a, b, return_indices=True)\r\n```', 'comment_created': datetime.datetime(2022, 1, 31, 8, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'asi1024', 'type': 'User'}, {'comment_id': 795419184, 'comment_body': 'Could you add a new test case for this check?', 'comment_created': datetime.datetime(2022, 1, 31, 8, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'asi1024', 'type': 'User'}, {'comment_id': 795424055, 'comment_body': 'Ah, yes! I missed it. Thanks for pointing out :)', 'comment_created': datetime.datetime(2022, 1, 31, 8, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 795490136, 'comment_body': 'Could you fix also this line? https://github.com/cupy/cupy/pull/6402/files#r795418783', 'comment_created': datetime.datetime(2022, 1, 31, 9, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'asi1024', 'type': 'User'}, {'comment_id': 795496229, 'comment_body': 'Yes, done :+1: ', 'comment_created': datetime.datetime(2022, 1, 31, 9, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 795533026, 'comment_body': 'How about using the searchsorted as mentioned in https://github.com/cupy/cupy/pull/4018#discussion_r495790724, \r\n\r\nI had also implemented it in PR #6407. \r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 1, 31, 10, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'amanchhaparia', 'type': 'User'}, {'comment_id': 796301465, 'comment_body': ""There seems to be not significant difference in performance.\r\n\r\n- benchmark:\r\n```py\r\nimport cupy\r\nfrom cupyx.profiler import benchmark\r\n\r\n\r\nsize = (16, 4096, 4096)\r\nscale = 100000000\r\nx1 = cupy.testing.shaped_random(size, scale=scale, dtype='l', seed=0)\r\nx2 = cupy.testing.shaped_random(size, scale=scale, dtype='l', seed=1)\r\n\r\nfor return_indices in [False, True]:\r\n    perf = benchmark(\r\n        cupy.intersect1d,\r\n        (x1, x2),\r\n        {'return_indices': return_indices},\r\n        n_repeat=100,\r\n    )\r\n    print(perf)\r\n```\r\n\r\n- sorting\r\n```\r\nintersect1d         :    CPU:111609.020 us   +/-270.427 (min:111209.120 / max:113111.656) us     GPU-0:113952.656 us   +/-266.501 (min:113556.480 / max:115440.643) us\r\nintersect1d         :    CPU:264716.717 us   +/-128.043 (min:264499.548 / max:265360.571) us     GPU-0:271108.404 us   +/-104.410 (min:270897.156 / max:271538.177) us\r\n```\r\n\r\n- searchsorted\r\n```\r\nintersect1d         :    CPU:109051.820 us   +/-196.413 (min:108677.675 / max:109495.282) us     GPU-0:110463.191 us   +/-195.613 (min:110091.263 / max:110893.059) us\r\nintersect1d         :    CPU:244261.040 us   +/-121.246 (min:244080.101 / max:244808.975) us     GPU-0:251270.912 us   +/-112.754 (min:251099.136 / max:251734.009) us\r\n```"", 'comment_created': datetime.datetime(2022, 2, 1, 6, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'asi1024', 'type': 'User'}, {'comment_id': 796304659, 'comment_body': '```suggestion\r\n        By default, False. If set True, the input arrays will be\r\n```', 'comment_created': datetime.datetime(2022, 2, 1, 6, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 796306851, 'comment_body': ""`searchsorted` seems 3~5% better than `sorting`? Why not use it if it's already implemented? ðŸ˜„ "", 'comment_created': datetime.datetime(2022, 2, 1, 7, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 796306903, 'comment_body': '```suggestion\r\n    a : cupy.ndarray\r\n```', 'comment_created': datetime.datetime(2022, 2, 1, 7, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 796306977, 'comment_body': '```suggestion\r\n    axis : int or tuple of ints\r\n```', 'comment_created': datetime.datetime(2022, 2, 1, 7, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}]","[{'commit_sha': 'c8e414c69687061543ee8e8eb12567d6456b52ed', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd97d1ac4b0992dfc75116f8173d8082d09b58184', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02f35f892a3112cae78e996d4f1c2b73c5154557', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fb4518d30501a7a6ec31d87213a366e523fa23', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cd4f43cbda337367491bc63d40c795993c19ccf', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa33972470e691d2b005bb62612b94df075abab', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '234bbd3027a4d45523fd293bb77ed14b09a3469e', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252ffc2bb61be9116e38bc7d77ef46ec2a88f20b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
828787230,Add `cupy.union1d` API.,"Hi, Team!!
The PR **aims** to add `cupy.union1d` API. It follows #6078.
I would love to get your feedback.

Thanks! :)",True,6357,https://api.github.com/repos/cupy/cupy/pulls/6357,https://github.com/cupy/cupy/pull/6357,closed,49,0,4,4,5,3,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-01-21 18:35:52+00:00,2022-01-26 15:20:46+00:00,420294.0,"4 days, 20:44:54","[{'comment_id': 792321856, 'comment_body': ""This line causes an error: `TypeError: float() argument must be a string or a real number, not 'complex'`. Would you look again this test method?"", 'comment_created': datetime.datetime(2022, 1, 26, 5, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 792321955, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 1, 26, 5, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 792322977, 'comment_body': 'Yes, sure! I will correct it and ping you soon :)\r\nThanks!', 'comment_created': datetime.datetime(2022, 1, 26, 5, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': 'dd511648ef333b4d4544b32cc95a2a58cce56a55', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e32c67965c74e8890209cd4efb70ba00e8c41de6', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f93c441b420648d70ba7b8a27c0511050cf952', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ac3a279556ce09aa8f1af400101b45f3d9c2f04', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
822928725,Add `triu_indices` and `triu_indices_from` API.,"Hi,
The PR **aims** to add `cupy.triu_indices` and `cupy_indices_from` API's. It follows #6078.
Looking forward to your viewpoints.
Thanks!
",True,6316,https://api.github.com/repos/cupy/cupy/pulls/6316,https://github.com/cupy/cupy/pull/6316,closed,118,2,4,3,3,0,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-01-14 17:13:13+00:00,2022-01-17 08:39:52+00:00,228399.0,"2 days, 15:26:39",[],"[{'commit_sha': 'c07e52774b56c213ab4de60ae0034ee64755ba6c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3145cfec8143171d60c12e63d71deb8eb1d5f2a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60105461009f3c93e592ef174867439756f590b1', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
818806437,Add `tril_indices` and `tril_indices_from` API.,"Hi, Team!
The PR **aims** to add `cupy.tril_indices` and `cupy.tril_indices_from` API. It follows #6078.

Looking forward to your viewpoints :)
Thanks!

cc: @kmaehashi @takagi @leofang @asi1024  @toslunar ",True,6305,https://api.github.com/repos/cupy/cupy/pulls/6305,https://github.com/cupy/cupy/pull/6305,closed,113,3,4,4,4,7,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-01-11 15:12:01+00:00,2022-01-17 04:13:35+00:00,478894.0,"5 days, 13:01:34","[{'comment_id': 783569454, 'comment_body': 'nitpick: for historical reasons, we no longer need `@testing.gpu`.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 1, 13, 1, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 783569556, 'comment_body': 'ditto.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 1, 13, 1, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 783583883, 'comment_body': 'Be default, `m` is taken to equal to `n`?', 'comment_created': datetime.datetime(2022, 1, 13, 2, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 783588438, 'comment_body': 'I read ""row"" is used for another meaning in this sentence. How about ""element"" to indicate members of a tuple?\r\n\r\n```suggestion\r\n    Here, the first element contains row coordinates of all indices and\r\n    the second element contains column coordinates.\r\n```', 'comment_created': datetime.datetime(2022, 1, 13, 2, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 783628275, 'comment_body': 'Sure, if you say. But I think it may create confusion, as `element` refers to a single term. What about `group of elements` instead of that?', 'comment_created': datetime.datetime(2022, 1, 13, 4, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 783628531, 'comment_body': 'Oops, typo. Thanks!', 'comment_created': datetime.datetime(2022, 1, 13, 4, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 783630700, 'comment_body': 'Perfect.', 'comment_created': datetime.datetime(2022, 1, 13, 4, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}]","[{'commit_sha': '7597ddce3d373f7272af614c580e491de8c64a74', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2964feef656200bcdb69805e2a53d1a0232a8996', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75850e1a211b545c1098c92c5d082e1bf83817e3', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '646dcf947f37ed4bd8207cc6c4606f504bbec4da', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
815218533,Add doc issue template,"Hi, Team!
The PR Fixes: https://github.com/cupy/cupy/issues/6293#issue-1094716054

cc: @kmaehashi @leofang @toslunar ",True,6294,https://api.github.com/repos/cupy/cupy/pulls/6294,https://github.com/cupy/cupy/pull/6294,closed,22,0,1,4,3,2,2,1,"[{'name': 'cat:other'}, {'name': 'prio:medium'}]",2022-01-06 04:25:41+00:00,2022-01-12 07:11:37+00:00,528356.0,"6 days, 2:45:56","[{'comment_id': 782756129, 'comment_body': '```suggestion\r\n      label: Description\r\n```', 'comment_created': datetime.datetime(2022, 1, 12, 6, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 782756833, 'comment_body': '```suggestion\r\n        Please describe the issue with the current documentation. Make sure to provide relevant links to the document you are referring to.\r\n```', 'comment_created': datetime.datetime(2022, 1, 12, 6, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}]","[{'commit_sha': 'd34d5afc746245f48a82e2233a8d668a01d1b9fe', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06ad27b7a3cd2d6a5a7fa8dd43062bc1e9319df4', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d45e64baa2a7880bf7e690423eec023beaee277', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'becf2588984d4308d011081c0ba108feefd78377', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
811901000,Add `cupy.fabs` API.,"Hi, Team!
The PR **aims** to add `cupy.fabs` API. Follows https://github.com/cupy/cupy/issues/6078#issue-1051191869.

I will be happy to know and learn from your viewpoints. Thanks!

cc: @kmaehashi ",True,6282,https://api.github.com/repos/cupy/cupy/pulls/6282,https://github.com/cupy/cupy/pull/6282,closed,25,2,5,11,12,9,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2021-12-30 10:32:13+00:00,2022-01-12 15:59:10+00:00,1142817.0,"13 days, 5:26:57","[{'comment_id': 776670894, 'comment_body': 'The implemented dtypes are similar to `cupy.square`. Would you please let me know if more dtypes are to be added or if any types are to be removed?\r\nReference: [Array-protocol type strings](https://numpy.org/doc/stable/reference/arrays.dtypes.html).\r\n\r\nThank you! (:', 'comment_created': datetime.datetime(2021, 12, 30, 10, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777481798, 'comment_body': ""I suppose `['e->e', 'f->f', 'd->d']` is the choice.\r\n```\r\n>>> import numpy; numpy.fabs.types\r\n['e->e', 'f->f', 'd->d', 'g->g', 'O->O']\r\n```\r\nand exclude `'g'` (`float128`) and `'O'` (`object`) which CuPy do not support."", 'comment_created': datetime.datetime(2022, 1, 3, 13, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'toslunar', 'type': 'User'}, {'comment_id': 778675723, 'comment_body': 'Could you move the line to `absolute` and `sign`? (https://github.com/cupy/cupy/blame/v10.0.0/docs/source/reference/math.rst#L4)', 'comment_created': datetime.datetime(2022, 1, 5, 9, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'toslunar', 'type': 'User'}, {'comment_id': 778677526, 'comment_body': 'Okay, sure!', 'comment_created': datetime.datetime(2022, 1, 5, 9, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 779221974, 'comment_body': '```suggestion\r\n    @testing.numpy_cupy_allclose(atol=1e-5)\r\n```\r\nto align with other tests in the file.', 'comment_created': datetime.datetime(2022, 1, 6, 0, 22, 24, tzinfo=datetime.timezone.utc), 'commenter': 'toslunar', 'type': 'User'}, {'comment_id': 779222236, 'comment_body': '```suggestion\r\n    @testing.numpy_cupy_allclose(atol=1e-5)\r\n```\r\nditto', 'comment_created': datetime.datetime(2022, 1, 6, 0, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'toslunar', 'type': 'User'}, {'comment_id': 779332588, 'comment_body': '```suggestion\r\n    @testing.numpy_cupy_allclose(atol=1e-5)\r\n```', 'comment_created': datetime.datetime(2022, 1, 6, 6, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'toslunar', 'type': 'User'}, {'comment_id': 779332633, 'comment_body': '```suggestion\r\n    @testing.numpy_cupy_allclose(atol=1e-5)\r\n```', 'comment_created': datetime.datetime(2022, 1, 6, 6, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'toslunar', 'type': 'User'}, {'comment_id': 779333322, 'comment_body': 'Ahh, I missed it :(', 'comment_created': datetime.datetime(2022, 1, 6, 6, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': '3cec707010a01eb851753ba39b7e6dc53f0bacb0', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd78a533a9e4783c846475564ac9487d440a1147', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '934c9368352939aed62065823cb52aa904bfd79d', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdf9e4e8bbc2ae4eb8a95375ebd23255eff09cd5', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879f00b5a1934dffe9d7f3c96bdf9c9e7e3bb977', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93c5451d368fb5538bc0867964cfce4031eb9f56', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd65d015515f70071055218daac68298b3d23410a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce97f5b86f14bd208263c499a9397c57374a675', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba85d4ccc118574e74e5d1982bbe1cfd80a85479', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a51bbe4142f99e558bb67f6432ab2fb0eff93f4', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '743d62bd5f6031dc289c92e62ce21115b0800a96', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
811424977,Add `cupy.ediff1d` API.,"Hi, Team!
The PR **aim** to add `cupy.ediff1d` API. It aims to resolve one part to https://github.com/cupy/cupy/issues/6078#issue-1051191869.

Looking forward to your viewpoints. Thanks!

cc: @kmaehashi ",True,6280,https://api.github.com/repos/cupy/cupy/pulls/6280,https://github.com/cupy/cupy/pull/6280,closed,132,1,4,9,5,12,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2021-12-29 11:28:17+00:00,2022-01-12 03:56:46+00:00,1182509.0,"13 days, 16:28:29","[{'comment_id': 776712527, 'comment_body': 'As CuPy does not support `__array_wrap__` protocol. Other way can be using `__array_ufunc__` protocol. Will it be wiser to add that here?', 'comment_created': datetime.datetime(2021, 12, 30, 12, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 779285532, 'comment_body': 'To avoid implicit host-to-device sync, CuPy has a design policy that it accepts only `cupy.ndarray` where NumPy takes an arraylike. Would you remove `cupy.asanyarray`, then add a type check for `arr` instead?', 'comment_created': datetime.datetime(2022, 1, 6, 4, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 779286137, 'comment_body': 'ditto (a type check as `arr`)', 'comment_created': datetime.datetime(2022, 1, 6, 4, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 779286181, 'comment_body': 'ditto (a type check as `arr`)', 'comment_created': datetime.datetime(2022, 1, 6, 4, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 779291851, 'comment_body': 'We can skip calling `__array_wrap__` here as CuPy does not support subclassing `cupy.ndarray` yet, which may be considered in #3972. Would you leave a comment for now?\r\n\r\n```suggestion\r\n    # result = arr.__array_wrap__(result)  # CuPy does not support subclassing the ndarray\r\n```', 'comment_created': datetime.datetime(2022, 1, 6, 4, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 779326085, 'comment_body': 'Added!\r\nThanks for sharing the ongoing issue.', 'comment_created': datetime.datetime(2022, 1, 6, 6, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 779329187, 'comment_body': 'Yes, sure! Added. Thanks for the concept.', 'comment_created': datetime.datetime(2022, 1, 6, 6, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 779548408, 'comment_body': ""`cupy.array()` works as same as `cupy.asanyarray()`, and it can also bring host-to-device sync. How about the following (also `to_begin` and `to_end`)?\r\n```suggestion\r\n    if not isinstance(arr, cupy.ndarray):\r\n        raise TypeError('`arr` should be of type cupy.ndarray')\r\n    arr = arr.ravel()\r\n```"", 'comment_created': datetime.datetime(2022, 1, 6, 13, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 779641561, 'comment_body': 'I think it\'s a more thoughtful approach to do so. Thanks for it! Just curious to know why do we need to avoid host-to-device sync here?\r\n\r\nAlso, I tried for `to_begin` and `to_end` too. I got the following results.\r\n#### Code\r\n```\r\nif to_begin is None:\r\n        l_begin = 0\r\n    else:\r\n        if not isinstance(to_begin, numpy.ndarray):\r\n            raise TypeError(\'`to_begin` should be of type numpy.ndarray\')\r\n        if not cupy.can_cast(to_begin, dtype_req, casting=""same_kind""):\r\n            raise TypeError(""dtype of `to_begin` must be compatible ""\r\n                            ""with input `arr` under the `same_kind` rule."")\r\n\r\n        to_begin = to_begin.ravel()\r\n        l_begin = len(to_begin)\r\n```\r\n#### Result\r\n```\r\ntests/cupy_tests/math_tests/test_sumprod.py:1066: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ncupy/_math/sumprod.py:578: in ediff1d\r\n    result[:l_begin] = to_begin\r\ncupy/_core/core.pyx:1498: in cupy._core.core.ndarray.__setitem__\r\n    _indexing._ndarray_setitem(self, slices, value)\r\ncupy/_core/_routines_indexing.pyx:51: in cupy._core._routines_indexing._ndarray_setitem\r\n    _scatter_op(self, slices, value, \'update\')\r\ncupy/_core/_routines_indexing.pyx:987: in cupy._core._routines_indexing._scatter_op\r\n    y.fill(value)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\n>   raise ValueError(\r\nE   AssertionError: Only cupy raises error\r\nE   \r\nE   Traceback (most recent call last):\r\nE     File ""/home/khushi/Documents/cupy/cupy/testing/_loops.py"", line 43, in _call_func\r\nE       result = impl(*args, **kw)\r\nE     File ""/home/khushi/Documents/cupy/tests/cupy_tests/math_tests/test_sumprod.py"", line 1066, in test_ediff1d_to_begin1\r\nE       return xp.ediff1d(a, to_begin=numpy.array([0], dtype=dtype))\r\nE     File ""/home/khushi/Documents/cupy/cupy/_math/sumprod.py"", line 578, in ediff1d\r\nE       result[:l_begin] = to_begin\r\nE     File ""cupy/_core/core.pyx"", line 1498, in cupy._core.core.ndarray.__setitem__\r\nE       _indexing._ndarray_setitem(self, slices, value)\r\nE     File ""cupy/_core/_routines_indexing.pyx"", line 51, in cupy._core._routines_indexing._ndarray_setitem\r\nE       _scatter_op(self, slices, value, \'update\')\r\nE     File ""cupy/_core/_routines_indexing.pyx"", line 987, in cupy._core._routines_indexing._scatter_op\r\nE       y.fill(value)\r\nE     File ""cupy/_core/core.pyx"", line 676, in cupy._core.core.ndarray.fill\r\nE       raise ValueError(\r\nE   ValueError: non-scalar numpy.ndarray cannot be used to fill\r\n\r\ncupy/_core/core.pyx:676: AssertionError\r\n----------------------------------------- Captured stdout call -----------------------------------------\r\ndtype is <class \'numpy.float64\'>\r\n```\r\n#### My viewpoints\r\n- We cannot use `cupy.ndarray` type in `to_begin` and `to_end` to `isinstance` for the reason that CuPy\'s `ndarray` does not support `subclassing` as of now.\r\n- For `numpy.ndarray`, it throws the mentioned error as we cannot access the CPU memory. Credits: [StackOverflow](https://stackoverflow.com/questions/68634058)\r\n- Since, we are passing `numpy.ndarray` as input for `to_begin` and `to_end`, which runs on CPU. We need to transfer the data to GPU. Henceforth, we need host-to-device sync.\r\n\r\nDo these sound good to you? Will you please let me know if I am getting something wrong?\r\n\r\nThanks a lot for reviewing the PR and for all valuable suggestions (:\r\n\r\ncc: @takagi ', 'comment_created': datetime.datetime(2022, 1, 6, 15, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 779972513, 'comment_body': ""Host-to-device synchronization blocks the execution until CUDA kernels that have been launched before calling the sync complete their work. If `cupy.ediff1d` implicitly synchronized and the user was not aware of it, the performance of the system could be unintentionally incurred. So we have a design policy that we require users to explicitly manage host-to-device synchronization.\r\n\r\nFor checking `to_begin` and `to_end`, I don't think we need CuPy to support subclassing and the following would be fine. Can I have why you think so?\r\n\r\n```Python\r\nif not isinstance(to_begin, cupy.ndarray):\r\n    raise TypeError('`to_begin` should be of type cupy.ndarray')\r\n```"", 'comment_created': datetime.datetime(2022, 1, 7, 1, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 780269202, 'comment_body': '>  If cupy.ediff1d implicitly synchronized and the user was not aware of it, the performance of the system could be unintentionally incurred. So we have a design policy that we require users to explicitly manage host-to-device synchronization.\r\n\r\nThis is fascinating!', 'comment_created': datetime.datetime(2022, 1, 7, 13, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 780290425, 'comment_body': ""> For checking to_begin and to_end, I don't think we need CuPy to support subclassing and the following would be fine. Can I have why you think so?\r\n\r\nYes, you are absolutely correct. They ain't related to subclassing. I was wrong. I revisited the concept and felt so. Thanks for it!\r\n\r\ncc: @takagi "", 'comment_created': datetime.datetime(2022, 1, 7, 14, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': 'ceccd1f29fd2b30e24532869dfef010caf6f32bc', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2be6dcd15777b7469d48f2d88f5836c36e812e3', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84c2db0680b76c671fedfa53d110a99b04ec0f22', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '328b6430d19afd024fa75a5a27fabc16b5d8c3c9', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97f2252ece640aa0f715b8c414d2dc3735523b6d', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d61944fadad524c00d7028d3abaa4536b8a39b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fad4db2c9962c04b07206d2e0f0aa0848dfe779b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ff1c99c0c30a23e62b4e627dfbb99e637cc311', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72b796873cad5c1c31b53cc7e79f38f46066da67', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
810527774,Add `asarray_chkfinite` API.,"Hi, Team!
**Aim of the PR:** To implement `asarray_chkfinite` API.

It follows https://github.com/cupy/cupy/issues/6078#issue-1051191869.

Looking forward to your viewpoints. Thanks!

cc: @kmaehashi (:",True,6275,https://api.github.com/repos/cupy/cupy/pulls/6275,https://github.com/cupy/cupy/pull/6275,closed,47,3,4,23,9,52,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2021-12-27 17:46:48+00:00,2022-01-24 05:39:24+00:00,2375556.0,"27 days, 11:52:36","[{'comment_id': 775745289, 'comment_body': '```suggestion\r\n    and raises an error if the input contains NaNs or Infs.\r\n```', 'comment_created': datetime.datetime(2021, 12, 28, 6, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'toslunar', 'type': 'User'}, {'comment_id': 775745547, 'comment_body': ""It seems 'A' and 'K' are also supported.\r\nhttps://numpy.org/doc/stable/reference/generated/numpy.asarray_chkfinite.html"", 'comment_created': datetime.datetime(2021, 12, 28, 6, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'toslunar', 'type': 'User'}, {'comment_id': 775745868, 'comment_body': 'Google style cannot name the returned value.\r\n```suggestion\r\n        cupy.ndarray: Array interpretation of `a`.\r\n```', 'comment_created': datetime.datetime(2021, 12, 28, 6, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'toslunar', 'type': 'User'}, {'comment_id': 775747182, 'comment_body': 'Could you add another test with a non-finite-value array? I am not sure if bool/int/complex types make sense here, so worth a look.', 'comment_created': datetime.datetime(2021, 12, 28, 6, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 775758836, 'comment_body': 'Noted (:', 'comment_created': datetime.datetime(2021, 12, 28, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 775804617, 'comment_body': 'Hi, @leofang! \r\nI added the tests for the non-finite-value array, and all the tests are passed in the CI. Are more tests required?\r\n> I am not sure if bool/int/complex types make sense here, so worth a look.\r\n\r\nSo, why did you think that was worth checking?\r\nI checked for `numpy.asarray_chkfinite`. The following were the outputs: (which are as expected)\r\n\r\n#### For bool\r\n```\r\nIn [12]: a = numpy.asarray_chkfinite([numpy.inf, 0., -numpy.inf], dtype=bool)\r\n\r\nIn [13]: a\r\nOut[13]: array([ True, False,  True])\r\n```\r\n#### For int\r\n```\r\nIn [14]: a = numpy.asarray_chkfinite([numpy.inf, 0., -numpy.inf], dtype=int)\r\n---------------------------------------------------------------------------\r\nOverflowError                             Traceback (most recent call last)\r\n<ipython-input-14-d6d91c379cab> in <module>\r\n----> 1 a = numpy.asarray_chkfinite([numpy.inf, 0., -numpy.inf], dtype=int)\r\n\r\n~/anaconda3/lib/python3.8/site-packages/numpy/lib/function_base.py in asarray_chkfinite(a, dtype, order)\r\n    481 \r\n    482     """"""\r\n--> 483     a = asarray(a, dtype=dtype, order=order)\r\n    484     if a.dtype.char in typecodes[\'AllFloat\'] and not np.isfinite(a).all():\r\n    485         raise ValueError(\r\n\r\n~/anaconda3/lib/python3.8/site-packages/numpy/core/_asarray.py in asarray(a, dtype, order)\r\n     81 \r\n     82     """"""\r\n---> 83     return array(a, dtype, copy=False, order=order)\r\n     84 \r\n     85 \r\n\r\nOverflowError: cannot convert float infinity to integer\r\n```\r\n#### For float\r\n```\r\nIn [15]: a = numpy.asarray_chkfinite([numpy.inf, 0., -numpy.inf], dtype=float)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-15-15536ad3bf83> in <module>\r\n----> 1 a = numpy.asarray_chkfinite([numpy.inf, 0., -numpy.inf], dtype=float)\r\n\r\n~/anaconda3/lib/python3.8/site-packages/numpy/lib/function_base.py in asarray_chkfinite(a, dtype, order)\r\n    483     a = asarray(a, dtype=dtype, order=order)\r\n    484     if a.dtype.char in typecodes[\'AllFloat\'] and not np.isfinite(a).all():\r\n--> 485         raise ValueError(\r\n    486             ""array must not contain infs or NaNs"")\r\n    487     return a\r\n\r\nValueError: array must not contain infs or NaNs\r\n```\r\n#### For Complex\r\n```\r\na = numpy.asarray_chkfinite([numpy.inf, 0., -numpy.inf], dtype=complex)\r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-16-14e1c1a2ac61> in <module>\r\n----> 1 a = numpy.asarray_chkfinite([numpy.inf, 0., -numpy.inf], dtype=complex)\r\n\r\n~/anaconda3/lib/python3.8/site-packages/numpy/lib/function_base.py in asarray_chkfinite(a, dtype, order)\r\n    483     a = asarray(a, dtype=dtype, order=order)\r\n    484     if a.dtype.char in typecodes[\'AllFloat\'] and not np.isfinite(a).all():\r\n--> 485         raise ValueError(\r\n    486             ""array must not contain infs or NaNs"")\r\n    487     return a\r\n\r\nValueError: array must not contain infs or NaNs\r\n```', 'comment_created': datetime.datetime(2021, 12, 28, 9, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 776207793, 'comment_body': 'I believe this is what you need @khushi-411 \r\n\r\n```suggestion\r\n        self.assertRaises(ValueError, cupy.asarray_chkfinite, a, dtype)\r\n```\r\n\r\nThis will check that the expected ValueError is raised when you are passing an array with infinite values.\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 12, 29, 8, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oke-aditya', 'type': 'User'}, {'comment_id': 776208169, 'comment_body': ""I think this too will raise an error and you won't get anything in `a_cpu`. As nothing would be returned.\r\nI'm not sure you need to test this or even write this."", 'comment_created': datetime.datetime(2021, 12, 29, 8, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oke-aditya', 'type': 'User'}, {'comment_id': 776208278, 'comment_body': ""Hence from above comment checking the dtype wouldn't make sense."", 'comment_created': datetime.datetime(2021, 12, 29, 8, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oke-aditya', 'type': 'User'}, {'comment_id': 776299039, 'comment_body': 'Yes, `a_cpu` too will raise value error.', 'comment_created': datetime.datetime(2021, 12, 29, 12, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 776307082, 'comment_body': 'Thanks a lot, @oke-aditya, for taking a look (: It worked.\r\nBut I am not too sure if we need this test or not.', 'comment_created': datetime.datetime(2021, 12, 29, 12, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 776309329, 'comment_body': 'I believe you need the test. It is recommended to test the valueErrors as this is an expected behivour.\n\nAny case the maintainers will tell you :)', 'comment_created': datetime.datetime(2021, 12, 29, 12, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oke-aditya', 'type': 'User'}, {'comment_id': 777299843, 'comment_body': ""> and all the tests are passed in the CI\r\n\r\nJust FYI: actual GPU tests are not yet run, the green CIs are just preliminary checks (formatting, compilation, etc).\r\n\r\n> > I am not sure if bool/int/complex types make sense here, so worth a look.\r\n> \r\n> So, why did you think that was worth checking? \r\n\r\nBecause experience showed that these are often corner cases in newly added APIs that require special treatments. It'd be nice to take care of them in one shot.\r\n\r\n> I checked for `numpy.asarray_chkfinite`. The following were the outputs: (which are as expected)\r\n\r\nThank you, @khushi-411. Looks like the current implementation should work fine. I'll make a few minor, style suggestions shortly."", 'comment_created': datetime.datetime(2022, 1, 3, 5, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777300838, 'comment_body': ""There are testing utilities that can help compare returned NumPy & CuPy arrays, parametrize array orders, etc. It looks like this file was rarely touched so it didn't get updated to use those, but it's never too late to modernize it ðŸ™‚\r\n```suggestion\r\n    @testing.for_orders('CFAK')\r\n    @testing.for_all_dtypes()\r\n    @testing.numpy_cupy_array_equal()\r\n    def test_asarray_chkfinite(self, xp, dtype, order):\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 1, 3, 5, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777301132, 'comment_body': 'Using the testing helpers (see above) allows you to write a lot less boilerplate codes and increase test coverages (after the return a lot of things are checked).\r\n```suggestion\r\n        return xp.asarray_chkfinite(a, dtype=dtype, order=order)\r\n```', 'comment_created': datetime.datetime(2022, 1, 3, 5, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777301588, 'comment_body': ""Ditto. Also, we are phasing out the usage of `unittest`, and using pytest is preferred:  \r\n```suggestion\r\n    @testing.for_orders('CFAK')\r\n    @testing.for_all_dtypes()\r\n    def test_asarray_chkfinite_non_finite_vals(self, dtype, order):\r\n```"", 'comment_created': datetime.datetime(2022, 1, 3, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777302543, 'comment_body': ""Nitpick: Ideally we also want to include NaN, though it'd probably be shadowed by the first non-finite entry... \r\n```suggestion\r\n        a = [-numpy.inf, 0., numpy.inf, numpy.nan]\r\n```"", 'comment_created': datetime.datetime(2022, 1, 3, 5, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777302796, 'comment_body': 'See https://github.com/cupy/cupy/pull/3256 for how to check exceptions.\r\n```suggestion\r\n        for xp in (numpy, cupy):\r\n            with pytest.raises(ValueError):\r\n                xp.asarray_chkfinite(a, dtype=dtype, order=order)\r\n```', 'comment_created': datetime.datetime(2022, 1, 3, 5, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777303022, 'comment_body': 'Please see my review comments below.', 'comment_created': datetime.datetime(2022, 1, 3, 5, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777303401, 'comment_body': ""> actual GPU tests are not yet run\r\n\r\nOo, that's the reason (: \r\n> It'd be nice to take care of them in one shot.\r\n\r\nOk, I understood. I'll try to figure out those cases the next time."", 'comment_created': datetime.datetime(2022, 1, 3, 6, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777469714, 'comment_body': ""> t looks like this file was rarely touched so it didn't get updated to use those, but it's never too late to modernize it :slightly_smiling_face: \r\n\r\nI totally agree with you and it seems Interesting. Shall I update other parts too? \r\nIn this file, I think the following test cases can be updated:\r\n- [test_asfortranarray](https://github.com/cupy/cupy/blob/0757aa31a10785e6b728ad465724e97a83945b73/tests/cupy_tests/manipulation_tests/test_kind.py#L21): All asfortranarray tests.\r\n- [test_require_C_and_F_flags](https://github.com/cupy/cupy/blob/0757aa31a10785e6b728ad465724e97a83945b73/tests/cupy_tests/manipulation_tests/test_kind.py#L88)"", 'comment_created': datetime.datetime(2022, 1, 3, 13, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777470576, 'comment_body': ""Got it! It's cooler than the previous approach."", 'comment_created': datetime.datetime(2022, 1, 3, 13, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777471462, 'comment_body': 'Sure, I changed it!', 'comment_created': datetime.datetime(2022, 1, 3, 13, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777487222, 'comment_body': ""> See #3256 for how to check exceptions.\r\n\r\nThanks for sharing the informative PR. I read that thoroughly (: \r\nI was wondering if a bit of enhancement can be made in code. For example, here, arrays are created inside the `for-loops`; that is not needed as it is independent of `xp`.\r\n```\r\ndef test_dim_mismatch_ellipsis2(self):\r\n        for xp in (numpy, cupy):\r\n            a = xp.arange(12).reshape(2, 3, 2)\r\n            with pytest.raises(ValueError):\r\n                xp.einsum('i...,...i', a, a)\r\n```\r\nWe can modify it to:\r\n```\r\ndef test_dim_mismatch_ellipsis2(self):\r\n        a = xp.arange(12).reshape(2, 3, 2)\r\n        for xp in (numpy, cupy):\r\n            with pytest.raises(ValueError):\r\n                xp.einsum('i...,...i', a, a)\r\n```\r\n#### Gains\r\n- Will take lesser computation time.\r\n\r\nWhat do you think? Thanks for reading it (:"", 'comment_created': datetime.datetime(2022, 1, 3, 13, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777540554, 'comment_body': 'CuPy\'s convention is to start the short description right after the triple quotes. Also, correct the verb to be consistent:\r\n```suggestion\r\n    """"""Converts the given input to an array,\r\n    and raises an error if the input contains NaNs or Infs.\r\n```', 'comment_created': datetime.datetime(2022, 1, 3, 15, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777542033, 'comment_body': '```suggestion\r\n        cupy.ndarray: An array on the current device.\r\n```', 'comment_created': datetime.datetime(2022, 1, 3, 15, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777542911, 'comment_body': ""We don't use the decorator `numpy_cupy_array_equal()` here, so `xp` is not needed:\r\n```suggestion\r\n    def test_asarray_chkfinite_non_finite_vals(self, dtype, order):\r\n```"", 'comment_created': datetime.datetime(2022, 1, 3, 15, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777546467, 'comment_body': ""Feel free to work on it! But I'd suggest to create a separate PR so that each PR's scope is well defined."", 'comment_created': datetime.datetime(2022, 1, 3, 15, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777547110, 'comment_body': ""No, `xp` is the loop variable, so it can't be pulled out of the loop."", 'comment_created': datetime.datetime(2022, 1, 3, 15, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777556865, 'comment_body': 'Yeah, sure. Thanks!!', 'comment_created': datetime.datetime(2022, 1, 3, 15, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777584546, 'comment_body': 'Oops, agreed. I was walking without looking into the other side :( ', 'comment_created': datetime.datetime(2022, 1, 3, 16, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777597465, 'comment_body': ""Hey Khushi @khushi-411 \nI believe you can check the error message as well. \n\n\n```\nwith pytest.raises(ValueError, match='Expected error message'):\n```\n\nThis is a good practice and ensures exact error is raised. You can use Regex etc but passing a string works well too. \n"", 'comment_created': datetime.datetime(2022, 1, 3, 17, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oke-aditya', 'type': 'User'}, {'comment_id': 777603080, 'comment_body': ""Hi, @oke-aditya!\r\nOo yes! Thanks for pointing out (: I'll keep a note!"", 'comment_created': datetime.datetime(2022, 1, 3, 17, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777606164, 'comment_body': ""Hmmm I missed your [previous observation](https://github.com/cupy/cupy/pull/6275#discussion_r775804617) and so the CI failed, let's fix it...\r\n```suggestion\r\n            if xp.issubdtype(dtype, xp.integer):\r\n                error = OverflowError\r\n            else:\r\n                error = ValueError\r\n            with pytest.raises(error):\r\n```"", 'comment_created': datetime.datetime(2022, 1, 3, 17, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 777634176, 'comment_body': ""Here, we set `OverflowError` for all the dtypes lower/equal than integer type and the rest raises the `ValueError`.\r\nI want to know more about the fixes you made and the error raised. The error message in the CI is:\r\n```\r\n=================================== FAILURES =================================== | \xa0\r\n-- | --\r\n00:48:25.963796 STDOUT 2232] | _______________ TestKind.test_asarray_chkfinite_non_finite_vals ________________ | \xa0\r\n00:48:25.963800 STDOUT 2232] | \xa0 | \xa0\r\n00:48:25.963892 STDOUT 2232] | self = <cupy_tests.manipulation_tests.test_kind.TestKind testMethod=test_asarray_chkfinite_non_finite_vals> | \xa0\r\n00:48:25.963896 STDOUT 2232] | dtype = <class 'numpy.int8'>, order = 'C' | \xa0\r\n00:48:25.963902 STDOUT 2232] | \xa0 | \xa0\r\n00:48:25.963940 STDOUT 2232] | @testing.for_orders('CFAK') | \xa0\r\n00:48:25.963943 STDOUT 2232] | @testing.for_all_dtypes() | \xa0\r\n00:48:25.963950 STDOUT 2232] | def test_asarray_chkfinite_non_finite_vals(self, dtype, order): | \xa0\r\n00:48:25.964010 STDOUT 2232] | a = [-numpy.inf, 0., numpy.inf, numpy.nan] | \xa0\r\n00:48:25.964015 STDOUT 2232] | for xp in (numpy, cupy): | \xa0\r\n00:48:25.964020 STDOUT 2232] | with pytest.raises(ValueError): | \xa0\r\n00:48:25.964056 STDOUT 2232] | >               xp.asarray_chkfinite(a, dtype=dtype, order=order) | \xa0\r\n00:48:25.964058 STDOUT 2232] | \xa0 | \xa0\r\n00:48:25.964065 STDOUT 2232] | a          = [-inf, 0.0, inf, nan] | \xa0\r\n00:48:25.964113 STDOUT 2232] | dtype      = <class 'numpy.int8'> | \xa0\r\n00:48:25.964118 STDOUT 2232] | order      = 'C' | \xa0\r\n00:48:25.964126 STDOUT 2232] | self       = <cupy_tests.manipulation_tests.test_kind.TestKind testMethod=test_asarray_chkfinite_non_finite_vals> | \xa0\r\n00:48:25.964190 STDOUT 2232] | xp         = <module 'numpy' from '/opt/pyenv/versions/3.9.6/lib/python3.9/site-packages/numpy/__init__.py'>\r\n```\r\nThank you!!\r\n\r\ncc: @leofang "", 'comment_created': datetime.datetime(2022, 1, 3, 18, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 777833580, 'comment_body': '```suggestion\r\n   .. note::\r\n      This function performs device synchronization when ``a`` is a\r\n      ``cupy.ndarray``.\r\n```', 'comment_created': datetime.datetime(2022, 1, 4, 5, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 777836233, 'comment_body': ""To avoid synchronization as much as possible, I think it's better to do inf check on CPU.\r\n\r\n```py\r\nif isinstance(a, cupy.ndarray):\r\n    if not cupy.isfinite(a).all():\r\n        raise ValueError(...)\r\nelse:\r\n    a = cupy.asarray(np.asarray_chkfinite(a, dtype=dtype, order=order), dtype=dtype, order=order))\r\nreturn a\r\n``` "", 'comment_created': datetime.datetime(2022, 1, 4, 5, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 778349221, 'comment_body': 'In part of this test we convert infs/nans to ints. But they are not compatible and an `OverflowError` would be raised if `dtype` is of any integer type, so we need to branch out to let pytest catch different errors.\r\n\r\nLooks like when `dtype` is bool nothing would be raised, so this test still failed. Let me suggest another approach shortly. (You can see why I said we need to check those corner cases ðŸ™‚)', 'comment_created': datetime.datetime(2022, 1, 4, 19, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 778351182, 'comment_body': ""It does not make sense to test bool with nan/inf, so we simply disable it. (Alternatively, we can use `contextlib.nullcontext` for bool, which is available since Python 3.7, and a `pytest.raise` context manager for other dtypes. I don't have strong opinions here.) \r\n```suggestion\r\n    @testing.for_all_dtypes(no_bool=True)\r\n```"", 'comment_created': datetime.datetime(2022, 1, 4, 19, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 778542883, 'comment_body': ""Oo, that's the reason, Got It! Thanks!\r\n> You can see why I said we need to check those corner cases ðŸ™‚\r\n\r\nYes, it's very much interesting ðŸ™‚"", 'comment_created': datetime.datetime(2022, 1, 5, 4, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 778575706, 'comment_body': ""@kmaehashi Does it matter to avoid synchronization here if an exception is going to be raised anyway? Wouldn't it be better to raise sooner (by doing the check on GPU)? Put it differently, if the check passes (no exception) this takes longer than the original implementation."", 'comment_created': datetime.datetime(2022, 1, 5, 6, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 780029042, 'comment_body': ""Sorry my proposal was inaccurate, this is what I intended:\r\n```py\r\nif isinstance(a, cupy.ndarray):\r\n    if not cupy.isfinite(a).all():\r\n        raise ValueError(...)\r\nelse:\r\n    a = np.asarray_chkfinite(a, dtype=dtype, order=order)\r\nreturn cupy.asarray(a, dtype=dtype, order=order)\r\n```\r\n\r\nWhen an array is `cupy.ndarray`, there's no difference between the original implementation and my proposal. When an array is CPU array-like, the original implementation copies the array to GPU, checks for inf on GPU, and copies the result back to CPU. My proposal changes this to check for inf on CPU and (if no exceptions are raised) copy the array it to GPU."", 'comment_created': datetime.datetime(2022, 1, 7, 5, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 780417284, 'comment_body': ""From the above discussion:\r\n#### Original Implementation for CPU array\r\n- Copies the arrays from CPU to GPU\r\n- Perform Operations on GPU\r\n- Copies back to CPU\r\n#### Your Implementation for CPU array\r\n- Performs operations on CPU\r\n- Copies to GPU (if there are no infs and nans)\r\n#### As per @leofang's comment\r\n- If checks are passed, the implementation takes a longer time.\r\n- GPU error's will be faster\r\n\r\n@leofang, @kmaehashi, I have a small doubt. Like in the original implementation, we are making two implicit switches (CPU->GPU->CPU), while by your proposal, we are making a single switch (CPU->GPU). I am not too sure, but don't you think these *implicit* switches will affect the model's performance? Which factor to consider prior?\r\n\r\nThanks for the discussions! (:"", 'comment_created': datetime.datetime(2022, 1, 7, 17, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 780726314, 'comment_body': ""> When an array is `cupy.ndarray`, there's no difference between the original implementation and my proposal.\r\n\r\nYes.\r\n\r\n> When an array is CPU array-like, the original implementation copies the array to GPU, checks for inf on GPU, and copies the result back to CPU. My proposal changes this to check for inf on CPU and (if no exceptions are raised) copy the array it to GPU.\r\n\r\nDepends on our expectation for the likelihood of raising an error (due to either inf or nan) for this routine, the decision could differ. @kmaehashi has implicitly assumed that it's more likely to raise, whereas I expected in most cases the check will pass. In the former case, it's OK to do the check on host (which is slower) since the subsequent control flow will be returned to host, while in the latter case, it's cheaper to run the check on device (faster) and proceed to the next GPU calculation right away if there's no error."", 'comment_created': datetime.datetime(2022, 1, 9, 2, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 780726825, 'comment_body': ""Hmm I can be missing something.\r\n\r\n> it's cheaper to run the check on device (faster) and proceed to the next GPU calculation right away if there's no error.\r\n\r\nThe evaluation of `if not cupy.isfinite(a).all()` always requires a copy of 0-dim bool array from device to host, so synchronization happens in any case (whether the inf check pass or not).\r\n\r\n> I expected in most cases the check will pass\r\n\r\nI also expect this :)"", 'comment_created': datetime.datetime(2022, 1, 9, 2, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 780729543, 'comment_body': ""Yes, but If the check runs much faster on GPU than on CPU, then it's probably ok to pay the sync cost ðŸ™‚"", 'comment_created': datetime.datetime(2022, 1, 9, 3, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 780742926, 'comment_body': ""cc: @kmaehashi @leofang\r\n\r\nAs per the above discussion, I updated the function considering speed as a priority.\r\nPlease let me know if anything else is required. I'll be happy to work on it."", 'comment_created': datetime.datetime(2022, 1, 9, 7, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 785299763, 'comment_body': 'Align the exception message as NumPy.\r\n\r\n```suggestion\r\n            ""array must not contain infs or NaNs"")\r\n```', 'comment_created': datetime.datetime(2022, 1, 15, 11, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 785299883, 'comment_body': 'Please move it to the line after `ascontiguousarray`.\r\nhttps://numpy.org/doc/stable/reference/routines.array-manipulation.html', 'comment_created': datetime.datetime(2022, 1, 15, 11, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 785610999, 'comment_body': '```suggestion\r\n\r\n    .. note::\r\n        This function performs device synchronization.\r\n```', 'comment_created': datetime.datetime(2022, 1, 17, 3, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 785634903, 'comment_body': '```suggestion\r\n\r\n    .. note::\r\n```', 'comment_created': datetime.datetime(2022, 1, 17, 4, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 785635040, 'comment_body': '```suggestion\r\n            ""array must not contain Infs or NaNs"")\r\n```', 'comment_created': datetime.datetime(2022, 1, 17, 4, 54, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}]","[{'commit_sha': 'b21f12b8e75c605cc712762a4e3fc9332b6ab21b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a547ff8227ecc53d7ce12abeb8d8b51e31d3d5', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdb409082872d7c60a25446f3dcc825652ac7ffa', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6313e23764cbf19e5e2b94cd20c53ae841d3044', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b0a26a4867139f156b31d443e3602466d51aa7a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bde458ecdef2baec33976a1a9b6876f8e5163edf', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5882b70123d7de0557b392ee5240585ee52216fe', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eaa8fc23015d0d223a97a97d9f09c46787f2226', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de39b144df3cde4a052d9deb1a4dac5b8476506', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b6f1d39a64927552edc985efb090d7a9feb057', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12f8f2cfba81b72cf848c704309e9edc3aa95637', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8371972f5622163208bc9ebeeecc696d002b4a2', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '738d94b8704ab81b1bf61bd9bac34f8e051cf083', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0379fbbb3221879dde1fc5f5c23965d07fafe16b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccc6e36855a8fafb48d219daeaf5e7495a9a5b1c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '366ea8d3e3fc0fa9cbb6fff4aaab36b1a898bb65', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03e4c36656f605e0f62116ab5384473a3ef8dfba', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bf539809c5b064deea5676ae894004a159b15b8', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c474e4e303b456d14252ae1527f73a70208541f1', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5282e454bff5c8039384aa3f34fdbc45784a2877', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325c6391f42c8cc0d62e22ca0a634b0a59e9919f', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf8d76946b970f504c8b18ff500598948509398', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5532e3d44c0ad6a0143804ea5dd22bf3a82f3460', 'committer_username': 'kmaehashi', 'committer_name': 'Kenichi Maehashi', 'committer_email': None, 'commit_date': datetime.datetime(2011, 7, 26, 15, 20, 38, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
805392478,Add array_equiv API.,"Hi, CuPy Team,
The **aim** of the PR is to add the `array_equiv` API. It follows up https://github.com/cupy/cupy/issues/6078#issue-1051191869.

Looking forward to your viewpoints. Thanks!",True,6254,https://api.github.com/repos/cupy/cupy/pulls/6254,https://github.com/cupy/cupy/pull/6254,closed,82,4,6,11,11,11,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2021-12-17 13:58:45+00:00,2022-01-18 02:52:16+00:00,2724811.0,"31 days, 12:53:31","[{'comment_id': 771834396, 'comment_body': '```suggestion\r\n        cupy.ndarray: A boolean 0-dim array.\r\n```', 'comment_created': datetime.datetime(2021, 12, 18, 15, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 771834434, 'comment_body': 'This is not needed as CuPy functions only accept cupy.ndarrays.', 'comment_created': datetime.datetime(2021, 12, 18, 15, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 771834482, 'comment_body': 'Please return 0-dim boolean array instead of Python bool (like we do for `array_equal`).\r\nThis is a CuPy-specific difference from NumPy API to avoid transferring data from GPU to CPU which takes a lot of time.\r\n', 'comment_created': datetime.datetime(2021, 12, 18, 15, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 771834495, 'comment_body': 'Nice catch :)', 'comment_created': datetime.datetime(2021, 12, 18, 15, 8, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 771856186, 'comment_body': 'Thanks! (:', 'comment_created': datetime.datetime(2021, 12, 18, 19, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 771856298, 'comment_body': 'Sure, I made those changes. Thanks for the concept!', 'comment_created': datetime.datetime(2021, 12, 18, 19, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 775388175, 'comment_body': 'Please add a test case to cover that given two arrays are not broadcastable.', 'comment_created': datetime.datetime(2021, 12, 27, 8, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 775388344, 'comment_body': 'This is not needed as CuPy does not permit non-ndarray arguments to be passed.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 12, 27, 8, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 775563179, 'comment_body': ""Hi, @kmaehashi,\r\nI think the above tests depict the same. Array `xp.array([0, 4], dtype=dtype)` and the array `b = xp.array([[0, 4], [0, 5]], dtype=dtype)` are not broadcastable.\r\nWould you please tell me if I'm wrong?\r\n\r\nBut yes, I agree the name of the definition can be made more explicit. (I made those changes.) What do you think?\r\n\r\n(I also added one more test for non-broadcastable arrays with different dimensions.)"", 'comment_created': datetime.datetime(2021, 12, 27, 16, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 776631294, 'comment_body': '`xp.array([0, 4])` and `xp.array([[0, 4], [0, 5]])` are broadcastable ðŸ™‚\r\n\r\n```py\r\n>>> xp.array([0, 4]) + xp.array([[0, 4], [0, 5]])\r\narray([[0, 8],\r\n       [0, 9]])\r\n```\r\n\r\nCould you fix the test case name?\r\n', 'comment_created': datetime.datetime(2021, 12, 30, 9, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 777629518, 'comment_body': ""Ah, of course. It's broadcastable. I had a couple of different things in my mind at that time."", 'comment_created': datetime.datetime(2022, 1, 3, 18, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': 'b21f12b8e75c605cc712762a4e3fc9332b6ab21b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a547ff8227ecc53d7ce12abeb8d8b51e31d3d5', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3df9240d20ad5b3aeebf64d25b315dfeb0da017', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc2bf328472446be00e6042c55f623d7b1c23af', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6ba7500298d577ef0f98fe1e4dfd2260460038', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32429a1d90fb253dc4c9262cd36d23770b7ab1be', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14c713463b02c4a86e0d16f6795ffae84d9edf7c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2652126cd6f84c521a7d5861ad6d889188c4356d', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff5793894a739664edea50f05cbb46d325ed3e75', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd33faf3a9cdcebee9d5740509ba7b1cddb2fb3da', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5c0acc0a45852f24cbbe5bd98774a4b623e84f', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
779868806,Add cupy.isneginf and cupy.isposinf,"**Follows issue:** https://github.com/cupy/cupy/issues/6078#issue-1051191869

**Aim of the PR:** To implement `cupy.isneginf` and `cupy.isposinf`.

Thanks!",True,6089,https://api.github.com/repos/cupy/cupy/pulls/6089,https://github.com/cupy/cupy/pull/6089,closed,109,4,4,17,10,13,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2021-11-13 09:47:52+00:00,2022-02-07 06:45:35+00:00,7419463.0,"85 days, 20:57:43","[{'comment_id': 785986865, 'comment_body': '* Docs seem broken.\r\n* Copy the first line of the NumPy\'s documentation.\r\n\r\nhttps://cupy--6089.org.readthedocs.build/en/6089/reference/generated/cupy.isposinf.html?highlight=isposinf#cupy.isposinf\r\n\r\n```suggestion\r\n    """"""Test element-wise for negative infinity, return result as bool array.\r\n\r\n    Args:\r\n        x (cupy.ndarray): Input array.\r\n    Returns:\r\n        cupy.ndarray: Boolean array of same shape as ``x``.\r\n\r\n```', 'comment_created': datetime.datetime(2022, 1, 17, 13, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 785987191, 'comment_body': 'Please make an example appropriate (i.e., examples should use cupy.ndarray as Args section says it is a cupy.ndarray)', 'comment_created': datetime.datetime(2022, 1, 17, 13, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 785987501, 'comment_body': ""Please exactly copy the numpy's exception message unless it is necessary to change."", 'comment_created': datetime.datetime(2022, 1, 17, 13, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 785988031, 'comment_body': '`cupy.asanyarray` not needed as `x` is a cupy.ndarray.', 'comment_created': datetime.datetime(2022, 1, 17, 13, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 785989026, 'comment_body': '```suggestion\r\n    return cupy.logical_and(is_inf, signbit, out)\r\n```', 'comment_created': datetime.datetime(2022, 1, 17, 13, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 789687065, 'comment_body': 'Hi, @kmaehashi!\r\nApologies for the delay. I made all the changes as per review. But I have a doubt at this point.\r\nUsing `out` instead of `out=None` produces the following result in the local system:\r\n```\r\n    AssertionError: Only cupy raises error\r\nE   \r\nE   Traceback (most recent call last):\r\nE     File ""/home/khushi/Documents/cupy/cupy/testing/_loops.py"", line 43, in _call_func\r\nE       result = impl(*args, **kw)\r\nE     File ""/home/khushi/Documents/cupy/tests/cupy_tests/logic_tests/test_content.py"", line 42, in check_unary\r\nE       return getattr(xp, name)(a)\r\nE     File ""/home/khushi/Documents/cupy/cupy/_logic/content.py"", line 97, in isposinf\r\nE       return cupy.logical_and(is_inf, signbit, out)\r\nE     File ""cupy/_core/_kernel.pyx"", line 1147, in cupy._core._kernel.ufunc.__call__\r\nE       arg_list = _preprocess_args(dev_id, args, False)\r\nE     File ""cupy/_core/_kernel.pyx"", line 130, in cupy._core._kernel._preprocess_args\r\nE       raise TypeError(\'Unsupported type %s\' % type(arg))\r\nE   TypeError: Unsupported type <class \'NoneType\'>\r\n```\r\nThis is weird. Since we have already specified in the function definition, why do we need to define that again?\r\n\r\nAm I missing something?\r\nThanks!', 'comment_created': datetime.datetime(2022, 1, 21, 14, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 792677585, 'comment_body': 'Docs seems still broken. https://cupy--6089.org.readthedocs.build/en/6089/reference/generated/cupy.isposinf.html?highlight=isposinf#cupy.isposinf\r\n> Test element-wise for positive infinity, return result as bool array. :param x: Input array. :type x: cupy.ndarray\r\n\r\n', 'comment_created': datetime.datetime(2022, 1, 26, 14, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 792836353, 'comment_body': ""Hi, @kmaehashi!\r\nI think it's ok now. I used NumPy-Style formatting.\r\n\r\nThanks!"", 'comment_created': datetime.datetime(2022, 1, 26, 16, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 793742853, 'comment_body': 'This is a good finding! Raised an issue for this #6393.\r\n\r\nAs for now, please use `out=out` instead of `out` to workaround the issue.', 'comment_created': datetime.datetime(2022, 1, 27, 15, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 793818138, 'comment_body': '> This is a good finding! Raised an issue for this # 6393.\r\n\r\nThanks, @kmaehashi :)\r\n\r\n> As for now, please use out=out instead of out to workaround the issue.\r\n\r\nSure, done!', 'comment_created': datetime.datetime(2022, 1, 27, 17, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 794210649, 'comment_body': 'This seems unresolved.', 'comment_created': datetime.datetime(2022, 1, 28, 5, 22, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 794210815, 'comment_body': '`out` needs to be documented.', 'comment_created': datetime.datetime(2022, 1, 28, 5, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 794293997, 'comment_body': 'Done!', 'comment_created': datetime.datetime(2022, 1, 28, 8, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': 'f81f70786b8694cc8fd96dbcf61063b66a926a27', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '871a41f2860b31f4e917b40f0d2627dc2a8838c1', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc6e3022bce39eaa19eb71ba9255aaeaa80ad57', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7326400b41dc14fe4273a05f484d4526431684af', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc5bba2aadfefe99d1c6a72dfd0fea0f799e38a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eca5702c7d5034bfb6ce8653181eb063dc029749', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31b553befd54a4da3748ecd57e4e88fe384a3d61', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6510fa7336893c372b7842786607548e41763a78', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2e72a315a257a3bff39eddd66f33ee9c268f4fd', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e3ecb908031b538fbe6fa54ca6a6e862e021b83', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63d6289160ad9f405d2b567b0e20df898e109d72', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ae2768465fac229b7150f8e68db5d28c2717706', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065b588d9dae28199e8c3df97fbb31b25ea6ca97', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25278503da457bdca5d45b3ab821ca73e02fadd', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf36b91cbd41be9032e5eec64aabdc16cd78de5', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c93e46f8d6a5c3b7df5c879491cd20282f4ba572', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '790e5c126b65aae4cdc0dc201fefe53b62779b8f', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
779447847,Add cupy.asfarray,"Hey everyone,
CuPy is very interesting. Recently, I developed an interest in it. I'm very excited to contribute to CuPy. It is my first PR towards CuPy.

The PR is the follow-up for the https://github.com/cupy/cupy/issues/6078#issue-1051191869.

**Aim of PR**
The PR aims to implement `numpy.asfarray` function in the GPU version, i.e., to implement `cupy.asfarray`.

Thanks to @kmaehashi for sorting the issue tracker according to the difficulty level. It is helpful. I really, appreciate it.

I'm looking forward to your viewpoints. Thanks!",True,6085,https://api.github.com/repos/cupy/cupy/pulls/6085,https://github.com/cupy/cupy/pull/6085,closed,25,1,4,6,5,4,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2021-11-12 14:21:46+00:00,2021-12-03 18:00:51+00:00,1827545.0,"21 days, 3:39:05","[{'comment_id': 748733448, 'comment_body': 'Could you update the implementation so that it matches with the behavior of NumPy?\r\n\r\n* The default dtype is `numpy.float_`\r\n* If exact dtype is specified, ignore it\r\n\r\nhttps://github.com/numpy/numpy/blob/v1.21.0/numpy/lib/type_check.py#L84-L114', 'comment_created': datetime.datetime(2021, 11, 13, 15, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 748733667, 'comment_body': 'Please implement this function at: https://github.com/cupy/cupy/blob/v10.0.0rc1/cupy/_manipulation/kind.py#L5\r\n\r\nAs this function is ""Array manipulation routines > Changing kind of array"" category in NumPy reference: https://numpy.org/doc/stable/reference/routines.array-manipulation.html#changing-kind-of-array\r\n', 'comment_created': datetime.datetime(2021, 11, 13, 15, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 748733697, 'comment_body': 'Please move it to `manipulation.rst`.', 'comment_created': datetime.datetime(2021, 11, 13, 15, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}, {'comment_id': 762004574, 'comment_body': '```suggestion\r\n    .. seealso:: :func`numpy.asfarray`\r\n```', 'comment_created': datetime.datetime(2021, 12, 3, 14, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kmaehashi', 'type': 'User'}]","[{'commit_sha': '162890e594c209cda13353b65713f64be78ec5e5', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bf7b553a05bce80e04a57560dbf123319995e8', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '082f18ff7278fb5325576f7ccbee6f4cee438e93', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11172eb980baa45c4fd7c972c0d2e6f6c3c93a94', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e6a009680609db1b635bd466337bf8d417edf6', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a77b3966d7693e42f7debb3917afb0984c6ae2a5', 'committer_username': 'kmaehashi', 'committer_name': 'Kenichi Maehashi', 'committer_email': None, 'commit_date': datetime.datetime(2011, 7, 26, 15, 20, 38, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
1015437381,[interpolate] add `cupyx.scipy.interpolate.BarycentricInterpolator`,"PR adds `cupyx.scipy.interpolate.BarycentricInterpolator`! ðŸŽ‰

#### TODO
- ~optimize impl, if possible~ not possible to optimize more (currently)
- [x] add comments
- [x] more test cases

#### Short Summary
- Adds **`_Interpolator1D`** class: deals with common features for all interpolation functions (implemented in CPU, due to a smaller number of points)
    - Supports the following methods
        - *`__call__`*: use to call the next points
        - *`_prepare_x`*: change into a 1-D array
        - *`_finish_y`*: reshape to the original shape
        - *`_reshape_yi`*: reshape the updated yi values to a 1-D array
        - *`_set_yi`*: if y values are not provided, this method is used to create a y-coordinate
        - *`_set_dtype`*: sets the dtype of the newly created yi point
        - *`_evaluate`*: evaluates the polynomial, but for reasons of numerical stability, currently, it is not implemented.
 - Adds **`BarycentricInterpolator`** class: constructs polynomial
     - Supports the following methods
         - *`set_yi`*: update the next y coordinate, implemented in CPU due to smaller number of data points
         - *`add_xi`*: add the next x value to form a polynomial, implemented in CPU due to smaller number as mentioned in the paper (linked below)
         - *`__call__`*: calls the *_Interpolator1D* class to evaluate all the details of the polynomial at point x 
         - *`_evaluate`*: evaluate the polynomial, ~(Try to implement using **ElementwiseKernel**)~ *cannot use ElementwiseKernel because it contains Reduction operations*
- Adds **`barycentric_interpolate`** wrapper

**Paper**: https://people.maths.ox.ac.uk/trefethen/barycentric.pdf

#### Notes
- I think we cannot use reference testing here because both return different return types:
```python
# cupy returns
In [13]: BarycentricInterpolator(x, y)
Out[13]: <cupyx.scipy.interpolate.polyint.BarycentricInterpolator at 0x7f6e0a5935b0>

# scipy returns
In [21]: BarycentricInterpolator(x, y)
Out[21]: <scipy.interpolate.polyint.BarycentricInterpolator at 0x7f6e1288d8f0>
```

cc: @takagi! :)",True,6958,https://api.github.com/repos/cupy/cupy/pulls/6958,https://github.com/cupy/cupy/pull/6958,closed,555,0,8,20,33,43,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-08-02 18:07:25+00:00,2022-08-29 06:03:59+00:00,2289394.0,"26 days, 11:56:34","[{'comment_id': 937267905, 'comment_body': ""Let's use `astype` as `cupy.asfarray` internally uses `cupy.array`, which implicitly converts numpy array to cupy array."", 'comment_created': datetime.datetime(2022, 8, 4, 1, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937269854, 'comment_body': ""Let's remove `cupy.array` to avoid implicit numpy to cupy conversion.\r\n```suggestion\r\n        yi = cupy.moveaxis(yi, self._y_axis, 0)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 4, 1, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937282510, 'comment_body': 'Would you add `assrt not mask_ok` here?', 'comment_created': datetime.datetime(2022, 8, 4, 2, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937282619, 'comment_body': 'Also `assert not objects_ok` here?', 'comment_created': datetime.datetime(2022, 8, 4, 2, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937283091, 'comment_body': ""Let's comment out these lines as these functions implicitly make numpy to cupy conversion, and `cupy.asarray_chkfinite` makes device-to-host sync even if `a` is a cupy array as well."", 'comment_created': datetime.datetime(2022, 8, 4, 2, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937283569, 'comment_body': 'Would you use `astype` here instead of `toarray` assigned above?', 'comment_created': datetime.datetime(2022, 8, 4, 2, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937382123, 'comment_body': '```suggestion\r\n    yi : array-like, optional\r\n```', 'comment_created': datetime.datetime(2022, 8, 4, 6, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937386128, 'comment_body': ""If possible, we'd like to perform this operation without a for loop, but (batched) ndarray operations only. (as you suggested at the beginning of the project)"", 'comment_created': datetime.datetime(2022, 8, 4, 6, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937388233, 'comment_body': 'Noted your point!', 'comment_created': datetime.datetime(2022, 8, 4, 6, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 937388354, 'comment_body': 'Added', 'comment_created': datetime.datetime(2022, 8, 4, 6, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 937388407, 'comment_body': 'updated!', 'comment_created': datetime.datetime(2022, 8, 4, 6, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 937388460, 'comment_body': 'Got it. Thanks!', 'comment_created': datetime.datetime(2022, 8, 4, 6, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 938431270, 'comment_body': 'Please remove this line as it implicitly causes numpy to cupy conversion.', 'comment_created': datetime.datetime(2022, 8, 5, 4, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 938493584, 'comment_body': 'Hi, I think we need this to convert the input into an array at least at once. Otherwise, it returns a dtype object.', 'comment_created': datetime.datetime(2022, 8, 5, 6, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939761636, 'comment_body': 'I feel the tol values are large. Which dtype does this test go with?', 'comment_created': datetime.datetime(2022, 8, 8, 1, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939762180, 'comment_body': '`atol=1e-6, rtol=1e-6` does not pass with float32?', 'comment_created': datetime.datetime(2022, 8, 8, 1, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939765613, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 1, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939765918, 'comment_body': '```suggestion\r\n        # The weights for Chebyshev points against SciPy counterpart\r\n        return scp.interpolate.BarycentricInterpolator(x).wi\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 1, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939768012, 'comment_body': 'I think it makes less sense to pass `x` to the interpolator as it is constructed to pass through the points given by `x` and `y`.', 'comment_created': datetime.datetime(2022, 8, 8, 2, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939769367, 'comment_body': '`test_shapes_vectorvalue_*` do not test the shapes.', 'comment_created': datetime.datetime(2022, 8, 8, 2, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939772768, 'comment_body': ""We may use `pytest.mark.parametrize` to test some inputs in a method. Lambda expressions can be used to make cupy/numpy ndarray input lazily. (Same for test_shapes_vectorvalue and test_shapes_1d_vectorvalue)\r\n\r\n```py\r\n@pytest.mark.parametrize('input', [0, lambda xp, dtype: xp.array(0, dtype=dtype), [0], [0, 1])\r\ndef test_shapes_scalarvalue(self, xp, scp, dtype, input):\r\n    ...\r\n    if callable(input):\r\n        input = input(xp, dtype)\r\n    return xp.shape(P(input))\r\n```"", 'comment_created': datetime.datetime(2022, 8, 8, 2, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939772904, 'comment_body': 'Please use `@numpy_cupy_array_equal` as the result values are always integers.', 'comment_created': datetime.datetime(2022, 8, 8, 2, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939783252, 'comment_body': ""It's okay to make BarycentricInterpolator take only CuPy ndarrays (excluding scalars and lists).\r\n"", 'comment_created': datetime.datetime(2022, 8, 8, 2, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939783518, 'comment_body': 'ah, relating to https://github.com/cupy/cupy/pull/6958/files#r939783252 for the inputs', 'comment_created': datetime.datetime(2022, 8, 8, 2, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939785255, 'comment_body': '```suggestion\r\n    xi : cupy.ndarray\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 2, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939804683, 'comment_body': 'Okay, created another array and used that as an input.', 'comment_created': datetime.datetime(2022, 8, 8, 4, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939804738, 'comment_body': 'changed the name, since we are already testing the shapes below.', 'comment_created': datetime.datetime(2022, 8, 8, 4, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939806145, 'comment_body': 'Please change the rest of docstrings (sorry, I messed up the line)', 'comment_created': datetime.datetime(2022, 8, 8, 4, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939807702, 'comment_body': ""Sure, fixed all. Thanks!\r\n\r\n(I'll push commit after addressing all the reviews :))"", 'comment_created': datetime.datetime(2022, 8, 8, 4, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939809185, 'comment_body': 'Sure, done. Thanks!', 'comment_created': datetime.datetime(2022, 8, 8, 4, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939809752, 'comment_body': 'actually, it passes. Removed the rtol and atol values.', 'comment_created': datetime.datetime(2022, 8, 8, 4, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939895784, 'comment_body': ""Using lambda and list comprehensions sounds great to me. Thanks! :)\r\n\r\nI've updated it."", 'comment_created': datetime.datetime(2022, 8, 8, 7, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939896237, 'comment_body': 'Got that. Updated the test cases and this part. Thanks!', 'comment_created': datetime.datetime(2022, 8, 8, 7, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 941942886, 'comment_body': 'ref. #6984', 'comment_created': datetime.datetime(2022, 8, 10, 2, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 941943319, 'comment_body': 'Let me revert back to your original code.', 'comment_created': datetime.datetime(2022, 8, 10, 2, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 941943365, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 8, 10, 2, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 941945856, 'comment_body': ""Now we don't need lazy lambdas as we don't take Python scalars for test input ðŸ˜… "", 'comment_created': datetime.datetime(2022, 8, 10, 2, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 941988376, 'comment_body': 'Thanks! It is nice.', 'comment_created': datetime.datetime(2022, 8, 10, 3, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 941989506, 'comment_body': 'Yeah ðŸ˜‡', 'comment_created': datetime.datetime(2022, 8, 10, 3, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 942040159, 'comment_body': ""nit: shouldn't we just do this?\r\n```suggestion\r\n        return super().__call__(x)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 10, 5, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 942044288, 'comment_body': ""Hi, @leofang! Thanks for your input! It works fine. I'll update it.\r\n\r\n**EDIT**: updated."", 'comment_created': datetime.datetime(2022, 8, 10, 5, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 942172535, 'comment_body': 'The CI failure in test_large_chebyshev is because of scipy\'s bug fixed at https://github.com/scipy/scipy/pull/14255. We can only test it with scipy>=1.8.0.\r\n\r\n```suggestion\r\n    @testing.with_requires(""scipy>=1.8.0"")\r\n    def test_large_chebyshev(self, xp, scp, dtype):\r\n```', 'comment_created': datetime.datetime(2022, 8, 10, 8, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 942190882, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 8, 10, 8, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': 'a7cdcbe3a88b75a564df5cda981d059c2aea0036', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3582047ee6701aa5463e37c245e4e448a1bc69', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9762f069cb6309916f01448d7f6ed5c93b56e719', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc3258217f5f1ec2d0a81dd53afb7271b1708e47', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc32b14b2c319006b58c6ce34fdcc1fbdfc5e614', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d0ce505d94604a4089989ce104009fdd3c85bb', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00c71c27f9e890ab53f6485df7e79f028c252cf7', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4469e81e4e8a27621bb45db8a5afee559c78fb0', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c53a3c5db967d5694532f7e453eef1266f73c5e', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de11080a5555e964fd825ca72147b15e38351ff1', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ac785682c7b36abeb5a8c02dfe92cec90c2eb0c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef46c854a0b673605ac8ba1f91dba6f0c57885a5', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72af0b2d52bdaf374f7fa98b9d9568c02262c2ec', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9120c266dc11385e255b396221902fcedb82fc0d', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd531dacc7e1aebea394eae36bc5ec1ff4d2966c9', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86c371bf46fb2fc6a8895d604cbb8f0a7d590d54', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfec3ddc64cfed52d2c778e096093f0daa78ed3', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a502adf9cf3ede646654135746348990eb0b2f3', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a220bd77062f677c28390a0c210818b6113c1f', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a8a1a21f246d04f2d25c3af4a9ffd7590e3886', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
1015437381,[interpolate] add `cupyx.scipy.interpolate.BarycentricInterpolator`,"PR adds `cupyx.scipy.interpolate.BarycentricInterpolator`! ðŸŽ‰

#### TODO
- ~optimize impl, if possible~ not possible to optimize more (currently)
- [x] add comments
- [x] more test cases

#### Short Summary
- Adds **`_Interpolator1D`** class: deals with common features for all interpolation functions (implemented in CPU, due to a smaller number of points)
    - Supports the following methods
        - *`__call__`*: use to call the next points
        - *`_prepare_x`*: change into a 1-D array
        - *`_finish_y`*: reshape to the original shape
        - *`_reshape_yi`*: reshape the updated yi values to a 1-D array
        - *`_set_yi`*: if y values are not provided, this method is used to create a y-coordinate
        - *`_set_dtype`*: sets the dtype of the newly created yi point
        - *`_evaluate`*: evaluates the polynomial, but for reasons of numerical stability, currently, it is not implemented.
 - Adds **`BarycentricInterpolator`** class: constructs polynomial
     - Supports the following methods
         - *`set_yi`*: update the next y coordinate, implemented in CPU due to smaller number of data points
         - *`add_xi`*: add the next x value to form a polynomial, implemented in CPU due to smaller number as mentioned in the paper (linked below)
         - *`__call__`*: calls the *_Interpolator1D* class to evaluate all the details of the polynomial at point x 
         - *`_evaluate`*: evaluate the polynomial, ~(Try to implement using **ElementwiseKernel**)~ *cannot use ElementwiseKernel because it contains Reduction operations*
- Adds **`barycentric_interpolate`** wrapper

**Paper**: https://people.maths.ox.ac.uk/trefethen/barycentric.pdf

#### Notes
- I think we cannot use reference testing here because both return different return types:
```python
# cupy returns
In [13]: BarycentricInterpolator(x, y)
Out[13]: <cupyx.scipy.interpolate.polyint.BarycentricInterpolator at 0x7f6e0a5935b0>

# scipy returns
In [21]: BarycentricInterpolator(x, y)
Out[21]: <scipy.interpolate.polyint.BarycentricInterpolator at 0x7f6e1288d8f0>
```

cc: @takagi! :)",True,6958,https://api.github.com/repos/cupy/cupy/pulls/6958,https://github.com/cupy/cupy/pull/6958,closed,555,0,8,20,33,43,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-08-02 18:07:25+00:00,2022-08-29 06:03:59+00:00,2289394.0,"26 days, 11:56:34","[{'comment_id': 937267905, 'comment_body': ""Let's use `astype` as `cupy.asfarray` internally uses `cupy.array`, which implicitly converts numpy array to cupy array."", 'comment_created': datetime.datetime(2022, 8, 4, 1, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937269854, 'comment_body': ""Let's remove `cupy.array` to avoid implicit numpy to cupy conversion.\r\n```suggestion\r\n        yi = cupy.moveaxis(yi, self._y_axis, 0)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 4, 1, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937282510, 'comment_body': 'Would you add `assrt not mask_ok` here?', 'comment_created': datetime.datetime(2022, 8, 4, 2, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937282619, 'comment_body': 'Also `assert not objects_ok` here?', 'comment_created': datetime.datetime(2022, 8, 4, 2, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937283091, 'comment_body': ""Let's comment out these lines as these functions implicitly make numpy to cupy conversion, and `cupy.asarray_chkfinite` makes device-to-host sync even if `a` is a cupy array as well."", 'comment_created': datetime.datetime(2022, 8, 4, 2, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937283569, 'comment_body': 'Would you use `astype` here instead of `toarray` assigned above?', 'comment_created': datetime.datetime(2022, 8, 4, 2, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937382123, 'comment_body': '```suggestion\r\n    yi : array-like, optional\r\n```', 'comment_created': datetime.datetime(2022, 8, 4, 6, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937386128, 'comment_body': ""If possible, we'd like to perform this operation without a for loop, but (batched) ndarray operations only. (as you suggested at the beginning of the project)"", 'comment_created': datetime.datetime(2022, 8, 4, 6, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 937388233, 'comment_body': 'Noted your point!', 'comment_created': datetime.datetime(2022, 8, 4, 6, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 937388354, 'comment_body': 'Added', 'comment_created': datetime.datetime(2022, 8, 4, 6, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 937388407, 'comment_body': 'updated!', 'comment_created': datetime.datetime(2022, 8, 4, 6, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 937388460, 'comment_body': 'Got it. Thanks!', 'comment_created': datetime.datetime(2022, 8, 4, 6, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 938431270, 'comment_body': 'Please remove this line as it implicitly causes numpy to cupy conversion.', 'comment_created': datetime.datetime(2022, 8, 5, 4, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 938493584, 'comment_body': 'Hi, I think we need this to convert the input into an array at least at once. Otherwise, it returns a dtype object.', 'comment_created': datetime.datetime(2022, 8, 5, 6, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939761636, 'comment_body': 'I feel the tol values are large. Which dtype does this test go with?', 'comment_created': datetime.datetime(2022, 8, 8, 1, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939762180, 'comment_body': '`atol=1e-6, rtol=1e-6` does not pass with float32?', 'comment_created': datetime.datetime(2022, 8, 8, 1, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939765613, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 1, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939765918, 'comment_body': '```suggestion\r\n        # The weights for Chebyshev points against SciPy counterpart\r\n        return scp.interpolate.BarycentricInterpolator(x).wi\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 1, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939768012, 'comment_body': 'I think it makes less sense to pass `x` to the interpolator as it is constructed to pass through the points given by `x` and `y`.', 'comment_created': datetime.datetime(2022, 8, 8, 2, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939769367, 'comment_body': '`test_shapes_vectorvalue_*` do not test the shapes.', 'comment_created': datetime.datetime(2022, 8, 8, 2, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939772768, 'comment_body': ""We may use `pytest.mark.parametrize` to test some inputs in a method. Lambda expressions can be used to make cupy/numpy ndarray input lazily. (Same for test_shapes_vectorvalue and test_shapes_1d_vectorvalue)\r\n\r\n```py\r\n@pytest.mark.parametrize('input', [0, lambda xp, dtype: xp.array(0, dtype=dtype), [0], [0, 1])\r\ndef test_shapes_scalarvalue(self, xp, scp, dtype, input):\r\n    ...\r\n    if callable(input):\r\n        input = input(xp, dtype)\r\n    return xp.shape(P(input))\r\n```"", 'comment_created': datetime.datetime(2022, 8, 8, 2, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939772904, 'comment_body': 'Please use `@numpy_cupy_array_equal` as the result values are always integers.', 'comment_created': datetime.datetime(2022, 8, 8, 2, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939783252, 'comment_body': ""It's okay to make BarycentricInterpolator take only CuPy ndarrays (excluding scalars and lists).\r\n"", 'comment_created': datetime.datetime(2022, 8, 8, 2, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939783518, 'comment_body': 'ah, relating to https://github.com/cupy/cupy/pull/6958/files#r939783252 for the inputs', 'comment_created': datetime.datetime(2022, 8, 8, 2, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939785255, 'comment_body': '```suggestion\r\n    xi : cupy.ndarray\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 2, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939804683, 'comment_body': 'Okay, created another array and used that as an input.', 'comment_created': datetime.datetime(2022, 8, 8, 4, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939804738, 'comment_body': 'changed the name, since we are already testing the shapes below.', 'comment_created': datetime.datetime(2022, 8, 8, 4, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939806145, 'comment_body': 'Please change the rest of docstrings (sorry, I messed up the line)', 'comment_created': datetime.datetime(2022, 8, 8, 4, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939807702, 'comment_body': ""Sure, fixed all. Thanks!\r\n\r\n(I'll push commit after addressing all the reviews :))"", 'comment_created': datetime.datetime(2022, 8, 8, 4, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939809185, 'comment_body': 'Sure, done. Thanks!', 'comment_created': datetime.datetime(2022, 8, 8, 4, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939809752, 'comment_body': 'actually, it passes. Removed the rtol and atol values.', 'comment_created': datetime.datetime(2022, 8, 8, 4, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939895784, 'comment_body': ""Using lambda and list comprehensions sounds great to me. Thanks! :)\r\n\r\nI've updated it."", 'comment_created': datetime.datetime(2022, 8, 8, 7, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939896237, 'comment_body': 'Got that. Updated the test cases and this part. Thanks!', 'comment_created': datetime.datetime(2022, 8, 8, 7, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 941942886, 'comment_body': 'ref. #6984', 'comment_created': datetime.datetime(2022, 8, 10, 2, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 941943319, 'comment_body': 'Let me revert back to your original code.', 'comment_created': datetime.datetime(2022, 8, 10, 2, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 941943365, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 8, 10, 2, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 941945856, 'comment_body': ""Now we don't need lazy lambdas as we don't take Python scalars for test input ðŸ˜… "", 'comment_created': datetime.datetime(2022, 8, 10, 2, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 941988376, 'comment_body': 'Thanks! It is nice.', 'comment_created': datetime.datetime(2022, 8, 10, 3, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 941989506, 'comment_body': 'Yeah ðŸ˜‡', 'comment_created': datetime.datetime(2022, 8, 10, 3, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 942040159, 'comment_body': ""nit: shouldn't we just do this?\r\n```suggestion\r\n        return super().__call__(x)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 10, 5, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'leofang', 'type': 'User'}, {'comment_id': 942044288, 'comment_body': ""Hi, @leofang! Thanks for your input! It works fine. I'll update it.\r\n\r\n**EDIT**: updated."", 'comment_created': datetime.datetime(2022, 8, 10, 5, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 942172535, 'comment_body': 'The CI failure in test_large_chebyshev is because of scipy\'s bug fixed at https://github.com/scipy/scipy/pull/14255. We can only test it with scipy>=1.8.0.\r\n\r\n```suggestion\r\n    @testing.with_requires(""scipy>=1.8.0"")\r\n    def test_large_chebyshev(self, xp, scp, dtype):\r\n```', 'comment_created': datetime.datetime(2022, 8, 10, 8, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 942190882, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 8, 10, 8, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': 'a7cdcbe3a88b75a564df5cda981d059c2aea0036', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc3582047ee6701aa5463e37c245e4e448a1bc69', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9762f069cb6309916f01448d7f6ed5c93b56e719', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc3258217f5f1ec2d0a81dd53afb7271b1708e47', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc32b14b2c319006b58c6ce34fdcc1fbdfc5e614', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d0ce505d94604a4089989ce104009fdd3c85bb', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00c71c27f9e890ab53f6485df7e79f028c252cf7', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4469e81e4e8a27621bb45db8a5afee559c78fb0', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c53a3c5db967d5694532f7e453eef1266f73c5e', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de11080a5555e964fd825ca72147b15e38351ff1', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ac785682c7b36abeb5a8c02dfe92cec90c2eb0c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef46c854a0b673605ac8ba1f91dba6f0c57885a5', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72af0b2d52bdaf374f7fa98b9d9568c02262c2ec', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9120c266dc11385e255b396221902fcedb82fc0d', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd531dacc7e1aebea394eae36bc5ec1ff4d2966c9', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86c371bf46fb2fc6a8895d604cbb8f0a7d590d54', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfec3ddc64cfed52d2c778e096093f0daa78ed3', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a502adf9cf3ede646654135746348990eb0b2f3', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67a220bd77062f677c28390a0c210818b6113c1f', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a8a1a21f246d04f2d25c3af4a9ffd7590e3886', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
1026325293,[interpolate] add `cupyx.scipy.interpolate.KroghInterpolator`,"PR adds `cupyx.scipy.interpolate.KroghInterpolator`!!
- Adds **`_Interpolator1DWithDerivatives`** class
- Adds **`KroghInterpolator`** class
- Adds **`krogh_interpolate`** wrapper
#### TODO
- [x] add benchmarks
- [x] Update description and TODOs later tonight",True,6990,https://api.github.com/repos/cupy/cupy/pulls/6990,https://github.com/cupy/cupy/pull/6990,closed,430,3,5,13,10,34,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-08-15 11:17:33+00:00,2022-09-02 08:44:41+00:00,1546028.0,"17 days, 21:27:08","[{'comment_id': 954436708, 'comment_body': 'Maybe building doc fails because of this.\r\n```suggestion\r\n        Parameters\r\n```', 'comment_created': datetime.datetime(2022, 8, 25, 2, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954456058, 'comment_body': 'Oops ðŸ˜…', 'comment_created': datetime.datetime(2022, 8, 25, 2, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954465384, 'comment_body': 'Using the same x-coordinates with `xs` to evaluate makes less sense as the interpolator constructs a polynomial that passes through the known points.', 'comment_created': datetime.datetime(2022, 8, 25, 3, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954466602, 'comment_body': 'All signed and unsigned integer dtypes need to be skipped?', 'comment_created': datetime.datetime(2022, 8, 25, 3, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954467536, 'comment_body': 'ditto https://github.com/cupy/cupy/pull/6990#discussion_r954466602', 'comment_created': datetime.datetime(2022, 8, 25, 3, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954467986, 'comment_body': ""tol of `1e-6` doesn't pass?"", 'comment_created': datetime.datetime(2022, 8, 25, 3, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954469265, 'comment_body': 'ditto https://github.com/cupy/cupy/pull/6990#discussion_r954466602', 'comment_created': datetime.datetime(2022, 8, 25, 3, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954472517, 'comment_body': '~What is the meaning of `der=len(xs) + 2` that you test here?~', 'comment_created': datetime.datetime(2022, 8, 25, 3, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954473197, 'comment_body': 'Seems testing (10-1)th derivative for the polynomial makes less sense as it contains only zeros. I think the polynomial has fifth degree at most as it has five known points.', 'comment_created': datetime.datetime(2022, 8, 25, 3, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954473535, 'comment_body': 'ditto https://github.com/cupy/cupy/pull/6990#discussion_r954466602', 'comment_created': datetime.datetime(2022, 8, 25, 3, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954474150, 'comment_body': '~What is the meaning of `der=2 * len(xs)` that you test here?~', 'comment_created': datetime.datetime(2022, 8, 25, 3, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954476652, 'comment_body': ""No complex is okay here.\r\n```suggestion\r\n    @testing.for_dtypes('bhilfd')\r\n```"", 'comment_created': datetime.datetime(2022, 8, 25, 3, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954507442, 'comment_body': 'ah, the number of derivatives and the number of given points seem to matter in Hermite interpolation.', 'comment_created': datetime.datetime(2022, 8, 25, 5, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954507780, 'comment_body': 'same as https://github.com/cupy/cupy/pull/6990#discussion_r954507442', 'comment_created': datetime.datetime(2022, 8, 25, 5, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954520827, 'comment_body': 'Yes, we need this.', 'comment_created': datetime.datetime(2022, 8, 25, 5, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954526725, 'comment_body': 'Looks like SciPy tests each derivative from 0th to (10-1)th. You may return a list of each derivative to test the same using `numpy_cupy_allclose`, which accepts a list of ndarray.\r\n\r\nhttps://github.com/scipy/scipy/blob/651a9b717deb68adde9416072c1e1d5aa14a58a1/scipy/interpolate/tests/test_polyint.py#L185-L190', 'comment_created': datetime.datetime(2022, 8, 25, 5, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954542933, 'comment_body': ""Although I know SciPy tests the same in `test_hermite` and `test_lagrange`, I want to have a test of Hermite interpolation here, that is, want to give some derivative value as well as observed value to construct the interpolator.\r\n\r\nSciPy's KroghInterpolator.derivatives() has a clear example to give derivatives to construct an interpolator, where observed(0th), 1th, and 2nd values at x = 0 are given.\r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.KroghInterpolator.derivatives.html#scipy.interpolate.KroghInterpolator.derivatives"", 'comment_created': datetime.datetime(2022, 8, 25, 6, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954543104, 'comment_body': 'Yes, seems like it.', 'comment_created': datetime.datetime(2022, 8, 25, 6, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954543499, 'comment_body': 'Okay, thanks!', 'comment_created': datetime.datetime(2022, 8, 25, 6, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954544511, 'comment_body': 'Signed integers pass the test on my local. Would you also give it a try?', 'comment_created': datetime.datetime(2022, 8, 25, 6, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954546098, 'comment_body': 'Oo yes, you are right. Will update this.', 'comment_created': datetime.datetime(2022, 8, 25, 6, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954856571, 'comment_body': 'updated, thanks!', 'comment_created': datetime.datetime(2022, 8, 25, 11, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954856930, 'comment_body': 'Interesting! Added these cases. Thanks for letting me know :)', 'comment_created': datetime.datetime(2022, 8, 25, 11, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954857292, 'comment_body': 'Sounds reasonable. Fixed!', 'comment_created': datetime.datetime(2022, 8, 25, 11, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954857762, 'comment_body': 'that passes, updated the test.', 'comment_created': datetime.datetime(2022, 8, 25, 11, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954858910, 'comment_body': ""Agreed with you! I've updated the tests. Is that okay now? Thanks!"", 'comment_created': datetime.datetime(2022, 8, 25, 11, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 956537260, 'comment_body': 'This returns only the result of the first loop, i == 0. Please consider the following:\r\n```suggestion\r\n        return [P.derivative(test_xs, i) for i in range(m)]\r\n```', 'comment_created': datetime.datetime(2022, 8, 27, 4, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956537996, 'comment_body': 'Following https://github.com/cupy/cupy/pull/6990#discussion_r954856930. To construct the polynomial with some derivative value, you should change `xs` and `ys` to pass it. \r\n\r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.KroghInterpolator.html\r\n> yi : array_like\r\n>     Known y-coordinates. When an xi occurs two or more times in a row, the corresponding yiâ€™s represent derivative values.', 'comment_created': datetime.datetime(2022, 8, 27, 4, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956542569, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 8, 27, 5, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 956778517, 'comment_body': 'Hi, I understand this and improved my impl pointing to the 0th derivative (xi) at positions 1st, 2nd, and 3rd.\r\n```python\r\ndef func():\r\n    xs = xp.array([0, 0, 0], dtype=dtype)\r\n    ys = xp.array([1, 2, 3], dtype=dtype)\r\n    P = scp.interpolate.KroghInterpolator(xs, ys)\r\n    return P.derivatives(0)\r\n```\r\nI think this is the same one you meant!?\r\n\r\nMaybe we\'ll have to change a bit in the `_Interpolator` class. Currently getting:\r\n<details>\r\n<summary>error log</summary>\r\n\r\n<p>\r\n\r\n```python\r\nE           AssertionError: Only cupy raises error\r\nE           \r\nE           Traceback (most recent call last):\r\nE             File ""/home/khushi/Documents/cupy/cupy/testing/_loops.py"", line 45, in _call_func\r\nE               result = impl(*args, **kw)\r\nE             File ""/home/khushi/Documents/cupy/tests/cupyx_tests/scipy_tests/interpolate_tests/test_polyint.py"", line 119, in test_hermite_derivative1\r\nE               return P.derivatives(0)\r\nE             File ""/home/khushi/Documents/cupy/cupyx/scipy/interpolate/_polyint.py"", line 160, in derivatives\r\nE               x, x_shape = self._prepare_x(x)\r\nE             File ""/home/khushi/Documents/cupy/cupyx/scipy/interpolate/_polyint.py"", line 81, in _prepare_x\r\nE               x = _asarray_validated(x, check_finite=False, as_inexact=True)\r\nE             File ""/home/khushi/Documents/cupy/cupyx/scipy/_lib/_util.py"", line 69, in _asarray_validated\r\nE               if not cupy.issubdtype(a, cupy.inexact):\r\nE             File ""/home/khushi/anaconda3/envs/cupy-dev/lib/python3.10/site-packages/numpy/core/numerictypes.py"", line 416, in issubdtype\r\nE               arg1 = dtype(arg1).type\r\nE           TypeError: Cannot interpret \'0\' as a data type\r\n```\r\n\r\n</p>\r\n</details>\r\n', 'comment_created': datetime.datetime(2022, 8, 28, 20, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 956832142, 'comment_body': ""The values of `xs` and `ys` are okay. (btw, you're setting 0th, 1st, and 2nd derivatives at the point x = 0)\r\n\r\nI think testing evaluated values at points given by `linspace` is better as your `test_hermite` does, instead of testing derivatives at a single point that is the same as the known one (x = 0).\r\n\r\n```py\r\ndef func():\r\n    xs = xp.array([0, 0, 0], dtype=dtype)\r\n    ys = xp.array([1, 2, 3], dtype=dtype)\r\n    P = scp.interpolate.KroghInterpolator(xs, ys)\r\n    test_xs = xp.linspace(-5, 5, 5, dtype=dtype)\r\n    D = P(test_xs)\r\n    return D\r\n```\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 29, 1, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956834518, 'comment_body': '(The error you saw is because of that you passed a Python scalar. We assume derivatives() takes cupy ndarrays.)', 'comment_created': datetime.datetime(2022, 8, 29, 1, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956837083, 'comment_body': ""I think `test_hermite_derivative1` is enough, and we don't need to have this."", 'comment_created': datetime.datetime(2022, 8, 29, 2, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956854989, 'comment_body': '> The error you saw is because of that you passed a Python scalar. We assume derivatives() takes cupy ndarrays.\r\n\r\nahh, yes! My bad.\r\n\r\nThanks, updated it.', 'comment_created': datetime.datetime(2022, 8, 29, 2, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': '863a2230dcbc5e17a7a62bf2adf5b69a71010c35', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fcf5f6c062f8920d0f2178a3b110c5063bcca97', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63e617eab6280f3223de2fd0473f0eef0708fb1e', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea1de3332bfa53c19d69f31e2fe8234434df7c52', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2bf925da70324d53bd539e4fb133a0a52f988a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4504ed5b915a2db63ebc26102bd0a15bd1c94a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73276eaf09b97123f6fd21d3668fdff66375e7c7', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90a224ac8bbf749c57947899e1a8bc2ca8f2d06', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '177122c38a8192fb6091e57af8744889308e9114', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '573bde643499ecd86d0154809c7e1fcae43c9282', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7674467685e8d3936acdaf105eb8a6e18e82acb8', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeadd9bb8779b43c4de3eae6951e9368044d96d0', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9af9bc419722b1840e3bd566ae597f6b29ce0e3c', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
1026325293,[interpolate] add `cupyx.scipy.interpolate.KroghInterpolator`,"PR adds `cupyx.scipy.interpolate.KroghInterpolator`!!
- Adds **`_Interpolator1DWithDerivatives`** class
- Adds **`KroghInterpolator`** class
- Adds **`krogh_interpolate`** wrapper
#### TODO
- [x] add benchmarks
- [x] Update description and TODOs later tonight",True,6990,https://api.github.com/repos/cupy/cupy/pulls/6990,https://github.com/cupy/cupy/pull/6990,closed,430,3,5,13,10,34,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-08-15 11:17:33+00:00,2022-09-02 08:44:41+00:00,1546028.0,"17 days, 21:27:08","[{'comment_id': 954436708, 'comment_body': 'Maybe building doc fails because of this.\r\n```suggestion\r\n        Parameters\r\n```', 'comment_created': datetime.datetime(2022, 8, 25, 2, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954456058, 'comment_body': 'Oops ðŸ˜…', 'comment_created': datetime.datetime(2022, 8, 25, 2, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954465384, 'comment_body': 'Using the same x-coordinates with `xs` to evaluate makes less sense as the interpolator constructs a polynomial that passes through the known points.', 'comment_created': datetime.datetime(2022, 8, 25, 3, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954466602, 'comment_body': 'All signed and unsigned integer dtypes need to be skipped?', 'comment_created': datetime.datetime(2022, 8, 25, 3, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954467536, 'comment_body': 'ditto https://github.com/cupy/cupy/pull/6990#discussion_r954466602', 'comment_created': datetime.datetime(2022, 8, 25, 3, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954467986, 'comment_body': ""tol of `1e-6` doesn't pass?"", 'comment_created': datetime.datetime(2022, 8, 25, 3, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954469265, 'comment_body': 'ditto https://github.com/cupy/cupy/pull/6990#discussion_r954466602', 'comment_created': datetime.datetime(2022, 8, 25, 3, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954472517, 'comment_body': '~What is the meaning of `der=len(xs) + 2` that you test here?~', 'comment_created': datetime.datetime(2022, 8, 25, 3, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954473197, 'comment_body': 'Seems testing (10-1)th derivative for the polynomial makes less sense as it contains only zeros. I think the polynomial has fifth degree at most as it has five known points.', 'comment_created': datetime.datetime(2022, 8, 25, 3, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954473535, 'comment_body': 'ditto https://github.com/cupy/cupy/pull/6990#discussion_r954466602', 'comment_created': datetime.datetime(2022, 8, 25, 3, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954474150, 'comment_body': '~What is the meaning of `der=2 * len(xs)` that you test here?~', 'comment_created': datetime.datetime(2022, 8, 25, 3, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954476652, 'comment_body': ""No complex is okay here.\r\n```suggestion\r\n    @testing.for_dtypes('bhilfd')\r\n```"", 'comment_created': datetime.datetime(2022, 8, 25, 3, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954507442, 'comment_body': 'ah, the number of derivatives and the number of given points seem to matter in Hermite interpolation.', 'comment_created': datetime.datetime(2022, 8, 25, 5, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954507780, 'comment_body': 'same as https://github.com/cupy/cupy/pull/6990#discussion_r954507442', 'comment_created': datetime.datetime(2022, 8, 25, 5, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954520827, 'comment_body': 'Yes, we need this.', 'comment_created': datetime.datetime(2022, 8, 25, 5, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954526725, 'comment_body': 'Looks like SciPy tests each derivative from 0th to (10-1)th. You may return a list of each derivative to test the same using `numpy_cupy_allclose`, which accepts a list of ndarray.\r\n\r\nhttps://github.com/scipy/scipy/blob/651a9b717deb68adde9416072c1e1d5aa14a58a1/scipy/interpolate/tests/test_polyint.py#L185-L190', 'comment_created': datetime.datetime(2022, 8, 25, 5, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954542933, 'comment_body': ""Although I know SciPy tests the same in `test_hermite` and `test_lagrange`, I want to have a test of Hermite interpolation here, that is, want to give some derivative value as well as observed value to construct the interpolator.\r\n\r\nSciPy's KroghInterpolator.derivatives() has a clear example to give derivatives to construct an interpolator, where observed(0th), 1th, and 2nd values at x = 0 are given.\r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.KroghInterpolator.derivatives.html#scipy.interpolate.KroghInterpolator.derivatives"", 'comment_created': datetime.datetime(2022, 8, 25, 6, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954543104, 'comment_body': 'Yes, seems like it.', 'comment_created': datetime.datetime(2022, 8, 25, 6, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954543499, 'comment_body': 'Okay, thanks!', 'comment_created': datetime.datetime(2022, 8, 25, 6, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954544511, 'comment_body': 'Signed integers pass the test on my local. Would you also give it a try?', 'comment_created': datetime.datetime(2022, 8, 25, 6, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954546098, 'comment_body': 'Oo yes, you are right. Will update this.', 'comment_created': datetime.datetime(2022, 8, 25, 6, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954856571, 'comment_body': 'updated, thanks!', 'comment_created': datetime.datetime(2022, 8, 25, 11, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954856930, 'comment_body': 'Interesting! Added these cases. Thanks for letting me know :)', 'comment_created': datetime.datetime(2022, 8, 25, 11, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954857292, 'comment_body': 'Sounds reasonable. Fixed!', 'comment_created': datetime.datetime(2022, 8, 25, 11, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954857762, 'comment_body': 'that passes, updated the test.', 'comment_created': datetime.datetime(2022, 8, 25, 11, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 954858910, 'comment_body': ""Agreed with you! I've updated the tests. Is that okay now? Thanks!"", 'comment_created': datetime.datetime(2022, 8, 25, 11, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 956537260, 'comment_body': 'This returns only the result of the first loop, i == 0. Please consider the following:\r\n```suggestion\r\n        return [P.derivative(test_xs, i) for i in range(m)]\r\n```', 'comment_created': datetime.datetime(2022, 8, 27, 4, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956537996, 'comment_body': 'Following https://github.com/cupy/cupy/pull/6990#discussion_r954856930. To construct the polynomial with some derivative value, you should change `xs` and `ys` to pass it. \r\n\r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.KroghInterpolator.html\r\n> yi : array_like\r\n>     Known y-coordinates. When an xi occurs two or more times in a row, the corresponding yiâ€™s represent derivative values.', 'comment_created': datetime.datetime(2022, 8, 27, 4, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956542569, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 8, 27, 5, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 956778517, 'comment_body': 'Hi, I understand this and improved my impl pointing to the 0th derivative (xi) at positions 1st, 2nd, and 3rd.\r\n```python\r\ndef func():\r\n    xs = xp.array([0, 0, 0], dtype=dtype)\r\n    ys = xp.array([1, 2, 3], dtype=dtype)\r\n    P = scp.interpolate.KroghInterpolator(xs, ys)\r\n    return P.derivatives(0)\r\n```\r\nI think this is the same one you meant!?\r\n\r\nMaybe we\'ll have to change a bit in the `_Interpolator` class. Currently getting:\r\n<details>\r\n<summary>error log</summary>\r\n\r\n<p>\r\n\r\n```python\r\nE           AssertionError: Only cupy raises error\r\nE           \r\nE           Traceback (most recent call last):\r\nE             File ""/home/khushi/Documents/cupy/cupy/testing/_loops.py"", line 45, in _call_func\r\nE               result = impl(*args, **kw)\r\nE             File ""/home/khushi/Documents/cupy/tests/cupyx_tests/scipy_tests/interpolate_tests/test_polyint.py"", line 119, in test_hermite_derivative1\r\nE               return P.derivatives(0)\r\nE             File ""/home/khushi/Documents/cupy/cupyx/scipy/interpolate/_polyint.py"", line 160, in derivatives\r\nE               x, x_shape = self._prepare_x(x)\r\nE             File ""/home/khushi/Documents/cupy/cupyx/scipy/interpolate/_polyint.py"", line 81, in _prepare_x\r\nE               x = _asarray_validated(x, check_finite=False, as_inexact=True)\r\nE             File ""/home/khushi/Documents/cupy/cupyx/scipy/_lib/_util.py"", line 69, in _asarray_validated\r\nE               if not cupy.issubdtype(a, cupy.inexact):\r\nE             File ""/home/khushi/anaconda3/envs/cupy-dev/lib/python3.10/site-packages/numpy/core/numerictypes.py"", line 416, in issubdtype\r\nE               arg1 = dtype(arg1).type\r\nE           TypeError: Cannot interpret \'0\' as a data type\r\n```\r\n\r\n</p>\r\n</details>\r\n', 'comment_created': datetime.datetime(2022, 8, 28, 20, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 956832142, 'comment_body': ""The values of `xs` and `ys` are okay. (btw, you're setting 0th, 1st, and 2nd derivatives at the point x = 0)\r\n\r\nI think testing evaluated values at points given by `linspace` is better as your `test_hermite` does, instead of testing derivatives at a single point that is the same as the known one (x = 0).\r\n\r\n```py\r\ndef func():\r\n    xs = xp.array([0, 0, 0], dtype=dtype)\r\n    ys = xp.array([1, 2, 3], dtype=dtype)\r\n    P = scp.interpolate.KroghInterpolator(xs, ys)\r\n    test_xs = xp.linspace(-5, 5, 5, dtype=dtype)\r\n    D = P(test_xs)\r\n    return D\r\n```\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 29, 1, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956834518, 'comment_body': '(The error you saw is because of that you passed a Python scalar. We assume derivatives() takes cupy ndarrays.)', 'comment_created': datetime.datetime(2022, 8, 29, 1, 51, 16, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956837083, 'comment_body': ""I think `test_hermite_derivative1` is enough, and we don't need to have this."", 'comment_created': datetime.datetime(2022, 8, 29, 2, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 956854989, 'comment_body': '> The error you saw is because of that you passed a Python scalar. We assume derivatives() takes cupy ndarrays.\r\n\r\nahh, yes! My bad.\r\n\r\nThanks, updated it.', 'comment_created': datetime.datetime(2022, 8, 29, 2, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': '863a2230dcbc5e17a7a62bf2adf5b69a71010c35', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fcf5f6c062f8920d0f2178a3b110c5063bcca97', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63e617eab6280f3223de2fd0473f0eef0708fb1e', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea1de3332bfa53c19d69f31e2fe8234434df7c52', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2bf925da70324d53bd539e4fb133a0a52f988a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4504ed5b915a2db63ebc26102bd0a15bd1c94a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73276eaf09b97123f6fd21d3668fdff66375e7c7', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90a224ac8bbf749c57947899e1a8bc2ca8f2d06', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '177122c38a8192fb6091e57af8744889308e9114', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '573bde643499ecd86d0154809c7e1fcae43c9282', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7674467685e8d3936acdaf105eb8a6e18e82acb8', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeadd9bb8779b43c4de3eae6951e9368044d96d0', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9af9bc419722b1840e3bd566ae597f6b29ce0e3c', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
963184338,[special] Add `cupyx.scipy.special.log_ndtr`,"Hi,
The PR adds `cupyx.scipy.special.log_ndtr`. Thanks! :)",True,6776,https://api.github.com/repos/cupy/cupy/pulls/6776,https://github.com/cupy/cupy/pull/6776,closed,61,0,4,9,12,17,1,1,[{'name': 'cat:feature'}],2022-06-09 17:58:35+00:00,2022-06-16 10:10:39+00:00,576724.0,"6 days, 16:12:04","[{'comment_id': 893832798, 'comment_body': 'We can change this algorithm to `log(ndtr)`. But I see scipy has used this algorithm, due to numerical precision issues. Ref: https://github.com/scipy/scipy/pull/15187. Is this okay? Thanks', 'comment_created': datetime.datetime(2022, 6, 9, 18, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 896389979, 'comment_body': 'Maybe we can use `check_unary_linspace0_1`. (Looks like that `0_1` means the range of linspace from zero to one)', 'comment_created': datetime.datetime(2022, 6, 14, 5, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 896398887, 'comment_body': 'Using this formula is okay! BTW, would you also implement single precision version using `logf`, `log1pf`, `erfcf` and `erfcxf`?', 'comment_created': datetime.datetime(2022, 6, 14, 5, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 896400098, 'comment_body': 'Exactly, right! Have changed it. Thanks', 'comment_created': datetime.datetime(2022, 6, 14, 5, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 896546869, 'comment_body': 'Have updated!\r\n\r\nBut I believe we will need to use previous test cases, due to tolerance issues. Will that be good? Also, any reason you preferred the `single precision version`?\r\n\r\nEDIT: Ooo, I see. Because of performance reasons!\r\n\r\nThanks!', 'comment_created': datetime.datetime(2022, 6, 14, 8, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 897505297, 'comment_body': ""> But I believe we will need to use previous test cases, due to tolerance issues. Will that be good?\r\n\r\nSeems that `check_unary_linspace0_1`'s atol 'default' value is too strict. Would you try changing to 1e-6? (It should be also safe for other tests that use the value)\r\n\r\nhttps://github.com/cupy/cupy/blob/462d14e6ebcd4c8b2f89e12b65a92c217ebbb12f/tests/cupyx_tests/scipy_tests/special_tests/test_statistics.py#L31\r\n"", 'comment_created': datetime.datetime(2022, 6, 15, 3, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 897513459, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 6, 15, 4, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 897514147, 'comment_body': '> EDIT: Ooo, I see. Because of performance reasons!\r\n\r\nYes. Single-precision operations are generally faster on GPU. Can I ask you to implement both single-precision version and double-precision version, instead of providing single-precision version only? We want to use double-precision version when precision matters.\r\n\r\nLet me explain some of `create_ufunc`\'s parameters.\r\n\r\n```py\r\nlog_ndtr = _core.create_ufunc(\r\n    \'cupyx_scipy_special_log_ndtr\',\r\n    ((\'f->f\', \'out0 = log_ndtr(in0)\'), \'d->d\'),\r\n    \'out0 = log_ndtr(in0)\',\r\n    ...\r\n```\r\n\r\nThe second parameter specifies a list of input and output dtypes supported by the create ufunc. \'f->f\' means that it takes a float32 (single-precision) input, then returns a float32 output. \'d->d\' means that it takes a float64 (double-precision) input then returns a float64 output.\r\n\r\nThe third supplies the ""default"" operation performed by this ufunc. Why I say ""default"" is that please see the first element of the second parameter `(\'f->f\', \'out0 = log_ndtr(in0)\')`.  Here provided a tuple of strings instead of \'f->f\' only. This means that, when the input\'s dtype if float32, the second element of the tuple `\'out0 = log_ndtr(in0)\'` is used instead of the default operation. It happens to be the same as the default one in your code, but you can give a single-precision version, say, `out0 = log_ndtrf(in0)` here.\r\n', 'comment_created': datetime.datetime(2022, 6, 15, 4, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 897521053, 'comment_body': 'Interesting! Thanks, for the detailed description! ', 'comment_created': datetime.datetime(2022, 6, 15, 4, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 898613540, 'comment_body': ""Thanks! You also need to add `log_ndtrf`'s definition in `log_ndtr_definition`, and `log_ndtr` should be with `double` instead of being templated with `T`."", 'comment_created': datetime.datetime(2022, 6, 16, 1, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 898615933, 'comment_body': ""This change unexpectedly relaxes the tolerance for float64. Would you fix the definition of `atol` variable as follows?\r\n```py\r\natol = {'default': 1e-6, cupy.float64: 1e-14}\r\n```"", 'comment_created': datetime.datetime(2022, 6, 16, 1, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 898675000, 'comment_body': ""I think we won't need this. I rechecked this, it worked with the default atol tolerance = `1e-14`.\r\n\r\nEDIT: Because we explicitly defined both the versions."", 'comment_created': datetime.datetime(2022, 6, 16, 4, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 898678898, 'comment_body': 'Okay!', 'comment_created': datetime.datetime(2022, 6, 16, 4, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 898681244, 'comment_body': 'Done. Thanks!', 'comment_created': datetime.datetime(2022, 6, 16, 4, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 898686120, 'comment_body': 'Now you can eliminate this template type and replace `T` to `double` in this definition.', 'comment_created': datetime.datetime(2022, 6, 16, 4, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 898687025, 'comment_body': 'Also `T` to `float`.', 'comment_created': datetime.datetime(2022, 6, 16, 4, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 898690198, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 6, 16, 4, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': '843df3e1d7dd792c9d1c19418fa56046f8becd98', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b180cd3a85d942d26596fa761d1b2a62e585e03d', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '462d14e6ebcd4c8b2f89e12b65a92c217ebbb12f', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa714d2d499b2a9a238a98ed0551b6d3370cb01', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed671b609ce8ff6dbc3eed49641b7957713299c0', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fec9d5123279778c1d3c2facaea5c8e5e52de79c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c0bd6a2233a85e7c3077a4039d84471451cd3bf', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d603c8770ad9811f79869bed15b24f2d2d53b1', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6cbb8776e17cd9f0de89e8e8a2218108729a6d', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
981370335,[special] add `cupyx.scipy.special.log_softmax`,"PR adds `cupyx.scipy.special.log_softmax`.

Benchmarks:

size | dtype | SciPy | CuPy
-----|-------|-------|-----
1000 | float32 | 0.041 ms | 0.244 ms
1000 | float64 | 0.049 ms | 0.296 ms
100000 | float32 | 0.592 ms | 0.432 ms
100000 | float64 | 1.420 ms | 0.312 ms
1000000 | float32 | 2.369 ms | 0.314 ms
1000000 | float64 | 12.358 ms | 0.942 ms


<details>
<summary>Script (Click Please)</summary>

<p>

```python
import cupy
import cupyx

import scipy

from cupy import testing
from cupyx.profiler import benchmark


n_warmup = 1
n_repeat = 10
dtype_set = ('float32', 'float64')
n_set = (1000, 100000, 1000000)


def get_time(pref):
    cpu_time = pref.cpu_times.mean()
    gpu_time = pref.gpu_times.mean()
    return max(cpu_time, gpu_time) * 1000  # ms


def time(a):
    cp_a = cupy.array(a)
    ref = scipy.special.log_softmax(a)
    ret = cupyx.scipy.special.log_softmax(cp_a)
    times = []
    perf = benchmark(scipy.special.log_softmax, (a,),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    perf = benchmark(cupyx.scipy.special.log_softmax, (cp_a,),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    return times


print('size | dtype | SciPy | CuPy')
print('-----|-------|-------|-----')
for n in n_set:
    for dtype in dtype_set:
        a = scipy.random.randint(0, 2, size=n).astype(dtype)
        times = time(a)
        print('{} | {} | {:.3f} ms | {:.3f} ms'.format(n, dtype, times[0], times[1]))
```

</p>
</details>",True,6823,https://api.github.com/repos/cupy/cupy/pulls/6823,https://github.com/cupy/cupy/pull/6823,closed,131,2,6,13,25,27,3,1,"[{'name': 'cat:feature'}, {'name': 'to-be-backported'}, {'name': 'prio:medium'}]",2022-06-28 12:55:36+00:00,2022-07-13 13:45:19+00:00,1298983.0,"15 days, 0:49:43","[{'comment_id': 910522720, 'comment_body': ""Let's use `exp` and `log` without casting to float to make things simple at first."", 'comment_created': datetime.datetime(2022, 6, 30, 1, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 910523100, 'comment_body': 'Please use `numpy_cupy_allclose` to test floating point values with properly supplying tolerance.', 'comment_created': datetime.datetime(2022, 6, 30, 1, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 910528161, 'comment_body': ""Supplying tolerance as following would work. (though, maybe you'll have more about dtypes)\r\n\r\n```py\r\natol = {'default': 1e-6, cupy.float64: 1e-14}\r\nrtol = {'default': 1e-6, cupy.float64: 1e-14}\r\n\r\n@testing.for_all_dtypes()\r\n@testing.numpy_cupy_allclose(scipy_name='scp', atol=atol, rtol=rtol)\r\ndef test_log_softmax_large_inputs(self, xp, scp, dtype):\r\n    a = xp.arange(4, dtype=dtype)\r\n    return scp.special.log_softmax(a)\r\n```"", 'comment_created': datetime.datetime(2022, 6, 30, 1, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 910528604, 'comment_body': ""```py\r\n_log_softmax_kernel = cp._core.ReductionKernel(\r\n   'T x1',\r\n   'T y',\r\n   'exp(x1)',\r\n   'a + b',\r\n   'y = log(a)',\r\n   '0',\r\n   name='log_softmax',\r\n   preamble=_preamble\r\n)\r\n```"", 'comment_created': datetime.datetime(2022, 6, 30, 1, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 910590215, 'comment_body': 'This was my first try. But I got the compilation error saying:\r\n<details>\r\n<summary>Error Log (Click Please)</summary>\r\n\r\n<p>\r\n\r\n```python\r\n__________________________ TestLogSoftmax.test_log_softmax_large_inputs ____________________________\r\n \r\nself = <cupyx_tests.scipy_tests.special_tests.test_log_softmax.TestLogSoftmax object at 0x7f36ad3341c0>\r\nxp = <module \'cupy\' from \'/home/khushi/Documents/opensource/cupy/cupy/__init__.py\'>\r\nscp = <module \'cupyx.scipy\' from \'/home/khushi/Documents/opensource/cupy/cupyx/scipy/__init__.py\'>\r\ndtype = <class \'numpy.int8\'>\r\n \r\n    @testing.for_all_dtypes()\r\n    @testing.numpy_cupy_allclose(scipy_name=\'scp\', atol=atol, rtol=rtol)\r\n    def test_log_softmax_large_inputs(self, xp, scp, dtype):\r\n        a = xp.arange(4, dtype=dtype)\r\n>       return scp.special.log_softmax(a)\r\n \r\ntests/cupyx_tests/scipy_tests/special_tests/test_log_softmax.py:23: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\ncupyx/scipy/special/_logsumexp.py:71: in log_softmax\r\n    out = _log_softmax_kernel(tmp, axis=axis, keepdims=True)\r\ncupy/_core/_reduction.pyx:752: in cupy._core._reduction.ReductionKernel.__call__\r\n    return self._call(\r\ncupy/_core/_reduction.pyx:351: in cupy._core._reduction._AbstractReductionKernel._call\r\n    cub_success = _cub_reduction._try_to_call_cub_reduction(\r\ncupy/_core/_cub_reduction.pyx:700: in cupy._core._cub_reduction._try_to_call_cub_reduction\r\n    _launch_cub(\r\ncupy/_core/_cub_reduction.pyx:536: in cupy._core._cub_reduction._launch_cub\r\n    _cub_two_pass_launch(\r\ncupy/_core/_cub_reduction.pyx:471: in cupy._core._cub_reduction._cub_two_pass_launch\r\n    func = _SimpleCubReductionKernel_get_cached_function(\r\ncupy/_util.pyx:67: in cupy._util.memoize.decorator.ret\r\n    result = f(*args, **kwargs)\r\ncupy/_core/_cub_reduction.pyx:243: in cupy._core._cub_reduction._SimpleCubReductionKernel_get_cached_function\r\n    return _create_cub_reduction_function(\r\ncupy/_core/_cub_reduction.pyx:228: in cupy._core._cub_reduction._create_cub_reduction_function\r\n    module = compile_with_cache(\r\ncupy/_core/core.pyx:2229: in cupy._core.core.compile_with_cache\r\n    return cuda.compiler._compile_module_with_cache(\r\ncupy/cuda/compiler.py:492: in _compile_module_with_cache\r\n    return _compile_with_cache_cuda(\r\ncupy/cuda/compiler.py:570: in _compile_with_cache_cuda\r\n    ptx, mapping = compile_using_nvrtc(\r\ncupy/cuda/compiler.py:321: in compile_using_nvrtc\r\n    return _compile(source, options, cu_path,\r\ncupy/cuda/compiler.py:290: in _compile\r\n    options, headers, include_names = _jitify_prep(\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n \r\nsource = \'/tmp/tmpuzshl335/2f864f67273a7ba84b6e0cac145efadc6ae13527.cubin.cu\\n#include <cupy/complex.cuh>\\n#include <cupy/carra...ge\\n  }\\n\\n  if (_tid == 0) {\\n      type_mid_out& out0 = *(_out0 + blockIdx.x);\\n      POST_MAP(aggregate);\\n  }\\n}\\n\'\r\noptions = (\'-DFIRST_PASS=1\', \'--std=c++11\', \'-DCUPY_USE_JITIFY\', \'-I/home/khushi/Documents/opensource/cupy/cupy/_core/include\', \'-I/home/khushi/Documents/opensource/cupy/cupy/_core/include/cupy/_cuda/cuda-11\', \'-I/usr/local/cuda/include\', ...)\r\ncu_path = \'/tmp/tmpuzshl335/2f864f67273a7ba84b6e0cac145efadc6ae13527.cubin.cu\'\r\n \r\n    def _jitify_prep(source, options, cu_path):\r\n        # TODO(leofang): refactor this?\r\n        global _jitify_header_source_map_populated\r\n        if not _jitify_header_source_map_populated:\r\n            from cupy._core import core\r\n            _jitify_header_source_map = core._get_header_source_map()\r\n            _jitify_header_source_map_populated = True\r\n        else:\r\n            # this is already cached at the C++ level, so don\'t pass in anything\r\n            _jitify_header_source_map = None\r\n    \r\n        # jitify requires the 1st line to be the program name\r\n        old_source = source\r\n        source = cu_path + \'\\n\' + source\r\n    \r\n        # Upon failure, in addition to throw an error Jitify also prints the log\r\n        # to stdout. In principle we could intercept that by hijacking stdout\'s\r\n        # file descriptor (tested locally), but the problem is pytest also does\r\n        # the same thing internally, causing strange errors when running the tests.\r\n        # As a result, we currently maintain Jitify\'s default behavior for easy\r\n        # debugging, and wait for the upstream to address this issue\r\n        # (NVIDIA/jitify#79).\r\n    \r\n        try:\r\n            name, options, headers, include_names = jitify(\r\n                source, options, _jitify_header_source_map)\r\n        except Exception as e:  # C++ could throw all kinds of errors\r\n            cex = CompileException(str(e), old_source, cu_path, options, \'jitify\')\r\n            dump = _get_bool_env_variable(\r\n                \'CUPY_DUMP_CUDA_SOURCE_ON_ERROR\', False)\r\n            if dump:\r\n                cex.dump(sys.stderr)\r\n>           raise JitifyException(str(cex))\r\nE           AssertionError: Only cupy raises error\r\nE           \r\nE           Traceback (most recent call last):\r\nE             File ""/home/khushi/Documents/opensource/cupy/cupy/cuda/compiler.py"", line 255, in _jitify_prep\r\nE               name, options, headers, include_names = jitify(\r\nE             File ""cupy/cuda/jitify.pyx"", line 59, in cupy.cuda.jitify.jitify\r\nE               cpdef jitify(str code, tuple opt, dict cached_sources=None):\r\nE             File ""cupy/cuda/jitify.pyx"", line 92, in cupy.cuda.jitify.jitify\r\nE               load_program(cuda_source, headers, nullptr, &include_paths,\r\nE           RuntimeError: Runtime compilation failed\r\nE           \r\nE           During handling of the above exception, another exception occurred:\r\nE           \r\nE           Traceback (most recent call last):\r\nE             File ""/home/khushi/Documents/opensource/cupy/cupy/testing/_loops.py"", line 45, in _call_func\r\nE               result = impl(*args, **kw)\r\nE             File ""/home/khushi/Documents/opensource/cupy/tests/cupyx_tests/scipy_tests/special_tests/test_log_softmax.py"", line 23, in test_log_softmax_large_inputs\r\nE               return scp.special.log_softmax(a)\r\nE             File ""/home/khushi/Documents/opensource/cupy/cupyx/scipy/special/_logsumexp.py"", line 71, in log_softmax\r\nE               out = _log_softmax_kernel(tmp, axis=axis, keepdims=True)\r\nE             File ""cupy/_core/_reduction.pyx"", line 752, in cupy._core._reduction.ReductionKernel.__call__\r\nE               return self._call(\r\nE             File ""cupy/_core/_reduction.pyx"", line 351, in cupy._core._reduction._AbstractReductionKernel._call\r\nE               cub_success = _cub_reduction._try_to_call_cub_reduction(\r\nE             File ""cupy/_core/_cub_reduction.pyx"", line 700, in cupy._core._cub_reduction._try_to_call_cub_reduction\r\nE               _launch_cub(\r\nE             File ""cupy/_core/_cub_reduction.pyx"", line 536, in cupy._core._cub_reduction._launch_cub\r\nE               _cub_two_pass_launch(\r\nE             File ""cupy/_core/_cub_reduction.pyx"", line 471, in cupy._core._cub_reduction._cub_two_pass_launch\r\nE               func = _SimpleCubReductionKernel_get_cached_function(\r\nE             File ""cupy/_util.pyx"", line 67, in cupy._util.memoize.decorator.ret\r\nE               result = f(*args, **kwargs)\r\nE             File ""cupy/_core/_cub_reduction.pyx"", line 243, in cupy._core._cub_reduction._SimpleCubReductionKernel_get_cached_function\r\nE               return _create_cub_reduction_function(\r\nE             File ""cupy/_core/_cub_reduction.pyx"", line 228, in cupy._core._cub_reduction._create_cub_reduction_function\r\nE               module = compile_with_cache(\r\nE             File ""cupy/_core/core.pyx"", line 2229, in cupy._core.core.compile_with_cache\r\nE               return cuda.compiler._compile_module_with_cache(\r\nE             File ""/home/khushi/Documents/opensource/cupy/cupy/cuda/compiler.py"", line 492, in _compile_module_with_cache\r\nE               return _compile_with_cache_cuda(\r\nE             File ""/home/khushi/Documents/opensource/cupy/cupy/cuda/compiler.py"", line 570, in _compile_with_cache_cuda\r\nE               ptx, mapping = compile_using_nvrtc(\r\nE             File ""/home/khushi/Documents/opensource/cupy/cupy/cuda/compiler.py"", line 321, in compile_using_nvrtc\r\nE               return _compile(source, options, cu_path,\r\nE             File ""/home/khushi/Documents/opensource/cupy/cupy/cuda/compiler.py"", line 290, in _compile\r\nE               options, headers, include_names = _jitify_prep(\r\nE             File ""/home/khushi/Documents/opensource/cupy/cupy/cuda/compiler.py"", line 263, in _jitify_prep\r\nE               raise JitifyException(str(cex))\r\nE           cupy.cuda.compiler.JitifyException: Runtime compilation failed\r\n \r\ncupy/cuda/compiler.py:263: AssertionError\r\n--------------------------------------- Captured stdout call ----------------------------------------\r\n---------------------------------------------------\r\n--- JIT compile log for /tmp/tmpuzshl335/2f864f67273a7ba84b6e0cac145efadc6ae13527.cubin.cu ---\r\n---------------------------------------------------\r\ncupy/complex/complex.h(94): warning: __device__ annotation is ignored on a function(""complex"") that is explicitly defaulted on its first declaration\r\n \r\ncupy/complex/complex.h(101): warning: __device__ annotation is ignored on a function(""complex"") that is explicitly defaulted on its first declaration\r\n \r\nspecializations/block_reduce_raking_commutative_only.cuh(98): warning: declaration does not declare anything\r\n \r\n/tmp/tmpuzshl335/2f864f67273a7ba84b6e0cac145efadc6ae13527.cubin.cu(134): error: more than one instance of overloaded function ""exp"" matches the argument list:\r\n            function ""exp(double)""\r\n__nv_nvrtc_builtin_header.h(149892): here\r\n            function ""exp(float)""\r\n__nv_nvrtc_builtin_header.h(150793): here\r\n            argument types are: (const type_mid_in)\r\n \r\n/tmp/tmpuzshl335/2f864f67273a7ba84b6e0cac145efadc6ae13527.cubin.cu(127): warning: variable ""_J"" was declared but never referenced\r\n \r\n1 error detected in the compilation of ""/tmp/tmpuzshl335/2f864f67273a7ba84b6e0cac145efadc6ae13527.cubin.cu"".\r\n \r\n---------------------------------------------------\r\ndtype is <class \'numpy.int8\'>\r\n```\r\n\r\n</p>\r\n</details>', 'comment_created': datetime.datetime(2022, 6, 30, 4, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 910594984, 'comment_body': ""It's because T is integer type (`char` from numpy.int8) here, so the compiler couldn't find `exp(char)`. Would you begin to try suppling float32 and float64 values? `@for_dtypes('fd')` in test instead of `@for_all_dtypes()`. Also related to https://github.com/cupy/cupy/pull/6823#issuecomment-1170645216 ."", 'comment_created': datetime.datetime(2022, 6, 30, 4, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 910614151, 'comment_body': 'Updated! Thanks :)', 'comment_created': datetime.datetime(2022, 6, 30, 5, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 910614262, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 30, 5, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 911054550, 'comment_body': 'nit: We conventionally use names that begin with an underscore for private things instead of `__all__` variable. Would you remove this line?', 'comment_created': datetime.datetime(2022, 6, 30, 13, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 911454234, 'comment_body': ""Thanks for sharing. I've removed that line :)"", 'comment_created': datetime.datetime(2022, 6, 30, 21, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 911552467, 'comment_body': ""Would you get these decorators back to test all dtypes? `@testing.for_all_dtypes(no_bool=True)`\r\n\r\nSeems that SciPy's does not support boolean arrays for inputs, so `no_bool=True` option is set."", 'comment_created': datetime.datetime(2022, 7, 1, 1, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 911627966, 'comment_body': 'You may add `cupy.float16: 1e-4` for float16, which generally has very low precision. (The value `1e-4` may vary. Please adjust it.)', 'comment_created': datetime.datetime(2022, 7, 1, 5, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 911749804, 'comment_body': 'Have updated the PR according to our offline discussions. Thanks a ton for your input and time :)', 'comment_created': datetime.datetime(2022, 7, 1, 8, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 911750346, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2022, 7, 1, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 915382936, 'comment_body': 'Let me try including cfloat as the latest CUDA includes it in the corresponding thrust header instead of `math_private.h`.', 'comment_created': datetime.datetime(2022, 7, 7, 1, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 915448665, 'comment_body': 'Okay, thanks!', 'comment_created': datetime.datetime(2022, 7, 7, 4, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 917547712, 'comment_body': ""Would you try the following works?\r\n```py\r\nif tmp.dtype.kind == 'i':\r\n    for out_dtype in [cp.float16, cp.float32, cp.float64]:\r\n        if cp.can_cast(tmp, out_dtype):\r\n            tmp = tmp.astype(out_dtype)\r\n            break\r\n```"", 'comment_created': datetime.datetime(2022, 7, 11, 5, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 917592520, 'comment_body': 'Hi! this doesn\'t work, we are getting same compilation error as before due to type casting.\r\n<details>\r\n<summary>Error Log (Click Please)</summary>\r\n\r\n<p>\r\n\r\n```python\r\nraise CompileException(log, self.src, self.name, options,\r\ncupy.cuda.compiler.CompileException: /tmp/tmpfknvsv0g/62e007c5affa579869ad99dfafae15f1f2ec15aa.cubin.cu(34): error: more than one instance of overloaded function ""exp"" matches the argument list:\r\n            function ""exp(double)""\r\n__nv_nvrtc_builtin_header.h(149892): here\r\n            function ""exp(float)""\r\n__nv_nvrtc_builtin_header.h(150793): here\r\n            argument types are: (const T)\r\n\r\n/tmp/tmpfknvsv0g/62e007c5affa579869ad99dfafae15f1f2ec15aa.cubin.cu(52): error: more than one instance of overloaded function ""log"" matches the argument list:\r\n            function ""log(double)""\r\n__nv_nvrtc_builtin_header.h(149880): here\r\n            function ""log(float)""\r\n__nv_nvrtc_builtin_header.h(150789): here\r\n            argument types are: (_type_reduce)\r\n```\r\n\r\n</p>\r\n</details>', 'comment_created': datetime.datetime(2022, 7, 11, 6, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 917613920, 'comment_body': ""I missed the first line...\r\n\r\n```py\r\nif tmp.dtype.kind in 'iu':\r\n    for out_dtype in [cp.float16, cp.float32, cp.float64]:\r\n        if cp.can_cast(tmp, out_dtype):\r\n            tmp = tmp.astype(out_dtype)\r\n            break\r\n```"", 'comment_created': datetime.datetime(2022, 7, 11, 7, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 917659269, 'comment_body': 'Works fine. Thanks', 'comment_created': datetime.datetime(2022, 7, 11, 8, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 919637761, 'comment_body': ""Please properly adjust the input to avoid the overflow warning. I think `arange(1)` makes no sense as a test, and maybe `shaped_random` with properly scaled would work. (Also see the default value of `shaped_random`'s `scale` parameter)"", 'comment_created': datetime.datetime(2022, 7, 13, 4, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 919643616, 'comment_body': 'Even `np.exp(20)` makes inf in float16.\r\n```\r\n>>> np.exp(np.linspace(0, 100, num=10, dtype=np.int8))\r\narray([1.000e+00, 5.987e+04,       inf,       inf,       inf,       inf,\r\n             inf,       inf,       inf,       inf], dtype=float16)\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 13, 4, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 919651759, 'comment_body': ""> I think arange(1) makes no sense as a test, and maybe shaped_random with properly scaled would work.\r\n\r\nAgreed with you. I've fixed it. it Is this okay now?\r\n\r\n~**EDIT**: Ooo, no wait... one thing is still left. Will update it soon~\r\n\r\n**EDIT 2**: Updated the tests. Is it okay to separate tests?"", 'comment_created': datetime.datetime(2022, 7, 13, 5, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 919674790, 'comment_body': ""```suggestion\r\n    @testing.for_all_dtypes(no_bool=True)\r\n    @testing.numpy_cupy_allclose(scipy_name='scp', atol=atol, rtol=rtol)\r\n    def test_log_softmax_ndarray_1(self, xp, scp, dtype):\r\n        if xp.dtype(dtype).kind == 'u':\r\n            # Unsigned integers make underflows in numpy (eventually seen as\r\n            # overflows in `np.exp(tmp)`)\r\n            pytest.skip()\r\n        a = testing.shaped_random((40, 50), xp, dtype=dtype)\r\n        return scp.special.log_softmax(a)```"", 'comment_created': datetime.datetime(2022, 7, 13, 5, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 919675637, 'comment_body': ""ah, I recalled that `x - x_max` underflows with unsigned integers, and eventually makes overflows in `np.exp(tmp)`. Let's skip tests for unsigned ints.\r\n\r\n```py\r\n    tmp = x - x_max\r\n    exp_tmp = np.exp(tmp)\r\n```\r\n\r\nhttps://github.com/scipy/scipy/blob/f076ea280b09d5d0dbce47fcfc6fdb69496d88ba/scipy/special/_logsumexp.py#L286-L287"", 'comment_created': datetime.datetime(2022, 7, 13, 5, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 919677805, 'comment_body': ""> EDIT 2: Updated the tests. Is it okay to separate tests?\r\n\r\nLet's skip unsigned integer tests in one test, leaving a comment as https://github.com/cupy/cupy/pull/6823#pullrequestreview-1036798376 "", 'comment_created': datetime.datetime(2022, 7, 13, 6, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 919687474, 'comment_body': 'Skipped the tests. Thanks for the inputs :)', 'comment_created': datetime.datetime(2022, 7, 13, 6, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': '6dc74ee0a8602b52eea22e270debee690253901a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f2654fbb6750351701448652990e8212590f2b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e838fef82b458391f6b3e8366734c6cfcfa3522c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cf725cfbc25ca4f2b2a27009791b392bca4df8c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe899d0c7fb3543c1c0351a61e71f656f2ef3f2b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '415a1ad78f23d505d4f2bfd6b6c643db8ca9d678', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48cdf98c5d4c37add8f377d5809abf8d5eb079e4', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'affcffb134196b51f98dfe7798a050b161a30769', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14847afe512849dbd1037cff8831273b0888c458', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ea00e3e65d377ae1f0c10db98ef1ec7d1abfbbc', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '420a1cc5321e4b6a433dd5ca521dacea4daa937f', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d830de85e89d898ee5e8cab1ab2dd10a567d404', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b68d9e6e2e82527c549a54d0be98f5381b83a40c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
959405239,[special] add `cupyx.scipy.special.logsumexp`,"#### TODO

~- [ ] use ReductionKernel~ will update once #6813 is merged.

#### Performance Benchmarking

1. Without using ReductionKernels
```python
logsumexp           :    CPU: 2998.980 us   +/-81.612 (min: 2972.770 / max: 3563.125) us     GPU-0:35569.310 us   +/-210.958 (min:35475.903 / max:36621.632) us
 ```
2. Using ReductionKernels
```python
TODO
```
<details>
<summary>Script: Click Please :)</summary>

<p>

```python
import cupy
import cupyx
from cupy import testing
from cupyx.profiler import benchmark


shape = (64, 1024, 1024)
x1 = testing.shaped_random(shape, xp=cupy, dtype='l', seed=0, scale=100000000)
perf = benchmark(cupyx.scipy.special.logsumexp, (x1,), n_repeat=100)
print(perf)
```

</p>
</details>

Thanks! :)",True,6773,https://api.github.com/repos/cupy/cupy/pulls/6773,https://github.com/cupy/cupy/pull/6773,closed,189,0,4,17,12,16,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-06-06 18:13:58+00:00,2022-09-05 10:55:15+00:00,7836077.0,"90 days, 16:41:17","[{'comment_id': 954428862, 'comment_body': 'SciPy is not necessarily installed when test runs. Please follow other cupyx.scipy tests in case scipy is not installed.', 'comment_created': datetime.datetime(2022, 8, 25, 1, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954430851, 'comment_body': ""nit: using a minus operator is simpler (it's actually the same with `cp.subtract`, though)\r\n```suggestion\r\n    if b is not None:\r\n        tmp = b * cp.exp(a - a_max)\r\n    else:\r\n        tmp = cp.exp(a - a_max)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 25, 1, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 954464302, 'comment_body': 'Right! updated.', 'comment_created': datetime.datetime(2022, 8, 25, 3, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 959248402, 'comment_body': 'Please use `numpy_cupy_allclose` to compare floating point numbers (also the following tests)', 'comment_created': datetime.datetime(2022, 8, 31, 7, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 959248920, 'comment_body': ""nit:\r\n```suggestion\r\n        if xp.dtype(dtype).kind in 'u':\r\n```"", 'comment_created': datetime.datetime(2022, 8, 31, 7, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 959251940, 'comment_body': 'I see this does not test shape. (also following tests)\r\n```suggestion\r\n    def test_sign_multi_dims(self, xp, scp, dtype):\r\n```', 'comment_created': datetime.datetime(2022, 8, 31, 7, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 959398541, 'comment_body': 'Hi, updated all. Thanks!', 'comment_created': datetime.datetime(2022, 8, 31, 9, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 959398629, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 31, 10, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 959398861, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2022, 8, 31, 10, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 961220380, 'comment_body': '```suggestion\r\n    def test_sign_multi_dims_axis(self, xp, scp, dtype):\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 1, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 961220496, 'comment_body': '```suggestion\r\n    def test_sign_multi_dims_axis_2d(self, xp, scp, dtype):\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 1, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 961220619, 'comment_body': '```suggestion\r\n    def test_b_multi_dims(self, xp, scp, dtype):\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 1, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 961221819, 'comment_body': 'We conventionally do not use `import` in a function. Please import it on the top section of this file as:\r\n\r\nhttps://github.com/cupy/cupy/blob/983d2b84e546428b0343151e0187275b5a35a0e9/tests/cupyx_tests/scipy_tests/linalg_tests/test_special_matrices.py#L6-L9\r\n', 'comment_created': datetime.datetime(2022, 9, 2, 1, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 961447453, 'comment_body': '```suggestion\r\n    import scipy.special  # NOQA\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 8, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 962686432, 'comment_body': '```suggestion\r\n    @testing.for_all_dtypes(no_bool=True, no_complex=True)\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 9, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 962689187, 'comment_body': 'Updated, thanks!', 'comment_created': datetime.datetime(2022, 9, 5, 9, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': '3edc1458c8303cfe4d0934c630dfd677980231d7', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80363491a0ade19ddb338a1b0fcfd6a899efc382', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57ee69b4db54616145de5ac8b920eba1a2cf9189', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e66afabf4156d99d8c379b7883fc3ad8ebf7756', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e47f50d184a01a71ec693d62fd4a0859cc8291be', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1234c50761ab1aa7391775d15393d85145f84ee0', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae62695c440ccced3baacf413f687097c23b5fb5', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee1aa085e44e0ec34218b7cf2239d8b824605766', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '538fd34703ef3ef53e390263c5e6039dcabc87ba', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d822791336406cff981b9377701ea7e188ca26', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651a29a5a3b94661da54c89e2cba417aa767e405', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07eb9a818e69f2d3a03eec296613fd29d3f262e1', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da55f015cd812a3d42c1b1793ca9914eca9ebedd', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4db3fe330431265973749a6ea1b7f613ea6b23bd', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6fda9bc9607bcf5f8ec4d38bc034295ab1c61d8', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8ed32d7b70cdfcc4841122e78d1226fc39fea51', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d53d6116bb81f27d17712397ed72ab789a29315', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
980462013,[fix] support multiple output args in reduction kernels,"#### TODO
- [ ] Add tests",False,6813,https://api.github.com/repos/cupy/cupy/pulls/6813,https://github.com/cupy/cupy/pull/6813,closed,50,8,2,2,2,4,2,1,"[{'name': 'cat:enhancement'}, {'name': 'prio:medium'}]",2022-06-27 19:44:49+00:00,2023-05-10 05:10:20+00:00,27336331.0,"316 days, 9:25:31","[{'comment_id': 908260218, 'comment_body': ""You can leave POST_MAP macro's argument to be only `a` (that is, `POST_MAP(a)`) as it is the result of the reduction phase. Instead, let's modify the expansion of the macro `(${post_map_expr})` to take statements instead of an expression. In C grammar, a parenthesis `()` can only contain an expression. For multi-line macro, we usually use `do { ... } while (0)` loop;"", 'comment_created': datetime.datetime(2022, 6, 28, 9, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 908266125, 'comment_body': ""Let's keep `out_args` as `__call__` method also can take output arrays in positional arguments `args`. Instead, please assign `out` parameter to `out_args` with properly adjusted above."", 'comment_created': datetime.datetime(2022, 6, 28, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 908272407, 'comment_body': ""Hi, @takagi! Thanks for the comments! I'll think from that perspective and update the PR :)"", 'comment_created': datetime.datetime(2022, 6, 28, 9, 42, 34, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 910567730, 'comment_body': ""This time I think of making ReductionKernel able to handle multiple values only in the post-reduction phase (Is it also okay for you?). So would you try to make the following ReductionKernel pass the test? The ReductionKernel  takes two arrays for output, `out0` and `out1`, then assigning them to sum of `x` as well as its negated sum. The negated sum does not have much sense, just testing purpose.\r\n\r\n```py\r\nreturn cupy.ReductionKernel(\r\n    'T x', 'T out0, T out1', 'x', 'a + b', 'out0 = a; out1 = -a;', '0', 'my_sum_neg_sum')\r\n```"", 'comment_created': datetime.datetime(2022, 6, 30, 3, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}]","[{'commit_sha': 'bda58c2e58f4e21b40af9f35dddc28858eba169b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b234b4c2ecc12587bc337297f5065fc023f9bf6d', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
969749111,[special] Add `cupyx.scipy.special.expn`,"#### TODO
- [x] add benchmarks

Benchmarks:
size | dtype | SciPy | CuPy
-----|-------|-------|-----
1000 | int8 | 0.119 ms | 0.203 ms
1000 | int32 | 0.111 ms | 0.201 ms
1000 | uint32 | 0.115 ms | 0.201 ms
1000 | float32 | 0.283 ms | 0.207 ms
1000 | float64 | 0.257 ms | 0.207 ms
100000 | int8 | 11.396 ms | 8.503 ms
100000 | int32 | 11.705 ms | 7.147 ms
100000 | uint32 | 11.495 ms | 6.202 ms
100000 | float32 | 17.490 ms | 6.235 ms
100000 | float64 | 17.482 ms | 6.227 ms
1000000 | int8 | 114.541 ms | 60.157 ms
1000000 | int32 | 110.311 ms | 58.221 ms
1000000 | uint32 | 109.507 ms | 58.139 ms
1000000 | float32 | 164.692 ms | 59.586 ms
1000000 | float64 | 165.868 ms | 62.705 ms

<details>
<summary>Script: Click Please</summary>

<p>

```python
import cupy
import cupyx

import scipy

from cupy import testing
from cupyx.profiler import benchmark


n_warmup = 1
n_repeat = 10
dtype_set = ('int8', 'int32', 'uint32', 'float32', 'float64')
n_set = (1000, 100000, 1000000)


def get_time(pref):
    cpu_time = pref.cpu_times.mean()
    gpu_time = pref.gpu_times.mean()
    return max(cpu_time, gpu_time) * 1000  # ms


def time_expn(a, b):
    cp_a = cupy.array(a)
    cp_b = cupy.array(b)
    ref = scipy.special.expn(a, b)
    ret = cupyx.scipy.special.expn(cp_a, cp_b)
    times = []
    perf = benchmark(scipy.special.expn, (a, b),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    perf = benchmark(cupyx.scipy.special.expn, (cp_a, cp_b),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    return times


print('size | dtype | SciPy | CuPy')
print('-----|-------|-------|-----')
for n in n_set:
    for dtype in dtype_set:
        a = scipy.random.randint(0, 2, size=n).astype(dtype)
        b = scipy.random.randint(0, 10, size=n).astype(dtype)
        times = time_expn(a, b)
        print('{} | {} | {:.3f} ms | {:.3f} ms'.format(n, dtype, times[0], times[1]))
```

</p>
</details>
",True,6790,https://api.github.com/repos/cupy/cupy/pulls/6790,https://github.com/cupy/cupy/pull/6790,closed,413,0,4,5,6,10,1,1,[{'name': 'cat:feature'}],2022-06-16 20:18:10+00:00,2022-06-28 04:37:16+00:00,980346.0,"11 days, 8:19:06","[{'comment_id': 899814962, 'comment_body': ""Looks like that `polevl` in _digamma.py is templated by `int N` for optimization, maybe giving the compiler a chance to unroll a loop in it, and you can't use `Adges[k]` for a template argument."", 'comment_created': datetime.datetime(2022, 6, 17, 6, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 899831210, 'comment_body': 'Seems that you have to return `ans` without going through this block.', 'comment_created': datetime.datetime(2022, 6, 17, 7, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 899838816, 'comment_body': '```suggestion\r\n__constant__ int Adegs[] = {0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 7, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 906715590, 'comment_body': 'Ahh, yes! You are right. Have added it :)', 'comment_created': datetime.datetime(2022, 6, 25, 19, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 906947002, 'comment_body': 'Removing `const` qualifier here is fairly acceptable as this function is short and clear enough.\r\n\r\n```suggestion\r\nstatic __device__ double polevl(double x, double coef[], int N)\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 3, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 906947175, 'comment_body': 'Having `polevl` definition with a (runtime) argument for `expn` as opposed to one defined in _digamma.py  is okay!', 'comment_created': datetime.datetime(2022, 6, 27, 3, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 906948777, 'comment_body': 'Great! Thanks for confirming :)', 'comment_created': datetime.datetime(2022, 6, 27, 3, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 906949808, 'comment_body': 'Maybe removing `static` storage class resolves the ptxas fatal you mentioned.\r\n\r\n```suggestion\r\n__device__ double polevl(double x, const double coef[], int N)\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 3, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 906950339, 'comment_body': 'Actually yes! You are right! Thanks!', 'comment_created': datetime.datetime(2022, 6, 27, 3, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 906950432, 'comment_body': 'Updated :)', 'comment_created': datetime.datetime(2022, 6, 27, 3, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': 'dbd42bc87382e29a4aaa93e1ef772fc6d0ba4eeb', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab61cb4915ad48fadc4fbc0c2f74cbf424b80dd1', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06d6cf8b310748abc26d880e169a14f263b5348', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69eafb551b7fa97052f78ca45af642d390fc65e4', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5078102229abef5f9d0e3bcb9be23cfb3c88ce0e', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
1005763896,[special] add `cupyx.scipy.special.softmax`,"Adds `cupyx.scipy.special.softmax`.

#### Benchmarks
size | dtype | SciPy | CuPy
-----|-------|-------|-----
1000 | int8 | 0.106 ms | 0.104 ms
1000 | int32 | 0.062 ms | 0.104 ms
1000 | float32 | 0.046 ms | 0.106 ms
1000 | float64 | 0.058 ms | 0.105 ms
100000 | int8 | 5.711 ms | 0.111 ms
100000 | int32 | 1.761 ms | 0.139 ms
100000 | float32 | 0.378 ms | 0.115 ms
100000 | float64 | 1.620 ms | 0.138 ms
1000000 | int8 | 56.208 ms | 0.225 ms
1000000 | int32 | 17.004 ms | 0.774 ms
1000000 | float32 | 2.805 ms | 0.270 ms
1000000 | float64 | 17.225 ms | 0.925 ms

<details>
<summary>Script (Click Please)</summary>

<p>

```python
import cupy
import cupyx
import cupyx.scipy.stats

import scipy

from cupy import testing
from cupyx.profiler import benchmark

import scipy.stats


n_warmup = 1
n_repeat = 10
dtype_set = ('int8', 'int32', 'float32', 'float64')
n_set = (1000, 100000, 1000000)


def get_time(pref):
    cpu_time = pref.cpu_times.mean()
    gpu_time = pref.gpu_times.mean()
    return max(cpu_time, gpu_time) * 1000  # ms


def time(a):
    cp_a = cupy.array(a)
    ref = scipy.special.softmax(a)
    ret = cupyx.scipy.special.softmax(cp_a)
    times = []
    perf = benchmark(scipy.special.softmax, (a,),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    perf = benchmark(cupyx.scipy.special.softmax, (cp_a,),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    return times


print('size | dtype | SciPy | CuPy')
print('-----|-------|-------|-----')
for n in n_set:
    for dtype in dtype_set:
        a = scipy.random.randint(0, 2, size=n).astype(dtype)
        times = time(a)
        print('{} | {} | {:.3f} ms | {:.3f} ms'.format(n, dtype, times[0], times[1]))
```

</p>
</details>",True,6890,https://api.github.com/repos/cupy/cupy/pulls/6890,https://github.com/cupy/cupy/pull/6890,closed,114,0,4,1,7,0,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-07-22 12:54:04+00:00,2022-08-01 02:55:56+00:00,828112.0,"9 days, 14:01:52",[],"[{'commit_sha': 'edea597c847263e976059022d81916114f6391a8', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
984973934,[stats] add `cupyx.scipy.stats.boxcox_llf`,"Hi, the PR adds `cupyx.scipy.stats.boxcox_llf`!

#### Benchmarks (using cupy fusion for `log` and `sum`) :
size | dtype | SciPy | CuPy
-----|-------|-------|-----
1000 | int8 | 0.101 ms | 0.356 ms
1000 | int32 | 0.079 ms | 0.353 ms
1000 | uint32 | 0.080 ms | 0.414 ms
1000 | float32 | 0.076 ms | 0.389 ms
1000 | float64 | 0.084 ms | 0.457 ms
100000 | int8 | 4.178 ms | 0.458 ms
100000 | int32 | 2.964 ms | 0.522 ms
100000 | uint32 | 2.845 ms | 0.521 ms
100000 | float32 | 1.425 ms | 0.550 ms
100000 | float64 | 2.693 ms | 0.521 ms
1000000 | int8 | 41.181 ms | 3.824 ms
1000000 | int32 | 27.627 ms | 4.676 ms
1000000 | uint32 | 27.741 ms | 4.795 ms
1000000 | float32 | 13.221 ms | 4.771 ms
1000000 | float64 | 27.190 ms | 4.804 ms

#### Updated Benchmarks (without using cupy fusion):
size | dtype | SciPy | CuPy
-----|-------|-------|-----
1000 | int8 | 0.100 ms | 0.310 ms
1000 | int32 | 0.079 ms | 0.298 ms
1000 | uint32 | 0.079 ms | 0.370 ms
1000 | float32 | 0.072 ms | 0.413 ms
1000 | float64 | 0.077 ms | 0.331 ms
100000 | int8 | 4.397 ms | 0.453 ms
100000 | int32 | 2.930 ms | 0.514 ms
100000 | uint32 | 2.889 ms | 0.513 ms
100000 | float32 | 1.391 ms | 0.537 ms
100000 | float64 | 2.745 ms | 0.511 ms
1000000 | int8 | 44.292 ms | 3.863 ms
1000000 | int32 | 29.930 ms | 6.129 ms
1000000 | uint32 | 28.011 ms | 3.745 ms
1000000 | float32 | 14.635 ms | 4.381 ms
1000000 | float64 | 29.569 ms | 4.234 ms

<details>
<summary>Script (Click Please)</summary>

<p>

```python
import cupy
import cupyx
import cupyx.scipy.stats

import scipy

from cupy import testing
from cupyx.profiler import benchmark

import scipy.stats


n_warmup = 1
n_repeat = 10
dtype_set = ('int8', 'int32', 'uint32', 'float32', 'float64')
n_set = (1000, 100000, 1000000)


def get_time(pref):
    cpu_time = pref.cpu_times.mean()
    gpu_time = pref.gpu_times.mean()
    return max(cpu_time, gpu_time) * 1000  # ms


def time(a, b):
    cp_a = a # cupy.array(a)
    cp_b = cupy.array(b)
    ref = scipy.stats.boxcox_llf(a, b)
    ret = cupyx.scipy.stats.boxcox_llf(cp_a, cp_b)
    times = []
    perf = benchmark(scipy.stats.boxcox_llf, (a, b),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    perf = benchmark(cupyx.scipy.stats.boxcox_llf, (cp_a, cp_b),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    return times


print('size | dtype | SciPy | CuPy')
print('-----|-------|-------|-----')
for n in n_set:
    for dtype in dtype_set:
        a = 4.0
        b = scipy.random.randint(0, 10, size=n).astype(dtype)
        times = time(a, b)
        print('{} | {} | {:.3f} ms | {:.3f} ms'.format(n, dtype, times[0], times[1]))
```

</p>
</details>

Thanks! :)",True,6849,https://api.github.com/repos/cupy/cupy/pulls/6849,https://github.com/cupy/cupy/pull/6849,closed,168,0,4,8,18,20,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-07-01 13:31:51+00:00,2022-07-13 13:45:34+00:00,1037623.0,"12 days, 0:13:43","[{'comment_id': 911978999, 'comment_body': 'I tried to use `testing.shaped_random()` here, but the test cases failed.\r\n\r\nA short summary about it:\r\n1. The first thing that immediately clicked in my mind was relaxing tolerance. I tried as lenient tolerance as possible but got I got such errors:\r\n<details>\r\n<summary>Error Log 1</summary>\r\n\r\n<p>\r\n\r\n```python\r\nE       AssertionError: \r\nE       Not equal to tolerance rtol=0.0001, atol=0.0001\r\nE       \r\nE       Mismatched elements: 1 / 1 (100%)\r\nE       Max absolute difference: 0.00101796\r\nE       Max relative difference: 0.00123653\r\nE        x: array(0.822224)\r\nE        y: array(0.823242)\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n2. Then at one possible value, I got:\r\n<details>\r\n<summary>Error Log 2</summary>\r\n\r\n<p>\r\n\r\n```python\r\nE       AssertionError: \r\nE       Not equal to tolerance rtol=0.005, atol=0.005\r\nE       \r\nE       x and y -inf location mismatch:\r\nE        x: array(0.280961)\r\nE        y: array(-inf)\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\n3. I then thought to check was SciPy returns (as we did in `log_softmax`) And it worked completely fine. Please see below: \r\n<details>\r\n<summary>Code Snippet</summary>\r\n\r\n<p>\r\n\r\n```python\r\n>>> import cupy as cp\r\n>>> from cupyx.scipy.stats import boxcox_llf\r\n>>> lmb = 1.0\r\n>>> boxcox_llf(lmb, x)\r\narray(inf)\r\n\r\n>>> from scipy.stats import boxcox_llf\r\n>>> import numpy as np\r\n>>> x = np.array([2], dtype=np.float32)\r\n>>> boxcox_llf(lmb, x)\r\ninf\r\n```\r\n\r\n\r\n</p>\r\n</details>\r\n\r\nWhat do you think might be happening? Thanks', 'comment_created': datetime.datetime(2022, 7, 1, 13, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 912637666, 'comment_body': ""Can we combine these lines into a fused function? (`cupy.var` itself is not supported by CuPy fusion, so we'll implement it in the fused function for ourselves)"", 'comment_created': datetime.datetime(2022, 7, 4, 5, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 912663598, 'comment_body': ""Hi, @takagi! Thanks for pointing that out. \r\nDo you mean something like ...?\r\n```python\r\n@cupy.fuse(kernel_name='fused_func')\r\ndef fused_func(lmb, data):\r\n    # the above lines\r\n    return ...\r\n```\r\nIf yes, then I don't think we can fuse these lines, because we cannot fuse `cupy.var`. I tried this and got the following:\r\n```python\r\nAttributeError: '_ArrayProxy' object has no attribute 'var'\r\n```\r\nThanks"", 'comment_created': datetime.datetime(2022, 7, 4, 6, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 912665712, 'comment_body': ""ah, we need `keepdims=True` to compute variance in a fused function, and keepdims is currently not supported in CuPy fusion. I can't immediately answer that supporting keepdims in fused functions is easy or not."", 'comment_created': datetime.datetime(2022, 7, 4, 6, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 912668363, 'comment_body': 'Sounds interesting to me!', 'comment_created': datetime.datetime(2022, 7, 4, 6, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 912670162, 'comment_body': ""Let's implement this without using CuPy fusion this time, replacing `find_log` and `find_sum` to usual `cupy.log` and `cupy.sum`, and revisit later."", 'comment_created': datetime.datetime(2022, 7, 4, 6, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 912681497, 'comment_body': 'Sure, I have updated the PR. Thanks!', 'comment_created': datetime.datetime(2022, 7, 4, 6, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 913304625, 'comment_body': ""`shaped_range`'s scale defaults to `10`, so I guess it makes overflow on float16. Please try smaller values.\r\n\r\nhttps://github.com/cupy/cupy/blob/3fedbb957b79782089868540065ca24b088f29c6/cupy/testing/_helper.py#L129"", 'comment_created': datetime.datetime(2022, 7, 5, 0, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 913304853, 'comment_body': 'Seems this tolerance is too large for float64, maybe something wrong.', 'comment_created': datetime.datetime(2022, 7, 5, 0, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 913305050, 'comment_body': 'ditto (too large tol for float64)', 'comment_created': datetime.datetime(2022, 7, 5, 0, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 913386414, 'comment_body': 'I think there is a problem with the first case only. The rest works fine with `1e-14`.', 'comment_created': datetime.datetime(2022, 7, 5, 4, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 913386699, 'comment_body': ""This works! I'll update it. Thanks!\r\n\r\n**EDIT**: Updated"", 'comment_created': datetime.datetime(2022, 7, 5, 5, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 914308384, 'comment_body': ""ah, it's because numpy.boxcox_llf returns float64 outputs for lower precision inputs as float16 and float32, so `cupy.float64` key's value in the dict is used for float16 inputs."", 'comment_created': datetime.datetime(2022, 7, 6, 0, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 914313663, 'comment_body': ""Plase split `test_array_1dim` to float16 case and others.\r\n\r\n```py\r\n    @testing.for_all_dtypes(no_float16=True)\r\n    @testing.numpy_cupy_allclose(scipy_name='scp', rtol=1e-6)\r\n    def test_array_1dim(self, xp, scp, dtype):\r\n        data = testing.shaped_random((2,), xp, dtype=dtype, scale=9)\r\n        import numpy\r\n        xp.log(data)\r\n        lmb = 4.0\r\n        return scp.stats.boxcox_llf(lmb, data)\r\n\r\n    @testing.numpy_cupy_allclose(scipy_name='scp', rtol=5e-3)\r\n    def test_array_1dim_float16(self, xp, scp):\r\n        data = testing.shaped_random((2,), xp, dtype=xp.float16, scale=9)\r\n        lmb = 4.0\r\n        return scp.stats.boxcox_llf(lmb, data)\r\n```"", 'comment_created': datetime.datetime(2022, 7, 6, 0, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 914406358, 'comment_body': 'Indeed this works. Thanks', 'comment_created': datetime.datetime(2022, 7, 6, 4, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 915369110, 'comment_body': 'Would you use a bit larger input that has 10 elements or so? (Also for other tests please!)', 'comment_created': datetime.datetime(2022, 7, 7, 1, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 915369707, 'comment_body': 'Using `testing.shaped_arange` is more convenient.', 'comment_created': datetime.datetime(2022, 7, 7, 1, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 915369838, 'comment_body': 'ditto (testing.shaped_arange)', 'comment_created': datetime.datetime(2022, 7, 7, 1, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 915680039, 'comment_body': 'Sure, fixed. Thanks!', 'comment_created': datetime.datetime(2022, 7, 7, 9, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 915685636, 'comment_body': ""I see `float16` is not happy with it. I was getting:\r\n```python\r\nE       AssertionError: \r\nE       Not equal to tolerance rtol=0.005, atol=0\r\nE       \r\nE       x and y -inf location mismatch:\r\nE        x: array(-21.588972)\r\nE        y: array(-inf)\r\n```\r\nSo, for this case, I've used 1-dimensional inputs of size 5."", 'comment_created': datetime.datetime(2022, 7, 7, 9, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}]","[{'commit_sha': '90f436448b94acd6b6535cbbf5b529761e091f8c', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f302711907cb32956d2c5caa552beab75daf64ca', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c4ba68f0f5901332dfe4ffae8fb46b185e1e6fd', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3346ca34a7c21c10a0fb30602a2cb6d8ee627a7', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1c6fa78acb6169f29d5df0be6fd8c402b419c21', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de7196b32c7ce3b4e9e4ec3487fc69e135dab85', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c39932342be8b05518c49ba06806ae817859c10', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd0615e13b86ce8acd4ba6b45f256f3d603d46c6', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
988142740,"[stats] add `cupyx.scipy.stats.{zmap, zscore}`","The PR adds `cupyx.scipy.stats.zmap` API.

#### Benchmarks
size | dtype | SciPy | CuPy
-----|-------|-------|-----
1000 | int8 | 0.151 ms | 0.835 ms
1000 | int32 | 0.105 ms | 0.710 ms
1000 | float32 | 0.096 ms | 0.743 ms
1000 | float64 | 0.098 ms | 0.682 ms
1000 | complex64 | 0.117 ms | 0.706 ms
1000 | complex128 | 0.116 ms | 0.692 ms
100000 | int8 | 0.639 ms | 0.827 ms
100000 | int32 | 0.600 ms | 0.793 ms
100000 | float32 | 0.367 ms | 0.702 ms
100000 | float64 | 0.471 ms | 0.745 ms
100000 | complex64 | 1.035 ms | 0.774 ms
100000 | complex128 | 1.102 ms | 1.113 ms
1000000 | int8 | 5.349 ms | 2.173 ms
1000000 | int32 | 5.476 ms | 2.312 ms
1000000 | float32 | 2.903 ms | 1.407 ms
1000000 | float64 | 5.100 ms | 1.755 ms
1000000 | complex64 | 9.877 ms | 1.678 ms
1000000 | complex128 | 15.183 ms | 6.931 ms


#### Updated benchmarks (after removing apply_along_axis)
size | dtype | SciPy | CuPy
-----|-------|-------|-----
1000 | int8 | 0.107 ms | 0.693 ms
1000 | int32 | 0.106 ms | 0.749 ms
1000 | float32 | 0.101 ms | 0.820 ms
1000 | float64 | 0.104 ms | 0.686 ms
1000 | complex64 | 0.117 ms | 0.831 ms
1000 | complex128 | 0.122 ms | 0.699 ms
100000 | int8 | 0.702 ms | 0.806 ms
100000 | int32 | 0.652 ms | 0.867 ms
100000 | float32 | 0.390 ms | 0.819 ms
100000 | float64 | 0.522 ms | 0.879 ms
100000 | complex64 | 1.110 ms | 0.972 ms
100000 | complex128 | 1.173 ms | 1.345 ms
1000000 | int8 | 5.794 ms | 2.139 ms
1000000 | int32 | 5.914 ms | 2.194 ms
1000000 | float32 | 3.098 ms | 1.387 ms
1000000 | float64 | 5.441 ms | 1.685 ms
1000000 | complex64 | 11.030 ms | 1.661 ms
1000000 | complex128 | 15.822 ms | 6.772 ms

<details>
<summary>Script (Click Please)</summary>

<p>

```python
import cupy
import cupyx

import scipy

from cupy import testing
from cupyx.profiler import benchmark

import cupyx.scipy.stats

import scipy.stats


n_warmup = 1
n_repeat = 10
dtype_set = ('int8', 'int32', 'float32', 'float64', 'complex64', 'complex128')
n_set = (1000, 100000, 1000000)


def get_time(pref):
    cpu_time = pref.cpu_times.mean()
    gpu_time = pref.gpu_times.mean()
    return max(cpu_time, gpu_time) * 1000  # ms


def time(a, b):
    cp_a = cupy.array(a)
    cp_b = cupy.array(b)
    ref = scipy.stats.zmap(a, b)
    ret = cupyx.scipy.stats.zmap(cp_a, cp_b)
    times = []
    perf = benchmark(scipy.stats.zmap, (a, b),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    perf = benchmark(cupyx.scipy.stats.zmap, (cp_a, cp_b),
                     n_warmup=n_warmup, n_repeat=n_repeat)
    times.append(get_time(perf))
    return times


print('size | dtype | SciPy | CuPy')
print('-----|-------|-------|-----')
for n in n_set:
    for dtype in dtype_set:
        a = scipy.random.randint(0, 2, size=n).astype(dtype)
        b = scipy.random.randint(0, 10, size=n).astype(dtype)
        times = time(a, b)
        print('{} | {} | {:.3f} ms | {:.3f} ms'.format(n, dtype, times[0], times[1]))
```

</p>
</details>",True,6855,https://api.github.com/repos/cupy/cupy/pulls/6855,https://github.com/cupy/cupy/pull/6855,closed,324,0,4,20,17,43,2,1,"[{'name': 'cat:feature'}, {'name': 'prio:medium'}]",2022-07-06 04:27:15+00:00,2022-08-08 06:03:33+00:00,2856978.0,"33 days, 1:36:18","[{'comment_id': 920628972, 'comment_body': 'nit:\r\n```suggestion\r\nimport numpy\r\nimport pytest\r\n\r\nimport cupy\r\nfrom cupy import testing\r\nimport cupyx\r\nimport cupyx.scipy.stats  # NOQA\r\n\r\nimport scipy.stats  # NOQA\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 1, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920647793, 'comment_body': ""Would you add tests where `compare` arrays have the same dimension with `scores` as scipy's assumes as such?\r\n\r\nIt also seems true that scipy's accept `compare` with the different dimension without seeing any exceptions or warnings. So I think keeping the current tests is okay. (only multi-dim would be enough)\r\n"", 'comment_created': datetime.datetime(2022, 7, 14, 1, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920649676, 'comment_body': ""Would you add a test with the `nan_policy='propagate'` (or default) that takes nan inputs?"", 'comment_created': datetime.datetime(2022, 7, 14, 1, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920749023, 'comment_body': 'CuPy has `cupy.apply_along_axis`, but it is quite inefficient because it repeatedly launches kernels for 1d-arrays along the axis. We may simply use `cupy.nanmean` and `cupy.nanstd` as they do not make a warning.', 'comment_created': datetime.datetime(2022, 7, 14, 4, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920749301, 'comment_body': 'Seems that `_quiet_nanmean` and `_quiet_nanstd` is just to avoid making a warning for arrays that have only nan.\r\n\r\n```py\r\n>>> np.nanmean([np.nan, np.nan])\r\n<stdin>:1: RuntimeWarning: Mean of empty slice\r\nnan\r\n```\r\n\r\nWe may use `cupy.nanmean` and `cupy.nanstd` as they do not make a warning in such a case.', 'comment_created': datetime.datetime(2022, 7, 14, 4, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920750412, 'comment_body': 'Is it possible to implement an equivalent thing with `cupy.apply_along_axis(_isconst, axis, a)` without using `apply_along_axis` as it is very inefficient?', 'comment_created': datetime.datetime(2022, 7, 14, 4, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920752081, 'comment_body': ""We want to evaluate `bool(contains_nan)` only when it is truly necessary as it causes device-to-host sync and inccurs the performance. `contains_nan` is a boolean array on GPU.\r\n\r\n```suggestion\r\n    if nan_policy == 'raise' and contains_nan:\r\n```"", 'comment_created': datetime.datetime(2022, 7, 14, 5, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920753223, 'comment_body': ""Great idea! I'll take a look at it."", 'comment_created': datetime.datetime(2022, 7, 14, 5, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 920753618, 'comment_body': 'We cannot pass cupy.ndarray to make a set, and even we can so, it would transfer data from GPU to host. When do you think the line above `contains_nan = cupy.isnan(cupy.sum(a))` raises a TypeError, and this `except` block is needed?', 'comment_created': datetime.datetime(2022, 7, 14, 5, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920754990, 'comment_body': ""Can we remove this `contains_nan` as evaluating `bool(contains_nan)` makes host-to-device sync and we don't want to have it as much as possible?"", 'comment_created': datetime.datetime(2022, 7, 14, 5, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920757915, 'comment_body': 'I guess this line would help you with modifying to omit nan.\r\n\r\nhttps://github.com/cupy/cupy/blob/babc4994d14dd248ed94c84a921bf64613f853be/cupyx/scipy/stats/_stats_py.py#L139', 'comment_created': datetime.datetime(2022, 7, 14, 5, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 920827209, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 7, 14, 7, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 920828050, 'comment_body': 'Added test. Thanks for your input :)\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 14, 7, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 920828281, 'comment_body': 'Yep, added. Thanks!', 'comment_created': datetime.datetime(2022, 7, 14, 7, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 921496760, 'comment_body': ""Hi, @takagi!\r\nI've removed `apply_along_axis` and used `cupy.nanmean` and `cupy.nanstd`. But I see there is one drawback to this:\r\n- `cupy.nanstd` that uses `cupy.nanvar` which is not implemented for complex dtypes. But we will require cases where we use nan_polity=`omit` and require the `axis` argument.\r\n\r\nUsing apply_along_axis resolves these problems because we use `mean` and `std` that support complex dtypes.\r\n\r\nAnyways, for now, I've removed the `apply_along_axis`, considering performance as the first priority.\r\n\r\nWhat would you prefer? Can we add support for complex dtypes in `nanvar`?\r\n\r\nThank you!"", 'comment_created': datetime.datetime(2022, 7, 14, 19, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 921519830, 'comment_body': 'Indeed, we can use it. fixed it. Thanks, @takagi!', 'comment_created': datetime.datetime(2022, 7, 14, 19, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 921528206, 'comment_body': 'Ah, right! Thanks for sharing.', 'comment_created': datetime.datetime(2022, 7, 14, 20, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 921544037, 'comment_body': ""I think we don't need `contain_nan` now because `nanmean`, and `nanstd` conventionally ignore nans. That was required when we used `apply_along_axis` initially."", 'comment_created': datetime.datetime(2022, 7, 14, 20, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 921551780, 'comment_body': ""SciPy says: [Link here](https://github.com/scipy/scipy/blob/main/scipy/stats/_stats_py.py#L108-L111)\r\n```txt\r\n# This can happen when attempting to sum things which are not\r\n# numbers (e.g. as in the function `mode`). Try an alternative method:\r\n```\r\n\r\nMaybe we don't need it. Shall I remove it? Thanks!"", 'comment_created': datetime.datetime(2022, 7, 14, 20, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 921744078, 'comment_body': ""Let's support complex numbers in `cupy.nanvar`. I'll put a pointer soon."", 'comment_created': datetime.datetime(2022, 7, 15, 2, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 921753216, 'comment_body': 'When we remove the assertion at \r\nhttps://github.com/cupy/cupy/blob/fc04c9445f488272c9a1b78999e4e0df15a721b5/cupy/_core/_routines_statistics.pyx#L698\r\n\r\n, we\'ll get the following error:\r\n\r\n```\r\nTypeError: Wrong type ((<class \'numpy.complex64\'>,)) of arguments for cupy_count_non_nan\r\n```\r\n\r\nLet\'s add complex support to `_count_non_nan`, that is, `F->q` and `D->q`\r\n\r\nhttps://github.com/cupy/cupy/blob/fc04c9445f488272c9a1b78999e4e0df15a721b5/cupy/_core/_routines_statistics.pyx#L682-L685\r\n\r\n, then we\'ll get the following compile error:\r\n\r\n```\r\ncupy.cuda.compiler.CompileException: /tmp/tmp380imuka/328e8b517679a3804b06c7d50f2bc4fa55c4a2df.cubin.cu(42): error: no operator ""/"" matches\r\nthese operands\r\n            operand types are: const T / const long long\r\n\r\n/tmp/tmp380imuka/328e8b517679a3804b06c7d50f2bc4fa55c4a2df.cubin.cu(11): error: no operator ""/"" matches these operands\r\n            operand types are: T / long long\r\n          detected during instantiation of ""T nanvar_impl(S, T, long long) [with S=S, T=T]""\r\n(42): here\r\n```\r\n\r\nThe related complex division is defined in \r\n\r\nhttps://github.com/cupy/cupy/blob/fc04c9445f488272c9a1b78999e4e0df15a721b5/cupy/_core/include/cupy/complex/arithmetic.h#L110-L114\r\n\r\n, where it requires that the divisor has the same type as the dividend\'s element type `T`. I think we can relax the constraint with another typename `S`.\r\n\r\nWould you make another PR to support complex numbers in `cupy.nanvar`?', 'comment_created': datetime.datetime(2022, 7, 15, 2, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 921753677, 'comment_body': ""Thanks, let's remove it!"", 'comment_created': datetime.datetime(2022, 7, 15, 2, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 921753957, 'comment_body': ""Okay, then let's remove it!"", 'comment_created': datetime.datetime(2022, 7, 15, 2, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 921817232, 'comment_body': ""Interesting, Thanks for the clear description!\r\n\r\n> Would you make another PR to support complex numbers in cupy.nanvar?\r\n\r\nDefinitely, I'll send a PR within some hours!"", 'comment_created': datetime.datetime(2022, 7, 15, 5, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 921859322, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 7, 15, 6, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 922263908, 'comment_body': 'Removed it.', 'comment_created': datetime.datetime(2022, 7, 15, 15, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 922273466, 'comment_body': '***Minor note***: Tests for complex dtypes will work once #6869 is merged!', 'comment_created': datetime.datetime(2022, 7, 15, 15, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 932887645, 'comment_body': ""Let's test that both scipy and cupy raise the same error.\r\n```py\r\nfor xp, scp in [(numpy, scipy), (cupy, cupyx.scipy)]:\r\n    ....\r\n    with pytest.raises(ValueError):\r\n        ...\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 7, 29, 5, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 932889340, 'comment_body': 'ditto (testing both numpy and cupy raise the same error)', 'comment_created': datetime.datetime(2022, 7, 29, 5, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 932894066, 'comment_body': 'Yes, sure! Updated it, thanks!', 'comment_created': datetime.datetime(2022, 7, 29, 5, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 932894476, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 29, 6, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 932898617, 'comment_body': ""Let's compute contains_nan only when nan_policy is `raise`."", 'comment_created': datetime.datetime(2022, 7, 29, 6, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 932905631, 'comment_body': '`ndarray.item()` transfers data from GPU to the host, then convert it to a Python scalar. We may use `a.ravel()[0]` instead to make a comparison with `a` whose data is on GPU without device-to-host sync.', 'comment_created': datetime.datetime(2022, 7, 29, 6, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 932914378, 'comment_body': ""Sure, I've updated it. I think we now don't need to define that in another function. Have changed it. Hope it's okay!"", 'comment_created': datetime.datetime(2022, 7, 29, 6, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 932914635, 'comment_body': 'Got that! Thanks for the concept :)', 'comment_created': datetime.datetime(2022, 7, 29, 6, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 934071570, 'comment_body': '```suggestion\r\n        if contains_nan:  # synchronize!\r\n```', 'comment_created': datetime.datetime(2022, 8, 1, 1, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 935492172, 'comment_body': ""aid for some CI failures\r\n```suggestion\r\n    @testing.numpy_cupy_allclose(scipy_name='scp', atol=atol, rtol=rtol)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 2, 12, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 935518144, 'comment_body': 'Ho updated it. Thanks for the reviews and for re-kicking the CI multiple times!', 'comment_created': datetime.datetime(2022, 8, 2, 12, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 935552655, 'comment_body': ""We may skip only tests that use `nan_policy`, and keep others alive for scipy 1.6.\r\n```suggestion\r\n    @testing.with_requires('scipy>=1.7')\r\n    def test_zmap_nan_policy_propagate(self, xp, scp, dtype):\r\n```"", 'comment_created': datetime.datetime(2022, 8, 2, 12, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 935555246, 'comment_body': ""ref. https://github.com/cupy/cupy/pull/6855#discussion_r935552655\r\n```suggestion\r\n@testing.with_requires('scipy')\r\n```"", 'comment_created': datetime.datetime(2022, 8, 2, 12, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 935582826, 'comment_body': 'Got that!\r\n\r\nupdated.', 'comment_created': datetime.datetime(2022, 8, 2, 13, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 939747492, 'comment_body': ""```suggestion\r\n    @testing.numpy_cupy_allclose(scipy_name='scp', atol=atol, rtol=rtol)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 8, 0, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 939747531, 'comment_body': ""```suggestion\r\n    @testing.numpy_cupy_allclose(scipy_name='scp', atol=atol, rtol=rtol)\r\n```"", 'comment_created': datetime.datetime(2022, 8, 8, 0, 40, 18, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}]","[{'commit_sha': 'cad3289a8cb3eee15ed99e74072560d4fc60634a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'babc4994d14dd248ed94c84a921bf64613f853be', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f35cff684edc0a26f80fe36f086917706c56d34', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5dda59b58649031f02ba92df3edef0e959ba70e', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d1ce609a2baa84caa59acd023111c48f27e720', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3515655072b17f69c916e62ce289b7ad51e58995', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89d3d469098958ad4ae52157f90438c8ea8b0a1a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '430758c6c6c29e122b1f82c0e8f5f7ce73056780', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33f3fc0947cb39fcb3e96d585b529692436dbe7b', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a352d1f821bfa156dd9b76a127689fce4133bab', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5db7db75cafd4ad1a37fa6de52f3d560bf5ca26', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23529da8d1e2b8fbb01d3a2ca3d737eaa34a670d', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f862ef19aa4276cd3fae517e91b2018d7661dbe', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d81e80531d5c79f113773133715c59b81095bdf', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dece118ca57cb8320309cdbbd97194ecc2eee08', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fed3a931186ceaed95c116d793d629f175fabe4e', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02b4db00aac472451c9be4d4fead87b2b8e3ea7f', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2d27586c22254ef18b004c07c2b2e9c80d1fcc8', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25f7e9d6a6615a06e1492a94f61c749ea09680d5', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '471a87cf47d83e82ff68a88f70d68121890edf8e', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46
997513084,[complex] add complex support for `nanvar` and `nanstd`,"As per the title. 

Please refer to https://github.com/cupy/cupy/pull/6855#discussion_r921744078 for more details.

#### TODO:
- [x]  fix tests",True,6869,https://api.github.com/repos/cupy/cupy/pulls/6869,https://github.com/cupy/cupy/pull/6869,closed,37,16,2,13,10,12,2,1,"[{'name': 'cat:enhancement'}, {'name': 'prio:medium'}]",2022-07-15 08:45:28+00:00,2022-08-01 10:13:50+00:00,1474102.0,"17 days, 1:28:22","[{'comment_id': 928123824, 'comment_body': '@takagi, I saw there were many test failures when we relaxed the dtype of the second arg of `operator/`. So I think it will be good to add another func supporting different dtype args in `operator/`. \r\n\r\nThe test cases are passing now. Please see:\r\n![Screenshot from 2022-07-23 18-52-34](https://user-images.githubusercontent.com/62256509/180607046-7e50faa9-ce05-49f8-8fbe-a4d97f349b37.png)\r\n\r\nWhat do you think? Thanks!', 'comment_created': datetime.datetime(2022, 7, 23, 13, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 928374082, 'comment_body': ""The errors say we should also change the declaration of operator/ in complex/complex.h(339). But, hum, now I changed my mind that  let's keep the original declaration and definition `template <typename T>\r\n__host__ __device__ inline complex<T> operator/(const complex<T>& lhs, const T& rhs)` and cast the divisor in callers,  `sum / satic_cast<T>(_count)`, as the complex-related files are borrowed from CUDA toolkit and let's keep them as they're."", 'comment_created': datetime.datetime(2022, 7, 25, 2, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 928463937, 'comment_body': 'Hi, @takagi! Thanks for your input! I\'ve something in my mind ...\r\n\r\nI might be not right. But I think we cannot use `static_cast<T>(_count)` here. Because we haven\'t used the templated kernel, rather we have explicitly defined that for `complex64` and `complex128` (Thanks to your offline help!!!). `T` is not defined here. And if we cast it to `complex` as we\'ll get:\r\n```python\r\nerror: argument list for class template ""thrust::complex"" is missing\r\n```\r\nWe also can\'t cast it to use `complex64` and `complex128` as these identifiers are not defined there.\r\n\r\nSounds reasonable to you? Thanks for looking into it :)', 'comment_created': datetime.datetime(2022, 7, 25, 4, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 928476731, 'comment_body': 'ah, what in my mind was `_nanvar_core`, and we do not have to change it as it only takes real numbers. You may use `static_cast<float>` for `_nanvar_core_complex64`, and  `static_cast<double>` for `_nanvar_core_complex128`.\r\n', 'comment_created': datetime.datetime(2022, 7, 25, 5, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 928486597, 'comment_body': 'I think casting the denominator to `float` and `double`, we\'ll get a compilation error ... (dividing division operator with diff operand types which looks reasonable to me). As you told, **xref**: https://github.com/cupy/cupy/pull/6855#discussion_r921753216\r\n```python\r\nFile ""/home/khushi/Documents/repo/cupy/cupy/cuda/compiler.py"", line 305, in _compile\r\n    compiled_obj, mapping = prog.compile(options, log_stream)\r\n  File ""/home/khushi/Documents/repo/cupy/cupy/cuda/compiler.py"", line 704, in compile\r\n    raise CompileException(log, self.src, self.name, options,\r\ncupy.cuda.compiler.CompileException: /tmp/tmpatn3spsy/90a190cf40314048aa0bc41e71bb6f79257cd993.cubin.cu(48): error: no operator ""/"" matches these operands\r\n            operand types are: const T / const long long\r\n\r\n1 error detected in the compilation of ""/tmp/tmpatn3spsy/90a190cf40314048aa0bc41e71bb6f79257cd993.cubin.cu"".\r\n```\r\nI re-checked it. We got the above error. Same as we got earlier.', 'comment_created': datetime.datetime(2022, 7, 25, 5, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 928487620, 'comment_body': 'Can I see the lines you changed?', 'comment_created': datetime.datetime(2022, 7, 25, 5, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 928489587, 'comment_body': ""Sure, here's it:\r\n```python\r\n-    'nanvar_impl(x, sum / _count, max(_count - ddof, 0LL))',\r\n+    'nanvar_impl(x, sum / static_cast<float>(_count), max(_count - ddof, 0LL))',\r\n ```\r\n```python\r\n-    'nanvar_impl(x, sum / _count, max(_count - ddof, 0LL))',\r\n+    'nanvar_impl(x, sum / static_cast<double>(_count), max(_count - ddof, 0LL))',\r\n```\r\nThanks!"", 'comment_created': datetime.datetime(2022, 7, 25, 5, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 928495221, 'comment_body': 'hmm, also can I have the dumped CUDA C code when you got the error in https://github.com/cupy/cupy/pull/6869#discussion_r928486597?', 'comment_created': datetime.datetime(2022, 7, 25, 5, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 928497567, 'comment_body': 'Sure, please see:\r\n<details>\r\n<summary>CUDA C code (Click Please)</summary>\r\n\r\n<p>\r\n\r\n```cuda\r\n01 #include <cupy/complex.cuh>\r\n02 #include <cupy/carray.cuh>\r\n03 #include <cupy/atomics.cuh>\r\n04 \r\n05 typedef complex<float> S;\r\n06 typedef complex<float> T;\r\n07 typedef double U;\r\n08 \r\n09 \r\n10 template <typename S, typename T>\r\n11 __device__ T nanvar_impl(S x, T mean, long long alpha) {\r\n12     return (isnan(x) ? T(0) : T((x - mean) * (x - mean))) / alpha;\r\n13 }\r\n14 \r\n15 template <typename S, typename T>\r\n16 __device__ T nanvar_impl(complex<S> x, complex<T> mean, long long alpha) {\r\n17     return (isnan(x) ? T(0) : T(norm(x - mean))) / alpha;\r\n18 }\r\n19 \r\n20 #define REDUCE(a, b) (a + b)\r\n21 #define POST_MAP(a) (out = a)\r\n22 #define _REDUCE(_offset) if (_tid < _offset) {   _type_reduce _a = _sdata[_tid], _b = _sdata[(_tid + _offset)];   _sdata[_tid] = REDUCE(_a, _b); }\r\n23 \r\n24 typedef U _type_reduce;\r\n25 extern ""C"" __global__ void _nanvar_core(const CArray<complex<float>, 2, 1, 1> _raw_x, const CArray<complex<float>, 2, 0, 1> _raw_sum, const CArray<long long, 2, 0, 1> _raw__count, const long long ddof, CArray<double, 1, 1, 1> _raw_out, CIndexer<2, 1> _in_ind, CIndexer<1, 1> _out_ind, const int _block_stride) {\r\n26   __shared__ char _sdata_raw[512 * sizeof(_type_reduce)];\r\n27   _type_reduce *_sdata = reinterpret_cast<_type_reduce*>(_sdata_raw);\r\n28   unsigned int _tid = threadIdx.x;\r\n29 \r\n30   int _J_offset = _tid >> __popc(_block_stride - 1);  // _tid / _block_stride\r\n31   ptrdiff_t _j_offset = (ptrdiff_t)_J_offset * _out_ind.size();\r\n32   int _J_stride = 512 >> __popc(_block_stride - 1);\r\n33   ptrdiff_t _j_stride = (ptrdiff_t)_J_stride * _out_ind.size();\r\n34 \r\n35   for (ptrdiff_t _i_base = (ptrdiff_t)blockIdx.x * _block_stride;\r\n36        _i_base < _out_ind.size();\r\n37        _i_base += (ptrdiff_t)gridDim.x * _block_stride) {\r\n38     _type_reduce _s = _type_reduce(0);\r\n39     ptrdiff_t _i =\r\n40         _i_base + (_tid & (_block_stride - 1));  // _tid % _block_stride\r\n41     int _J = _J_offset;\r\n42     for (ptrdiff_t _j = _i + _j_offset; _j < _in_ind.size();\r\n43          _j += _j_stride, _J += _J_stride) {\r\n44       _in_ind.set(_j);\r\n45       const S x = _raw_x[_in_ind.get()];\r\n46 const T sum = _raw_sum[_in_ind.get()];\r\n47 const long long _count = _raw__count[_in_ind.get()];\r\n48       _type_reduce _a = static_cast<_type_reduce>(nanvar_impl(x, sum / _count, max(_count - ddof, 0LL)));\r\n49       _s = REDUCE(_s, _a);\r\n50     }\r\n51     _sdata[_tid] = _s;\r\n52     __syncthreads();\r\n53     for (unsigned int _block = 512 / 2;\r\n54          _block >= _block_stride; _block >>= 1) {\r\n55       if (_tid < _block) {\r\n56         _REDUCE(_block);\r\n57       }\r\n58       __syncthreads();\r\n59     }\r\n60     if (_tid < _block_stride) {\r\n61       _s = _sdata[_tid];\r\n62     }\r\n63     if (_tid < _block_stride && _i < _out_ind.size()) {\r\n64       _out_ind.set(static_cast<ptrdiff_t>(_i));\r\n65       U &out = _raw_out[_out_ind.get()];\r\n66       POST_MAP(_s);\r\n67     }\r\n68   }\r\n69 }\r\n```\r\n\r\n</p>\r\n</details>\r\n\r\nThanks!', 'comment_created': datetime.datetime(2022, 7, 25, 6, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 928505940, 'comment_body': 'Thanks! Seems that the error is in `_nanvar_core`. Do we still have a path that `_nanvar_core` takes complex numbers?', 'comment_created': datetime.datetime(2022, 7, 25, 6, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}, {'comment_id': 928598461, 'comment_body': ""I think there were failures in `_nanvar_core_out`. Casting that using `static_cast<T>()` works well. All the test case passes now. I've modified in the latest commit [2e92ef1](https://github.com/cupy/cupy/pull/6869/commits/2e92ef1b30c60aa64deecad46e1a602f27242f35).\r\n\r\nThanks for your help!"", 'comment_created': datetime.datetime(2022, 7, 25, 8, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'khushi-411', 'type': 'User'}, {'comment_id': 928639175, 'comment_body': 'Good! let me kick the CI.', 'comment_created': datetime.datetime(2022, 7, 25, 9, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'takagi', 'type': 'User'}]","[{'commit_sha': '92ec7583e67408eee6512c9a3a6d9aa7c9c9fcea', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86e3c47e8d2cd53c1a8a81255ea59a41b12b64eb', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d7c72b6337ff63c6af53ad821f47ff8d8de0da', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69ea7e06191ddd769e1896c2425398fddf9baabc', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03535d7eccd03c925d2140577914e5d8c6a55496', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '123c8f43a0cb1a2c4efe6c6eb96be0ebbb2c2f6f', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86f86118957dc02db68bffe7e7613daed97f79e3', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80093b63901140520b3b0c8b39b2dadbc5f275a2', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fec688029fde03f5ec0475af6537daf6b25720a', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e92ef1b30c60aa64deecad46e1a602f27242f35', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e64209a30aaa7ab1760491661fb644f3ab5aebb', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d899ed0fe6b234652b79557f2641b8811332b51', 'committer_username': 'khushi-411', 'committer_name': 'Khushi Agrawal', 'committer_email': 'khushiagrawal411@gmail.com', 'commit_date': datetime.datetime(2020, 3, 16, 16, 36, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8204eef9a57eb397d306c4449d3dd0f14953b936', 'committer_username': 'takagi', 'committer_name': 'Masayuki Takagi', 'committer_email': 'kamonama@gmail.com', 'commit_date': datetime.datetime(2011, 11, 28, 5, 21, 39, tzinfo=datetime.timezone.utc)}]",Khushi Agrawal,62256509,khushiagrawal411@gmail.com,User,,41,,27,46

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
72523920,cupy,cupy/cupy,Python,802,8065,128,382,28890,635,19,94,"[{'id': 1026325293, 'number': 6990, 'closed': datetime.datetime(2022, 9, 2, 8, 44, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 15, 11, 17, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1546028.0, 'time_delta': '17 days, 21:27:08', 'additions': 430, 'deletions': 3, 'state': 'closed'}, {'id': 1015437381, 'number': 6958, 'closed': datetime.datetime(2022, 8, 29, 6, 3, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 18, 7, 25, tzinfo=datetime.timezone.utc), 'time_taken': 2289394.0, 'time_delta': '26 days, 11:56:34', 'additions': 555, 'deletions': 0, 'state': 'closed'}, {'id': 1013444225, 'number': 6944, 'closed': datetime.datetime(2022, 8, 1, 8, 12, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 1, 7, 14, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3489.0, 'time_delta': '0:58:09', 'additions': 35, 'deletions': 0, 'state': 'closed'}, {'id': 1005763896, 'number': 6890, 'closed': datetime.datetime(2022, 8, 1, 2, 55, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 22, 12, 54, 4, tzinfo=datetime.timezone.utc), 'time_taken': 828112.0, 'time_delta': '9 days, 14:01:52', 'additions': 114, 'deletions': 0, 'state': 'closed'}, {'id': 997513084, 'number': 6869, 'closed': datetime.datetime(2022, 8, 1, 10, 13, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 8, 45, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1474102.0, 'time_delta': '17 days, 1:28:22', 'additions': 37, 'deletions': 16, 'state': 'closed'}, {'id': 988142740, 'number': 6855, 'closed': datetime.datetime(2022, 8, 8, 6, 3, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 4, 27, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2856978.0, 'time_delta': '33 days, 1:36:18', 'additions': 324, 'deletions': 0, 'state': 'closed'}, {'id': 984973934, 'number': 6849, 'closed': datetime.datetime(2022, 7, 13, 13, 45, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 13, 31, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1037623.0, 'time_delta': '12 days, 0:13:43', 'additions': 168, 'deletions': 0, 'state': 'closed'}, {'id': 981370335, 'number': 6823, 'closed': datetime.datetime(2022, 7, 13, 13, 45, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 28, 12, 55, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1298983.0, 'time_delta': '15 days, 0:49:43', 'additions': 131, 'deletions': 2, 'state': 'closed'}, {'id': 980462013, 'number': 6813, 'closed': datetime.datetime(2023, 5, 10, 5, 10, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 27, 19, 44, 49, tzinfo=datetime.timezone.utc), 'time_taken': 27336331.0, 'time_delta': '316 days, 9:25:31', 'additions': 50, 'deletions': 8, 'state': 'closed'}, {'id': 969749111, 'number': 6790, 'closed': datetime.datetime(2022, 6, 28, 4, 37, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 16, 20, 18, 10, tzinfo=datetime.timezone.utc), 'time_taken': 980346.0, 'time_delta': '11 days, 8:19:06', 'additions': 413, 'deletions': 0, 'state': 'closed'}, {'id': 963184338, 'number': 6776, 'closed': datetime.datetime(2022, 6, 16, 10, 10, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 9, 17, 58, 35, tzinfo=datetime.timezone.utc), 'time_taken': 576724.0, 'time_delta': '6 days, 16:12:04', 'additions': 61, 'deletions': 0, 'state': 'closed'}, {'id': 959405239, 'number': 6773, 'closed': datetime.datetime(2022, 9, 5, 10, 55, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 6, 18, 13, 58, tzinfo=datetime.timezone.utc), 'time_taken': 7836077.0, 'time_delta': '90 days, 16:41:17', 'additions': 189, 'deletions': 0, 'state': 'closed'}, {'id': 884236108, 'number': 6571, 'closed': datetime.datetime(2022, 3, 28, 4, 45, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 20, 18, 57, 43, tzinfo=datetime.timezone.utc), 'time_taken': 640054.0, 'time_delta': '7 days, 9:47:34', 'additions': 36, 'deletions': 0, 'state': 'closed'}, {'id': 853698826, 'number': 6469, 'closed': datetime.datetime(2023, 1, 20, 13, 2, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 15, 21, 2, 56, tzinfo=datetime.timezone.utc), 'time_taken': 29260763.0, 'time_delta': '338 days, 15:59:23', 'additions': 227, 'deletions': 79, 'state': 'closed'}, {'id': 841079361, 'number': 6433, 'closed': datetime.datetime(2022, 2, 10, 16, 35, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 6, 14, 19, 2, tzinfo=datetime.timezone.utc), 'time_taken': 353760.0, 'time_delta': '4 days, 2:16:00', 'additions': 95, 'deletions': 0, 'state': 'closed'}, {'id': 835335406, 'number': 6402, 'closed': datetime.datetime(2022, 2, 10, 4, 3, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 30, 11, 8, 28, tzinfo=datetime.timezone.utc), 'time_taken': 924893.0, 'time_delta': '10 days, 16:54:53', 'additions': 181, 'deletions': 44, 'state': 'closed'}, {'id': 828797737, 'number': 6358, 'closed': datetime.datetime(2022, 3, 29, 4, 44, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 21, 18, 53, 39, tzinfo=datetime.timezone.utc), 'time_taken': 5737823.0, 'time_delta': '66 days, 9:50:23', 'additions': 231, 'deletions': 12, 'state': 'closed'}, {'id': 828787230, 'number': 6357, 'closed': datetime.datetime(2022, 1, 26, 15, 20, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 21, 18, 35, 52, tzinfo=datetime.timezone.utc), 'time_taken': 420294.0, 'time_delta': '4 days, 20:44:54', 'additions': 49, 'deletions': 0, 'state': 'closed'}, {'id': 822928725, 'number': 6316, 'closed': datetime.datetime(2022, 1, 17, 8, 39, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 14, 17, 13, 13, tzinfo=datetime.timezone.utc), 'time_taken': 228399.0, 'time_delta': '2 days, 15:26:39', 'additions': 118, 'deletions': 2, 'state': 'closed'}, {'id': 818806437, 'number': 6305, 'closed': datetime.datetime(2022, 1, 17, 4, 13, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 11, 15, 12, 1, tzinfo=datetime.timezone.utc), 'time_taken': 478894.0, 'time_delta': '5 days, 13:01:34', 'additions': 113, 'deletions': 3, 'state': 'closed'}, {'id': 815218533, 'number': 6294, 'closed': datetime.datetime(2022, 1, 12, 7, 11, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 6, 4, 25, 41, tzinfo=datetime.timezone.utc), 'time_taken': 528356.0, 'time_delta': '6 days, 2:45:56', 'additions': 22, 'deletions': 0, 'state': 'closed'}, {'id': 811901000, 'number': 6282, 'closed': datetime.datetime(2022, 1, 12, 15, 59, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 30, 10, 32, 13, tzinfo=datetime.timezone.utc), 'time_taken': 1142817.0, 'time_delta': '13 days, 5:26:57', 'additions': 25, 'deletions': 2, 'state': 'closed'}, {'id': 811424977, 'number': 6280, 'closed': datetime.datetime(2022, 1, 12, 3, 56, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 29, 11, 28, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1182509.0, 'time_delta': '13 days, 16:28:29', 'additions': 132, 'deletions': 1, 'state': 'closed'}, {'id': 810527774, 'number': 6275, 'closed': datetime.datetime(2022, 1, 24, 5, 39, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 27, 17, 46, 48, tzinfo=datetime.timezone.utc), 'time_taken': 2375556.0, 'time_delta': '27 days, 11:52:36', 'additions': 47, 'deletions': 3, 'state': 'closed'}, {'id': 805392478, 'number': 6254, 'closed': datetime.datetime(2022, 1, 18, 2, 52, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 17, 13, 58, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2724811.0, 'time_delta': '31 days, 12:53:31', 'additions': 82, 'deletions': 4, 'state': 'closed'}, {'id': 779868806, 'number': 6089, 'closed': datetime.datetime(2022, 2, 7, 6, 45, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 13, 9, 47, 52, tzinfo=datetime.timezone.utc), 'time_taken': 7419463.0, 'time_delta': '85 days, 20:57:43', 'additions': 109, 'deletions': 4, 'state': 'closed'}, {'id': 779447847, 'number': 6085, 'closed': datetime.datetime(2021, 12, 3, 18, 0, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 12, 14, 21, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1827545.0, 'time_delta': '21 days, 3:39:05', 'additions': 25, 'deletions': 1, 'state': 'closed'}]"
