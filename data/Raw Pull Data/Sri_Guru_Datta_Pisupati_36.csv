pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1383098899,Astronomy Using Unevenly Sampled Data : GSoC 2023,"This is a work in progress. Feel free to provide critique and suggestions for any bugs that may be or incorrect behaviour. So far I have implemented the base Lomb-Scargle Cross Spectrum and Power Spectrum classes. Do mention any useful statistical functions that may be of interest to people dealing with unevenly sampled data. I have so far only completed the slow implementation. As I work on the fast implementation, tests, statistical functions and documentation, I will tack on commits to this PR as i progress.",True,737,https://api.github.com/repos/StingraySoftware/stingray/pulls/737,https://github.com/StingraySoftware/stingray/pull/737,closed,1313,14,11,31,11,25,0,0,[],2023-06-07 17:30:03+00:00,2023-09-28 10:42:53+00:00,9738770.0,"112 days, 17:12:50","[{'comment_id': 1223573994, 'comment_body': '`fourier.py` should only contain funcitonality that is agnostic of Stingray classes like EventList, Lightcurve, etc.\r\nPlease only create here functions that work on simple numpy arrays (e.g. `events.time` or `lightcurve.counts`)', 'comment_created': datetime.datetime(2023, 6, 8, 21, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1225388518, 'comment_body': 'Changed it to take numpy arrays and made the corresponding changes in commit  https://github.com/pupperemeritus/stingray/commit/8fdf44ae7fbe395050a384fd776c9c125ac6e996. Also fixed the type hinting errors', 'comment_created': datetime.datetime(2023, 6, 10, 14, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pupperemeritus', 'type': 'User'}, {'comment_id': 1303860327, 'comment_body': 'This should not be relevant for Lomb Scargle', 'comment_created': datetime.datetime(2023, 8, 24, 6, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1303860657, 'comment_body': 'This should not be relevant for Lomb Scargle ', 'comment_created': datetime.datetime(2023, 8, 24, 6, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1315869523, 'comment_body': 'No need for deepcopy', 'comment_created': datetime.datetime(2023, 9, 5, 13, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1315869927, 'comment_body': '`len` is slow. Please use `np.size`', 'comment_created': datetime.datetime(2023, 9, 5, 13, 5, 18, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1315874510, 'comment_body': 'in case the user gives a list of frequencies, this should not fail. Better to wrap `freqs` with `asarray`', 'comment_created': datetime.datetime(2023, 9, 5, 13, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1315876322, 'comment_body': 'Avoid useless operations: e.g. you can do a single sqrt here (sqrt(0.5 * num_y))', 'comment_created': datetime.datetime(2023, 9, 5, 13, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1315925569, 'comment_body': ""The test I added shows that this should work. At the moment, it only works if the time arrays are the same though. This should be understood. There is some reference phase I'm missing"", 'comment_created': datetime.datetime(2023, 9, 5, 13, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1315930460, 'comment_body': ""All methods that are not relevant... should not be there at all. The attribute errors that you added don't add any information to the error that Python throws by itself."", 'comment_created': datetime.datetime(2023, 9, 5, 13, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1317634735, 'comment_body': ""They actually don't throw any error since I am inheriting from Crossspectrum and the parent methods dont have any filter except time_lag. Which is anyway a valid method so it needs to be overridden anyway to surpass it. "", 'comment_created': datetime.datetime(2023, 9, 6, 17, 47, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pupperemeritus', 'type': 'User'}, {'comment_id': 1317635651, 'comment_body': 'Changed', 'comment_created': datetime.datetime(2023, 9, 6, 17, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pupperemeritus', 'type': 'User'}, {'comment_id': 1317640883, 'comment_body': 'Yes. The tests are working, though have to relax the tolerances a tiny bit. 2% on absolute and relative each.', 'comment_created': datetime.datetime(2023, 9, 6, 17, 53, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pupperemeritus', 'type': 'User'}, {'comment_id': 1323063935, 'comment_body': 'Instead of raising ValueError, I would just say that the lags will not be correct. The process should actually work.', 'comment_created': datetime.datetime(2023, 9, 12, 13, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1323066379, 'comment_body': 'The logic here is wrong. If you have event lists, the time arrays will _always_ be different. ', 'comment_created': datetime.datetime(2023, 9, 12, 13, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1323067714, 'comment_body': ""In general, I'd say you are overcomplicating the data type selection here. You have various instances of `isinstance` filtering that should be simplified. What don't you like of the machinery in the standard Crossspectrum?"", 'comment_created': datetime.datetime(2023, 9, 12, 13, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1323381004, 'comment_body': 'I think it was something along the lines of EventList, Lightcurve intermixing while accounting for mixed type with one none. I think that train of thought went quiet overcomplicated. I guess I will simplify and bring it in line with the regular crossspectrum', 'comment_created': datetime.datetime(2023, 9, 12, 17, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pupperemeritus', 'type': 'User'}, {'comment_id': 1328330288, 'comment_body': '```suggestion\r\n\r\ndef test_eventlist(self):\r\n    ev1 = EventList.from_lc(self.lc1)\r\n    ev2 = EventList.from_lc(self.lc2)\r\n    ev_lscs = LombScargleCrossspectrum(ev1, ev2, dt=self.lc1.dt)\r\n    assert np.allclose(ev_lscs.power, self.lscs.power)\r\n```', 'comment_created': datetime.datetime(2023, 9, 18, 7, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1328333552, 'comment_body': 'I will do that', 'comment_created': datetime.datetime(2023, 9, 18, 7, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pupperemeritus', 'type': 'User'}, {'comment_id': 1329584411, 'comment_body': '```suggestion\r\n    def test_eventlist(self):\r\n        ev1 = EventList.from_lc(self.lc1)\r\n        ev2 = EventList.from_lc(self.lc2)\r\n        ev_lscs = LombScargleCrossspectrum(ev1, ev2, dt=self.lc1.dt)\r\n        assert np.allclose(ev_lscs.power, self.lscs.power)\r\n\r\n```', 'comment_created': datetime.datetime(2023, 9, 19, 5, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1333096593, 'comment_body': '```suggestion\r\n    def test_valid_method(self):\r\n        lscs_s = LombScargleCrossspectrum(self.lc1, self.lc2, method=""slow"")\r\n        assert lscs.method == ""slow""\r\n        lscs_f = LombScargleCrossspectrum(self.lc1, self.lc2, method=""fast"")\r\n        assert lscs.method == ""fast""\r\n        assert np.allclose(lscs_f.power, lscs_s.power)\r\n```', 'comment_created': datetime.datetime(2023, 9, 21, 13, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1334010583, 'comment_body': 'Why the choice of having just positional arguments here?', 'comment_created': datetime.datetime(2023, 9, 22, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}, {'comment_id': 1334389667, 'comment_body': 'I wanted to force the use of the classes as opposed to the lfunction. Unless the user really knows what they are doing', 'comment_created': datetime.datetime(2023, 9, 22, 13, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pupperemeritus', 'type': 'User'}, {'comment_id': 1334567231, 'comment_body': 'added it and modified it slightly. ', 'comment_created': datetime.datetime(2023, 9, 22, 15, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pupperemeritus', 'type': 'User'}, {'comment_id': 1336762747, 'comment_body': ""I don't think we need to force anything. Having a function is often more intuitive for some users, and I'd say it doesn't hurt to have a simple interface with reasonable default values. "", 'comment_created': datetime.datetime(2023, 9, 26, 7, 38, 25, tzinfo=datetime.timezone.utc), 'commenter': 'matteobachetti', 'type': 'User'}]","[{'commit_sha': 'e6066c5c2643f27d820b115223385085c7b77798', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf459e715aef3e07ea9c25ded11d6d9c6c534538', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1354896907fa6dcb6cb4892bcd3c8a27004ac625', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7139366c8e59474c0b17d3f0c8d55d9634fa51', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '315a116abf42cc3058f9e8cade110999c162bb18', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '012c2e208aecbd8cab18876f48da0104722f5077', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed68d7570556e25994ff9f6e54368cab9acbc25c', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f225487cde69efab18c8102cd463c8942f6fdbba', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b91e8b8dcab513eb8c34f0cb38b72224054db26', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3bd5d2a62ea922fba95b9f80c34ea45de3bff0e', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb2be54c3a6eb6a518a33dde5e7fdb7e0808b68', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1e6bc5b1e2b1fdaa7c1ead293085ba7b0f85858', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9efe0099a802a85787d656dbfcf5667816109419', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd91bc4a8d23ab6891593d0aeae2f77f6aca67bc', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc6541afd6de990f41519a03443909d726bfe506', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed96e46a9250fd1f028772c42869793159a1cc7b', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5d47b16de1633253ca4b887d95882ec823ae387', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c37abc8aff722a40e5ac68c3848f356b0d19bf3', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68fcf8127dc1d5d836ea93a670173143abd1da8a', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd89f0f5fa42f9be92439510c2d1f8e0662e929db', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf0af0d020a5e8e33d10338e376906d92e535cc', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53521ff3f7ba9cdcf2dcf0992cc3b23182fc180d', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c55c0d620989a17e73459d70fa6514e0d4ac4605', 'committer_username': 'pupperemeritus', 'committer_name': 'Sri Guru Datta Pisupati', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 16, 2, 3, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d231445e79966e887fa1ad1fa589b2ae3a83be0', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1957239b298604e54dc4cd1313d67d0929829c91', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da9e4b681475da36bfbd9067c28b062f468f9651', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436db70406aea49cd3bb7bdcb4640c2f0a1f545e', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03606c812e1da90d93c3ce125c146c1eb8929ce7', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42087dd19be917012976474f70891bd2d1e7bd4a', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a162a50414d6023e7cf0810e3caa447a1d2516b', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a1533407d6d32ee1258d3c6d39b43c580b835b', 'committer_username': 'matteobachetti', 'committer_name': 'Matteo Bachetti', 'committer_email': None, 'commit_date': datetime.datetime(2014, 4, 5, 16, 10, 53, tzinfo=datetime.timezone.utc)}]",Sri Guru Datta Pisupati,80730927,,User,,19,,12,10

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
43449839,stingray,StingraySoftware/stingray,Python,141,169,21,55,3974,44,26,9,"[{'id': 1722003285, 'number': 801, 'closed': datetime.datetime(2024, 2, 14, 11, 24, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 12, 14, 1, 2, tzinfo=datetime.timezone.utc), 'time_taken': 163420.0, 'time_delta': '1 day, 21:23:40', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 1569252753, 'number': 776, 'closed': datetime.datetime(2023, 10, 24, 9, 42, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 23, 13, 58, 59, tzinfo=datetime.timezone.utc), 'time_taken': 70994.0, 'time_delta': '19:43:14', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1519606711, 'number': 756, 'closed': datetime.datetime(2023, 9, 18, 14, 41, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 18, 14, 18, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1346.0, 'time_delta': '0:22:26', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 1482371038, 'number': 747, 'closed': datetime.datetime(2023, 8, 21, 8, 56, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 21, 7, 49, 21, tzinfo=datetime.timezone.utc), 'time_taken': 4029.0, 'time_delta': '1:07:09', 'additions': 3, 'deletions': 4, 'state': 'closed'}, {'id': 1383098899, 'number': 737, 'closed': datetime.datetime(2023, 9, 28, 10, 42, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 7, 17, 30, 3, tzinfo=datetime.timezone.utc), 'time_taken': 9738770.0, 'time_delta': '112 days, 17:12:50', 'additions': 1313, 'deletions': 14, 'state': 'closed'}, {'id': 1282650746, 'number': 710, 'closed': datetime.datetime(2023, 6, 10, 20, 32, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 20, 13, 34, 15, tzinfo=datetime.timezone.utc), 'time_taken': 7109917.0, 'time_delta': '82 days, 6:58:37', 'additions': 424, 'deletions': 227, 'state': 'closed'}, {'id': 1281322229, 'number': 708, 'closed': datetime.datetime(2023, 6, 10, 20, 33, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 18, 20, 54, 51, tzinfo=datetime.timezone.utc), 'time_taken': 7256328.0, 'time_delta': '83 days, 23:38:48', 'additions': 44, 'deletions': 11, 'state': 'closed'}]"
