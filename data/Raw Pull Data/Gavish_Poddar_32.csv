pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
660926303,Optional Language Detect,"Implementing optional language detection and allow the creation of custom language detection libraries by users.

This work is currently in progress and this PR is created for the monitoring purpose by the maintainers to suggest progress.


This PR is currently not complete.

TODOS:
- [X] Restructuring protect to pass function for language detection.
- [X] Managing HTTP exception for `fasttext` model download. 
- [x] Updating `setup.py` for optional language detection.
- [x] Mock test of `parse`, `search_dates` and `DateDataParser`.
- [x] Unit tests for language detect functions.
- [x] Functionality analysis of the implemented language detection.
- [x] Testing optional language detection settings.
- [x] Make `apply_setting` independent functions.
- [x] Fasttext model download manager for models.
- [x] Documentation optional language detection settings.
- [x] Language Mapping (CLDR & ISO 639).
- [x] Check working with other settings.
- [x] Removing unsupported locale from language detecting
- [x] Improving docs.
- [x] Setting fasttext default language.
- [x] Removing langauge_map.json and sinking to language_data.py
- [x] langdetect set default DetectorFactory without changing global state.
- [x] `dateparser-download` set default caching folder.
- [x] Documenting `dateparser-download`.
- [x] Changes for preventing breaking changes.
- [x] `detect_languages_func` -> `detect_languages_function`

",True,932,https://api.github.com/repos/scrapinghub/dateparser/pulls/932,https://github.com/scrapinghub/dateparser/pull/932,closed,1218,25,25,141,26,444,0,0,[],2021-06-03 13:52:56+00:00,2021-09-06 13:09:11+00:00,8205375.0,"94 days, 23:16:15","[{'comment_id': 644815844, 'comment_body': 'Hi @noviluni,\r\nCan I use this kind of in program installation of the additional libraries?', 'comment_created': datetime.datetime(2021, 6, 3, 13, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 645393693, 'comment_body': 'IMO we should not try to install anything automatically, this is on the user to decide.', 'comment_created': datetime.datetime(2021, 6, 4, 8, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 645428494, 'comment_body': 'Yeah I have implemented that here. ', 'comment_created': datetime.datetime(2021, 6, 4, 9, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 645876516, 'comment_body': ""Hi @gavishpoddar, no you shouldn't :slightly_smiling_face: \r\n\r\nI could try to explain the reasons behind it (is not pythonic, you are installing something without asking the user, etc), but I think it's better to talk about possible approaches.\r\n\r\nProbably the best approach is adding an optional dependency. These can be indicated in the `setup.py` file with the `extras_require` property. We do it to be able to use the `hijri` and `jalali` calendars. To use them you have to do: `pip install dateparser[calendars]`. \r\n\r\nI think you should find some examples on the internet (apart from the `calendars` example in this project). Let me know if you don't know how to do it.\r\n\r\n(What you could do is capturing the `ImportError` and re-raise it giving a hint on how to enable it.)"", 'comment_created': datetime.datetime(2021, 6, 4, 21, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645878144, 'comment_body': 'I already commented about a better approach, but independently you should capture here only the `ImportError`:\r\n\r\n```suggestion\r\ntry:\r\n    from langdetect import detect_langs\r\nexcept ImportError:\r\n```', 'comment_created': datetime.datetime(2021, 6, 4, 21, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645880985, 'comment_body': 'I know this is a WIP but I prefer to write it. Instead of using parameters here, I think it would be a better idea to use the settings. If we add all ""configuration"" aspects here the signature of the function would be too long.\r\n\r\nI mean something like:\r\n```python\r\ndateparser.parse(\r\n    \'<datestring>\', \r\n    settings={\r\n        \'LANGUAGE_DETECTION_ENABLED\': True, \r\n        \'LANGUAGE_DETECTION_METHOD\': \'lang_detect\'\r\n    }\r\n)\r\n```\r\n\r\n(the settings names are just ideas, I think we should find something shorter.)\r\n\r\nHowever don\'t worry about this, we can keep it like this and change it to settings later.', 'comment_created': datetime.datetime(2021, 6, 4, 22, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645881175, 'comment_body': 'No a good practice to use global variables, I will check it later and return to you with my suggestion.', 'comment_created': datetime.datetime(2021, 6, 4, 22, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645881507, 'comment_body': '```suggestion\r\n    if loaded_parser is None:\r\n```\r\n\r\nor\r\n\r\n```suggestion\r\n    if not loaded_parser:\r\n```\r\n\r\n(I think the second is better for this case).', 'comment_created': datetime.datetime(2021, 6, 4, 22, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645881852, 'comment_body': 'same here, we should specify which exception are we capturing instead of capturing all :)', 'comment_created': datetime.datetime(2021, 6, 4, 22, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645882556, 'comment_body': 'as this is a function (not a class), the name should be a verb, so I would change it to something like \r\n\r\n`parse_languages` or `detect_languages` \r\n\r\n(and I also would put a plural because it returns multiple matches).', 'comment_created': datetime.datetime(2021, 6, 4, 22, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645963723, 'comment_body': 'Great, I will try to do that myself if I need help I will ask for help 🙂', 'comment_created': datetime.datetime(2021, 6, 5, 8, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 645971375, 'comment_body': 'That will be great, I was thinking of creating a class should that be better', 'comment_created': datetime.datetime(2021, 6, 5, 10, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 647710004, 'comment_body': 'Is caching as this doable?', 'comment_created': datetime.datetime(2021, 6, 8, 18, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648054376, 'comment_body': ""I don't think it's a sound method to cache this - if someone passes changed settings, we'll get old results. Why do we need our own caching here? importlib already has a cache."", 'comment_created': datetime.datetime(2021, 6, 9, 7, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648054703, 'comment_body': 'I think I answered below https://github.com/scrapinghub/dateparser/pull/932/files#r648054376', 'comment_created': datetime.datetime(2021, 6, 9, 7, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648055708, 'comment_body': 'why do we take only the first language and not all above threshold?', 'comment_created': datetime.datetime(2021, 6, 9, 7, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648056709, 'comment_body': ""Do we need to convert it to string? I think it should be possible to get probabilities directly.\r\n\r\nAlso, don't we want to get all language detections?"", 'comment_created': datetime.datetime(2021, 6, 9, 7, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648057667, 'comment_body': ""I'd rather not include this in the code (I mean this whole file), and also I'd rather tackle the question of user extensibility later, once our internal API is stable."", 'comment_created': datetime.datetime(2021, 6, 9, 7, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648168129, 'comment_body': 'Right I will resolve it', 'comment_created': datetime.datetime(2021, 6, 9, 10, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648222598, 'comment_body': 'For more than one predictions in `fast_text` we need to send the number to predictions we want.\r\n\r\nI have set the top 3 predictions for now. Pl suggest', 'comment_created': datetime.datetime(2021, 6, 9, 11, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648254001, 'comment_body': 'What do you think about taking all predictions that are above threshold?', 'comment_created': datetime.datetime(2021, 6, 9, 12, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648263236, 'comment_body': 'I am fixing \r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 9, 12, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648290769, 'comment_body': 'Ok, Thanks', 'comment_created': datetime.datetime(2021, 6, 9, 13, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648295759, 'comment_body': 'Can we set default language here or should that be in the `dateparser/date`', 'comment_created': datetime.datetime(2021, 6, 9, 13, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 649859472, 'comment_body': '```suggestion\r\n            if self.languages and not self._settings.LANGUAGE_DETECTION_STRICT_USE:\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 10, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649859766, 'comment_body': 'we need to follow pep8, so you have to add an empty line at the end of the file.', 'comment_created': datetime.datetime(2021, 6, 11, 10, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649859931, 'comment_body': 'You have to add an empty line at the end of the file.', 'comment_created': datetime.datetime(2021, 6, 11, 10, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649860478, 'comment_body': 'Could you revert the changes for this file? You should remove the line before `_default_parser = DateDataParser()` and add the empty line at the end of the file', 'comment_created': datetime.datetime(2021, 6, 11, 10, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649860895, 'comment_body': ""Don't forget to add the other new settings here too."", 'comment_created': datetime.datetime(2021, 6, 11, 10, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649861708, 'comment_body': 'I think you can remove the empty line between `LANGUAGE_DETECTION_METHOD` and `LANGUAGE_DETECTION_STRICT_USE`.', 'comment_created': datetime.datetime(2021, 6, 11, 10, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649862311, 'comment_body': 'Now that this is automatically downloaded, you should:\r\n\r\n1. Add the file to the `.gitignore` file.\r\n2. Remove the file from this PR', 'comment_created': datetime.datetime(2021, 6, 11, 10, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649862954, 'comment_body': 'what is this `language = str`? :thinking: ', 'comment_created': datetime.datetime(2021, 6, 11, 10, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649864457, 'comment_body': 'These new changes are creating a complex nesting with the if-else statements. To fix this you should use returns:\r\n\r\n```python\r\nif settings.LANGUAGE_DETECTION_ENABLED:\r\n    ...\r\n    return detect_languages(text)[0]\r\n\r\nif isinstance(languages, (list, tuple, Set)):\r\n    ...\r\n    return self.language_detector._best_language(text)\r\n```\r\n\r\n(This is, put it how it was before but adding your `if` and `return` before.)', 'comment_created': datetime.datetime(2021, 6, 11, 10, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649864755, 'comment_body': 'it seems a good idea to add `check_settings()` here :+1: ', 'comment_created': datetime.datetime(2021, 6, 11, 10, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649865011, 'comment_body': 'You have to add an empty line at the end to follow pep8', 'comment_created': datetime.datetime(2021, 6, 11, 10, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 650714271, 'comment_body': 'Can this be imported on top?', 'comment_created': datetime.datetime(2021, 6, 14, 7, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 650716113, 'comment_body': 'Can this be imported on top?', 'comment_created': datetime.datetime(2021, 6, 14, 7, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 650717560, 'comment_body': ""Even I did not get it's purpose."", 'comment_created': datetime.datetime(2021, 6, 14, 7, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 650721609, 'comment_body': 'New line is required at the end of file as per PEP8.', 'comment_created': datetime.datetime(2021, 6, 14, 7, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 654241588, 'comment_body': 'can you remove this extra line? (line 38) :)', 'comment_created': datetime.datetime(2021, 6, 18, 8, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654242437, 'comment_body': ""I think you were using this file to test things, but it shouldn't be included in the PR, especially now that we have the tests."", 'comment_created': datetime.datetime(2021, 6, 18, 8, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654247393, 'comment_body': 'These dependencies shouldn\'t be here because they are not ""test"" requirements (although they are needed to run the tests). A better approach would be adding the name of the ""extra"" in the tox environments, like what we do with the `calendars` extra. :)\r\n\r\n![image](https://user-images.githubusercontent.com/22377678/122532095-72e3e180-d020-11eb-9834-8fb239c6111d.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 18, 8, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654251329, 'comment_body': 'the name of the library is ""fasttext"" (without the underscore), so I would rename this file to `fasttext.py`.\r\n\r\nthe same for `lang_detect.py` --> `langdetect.py`', 'comment_created': datetime.datetime(2021, 6, 18, 8, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654259419, 'comment_body': ""This process of downloading the model didn't work for me. No need to fix it now, but if you have time you could try in a new installation to see if it works for you."", 'comment_created': datetime.datetime(2021, 6, 18, 8, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654267464, 'comment_body': ""We have two options here:\r\n* Re-raise the exception with another type of exception (maybe we can create a new exception)\r\n* Ignore / log the exception.\r\n\r\nIn any case, printing shouldn't be the final result."", 'comment_created': datetime.datetime(2021, 6, 18, 9, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654276082, 'comment_body': '```suggestion\r\n        if self.detect_languages_func:\r\n            detected_languages = self.detect_languages_func(\r\n                date_string, settings=self._settings\r\n            ) or self._settings.DEFAULT_LANGUAGE\r\n        \r\n            if self._settings.LANGUAGE_DETECTION_STRICT_USE or not self.languages:\r\n                self.languages = detected_languages\r\n            else:\r\n                self.languages += detected_languages\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654277579, 'comment_body': ""I think it should be named `DEFAULT_LANGUAGES` as it's a list of languages."", 'comment_created': datetime.datetime(2021, 6, 18, 9, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654277901, 'comment_body': 'it is `apply_settings` necessary? :thinking: ', 'comment_created': datetime.datetime(2021, 6, 18, 9, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654278738, 'comment_body': '```suggestion\r\n            detected_languages = detect_languages_func(text, settings=settings) or settings.DEFAULT_LANGUAGE\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654280913, 'comment_body': '```suggestion\r\n        self.assertEqual(type(self.result), list)\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654281531, 'comment_body': '```suggestion\r\nfrom dateparser.custom_lang_detect.fast_text import detect_languages as fast_text_detect_languages\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654281620, 'comment_body': '```suggestion\r\nfrom dateparser.custom_lang_detect.lang_detect import detect_languages as lang_detect_detect_languages\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654282677, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2021, 6, 18, 9, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654288045, 'comment_body': 'the idea is good, but this is not a ""mock"". What you can do is mocking the fasttext library.\r\nHere an example:  https://github.com/scrapinghub/dateparser/blob/803d4451ccc18e147363b7824cd38db4307e0740/tests/test_date.py#L522-L527\r\n\r\nIn the case of `langdetect`, for example, you could mock `langdetect.detect_langs` to return whatever you want.\r\n\r\n@lopuhin, what do you think? Any suggestion when testing/mocking?', 'comment_created': datetime.datetime(2021, 6, 18, 9, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654351715, 'comment_body': '+1, I think we can mock the language detection library entry-point', 'comment_created': datetime.datetime(2021, 6, 18, 11, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 654976088, 'comment_body': 'as this is an internal variable, I think you can use `language_code` instead of `_language_code`', 'comment_created': datetime.datetime(2021, 6, 20, 19, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654976175, 'comment_body': 'I think is better to restore this empty line to separate better one `if-else` and the other `if-else`.', 'comment_created': datetime.datetime(2021, 6, 20, 19, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654976280, 'comment_body': '```suggestion\r\n        detected_language = self.language_detector._best_language(text) or settings.DEFAULT_LANGUAGES[0]\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 19, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654976361, 'comment_body': '```suggestion\r\n            detected_languages = detect_languages_func(text, settings=settings) or None\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 19, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654976472, 'comment_body': 'why do you need `detected_languages or None`? for the next line, if you do `if not detected_languages:` and `detected_languages` is an empty array it will also return True', 'comment_created': datetime.datetime(2021, 6, 20, 19, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 655153682, 'comment_body': '@gavishpoddar what do you think about removing the class and leaving tests in individual functions? Given that they are already almost independent, I think it would make it much easier to read.', 'comment_created': datetime.datetime(2021, 6, 21, 7, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 657696458, 'comment_body': 'Is the implemented mock correct?\r\n\r\nPl suggest', 'comment_created': datetime.datetime(2021, 6, 24, 7, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658114369, 'comment_body': 'sorry if this was already discussed and I missed it - do we need a new argument ``detect_languages_func``, can this go into settings instead?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658115093, 'comment_body': 'I think we wanted to have a model download command instead of downloading the model on the module level?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658116148, 'comment_body': 'settings defaults to ``None`` above but here we access it without any check - so either the signature is not correct or we need a check?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658116639, 'comment_body': ""I think it's bad policy to modify the global state of the library, especially on import. Why do we do this?"", 'comment_created': datetime.datetime(2021, 6, 24, 16, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658119008, 'comment_body': 'why do we return only the first language?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658120589, 'comment_body': ""I think ``micro_data[0] == obj[:len(micro_data[0])]`` can be simplified to something like ``obj.startswith(micro_data[0])``. Also don't we want to be more strict here and check for ``obj.startswith(micro_data[0] + '-')``?"", 'comment_created': datetime.datetime(2021, 6, 24, 16, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658120903, 'comment_body': 'Is this a backwards incompatible change?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658121962, 'comment_body': 'Is language mapping going to be independent on the library?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658155246, 'comment_body': 'I am working on it', 'comment_created': datetime.datetime(2021, 6, 24, 17, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658156673, 'comment_body': 'The library suggests setting this:\r\n\r\n```\r\nLanguage detection algorithm is non-deterministic, which means that if you try to run it on a text which is either too short or too ambiguous, you might get different results everytime you run it.\r\n\r\nTo enforce consistent results, call following code before the first language detection:\r\n\r\nfrom langdetect import DetectorFactory\r\nDetectorFactory.seed = 0\r\n```\r\n\r\nPl suggest if I should remove this', 'comment_created': datetime.datetime(2021, 6, 24, 17, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658160294, 'comment_body': 'This function `detect_language` of `search_dates`  is required to return one language only.', 'comment_created': datetime.datetime(2021, 6, 24, 17, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658165117, 'comment_body': 'Sorry, I could not understand.\r\nThe use of this function to check if the detected language is supported by dateparser and if yes return the different supported options in the library like if `""az""` is passes it should return `""az"", ""az-Cyrl"", ""az-Latn"".`\r\n\r\n\r\n@lopuhin ', 'comment_created': datetime.datetime(2021, 6, 24, 17, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658531705, 'comment_body': 'I see, having this deterministic would be great. Is there a way to ensure deterministic results without modifying global state?', 'comment_created': datetime.datetime(2021, 6, 25, 7, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658532002, 'comment_body': ""Ah I didn't know that, thanks!"", 'comment_created': datetime.datetime(2021, 6, 25, 7, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658532919, 'comment_body': 'I meant, can it happen that different language detection libraries output different language identifiers and so could need different mappings?', 'comment_created': datetime.datetime(2021, 6, 25, 7, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658923592, 'comment_body': 'It was in setting but we decided to make it independent of settings.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658941735, 'comment_body': ""I don't think a good idea to add a function definition in the settings. For me it's totally fine to have this argument. Maybe we can impove the naming, but the parameter it's OK."", 'comment_created': datetime.datetime(2021, 6, 25, 17, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658944491, 'comment_body': ""Hey @gavishpoddar, you shouldn't add this to the changelog. We will merge this PR and after that we will release a new version which will include this and more changes. :)"", 'comment_created': datetime.datetime(2021, 6, 25, 17, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658947107, 'comment_body': 'yeah, that\'s definitelly something that should change. \r\n\r\nAlso if people will write their own functions I don\'t like to force the to add ""apply settings"", etc \r\n\r\n\r\nI think that this function could be independent of the settings and instead of this have thwo parameters: `text`, and `confidence_treshold` (or `text` and `**kwargs`). So instead of accessing here the settings they will be accessed before calling this function and passes to it.\r\n\r\nGavish, could you try to do this? 😄 ', 'comment_created': datetime.datetime(2021, 6, 25, 18, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658952144, 'comment_body': 'Following the DRY principle (""DON\'T REPEAT YOURSELF""), what about doing `languages = map_languages(detected_languages) or self._settings.DEFAULT_LANGUAGES` to simplify a little the `if-else`? :)', 'comment_created': datetime.datetime(2021, 6, 25, 18, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658956751, 'comment_body': ""I think `dateparser_scripts` would be a better place for this. However, I'm no sure if I like this approach because it requieres to run a new script every time we update the language list. Let me think about this and I will return to you. :)"", 'comment_created': datetime.datetime(2021, 6, 25, 18, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658959026, 'comment_body': ""Couldn't we use what we have in \r\n`dateparser/dateparser/data/languages_info.py` instead of creating a new json file?"", 'comment_created': datetime.datetime(2021, 6, 25, 18, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659164399, 'comment_body': 'Thanks,  I need help with it really bad. 😄😄', 'comment_created': datetime.datetime(2021, 6, 26, 12, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659170546, 'comment_body': 'Hi, the implementation will require users to download the models using \r\n`python3 dateparser/custom_lang_detect/fasttext.py download model_name`\r\n\r\nSo would I go ahead with it or make custom settings just for the model name? \r\nAnd should there be any default model if the user does not explicitly download any model.\r\nPl suggest', 'comment_created': datetime.datetime(2021, 6, 26, 13, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659204384, 'comment_body': 'We and other language detection we plan to support library (fasttext and langdetct) are using ISO-639 so I have kept the base support for the same. However, with your point, we can discuss that at our next meeting.', 'comment_created': datetime.datetime(2021, 6, 26, 17, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659205695, 'comment_body': ""Thanks, I will move that to `dateparser_scripts`. I am not sure about `languages_info.py`. I am trying to check if it's possible 😄."", 'comment_created': datetime.datetime(2021, 6, 26, 17, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659205871, 'comment_body': 'Yes, I believe its backward incompatible.', 'comment_created': datetime.datetime(2021, 6, 26, 18, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659608971, 'comment_body': '> ``python3 dateparser/custom_lang_detect/fasttext.py download model_name``\r\n\r\nthis can be simplified to something like\r\n\r\n```\r\ndateparser-download fasttext\r\n# or for a non-default model\r\ndateparser-download fasttext model_name\r\n```\r\n\r\nsuch scripts can be exposed in ``setup.py`` with ``entry_points``.\r\n\r\nI think it would be great to place the model into the user cache folder, like other libraries do, for example pytorch or nltk.\r\n\r\nRegarding whether to download the model automatically or not - I think both approaches are fine, and more ""modern"" libraries seem to default to downloading the model automatically. \r\n\r\nExamples how downloading is implemented in torch: https://github.com/pytorch/pytorch/blob/75024e228ca441290b6a1c2e564300ad507d7af6/torch/hub.py - it has a lot of stuff and we don\'t need all of that, but some parts are interesting, for example how they get the folder where to store the models.', 'comment_created': datetime.datetime(2021, 6, 28, 9, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 659612431, 'comment_body': '```suggestion\r\n        for language_candidate in parser_data:\r\n            if language_candidate > confidence_threshold:\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 9, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659612770, 'comment_body': '```suggestion\r\nyou can implement any language detection library by wrap it with a \r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 9, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659612974, 'comment_body': '```suggestion\r\nfunction accepting ``text`` and ``confidence_threshold`` and returning\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 9, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659613175, 'comment_body': '```suggestion\r\ndateparser allows the integration of any library\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 9, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659614924, 'comment_body': ""Aha I see - sounds good to me. On the meeting we also discussed whether we could still put that into setting, maybe via two arguments (a string one for built-in detectors and a function one for custom), but I'm not sure which is better."", 'comment_created': datetime.datetime(2021, 6, 28, 9, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 659614997, 'comment_body': 'I think we could have it in this order:\r\n\r\n1. section explaining the `detect_languages_func` parameter \r\n2. section explaining fasttext and langdetect integrations\r\n3. section explaining how to create your own language detection functions.', 'comment_created': datetime.datetime(2021, 6, 28, 9, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659615315, 'comment_body': 'Sounds good, thanks 👍 ', 'comment_created': datetime.datetime(2021, 6, 28, 9, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 659617123, 'comment_body': ""Ok, I think we have the following options here:\r\n\r\n- make this change - but we should be really use it's for the better in most cases\r\n- don't make this change but highlight in the docs that for custom lang detection you should probably adjust this\r\n- somehow do that only for custom lang detection by default\r\n\r\nwhat do you think folks?"", 'comment_created': datetime.datetime(2021, 6, 28, 9, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 661613052, 'comment_body': 'This idea is great. The only issue I feel is that it will make usage of the library complex.\r\n', 'comment_created': datetime.datetime(2021, 6, 30, 16, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 662291829, 'comment_body': 'Thanks ', 'comment_created': datetime.datetime(2021, 7, 1, 13, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 662865536, 'comment_body': 'Hi @noviluni,\r\nCan you provide your suggestions?', 'comment_created': datetime.datetime(2021, 7, 2, 9, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 662866656, 'comment_body': 'Hi @lopuhin, I have implemented the entry point can you please check', 'comment_created': datetime.datetime(2021, 7, 2, 9, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 663333110, 'comment_body': ""To avoid a breaking change, `detect_languages_func` should be the last parameter. In that way, if someone was using this function by position its code wouldn't break."", 'comment_created': datetime.datetime(2021, 7, 3, 7, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663333169, 'comment_body': 'same here, `detect_languages_func` should be the last parameters (after `settings`)', 'comment_created': datetime.datetime(2021, 7, 3, 7, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663334624, 'comment_body': 'I would suggest changing this to a description.\r\n\r\n```suggestion\r\n    def detect_languages(text, confidence_threshold):\r\n        """"""\r\n        Takes two variables: `text` and `confidence_treshold` and returns\r\n        a list of `languages codes`.\r\n        \r\n        * `text` is a string containing from where the language codes are \r\n        derived.\r\n        \r\n        * `confidence_treshold` is a number between 0 and 1 that can be \r\n        used to decide if the confidence is enough. It can be also ignored.\r\n        This value comes from the dateparser setting: \r\n        `LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD`\r\n        \r\n        The result must be a list of languages codes (strings).\r\n        """"""\r\n        # here you can apply your own logic\r\n        return language_codes\r\n```\r\n\r\ncc: @lopuhin ', 'comment_created': datetime.datetime(2021, 7, 3, 8, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663334729, 'comment_body': '```suggestion\r\n    ``confidence_threshold`` is a float between 0 and 1 that can be used to filter the results. It comes from the ``LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD`` setting.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 8, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663335433, 'comment_body': ""```suggestion\r\n                text=date_string, confidence_threshold=self._settings.LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\r\n```\r\nI would use the `text` parameter here, in that way, if they implement their own `detect_languages_func` without the `text` parameter it will raise:\r\n\r\n`TypeError: my_detect_lang_func() got an unexpected keyword argument 'text'`\r\n\r\nAnd it will be easier to understand and fix."", 'comment_created': datetime.datetime(2021, 7, 3, 8, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663335511, 'comment_body': 'same about putting the `detect_languages_func` as the last parameter to avoid a breaking change.', 'comment_created': datetime.datetime(2021, 7, 3, 8, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663335973, 'comment_body': 'A better way to do this would be:\r\n\r\n```suggestion\r\n        try:\r\n            urllib.request.urlretrieve(model_url, models_directory_path)\r\n        except urllib.error.HTTPError as e:\r\n            raise Exception(""Fasttext model cannot be downloaded due to HTTP error"") from e\r\n```\r\n\r\nHowever, I\'m not sure if \r\na. We should create a new exception or use a different exception.\r\nb. We can avoid capturing the exception as it\'s self-explanatory.\r\n\r\nFor me you can go with the approach I mentioned and will ask for feedback.', 'comment_created': datetime.datetime(2021, 7, 3, 8, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663743793, 'comment_body': ""Sorry - actually it's not a breaking change as this setting is used only for custom language detection."", 'comment_created': datetime.datetime(2021, 7, 5, 8, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 663806670, 'comment_body': ""Great @gavishpoddar - as discussed, let's store the model in the user cache folder, e.g. similar to above example."", 'comment_created': datetime.datetime(2021, 7, 5, 10, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 663807423, 'comment_body': 'Sounds good to me, thanks @noviluni ', 'comment_created': datetime.datetime(2021, 7, 5, 10, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 669379563, 'comment_body': 'Hi @gavishpoddar @noviluni @lopuhin \r\nThis function takes the default threshold if not provided so it will be good if we can mention it.\r\nAlso, do you think an example of this function would be helpful here?', 'comment_created': datetime.datetime(2021, 7, 14, 7, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 669381003, 'comment_body': 'Should the default be `self._settings.LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD` or this is different?', 'comment_created': datetime.datetime(2021, 7, 14, 7, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 669381513, 'comment_body': '> Should the default be self._settings.LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD or this is different?\r\n\r\nSimilar to fasttext.py \r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 14, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 671527983, 'comment_body': 'Hi, I have made the changes ', 'comment_created': datetime.datetime(2021, 7, 16, 21, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 671842402, 'comment_body': '```suggestion\r\n    :param detect_languages_function:\r\n        A function for language detection that takes as input a `text` (the `date_string`) and a `confidence_threshold`, and returns a list of detected language codes.\r\n    :type detect_languages_function: function\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671842892, 'comment_body': '```suggestion\r\n=========================\r\nCustom language detection\r\n=========================\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671843115, 'comment_body': '```suggestion\r\nlangdetect\r\n~~~~~~~~~~\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671843300, 'comment_body': 'Could you rename the name of the file from `custom_detect_languages_func.rst` to `custom_language_detection.rst`? :)', 'comment_created': datetime.datetime(2021, 7, 18, 13, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671843846, 'comment_body': 'I think it makes more sense to move this after `settings` (one position below). Could you do it? :)', 'comment_created': datetime.datetime(2021, 7, 18, 13, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671844234, 'comment_body': '```suggestion\r\n        A function for language detection that takes as input a `text` and a `confidence_threshold`, and returns a list of detected language codes.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671844379, 'comment_body': '```suggestion\r\n                    A function for language detection that takes as input a `text` and a `confidence_threshold`, and returns a list of detected language codes.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671846626, 'comment_body': ""```suggestion\r\n            detected_languages = detect_languages_function(\r\n                text, confidence_threshold=settings.LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\r\n            )\r\n            detected_languages = map_languages(detected_languages) or settings.DEFAULT_LANGUAGES\r\n            return detected_languages[0]  if detected_languages else []\r\n```\r\n\r\nThe first change (removing the `None`) fixes the case when the custom function returns an empty list `[]`. The second case (`if detected_languages else []`) fixes the case when the custom function returns an empty list and the `DEFAULT_LANGUAGES` is an empty list too (`settings={'DEFAULT_LANGUAGES': []})`)"", 'comment_created': datetime.datetime(2021, 7, 18, 13, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671847284, 'comment_body': '```suggestion\r\n               A function for language detection that takes as input a `text` and a `confidence_threshold`, and returns a list of detected language codes.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671847687, 'comment_body': '```suggestion\r\nparameter. Example::\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671847821, 'comment_body': '```suggestion\r\nthe fastText integration currently supports the large and the small models. You can\r\ndownload your model of choice using ``dateparser-download``.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671848428, 'comment_body': '```suggestion\r\n`dateparser` allows to customize the language detection behavior. It currently supports two\r\n language detection libraries out of the box: `fasttext <https://github.com/facebookresearch/fastText>`_ \r\nand `langdetect <https://github.com/Mimino666/langdetect>`_, and allows you to implement your own custom language detection.\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671848667, 'comment_body': '```suggestion\r\nUsage of fastText and langdetect\r\n================================\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671848763, 'comment_body': '```suggestion\r\n    ``fastText`` uses ``small`` as default so it will download and use if no model\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671848777, 'comment_body': '```suggestion\r\nImport langdetect wrapper and pass it as ``detect_languages_function``\r\nparameter. Example::\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671849051, 'comment_body': '```suggestion\r\n    From some tests we did, we recommend to use ``fastText`` for faster and more accurate results.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671849373, 'comment_body': '```suggestion\r\n``dateparser`` allows the integration of any library to detect the languages\r\nby wrapping them in a function that accepts ``text`` and ``confidence_threshold`` \r\nand returns a list of the detected language codes in ISO 639 standards.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672030874, 'comment_body': 'I think in this case you should put a different message like `To use dateparser-download you have to specify the integration and the model` and adding a working example. What do you think? ', 'comment_created': datetime.datetime(2021, 7, 19, 6, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672031207, 'comment_body': 'we should change all the prints to `log`.', 'comment_created': datetime.datetime(2021, 7, 19, 6, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672037647, 'comment_body': 'I don\'t think it is the correct behavior, because if you put a wrong model name it takes the `small`. Example: ` dateparser-download fasttext aaaaaa`. I think this would be better:\r\n\r\n```suggestion\r\n    if not model:\r\n        model_name = ""small""\r\n    elif model and model[0] == ""large"":\r\n        model_name = ""large""\r\n    else:\r\n        print(""Couldn\'t find a model called \\""{}\\"". Supported models are:""\r\n              "" {}"".format(model[0], "", "".join(model_url.keys())))\r\n        return\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 7, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672037808, 'comment_body': 'BTW, change the `print`s to `log`s.', 'comment_created': datetime.datetime(2021, 7, 19, 7, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672038695, 'comment_body': '```suggestion\r\n        print(""Downloading model {}..."".format(model_name))\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 7, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672042809, 'comment_body': '(I mean in the last `else`)', 'comment_created': datetime.datetime(2021, 7, 19, 7, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672092051, 'comment_body': 'this is the place where I think ``DEFAULT_LANGUAGES`` is used even without custom language detection?', 'comment_created': datetime.datetime(2021, 7, 19, 8, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672093729, 'comment_body': ""I think we use ``DEFAULT_LANGUAGES`` without custom language detection in search dates, but not here - I think it's better to be consistent and do the same thing here."", 'comment_created': datetime.datetime(2021, 7, 19, 8, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672256097, 'comment_body': 'Is this still needed?', 'comment_created': datetime.datetime(2021, 7, 19, 12, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672257306, 'comment_body': '``toxand`` looks like a typo', 'comment_created': datetime.datetime(2021, 7, 19, 12, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672258138, 'comment_body': 'Also I think we should raise an error in this case or set return code of the script to non-zero. Another option is to use ``argparse`` library to do the argument parsing and validation instead of doing that ourselves.', 'comment_created': datetime.datetime(2021, 7, 19, 12, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672259553, 'comment_body': 'Why is ``model`` a list? Also if it needs to be a list, mutable default arguments are normally not a good idea, see for example https://florimond.dev/en/posts/2018/08/python-mutable-defaults-are-the-source-of-all-evil/', 'comment_created': datetime.datetime(2021, 7, 19, 12, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672259864, 'comment_body': ""I don't think it's windows compatible, we should use ``Path`` or ``os.path``"", 'comment_created': datetime.datetime(2021, 7, 19, 12, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672261214, 'comment_body': 'Can this import be on the top level?', 'comment_created': datetime.datetime(2021, 7, 19, 12, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672261615, 'comment_body': ""It's best to not put side-effects on the model error - usually we don't want stuff to happen on import, but only when we explicitly run something."", 'comment_created': datetime.datetime(2021, 7, 19, 12, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672262588, 'comment_body': ""this is quite minor, but it's better to not modify the arguments if the function is not explicitly called to modify them - and in this case, the function returns a value, so the called would not expect it to also sort the input."", 'comment_created': datetime.datetime(2021, 7, 19, 12, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672265075, 'comment_body': ""Minor, but it would be better to organize imports according to pep-8 https://www.python.org/dev/peps/pep-0008/#imports - so ``parameterized`` would go into a second group as it's not an stdlib module, and there would be no blank lines between stdlib modules."", 'comment_created': datetime.datetime(2021, 7, 19, 12, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672988756, 'comment_body': 'This is not required I will remove it ', 'comment_created': datetime.datetime(2021, 7, 20, 10, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 673025182, 'comment_body': 'I have removed it.', 'comment_created': datetime.datetime(2021, 7, 20, 11, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 673027208, 'comment_body': 'I too believe the same ', 'comment_created': datetime.datetime(2021, 7, 20, 11, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 673027374, 'comment_body': 'I will make the required changes', 'comment_created': datetime.datetime(2021, 7, 20, 11, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 673035633, 'comment_body': 'I changed `prints` to `logs`.', 'comment_created': datetime.datetime(2021, 7, 20, 11, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674073409, 'comment_body': ""I'm ok with this, but it can be addressed later. We could probably add isort to the pipelines in a future / separate PR to check this. So @gavishpoddar don't worry if you don't want to change the import order now."", 'comment_created': datetime.datetime(2021, 7, 21, 15, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 674559275, 'comment_body': 'The sorting is required for the language mapping to work as this sorted list is used to group languages.', 'comment_created': datetime.datetime(2021, 7, 22, 7, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674560317, 'comment_body': '@gavishpoddar sure, but you can still sort without affecting the input argument, e.g. using ``sorted`` function.', 'comment_created': datetime.datetime(2021, 7, 22, 7, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674565477, 'comment_body': '@lopuhin, Thanks ', 'comment_created': datetime.datetime(2021, 7, 22, 7, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674627351, 'comment_body': 'Thanks for the resource ', 'comment_created': datetime.datetime(2021, 7, 22, 9, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674628073, 'comment_body': 'I have created a custom error class and raised the same', 'comment_created': datetime.datetime(2021, 7, 22, 9, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674679446, 'comment_body': ""I tried to make some changes, please suggest it that's fine"", 'comment_created': datetime.datetime(2021, 7, 22, 10, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674696056, 'comment_body': '@gavishpoddar did you push the changes? Could you please send a link to the commit you have in mind?', 'comment_created': datetime.datetime(2021, 7, 22, 11, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674767737, 'comment_body': 'Hi @lopuhin, not I have committed and pushed the changes also can you run the workflow in this PR', 'comment_created': datetime.datetime(2021, 7, 22, 12, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674842634, 'comment_body': '@gavishpoddar just started the workflow run', 'comment_created': datetime.datetime(2021, 7, 22, 14, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674847174, 'comment_body': ""``model`` is a string, we shouldn't use ``model[0]`` here and below"", 'comment_created': datetime.datetime(2021, 7, 22, 14, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674849341, 'comment_body': ""I think this needs to be updated as the argument is not a list. Also I think it's better to not download the model on module import - but only when we need to load it."", 'comment_created': datetime.datetime(2021, 7, 22, 14, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674894338, 'comment_body': ""Hi @lopuhin, I am having some issues implement this part. \r\n\r\nthe code which invokes this part - [link](https://github.com/gavishpoddar/dateparser/blob/a684fdffb62da5f6d922314f960f4069dacda995/dateparser_cli/cli.py#L23) \r\n`_cli_functions_map[args[0]](args[1:]) `\r\n\r\nWhere args are param now her are two functions clear_cache which doesn't require any other param but fasttext requires parameter if I use string I need to make a map Munich contains this information or I pass it as list preventing the need of the dictionary containing the information about the parameter or so.\r\n\r\ncommand for fasttext (takes an additional args):\r\n\r\n`dateparser-donwload fasttext small\r\n`\r\ncommand for clearing cache:\r\n\r\n`dateparser-donwload clear_cache\r\n`\r\n\r\nCan you please help"", 'comment_created': datetime.datetime(2021, 7, 22, 15, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674925334, 'comment_body': ""@avishpoddar I see. I think the simplest fix would be to change this to ``_cli_functions_map[args[0]](*args[1:])`` - note the added star. Also I'd remote the ``None`` default from the ``model`` argument, as we don't really do anything useful in this case. But if you want to improve this code further and give better error messages to the user, you can use https://docs.python.org/3/library/argparse.html or https://click.palletsprojects.com/ libraries to implement command line argument parsing."", 'comment_created': datetime.datetime(2021, 7, 22, 15, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 675098231, 'comment_body': 'Thanks, now upgraded to `argparse`', 'comment_created': datetime.datetime(2021, 7, 22, 19, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 676374388, 'comment_body': 'I would love to see here a comment pointing to the lines of code of the langdetect project, and explaining why we do this (`init_factory`, etc)', 'comment_created': datetime.datetime(2021, 7, 26, 7, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 676414238, 'comment_body': ""@gavishpoddar maybe there was already a comment about this - I think we shouldn't download the model on import, it would be better to download it only if it's used."", 'comment_created': datetime.datetime(2021, 7, 26, 8, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 676418116, 'comment_body': ""@gavishpoddar from the meeting (thanks @kishan3) - probably we shouldn't limit to just 5 results?"", 'comment_created': datetime.datetime(2021, 7, 26, 8, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 676436972, 'comment_body': 'Thanks, I have done that ', 'comment_created': datetime.datetime(2021, 7, 26, 9, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 676720653, 'comment_body': 'Thanks, I have done that.', 'comment_created': datetime.datetime(2021, 7, 26, 15, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 676752845, 'comment_body': 'Thanks, I have added some comments there', 'comment_created': datetime.datetime(2021, 7, 26, 16, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677263638, 'comment_body': '@gavishpoddar @noviluni @lopuhin Do you think `extend()` is more pythonic here or `+=` is fine.', 'comment_created': datetime.datetime(2021, 7, 27, 9, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677268416, 'comment_body': 'This is done', 'comment_created': datetime.datetime(2021, 7, 27, 9, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677268682, 'comment_body': 'This is done. :+1: ', 'comment_created': datetime.datetime(2021, 7, 27, 9, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677270026, 'comment_body': 'Is this file intentional?', 'comment_created': datetime.datetime(2021, 7, 27, 9, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677270276, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2021, 7, 27, 9, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677270541, 'comment_body': 'File no longer present I think.', 'comment_created': datetime.datetime(2021, 7, 27, 9, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677271758, 'comment_body': 'This file is temporary only for local tests or in meeting in shall remove that now thanks  ', 'comment_created': datetime.datetime(2021, 7, 27, 9, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677273367, 'comment_body': 'I have removed this is now. 👍', 'comment_created': datetime.datetime(2021, 7, 27, 9, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 678222477, 'comment_body': 'Thanks, @kishan3, I have changed it.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 678863973, 'comment_body': 'This will by pass the exception silently. I think at least a log entry would be good.', 'comment_created': datetime.datetime(2021, 7, 29, 6, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 678881462, 'comment_body': 'Hi @kishan3, this error is thrown when empty text is passed or no similar language (And this library only supports 55 languages) is found which is too often the case so I did not put any logging as that may create many such logs.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 678903552, 'comment_body': '`` `text` `` does not refer to a variable name, right? perhaps we mean\r\n```suggestion\r\n        A function for language detection that takes as input a string (the `date_string`) and\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 7, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 678905760, 'comment_body': ""this is not windows-compatible, and also maybe it's possible to call ``_load_fasttext_model`` instead (but make sure we don't hit infinite recursion)?"", 'comment_created': datetime.datetime(2021, 7, 29, 7, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 678905873, 'comment_body': 'This is not windows-compatible', 'comment_created': datetime.datetime(2021, 7, 29, 7, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 678906877, 'comment_body': 'Not sure, but what do you think about also adding a message when the model was downloaded? It might help with debugging if this is the last message in the log.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 678914676, 'comment_body': 'I think these two can be simplified to\r\n\r\n```\r\nclass FastTextModelNotFoundException(Exception):\r\n    pass\r\n```\r\n\r\nand same for the other one, what do you think?', 'comment_created': datetime.datetime(2021, 7, 29, 7, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679075573, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 29, 11, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679078247, 'comment_body': 'why do we return an empty list here as a fallback, is this right? In other code paths we do a different thing I think.', 'comment_created': datetime.datetime(2021, 7, 29, 11, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679079564, 'comment_body': 'Why do we need this map? I think we only refer to it with static keys, and could instead call the functions directly', 'comment_created': datetime.datetime(2021, 7, 29, 11, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679081912, 'comment_body': ""Setting this would essentially disable dateparser language detection if we don't pass any language and don't use custom language detection, right? I think we should clarify this behaviour in some place, because I think it's not obvious."", 'comment_created': datetime.datetime(2021, 7, 29, 11, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679082498, 'comment_body': ""I don't think it's right, shouldn't we also pass the string to be parsed?"", 'comment_created': datetime.datetime(2021, 7, 29, 11, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679082797, 'comment_body': 'I think example is not complete:\r\n\r\n- we are lacking the string to parse\r\n- setting has no effect without language detection function, right?', 'comment_created': datetime.datetime(2021, 7, 29, 11, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679084123, 'comment_body': 'Yes, settings have no effect without a language detection function. Should I mention that in docs?\r\n', 'comment_created': datetime.datetime(2021, 7, 29, 11, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679084341, 'comment_body': 'done 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 29, 11, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679085120, 'comment_body': 'I meant to update this example so that the setting makes a difference. I think we already mention that in the docs.', 'comment_created': datetime.datetime(2021, 7, 29, 11, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679086918, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 29, 12, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679091683, 'comment_body': '`DEFAULT_LANGUAGES` is added after this language detection process.\r\n\r\nI will add more information about it.', 'comment_created': datetime.datetime(2021, 7, 29, 12, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679289041, 'comment_body': 'Done 👍🏻 & Its did not hit infinite recursion after the fix', 'comment_created': datetime.datetime(2021, 7, 29, 16, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679290068, 'comment_body': ""Done 👍🏻 & it's now windows compatible but tox/setup.py does not seem to be working on windows.\r\nTested on Windows 10"", 'comment_created': datetime.datetime(2021, 7, 29, 16, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679340770, 'comment_body': 'done 👍🏻', 'comment_created': datetime.datetime(2021, 7, 29, 17, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679347311, 'comment_body': 'Like a print message about the download? or something else I could not understand as the download information is already logged.', 'comment_created': datetime.datetime(2021, 7, 29, 17, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679655493, 'comment_body': 'Hi @gavishpoddar Ok thanks. I will just tag @lopuhin & @noviluni to know their opinion. ', 'comment_created': datetime.datetime(2021, 7, 30, 5, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 679694576, 'comment_body': '@lopuhin, I think what you mention is some lines below: \r\n\r\n```\r\nlogging.info(""dateparser-download: The model is already downloaded"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 6, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679697497, 'comment_body': ""This can be refactored in this way:\r\n\r\n\r\n```suggestion\r\nif sys.platform.startswith('win'):\r\n    # For Windows\r\n    cache_dir = DEFAULT_WIXDOWS_CACHE_DIR\r\nelse:\r\n    # UNIX & OS X\r\n    cache_dir = DEFAULT_UNIX_CACHE_DIR\r\n\r\ndate_parser_model_home = os.path.expanduser(\r\n    os.path.join(cache_dir, DEFAULT_DIR_NAME)\r\n)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 30, 7, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679700061, 'comment_body': 'I think we could improve here the naming, because with the word ""check"", it seems that only is checking. I would suggest to change it to `create_data_model_home()` as this is not only checking but creating, and IMHO the creation part is more relevant.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679700824, 'comment_body': '```suggestion\r\ndateparser_model_home = None\r\n```\r\n\r\n(and references below and in function names)', 'comment_created': datetime.datetime(2021, 7, 30, 7, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679702019, 'comment_body': '```suggestion\r\n        logging.info(""dateparser-download: Downloading model {}..."".format(model_name))\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 7, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679703713, 'comment_body': ""I would move this logging.info right after the place we use `clear_cache`. I mean in this part:\r\n\r\n```\r\n    if args.fasttext:\r\n        fasttext_downloader(args.fasttext)\r\n    elif args.clear:\r\n        clear_cache()\r\n        # <--- HERE\r\n```\r\n\r\nI think the responsibility of printing this shouldn't be from this function, in that way you can import it and use it without printing this message."", 'comment_created': datetime.datetime(2021, 7, 30, 7, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679704271, 'comment_body': 'I also find this example weird, it should have a `date_string`', 'comment_created': datetime.datetime(2021, 7, 30, 7, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679705751, 'comment_body': ""This should be more like:\r\n```suggestion\r\n    >>> parse('3 de marzo de 2020', settings={'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD': 0.5}, detect_languages_function=detect_languages)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 30, 7, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679879845, 'comment_body': 'To me name `detect_langs` is confusing with another method `detect_lagnuages`\r\n\r\nBased on what it returns do you think a better name can be `get_language_probablities`', 'comment_created': datetime.datetime(2021, 7, 30, 12, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 679906290, 'comment_body': 'On [line 343](https://github.com/scrapinghub/dateparser/pull/932/files#diff-ed41fbffb2891f79c65e3dc690fadd0cdc7a9a9191b69388de73f6b578bd3dd1R343) it seems we are allowing list, set, and tuples. \r\nIn case of set, `+=` will throw and error(`TypeError`) \r\nIn case of tuple, `map_languages` has to give a tuple in return for `+=` to work\r\n\r\nso this case should be handled if we want to support all three data types.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 679911791, 'comment_body': 'Based on the usage of `self.languages` further I think this should only accept list.\r\nRef https://github.com/scrapinghub/dateparser/pull/932/files#r679906290', 'comment_created': datetime.datetime(2021, 7, 30, 13, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 679932019, 'comment_body': '+1 to ignore the exception - as it happens not only on empty strings but on inputs like ``10-10-2021`` which have no letters - which would be extremely typical to dateparser.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679983575, 'comment_body': 'Thanks, @kishan3, I feel the same so I have changed it to _get_language_probablities', 'comment_created': datetime.datetime(2021, 7, 30, 14, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679983675, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 30, 14, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679992669, 'comment_body': 'Yes, that will be great but maybe that is a breaking change (I have not checked) more so the type check raises TypeError with the message `languages argument must be a list`. \r\n\r\nNOTE: \r\n\r\ndateparser otherwise has no issues if either is `list, tuple, Set` passed.\r\n\r\nlike below code works fine.\r\n```\r\nfrom dateparser import parse\r\n\r\nprint(parse(""12/12/2000"", languages={""en""}))\r\n```\r\n\r\nSo maybe `list, tuple, Set` -> `list` in `DateDataParser init` will be great it will not break anything and I tested all the tests are passing.\r\n\r\nPlease suggest and I think this should be a separate micro PR.\r\n\r\n@lopuhin @noviluni ', 'comment_created': datetime.datetime(2021, 7, 30, 14, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680009170, 'comment_body': 'Thanks, @kishan3 for now have changes `+=` to `.append()`, I have commented a solution below Pl suggest', 'comment_created': datetime.datetime(2021, 7, 30, 15, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680016288, 'comment_body': 'Thanks, I have made the changes 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 30, 15, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680016755, 'comment_body': 'Thanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 15, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680019625, 'comment_body': 'Thanks, I have made the changes 👍🏻\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 30, 15, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680020877, 'comment_body': 'I too believe the new make is better.\r\nThanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680024080, 'comment_body': 'Thanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 15, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680105756, 'comment_body': 'Thanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 17, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680106128, 'comment_body': 'Thanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 17, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680118748, 'comment_body': 'Thanks for the review @lopuhin, so I will not change anything here', 'comment_created': datetime.datetime(2021, 7, 30, 17, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680123685, 'comment_body': 'done 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 17, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680325828, 'comment_body': ""Hi @gavishpoddar, you changed the `_Factory` here but not the class. I would change the class name too or if you can't for some reason, redo the change in this comment."", 'comment_created': datetime.datetime(2021, 7, 31, 7, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680326278, 'comment_body': 'I agree with you guys, but you should add a comment before the pass explaining this. Remember: when the intention is not obvious we need to explain it to avoid future confusions. :)\r\n\r\nIt could be something like:\r\n\r\n```\r\n    except langdetect.lang_detect_exception.LangDetectException:\r\n        # This exception can be produced with empty strings or inputs without letters like `10-10-2021`.\r\n        # As this could be really common, we ignore them.\r\n        pass\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 31, 7, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680328587, 'comment_body': 'As you mentioned, changing the input would be a breaking change. Currently, it works with lists, sets and tuples:\r\n\r\n```python\r\n>>> dateparser.parse(""12/12/2000"", languages=[""en""])\r\ndatetime.datetime(2000, 12, 12, 0, 0)\r\n\r\n>>> dateparser.parse(""12/12/2000"", languages={""en""})\r\ndatetime.datetime(2000, 12, 12, 0, 0)\r\n\r\n>>> dateparser.parse(""12/12/2000"", languages=(""en"",))\r\ndatetime.datetime(2000, 12, 12, 0, 0)\r\n```\r\n\r\nHowever, you can fix this without changing the input by casting it to a list. So if you change this line like this:\r\n\r\n```python\r\nself.languages = list(languages) if languages else None\r\n```\r\n\r\nit should work. Let me know if it\'s not :)', 'comment_created': datetime.datetime(2021, 7, 31, 8, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680328812, 'comment_body': ""Please, remove these two statements :)\r\n\r\nIn case of `_cache_dir`, as you are using an `if` with a broad `else`, it will always take a value, so you don't need to initialize it. On the other hand, in case of `dateparser_model_home` it is defined below, so the same: you don't need to initialize it."", 'comment_created': datetime.datetime(2021, 7, 31, 8, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680399412, 'comment_body': 'Thanks, Marc, I have added these comments ', 'comment_created': datetime.datetime(2021, 7, 31, 19, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680464735, 'comment_body': 'Thanks. I have made the changes 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 1, 7, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680465581, 'comment_body': 'Thanks, Marc, I have removed this initialization', 'comment_created': datetime.datetime(2021, 8, 1, 7, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680468722, 'comment_body': 'thanks, I have made the changes', 'comment_created': datetime.datetime(2021, 8, 1, 7, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680671257, 'comment_body': 'Correct me if I am wrong but I think this change is still pending. ', 'comment_created': datetime.datetime(2021, 8, 2, 5, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 680676127, 'comment_body': 'Hi @kishan3, these changes were part of this commit [here](https://github.com/scrapinghub/dateparser/pull/932/commits/6e6eb14cfb289cce73a1e4276d02d99e51ed253f) \r\n\r\nIn dateparser/date.py, line 368', 'comment_created': datetime.datetime(2021, 8, 2, 6, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680688145, 'comment_body': 'Thanks, I agree with changing it to list to avoid breaking changes. ', 'comment_created': datetime.datetime(2021, 8, 2, 6, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 680734331, 'comment_body': 'Hi @gavishpoddar, the `LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD` can take values between 0 and 1, but you are allowing any value.\r\n\r\n\r\nYou have to add here an ""extra_check"" to check the values:\r\n\r\n```python\r\n\'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\': {\r\n    \'type\': float,\r\n    \'extra_check\': _check_between_0_and_1\r\n},\r\n\r\n```\r\n\r\nThen, you can define the `_check_between_0_and_1` (after the `_check_parsers` function):\r\n\r\n```python\r\ndef _check_between_0_and_1(setting_name, setting_value):\r\n    is_valid = 0 <= setting_value <= 1\r\n    if not is_valid:\r\n        raise SettingValidationError(\r\n            \'{} is not a valid value for {}. It can take values between 0 and \'\r\n            \'1.\'.format(\r\n                setting_value, setting_name,\r\n            )\r\n        )\r\n```\r\n\r\nAnd finally add a test in `test_settings`:\r\n\r\n```python\r\ndef test_check_settings_extra_check_confidence_treshold(self):\r\n    with self.assertRaisesRegex(\r\n        SettingValidationError,\r\n        r\'1.1 is not a valid value for \'\r\n        r\'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD. It can take values \'\r\n        r\'between 0 and 1\'\r\n    ):\r\n        DateDataParser(settings={\'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\': 1.1})\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 2, 7, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680738744, 'comment_body': 'To cover these two lines (34 and 37) probably you can add a test like\r\n\r\n`test_lang_detect_doesnt_raise_error`\r\n\r\nFor example after:\r\n\r\n`test_custom_language_detect_lang_detect`\r\n\r\nAnd using lang_detect, introducing a string that would produce an error and check that this error is not produced.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680740405, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2021, 8, 2, 7, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680745874, 'comment_body': 'Thanks 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 2, 7, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 681213355, 'comment_body': 'Thanks Marc, changes are done', 'comment_created': datetime.datetime(2021, 8, 2, 19, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 681246237, 'comment_body': 'Thanks, @noviluni, All tests are passing even coverage 😃😃', 'comment_created': datetime.datetime(2021, 8, 2, 20, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683193145, 'comment_body': 'Hi @gavishpoddar, this is wrong it should probably be like this:\r\n\r\n```suggestion\r\n    >>> parse(\'3 de marzo de 2020\', settings={\'DEFAULT_LANGUAGES\': [""es""]})\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683194175, 'comment_body': ""```suggestion\r\nif sys.platform.startswith('win'):\r\n    # For Windows:\r\n    _cache_dir = DEFAULT_WIXDOWS_CACHE_DIR\r\nelse:\r\n    # UNIX & OS X:\r\n    _cache_dir = DEFAULT_UNIX_CACHE_DIR\r\n```"", 'comment_created': datetime.datetime(2021, 8, 5, 7, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683196212, 'comment_body': 'could you remove this `print`?', 'comment_created': datetime.datetime(2021, 8, 5, 7, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683205211, 'comment_body': ""I think we could add an `extra_check` that checks that the values in `DEFAULT_LANGUAGES` are valid.\r\n\r\nThis is not strictly necessary, as now, when we try with a wrong language it raises an error:\r\n\r\n```python\r\n>>> dateparser.parse('20/20/2020', settings={'DEFAULT_LANGUAGES': ['aaa']})\r\nValueError: Unknown language(s): 'aaa'\r\n```\r\n\r\nbut for example, when using `DateDataParser`, the error only appears when trying to get the date, and adding this check here would show the error when instantiating, which seems better.\r\n\r\n```python\r\n>>> dd = DateDataParser(settings={'DEFAULT_LANGUAGES': ['aaa']})\r\n>>> dd.get_date_data('12/12/2000')\r\nValueError: Unknown language(s): 'aaa'\r\n```\r\n\r\nI think the way to implement this new check could be exactly the same that is producing that error. After doing this we should add a test to check this (similar to what we did for the `LANGUAGE_DETECTION_CONFIDENCE_TRESHOLD`.\r\n\r\nAnyways, feel free to open a new / separate issue to handle this."", 'comment_created': datetime.datetime(2021, 8, 5, 7, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683207518, 'comment_body': '```suggestion\r\n    """"""\r\n    Returns the candidates from the supported languages codes.\r\n\r\n    :param languages:\r\n        A list of language codes, e.g. [\'en\', \'es\'] in ISO 639 Standard\r\n    :type languages: list\r\n\r\n    :return: Returns list[str] representing supported languages, else returns None\r\n    :rtype: list[str]\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683210368, 'comment_body': 'Can you move these in the next place:\r\n\r\n```python\r\n    # Incomplete dates\r\n    \'PREFER_DAY_OF_MONTH\': \'current\',\r\n    \'PREFER_DATES_FROM\': \'current_period\',\r\n    \'RELATIVE_BASE\': False,\r\n    \'STRICT_PARSING\': False,\r\n    \'REQUIRE_PARTS\': [],\r\n    \r\n    # Language detection\r\n    \'SKIP_TOKENS\': [\'t\'],\r\n    \'NORMALIZE\': True,\r\n    \'DEFAULT_LANGUAGES\': [],  # <-- Here the DEFAULT_LANGUAGES\r\n    \r\n    # Optional language detection\r\n    \'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\' : 0.5,  # <-- Here this (and change title from ""detect"" to ""detection""\r\n    \r\n    # Other settings\r\n    \'RETURN_TIME_AS_PERIOD\': False,\r\n    \'PARSERS\': default_parsers,\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683213728, 'comment_body': ""Maybe I'm missing something, but why are we using a class instead of using directly a variable / object?\r\n\r\nWhat about doing:\r\n```suggestion\r\n_factory_data = None\r\n\r\n\r\ndef _init_factory():\r\n    if _factory_data is None:\r\n        _factory_data = DetectorFactory()\r\n        _factory_data.load_profile(PROFILES_DIRECTORY)\r\n        _factory_data.seed = 0\r\n\r\n\r\ndef _get_language_probablities(text):\r\n    _init_factory()\r\n    detector = _factory_data.create()\r\n    detector.append(text)\r\n    return detector.get_probabilities()\r\n```\r\n\r\nIf it's possible I would use this approach, I think is simpler."", 'comment_created': datetime.datetime(2021, 8, 5, 7, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683215172, 'comment_body': '```suggestion\r\n        for language_candidate in parser_data:\r\n            if language_candidate.prob > confidence_threshold:\r\n                language_codes.append(language_candidate.lang)\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683216861, 'comment_body': '```suggestion\r\n    for idx, language_candidate in enumerate(parser_data[1]):\r\n        if language_candidate > confidence_threshold:\r\n            language_code = parser_data[0][idx].replace(""__label__"", """")\r\n            language_codes.append(language_code)\r\n```\r\n\r\nBut I think this variable is not representing a `language_candidate` but a confidence probabilty.\r\n\r\nMaybe it would be better to rename this to: `language_probability` or something similar.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683217927, 'comment_body': '```suggestion\r\n        Takes two variables: `text` and `confidence_threshold` and returns\r\n        a list of `languages codes`.\r\n        \r\n        * `text` is a string containing from where the language codes are \r\n        derived.\r\n        \r\n        * `confidence_threshold` is a number between 0 and 1 that can be \r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683493696, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683494890, 'comment_body': 'Done 👍🏻. I have changed it to `language_probability`', 'comment_created': datetime.datetime(2021, 8, 5, 14, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683497538, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683502140, 'comment_body': ""Hi @noviluni, I tried changing class to function caching variable but it throws `UnboundLocalError: local variable '_factory_data' referenced before assignment `\r\n\r\nNo changes were made"", 'comment_created': datetime.datetime(2021, 8, 5, 14, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683515297, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683516415, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683517306, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683518399, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683528565, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683537817, 'comment_body': 'Hi @noviluni, so should I import the data from `dateparser/data/languages_info.py` and use that in the `extra_check` to check the supported languages.', 'comment_created': datetime.datetime(2021, 8, 5, 15, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684612814, 'comment_body': ""I know this is common in certain projects, but I don't like the idea of having the module with the same name than the function, because it can make the import confuse. It is OK for you to rename this file to `language_mapping.py`?\r\n\r\nIn that way when importing it will be:\r\n```python\r\nfrom dateparser.custom_language_detection.language_mapping import map_languages\r\n```\r\n\r\ninstead of:\r\n```python\r\nfrom dateparser.custom_language_detection.map_languages import map_languages\r\n```\r\n\r\nThanks!"", 'comment_created': datetime.datetime(2021, 8, 7, 9, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684612957, 'comment_body': ""(this is to avoid someone to accidentally do: \r\n\r\n```python\r\n>>> from dateparser.custom_language_detection import map_languages\r\n>>> map_languages()\r\nTypeError: 'module' object is not callable\r\n\r\n\r\n```"", 'comment_created': datetime.datetime(2021, 8, 7, 9, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684613269, 'comment_body': '```suggestion\r\n``LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD``: defaults to ``0.5``. It is a ``float`` of minimum required confidence for the custom language detection:\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 10, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684613776, 'comment_body': 'After the code I would add something like:\r\n\r\n```\r\nWhen using this setting, the languages will be added after the detected languages. It is specially useful when using the `detect_languages_function`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 10, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684614139, 'comment_body': '```suggestion\r\n`dateparser` allows to customize the language detection behavior by using the ``detect_languages_function`` parameter. It currently supports two\r\n language detection libraries out of the box: `fasttext <https://github.com/facebookresearch/fastText>`_ \r\nand `langdetect <https://github.com/Mimino666/langdetect>`_, and allows you to implement your own custom language detection.\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 10, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684616570, 'comment_body': ""This setting (`DEFAULT_LANGUAGES`) is not working as expected. This should be changed.\r\n When you use it without the `detect_languages_function` it is added to the languages, so it's limiting the languages used. Look at this example:\r\n\r\n```\r\n# This is returning `None` because is limiting the languages to 'en' and the text is in 'es'.\r\n>>> dateparser.parse('3 de marzo', settings={'DEFAULT_LANGUAGES': ['en']})\r\n>>>\r\n```\r\n\r\nInstead of this, what you should do is removing this and adding something like this after the next `for` (quick test, I didn't test it properly):\r\n\r\n\r\n```python\r\n\r\n        if self._settings.DEFAULT_LANGUAGES:\r\n            for locale in self._get_locale_loader().get_locales(\r\n                languages=self._settings.DEFAULT_LANGUAGES, locales=None,\r\n                region=None, use_given_order=self.use_given_order\r\n            ):\r\n                yield locale\r\n```\r\n\r\n\r\nwith this what you are trying to do is using the locales automatically detected and then if all fails you try with the DEFAULT_LANGUAGES. Let me know if you have any doubt. The best way to test this would be adding a text like the example I put.\r\n\r\nThis:\r\n```python\r\ndateparser.parse('3 de marzo 2019', settings={'DEFAULT_LANGUAGES': ['en']})\r\n```\r\n\r\nshould return:\r\n```python\r\ndatetime.datetime(2019, 3, 3, 0, 0)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 7, 10, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684616990, 'comment_body': 'This never returns `None`, it would return an empty list. Also, this would be cleaner if we write it as a list comprehension:\r\n\r\n```suggestion\r\n    """"""\r\n    Returns the candidates from the supported languages codes.\r\n    :param languages:\r\n        A list of language codes, e.g. [\'en\', \'es\'] in ISO 639 Standard.\r\n    :type languages: list\r\n    :return: Returns list[str] representing supported languages\r\n    :rtype: list[str]\r\n    """"""\r\n   return [\r\n        language_map[language_code]\r\n        for language_code in language_codes\r\n        if language_code in language_map\r\n    ]\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 10, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684618502, 'comment_body': ""I would use here the exception you created: `FastTextModelNotFoundException`\r\n\r\n```suggestion\r\n        raise FastTextModelNotFoundException('Fasttext model file not found')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 7, 10, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684618748, 'comment_body': ""If I'm not wrong, if you have both models downloaded you will take the first, put in in `model_path` and then take the second one and override the `model_path`. Is this the expected behavior? :thinking: "", 'comment_created': datetime.datetime(2021, 8, 7, 10, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684619100, 'comment_body': 'Let this conversation open until we clarify what I put about this setting in my comments below.', 'comment_created': datetime.datetime(2021, 8, 7, 11, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684619282, 'comment_body': '(check comment below before addressing this)', 'comment_created': datetime.datetime(2021, 8, 7, 11, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684643692, 'comment_body': 'Hi @noviluni, I have changed that and made the model preference.', 'comment_created': datetime.datetime(2021, 8, 7, 15, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684644066, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 15, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684644224, 'comment_body': ""Note: it's imported from `dateparser_cli`"", 'comment_created': datetime.datetime(2021, 8, 7, 15, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684651143, 'comment_body': ""Hey @noviluni, Its throws an error (`TypeError: unhashable type: 'list'`), as `language_map[language_code]` returns a list."", 'comment_created': datetime.datetime(2021, 8, 7, 16, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684651604, 'comment_body': 'Pl suggest', 'comment_created': datetime.datetime(2021, 8, 7, 16, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684651868, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 16, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684653966, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 16, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684654423, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 16, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684671570, 'comment_body': 'Hi @noviluni, I have fixed the issue with the above-suggested code and added tests.', 'comment_created': datetime.datetime(2021, 8, 7, 19, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684671869, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 20, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684683262, 'comment_body': ""Hi @gavishpoddar, this error doesn't make sense, as the code I wrote is equivalent to what you wrote :thinking: \r\n\r\nthis error you mention would make sense if it would be a dictionary, as you can't use a list as a key, but in this case where you are creating a list of lists... Could you check this again? \r\n\r\nWhere did you found this error?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 7, 22, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684683487, 'comment_body': ""> Note: it's imported from `dateparser_cli`\r\n\r\nMaybe it's not ideal, but as you are importing other things from there (`from dateparser_cli.fasttext_manager import fasttext_downloader`, `from dateparser_cli.utils import dateparser_model_home, create_data_model_home`....) I don't think it's an issue :+1: "", 'comment_created': datetime.datetime(2021, 8, 7, 22, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684683615, 'comment_body': ""I won't resolve this until I check how the `DEFAULT_LANGUAGES` is now working."", 'comment_created': datetime.datetime(2021, 8, 7, 22, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684755497, 'comment_body': ""`language_map[language_code]` returns a list of language codes. So it looks like `[['en']]` (2d array) so the error is raised \r\n\r\nShould be `['en']`"", 'comment_created': datetime.datetime(2021, 8, 8, 10, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684756744, 'comment_body': 'Hey, I changed it a little bit now it working. Pl suggest if its fine\r\n\r\n```\r\n    return [\r\n        language_code\r\n        for language_code_key in language_codes\r\n        if language_code_key in language_map\r\n        for language_code in language_map[language_code_key]\r\n    ]\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 11, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684822912, 'comment_body': 'For me `model_url` is confusing, it seems that it is the URL of a model. I think calling the variable `models` would be better. Also, the `if can be simplified.\r\n\r\n```suggestion\r\ndef fasttext_downloader(model_name):\r\n    create_data_model_home()\r\n\r\n    models = {\r\n        ""small"": ""https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.ftz"",\r\n        ""large"": ""https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin""\r\n    }\r\n\r\n    if model_name not in models:\r\n        message = ""dateparser-download: Couldn\'t find a model called \\""{}\\"". Supported models are: {}"".format(\r\n            model, "", "".join(models.keys())\r\n        )\r\n        raise FastTextModelNotFoundException(message)\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 20, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684823184, 'comment_body': 'is this `str()` needed? \r\n\r\nDid you tried like this?\r\n\r\n`os.path.join(Path.home(), ""AppData"", ""Roaming""))`\r\n\r\n(it works for me in Linux, but I didn\'t try on Windows)', 'comment_created': datetime.datetime(2021, 8, 8, 20, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684823271, 'comment_body': '```suggestion\r\nDEFAULT_DIR_NAME = os.environ.get(""DATEPARSER_MODELS_DIR_NAME"", \'dateparser_models\')\r\n```\r\n\r\nBTW, I think this should be documented in the docs.', 'comment_created': datetime.datetime(2021, 8, 8, 20, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684823855, 'comment_body': 'When I run the `dateparser_scripts/order_languages.py` script I get a different result. It seems that the CLDR data you had downloaded was different. Could you run again this script? Thanks! :slightly_smiling_face: ', 'comment_created': datetime.datetime(2021, 8, 8, 20, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684824058, 'comment_body': '```suggestion\r\ndef generate_language_map(language_order):\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 20, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684826046, 'comment_body': 'This is working, but the algorithm is ""horrible"" in terms of efficiency. You are iterating the same list multiple times unnecessarily. Look at this refactor where we only iterate the list once:\r\n\r\n```suggestion\r\n    data = {}\r\n    for lang in sorted(language_order):\r\n        if \'-\' not in lang:\r\n            data[lang] = [lang]\r\n        else:\r\n            data[lang.split(\'-\')[0]].append(lang)\r\n    return data\r\n```\r\n\r\n(it works because the list is sorted and the variations appear always after the main language, if not we could have `KeyError`s)', 'comment_created': datetime.datetime(2021, 8, 8, 20, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684833047, 'comment_body': 'Good job doing this. I would suggest to shorten the variable names to make it easier to read :)\r\n\r\n```suggestion\r\n    return [\r\n        language_code\r\n        for language in language_codes\r\n        if language in language_map\r\n        for language_code in language_map[language]\r\n    ]\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 21, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684833100, 'comment_body': 'Oh! Right, it is an `extend`, not an `append! Sorry, you are right, my code was not equivalent :sweat_smile:  \r\n\r\nI took a look to your new code and added a suggestion. Anyways, good job, marking as Resolved :+1: \r\n', 'comment_created': datetime.datetime(2021, 8, 8, 21, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684929314, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 6, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684940137, 'comment_body': 'It works on windows as well checked. So I have removed it\r\nDone 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 6, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684941433, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 6, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684954997, 'comment_body': 'Thanks, @noviluni \r\nDone 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 7, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684959393, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 7, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684963668, 'comment_body': 'This is not working in py3.5\r\n\r\nPl Suggest', 'comment_created': datetime.datetime(2021, 8, 9, 7, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684985190, 'comment_body': ""Hey @noviluni , I was unable to do that due to CLDR data issues even if I simply run `dateparser_scripts/order_languages.py` without `language_map` the following errors is thrown. So I copied `language_map` and pasted this data after running `dateparser_scripts/order_languages.py` and reversed all other changes\r\n\r\n```\r\nERROR tests/test_data.py - ModuleNotFoundError: No module named 'dateparser.data.date_translation_data.jv'\r\nERROR tests/test_data.py\r\nERROR tests/test_language_detect.py - ModuleNotFoundError: No module named 'dateparser.data.date_translation_data.jv'\r\nERROR tests/test_language_detect.py\r\nERROR tests/test_search.py - ModuleNotFoundError: No module named 'dateparser.data.date_translation_data.jv'\r\nERROR tests/test_search.py\r\n```\r\n\r\nNote: this may be dues to old pinned CLDR data. As this error is not raised with the news CLDR data PR #941"", 'comment_created': datetime.datetime(2021, 8, 9, 7, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685002975, 'comment_body': '```suggestion\r\n        if self.detect_languages_function and not self.languages and not self.locales:\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 8, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685003775, 'comment_body': '```suggestion\r\n            self.languages = map_languages(detected_languages)\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 8, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685004316, 'comment_body': '```suggestion\r\n        if self._settings.DEFAULT_LANGUAGES:\r\n            for locale in self._get_locale_loader().get_locales(\r\n                languages=self._settings.DEFAULT_LANGUAGES, locales=None,\r\n                region=self.region, use_given_order=self.use_given_order\r\n            ):\r\n                yield locale\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 8, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685006784, 'comment_body': 'Add Warning saying ""For short strings the language detection could fail, so it\'s highly recommended to use this ``detect_languages_function`` along with some values in `DEFAULT_LANGUAGES`"".', 'comment_created': datetime.datetime(2021, 8, 9, 8, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685122682, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 11, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685122774, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 11, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685123056, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 11, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685349424, 'comment_body': 'Done 👍🏻 \r\n\r\nI have added a note ', 'comment_created': datetime.datetime(2021, 8, 9, 16, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685350041, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 16, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685364346, 'comment_body': 'For me this file is ready :heavy_check_mark: , as a suggestion, I would add the URL so in case there\'s an error the user can easily check if it\'s because the URL is failing.\r\n```suggestion\r\n        logging.info(""dateparser-download: Downloading model \\""{}\\"" from ""\\{}\\\\""..."".format(model_name, model_url))\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 16, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685370004, 'comment_body': '```suggestion\r\n        Note: this function is only used if ``languages`` and ``locales`` are not provided.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 17, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685370487, 'comment_body': '(same change than above)', 'comment_created': datetime.datetime(2021, 8, 9, 17, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685372637, 'comment_body': '```suggestion\r\nif sys.version_info < (3, 6):  # python 3.5 compatibility\r\n    DEFAULT_WINDOWS_CACHE_DIR = os.environ.get(\r\n        ""DATEPARSER_MODELS_CACHE_DIR"", os.path.join(str(Path.home()), ""AppData"", ""Roaming"")\r\n    )\r\nelse:\r\n    DEFAULT_WINDOWS_CACHE_DIR = os.environ.get(\r\n        ""DATEPARSER_MODELS_CACHE_DIR"", os.path.join(Path.home(), ""AppData"", ""Roaming"")\r\n    )\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 17, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685372824, 'comment_body': '```suggestion\r\n    _cache_dir = DEFAULT_WINDOWS_CACHE_DIR\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 17, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685373643, 'comment_body': 'It is possible to change it from a ""note"" to a ""warning""? :)', 'comment_created': datetime.datetime(2021, 8, 9, 17, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685375268, 'comment_body': '```suggestion\r\n.. note:: When using this setting, these languages will be tried after trying with the detected languages with no success. It is especially useful when using the ``detect_languages_function`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 17, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685415180, 'comment_body': 'I have created some test but I am certain its wrong please suggest ', 'comment_created': datetime.datetime(2021, 8, 9, 18, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685435273, 'comment_body': 'I think you shouldn\'t use map_languages here. What you can do is just test if the values are not valid languages, and maybe you can also check if there are repeated values, like in `_check_parsers()` :)\r\n\r\n```suggestion\r\ndef _check_default_languages(setting_name, setting_value):\r\n    unsupported_languages = set(setting_value) - set(language_order)\r\n    if unsupported_languages:\r\n        raise SettingValidationError(\r\n            \'Found invalid languages in the ""{}"" setting: {}\'.format(\r\n                setting_name, \', \'.join(map(repr, unsupported_languages))\r\n            )\r\n        )\r\n    _check_repeated_values(setting_name, setting_value)\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 18, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685470462, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685471248, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685472020, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685472175, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685472926, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685473172, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685473889, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685474827, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685758939, 'comment_body': ""I've seen that you put the same setting twice. I would suggest to keep only the first one.\r\n```suggestion\r\n        param('DEFAULT_LANGUAGES', 'en', '', ['en']),\r\n        param('LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD', '1', '', 0.5),\r\n```"", 'comment_created': datetime.datetime(2021, 8, 10, 7, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685764753, 'comment_body': '```suggestion\r\n``DEFAULT_LANGUAGES``: It is a ``list`` of language codes in ISO 639 that will be used as default \r\nlanguages for parsing when the language detection fails. eg. [""en"", ""fr""]:\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 7, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 686128481, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 10, 16, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 686128970, 'comment_body': 'done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 10, 16, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687417517, 'comment_body': '```suggestion\r\n    if languages or locales or region or detect_languages_function or not settings._default:\r\n```\r\n@noviluni @gavishpoddar @lopuhin  Just aesthetics\r\nDo you guys think the condition with `not` at the end is more aesthetic?', 'comment_created': datetime.datetime(2021, 8, 12, 6, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687421121, 'comment_body': '```suggestion\r\nimport hashlib\r\nfrom datetime import datetime\r\nfrom functools import wraps\r\n\r\nfrom dateparser.data.languages_info import language_order\r\nfrom .parser import date_order_chart\r\nfrom .utils import registry\r\n```\r\n\r\nIf possible we may sort/optimize imports.\r\nNOTE: These are just suggestions. All the Import related suggestions are not required as part of this PR and you can ignore them if you would like to :smile: ', 'comment_created': datetime.datetime(2021, 8, 12, 6, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687424068, 'comment_body': ""I couldn't find this variable used anywhere. Is it still required?"", 'comment_created': datetime.datetime(2021, 8, 12, 6, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687424542, 'comment_body': '```suggestion\r\nimport os\r\n\r\nimport fasttext\r\nfrom dateparser_cli.exceptions import FastTextModelNotFoundException\r\nfrom dateparser_cli.fasttext_manager import fasttext_downloader\r\nfrom dateparser_cli.utils import dateparser_model_home, create_data_model_home\r\n\r\n```\r\n\r\nWe may sort/optimize imports like this. ', 'comment_created': datetime.datetime(2021, 8, 12, 6, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687525862, 'comment_body': '```suggestion\r\nfrom langdetect.detector_factory import DetectorFactory, PROFILES_DIRECTORY\r\n\r\nimport langdetect\r\n```\r\n\r\nAfter sorting/optimizing imports.', 'comment_created': datetime.datetime(2021, 8, 12, 9, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687528194, 'comment_body': ""This gives the following warning:\r\n`Function 'map_languages' does not have a parameter 'languages'`\r\nWe need to update the docstring comment."", 'comment_created': datetime.datetime(2021, 8, 12, 9, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687550378, 'comment_body': '```suggestion\r\nimport collections\r\nimport sys\r\nfrom collections.abc import Set\r\nfrom datetime import datetime, timedelta\r\n\r\nimport regex as re\r\nfrom dateutil.relativedelta import relativedelta\r\n\r\nfrom dateparser.conf import apply_settings, check_settings\r\nfrom dateparser.custom_language_detection.language_mapping import map_languages\r\nfrom dateparser.date_parser import date_parser\r\nfrom dateparser.freshness_date_parser import freshness_date_parser\r\nfrom dateparser.languages.loader import LocaleDataLoader\r\nfrom dateparser.parser import _parse_absolute, _parse_nospaces\r\nfrom dateparser.timezone_parser import pop_tz_offset_from_string\r\nfrom dateparser.utils import apply_timezone_from_settings, \\\r\n    set_correct_day_from_settings\r\n```\r\nSort imports suggestion.', 'comment_created': datetime.datetime(2021, 8, 12, 9, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687570893, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 10, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687572796, 'comment_body': 'Hi @kishan3 should there be space as they are imported from same library\r\n\r\nDone 👍🏻', 'comment_created': datetime.datetime(2021, 8, 12, 10, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687575109, 'comment_body': 'Done 👍🏻 changed as per above recommendation Pl suggest if a change is required', 'comment_created': datetime.datetime(2021, 8, 12, 10, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687575180, 'comment_body': 'Small typo `menager` -> `manager`', 'comment_created': datetime.datetime(2021, 8, 12, 10, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687580779, 'comment_body': '```suggestion\r\nimport logging\r\nimport os\r\nimport urllib.request\r\nfrom pathlib import Path\r\n\r\nfrom .exceptions import FastTextModelNotFoundException\r\nfrom .utils import dateparser_model_home, create_data_model_home\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687597785, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 10, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687600322, 'comment_body': ""Hi, I think it's already following [PEP8](https://www.python.org/dev/peps/pep-0008/#imports)"", 'comment_created': datetime.datetime(2021, 8, 12, 10, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687621221, 'comment_body': 'I believe they are being used in L24  ', 'comment_created': datetime.datetime(2021, 8, 12, 11, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687622466, 'comment_body': 'Thanks done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 11, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687623023, 'comment_body': 'Thanks 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 11, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 688002925, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 18, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 688212131, 'comment_body': 'I see. Thanks Now I can see, It was changed in this commit https://github.com/scrapinghub/dateparser/pull/932/commits/10bd8778c363acd03711fd1d486e7c59e27af388', 'comment_created': datetime.datetime(2021, 8, 13, 3, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 688289408, 'comment_body': 'Hi @noviluni, please suggest where to document in `docs/custom_language_detection.rst` or should I remove the environment variable.', 'comment_created': datetime.datetime(2021, 8, 13, 7, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 689283240, 'comment_body': ""+1 to remove this env variable, I think it's enough to be able to customize the parent - or to allow the user to customize the full path."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 690345458, 'comment_body': 'Done I have removed the environment variable', 'comment_created': datetime.datetime(2021, 8, 17, 12, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 690564474, 'comment_body': '```suggestion\r\n    downloaded_models = [\r\n        file for file in os.listdir(dateparser_model_home)\r\n        if file in _supported_models\r\n    ]\r\n    if not downloaded_models:\r\n        fasttext_downloader(_DEFAULT_MODEL)\r\n        return _load_fasttext_model()\r\n\r\n    model_path = os.path.join(dateparser_model_home, downloaded_models[0])\r\n```\r\n\r\nI think this approach is better.', 'comment_created': datetime.datetime(2021, 8, 17, 17, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 690565188, 'comment_body': ""Don't forget to remove the typing here."", 'comment_created': datetime.datetime(2021, 8, 17, 17, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 690568355, 'comment_body': 'I think it would be a good idea to add an `else` with a message indicating what to put.\r\n\r\n```suggestion\r\n    if args.fasttext:\r\n        fasttext_downloader(args.fasttext)\r\n    elif args.clear:\r\n        clear_cache()\r\n        logging.info(""dateparser-download: All cache deleted"")\r\n    else:\r\n        logging.info(\r\n            ""dateparser-download: You need to specify the command (i.e.: --fasttext or --clear)""\r\n        )\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 17, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 690569988, 'comment_body': '```suggestion\r\n        logging.info(""dateparser-download: The model \\""{}\\"" is already downloaded"".format(model_name))\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 17, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 690999747, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 8, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691000609, 'comment_body': 'done 👍🏻 \r\n', 'comment_created': datetime.datetime(2021, 8, 18, 8, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691001114, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 8, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691005821, 'comment_body': 'Thanks Marc, changes done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 8, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693365377, 'comment_body': '```suggestion\r\n    ""yue"": [\r\n        ""yue""\r\n    ],\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365434, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365449, 'comment_body': '```suggestion\r\n    ""tt"": [\r\n        ""tt""\r\n    ],\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365475, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365690, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365721, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365752, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365782, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365827, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365869, 'comment_body': '```suggestion\r\n    ""ff"": [\r\n        ""ff""\r\n    ],\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365914, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365955, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693366261, 'comment_body': 'Hi @gavishpoddar, I\'m not sure why are you having that issue, but it\'s working for me correctly when I try in your branch.\r\n\r\nI added code suggestions with the changes. Could you directly apply them one by one through the graphical interface (button ""commit suggestion) to avoid any issue?:\r\n![imagen](https://user-images.githubusercontent.com/22377678/130326396-fb458494-a73b-4ff8-8810-c0df009e1baa.png)\r\n\r\nOnce you do it I will check it again and if nothing changes it means that it\'s ok :)', 'comment_created': datetime.datetime(2021, 8, 21, 15, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693691064, 'comment_body': '```suggestion\r\n    along with ``DEFAULT_LANGUAGES``.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693691696, 'comment_body': '```suggestion\r\nThe fastText integration currently supports the large and the small models. You can\r\n```\r\n\r\nAlso, it would be great to link “large and small models” to some webpage that explains what those are. Users wishing to try fastText out but unfamiliar with it may find that helpful.', 'comment_created': datetime.datetime(2021, 8, 23, 6, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693693589, 'comment_body': 'We should be consistent with casing.\r\n\r\n```suggestion\r\nIt currently supports two language detection libraries out of the box: `fastText <https://github.com/facebookresearch/fastText>`_ \r\n```\r\n\r\nThere’s at least 1 more “fasttext” later in this document that needs changing as well.', 'comment_created': datetime.datetime(2021, 8, 23, 6, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693693990, 'comment_body': '```suggestion\r\nImport the fastText wrapper and pass it as ``detect_languages_function``\r\nparameter. Example::\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693695396, 'comment_body': 'Assuming this is actually about our wrapper, rather than upstream fastText, it may be best to change this accordingly:\r\n\r\n```suggestion\r\n    If no model has been downloaded, the fastText wrapper downloads and uses \r\n    the small model by default.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693695508, 'comment_body': '```suggestion\r\nImport the langdetect wrapper and pass it as ``detect_languages_function``\r\nparameter. Example::\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693696248, 'comment_body': 'I think it would make sense to move this to the beginning of the section, and probably link to some discussion of those tests, so people can check out the details and possibly re-run the tests in the future as the upstream projects evolve.', 'comment_created': datetime.datetime(2021, 8, 23, 6, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693696732, 'comment_body': 'To prevent having to update this header as we add or remove implementations in the future, maybe something like “Built-in implementations” would be slightly better.', 'comment_created': datetime.datetime(2021, 8, 23, 6, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693699119, 'comment_body': '```suggestion\r\n``dateparser`` allows the integration of any library to detect languages by\r\nwrapping that library in a function that accepts 2 parameters, ``text`` and\r\n``confidence_threshold``, and returns a list of the detected language codes in\r\nISO 639 standards.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693699478, 'comment_body': '```suggestion\r\n        Takes 2 parameters, `text` and `confidence_threshold`, and returns\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693700753, 'comment_body': '```suggestion\r\n        * `text` is the input string whose language needs to be detected.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693705694, 'comment_body': '```suggestion\r\n        * `confidence_threshold` is a number between 0 and 1 that indicates the \r\n        minimum confidence required for language matches.\r\n        \r\n        For language detection libraries that, for each language, indicate how \r\n        confident they are that the language matches the input text, you should \r\n        filter out languages with a confidence lower than this value (adjusted,\r\n        if needed, to the confidence range of the target library).\r\n        \r\n        This value comes from the dateparser setting \r\n        `LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693707389, 'comment_body': 'I see some duplication of information in this section. For example, this note is already covered by the docstring. The text before the example also covers information about the signature later covered in the docstring.\r\n\r\nI think it may be best to remove the docstring from the example, and instead cover the documentation about parameters and return value all before the example. ', 'comment_created': datetime.datetime(2021, 8, 23, 6, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693708848, 'comment_body': 'Just to clarify, when we say ISO 639, do we mean the whole ISO? It may be best to include a 3-letter language code in the example at the end to clarify that or, if only 2-letter ISO codes are supported, to specify ISO 639-1.\r\n\r\nAlso:\r\n\r\n```suggestion\r\n``DEFAULT_LANGUAGES``: It is a ``list`` of language codes in ISO 639 that will be used as default \r\nlanguages for parsing when language detection fails. eg. [""en"", ""fr""]:\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693713839, 'comment_body': ""Hi @gavishpoddar, if I'm not wrong you forgot to apply this one. I reopened it."", 'comment_created': datetime.datetime(2021, 8, 23, 7, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693727662, 'comment_body': 'For this test I would use a string recognized by the language in `languages` and not a generic date. For example:\r\n\r\n```suggestion\r\n    @parameterized.expand([\r\n        param(date_string=\'29 mai 2021\', languages=[""fr""], settings={\r\n            ""DEFAULT_LANGUAGES"": [""en"", ""es""]\r\n        }),\r\n    ])\r\n    def test_parse_settings_default_languages_with_detected_language(self, date_string, languages, settings):\r\n        result = parse(date_string, languages=languages, settings=settings)\r\n        assert type(result) == datetime\r\n```\r\n\r\nAnd I would add the expected date instead of just checking the type. :)', 'comment_created': datetime.datetime(2021, 8, 23, 7, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693743361, 'comment_body': 'Could you add a test for `DEFAULT_LANGUAGES` with:\r\n* `DateDataParser` (and `get_date_data`)\r\n* `search_dates`', 'comment_created': datetime.datetime(2021, 8, 23, 7, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693772692, 'comment_body': 'Hi @noviluni, I am unable to apply this as GitHub is showing the below error\r\n\r\n`Suggestion cannot be identical to original text. \r\n` ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693775952, 'comment_body': 'Done 👍🏻, Changes two `fasttext` to `fastText`', 'comment_created': datetime.datetime(2021, 8, 23, 8, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693776700, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693780059, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693780358, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693781100, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693781332, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693782333, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693782740, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693783399, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693783993, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693784459, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693855823, 'comment_body': 'Hi @noviluni, I have added tests for both the functions but `search_dates` can you please recheck as search dates only select only one language ', 'comment_created': datetime.datetime(2021, 8, 23, 10, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693880455, 'comment_body': 'Hey removing this file `dateparser_data/language_detection_models/__init__.py` is leading to errors and other folders like `dateparser_data` contains empty __init__.py\r\n\r\nPl suggest', 'comment_created': datetime.datetime(2021, 8, 23, 11, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693885017, 'comment_body': 'I have added the link to [fasttext](https://fasttext.cc/blog/2017/10/02/blog-post.html).', 'comment_created': datetime.datetime(2021, 8, 23, 11, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693933833, 'comment_body': 'I am not sure I referred to this [article](https://fasttext.cc/blog/2017/10/02/blog-post.html). It mentions ISO is used but I was unable to find more information please suggest.\r\n\r\nSo should it be ISO 639-1 or ISO 639-2\r\n\r\nNote it supports languages with codes like `azb`\r\n\r\n@Gallaecio ', 'comment_created': datetime.datetime(2021, 8, 23, 12, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693957406, 'comment_body': 'Done 👍🏻 , I have made the changes but let me know if any changes are required.', 'comment_created': datetime.datetime(2021, 8, 23, 13, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693986093, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 13, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693986765, 'comment_body': 'Ok, this suggestion is wrong, for some reason is adding `tt` instead of removing it :thinking: I created a new different suggestion removing `tt`.', 'comment_created': datetime.datetime(2021, 8, 23, 13, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694613484, 'comment_body': ""Hi @gavishpoddar, good job with the tests!\r\n\r\n> Hey removing this file dateparser_data/language_detection_models/__init__.py is leading to errors and other folders like dateparser_data contains empty init.py\r\n\r\nThe empty __init__.py it's not an issue, but that folder (`language_detection_models`) is not used. Could you explain me which errors are you having and/or how to reproduce them? I was able to remove it and run the tests and all is working.  :thinking: \r\n\r\nI was able to directly remove it, but if you have som git related errors, you can try with `git rm`. Give me more details, please :)"", 'comment_created': datetime.datetime(2021, 8, 24, 8, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694630231, 'comment_body': 'This is complex. `arz`, `azb`, etc. are `ISO 639-3` codes. FastText supports `ISO-639-1` and some `ISO 639-3` codes. Dateparser does the same. So I guess you can leave it as `ISO 639` or write:\r\n\r\n> ""of languages codes in ISO 639-1 / ISO 639-3 that will be used as default""\r\n', 'comment_created': datetime.datetime(2021, 8, 24, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694635775, 'comment_body': '```suggestion\r\n    def test_check_settings_extra_check_confidence_threshold(self):\r\n```', 'comment_created': datetime.datetime(2021, 8, 24, 8, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694642292, 'comment_body': ""I would add here a new test using the confidence threshold setting. You can do something like this:\r\n\r\n```\r\ndef detect_languages(text, confidence_threshold):\r\n     if confidence_threshold > 0.5:\r\n         return ['en']\r\n     else:\r\n         return ['fr']\r\n\r\ndef test_confidence_threshold_setting_is_applied(self):\r\n    ddp = DateDataParser(detect_languages_function=detect_languages, settings={'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD': 0.6})\r\n    assert ddp.get_date_data('21/06/2020').locale == 'en'\r\n\r\n    ddp2 = DateDataParser(detect_languages_function=detect_languages, settings={'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD': 0.4})\r\n    assert ddp2.get_date_data('21/06/2020').locale == 'fr'\r\n\r\n```\r\n\r\nThis is not exactly a unit test, but we try to ensure that the LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD setting correctly arrives to the `datect_languages_function`."", 'comment_created': datetime.datetime(2021, 8, 24, 8, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694675003, 'comment_body': ""I was having  issue \r\n\r\n`ModuleNotFoundError: No module named 'langdetect.detector_factory'; 'langdetect' is not a package\r\n`\r\n\r\nI have removed that and instead imported used `langdetect.detector_factory.DetectorFactory`"", 'comment_created': datetime.datetime(2021, 8, 24, 9, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 694675959, 'comment_body': 'Now its solved', 'comment_created': datetime.datetime(2021, 8, 24, 9, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 694677737, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 24, 9, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 694683193, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 24, 9, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 694710302, 'comment_body': 'Thanks test added', 'comment_created': datetime.datetime(2021, 8, 24, 10, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698255125, 'comment_body': 'Hey @gavishpoddar, I think there was a confusion. I asked to remove the \r\n\r\n![image](https://user-images.githubusercontent.com/22377678/131301766-7d83ba2e-f0ab-4247-ac64-b8ca230880b1.png)\r\n\r\nNot the:\r\n\r\n![image](https://user-images.githubusercontent.com/22377678/131301821-25192060-bac7-4f01-8c6b-843dc3e28d82.png)\r\n\r\nYou can restore the second one and remove the first one.', 'comment_created': datetime.datetime(2021, 8, 30, 7, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 698276260, 'comment_body': 'Done 👍🏻, thanks', 'comment_created': datetime.datetime(2021, 8, 30, 7, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698458332, 'comment_body': ""Why is ``usage`` needed here, won't it be auto-generated? If yes, I'd rather drop it from here so we don't need to update it."", 'comment_created': datetime.datetime(2021, 8, 30, 12, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698459591, 'comment_body': 'Minor note: I think it would make sense to structure it in this way:\r\n\r\n```\r\nif args.clear:\r\n    ...\r\nif args.fasttext:\r\n    ...\r\n```\r\n\r\nIn this way, ``--clear --fasttext small`` would work as well - it would first clear the cache and then download the model.', 'comment_created': datetime.datetime(2021, 8, 30, 12, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698460380, 'comment_body': ""Minor: instead it's better to print an error and set a non-succesfull exit code with \r\n```suggestion\r\n       dateparser_argparse.error(\r\n```"", 'comment_created': datetime.datetime(2021, 8, 30, 12, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698471378, 'comment_body': 'Probably a blank line is needed between these two lines. Also the title could be adjusted to ""Optional language detection"" perhaps?', 'comment_created': datetime.datetime(2021, 8, 30, 13, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698507462, 'comment_body': 'Thanks, Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 30, 13, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698509947, 'comment_body': 'Thanks, Done 👍🏻', 'comment_created': datetime.datetime(2021, 8, 30, 13, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698514841, 'comment_body': 'Done 👍🏻 , I have removed the usage', 'comment_created': datetime.datetime(2021, 8, 30, 14, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698516238, 'comment_body': 'Updated thanks 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 30, 14, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 700042514, 'comment_body': '@gavishpoddar I think there are a few issues here now:\r\n\r\n- I think it\'s best to first clear the cache, and then download - otherwise we\'ll clear what we just downloaded\r\n- Previously you had an else branch with  ``""dateparser-download: You need to specify the command (i.e.: --fasttext or --clear)""`` - I think it would be great to bring it back, using ``dateparser_argparse.error`` to show it.\r\n- For ``dateparser-download: All cache deleted`` message, I think it\'s best to use ``logging.info`` as before - this is not an error. ``dateparser_argparse.error`` would show a message and terminate the program with a non-succesfull return code, which is not we want here', 'comment_created': datetime.datetime(2021, 9, 1, 9, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 700089468, 'comment_body': 'Hey I have @lopuhin, made the changes. Please check and suggest if its fine and what more needs to be done.', 'comment_created': datetime.datetime(2021, 9, 1, 10, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 701078820, 'comment_body': 'looks great, thanks @gavishpoddar :+1: ', 'comment_created': datetime.datetime(2021, 9, 2, 13, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 701598002, 'comment_body': 'I think newline at end of the file is required.', 'comment_created': datetime.datetime(2021, 9, 3, 5, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 701603364, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 9, 3, 5, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}]","[{'commit_sha': '1e860996175ee11a8046d16fff92fa7fffe9a9a7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c6e29d204068f645bb7cf318950252d580d6394', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '176565beaae2b2a358ee25e0b9d0762952d098dd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c8678605b7cfc3e640ef4ad2ba218c565f5c9e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e22d2d408dcc57d31dd5c421939650b5589ff9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a249155e74d06e8ce19d09e7ed207b4f877afe', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32321cf93f8d3a08ea77d13fdf0c6bffd9671194', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499a29d36ca46e083138f6ee47722a36eaf10b3d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a41213573e0a78e445c91e13c41b734e894ed1a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c5b0e1bb7351696d50e5a62283f564272e8060', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6a2098a8609f5914e1eb86d5b7a891e93f55dc0', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3de5d5390f9679a97c2111ea458b6c92200b572', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6531fd8593c1be5658c7781454244f3b67c44026', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fbd94a2ae49abf6907eba1e9b25b16d7f8fd40', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edfc7603a5a2b5f35080d3afd9fa633da6e99eba', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f67f0ee9e475ca056067cb13369d3339be01af', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '584f40b43e75b724b9f7f40fd2a10f4bb82bf036', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2d1ad6e93e881eddc68325be95cfdc413334de5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b6f195020df63eb284100a91205dc321c51cee9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c1ad096f310294292b5b93828e5f6a70ad2166', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82ce3f140ea330149e3f64b1ff6078afb913c45a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a4268a46b9be034a2350a68ee55099830bba2d9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36a88d782075996af13ce04747999df572f9d10e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e04faf8968b826a201f131601b5ef0851b5f1e91', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '270faf6f9bb7034449a195e1054039eb13bc2578', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb8d3fad1b7103a4fa272313ec664b259b8186c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6976a659aacdf7fad709fb48715cfa2c536b5852', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad04bcf3b0f38338e1a01b1e26c0adeddf3fa850', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4790d97e5ff7a384f5e87ac0df34f7e5e67c20fe', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bc43afbc99eef76901dd3f9595b7094414a3349', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a313d3339a2f0a44e64e1c196d1bef41f55e7dd4', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fda13ec60f4041206cb39cb36dfbfd2d8ed8d58', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20aba0a19f8e3eb7c79a476f117aec0a727324b4', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f2ccae4cefe1d38562276bbcaab594c73e049a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e3ed235e415f34158d2411f8b3f49af4a2b79a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e68c7a2e03f7c659714cdc0103271afa6dda81', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '205e29f7c2e10dbd53302ef822503b896069ed92', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345c18ebd014591e69e9f561ec1dab190203e73c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25f3b2946ada969b46af228f82175bd61c16ac7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86df9266498df724d775b4de1bfe4eabf0327145', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5764bf9228c10e0fa1d6da9851d0b28eef992ae', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63262cf64c249475158d130921f4aee4c623f390', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fd53c454907717ad12c90c54a89f11b1e3117f6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb3fcc31cac528bc2990f36a2f3fd59fac73634', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa41464a0b428ddf6792b9f35c42f47789d0d4f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f323012d75538294d4a08cab7d7926c0f7148c9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce7e07700fea847947062f1e539f2da3b9da715', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '172361f6926f9633d622cecd45c589da5fa30fcb', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c959d877a24e53942d0e3744ad5abede07dab7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '339f7f66203f0b7176e271b275bf13b7c9008b28', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580a85909ed8e92d511ea98437975b687f69243d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a81f2619c1d5ec54120c067b66a66cdedb6d0b0', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b7607ab92a2ad2328cec03632e4fcd5a753580b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbfebc97632a4ba1aebaa29eece9f3d2dd4d0e49', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8c7bdceea5aee0cd2a46d6b4f7ea88bbac257', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f134d3172e388806519fa570acd18a52ea4a55f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50b7224515c14851546e7a89efabff58f8b1b6de', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b55d1a01060a524b1959fe03caba767c7221bf', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297113418289388508583c3a4bf4fdb4a1c02b1f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38365482111b089a29b5a7deb5178c6a2e2730d1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19ca2ff6b53c190587167ecf4324dbf135162b50', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c715e5837d0a17e67982e28becf832c09361b6e1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03cd5b5d755f93dcbaff86466f2bdaee0c0ec93e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6448d01c41c8e9f362b0e71440c26ef77646cb1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '639fb0a9ba77383637237a4b8986fdbf119d0dff', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25780f8d55a8ce0c712bb781027f3e24b0f30ea5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5fe589c2722fbac5488c81e6837bf8f165e756b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82cad0089985faab5316f7d3d5b7be4784aa96d5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a684fdffb62da5f6d922314f960f4069dacda995', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03dd0be1fbd78992c428dafc8de741c757e16383', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0d54af1e63b385b4694e009461edb6c4be0e43', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54ccdf80bb8dda0be51eb72ba4348816387e46ce', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c8c007b2417178a7f599b18721ed798153184d1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5e0a308ff80e62b632c6f1c5d77d4985a434887', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985dad6317b253092309814ffb322fb4914b187d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67457905211e09498eb87fc9f4117450677a4e3b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69ea22fe652918f185f9c1a46e999d145bca3ae9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e184092df99d55aaa3b668047355cd2a50cb4406', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '239f4a3e17a7756d2b598793b0169784713ec0db', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abab857b3e32de699e693858752a389a2e76fb4d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffea2469c413cce42c6d1932e1c4eb01f26b74ce', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1992524a95f9b19ca29bb987c49af5028c44063', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9266b0633c35380c29be8c3ea1fe02a7462f8805', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7073f39c840fe65bc492715e724acba122e2d042', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdc5d17d4c7c64bc9b3154890ddf74b57fc1219c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cabce8dd47f8d6d38bf0275d16a8183499f19f6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e416ef53d52bb6fa05f61a96e75da7d5ebdaf1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f7e10a220e5aca214d40528654267d8386a5db', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '460142499884175d381dc0cedc626d7ad5e9ad89', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0d2cc24b7cfbd76f83352fc7788711ac1813548', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd316bc5d479991ed0039fa38e93f22af2de3d7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c68b2f3692ac9c052c48e169b94bd34f0e091323', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7139c79107ef4402071fd2386fdedbc36b1e295b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac2fd9adbcca61c3fe309f33b324eeef1728f3b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8896467e183638766f34a13f0b8441aa9ef1b144', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1833f1fbe9251279f1cc4997839d083ee75d03b3', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1318afd405d4dbe6f924d41390223c6dcafc1d6f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5401b88fae704ca745b3027136cf89159abb6024', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0507b48411d73332bbc9a25012e3b6720e5945f2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '166ac3354d392494501bbd23142beb1adc8a41a2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e6eb14cfb289cce73a1e4276d02d99e51ed253f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb9768cc7231f6fdc03699ad0ecb69a2a934bea', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95cf0c944b9b23b9c25f5dcb74e5844eff4476f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd76db341ee515435cb51d162b36a2db109b4772', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5be905acca7104bbc99a2b5a96cc5525f48a0e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5de7f98850a77628e5e694ba545a34c2211a1ced', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67cfad24f24b8a35f07db29c9662d8a7e6ad47ef', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb5257f2e0b8bc6b3df34b99da87669f129780c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b8f8508efc26a1d1169e77abb7c03f57422a45f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8de4d3d601488c08aece180e75a22d8b8581bf3c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f43bb0b6c3eb52fa2641647ea8cf644c2b34e8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3db7d7633908dd358f9229cb959f223f2c11a6b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1475ab0dbbbfd3b1732cbb93833b1bca409e9b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8a25dca3c8e50f2d5be63740addd62b3d639053', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d33863ac817372f853bd68afd893f73591ed89', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51d1b803bcd38633a62fce99b01f7d2c87a98a4b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '260265072909a0dd0a470389acb18096aa012dcc', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a035eaa62b6b559266b1530b04d7edc2c0b0316', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10bd8778c363acd03711fd1d486e7c59e27af388', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab15a3b8c218f43f6494673e06a067ffafb35cc1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebe64f953634688743c6200d9ee2f5ed7fee4f79', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba3dc2c55f032ba62f6c638640e5c6afa29bbe0', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2c999fdd95985e72a3be30bde55d6c11f938cb1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d080e43d95686791a25f0d453fc5831895cf6e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '909c5f3c86150e09b8e2667efd160dd73d9067ad', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '658e11f0f609df8800bc319e63ff6b906cfea396', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a17537e0edaf9b16127b607b2e52bdb8c56b326', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b296dbafd00350bb32e0891dae17dbc9f9e8f93', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbb2564c5eb7dc9d0cfc4c26c49d914f30e2c52c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6cbded7578f3dca051f5e3e73104b43f2ed52e6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b19b8644ef4152d1c138722c74f48041da58d59', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a689c7fb0d1b86d0329c8c5a38c9c0c630e89e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a78400fbd947bf62adcbe5d48f030f6df005a2b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd5948405bfdf84f395c2d78f36e7b7f62814698', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0555e38579d1a18846483a6d7a92bce8b1a8c1ea', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df60c2b4d4c91f6750c613a0586016ab0bcb814', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e68260a8b548278f777682f574a228c59d569a3d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '141d2ca72dbec4611fd1a28064fdf76c593c1b5b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '001a9d71727deae1d2709c69462ca7b21c6a4154', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae36bc6c4003e368ec5ae0ba2376f8ff91a9dc59', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8dcf7b09d5c75d4b107a3c89d955d66d1ec9734', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}]",Gavish Poddar,18366222,,User,,22,,15,32
660926303,Optional Language Detect,"Implementing optional language detection and allow the creation of custom language detection libraries by users.

This work is currently in progress and this PR is created for the monitoring purpose by the maintainers to suggest progress.


This PR is currently not complete.

TODOS:
- [X] Restructuring protect to pass function for language detection.
- [X] Managing HTTP exception for `fasttext` model download. 
- [x] Updating `setup.py` for optional language detection.
- [x] Mock test of `parse`, `search_dates` and `DateDataParser`.
- [x] Unit tests for language detect functions.
- [x] Functionality analysis of the implemented language detection.
- [x] Testing optional language detection settings.
- [x] Make `apply_setting` independent functions.
- [x] Fasttext model download manager for models.
- [x] Documentation optional language detection settings.
- [x] Language Mapping (CLDR & ISO 639).
- [x] Check working with other settings.
- [x] Removing unsupported locale from language detecting
- [x] Improving docs.
- [x] Setting fasttext default language.
- [x] Removing langauge_map.json and sinking to language_data.py
- [x] langdetect set default DetectorFactory without changing global state.
- [x] `dateparser-download` set default caching folder.
- [x] Documenting `dateparser-download`.
- [x] Changes for preventing breaking changes.
- [x] `detect_languages_func` -> `detect_languages_function`

",True,932,https://api.github.com/repos/scrapinghub/dateparser/pulls/932,https://github.com/scrapinghub/dateparser/pull/932,closed,1218,25,25,141,26,444,0,0,[],2021-06-03 13:52:56+00:00,2021-09-06 13:09:11+00:00,8205375.0,"94 days, 23:16:15","[{'comment_id': 644815844, 'comment_body': 'Hi @noviluni,\r\nCan I use this kind of in program installation of the additional libraries?', 'comment_created': datetime.datetime(2021, 6, 3, 13, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 645393693, 'comment_body': 'IMO we should not try to install anything automatically, this is on the user to decide.', 'comment_created': datetime.datetime(2021, 6, 4, 8, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 645428494, 'comment_body': 'Yeah I have implemented that here. ', 'comment_created': datetime.datetime(2021, 6, 4, 9, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 645876516, 'comment_body': ""Hi @gavishpoddar, no you shouldn't :slightly_smiling_face: \r\n\r\nI could try to explain the reasons behind it (is not pythonic, you are installing something without asking the user, etc), but I think it's better to talk about possible approaches.\r\n\r\nProbably the best approach is adding an optional dependency. These can be indicated in the `setup.py` file with the `extras_require` property. We do it to be able to use the `hijri` and `jalali` calendars. To use them you have to do: `pip install dateparser[calendars]`. \r\n\r\nI think you should find some examples on the internet (apart from the `calendars` example in this project). Let me know if you don't know how to do it.\r\n\r\n(What you could do is capturing the `ImportError` and re-raise it giving a hint on how to enable it.)"", 'comment_created': datetime.datetime(2021, 6, 4, 21, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645878144, 'comment_body': 'I already commented about a better approach, but independently you should capture here only the `ImportError`:\r\n\r\n```suggestion\r\ntry:\r\n    from langdetect import detect_langs\r\nexcept ImportError:\r\n```', 'comment_created': datetime.datetime(2021, 6, 4, 21, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645880985, 'comment_body': 'I know this is a WIP but I prefer to write it. Instead of using parameters here, I think it would be a better idea to use the settings. If we add all ""configuration"" aspects here the signature of the function would be too long.\r\n\r\nI mean something like:\r\n```python\r\ndateparser.parse(\r\n    \'<datestring>\', \r\n    settings={\r\n        \'LANGUAGE_DETECTION_ENABLED\': True, \r\n        \'LANGUAGE_DETECTION_METHOD\': \'lang_detect\'\r\n    }\r\n)\r\n```\r\n\r\n(the settings names are just ideas, I think we should find something shorter.)\r\n\r\nHowever don\'t worry about this, we can keep it like this and change it to settings later.', 'comment_created': datetime.datetime(2021, 6, 4, 22, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645881175, 'comment_body': 'No a good practice to use global variables, I will check it later and return to you with my suggestion.', 'comment_created': datetime.datetime(2021, 6, 4, 22, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645881507, 'comment_body': '```suggestion\r\n    if loaded_parser is None:\r\n```\r\n\r\nor\r\n\r\n```suggestion\r\n    if not loaded_parser:\r\n```\r\n\r\n(I think the second is better for this case).', 'comment_created': datetime.datetime(2021, 6, 4, 22, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645881852, 'comment_body': 'same here, we should specify which exception are we capturing instead of capturing all :)', 'comment_created': datetime.datetime(2021, 6, 4, 22, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645882556, 'comment_body': 'as this is a function (not a class), the name should be a verb, so I would change it to something like \r\n\r\n`parse_languages` or `detect_languages` \r\n\r\n(and I also would put a plural because it returns multiple matches).', 'comment_created': datetime.datetime(2021, 6, 4, 22, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 645963723, 'comment_body': 'Great, I will try to do that myself if I need help I will ask for help 🙂', 'comment_created': datetime.datetime(2021, 6, 5, 8, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 645971375, 'comment_body': 'That will be great, I was thinking of creating a class should that be better', 'comment_created': datetime.datetime(2021, 6, 5, 10, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 647710004, 'comment_body': 'Is caching as this doable?', 'comment_created': datetime.datetime(2021, 6, 8, 18, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648054376, 'comment_body': ""I don't think it's a sound method to cache this - if someone passes changed settings, we'll get old results. Why do we need our own caching here? importlib already has a cache."", 'comment_created': datetime.datetime(2021, 6, 9, 7, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648054703, 'comment_body': 'I think I answered below https://github.com/scrapinghub/dateparser/pull/932/files#r648054376', 'comment_created': datetime.datetime(2021, 6, 9, 7, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648055708, 'comment_body': 'why do we take only the first language and not all above threshold?', 'comment_created': datetime.datetime(2021, 6, 9, 7, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648056709, 'comment_body': ""Do we need to convert it to string? I think it should be possible to get probabilities directly.\r\n\r\nAlso, don't we want to get all language detections?"", 'comment_created': datetime.datetime(2021, 6, 9, 7, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648057667, 'comment_body': ""I'd rather not include this in the code (I mean this whole file), and also I'd rather tackle the question of user extensibility later, once our internal API is stable."", 'comment_created': datetime.datetime(2021, 6, 9, 7, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648168129, 'comment_body': 'Right I will resolve it', 'comment_created': datetime.datetime(2021, 6, 9, 10, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648222598, 'comment_body': 'For more than one predictions in `fast_text` we need to send the number to predictions we want.\r\n\r\nI have set the top 3 predictions for now. Pl suggest', 'comment_created': datetime.datetime(2021, 6, 9, 11, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648254001, 'comment_body': 'What do you think about taking all predictions that are above threshold?', 'comment_created': datetime.datetime(2021, 6, 9, 12, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 648263236, 'comment_body': 'I am fixing \r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 9, 12, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648290769, 'comment_body': 'Ok, Thanks', 'comment_created': datetime.datetime(2021, 6, 9, 13, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 648295759, 'comment_body': 'Can we set default language here or should that be in the `dateparser/date`', 'comment_created': datetime.datetime(2021, 6, 9, 13, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 649859472, 'comment_body': '```suggestion\r\n            if self.languages and not self._settings.LANGUAGE_DETECTION_STRICT_USE:\r\n```', 'comment_created': datetime.datetime(2021, 6, 11, 10, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649859766, 'comment_body': 'we need to follow pep8, so you have to add an empty line at the end of the file.', 'comment_created': datetime.datetime(2021, 6, 11, 10, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649859931, 'comment_body': 'You have to add an empty line at the end of the file.', 'comment_created': datetime.datetime(2021, 6, 11, 10, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649860478, 'comment_body': 'Could you revert the changes for this file? You should remove the line before `_default_parser = DateDataParser()` and add the empty line at the end of the file', 'comment_created': datetime.datetime(2021, 6, 11, 10, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649860895, 'comment_body': ""Don't forget to add the other new settings here too."", 'comment_created': datetime.datetime(2021, 6, 11, 10, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649861708, 'comment_body': 'I think you can remove the empty line between `LANGUAGE_DETECTION_METHOD` and `LANGUAGE_DETECTION_STRICT_USE`.', 'comment_created': datetime.datetime(2021, 6, 11, 10, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649862311, 'comment_body': 'Now that this is automatically downloaded, you should:\r\n\r\n1. Add the file to the `.gitignore` file.\r\n2. Remove the file from this PR', 'comment_created': datetime.datetime(2021, 6, 11, 10, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649862954, 'comment_body': 'what is this `language = str`? :thinking: ', 'comment_created': datetime.datetime(2021, 6, 11, 10, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649864457, 'comment_body': 'These new changes are creating a complex nesting with the if-else statements. To fix this you should use returns:\r\n\r\n```python\r\nif settings.LANGUAGE_DETECTION_ENABLED:\r\n    ...\r\n    return detect_languages(text)[0]\r\n\r\nif isinstance(languages, (list, tuple, Set)):\r\n    ...\r\n    return self.language_detector._best_language(text)\r\n```\r\n\r\n(This is, put it how it was before but adding your `if` and `return` before.)', 'comment_created': datetime.datetime(2021, 6, 11, 10, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649864755, 'comment_body': 'it seems a good idea to add `check_settings()` here :+1: ', 'comment_created': datetime.datetime(2021, 6, 11, 10, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 649865011, 'comment_body': 'You have to add an empty line at the end to follow pep8', 'comment_created': datetime.datetime(2021, 6, 11, 10, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 650714271, 'comment_body': 'Can this be imported on top?', 'comment_created': datetime.datetime(2021, 6, 14, 7, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 650716113, 'comment_body': 'Can this be imported on top?', 'comment_created': datetime.datetime(2021, 6, 14, 7, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 650717560, 'comment_body': ""Even I did not get it's purpose."", 'comment_created': datetime.datetime(2021, 6, 14, 7, 47, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 650721609, 'comment_body': 'New line is required at the end of file as per PEP8.', 'comment_created': datetime.datetime(2021, 6, 14, 7, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 654241588, 'comment_body': 'can you remove this extra line? (line 38) :)', 'comment_created': datetime.datetime(2021, 6, 18, 8, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654242437, 'comment_body': ""I think you were using this file to test things, but it shouldn't be included in the PR, especially now that we have the tests."", 'comment_created': datetime.datetime(2021, 6, 18, 8, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654247393, 'comment_body': 'These dependencies shouldn\'t be here because they are not ""test"" requirements (although they are needed to run the tests). A better approach would be adding the name of the ""extra"" in the tox environments, like what we do with the `calendars` extra. :)\r\n\r\n![image](https://user-images.githubusercontent.com/22377678/122532095-72e3e180-d020-11eb-9834-8fb239c6111d.png)\r\n', 'comment_created': datetime.datetime(2021, 6, 18, 8, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654251329, 'comment_body': 'the name of the library is ""fasttext"" (without the underscore), so I would rename this file to `fasttext.py`.\r\n\r\nthe same for `lang_detect.py` --> `langdetect.py`', 'comment_created': datetime.datetime(2021, 6, 18, 8, 39, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654259419, 'comment_body': ""This process of downloading the model didn't work for me. No need to fix it now, but if you have time you could try in a new installation to see if it works for you."", 'comment_created': datetime.datetime(2021, 6, 18, 8, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654267464, 'comment_body': ""We have two options here:\r\n* Re-raise the exception with another type of exception (maybe we can create a new exception)\r\n* Ignore / log the exception.\r\n\r\nIn any case, printing shouldn't be the final result."", 'comment_created': datetime.datetime(2021, 6, 18, 9, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654276082, 'comment_body': '```suggestion\r\n        if self.detect_languages_func:\r\n            detected_languages = self.detect_languages_func(\r\n                date_string, settings=self._settings\r\n            ) or self._settings.DEFAULT_LANGUAGE\r\n        \r\n            if self._settings.LANGUAGE_DETECTION_STRICT_USE or not self.languages:\r\n                self.languages = detected_languages\r\n            else:\r\n                self.languages += detected_languages\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654277579, 'comment_body': ""I think it should be named `DEFAULT_LANGUAGES` as it's a list of languages."", 'comment_created': datetime.datetime(2021, 6, 18, 9, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654277901, 'comment_body': 'it is `apply_settings` necessary? :thinking: ', 'comment_created': datetime.datetime(2021, 6, 18, 9, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654278738, 'comment_body': '```suggestion\r\n            detected_languages = detect_languages_func(text, settings=settings) or settings.DEFAULT_LANGUAGE\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654280913, 'comment_body': '```suggestion\r\n        self.assertEqual(type(self.result), list)\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654281531, 'comment_body': '```suggestion\r\nfrom dateparser.custom_lang_detect.fast_text import detect_languages as fast_text_detect_languages\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654281620, 'comment_body': '```suggestion\r\nfrom dateparser.custom_lang_detect.lang_detect import detect_languages as lang_detect_detect_languages\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 9, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654282677, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2021, 6, 18, 9, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654288045, 'comment_body': 'the idea is good, but this is not a ""mock"". What you can do is mocking the fasttext library.\r\nHere an example:  https://github.com/scrapinghub/dateparser/blob/803d4451ccc18e147363b7824cd38db4307e0740/tests/test_date.py#L522-L527\r\n\r\nIn the case of `langdetect`, for example, you could mock `langdetect.detect_langs` to return whatever you want.\r\n\r\n@lopuhin, what do you think? Any suggestion when testing/mocking?', 'comment_created': datetime.datetime(2021, 6, 18, 9, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654351715, 'comment_body': '+1, I think we can mock the language detection library entry-point', 'comment_created': datetime.datetime(2021, 6, 18, 11, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 654976088, 'comment_body': 'as this is an internal variable, I think you can use `language_code` instead of `_language_code`', 'comment_created': datetime.datetime(2021, 6, 20, 19, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654976175, 'comment_body': 'I think is better to restore this empty line to separate better one `if-else` and the other `if-else`.', 'comment_created': datetime.datetime(2021, 6, 20, 19, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654976280, 'comment_body': '```suggestion\r\n        detected_language = self.language_detector._best_language(text) or settings.DEFAULT_LANGUAGES[0]\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 19, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654976361, 'comment_body': '```suggestion\r\n            detected_languages = detect_languages_func(text, settings=settings) or None\r\n```', 'comment_created': datetime.datetime(2021, 6, 20, 19, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 654976472, 'comment_body': 'why do you need `detected_languages or None`? for the next line, if you do `if not detected_languages:` and `detected_languages` is an empty array it will also return True', 'comment_created': datetime.datetime(2021, 6, 20, 19, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 655153682, 'comment_body': '@gavishpoddar what do you think about removing the class and leaving tests in individual functions? Given that they are already almost independent, I think it would make it much easier to read.', 'comment_created': datetime.datetime(2021, 6, 21, 7, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 657696458, 'comment_body': 'Is the implemented mock correct?\r\n\r\nPl suggest', 'comment_created': datetime.datetime(2021, 6, 24, 7, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658114369, 'comment_body': 'sorry if this was already discussed and I missed it - do we need a new argument ``detect_languages_func``, can this go into settings instead?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658115093, 'comment_body': 'I think we wanted to have a model download command instead of downloading the model on the module level?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658116148, 'comment_body': 'settings defaults to ``None`` above but here we access it without any check - so either the signature is not correct or we need a check?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658116639, 'comment_body': ""I think it's bad policy to modify the global state of the library, especially on import. Why do we do this?"", 'comment_created': datetime.datetime(2021, 6, 24, 16, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658119008, 'comment_body': 'why do we return only the first language?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658120589, 'comment_body': ""I think ``micro_data[0] == obj[:len(micro_data[0])]`` can be simplified to something like ``obj.startswith(micro_data[0])``. Also don't we want to be more strict here and check for ``obj.startswith(micro_data[0] + '-')``?"", 'comment_created': datetime.datetime(2021, 6, 24, 16, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658120903, 'comment_body': 'Is this a backwards incompatible change?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658121962, 'comment_body': 'Is language mapping going to be independent on the library?', 'comment_created': datetime.datetime(2021, 6, 24, 16, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658155246, 'comment_body': 'I am working on it', 'comment_created': datetime.datetime(2021, 6, 24, 17, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658156673, 'comment_body': 'The library suggests setting this:\r\n\r\n```\r\nLanguage detection algorithm is non-deterministic, which means that if you try to run it on a text which is either too short or too ambiguous, you might get different results everytime you run it.\r\n\r\nTo enforce consistent results, call following code before the first language detection:\r\n\r\nfrom langdetect import DetectorFactory\r\nDetectorFactory.seed = 0\r\n```\r\n\r\nPl suggest if I should remove this', 'comment_created': datetime.datetime(2021, 6, 24, 17, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658160294, 'comment_body': 'This function `detect_language` of `search_dates`  is required to return one language only.', 'comment_created': datetime.datetime(2021, 6, 24, 17, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658165117, 'comment_body': 'Sorry, I could not understand.\r\nThe use of this function to check if the detected language is supported by dateparser and if yes return the different supported options in the library like if `""az""` is passes it should return `""az"", ""az-Cyrl"", ""az-Latn"".`\r\n\r\n\r\n@lopuhin ', 'comment_created': datetime.datetime(2021, 6, 24, 17, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658531705, 'comment_body': 'I see, having this deterministic would be great. Is there a way to ensure deterministic results without modifying global state?', 'comment_created': datetime.datetime(2021, 6, 25, 7, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658532002, 'comment_body': ""Ah I didn't know that, thanks!"", 'comment_created': datetime.datetime(2021, 6, 25, 7, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658532919, 'comment_body': 'I meant, can it happen that different language detection libraries output different language identifiers and so could need different mappings?', 'comment_created': datetime.datetime(2021, 6, 25, 7, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 658923592, 'comment_body': 'It was in setting but we decided to make it independent of settings.', 'comment_created': datetime.datetime(2021, 6, 25, 17, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 658941735, 'comment_body': ""I don't think a good idea to add a function definition in the settings. For me it's totally fine to have this argument. Maybe we can impove the naming, but the parameter it's OK."", 'comment_created': datetime.datetime(2021, 6, 25, 17, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658944491, 'comment_body': ""Hey @gavishpoddar, you shouldn't add this to the changelog. We will merge this PR and after that we will release a new version which will include this and more changes. :)"", 'comment_created': datetime.datetime(2021, 6, 25, 17, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658947107, 'comment_body': 'yeah, that\'s definitelly something that should change. \r\n\r\nAlso if people will write their own functions I don\'t like to force the to add ""apply settings"", etc \r\n\r\n\r\nI think that this function could be independent of the settings and instead of this have thwo parameters: `text`, and `confidence_treshold` (or `text` and `**kwargs`). So instead of accessing here the settings they will be accessed before calling this function and passes to it.\r\n\r\nGavish, could you try to do this? 😄 ', 'comment_created': datetime.datetime(2021, 6, 25, 18, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658952144, 'comment_body': 'Following the DRY principle (""DON\'T REPEAT YOURSELF""), what about doing `languages = map_languages(detected_languages) or self._settings.DEFAULT_LANGUAGES` to simplify a little the `if-else`? :)', 'comment_created': datetime.datetime(2021, 6, 25, 18, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658956751, 'comment_body': ""I think `dateparser_scripts` would be a better place for this. However, I'm no sure if I like this approach because it requieres to run a new script every time we update the language list. Let me think about this and I will return to you. :)"", 'comment_created': datetime.datetime(2021, 6, 25, 18, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 658959026, 'comment_body': ""Couldn't we use what we have in \r\n`dateparser/dateparser/data/languages_info.py` instead of creating a new json file?"", 'comment_created': datetime.datetime(2021, 6, 25, 18, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659164399, 'comment_body': 'Thanks,  I need help with it really bad. 😄😄', 'comment_created': datetime.datetime(2021, 6, 26, 12, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659170546, 'comment_body': 'Hi, the implementation will require users to download the models using \r\n`python3 dateparser/custom_lang_detect/fasttext.py download model_name`\r\n\r\nSo would I go ahead with it or make custom settings just for the model name? \r\nAnd should there be any default model if the user does not explicitly download any model.\r\nPl suggest', 'comment_created': datetime.datetime(2021, 6, 26, 13, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659204384, 'comment_body': 'We and other language detection we plan to support library (fasttext and langdetct) are using ISO-639 so I have kept the base support for the same. However, with your point, we can discuss that at our next meeting.', 'comment_created': datetime.datetime(2021, 6, 26, 17, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659205695, 'comment_body': ""Thanks, I will move that to `dateparser_scripts`. I am not sure about `languages_info.py`. I am trying to check if it's possible 😄."", 'comment_created': datetime.datetime(2021, 6, 26, 17, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659205871, 'comment_body': 'Yes, I believe its backward incompatible.', 'comment_created': datetime.datetime(2021, 6, 26, 18, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 659608971, 'comment_body': '> ``python3 dateparser/custom_lang_detect/fasttext.py download model_name``\r\n\r\nthis can be simplified to something like\r\n\r\n```\r\ndateparser-download fasttext\r\n# or for a non-default model\r\ndateparser-download fasttext model_name\r\n```\r\n\r\nsuch scripts can be exposed in ``setup.py`` with ``entry_points``.\r\n\r\nI think it would be great to place the model into the user cache folder, like other libraries do, for example pytorch or nltk.\r\n\r\nRegarding whether to download the model automatically or not - I think both approaches are fine, and more ""modern"" libraries seem to default to downloading the model automatically. \r\n\r\nExamples how downloading is implemented in torch: https://github.com/pytorch/pytorch/blob/75024e228ca441290b6a1c2e564300ad507d7af6/torch/hub.py - it has a lot of stuff and we don\'t need all of that, but some parts are interesting, for example how they get the folder where to store the models.', 'comment_created': datetime.datetime(2021, 6, 28, 9, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 659612431, 'comment_body': '```suggestion\r\n        for language_candidate in parser_data:\r\n            if language_candidate > confidence_threshold:\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 9, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659612770, 'comment_body': '```suggestion\r\nyou can implement any language detection library by wrap it with a \r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 9, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659612974, 'comment_body': '```suggestion\r\nfunction accepting ``text`` and ``confidence_threshold`` and returning\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 9, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659613175, 'comment_body': '```suggestion\r\ndateparser allows the integration of any library\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 9, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659614924, 'comment_body': ""Aha I see - sounds good to me. On the meeting we also discussed whether we could still put that into setting, maybe via two arguments (a string one for built-in detectors and a function one for custom), but I'm not sure which is better."", 'comment_created': datetime.datetime(2021, 6, 28, 9, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 659614997, 'comment_body': 'I think we could have it in this order:\r\n\r\n1. section explaining the `detect_languages_func` parameter \r\n2. section explaining fasttext and langdetect integrations\r\n3. section explaining how to create your own language detection functions.', 'comment_created': datetime.datetime(2021, 6, 28, 9, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 659615315, 'comment_body': 'Sounds good, thanks 👍 ', 'comment_created': datetime.datetime(2021, 6, 28, 9, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 659617123, 'comment_body': ""Ok, I think we have the following options here:\r\n\r\n- make this change - but we should be really use it's for the better in most cases\r\n- don't make this change but highlight in the docs that for custom lang detection you should probably adjust this\r\n- somehow do that only for custom lang detection by default\r\n\r\nwhat do you think folks?"", 'comment_created': datetime.datetime(2021, 6, 28, 9, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 661613052, 'comment_body': 'This idea is great. The only issue I feel is that it will make usage of the library complex.\r\n', 'comment_created': datetime.datetime(2021, 6, 30, 16, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 662291829, 'comment_body': 'Thanks ', 'comment_created': datetime.datetime(2021, 7, 1, 13, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 662865536, 'comment_body': 'Hi @noviluni,\r\nCan you provide your suggestions?', 'comment_created': datetime.datetime(2021, 7, 2, 9, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 662866656, 'comment_body': 'Hi @lopuhin, I have implemented the entry point can you please check', 'comment_created': datetime.datetime(2021, 7, 2, 9, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 663333110, 'comment_body': ""To avoid a breaking change, `detect_languages_func` should be the last parameter. In that way, if someone was using this function by position its code wouldn't break."", 'comment_created': datetime.datetime(2021, 7, 3, 7, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663333169, 'comment_body': 'same here, `detect_languages_func` should be the last parameters (after `settings`)', 'comment_created': datetime.datetime(2021, 7, 3, 7, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663334624, 'comment_body': 'I would suggest changing this to a description.\r\n\r\n```suggestion\r\n    def detect_languages(text, confidence_threshold):\r\n        """"""\r\n        Takes two variables: `text` and `confidence_treshold` and returns\r\n        a list of `languages codes`.\r\n        \r\n        * `text` is a string containing from where the language codes are \r\n        derived.\r\n        \r\n        * `confidence_treshold` is a number between 0 and 1 that can be \r\n        used to decide if the confidence is enough. It can be also ignored.\r\n        This value comes from the dateparser setting: \r\n        `LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD`\r\n        \r\n        The result must be a list of languages codes (strings).\r\n        """"""\r\n        # here you can apply your own logic\r\n        return language_codes\r\n```\r\n\r\ncc: @lopuhin ', 'comment_created': datetime.datetime(2021, 7, 3, 8, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663334729, 'comment_body': '```suggestion\r\n    ``confidence_threshold`` is a float between 0 and 1 that can be used to filter the results. It comes from the ``LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD`` setting.\r\n```', 'comment_created': datetime.datetime(2021, 7, 3, 8, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663335433, 'comment_body': ""```suggestion\r\n                text=date_string, confidence_threshold=self._settings.LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\r\n```\r\nI would use the `text` parameter here, in that way, if they implement their own `detect_languages_func` without the `text` parameter it will raise:\r\n\r\n`TypeError: my_detect_lang_func() got an unexpected keyword argument 'text'`\r\n\r\nAnd it will be easier to understand and fix."", 'comment_created': datetime.datetime(2021, 7, 3, 8, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663335511, 'comment_body': 'same about putting the `detect_languages_func` as the last parameter to avoid a breaking change.', 'comment_created': datetime.datetime(2021, 7, 3, 8, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663335973, 'comment_body': 'A better way to do this would be:\r\n\r\n```suggestion\r\n        try:\r\n            urllib.request.urlretrieve(model_url, models_directory_path)\r\n        except urllib.error.HTTPError as e:\r\n            raise Exception(""Fasttext model cannot be downloaded due to HTTP error"") from e\r\n```\r\n\r\nHowever, I\'m not sure if \r\na. We should create a new exception or use a different exception.\r\nb. We can avoid capturing the exception as it\'s self-explanatory.\r\n\r\nFor me you can go with the approach I mentioned and will ask for feedback.', 'comment_created': datetime.datetime(2021, 7, 3, 8, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 663743793, 'comment_body': ""Sorry - actually it's not a breaking change as this setting is used only for custom language detection."", 'comment_created': datetime.datetime(2021, 7, 5, 8, 35, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 663806670, 'comment_body': ""Great @gavishpoddar - as discussed, let's store the model in the user cache folder, e.g. similar to above example."", 'comment_created': datetime.datetime(2021, 7, 5, 10, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 663807423, 'comment_body': 'Sounds good to me, thanks @noviluni ', 'comment_created': datetime.datetime(2021, 7, 5, 10, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 669379563, 'comment_body': 'Hi @gavishpoddar @noviluni @lopuhin \r\nThis function takes the default threshold if not provided so it will be good if we can mention it.\r\nAlso, do you think an example of this function would be helpful here?', 'comment_created': datetime.datetime(2021, 7, 14, 7, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 669381003, 'comment_body': 'Should the default be `self._settings.LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD` or this is different?', 'comment_created': datetime.datetime(2021, 7, 14, 7, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 669381513, 'comment_body': '> Should the default be self._settings.LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD or this is different?\r\n\r\nSimilar to fasttext.py \r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 14, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 671527983, 'comment_body': 'Hi, I have made the changes ', 'comment_created': datetime.datetime(2021, 7, 16, 21, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 671842402, 'comment_body': '```suggestion\r\n    :param detect_languages_function:\r\n        A function for language detection that takes as input a `text` (the `date_string`) and a `confidence_threshold`, and returns a list of detected language codes.\r\n    :type detect_languages_function: function\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671842892, 'comment_body': '```suggestion\r\n=========================\r\nCustom language detection\r\n=========================\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671843115, 'comment_body': '```suggestion\r\nlangdetect\r\n~~~~~~~~~~\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671843300, 'comment_body': 'Could you rename the name of the file from `custom_detect_languages_func.rst` to `custom_language_detection.rst`? :)', 'comment_created': datetime.datetime(2021, 7, 18, 13, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671843846, 'comment_body': 'I think it makes more sense to move this after `settings` (one position below). Could you do it? :)', 'comment_created': datetime.datetime(2021, 7, 18, 13, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671844234, 'comment_body': '```suggestion\r\n        A function for language detection that takes as input a `text` and a `confidence_threshold`, and returns a list of detected language codes.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671844379, 'comment_body': '```suggestion\r\n                    A function for language detection that takes as input a `text` and a `confidence_threshold`, and returns a list of detected language codes.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671846626, 'comment_body': ""```suggestion\r\n            detected_languages = detect_languages_function(\r\n                text, confidence_threshold=settings.LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\r\n            )\r\n            detected_languages = map_languages(detected_languages) or settings.DEFAULT_LANGUAGES\r\n            return detected_languages[0]  if detected_languages else []\r\n```\r\n\r\nThe first change (removing the `None`) fixes the case when the custom function returns an empty list `[]`. The second case (`if detected_languages else []`) fixes the case when the custom function returns an empty list and the `DEFAULT_LANGUAGES` is an empty list too (`settings={'DEFAULT_LANGUAGES': []})`)"", 'comment_created': datetime.datetime(2021, 7, 18, 13, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671847284, 'comment_body': '```suggestion\r\n               A function for language detection that takes as input a `text` and a `confidence_threshold`, and returns a list of detected language codes.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 13, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671847687, 'comment_body': '```suggestion\r\nparameter. Example::\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671847821, 'comment_body': '```suggestion\r\nthe fastText integration currently supports the large and the small models. You can\r\ndownload your model of choice using ``dateparser-download``.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671848428, 'comment_body': '```suggestion\r\n`dateparser` allows to customize the language detection behavior. It currently supports two\r\n language detection libraries out of the box: `fasttext <https://github.com/facebookresearch/fastText>`_ \r\nand `langdetect <https://github.com/Mimino666/langdetect>`_, and allows you to implement your own custom language detection.\r\n\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671848667, 'comment_body': '```suggestion\r\nUsage of fastText and langdetect\r\n================================\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 10, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671848763, 'comment_body': '```suggestion\r\n    ``fastText`` uses ``small`` as default so it will download and use if no model\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671848777, 'comment_body': '```suggestion\r\nImport langdetect wrapper and pass it as ``detect_languages_function``\r\nparameter. Example::\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671849051, 'comment_body': '```suggestion\r\n    From some tests we did, we recommend to use ``fastText`` for faster and more accurate results.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 671849373, 'comment_body': '```suggestion\r\n``dateparser`` allows the integration of any library to detect the languages\r\nby wrapping them in a function that accepts ``text`` and ``confidence_threshold`` \r\nand returns a list of the detected language codes in ISO 639 standards.\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 14, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672030874, 'comment_body': 'I think in this case you should put a different message like `To use dateparser-download you have to specify the integration and the model` and adding a working example. What do you think? ', 'comment_created': datetime.datetime(2021, 7, 19, 6, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672031207, 'comment_body': 'we should change all the prints to `log`.', 'comment_created': datetime.datetime(2021, 7, 19, 6, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672037647, 'comment_body': 'I don\'t think it is the correct behavior, because if you put a wrong model name it takes the `small`. Example: ` dateparser-download fasttext aaaaaa`. I think this would be better:\r\n\r\n```suggestion\r\n    if not model:\r\n        model_name = ""small""\r\n    elif model and model[0] == ""large"":\r\n        model_name = ""large""\r\n    else:\r\n        print(""Couldn\'t find a model called \\""{}\\"". Supported models are:""\r\n              "" {}"".format(model[0], "", "".join(model_url.keys())))\r\n        return\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 7, 5, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672037808, 'comment_body': 'BTW, change the `print`s to `log`s.', 'comment_created': datetime.datetime(2021, 7, 19, 7, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672038695, 'comment_body': '```suggestion\r\n        print(""Downloading model {}..."".format(model_name))\r\n```', 'comment_created': datetime.datetime(2021, 7, 19, 7, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672042809, 'comment_body': '(I mean in the last `else`)', 'comment_created': datetime.datetime(2021, 7, 19, 7, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 672092051, 'comment_body': 'this is the place where I think ``DEFAULT_LANGUAGES`` is used even without custom language detection?', 'comment_created': datetime.datetime(2021, 7, 19, 8, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672093729, 'comment_body': ""I think we use ``DEFAULT_LANGUAGES`` without custom language detection in search dates, but not here - I think it's better to be consistent and do the same thing here."", 'comment_created': datetime.datetime(2021, 7, 19, 8, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672256097, 'comment_body': 'Is this still needed?', 'comment_created': datetime.datetime(2021, 7, 19, 12, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672257306, 'comment_body': '``toxand`` looks like a typo', 'comment_created': datetime.datetime(2021, 7, 19, 12, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672258138, 'comment_body': 'Also I think we should raise an error in this case or set return code of the script to non-zero. Another option is to use ``argparse`` library to do the argument parsing and validation instead of doing that ourselves.', 'comment_created': datetime.datetime(2021, 7, 19, 12, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672259553, 'comment_body': 'Why is ``model`` a list? Also if it needs to be a list, mutable default arguments are normally not a good idea, see for example https://florimond.dev/en/posts/2018/08/python-mutable-defaults-are-the-source-of-all-evil/', 'comment_created': datetime.datetime(2021, 7, 19, 12, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672259864, 'comment_body': ""I don't think it's windows compatible, we should use ``Path`` or ``os.path``"", 'comment_created': datetime.datetime(2021, 7, 19, 12, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672261214, 'comment_body': 'Can this import be on the top level?', 'comment_created': datetime.datetime(2021, 7, 19, 12, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672261615, 'comment_body': ""It's best to not put side-effects on the model error - usually we don't want stuff to happen on import, but only when we explicitly run something."", 'comment_created': datetime.datetime(2021, 7, 19, 12, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672262588, 'comment_body': ""this is quite minor, but it's better to not modify the arguments if the function is not explicitly called to modify them - and in this case, the function returns a value, so the called would not expect it to also sort the input."", 'comment_created': datetime.datetime(2021, 7, 19, 12, 43, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672265075, 'comment_body': ""Minor, but it would be better to organize imports according to pep-8 https://www.python.org/dev/peps/pep-0008/#imports - so ``parameterized`` would go into a second group as it's not an stdlib module, and there would be no blank lines between stdlib modules."", 'comment_created': datetime.datetime(2021, 7, 19, 12, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 672988756, 'comment_body': 'This is not required I will remove it ', 'comment_created': datetime.datetime(2021, 7, 20, 10, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 673025182, 'comment_body': 'I have removed it.', 'comment_created': datetime.datetime(2021, 7, 20, 11, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 673027208, 'comment_body': 'I too believe the same ', 'comment_created': datetime.datetime(2021, 7, 20, 11, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 673027374, 'comment_body': 'I will make the required changes', 'comment_created': datetime.datetime(2021, 7, 20, 11, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 673035633, 'comment_body': 'I changed `prints` to `logs`.', 'comment_created': datetime.datetime(2021, 7, 20, 11, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674073409, 'comment_body': ""I'm ok with this, but it can be addressed later. We could probably add isort to the pipelines in a future / separate PR to check this. So @gavishpoddar don't worry if you don't want to change the import order now."", 'comment_created': datetime.datetime(2021, 7, 21, 15, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 674559275, 'comment_body': 'The sorting is required for the language mapping to work as this sorted list is used to group languages.', 'comment_created': datetime.datetime(2021, 7, 22, 7, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674560317, 'comment_body': '@gavishpoddar sure, but you can still sort without affecting the input argument, e.g. using ``sorted`` function.', 'comment_created': datetime.datetime(2021, 7, 22, 7, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674565477, 'comment_body': '@lopuhin, Thanks ', 'comment_created': datetime.datetime(2021, 7, 22, 7, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674627351, 'comment_body': 'Thanks for the resource ', 'comment_created': datetime.datetime(2021, 7, 22, 9, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674628073, 'comment_body': 'I have created a custom error class and raised the same', 'comment_created': datetime.datetime(2021, 7, 22, 9, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674679446, 'comment_body': ""I tried to make some changes, please suggest it that's fine"", 'comment_created': datetime.datetime(2021, 7, 22, 10, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674696056, 'comment_body': '@gavishpoddar did you push the changes? Could you please send a link to the commit you have in mind?', 'comment_created': datetime.datetime(2021, 7, 22, 11, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674767737, 'comment_body': 'Hi @lopuhin, not I have committed and pushed the changes also can you run the workflow in this PR', 'comment_created': datetime.datetime(2021, 7, 22, 12, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674842634, 'comment_body': '@gavishpoddar just started the workflow run', 'comment_created': datetime.datetime(2021, 7, 22, 14, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674847174, 'comment_body': ""``model`` is a string, we shouldn't use ``model[0]`` here and below"", 'comment_created': datetime.datetime(2021, 7, 22, 14, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674849341, 'comment_body': ""I think this needs to be updated as the argument is not a list. Also I think it's better to not download the model on module import - but only when we need to load it."", 'comment_created': datetime.datetime(2021, 7, 22, 14, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 674894338, 'comment_body': ""Hi @lopuhin, I am having some issues implement this part. \r\n\r\nthe code which invokes this part - [link](https://github.com/gavishpoddar/dateparser/blob/a684fdffb62da5f6d922314f960f4069dacda995/dateparser_cli/cli.py#L23) \r\n`_cli_functions_map[args[0]](args[1:]) `\r\n\r\nWhere args are param now her are two functions clear_cache which doesn't require any other param but fasttext requires parameter if I use string I need to make a map Munich contains this information or I pass it as list preventing the need of the dictionary containing the information about the parameter or so.\r\n\r\ncommand for fasttext (takes an additional args):\r\n\r\n`dateparser-donwload fasttext small\r\n`\r\ncommand for clearing cache:\r\n\r\n`dateparser-donwload clear_cache\r\n`\r\n\r\nCan you please help"", 'comment_created': datetime.datetime(2021, 7, 22, 15, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 674925334, 'comment_body': ""@avishpoddar I see. I think the simplest fix would be to change this to ``_cli_functions_map[args[0]](*args[1:])`` - note the added star. Also I'd remote the ``None`` default from the ``model`` argument, as we don't really do anything useful in this case. But if you want to improve this code further and give better error messages to the user, you can use https://docs.python.org/3/library/argparse.html or https://click.palletsprojects.com/ libraries to implement command line argument parsing."", 'comment_created': datetime.datetime(2021, 7, 22, 15, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 675098231, 'comment_body': 'Thanks, now upgraded to `argparse`', 'comment_created': datetime.datetime(2021, 7, 22, 19, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 676374388, 'comment_body': 'I would love to see here a comment pointing to the lines of code of the langdetect project, and explaining why we do this (`init_factory`, etc)', 'comment_created': datetime.datetime(2021, 7, 26, 7, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 676414238, 'comment_body': ""@gavishpoddar maybe there was already a comment about this - I think we shouldn't download the model on import, it would be better to download it only if it's used."", 'comment_created': datetime.datetime(2021, 7, 26, 8, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 676418116, 'comment_body': ""@gavishpoddar from the meeting (thanks @kishan3) - probably we shouldn't limit to just 5 results?"", 'comment_created': datetime.datetime(2021, 7, 26, 8, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 676436972, 'comment_body': 'Thanks, I have done that ', 'comment_created': datetime.datetime(2021, 7, 26, 9, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 676720653, 'comment_body': 'Thanks, I have done that.', 'comment_created': datetime.datetime(2021, 7, 26, 15, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 676752845, 'comment_body': 'Thanks, I have added some comments there', 'comment_created': datetime.datetime(2021, 7, 26, 16, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677263638, 'comment_body': '@gavishpoddar @noviluni @lopuhin Do you think `extend()` is more pythonic here or `+=` is fine.', 'comment_created': datetime.datetime(2021, 7, 27, 9, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677268416, 'comment_body': 'This is done', 'comment_created': datetime.datetime(2021, 7, 27, 9, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677268682, 'comment_body': 'This is done. :+1: ', 'comment_created': datetime.datetime(2021, 7, 27, 9, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677270026, 'comment_body': 'Is this file intentional?', 'comment_created': datetime.datetime(2021, 7, 27, 9, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677270276, 'comment_body': 'Done :+1: ', 'comment_created': datetime.datetime(2021, 7, 27, 9, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677270541, 'comment_body': 'File no longer present I think.', 'comment_created': datetime.datetime(2021, 7, 27, 9, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 677271758, 'comment_body': 'This file is temporary only for local tests or in meeting in shall remove that now thanks  ', 'comment_created': datetime.datetime(2021, 7, 27, 9, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677273367, 'comment_body': 'I have removed this is now. 👍', 'comment_created': datetime.datetime(2021, 7, 27, 9, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 678222477, 'comment_body': 'Thanks, @kishan3, I have changed it.', 'comment_created': datetime.datetime(2021, 7, 28, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 678863973, 'comment_body': 'This will by pass the exception silently. I think at least a log entry would be good.', 'comment_created': datetime.datetime(2021, 7, 29, 6, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 678881462, 'comment_body': 'Hi @kishan3, this error is thrown when empty text is passed or no similar language (And this library only supports 55 languages) is found which is too often the case so I did not put any logging as that may create many such logs.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 678903552, 'comment_body': '`` `text` `` does not refer to a variable name, right? perhaps we mean\r\n```suggestion\r\n        A function for language detection that takes as input a string (the `date_string`) and\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 7, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 678905760, 'comment_body': ""this is not windows-compatible, and also maybe it's possible to call ``_load_fasttext_model`` instead (but make sure we don't hit infinite recursion)?"", 'comment_created': datetime.datetime(2021, 7, 29, 7, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 678905873, 'comment_body': 'This is not windows-compatible', 'comment_created': datetime.datetime(2021, 7, 29, 7, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 678906877, 'comment_body': 'Not sure, but what do you think about also adding a message when the model was downloaded? It might help with debugging if this is the last message in the log.', 'comment_created': datetime.datetime(2021, 7, 29, 7, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 678914676, 'comment_body': 'I think these two can be simplified to\r\n\r\n```\r\nclass FastTextModelNotFoundException(Exception):\r\n    pass\r\n```\r\n\r\nand same for the other one, what do you think?', 'comment_created': datetime.datetime(2021, 7, 29, 7, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679075573, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 29, 11, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679078247, 'comment_body': 'why do we return an empty list here as a fallback, is this right? In other code paths we do a different thing I think.', 'comment_created': datetime.datetime(2021, 7, 29, 11, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679079564, 'comment_body': 'Why do we need this map? I think we only refer to it with static keys, and could instead call the functions directly', 'comment_created': datetime.datetime(2021, 7, 29, 11, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679081912, 'comment_body': ""Setting this would essentially disable dateparser language detection if we don't pass any language and don't use custom language detection, right? I think we should clarify this behaviour in some place, because I think it's not obvious."", 'comment_created': datetime.datetime(2021, 7, 29, 11, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679082498, 'comment_body': ""I don't think it's right, shouldn't we also pass the string to be parsed?"", 'comment_created': datetime.datetime(2021, 7, 29, 11, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679082797, 'comment_body': 'I think example is not complete:\r\n\r\n- we are lacking the string to parse\r\n- setting has no effect without language detection function, right?', 'comment_created': datetime.datetime(2021, 7, 29, 11, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679084123, 'comment_body': 'Yes, settings have no effect without a language detection function. Should I mention that in docs?\r\n', 'comment_created': datetime.datetime(2021, 7, 29, 11, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679084341, 'comment_body': 'done 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 29, 11, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679085120, 'comment_body': 'I meant to update this example so that the setting makes a difference. I think we already mention that in the docs.', 'comment_created': datetime.datetime(2021, 7, 29, 11, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679086918, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 29, 12, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679091683, 'comment_body': '`DEFAULT_LANGUAGES` is added after this language detection process.\r\n\r\nI will add more information about it.', 'comment_created': datetime.datetime(2021, 7, 29, 12, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679289041, 'comment_body': 'Done 👍🏻 & Its did not hit infinite recursion after the fix', 'comment_created': datetime.datetime(2021, 7, 29, 16, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679290068, 'comment_body': ""Done 👍🏻 & it's now windows compatible but tox/setup.py does not seem to be working on windows.\r\nTested on Windows 10"", 'comment_created': datetime.datetime(2021, 7, 29, 16, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679340770, 'comment_body': 'done 👍🏻', 'comment_created': datetime.datetime(2021, 7, 29, 17, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679347311, 'comment_body': 'Like a print message about the download? or something else I could not understand as the download information is already logged.', 'comment_created': datetime.datetime(2021, 7, 29, 17, 24, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679655493, 'comment_body': 'Hi @gavishpoddar Ok thanks. I will just tag @lopuhin & @noviluni to know their opinion. ', 'comment_created': datetime.datetime(2021, 7, 30, 5, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 679694576, 'comment_body': '@lopuhin, I think what you mention is some lines below: \r\n\r\n```\r\nlogging.info(""dateparser-download: The model is already downloaded"")\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 6, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679697497, 'comment_body': ""This can be refactored in this way:\r\n\r\n\r\n```suggestion\r\nif sys.platform.startswith('win'):\r\n    # For Windows\r\n    cache_dir = DEFAULT_WIXDOWS_CACHE_DIR\r\nelse:\r\n    # UNIX & OS X\r\n    cache_dir = DEFAULT_UNIX_CACHE_DIR\r\n\r\ndate_parser_model_home = os.path.expanduser(\r\n    os.path.join(cache_dir, DEFAULT_DIR_NAME)\r\n)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 30, 7, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679700061, 'comment_body': 'I think we could improve here the naming, because with the word ""check"", it seems that only is checking. I would suggest to change it to `create_data_model_home()` as this is not only checking but creating, and IMHO the creation part is more relevant.', 'comment_created': datetime.datetime(2021, 7, 30, 7, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679700824, 'comment_body': '```suggestion\r\ndateparser_model_home = None\r\n```\r\n\r\n(and references below and in function names)', 'comment_created': datetime.datetime(2021, 7, 30, 7, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679702019, 'comment_body': '```suggestion\r\n        logging.info(""dateparser-download: Downloading model {}..."".format(model_name))\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 7, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679703713, 'comment_body': ""I would move this logging.info right after the place we use `clear_cache`. I mean in this part:\r\n\r\n```\r\n    if args.fasttext:\r\n        fasttext_downloader(args.fasttext)\r\n    elif args.clear:\r\n        clear_cache()\r\n        # <--- HERE\r\n```\r\n\r\nI think the responsibility of printing this shouldn't be from this function, in that way you can import it and use it without printing this message."", 'comment_created': datetime.datetime(2021, 7, 30, 7, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679704271, 'comment_body': 'I also find this example weird, it should have a `date_string`', 'comment_created': datetime.datetime(2021, 7, 30, 7, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679705751, 'comment_body': ""This should be more like:\r\n```suggestion\r\n    >>> parse('3 de marzo de 2020', settings={'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD': 0.5}, detect_languages_function=detect_languages)\r\n```"", 'comment_created': datetime.datetime(2021, 7, 30, 7, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 679879845, 'comment_body': 'To me name `detect_langs` is confusing with another method `detect_lagnuages`\r\n\r\nBased on what it returns do you think a better name can be `get_language_probablities`', 'comment_created': datetime.datetime(2021, 7, 30, 12, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 679906290, 'comment_body': 'On [line 343](https://github.com/scrapinghub/dateparser/pull/932/files#diff-ed41fbffb2891f79c65e3dc690fadd0cdc7a9a9191b69388de73f6b578bd3dd1R343) it seems we are allowing list, set, and tuples. \r\nIn case of set, `+=` will throw and error(`TypeError`) \r\nIn case of tuple, `map_languages` has to give a tuple in return for `+=` to work\r\n\r\nso this case should be handled if we want to support all three data types.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 679911791, 'comment_body': 'Based on the usage of `self.languages` further I think this should only accept list.\r\nRef https://github.com/scrapinghub/dateparser/pull/932/files#r679906290', 'comment_created': datetime.datetime(2021, 7, 30, 13, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 679932019, 'comment_body': '+1 to ignore the exception - as it happens not only on empty strings but on inputs like ``10-10-2021`` which have no letters - which would be extremely typical to dateparser.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 679983575, 'comment_body': 'Thanks, @kishan3, I feel the same so I have changed it to _get_language_probablities', 'comment_created': datetime.datetime(2021, 7, 30, 14, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679983675, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 30, 14, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 679992669, 'comment_body': 'Yes, that will be great but maybe that is a breaking change (I have not checked) more so the type check raises TypeError with the message `languages argument must be a list`. \r\n\r\nNOTE: \r\n\r\ndateparser otherwise has no issues if either is `list, tuple, Set` passed.\r\n\r\nlike below code works fine.\r\n```\r\nfrom dateparser import parse\r\n\r\nprint(parse(""12/12/2000"", languages={""en""}))\r\n```\r\n\r\nSo maybe `list, tuple, Set` -> `list` in `DateDataParser init` will be great it will not break anything and I tested all the tests are passing.\r\n\r\nPlease suggest and I think this should be a separate micro PR.\r\n\r\n@lopuhin @noviluni ', 'comment_created': datetime.datetime(2021, 7, 30, 14, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680009170, 'comment_body': 'Thanks, @kishan3 for now have changes `+=` to `.append()`, I have commented a solution below Pl suggest', 'comment_created': datetime.datetime(2021, 7, 30, 15, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680016288, 'comment_body': 'Thanks, I have made the changes 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 30, 15, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680016755, 'comment_body': 'Thanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 15, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680019625, 'comment_body': 'Thanks, I have made the changes 👍🏻\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 30, 15, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680020877, 'comment_body': 'I too believe the new make is better.\r\nThanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680024080, 'comment_body': 'Thanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 15, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680105756, 'comment_body': 'Thanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 17, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680106128, 'comment_body': 'Thanks, I have made the changes 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 17, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680118748, 'comment_body': 'Thanks for the review @lopuhin, so I will not change anything here', 'comment_created': datetime.datetime(2021, 7, 30, 17, 43, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680123685, 'comment_body': 'done 👍🏻', 'comment_created': datetime.datetime(2021, 7, 30, 17, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680325828, 'comment_body': ""Hi @gavishpoddar, you changed the `_Factory` here but not the class. I would change the class name too or if you can't for some reason, redo the change in this comment."", 'comment_created': datetime.datetime(2021, 7, 31, 7, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680326278, 'comment_body': 'I agree with you guys, but you should add a comment before the pass explaining this. Remember: when the intention is not obvious we need to explain it to avoid future confusions. :)\r\n\r\nIt could be something like:\r\n\r\n```\r\n    except langdetect.lang_detect_exception.LangDetectException:\r\n        # This exception can be produced with empty strings or inputs without letters like `10-10-2021`.\r\n        # As this could be really common, we ignore them.\r\n        pass\r\n```\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 31, 7, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680328587, 'comment_body': 'As you mentioned, changing the input would be a breaking change. Currently, it works with lists, sets and tuples:\r\n\r\n```python\r\n>>> dateparser.parse(""12/12/2000"", languages=[""en""])\r\ndatetime.datetime(2000, 12, 12, 0, 0)\r\n\r\n>>> dateparser.parse(""12/12/2000"", languages={""en""})\r\ndatetime.datetime(2000, 12, 12, 0, 0)\r\n\r\n>>> dateparser.parse(""12/12/2000"", languages=(""en"",))\r\ndatetime.datetime(2000, 12, 12, 0, 0)\r\n```\r\n\r\nHowever, you can fix this without changing the input by casting it to a list. So if you change this line like this:\r\n\r\n```python\r\nself.languages = list(languages) if languages else None\r\n```\r\n\r\nit should work. Let me know if it\'s not :)', 'comment_created': datetime.datetime(2021, 7, 31, 8, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680328812, 'comment_body': ""Please, remove these two statements :)\r\n\r\nIn case of `_cache_dir`, as you are using an `if` with a broad `else`, it will always take a value, so you don't need to initialize it. On the other hand, in case of `dateparser_model_home` it is defined below, so the same: you don't need to initialize it."", 'comment_created': datetime.datetime(2021, 7, 31, 8, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680399412, 'comment_body': 'Thanks, Marc, I have added these comments ', 'comment_created': datetime.datetime(2021, 7, 31, 19, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680464735, 'comment_body': 'Thanks. I have made the changes 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 1, 7, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680465581, 'comment_body': 'Thanks, Marc, I have removed this initialization', 'comment_created': datetime.datetime(2021, 8, 1, 7, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680468722, 'comment_body': 'thanks, I have made the changes', 'comment_created': datetime.datetime(2021, 8, 1, 7, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680671257, 'comment_body': 'Correct me if I am wrong but I think this change is still pending. ', 'comment_created': datetime.datetime(2021, 8, 2, 5, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 680676127, 'comment_body': 'Hi @kishan3, these changes were part of this commit [here](https://github.com/scrapinghub/dateparser/pull/932/commits/6e6eb14cfb289cce73a1e4276d02d99e51ed253f) \r\n\r\nIn dateparser/date.py, line 368', 'comment_created': datetime.datetime(2021, 8, 2, 6, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 680688145, 'comment_body': 'Thanks, I agree with changing it to list to avoid breaking changes. ', 'comment_created': datetime.datetime(2021, 8, 2, 6, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 680734331, 'comment_body': 'Hi @gavishpoddar, the `LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD` can take values between 0 and 1, but you are allowing any value.\r\n\r\n\r\nYou have to add here an ""extra_check"" to check the values:\r\n\r\n```python\r\n\'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\': {\r\n    \'type\': float,\r\n    \'extra_check\': _check_between_0_and_1\r\n},\r\n\r\n```\r\n\r\nThen, you can define the `_check_between_0_and_1` (after the `_check_parsers` function):\r\n\r\n```python\r\ndef _check_between_0_and_1(setting_name, setting_value):\r\n    is_valid = 0 <= setting_value <= 1\r\n    if not is_valid:\r\n        raise SettingValidationError(\r\n            \'{} is not a valid value for {}. It can take values between 0 and \'\r\n            \'1.\'.format(\r\n                setting_value, setting_name,\r\n            )\r\n        )\r\n```\r\n\r\nAnd finally add a test in `test_settings`:\r\n\r\n```python\r\ndef test_check_settings_extra_check_confidence_treshold(self):\r\n    with self.assertRaisesRegex(\r\n        SettingValidationError,\r\n        r\'1.1 is not a valid value for \'\r\n        r\'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD. It can take values \'\r\n        r\'between 0 and 1\'\r\n    ):\r\n        DateDataParser(settings={\'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\': 1.1})\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 2, 7, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680738744, 'comment_body': 'To cover these two lines (34 and 37) probably you can add a test like\r\n\r\n`test_lang_detect_doesnt_raise_error`\r\n\r\nFor example after:\r\n\r\n`test_custom_language_detect_lang_detect`\r\n\r\nAnd using lang_detect, introducing a string that would produce an error and check that this error is not produced.', 'comment_created': datetime.datetime(2021, 8, 2, 7, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680740405, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2021, 8, 2, 7, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 680745874, 'comment_body': 'Thanks 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 2, 7, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 681213355, 'comment_body': 'Thanks Marc, changes are done', 'comment_created': datetime.datetime(2021, 8, 2, 19, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 681246237, 'comment_body': 'Thanks, @noviluni, All tests are passing even coverage 😃😃', 'comment_created': datetime.datetime(2021, 8, 2, 20, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683193145, 'comment_body': 'Hi @gavishpoddar, this is wrong it should probably be like this:\r\n\r\n```suggestion\r\n    >>> parse(\'3 de marzo de 2020\', settings={\'DEFAULT_LANGUAGES\': [""es""]})\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683194175, 'comment_body': ""```suggestion\r\nif sys.platform.startswith('win'):\r\n    # For Windows:\r\n    _cache_dir = DEFAULT_WIXDOWS_CACHE_DIR\r\nelse:\r\n    # UNIX & OS X:\r\n    _cache_dir = DEFAULT_UNIX_CACHE_DIR\r\n```"", 'comment_created': datetime.datetime(2021, 8, 5, 7, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683196212, 'comment_body': 'could you remove this `print`?', 'comment_created': datetime.datetime(2021, 8, 5, 7, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683205211, 'comment_body': ""I think we could add an `extra_check` that checks that the values in `DEFAULT_LANGUAGES` are valid.\r\n\r\nThis is not strictly necessary, as now, when we try with a wrong language it raises an error:\r\n\r\n```python\r\n>>> dateparser.parse('20/20/2020', settings={'DEFAULT_LANGUAGES': ['aaa']})\r\nValueError: Unknown language(s): 'aaa'\r\n```\r\n\r\nbut for example, when using `DateDataParser`, the error only appears when trying to get the date, and adding this check here would show the error when instantiating, which seems better.\r\n\r\n```python\r\n>>> dd = DateDataParser(settings={'DEFAULT_LANGUAGES': ['aaa']})\r\n>>> dd.get_date_data('12/12/2000')\r\nValueError: Unknown language(s): 'aaa'\r\n```\r\n\r\nI think the way to implement this new check could be exactly the same that is producing that error. After doing this we should add a test to check this (similar to what we did for the `LANGUAGE_DETECTION_CONFIDENCE_TRESHOLD`.\r\n\r\nAnyways, feel free to open a new / separate issue to handle this."", 'comment_created': datetime.datetime(2021, 8, 5, 7, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683207518, 'comment_body': '```suggestion\r\n    """"""\r\n    Returns the candidates from the supported languages codes.\r\n\r\n    :param languages:\r\n        A list of language codes, e.g. [\'en\', \'es\'] in ISO 639 Standard\r\n    :type languages: list\r\n\r\n    :return: Returns list[str] representing supported languages, else returns None\r\n    :rtype: list[str]\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683210368, 'comment_body': 'Can you move these in the next place:\r\n\r\n```python\r\n    # Incomplete dates\r\n    \'PREFER_DAY_OF_MONTH\': \'current\',\r\n    \'PREFER_DATES_FROM\': \'current_period\',\r\n    \'RELATIVE_BASE\': False,\r\n    \'STRICT_PARSING\': False,\r\n    \'REQUIRE_PARTS\': [],\r\n    \r\n    # Language detection\r\n    \'SKIP_TOKENS\': [\'t\'],\r\n    \'NORMALIZE\': True,\r\n    \'DEFAULT_LANGUAGES\': [],  # <-- Here the DEFAULT_LANGUAGES\r\n    \r\n    # Optional language detection\r\n    \'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD\' : 0.5,  # <-- Here this (and change title from ""detect"" to ""detection""\r\n    \r\n    # Other settings\r\n    \'RETURN_TIME_AS_PERIOD\': False,\r\n    \'PARSERS\': default_parsers,\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683213728, 'comment_body': ""Maybe I'm missing something, but why are we using a class instead of using directly a variable / object?\r\n\r\nWhat about doing:\r\n```suggestion\r\n_factory_data = None\r\n\r\n\r\ndef _init_factory():\r\n    if _factory_data is None:\r\n        _factory_data = DetectorFactory()\r\n        _factory_data.load_profile(PROFILES_DIRECTORY)\r\n        _factory_data.seed = 0\r\n\r\n\r\ndef _get_language_probablities(text):\r\n    _init_factory()\r\n    detector = _factory_data.create()\r\n    detector.append(text)\r\n    return detector.get_probabilities()\r\n```\r\n\r\nIf it's possible I would use this approach, I think is simpler."", 'comment_created': datetime.datetime(2021, 8, 5, 7, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683215172, 'comment_body': '```suggestion\r\n        for language_candidate in parser_data:\r\n            if language_candidate.prob > confidence_threshold:\r\n                language_codes.append(language_candidate.lang)\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683216861, 'comment_body': '```suggestion\r\n    for idx, language_candidate in enumerate(parser_data[1]):\r\n        if language_candidate > confidence_threshold:\r\n            language_code = parser_data[0][idx].replace(""__label__"", """")\r\n            language_codes.append(language_code)\r\n```\r\n\r\nBut I think this variable is not representing a `language_candidate` but a confidence probabilty.\r\n\r\nMaybe it would be better to rename this to: `language_probability` or something similar.', 'comment_created': datetime.datetime(2021, 8, 5, 7, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683217927, 'comment_body': '```suggestion\r\n        Takes two variables: `text` and `confidence_threshold` and returns\r\n        a list of `languages codes`.\r\n        \r\n        * `text` is a string containing from where the language codes are \r\n        derived.\r\n        \r\n        * `confidence_threshold` is a number between 0 and 1 that can be \r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 7, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683493696, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683494890, 'comment_body': 'Done 👍🏻. I have changed it to `language_probability`', 'comment_created': datetime.datetime(2021, 8, 5, 14, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683497538, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683502140, 'comment_body': ""Hi @noviluni, I tried changing class to function caching variable but it throws `UnboundLocalError: local variable '_factory_data' referenced before assignment `\r\n\r\nNo changes were made"", 'comment_created': datetime.datetime(2021, 8, 5, 14, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683515297, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683516415, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683517306, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683518399, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683528565, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 5, 14, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 683537817, 'comment_body': 'Hi @noviluni, so should I import the data from `dateparser/data/languages_info.py` and use that in the `extra_check` to check the supported languages.', 'comment_created': datetime.datetime(2021, 8, 5, 15, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684612814, 'comment_body': ""I know this is common in certain projects, but I don't like the idea of having the module with the same name than the function, because it can make the import confuse. It is OK for you to rename this file to `language_mapping.py`?\r\n\r\nIn that way when importing it will be:\r\n```python\r\nfrom dateparser.custom_language_detection.language_mapping import map_languages\r\n```\r\n\r\ninstead of:\r\n```python\r\nfrom dateparser.custom_language_detection.map_languages import map_languages\r\n```\r\n\r\nThanks!"", 'comment_created': datetime.datetime(2021, 8, 7, 9, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684612957, 'comment_body': ""(this is to avoid someone to accidentally do: \r\n\r\n```python\r\n>>> from dateparser.custom_language_detection import map_languages\r\n>>> map_languages()\r\nTypeError: 'module' object is not callable\r\n\r\n\r\n```"", 'comment_created': datetime.datetime(2021, 8, 7, 9, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684613269, 'comment_body': '```suggestion\r\n``LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD``: defaults to ``0.5``. It is a ``float`` of minimum required confidence for the custom language detection:\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 10, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684613776, 'comment_body': 'After the code I would add something like:\r\n\r\n```\r\nWhen using this setting, the languages will be added after the detected languages. It is specially useful when using the `detect_languages_function`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 10, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684614139, 'comment_body': '```suggestion\r\n`dateparser` allows to customize the language detection behavior by using the ``detect_languages_function`` parameter. It currently supports two\r\n language detection libraries out of the box: `fasttext <https://github.com/facebookresearch/fastText>`_ \r\nand `langdetect <https://github.com/Mimino666/langdetect>`_, and allows you to implement your own custom language detection.\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 10, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684616570, 'comment_body': ""This setting (`DEFAULT_LANGUAGES`) is not working as expected. This should be changed.\r\n When you use it without the `detect_languages_function` it is added to the languages, so it's limiting the languages used. Look at this example:\r\n\r\n```\r\n# This is returning `None` because is limiting the languages to 'en' and the text is in 'es'.\r\n>>> dateparser.parse('3 de marzo', settings={'DEFAULT_LANGUAGES': ['en']})\r\n>>>\r\n```\r\n\r\nInstead of this, what you should do is removing this and adding something like this after the next `for` (quick test, I didn't test it properly):\r\n\r\n\r\n```python\r\n\r\n        if self._settings.DEFAULT_LANGUAGES:\r\n            for locale in self._get_locale_loader().get_locales(\r\n                languages=self._settings.DEFAULT_LANGUAGES, locales=None,\r\n                region=None, use_given_order=self.use_given_order\r\n            ):\r\n                yield locale\r\n```\r\n\r\n\r\nwith this what you are trying to do is using the locales automatically detected and then if all fails you try with the DEFAULT_LANGUAGES. Let me know if you have any doubt. The best way to test this would be adding a text like the example I put.\r\n\r\nThis:\r\n```python\r\ndateparser.parse('3 de marzo 2019', settings={'DEFAULT_LANGUAGES': ['en']})\r\n```\r\n\r\nshould return:\r\n```python\r\ndatetime.datetime(2019, 3, 3, 0, 0)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 7, 10, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684616990, 'comment_body': 'This never returns `None`, it would return an empty list. Also, this would be cleaner if we write it as a list comprehension:\r\n\r\n```suggestion\r\n    """"""\r\n    Returns the candidates from the supported languages codes.\r\n    :param languages:\r\n        A list of language codes, e.g. [\'en\', \'es\'] in ISO 639 Standard.\r\n    :type languages: list\r\n    :return: Returns list[str] representing supported languages\r\n    :rtype: list[str]\r\n    """"""\r\n   return [\r\n        language_map[language_code]\r\n        for language_code in language_codes\r\n        if language_code in language_map\r\n    ]\r\n```', 'comment_created': datetime.datetime(2021, 8, 7, 10, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684618502, 'comment_body': ""I would use here the exception you created: `FastTextModelNotFoundException`\r\n\r\n```suggestion\r\n        raise FastTextModelNotFoundException('Fasttext model file not found')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 7, 10, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684618748, 'comment_body': ""If I'm not wrong, if you have both models downloaded you will take the first, put in in `model_path` and then take the second one and override the `model_path`. Is this the expected behavior? :thinking: "", 'comment_created': datetime.datetime(2021, 8, 7, 10, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684619100, 'comment_body': 'Let this conversation open until we clarify what I put about this setting in my comments below.', 'comment_created': datetime.datetime(2021, 8, 7, 11, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684619282, 'comment_body': '(check comment below before addressing this)', 'comment_created': datetime.datetime(2021, 8, 7, 11, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684643692, 'comment_body': 'Hi @noviluni, I have changed that and made the model preference.', 'comment_created': datetime.datetime(2021, 8, 7, 15, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684644066, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 15, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684644224, 'comment_body': ""Note: it's imported from `dateparser_cli`"", 'comment_created': datetime.datetime(2021, 8, 7, 15, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684651143, 'comment_body': ""Hey @noviluni, Its throws an error (`TypeError: unhashable type: 'list'`), as `language_map[language_code]` returns a list."", 'comment_created': datetime.datetime(2021, 8, 7, 16, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684651604, 'comment_body': 'Pl suggest', 'comment_created': datetime.datetime(2021, 8, 7, 16, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684651868, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 16, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684653966, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 16, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684654423, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 16, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684671570, 'comment_body': 'Hi @noviluni, I have fixed the issue with the above-suggested code and added tests.', 'comment_created': datetime.datetime(2021, 8, 7, 19, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684671869, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 7, 20, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684683262, 'comment_body': ""Hi @gavishpoddar, this error doesn't make sense, as the code I wrote is equivalent to what you wrote :thinking: \r\n\r\nthis error you mention would make sense if it would be a dictionary, as you can't use a list as a key, but in this case where you are creating a list of lists... Could you check this again? \r\n\r\nWhere did you found this error?\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 7, 22, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684683487, 'comment_body': ""> Note: it's imported from `dateparser_cli`\r\n\r\nMaybe it's not ideal, but as you are importing other things from there (`from dateparser_cli.fasttext_manager import fasttext_downloader`, `from dateparser_cli.utils import dateparser_model_home, create_data_model_home`....) I don't think it's an issue :+1: "", 'comment_created': datetime.datetime(2021, 8, 7, 22, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684683615, 'comment_body': ""I won't resolve this until I check how the `DEFAULT_LANGUAGES` is now working."", 'comment_created': datetime.datetime(2021, 8, 7, 22, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684755497, 'comment_body': ""`language_map[language_code]` returns a list of language codes. So it looks like `[['en']]` (2d array) so the error is raised \r\n\r\nShould be `['en']`"", 'comment_created': datetime.datetime(2021, 8, 8, 10, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684756744, 'comment_body': 'Hey, I changed it a little bit now it working. Pl suggest if its fine\r\n\r\n```\r\n    return [\r\n        language_code\r\n        for language_code_key in language_codes\r\n        if language_code_key in language_map\r\n        for language_code in language_map[language_code_key]\r\n    ]\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 11, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684822912, 'comment_body': 'For me `model_url` is confusing, it seems that it is the URL of a model. I think calling the variable `models` would be better. Also, the `if can be simplified.\r\n\r\n```suggestion\r\ndef fasttext_downloader(model_name):\r\n    create_data_model_home()\r\n\r\n    models = {\r\n        ""small"": ""https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.ftz"",\r\n        ""large"": ""https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin""\r\n    }\r\n\r\n    if model_name not in models:\r\n        message = ""dateparser-download: Couldn\'t find a model called \\""{}\\"". Supported models are: {}"".format(\r\n            model, "", "".join(models.keys())\r\n        )\r\n        raise FastTextModelNotFoundException(message)\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 20, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684823184, 'comment_body': 'is this `str()` needed? \r\n\r\nDid you tried like this?\r\n\r\n`os.path.join(Path.home(), ""AppData"", ""Roaming""))`\r\n\r\n(it works for me in Linux, but I didn\'t try on Windows)', 'comment_created': datetime.datetime(2021, 8, 8, 20, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684823271, 'comment_body': '```suggestion\r\nDEFAULT_DIR_NAME = os.environ.get(""DATEPARSER_MODELS_DIR_NAME"", \'dateparser_models\')\r\n```\r\n\r\nBTW, I think this should be documented in the docs.', 'comment_created': datetime.datetime(2021, 8, 8, 20, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684823855, 'comment_body': 'When I run the `dateparser_scripts/order_languages.py` script I get a different result. It seems that the CLDR data you had downloaded was different. Could you run again this script? Thanks! :slightly_smiling_face: ', 'comment_created': datetime.datetime(2021, 8, 8, 20, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684824058, 'comment_body': '```suggestion\r\ndef generate_language_map(language_order):\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 20, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684826046, 'comment_body': 'This is working, but the algorithm is ""horrible"" in terms of efficiency. You are iterating the same list multiple times unnecessarily. Look at this refactor where we only iterate the list once:\r\n\r\n```suggestion\r\n    data = {}\r\n    for lang in sorted(language_order):\r\n        if \'-\' not in lang:\r\n            data[lang] = [lang]\r\n        else:\r\n            data[lang.split(\'-\')[0]].append(lang)\r\n    return data\r\n```\r\n\r\n(it works because the list is sorted and the variations appear always after the main language, if not we could have `KeyError`s)', 'comment_created': datetime.datetime(2021, 8, 8, 20, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684833047, 'comment_body': 'Good job doing this. I would suggest to shorten the variable names to make it easier to read :)\r\n\r\n```suggestion\r\n    return [\r\n        language_code\r\n        for language in language_codes\r\n        if language in language_map\r\n        for language_code in language_map[language]\r\n    ]\r\n```', 'comment_created': datetime.datetime(2021, 8, 8, 21, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684833100, 'comment_body': 'Oh! Right, it is an `extend`, not an `append! Sorry, you are right, my code was not equivalent :sweat_smile:  \r\n\r\nI took a look to your new code and added a suggestion. Anyways, good job, marking as Resolved :+1: \r\n', 'comment_created': datetime.datetime(2021, 8, 8, 21, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 684929314, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 6, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684940137, 'comment_body': 'It works on windows as well checked. So I have removed it\r\nDone 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 6, 24, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684941433, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 6, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684954997, 'comment_body': 'Thanks, @noviluni \r\nDone 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 7, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684959393, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 7, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684963668, 'comment_body': 'This is not working in py3.5\r\n\r\nPl Suggest', 'comment_created': datetime.datetime(2021, 8, 9, 7, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 684985190, 'comment_body': ""Hey @noviluni , I was unable to do that due to CLDR data issues even if I simply run `dateparser_scripts/order_languages.py` without `language_map` the following errors is thrown. So I copied `language_map` and pasted this data after running `dateparser_scripts/order_languages.py` and reversed all other changes\r\n\r\n```\r\nERROR tests/test_data.py - ModuleNotFoundError: No module named 'dateparser.data.date_translation_data.jv'\r\nERROR tests/test_data.py\r\nERROR tests/test_language_detect.py - ModuleNotFoundError: No module named 'dateparser.data.date_translation_data.jv'\r\nERROR tests/test_language_detect.py\r\nERROR tests/test_search.py - ModuleNotFoundError: No module named 'dateparser.data.date_translation_data.jv'\r\nERROR tests/test_search.py\r\n```\r\n\r\nNote: this may be dues to old pinned CLDR data. As this error is not raised with the news CLDR data PR #941"", 'comment_created': datetime.datetime(2021, 8, 9, 7, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685002975, 'comment_body': '```suggestion\r\n        if self.detect_languages_function and not self.languages and not self.locales:\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 8, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685003775, 'comment_body': '```suggestion\r\n            self.languages = map_languages(detected_languages)\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 8, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685004316, 'comment_body': '```suggestion\r\n        if self._settings.DEFAULT_LANGUAGES:\r\n            for locale in self._get_locale_loader().get_locales(\r\n                languages=self._settings.DEFAULT_LANGUAGES, locales=None,\r\n                region=self.region, use_given_order=self.use_given_order\r\n            ):\r\n                yield locale\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 8, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685006784, 'comment_body': 'Add Warning saying ""For short strings the language detection could fail, so it\'s highly recommended to use this ``detect_languages_function`` along with some values in `DEFAULT_LANGUAGES`"".', 'comment_created': datetime.datetime(2021, 8, 9, 8, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685122682, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 11, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685122774, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 11, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685123056, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 11, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685349424, 'comment_body': 'Done 👍🏻 \r\n\r\nI have added a note ', 'comment_created': datetime.datetime(2021, 8, 9, 16, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685350041, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 16, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685364346, 'comment_body': 'For me this file is ready :heavy_check_mark: , as a suggestion, I would add the URL so in case there\'s an error the user can easily check if it\'s because the URL is failing.\r\n```suggestion\r\n        logging.info(""dateparser-download: Downloading model \\""{}\\"" from ""\\{}\\\\""..."".format(model_name, model_url))\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 16, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685370004, 'comment_body': '```suggestion\r\n        Note: this function is only used if ``languages`` and ``locales`` are not provided.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 17, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685370487, 'comment_body': '(same change than above)', 'comment_created': datetime.datetime(2021, 8, 9, 17, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685372637, 'comment_body': '```suggestion\r\nif sys.version_info < (3, 6):  # python 3.5 compatibility\r\n    DEFAULT_WINDOWS_CACHE_DIR = os.environ.get(\r\n        ""DATEPARSER_MODELS_CACHE_DIR"", os.path.join(str(Path.home()), ""AppData"", ""Roaming"")\r\n    )\r\nelse:\r\n    DEFAULT_WINDOWS_CACHE_DIR = os.environ.get(\r\n        ""DATEPARSER_MODELS_CACHE_DIR"", os.path.join(Path.home(), ""AppData"", ""Roaming"")\r\n    )\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 17, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685372824, 'comment_body': '```suggestion\r\n    _cache_dir = DEFAULT_WINDOWS_CACHE_DIR\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 17, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685373643, 'comment_body': 'It is possible to change it from a ""note"" to a ""warning""? :)', 'comment_created': datetime.datetime(2021, 8, 9, 17, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685375268, 'comment_body': '```suggestion\r\n.. note:: When using this setting, these languages will be tried after trying with the detected languages with no success. It is especially useful when using the ``detect_languages_function`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 9, 17, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685415180, 'comment_body': 'I have created some test but I am certain its wrong please suggest ', 'comment_created': datetime.datetime(2021, 8, 9, 18, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685435273, 'comment_body': 'I think you shouldn\'t use map_languages here. What you can do is just test if the values are not valid languages, and maybe you can also check if there are repeated values, like in `_check_parsers()` :)\r\n\r\n```suggestion\r\ndef _check_default_languages(setting_name, setting_value):\r\n    unsupported_languages = set(setting_value) - set(language_order)\r\n    if unsupported_languages:\r\n        raise SettingValidationError(\r\n            \'Found invalid languages in the ""{}"" setting: {}\'.format(\r\n                setting_name, \', \'.join(map(repr, unsupported_languages))\r\n            )\r\n        )\r\n    _check_repeated_values(setting_name, setting_value)\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 18, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685470462, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685471248, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685472020, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685472175, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685472926, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685473172, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685473889, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685474827, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 9, 19, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 685758939, 'comment_body': ""I've seen that you put the same setting twice. I would suggest to keep only the first one.\r\n```suggestion\r\n        param('DEFAULT_LANGUAGES', 'en', '', ['en']),\r\n        param('LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD', '1', '', 0.5),\r\n```"", 'comment_created': datetime.datetime(2021, 8, 10, 7, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 685764753, 'comment_body': '```suggestion\r\n``DEFAULT_LANGUAGES``: It is a ``list`` of language codes in ISO 639 that will be used as default \r\nlanguages for parsing when the language detection fails. eg. [""en"", ""fr""]:\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 7, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 686128481, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 10, 16, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 686128970, 'comment_body': 'done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 10, 16, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687417517, 'comment_body': '```suggestion\r\n    if languages or locales or region or detect_languages_function or not settings._default:\r\n```\r\n@noviluni @gavishpoddar @lopuhin  Just aesthetics\r\nDo you guys think the condition with `not` at the end is more aesthetic?', 'comment_created': datetime.datetime(2021, 8, 12, 6, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687421121, 'comment_body': '```suggestion\r\nimport hashlib\r\nfrom datetime import datetime\r\nfrom functools import wraps\r\n\r\nfrom dateparser.data.languages_info import language_order\r\nfrom .parser import date_order_chart\r\nfrom .utils import registry\r\n```\r\n\r\nIf possible we may sort/optimize imports.\r\nNOTE: These are just suggestions. All the Import related suggestions are not required as part of this PR and you can ignore them if you would like to :smile: ', 'comment_created': datetime.datetime(2021, 8, 12, 6, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687424068, 'comment_body': ""I couldn't find this variable used anywhere. Is it still required?"", 'comment_created': datetime.datetime(2021, 8, 12, 6, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687424542, 'comment_body': '```suggestion\r\nimport os\r\n\r\nimport fasttext\r\nfrom dateparser_cli.exceptions import FastTextModelNotFoundException\r\nfrom dateparser_cli.fasttext_manager import fasttext_downloader\r\nfrom dateparser_cli.utils import dateparser_model_home, create_data_model_home\r\n\r\n```\r\n\r\nWe may sort/optimize imports like this. ', 'comment_created': datetime.datetime(2021, 8, 12, 6, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687525862, 'comment_body': '```suggestion\r\nfrom langdetect.detector_factory import DetectorFactory, PROFILES_DIRECTORY\r\n\r\nimport langdetect\r\n```\r\n\r\nAfter sorting/optimizing imports.', 'comment_created': datetime.datetime(2021, 8, 12, 9, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687528194, 'comment_body': ""This gives the following warning:\r\n`Function 'map_languages' does not have a parameter 'languages'`\r\nWe need to update the docstring comment."", 'comment_created': datetime.datetime(2021, 8, 12, 9, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687550378, 'comment_body': '```suggestion\r\nimport collections\r\nimport sys\r\nfrom collections.abc import Set\r\nfrom datetime import datetime, timedelta\r\n\r\nimport regex as re\r\nfrom dateutil.relativedelta import relativedelta\r\n\r\nfrom dateparser.conf import apply_settings, check_settings\r\nfrom dateparser.custom_language_detection.language_mapping import map_languages\r\nfrom dateparser.date_parser import date_parser\r\nfrom dateparser.freshness_date_parser import freshness_date_parser\r\nfrom dateparser.languages.loader import LocaleDataLoader\r\nfrom dateparser.parser import _parse_absolute, _parse_nospaces\r\nfrom dateparser.timezone_parser import pop_tz_offset_from_string\r\nfrom dateparser.utils import apply_timezone_from_settings, \\\r\n    set_correct_day_from_settings\r\n```\r\nSort imports suggestion.', 'comment_created': datetime.datetime(2021, 8, 12, 9, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687570893, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 10, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687572796, 'comment_body': 'Hi @kishan3 should there be space as they are imported from same library\r\n\r\nDone 👍🏻', 'comment_created': datetime.datetime(2021, 8, 12, 10, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687575109, 'comment_body': 'Done 👍🏻 changed as per above recommendation Pl suggest if a change is required', 'comment_created': datetime.datetime(2021, 8, 12, 10, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687575180, 'comment_body': 'Small typo `menager` -> `manager`', 'comment_created': datetime.datetime(2021, 8, 12, 10, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687580779, 'comment_body': '```suggestion\r\nimport logging\r\nimport os\r\nimport urllib.request\r\nfrom pathlib import Path\r\n\r\nfrom .exceptions import FastTextModelNotFoundException\r\nfrom .utils import dateparser_model_home, create_data_model_home\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 10, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 687597785, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 10, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687600322, 'comment_body': ""Hi, I think it's already following [PEP8](https://www.python.org/dev/peps/pep-0008/#imports)"", 'comment_created': datetime.datetime(2021, 8, 12, 10, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687621221, 'comment_body': 'I believe they are being used in L24  ', 'comment_created': datetime.datetime(2021, 8, 12, 11, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687622466, 'comment_body': 'Thanks done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 11, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 687623023, 'comment_body': 'Thanks 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 11, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 688002925, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 12, 18, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 688212131, 'comment_body': 'I see. Thanks Now I can see, It was changed in this commit https://github.com/scrapinghub/dateparser/pull/932/commits/10bd8778c363acd03711fd1d486e7c59e27af388', 'comment_created': datetime.datetime(2021, 8, 13, 3, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 688289408, 'comment_body': 'Hi @noviluni, please suggest where to document in `docs/custom_language_detection.rst` or should I remove the environment variable.', 'comment_created': datetime.datetime(2021, 8, 13, 7, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 689283240, 'comment_body': ""+1 to remove this env variable, I think it's enough to be able to customize the parent - or to allow the user to customize the full path."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 690345458, 'comment_body': 'Done I have removed the environment variable', 'comment_created': datetime.datetime(2021, 8, 17, 12, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 690564474, 'comment_body': '```suggestion\r\n    downloaded_models = [\r\n        file for file in os.listdir(dateparser_model_home)\r\n        if file in _supported_models\r\n    ]\r\n    if not downloaded_models:\r\n        fasttext_downloader(_DEFAULT_MODEL)\r\n        return _load_fasttext_model()\r\n\r\n    model_path = os.path.join(dateparser_model_home, downloaded_models[0])\r\n```\r\n\r\nI think this approach is better.', 'comment_created': datetime.datetime(2021, 8, 17, 17, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 690565188, 'comment_body': ""Don't forget to remove the typing here."", 'comment_created': datetime.datetime(2021, 8, 17, 17, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 690568355, 'comment_body': 'I think it would be a good idea to add an `else` with a message indicating what to put.\r\n\r\n```suggestion\r\n    if args.fasttext:\r\n        fasttext_downloader(args.fasttext)\r\n    elif args.clear:\r\n        clear_cache()\r\n        logging.info(""dateparser-download: All cache deleted"")\r\n    else:\r\n        logging.info(\r\n            ""dateparser-download: You need to specify the command (i.e.: --fasttext or --clear)""\r\n        )\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 17, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 690569988, 'comment_body': '```suggestion\r\n        logging.info(""dateparser-download: The model \\""{}\\"" is already downloaded"".format(model_name))\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 17, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 690999747, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 8, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691000609, 'comment_body': 'done 👍🏻 \r\n', 'comment_created': datetime.datetime(2021, 8, 18, 8, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691001114, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 8, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691005821, 'comment_body': 'Thanks Marc, changes done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 8, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693365377, 'comment_body': '```suggestion\r\n    ""yue"": [\r\n        ""yue""\r\n    ],\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365434, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365449, 'comment_body': '```suggestion\r\n    ""tt"": [\r\n        ""tt""\r\n    ],\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365475, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365690, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365721, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365752, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365782, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365827, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365869, 'comment_body': '```suggestion\r\n    ""ff"": [\r\n        ""ff""\r\n    ],\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365914, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693365955, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 21, 15, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693366261, 'comment_body': 'Hi @gavishpoddar, I\'m not sure why are you having that issue, but it\'s working for me correctly when I try in your branch.\r\n\r\nI added code suggestions with the changes. Could you directly apply them one by one through the graphical interface (button ""commit suggestion) to avoid any issue?:\r\n![imagen](https://user-images.githubusercontent.com/22377678/130326396-fb458494-a73b-4ff8-8810-c0df009e1baa.png)\r\n\r\nOnce you do it I will check it again and if nothing changes it means that it\'s ok :)', 'comment_created': datetime.datetime(2021, 8, 21, 15, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693691064, 'comment_body': '```suggestion\r\n    along with ``DEFAULT_LANGUAGES``.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693691696, 'comment_body': '```suggestion\r\nThe fastText integration currently supports the large and the small models. You can\r\n```\r\n\r\nAlso, it would be great to link “large and small models” to some webpage that explains what those are. Users wishing to try fastText out but unfamiliar with it may find that helpful.', 'comment_created': datetime.datetime(2021, 8, 23, 6, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693693589, 'comment_body': 'We should be consistent with casing.\r\n\r\n```suggestion\r\nIt currently supports two language detection libraries out of the box: `fastText <https://github.com/facebookresearch/fastText>`_ \r\n```\r\n\r\nThere’s at least 1 more “fasttext” later in this document that needs changing as well.', 'comment_created': datetime.datetime(2021, 8, 23, 6, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693693990, 'comment_body': '```suggestion\r\nImport the fastText wrapper and pass it as ``detect_languages_function``\r\nparameter. Example::\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693695396, 'comment_body': 'Assuming this is actually about our wrapper, rather than upstream fastText, it may be best to change this accordingly:\r\n\r\n```suggestion\r\n    If no model has been downloaded, the fastText wrapper downloads and uses \r\n    the small model by default.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693695508, 'comment_body': '```suggestion\r\nImport the langdetect wrapper and pass it as ``detect_languages_function``\r\nparameter. Example::\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693696248, 'comment_body': 'I think it would make sense to move this to the beginning of the section, and probably link to some discussion of those tests, so people can check out the details and possibly re-run the tests in the future as the upstream projects evolve.', 'comment_created': datetime.datetime(2021, 8, 23, 6, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693696732, 'comment_body': 'To prevent having to update this header as we add or remove implementations in the future, maybe something like “Built-in implementations” would be slightly better.', 'comment_created': datetime.datetime(2021, 8, 23, 6, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693699119, 'comment_body': '```suggestion\r\n``dateparser`` allows the integration of any library to detect languages by\r\nwrapping that library in a function that accepts 2 parameters, ``text`` and\r\n``confidence_threshold``, and returns a list of the detected language codes in\r\nISO 639 standards.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693699478, 'comment_body': '```suggestion\r\n        Takes 2 parameters, `text` and `confidence_threshold`, and returns\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693700753, 'comment_body': '```suggestion\r\n        * `text` is the input string whose language needs to be detected.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693705694, 'comment_body': '```suggestion\r\n        * `confidence_threshold` is a number between 0 and 1 that indicates the \r\n        minimum confidence required for language matches.\r\n        \r\n        For language detection libraries that, for each language, indicate how \r\n        confident they are that the language matches the input text, you should \r\n        filter out languages with a confidence lower than this value (adjusted,\r\n        if needed, to the confidence range of the target library).\r\n        \r\n        This value comes from the dateparser setting \r\n        `LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693707389, 'comment_body': 'I see some duplication of information in this section. For example, this note is already covered by the docstring. The text before the example also covers information about the signature later covered in the docstring.\r\n\r\nI think it may be best to remove the docstring from the example, and instead cover the documentation about parameters and return value all before the example. ', 'comment_created': datetime.datetime(2021, 8, 23, 6, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693708848, 'comment_body': 'Just to clarify, when we say ISO 639, do we mean the whole ISO? It may be best to include a 3-letter language code in the example at the end to clarify that or, if only 2-letter ISO codes are supported, to specify ISO 639-1.\r\n\r\nAlso:\r\n\r\n```suggestion\r\n``DEFAULT_LANGUAGES``: It is a ``list`` of language codes in ISO 639 that will be used as default \r\nlanguages for parsing when language detection fails. eg. [""en"", ""fr""]:\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 6, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 693713839, 'comment_body': ""Hi @gavishpoddar, if I'm not wrong you forgot to apply this one. I reopened it."", 'comment_created': datetime.datetime(2021, 8, 23, 7, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693727662, 'comment_body': 'For this test I would use a string recognized by the language in `languages` and not a generic date. For example:\r\n\r\n```suggestion\r\n    @parameterized.expand([\r\n        param(date_string=\'29 mai 2021\', languages=[""fr""], settings={\r\n            ""DEFAULT_LANGUAGES"": [""en"", ""es""]\r\n        }),\r\n    ])\r\n    def test_parse_settings_default_languages_with_detected_language(self, date_string, languages, settings):\r\n        result = parse(date_string, languages=languages, settings=settings)\r\n        assert type(result) == datetime\r\n```\r\n\r\nAnd I would add the expected date instead of just checking the type. :)', 'comment_created': datetime.datetime(2021, 8, 23, 7, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693743361, 'comment_body': 'Could you add a test for `DEFAULT_LANGUAGES` with:\r\n* `DateDataParser` (and `get_date_data`)\r\n* `search_dates`', 'comment_created': datetime.datetime(2021, 8, 23, 7, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693772692, 'comment_body': 'Hi @noviluni, I am unable to apply this as GitHub is showing the below error\r\n\r\n`Suggestion cannot be identical to original text. \r\n` ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693775952, 'comment_body': 'Done 👍🏻, Changes two `fasttext` to `fastText`', 'comment_created': datetime.datetime(2021, 8, 23, 8, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693776700, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693780059, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693780358, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693781100, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693781332, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693782333, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693782740, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693783399, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693783993, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 51, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693784459, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 23, 8, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693855823, 'comment_body': 'Hi @noviluni, I have added tests for both the functions but `search_dates` can you please recheck as search dates only select only one language ', 'comment_created': datetime.datetime(2021, 8, 23, 10, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693880455, 'comment_body': 'Hey removing this file `dateparser_data/language_detection_models/__init__.py` is leading to errors and other folders like `dateparser_data` contains empty __init__.py\r\n\r\nPl suggest', 'comment_created': datetime.datetime(2021, 8, 23, 11, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693885017, 'comment_body': 'I have added the link to [fasttext](https://fasttext.cc/blog/2017/10/02/blog-post.html).', 'comment_created': datetime.datetime(2021, 8, 23, 11, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693933833, 'comment_body': 'I am not sure I referred to this [article](https://fasttext.cc/blog/2017/10/02/blog-post.html). It mentions ISO is used but I was unable to find more information please suggest.\r\n\r\nSo should it be ISO 639-1 or ISO 639-2\r\n\r\nNote it supports languages with codes like `azb`\r\n\r\n@Gallaecio ', 'comment_created': datetime.datetime(2021, 8, 23, 12, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693957406, 'comment_body': 'Done 👍🏻 , I have made the changes but let me know if any changes are required.', 'comment_created': datetime.datetime(2021, 8, 23, 13, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 693986093, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 23, 13, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 693986765, 'comment_body': 'Ok, this suggestion is wrong, for some reason is adding `tt` instead of removing it :thinking: I created a new different suggestion removing `tt`.', 'comment_created': datetime.datetime(2021, 8, 23, 13, 46, 24, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694613484, 'comment_body': ""Hi @gavishpoddar, good job with the tests!\r\n\r\n> Hey removing this file dateparser_data/language_detection_models/__init__.py is leading to errors and other folders like dateparser_data contains empty init.py\r\n\r\nThe empty __init__.py it's not an issue, but that folder (`language_detection_models`) is not used. Could you explain me which errors are you having and/or how to reproduce them? I was able to remove it and run the tests and all is working.  :thinking: \r\n\r\nI was able to directly remove it, but if you have som git related errors, you can try with `git rm`. Give me more details, please :)"", 'comment_created': datetime.datetime(2021, 8, 24, 8, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694630231, 'comment_body': 'This is complex. `arz`, `azb`, etc. are `ISO 639-3` codes. FastText supports `ISO-639-1` and some `ISO 639-3` codes. Dateparser does the same. So I guess you can leave it as `ISO 639` or write:\r\n\r\n> ""of languages codes in ISO 639-1 / ISO 639-3 that will be used as default""\r\n', 'comment_created': datetime.datetime(2021, 8, 24, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694635775, 'comment_body': '```suggestion\r\n    def test_check_settings_extra_check_confidence_threshold(self):\r\n```', 'comment_created': datetime.datetime(2021, 8, 24, 8, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694642292, 'comment_body': ""I would add here a new test using the confidence threshold setting. You can do something like this:\r\n\r\n```\r\ndef detect_languages(text, confidence_threshold):\r\n     if confidence_threshold > 0.5:\r\n         return ['en']\r\n     else:\r\n         return ['fr']\r\n\r\ndef test_confidence_threshold_setting_is_applied(self):\r\n    ddp = DateDataParser(detect_languages_function=detect_languages, settings={'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD': 0.6})\r\n    assert ddp.get_date_data('21/06/2020').locale == 'en'\r\n\r\n    ddp2 = DateDataParser(detect_languages_function=detect_languages, settings={'LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD': 0.4})\r\n    assert ddp2.get_date_data('21/06/2020').locale == 'fr'\r\n\r\n```\r\n\r\nThis is not exactly a unit test, but we try to ensure that the LANGUAGE_DETECTION_CONFIDENCE_THRESHOLD setting correctly arrives to the `datect_languages_function`."", 'comment_created': datetime.datetime(2021, 8, 24, 8, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 694675003, 'comment_body': ""I was having  issue \r\n\r\n`ModuleNotFoundError: No module named 'langdetect.detector_factory'; 'langdetect' is not a package\r\n`\r\n\r\nI have removed that and instead imported used `langdetect.detector_factory.DetectorFactory`"", 'comment_created': datetime.datetime(2021, 8, 24, 9, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 694675959, 'comment_body': 'Now its solved', 'comment_created': datetime.datetime(2021, 8, 24, 9, 22, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 694677737, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 24, 9, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 694683193, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 24, 9, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 694710302, 'comment_body': 'Thanks test added', 'comment_created': datetime.datetime(2021, 8, 24, 10, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698255125, 'comment_body': 'Hey @gavishpoddar, I think there was a confusion. I asked to remove the \r\n\r\n![image](https://user-images.githubusercontent.com/22377678/131301766-7d83ba2e-f0ab-4247-ac64-b8ca230880b1.png)\r\n\r\nNot the:\r\n\r\n![image](https://user-images.githubusercontent.com/22377678/131301821-25192060-bac7-4f01-8c6b-843dc3e28d82.png)\r\n\r\nYou can restore the second one and remove the first one.', 'comment_created': datetime.datetime(2021, 8, 30, 7, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 698276260, 'comment_body': 'Done 👍🏻, thanks', 'comment_created': datetime.datetime(2021, 8, 30, 7, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698458332, 'comment_body': ""Why is ``usage`` needed here, won't it be auto-generated? If yes, I'd rather drop it from here so we don't need to update it."", 'comment_created': datetime.datetime(2021, 8, 30, 12, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698459591, 'comment_body': 'Minor note: I think it would make sense to structure it in this way:\r\n\r\n```\r\nif args.clear:\r\n    ...\r\nif args.fasttext:\r\n    ...\r\n```\r\n\r\nIn this way, ``--clear --fasttext small`` would work as well - it would first clear the cache and then download the model.', 'comment_created': datetime.datetime(2021, 8, 30, 12, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698460380, 'comment_body': ""Minor: instead it's better to print an error and set a non-succesfull exit code with \r\n```suggestion\r\n       dateparser_argparse.error(\r\n```"", 'comment_created': datetime.datetime(2021, 8, 30, 12, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698471378, 'comment_body': 'Probably a blank line is needed between these two lines. Also the title could be adjusted to ""Optional language detection"" perhaps?', 'comment_created': datetime.datetime(2021, 8, 30, 13, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698507462, 'comment_body': 'Thanks, Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 30, 13, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698509947, 'comment_body': 'Thanks, Done 👍🏻', 'comment_created': datetime.datetime(2021, 8, 30, 13, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698514841, 'comment_body': 'Done 👍🏻 , I have removed the usage', 'comment_created': datetime.datetime(2021, 8, 30, 14, 1, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698516238, 'comment_body': 'Updated thanks 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 30, 14, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 700042514, 'comment_body': '@gavishpoddar I think there are a few issues here now:\r\n\r\n- I think it\'s best to first clear the cache, and then download - otherwise we\'ll clear what we just downloaded\r\n- Previously you had an else branch with  ``""dateparser-download: You need to specify the command (i.e.: --fasttext or --clear)""`` - I think it would be great to bring it back, using ``dateparser_argparse.error`` to show it.\r\n- For ``dateparser-download: All cache deleted`` message, I think it\'s best to use ``logging.info`` as before - this is not an error. ``dateparser_argparse.error`` would show a message and terminate the program with a non-succesfull return code, which is not we want here', 'comment_created': datetime.datetime(2021, 9, 1, 9, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 700089468, 'comment_body': 'Hey I have @lopuhin, made the changes. Please check and suggest if its fine and what more needs to be done.', 'comment_created': datetime.datetime(2021, 9, 1, 10, 34, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 701078820, 'comment_body': 'looks great, thanks @gavishpoddar :+1: ', 'comment_created': datetime.datetime(2021, 9, 2, 13, 24, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 701598002, 'comment_body': 'I think newline at end of the file is required.', 'comment_created': datetime.datetime(2021, 9, 3, 5, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kishan3', 'type': 'User'}, {'comment_id': 701603364, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 9, 3, 5, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}]","[{'commit_sha': '1e860996175ee11a8046d16fff92fa7fffe9a9a7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c6e29d204068f645bb7cf318950252d580d6394', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '176565beaae2b2a358ee25e0b9d0762952d098dd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c8678605b7cfc3e640ef4ad2ba218c565f5c9e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e22d2d408dcc57d31dd5c421939650b5589ff9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39a249155e74d06e8ce19d09e7ed207b4f877afe', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32321cf93f8d3a08ea77d13fdf0c6bffd9671194', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '499a29d36ca46e083138f6ee47722a36eaf10b3d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a41213573e0a78e445c91e13c41b734e894ed1a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c5b0e1bb7351696d50e5a62283f564272e8060', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6a2098a8609f5914e1eb86d5b7a891e93f55dc0', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3de5d5390f9679a97c2111ea458b6c92200b572', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6531fd8593c1be5658c7781454244f3b67c44026', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fbd94a2ae49abf6907eba1e9b25b16d7f8fd40', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edfc7603a5a2b5f35080d3afd9fa633da6e99eba', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f67f0ee9e475ca056067cb13369d3339be01af', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '584f40b43e75b724b9f7f40fd2a10f4bb82bf036', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2d1ad6e93e881eddc68325be95cfdc413334de5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b6f195020df63eb284100a91205dc321c51cee9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0c1ad096f310294292b5b93828e5f6a70ad2166', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82ce3f140ea330149e3f64b1ff6078afb913c45a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a4268a46b9be034a2350a68ee55099830bba2d9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36a88d782075996af13ce04747999df572f9d10e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e04faf8968b826a201f131601b5ef0851b5f1e91', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '270faf6f9bb7034449a195e1054039eb13bc2578', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb8d3fad1b7103a4fa272313ec664b259b8186c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6976a659aacdf7fad709fb48715cfa2c536b5852', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad04bcf3b0f38338e1a01b1e26c0adeddf3fa850', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4790d97e5ff7a384f5e87ac0df34f7e5e67c20fe', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bc43afbc99eef76901dd3f9595b7094414a3349', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a313d3339a2f0a44e64e1c196d1bef41f55e7dd4', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fda13ec60f4041206cb39cb36dfbfd2d8ed8d58', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20aba0a19f8e3eb7c79a476f117aec0a727324b4', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f2ccae4cefe1d38562276bbcaab594c73e049a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e3ed235e415f34158d2411f8b3f49af4a2b79a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e68c7a2e03f7c659714cdc0103271afa6dda81', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '205e29f7c2e10dbd53302ef822503b896069ed92', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345c18ebd014591e69e9f561ec1dab190203e73c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd25f3b2946ada969b46af228f82175bd61c16ac7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86df9266498df724d775b4de1bfe4eabf0327145', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5764bf9228c10e0fa1d6da9851d0b28eef992ae', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63262cf64c249475158d130921f4aee4c623f390', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fd53c454907717ad12c90c54a89f11b1e3117f6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb3fcc31cac528bc2990f36a2f3fd59fac73634', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2aa41464a0b428ddf6792b9f35c42f47789d0d4f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f323012d75538294d4a08cab7d7926c0f7148c9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce7e07700fea847947062f1e539f2da3b9da715', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '172361f6926f9633d622cecd45c589da5fa30fcb', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c959d877a24e53942d0e3744ad5abede07dab7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '339f7f66203f0b7176e271b275bf13b7c9008b28', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580a85909ed8e92d511ea98437975b687f69243d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a81f2619c1d5ec54120c067b66a66cdedb6d0b0', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b7607ab92a2ad2328cec03632e4fcd5a753580b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbfebc97632a4ba1aebaa29eece9f3d2dd4d0e49', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e8c7bdceea5aee0cd2a46d6b4f7ea88bbac257', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f134d3172e388806519fa570acd18a52ea4a55f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50b7224515c14851546e7a89efabff58f8b1b6de', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11b55d1a01060a524b1959fe03caba767c7221bf', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '297113418289388508583c3a4bf4fdb4a1c02b1f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38365482111b089a29b5a7deb5178c6a2e2730d1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19ca2ff6b53c190587167ecf4324dbf135162b50', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c715e5837d0a17e67982e28becf832c09361b6e1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03cd5b5d755f93dcbaff86466f2bdaee0c0ec93e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6448d01c41c8e9f362b0e71440c26ef77646cb1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '639fb0a9ba77383637237a4b8986fdbf119d0dff', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25780f8d55a8ce0c712bb781027f3e24b0f30ea5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5fe589c2722fbac5488c81e6837bf8f165e756b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82cad0089985faab5316f7d3d5b7be4784aa96d5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a684fdffb62da5f6d922314f960f4069dacda995', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03dd0be1fbd78992c428dafc8de741c757e16383', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df0d54af1e63b385b4694e009461edb6c4be0e43', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54ccdf80bb8dda0be51eb72ba4348816387e46ce', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c8c007b2417178a7f599b18721ed798153184d1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5e0a308ff80e62b632c6f1c5d77d4985a434887', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985dad6317b253092309814ffb322fb4914b187d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67457905211e09498eb87fc9f4117450677a4e3b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69ea22fe652918f185f9c1a46e999d145bca3ae9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e184092df99d55aaa3b668047355cd2a50cb4406', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '239f4a3e17a7756d2b598793b0169784713ec0db', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abab857b3e32de699e693858752a389a2e76fb4d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffea2469c413cce42c6d1932e1c4eb01f26b74ce', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1992524a95f9b19ca29bb987c49af5028c44063', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9266b0633c35380c29be8c3ea1fe02a7462f8805', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7073f39c840fe65bc492715e724acba122e2d042', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdc5d17d4c7c64bc9b3154890ddf74b57fc1219c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cabce8dd47f8d6d38bf0275d16a8183499f19f6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08e416ef53d52bb6fa05f61a96e75da7d5ebdaf1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f7e10a220e5aca214d40528654267d8386a5db', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '460142499884175d381dc0cedc626d7ad5e9ad89', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0d2cc24b7cfbd76f83352fc7788711ac1813548', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd316bc5d479991ed0039fa38e93f22af2de3d7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c68b2f3692ac9c052c48e169b94bd34f0e091323', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7139c79107ef4402071fd2386fdedbc36b1e295b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ac2fd9adbcca61c3fe309f33b324eeef1728f3b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8896467e183638766f34a13f0b8441aa9ef1b144', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1833f1fbe9251279f1cc4997839d083ee75d03b3', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1318afd405d4dbe6f924d41390223c6dcafc1d6f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5401b88fae704ca745b3027136cf89159abb6024', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0507b48411d73332bbc9a25012e3b6720e5945f2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '166ac3354d392494501bbd23142beb1adc8a41a2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e6eb14cfb289cce73a1e4276d02d99e51ed253f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb9768cc7231f6fdc03699ad0ecb69a2a934bea', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a95cf0c944b9b23b9c25f5dcb74e5844eff4476f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd76db341ee515435cb51d162b36a2db109b4772', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea5be905acca7104bbc99a2b5a96cc5525f48a0e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5de7f98850a77628e5e694ba545a34c2211a1ced', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67cfad24f24b8a35f07db29c9662d8a7e6ad47ef', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cb5257f2e0b8bc6b3df34b99da87669f129780c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b8f8508efc26a1d1169e77abb7c03f57422a45f', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8de4d3d601488c08aece180e75a22d8b8581bf3c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05f43bb0b6c3eb52fa2641647ea8cf644c2b34e8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3db7d7633908dd358f9229cb959f223f2c11a6b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1475ab0dbbbfd3b1732cbb93833b1bca409e9b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8a25dca3c8e50f2d5be63740addd62b3d639053', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d33863ac817372f853bd68afd893f73591ed89', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51d1b803bcd38633a62fce99b01f7d2c87a98a4b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '260265072909a0dd0a470389acb18096aa012dcc', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a035eaa62b6b559266b1530b04d7edc2c0b0316', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10bd8778c363acd03711fd1d486e7c59e27af388', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab15a3b8c218f43f6494673e06a067ffafb35cc1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebe64f953634688743c6200d9ee2f5ed7fee4f79', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba3dc2c55f032ba62f6c638640e5c6afa29bbe0', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2c999fdd95985e72a3be30bde55d6c11f938cb1', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d080e43d95686791a25f0d453fc5831895cf6e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '909c5f3c86150e09b8e2667efd160dd73d9067ad', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '658e11f0f609df8800bc319e63ff6b906cfea396', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a17537e0edaf9b16127b607b2e52bdb8c56b326', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b296dbafd00350bb32e0891dae17dbc9f9e8f93', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbb2564c5eb7dc9d0cfc4c26c49d914f30e2c52c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6cbded7578f3dca051f5e3e73104b43f2ed52e6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b19b8644ef4152d1c138722c74f48041da58d59', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a689c7fb0d1b86d0329c8c5a38c9c0c630e89e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a78400fbd947bf62adcbe5d48f030f6df005a2b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd5948405bfdf84f395c2d78f36e7b7f62814698', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0555e38579d1a18846483a6d7a92bce8b1a8c1ea', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df60c2b4d4c91f6750c613a0586016ab0bcb814', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e68260a8b548278f777682f574a228c59d569a3d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '141d2ca72dbec4611fd1a28064fdf76c593c1b5b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '001a9d71727deae1d2709c69462ca7b21c6a4154', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae36bc6c4003e368ec5ae0ba2376f8ff91a9dc59', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8dcf7b09d5c75d4b107a3c89d955d66d1ec9734', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}]",Gavish Poddar,18366222,,User,,22,,15,32
691774025,WIP: Reimplementing `search_dates`,"# Reimplementing and simplifying `search_dates`

A reimplemented and simplified `search_dates` which more directly uses `dateparser.parse`,  improves accuracy and  fixes many bugs


New Feature:
- `search_first_date` -  searches and returns the first date from the given text.



NOTE: This PR is inspired by the previous implementation of search_dates and #931.

### TODO 
- [x] Gather feedback on the API and it's functions.
- [x] Write docs.
- [x] Write tests.
- [x] Chack search translation joints.
- [x] Fix `DATE_ORDER`

",False,945,https://api.github.com/repos/scrapinghub/dateparser/pulls/945,https://github.com/scrapinghub/dateparser/pull/945,open,489,262,4,44,19,46,0,0,[],2021-07-16 22:30:54+00:00,,0.0,,"[{'comment_id': 683191615, 'comment_body': 'Hi @gavishpoddar \r\nYou removed this because it is in another PR, right?', 'comment_created': datetime.datetime(2021, 8, 5, 7, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683206971, 'comment_body': 'Hi @noviluni \r\nYes, I have removed this as its now part of PR #953', 'comment_created': datetime.datetime(2021, 8, 5, 7, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 689286842, 'comment_body': ""Why do we return a list, won't it make sense to return ``('on 4 October 1957', datetime.datetime(1957, 10, 4, 0, 0))`` or ``None``? Btw it would be great to add an example where nothing is found here."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 689289581, 'comment_body': 'I think having these blank lines made sense, is this more of a stylistic change, or required due to some automated check?', 'comment_created': datetime.datetime(2021, 8, 16, 7, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 689861948, 'comment_body': 'Thanks, I have made the changes', 'comment_created': datetime.datetime(2021, 8, 16, 21, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691482778, 'comment_body': 'I also think that it would be better if you can redo this change and left it as it was :)\r\n\r\n@gavishpoddar ', 'comment_created': datetime.datetime(2021, 8, 18, 17, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691483248, 'comment_body': 'I think it is that you solved the conflict wrongly, but this test should remain', 'comment_created': datetime.datetime(2021, 8, 18, 17, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691491554, 'comment_body': ""I see that you changed the `_drop_words` from uppercase to lowercase. Are you sure we don't need to do:\r\n\r\n`... and p.lower() not in _drop_words]`\r\n\r\n?"", 'comment_created': datetime.datetime(2021, 8, 18, 18, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691493166, 'comment_body': 'Could you remove the typing for Python 3.5 support? :)', 'comment_created': datetime.datetime(2021, 8, 18, 18, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691501898, 'comment_body': '```suggestion\r\n    """"""Find first substring of the given string which represent date and/or time and parse it.\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 18, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691502069, 'comment_body': '```suggestion\r\n        A string in a natural language which may contain the date and/or time expression.\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 18, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691563528, 'comment_body': 'Yes, I solved the merge conflict wrongly. \r\n\r\nI have added it back now.', 'comment_created': datetime.datetime(2021, 8, 18, 20, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691564407, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691565235, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691566258, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691567977, 'comment_body': 'Hi, Marc, actually causes the above issue and prevents returning the correct date string. I am looking into replacing this approach altogether ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691587697, 'comment_body': 'I have changed the filtering. Thanks to it new search_dates is now faster than the old implementation.\r\n\r\n@noviluni ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691590528, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697194992, 'comment_body': 'I think it returns a tuple, not a list of tuples. ``:rtype: list`` also needs to be adjusted below', 'comment_created': datetime.datetime(2021, 8, 27, 6, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697196768, 'comment_body': ""@gavishpoddar why are these tests removed? Except for a few details, they look correct to me. I think it's best to keep the tests (fixing mistakes where needed), and mark tests which are expected to fail with xfail"", 'comment_created': datetime.datetime(2021, 8, 27, 6, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697197161, 'comment_body': ""If the new implementation does not pass this tests, let's keep it with xfail, and add a passing test with an extra period as well."", 'comment_created': datetime.datetime(2021, 8, 27, 6, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697198473, 'comment_body': ""Let's keep this test with xfail"", 'comment_created': datetime.datetime(2021, 8, 27, 6, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697198625, 'comment_body': ""let's keep this test as xfail"", 'comment_created': datetime.datetime(2021, 8, 27, 6, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697304813, 'comment_body': 'Hi @lopuhin, I am trying to resolve [this](https://github.com/scrapinghub/dateparser/pull/945#issuecomment-892047873) issues I commented above please suggest how to fix this issue ', 'comment_created': datetime.datetime(2021, 8, 27, 9, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697307913, 'comment_body': 'Thanks, I have made the changes', 'comment_created': datetime.datetime(2021, 8, 27, 9, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697316916, 'comment_body': ""hi @gavishpoddar do you think it's a blocker?"", 'comment_created': datetime.datetime(2021, 8, 27, 10, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697317203, 'comment_body': 'cc @noviluni @kishan3 ', 'comment_created': datetime.datetime(2021, 8, 27, 10, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697339224, 'comment_body': 'I am not sure think this is consistent with `parse` and the tests needs to be changed. **I am not confident please suggest**', 'comment_created': datetime.datetime(2021, 8, 27, 10, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697339706, 'comment_body': '@lopuhin, I need advice on how to implement xfail. ', 'comment_created': datetime.datetime(2021, 8, 27, 10, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697548947, 'comment_body': ""@gavishpoddar I think the best approach is to try this https://docs.pytest.org/en/latest/how-to/skipping.html#skip-xfail-with-parametrize (so adding ``marks=pytest.mark.xfail`` to ``param(...)``). Another approach is to do this more manually - add one more parameter to the param, accept it in the test method, and call ``pytest.xfail`` if it's passed. But if the first option works, it's preferable I think. Pseudo-code for the second approach:\r\n\r\n```\r\n@parameterized.expand([\r\n        # English\r\n        param('en', 'January 3, 2017 - February 1st',\r\n              [('January 3, 2017', datetime.datetime(2017, 1, 3, 0, 0)),\r\n               ('February 1st', datetime.datetime(2017, 2, 1, 0, 0))],\r\n       xfail=True)  # <--- added (name can be different)\r\n])\r\ndef test_something(self, shortname, string, expected, settings=None, xfail=False):   # <--- added xfail argument\r\n     if xfail:\r\n        pytest.xfail()   # <--- added\r\n    # rest of the test\r\n```"", 'comment_created': datetime.datetime(2021, 8, 27, 15, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697896142, 'comment_body': 'Thanks @lopuhin, I was having some issues with the  `param(...)` approach so I have added the xfails with the second approach. ', 'comment_created': datetime.datetime(2021, 8, 28, 17, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697896232, 'comment_body': 'Done 👍🏻 , now marked as xfail.', 'comment_created': datetime.datetime(2021, 8, 28, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697901199, 'comment_body': 'Thanks, Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 28, 18, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698266209, 'comment_body': 'Thanks @gavishpoddar , nice job on the tests :+1: ', 'comment_created': datetime.datetime(2021, 8, 30, 7, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698269262, 'comment_body': ""Aha I see what's going on here - I'd rather revert the change in the test and mark it as xfail. From what I understand, the old implementation was keeping track of context (that we're in October 2014 at this point), while the new implementation does not do that."", 'comment_created': datetime.datetime(2021, 8, 30, 7, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 699940487, 'comment_body': 'Thanks, @lopuhin, I have marked it as xfail', 'comment_created': datetime.datetime(2021, 9, 1, 7, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 700037988, 'comment_body': '```suggestion\r\n    :return: Returns list of tuples containing:\r\n```', 'comment_created': datetime.datetime(2021, 9, 1, 9, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 700038651, 'comment_body': '```suggestion\r\n    :return: Returns a tuple containing:\r\n             substring representing date and/or time, corresponding :mod:`datetime.datetime`\r\n```', 'comment_created': datetime.datetime(2021, 9, 1, 9, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 700068861, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 9, 1, 10, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 700068926, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 9, 1, 10, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 704110064, 'comment_body': ""@gavishpoddar @noviluni hey folks, I'd like to clarify if we still want to try maintain backwards compatibility for things which are not documented but which are publicly exposed? If yes, then probably we would want to keep the same name of the class?"", 'comment_created': datetime.datetime(2021, 9, 8, 7, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 705008027, 'comment_body': 'Thanks for pointing this by this way things would be easier. So I am replacing `DateSearch` with `DateSearchWithDetection` so this PR will be backwards compatible. 😀 ', 'comment_created': datetime.datetime(2021, 9, 9, 6, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 1036952875, 'comment_body': 'The removal of `DateSearchWithDetection.search` is backward-incompatible.', 'comment_created': datetime.datetime(2022, 12, 1, 10, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 1036987463, 'comment_body': 'I can create a shortcut the make `DateSearchWithDetection.search` and add a deprecation warning or simply rename.\r\n\r\nPlease suggest a preferred action.', 'comment_created': datetime.datetime(2022, 12, 1, 11, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 1037018523, 'comment_body': 'I think keeping the old objects around with their old names, logging a warning when used (i.e. by exposing them through a property whose getter logs a warning), would be ideal.', 'comment_created': datetime.datetime(2022, 12, 1, 11, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}]","[{'commit_sha': '02220da91bc798647dc8355322bd25c9b74ed4b8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f933d3ae4ee2b58fb0f5b97d743bccbc2684275a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77727b571f481098d929119b527bed0c82dbc5e2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7f38e811dd5258b64cd8ea761d7504bfd80708b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '962066c09c49a6f9f1ef57a96892dbd584b0076d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '624ac8ef239b8e0b8516a39163f11a7d9d96d6b7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ca6f69b44bdb3514b9842bdb5940705cbffeb9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51749a259e076701b953ed81f93fc1da499d82ae', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e463545d2194415c1bced9e74e8fbf33cc8995', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '121b15ff5ddf89d9ce1c8562167c265257461a6c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd93f000648d6133b48d3141df5ce2f96e01f27', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006d2a53aeb9095dd2912a43d8d9f5ec3784f2f4', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10404c985f0a939f163763092cffc2c529fb71bd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22596e05e3893ae44d18eb804160fe7874adb5bf', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b799dfb30b46301768a7683399075264a7285c04', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42c984a0f12904ba4c9ef7be6b2d5b686a9143df', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fc5e0d3ebffcce9bbf51e16697a40d47c7703dc', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b6ec4da2439ef4cb4277d1582d08b5032ab840', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e05057ce98e0c2fed309094c7053746fb114f5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1b1c53f46a88f9a5fb58a234f04fe37dffe4f2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa2aa8fd3da454827f02cf2a6b3db203b2e8aa13', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41eff6a6d001be69673a75ae3cc3ee5eb175fa79', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65531b260ad3214cd72e45126fcac25a40d267c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982fc0893230ab415b5fdd4492bf46e9ab20baf9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3621b2d4c980121472bcc4df12f6a7d973a10455', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9496bb1207aff2865a636049aadbd9e5c66b88', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45996b48ac56ee340806d8b5aac400be1ff5888d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ac88c66ebde9bcaa717b50915c733e3eaa70dea', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dabc625379b004f765b6856d482ae2be4f2ec7a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab1778d55eb7095fce6b2bf4258e74481b7b2990', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14adf890ae5e127e42214a923920636b0eaf15a6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57223aa78a52d57641d79e9a4fdd1bcb98c0f1e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88afa30f750e03b6c021c6a35b78c6933ffe0fad', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9209f3d89c7ee9c77a7a7adce46d572e15b7e320', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85254e0bfff53623904df5dc49bfcf2c03cd4171', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4604e605760cf3d1ed8b1fd144a543f4c188566', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f119dd529c3c2b763546897b557f146d0c56e28', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6da4be4a443e51d053b385963505fe0682c26bd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6116bf1208c905477a3072b6b994734fe05e938', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0525cdc38c5bbadccf6344617ce00f1709604c5c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b91c018cb4ac8c77b09ec4b09083a1db0cfe2b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d12f30144f860bbb8a153b2d2a3eafc9cbda53', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e66c6e7eaa7827b4d0aab5ad25f3f4ab0399de', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2935aae62146135e5dd603fec7bd58419d166cf5', 'committer_username': 'serhii73', 'committer_name': 'Serhii A', 'committer_email': 'aserhii@protonmail.com', 'commit_date': datetime.datetime(2017, 1, 4, 7, 5, 37, tzinfo=datetime.timezone.utc)}]",Gavish Poddar,18366222,,User,,22,,15,32
691774025,WIP: Reimplementing `search_dates`,"# Reimplementing and simplifying `search_dates`

A reimplemented and simplified `search_dates` which more directly uses `dateparser.parse`,  improves accuracy and  fixes many bugs


New Feature:
- `search_first_date` -  searches and returns the first date from the given text.



NOTE: This PR is inspired by the previous implementation of search_dates and #931.

### TODO 
- [x] Gather feedback on the API and it's functions.
- [x] Write docs.
- [x] Write tests.
- [x] Chack search translation joints.
- [x] Fix `DATE_ORDER`

",False,945,https://api.github.com/repos/scrapinghub/dateparser/pulls/945,https://github.com/scrapinghub/dateparser/pull/945,open,489,262,4,44,19,46,0,0,[],2021-07-16 22:30:54+00:00,,0.0,,"[{'comment_id': 683191615, 'comment_body': 'Hi @gavishpoddar \r\nYou removed this because it is in another PR, right?', 'comment_created': datetime.datetime(2021, 8, 5, 7, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 683206971, 'comment_body': 'Hi @noviluni \r\nYes, I have removed this as its now part of PR #953', 'comment_created': datetime.datetime(2021, 8, 5, 7, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 689286842, 'comment_body': ""Why do we return a list, won't it make sense to return ``('on 4 October 1957', datetime.datetime(1957, 10, 4, 0, 0))`` or ``None``? Btw it would be great to add an example where nothing is found here."", 'comment_created': datetime.datetime(2021, 8, 16, 7, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 689289581, 'comment_body': 'I think having these blank lines made sense, is this more of a stylistic change, or required due to some automated check?', 'comment_created': datetime.datetime(2021, 8, 16, 7, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 689861948, 'comment_body': 'Thanks, I have made the changes', 'comment_created': datetime.datetime(2021, 8, 16, 21, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691482778, 'comment_body': 'I also think that it would be better if you can redo this change and left it as it was :)\r\n\r\n@gavishpoddar ', 'comment_created': datetime.datetime(2021, 8, 18, 17, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691483248, 'comment_body': 'I think it is that you solved the conflict wrongly, but this test should remain', 'comment_created': datetime.datetime(2021, 8, 18, 17, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691491554, 'comment_body': ""I see that you changed the `_drop_words` from uppercase to lowercase. Are you sure we don't need to do:\r\n\r\n`... and p.lower() not in _drop_words]`\r\n\r\n?"", 'comment_created': datetime.datetime(2021, 8, 18, 18, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691493166, 'comment_body': 'Could you remove the typing for Python 3.5 support? :)', 'comment_created': datetime.datetime(2021, 8, 18, 18, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691501898, 'comment_body': '```suggestion\r\n    """"""Find first substring of the given string which represent date and/or time and parse it.\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 18, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691502069, 'comment_body': '```suggestion\r\n        A string in a natural language which may contain the date and/or time expression.\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 18, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 691563528, 'comment_body': 'Yes, I solved the merge conflict wrongly. \r\n\r\nI have added it back now.', 'comment_created': datetime.datetime(2021, 8, 18, 20, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691564407, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691565235, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691566258, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691567977, 'comment_body': 'Hi, Marc, actually causes the above issue and prevents returning the correct date string. I am looking into replacing this approach altogether ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691587697, 'comment_body': 'I have changed the filtering. Thanks to it new search_dates is now faster than the old implementation.\r\n\r\n@noviluni ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 691590528, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 18, 20, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697194992, 'comment_body': 'I think it returns a tuple, not a list of tuples. ``:rtype: list`` also needs to be adjusted below', 'comment_created': datetime.datetime(2021, 8, 27, 6, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697196768, 'comment_body': ""@gavishpoddar why are these tests removed? Except for a few details, they look correct to me. I think it's best to keep the tests (fixing mistakes where needed), and mark tests which are expected to fail with xfail"", 'comment_created': datetime.datetime(2021, 8, 27, 6, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697197161, 'comment_body': ""If the new implementation does not pass this tests, let's keep it with xfail, and add a passing test with an extra period as well."", 'comment_created': datetime.datetime(2021, 8, 27, 6, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697198473, 'comment_body': ""Let's keep this test with xfail"", 'comment_created': datetime.datetime(2021, 8, 27, 6, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697198625, 'comment_body': ""let's keep this test as xfail"", 'comment_created': datetime.datetime(2021, 8, 27, 6, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697304813, 'comment_body': 'Hi @lopuhin, I am trying to resolve [this](https://github.com/scrapinghub/dateparser/pull/945#issuecomment-892047873) issues I commented above please suggest how to fix this issue ', 'comment_created': datetime.datetime(2021, 8, 27, 9, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697307913, 'comment_body': 'Thanks, I have made the changes', 'comment_created': datetime.datetime(2021, 8, 27, 9, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697316916, 'comment_body': ""hi @gavishpoddar do you think it's a blocker?"", 'comment_created': datetime.datetime(2021, 8, 27, 10, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697317203, 'comment_body': 'cc @noviluni @kishan3 ', 'comment_created': datetime.datetime(2021, 8, 27, 10, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697339224, 'comment_body': 'I am not sure think this is consistent with `parse` and the tests needs to be changed. **I am not confident please suggest**', 'comment_created': datetime.datetime(2021, 8, 27, 10, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697339706, 'comment_body': '@lopuhin, I need advice on how to implement xfail. ', 'comment_created': datetime.datetime(2021, 8, 27, 10, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697548947, 'comment_body': ""@gavishpoddar I think the best approach is to try this https://docs.pytest.org/en/latest/how-to/skipping.html#skip-xfail-with-parametrize (so adding ``marks=pytest.mark.xfail`` to ``param(...)``). Another approach is to do this more manually - add one more parameter to the param, accept it in the test method, and call ``pytest.xfail`` if it's passed. But if the first option works, it's preferable I think. Pseudo-code for the second approach:\r\n\r\n```\r\n@parameterized.expand([\r\n        # English\r\n        param('en', 'January 3, 2017 - February 1st',\r\n              [('January 3, 2017', datetime.datetime(2017, 1, 3, 0, 0)),\r\n               ('February 1st', datetime.datetime(2017, 2, 1, 0, 0))],\r\n       xfail=True)  # <--- added (name can be different)\r\n])\r\ndef test_something(self, shortname, string, expected, settings=None, xfail=False):   # <--- added xfail argument\r\n     if xfail:\r\n        pytest.xfail()   # <--- added\r\n    # rest of the test\r\n```"", 'comment_created': datetime.datetime(2021, 8, 27, 15, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 697896142, 'comment_body': 'Thanks @lopuhin, I was having some issues with the  `param(...)` approach so I have added the xfails with the second approach. ', 'comment_created': datetime.datetime(2021, 8, 28, 17, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697896232, 'comment_body': 'Done 👍🏻 , now marked as xfail.', 'comment_created': datetime.datetime(2021, 8, 28, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 697901199, 'comment_body': 'Thanks, Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 8, 28, 18, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 698266209, 'comment_body': 'Thanks @gavishpoddar , nice job on the tests :+1: ', 'comment_created': datetime.datetime(2021, 8, 30, 7, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 698269262, 'comment_body': ""Aha I see what's going on here - I'd rather revert the change in the test and mark it as xfail. From what I understand, the old implementation was keeping track of context (that we're in October 2014 at this point), while the new implementation does not do that."", 'comment_created': datetime.datetime(2021, 8, 30, 7, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 699940487, 'comment_body': 'Thanks, @lopuhin, I have marked it as xfail', 'comment_created': datetime.datetime(2021, 9, 1, 7, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 700037988, 'comment_body': '```suggestion\r\n    :return: Returns list of tuples containing:\r\n```', 'comment_created': datetime.datetime(2021, 9, 1, 9, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 700038651, 'comment_body': '```suggestion\r\n    :return: Returns a tuple containing:\r\n             substring representing date and/or time, corresponding :mod:`datetime.datetime`\r\n```', 'comment_created': datetime.datetime(2021, 9, 1, 9, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 700068861, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 9, 1, 10, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 700068926, 'comment_body': 'Done 👍🏻 ', 'comment_created': datetime.datetime(2021, 9, 1, 10, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 704110064, 'comment_body': ""@gavishpoddar @noviluni hey folks, I'd like to clarify if we still want to try maintain backwards compatibility for things which are not documented but which are publicly exposed? If yes, then probably we would want to keep the same name of the class?"", 'comment_created': datetime.datetime(2021, 9, 8, 7, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lopuhin', 'type': 'User'}, {'comment_id': 705008027, 'comment_body': 'Thanks for pointing this by this way things would be easier. So I am replacing `DateSearch` with `DateSearchWithDetection` so this PR will be backwards compatible. 😀 ', 'comment_created': datetime.datetime(2021, 9, 9, 6, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 1036952875, 'comment_body': 'The removal of `DateSearchWithDetection.search` is backward-incompatible.', 'comment_created': datetime.datetime(2022, 12, 1, 10, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}, {'comment_id': 1036987463, 'comment_body': 'I can create a shortcut the make `DateSearchWithDetection.search` and add a deprecation warning or simply rename.\r\n\r\nPlease suggest a preferred action.', 'comment_created': datetime.datetime(2022, 12, 1, 11, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 1037018523, 'comment_body': 'I think keeping the old objects around with their old names, logging a warning when used (i.e. by exposing them through a property whose getter logs a warning), would be ideal.', 'comment_created': datetime.datetime(2022, 12, 1, 11, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Gallaecio', 'type': 'User'}]","[{'commit_sha': '02220da91bc798647dc8355322bd25c9b74ed4b8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f933d3ae4ee2b58fb0f5b97d743bccbc2684275a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77727b571f481098d929119b527bed0c82dbc5e2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7f38e811dd5258b64cd8ea761d7504bfd80708b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '962066c09c49a6f9f1ef57a96892dbd584b0076d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '624ac8ef239b8e0b8516a39163f11a7d9d96d6b7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ca6f69b44bdb3514b9842bdb5940705cbffeb9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51749a259e076701b953ed81f93fc1da499d82ae', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e463545d2194415c1bced9e74e8fbf33cc8995', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '121b15ff5ddf89d9ce1c8562167c265257461a6c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd93f000648d6133b48d3141df5ce2f96e01f27', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006d2a53aeb9095dd2912a43d8d9f5ec3784f2f4', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10404c985f0a939f163763092cffc2c529fb71bd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22596e05e3893ae44d18eb804160fe7874adb5bf', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b799dfb30b46301768a7683399075264a7285c04', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42c984a0f12904ba4c9ef7be6b2d5b686a9143df', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fc5e0d3ebffcce9bbf51e16697a40d47c7703dc', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b6ec4da2439ef4cb4277d1582d08b5032ab840', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e05057ce98e0c2fed309094c7053746fb114f5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1b1c53f46a88f9a5fb58a234f04fe37dffe4f2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa2aa8fd3da454827f02cf2a6b3db203b2e8aa13', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41eff6a6d001be69673a75ae3cc3ee5eb175fa79', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65531b260ad3214cd72e45126fcac25a40d267c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982fc0893230ab415b5fdd4492bf46e9ab20baf9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3621b2d4c980121472bcc4df12f6a7d973a10455', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9496bb1207aff2865a636049aadbd9e5c66b88', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45996b48ac56ee340806d8b5aac400be1ff5888d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ac88c66ebde9bcaa717b50915c733e3eaa70dea', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dabc625379b004f765b6856d482ae2be4f2ec7a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab1778d55eb7095fce6b2bf4258e74481b7b2990', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14adf890ae5e127e42214a923920636b0eaf15a6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57223aa78a52d57641d79e9a4fdd1bcb98c0f1e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88afa30f750e03b6c021c6a35b78c6933ffe0fad', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9209f3d89c7ee9c77a7a7adce46d572e15b7e320', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85254e0bfff53623904df5dc49bfcf2c03cd4171', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4604e605760cf3d1ed8b1fd144a543f4c188566', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f119dd529c3c2b763546897b557f146d0c56e28', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6da4be4a443e51d053b385963505fe0682c26bd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6116bf1208c905477a3072b6b994734fe05e938', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0525cdc38c5bbadccf6344617ce00f1709604c5c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b91c018cb4ac8c77b09ec4b09083a1db0cfe2b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d12f30144f860bbb8a153b2d2a3eafc9cbda53', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e66c6e7eaa7827b4d0aab5ad25f3f4ab0399de', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2935aae62146135e5dd603fec7bd58419d166cf5', 'committer_username': 'serhii73', 'committer_name': 'Serhii A', 'committer_email': 'aserhii@protonmail.com', 'commit_date': datetime.datetime(2017, 1, 4, 7, 5, 37, tzinfo=datetime.timezone.utc)}]",Gavish Poddar,18366222,,User,,22,,15,32
697339360,Improvements in locale:translate_search fixes,"This PR fixes #930

Adds support for `last decade`, `next decade`, etc in `search_dates`

PL suggest if any change is required.

Thanks",True,953,https://api.github.com/repos/scrapinghub/dateparser/pulls/953,https://github.com/scrapinghub/dateparser/pull/953,closed,24,0,2,4,2,8,0,0,[],2021-07-26 20:44:14+00:00,2021-08-09 10:04:54+00:00,1171240.0,"13 days, 13:20:40","[{'comment_id': 677168380, 'comment_body': '```suggestion\r\n        word_joint_unsupported_languages = [""zh"", ""ja""]\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 6, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 677168917, 'comment_body': '```suggestion\r\n                    and self.shortname not in word_joint_unsupported_languages\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 6, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 677176570, 'comment_body': 'We could put the `-1` here :)\r\n\r\n```suggestion\r\n            last_token_index = len(simplified_tokens) - 1\r\n```\r\n\r\nIn that way the expression below will be easier to read.', 'comment_created': datetime.datetime(2021, 7, 27, 7, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 677177265, 'comment_body': 'I think putting the `i` first has a better semantic and it\'s easier to understand, because it\'s `i` which is changing.\r\n```suggestion\r\n                next_word = simplified_tokens[i + 1] if i < (simplified_tokens_length - 1) else """"\r\n```\r\n\r\nAnd applying what I mention above:\r\n\r\n```suggestion\r\n                next_word = simplified_tokens[i + 1] if i < last_token_index else """"\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 7, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 677308824, 'comment_body': 'Done 👍', 'comment_created': datetime.datetime(2021, 7, 27, 10, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677308887, 'comment_body': 'Done 👍', 'comment_created': datetime.datetime(2021, 7, 27, 10, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677308937, 'comment_body': 'Done 👍', 'comment_created': datetime.datetime(2021, 7, 27, 10, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677308972, 'comment_body': 'Done 👍', 'comment_created': datetime.datetime(2021, 7, 27, 10, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}]","[{'commit_sha': '2412f6652f264e9165ec6feef6d6287c0c76bd5b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40b6d487ed4fb5f1f6d151e7d39ae22ca182e542', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ad0fb881bbab19c154c768bbbe4ce5dd5467ca', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecbfc2b55fe2df49dc29d9d9e1e996ac0ded9442', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}]",Gavish Poddar,18366222,,User,,22,,15,32
697339360,Improvements in locale:translate_search fixes,"This PR fixes #930

Adds support for `last decade`, `next decade`, etc in `search_dates`

PL suggest if any change is required.

Thanks",True,953,https://api.github.com/repos/scrapinghub/dateparser/pulls/953,https://github.com/scrapinghub/dateparser/pull/953,closed,24,0,2,4,2,8,0,0,[],2021-07-26 20:44:14+00:00,2021-08-09 10:04:54+00:00,1171240.0,"13 days, 13:20:40","[{'comment_id': 677168380, 'comment_body': '```suggestion\r\n        word_joint_unsupported_languages = [""zh"", ""ja""]\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 6, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 677168917, 'comment_body': '```suggestion\r\n                    and self.shortname not in word_joint_unsupported_languages\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 6, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 677176570, 'comment_body': 'We could put the `-1` here :)\r\n\r\n```suggestion\r\n            last_token_index = len(simplified_tokens) - 1\r\n```\r\n\r\nIn that way the expression below will be easier to read.', 'comment_created': datetime.datetime(2021, 7, 27, 7, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 677177265, 'comment_body': 'I think putting the `i` first has a better semantic and it\'s easier to understand, because it\'s `i` which is changing.\r\n```suggestion\r\n                next_word = simplified_tokens[i + 1] if i < (simplified_tokens_length - 1) else """"\r\n```\r\n\r\nAnd applying what I mention above:\r\n\r\n```suggestion\r\n                next_word = simplified_tokens[i + 1] if i < last_token_index else """"\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 7, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'noviluni', 'type': 'User'}, {'comment_id': 677308824, 'comment_body': 'Done 👍', 'comment_created': datetime.datetime(2021, 7, 27, 10, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677308887, 'comment_body': 'Done 👍', 'comment_created': datetime.datetime(2021, 7, 27, 10, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677308937, 'comment_body': 'Done 👍', 'comment_created': datetime.datetime(2021, 7, 27, 10, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}, {'comment_id': 677308972, 'comment_body': 'Done 👍', 'comment_created': datetime.datetime(2021, 7, 27, 10, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gavishpoddar', 'type': 'User'}]","[{'commit_sha': '2412f6652f264e9165ec6feef6d6287c0c76bd5b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40b6d487ed4fb5f1f6d151e7d39ae22ca182e542', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ad0fb881bbab19c154c768bbbe4ce5dd5467ca', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecbfc2b55fe2df49dc29d9d9e1e996ac0ded9442', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}]",Gavish Poddar,18366222,,User,,22,,15,32
712564166,`search_date` period separator support,"This PR solves the below issues, it adds support for date objects like `12.12.2000` (separated by `.`)

- #768
- #771
- #500
- #952
- #767

Tests are added for these cases

Thanks and Pl suggest if changes are required

Originally from #963",False,963,https://api.github.com/repos/scrapinghub/dateparser/pulls/963,https://github.com/scrapinghub/dateparser/pull/963,open,531,274,7,66,2,0,0,0,[],2021-08-13 18:54:10+00:00,,0.0,,[],"[{'commit_sha': 'ed9fa751a884cd0b6f08816c4315d589191c1247', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b2ed03dabcddeaf799e0a4cd70594d2e6137544', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dafbf9137dc16be97321d1616c50fc353a88aa9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4927a9580e617624c9752707bc727764195c17a2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '299e727143a95fbaf7ffe01021c2be534d7738aa', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eb7989fc76fc1c11fe9b50b17337058567f5c65', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aeb6850a7d18fe965fb5a5e086db0a7c9ac8562', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd52edbe4df51eb57b731329fff5386b329c15658', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae1d1c2e89da012ee0ecb036521023417a01d380', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8340494cb3edc1b8e366a3ea600aba24f0814ed3', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02220da91bc798647dc8355322bd25c9b74ed4b8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f933d3ae4ee2b58fb0f5b97d743bccbc2684275a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77727b571f481098d929119b527bed0c82dbc5e2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7f38e811dd5258b64cd8ea761d7504bfd80708b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '962066c09c49a6f9f1ef57a96892dbd584b0076d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '624ac8ef239b8e0b8516a39163f11a7d9d96d6b7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ca6f69b44bdb3514b9842bdb5940705cbffeb9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51749a259e076701b953ed81f93fc1da499d82ae', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e463545d2194415c1bced9e74e8fbf33cc8995', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '121b15ff5ddf89d9ce1c8562167c265257461a6c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd93f000648d6133b48d3141df5ce2f96e01f27', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006d2a53aeb9095dd2912a43d8d9f5ec3784f2f4', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10404c985f0a939f163763092cffc2c529fb71bd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22596e05e3893ae44d18eb804160fe7874adb5bf', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b799dfb30b46301768a7683399075264a7285c04', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42c984a0f12904ba4c9ef7be6b2d5b686a9143df', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fc5e0d3ebffcce9bbf51e16697a40d47c7703dc', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261d3d5a56c9131bf75fe6084721190aa8a8b53d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47ed2f9a27b1c6893d860a7d2671c5c8350ff0c0', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391ae3dc68e901c40efa449b6561a61abd04ac4a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a52a0ee34e96fd1cef0362faac94d36027828c8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b6ec4da2439ef4cb4277d1582d08b5032ab840', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e05057ce98e0c2fed309094c7053746fb114f5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1b1c53f46a88f9a5fb58a234f04fe37dffe4f2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa2aa8fd3da454827f02cf2a6b3db203b2e8aa13', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41eff6a6d001be69673a75ae3cc3ee5eb175fa79', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65531b260ad3214cd72e45126fcac25a40d267c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982fc0893230ab415b5fdd4492bf46e9ab20baf9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3621b2d4c980121472bcc4df12f6a7d973a10455', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9496bb1207aff2865a636049aadbd9e5c66b88', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45996b48ac56ee340806d8b5aac400be1ff5888d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ac88c66ebde9bcaa717b50915c733e3eaa70dea', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dabc625379b004f765b6856d482ae2be4f2ec7a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab1778d55eb7095fce6b2bf4258e74481b7b2990', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14adf890ae5e127e42214a923920636b0eaf15a6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57223aa78a52d57641d79e9a4fdd1bcb98c0f1e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88afa30f750e03b6c021c6a35b78c6933ffe0fad', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9209f3d89c7ee9c77a7a7adce46d572e15b7e320', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85254e0bfff53623904df5dc49bfcf2c03cd4171', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '922ee908bf95eb42c1162376aececd557930e076', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4604e605760cf3d1ed8b1fd144a543f4c188566', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f119dd529c3c2b763546897b557f146d0c56e28', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6da4be4a443e51d053b385963505fe0682c26bd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6116bf1208c905477a3072b6b994734fe05e938', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0525cdc38c5bbadccf6344617ce00f1709604c5c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b91c018cb4ac8c77b09ec4b09083a1db0cfe2b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d12f30144f860bbb8a153b2d2a3eafc9cbda53', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e66c6e7eaa7827b4d0aab5ad25f3f4ab0399de', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f1b413106b5eddcfb8b25bd2ce4668ef81718a7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '455dd488037554260abad5ba4097b16dd411bbda', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c22080fbe82ccb9382fc4bde7cf690eb00b7887', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f8c757d6438acc71ad55e70602c8c8b0b35111', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ff334f4ab20389592bf1e65d840bc54bf2bff8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3813d38ffd4ac1c32ec649ee830b59432dc5db12', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff66b2c909d6a1c1f979157acffdadcd9776085c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b54890eca239cba6175806cd22fb0f9ddb3b5f0d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}]",Gavish Poddar,18366222,,User,,22,,15,32
712564166,`search_date` period separator support,"This PR solves the below issues, it adds support for date objects like `12.12.2000` (separated by `.`)

- #768
- #771
- #500
- #952
- #767

Tests are added for these cases

Thanks and Pl suggest if changes are required

Originally from #963",False,963,https://api.github.com/repos/scrapinghub/dateparser/pulls/963,https://github.com/scrapinghub/dateparser/pull/963,open,531,274,7,66,2,0,0,0,[],2021-08-13 18:54:10+00:00,,0.0,,[],"[{'commit_sha': 'ed9fa751a884cd0b6f08816c4315d589191c1247', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b2ed03dabcddeaf799e0a4cd70594d2e6137544', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dafbf9137dc16be97321d1616c50fc353a88aa9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4927a9580e617624c9752707bc727764195c17a2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '299e727143a95fbaf7ffe01021c2be534d7738aa', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eb7989fc76fc1c11fe9b50b17337058567f5c65', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aeb6850a7d18fe965fb5a5e086db0a7c9ac8562', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd52edbe4df51eb57b731329fff5386b329c15658', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae1d1c2e89da012ee0ecb036521023417a01d380', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8340494cb3edc1b8e366a3ea600aba24f0814ed3', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02220da91bc798647dc8355322bd25c9b74ed4b8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f933d3ae4ee2b58fb0f5b97d743bccbc2684275a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77727b571f481098d929119b527bed0c82dbc5e2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7f38e811dd5258b64cd8ea761d7504bfd80708b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '962066c09c49a6f9f1ef57a96892dbd584b0076d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '624ac8ef239b8e0b8516a39163f11a7d9d96d6b7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ca6f69b44bdb3514b9842bdb5940705cbffeb9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51749a259e076701b953ed81f93fc1da499d82ae', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e463545d2194415c1bced9e74e8fbf33cc8995', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '121b15ff5ddf89d9ce1c8562167c265257461a6c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cd93f000648d6133b48d3141df5ce2f96e01f27', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006d2a53aeb9095dd2912a43d8d9f5ec3784f2f4', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10404c985f0a939f163763092cffc2c529fb71bd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22596e05e3893ae44d18eb804160fe7874adb5bf', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b799dfb30b46301768a7683399075264a7285c04', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42c984a0f12904ba4c9ef7be6b2d5b686a9143df', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fc5e0d3ebffcce9bbf51e16697a40d47c7703dc', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '261d3d5a56c9131bf75fe6084721190aa8a8b53d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47ed2f9a27b1c6893d860a7d2671c5c8350ff0c0', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '391ae3dc68e901c40efa449b6561a61abd04ac4a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a52a0ee34e96fd1cef0362faac94d36027828c8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74b6ec4da2439ef4cb4277d1582d08b5032ab840', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56e05057ce98e0c2fed309094c7053746fb114f5', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a1b1c53f46a88f9a5fb58a234f04fe37dffe4f2', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa2aa8fd3da454827f02cf2a6b3db203b2e8aa13', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41eff6a6d001be69673a75ae3cc3ee5eb175fa79', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f65531b260ad3214cd72e45126fcac25a40d267c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982fc0893230ab415b5fdd4492bf46e9ab20baf9', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3621b2d4c980121472bcc4df12f6a7d973a10455', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9496bb1207aff2865a636049aadbd9e5c66b88', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45996b48ac56ee340806d8b5aac400be1ff5888d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ac88c66ebde9bcaa717b50915c733e3eaa70dea', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dabc625379b004f765b6856d482ae2be4f2ec7a', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab1778d55eb7095fce6b2bf4258e74481b7b2990', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14adf890ae5e127e42214a923920636b0eaf15a6', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57223aa78a52d57641d79e9a4fdd1bcb98c0f1e', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88afa30f750e03b6c021c6a35b78c6933ffe0fad', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9209f3d89c7ee9c77a7a7adce46d572e15b7e320', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85254e0bfff53623904df5dc49bfcf2c03cd4171', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '922ee908bf95eb42c1162376aececd557930e076', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4604e605760cf3d1ed8b1fd144a543f4c188566', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f119dd529c3c2b763546897b557f146d0c56e28', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6da4be4a443e51d053b385963505fe0682c26bd', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6116bf1208c905477a3072b6b994734fe05e938', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0525cdc38c5bbadccf6344617ce00f1709604c5c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b91c018cb4ac8c77b09ec4b09083a1db0cfe2b', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d12f30144f860bbb8a153b2d2a3eafc9cbda53', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e66c6e7eaa7827b4d0aab5ad25f3f4ab0399de', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f1b413106b5eddcfb8b25bd2ce4668ef81718a7', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '455dd488037554260abad5ba4097b16dd411bbda', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c22080fbe82ccb9382fc4bde7cf690eb00b7887', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f8c757d6438acc71ad55e70602c8c8b0b35111', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ff334f4ab20389592bf1e65d840bc54bf2bff8', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3813d38ffd4ac1c32ec649ee830b59432dc5db12', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff66b2c909d6a1c1f979157acffdadcd9776085c', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b54890eca239cba6175806cd22fb0f9ddb3b5f0d', 'committer_username': 'gavishpoddar', 'committer_name': 'Gavish Poddar', 'committer_email': None, 'commit_date': datetime.datetime(2016, 4, 9, 14, 17, 18, tzinfo=datetime.timezone.utc)}]",Gavish Poddar,18366222,,User,,22,,15,32

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
27086567,dateparser,scrapinghub/dateparser,Python,464,2517,133,139,1518,330,47,50,"[{'id': 712564166, 'number': 963, 'closed': None, 'created': datetime.datetime(2021, 8, 13, 18, 54, 10, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 531, 'deletions': 274, 'state': 'open'}, {'id': 699403085, 'number': 955, 'closed': None, 'created': datetime.datetime(2021, 7, 29, 10, 22, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 3, 'deletions': 3, 'state': 'open'}, {'id': 697339360, 'number': 953, 'closed': datetime.datetime(2021, 8, 9, 10, 4, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 20, 44, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1171240.0, 'time_delta': '13 days, 13:20:40', 'additions': 24, 'deletions': 0, 'state': 'closed'}, {'id': 697119517, 'number': 951, 'closed': datetime.datetime(2021, 7, 26, 15, 19, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 26, 15, 13, 14, tzinfo=datetime.timezone.utc), 'time_taken': 361.0, 'time_delta': '0:06:01', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 691774025, 'number': 945, 'closed': None, 'created': datetime.datetime(2021, 7, 16, 22, 30, 54, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 489, 'deletions': 262, 'state': 'open'}, {'id': 683081469, 'number': 941, 'closed': None, 'created': datetime.datetime(2021, 7, 3, 21, 48, 24, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 40, 'deletions': 11, 'state': 'open'}, {'id': 660926303, 'number': 932, 'closed': datetime.datetime(2021, 9, 6, 13, 9, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 3, 13, 52, 56, tzinfo=datetime.timezone.utc), 'time_taken': 8205375.0, 'time_delta': '94 days, 23:16:15', 'additions': 1218, 'deletions': 25, 'state': 'closed'}, {'id': 604364845, 'number': 901, 'closed': datetime.datetime(2021, 7, 16, 22, 47, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 20, 11, tzinfo=datetime.timezone.utc), 'time_taken': 9340602.0, 'time_delta': '108 days, 2:36:42', 'additions': 16, 'deletions': 11, 'state': 'closed'}, {'id': 604197517, 'number': 900, 'closed': datetime.datetime(2021, 3, 30, 20, 2, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 18, 13, 43, tzinfo=datetime.timezone.utc), 'time_taken': 6505.0, 'time_delta': '1:48:25', 'additions': 0, 'deletions': 2, 'state': 'closed'}]"
