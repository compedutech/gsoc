pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
379282702,Using matrix exp for solving linear differential equations,"#### References to other Issues or PRs
Fixes #14312
Fixes #15407
Fixes #15474
Fixes #15574
Revives and closes #15449 


#### Brief description of what is fixed or changed
--> Add matrix exponential to compute the ```exp(A t)``` for matrix ```A```

#### Other comments


#### Release Notes
<!-- BEGIN RELEASE NOTES -->
* solvers
  * Use matrix exponential to solve homogeneous systems of first order ODEs with constant coefficients.
<!-- END RELEASE NOTES -->",True,18720,https://api.github.com/repos/sympy/sympy/pulls/18720,https://github.com/sympy/sympy/pull/18720,closed,1384,454,7,70,75,106,2,0,"[{'name': 'solvers.dsolve'}, {'name': 'solvers.dsolve.system'}]",2020-02-24 23:25:33+00:00,2020-04-23 12:30:27+00:00,5058294.0,"58 days, 13:04:54","[{'comment_id': 387601169, 'comment_body': ""I don't think you meant to change this"", 'comment_created': datetime.datetime(2020, 3, 4, 11, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 387601268, 'comment_body': 'Also this should not be indented', 'comment_created': datetime.datetime(2020, 3, 4, 11, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 387602303, 'comment_body': 'This blank line should not be deleted', 'comment_created': datetime.datetime(2020, 3, 4, 11, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 387605158, 'comment_body': 'Yes I will fix these changes', 'comment_created': datetime.datetime(2020, 3, 4, 11, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 387608670, 'comment_body': 'This function modifies `func_coef` which is passed as an input argument. It is generally confusing to modify the input arguments like this. I think it would be better to have a function for linearity checking that finds and returns the resulting coefficients.\r\n\r\nPerhaps the function could be something like:\r\n```\r\ndef get_linear_coeffs(eq, funcs):\r\n    # eq is an equation e.g. x(t).diff(t) + 2*x(t) + 3*y(t) + t\r\n    # funcs is a list of the dependent variables e.g. [x(t), y(t)]\r\n    ...\r\n    if not linear:\r\n        return None\r\n    else:\r\n        return coeffs # {x(t).diff(t): 1, x(t):2, y(t): 3, 1: t}\r\n```', 'comment_created': datetime.datetime(2020, 3, 4, 11, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 389244736, 'comment_body': ""It would be better to fill out the contents of match once at the end of the function e.g.:\r\n```\r\nmatch = {\r\n    'no_of_equation': len(eqs),\r\n    ...\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 3, 7, 10, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 389244946, 'comment_body': ""I don't understand what this is doing with globals but it should use globals.\r\n\r\nIf this is just to get names for the symbols to substitute for the derivatives then you can do it like:\r\n```\r\nrep = {func.diff(t, n): Dummy() for func in funcs for n in order[func]}\r\neqs_sub = [eq.subs(rep) for eq in eqs]\r\n```"", 'comment_created': datetime.datetime(2020, 3, 7, 10, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 389244998, 'comment_body': 'Maybe `t` should be a parameter to this function', 'comment_created': datetime.datetime(2020, 3, 7, 10, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 389245025, 'comment_body': 'Exceptions should be caught around the narrowest block of code possible. If this is intended to catch the error from `linear_eq_to_matrix` then only that call should be in the try block.', 'comment_created': datetime.datetime(2020, 3, 7, 10, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 389245105, 'comment_body': ""Since we're not using this function in the new code any more it would be better to put it back where it was and leave the old code unchanged."", 'comment_created': datetime.datetime(2020, 3, 7, 10, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 389245207, 'comment_body': 'I guess this is just\r\n```\r\nis_homogeneous = all(rhs.is_zero for rhs in b)\r\n```\r\nPerhaps instead\r\n```\r\nis_homogeneous = rhs.is_zero_matrix\r\n```', 'comment_created': datetime.datetime(2020, 3, 7, 10, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 389245274, 'comment_body': ""These assignments aren't needed. You can just return None in this branch"", 'comment_created': datetime.datetime(2020, 3, 7, 10, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 390090919, 'comment_body': 'Ok but I will keep the ```_get_funcs_order``` function outside as it can be helpful for getting the order of the differential terms in the equations.', 'comment_created': datetime.datetime(2020, 3, 10, 4, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 391155336, 'comment_body': ""It doesn't look like the function is being used."", 'comment_created': datetime.datetime(2020, 3, 11, 17, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 391159121, 'comment_body': 'Yes, I will update this in the next commit and later squash some small commits.', 'comment_created': datetime.datetime(2020, 3, 11, 17, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 403481660, 'comment_body': 'The solution here has changed. Was the original solution also correct? If checksysodesol *should* have worked then we should open an issue or an XFAIL test for that.', 'comment_created': datetime.datetime(2020, 4, 4, 15, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403481894, 'comment_body': 'Why is this equation changed?', 'comment_created': datetime.datetime(2020, 4, 4, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403482064, 'comment_body': 'Why is this example also changed?', 'comment_created': datetime.datetime(2020, 4, 4, 15, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403482171, 'comment_body': 'Does `dsolve` return the changed sol8 here?', 'comment_created': datetime.datetime(2020, 4, 4, 15, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403482502, 'comment_body': 'Maybe it would be good to collect on `exp(3*t)`:\r\n```\r\nIn [7]: Eq(x(t), C1*exp(3*t) + C2*(t*exp(3*t) + exp(3*t))).rhs                                                                    \r\nOut[7]: \r\n    3⋅t      ⎛   3⋅t    3⋅t⎞\r\nC₁⋅ℯ    + C₂⋅⎝t⋅ℯ    + ℯ   ⎠\r\n\r\nIn [8]: Eq(x(t), C1*exp(3*t) + C2*(t*exp(3*t) + exp(3*t))).rhs.collect(exp(3*t))                                                  \r\nOut[8]: \r\n                   3⋅t\r\n(C₁ + C₂⋅(t + 1))⋅ℯ  \r\n```', 'comment_created': datetime.datetime(2020, 4, 4, 15, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403482682, 'comment_body': 'Does `dsolve` return the changed solution here?', 'comment_created': datetime.datetime(2020, 4, 4, 15, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403485951, 'comment_body': 'Well this solution is correct as well and this solution passed the checksysodesol test. But the main reason why so many solutions like this have to be changed is because of the minor things like constant number and that solution will differ by factor, for example one method may give a solution:\r\n```\r\nC1 * t**2 + C2 * t / 2\r\n```\r\nAnd one method may give this solution:\r\n```\r\n2 * C1 * t**2 + C2 * t\r\n```\r\nBoth the solution are effectively same with just a difference of arbitrary constants. So these kind of conflicts were quite common. Hence I verified if the new solution passed checksysodesol and according to my knowledge, all of them did.\r\n```', 'comment_created': datetime.datetime(2020, 4, 4, 16, 2, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 403486233, 'comment_body': 'Should I remove tests like these? I was not sure before but these equations were modified because the ```classify_sysode``` function gave different results and these kind of tests were supposed to be transferred to ```test_systems```. I changed them because they were no longer needed in ```test_classify_sysode``` but had to be transferred and I wanted to make sure the number of test cases in ```test_ode``` should not be reduced. Is this approach incorrect?', 'comment_created': datetime.datetime(2020, 4, 4, 16, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 403486306, 'comment_body': 'Yes it does. I will uncomment that line.', 'comment_created': datetime.datetime(2020, 4, 4, 16, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 403486424, 'comment_body': 'Yes it does. As before, I will uncomment this line.', 'comment_created': datetime.datetime(2020, 4, 4, 16, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 403487177, 'comment_body': ""That's all fine. The question is that if the old solution is correct but fails checksysodesol then that's a bug in checksysodesol. It is fine to change this test but there should be a new XFAIL tests or an issue opened for the example that fails checksysodesol."", 'comment_created': datetime.datetime(2020, 4, 4, 16, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403487276, 'comment_body': 'There might be more examples of this', 'comment_created': datetime.datetime(2020, 4, 4, 16, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403487623, 'comment_body': ""I think it's better to leave the ODE as it is but update the expected result in the test"", 'comment_created': datetime.datetime(2020, 4, 4, 16, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403502819, 'comment_body': '@oscarbenjamin When I tried to solve the equation manually, it became clear that the solution provided by the original author of the test case is correct. There are namely two cases where the solution provided by our code will fail and we will have to look into it. Along with that I have found some limitations of ```checksysodesol```. I want to discuss with you about that and if required, it would be best open an issue for it. ', 'comment_created': datetime.datetime(2020, 4, 4, 18, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 403511348, 'comment_body': 'Best to open a new issue for problems with checksysodesol.\r\n\r\nI think that the Piecewise solutions should be removed for now because they are poorly implemented (see various issues with dsolve) and they are not done for any of the other solvers including solve, solveset, the other dsolve solvers etc. Instead only the generic case should be returned.\r\n\r\nThe different piecewise cases are correct but they are not something that can be applied consistently across dsolve. The number of possibilities scales exponentially as the size of the system increases. The support for this would have to built from the bottom up through solve, eigenvalues etc. Then we could build on that in a consistent way in dsolve. I have discussed ideas along these lines in e.g. #16861\r\n\r\nThe Piecewise here would only need to have 2 cases (the 3rd is redundant) to cover the two possibilities for the Jordan blocks of a 2x2:\r\n```\r\n[[lam1, 0], [lam2, 0]]\r\n[[lam, 1], [lam, 0]]\r\n```', 'comment_created': datetime.datetime(2020, 4, 4, 20, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403676528, 'comment_body': 'Should this collection be done only for this test case or its a post processing step that you are suggesting where we collect on terms', 'comment_created': datetime.datetime(2020, 4, 5, 9, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 403683042, 'comment_body': 'I was thinking that it should happen every time. We always know that there will be particular exponential factors in the results returned from this method and we know what they are so we can collect on them.', 'comment_created': datetime.datetime(2020, 4, 5, 10, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 403688494, 'comment_body': 'So first we would need to get those exponential factors known and then we can apply ```collect``` on all the solutions.', 'comment_created': datetime.datetime(2020, 4, 5, 11, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407196036, 'comment_body': '`dict() -> {}`', 'comment_created': datetime.datetime(2020, 4, 12, 13, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407196252, 'comment_body': 'Is this equivalent?\r\n```\r\nfunc_dict[eq_no] = [func_dict[eq_no], func]\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 13, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407196397, 'comment_body': 'This docstring should follow the style guide:\r\nhttps://docs.sympy.org/latest/documentation-style-guide.html\r\n\r\nAlso actually this function probably should be added to `ode.rst` in the system section.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407196576, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 4, 12, 13, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407196811, 'comment_body': 'I think it would be good to refactor this so that there is an ODE analogue of `linear_eq_to_matrix` that users can use to go from a system of ODEs to a matrix and vector. That can be used here', 'comment_created': datetime.datetime(2020, 4, 12, 13, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407196958, 'comment_body': ""How about\r\n```\r\nif match.get('is_constant', False) and match.get('is_homogeneous', False):\r\n```"", 'comment_created': datetime.datetime(2020, 4, 12, 13, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407197143, 'comment_body': 'This seems unnecessary. Just use the function directly wherever this is used.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407197424, 'comment_body': 'There should probably be a separate function for checking if the matrix is constant.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407197463, 'comment_body': 'Yes it is. This piece of code was taken from ```classify_sysode```. I will update this in ```systems.py``` as well as in ```ode.py```.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407197500, 'comment_body': ""This can be simplified: use break to exit the loop. Then it isn't necessary to check `if is_constant == True`.\r\n\r\nI would probably just do this using `all/any`."", 'comment_created': datetime.datetime(2020, 4, 12, 13, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407197557, 'comment_body': 'Here `is_linear` is always True.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407197582, 'comment_body': 'Ok I will refactor this function in separate commit so that there is no confusion in future when seeing the changes.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407197629, 'comment_body': 'We should probably pass `A` and `b` here to save recomputing them later.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407197951, 'comment_body': 'The commented out examples like this can be removed.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407198043, 'comment_body': 'I think we can make this use `sin/cos` by checking for conjugates instead of `im(e).is_nonzero`.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407198109, 'comment_body': 'Does `checksysodesol` not work here?', 'comment_created': datetime.datetime(2020, 4, 12, 13, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407198231, 'comment_body': 'Yes this is better. Thanks for the suggestion. I will update this line in the next commit.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407198263, 'comment_body': 'Probably this whole function can be simplified.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407198831, 'comment_body': '@oscarbenjamin ```all/any``` seems like a cleaner option. I would go for that as well.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407199057, 'comment_body': ""@oscarbenjamin That is true but in future when this function is updated, it may not always be ```True```. I thought of that and didn't remove this currently unnecessary condition. But I will update it for now and add a comment describing that this may have to be updated."", 'comment_created': datetime.datetime(2020, 4, 12, 13, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407199307, 'comment_body': 'I think it does. I missed this out. I will update this line.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407199424, 'comment_body': 'Ok I will update the function and see if that works.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407200557, 'comment_body': '@oscarbenjamin Yes, the computation of ```func_dict``` here is meaningless and I will remove it.', 'comment_created': datetime.datetime(2020, 4, 12, 13, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407200792, 'comment_body': ""Also, I don't know if the ```if``` condition mentioned in this function ```if not order.get(func, False):``` is required?"", 'comment_created': datetime.datetime(2020, 4, 12, 13, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407202057, 'comment_body': ""@oscarbenjamin Where would we need ```A``` and ```b``` exactly after determining whether the system is constant and homogeneous? I am saying this because we compute ```A``` and ```b``` considering the fact that ```AX = b``` is a matrix equation such that the vector ```X``` has all the dependent variables in every order that it is present in the system of ODEs. But we want something like ```X' = AX + b``` where ```X``` is a vector of dependent variables and ```X'``` is the vector of dependent variables in its first order."", 'comment_created': datetime.datetime(2020, 4, 12, 13, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407221067, 'comment_body': 'Okay, fair enough. I guess this can be simplified later when the other solvers are added.', 'comment_created': datetime.datetime(2020, 4, 12, 16, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407221709, 'comment_body': 'Can we just replace the whole function with this:\r\n```\r\nreturn {func: max(ode_order(eq, func) for eq in eqs) for func in funcs}\r\n```', 'comment_created': datetime.datetime(2020, 4, 12, 16, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407222470, 'comment_body': ""It's probably something to handle in a later PR but I would expect that the canonical form of say a system of linear 1st order ODEs would be:\r\n```\r\nA X' + B X = f\r\n```\r\nFor 2nd order\r\n```\r\nA X'' + B X' + C X = f\r\n```\r\nWe could make a function that returns e.g. `((A, B), f)` or `((A, B, C), f)`. Mixed order could just use the max order.\r\n\r\nFor use here in solving we would probably want to solve for the highest derivative of each function first meaning that the matrices A above would just be the identity matrix. For mixed order we would want to recast into a common order (e.g. 1st) before extracting the matrices."", 'comment_created': datetime.datetime(2020, 4, 12, 16, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407223134, 'comment_body': 'I guess that the XXX comment no longer applies', 'comment_created': datetime.datetime(2020, 4, 12, 16, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407223445, 'comment_body': 'Examples like this that are solved by the neq solver should probably be moved to `test_system`. It would be good to add a comment noting that this used to give a Piecewise but now does not. Perhaps this example can go with the regression test for the issue about Piecewise.', 'comment_created': datetime.datetime(2020, 4, 12, 16, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407224092, 'comment_body': 'I guess this is still returning an incorrect result. Rather than showing that they are the same with simplify it would be better just to leave the old result in comments and then test the new one and keep the comment about checksysodesol.', 'comment_created': datetime.datetime(2020, 4, 12, 16, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407225007, 'comment_body': 'Is this comment still true?', 'comment_created': datetime.datetime(2020, 4, 12, 16, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407225147, 'comment_body': 'Are these examples now duplicated in `test_systems`?', 'comment_created': datetime.datetime(2020, 4, 12, 17, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407363228, 'comment_body': ""@oscarbenjamin Ok, then wouldn't we need to update the ```match``` dictionary to have keys like: ```A```, ```b```, ```rep``` since the rep has all the data about the functions in their order and the Dummy name it has been assigned?"", 'comment_created': datetime.datetime(2020, 4, 13, 7, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407366308, 'comment_body': 'Some of them are duplicated I think. What should I do, remove those ones from ```test_ode.py```?', 'comment_created': datetime.datetime(2020, 4, 13, 7, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407377108, 'comment_body': '@oscarbenjamin Yup we can do that. I will update the function to do the same.', 'comment_created': datetime.datetime(2020, 4, 13, 8, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 407416550, 'comment_body': 'I guess so. Ultimately I think we should do away with this idea that we match first and then solve after. We are in the process of refactoring dsolve for single ODEs so that it uses classes for each solver that can store whatever state they need. Once we are done replacing all of the solvers we can rearrange the logic of `dsolve_system`.', 'comment_created': datetime.datetime(2020, 4, 13, 10, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 407465257, 'comment_body': 'Yes. Eventually all of the examples should be removed from `test_ode.py`.', 'comment_created': datetime.datetime(2020, 4, 13, 12, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 408699414, 'comment_body': 'If this is catching exceptions from `linear_ode_to_matrix` then the other lines should not be in the try block.\r\n\r\nWhy is it catching `ValueError` and `TypeError`? Maybe `linear_ode_to_matrix` should be made more consistent. I think that `linear_ode_to_matrix` should say which errors it raises in its docstring. ', 'comment_created': datetime.datetime(2020, 4, 15, 9, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 409298250, 'comment_body': ""@oscarbenjamin From what I can gather, it catches ```TypeError``` when we have non-linear ODEs, that is, since we are doing the computation for canonical euqation beforehand so that we would have to use the ```linear_ode_to_matrix``` function only once, sometimes it happens that the ```solve``` function doesn't give a ```dict``` type solution but a ```list of dicts``` type solution when there are multiple solutions for non-linear ODE terms.\r\n\r\n```\r\n        canon_eqs = solve(eqs, *[func.diff(t) for func in funcs])\r\n        canon_eqs = [func.diff(t) - canon_eqs[func.diff(t)] for func in funcs]\r\n        As, b = linear_ode_to_matrix(canon_eqs, funcs, t, system_order)\r\n```\r\n\r\nSo the ```TypeError``` happens in the line ```canon_eqs = [func.diff(t) - canon_eqs[func.diff(t)] for func in funcs]``` where it may happen that ```canon_eqs``` is a ```list``` and not a ```dict```. We can do one thing to avoid adding a ```TypeError``` condition in the ```except``` conditions, is that we can check the ```canon_eqs``` variable's value from ```solve``` is actually a dictionary or not, if it isn't, then we can either ```return None``` or raise a ```ValueError``` exception, but I don't know if it is wise to raise a ```ValueError``` in the ```try``` block"", 'comment_created': datetime.datetime(2020, 4, 16, 5, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 409425778, 'comment_body': ""Exactly: catching TypeError like that hides bugs. In library code `solve` should be called with `dict=True` to make sure that the return type is consistent.\r\n\r\nI don't like catching either ValueError or TypeError in general. We should have more specific exception classes (like `ODEOrderError`)."", 'comment_created': datetime.datetime(2020, 4, 16, 9, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 409511510, 'comment_body': 'We can raise a different type of error in ```linear_ode_to_matrix``` when we try to use the function ```linear_eq_to_matrix```. And then in the match function, we can catch that specific error and return```None```. Will that be alright?', 'comment_created': datetime.datetime(2020, 4, 16, 12, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 409518213, 'comment_body': '@oscarbenjamin I tried using ```solve``` with ```dict=True``` kwarg but it gave the same result as before.', 'comment_created': datetime.datetime(2020, 4, 16, 12, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 409589171, 'comment_body': 'What result? With what input to solve/dsolve?', 'comment_created': datetime.datetime(2020, 4, 16, 14, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 410054452, 'comment_body': ""```\r\nIn [28]:     x, y, z, w = symbols('x, y, z, w', cls=Function) \r\n    ...:     t = Symbol('t') \r\n    ...:     x1 = diff(x(t), t) \r\n    ...:     y1 = diff(y(t), t) \r\n    ...:     z1 = diff(z(t), t) \r\n    ...:     w1 = diff(w(t), t) \r\n    ...:     x2 = diff(x(t), t, t) \r\n    ...:     funcs = [x(t), y(t)] \r\n    ...:     funcs_2 = funcs + [z(t), w(t)]                                                                                                                                                                 \r\n\r\nIn [29]: eqs_2 = (5 * (x1**2) + 12 * x(t) - 6 * (y(t)), (2 * y1 - 11 * t * x(t) + 3 * y(t) + t))                                                                                                                                                                                                                                                                                         \r\n\r\nIn [31]: solve(eqs_2, *[func.diff(t) for func in funcs], dict=True)                                                                                                                                         \r\nOut[31]: \r\n[{Derivative(x(t), t): -sqrt(-12*x(t)/5 + 6*y(t)/5),\r\n  Derivative(y(t), t): 11*t*x(t)/2 - t/2 - 3*y(t)/2},\r\n {Derivative(x(t), t): sqrt(-12*x(t)/5 + 6*y(t)/5),\r\n  Derivative(y(t), t): 11*t*x(t)/2 - t/2 - 3*y(t)/2}]\r\n```"", 'comment_created': datetime.datetime(2020, 4, 17, 7, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 410153581, 'comment_body': 'That is the expected result of using `dict=True`: you should always get a list of dicts.', 'comment_created': datetime.datetime(2020, 4, 17, 11, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 410173079, 'comment_body': '@oscarbenjamin So, that is the reason of the ```TypeError```. I think it will be best to raise a new type of error like ```ODENonLinearError``` or something along those lines and raise this error whenever we encounter a non-linear ODE. We can either do that or we can just return the ```None```.', 'comment_created': datetime.datetime(2020, 4, 17, 11, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 410179271, 'comment_body': 'I agree. I think that `linear_ode_to_matrix` could raise `ODENonlinearError`. This function can catch that exception and return None.', 'comment_created': datetime.datetime(2020, 4, 17, 12, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 410180385, 'comment_body': 'Actually `linear_eq_to_matrix` should also be changed to raise a more specific exception like `NonlinearError`. Then both `linear_ode_to_matrix` and `linear_eq_to_matrix` can raise the same exception when the inputs are nonlinear.\r\n\r\nWe should document this in the docstrings for both functions using a ""Raises"" section.', 'comment_created': datetime.datetime(2020, 4, 17, 12, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 410648283, 'comment_body': '@oscarbenjamin So what we can do is: \r\n\r\n1. We can create a new function ```canon_equations``` which can also raise ```ODENonlinearError```.\r\n2. We add and raise ```NonLinearError``` in ```linear_eq_to_matrix```. \r\n3. We can catch ```NonLinearError``` in ```linear_ode_to_matrix``` and raise ```ODENonlinearError```.\r\n4. We can catch ```ODENonlinearError``` and ```ODEOrderError``` in the match function and return ```None```.\r\n\r\nDoes this sound good or should the above approach be edited?', 'comment_created': datetime.datetime(2020, 4, 18, 5, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 410683517, 'comment_body': ""I'm not sure I understand what `canon_equations` is but the other ideas all sound good.\r\n\r\nWe should also document the exceptions that are raised by `linear_eq_to_matrix` and `linear_ode_to_matrix` in the docstrings. Perhaps there could be a raises section:\r\n```\r\nRaises\r\n=====\r\n\r\nNonlinearError:\r\n    if the system is not linear.\r\n```\r\nlike from https://numpydoc.readthedocs.io/en/latest/format.html\r\n\r\nAlso there should be an example doctest of what happens if the ODEs are nonlinear."", 'comment_created': datetime.datetime(2020, 4, 18, 11, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 410821028, 'comment_body': ""@oscarbenjamin I have started this work of adding errors. If we add these many error types, don't we have to add this in a special segment of the documentation listing all the error types?"", 'comment_created': datetime.datetime(2020, 4, 19, 5, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 410822769, 'comment_body': ""> I'm not sure I understand what `canon_equations` is but the other ideas all sound good.\r\n\r\n```canon_equations``` will be a function that will bring a system of linear ODEs into canonical form. So, given a system as ```A1 X' + A2 X = b1```, it will bring the system into a form: \r\n```\r\nX' = A X + b\r\n```\r\nThis will be useful for us when we implement weakly and strongly connected components logic.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 4, 19, 5, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 410863945, 'comment_body': ""For what we are doing here I think it would be better to return the multiple solutions so that they can be solved. It's possible that the ODEs are nonlinear but that solving leads to multiple linear systems e.g.:\r\n```julia\r\nIn [48]: x, y = symbols('x, y', cls=Function)                                                                                     \r\n\r\nIn [49]: t = Symbol('t')                                                                                                          \r\n\r\nIn [50]: sys = [Eq(x(t).diff(t)**2, y(t)**2), Eq(y(t).diff(t)**2, x(t)**2)]                                                       \r\n\r\nIn [51]: solve(sys, [x(t).diff(t), y(t).diff(t)], dict=True)                                                                      \r\nOut[51]: \r\n⎡⎧d                d              ⎫  ⎧d                d             ⎫  ⎧d               d              ⎫  ⎧d               d   \r\n⎢⎨──(x(t)): -y(t), ──(y(t)): -x(t)⎬, ⎨──(x(t)): -y(t), ──(y(t)): x(t)⎬, ⎨──(x(t)): y(t), ──(y(t)): -x(t)⎬, ⎨──(x(t)): y(t), ──(y\r\n⎣⎩dt               dt             ⎭  ⎩dt               dt            ⎭  ⎩dt              dt             ⎭  ⎩dt              dt  \r\n\r\n          ⎫⎤\r\n(t)): x(t)⎬⎥\r\n          ⎭⎦\r\n```\r\nFor our purposes here this function seems unnecessary as it is basically just a call to `solve`. I think a function *like* this can be of more general use because you would need to put the ODEs into this form in order to solve them numerically with lambdify and e.g. scipy.odeint  but more thought is needed to make that work fully. I suggest to mark this function as private/internal by calling it `_canonical_equations` for now. Then the signature could be changed later if it seems useful."", 'comment_created': datetime.datetime(2020, 4, 19, 9, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 410958947, 'comment_body': 'I think that the error should be `NonlinearError` (i.e. with a lower case `l` for linear) because nonlinear is a single word. Also ""are not linear"" or ""are nonlinear"".', 'comment_created': datetime.datetime(2020, 4, 19, 18, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 411105150, 'comment_body': '@oscarbenjamin Ok, so I would mark this function as private and we can work to make this function work and handle nonlinear systems in future.', 'comment_created': datetime.datetime(2020, 4, 20, 5, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 411329497, 'comment_body': ""Can you add a note here linking back to the related issue. We don't really want it to be `exp(t)**Rational(3, 4)`. We should probably find a way to convert that."", 'comment_created': datetime.datetime(2020, 4, 20, 12, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412214879, 'comment_body': '@oscarbenjamin Sure thing, I will add something like, ```NOTE: To be Simplified```', 'comment_created': datetime.datetime(2020, 4, 21, 14, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 412552472, 'comment_body': 'This sentence is incomplete', 'comment_created': datetime.datetime(2020, 4, 21, 23, 8, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412554769, 'comment_body': 'Is `fc` not always a matrix here?', 'comment_created': datetime.datetime(2020, 4, 21, 23, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412556121, 'comment_body': 'We should add a workaround for the collect problem here and a link to the issue (add an explanation and a url to the github issue in a comment). We can do something like:\r\n```julia\r\nIn [3]: s = 2*exp(3*t/4) + 3*t*exp(3*t/4)                                                                                         \r\n\r\nIn [4]: s                                                                                                                         \r\nOut[4]: \r\n     3⋅t      3⋅t\r\n     ───      ───\r\n      4        4 \r\n3⋅t⋅ℯ    + 2⋅ℯ   \r\n\r\nIn [5]: exps = s.atoms(exp)                                                                                                       \r\n\r\nIn [6]: rep = {collect(e, [e]): e for e in exps}                                                                                  \r\n\r\nIn [7]: collect(s, exps)                                                                                                          \r\nOut[7]: \r\n              3/4\r\n          ⎛ t⎞   \r\n(3⋅t + 2)⋅⎝ℯ ⎠   \r\n\r\nIn [8]: collect(s, exps).subs(rep)                                                                                                \r\nOut[8]: \r\n           3⋅t\r\n           ───\r\n            4 \r\n(3⋅t + 2)⋅ℯ \r\n```\r\nThis problem should not be ignored because it can lead to wrong results.', 'comment_created': datetime.datetime(2020, 4, 21, 23, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412559921, 'comment_body': 'Why is this solution commented out?', 'comment_created': datetime.datetime(2020, 4, 21, 23, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412560042, 'comment_body': 'Is the simplify needed because the solution has changed?', 'comment_created': datetime.datetime(2020, 4, 21, 23, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412560654, 'comment_body': 'The previous tests here used initial conditions. Why are they changed?', 'comment_created': datetime.datetime(2020, 4, 21, 23, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412563387, 'comment_body': 'This comment is not true any more', 'comment_created': datetime.datetime(2020, 4, 21, 23, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412564658, 'comment_body': 'When I say link to the issue I mean add a comment with a URL pointing at the issue like:\r\n```\r\n# There is a problem with collect splitting rationals from the exponent:\r\n# https://github.com/sympy/sympy/issues/19149\r\n```\r\nThe idea is that someone looking at the code would be able to find out more information. These comments are written for others to read.', 'comment_created': datetime.datetime(2020, 4, 21, 23, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412759270, 'comment_body': '@oscarbenjamin No, there is some other function which is using this method for now. I thought we can work on removing this case later.', 'comment_created': datetime.datetime(2020, 4, 22, 7, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 412769156, 'comment_body': '@oscarbenjamin Actually this solution is incorrect when i checked with ```checksysodesol```, so we still need it. Along with that, I commented out that solution and didnt remove it for future reference as it is one of the test cases that are needed to be fixed.', 'comment_created': datetime.datetime(2020, 4, 22, 8, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 412772945, 'comment_body': '@oscarbenjamin I think there was misunderstanding with this test case that I encountered, I will revoke this right away.', 'comment_created': datetime.datetime(2020, 4, 22, 8, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 412786268, 'comment_body': '@oscarbenjamin Ok, I will get this done.', 'comment_created': datetime.datetime(2020, 4, 22, 8, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 412965808, 'comment_body': 'This ODE is an example where the coefficient matrix commutes with its integral so it should be possible to get the correct answer later.', 'comment_created': datetime.datetime(2020, 4, 22, 13, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 412967411, 'comment_body': 'Looks like this might be fixed soon actually (#19165)', 'comment_created': datetime.datetime(2020, 4, 22, 13, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 413770879, 'comment_body': ""This is fine for now but in future I don't think there is any need to renumber the examples like this."", 'comment_created': datetime.datetime(2020, 4, 23, 12, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': 'eaa6d6e18a6f723be298fbaea747a487702400be', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73768cbaa619167765e6f6b3cc6b0e3a30da8ccc', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f4013e0ce69041cda62350af1733f2b53e49447', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a78ceb5934e9fade16d5dcc31d84c02e32870694', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf00e6a1455f698aec02d87e79b18f7660faad62', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dab9687e0da3dfd8e2b8198d302c8ae9ec36661', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6bfd63724b2be74dbe47e6e475b6982e2418e51', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '057d2719a97deaf810ef9c2629a788792c93cdd0', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bab0fc5cfe8b8cc700986a515ad64ba1dd8d758', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ace8c58b227bf145853ade43373d4f578d096d6a', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfbeb3553fbb51cefe2ede044fc49a895790958c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1a29a65ac5c7df6df11d0822ae12cc6cd0143bd', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e20155ad55008dfd764eb0a17343e5972c3ce105', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3af7edb92e32544f77a51ff2ccd76624b5bfda7a', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '119cd33114894864ad1d2581e83b6c66a49884a7', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c910f4c985f381c54b30cf6555d62212db02b7', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f6ceb0ea8c871611cd979fd01261453438198ae', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3134d73d1ccf659d19a1b101885e5903f5fc3c2d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f3dc35482ab4f393c732c831f3d95e5eb97dde1', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0a88c4497bceb1f46598537c194ea4839a4b4b2', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0abcefe39d00f3ff52e7649747934772f4e5caf3', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdb339cfc5f88446fdd1911b7b3d5578f70d5665', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0083a032132117533add161d1e34b8d4d21f77ca', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '394d886694dbc60da1647eb00b02032ee89e6cce', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7b434e2fddb33ed38675899fc1c762a2788acbd', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1366d6c4145833ef393eb9ca09172411caeeb156', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eefaaa62e61d1902ac9316e11de6fc31bcdc1aa4', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e565ca51b8ce42121507e800a4ccb5256b5a677', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05273cdae336eec192ad6de19eab9e2e163d9ecc', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a8ae4d7f467578945a7c1d45b623fc0f8c17b5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49831c84cf72545f2fc417921641f3e828104832', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4d289d6a0d9961760a73b767d70f985b0e88976', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4502923d9182bfde68a8638d26582cb86fbb45e5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a917efdbe1554adf7d8a3cfca0ba0d67067a60d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0b2fe2a4625e5e2ff188e69744f292406371608', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b228f72075967a3b8435d999037422aae335ebf', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7855898b77245877550253a5eb6f4f9e250db533', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423ec5d750b08cca2d148a827834007844da65c1', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75548cb1f010615f923756f32bd40731dd8fab31', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2ef4365c6181847a1b5841af02357c1813aac6f', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '685f1b1041bbf16b6d89832dc735de37e1b3faf1', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f54c2420219e542283fbb4534e57d5b99445d434', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2da30365b22a0429f12285d6a1d99887424f8469', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8fa6997d7d1a6a7b35ff6e5dde7b472acdd4615', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60e516b1b0204c59768cb90487eeb879e37c7590', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e65fad7c4bffb391416bb533774c7fdfaac0ad4', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c07c9fc3a41549115eb4cfa28e1f711c0dafd62d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54c2c6cc1589562fbee56bd481fbf9a762705296', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df57378d27266a6245a5b7605815effbeab9932f', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c2f0d06ce148e4a84411d124817a428c568ce0c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f23520caacd2bbabb01eb6e158a0aedf9ddf44fa', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd6ae949f98e2ff595b836127292d4fd4077c4d4', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '823f2503bc26ada0ebdd758a7ed178821f37e7a0', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcf51e299f818b493093e111167e63e5f8c8a79b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6266f81879337d5f5ed2e9f44eba5b8014178003', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c83f7536e772ac51d02dad4e4218bc46b0fd07f0', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '398446124289f9aea74fbd2b510e24cd388331ec', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '238f4a13524a20014e64f484eebc0be42885622b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5653522aabd2744d3bc756061a3984707ca382d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ab27168e3eb2aca085bb6bb87ee6133056efc16', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d454cc76ebe75cac0ead2a48323222978e5beed', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddcae35bf7f686b6a13236a403ab121cc05462d9', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f655cc2f2aecc8bd1124ef9eab7b9ca0b034cb1d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25dd145b49fdc3621147c5191e83dbbbbad18139', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b0e5d605d09a3aff9898de7b2ab3810c86ef5b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c420da4dbac603b783d4a58f1e40db36498fd8ba', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da3e21ca93e3490ab3abe203d8b48a83f1587559', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a506280f8a29d67ffc7148d3df691071425a71b7', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21fc552e3ac4d86a0f53f9cf40db03718320acaa', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8179eb0b8b2340c7a5bcd1ea4ecd5d67a6b6ffdc', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
408500934,Added the non-constant coefficient homogenous solver,"#### References to other Issues or PRs


#### Brief description of what is fixed or changed
Added n equations linear first order non-constant coefficient homogeneous solver

#### Other comments
This solver solves the systems of ODEs of a particular form wherein the coefficient matrix of the system of ODEs has a commutative anti-derivative

#### Release Notes

<!-- BEGIN RELEASE NOTES -->
* solvers
  * Addition of a solver that handles a subclass of linear first order non-constant coefficient homogeneous systems of ODEs with any number of equations.
<!-- END RELEASE NOTES -->",True,19185,https://api.github.com/repos/sympy/sympy/pulls/19185,https://github.com/sympy/sympy/pull/19185,closed,330,530,5,27,42,15,2,0,"[{'name': 'solvers.dsolve'}, {'name': 'solvers.dsolve.system'}]",2020-04-24 11:41:34+00:00,2020-05-14 23:06:43+00:00,1769109.0,"20 days, 11:25:09","[{'comment_id': 422010404, 'comment_body': ""@oscarbenjamin I think this is a faulty test case. This test case doesn't have a commutative antiderivative and doesn't even have the form described in Linear, 2 equations, Order 1, Type 4. Should I remove this test case altogether?"", 'comment_created': datetime.datetime(2020, 5, 8, 8, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 422039316, 'comment_body': ""There can be solutions to systems that don't have a commutative antiderivative so that is not a reason for removing a test case if it is currently solved by one of the solvers.\r\n\r\nHowever in this case it looks as if this example should not match any of the existing solvers and the solution given by type4 is incorrect.\r\n\r\nYes I think it's fine to remove this.\r\n\r\nIf we knew the correct answer for the system of ODEs then it would be good to add that as an XFAIL test instead though."", 'comment_created': datetime.datetime(2020, 5, 8, 9, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 422060226, 'comment_body': ""I can't find what the solution should be in this case. It's possible that there is no solution in ordinary functions. I think it's best to remove this example."", 'comment_created': datetime.datetime(2020, 5, 8, 10, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 422132566, 'comment_body': ""> There can be solutions to systems that don't have a commutative antiderivative so that is not a reason for removing a test case if it is currently solved by one of the solvers.\r\n\r\nOk, I will keep this in mind from now on when dealing with XFail tests.\r\n\r\n>  I think it's best to remove this example.\r\n\r\nSure thing, I will remove this example. \r\n"", 'comment_created': datetime.datetime(2020, 5, 8, 13, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 422459562, 'comment_body': '@oscarbenjamin As mentioned in this marker, some of the expressions are not being collected properly. Can we use ```expand``` function here as a workaround?', 'comment_created': datetime.datetime(2020, 5, 9, 6, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 422480796, 'comment_body': 'Can you give an example of what `sol_vector` is here?', 'comment_created': datetime.datetime(2020, 5, 9, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 422486617, 'comment_body': 'For ```dsolve(eqs)``` where ```eqs = [Eq(f(x).diff(x), x * f(x) + g(x)), Eq(g(x).diff(x), -f(x) + x * g(x))]```, \r\n\r\n```\r\nsol_vector before collect is Matrix([[C1*(exp(x**2/2 - I*x)/2 + exp(x**2/2 + I*x)/2)\r\n + C2*(I*exp(x**2/2 - I*x)/2 - I*exp(x**2/2 + I*x)/2)], \r\n[C1*(-I*exp(x**2/2 - I*x)/2 + I*exp(x**2/2 + I*x)/2) \r\n+ C2*(exp(x**2/2 - I*x)/2 + exp(x**2/2 + I*x)/2)]])\r\n\r\nsol_vector after collect is [C1*(exp(x**2/2 - I*x)/2 + exp(x**2/2 + I*x)/2)\r\n+ C2*(I*exp(x**2/2 - I*x)/2 - I*exp(x**2/2 + I*x)/2),\r\nC1*(-I*exp(x**2/2 - I*x)/2 + I*exp(x**2/2 + I*x)/2) + C2*(exp(x**2/2 - I*x)/2 + exp(x**2/2 + I*x)/2)]\r\n```', 'comment_created': datetime.datetime(2020, 5, 9, 11, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 422487836, 'comment_body': 'We could use `expand_mul` I guess. In this example ideally the solution would come out like this:\r\n```julia\r\nIn [31]: M=ImmutableMatrix([[C1*(exp(x**2/2 - I*x)/2 + exp(x**2/2 + I*x)/2) \r\n    ...:  + C2*(I*exp(x**2/2 - I*x)/2 - I*exp(x**2/2 + I*x)/2)],  \r\n    ...: [C1*(-I*exp(x**2/2 - I*x)/2 + I*exp(x**2/2 + I*x)/2)  \r\n    ...: + C2*(exp(x**2/2 - I*x)/2 + exp(x**2/2 + I*x)/2)]])                                                                                   \r\n\r\nIn [32]: (M / exp(x**2/2)).expand().rewrite(cos).expand() * exp(x**2/2)                                                                        \r\nOut[32]: \r\n⎡                          2 ⎤\r\n⎢                         x  ⎥\r\n⎢                         ── ⎥\r\n⎢                         2  ⎥\r\n⎢(C₁⋅cos(x) + C₂⋅sin(x))⋅ℯ   ⎥\r\n⎢                            ⎥\r\n⎢                           2⎥\r\n⎢                          x ⎥\r\n⎢                          ──⎥\r\n⎢                          2 ⎥\r\n⎣(-C₁⋅sin(x) + C₂⋅cos(x))⋅ℯ  ⎦\r\n```', 'comment_created': datetime.datetime(2020, 5, 9, 12, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 422488897, 'comment_body': ""Another possibility is that maybe we should make `x` real:\r\n```julia\r\nIn [115]: x = Symbol('x', real=True)                                                                                                           \r\n\r\nIn [116]: B = Matrix([[-x**2/2, -x], [x, -x**2/2]])                                                                                            \r\n\r\nIn [117]: B.exp()                                                                                                                              \r\nOut[117]: \r\n⎡   2              2        ⎤\r\n⎢ -x             -x         ⎥\r\n⎢ ────           ────       ⎥\r\n⎢  2              2         ⎥\r\n⎢ℯ    ⋅cos(x)  -ℯ    ⋅sin(x)⎥\r\n⎢                           ⎥\r\n⎢   2             2         ⎥\r\n⎢ -x            -x          ⎥\r\n⎢ ────          ────        ⎥\r\n⎢  2             2          ⎥\r\n⎣ℯ    ⋅sin(x)  ℯ    ⋅cos(x) ⎦\r\n```"", 'comment_created': datetime.datetime(2020, 5, 9, 12, 18, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 422640463, 'comment_body': ""> We could use expand_mul I guess. In this example ideally the solution would come out like this:\r\n\r\n@oscarbenjamin Yes, ```expand_mul``` would be better since that's what we require for collecting expressions that are not being collected due to the brackets. "", 'comment_created': datetime.datetime(2020, 5, 10, 12, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 422640562, 'comment_body': '> Another possibility is that maybe we should make x real\r\n\r\nI would add a test case regarding this.', 'comment_created': datetime.datetime(2020, 5, 10, 12, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 425310462, 'comment_body': 'Maybe this should just be `expand_mul`. What is this needed for?', 'comment_created': datetime.datetime(2020, 5, 14, 17, 28, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 425314296, 'comment_body': 'If `dsolve` here only takes 13 seconds then I think this test function should be split into two:\r\n\r\n1. A test for `dsolve` marked as `@slow`.\r\n2. A test for checkodesol that is marked as `@slow` but also ""too slow for Travis"".', 'comment_created': datetime.datetime(2020, 5, 14, 17, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 425396505, 'comment_body': ""Ok, I will update this, it's not needed anymore actually."", 'comment_created': datetime.datetime(2020, 5, 14, 20, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 425396743, 'comment_body': '@oscarbenjamin Sorry, I misunderstood what you suggested earlier. I would update it as you are suggesting now.', 'comment_created': datetime.datetime(2020, 5, 14, 20, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}]","[{'commit_sha': '663e66b017697a0f1b2cabfd086808ec5b995603', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a970d95779d28ef09344e90a41ded83e313577d7', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6af2dbc2d221c46573da4f5508db45453fbd6365', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5959dd387f2f00f0c5bca6bbaa2cb4292e78860', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45ce13471c1db13bd8af9537d11bffb72b87597e', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '708ff2259648ac2e7c9ada2222b4755d12405229', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6a0d9840cc19719ee4b5c57df23e47a47a238ea', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2df00a778a68a755059a188de8447babd00d02f7', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d352bc01b9788512688b1579f2ce09a6ffee4f3', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '343c5ff149b4d776913750e5bc196bb7fcdeb867', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89ccff346a0a2f2805716c92eff5f89e682a4767', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1c3d7f239f2ee7ed72b483bc09251928b054d92', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12ce777f39ad3eb022639b00c4629664cd979a1d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4776bccb67b2c8cc82c1360e705c55af9ec8b917', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '683c07dd90fbfd168f4783641b98581e38ce1fd0', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6913a2727649d46f29315f9bd9e61f3cd97ac4aa', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2661322aa45d5a705af10be36b5963718c4e42f', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '250f3237e7b98c845ed00d0af31929fd6c2bce9c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '461799b9df97f17cddbd564058db8efbe176980a', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc87b37a84d47b6b95e2cf96d1cb1d6818e0ef88', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5687e404d32f5571732d6f0dbf0daab36e137cfb', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89df39fa2daf7c9b9e3877542c8e3d0d7d0855b3', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '878878582fcc5b5ffc32ac3121f74f82ec95b3e2', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88715549a7dc54d654101a835d485c99cb628725', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cc02caedf61137c6d84d3eae3f9e89b3c6cfe8c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4725ce7e05177690dc43fc231d5859a3815e5805', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd258f231f600ef5f195576ac5214660409c424f4', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
419075848,[GSOC] Constant coefficient non-homogeneous system of ODEs solver,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
Fixes #9244
Fixes #8859
Fixes #8567
Fixes #19150


#### Brief description of what is fixed or changed
Added linear first-order constant-coefficient non-homogeneous system of ODEs solver.

#### Other comments

The SymPy's ode module will be able to solve a number of linear first-order constant coefficient non-homogenous systems of ODEs

For example:
```
>>> from sympy import *
>>> from sympy.abc import *
>>> f, g = symbols(""f g"", cls=Function)
>>> eqs = [Eq(f(t).diff(t), f(t) + 2*g(t) + t), Eq(g(t).diff(t), 7*g(t) + t**2)]
>>> dsolve(eqs)
[Eq(f(t), C1*exp(t) + C2*exp(7*t)/3 + 2*t**2/7 - 17*t/49 - 115/343), Eq(g(t), C2*exp(7*t) - t**2/7 - 2*t/49 - 2/343)]
```

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your ease notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* solvers
  * In `dsolve` there is no a general solver that can solve systems of constant coefficient non-homogeneous first order ODEs of any size in terms of integrals.
<!-- END RELEASE NOTES -->",True,19341,https://api.github.com/repos/sympy/sympy/pulls/19341,https://github.com/sympy/sympy/pull/19341,closed,450,369,5,43,68,39,4,0,"[{'name': 'solvers'}, {'name': 'GSoC'}, {'name': 'solvers.dsolve'}, {'name': 'solvers.dsolve.system'}]",2020-05-17 07:51:00+00:00,2020-06-18 23:10:48+00:00,2819988.0,"32 days, 15:19:48","[{'comment_id': 428308670, 'comment_body': ""Multiple XFAIL tests should not be grouped together in a single test because then we won't know when it passes."", 'comment_created': datetime.datetime(2020, 5, 20, 21, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 428958138, 'comment_body': ""How long does this test take to run? I'm trying it now and it takes a long time. Perhaps it's too slow for travis."", 'comment_created': datetime.datetime(2020, 5, 21, 22, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 428959158, 'comment_body': 'Is this XFAIL because the answer is incorrect or because `checksysodesol` fails?', 'comment_created': datetime.datetime(2020, 5, 21, 22, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 428960151, 'comment_body': 'This test should be simplified so the ODEs are specified here.', 'comment_created': datetime.datetime(2020, 5, 21, 23, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 428960797, 'comment_body': 'For example\r\n```\r\neqs = [-e1*q + m*Derivative(v1(t), t) - q*(-b2*v3(t) + b3*v2(t)),\r\n       -e2*q + m*Derivative(v2(t), t) - q*(b1*v3(t) - b3*v1(t)),\r\n       -e3*q + m*Derivative(v3(t), t) - q*(-b1*v2(t) + b2*v1(t))]\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 23, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 428961712, 'comment_body': ""I think it would be better to spell these examples out explicitly (like e.g. eq28). There are good ways to reduce repetition in the ODE tests like in `test_single.py`. I think it's important for the equations and solutions to spelled out explicitly and clearly though for someone reading the tests."", 'comment_created': datetime.datetime(2020, 5, 21, 23, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 429071864, 'comment_body': ""> Is this XFAIL because the answer is incorrect or because `checksysodesol` fails?\r\n\r\nI don't know that since the answer is way too big, I would have to check it manually. It would take a while to verify.\r\n\r\nBut, an important observation is that when the solution is very big from solve, `checksysodesol` usually gives a failure so there is a chance that there might be some problem with `checksysodesol`."", 'comment_created': datetime.datetime(2020, 5, 22, 6, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 429072226, 'comment_body': 'Ok, I would write them out as individual test cases.', 'comment_created': datetime.datetime(2020, 5, 22, 6, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 429077864, 'comment_body': ""> How long does this test take to run? I'm trying it now and it takes a long time. Perhaps it's too slow for travis.\r\n\r\nIt passed the travis tests though. I can still add too slow for travis."", 'comment_created': datetime.datetime(2020, 5, 22, 7, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 429118222, 'comment_body': ""I guess it's not too slow then"", 'comment_created': datetime.datetime(2020, 5, 22, 8, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 430270404, 'comment_body': 'This should be comparing the output of `dsolve` with something', 'comment_created': datetime.datetime(2020, 5, 26, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 430374714, 'comment_body': '@oscarbenjamin `sol` has the large solution stored that has been pasted in the code and `sol_` is the output of `dsolve` with all the substitutions, I think both are different and ensures the solution from the `dsolve` function is checked.', 'comment_created': datetime.datetime(2020, 5, 26, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 430542966, 'comment_body': 'Okay that makes sense', 'comment_created': datetime.datetime(2020, 5, 26, 16, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 436629760, 'comment_body': ""Can we split this test into two separate tests like:\r\n```\r\ndef _make_linear_neq_order1_type2():\r\n    ...\r\n    return eq, sol\r\n\r\ndef test_linear_neq_order1_type2_dsolve():\r\n    ...\r\n\r\n@slow\r\n@xfail\r\ndef test_linear_neq_order1_type2_checksysodesol_fail():\r\n    ...\r\n```\r\nIf you aren't sure that the solution is correct then there should be a comment explaining that."", 'comment_created': datetime.datetime(2020, 6, 8, 11, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 436630389, 'comment_body': 'Which part of this is slow or fails?\r\n\r\nWe should split this up. An XFAIL test should have exactly one thing that fails and should be written so that it will XPASS when that one thing is fixed.\r\n\r\nAlso if one thing is slow and another is not then we should split into two tests, one slow and one not.', 'comment_created': datetime.datetime(2020, 6, 8, 11, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 436630941, 'comment_body': 'Same comments here about slow/xfail. Which part is slow or fails? Is it dsolve or checksysodesol?\r\n\r\nIf we have many examples that fail checksysodesol then I think it would be good to open an issue with the examples.', 'comment_created': datetime.datetime(2020, 6, 8, 11, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 436639051, 'comment_body': '@oscarbenjamin Ok, I would split all the test cases of this structure.', 'comment_created': datetime.datetime(2020, 6, 8, 11, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 438069430, 'comment_body': ""I think that the `exp` atoms in `J` are not the same as in `sol_vector` because they were expanded e.g.:\r\n```julia\r\nIn [3]: e1 = exp(2+3*t)                                                                                                                        \r\n\r\nIn [4]: e2 = e1.expand()                                                                                                                       \r\n\r\nIn [5]: e1                                                                                                                                     \r\nOut[5]: \r\n 3⋅t + 2\r\nℯ       \r\n\r\nIn [6]: e2                                                                                                                                     \r\nOut[6]: \r\n 2  3⋅t\r\nℯ ⋅ℯ   \r\n\r\nIn [7]: e1.atoms(exp)                                                                                                                          \r\nOut[7]: \r\n⎧ 3⋅t + 2⎫\r\n⎨ℯ       ⎬\r\n⎩        ⎭\r\n\r\nIn [8]: e2.atoms(exp)                                                                                                                          \r\nOut[8]: \r\n⎧ 2   3⋅t⎫\r\n⎨ℯ , ℯ   ⎬\r\n⎩        ⎭\r\n```\r\nI think that's why the exp terms are not collected. Perhaps `powsimp` should be used here:\r\n```julia\r\nIn [9]: powsimp(e2)\r\nOut[9]: \r\n 3⋅t + 2\r\nℯ \r\n```\r\nPerhaps also `sol_vector.atoms(exp)` should be used."", 'comment_created': datetime.datetime(2020, 6, 10, 12, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 438135560, 'comment_body': 'So, the generators would be ```sol_vector.atoms(exp)```, but where do I use the ```powsimp```, with the generator elements?', 'comment_created': datetime.datetime(2020, 6, 10, 13, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 438274252, 'comment_body': 'You could do `sol_vector = sol_vector.applyfunc(powsimp)` right after creating it. Most likely the best place to do powsimp is right after the call to integrate but before multiplying with `J` and `P`.\r\n\r\nIs it the call to integrate that causes the exponentials to become expanded?', 'comment_created': datetime.datetime(2020, 6, 10, 16, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 438605987, 'comment_body': ""> Is it the call to integrate that causes the exponentials to become expanded?\r\n\r\nThis needs to be checked but it's likely that it is the case.\r\n\r\nAlso, I tried using `powsimp` function but this function causes the exponential to be expanded and before using this function, the exponentials are fine for one of the test cases."", 'comment_created': datetime.datetime(2020, 6, 11, 7, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 438606391, 'comment_body': 'Using the generators from the solutions did cause the solutions to be shorter than before.', 'comment_created': datetime.datetime(2020, 6, 11, 7, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 438651038, 'comment_body': 'When does `powsimp` expand the exponentials? Can you give an example?\r\n\r\nThe purpose of `powsimp` is to combine powers not expand them.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 438718341, 'comment_body': ""@oscarbenjamin The `powsimp` wasn't the reason for expanded exponentials, it was because of generators, but now they are working properly and `powsimp` does help combine the powers."", 'comment_created': datetime.datetime(2020, 6, 11, 11, 29, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 440960436, 'comment_body': 'Is this comment still correct?', 'comment_created': datetime.datetime(2020, 6, 16, 15, 52, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 440960860, 'comment_body': 'Can these comments be removed?', 'comment_created': datetime.datetime(2020, 6, 16, 15, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 440961799, 'comment_body': 'Rather than duplicating this code here and above I think that it would be better to make a function that returns the system and expected solution and then call that in each of the two test functions here.', 'comment_created': datetime.datetime(2020, 6, 16, 15, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 440962612, 'comment_body': 'This can be simplified using the script.', 'comment_created': datetime.datetime(2020, 6, 16, 15, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 441322391, 'comment_body': 'No, I will change it.', 'comment_created': datetime.datetime(2020, 6, 17, 6, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 441322921, 'comment_body': 'Yes, I will remove it in the next commit.', 'comment_created': datetime.datetime(2020, 6, 17, 7, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 441447371, 'comment_body': 'It would be better to define the expected solution here and return `system, funcs, sol` and let the caller call `dsolve`. The way this is set up `dsolve` gets called twice because of the two tests that call this function.', 'comment_created': datetime.datetime(2020, 6, 17, 10, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 441449480, 'comment_body': 'This long expression for `x_1` can be simplified further by running `printsol` on it.', 'comment_created': datetime.datetime(2020, 6, 17, 10, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 441451962, 'comment_body': ""This function shouldn't be called `_skip` if it's not being skipped."", 'comment_created': datetime.datetime(2020, 6, 17, 10, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 441675778, 'comment_body': ""Some of these lines are too long. They wouldn't need to be so long though if you didn't put all the spaces in:\r\n```\r\nx_4 = Integral(-i*r2*exp(t/(2*c2*r2) + t/(2*c2*r1) + t/(2*c1*r1) + t*sqrt(x_1)/(2*c1*c2*r1*r2))/sqrt(x_1), t)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 17, 16, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 441742519, 'comment_body': 'This example can be written as\r\n```python\r\n_x1 = c1**2*r1**2 + 2*c1**2*r1*r2 + c1**2*r2**2 - 2*c1*c2*r1*r2 + 2*c1*c2*r2**2 + c2**2*r2**2\r\n_x2 = Integral(i*r2*exp(-sqrt(_x1)*t/(2*c1*c2*r1*r2) + t/(2*c2*r2)\r\n                            + t/(2*c2*r1) + t/(2*c1*r1))/sqrt(_x1), t)\r\n_x3 = Integral(-i*r2*exp(sqrt(_x1)*t/(2*c1*c2*r1*r2) + t/(2*c2*r2)\r\n                            + t/(2*c2*r1) + t/(2*c1*r1))/sqrt(_x1), t)\r\n_x4 = exp(sqrt(_x1)*t/(2*c1*c2*r1*r2) - t/(2*c2*r2) - t/(2*c2*r1) - t/(2*c1*r1))\r\n_x5 = exp(-sqrt(_x1)*t/(2*c1*c2*r1*r2) - t/(2*c2*r2) - t/(2*c2*r1) - t/(2*c1*r1))\r\nsol = [\r\n    Eq(x1(t),\r\n        - 2*C1*_x5*c2*r2/(sqrt(_x1) + c1*r1 + c1*r2 - c2*r2)\r\n        - 2*C2*_x4*c2*r2/(-sqrt(_x1) + c1*r1 + c1*r2 - c2*r2)\r\n        - 2*_x2*_x4*c2*r2/(-sqrt(_x1) + c1*r1 + c1*r2 - c2*r2)\r\n        - 2*_x3*_x5*c2*r2/(sqrt(_x1) + c1*r1 + c1*r2 - c2*r2)),\r\n    Eq(x2(t), C1*_x5 + C2*_x4 + _x2*_x4 + _x3*_x5),\r\n]\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 18, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 441743565, 'comment_body': 'This example can be written as\r\n```python\r\nx1 = sqrt(b1**2 + b2**2 + b3**2)\r\nx2 = exp(q*t*sqrt(-b1**2 - b2**2 - b3**2)/m)\r\nx3 = 1/(b1**2*x1*x2 + b2**2*x1*x2)\r\nx4 = 1/(2*b1**2*m*x2 + 2*b2**2*m*x2 + 2*b3**2*m*x2)\r\nx5 = Integral(\r\n        b1*b3*e1*q/(b1**2*m + b2**2*m + b3**2*m)\r\n      + b2*b3*e2*q/(b1**2*m + b2**2*m + b3**2*m)\r\n      + b3**2*e3*q/(b1**2*m + b2**2*m + b3**2*m), t)\r\nx6 = 1/(2*b1**3*b3*m + 2*I*b1**2*b2*m*x1 + 2*b1*b2**2*b3*m\r\n      + 2*b1*b3**3*m + 2*I*b2**3*m*x1 + 2*I*b2*b3**2*m*x1)\r\nx7 = Integral(\r\n        b1**2*e3*q*x4 - b1*b3*e1*q*x4 + I*b1*e2*q*x1*x4\r\n      + b2**2*e3*q*x4 - b2*b3*e2*q*x4 - I*b2*e1*q*x1*x4, t)\r\nx8 = Integral(\r\n        b1**3*b2*e2*q*x2*x6 - b1**2*b2**2*e1*q*x2*x6 - b1**2*b3**2*e1*q*x2*x6\r\n      - I*b1**2*b3*e2*q*x1*x2*x6 + b1**2*e3*q*x2/(2*b1**2*m + 2*b2**2*m + 2*b3**2*m)\r\n      + b1*b2**3*e2*q*x2*x6 - b2**4*e1*q*x2*x6 - b2**2*b3**2*e1*q*x2*x6\r\n      - I*b2**2*b3*e2*q*x1*x2*x6 + b2**2*e3*q*x2/(2*b1**2*m + 2*b2**2*m + 2*b3**2*m), t)\r\nsol = [\r\n    Eq(v1(t),\r\n        C1*b1/b3\r\n      - I*C2*b1**2*b2*x3 - C2*b1*b3*x1*x3 - I*C2*b2**3*x3 - I*C2*b2*b3**2*x3\r\n      + I*C3*b1**2*b2*x2/(b1**2*x1 + b2**2*x1) - C3*b1*b3*x1*x2/(b1**2*x1 + b2**2*x1)\r\n      + I*C3*b2**3*x2/(b1**2*x1 + b2**2*x1) + I*C3*b2*b3**2*x2/(b1**2*x1 + b2**2*x1)\r\n      + I*b1**2*b2*x2*x7/(b1**2*x1 + b2**2*x1) - I*b1**2*b2*x3*x8\r\n      - b1*b3*x1*x2*x7/(b1**2*x1 + b2**2*x1) - b1*b3*x1*x3*x8 + b1*x5/b3\r\n      + I*b2**3*x2*x7/(b1**2*x1 + b2**2*x1) - I*b2**3*x3*x8\r\n      + I*b2*b3**2*x2*x7/(b1**2*x1 + b2**2*x1) - I*b2*b3**2*x3*x8),\r\n    Eq(v2(t),\r\n        C1*b2/b3\r\n      + C2*b1*sqrt(-b1**2 - b2**2 - b3**2)/(b1**2*x2 + b2**2*x2)\r\n      - C2*b2*b3/(b1**2*x2 + b2**2*x2) - I*C3*b1*x1*x2/(b1**2 + b2**2)\r\n      - C3*b2*b3*x2/(b1**2 + b2**2) - I*b1*x1*x2*x7/(b1**2 + b2**2)\r\n      + b1*x8*sqrt(-b1**2 - b2**2 - b3**2)/(b1**2*x2 + b2**2*x2)\r\n      - b2*b3*x2*x7/(b1**2 + b2**2) - b2*b3*x8/(b1**2*x2 + b2**2*x2) + b2*x5/b3),\r\n    Eq(v3(t), C1 + C3*x2 + x2*x7 + x5 + (C2 + x8)*exp(-q*t*sqrt(-b1**2 - b2**2 - b3**2)/m)),\r\n]\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 18, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 442030543, 'comment_body': 'Ok I will update this.', 'comment_created': datetime.datetime(2020, 6, 18, 7, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 442369552, 'comment_body': ""I don't understand why you've added all of these spaces. Is that something that your editor does automatically? It's easier to read with the spacing from str and careful line breaks:\r\n```python\r\nx7 = Integral(b1**2*e3*q*x4 - b1*b3*e1*q*x4 + I*b1*e2*q*x1*x4\r\n            + b2**2*e3*q*x4 - b2*b3*e2*q*x4 - I*b2*e1*q*x1*x4, t)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 18, 16, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 442392581, 'comment_body': ""Most probably it's the problem with my editor, I would get it fixed."", 'comment_created': datetime.datetime(2020, 6, 18, 17, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}]","[{'commit_sha': 'b1ebae5d8a8d85275acce8b2337ea03f76f3c1ea', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8f96735f380cf8c430bef4be116c00eab7693cc', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2aaf51faa55ddc486153ef8fc9a67a9d33c5d69', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b301a21013af6c5fc6ae3034067a6edc1434e6b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eeb5611edead0ba1297049a8ce6e28035642461', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48acac519db7f6c6195b2f152557a439dfb47ad3', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eb4be0eef1852cb28b22b1454535a5df1242f51', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c30e138d1dfcb8e943887c047351d59f9ced69cc', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1587055e73329e58d93e22f5f9de208c3f8a5aa', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c1c0068c725154e2329ca727f5d7edf02deb0f6', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adaff72bff26cf8df3e1d103811f898373d974b0', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5dcaa1e95246e45014554ea56d8b21003b8631b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a56c8bfa8324293b2b8c42efe218877e7762c72', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf20678c78342fe72c4d22726c56c66c14158fc', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c137da2f864ecdda14646f56dc4895d87c684ff', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ffbe64e4db8d9ba620832580a64adf21dc9ced', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6df222a06073c3b2c188c672efc2af72dcbe27c5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f93d88d1852f3f2a4d17d20c0d410256bbcc03a4', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b61bc8f250be091d823f5e581a491f942544d0', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2366cd1aa865dc7621fd1892ac957e05191ace7c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56de84d6f2412fffc3c657ce3ca267cded829b3f', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57a2b2ced9bcfb38aca5f91cbfd2a7e4fc90df24', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9863c28ba7dda3c231e8caf435ff3c69e6a710f9', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3e7888f7d20a39424dcd01c809115f507ce759d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2e95b68d3ec1e55b01cd5ef0611cb296f6be15c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45edfbe5fb0ac1cb822321e59478c92821dfb5a5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e101a84bbcb9e03efe3dccb5d835a904efb2c30', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '928e4f5a26e6ab7f5005d9ddbc303f5bccdcd96b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c15b11ec5623eb075fc2d3068e701dd58a5fc19', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33bbc0384c07efc7ce064fb25726cc22be8e134', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd070e2c433f2105da7389e5a3eb85409c6b9aa34', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4c7a08aea574217dd1089afd97619146137e31a', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bc62f59060685e9db7c214299ad90a46e5cdf22', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acd2e2102b3fbeb940db225151b930951331397b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe72a92cc667eb0c4db70606a0eb9a3cb502d30', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '371c3549bd49cf80327092a90a0968fcbe790c18', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dbaa00854324a6a9f31861e89a17180e8fcfd12', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c182a9901f5e808f1ff9f641520aeb9c26a7c9ce', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90044ac65c28368981a646471ceea9e923b8fdb2', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89357859f424b597852711ccc9700c01b68532d1', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1b49ffccea5c855a1470b4de88cba86cac27bcb', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fac6758434d4660843b5a551e45451594cd24ea6', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf482b21c077ae53560259fb763acb06bb51fbcb', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
436965075,[GSoC] Added the linear first order non-constant coefficient non-homogeneous solver,"#### References to other Issues or PRs
Fixes #16635
Fixes #14001 
Fixes #9204

#### Brief description of what is fixed or changed
Added linear first-order non-constant coefficient non-homogeneous solver that can handle a system with any number of equations provided the coefficient matrix is commutative with its antiderivative.

#### Other comments
The solver can handle many cases of systems of ODEs when its coefficient matrix satisfies the condition mentioned in the description. Below is an example of the case of system of ODEs handled by this solver:-
```
>>> f, g = symbols(""f, g"", cls=Function)
>>> x = symbols(""x"")
>>> eqs = [Eq(f(x).diff(x), (f(x) + g(x))*log(x) + x), Eq(g(x).diff(x), (f(x) + g(x))*log(x) + x)]
>>> dsolve(eqs)
⎡                 ⎛          ⌠                        ⎞                                       ⎛          ⌠                        ⎞                  ⎤
⎢       C₁   C₂   ⎜C₁   C₂   ⎮    -2⋅x⋅log(x) + 2⋅x   ⎟  2⋅x⋅log(x) - 2⋅x           C₁   C₂   ⎜C₁   C₂   ⎮    -2⋅x⋅log(x) + 2⋅x   ⎟  2⋅x⋅log(x) - 2⋅x⎥
⎢f(x) = ── - ── + ⎜── + ── + ⎮ x⋅ℯ                  dx⎟⋅ℯ                , g(x) = - ── + ── + ⎜── + ── + ⎮ x⋅ℯ                  dx⎟⋅ℯ                ⎥
⎣       2    2    ⎝2    2    ⌡                        ⎠                             2    2    ⎝2    2    ⌡                        ⎠                  ⎦

```


#### Release Notes
<!-- BEGIN RELEASE NOTES -->
* solvers
  * Added the new n equations linear first-order non-constant coefficient non-homogeneous solver where the coefficient matrix of the system of ODEs is commutative with its antiderivative. 
<!-- END RELEASE NOTES -->",True,19594,https://api.github.com/repos/sympy/sympy/pulls/19594,https://github.com/sympy/sympy/pull/19594,closed,479,122,4,13,19,5,2,0,"[{'name': 'GSoC'}, {'name': 'solvers.dsolve.system'}]",2020-06-19 08:25:46+00:00,2020-06-26 16:43:14+00:00,634648.0,"7 days, 8:17:28","[{'comment_id': 442799420, 'comment_body': 'Using `locals` like this is a bad idea. We should not do this and should also remove the other places where this happens', 'comment_created': datetime.datetime(2020, 6, 19, 12, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 443114198, 'comment_body': 'Other places, they are using `globals` instead of locals, do they have to be changed too?', 'comment_created': datetime.datetime(2020, 6, 20, 8, 46, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 445256141, 'comment_body': 'Did you intend to change these spaces or is that your editor doing that?', 'comment_created': datetime.datetime(2020, 6, 25, 1, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 445256393, 'comment_body': 'I prefer the new spacing but I just wanted to check that it is something you are doing intentionally because it seems many unrelated tests are changed in this PR.', 'comment_created': datetime.datetime(2020, 6, 25, 1, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 445319158, 'comment_body': '> Did you intend to change these spaces or is that your editor doing that?\r\n\r\nI changed it intentionally, as in the previous PR you mentioned how these unwanted spaces made the examples look bad. ', 'comment_created': datetime.datetime(2020, 6, 25, 5, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}]","[{'commit_sha': '013986f026412aeab70bbe3f4d4386a181413110', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006bdabfd274d4e6ab59f4459ade27276af59fdb', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2818c7bf77505c5aa13545b74865c6471cb6a587', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2dad24c5489749eccd7ec9a56ff584d24fada5c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73e9689a06bb5185d0f2b1888c8a82a4b983e3cf', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5bef1dfa142b6db33d67f454b673585d35a169a', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4809a8e3e81fdbfc056a25083b0bfd64265e3052', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9000fb6026ccac91617927966188638c9dbcfbaf', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7e8ae58a946a13ff114ddabb8c136d1649f3b30', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47fa03b7d39295ab0ccc9bf2177d26d72fb310f8', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9644a03c0a403a2ee0331a1ef5e04186313e52c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb56da6a4622b8f48e54a7a1f25950266f7b3467', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebc98ce64a0701280602aeece3f84070975cac83', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
440878277,[GSoC] API change for the newly added system of ODEs solvers,"#### References to other Issues or PRs
API change for the system of ODEs solvers introduced in:
PR #18720 - Type 1
PR #19341 - Type 2
PR #19185 - Type 3
PR #19594 - Type 4

#### Brief description of what is fixed or changed
The API for the 4 new linear first-order system of ODEs solvers was changed and these solvers were combined into one in this PR and thus, it can now be accessed directly by anyone without using the matching dictionary as was used previously.

#### Other comments
An end-user can directly call `linodesolve` function to get the solution if the user has the coefficient matrix and the non-homogeneous term(if any) available.

#### Release Notes

<!-- BEGIN RELEASE NOTES -->
* solvers
  * API for the _linear_neq_order1_type1-4 was changed to make it easier for anyone to access the solver
<!-- END RELEASE NOTES -->",True,19653,https://api.github.com/repos/sympy/sympy/pulls/19653,https://github.com/sympy/sympy/pull/19653,closed,754,230,5,23,25,5,2,0,"[{'name': 'GSoC'}, {'name': 'solvers.dsolve.system'}]",2020-06-27 07:51:49+00:00,2020-07-02 11:36:12+00:00,445463.0,"5 days, 3:44:23","[{'comment_id': 447591336, 'comment_body': 'It\'s better not to use inline if/else unless the expressions are very short. This should be \r\n```\r\nif type == ""type1"":\r\n   ...\r\nelif ...\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 30, 10, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 448929080, 'comment_body': ""This seems a bit messy. It's okay for now but needs to be sorted out later:\r\n\r\n1. We shouldn't add special cases in the dsolve function itself.\r\n\r\n2. Actually all of the systems code should be moved out from here into a separate `dsolve_system` function.\r\n\r\n3. Properly handling multiple solutions/equations in a consistent way meaning using lists everywhere. We shouldn't have `classify_sysode` sometimes return a list and sometimes not.\r\n\r\n4. I didn't necessarily mean that we should support these in dsolve right now but just that `canonical_odes` should be able to handle the nonlinear case.\r\n\r\n5. The fact that dsolve for single ODEs sometimes returns an Eq and sometimes returns a list of Eq is a mistake IMO. The same happens for systems in that a single solution is a list of Eq but with multiple solutions we return a list of list of Eq (also a mistake). We need to keep that for backwards compatibility but I think that we should make sure that all internal code always operates on lists of solutions. Extracting a single solution if there is only one should be done here in dsolve right before returning the solution to the user."", 'comment_created': datetime.datetime(2020, 7, 2, 11, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 448937170, 'comment_body': ""> Actually all of the systems code should be moved out from here into a separate dsolve_system function.\r\n\r\nThat's the plan for now, to get rid of the special case that I have added in this PR in `dsolve` code.\r\n\r\nOk so basically it would be better if we return a list of lists always even when there is one solution. That makes sense.\r\n\r\nShould I incorporate these changes in this PR itself?\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 2, 11, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 448943097, 'comment_body': '> Ok so basically it would be better if we return a list of lists always even when there is one solution. That makes sense.\r\n\r\nWe can\'t change dsolve to do this because of backwards compatibility. However we can make sure that internal code always does. If `dsolve` calls a new function `dsolve_system` then `dsolve_system` can always return a list of solutions even if there is only one.\r\n\r\nWhere the system is nonlinear but can be solved to a finite number of systems in explicit form by `canonical_odes` then I think `classify_sysode` should just say something like ""this is an algebraically solvable implicit system"". The handler for that case can recursively call `dsolve_system` with the individual explicit systems that can then be passed to `classify_sysode` to see if they are linear etc. That way `classify_sysode` always takes a single system and gives a single classification.', 'comment_created': datetime.datetime(2020, 7, 2, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 448961399, 'comment_body': 'Yes I agree with you, the `dsolve` code is very large to meddle even a small part of it\r\n I have tried some experimental changes in `dsolve `code but all led to failure of some part. And it does make sense to always output a list of lists internally to properly represent multiple solutions.\r\n\r\nPerhaps this work can be done in the next PR, where the major target would be to finally include `dsolve_system`. Firstly, I would try to cherry pick parts of the planned structure that I mentioned in my GSoC proposal and implement that structure keeping in mind what we have discussed in these 5 PRs related to the project.', 'comment_created': datetime.datetime(2020, 7, 2, 12, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}]","[{'commit_sha': '6194dcf981f616c43f44870245a022ba211255c1', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c507c275df2d00c45a9f2c73b668392f2d6513f5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c4a8d9bf87b68c0e8f0eb72049b432867d8553c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cff8f54b165cc3df0a4a450e292568f47ee71de', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f22bb025fb8c3ed2f54b6e5cff5e513f8a8bf0', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd060f7ee4cfb890378be07518c117afc30d6d643', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5436035e4991ec7824164a34b84bb77d1ec4f344', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b7b07584fd2d8d031de8170c3b751c84143090', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd15070c123d892ed321a0b897038445987521cdc', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c48942215e293493e2079eb8104cec6b4a20f6f8', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18157f8dafc516f139849a240d2cd5fe8d083dec', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cde29956bc7cf9ddb56a64e6b8bec080b1cc4b6b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b782b13115f2e2af3d0b91e0983c802afef6bd', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba2368bad6aab5fd5903baeebffeb07328116f47', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '436a4383b766f2a17452c0855ed093949c378960', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7eb02d32c9f464e01645ceb3c5ee3bbd4a79bac', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60ea2743f911f39490a8c8eebba94ecc2d5149b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59d2d9cbe5c4090ca1f64b9a328f218db651a620', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07e2c79767a9c29ff6819d06c69414613373b749', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6287c2fc266d49bf336568b497e33538e3ec52a', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4327510c7796bab36c0ce949a99fe45fffe7cb23', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c7e077a0ae378d02f976a896b3bcbb65c303fb', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e73ec892bea0728189ac7d62a99cae8f5fcb9e9d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
443885543,[GSoC] Added the dsolve_system in systems.py,"#### References to other Issues or PRs


#### Brief description of what is fixed or changed
Added `dsolve_system` that can solve system of ODEs passed. For now, only linear first-order systems of ODEs are handled by this function.

#### Other comments
This function can handle a lot of solutions together and many of the helper functions created provide a framework for adding other techniques and functionalities later.


#### Release Notes
<!-- BEGIN RELEASE NOTES -->
* solvers
  * Added `dsolve_system` that can solve a system of ODEs
<!-- END RELEASE NOTES -->",True,19695,https://api.github.com/repos/sympy/sympy/pulls/19695,https://github.com/sympy/sympy/pull/19695,closed,485,195,4,17,14,20,2,0,"[{'name': 'GSoC'}, {'name': 'solvers.dsolve.system'}]",2020-07-03 06:52:33+00:00,2020-07-09 14:41:16+00:00,546523.0,"6 days, 7:48:43","[{'comment_id': 449554360, 'comment_body': 'What is the major problem?', 'comment_created': datetime.datetime(2020, 7, 3, 12, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 449557207, 'comment_body': ""I think it's better to require that the user pass all arguments like `funcs` and `t`. A user who doesn't want to supply those can call `dsolve`."", 'comment_created': datetime.datetime(2020, 7, 3, 12, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 449558564, 'comment_body': ""This loop is quite complicated and I don't understand what it is doing. I think it's probably better to refactor this with one or more functions somehow."", 'comment_created': datetime.datetime(2020, 7, 3, 12, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 449558951, 'comment_body': 'There should probably be a function for solving a single weakly connected component.', 'comment_created': datetime.datetime(2020, 7, 3, 12, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 449739461, 'comment_body': 'Well, I wanted to add `dsolve_system` call in `dsolve` itself. But if I did that, then there is a high chance that a user will not pass the `funcs` which would make us depend on `classify_sysode`. Now, `classify_sysode` calls our matching function and returns its output. Since our `dsolve_system` is made so that even an end-user can call it, we are not passing the match dict. This would mean we would have to call our matching function twice. \r\n\r\nThe above was the problem. To solve that, I simply added this `funcs` extractor code. This removed the risk of calling the matching function twice.', 'comment_created': datetime.datetime(2020, 7, 4, 4, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 449739583, 'comment_body': 'As I said in the previous comment, if we do that, it would make calling `dsolve_system` from `dsolve` very inefficient. How can we avoid this issue?', 'comment_created': datetime.datetime(2020, 7, 4, 4, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 449739690, 'comment_body': '@oscarbenjamin Sure thing, I would add such a function with proper comments explaining the blocks of code, as this loop is complicated for me as well. This became complicated since in the last PR, we introduced the fact that our systems solver method can get multiple solutions for an implicit system. Incorporating this with the plan of weakly and strongly connected components made the design lot more complicated.', 'comment_created': datetime.datetime(2020, 7, 4, 4, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 450366282, 'comment_body': ""I don't understand what `const_idx` is doing. I would write this like\r\n```\r\nif match.get('is_implicit', False):\r\n    canon_eqs = match['canon_eqs']\r\nelse\r\n    canon_eqs = [eqs]\r\nfor canon_eq in canon_eqs:\r\n    if is_linear(canon_eq)...\r\n```\r\nOr something like that..."", 'comment_created': datetime.datetime(2020, 7, 6, 17, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 450368214, 'comment_body': 'The flow control in this function is very confusing. I think there is a cleaner way to write this without this variable.', 'comment_created': datetime.datetime(2020, 7, 6, 17, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 450383628, 'comment_body': ""`const_idx` keeps tracks of the constant naming across the sub-systems of ODEs since we don't want the sub-system solutions to have same constants in their solutions.\r\n\r\n> Or something like that...\r\n\r\nSure, I would do that soon."", 'comment_created': datetime.datetime(2020, 7, 6, 17, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 450383977, 'comment_body': 'Ok, I would try to write this in cleaner and most understandable manner.', 'comment_created': datetime.datetime(2020, 7, 6, 17, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 450624418, 'comment_body': ""I was able to make this function more compact and cleaner but I wasn't able to eliminate `loop_sol` variable, since it is the variable that stores the solutions."", 'comment_created': datetime.datetime(2020, 7, 7, 5, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 451426553, 'comment_body': '@oscarbenjamin I am using this kind of method to replace the dummies made with the constants. Is this a viable approach?', 'comment_created': datetime.datetime(2020, 7, 8, 9, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 451542676, 'comment_body': 'Yes, but is there not already a function to handle this in `ode.py`?', 'comment_created': datetime.datetime(2020, 7, 8, 13, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 451977142, 'comment_body': ""I don't think so. I tried finding such function but wasn't able to."", 'comment_created': datetime.datetime(2020, 7, 9, 5, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 451981298, 'comment_body': ""The closest to the required function is `constant_renumber` function but I don't know how to use it for a list of equations. Since, when the input is:\r\n```\r\n⎡                x                  x⎤\r\n⎣f(x) = Dummy₂₈⋅ℯ , g(x) = Dummy₂₉⋅ℯ ⎦\r\n\r\n```\r\nThe output is:\r\n```\r\n⎡           x             x⎤\r\n⎣f(x) = C₁⋅ℯ , g(x) = C₁⋅ℯ ⎦\r\n```\r\n\r\nI can make it work for a list of equations too, but using the function that I have designed for this specific purpose seems more efficient IMO."", 'comment_created': datetime.datetime(2020, 7, 9, 5, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 452033893, 'comment_body': 'Maybe `constant_renumber` should be fixed.', 'comment_created': datetime.datetime(2020, 7, 9, 7, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 452034687, 'comment_body': 'Should I fix it in this PR?', 'comment_created': datetime.datetime(2020, 7, 9, 7, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 452035627, 'comment_body': ""It's probably worth making this code for guessing the functions into a separate function that can be used in both places."", 'comment_created': datetime.datetime(2020, 7, 9, 8, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 452063967, 'comment_body': 'It can be done later.', 'comment_created': datetime.datetime(2020, 7, 9, 8, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': 'aed2ad1d2ac908e6cfa70bda4e3e3e6f6f105a21', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf59c3ac8daef2bedb488673e0c2f060a3f829d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8db78f757f9e9908365c79dc3f3eda96b7699e5c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '902d74756395968741f58302f76a2633757d3018', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c3e9614873e7242647b775825138766ca103d07', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c481387085eb1a81bd3f3ca9c9994312d9ebd307', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd572b0f2f7a6c5fa95a9d0ed728f62aa5cb9d65e', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00554b24dd25c14e0bcfc6f782f2de61908712a9', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de1bcc8d517d4decce64fd2e6fb236c9bc6c33cf', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3acfcf4ff99fac1296a1601d123c498ac7a19d0f', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4439d4312bcb28a906d17b46f34bab72c880022e', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '282b8a2b18819973f3f0ed65863aa561cf975472', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ad174f072497650ca5d6f44adee25545672c565', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7af84e9c605d73bd51c0a4decc3384a1462d3e84', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '038439db397c1b585020bfd504a77dcac960c171', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d6bc7bbc1102f2d629aeffcd9439e6419c11493', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd49d2eee6ab9ed1f9e20de7461015752c55814', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
447239592,"[GSoC] Extending/Changing checkodesol, constants_renumber and linear_ode_to_matrix","#### References to other Issues or PRs


#### Brief description of what is fixed or changed
Three tasks are carried out in this PR:
1. Adding `checksysodesol` call in `checkodesol`
2. Fixing `constants_renumber` to handle a system of ODEs
3. Synchronizing the outputs of `linear_ode_to_matrix` and `canonical_odes`

#### Other comments
These tasks will help simplify work for an end-user and helps for the internal workings of the solvers.

#### Release Notes
<!-- BEGIN RELEASE NOTES -->
* solvers
  * Extending `checkodesol` and `constants_renumber` to handle system of ODEs
<!-- END RELEASE NOTES -->",True,19733,https://api.github.com/repos/sympy/sympy/pulls/19733,https://github.com/sympy/sympy/pull/19733,closed,469,488,7,3,9,11,2,0,"[{'name': 'GSoC'}, {'name': 'solvers.dsolve.system'}]",2020-07-10 05:47:54+00:00,2020-07-13 13:21:47+00:00,286433.0,"3 days, 7:33:53","[{'comment_id': 453203215, 'comment_body': 'Is there any code in sympy that needs to use this with `is_system = False`?', 'comment_created': datetime.datetime(2020, 7, 11, 15, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 453203295, 'comment_body': 'We can get rid of this global now', 'comment_created': datetime.datetime(2020, 7, 11, 15, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 453203806, 'comment_body': ""When you find yourself checking `if isinstance` repeatedly it's a clear sign that there is probably a better way to organise this. At the beginning of the function you could do\r\n```\r\nif isinstance(expr, (set, list, tuple)):\r\n    return type(expr)(constant_renumber(Tuple(*expr)))\r\n```\r\nA function where you don't know whether or not something is `Expr` or `list[Expr` etc is a mess so you should handle that case right at the beginning."", 'comment_created': datetime.datetime(2020, 7, 11, 15, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 453204094, 'comment_body': 'mispelt antiderivative', 'comment_created': datetime.datetime(2020, 7, 11, 15, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 453204345, 'comment_body': 'This solution was nicely formatted before.', 'comment_created': datetime.datetime(2020, 7, 11, 15, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 453204485, 'comment_body': 'Here the Eqs lined up before', 'comment_created': datetime.datetime(2020, 7, 11, 15, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 453204518, 'comment_body': 'The line break should be between the equations', 'comment_created': datetime.datetime(2020, 7, 11, 15, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 453226498, 'comment_body': '@oscarbenjamin Not yet but this may come in handy. Since it gives the end user to choose whether their expressions are independent of each other or not provided if they have passed a list of expressions.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 453226511, 'comment_body': 'Ok, I will get rid of it soon.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 453226593, 'comment_body': 'When pasting new solutions, the old formatting was lost. I will format these new solutions nicely.', 'comment_created': datetime.datetime(2020, 7, 11, 19, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 453240902, 'comment_body': ""If the expressions are independent then they can just do\r\n```\r\neqs = [constant_renumber(eq) for eq in eqs]\r\n```\r\nI don't see any need to support that case within the function."", 'comment_created': datetime.datetime(2020, 7, 11, 22, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '99ddb2439c06d8b66340d51131474b479965ba5f', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9dea0063c9872ec45bccab077b67af91faf72bc', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '491635f0fc00102c6729b704b30f64d1f271be23', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
448709142,[GSoC] Dividing system of ODEs into sub-systems,"#### References to other Issues or PRs


#### Brief description of what is fixed or changed
Completed `_component_division` private function. This function can now divide systems of ODEs into required sub-systems to solve the ODEs by dividing it.

#### Other comments
The library now can handle systems of ODEs such that a part of them is solvable and the other part of them can be solved if the first solvable part is solved. The example below demonstrates this:
```
In [39]: f, g, h, k = symbols('f g h k', cls=Function) 
    ...: eqs = [ 
    ...: Eq(f(x).diff(x), f(x)),  
    ...: Eq(g(x).diff(x), f(x)),  
    ...: Eq(h(x).diff(x), h(x)), 
    ...: Eq(k(x).diff(x), h(x)**4 + k(x))] 
    ...: dsolve(eqs) 
Out[39]: 
[Eq(f(x), C1*exp(x)),
 Eq(g(x), C1*exp(x) + C2),
 Eq(h(x), C3*exp(x)),
 Eq(k(x), (C4 + Integral(C3**4*exp(3*x), x))*exp(x))]

```
The above system as a whole doesn't have a solver but by first solving for `f(x)` and `g(x)` separately, and then just solving for `h(x)` and substituting that solution to solve for `k(x)` leads to the solution using just linear solvers and clever substitutions and division of system.
#### Release Notes
<!-- BEGIN RELEASE NOTES -->
* solvers
  * Added component division technique to divide the system of ODEs into logical sub-systems and solving each of these separately.
<!-- END RELEASE NOTES -->",True,19762,https://api.github.com/repos/sympy/sympy/pulls/19762,https://github.com/sympy/sympy/pull/19762,closed,297,80,3,10,16,8,2,0,"[{'name': 'GSoC'}, {'name': 'solvers.dsolve.system'}]",2020-07-14 07:47:24+00:00,2020-07-23 10:58:46+00:00,789082.0,"9 days, 3:11:22","[{'comment_id': 454929815, 'comment_body': ""@oscarbenjamin In this function, I have added a way to combine the sub-systems when they form a type 1(constant coeff homogeneous) system of ODEs. \r\n\r\nSo, the first thing to be observed is that if the first sub-system is not of Type 1, then the other sub-systems can't be of Type 1 either. Hence, if there is exists a larger Type 1 sub-system, then it starts from the first component in a list of strongly connected components. Now, to check if the second, third, ..., etc systems are Type 1, we just combine the two systems and check if together it is Type 1 or not. If the current component is Type 1, we simply add this component with the first component and keep doing it until we reach a sub-system which is not of Type 1.\r\n\r\nIs this logic correct?"", 'comment_created': datetime.datetime(2020, 7, 15, 9, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 455282886, 'comment_body': 'How does it handle a case like the following?\r\n```\r\ndx/dt = x**2\r\ndy/dt = z\r\ndz/dt = y\r\ndw/dt = x + z\r\n```\r\nHere the components are `{x}, {y, z}, {w}` but you might get them in that order or you might get them in the order `{y, z}, {x}, {w}`. The component `{y, z}` is linear with constant coefficients but it might come before or after `{x}` which is nonlinear.', 'comment_created': datetime.datetime(2020, 7, 15, 19, 14, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 455309809, 'comment_body': 'Well then it would certainly be a problem. I think to avoid this, what can be done is checking the graph to see if one connected component has a directed edge to another. I would try to implement it soon.', 'comment_created': datetime.datetime(2020, 7, 15, 20, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 455723355, 'comment_body': ""I have tried to fix this in the recent commit. In that, I have built a graph for strongly connected components in the form of `parents` list. This is a list of lists, each index represents the strongly connected component(scc). Then in `_combine_systems` function, I combine the systems which are of type1 and along with that keep track of its parent sccs too. If any parent scc is not type1, then this scc won't be combined. After the check, we combine the scc to the scc with the lowest index in the list of sccs to keep the topological order intact."", 'comment_created': datetime.datetime(2020, 7, 16, 11, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 455756288, 'comment_body': 'That sounds reasonable.', 'comment_created': datetime.datetime(2020, 7, 16, 12, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 457921661, 'comment_body': 'There should be direct tests for the `_component_division` function and the `eqs2dict` and `dict2graph` functions.', 'comment_created': datetime.datetime(2020, 7, 21, 8, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 457923683, 'comment_body': 'Here `f(x) = 0` is not a solution.', 'comment_created': datetime.datetime(2020, 7, 21, 8, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 457962964, 'comment_body': 'I would remove that comment.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}]","[{'commit_sha': '9367034d0f565827b988cabe270cda49459ad746', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '835f633bbab0f837836f9a719d2680067b2e19a5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0599a93917577540cff23fd8a11457ead6b6cf0b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129a3415248e51dc881b69c841f2d0bce72a77a5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17200e57ea7cd3d31504c3081decf019f2ba6853', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e40ef8f367befc3fb5433883ba742f8e00985bc8', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1b7ce9397697dbea29558e44d76ca4491c7bbb7', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bd5ab50205367acfa1ba16e4630a504d797a594', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ab64612efb287f09822419f4127878a4b664f71', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf34f3681c193b1ae4456cc3115641537d0d4537', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
456580643,[GSoC] Higher order system of ODEs to first order reduction,"#### References to other Issues or PRs
Fixes #19238

#### Brief description of what is fixed or changed
Added functionalities in `systems.py` that can reduce higher-order ODEs to first-order ODEs and solve the reduced system.

Removes the following solvers:
`Linear, 2 equations, Order 2, Type 1-6, and Type 8-11.`

The solvers are removed by implementing the following:
1. Method to reduce any higher-order system into a first-order system by introducing dummy variables. This type of method doesn't always work to solve every type of higher-order system because of the fact that we can only solve a first-order system whose coefficient matrix is commutative with its antiderivative or which can be divided into systems having commutative antiderivative. This method was responsible for the `removal of Type 1-4 from the old second-order solvers` meanwhile, it also extended Sympy's capabilities to solve systems of ODEs.

2. Method to reduce a second-order system `X'' = A*(t*X' - X) + b(t)` to a solvable first-order system where `A` is a constant matrix, `X` is a vector of dependent variables(same nomenclature used below). This removed Types 5, 8, and 11.

3. Method to transform a second-order system `X'' = f(t)*A*X` where `f(t) = 1/(a*t**2 + b*t + c)**2` into a constant coefficient second-order system. This removed Types 6 and 10.

4. Method to solve standard Cauchy-Euler systems not just of second-order with two equations but of any order with any number of equations. This removed Type 9 solver.

5. Method to compute the solution for first-order systems of type: `X' = f(t)*A*X + b` where `f(t)` is any invertible function. This solution is added as Type 5(homogeneous) and Type 6(non-homogeneous) in `linodesolve`.

6. Method to reduce a system of type: `X(n)(t) = f(t) * A * X + b(t)` where `X(n)(t)` is the nth order derivative of the vector `X`, `A` is a constant matrix and `f(t)` is a scalar. This system is transformed into a system that can be divided into smaller sub-systems which can be divided and solved using strongly and weakly connected components logic. But not all the systems of this form can be handled by the module. Only some of them. More details about the component division logic given [here](https://github.com/sympy/sympy/wiki/ODE-Systems-roadmap).

```
Note: Work for implementing a function that can reduce a dependent variable when the minimum order of the dependent variables is greater than 0 and implementing a method to solve X'' = f(t)*A*X is still remaining and has to be carried out in future PR/s.
```

#### Other comments

Examples below show how `dsolve_system` is now able to solve many types of higher-order systems:

1. Using method 1 of introducing dummy variables to solve higher-order system:
```
>>> eqs = [Eq(f(x).diff(x, 2), 2*f(x) + g(x)), Eq(g(x).diff(x, 2), -f(x))]
>>> dsolve(eqs)
[Eq(f(x), C3*x*exp(x) + C3*exp(x) + C4*exp(x) + (-C1 - C2*x + C2)*exp(-x)),
Eq(g(x), -C3*x*exp(x) + C3*exp(x) - C4*exp(x) + (C1 + C2*x + C2)*exp(-x))]
```

2. Solving second-order systems of form `X'' = A*(t*X' - X) + b(t)`:
```
>>> eqs = [Eq(f(x).diff(x, 2), 2/x *(x*g(x).diff(x) - g(x))), Eq(g(x).diff(x, 2),-2/x *(x*f(x).diff(x) - f(x)))]
>>> dsolve(eqs)
[Eq(f(x), C1*x + x*Integral(C2*exp(-x_)*sin(2*exp(x_)) + C3*exp(-x_)*cos(2*exp(x_)), (x_, log(x)))),
Eq(g(x), C4*x + x*Integral(C2*exp(-x_)*cos(2*exp(x_)) - C3*exp(-x_)*sin(2*exp(x_)), (x_, log(x))))]
```

3. Solving second-order systems of the form `X'' = f(t)*A*X`` where `f(t)` is inverse of the square of a quadratic function in `t`:
```
>>> eqs = [Eq(Derivative(f(t), (t, 2)), f(t)/t**4), Eq(Derivative(g(t), (t, 2)), d*g(t)/t**4)]
>>> dsolve(eqs)
[Eq(f(t), (C1*exp(-1/t) - C2*exp(1/t))*sqrt(t**2)),
Eq(g(t), (C3*exp(-sqrt(d)/t)/sqrt(d) - C4*exp(sqrt(d)/t)/sqrt(d))*sqrt(t**2))]
```

4. Solving a Cauchy-Euler system:
```
>>> eqs = [Eq(Derivative(f(t), (t, 2)), t*f(t)), Eq(Derivative(g(t), (t, 2)), t*g(t))]
>>> dsolve(eqs)
[Eq(f(t), C1*t**(1/2 - sqrt(5)/2)*(-3/2 - sqrt(5)/2) + C2*t**(1/2 + sqrt(5)/2)*(-3/2 + sqrt(5)/2) + C3*t**(1 - sqrt(2))*(-sqrt(2) - 1) + C4*t**(1 + sqrt(2))*(-1 + sqrt(2))),
 Eq(g(t), C1*t**(1/2 - sqrt(5)/2)*(-sqrt(5)/2 - 1/2) + C2*t**(1/2 + sqrt(5)/2)*(-1/2 + sqrt(5)/2))]
```

5. Solving systems of the form `X' = f(t)*A*X + b(t)` was already possible, this method was added for faster computation.

6. Solving systems of the form: `X(n)(t) = f(t) *A*X + b(t)`:
```
>>> eqs 
[Eq(Derivative(f(t), (t, 2)), t*f(t) + t*g(t)),
 Eq(Derivative(g(t), (t, 2)), 2*t*f(t) + t*g(t))]

>>> dsolve(eqs)                                                                                                                                                                                 
[[Eq(f(t), -sqrt(2)*(C1*airyai(-t*(-1 + sqrt(2))**(1/3)) + C2*airybi(-t*(-1 + sqrt(2))**(1/3)))/2 + sqrt(2)*(C3*airyai(t*(1 + sqrt(2))**(1/3)) + C4*airybi(t*(1 + sqrt(2))**(1/3)))/2),
  Eq(g(t), C1*airyai(-t*(-1 + sqrt(2))**(1/3)) + C2*airybi(-t*(-1 + sqrt(2))**(1/3)) + C3*airyai(t*(1 + sqrt(2))**(1/3)) + C4*airybi(t*(1 + sqrt(2))**(1/3)))]]
```

#### Release Notes
<!-- BEGIN RELEASE NOTES -->
* solvers
  * Solving higher-order system of ODEs by reducing/transforming it into the first-order system of ODEs by numerous methods.
<!-- END RELEASE NOTES -->",True,19838,https://api.github.com/repos/sympy/sympy/pulls/19838,https://github.com/sympy/sympy/pull/19838,closed,1080,1323,6,22,36,29,2,0,"[{'name': 'GSoC'}, {'name': 'solvers.dsolve.system'}]",2020-07-25 07:23:31+00:00,2020-08-23 20:08:28+00:00,2551497.0,"29 days, 12:44:57","[{'comment_id': 463892520, 'comment_body': ""We need to find a better way of handling examples like this. Rather than using the simpsol function to create the code for enormous complicated test solutions we should use it to study the structure of the solutions and how to make them simpler. If they can't be made simpler then we need tests that give simpler answers because these are just unmanageable.\r\n\r\nIf someone changed something somewhere and it made a minus sign or something appear somewhere in this solution then they would need to regenerate this test and they would find it very difficult to do that. This needs to be written in a way that is understandable and updateable."", 'comment_created': datetime.datetime(2020, 8, 1, 0, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 463893428, 'comment_body': ""We should give these dummies names so e.g. `x(t).diff(t)` would be `Function(Dummy('x_1'))(t)` and `x(t)` would be `Function(Dummy('x_0')(t))`."", 'comment_created': datetime.datetime(2020, 8, 1, 0, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 464182313, 'comment_body': 'So, should we remove these type of test cases which were made simpler using your simplification method?', 'comment_created': datetime.datetime(2020, 8, 3, 3, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 464183802, 'comment_body': ""I would do that for functions introduced but should I do it for dependent variables like `x(t)` since we need to access the solutions later using a dictionary and the original dependent variables don't really have to be renamed."", 'comment_created': datetime.datetime(2020, 8, 3, 4, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 472208252, 'comment_body': '@oscarbenjamin Does this method seem correct? ', 'comment_created': datetime.datetime(2020, 8, 18, 13, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 472909963, 'comment_body': 'Yes, although ideally there should be a function for computing the inverse of a sympy expression.', 'comment_created': datetime.datetime(2020, 8, 19, 9, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 472952226, 'comment_body': ""I was also thinking of filtering inverses which has `Piecewise` operations on it to avoid overcomplicating the solutions when it doesn't have to be."", 'comment_created': datetime.datetime(2020, 8, 19, 11, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 474085892, 'comment_body': 'Why is type7 still here?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 474087143, 'comment_body': '`constnt -> constant`', 'comment_created': datetime.datetime(2020, 8, 20, 15, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 474090064, 'comment_body': 'This is just `if type in [""type1"", ...]`', 'comment_created': datetime.datetime(2020, 8, 20, 15, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 474151693, 'comment_body': 'yes, I would write in this format in the next commit.', 'comment_created': datetime.datetime(2020, 8, 20, 17, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 474165165, 'comment_body': ""I just noticed that the type7 solver can be removed now. Earlier, I don't know why the systems of this type weren't getting solved. I would remove this solver right away, but we still need to implement a method to reduce the systems which have their minium order term greater than 0."", 'comment_created': datetime.datetime(2020, 8, 20, 17, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475079731, 'comment_body': ""This system is solvable in sympy 1.6.2. Why isn't it solvable in the PR?"", 'comment_created': datetime.datetime(2020, 8, 22, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475079919, 'comment_body': 'I think `dsolve_system` should just call `dsolve` when given a single ODE.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475080086, 'comment_body': ""With the PR I get:\r\n```julia\r\nIn [1]: x, y = symbols('x, y', cls=Function)                                                                                                                  \r\n\r\nIn [2]: eq8 = (Eq(diff(x(t),t,t), t*(4*x(t) + 9*y(t))), Eq(diff(y(t),t,t), t*(12*x(t) - 6*y(t))))                                                             \r\n\r\nIn [3]: dsolve(eq8)                                                                                                                                           \r\n---------------------------------------------------------------------------\r\nUnboundLocalError                         Traceback (most recent call last)\r\n<ipython-input-3-a9fa4285d3da> in <module>\r\n----> 1 dsolve(eq8)\r\n\r\n~/current/sympy/sympy/sympy/solvers/ode/ode.py in dsolve(eq, func, hint, simplify, ics, xi, eta, x0, n, **kwargs)\r\n    586             pass\r\n    587 \r\n--> 588         match = classify_sysode(eq, func)\r\n    589 \r\n    590         eq = match['eq']\r\n\r\n~/current/sympy/sympy/sympy/solvers/ode/ode.py in classify_sysode(eq, funcs, **kwargs)\r\n   1981         type_of_equation = None\r\n   1982 \r\n-> 1983     matching_hints['type_of_equation'] = type_of_equation\r\n   1984 \r\n   1985     return matching_hints\r\n\r\nUnboundLocalError: local variable 'type_of_equation' referenced before assignment\r\n```\r\nThat shouldn't be `UnboundLocalError`."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475080919, 'comment_body': 'The name of this function implies that it is for constant coefficient systems only.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475081103, 'comment_body': ""Ok, I would add that call, but won't it cause a cyclical dependency between `dsolve_system` and `dsolve`?"", 'comment_created': datetime.datetime(2020, 8, 22, 11, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475081148, 'comment_body': 'I would change its name.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475081316, 'comment_body': ""> This system is solvable in sympy 1.6.2. Why isn't it solvable in the PR?\r\n\r\nI think this system was solved by the `type6` solver. To solve this system, we would have to implement the `type6` solver too or this specific case can be solved by the solution given by you in the tracker issue.\r\n\r\n> That shouldn't be UnboundLocalError.\r\n\r\nI would fix this."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475081698, 'comment_body': '> I would fix this.\r\n\r\nFor this error, I can make it give `NotImplementedError` or should I just revive the `type6` solver? The last option is to implement the `type6` solver based on the diagonalization decoupling of the systems you suggested [here](https://github.com/sympy/sympy/issues/19178#issuecomment-674534058).', 'comment_created': datetime.datetime(2020, 8, 22, 11, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475082163, 'comment_body': ""Maybe this isn't exactly the right place to add the call: it could be in `strong_component_solver`. I'm not sure because the control flow has become quite confusing.\r\n\r\nIt shouldn't create a cyclic call because `dsolve` will only call `dsolve_system` when there are multiple ODEs and `dsolve_system` will only call `dsolve` for a single ODE. There will be a cyclic import but that is resolvable using a delayed import.\r\n\r\nThe code in `dsolve` for single ODEs has a lot of cases for handling different kinds of linear ODEs and also nonlinear ODEs that we cannot recreate in `dsolve_system`. The idea in `dsolve_system` has to be that we reduce problems down to single ODEs and then call into that other code. Ideally the single ODE handling code in `dsolve` would be callable as a function `dsolve_single` rather than recursing into `dsolve` but that is for a future refactoring of the single ODE case."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475082217, 'comment_body': 'I am adding the call to `dsolve` in `strong_component_solver`. This function is called as soon as we have the system. But this call needs to be replaced later if ever it is decided to best divide the systems at first then trying to solve it as a whole.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475082410, 'comment_body': 'What would be quickest to do at this stage?', 'comment_created': datetime.datetime(2020, 8, 22, 11, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475082452, 'comment_body': ""I don't want to merge this if it has a possible regression."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475257905, 'comment_body': 'Why is `check_linear_2eq_order1` still needed?', 'comment_created': datetime.datetime(2020, 8, 23, 19, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475258151, 'comment_body': 'For linear 2 equations order 1 type 6 and type 7 I think. There were some test cases solved by them. One of them is in the doctests of `dsolve`', 'comment_created': datetime.datetime(2020, 8, 23, 19, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475259492, 'comment_body': 'Is type6 not handled by the current solvers? Does type7 actually work? I thought it just produced the bogus solutions with `x0(t)` in them...', 'comment_created': datetime.datetime(2020, 8, 23, 20, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475259634, 'comment_body': ""I haven't checked for the validity of those solvers yet."", 'comment_created': datetime.datetime(2020, 8, 23, 20, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475259735, 'comment_body': ""That's fine. Let's focus on simplification now"", 'comment_created': datetime.datetime(2020, 8, 23, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '2e0e269d28cd4a7bef42226f396cff71611b2080', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c1a90be591edbdf878be9d593f83260a6223178', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1819aed769604925df93f9bd210ffada670cfc66', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f831cf4948f5ee8dbd4f68ce51f35a0dcf86b1de', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b674d15005e9f07775f2080b18098910bcaf166', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0321e4f9d022151a8503afebb056b291a13d5f8c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8003bcb19714cfc036cb4e109f0b8a4c077b41', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36d1914f8f410d90a006af23af63c11e27ccff8', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d39011ca48db057978184821af1e797283a8512', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '502743bf37a98e36ae1e701bdad1f2e3294ac9a5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f5b50780ce20d20e5ea486a406914e4839e37c2', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c52eb61d6f14712b55531dddeff0673e848bb57', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02380d6da326a1d019aa0834fd6283734ac8eaf6', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a3370dff9ff9e9948406d1320c7a59ac3716ef', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa05f1e77c6b5480ae9be99391422c613d92f595', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'def7a6d1164e3296622fdcef5d8b4a106611e0c7', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e64edce13353c522283fc53ed409d75e338e182', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb421558308eb33eb037e112045147874c8bdf9f', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c567b708ff76b9c643bd56d04e8bfce42317251', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c0421f35f629ba4c488385d948dadf3f79e4e5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c74fd1df66f0cc48203d4a3d8625052ca73cc5cd', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd230f633fd874cf73ab596508cbaf8600a27ef', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
456580643,[GSoC] Higher order system of ODEs to first order reduction,"#### References to other Issues or PRs
Fixes #19238

#### Brief description of what is fixed or changed
Added functionalities in `systems.py` that can reduce higher-order ODEs to first-order ODEs and solve the reduced system.

Removes the following solvers:
`Linear, 2 equations, Order 2, Type 1-6, and Type 8-11.`

The solvers are removed by implementing the following:
1. Method to reduce any higher-order system into a first-order system by introducing dummy variables. This type of method doesn't always work to solve every type of higher-order system because of the fact that we can only solve a first-order system whose coefficient matrix is commutative with its antiderivative or which can be divided into systems having commutative antiderivative. This method was responsible for the `removal of Type 1-4 from the old second-order solvers` meanwhile, it also extended Sympy's capabilities to solve systems of ODEs.

2. Method to reduce a second-order system `X'' = A*(t*X' - X) + b(t)` to a solvable first-order system where `A` is a constant matrix, `X` is a vector of dependent variables(same nomenclature used below). This removed Types 5, 8, and 11.

3. Method to transform a second-order system `X'' = f(t)*A*X` where `f(t) = 1/(a*t**2 + b*t + c)**2` into a constant coefficient second-order system. This removed Types 6 and 10.

4. Method to solve standard Cauchy-Euler systems not just of second-order with two equations but of any order with any number of equations. This removed Type 9 solver.

5. Method to compute the solution for first-order systems of type: `X' = f(t)*A*X + b` where `f(t)` is any invertible function. This solution is added as Type 5(homogeneous) and Type 6(non-homogeneous) in `linodesolve`.

6. Method to reduce a system of type: `X(n)(t) = f(t) * A * X + b(t)` where `X(n)(t)` is the nth order derivative of the vector `X`, `A` is a constant matrix and `f(t)` is a scalar. This system is transformed into a system that can be divided into smaller sub-systems which can be divided and solved using strongly and weakly connected components logic. But not all the systems of this form can be handled by the module. Only some of them. More details about the component division logic given [here](https://github.com/sympy/sympy/wiki/ODE-Systems-roadmap).

```
Note: Work for implementing a function that can reduce a dependent variable when the minimum order of the dependent variables is greater than 0 and implementing a method to solve X'' = f(t)*A*X is still remaining and has to be carried out in future PR/s.
```

#### Other comments

Examples below show how `dsolve_system` is now able to solve many types of higher-order systems:

1. Using method 1 of introducing dummy variables to solve higher-order system:
```
>>> eqs = [Eq(f(x).diff(x, 2), 2*f(x) + g(x)), Eq(g(x).diff(x, 2), -f(x))]
>>> dsolve(eqs)
[Eq(f(x), C3*x*exp(x) + C3*exp(x) + C4*exp(x) + (-C1 - C2*x + C2)*exp(-x)),
Eq(g(x), -C3*x*exp(x) + C3*exp(x) - C4*exp(x) + (C1 + C2*x + C2)*exp(-x))]
```

2. Solving second-order systems of form `X'' = A*(t*X' - X) + b(t)`:
```
>>> eqs = [Eq(f(x).diff(x, 2), 2/x *(x*g(x).diff(x) - g(x))), Eq(g(x).diff(x, 2),-2/x *(x*f(x).diff(x) - f(x)))]
>>> dsolve(eqs)
[Eq(f(x), C1*x + x*Integral(C2*exp(-x_)*sin(2*exp(x_)) + C3*exp(-x_)*cos(2*exp(x_)), (x_, log(x)))),
Eq(g(x), C4*x + x*Integral(C2*exp(-x_)*cos(2*exp(x_)) - C3*exp(-x_)*sin(2*exp(x_)), (x_, log(x))))]
```

3. Solving second-order systems of the form `X'' = f(t)*A*X`` where `f(t)` is inverse of the square of a quadratic function in `t`:
```
>>> eqs = [Eq(Derivative(f(t), (t, 2)), f(t)/t**4), Eq(Derivative(g(t), (t, 2)), d*g(t)/t**4)]
>>> dsolve(eqs)
[Eq(f(t), (C1*exp(-1/t) - C2*exp(1/t))*sqrt(t**2)),
Eq(g(t), (C3*exp(-sqrt(d)/t)/sqrt(d) - C4*exp(sqrt(d)/t)/sqrt(d))*sqrt(t**2))]
```

4. Solving a Cauchy-Euler system:
```
>>> eqs = [Eq(Derivative(f(t), (t, 2)), t*f(t)), Eq(Derivative(g(t), (t, 2)), t*g(t))]
>>> dsolve(eqs)
[Eq(f(t), C1*t**(1/2 - sqrt(5)/2)*(-3/2 - sqrt(5)/2) + C2*t**(1/2 + sqrt(5)/2)*(-3/2 + sqrt(5)/2) + C3*t**(1 - sqrt(2))*(-sqrt(2) - 1) + C4*t**(1 + sqrt(2))*(-1 + sqrt(2))),
 Eq(g(t), C1*t**(1/2 - sqrt(5)/2)*(-sqrt(5)/2 - 1/2) + C2*t**(1/2 + sqrt(5)/2)*(-1/2 + sqrt(5)/2))]
```

5. Solving systems of the form `X' = f(t)*A*X + b(t)` was already possible, this method was added for faster computation.

6. Solving systems of the form: `X(n)(t) = f(t) *A*X + b(t)`:
```
>>> eqs 
[Eq(Derivative(f(t), (t, 2)), t*f(t) + t*g(t)),
 Eq(Derivative(g(t), (t, 2)), 2*t*f(t) + t*g(t))]

>>> dsolve(eqs)                                                                                                                                                                                 
[[Eq(f(t), -sqrt(2)*(C1*airyai(-t*(-1 + sqrt(2))**(1/3)) + C2*airybi(-t*(-1 + sqrt(2))**(1/3)))/2 + sqrt(2)*(C3*airyai(t*(1 + sqrt(2))**(1/3)) + C4*airybi(t*(1 + sqrt(2))**(1/3)))/2),
  Eq(g(t), C1*airyai(-t*(-1 + sqrt(2))**(1/3)) + C2*airybi(-t*(-1 + sqrt(2))**(1/3)) + C3*airyai(t*(1 + sqrt(2))**(1/3)) + C4*airybi(t*(1 + sqrt(2))**(1/3)))]]
```

#### Release Notes
<!-- BEGIN RELEASE NOTES -->
* solvers
  * Solving higher-order system of ODEs by reducing/transforming it into the first-order system of ODEs by numerous methods.
<!-- END RELEASE NOTES -->",True,19838,https://api.github.com/repos/sympy/sympy/pulls/19838,https://github.com/sympy/sympy/pull/19838,closed,1080,1323,6,22,36,29,2,0,"[{'name': 'GSoC'}, {'name': 'solvers.dsolve.system'}]",2020-07-25 07:23:31+00:00,2020-08-23 20:08:28+00:00,2551497.0,"29 days, 12:44:57","[{'comment_id': 463892520, 'comment_body': ""We need to find a better way of handling examples like this. Rather than using the simpsol function to create the code for enormous complicated test solutions we should use it to study the structure of the solutions and how to make them simpler. If they can't be made simpler then we need tests that give simpler answers because these are just unmanageable.\r\n\r\nIf someone changed something somewhere and it made a minus sign or something appear somewhere in this solution then they would need to regenerate this test and they would find it very difficult to do that. This needs to be written in a way that is understandable and updateable."", 'comment_created': datetime.datetime(2020, 8, 1, 0, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 463893428, 'comment_body': ""We should give these dummies names so e.g. `x(t).diff(t)` would be `Function(Dummy('x_1'))(t)` and `x(t)` would be `Function(Dummy('x_0')(t))`."", 'comment_created': datetime.datetime(2020, 8, 1, 0, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 464182313, 'comment_body': 'So, should we remove these type of test cases which were made simpler using your simplification method?', 'comment_created': datetime.datetime(2020, 8, 3, 3, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 464183802, 'comment_body': ""I would do that for functions introduced but should I do it for dependent variables like `x(t)` since we need to access the solutions later using a dictionary and the original dependent variables don't really have to be renamed."", 'comment_created': datetime.datetime(2020, 8, 3, 4, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 472208252, 'comment_body': '@oscarbenjamin Does this method seem correct? ', 'comment_created': datetime.datetime(2020, 8, 18, 13, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 472909963, 'comment_body': 'Yes, although ideally there should be a function for computing the inverse of a sympy expression.', 'comment_created': datetime.datetime(2020, 8, 19, 9, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 472952226, 'comment_body': ""I was also thinking of filtering inverses which has `Piecewise` operations on it to avoid overcomplicating the solutions when it doesn't have to be."", 'comment_created': datetime.datetime(2020, 8, 19, 11, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 474085892, 'comment_body': 'Why is type7 still here?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 474087143, 'comment_body': '`constnt -> constant`', 'comment_created': datetime.datetime(2020, 8, 20, 15, 47, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 474090064, 'comment_body': 'This is just `if type in [""type1"", ...]`', 'comment_created': datetime.datetime(2020, 8, 20, 15, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 474151693, 'comment_body': 'yes, I would write in this format in the next commit.', 'comment_created': datetime.datetime(2020, 8, 20, 17, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 474165165, 'comment_body': ""I just noticed that the type7 solver can be removed now. Earlier, I don't know why the systems of this type weren't getting solved. I would remove this solver right away, but we still need to implement a method to reduce the systems which have their minium order term greater than 0."", 'comment_created': datetime.datetime(2020, 8, 20, 17, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475079731, 'comment_body': ""This system is solvable in sympy 1.6.2. Why isn't it solvable in the PR?"", 'comment_created': datetime.datetime(2020, 8, 22, 11, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475079919, 'comment_body': 'I think `dsolve_system` should just call `dsolve` when given a single ODE.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475080086, 'comment_body': ""With the PR I get:\r\n```julia\r\nIn [1]: x, y = symbols('x, y', cls=Function)                                                                                                                  \r\n\r\nIn [2]: eq8 = (Eq(diff(x(t),t,t), t*(4*x(t) + 9*y(t))), Eq(diff(y(t),t,t), t*(12*x(t) - 6*y(t))))                                                             \r\n\r\nIn [3]: dsolve(eq8)                                                                                                                                           \r\n---------------------------------------------------------------------------\r\nUnboundLocalError                         Traceback (most recent call last)\r\n<ipython-input-3-a9fa4285d3da> in <module>\r\n----> 1 dsolve(eq8)\r\n\r\n~/current/sympy/sympy/sympy/solvers/ode/ode.py in dsolve(eq, func, hint, simplify, ics, xi, eta, x0, n, **kwargs)\r\n    586             pass\r\n    587 \r\n--> 588         match = classify_sysode(eq, func)\r\n    589 \r\n    590         eq = match['eq']\r\n\r\n~/current/sympy/sympy/sympy/solvers/ode/ode.py in classify_sysode(eq, funcs, **kwargs)\r\n   1981         type_of_equation = None\r\n   1982 \r\n-> 1983     matching_hints['type_of_equation'] = type_of_equation\r\n   1984 \r\n   1985     return matching_hints\r\n\r\nUnboundLocalError: local variable 'type_of_equation' referenced before assignment\r\n```\r\nThat shouldn't be `UnboundLocalError`."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475080919, 'comment_body': 'The name of this function implies that it is for constant coefficient systems only.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475081103, 'comment_body': ""Ok, I would add that call, but won't it cause a cyclical dependency between `dsolve_system` and `dsolve`?"", 'comment_created': datetime.datetime(2020, 8, 22, 11, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475081148, 'comment_body': 'I would change its name.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475081316, 'comment_body': ""> This system is solvable in sympy 1.6.2. Why isn't it solvable in the PR?\r\n\r\nI think this system was solved by the `type6` solver. To solve this system, we would have to implement the `type6` solver too or this specific case can be solved by the solution given by you in the tracker issue.\r\n\r\n> That shouldn't be UnboundLocalError.\r\n\r\nI would fix this."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 33, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475081698, 'comment_body': '> I would fix this.\r\n\r\nFor this error, I can make it give `NotImplementedError` or should I just revive the `type6` solver? The last option is to implement the `type6` solver based on the diagonalization decoupling of the systems you suggested [here](https://github.com/sympy/sympy/issues/19178#issuecomment-674534058).', 'comment_created': datetime.datetime(2020, 8, 22, 11, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475082163, 'comment_body': ""Maybe this isn't exactly the right place to add the call: it could be in `strong_component_solver`. I'm not sure because the control flow has become quite confusing.\r\n\r\nIt shouldn't create a cyclic call because `dsolve` will only call `dsolve_system` when there are multiple ODEs and `dsolve_system` will only call `dsolve` for a single ODE. There will be a cyclic import but that is resolvable using a delayed import.\r\n\r\nThe code in `dsolve` for single ODEs has a lot of cases for handling different kinds of linear ODEs and also nonlinear ODEs that we cannot recreate in `dsolve_system`. The idea in `dsolve_system` has to be that we reduce problems down to single ODEs and then call into that other code. Ideally the single ODE handling code in `dsolve` would be callable as a function `dsolve_single` rather than recursing into `dsolve` but that is for a future refactoring of the single ODE case."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 45, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475082217, 'comment_body': 'I am adding the call to `dsolve` in `strong_component_solver`. This function is called as soon as we have the system. But this call needs to be replaced later if ever it is decided to best divide the systems at first then trying to solve it as a whole.', 'comment_created': datetime.datetime(2020, 8, 22, 11, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475082410, 'comment_body': 'What would be quickest to do at this stage?', 'comment_created': datetime.datetime(2020, 8, 22, 11, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475082452, 'comment_body': ""I don't want to merge this if it has a possible regression."", 'comment_created': datetime.datetime(2020, 8, 22, 11, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475257905, 'comment_body': 'Why is `check_linear_2eq_order1` still needed?', 'comment_created': datetime.datetime(2020, 8, 23, 19, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475258151, 'comment_body': 'For linear 2 equations order 1 type 6 and type 7 I think. There were some test cases solved by them. One of them is in the doctests of `dsolve`', 'comment_created': datetime.datetime(2020, 8, 23, 19, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475259492, 'comment_body': 'Is type6 not handled by the current solvers? Does type7 actually work? I thought it just produced the bogus solutions with `x0(t)` in them...', 'comment_created': datetime.datetime(2020, 8, 23, 20, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 475259634, 'comment_body': ""I haven't checked for the validity of those solvers yet."", 'comment_created': datetime.datetime(2020, 8, 23, 20, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}, {'comment_id': 475259735, 'comment_body': ""That's fine. Let's focus on simplification now"", 'comment_created': datetime.datetime(2020, 8, 23, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '2e0e269d28cd4a7bef42226f396cff71611b2080', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c1a90be591edbdf878be9d593f83260a6223178', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1819aed769604925df93f9bd210ffada670cfc66', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f831cf4948f5ee8dbd4f68ce51f35a0dcf86b1de', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b674d15005e9f07775f2080b18098910bcaf166', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0321e4f9d022151a8503afebb056b291a13d5f8c', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8003bcb19714cfc036cb4e109f0b8a4c077b41', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36d1914f8f410d90a006af23af63c11e27ccff8', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d39011ca48db057978184821af1e797283a8512', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '502743bf37a98e36ae1e701bdad1f2e3294ac9a5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f5b50780ce20d20e5ea486a406914e4839e37c2', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c52eb61d6f14712b55531dddeff0673e848bb57', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02380d6da326a1d019aa0834fd6283734ac8eaf6', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a3370dff9ff9e9948406d1320c7a59ac3716ef', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa05f1e77c6b5480ae9be99391422c613d92f595', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'def7a6d1164e3296622fdcef5d8b4a106611e0c7', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e64edce13353c522283fc53ed409d75e338e182', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb421558308eb33eb037e112045147874c8bdf9f', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c567b708ff76b9c643bd56d04e8bfce42317251', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78c0421f35f629ba4c488385d948dadf3f79e4e5', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c74fd1df66f0cc48203d4a3d8625052ca73cc5cd', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfd230f633fd874cf73ab596508cbaf8600a27ef', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12
472394362,[GSoC] Simplification for the solutions of systems of ODEs,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* solvers
  * Added simplification strategies for simplifying the solutions of systems of ODEs
<!-- END RELEASE NOTES -->",True,19998,https://api.github.com/repos/sympy/sympy/pulls/19998,https://github.com/sympy/sympy/pull/19998,closed,946,865,3,8,11,2,2,0,"[{'name': 'GSoC'}, {'name': 'solvers.dsolve.system'}]",2020-08-24 09:37:58+00:00,2020-10-02 09:07:11+00:00,3367753.0,"38 days, 23:29:13","[{'comment_id': 479376332, 'comment_body': 'I hope this was for debugging(similarly other such statements)?', 'comment_created': datetime.datetime(2020, 8, 28, 15, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 479380227, 'comment_body': 'Yes, I have removed these lines locally. Forgot to fix up these statements', 'comment_created': datetime.datetime(2020, 8, 28, 15, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mijo2', 'type': 'User'}]","[{'commit_sha': '9805fe3094abf8f153d990086601ec8465d89d6b', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c22b821080abb4e9ed03fef4685a9318c52903d', 'committer_username': 'mijo2', 'committer_name': 'Milan Jolly', 'committer_email': 'milan.jolly18@gmail.com', 'commit_date': datetime.datetime(2017, 2, 8, 18, 24, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31176082c783e07e5d0b0d55872d190fa97584a0', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a497130000f0b1e7a7bf79d5e6da1bb3123bb8f', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0cf59e1c093d071fbf9377b9530759120aff4c', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '668a12dbac5fa172356a50137ac331a838050c78', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb9475279f3e6799eee621fec90530219812e58d', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cac44d61fa45b08614bb0a6cc5898af70a158cd', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}]",Milan Jolly,25644913,milan.jolly18@gmail.com,User,,21,,12,12

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4364,12697,293,1320,58684,5120,14,716,"[{'id': 472394362, 'number': 19998, 'closed': datetime.datetime(2020, 10, 2, 9, 7, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 9, 37, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3367753.0, 'time_delta': '38 days, 23:29:13', 'additions': 946, 'deletions': 865, 'state': 'closed'}, {'id': 456580643, 'number': 19838, 'closed': datetime.datetime(2020, 8, 23, 20, 8, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 25, 7, 23, 31, tzinfo=datetime.timezone.utc), 'time_taken': 2551497.0, 'time_delta': '29 days, 12:44:57', 'additions': 1080, 'deletions': 1323, 'state': 'closed'}, {'id': 448709142, 'number': 19762, 'closed': datetime.datetime(2020, 7, 23, 10, 58, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 7, 47, 24, tzinfo=datetime.timezone.utc), 'time_taken': 789082.0, 'time_delta': '9 days, 3:11:22', 'additions': 297, 'deletions': 80, 'state': 'closed'}, {'id': 447239592, 'number': 19733, 'closed': datetime.datetime(2020, 7, 13, 13, 21, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 5, 47, 54, tzinfo=datetime.timezone.utc), 'time_taken': 286433.0, 'time_delta': '3 days, 7:33:53', 'additions': 469, 'deletions': 488, 'state': 'closed'}, {'id': 443885543, 'number': 19695, 'closed': datetime.datetime(2020, 7, 9, 14, 41, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 6, 52, 33, tzinfo=datetime.timezone.utc), 'time_taken': 546523.0, 'time_delta': '6 days, 7:48:43', 'additions': 485, 'deletions': 195, 'state': 'closed'}, {'id': 440878277, 'number': 19653, 'closed': datetime.datetime(2020, 7, 2, 11, 36, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 7, 51, 49, tzinfo=datetime.timezone.utc), 'time_taken': 445463.0, 'time_delta': '5 days, 3:44:23', 'additions': 754, 'deletions': 230, 'state': 'closed'}, {'id': 436965075, 'number': 19594, 'closed': datetime.datetime(2020, 6, 26, 16, 43, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 8, 25, 46, tzinfo=datetime.timezone.utc), 'time_taken': 634648.0, 'time_delta': '7 days, 8:17:28', 'additions': 479, 'deletions': 122, 'state': 'closed'}, {'id': 419075848, 'number': 19341, 'closed': datetime.datetime(2020, 6, 18, 23, 10, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 17, 7, 51, tzinfo=datetime.timezone.utc), 'time_taken': 2819988.0, 'time_delta': '32 days, 15:19:48', 'additions': 450, 'deletions': 369, 'state': 'closed'}, {'id': 408500934, 'number': 19185, 'closed': datetime.datetime(2020, 5, 14, 23, 6, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 24, 11, 41, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1769109.0, 'time_delta': '20 days, 11:25:09', 'additions': 330, 'deletions': 530, 'state': 'closed'}, {'id': 379282702, 'number': 18720, 'closed': datetime.datetime(2020, 4, 23, 12, 30, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 24, 23, 25, 33, tzinfo=datetime.timezone.utc), 'time_taken': 5058294.0, 'time_delta': '58 days, 13:04:54', 'additions': 1384, 'deletions': 454, 'state': 'closed'}, {'id': 375816885, 'number': 18667, 'closed': datetime.datetime(2020, 4, 4, 7, 56, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 16, 11, 52, 24, tzinfo=datetime.timezone.utc), 'time_taken': 4133046.0, 'time_delta': '47 days, 20:04:06', 'additions': 211, 'deletions': 0, 'state': 'closed'}, {'id': 375034489, 'number': 18651, 'closed': datetime.datetime(2020, 2, 24, 20, 24, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 13, 18, 56, 45, tzinfo=datetime.timezone.utc), 'time_taken': 955682.0, 'time_delta': '11 days, 1:28:02', 'additions': 98, 'deletions': 13, 'state': 'closed'}, {'id': 374212531, 'number': 18641, 'closed': datetime.datetime(2020, 2, 14, 21, 22, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 12, 9, 59, 13, tzinfo=datetime.timezone.utc), 'time_taken': 213781.0, 'time_delta': '2 days, 11:23:01', 'additions': 68, 'deletions': 0, 'state': 'closed'}, {'id': 372389388, 'number': 18596, 'closed': None, 'created': datetime.datetime(2020, 2, 7, 12, 31, 34, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 93, 'deletions': 3, 'state': 'open'}, {'id': 371993227, 'number': 18589, 'closed': datetime.datetime(2020, 2, 14, 9, 59, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 16, 28, 5, tzinfo=datetime.timezone.utc), 'time_taken': 667895.0, 'time_delta': '7 days, 17:31:35', 'additions': 42, 'deletions': 10, 'state': 'closed'}, {'id': 371515725, 'number': 18581, 'closed': datetime.datetime(2020, 2, 5, 21, 39, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 5, 18, 14, 27, tzinfo=datetime.timezone.utc), 'time_taken': 12286.0, 'time_delta': '3:24:46', 'additions': 32, 'deletions': 0, 'state': 'closed'}, {'id': 370225537, 'number': 18557, 'closed': datetime.datetime(2020, 2, 14, 9, 59, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 3, 9, 59, 38, tzinfo=datetime.timezone.utc), 'time_taken': 950401.0, 'time_delta': '11 days, 0:00:01', 'additions': 21, 'deletions': 5, 'state': 'closed'}, {'id': 370040011, 'number': 18550, 'closed': None, 'created': datetime.datetime(2020, 2, 2, 18, 28, 53, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 252, 'deletions': 1, 'state': 'open'}, {'id': 369919932, 'number': 18532, 'closed': datetime.datetime(2020, 2, 3, 10, 14, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 1, 17, 26, 30, tzinfo=datetime.timezone.utc), 'time_taken': 146905.0, 'time_delta': '1 day, 16:48:25', 'additions': 7, 'deletions': 8, 'state': 'closed'}, {'id': 369194038, 'number': 18518, 'closed': datetime.datetime(2020, 1, 31, 17, 17, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 30, 17, 19, 2, tzinfo=datetime.timezone.utc), 'time_taken': 86302.0, 'time_delta': '23:58:22', 'additions': 8, 'deletions': 4, 'state': 'closed'}, {'id': 368642220, 'number': 18512, 'closed': datetime.datetime(2020, 1, 29, 18, 5, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 29, 16, 11, 49, tzinfo=datetime.timezone.utc), 'time_taken': 6794.0, 'time_delta': '1:53:14', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 367694784, 'number': 18491, 'closed': datetime.datetime(2020, 2, 14, 16, 34, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 20, 44, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1540189.0, 'time_delta': '17 days, 19:49:49', 'additions': 43, 'deletions': 4, 'state': 'closed'}, {'id': 367368346, 'number': 18477, 'closed': datetime.datetime(2020, 1, 29, 10, 10, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 27, 8, 27, 23, tzinfo=datetime.timezone.utc), 'time_taken': 178980.0, 'time_delta': '2 days, 1:43:00', 'additions': 40, 'deletions': 7, 'state': 'closed'}, {'id': 367109676, 'number': 18456, 'closed': datetime.datetime(2020, 1, 25, 12, 42, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 25, 11, 25, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4578.0, 'time_delta': '1:16:18', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 365715519, 'number': 18430, 'closed': None, 'created': datetime.datetime(2020, 1, 22, 7, 59, 10, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 121, 'deletions': 25, 'state': 'open'}, {'id': 365061276, 'number': 18416, 'closed': datetime.datetime(2020, 1, 21, 14, 20, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 21, 1, 55, 19, tzinfo=datetime.timezone.utc), 'time_taken': 44709.0, 'time_delta': '12:25:09', 'additions': 5, 'deletions': 0, 'state': 'closed'}]"
