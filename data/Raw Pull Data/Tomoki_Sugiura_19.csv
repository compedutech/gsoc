pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
668864900,policy: Add ICMP and ICMPv6 support for CNP and CCNP with a feature flag,"Related: #14609

Add `icmps` field to CNP and CCNP, and ICMP communication is allowed/disallowed by setting ICMP-type to that field.
Also this API supports ICMPv6 by setting ""IPv6"" to `family` field.

Internally, this API set ICMP policy by converting it into `port/protocol` format (`type/ICMP`).
Thus, this PR won't change the policy map layout.

Currentlly, this ICMP CNP feature is disabled by default because of the kernel complexity issue, and it is enabled when the ""enable-icmp-rule"" hidden flag is set.

---
Example yaml manifest:

```yaml
apiVersion: ""cilium.io/v2""
kind: CiliumNetworkPolicy
metadata:
  name: ""cnp-icmp""
spec:
  endpointSelector:
    matchLabels:
      org: empire
      class: deathstar
  ingress:
  - fromEndpoints:
    - matchLabels:
        org: empire
    icmps:
    - fields:
      - type: 8
      # ICMPv6
      - type: 128
        family: IPv6
```
",True,16516,https://api.github.com/repos/cilium/cilium/pulls/16516,https://github.com/cilium/cilium/pull/16516,closed,1463,19,26,4,10,88,4,0,"[{'name': 'sig/datapath'}, {'name': 'release-note/major'}, {'name': 'sig/policy'}, {'name': 'ready-to-merge'}]",2021-06-12 13:06:24+00:00,2021-08-18 11:37:16+00:00,5783452.0,"66 days, 22:30:52","[{'comment_id': 651125526, 'comment_body': 'Nit: We should add the copyright headers. Feel free to copy-paste from an existing file, but just be sure to update the year', 'comment_created': datetime.datetime(2021, 6, 14, 17, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 651126480, 'comment_body': '```suggestion\r\n\t// ICMP is a list of ICMP rules identified by type number\r\n\t// which the endpoint subject to the rule is not allowed to connect to.\r\n```\r\n\r\nWould that sound better?', 'comment_created': datetime.datetime(2021, 6, 14, 17, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 651129145, 'comment_body': ""It's probably better to assert against non-zero values, because it would give more confidence that the code has worked properly, as [Go will zero all values](https://tour.golang.org/basics/12) during linking. If the implementation is buggy, it's possible that the test could still pass because the values would be zeroed."", 'comment_created': datetime.datetime(2021, 6, 14, 17, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 651129977, 'comment_body': ""Just curious why we've chosen to call this `ICMPType` rather than `ICMPRule`."", 'comment_created': datetime.datetime(2021, 6, 14, 17, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 651131648, 'comment_body': ""Nit: I think the extra colon near the end is not needed. I'm actually a bit surprised that the code gen tool didn't panic or something :)\r\n```suggestion\r\n\t// +kubebuilder:validation:Maximum=255\r\n\t// +kubebuilder:validation:Minimum=0\r\n```"", 'comment_created': datetime.datetime(2021, 6, 14, 17, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 651739618, 'comment_body': ""It's correctly work without the colon as you say, but It seems the correct format is with the extra colon.\r\nref: https://book.kubebuilder.io/reference/markers/crd-validation.html "", 'comment_created': datetime.datetime(2021, 6, 15, 12, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 651756197, 'comment_body': ""OK I'll set the other number :)"", 'comment_created': datetime.datetime(2021, 6, 15, 12, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 651763856, 'comment_body': ""What do you mean? I'm using `ICMPRule` in the line above."", 'comment_created': datetime.datetime(2021, 6, 15, 12, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 651768844, 'comment_body': 'I see. Thank you :)', 'comment_created': datetime.datetime(2021, 6, 15, 13, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 652082436, 'comment_body': 'Ah interesting. Probably worth going with what is already consistent in the codebase', 'comment_created': datetime.datetime(2021, 6, 15, 19, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 652083196, 'comment_body': 'Ah, nevermind. :)', 'comment_created': datetime.datetime(2021, 6, 15, 19, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 652267183, 'comment_body': ""Yes, I'll remove them :)"", 'comment_created': datetime.datetime(2021, 6, 16, 0, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 661501442, 'comment_body': 'Is `types` the most appropriate name? If we latter extend this with ICMP codes, we will have something like:\r\n```yaml\r\n    - types:\r\n       - type: 3\r\n         code: 9\r\n       - type: 3\r\n         code: 10\r\n```\r\nNot sure of a better name :-/ Worst case we can raise the question on #development or #sig-policy.', 'comment_created': datetime.datetime(2021, 6, 30, 13, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 661502224, 'comment_body': 'This should be `toICMPs` to match `toPorts` and other rules we already support.', 'comment_created': datetime.datetime(2021, 6, 30, 13, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 661507235, 'comment_body': '```suggestion\r\n \tmaxICMPTypes = 40\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 14, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 661512130, 'comment_body': 'I think it would be best to put the tests for ICMP in their own function. That will clarify what is failing in the test output.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 661551926, 'comment_body': 'I wonder if it would be worth wrapping `toICMPs` and `toICMP6s` under a single `toICMPs` field with a `family` subfield. That has the potential to significantly reduce code duplication. /cc @christarazi ', 'comment_created': datetime.datetime(2021, 6, 30, 14, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 661558409, 'comment_body': 'Nit: Seems to be some indentation issues here.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 661559247, 'comment_body': 'We can load only the 1-byte ICMP type instead of loading the whole ICMP header from the packet.', 'comment_created': datetime.datetime(2021, 6, 30, 14, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 661559465, 'comment_body': ""This shift needs a comment to explain what's happening here and why we're not shifting the value in userspace before inserting in the map."", 'comment_created': datetime.datetime(2021, 6, 30, 14, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 661854373, 'comment_body': ""Style nit: I was a bit confused seeing `ICMP` the variable being used as I thought it was somehow referring to `ICMP ICMPRules` from the rules struct. Let's keep this variable lower-case "", 'comment_created': datetime.datetime(2021, 6, 30, 22, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 661858677, 'comment_body': 'Agreed, I think this is a good idea.', 'comment_created': datetime.datetime(2021, 6, 30, 22, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 661896584, 'comment_body': ""Yes, I don't think `types` is the best name.\r\nHowever, currently we don't support ICMP codes or other header's field because there is no usecase, and also we don't have any plan to support them. Thus I think `types` is ok.\r\n\r\nOr, we can name like `HeaderFields`or `attributes`?\r\n\r\nWhat do you think?"", 'comment_created': datetime.datetime(2021, 7, 1, 0, 42, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 661898490, 'comment_body': ""`fields` is used in the [RFC](https://datatracker.ietf.org/doc/html/rfc792), so maybe that's a good option?"", 'comment_created': datetime.datetime(2021, 7, 1, 0, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 661899099, 'comment_body': 'I wonder what the ""to"" means.\r\nSince port number is different for destination and source, we need ""to"".\r\nHowever ICMP type is not, so I don\'t think ""to"" is necessary.', 'comment_created': datetime.datetime(2021, 7, 1, 0, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 661945372, 'comment_body': ""I think it's good idea :)"", 'comment_created': datetime.datetime(2021, 7, 1, 3, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662029251, 'comment_body': '@pchaigno use `family` field like this right?\r\n```yaml\r\n...\r\nspec:\r\n  ingress:\r\n  - fromEndpoints:\r\n    - matchLabels:\r\n        org: empire\r\n    toICMPs:\r\n      family:\r\n        toICMPs:\r\n        - types:\r\n          - type: 8\r\n        toICMP6s:\r\n        - types:\r\n          - type: 128\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 1, 6, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662147201, 'comment_body': 'I was thinking of something like:\r\n```yaml\r\nspec:\r\n  ingress:\r\n  - fromEndpoints:\r\n    - matchLabels:\r\n        org: empire\r\n    toICMPs:\r\n    - fields:\r\n      - family: IPv4\r\n        type: 8\r\n      - family: IPv6\r\n        type: 128\r\n```\r\nNot sure what should be the value for `family:`. Maybe `ICMP` vs. `ICMPv6` is more appropriate?\r\n\r\nAlso, we could make `family: IPv4` the default for brevity.', 'comment_created': datetime.datetime(2021, 7, 1, 9, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662147815, 'comment_body': ""> we don't have any plan to support them.\r\n\r\nWe may support codes in the future."", 'comment_created': datetime.datetime(2021, 7, 1, 9, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662150380, 'comment_body': ""Oh, you're totally right! We probably still need the plural though, even if `icmps` is a bit ugly..."", 'comment_created': datetime.datetime(2021, 7, 1, 9, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662214796, 'comment_body': 'How about `ICMPs`?', 'comment_created': datetime.datetime(2021, 7, 1, 11, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662227252, 'comment_body': 'I think the first letter needs to be lower case.', 'comment_created': datetime.datetime(2021, 7, 1, 12, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662233197, 'comment_body': ""OK, so let's change to `icmps`."", 'comment_created': datetime.datetime(2021, 7, 1, 12, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662233533, 'comment_body': 'I think the unwrapped format is better.\r\nAs you said, we can reduce codes by wrapping them, but I like current separated style because it is simpler and easy to read.', 'comment_created': datetime.datetime(2021, 7, 1, 12, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662236082, 'comment_body': 'Then maybe we can find some other way to reduce code duplication?', 'comment_created': datetime.datetime(2021, 7, 1, 12, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662236408, 'comment_body': 'We can always change latter (until the v1.11 release) based on feedback from others :-)', 'comment_created': datetime.datetime(2021, 7, 1, 12, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662244650, 'comment_body': ""Ah... to reduce codes I think your idea is the best.\r\nIn my thought, ICMP and ICMPv6 are completely different things, so I wanted to separate. But I'm starting to think wrapped style is good.\r\nIntroduce `family` field makes the manifest complicated but not so much and the amount of codes we'll reduce is so much."", 'comment_created': datetime.datetime(2021, 7, 1, 12, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662246867, 'comment_body': ""And if it defaults to IPv4 family, then it shouldn't be more complicated for the most common cases.\r\n\r\nI agree ideally it might be best to separate ICMP and ICMPv6 because they are different protocols but at the same time they both have types and codes :shrug: One could argue it's the same as having UDP and TCP under the same `toPorts` field.\r\n\r\nIf in doubt, we can always raise it on e.g. #sig-policy or #networkpolicy on Slack."", 'comment_created': datetime.datetime(2021, 7, 1, 12, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662464984, 'comment_body': ""There's still some misalignment here compared to the lines above, no?"", 'comment_created': datetime.datetime(2021, 7, 1, 17, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662467681, 'comment_body': 'I think we can merge the ICMP and ICMPv6 blocks because the `type` field is at the same offset for both. It may also help for the complexity issue on 4.9.', 'comment_created': datetime.datetime(2021, 7, 1, 17, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662471738, 'comment_body': ""I'd rather we make such checks in userspace, mostly because:\r\n1. If we can move complexity to userspace without cost, we should.\r\n2. We will likely want to add support for ICMP codes later on and in that case the type needs to be on the 8 upper bits."", 'comment_created': datetime.datetime(2021, 7, 1, 17, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662499058, 'comment_body': 'While checking it against the pattern will work, we can use the `Enum` validation because we only expect two values:\r\n\r\n```suggestion\r\n\t// +kubebuilder:validation:Enum=IPv4;IPv6\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 18, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 662500126, 'comment_body': 'If the JSON name is going to be plural, then let\'s make the field name also plural.\r\n```suggestion\r\n\tICMPs ICMPRules `json:""icmps,omitempty""`\r\n```', 'comment_created': datetime.datetime(2021, 7, 1, 18, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 662744987, 'comment_body': ""I agree with you :)\r\nHowever I don't know how to check it in the userspace.\r\nBecause we get `icmp_type` from `ctx_load_bytes()` and it's always 8bit, so we have to expand it to 16bits in bpf.\r\nDo you have any idea?\r\n"", 'comment_created': datetime.datetime(2021, 7, 2, 5, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662750253, 'comment_body': ""@christarazi I already updated schema version, but it's not enough...?"", 'comment_created': datetime.datetime(2021, 7, 2, 5, 42, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662767123, 'comment_body': 'Watch out for spaces here and in the `}else{` :-)', 'comment_created': datetime.datetime(2021, 7, 2, 6, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662767258, 'comment_body': ""I fixed the left space, but the right space varies from line to line and I don't know where to fit it (so now I input same number of tabs).\r\n"", 'comment_created': datetime.datetime(2021, 7, 2, 6, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662767487, 'comment_body': ""Doesn't it work if you just use `struct iphdr` for both ICMP and ICMPv6 (with a comment to explain they have the type at the same offset)?"", 'comment_created': datetime.datetime(2021, 7, 2, 6, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662768649, 'comment_body': 'You should make it consistent with the lines above (i.e., the comment and definition should be aligned on previous lines).', 'comment_created': datetime.datetime(2021, 7, 2, 6, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662771308, 'comment_body': ""Actually, I don't think we support big-endian architectures in the agent at all: https://github.com/cilium/cilium/blob/v1.10.1/pkg/byteorder/byteorder.go#L70-L79. So it's probably fine to only support little-endian here."", 'comment_created': datetime.datetime(2021, 7, 2, 6, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 662772528, 'comment_body': ""Sure, I'll remove big-endian case."", 'comment_created': datetime.datetime(2021, 7, 2, 6, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662773996, 'comment_body': ""OK, I'll fix it :)"", 'comment_created': datetime.datetime(2021, 7, 2, 6, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662790621, 'comment_body': ""I tried, but it didn't work.\r\nI think the length of ip4 and ip6 is different, so the value of `off` is different. "", 'comment_created': datetime.datetime(2021, 7, 2, 7, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 662800050, 'comment_body': ""Ah, right. You still need the two structures for `ip6->nexthdr` :disappointed: \r\nYou could still move the `revalidate_data` out but I'm not sure that will buy us a lot w.r.t. the complexity. The compiler should be able to do the same."", 'comment_created': datetime.datetime(2021, 7, 2, 7, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 663165056, 'comment_body': ""Ah, I somehow didn't notice it. Let's update it to 1.23.4 instead."", 'comment_created': datetime.datetime(2021, 7, 2, 17, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 668093079, 'comment_body': ""Why is casting not enough to convert from 1 byte to 2 bytes? What's special about the other 8 bits? That would be good to clarify in this comment."", 'comment_created': datetime.datetime(2021, 7, 12, 16, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 669296712, 'comment_body': 'This is because of byte order. In the little-endian case, for example 2byte data ""AB"" convert to ""BA"", so we should shifting the ""type"" not just casting. \r\nI commented about it in the line above, but it may not be the best explanation. So, you mean it should be more specific?', 'comment_created': datetime.datetime(2021, 7, 14, 5, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 669919531, 'comment_body': 'Could you add the clarifying comment here about the shifting and the byteorder?', 'comment_created': datetime.datetime(2021, 7, 14, 20, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 670252479, 'comment_body': 'Nit: \r\n```suggestion\r\n// GetPortProtocols generates PortProtocol slice from ICMPRule and return it.\r\n```\r\nSame for the other functions below.', 'comment_created': datetime.datetime(2021, 7, 15, 8, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 670261702, 'comment_body': ""Note I don't think the policies loaded by previous tests were all removed. Maybe we should fix that in a separate commit? Otherwise the ICMPs could be allowed by some L3 rule."", 'comment_created': datetime.datetime(2021, 7, 15, 8, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 670265632, 'comment_body': '```suggestion\r\n\t\tif (proto == IPPROTO_ICMP) {\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 8, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 670266367, 'comment_body': '```suggestion\r\n\t\t} else {\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 8, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 670406845, 'comment_body': 'I agree, but what does ""in a separate commit"" mean? Don\'t we fix and update the existing commit?\r\nAlso, do you think we should fix it by using another `It()` for ICMP testing?', 'comment_created': datetime.datetime(2021, 7, 15, 12, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 670434650, 'comment_body': '> I agree, but what does ""in a separate commit"" mean?\r\n\r\nIMO it\'s not really an issue introduced by your code, so it could be in a separate commit.\r\n\r\n>  Also, do you think we should fix it by using another `It()` for ICMP testing?\r\n\r\nAnother `It` block would also work. It has the advantage of clearly indicating what failed when it failed :-)\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 12, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 670541931, 'comment_body': ""I see, so now I'll divide it by another `It`.\r\nAnd if an issue occur, let's fix it in a separate commit : )"", 'comment_created': datetime.datetime(2021, 7, 15, 14, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 670747429, 'comment_body': '```suggestion\r\n\t\t\tif (icmphdr.type == ICMP_DEST_UNREACH &&\r\n\t\t\t    icmphdr.code == ICMP_FRAG_NEEDED)\r\n```', 'comment_created': datetime.datetime(2021, 7, 15, 19, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 670953415, 'comment_body': 'Removing the policies at the end of the test is already happening from the \r\n```go\r\n\t\tAfterEach(func() {\r\n\t\t\tcmd := fmt.Sprintf(""%s delete --all cnp,ccnp,netpol -n %s"", helpers.KubectlCmd, namespaceForTest)\r\n\t\t\t_ = kubectl.Exec(cmd)\r\n\t\t})\r\n```\r\nso I don\'t think an additional commit is necessary.', 'comment_created': datetime.datetime(2021, 7, 16, 4, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 670968241, 'comment_body': ""Neither do I. Now I divided ICMP tests and others by `It` blocks, so probably we don't have to worried about that since the `AfterEach` was executed before ICMP `It` block starts."", 'comment_created': datetime.datetime(2021, 7, 16, 5, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 673857270, 'comment_body': '`returns`', 'comment_created': datetime.datetime(2021, 7, 21, 10, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 673857383, 'comment_body': '`returns`', 'comment_created': datetime.datetime(2021, 7, 21, 10, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 673857800, 'comment_body': '`if err := f(&ir[i]); err != nil {`?', 'comment_created': datetime.datetime(2021, 7, 21, 10, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 673869139, 'comment_body': '```suggestion\r\nLimit ICMP/ICMPv6 types\r\n-----------------------\r\n```\r\n\r\nAlso, note that there are titles at different levels under the `Layer 4 Examples`. The current hierarchy is:\r\n```\r\nLayer 4 Examples\r\n        - Limit ingress/egress ports\r\n                - Example (L4)\r\n                - Labels-dependent Layer 4 rule\r\n                - CIDR-dependent Layer 4 Rule\r\n```\r\n\r\nWith your changes, you turn it like this:\r\n```\r\nLayer 4 Examples\r\n        - Limit ingress/egress ports\r\n                - Example (L4)\r\n        - Limit ICMP/ICMPv6 types\r\n                - Example (ICMP/ICMPv6)\r\n                - Labels-dependent Layer 4 rule\r\n                - CIDR-dependent Layer 4 Rule\r\n```\r\n\r\nThis places the last two sub-subsections under your ICMP documentation, which is likely not what you want. You should probably move your subsection at the end, below the `CIDR-dependent Layer 4 Rule`.', 'comment_created': datetime.datetime(2021, 7, 21, 10, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 673874557, 'comment_body': 'Please wrap the line.', 'comment_created': datetime.datetime(2021, 7, 21, 11, 2, 7, tzinfo=datetime.timezone.utc), 'commenter': 'qmonnet', 'type': 'User'}, {'comment_id': 673895022, 'comment_body': ""Oh, thank you!\r\nYes, I'll put it under the CIDR section :)"", 'comment_created': datetime.datetime(2021, 7, 21, 11, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 677597915, 'comment_body': 'nit: `sanitize` implies that `ir` is sanitized, i.e. modified. `verify` would probably be a better name.', 'comment_created': datetime.datetime(2021, 7, 27, 16, 8, 11, tzinfo=datetime.timezone.utc), 'commenter': 'twpayne', 'type': 'User'}, {'comment_id': 677599312, 'comment_body': 'Should this be `return found, err` for consistency with the previous code in this function?', 'comment_created': datetime.datetime(2021, 7, 27, 16, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'twpayne', 'type': 'User'}, {'comment_id': 677599499, 'comment_body': 'Same comment re `return found, err`.', 'comment_created': datetime.datetime(2021, 7, 27, 16, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'twpayne', 'type': 'User'}, {'comment_id': 679225056, 'comment_body': 'I think we should remove this sentence. It\'s just the usual ""loading a policy switches policy enforcement into default-deny"". It\'s also already explained in the previous section where it makes more sense to insist on that (given some folks expect ICMP to always be allowed).', 'comment_created': datetime.datetime(2021, 7, 29, 14, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 680315106, 'comment_body': 'Yes, but considering the people who only read this ICMP section, we should leave this sentence?', 'comment_created': datetime.datetime(2021, 7, 31, 6, 8, 5, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 681138208, 'comment_body': ""Ah, I didn't realize that only `ToPorts` would be relevant here. In that case, we could probably make this msg a bit more specific.\r\n\r\n```\r\nThe ICMPs block may only be present without ToPorts. Define a separate rule to use ToPorts.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 2, 17, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 681138631, 'comment_body': 'I think we can use the `ErrorMatches` matcher here to assert on the actual error returned', 'comment_created': datetime.datetime(2021, 8, 2, 17, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 687172650, 'comment_body': '```suggestion\r\n\tif len(e.ICMPs) > 0 && !option.Config.EnableICMPRule {\r\n\t\treturn fmt.Errorf(""ICMP rules can only be applied when the %q flag is set"", option.EnableICMPRule)\r\n\t}\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 20, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 687172965, 'comment_body': ""We don't need to import viper to do this check, all the options are loaded in `option.Config`."", 'comment_created': datetime.datetime(2021, 8, 11, 20, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 687174008, 'comment_body': '```suggestion\r\n\tflags.Bool(option.EnableICMPRules, false, ""Enable ICMP-based rule support for Cilium Network Policies"")\r\n\tflags.MarkHidden(option.EnableICMPRules)\r\n\toption.BindEnv(option.EnableICMPRules)\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 20, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 687174487, 'comment_body': '```suggestion\r\n\tEnableICMPRules = ""enable-icmp-rules""\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 20, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 688036176, 'comment_body': '```suggestion\r\n\t// EnableICMPRules enables ICMP-based rule support for Cilium Network Policies.\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 19, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 688036515, 'comment_body': ""I think we can remove this notes from the PR. Instead, after the PR is merged, let's open a new issue and reference this PR in it."", 'comment_created': datetime.datetime(2021, 8, 12, 19, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'christarazi', 'type': 'User'}, {'comment_id': 1523730136, 'comment_body': 'Just a heads up, the statement about not supporting big-endian is incorrect. The endian check is done inside the swap functions:\r\n\r\nhttps://github.com/cilium/cilium/blob/e6f34c3c98fe2e247fde581746e552d8cb18c33c/pkg/byteorder/byteorder.go#L42-L43', 'comment_created': datetime.datetime(2024, 3, 13, 18, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'joestringer', 'type': 'User'}]","[{'commit_sha': '80267222e5cadbb27123e39612376206d480ea80', 'committer_username': 'chez-shanpu', 'committer_name': 'Tomoki Sugiura', 'committer_email': 'tomoki.sugiura@mail.shanpu.info', 'commit_date': datetime.datetime(2017, 8, 10, 5, 19, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5035d240161b625999653fb4e00a604e7a34f60', 'committer_username': 'chez-shanpu', 'committer_name': 'Tomoki Sugiura', 'committer_email': 'tomoki.sugiura@mail.shanpu.info', 'commit_date': datetime.datetime(2017, 8, 10, 5, 19, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '366749fd4c3192d3914f9da810cbc79696e1a05c', 'committer_username': 'chez-shanpu', 'committer_name': 'Tomoki Sugiura', 'committer_email': 'tomoki.sugiura@mail.shanpu.info', 'commit_date': datetime.datetime(2017, 8, 10, 5, 19, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1118a98727b0f3e554f1bb15ba419c750ca74d73', 'committer_username': 'chez-shanpu', 'committer_name': 'Tomoki Sugiura', 'committer_email': 'tomoki.sugiura@mail.shanpu.info', 'commit_date': datetime.datetime(2017, 8, 10, 5, 19, 37, tzinfo=datetime.timezone.utc)}]",Tomoki Sugiura,30888767,tomoki.sugiura@mail.shanpu.info,User,,59,,51,59
696517450,policy: Fix `cilium policy trace` output when only deny rules are applied,"Currently, deny rules are not counted in `*Repository.GetRulesMatching()`.
Therefore, this function returns false even though a rule is applied if it is a deny rule.
This causes a wrong output of `policy trace` commnad in some cases.

This PR makes this function to count ingress/egress deny rules.
Also, update the e2e test case for checking `policy trace` works correctly when there is only a deny rule exists.",True,16991,https://api.github.com/repos/cilium/cilium/pulls/16991,https://github.com/cilium/cilium/pull/16991,closed,74,0,2,1,3,5,3,0,"[{'name': 'kind/bug'}, {'name': 'release-note/bug'}, {'name': 'ready-to-merge'}]",2021-07-25 15:11:35+00:00,2021-08-02 13:41:54+00:00,685819.0,"7 days, 22:30:19","[{'comment_id': 676556938, 'comment_body': 'Could we extend the unit tests in `pkg/policy/repository_deny_test.go` to cover this?', 'comment_created': datetime.datetime(2021, 7, 26, 12, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 676557775, 'comment_body': ""I'm not sure this change is correct. If we don't have a L3 allow policy for the L3 deny test, then everything is denied and we're not really testing the deny policy. /cc @aanm \r\n\r\n(FYI, if we keep this, it should be in a separate commit as AFAIU, it's independent from the change above.)"", 'comment_created': datetime.datetime(2021, 7, 26, 12, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pchaigno', 'type': 'User'}, {'comment_id': 676577769, 'comment_body': ""Correct. We shouldn't remove the L3 allow policy. Well, it might make sense to test without a L3 allow policy and with a L3 allow policy. On both cases the traffic should be dropped."", 'comment_created': datetime.datetime(2021, 7, 26, 12, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aanm', 'type': 'User'}, {'comment_id': 676583033, 'comment_body': ""I see. I'll fix it :)"", 'comment_created': datetime.datetime(2021, 7, 26, 13, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}, {'comment_id': 680856748, 'comment_body': 'Duplicate lines', 'comment_created': datetime.datetime(2021, 8, 2, 10, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'chez-shanpu', 'type': 'User'}]","[{'commit_sha': '3bf8b600fbcc19c1856b50ce306be7764c04b049', 'committer_username': 'chez-shanpu', 'committer_name': 'Tomoki Sugiura', 'committer_email': 'tomoki.sugiura@mail.shanpu.info', 'commit_date': datetime.datetime(2017, 8, 10, 5, 19, 37, tzinfo=datetime.timezone.utc)}]",Tomoki Sugiura,30888767,tomoki.sugiura@mail.shanpu.info,User,,59,,51,59
709130663,policy: Add e2e test for ICMP CNP,"Related: #14609

Add e2e test for ICMP Cilium Network Policies.
Note: this PR should be merged after ICMP CNP is implemented without a feature flag.

",False,17135,https://api.github.com/repos/cilium/cilium/pulls/17135,https://github.com/cilium/cilium/pull/17135,closed,217,0,5,1,1,0,1,0,[{'name': 'dont-merge/needs-release-note-label'}],2021-08-11 15:21:45+00:00,2022-06-12 09:03:53+00:00,26329328.0,"304 days, 17:42:08",[],"[{'commit_sha': 'fcc6a597687407c23a03cb765f707294e83262ae', 'committer_username': 'chez-shanpu', 'committer_name': 'Tomoki Sugiura', 'committer_email': 'tomoki.sugiura@mail.shanpu.info', 'commit_date': datetime.datetime(2017, 8, 10, 5, 19, 37, tzinfo=datetime.timezone.utc)}]",Tomoki Sugiura,30888767,tomoki.sugiura@mail.shanpu.info,User,,59,,51,59
709130811,docs: update documents for ICMP CNP,"Related: #14609

Add the section for ICMP/ICMPv6 policy in the ""Layer 4 Eexamples"" chapter.
Note: this PR should be merged after ICMP CNP is implemented without a feature flag.",False,17136,https://api.github.com/repos/cilium/cilium/pulls/17136,https://github.com/cilium/cilium/pull/17136,closed,76,0,3,1,1,0,2,0,"[{'name': 'area/documentation'}, {'name': 'release-note/misc'}]",2021-08-11 15:21:50+00:00,2022-06-12 09:03:31+00:00,26329301.0,"304 days, 17:41:41",[],"[{'commit_sha': '8c34d4e8ffee96a86c0e609d243a9170bbeb3989', 'committer_username': 'chez-shanpu', 'committer_name': 'Tomoki Sugiura', 'committer_email': 'tomoki.sugiura@mail.shanpu.info', 'commit_date': datetime.datetime(2017, 8, 10, 5, 19, 37, tzinfo=datetime.timezone.utc)}]",Tomoki Sugiura,30888767,tomoki.sugiura@mail.shanpu.info,User,,59,,51,59

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
48109239,cilium,cilium/cilium,Go,2849,19567,311,955,33114,1128,685,158,"[{'id': 1762575302, 'number': 31247, 'closed': datetime.datetime(2024, 4, 2, 0, 12, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 8, 8, 55, 25, tzinfo=datetime.timezone.utc), 'time_taken': 2128608.0, 'time_delta': '24 days, 15:16:48', 'additions': 3, 'deletions': 14, 'state': 'closed'}, {'id': 1605892797, 'number': 29231, 'closed': datetime.datetime(2023, 11, 17, 15, 56, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 17, 8, 16, 6, tzinfo=datetime.timezone.utc), 'time_taken': 27635.0, 'time_delta': '7:40:35', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1600088889, 'number': 29155, 'closed': datetime.datetime(2023, 11, 28, 7, 16, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 14, 5, 31, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1215855.0, 'time_delta': '14 days, 1:44:15', 'additions': 30, 'deletions': 19, 'state': 'closed'}, {'id': 1052452713, 'number': 21269, 'closed': datetime.datetime(2022, 9, 17, 2, 18, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 11, 9, 5, 18, tzinfo=datetime.timezone.utc), 'time_taken': 493986.0, 'time_delta': '5 days, 17:13:06', 'additions': 129, 'deletions': 235, 'state': 'closed'}, {'id': 964950173, 'number': 20174, 'closed': datetime.datetime(2022, 6, 15, 9, 1, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 12, 9, 1, 59, tzinfo=datetime.timezone.utc), 'time_taken': 259164.0, 'time_delta': '2 days, 23:59:24', 'additions': 297, 'deletions': 2, 'state': 'closed'}, {'id': 759301643, 'number': 17620, 'closed': datetime.datetime(2021, 10, 22, 6, 4, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 15, 15, 31, 12, tzinfo=datetime.timezone.utc), 'time_taken': 570798.0, 'time_delta': '6 days, 14:33:18', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 709130811, 'number': 17136, 'closed': datetime.datetime(2022, 6, 12, 9, 3, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 15, 21, 50, tzinfo=datetime.timezone.utc), 'time_taken': 26329301.0, 'time_delta': '304 days, 17:41:41', 'additions': 76, 'deletions': 0, 'state': 'closed'}, {'id': 709130663, 'number': 17135, 'closed': datetime.datetime(2022, 6, 12, 9, 3, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 15, 21, 45, tzinfo=datetime.timezone.utc), 'time_taken': 26329328.0, 'time_delta': '304 days, 17:42:08', 'additions': 217, 'deletions': 0, 'state': 'closed'}, {'id': 696517450, 'number': 16991, 'closed': datetime.datetime(2021, 8, 2, 13, 41, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 15, 11, 35, tzinfo=datetime.timezone.utc), 'time_taken': 685819.0, 'time_delta': '7 days, 22:30:19', 'additions': 74, 'deletions': 0, 'state': 'closed'}, {'id': 668864900, 'number': 16516, 'closed': datetime.datetime(2021, 8, 18, 11, 37, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 13, 6, 24, tzinfo=datetime.timezone.utc), 'time_taken': 5783452.0, 'time_delta': '66 days, 22:30:52', 'additions': 1463, 'deletions': 19, 'state': 'closed'}, {'id': 596588328, 'number': 15398, 'closed': datetime.datetime(2021, 4, 9, 21, 59, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 19, 13, 51, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1843679.0, 'time_delta': '21 days, 8:07:59', 'additions': 113, 'deletions': 19, 'state': 'closed'}]"
