pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1370228519,12-Bit Support,"This PR adds support for 12-bit colour.

This is a draft as the tests are currently failing. Below shows a still from 12b444vvc1_B_Sony_2. There appears to be some coloured artefacts on the centre and left of the screen. Without wishing to jump to conclusions, I suspect this is an issue with the inter-prediction code.

<img width=""1463"" alt=""Screenshot 2023-05-30 at 10 57 19"" src=""https://github.com/ffvvc/FFmpeg/assets/6375868/36667b51-30ad-471b-b525-1f4a2b21a3d2"">

When using a bit depth higher than 10, the standard allows a bitstream to include the range extension in the SPS. In practice, most do this as this is required to enable the `sps_extended_precision_flag`, which increases dynamic range. There are, however, a handful of conformance bitstreams which use 12-bit colour without the range extension:
* 12b420Ivvc1_A_InterDigital_2
* 12b420SPvvc1_A_KDDI_2
* 12b420vvc1_A_Alibaba_2
* 12b444Ivvc1_A_Alibaba_2
* 12b444SPvvc1_A_Alibaba_2
* 12b444vvc1_A_Sony_2
* 12b444vvc1_B_Sony_2
* 12b444vvc1_C_Sony_2
* 12b444vvc1_D_Sony_2
* 12b444vvc1_E_Sony_2

In future, to make the most of the increased bit depths, we will likely want to implement the range extension, however this will require more substantial changes to the transform code and so is left to another PR. I have created #83 to track this.",True,84,https://api.github.com/repos/ffvvc/FFmpeg/pulls/84,https://github.com/ffvvc/FFmpeg/pull/84,closed,24,4,4,4,6,1,0,0,[],2023-05-30 10:48:45+00:00,2023-06-02 07:51:39+00:00,248574.0,"2 days, 21:02:54","[{'comment_id': 1210244373, 'comment_body': 'please help split it to to 4 commits, \r\ncbs, parser, ps, and dsp. \r\n\r\nthank you ', 'comment_created': datetime.datetime(2023, 5, 30, 13, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}]","[{'commit_sha': 'fd66ab84f91725853c87a87452663f5d60a67a4d', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b0aabc34e7241fe3973143ce0f6ab087cc9056d', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95c2ca7eae065329a2dcec30632e1d99c239d7d1', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26832ae040dfff88e32738221be0ec127bab2bd6', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}]",,6375868,post@frankplowman.com,User,,29,,4,8
1392777981,Range extension,"This PR implements the VVCv2 range extension, which allows for increased dynamic ranges. This PR is branched off #90 for the time-being, but can be rebased if we find a better solution on resolution of [VVC #1602](https://jvet.hhi.fraunhofer.de/trac/vvc/ticket/1602).

The range extension is made up of five parts. The status of each of these in this branch is as below:
- [x] `extended_precision_flag`
- [x]  `ts_residual_coding_rice_present_in_sh_flag`
- [x] `rrc_rice_extension_flag`
- [x] `persistent_rice_adaptation_enabled_flag`
- [x] `reverse_last_sig_coeff_enabled_flag`

Additionally, the the range extension syntax elements have been added to the CBS and parsed. See the table in https://github.com/ffvvc/FFmpeg/issues/83#issuecomment-1575658232 for which bitstreams test which features.",True,91,https://api.github.com/repos/ffvvc/FFmpeg/pulls/91,https://github.com/ffvvc/FFmpeg/pull/91,closed,294,58,13,15,18,30,0,0,[],2023-06-14 16:57:33+00:00,2023-06-22 01:06:21+00:00,634128.0,"7 days, 8:08:48","[{'comment_id': 1232950491, 'comment_body': 'Hard to read. \r\nmaybe you can use a for loop\r\n```\r\nfor (int i = 0;  i <  FF_ARRAYS_ELEMENTS(tx) - 1; i++) {\r\n    if (loc_sum_abs  < tx[i])\r\n         break;\r\n}\r\nshift_val  = rx[i];\r\n```', 'comment_created': datetime.datetime(2023, 6, 17, 4, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232952558, 'comment_body': 'how about \r\nbase_level[][][] = { \r\n   { {4, 4},  {4, 4},\r\n   { {2, 1},  {3, 2} };\r\n\r\nthen we use \r\nbase_level[sps->rrc_rice_extension_flag][sps->bit_depth > 12] [sh->slice_type == VVC_SLICE_TYPE_I]\r\n  ', 'comment_created': datetime.datetime(2023, 6, 17, 4, 23, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232953539, 'comment_body': 'Please align with other vvc functions, indent 4 spaces for the second line', 'comment_created': datetime.datetime(2023, 6, 17, 4, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232953694, 'comment_body': 'indent', 'comment_created': datetime.datetime(2023, 6, 17, 4, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232953852, 'comment_body': 'Please strictly follow spec, define this gci_num_addtional_bits\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 17, 4, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232955138, 'comment_body': 'not needed, entire sps buffer zeroed by https://github.com/ffvvc/FFmpeg/blob/main/libavcodec/vvc/vvc_ps.c#L1168', 'comment_created': datetime.datetime(2023, 6, 17, 4, 35, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232955916, 'comment_body': 'replace reserved_zero_bit[i] to gci_served_bit[i]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 17, 4, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232957606, 'comment_body': 'not needed since sps are zeroed', 'comment_created': datetime.datetime(2023, 6, 17, 4, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232957833, 'comment_body': 'better write to ""const int range_extension_flag"", this will tell reader, the range_extension_flag only used in the if', 'comment_created': datetime.datetime(2023, 6, 17, 4, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232958061, 'comment_body': 'maybe you can use  -(1 << sps->log2_transform_range)', 'comment_created': datetime.datetime(2023, 6, 17, 4, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232959942, 'comment_body': 'not neded', 'comment_created': datetime.datetime(2023, 6, 17, 4, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232959957, 'comment_body': 'not needed', 'comment_created': datetime.datetime(2023, 6, 17, 4, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232960116, 'comment_body': 'can we pass log2_transform_range instead of coeff_min and coeff_ max?', 'comment_created': datetime.datetime(2023, 6, 17, 4, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1232960380, 'comment_body': 'can we use av_clip_intp2(coeff,  log2_transform_range) here?', 'comment_created': datetime.datetime(2023, 6, 17, 4, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233064002, 'comment_body': 'I thought this too, we could even use `av_clip_intp2(val, sps->log2_transform_range)` â€“ the spec does not define CoeffMin and CoeffMax with reference to Log2TransformRange though so I thought it best to copy that exactly.', 'comment_created': datetime.datetime(2023, 6, 17, 13, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'frankplow', 'type': 'User'}, {'comment_id': 1233176541, 'comment_body': ""To follow all other files' styles. Please move && to the upper lines. "", 'comment_created': datetime.datetime(2023, 6, 18, 2, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233177288, 'comment_body': 'The int conversion is not needed. The return type of av_log is int.\r\n\r\nWe usually break ternary operator like [this]:(https://github.com/FFmpeg/FFmpeg/blob/c44fe101603dbe1e788079f4a798eeca13dbedcd/libavcodec/av1dec.c#L733)\r\n', 'comment_created': datetime.datetime(2023, 6, 18, 2, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233177890, 'comment_body': ""how about  at the function start and do\r\n\r\n```\r\nint local_sum = 3 * hist_value\r\n...\r\nif (xc < w -2)\r\n  local_sum += level[2] - hist_value\r\n\r\n```\r\n\r\n\r\nit's more readable than multiple if else, and it has a performance benefit \r\n"", 'comment_created': datetime.datetime(2023, 6, 18, 2, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233177909, 'comment_body': 'same as above ', 'comment_created': datetime.datetime(2023, 6, 18, 2, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233189652, 'comment_body': 'seems rx[i] == av_log2(tx[i]) - 4;\r\n\r\nmaybe we can use it to do some optimizations.  like:\r\n const int rx[] = [0, 0, 0, 0, 2, 2, 4, 4, 8, 8]\r\nshift_val = rx[av_log2(FF_MIN(loc_sum_abs, 2048))]\r\n', 'comment_created': datetime.datetime(2023, 6, 18, 4, 36, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233191433, 'comment_body': 'convert to int is not needed.\r\nupdate define a function for the entire if\r\nlike ep_update_hist(EntryPoint *ep, ResidualCoding *rc, int abs)', 'comment_created': datetime.datetime(2023, 6, 18, 4, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233191570, 'comment_body': 'please add some comment for this code. ', 'comment_created': datetime.datetime(2023, 6, 18, 5, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233192036, 'comment_body': 'break ternary operator like [this](https://github.com/FFmpeg/FFmpeg/blob/c44fe101603dbe1e788079f4a798eeca13dbedcd/libavcodec/av1dec.c#L733)', 'comment_created': datetime.datetime(2023, 6, 18, 5, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233192302, 'comment_body': 'better define a function ep_init_stat_coeff, call it here and in cabac_init_state\r\n', 'comment_created': datetime.datetime(2023, 6, 18, 5, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233193434, 'comment_body': 'we do not need change the function so much, just changer dec_abs_level to int * and move it to last function paramters', 'comment_created': datetime.datetime(2023, 6, 18, 5, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233193605, 'comment_body': 'dec_abs_level is a local variable. better declare it in this if only ', 'comment_created': datetime.datetime(2023, 6, 18, 5, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1233193719, 'comment_body': 'int abs_reminder is better. \r\nIt will tell the user, the abs_remainder was never used in the other places. ', 'comment_created': datetime.datetime(2023, 6, 18, 5, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1234025651, 'comment_body': 'const', 'comment_created': datetime.datetime(2023, 6, 19, 12, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1234027458, 'comment_body': 'you can use\r\n& ~1', 'comment_created': datetime.datetime(2023, 6, 19, 12, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1234032535, 'comment_body': 'how about\r\n```\r\nstatic void ep_update_hist(EntryPoint *ep , ResidualCoding *rc, const int remainder, const int addin) {\r\n    if (rc->update_hist && remainder > 0)\r\n        ep->stat_coeff[c_idx] += (av_log2(remainder)) + addin ) >> 1;\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 19, 13, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}]","[{'commit_sha': 'bfa4fe78f7d520d1f94331f790e64ab40c4a99d1', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b188b896c5faa0eeeabc77e4e6358330a7364dc4', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9382da77c847e83aef2b5caaa1de178ba35bf343', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfe6d6cbeb770f5ccafa985b8ba9fc1202ae2acc', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da483874e928b68296a08f8000b1edbb8a8d7e8a', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5da5caefaf65f433239b4526dc58ca23e64d55db', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e260b7b29091c12e6b3941cb12dbf0c92ae0441', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cfa0015a900f490e3aa4b35a3da6856179fed6e', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f8348431f5a96bd75b91544aee8c0a99dbd38c', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e48e2c74433bba95795b36894c16bbda5d963826', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecb176b01fd0547f107aa9ee7f56dc6c94c4b562', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41ea6f8fd1a29a4a83ed372be90c722e6f25798c', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c92054f09d8c4f6f4d13e67283715366fc443b1d', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7e21b895d3a3f8c7c7a650d3afc32c2cfbb76c8', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '886a9cbfc2cdbb881def84b75365b828fb0a64d9', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}]",,6375868,post@frankplowman.com,User,,29,,4,8
1387543049,Fix 4:4:4 intra prediction ,"It seems as though the `V_DIAG` mode should not be used when using Direct Mode MIP. To be honest, I don't see how this is implemented in the specification, so there's probably a better way to implement this. The only relevant clause I see in the specification is:
>If treeType is equal to SINGLE_TREE, sps_chroma_format_idc is equal to 3, intra_chroma_pred_mode is equal to 4, and IntraMipFlag[ xCb ][ yCb ] is equal to 1, the following applies:
>â€“ The MIP chroma direct mode flag MipChromaDirectFlag[ xCb ][ yCb ] is set equal to 1.
>â€“ The chroma intra prediction mode IntraPredModeC[ xCb ][ yCb ] is set equal to IntraPredModeY[ xCb ][ yCb ].

however this is already implemented and has the additional condition `intra_chroma_pred_mode == 4`.

As is, this fix appears to work however. I will make a PR in [ffvvc/tests](https://github.com/ffvvc/tests) to reflect the tests which now pass later.

This PR will fix #86.",True,90,https://api.github.com/repos/ffvvc/FFmpeg/pulls/90,https://github.com/ffvvc/FFmpeg/pull/90,closed,8,12,2,3,3,7,0,0,[],2023-06-11 13:50:24+00:00,2023-07-31 15:13:42+00:00,4324998.0,"50 days, 1:23:18","[{'comment_id': 1233021679, 'comment_body': 'please give some comments on why we need this workaround and attach the spec issue link https://jvet.hhi.fraunhofer.de/trac/vvc/ticket/1602\r\nthank you', 'comment_created': datetime.datetime(2023, 6, 17, 10, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1278272405, 'comment_body': 'how about define INTRA_INVALID for the enum', 'comment_created': datetime.datetime(2023, 7, 29, 9, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1278291093, 'comment_body': 'Done in 71c1841716c4b7c8778f54a6b9080856577cbac4.\r\n\r\nI think `INTRA_DEFAULT` is a little more fitting as `-1` is now valid - see change to table 20 in spec fix.', 'comment_created': datetime.datetime(2023, 7, 29, 12, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'frankplow', 'type': 'User'}, {'comment_id': 1278305903, 'comment_body': 'invalid is a better name. Because we have no such Intra predict model. \r\nsince it invalid, we fallback to default', 'comment_created': datetime.datetime(2023, 7, 29, 14, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1278305949, 'comment_body': 'else is not needed, you can return INTRA_PLANAR directly. \r\nthank you ', 'comment_created': datetime.datetime(2023, 7, 29, 14, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nuomi2021', 'type': 'User'}, {'comment_id': 1278351254, 'comment_body': 'Done in 6e7b9747700a06ba1427f74aa0050ec70e243338', 'comment_created': datetime.datetime(2023, 7, 29, 17, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'frankplow', 'type': 'User'}, {'comment_id': 1278351270, 'comment_body': 'Done in 6e7b9747700a06ba1427f74aa0050ec70e243338', 'comment_created': datetime.datetime(2023, 7, 29, 17, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'frankplow', 'type': 'User'}]","[{'commit_sha': '78cb3726ae1d9b5150432016fe80739fe40e7dca', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c1841716c4b7c8778f54a6b9080856577cbac4', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e7b9747700a06ba1427f74aa0050ec70e243338', 'committer_username': 'frankplow', 'committer_name': None, 'committer_email': 'post@frankplowman.com', 'commit_date': datetime.datetime(2014, 1, 11, 11, 22, 17, tzinfo=datetime.timezone.utc)}]",,6375868,post@frankplowman.com,User,,29,,4,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
588874307,FFmpeg,ffvvc/FFmpeg,C,12,50,3,2355,113565,37,8,9,"[{'id': 1943084311, 'number': 238, 'closed': None, 'created': datetime.datetime(2024, 6, 27, 19, 58, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 25, 'deletions': 11, 'state': 'open'}, {'id': 1833372708, 'number': 219, 'closed': datetime.datetime(2024, 4, 23, 13, 53, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 21, 15, 52, 18, tzinfo=datetime.timezone.utc), 'time_taken': 165680.0, 'time_delta': '1 day, 22:01:20', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 1706213212, 'number': 191, 'closed': datetime.datetime(2024, 3, 19, 9, 25, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 1, 12, 59, 33, tzinfo=datetime.timezone.utc), 'time_taken': 4047928.0, 'time_delta': '46 days, 20:25:28', 'additions': 94, 'deletions': 21, 'state': 'closed'}, {'id': 1685435265, 'number': 186, 'closed': datetime.datetime(2024, 1, 19, 13, 3, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 18, 19, 41, 26, tzinfo=datetime.timezone.utc), 'time_taken': 62526.0, 'time_delta': '17:22:06', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1685431709, 'number': 185, 'closed': datetime.datetime(2024, 1, 19, 12, 59, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 18, 19, 38, 46, tzinfo=datetime.timezone.utc), 'time_taken': 62460.0, 'time_delta': '17:21:00', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1490979628, 'number': 130, 'closed': None, 'created': datetime.datetime(2023, 8, 27, 14, 19, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1390, 'deletions': 129, 'state': 'open'}, {'id': 1461275722, 'number': 117, 'closed': datetime.datetime(2023, 8, 21, 13, 12, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 11, 10, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1562544.0, 'time_delta': '18 days, 2:02:24', 'additions': 14529, 'deletions': 111, 'state': 'closed'}, {'id': 1440830050, 'number': 114, 'closed': None, 'created': datetime.datetime(2023, 7, 19, 11, 11, 33, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1271, 'deletions': 15, 'state': 'open'}, {'id': 1392777981, 'number': 91, 'closed': datetime.datetime(2023, 6, 22, 1, 6, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 14, 16, 57, 33, tzinfo=datetime.timezone.utc), 'time_taken': 634128.0, 'time_delta': '7 days, 8:08:48', 'additions': 294, 'deletions': 58, 'state': 'closed'}, {'id': 1387543049, 'number': 90, 'closed': datetime.datetime(2023, 7, 31, 15, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 11, 13, 50, 24, tzinfo=datetime.timezone.utc), 'time_taken': 4324998.0, 'time_delta': '50 days, 1:23:18', 'additions': 8, 'deletions': 12, 'state': 'closed'}, {'id': 1370228519, 'number': 84, 'closed': datetime.datetime(2023, 6, 2, 7, 51, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 30, 10, 48, 45, tzinfo=datetime.timezone.utc), 'time_taken': 248574.0, 'time_delta': '2 days, 21:02:54', 'additions': 24, 'deletions': 4, 'state': 'closed'}, {'id': 1332734776, 'number': 71, 'closed': datetime.datetime(2023, 4, 29, 13, 18, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 29, 11, 2, 58, tzinfo=datetime.timezone.utc), 'time_taken': 8146.0, 'time_delta': '2:15:46', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 1315626466, 'number': 66, 'closed': datetime.datetime(2023, 4, 24, 13, 40, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 16, 15, 45, 45, tzinfo=datetime.timezone.utc), 'time_taken': 683691.0, 'time_delta': '7 days, 21:54:51', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1315081423, 'number': 64, 'closed': datetime.datetime(2023, 4, 24, 13, 38, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 15, 12, 53, 11, tzinfo=datetime.timezone.utc), 'time_taken': 780301.0, 'time_delta': '9 days, 0:45:01', 'additions': 8, 'deletions': 9, 'state': 'closed'}, {'id': 1306799222, 'number': 62, 'closed': datetime.datetime(2023, 4, 10, 15, 24, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 9, 17, 6, 18, tzinfo=datetime.timezone.utc), 'time_taken': 80265.0, 'time_delta': '22:17:45', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1299752882, 'number': 57, 'closed': datetime.datetime(2023, 4, 4, 14, 43, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 3, 9, 45, 4, tzinfo=datetime.timezone.utc), 'time_taken': 104329.0, 'time_delta': '1 day, 4:58:49', 'additions': 9, 'deletions': 12, 'state': 'closed'}, {'id': 1287149337, 'number': 52, 'closed': datetime.datetime(2023, 3, 23, 15, 37, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 23, 10, 23, 49, tzinfo=datetime.timezone.utc), 'time_taken': 18814.0, 'time_delta': '5:13:34', 'additions': 46, 'deletions': 7, 'state': 'closed'}]"
