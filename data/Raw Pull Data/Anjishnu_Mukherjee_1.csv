pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1010844931,Fixes #755. Tabular Feature Attribution Tutorial.,"- Changed ```new.css``` to handle info box text ul
- Tutorial contents",True,801,https://api.github.com/repos/PAIR-code/lit/pulls/801,https://github.com/PAIR-code/lit/pull/801,closed,8323,571,17,5,1,13,1,1,[{'name': 'GSOC'}],2022-07-28 13:41:14+00:00,2022-11-14 14:25:39+00:00,9420265.0,"109 days, 0:44:25","[{'comment_id': 936811067, 'comment_body': '```suggestion\r\n- If the selection is empty, LIT samples the “sample size” number of data points from the entire dataset.\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 15, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 936811586, 'comment_body': '```suggestion\r\n- If the sample size is zero or larger than the selection, then LIT computes SHAP for the entire selection and only that selection.\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 15, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 936816728, 'comment_body': '```suggestion\r\n{% include partials/info-box title: \'Interpreting salience polarity\',\r\n  text: ""Salience is always relative to the model’s prediction of one class.\r\nIntuitively, a positive attribution score for a feature of an example means that\r\n if this feature was removed we\r\nexpect a drop in model confidence in the prediction of this class. Similarly,\r\nremoving a feature with a negative score would correspond to an increase in\r\nthe model\'s confidence in the prediction of this class.""%}\r\n```\r\n\r\nUpdated to match the same semantics as the salience maps tutorial.', 'comment_created': datetime.datetime(2022, 8, 3, 15, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 936817710, 'comment_body': '```suggestion\r\nmean, min, median, and max feature values across the examples. The min and max\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 15, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 936818633, 'comment_body': '```suggestion\r\nfilter button for each of the columns to look up a particular feature or value\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 15, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 936818980, 'comment_body': '```suggestion\r\n#### **Faceting & Binning of Features**\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 15, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 936821203, 'comment_body': '```suggestion\r\nenhance our analysis. Salience Maps work on one data point at a time, whereas we\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 15, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 936822784, 'comment_body': '```suggestion\r\nprimary selection (the data point highlighted in a deep cyan hue in the data table) in a slice\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 15, 44, 28, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 936823743, 'comment_body': '```suggestion\r\nattributions for selection”. This allows us to use the salience\r\n```', 'comment_created': datetime.datetime(2022, 8, 3, 15, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 937806588, 'comment_body': '""identification of important features"" reads better than ""import feature identification""', 'comment_created': datetime.datetime(2022, 8, 4, 13, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jameswex', 'type': 'User'}, {'comment_id': 937808294, 'comment_body': 'be sure to add captions', 'comment_created': datetime.datetime(2022, 8, 4, 13, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jameswex', 'type': 'User'}, {'comment_id': 940218787, 'comment_body': ""Leaving captions as TODOs intentionally as we're going to 1) convert some images to GIFs and need to capture the narrative of those GIFs, and 2) annotate the static images using the typical LIT callout styles and will need to write the captions with those annotations in mind."", 'comment_created': datetime.datetime(2022, 8, 8, 13, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 948327715, 'comment_body': 'update title', 'comment_created': datetime.datetime(2022, 8, 17, 19, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jameswex', 'type': 'User'}]","[{'commit_sha': 'd12bcb347e3fcfa6fc90297cbebecaf463897ef2', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a2933498a238e03d073712ba02baedd2021e621', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '194fc8266e17692249a2418d4e45eca3451fc6a6', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae59e62ce14000b50529a9e3455d612b8498956', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '636db0297a9312c66b0b288716f6df0ca8a20d3e', 'committer_username': 'RyanMullins', 'committer_name': 'Ryan Mullins', 'committer_email': 'ryan@ryanmullins.org', 'commit_date': datetime.datetime(2011, 6, 22, 21, 28, 2, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,56
1017507060,Fixes #812. Text Salience Maps Tutorial.,"- Fixed a typo in ```website/package.json```
- Tutorial contents",True,815,https://api.github.com/repos/PAIR-code/lit/pulls/815,https://github.com/PAIR-code/lit/pull/815,closed,390,31,20,11,1,28,1,0,[{'name': 'GSOC'}],2022-08-04 13:06:55+00:00,2022-11-14 14:59:50+00:00,8819575.0,"102 days, 1:52:55","[{'comment_id': 940182623, 'comment_body': '```suggestion\r\nuse a purple scale where darker colors indicate greater salience, whereas the other methods\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940182818, 'comment_body': '```suggestion\r\nAll methods calculate salience, but there are subtle differences in their\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940183785, 'comment_body': '```suggestion\r\nonly produces absolute salience scores while other methods like Grad &dot; Input\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940185210, 'comment_body': '```suggestion\r\n[Grad L2 Norm](https://aclanthology.org/P18-1032/), \r\n[Grad &dot; Input](https://arxiv.org/abs/1412.6815), and \r\n[Integrated Gradients](https://arxiv.org/pdf/1703.01365.pdf) (IG). \r\nGrad L2 Norm and Grad &dot; Input are easy to use and fast to compute, but can suffer from gradient\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940185476, 'comment_body': '```suggestion\r\ndifferent methods - Grad L2 Norm, Grad &dot; Input, Integrated Gradients, and LIME.\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940186659, 'comment_body': '```suggestion\r\nand [Grad &dot; Input](https://arxiv.org/abs/1412.6815), that we need to look out\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940188380, 'comment_body': '```suggestion\r\nLIME has two limitations, compared to gradient-based methods: \r\n\r\n1.  it can be slow as it requires many evaluations of the model, and\r\n2.  it can be noisy on longer inputs where there are more tokens to ablate. \r\n\r\nWe can increase **_the number of samples to be used for LIME_**\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940190348, 'comment_body': '```suggestion\r\ntokenizer, which splits up words into smaller constituents, whereas LIME\r\nsplits the text into words at whitespaces.\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940190980, 'comment_body': '```suggestion\r\nmodule and counterfactual generators to analyze the behavior of the `sst2-tiny`\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 40, 5, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940191208, 'comment_body': '```suggestion\r\nBecause `sst2-tiny` does not have a LSTM architecture, we shouldn’t rely too much\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940191409, 'comment_body': '```suggestion\r\non Grad &dot; Input. So, we are left with Grad L2 Norm, Integrated Gradients and\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940191615, 'comment_body': '```suggestion\r\nTo gain some confidence in our heuristic, we look for examples where Grad &dot;\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940191761, 'comment_body': '```suggestion\r\nthe dataset, for example the sentence below where Grad &dot; Input predicts\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940192860, 'comment_body': '```suggestion\r\n“actress” and “her”. The words “actress” and “her” get a significant weight\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940193377, 'comment_body': '```suggestion\r\nactually causing a small decrease in model confidence for the prediction of this\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940195137, 'comment_body': '```suggestion\r\nthe respective substitutes. Then we assign a `label` to the newly created sentence\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 44, 23, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940197159, 'comment_body': 'Do we want to give some recommendations for the value of `label` here? Seems like we could say `0` when ""tedious"" appears, and `1` when ""exciting"" appears.', 'comment_created': datetime.datetime(2022, 8, 8, 12, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940199657, 'comment_body': '```suggestion\r\n“often” makes the next work in the sentence more impactful, linguistically. The model\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940200006, 'comment_body': '```suggestion\r\nhaving a negative sentiment.\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940202322, 'comment_body': '```suggestion\r\nL2 Norm outputs were comparatively inconclusive, highlighting the need to\r\nselect appropriate methods and compare results between them. The model\r\npredictions were in\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940203008, 'comment_body': '```suggestion\r\nFor example, if there is a failure in production (e.g., wrong results for a search\r\n```', 'comment_created': datetime.datetime(2022, 8, 8, 12, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 940204621, 'comment_body': ""```suggestion\r\ncounterfactuals to support robust exploration of a model's behavior, as\r\nillustrated in this tutorial. And as always, LIT strives to\r\n```"", 'comment_created': datetime.datetime(2022, 8, 8, 12, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'RyanMullins', 'type': 'User'}, {'comment_id': 948318684, 'comment_body': 'extra space after ""which""', 'comment_created': datetime.datetime(2022, 8, 17, 19, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jameswex', 'type': 'User'}, {'comment_id': 948319335, 'comment_body': 'supports 4 methods for the GLUE model under test (with other models it might support a different number of these methods)', 'comment_created': datetime.datetime(2022, 8, 17, 19, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jameswex', 'type': 'User'}, {'comment_id': 948320304, 'comment_body': 'some issue here with repeated text', 'comment_created': datetime.datetime(2022, 8, 17, 19, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jameswex', 'type': 'User'}, {'comment_id': 948323300, 'comment_body': 'probably simpler to generate these counterfactuals by hand in the datapoint editor than through the word replacer given how simple this replacement is and how its on a single  datapoint.', 'comment_created': datetime.datetime(2022, 8, 17, 19, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jameswex', 'type': 'User'}, {'comment_id': 948324257, 'comment_body': '""work""->""word""', 'comment_created': datetime.datetime(2022, 8, 17, 19, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jameswex', 'type': 'User'}, {'comment_id': 948325797, 'comment_body': 'add link to our documentation on adding your own interpreter? https://github.com/PAIR-code/lit/wiki/api.md#interpretation-components', 'comment_created': datetime.datetime(2022, 8, 17, 19, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jameswex', 'type': 'User'}]","[{'commit_sha': '28443bc5544e80e08e2b52839f85389ac39456b5', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c70c9ff6595538e3045c78feefc3503f26f91161', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd50f7aeefa2d1ae6fe518624e643efc49163cd7f', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a6e39fee0446beabe1ee386ef64a19851a165f2', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fac7ee4b5ce434649dbc4e9eebb109da9fcceeb2', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d359798a7e4d667c9bceea933bd0536d63a295a', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a586cd3864d84fd09ebc70247ae7a704f657fe8b', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70bcf7f52cf74b3cb1a0f616d62fc3ffe88ef781', 'committer_username': 'iamshnoo', 'committer_name': 'Anjishnu', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 16, 18, 14, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b585e71c4d92d421cf1627b41f38b063b0cce00e', 'committer_username': 'RyanMullins', 'committer_name': 'Ryan Mullins', 'committer_email': 'ryan@ryanmullins.org', 'commit_date': datetime.datetime(2011, 6, 22, 21, 28, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '757cea549ec2c26e19471d3e7bbbf63351af9a7e', 'committer_username': 'RyanMullins', 'committer_name': 'Ryan Mullins', 'committer_email': 'ryan@ryanmullins.org', 'commit_date': datetime.datetime(2011, 6, 22, 21, 28, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce80cdb6dd2f392145fd035f722269426c28aea', 'committer_username': 'RyanMullins', 'committer_name': 'Ryan Mullins', 'committer_email': 'ryan@ryanmullins.org', 'commit_date': datetime.datetime(2011, 6, 22, 21, 28, 2, tzinfo=datetime.timezone.utc)}]",Anjishnu,45921510,,User,,40,,28,56

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
283215238,lit,PAIR-code/lit,TypeScript,353,3453,67,38,1492,109,98,60,"[{'id': 1017507060, 'number': 815, 'closed': datetime.datetime(2022, 11, 14, 14, 59, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 4, 13, 6, 55, tzinfo=datetime.timezone.utc), 'time_taken': 8819575.0, 'time_delta': '102 days, 1:52:55', 'additions': 390, 'deletions': 31, 'state': 'closed'}, {'id': 1010844931, 'number': 801, 'closed': datetime.datetime(2022, 11, 14, 14, 25, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 13, 41, 14, tzinfo=datetime.timezone.utc), 'time_taken': 9420265.0, 'time_delta': '109 days, 0:44:25', 'additions': 8323, 'deletions': 571, 'state': 'closed'}]"
