pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
475647719,New C++ custom ODEs example,"Proposing the addition of a new example for Cantera's C++ sample code, `custom.cpp`. This example solves a closed-system constant-pressure ignition problem using custom-implemented ODE governing equations, which are solved by CVODES. The actual problem is equivalent to the one solved in the existing [`custom.py`](https://cantera.org/examples/python/reactors/custom.py.html) example, and produces the same results.

This example was created as part of my GSoC project, *Developing a 0-D Steady-State Combustion Solver for Cantera*. The project is ongoing, and progress updates can be found in the [enhancements repository](https://github.com/Cantera/enhancements/issues/31).",True,922,https://api.github.com/repos/Cantera/cantera/pulls/922,https://github.com/Cantera/cantera/pull/922,closed,313,0,5,3,11,9,0,0,[],2020-08-28 21:25:25+00:00,2021-02-23 01:45:00+00:00,15394775.0,"178 days, 4:19:35","[{'comment_id': 579714180, 'comment_body': ""If the goal is for this to show up in the Doxygen docs, the comment should to start with `/*!` or `/**`. Although I'll note that Doxygen isn't currently configured to scan the `samples/cxx` directory, so this doesn't really matter."", 'comment_created': datetime.datetime(2021, 2, 20, 21, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'speth', 'type': 'User'}, {'comment_id': 579714186, 'comment_body': 'I think the Cantera copyright statement should be added here:\r\n```\r\n// This file is part of Cantera. See License.txt in the top-level directory or\r\n// at https://cantera.org/license.txt for license and copyright information.\r\n```', 'comment_created': datetime.datetime(2021, 2, 20, 21, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'speth', 'type': 'User'}, {'comment_id': 579714493, 'comment_body': '```suggestion\r\n     *   - overridden from FuncEval, called by the integrator during simulation.\r\n```\r\nThis appears in several locations.', 'comment_created': datetime.datetime(2021, 2, 20, 21, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'speth', 'type': 'User'}, {'comment_id': 579714652, 'comment_body': ""The ability to use sensitivity analysis isn't implemented here, right? That's fine, but it's probably worth noting that this is the case."", 'comment_created': datetime.datetime(2021, 2, 20, 21, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'speth', 'type': 'User'}, {'comment_id': 579714858, 'comment_body': ""This isn't critical because this is a sample rather than core Cantera code, but we usually prefix member variables with `m_`, which makes it easier to differentiate between members and locals when reading the code in member functions."", 'comment_created': datetime.datetime(2021, 2, 20, 22, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'speth', 'type': 'User'}, {'comment_id': 579715332, 'comment_body': ""I like to recommend the use of `size_t` for these index variables (and for the type of `nSpecies` as well), since that's the type used for sizes in the C++ standard library."", 'comment_created': datetime.datetime(2021, 2, 20, 22, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'speth', 'type': 'User'}, {'comment_id': 579715458, 'comment_body': 'I strongly recommend against using the unbraced (one line) `for` loop construct, here and elsewhere.\r\n```suggestion\r\n        for (int k = 0; k < nSpecies; k++) {\r\n            hdot_vol += hbar[k] * wdot[k];\r\n        }\r\n```\r\n', 'comment_created': datetime.datetime(2021, 2, 20, 22, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'speth', 'type': 'User'}, {'comment_id': 579715683, 'comment_body': 'To avoid a memory leak here, write\r\n```suggestion\r\n    std::unique_ptr<Integrator> integrator(newIntegrator(""CVODE""));\r\n```', 'comment_created': datetime.datetime(2021, 2, 20, 22, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'speth', 'type': 'User'}, {'comment_id': 579715944, 'comment_body': 'In this case, there\'s a fairly easy way to avoid the trailing comma after the last variable on each line:\r\n```suggestion\r\n        outputFile << tnow;\r\n        for (int i = 0; i < odes.neq(); i++) {\r\n            outputFile << "", "" << solution[i];\r\n        }\r\n        outputFile << std::endl;\r\n```', 'comment_created': datetime.datetime(2021, 2, 20, 22, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'speth', 'type': 'User'}]","[{'commit_sha': '72be32b77a1a0772a7bfd1451764b1525a77f296', 'committer_username': 'paulblum', 'committer_name': 'Paul Blum', 'committer_email': 'paul_d_blum@yahoo.com', 'commit_date': datetime.datetime(2014, 7, 31, 2, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55701e5ce1b2d824b6b777c6de186c446af1a079', 'committer_username': 'paulblum', 'committer_name': 'Paul Blum', 'committer_email': 'paul_d_blum@yahoo.com', 'commit_date': datetime.datetime(2014, 7, 31, 2, 43, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3210b47c7adb2e207bccc67b38ee23b4b8a2494', 'committer_username': 'paulblum', 'committer_name': 'Paul Blum', 'committer_email': 'paul_d_blum@yahoo.com', 'commit_date': datetime.datetime(2014, 7, 31, 2, 43, 4, tzinfo=datetime.timezone.utc)}]",Paul Blum,8316042,paul_d_blum@yahoo.com,User,,10,,0,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
32940327,cantera,Cantera/cantera,C++,343,589,39,88,11374,74,11,19,"[{'id': 623566406, 'number': 1021, 'closed': None, 'created': datetime.datetime(2021, 4, 26, 18, 8, 36, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 525, 'deletions': 0, 'state': 'open'}, {'id': 581130942, 'number': 985, 'closed': datetime.datetime(2021, 2, 26, 21, 37, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 26, 21, 37, 25, tzinfo=datetime.timezone.utc), 'time_taken': 25.0, 'time_delta': '0:00:25', 'additions': 208, 'deletions': 2, 'state': 'closed'}, {'id': 475647719, 'number': 922, 'closed': datetime.datetime(2021, 2, 23, 1, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 21, 25, 25, tzinfo=datetime.timezone.utc), 'time_taken': 15394775.0, 'time_delta': '178 days, 4:19:35', 'additions': 313, 'deletions': 0, 'state': 'closed'}, {'id': 442312409, 'number': 889, 'closed': datetime.datetime(2020, 6, 30, 23, 3, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 21, 43, 32, tzinfo=datetime.timezone.utc), 'time_taken': 4824.0, 'time_delta': '1:20:24', 'additions': 4, 'deletions': 12, 'state': 'closed'}, {'id': 441741774, 'number': 887, 'closed': datetime.datetime(2020, 6, 30, 21, 36, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 2, 17, 18, tzinfo=datetime.timezone.utc), 'time_taken': 69548.0, 'time_delta': '19:19:08', 'additions': 338, 'deletions': 216, 'state': 'closed'}, {'id': 319295679, 'number': 709, 'closed': datetime.datetime(2019, 9, 24, 2, 2, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 9, 19, 14, 5, 28, tzinfo=datetime.timezone.utc), 'time_taken': 388626.0, 'time_delta': '4 days, 11:57:06', 'additions': 377, 'deletions': 377, 'state': 'closed'}]"
