pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
965569118,Fix part of #10474: Enable typescript strict mode for all the newly added files and number of errors along with errors log.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #10474.
2. This PR does the following: Enable typescript strict mode for all the newly added files. Explanation [link](https://docs.google.com/document/d/1Hb5Zcp4fNhlWx0tGEzpeiIsis1_UyriizMFOQ-yGPGc/edit?disco=AAAAbGyq7Oc).

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

![Screenshot from 2022-06-13 16-03-58](https://user-images.githubusercontent.com/80846488/173335717-5fea92bf-6353-417a-bc83-c0d44036d858.png)

After removal of file from list

![Screenshot from 2022-06-13 16-10-06](https://user-images.githubusercontent.com/80846488/173336596-5889ff70-84bd-4c0b-aa70-3b44162d12db.png)

Add new file (here change name from directive.ts to component.ts)

![Screenshot from 2022-06-13 16-15-12](https://user-images.githubusercontent.com/80846488/173337556-18c0ae92-4721-4c5a-afad-c5c799e1da80.png)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15578,https://api.github.com/repos/oppia/oppia/pulls/15578,https://github.com/oppia/oppia/pull/15578,closed,944,1116,8,29,29,67,0,2,[],2022-06-13 10:48:20+00:00,2022-06-20 13:35:31+00:00,614831.0,"7 days, 2:47:11","[{'comment_id': 896007883, 'comment_body': 'Use `# pylint: disable=line-too-long, single-line-pragma` and `# pylint: enable=line-too-long, single-line-pragma` at start and end of list instead of adding disable rule at each line individually.', 'comment_created': datetime.datetime(2022, 6, 13, 18, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 896008400, 'comment_body': '```suggestion\r\n# Contains the name of all files that are not strictly typed.\r\n```', 'comment_created': datetime.datetime(2022, 6, 13, 18, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 896009976, 'comment_body': 'what does this comment mean?', 'comment_created': datetime.datetime(2022, 6, 13, 18, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 896010174, 'comment_body': '```suggestion\r\n        # List of missing files that are neither strictly typed nor present in\r\n```', 'comment_created': datetime.datetime(2022, 6, 13, 18, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 896517790, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 14, 8, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 896518037, 'comment_body': 'Done, now more clear', 'comment_created': datetime.datetime(2022, 6, 14, 8, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 896518178, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 14, 8, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 896518276, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 14, 8, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897544457, 'comment_body': 'This seems like a fragile way to filter out the error message lines of interest because the folder names could change down the road. Is there a way to parse the lines without depending on folder names?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897544681, 'comment_body': 'The canonical way to remove duplicates is `set(errors)`', 'comment_created': datetime.datetime(2022, 6, 15, 5, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897545361, 'comment_body': 'This variable name is confusing to me. Maybe `TS_STRICT_EXCLUDE_PATHS`?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897546013, 'comment_body': 'This is a string, not a dict. Also, the parentheses are unnecessary since you can break after `json.dumps(` instead', 'comment_created': datetime.datetime(2022, 6, 15, 5, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897546784, 'comment_body': ""Why not just dump this dictionary directly the JSON file like this:\r\n\r\n```python\r\nwith open(file_name, 'w', encoding='utf-8') as f:\r\n    json.dump(tsconfig_strict_json_dict, f, indent=2, sort_keys=True)"", 'comment_created': datetime.datetime(2022, 6, 15, 5, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897548150, 'comment_body': ""Why do we have to do this twice? I'm not too familiar with how ts compilation works, but my intuition would be that it should be predictable whether running `cmd` produces `COMPILED_JS_DIR`"", 'comment_created': datetime.datetime(2022, 6, 15, 5, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897548761, 'comment_body': 'Ditto: can just dump directly to JSON file with `json.dump`', 'comment_created': datetime.datetime(2022, 6, 15, 5, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897549472, 'comment_body': ""If the checks get aborted part-way through, we should make sure that `tsconfig-strict.json` is restored. Ideally though, it'd be great if we could avoid modifying config files dynamically like this. Is that possible?"", 'comment_created': datetime.datetime(2022, 6, 15, 5, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897550727, 'comment_body': '```suggestion\r\n    def test_no_error_for_valid_compilation_of_tsconfig(self) -> None: # pylint: disable=line-too-long\r\n```\r\n\r\nI think you can shorten the test name to avoid disabling the pylint line length error', 'comment_created': datetime.datetime(2022, 6, 15, 5, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897550823, 'comment_body': 'ditto: shorten test name', 'comment_created': datetime.datetime(2022, 6, 15, 5, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897551006, 'comment_body': 'ditto: shorten test name', 'comment_created': datetime.datetime(2022, 6, 15, 5, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897656760, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 7, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897660124, 'comment_body': ""One more way to find line of interest is by using python regex for format **ts(120,5): => ts(x,y):** but i prefer use of ('core', 'extension', 'typings'), as after completion of strict typescript we are going to remove all those changes of this PR and use only one tsconfig file, inbetween we have no plan of change main parent folders name."", 'comment_created': datetime.datetime(2022, 6, 15, 8, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897661173, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 8, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897664980, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 8, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897684057, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 8, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897684480, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 8, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897830467, 'comment_body': ""This comment doesn't make sense."", 'comment_created': datetime.datetime(2022, 6, 15, 10, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 897831773, 'comment_body': 'Also this list is already defined in `prefixes` variable.', 'comment_created': datetime.datetime(2022, 6, 15, 10, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 897832836, 'comment_body': 'Should the content of this if-block be separated into a function? Otherwise the `else` for this `if` is so far away.', 'comment_created': datetime.datetime(2022, 6, 15, 10, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 897861956, 'comment_body': 'Removed, no need.', 'comment_created': datetime.datetime(2022, 6, 15, 11, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897866472, 'comment_body': 'Not possible, we are working with custom include property. Need to change dynamically, no such feature found in typescript documentation doing same. For check get aborted mid way, to prevent this i am doing two things. Restore include property for next run and add lint check if include property changes.\r\n\r\nUse prefixes.', 'comment_created': datetime.datetime(2022, 6, 15, 11, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897883482, 'comment_body': 'Done, now more clear.', 'comment_created': datetime.datetime(2022, 6, 15, 11, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898050082, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 14, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898105343, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 15, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898105613, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 15, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898105757, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 15, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898707428, 'comment_body': ""Please indent this 4 more spaces so the arguments aren't at the same level as the function code"", 'comment_created': datetime.datetime(2022, 6, 16, 5, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 898709163, 'comment_body': ""Where are you restoring the include property if the check gets aborted? I would expect to see this handled using a context manager (preferably) or using atexit (less preferably), but I don't see that in your code so far"", 'comment_created': datetime.datetime(2022, 6, 16, 5, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 898709699, 'comment_body': ""I feel like the regex approach is more robust without much of a downside, but I'm fine with the current approach if @vojtechjelinek agrees"", 'comment_created': datetime.datetime(2022, 6, 16, 5, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 898743992, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 16, 6, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899089140, 'comment_body': 'Done. Please verify, using context manager for first time.', 'comment_created': datetime.datetime(2022, 6, 16, 13, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899726225, 'comment_body': ""If you're going to un-indent the last line of the function signature, then these lines only need to be indented by 4 spaces"", 'comment_created': datetime.datetime(2022, 6, 17, 3, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899726636, 'comment_body': 'what is this `yield` doing?', 'comment_created': datetime.datetime(2022, 6, 17, 3, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899727250, 'comment_body': 'I thought this was already being handled by the try-except above. Why do we need to do this again?', 'comment_created': datetime.datetime(2022, 6, 17, 3, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899729332, 'comment_body': ""if running script is close in-between(assume we closes the terminal), we can't restore include property. So add this for correct execution of next compilation."", 'comment_created': datetime.datetime(2022, 6, 17, 3, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899731398, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 3, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899740420, 'comment_body': ""Yield represent upto this part we have done setup part without any execution failure, now whatever yield return it will execute (in this we just pass that). If execution fails execute finally part directly.\r\n\r\ncan't we use try expect directly, as we are not yielding anything?"", 'comment_created': datetime.datetime(2022, 6, 17, 3, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899764687, 'comment_body': ""I'm having trouble parsing your comment, but `yield` is only used for generators, and this function isn't a generator. See https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement"", 'comment_created': datetime.datetime(2022, 6, 17, 5, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899765734, 'comment_body': ""It sounds like this code is to handle the case where the script is aborted part-way through such that no cleanup code is allowed to run (e.g. with `kill -9`). I don't think you need to worry about that case. We just want to make sure that if a user uses something like CTRL-C to stop the script but then lets the script end gracefully (e.g. so `finally` blocks still run), we clean up the tsconfig file."", 'comment_created': datetime.datetime(2022, 6, 17, 5, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899854103, 'comment_body': ""I only worry about next run of command. If Include property not restore after kill of terminal.\r\n\r\nIs it true that I don't have to be concerned about that case?"", 'comment_created': datetime.datetime(2022, 6, 17, 7, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899855186, 'comment_body': 'Removed, can you please take a look now. Property is restore after gracefully after we break the script.', 'comment_created': datetime.datetime(2022, 6, 17, 7, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899929823, 'comment_body': 'Should the list be put into a constant?', 'comment_created': datetime.datetime(2022, 6, 17, 9, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899932345, 'comment_body': '```suggestion\r\ndef compile_strict_tsconfig(\r\n    config_path: str, error_messages: List[str]\r\n) -> None:\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 9, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899936030, 'comment_body': ""```suggestion\r\n            print(\r\n                 '%s Errors found during compilation.\\n' % len([x for x in error_messages if x.startswith(prefixes)])\r\n             )\r\n```"", 'comment_created': datetime.datetime(2022, 6, 17, 9, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899936859, 'comment_body': ""I'm fine with both"", 'comment_created': datetime.datetime(2022, 6, 17, 9, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899940916, 'comment_body': 'Should this be put into a constant?', 'comment_created': datetime.datetime(2022, 6, 17, 9, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899997050, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 10, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899997099, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 10, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899997165, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 10, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899997378, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 10, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900016964, 'comment_body': 'Hey, actually thinking about this, we can solve the problem with the file staying modified by instead naming the file differently. So you generate the file from tsconfig-strict.json and from the list of files, then you run the TS check and after that just remove the generated file. You can also add the generated file name to .gitignore so that it is never commited.', 'comment_created': datetime.datetime(2022, 6, 17, 11, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900042532, 'comment_body': 'Means one more separate file look like ts-config file and use that. Delete at last? then no worry about restoration of original one.', 'comment_created': datetime.datetime(2022, 6, 17, 11, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900043956, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2022, 6, 17, 11, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900105075, 'comment_body': 'Done, PTAL', 'comment_created': datetime.datetime(2022, 6, 17, 13, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900106246, 'comment_body': 'No need now, make separate strict ts-config, see [this](https://github.com/oppia/oppia/pull/15578#discussion_r900016964) discussion.', 'comment_created': datetime.datetime(2022, 6, 17, 13, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900106554, 'comment_body': 'No need now, make separate strict ts-config, see [this](https://github.com/oppia/oppia/pull/15578#discussion_r900016964) discussion.', 'comment_created': datetime.datetime(2022, 6, 17, 13, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900388925, 'comment_body': 'I don\'t think ""mock"" is quite right here since this isn\'t a test. Maybe ""temp"" so that if it somehow doesn\'t get cleaned up, people know it\'s a dynamically generated file?', 'comment_created': datetime.datetime(2022, 6, 17, 17, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 900421434, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 18, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}]","[{'commit_sha': 'f856bcdd5f2b1937adb03faa15d3f8d1953aea59', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f0c57a5dacae77cb5bfbbb759b9cb2c3180715f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20eba4d20f54f1c033bbd1941bd045ba284b263a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f57263d2f8c62c17ec370e6b2e077215bc6ae5', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac5751a27ee226e96c3a8f9339184edc696682f1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff8f5018a69f61b9f8441fa9b59911fe655d993e', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24379dd18a7db4126a5626a89cc8d9edf740e9e8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006a0dc17d5e75558f1881fe4cde690e8e2c7a13', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6c7db003b3f2fa0ca37c8109225a5a88c8c9dde', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3313bcde7cffb26c7210c10a144baf0cdb622cf1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e292ee7f8ecc9dde80dc1f5f650b9cb9b4bb45db', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e375974f7199a4db14d5cc7686033425af73d830', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ef9e36d0b3c3bf2a5d4d0ee05c025f9d1dde39', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52043f8154808556c961eb99ca0cf9696d407ad0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1f5c10cac3ddbb654bf5ca9c5894dfff5c2fff', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7d0e14ac464f03c9f7118f57077e87def884d8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f73e110367e9bad973457f8f8af4b993bb5234e9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d769546b421a7ffb5c00b670ec6176348c3a16', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc068d5cc130c9ad34c757a999a358c06b00b0de', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70fa27b67372a419af7960efcaf0b3f7ad64a424', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b445a83c7afa996837abb0c62f0b17050fb97f0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '011db8e3471db9678a83bc512f3de1bca8f7cfaf', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e91b2fb157f7010a2d40047f169fc29269f0eb', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd89de45e42ec258c51f53f467b486ddc8184b83', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb29111de5da0d30ceefecb2c8fc84963e31333', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '087ccd7fbe2a0c32d8d2f5078795413e67eac990', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f6f2171eaff42876756726dc223ffb30a7f4d9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c36105198b8593e625674cd9f6d07f8f5db8349', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d8f391b6a9da0bb00d889207327792f311dda4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}]",JG-11,80846488,,User,,39,,0,21
965569118,Fix part of #10474: Enable typescript strict mode for all the newly added files and number of errors along with errors log.,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #10474.
2. This PR does the following: Enable typescript strict mode for all the newly added files. Explanation [link](https://docs.google.com/document/d/1Hb5Zcp4fNhlWx0tGEzpeiIsis1_UyriizMFOQ-yGPGc/edit?disco=AAAAbGyq7Oc).

## Essential Checklist

- [ ] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

![Screenshot from 2022-06-13 16-03-58](https://user-images.githubusercontent.com/80846488/173335717-5fea92bf-6353-417a-bc83-c0d44036d858.png)

After removal of file from list

![Screenshot from 2022-06-13 16-10-06](https://user-images.githubusercontent.com/80846488/173336596-5889ff70-84bd-4c0b-aa70-3b44162d12db.png)

Add new file (here change name from directive.ts to component.ts)

![Screenshot from 2022-06-13 16-15-12](https://user-images.githubusercontent.com/80846488/173337556-18c0ae92-4721-4c5a-afad-c5c799e1da80.png)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15578,https://api.github.com/repos/oppia/oppia/pulls/15578,https://github.com/oppia/oppia/pull/15578,closed,944,1116,8,29,29,67,0,2,[],2022-06-13 10:48:20+00:00,2022-06-20 13:35:31+00:00,614831.0,"7 days, 2:47:11","[{'comment_id': 896007883, 'comment_body': 'Use `# pylint: disable=line-too-long, single-line-pragma` and `# pylint: enable=line-too-long, single-line-pragma` at start and end of list instead of adding disable rule at each line individually.', 'comment_created': datetime.datetime(2022, 6, 13, 18, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 896008400, 'comment_body': '```suggestion\r\n# Contains the name of all files that are not strictly typed.\r\n```', 'comment_created': datetime.datetime(2022, 6, 13, 18, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 896009976, 'comment_body': 'what does this comment mean?', 'comment_created': datetime.datetime(2022, 6, 13, 18, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 896010174, 'comment_body': '```suggestion\r\n        # List of missing files that are neither strictly typed nor present in\r\n```', 'comment_created': datetime.datetime(2022, 6, 13, 18, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 896517790, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 14, 8, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 896518037, 'comment_body': 'Done, now more clear', 'comment_created': datetime.datetime(2022, 6, 14, 8, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 896518178, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 14, 8, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 896518276, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 14, 8, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897544457, 'comment_body': 'This seems like a fragile way to filter out the error message lines of interest because the folder names could change down the road. Is there a way to parse the lines without depending on folder names?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897544681, 'comment_body': 'The canonical way to remove duplicates is `set(errors)`', 'comment_created': datetime.datetime(2022, 6, 15, 5, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897545361, 'comment_body': 'This variable name is confusing to me. Maybe `TS_STRICT_EXCLUDE_PATHS`?', 'comment_created': datetime.datetime(2022, 6, 15, 5, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897546013, 'comment_body': 'This is a string, not a dict. Also, the parentheses are unnecessary since you can break after `json.dumps(` instead', 'comment_created': datetime.datetime(2022, 6, 15, 5, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897546784, 'comment_body': ""Why not just dump this dictionary directly the JSON file like this:\r\n\r\n```python\r\nwith open(file_name, 'w', encoding='utf-8') as f:\r\n    json.dump(tsconfig_strict_json_dict, f, indent=2, sort_keys=True)"", 'comment_created': datetime.datetime(2022, 6, 15, 5, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897548150, 'comment_body': ""Why do we have to do this twice? I'm not too familiar with how ts compilation works, but my intuition would be that it should be predictable whether running `cmd` produces `COMPILED_JS_DIR`"", 'comment_created': datetime.datetime(2022, 6, 15, 5, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897548761, 'comment_body': 'Ditto: can just dump directly to JSON file with `json.dump`', 'comment_created': datetime.datetime(2022, 6, 15, 5, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897549472, 'comment_body': ""If the checks get aborted part-way through, we should make sure that `tsconfig-strict.json` is restored. Ideally though, it'd be great if we could avoid modifying config files dynamically like this. Is that possible?"", 'comment_created': datetime.datetime(2022, 6, 15, 5, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897550727, 'comment_body': '```suggestion\r\n    def test_no_error_for_valid_compilation_of_tsconfig(self) -> None: # pylint: disable=line-too-long\r\n```\r\n\r\nI think you can shorten the test name to avoid disabling the pylint line length error', 'comment_created': datetime.datetime(2022, 6, 15, 5, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897550823, 'comment_body': 'ditto: shorten test name', 'comment_created': datetime.datetime(2022, 6, 15, 5, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897551006, 'comment_body': 'ditto: shorten test name', 'comment_created': datetime.datetime(2022, 6, 15, 5, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 897656760, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 7, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897660124, 'comment_body': ""One more way to find line of interest is by using python regex for format **ts(120,5): => ts(x,y):** but i prefer use of ('core', 'extension', 'typings'), as after completion of strict typescript we are going to remove all those changes of this PR and use only one tsconfig file, inbetween we have no plan of change main parent folders name."", 'comment_created': datetime.datetime(2022, 6, 15, 8, 0, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897661173, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 8, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897664980, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 8, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897684057, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 8, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897684480, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 8, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897830467, 'comment_body': ""This comment doesn't make sense."", 'comment_created': datetime.datetime(2022, 6, 15, 10, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 897831773, 'comment_body': 'Also this list is already defined in `prefixes` variable.', 'comment_created': datetime.datetime(2022, 6, 15, 10, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 897832836, 'comment_body': 'Should the content of this if-block be separated into a function? Otherwise the `else` for this `if` is so far away.', 'comment_created': datetime.datetime(2022, 6, 15, 10, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 897861956, 'comment_body': 'Removed, no need.', 'comment_created': datetime.datetime(2022, 6, 15, 11, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897866472, 'comment_body': 'Not possible, we are working with custom include property. Need to change dynamically, no such feature found in typescript documentation doing same. For check get aborted mid way, to prevent this i am doing two things. Restore include property for next run and add lint check if include property changes.\r\n\r\nUse prefixes.', 'comment_created': datetime.datetime(2022, 6, 15, 11, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 897883482, 'comment_body': 'Done, now more clear.', 'comment_created': datetime.datetime(2022, 6, 15, 11, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898050082, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 14, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898105343, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 15, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898105613, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 15, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898105757, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 15, 15, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 898707428, 'comment_body': ""Please indent this 4 more spaces so the arguments aren't at the same level as the function code"", 'comment_created': datetime.datetime(2022, 6, 16, 5, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 898709163, 'comment_body': ""Where are you restoring the include property if the check gets aborted? I would expect to see this handled using a context manager (preferably) or using atexit (less preferably), but I don't see that in your code so far"", 'comment_created': datetime.datetime(2022, 6, 16, 5, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 898709699, 'comment_body': ""I feel like the regex approach is more robust without much of a downside, but I'm fine with the current approach if @vojtechjelinek agrees"", 'comment_created': datetime.datetime(2022, 6, 16, 5, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 898743992, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 16, 6, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899089140, 'comment_body': 'Done. Please verify, using context manager for first time.', 'comment_created': datetime.datetime(2022, 6, 16, 13, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899726225, 'comment_body': ""If you're going to un-indent the last line of the function signature, then these lines only need to be indented by 4 spaces"", 'comment_created': datetime.datetime(2022, 6, 17, 3, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899726636, 'comment_body': 'what is this `yield` doing?', 'comment_created': datetime.datetime(2022, 6, 17, 3, 12, 31, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899727250, 'comment_body': 'I thought this was already being handled by the try-except above. Why do we need to do this again?', 'comment_created': datetime.datetime(2022, 6, 17, 3, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899729332, 'comment_body': ""if running script is close in-between(assume we closes the terminal), we can't restore include property. So add this for correct execution of next compilation."", 'comment_created': datetime.datetime(2022, 6, 17, 3, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899731398, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 3, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899740420, 'comment_body': ""Yield represent upto this part we have done setup part without any execution failure, now whatever yield return it will execute (in this we just pass that). If execution fails execute finally part directly.\r\n\r\ncan't we use try expect directly, as we are not yielding anything?"", 'comment_created': datetime.datetime(2022, 6, 17, 3, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899764687, 'comment_body': ""I'm having trouble parsing your comment, but `yield` is only used for generators, and this function isn't a generator. See https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement"", 'comment_created': datetime.datetime(2022, 6, 17, 5, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899765734, 'comment_body': ""It sounds like this code is to handle the case where the script is aborted part-way through such that no cleanup code is allowed to run (e.g. with `kill -9`). I don't think you need to worry about that case. We just want to make sure that if a user uses something like CTRL-C to stop the script but then lets the script end gracefully (e.g. so `finally` blocks still run), we clean up the tsconfig file."", 'comment_created': datetime.datetime(2022, 6, 17, 5, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 899854103, 'comment_body': ""I only worry about next run of command. If Include property not restore after kill of terminal.\r\n\r\nIs it true that I don't have to be concerned about that case?"", 'comment_created': datetime.datetime(2022, 6, 17, 7, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899855186, 'comment_body': 'Removed, can you please take a look now. Property is restore after gracefully after we break the script.', 'comment_created': datetime.datetime(2022, 6, 17, 7, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899929823, 'comment_body': 'Should the list be put into a constant?', 'comment_created': datetime.datetime(2022, 6, 17, 9, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899932345, 'comment_body': '```suggestion\r\ndef compile_strict_tsconfig(\r\n    config_path: str, error_messages: List[str]\r\n) -> None:\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 9, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899936030, 'comment_body': ""```suggestion\r\n            print(\r\n                 '%s Errors found during compilation.\\n' % len([x for x in error_messages if x.startswith(prefixes)])\r\n             )\r\n```"", 'comment_created': datetime.datetime(2022, 6, 17, 9, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899936859, 'comment_body': ""I'm fine with both"", 'comment_created': datetime.datetime(2022, 6, 17, 9, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899940916, 'comment_body': 'Should this be put into a constant?', 'comment_created': datetime.datetime(2022, 6, 17, 9, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 899997050, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 10, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899997099, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 10, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899997165, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 10, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 899997378, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 10, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900016964, 'comment_body': 'Hey, actually thinking about this, we can solve the problem with the file staying modified by instead naming the file differently. So you generate the file from tsconfig-strict.json and from the list of files, then you run the TS check and after that just remove the generated file. You can also add the generated file name to .gitignore so that it is never commited.', 'comment_created': datetime.datetime(2022, 6, 17, 11, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900042532, 'comment_body': 'Means one more separate file look like ts-config file and use that. Delete at last? then no worry about restoration of original one.', 'comment_created': datetime.datetime(2022, 6, 17, 11, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900043956, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2022, 6, 17, 11, 49, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 900105075, 'comment_body': 'Done, PTAL', 'comment_created': datetime.datetime(2022, 6, 17, 13, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900106246, 'comment_body': 'No need now, make separate strict ts-config, see [this](https://github.com/oppia/oppia/pull/15578#discussion_r900016964) discussion.', 'comment_created': datetime.datetime(2022, 6, 17, 13, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900106554, 'comment_body': 'No need now, make separate strict ts-config, see [this](https://github.com/oppia/oppia/pull/15578#discussion_r900016964) discussion.', 'comment_created': datetime.datetime(2022, 6, 17, 13, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 900388925, 'comment_body': 'I don\'t think ""mock"" is quite right here since this isn\'t a test. Maybe ""temp"" so that if it somehow doesn\'t get cleaned up, people know it\'s a dynamically generated file?', 'comment_created': datetime.datetime(2022, 6, 17, 17, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 900421434, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 17, 18, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}]","[{'commit_sha': 'f856bcdd5f2b1937adb03faa15d3f8d1953aea59', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f0c57a5dacae77cb5bfbbb759b9cb2c3180715f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20eba4d20f54f1c033bbd1941bd045ba284b263a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f57263d2f8c62c17ec370e6b2e077215bc6ae5', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac5751a27ee226e96c3a8f9339184edc696682f1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff8f5018a69f61b9f8441fa9b59911fe655d993e', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24379dd18a7db4126a5626a89cc8d9edf740e9e8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006a0dc17d5e75558f1881fe4cde690e8e2c7a13', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6c7db003b3f2fa0ca37c8109225a5a88c8c9dde', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3313bcde7cffb26c7210c10a144baf0cdb622cf1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e292ee7f8ecc9dde80dc1f5f650b9cb9b4bb45db', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e375974f7199a4db14d5cc7686033425af73d830', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ef9e36d0b3c3bf2a5d4d0ee05c025f9d1dde39', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52043f8154808556c961eb99ca0cf9696d407ad0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1f5c10cac3ddbb654bf5ca9c5894dfff5c2fff', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7d0e14ac464f03c9f7118f57077e87def884d8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f73e110367e9bad973457f8f8af4b993bb5234e9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d769546b421a7ffb5c00b670ec6176348c3a16', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc068d5cc130c9ad34c757a999a358c06b00b0de', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70fa27b67372a419af7960efcaf0b3f7ad64a424', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b445a83c7afa996837abb0c62f0b17050fb97f0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '011db8e3471db9678a83bc512f3de1bca8f7cfaf', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e91b2fb157f7010a2d40047f169fc29269f0eb', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd89de45e42ec258c51f53f467b486ddc8184b83', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb29111de5da0d30ceefecb2c8fc84963e31333', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '087ccd7fbe2a0c32d8d2f5078795413e67eac990', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f6f2171eaff42876756726dc223ffb30a7f4d9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c36105198b8593e625674cd9f6d07f8f5db8349', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d8f391b6a9da0bb00d889207327792f311dda4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}]",JG-11,80846488,,User,,39,,0,21
976856991,Fix part of #10474: Make typescript checks strict for few more files,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #10474.
2. This PR does the following: Make typescript checks strict for few more files

### List of completed Files.

<details>
<summary>Hidden list of completed Files</summary>

1. core/templates/components/ck-editor-helpers/ck-editor-copy-toolbar/ck-editor-copy-toolbar.component.spec.ts
2. core/templates/components/ck-editor-helpers/ck-editor-copy-toolbar/ck-editor-copy-toolbar.component.ts
3. core/templates/components/concept-card/concept-card.component.spec.ts
4. core/templates/components/concept-card/concept-card.component.ts
5. core/templates/components/forms/custom-forms-directives/thumbnail-uploader.component.spec.ts
6. core/templates/components/forms/custom-forms-directives/thumbnail-uploader.component.ts
7. core/templates/components/question-directives/modal-templates/question-editor-save-modal.component.ts
8. core/templates/components/question-directives/question-misconception-editor/question-misconception-editor.component.spec.ts
9. core/templates/components/question-directives/question-misconception-editor/question-misconception-editor.component.ts
10. core/templates/components/question-directives/question-misconception-selector/question-misconception-selector.component.spec.ts
11. core/templates/components/question-directives/question-misconception-selector/question-misconception-selector.component.ts
12. core/templates/components/ratings/rating-display/rating-display.component.ts
13. core/templates/components/review-material-editor/review-material-editor.component.ts
14. core/templates/components/save-pending-changes/save-pending-changes-modal.component.ts
15. core/templates/components/score-ring/score-ring.component.ts
16. core/templates/components/skill-selector/select-skill-modal.component.spec.ts
17. core/templates/components/stale-tab-info/stale-tab-info-modal.component.ts
18. core/templates/components/state-directives/hint-editor/hint-editor.component.spec.ts
19. core/templates/components/state-directives/hint-editor/hint-editor.component.ts
20. core/templates/components/state-directives/outcome-editor/outcome-destination-editor.component.spec.ts
21. core/templates/components/state-directives/outcome-editor/outcome-destination-editor.component.ts
22. core/templates/components/state-directives/outcome-editor/outcome-editor.component.spec.ts
23. core/templates/components/state-directives/outcome-editor/outcome-editor.component.ts
24. core/templates/components/state-directives/response-header/response-header.component.spec.ts
25. core/templates/components/state-directives/response-header/response-header.component.ts
26. core/templates/components/state-directives/solution-editor/solution-editor.component.spec.ts
27. core/templates/components/state-directives/solution-editor/solution-editor.component.ts
28. core/templates/components/state-directives/solution-editor/solution-explanation-editor.component.ts
29. core/templates/components/state-editor/state-hints-editor/state-hints-editor.component.spec.ts
30. core/templates/components/state-editor/state-hints-editor/state-hints-editor.component.ts
31. core/templates/components/state-editor/state-solution-editor/state-solution-editor.component.spec.ts
32. core/templates/components/state-editor/state-solution-editor/state-solution-editor.component.ts
33. core/templates/components/statistics-directives/completion-graph.component.ts
34. core/templates/components/summary-tile/learner-story-summary-tile.component.spec.ts
35. core/templates/components/summary-tile/learner-story-summary-tile.component.ts
36. core/templates/components/summary-tile/learner-topic-goals-summary-tile.component.spec.ts
37. core/templates/components/summary-tile/learner-topic-goals-summary-tile.component.ts
38. core/templates/components/summary-tile/learner-topic-summary-tile.component.spec.ts
39. core/templates/components/summary-tile/learner-topic-summary-tile.component.ts
40. core/templates/components/summary-tile/story-summary-tile.component.spec.ts
41. core/templates/components/summary-tile/subtopic-summary-tile.component.spec.ts
42. core/templates/components/summary-tile/subtopic-summary-tile.component.ts
43. core/templates/components/summary-tile/topic-summary-tile.component.ts
44. core/templates/components/unsaved-changes-status-info/unsaved-changes-status-info-modal.component.ts
45. core/templates/domain/exploration/ExplorationMetadataObjectFactory.ts
46. core/templates/domain/state_card/state-card.model.spec.ts
47. core/templates/domain/topic/learner-topic-summary.model.spec.ts
48. core/templates/domain/topic/newly-created-story.model.spec.ts
49. core/templates/domain/topic/topic-rights.model.spec.ts
50. core/templates/filters/format-timer.pipe.ts
51. core/templates/filters/remove-duplicates-in-array.pipe.spec.ts
52. core/templates/filters/string-utility-filters/get-abbreviated-text.pipe.spec.ts
53. core/templates/filters/string-utility-filters/replace-inputs-with-ellipses.pipe.spec.ts
54. core/templates/filters/string-utility-filters/truncate-at-first-ellipsis.pipe.spec.ts
55. core/templates/filters/string-utility-filters/underscores-to-camel-case.pipe.spec.ts
56. core/templates/pages/collection-player-page/collection-local-nav/collection-local-nav.component.ts
57. core/templates/pages/collection-player-page/collection-navbar/collection-navbar.component.ts
58. core/templates/pages/collection-player-page/collection-node-list/collection-node-list.component.ts
59. core/templates/pages/contributor-dashboard-admin-page/navbar/contributor-dashboard-admin-navbar.component.ts
60. core/templates/pages/contributor-dashboard-admin-page/services/contributor-dashboard-admin-backend-api.service.spec.ts
61. core/templates/pages/creator-dashboard-page/creator-dashboard-page.component.spec.ts
62. core/templates/pages/creator-dashboard-page/creator-dashboard-page.component.ts
63. core/templates/pages/donate-page/donate-page.component.spec.ts
64. core/templates/pages/error-pages/error-page-root.component.ts
65. core/templates/pages/error-pages/error-page.component.ts
66. core/templates/pages/exploration-editor-page/changes-in-human-readable-form/changes-in-human-readable-form.component.ts
67. core/templates/pages/exploration-editor-page/settings-tab/templates/moderator-unpublish-exploration-modal.component.ts
68. core/templates/pages/exploration-editor-page/translation-tab/modal-templates/translation-tab-busy-modal.component.ts
69. core/templates/pages/exploration-editor-page/translation-tab/modal-templates/welcome-translation-modal.component.ts
70. core/templates/pages/exploration-player-page/modals/display-hint-modal.component.spec.ts
71. core/templates/pages/exploration-player-page/modals/display-hint-modal.component.ts
72. core/templates/pages/exploration-player-page/modals/flag-exploration-modal.component.ts
73. core/templates/pages/learner-dashboard-page/community-lessons-tab.component.spec.ts
74. core/templates/pages/learner-dashboard-page/community-lessons-tab.component.ts
75. core/templates/pages/learner-dashboard-page/goals-tab.component.spec.ts
76. core/templates/pages/learner-dashboard-page/goals-tab.component.ts
77. core/templates/pages/learner-dashboard-page/home-tab.component.ts
78. core/templates/pages/learner-dashboard-page/progress-tab.component.spec.ts
79. core/templates/pages/learner-dashboard-page/progress-tab.component.ts
80. core/templates/pages/library-page/library-footer/library-footer.component.ts
81. core/templates/pages/library-page/search-results/activity-tiles-infinity-grid.component.spec.ts
82. core/templates/pages/library-page/search-results/activity-tiles-infinity-grid.component.ts
83. core/templates/pages/library-page/search-results/search-results.component.ts
84. core/templates/pages/signup-page/signup-page.component.spec.ts
85. core/templates/pages/signup-page/signup-page.component.ts
86. core/templates/pages/splash-page/splash-page.component.spec.ts
87. core/templates/pages/splash-page/splash-page.component.ts
88. core/templates/pages/story-editor-page/modal-templates/story-editor-save-modal.component.ts
89. core/templates/pages/story-viewer-page/navbar-breadcrumb/story-viewer-navbar-breadcrumb.component.spec.ts
90. core/templates/pages/story-viewer-page/navbar-breadcrumb/story-viewer-navbar-breadcrumb.component.ts
91. core/templates/pages/story-viewer-page/navbar-pre-logo-action/story-viewer-navbar-pre-logo-action.component.ts
92. core/templates/pages/story-viewer-page/story-viewer-page.component.ts
93. core/templates/pages/subtopic-viewer-page/navbar-breadcrumb/subtopic-viewer-navbar-breadcrumb.component.ts
94. core/templates/pages/subtopic-viewer-page/navbar-pre-logo-action/subtopic-viewer-navbar-pre-logo-action.component.ts
95. core/templates/pages/subtopic-viewer-page/subtopic-viewer-page.component.ts
96. core/templates/pages/teach-page/teach-page.component.spec.ts
97. core/templates/pages/teach-page/teach-page.component.ts
98. core/templates/pages/topic-editor-page/modal-templates/questions-list-select-skill-and-difficulty-modal.component.spec.ts
99. core/templates/pages/topic-editor-page/modal-templates/questions-list-select-skill-and-difficulty-modal.component.ts
100. core/templates/pages/topic-editor-page/modal-templates/topic-editor-save-modal.component.ts
101. core/templates/pages/topic-viewer-page/navbar-breadcrumb/topic-viewer-navbar-breadcrumb.component.spec.ts
102. core/templates/pages/topic-viewer-page/stories-list/topic-viewer-stories-list.component.ts
103. core/templates/pages/topic-viewer-page/subtopics-list/subtopics-list.component.ts
104. core/templates/pages/topic-viewer-page/topic-viewer-page.component.spec.ts
105. core/templates/pages/topics-and-skills-dashboard-page/modals/create-new-skill-modal.component.ts
106. core/templates/pages/topics-and-skills-dashboard-page/modals/delete-topic-modal.component.ts
107. extensions/interactions/AlgebraicExpressionInput/directives/oppia-interactive-algebraic-expression-input.component.spec.ts
108. extensions/interactions/AlgebraicExpressionInput/directives/oppia-interactive-algebraic-expression-input.component.ts
109. extensions/interactions/Continue/directives/oppia-interactive-continue.component.spec.ts
110. extensions/interactions/Continue/directives/oppia-interactive-continue.component.ts
111. extensions/interactions/DragAndDropSortInput/directives/oppia-interactive-drag-and-drop-sort-input.component.spec.ts
112. extensions/interactions/DragAndDropSortInput/directives/oppia-interactive-drag-and-drop-sort-input.component.ts
113. extensions/interactions/DragAndDropSortInput/directives/oppia-response-drag-and-drop-sort-input.component.ts
114. extensions/interactions/DragAndDropSortInput/directives/oppia-short-response-drag-and-drop-sort-input.component.ts
115. extensions/interactions/EndExploration/directives/oppia-interactive-end-exploration.component.spec.ts
116. extensions/interactions/EndExploration/directives/oppia-interactive-end-exploration.component.ts
117. extensions/interactions/FractionInput/directives/oppia-interactive-fraction-input.component.spec.ts
118. extensions/interactions/FractionInput/directives/oppia-interactive-fraction-input.component.ts
119. extensions/interactions/GraphInput/directives/oppia-interactive-graph-input.component.spec.ts
120. extensions/interactions/GraphInput/directives/oppia-interactive-graph-input.component.ts
121. extensions/interactions/GraphInput/directives/oppia-response-graph-input.component.spec.ts
122. extensions/interactions/GraphInput/directives/oppia-short-response-graph-input.component.spec.ts
123. extensions/interactions/ImageClickInput/directives/oppia-response-image-click-input.component.spec.ts
124. extensions/interactions/InteractiveMap/directives/oppia-interactive-interactive-map.component.spec.ts
125. extensions/interactions/InteractiveMap/directives/oppia-interactive-interactive-map.component.ts
126. extensions/interactions/ItemSelectionInput/directives/oppia-interactive-item-selection-input.component.spec.ts
127. extensions/interactions/ItemSelectionInput/directives/oppia-interactive-item-selection-input.component.ts
128. extensions/interactions/ItemSelectionInput/directives/oppia-response-item-selection-input.component.spec.ts
129. extensions/interactions/ItemSelectionInput/directives/oppia-response-item-selection-input.component.ts
130. extensions/interactions/ItemSelectionInput/directives/oppia-short-response-item-selection-input.component.ts
131. extensions/interactions/MathEquationInput/directives/oppia-interactive-math-equation-input.component.spec.ts
132. extensions/interactions/MathEquationInput/directives/oppia-interactive-math-equation-input.component.ts
133. extensions/interactions/MathEquationInput/directives/oppia-response-math-equation-input.component.ts
134. extensions/interactions/MathEquationInput/directives/oppia-short-response-math-equation-input.component.ts
135. extensions/interactions/NumberWithUnits/directives/oppia-interactive-number-with-units.component.spec.ts
136. extensions/interactions/NumberWithUnits/directives/oppia-interactive-number-with-units.component.ts
137. extensions/interactions/NumberWithUnits/directives/oppia-response-number-with-units.component.ts
138. extensions/interactions/NumberWithUnits/directives/oppia-short-response-number-with-units.component.ts
139. extensions/interactions/NumericExpressionInput/directives/oppia-interactive-numeric-expression-input.component.spec.ts
140. extensions/interactions/NumericExpressionInput/directives/oppia-interactive-numeric-expression-input.component.ts
141. extensions/interactions/NumericExpressionInput/directives/oppia-response-numeric-expression-input.component.ts
142. extensions/interactions/NumericExpressionInput/directives/oppia-short-response-numeric-expression-input.component.ts
143. extensions/interactions/NumericInput/directives/oppia-interactive-numeric-input.component.spec.ts
144. extensions/interactions/NumericInput/directives/oppia-interactive-numeric-input.component.ts
145. extensions/interactions/NumericInput/directives/oppia-response-numeric-input.component.ts
146. extensions/interactions/NumericInput/directives/oppia-short-response-numeric-input.component.ts
147. extensions/interactions/RatioExpressionInput/directives/oppia-interactive-ratio-expression-input.component.spec.ts
148. extensions/interactions/RatioExpressionInput/directives/oppia-interactive-ratio-expression-input.component.ts
149. extensions/interactions/RatioExpressionInput/directives/oppia-response-ratio-expression-input.component.ts
150. extensions/interactions/RatioExpressionInput/directives/oppia-short-response-ratio-expression-input.component.ts
151. extensions/interactions/SetInput/directives/oppia-interactive-set-input.component.spec.ts
152. extensions/interactions/SetInput/directives/oppia-interactive-set-input.component.ts
153. extensions/interactions/TextInput/directives/oppia-interactive-text-input.component.spec.ts
154. extensions/interactions/TextInput/directives/oppia-interactive-text-input.component.ts
155. extensions/interactions/TextInput/directives/oppia-response-text-input.component.spec.ts
156. extensions/interactions/TextInput/directives/oppia-short-response-text-input.component.spec.ts
157. extensions/objects/templates/coord-two-dim-editor.component.spec.ts
158. extensions/objects/templates/skill-selector-editor.component.spec.ts
159. extensions/objects/templates/skill-selector-editor.component.ts


</details>


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
![Screenshot from 2022-06-23 14-40-40](https://user-images.githubusercontent.com/80846488/175263053-5cdc67c9-aa8e-41ba-9000-fb1502cedf40.png)


https://user-images.githubusercontent.com/80846488/176628236-a919f47d-5f2b-4ec5-a0be-a06fdafd959a.mp4


## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15620,https://api.github.com/repos/oppia/oppia/pulls/15620,https://github.com/oppia/oppia/pull/15620,closed,1865,1201,173,59,41,145,0,1,[],2022-06-23 09:08:41+00:00,2022-07-10 06:22:14+00:00,1458813.0,"16 days, 21:13:33","[{'comment_id': 906786439, 'comment_body': 'use it as HTLMElement rather than as Element. focus/blur property not exist in type Element.', 'comment_created': datetime.datetime(2022, 6, 26, 9, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 906789206, 'comment_body': 'Check flow, no need to assign null. All 3 is used in misconception-selector, which is used after tagAnswerGroupWithMisconception (where we assign values to all 3). Before that misconception-selector is un-accessable.', 'comment_created': datetime.datetime(2022, 6, 26, 10, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 906791930, 'comment_body': 'No need to assign null, check flow.\r\nearlier: Previous value -> null -> New value.\r\nNow: Previous value -> New value. (No significance of null found).', 'comment_created': datetime.datetime(2022, 6, 26, 10, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 906800671, 'comment_body': 'throw error if file not exist instead of saving url as null.', 'comment_created': datetime.datetime(2022, 6, 26, 11, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907073907, 'comment_body': 'Initialize booleans with false', 'comment_created': datetime.datetime(2022, 6, 27, 7, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907074820, 'comment_body': 'boolean value', 'comment_created': datetime.datetime(2022, 6, 27, 7, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907075453, 'comment_body': 'is this case covered in unit tests', 'comment_created': datetime.datetime(2022, 6, 27, 7, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907076334, 'comment_body': 'Why are we removing this test case?', 'comment_created': datetime.datetime(2022, 6, 27, 7, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907077935, 'comment_body': 'Have you tested this? seems like the previous behavior is being altered', 'comment_created': datetime.datetime(2022, 6, 27, 7, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907079280, 'comment_body': 'Comment for `null` return type is missing', 'comment_created': datetime.datetime(2022, 6, 27, 7, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907080078, 'comment_body': 'Is this case covered in unit tests?', 'comment_created': datetime.datetime(2022, 6, 27, 7, 51, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907080810, 'comment_body': 'Can we not use this explicit typecasting here?', 'comment_created': datetime.datetime(2022, 6, 27, 7, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907087523, 'comment_body': 'While we are here, can we remove the use of unknown?', 'comment_created': datetime.datetime(2022, 6, 27, 7, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907089832, 'comment_body': 'Why add `string` as a type here? ', 'comment_created': datetime.datetime(2022, 6, 27, 8, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907092095, 'comment_body': 'Is this covered in unit tests?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907093451, 'comment_body': 'Create separate inteface for this property and `mapOptions`', 'comment_created': datetime.datetime(2022, 6, 27, 8, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907094502, 'comment_body': 'Comment for `null` missing', 'comment_created': datetime.datetime(2022, 6, 27, 8, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907096456, 'comment_body': '```suggestion\r\n    // Using unknown type conversion to check for an invalid graph.\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 8, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907099141, 'comment_body': 'What else are we expecting `htmlContent` to be? Ditto below', 'comment_created': datetime.datetime(2022, 6, 27, 8, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907099531, 'comment_body': 'Cover this case in unit tests', 'comment_created': datetime.datetime(2022, 6, 27, 8, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907099784, 'comment_body': 'Please elaborate this comment a bit more', 'comment_created': datetime.datetime(2022, 6, 27, 8, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907101147, 'comment_body': 'Can we not use this typecasting here?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907102566, 'comment_body': 'You can remove these comments', 'comment_created': datetime.datetime(2022, 6, 27, 8, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907102790, 'comment_body': 'Why this typecasting?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 16, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907104262, 'comment_body': 'Cover these cases in unit tests', 'comment_created': datetime.datetime(2022, 6, 27, 8, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907104515, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 6, 27, 8, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907104809, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 6, 27, 8, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907106005, 'comment_body': 'comment for null missing', 'comment_created': datetime.datetime(2022, 6, 27, 8, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907107161, 'comment_body': 'Where is this function used? Are we always expecting username to be present?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907110536, 'comment_body': 'Define this type in the component instead, by importing `LIBRARY_PATHS_TO_MODES`', 'comment_created': datetime.datetime(2022, 6, 27, 8, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907113461, 'comment_body': 'Is this change expected?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907114576, 'comment_body': 'Cover these in tests', 'comment_created': datetime.datetime(2022, 6, 27, 8, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907115611, 'comment_body': 'Can we not use this typecasting and use something like `new Interaction(...)` etc.', 'comment_created': datetime.datetime(2022, 6, 27, 8, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907116413, 'comment_body': 'Comment for null missing', 'comment_created': datetime.datetime(2022, 6, 27, 8, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907118433, 'comment_body': 'Cover this in tests', 'comment_created': datetime.datetime(2022, 6, 27, 8, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907120723, 'comment_body': ""I think we should remove these test cases if null and undefined values aren't expected in the transform function"", 'comment_created': datetime.datetime(2022, 6, 27, 8, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907121616, 'comment_body': '```suggestion\r\n      // Using unknown type conversion to check if the input is invalid.\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 8, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907122039, 'comment_body': 'Can we not use this explicit typecasting', 'comment_created': datetime.datetime(2022, 6, 27, 8, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907123560, 'comment_body': 'Have you tested this locally?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907126372, 'comment_body': 'Why this change? I think the previous way is preferred more during migration for the proper initialization of components?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907127176, 'comment_body': 'Use some proper values instead of empty string', 'comment_created': datetime.datetime(2022, 6, 27, 8, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907127259, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 6, 27, 8, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907128765, 'comment_body': ""what else are we not expecting our thumnailFilename to be? What should happen if the property doesn't exist and is null or undefined?"", 'comment_created': datetime.datetime(2022, 6, 27, 8, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907129359, 'comment_body': 'what are these hardcoded values?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907129960, 'comment_body': 'what are these hardcoded values?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907131571, 'comment_body': 'Why using service inside template?', 'comment_created': datetime.datetime(2022, 6, 27, 8, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907132128, 'comment_body': 'use some proper values instead of empty strings', 'comment_created': datetime.datetime(2022, 6, 27, 8, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907133289, 'comment_body': 'Cover these cases in tests', 'comment_created': datetime.datetime(2022, 6, 27, 8, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907136502, 'comment_body': 'What are the scenarios in which this function returns null? ', 'comment_created': datetime.datetime(2022, 6, 27, 8, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 907279648, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 11, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907279737, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 11, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907288433, 'comment_body': 'Frontend part of this test, never execute. Like isSelfLoop() compare things, which is not set or undefined before isSelfLoop() call. This test is not relevent or make sense. Also need to write test for isSelfLoop() function(which is indirectly cover inside this test).', 'comment_created': datetime.datetime(2022, 6, 27, 11, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907292428, 'comment_body': 'Yes, outcome-destination-editor is not present in question mode, even its html is hidden in question mode. So checking again in its component, that we not allowing anything for question mode, does not make sense. Also we are setting anything for question mode here. Here it is just use as guard, which we already guarded by hidden this part whereever it is called.', 'comment_created': datetime.datetime(2022, 6, 27, 11, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907297577, 'comment_body': 'No need removed.', 'comment_created': datetime.datetime(2022, 6, 27, 11, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907325445, 'comment_body': ""I think we should allow us to use typecasting in test files. As object might be null if we can't alter this."", 'comment_created': datetime.datetime(2022, 6, 27, 12, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907330267, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 6, 27, 12, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907474185, 'comment_body': ""Like when ever user submit answer in preview mode without filling details we pass its value as empty string or array of same ( [''] ) in every interaction. So doing same thing here. As we can't throw error in that case. But string not make sense any more in numeric input so replace empty string with null."", 'comment_created': datetime.datetime(2022, 6, 27, 14, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907479168, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 14, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907484294, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 14, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907485287, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 14, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907487615, 'comment_body': 'Again allow us to use typecasting in test files only.', 'comment_created': datetime.datetime(2022, 6, 27, 14, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907490855, 'comment_body': '// eslint-disable-next-line max-len ?? Next line is actually too long.', 'comment_created': datetime.datetime(2022, 6, 27, 15, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907491283, 'comment_body': 'Ditto, typecasting in test files.', 'comment_created': datetime.datetime(2022, 6, 27, 15, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907526469, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 15, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907531846, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 15, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907535355, 'comment_body': 'On top write explanation comment why this type may be null, do i need to write here as well?', 'comment_created': datetime.datetime(2022, 6, 27, 15, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907542126, 'comment_body': 'Removed this check as we already check this condition, so directly assign requestParams.username to username, above.', 'comment_created': datetime.datetime(2022, 6, 27, 15, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907543065, 'comment_body': 'Either/or condition.', 'comment_created': datetime.datetime(2022, 6, 27, 15, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907543405, 'comment_body': 'test file. need empty condition for interaction during testing.', 'comment_created': datetime.datetime(2022, 6, 27, 15, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907575327, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 16, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907576747, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 16, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907577386, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 16, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907578809, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907584189, 'comment_body': 'test file', 'comment_created': datetime.datetime(2022, 6, 27, 16, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907584977, 'comment_body': 'set back to default style values.', 'comment_created': datetime.datetime(2022, 6, 27, 16, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907585085, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 6, 27, 16, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907605449, 'comment_body': 'Accepting your suggestion.', 'comment_created': datetime.datetime(2022, 6, 27, 17, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907647608, 'comment_body': 'It is necessary, because in component we have a check regarding classroom, url fragment.\r\n\r\nNull or may be something undefine we need to used.', 'comment_created': datetime.datetime(2022, 6, 27, 17, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907647769, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 6, 27, 17, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907653350, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 17, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907653635, 'comment_body': 'take reference from learner topic goal summary, ditto things we are doing.\r\n\r\nBut as per your [comment in conversation](https://github.com/oppia/oppia/pull/15620#discussion_r907128765), i also think we should mention its else condition, and what happen if else condition run.', 'comment_created': datetime.datetime(2022, 6, 27, 17, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907660998, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 18, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907665093, 'comment_body': 'Need invalid value for testing.', 'comment_created': datetime.datetime(2022, 6, 27, 18, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 907677148, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 18, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910226738, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910226966, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910227092, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910227269, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910227369, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910227461, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910227532, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910227848, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910227929, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 27, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910228133, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 29, 17, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910241361, 'comment_body': 'Okay intialize thumbnailUrl with null, then assign value in ngOnInit().\r\nSo default value of thumbnailUrl  is null, no need of else statement then.', 'comment_created': datetime.datetime(2022, 6, 29, 17, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910626725, 'comment_body': 'Why are we defining this property again?', 'comment_created': datetime.datetime(2022, 6, 30, 5, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 910630284, 'comment_body': 'I think you missed this one', 'comment_created': datetime.datetime(2022, 6, 30, 5, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 910661591, 'comment_body': ""Returning empty string doesn't seem right here?"", 'comment_created': datetime.datetime(2022, 6, 30, 6, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 910663421, 'comment_body': 'Can we use Record here?', 'comment_created': datetime.datetime(2022, 6, 30, 6, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 910667408, 'comment_body': 'is this the same property as before?', 'comment_created': datetime.datetime(2022, 6, 30, 6, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 910669434, 'comment_body': 'Please add a video for this in PR description confirming that there are no changes in actual behavior', 'comment_created': datetime.datetime(2022, 6, 30, 6, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 910677958, 'comment_body': ""```suggestion\r\ntype libraryPathToModesKeys = (\r\n  keyof typeof LibraryPageConstants.LIBRARY_PATHS_TO_MODES);\r\n```\r\nUsing this won't require you to change constants file"", 'comment_created': datetime.datetime(2022, 6, 30, 7, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 910678088, 'comment_body': 'redundant change', 'comment_created': datetime.datetime(2022, 6, 30, 7, 6, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 910681155, 'comment_body': ""this isn't applicable in the case for imports, you can remove that"", 'comment_created': datetime.datetime(2022, 6, 30, 7, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 910689417, 'comment_body': 'scope of previous entityType not allowed inside then statement. Use ""if"" guard because we already throwing error if it is type undefined.', 'comment_created': datetime.datetime(2022, 6, 30, 7, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910690174, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 30, 7, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910697935, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 30, 7, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910698096, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2022, 6, 30, 7, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910708117, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 30, 7, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910708211, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 30, 7, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910709193, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 30, 7, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910742120, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 30, 8, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 910768685, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 30, 8, 45, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 913316905, 'comment_body': 'Can these be const instead?', 'comment_created': datetime.datetime(2022, 7, 5, 1, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 913317028, 'comment_body': 'const instead of let?', 'comment_created': datetime.datetime(2022, 7, 5, 1, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 913317109, 'comment_body': 'const', 'comment_created': datetime.datetime(2022, 7, 5, 1, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 915039845, 'comment_body': 'Prefer `const` here. It also seems odd to create a separate username variable with this capitalization. If you try to assign the potential null username to `this.username` directly here does that raise an error?', 'comment_created': datetime.datetime(2022, 7, 6, 16, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 915235694, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 6, 20, 37, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 915236032, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 6, 20, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 915236531, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 6, 20, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 915243168, 'comment_body': 'Done. Yes it seems odd.', 'comment_created': datetime.datetime(2022, 7, 6, 20, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 916207009, 'comment_body': ""This seems strange to me as we are using a non-null assertion operator, yet saying that the value can also be null. Maybe just don't assign the variable until after checking the value of `userInfo.getUsername()`."", 'comment_created': datetime.datetime(2022, 7, 7, 19, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 916463855, 'comment_body': 'Done, Actually forget to assign null directly.\r\nThanks.', 'comment_created': datetime.datetime(2022, 7, 8, 4, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947021355, 'comment_body': 'Why `?`, we prefer not to use it right?', 'comment_created': datetime.datetime(2022, 8, 16, 16, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947022322, 'comment_body': 'Why `?`, we prefer not to use it, right?', 'comment_created': datetime.datetime(2022, 8, 16, 16, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947024972, 'comment_body': 'Rather name this `ShowMoreInSectionDict`', 'comment_created': datetime.datetime(2022, 8, 16, 16, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947025674, 'comment_body': 'Again capitalize the first letter of the type.', 'comment_created': datetime.datetime(2022, 8, 16, 16, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947026745, 'comment_body': 'Why `?`.', 'comment_created': datetime.datetime(2022, 8, 16, 16, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947027363, 'comment_body': 'Why `undefined` and not `null`?', 'comment_created': datetime.datetime(2022, 8, 16, 16, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947028688, 'comment_body': 'We should unify how we handle errors, as somewhere we do `error isinstance Error` somewhere we use `as`, this is probably something that you should fix in your M2.', 'comment_created': datetime.datetime(2022, 8, 16, 16, 54, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947029222, 'comment_body': 'Usually we put `null` last, why is it different here?', 'comment_created': datetime.datetime(2022, 8, 16, 16, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947030665, 'comment_body': 'Why `?`?', 'comment_created': datetime.datetime(2022, 8, 16, 16, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947031379, 'comment_body': ""I don't understand this comment. Can you explain or rephrase?"", 'comment_created': datetime.datetime(2022, 8, 16, 16, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947460362, 'comment_body': 'Done, no need, changes made by some other contributor.', 'comment_created': datetime.datetime(2022, 8, 17, 5, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947478662, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 17, 5, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947479142, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 17, 5, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947479419, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 17, 5, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947481575, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 17, 5, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947483209, 'comment_body': 'Nothing special, just typo mistake. Done.', 'comment_created': datetime.datetime(2022, 8, 17, 6, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947495207, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 17, 6, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947505044, 'comment_body': 'Done everywhere. Use `instanceof Error` because it make more sense.', 'comment_created': datetime.datetime(2022, 8, 17, 6, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947507220, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 17, 6, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947509853, 'comment_body': 'this comment is already exist in 2-3 places already for mapMarkers. It means Marker can be of type `Marker<any>`, but we are unable to use any. So we are using `Marker<unknown>`.', 'comment_created': datetime.datetime(2022, 8, 17, 6, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 948683817, 'comment_body': ""Hmm, I see why we cannot use `Marker<any>` but I'm not sure why we cannot use precise type for the marker, like `Marker<string>` for example"", 'comment_created': datetime.datetime(2022, 8, 18, 5, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 948743870, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 7, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}]","[{'commit_sha': 'f856bcdd5f2b1937adb03faa15d3f8d1953aea59', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f0c57a5dacae77cb5bfbbb759b9cb2c3180715f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20eba4d20f54f1c033bbd1941bd045ba284b263a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8f57263d2f8c62c17ec370e6b2e077215bc6ae5', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac5751a27ee226e96c3a8f9339184edc696682f1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff8f5018a69f61b9f8441fa9b59911fe655d993e', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24379dd18a7db4126a5626a89cc8d9edf740e9e8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006a0dc17d5e75558f1881fe4cde690e8e2c7a13', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fce8d1414b0e1c50ffa29a54778ec4780cbf7e7c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6c7db003b3f2fa0ca37c8109225a5a88c8c9dde', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3313bcde7cffb26c7210c10a144baf0cdb622cf1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e292ee7f8ecc9dde80dc1f5f650b9cb9b4bb45db', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e375974f7199a4db14d5cc7686033425af73d830', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8ef9e36d0b3c3bf2a5d4d0ee05c025f9d1dde39', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52043f8154808556c961eb99ca0cf9696d407ad0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1f5c10cac3ddbb654bf5ca9c5894dfff5c2fff', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7d0e14ac464f03c9f7118f57077e87def884d8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f73e110367e9bad973457f8f8af4b993bb5234e9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d769546b421a7ffb5c00b670ec6176348c3a16', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc068d5cc130c9ad34c757a999a358c06b00b0de', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70fa27b67372a419af7960efcaf0b3f7ad64a424', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b445a83c7afa996837abb0c62f0b17050fb97f0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '011db8e3471db9678a83bc512f3de1bca8f7cfaf', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e91b2fb157f7010a2d40047f169fc29269f0eb', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd89de45e42ec258c51f53f467b486ddc8184b83', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdb29111de5da0d30ceefecb2c8fc84963e31333', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '087ccd7fbe2a0c32d8d2f5078795413e67eac990', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f6f2171eaff42876756726dc223ffb30a7f4d9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c36105198b8593e625674cd9f6d07f8f5db8349', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4d8f391b6a9da0bb00d889207327792f311dda4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8da11886c428c4e5882eee80200c8ed2efce8746', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7ab4a12393462a10467d60cbf8f20225341badb', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'befbc25ef6cc9828d3497bc4c4481a404ceca0b4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9f8500fc1459e608151f69e3700d67724622f5e', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c36a1a69ebaa45cab5654a942abe6e8e5119bb50', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59bdf0d01bd624fecd83de2e123acc739f7b23ce', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0cbfa4efe6fca9cfbd179d4b7ca776fae7f9e53', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee4f912d3ff9fc7b2a92617f3332f4b6f59cf07b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8509de1490b8e5777142faec9617dd7f852cd1a2', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1c4deab2896ded6dcfc18c9f621c966ddcd552c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e33243f4b6411af0abe1509784e1df4ecf4b83e0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e72f79a99ee2e5a26e4a2bfd7667ff5a1e6a070b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48c009eba38f4c9cf3c1f7feaba75c4aed0d5368', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f21c7dbb47737aec073121ea807adad9a84f986', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72698241b67119a085544891b25a28afed0231b9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700992b96cb7174b299b530654eda2e0efd5bc73', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7825e9d7b989b3826c5e2ee3e08b1c2d45936370', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd11f9dba3b3e33e10418626894b80d19e6ccd817', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f5f8343d40f50b725264a0004b413e16acfb71b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b974e52814a3c2481eecfc2fd2708b02c1d9f151', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5615f449d3b744885addb7039f3aa445bbb1ee4b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16125772450f1389d8af22263b8593af1019922e', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8dbe149c5b8abd6d54fbc279c7799603d36dcf', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6943c083ff384ba1b0e86e9498a13fb4b6f4ffd8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c71f3d15b90d0feb851f4749410ee2e35c3a215b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3041565d5b161949c445c99ef475fac9c34fbc4c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74445c8d6635c1635a08d6ff68ed34d9e0f6365d', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cffef1a52d398b9e332ad25b6845a95f71ba93e6', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36cb2ac93c3fec5d9eba06afabf5cfb9c2af2f46', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}]",JG-11,80846488,,User,,39,,0,21
1007809260,Fix part of #10474: Make typescript checks strict for few more files,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #10474 .
2. This PR does the following: Make typescript checks strict for few more files.

### List of completed Files.

<details>
<summary>Hidden list of completed Files</summary>


1. core/templates/components/forms/custom-forms-directives/apply-validation.directive.spec.ts
2. core/templates/components/forms/custom-forms-directives/html-select.component.spec.ts
3. core/templates/components/forms/custom-forms-directives/html-select.component.ts
4. core/templates/components/forms/schema-based-editors/schema-based-bool-editor.component.spec.ts
5. core/templates/components/forms/schema-based-editors/schema-based-bool-editor.component.ts
6. core/templates/components/forms/schema-based-editors/schema-based-choices-editor.component.spec.ts
7. core/templates/components/forms/schema-based-editors/schema-based-choices-editor.component.ts
8. core/templates/components/forms/schema-based-editors/schema-based-custom-editor.component.spec.ts
9. core/templates/components/forms/schema-based-editors/schema-based-custom-editor.component.ts
10. core/templates/components/forms/schema-based-editors/schema-based-dict-editor.component.spec.ts
11. core/templates/components/forms/schema-based-editors/schema-based-dict-editor.component.ts
12. core/templates/components/forms/schema-based-editors/schema-based-editor.component.spec.ts
13. core/templates/components/forms/schema-based-editors/schema-based-editor.component.ts
14. core/templates/components/forms/schema-based-editors/schema-based-expression-editor.component.spec.ts
15. core/templates/components/forms/schema-based-editors/schema-based-expression-editor.component.ts
16. core/templates/components/forms/schema-based-editors/schema-based-float-editor.component.spec.ts
17. core/templates/components/forms/schema-based-editors/schema-based-float-editor.component.ts
18. core/templates/components/forms/schema-based-editors/schema-based-html-editor.component.spec.ts
19. core/templates/components/forms/schema-based-editors/schema-based-html-editor.component.ts
20. core/templates/components/forms/schema-based-editors/schema-based-int-editor.component.spec.ts
21. core/templates/components/forms/schema-based-editors/schema-based-int-editor.component.ts
22. core/templates/components/forms/schema-based-editors/schema-based-list-editor.component.spec.ts
23. core/templates/components/forms/schema-based-editors/schema-based-list-editor.component.ts
24. core/templates/components/forms/schema-based-editors/schema-based-unicode-editor.component.spec.ts
25. core/templates/components/forms/schema-based-editors/schema-based-unicode-editor.component.ts
26. core/templates/components/state-directives/rule-editor/rule-type-selector.directive.ts
27. core/templates/components/state-editor/state-editor.component.spec.ts
28. core/templates/domain/collection/collection-update.service.spec.ts
29. core/templates/domain/collection/collection-update.service.ts
30. core/templates/domain/exploration/param-metadata.model.spec.ts
31. core/templates/domain/exploration/read-only-exploration-backend-api.service.spec.ts
32. core/templates/domain/question/pretest-question-backend-api.service.spec.ts
33. core/templates/domain/question/question-backend-api.service.spec.ts
34. core/templates/domain/skill/skill-update.service.spec.ts
35. core/templates/domain/skill/skill-update.service.ts
36. core/templates/domain/topic/SubtopicPage.model.spec.ts
37. core/templates/pages/admin-page/roles-tab/admin-roles-tab.component.spec.ts
38. core/templates/pages/admin-page/roles-tab/admin-roles-tab.component.ts
39. core/templates/pages/collection-editor-page/editor-tab/collection-editor-tab.component.spec.ts
40. core/templates/pages/collection-editor-page/editor-tab/collection-editor-tab.component.ts
41. core/templates/pages/collection-editor-page/editor-tab/collection-node-creator.component.spec.ts
42. core/templates/pages/collection-editor-page/editor-tab/collection-node-creator.component.ts
43. core/templates/pages/collection-editor-page/editor-tab/collection-node-editor.component.spec.ts
44. core/templates/components/question-directives/question-player/skill-mastery-modal.component.spec.ts
45. core/templates/pages/collection-editor-page/modals/collection-editor-pre-publish-modal.component.spec.ts
46. core/templates/pages/collection-editor-page/modals/collection-editor-pre-publish-modal.component.ts
47. core/templates/pages/collection-editor-page/modals/collection-editor-save-modal.component.ts
48. core/templates/pages/collection-editor-page/navbar/collection-editor-navbar.component.spec.ts
49. core/templates/pages/collection-editor-page/navbar/collection-editor-navbar.component.ts
50. core/templates/pages/collection-editor-page/services/collection-linearizer.service.spec.ts
51. core/templates/pages/collection-editor-page/services/collection-linearizer.service.ts
52. core/templates/pages/collection-editor-page/settings-tab/collection-details-editor.component.spec.ts
53. core/templates/pages/collection-editor-page/settings-tab/collection-details-editor.component.ts
54. core/templates/pages/collection-editor-page/settings-tab/collection-permissions-card.component.ts
55. core/templates/pages/exploration-editor-page/editor-tab/templates/modal-templates/add-answer-group-modal.component.spec.ts
56. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-data-editor-panel.service.spec.ts
57. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-data-editor-panel.service.ts
58. core/templates/pages/exploration-editor-page/history-tab/modal-templates/revert-exploration-modal.component.ts
59. core/templates/pages/exploration-editor-page/preview-tab/templates/preview-set-parameters-modal.component.ts
60. core/templates/pages/exploration-editor-page/services/autosave-info-modals.service.spec.ts
61. core/templates/pages/exploration-editor-page/services/exploration-data.service.spec.ts
62. core/templates/pages/exploration-editor-page/services/exploration-title.service.spec.ts
63. core/templates/pages/exploration-editor-page/services/user-email-preferences.service.ts
64. core/templates/pages/exploration-player-page/layout-directives/learner-view-info.component.spec.ts
65. core/templates/pages/exploration-player-page/layout-directives/learner-view-info.component.ts
66. core/templates/pages/exploration-player-page/learner-experience/supplemental-card.component.spec.ts
67. core/templates/pages/exploration-player-page/learner-experience/supplemental-card.component.ts
68. core/templates/pages/exploration-player-page/services/learner-local-nav-backend-api.service.ts
69. core/templates/pages/landing-pages/topic-landing-page/topic-landing-page.component.spec.ts
70. core/templates/pages/landing-pages/topic-landing-page/topic-landing-page.component.ts
71. core/templates/pages/oppia-root/routing/guards/can-access-splash-page.guard.spec.ts
72. core/templates/pages/oppia-root/routing/guards/can-access-splash-page.guard.ts
73. core/templates/pages/profile-page/profile-page.component.spec.ts
74. core/templates/pages/profile-page/profile-page.component.ts
75. core/templates/pages/release-coordinator-page/beam-jobs-tab/beam-jobs-tab.component.spec.ts
76. core/templates/pages/release-coordinator-page/beam-jobs-tab/beam-jobs-tab.component.ts
77. core/templates/pages/release-coordinator-page/components/cancel-beam-job-dialog.component.spec.ts
78. core/templates/pages/release-coordinator-page/components/cancel-beam-job-dialog.component.ts
79. core/templates/pages/release-coordinator-page/components/start-new-beam-job-dialog.component.spec.ts
80. core/templates/pages/release-coordinator-page/components/start-new-beam-job-dialog.component.ts
81. core/templates/pages/release-coordinator-page/components/view-beam-job-output-dialog.component.spec.ts
82. core/templates/pages/release-coordinator-page/components/view-beam-job-output-dialog.component.ts
83. core/templates/pages/release-coordinator-page/navbar/release-coordinator-navbar.component.spec.ts
84. core/templates/pages/release-coordinator-page/navbar/release-coordinator-navbar.component.ts
85. core/templates/pages/release-coordinator-page/services/release-coordinator-backend-api.service.spec.ts
86. core/templates/pages/skill-editor-page/editor-tab/skill-concept-card-editor/skill-concept-card-editor.component.spec.ts
87. core/templates/pages/skill-editor-page/editor-tab/skill-concept-card-editor/skill-concept-card-editor.component.ts
88. core/templates/pages/skill-editor-page/editor-tab/skill-concept-card-editor/worked-example-editor.component.spec.ts
89. core/templates/pages/skill-editor-page/editor-tab/skill-concept-card-editor/worked-example-editor.component.ts
90. core/templates/pages/skill-editor-page/editor-tab/skill-description-editor/skill-description-editor.component.spec.ts
91. core/templates/pages/skill-editor-page/editor-tab/skill-description-editor/skill-description-editor.component.ts
92. core/templates/pages/skill-editor-page/editor-tab/skill-misconceptions-editor/misconception-editor.component.spec.ts
93. core/templates/pages/skill-editor-page/editor-tab/skill-misconceptions-editor/misconception-editor.component.ts
94. core/templates/pages/skill-editor-page/editor-tab/skill-misconceptions-editor/skill-misconceptions-editor.component.spec.ts
95. core/templates/pages/skill-editor-page/editor-tab/skill-misconceptions-editor/skill-misconceptions-editor.component.ts
96. core/templates/pages/skill-editor-page/editor-tab/skill-prerequisite-skills-editor/skill-prerequisite-skills-editor.component.spec.ts
97. core/templates/pages/skill-editor-page/editor-tab/skill-prerequisite-skills-editor/skill-prerequisite-skills-editor.component.ts
98. core/templates/pages/skill-editor-page/editor-tab/skill-preview-modal.component.ts
99. core/templates/pages/skill-editor-page/editor-tab/skill-rubrics-editor/skill-rubrics-editor.component.ts
100. core/templates/pages/skill-editor-page/services/skill-editor-staleness-detection.service.ts
101. core/templates/pages/skill-editor-page/services/skill-editor-state.service.spec.ts
102. core/templates/pages/story-editor-page/navbar/story-editor-navbar-breadcrumb.component.spec.ts
103. core/templates/pages/story-editor-page/navbar/story-editor-navbar-breadcrumb.component.ts
104. core/templates/pages/story-editor-page/navbar/story-editor-navbar.component.spec.ts
105. core/templates/pages/story-editor-page/navbar/story-editor-navbar.component.ts
106. core/templates/pages/story-editor-page/services/story-editor-staleness-detection.service.ts
107. core/templates/pages/story-editor-page/story-preview-tab/story-preview-tab.component.spec.ts
108. core/templates/pages/story-editor-page/story-preview-tab/story-preview-tab.component.ts
109. core/templates/pages/story-viewer-page/story-viewer-page.component.spec.ts
110. core/templates/pages/topic-editor-page/modal-templates/questions-opportunities-select-difficulty-modal.component.spec.ts
111. core/templates/pages/topic-editor-page/modal-templates/questions-opportunities-select-difficulty-modal.component.ts
112. core/templates/pages/topic-editor-page/services/create-new-skill-modal.service.spec.ts
113. core/templates/pages/topic-editor-page/services/create-new-skill-modal.service.ts
114. core/templates/pages/topics-and-skills-dashboard-page/topics-list/topics-list.component.spec.ts
115. core/templates/pages/topics-and-skills-dashboard-page/topics-list/topics-list.component.ts
116. core/templates/services/playthrough-issues.service.ts
117. core/templates/services/playthrough.service.spec.ts
118. core/templates/services/promo-bar-backend-api.service.spec.ts
119. core/templates/services/questions-list.service.spec.ts
120. core/tests/build_sources/extensions/python-program.tokenizer.spec.ts
121. extensions/objects/templates/list-of-sets-of-translatable-html-content-ids-editor.component.ts
</details>

## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
![Screenshot from 2022-06-23 14-40-40](https://user-images.githubusercontent.com/80846488/175263053-5cdc67c9-aa8e-41ba-9000-fb1502cedf40.png)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language


https://user-images.githubusercontent.com/80846488/182012110-6349c32f-6a60-4aa8-b444-8965952acdb3.mp4



<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Contributing-code-to-Oppia#instructions-for-making-a-code-change).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia%27s-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-your-build-fails).
",True,15799,https://api.github.com/repos/oppia/oppia/pulls/15799,https://github.com/oppia/oppia/pull/15799,closed,1445,1012,131,30,17,81,1,1,[{'name': 'PR: LGTM'}],2022-07-25 21:48:34+00:00,2022-08-07 19:41:05+00:00,1115551.0,"12 days, 21:52:31","[{'comment_id': 930772419, 'comment_body': 'Unable to solve this ""Object is possibly undefined."" as it comes from NgForm. Need help.', 'comment_created': datetime.datetime(2022, 7, 27, 8, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 930782818, 'comment_body': 'Will look into this unknown later, need some discussion. So unable to replace this right now.', 'comment_created': datetime.datetime(2022, 7, 27, 8, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 930789767, 'comment_body': 'When max/min length not selected it was pass as undefined(? property). But to make things more clear use null to indicate the same.', 'comment_created': datetime.datetime(2022, 7, 27, 8, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 930794558, 'comment_body': 'Again unable to solve this, error comes along with mirror depd. Need help.', 'comment_created': datetime.datetime(2022, 7, 27, 8, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 930897517, 'comment_body': ""We need arg of type LearnerExplorationSummaryBackendDict.\r\n```ruby:\r\nexport interface LearnerExplorationSummaryBackendDict {\r\n  'category': string;\r\n  'community_owned': boolean;\r\n  'activity_type': string;\r\n  'last_updated_msec': number;\r\n  'ratings': ExplorationRatings;\r\n  'id': string;\r\n  'created_on_msec': number;\r\n  'human_readable_contributors_summary': HumanReadableContributorsSummary;\r\n  'language_code': string;\r\n  'num_views': number;\r\n  'objective': string;\r\n  'status': string;\r\n  'tags': string[];\r\n  'thumbnail_bg_color': string;\r\n  'thumbnail_icon_url': string;\r\n  'title': string;\r\n}\r\n```\r\n\r\nBut passing arg is type \r\n```ruby:\r\nexport interface ExplorationSummaryDict {\r\n  'category': string;\r\n  'community_owned': boolean;\r\n  'human_readable_contributors_summary': (\r\n    HumanReadableContributorsSummary);\r\n  'id': string;\r\n  'language_code': string;\r\n  'num_views': number;\r\n  'objective': string;\r\n  'status': string;\r\n  'tags': [];\r\n  'thumbnail_bg_color': string;\r\n  'thumbnail_icon_url': string;\r\n  'title': string;\r\n}\r\n```\r\n\r\nThis function actually working as adding collection node, means append new exploration. But types are almost same but missing some properties. Missing property is useful in collection. Need help in it."", 'comment_created': datetime.datetime(2022, 7, 27, 10, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 931273088, 'comment_body': 'Making momento null is not required.\r\n\r\nEarlier:\r\nprevious value->null->new value\r\n\r\nNow\r\nprevious value-> new value.', 'comment_created': datetime.datetime(2022, 7, 27, 16, 32, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 934777288, 'comment_body': 'This is a service use a different comment', 'comment_created': datetime.datetime(2022, 8, 1, 17, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934780618, 'comment_body': 'Service..use different comment', 'comment_created': datetime.datetime(2022, 8, 1, 17, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934781080, 'comment_body': 'Can we use callThrough here? ditto below', 'comment_created': datetime.datetime(2022, 8, 1, 17, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934781632, 'comment_body': 'Can we use callthrough ? ditto below', 'comment_created': datetime.datetime(2022, 8, 1, 17, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934782153, 'comment_body': 'use callthrough ditto below', 'comment_created': datetime.datetime(2022, 8, 1, 18, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934783078, 'comment_body': 'use callthrough', 'comment_created': datetime.datetime(2022, 8, 1, 18, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934784659, 'comment_body': 'I think if condition should be added for this assignment instead', 'comment_created': datetime.datetime(2022, 8, 1, 18, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934784925, 'comment_body': 'use callthrough', 'comment_created': datetime.datetime(2022, 8, 1, 18, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934785126, 'comment_body': 'use callthrough', 'comment_created': datetime.datetime(2022, 8, 1, 18, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934786228, 'comment_body': 'Why is this optional?', 'comment_created': datetime.datetime(2022, 8, 1, 18, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934787825, 'comment_body': 'Define these in component instead', 'comment_created': datetime.datetime(2022, 8, 1, 18, 8, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934788850, 'comment_body': 'Have you tested UI changes here?', 'comment_created': datetime.datetime(2022, 8, 1, 18, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934789731, 'comment_body': 'What is this change?', 'comment_created': datetime.datetime(2022, 8, 1, 18, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934790009, 'comment_body': 'callthrough', 'comment_created': datetime.datetime(2022, 8, 1, 18, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934792179, 'comment_body': 'callthrough', 'comment_created': datetime.datetime(2022, 8, 1, 18, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934796170, 'comment_body': 'Can you rephrase this?', 'comment_created': datetime.datetime(2022, 8, 1, 18, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934798425, 'comment_body': 'wdym by default collection?', 'comment_created': datetime.datetime(2022, 8, 1, 18, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934804864, 'comment_body': ""Are we sure that this won't be null, I think we should use an if-check instead"", 'comment_created': datetime.datetime(2022, 8, 1, 18, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934813708, 'comment_body': 'Wondering what changes in this PR made you change this return value?', 'comment_created': datetime.datetime(2022, 8, 1, 18, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934825243, 'comment_body': ""Agreed with the comment, we should ignore it since `null` here comes from the dependency itself. We could alternatively add an if-check without throwing any errors(since it's a lifecycle hook) but I think ts-ignore makes more sense."", 'comment_created': datetime.datetime(2022, 8, 1, 18, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934839277, 'comment_body': ""Again the inbuilt method makes use of 'any' and we're not sure if the value exists or not. Explicit typecasting won't make sense as well so adding ts-ignore is the best option"", 'comment_created': datetime.datetime(2022, 8, 1, 19, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 934857334, 'comment_body': 'Does both the interface serves the same purpose? It can be the case that `ExplorationSummaryDict` can be replaced with `LearnerExplorationSummaryBackendDict` because it is a relatively newer interface with the same properties apart from the left four and might be added by mistake at the point of migration. Do check if extra properties present in `LearnerExplorationSummaryBackendDict` are also used at places where `ExplorationSummaryDict` is being used', 'comment_created': datetime.datetime(2022, 8, 1, 19, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 935905035, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 2, 18, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935905125, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 2, 18, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935911826, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 2, 18, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935932152, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 2, 19, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935934062, 'comment_body': 'yes, used in interaction.', 'comment_created': datetime.datetime(2022, 8, 2, 19, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935943216, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 2, 19, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935948036, 'comment_body': 'for Callthrough we need to define all values that are used inside updateMisconceptionName. As Callthrough, spy whole updateMisconceptionName function and then return value.  But here we just want unit testing of ""proper working of save button"". So end result of updateMisconceptionName function is enough.\r\n\r\nThats why i avoid Callthough many times.', 'comment_created': datetime.datetime(2022, 8, 2, 19, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935954624, 'comment_body': 'Same as above explanation.', 'comment_created': datetime.datetime(2022, 8, 2, 19, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935954688, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 2, 19, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935961271, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 2, 19, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935961472, 'comment_body': 'same.', 'comment_created': datetime.datetime(2022, 8, 2, 19, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935970038, 'comment_body': 'Done, it can be null, which is further validate and proper response for null value return by validateNumber().', 'comment_created': datetime.datetime(2022, 8, 2, 19, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 935980918, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 8, 2, 20, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 936239689, 'comment_body': 'What Memento exactly doing is, showing current opened bar/container/workedExample(here). After canceling Editing we make Memento null, to close the same.\r\n\r\nSo it is sure thing while cancelEditQuestion function Memento must be non-null in starting and after that at last it is null.\r\n\r\nSo just return if `workedExampleQuestionMemento === null`.', 'comment_created': datetime.datetime(2022, 8, 3, 5, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 936240808, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 3, 5, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 936246118, 'comment_body': ""See at video proof 4:46.\r\n\r\nWe are showing default collection (card + some data).\r\n\r\nAlso one odd behaviour i see is, we are able to make collection without its title, description, tags etc. Means we can make collection( not talking about default collection). That's why we are using null.\r\n\r\nI am not sure about this behaviour of collection. As it is expected behaviour or not."", 'comment_created': datetime.datetime(2022, 8, 3, 5, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 936261091, 'comment_body': ""Use of null, if we don't get selected Job."", 'comment_created': datetime.datetime(2022, 8, 3, 5, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 936268019, 'comment_body': ""Earlier getData function is not present inside its service file, so we are just throwing error. But after strict typescript we can't do this."", 'comment_created': datetime.datetime(2022, 8, 3, 6, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 936269935, 'comment_body': ""See `getStoredImagesData` of image local storage service, it returns empty string, when can't find related data. Use of null earlier is wrong typed."", 'comment_created': datetime.datetime(2022, 8, 3, 6, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 936279108, 'comment_body': 'It is not used in, where `ExplorationSummaryDict` is used. Properties like `last_updated_msec` is just used inside `LearnerExplorationSummaryBackendDict`. I think we need some refactoring in frontend to set intial values to them when exploration is used in collections.', 'comment_created': datetime.datetime(2022, 8, 3, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 936640176, 'comment_body': 'Let it be `null` initially', 'comment_created': datetime.datetime(2022, 8, 3, 13, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 936643393, 'comment_body': 'Okay, can you try refactoring it?', 'comment_created': datetime.datetime(2022, 8, 3, 13, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 936669531, 'comment_body': ""Please change it wherever it can be done without a lot of changes, there are still some instances left in the PR. Using `returnValue()` doesn't really make any sense, we should use dedicated functions for these cases as a good coding practice."", 'comment_created': datetime.datetime(2022, 8, 3, 13, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 936674376, 'comment_body': ""Okay but the `it` statement doesn't match what is being done inside the block"", 'comment_created': datetime.datetime(2022, 8, 3, 13, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 936679454, 'comment_body': ""At the timestamp you mentioned for video is just the preview for collection, I don't think we can publish a collection without a title"", 'comment_created': datetime.datetime(2022, 8, 3, 13, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mridul-netizen', 'type': 'User'}, {'comment_id': 937065615, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 3, 19, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 937065890, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 3, 19, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 937092326, 'comment_body': 'Removed this check, no need. ', 'comment_created': datetime.datetime(2022, 8, 3, 20, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 937113991, 'comment_body': ""Agree we can't publish a collection without title and description but we can without tags and other left properties.\r\n\r\nFlow of null is used for preview & default collection. For that we need to change behaviour of collection preview & its default.\r\n\r\nLike no default & preview of collection without exploration, title, description etc."", 'comment_created': datetime.datetime(2022, 8, 3, 20, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 937132060, 'comment_body': 'Removed this file for now, will take a look on later stage.', 'comment_created': datetime.datetime(2022, 8, 3, 20, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 938176440, 'comment_body': 'Prefer `let/const`', 'comment_created': datetime.datetime(2022, 8, 4, 19, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 939483797, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 6, 4, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947006937, 'comment_body': '`unknown` without explanation', 'comment_created': datetime.datetime(2022, 8, 16, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947012393, 'comment_body': '`unknown` without a comment, please add a comment.', 'comment_created': datetime.datetime(2022, 8, 16, 16, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947013219, 'comment_body': ""I don't understand this comment, can you elaborate."", 'comment_created': datetime.datetime(2022, 8, 16, 16, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947014215, 'comment_body': 'Why `?`, we prefer not to use it right?', 'comment_created': datetime.datetime(2022, 8, 16, 16, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947015051, 'comment_body': 'I think we should explicitly assign and allow `null` here.', 'comment_created': datetime.datetime(2022, 8, 16, 16, 41, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947018564, 'comment_body': 'Why do we allow both `null` and `undefined`.', 'comment_created': datetime.datetime(2022, 8, 16, 16, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947020732, 'comment_body': 'Hmm, rather than doing `as string` can we verify that the return type is actually string? Why is this `unknown` only here and not in other places like this?', 'comment_created': datetime.datetime(2022, 8, 16, 16, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 947528563, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 17, 7, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947529279, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 17, 7, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947534607, 'comment_body': ""Already used in many places. Means we are getting ImageBlob from localstorage. And there -> Image file returned will be null when blob is not of type  'image', blob size is zero or dataURI is null.  dataURI here will be null if imageFilename does not exist in local storage.\r\n\r\nComment is present everywhere(root level as well) why it is null."", 'comment_created': datetime.datetime(2022, 8, 17, 7, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947583310, 'comment_body': 'No need, we are using ""try to get values and catch for unwanted results"" to get these properties. And further checking through `if` conditions. Also urlServices( who\'s value we are using in above properties)  never return null.', 'comment_created': datetime.datetime(2022, 8, 17, 8, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947593742, 'comment_body': 'No need', 'comment_created': datetime.datetime(2022, 8, 17, 8, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947603228, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 8, 17, 8, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 947676027, 'comment_body': 'Allow `undefined` only now. Not using null because while selecting targeting job (beamJob we need) from all beamJobs, if we unable to find, it throws undefined, which is further use to make button disable to start job.', 'comment_created': datetime.datetime(2022, 8, 17, 9, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 948700452, 'comment_body': 'Sorry, still not 100% clear what you mean. ""if imageFilename does not exist in local storage"" do you mean that ""the image does not exist in local storage""? Because storage contains images that are being named using a filename the filenames are not stored in the storage.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 948702504, 'comment_body': ""But if the try-catch fails below these will not be set and wouldn't it be better to have them set to `null`?"", 'comment_created': datetime.datetime(2022, 8, 18, 6, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 948743328, 'comment_body': 'how imageBlob is set to null.\r\n\r\n![Screenshot from 2022-08-18 12-51-49](https://user-images.githubusercontent.com/80846488/185334867-90b7e73a-cb99-4f99-929a-42efb0607e44.png)\r\n\r\n![Screenshot from 2022-08-18 12-52-21](https://user-images.githubusercontent.com/80846488/185334923-2a99894d-7739-44f0-a28d-757bcf11dc14.png)\r\n', 'comment_created': datetime.datetime(2022, 8, 18, 7, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 948743530, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 8, 18, 7, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 949039835, 'comment_body': 'Ah I see now. Thinking about it though, I would move the `dataURI == null` check outside the `converImageDataToImageFile` and only call it when `dataURI` is not `null`.', 'comment_created': datetime.datetime(2022, 8, 18, 11, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 949372405, 'comment_body': ""But there are two more cases in this function `if (blob.type.match('image') && blob.size > 0)` where we need null if they fails."", 'comment_created': datetime.datetime(2022, 8, 18, 16, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 949372717, 'comment_body': '@vojtechjelinek PTAL.', 'comment_created': datetime.datetime(2022, 8, 18, 16, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}]","[{'commit_sha': '4922d9b5c32169208aef7c46bd9e73d2b877db1b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cecb5f7278b6fbf555fedfd0102c02fa0efc6d1f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c17bc85ef952945bd6617a5be3868f3b2a07732', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f30684ea76d2ca98721424b21f4f85c778fe132', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35fdcf50d9af17947a0efb264a5904fa20459de1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2baf6a2937babb55a3f5702da45d19356bafbd5c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de14dc6d7d3ffa0b21fc88817f79316b3875e1f4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94f44f2e4a2557f25ed5b4ef3bf348704f7e705c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc33ee5afaf81d02f9f6ed09102448b9accfa41e', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf43146e82eb80a8f7b6beb594fc38a87238f2c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c45997f6957fbe3d7eb86d3b1e3c473980fed08f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af384569aae33e36ba7625d9e40421e2c62f5378', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b378637d1124e8517059f39357f90858c6711bc9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '685ad93e10a39c859a7d7854c74a52b94edd5c25', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c37b4ecb2b6ec77569fba5135a0cf3324f934dc9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '652c55589e9c5c581c04b9890f9769bc2e966ab4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec7e9481b1b14e2cb57a7a5716e3f7b411faf556', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca538d5fbdaedd4d99e6af5656f63f896caabb3d', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91762686ffc81780ffa0c81887633d663ec65b3c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13f87224b4e9e6173e0efb60ae868d9cd39d75cc', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fc1e950265daa6f2e1701c3a6272b58df696942', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5bf7336247699a0033d4b754d8d548eb4bcd074', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd8de9177506c98d89da27a85a517f301b1f7e79', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd31afaa2a0db2eb0db7b9c3853f5bcf0c7eeb6ab', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '489b0e3e1c4094df7c8e120c47f5e9e36b2723c6', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d53f4abb56c16efc7b1f349f30df410c6052e4b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d54bf043209ec0a3cdd3fac75afcc406ff85124', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9819daaf0806e30a476ea0365f2797e95671957', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1cc91afba31a91f0d6cd79fda8499815a300d05', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '245be828e7eb202768083ce4466aae88b3069dfb', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}]",JG-11,80846488,,User,,39,,0,21
1077653039,Fix part of #10474: Make typescript checks strict for few more files ,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes or fixes part of #10474 .
2. This PR does the following: Make typescript checks strict for few more files 

<details>
<summary>Hidden list of completed Files</summary>


1. core/templates/components/button-directives/hint-and-solution-buttons.component.spec.ts
2. core/templates/components/button-directives/hint-and-solution-buttons.component.ts
3. core/templates/components/entity-creation-services/topic-creation.service.spec.ts
4. core/templates/components/entity-creation-services/topic-creation.service.ts
5. core/templates/components/forms/custom-forms-directives/require-is-float.directive.spec.ts
6. core/templates/components/forms/custom-forms-directives/require-is-float.directive.ts
7. core/templates/components/forms/custom-forms-directives/select2-dropdown.directive.ts
8. core/templates/components/forms/schema-viewers/schema-based-custom-viewer.directive.spec.ts
9. core/templates/components/forms/schema-viewers/schema-based-dict-viewer.directive.spec.ts
10. core/templates/components/forms/schema-viewers/schema-based-dict-viewer.directive.ts
11. core/templates/components/forms/schema-viewers/schema-based-html-viewer.directive.spec.ts
12. core/templates/components/forms/schema-viewers/schema-based-list-viewer.directive.spec.ts
13. core/templates/components/forms/schema-viewers/schema-based-primitive-viewer.directive.spec.ts
14. core/templates/components/forms/schema-viewers/schema-based-primitive-viewer.directive.ts
15. core/templates/components/forms/schema-viewers/schema-based-unicode-viewer.directive.spec.ts
16. core/templates/components/forms/schema-viewers/schema-based-viewer.directive.spec.ts
17. core/templates/components/forms/validators/has-length-at-least.filter.ts
18. core/templates/components/forms/validators/has-length-at-most.filter.ts
19. core/templates/components/forms/validators/is-at-least.filter.spec.ts
20. core/templates/components/forms/validators/is-at-least.filter.ts
21. core/templates/components/forms/validators/is-at-most.filter.spec.ts
22. core/templates/components/forms/validators/is-at-most.filter.ts
23. core/templates/components/forms/validators/is-integer.filter.spec.ts
24. core/templates/components/forms/validators/is-integer.filter.ts
25. core/templates/components/forms/validators/is-nonempty.filter.spec.ts
26. core/templates/components/forms/validators/is-nonempty.filter.ts
27. core/templates/components/question-directives/question-editor/question-editor.component.spec.ts
28. core/templates/components/question-directives/question-editor/question-editor.component.ts
29. core/templates/components/question-directives/question-misconception-editor/tag-misconception-modal-component.spec.ts
30. core/templates/components/question-directives/question-misconception-editor/tag-misconception-modal-component.ts
31. core/templates/components/question-directives/question-player/question-player-concept-card-modal.component.spec.ts
32. core/templates/components/question-directives/question-player/question-player.component.spec.ts
33. core/templates/components/question-directives/question-player/question-player.component.ts
34. core/templates/components/rubrics-editor/rubrics-editor.component.spec.ts
35. core/templates/components/rubrics-editor/rubrics-editor.component.ts
36. core/templates/components/state-editor/state-content-editor/state-content-editor.component.spec.ts
37. core/templates/components/state-editor/state-content-editor/state-content-editor.component.ts
38. core/templates/components/state-editor/state-responses-editor/state-responses.component.spec.ts
39. core/templates/components/state-editor/state-responses-editor/state-responses.component.ts
40. core/templates/components/version-diff-visualization/version-diff-visualization.component.spec.ts
41. core/templates/components/version-diff-visualization/version-diff-visualization.component.ts
42. core/templates/directives/focus-on.directive.spec.ts
43. core/templates/domain/collection/editable-collection-backend-api.service.spec.ts
44. core/templates/filters/convert-unicode-to-html.filter.spec.ts
45. core/templates/filters/convert-unicode-to-html.filter.ts
46. core/templates/filters/convert-unicode-with-params-to-html.filter.spec.ts
47. core/templates/filters/convert-unicode-with-params-to-html.filter.ts
48. core/templates/filters/format-rte-preview.filter.spec.ts
49. core/templates/filters/format-rte-preview.filter.ts
50. core/templates/filters/format-timer.filter.ts
51. core/templates/filters/parameterize-rule-description.filter.spec.ts
52. core/templates/filters/parameterize-rule-description.filter.ts
53. core/templates/filters/parameterize-rule-description.pipe.spec.ts
54. core/templates/filters/parameterize-rule-description.pipe.ts
55. core/templates/filters/string-utility-filters/camel-case-to-hyphens.filter.spec.ts
56. core/templates/filters/string-utility-filters/camel-case-to-hyphens.filter.ts
57. core/templates/filters/string-utility-filters/get-abbreviated-text.filter.spec.ts
58. core/templates/filters/string-utility-filters/get-abbreviated-text.filter.ts
59. core/templates/filters/string-utility-filters/normalize-whitespace-punctuation-and-case.filter.ts
60. core/templates/filters/string-utility-filters/normalize-whitespace.filter.spec.ts
61. core/templates/filters/string-utility-filters/normalize-whitespace.filter.ts
62. core/templates/filters/string-utility-filters/replace-inputs-with-ellipses.filter.spec.ts
63. core/templates/filters/string-utility-filters/replace-inputs-with-ellipses.filter.ts
64. core/templates/filters/string-utility-filters/truncate-and-capitalize.filter.spec.ts
65. core/templates/filters/string-utility-filters/truncate-and-capitalize.filter.ts
66. core/templates/filters/string-utility-filters/truncate-at-first-ellipsis.filter.spec.ts
67. core/templates/filters/string-utility-filters/truncate-at-first-ellipsis.filter.ts
68. core/templates/filters/string-utility-filters/truncate-at-first-line.filter.spec.ts
69. core/templates/filters/string-utility-filters/truncate-at-first-line.filter.ts
70. core/templates/filters/string-utility-filters/truncate.filter.spec.ts
71. core/templates/filters/string-utility-filters/truncate.filter.ts
72. core/templates/filters/string-utility-filters/underscores-to-camel-case.filter.spec.ts
73. core/templates/filters/string-utility-filters/underscores-to-camel-case.filter.ts
74. core/templates/filters/string-utility-filters/wrap-text-with-ellipsis.filter.spec.ts
75. core/templates/filters/string-utility-filters/wrap-text-with-ellipsis.filter.ts
76. core/templates/filters/summarize-nonnegative-number.filter.spec.ts
77. core/templates/filters/summarize-nonnegative-number.filter.ts
78. core/templates/filters/truncate-input-based-on-interaction-answer-type.filter.ts
79. core/templates/pages/blog-dashboard-page/blog-dashboard-tile/blog-dashboard-tile.component.ts
80. core/templates/pages/blog-dashboard-page/blog-post-editor/blog-post-editor.component.spec.ts
81. core/templates/pages/blog-dashboard-page/blog-post-editor/blog-post-editor.component.ts
82. core/templates/pages/blog-dashboard-page/modal-templates/blog-card-preview-modal.component.spec.ts
83. core/templates/pages/blog-dashboard-page/modal-templates/blog-card-preview-modal.component.ts
84. core/templates/pages/contributor-dashboard-page/contributor-dashboard-page.component.spec.ts
85. core/templates/pages/contributor-dashboard-page/contributor-dashboard-page.component.ts
86. core/templates/pages/contributor-dashboard-page/modal-templates/question-suggestion-editor-modal.component.spec.ts
87. core/templates/pages/contributor-dashboard-page/modal-templates/question-suggestion-editor-modal.component.ts
88. core/templates/pages/contributor-dashboard-page/modal-templates/question-suggestion-review-modal.component.spec.ts
89. core/templates/pages/contributor-dashboard-page/modal-templates/question-suggestion-review-modal.component.ts
90. core/templates/pages/contributor-dashboard-page/modal-templates/translation-modal.component.spec.ts
91. core/templates/pages/contributor-dashboard-page/modal-templates/translation-modal.component.ts
92. core/templates/pages/contributor-dashboard-page/question-opportunities/question-opportunities.component.spec.ts
93. core/templates/pages/contributor-dashboard-page/question-opportunities/question-opportunities.component.ts
94. core/templates/pages/contributor-dashboard-page/services/translate-text.service.spec.ts
95. core/templates/pages/contributor-dashboard-page/translation-opportunities/translation-opportunities.component.spec.ts
96. core/templates/pages/exploration-editor-page/changes-in-human-readable-form/changes-in-human-readable-form.component.spec.ts
97. core/templates/pages/exploration-editor-page/editor-navigation/editor-navbar-breadcrumb.component.spec.ts
98. core/templates/pages/exploration-editor-page/editor-navigation/editor-navbar-breadcrumb.component.ts
99. core/templates/pages/exploration-editor-page/editor-navigation/editor-navigation.component.spec.ts
100. core/templates/pages/exploration-editor-page/editor-navigation/editor-navigation.component.ts
101. core/templates/pages/exploration-editor-page/editor-tab/graph-directives/exploration-graph.component.spec.ts
102. core/templates/pages/exploration-editor-page/editor-tab/graph-directives/exploration-graph.component.ts
103. core/templates/pages/exploration-editor-page/editor-tab/graph-directives/state-graph-visualization.component.spec.ts
104. core/templates/pages/exploration-editor-page/editor-tab/services/responses.service.spec.ts
105. core/templates/pages/exploration-editor-page/editor-tab/services/responses.service.ts
106. core/templates/pages/exploration-editor-page/editor-tab/state-name-editor/state-name-editor.component.spec.ts
107. core/templates/pages/exploration-editor-page/editor-tab/state-name-editor/state-name-editor.component.ts
108. core/templates/pages/exploration-editor-page/editor-tab/state-param-changes-editor/state-param-changes-editor.component.spec.ts
109. core/templates/pages/exploration-editor-page/editor-tab/state-param-changes-editor/state-param-changes-editor.component.ts
110. core/templates/pages/exploration-editor-page/editor-tab/templates/modal-templates/exploration-graph-modal.component.spec.ts
111. core/templates/pages/exploration-editor-page/editor-tab/templates/modal-templates/exploration-graph-modal.component.ts
112. core/templates/pages/exploration-editor-page/editor-tab/templates/modal-templates/teach-oppia-modal.component.spec.ts
113. core/templates/pages/exploration-editor-page/editor-tab/templates/modal-templates/teach-oppia-modal.component.ts
114. core/templates/pages/exploration-editor-page/editor-tab/test-interaction-panel/test-interaction-panel.component.spec.ts
115. core/templates/pages/exploration-editor-page/editor-tab/test-interaction-panel/test-interaction-panel.component.ts
116. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-data-editor-panel-modal.component.spec.ts
117. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-data-editor-panel-modal.component.ts
118. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-data.service.spec.ts
119. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-data.service.ts
120. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-modal.service.spec.ts
121. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-modal.service.ts
122. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-panel.component.spec.ts
123. core/templates/pages/exploration-editor-page/editor-tab/training-panel/training-panel.component.ts
124. core/templates/pages/exploration-editor-page/editor-tab/unresolved-answers-overview/unresolved-answers-overview.component.spec.ts
125. core/templates/pages/exploration-editor-page/editor-tab/unresolved-answers-overview/unresolved-answers-overview.component.ts
126. core/templates/pages/exploration-editor-page/exploration-objective-editor/exploration-objective-editor.component.spec.ts
127. core/templates/pages/exploration-editor-page/exploration-objective-editor/exploration-objective-editor.component.ts
128. core/templates/pages/exploration-editor-page/exploration-title-editor/exploration-title-editor.component.spec.ts
129. core/templates/pages/exploration-editor-page/exploration-title-editor/exploration-title-editor.component.ts
130. core/templates/pages/exploration-editor-page/history-tab/services/compare-versions.service.spec.ts
131. core/templates/pages/exploration-editor-page/history-tab/services/compare-versions.service.ts
132. core/templates/pages/exploration-editor-page/improvements-tab/needs-guiding-responses-task.component.spec.ts
133. core/templates/pages/exploration-editor-page/improvements-tab/needs-guiding-responses-task.component.ts
134. core/templates/pages/exploration-editor-page/improvements-tab/services/improvement-modal.service.spec.ts
135. core/templates/pages/exploration-editor-page/improvements-tab/services/improvement-modal.service.ts
136. core/templates/pages/exploration-editor-page/modal-templates/exploration-metadata-modal.component.spec.ts
137. core/templates/pages/exploration-editor-page/modal-templates/exploration-metadata-modal.component.ts
138. core/templates/pages/exploration-editor-page/modal-templates/exploration-save-modal.component.spec.ts
139. core/templates/pages/exploration-editor-page/modal-templates/exploration-save-modal.component.ts
140. core/templates/pages/exploration-editor-page/preview-tab/preview-tab.component.spec.ts
141. core/templates/pages/exploration-editor-page/preview-tab/preview-tab.component.ts
142. core/templates/pages/exploration-editor-page/services/change-list.service.spec.ts
143. core/templates/pages/exploration-editor-page/services/change-list.service.ts
144. core/templates/pages/exploration-editor-page/services/exploration-automatic-text-to-speech.service.ts
145. core/templates/pages/exploration-editor-page/services/exploration-correctness-feedback.service.ts
146. core/templates/pages/exploration-editor-page/services/exploration-edits-allowed-backend-api.service.spec.ts
147. core/templates/pages/exploration-editor-page/services/exploration-init-state-name.service.spec.ts
148. core/templates/pages/exploration-editor-page/services/exploration-init-state-name.service.ts
149. core/templates/pages/exploration-editor-page/services/exploration-language-code.service.spec.ts
150. core/templates/pages/exploration-editor-page/services/exploration-language-code.service.ts
151. core/templates/pages/exploration-editor-page/services/exploration-param-specs.service.ts
152. core/templates/pages/exploration-editor-page/services/exploration-property.service.spec.ts
153. core/templates/pages/exploration-editor-page/services/exploration-property.service.ts
154. core/templates/pages/exploration-editor-page/services/exploration-rights.service.spec.ts
155. core/templates/pages/exploration-editor-page/services/exploration-rights.service.ts
156. core/templates/pages/exploration-editor-page/services/exploration-save.service.spec.ts
157. core/templates/pages/exploration-editor-page/services/exploration-save.service.ts
158. core/templates/pages/exploration-editor-page/services/exploration-tags.service.ts
159. core/templates/pages/exploration-editor-page/services/exploration-warnings.service.spec.ts
160. core/templates/pages/exploration-editor-page/services/exploration-warnings.service.ts
161. core/templates/pages/exploration-editor-page/services/graph-data.service.ts
162. core/templates/pages/exploration-editor-page/services/parameter-metadata.service.spec.ts
163. core/templates/pages/exploration-editor-page/services/parameter-metadata.service.ts
164. core/templates/pages/exploration-editor-page/services/router.service.spec.ts
165. core/templates/pages/exploration-editor-page/services/router.service.ts
166. core/templates/pages/exploration-editor-page/settings-tab/settings-tab.component.spec.ts
167. core/templates/pages/exploration-editor-page/settings-tab/settings-tab.component.ts
168. core/templates/pages/exploration-editor-page/settings-tab/templates/preview-summary-tile-modal.component.ts
169. core/templates/pages/exploration-editor-page/statistics-tab/charts/pie-chart.component.spec.ts
170. core/templates/pages/exploration-editor-page/statistics-tab/charts/pie-chart.component.ts
171. core/templates/pages/exploration-editor-page/statistics-tab/statistics-tab.component.spec.ts
172. core/templates/pages/exploration-editor-page/statistics-tab/statistics-tab.component.ts
173. core/templates/pages/exploration-editor-page/statistics-tab/templates/state-stats-modal.component.spec.ts
174. core/templates/pages/exploration-editor-page/statistics-tab/templates/state-stats-modal.component.ts
175. core/templates/pages/exploration-editor-page/suggestion-modal-for-editor-view/suggestion-modal-for-exploration-editor.service.spec.ts
176. core/templates/pages/exploration-editor-page/suggestion-modal-for-editor-view/suggestion-modal-for-exploration-editor.service.ts
177. core/templates/pages/exploration-editor-page/translation-tab/modal-templates/add-audio-translation-modal.component.spec.ts
178. core/templates/pages/exploration-editor-page/translation-tab/modal-templates/add-audio-translation-modal.component.ts
179. core/templates/pages/exploration-editor-page/translation-tab/services/translation-status.service.spec.ts
180. core/templates/pages/exploration-editor-page/translation-tab/services/translation-status.service.ts
181. core/templates/pages/exploration-editor-page/translation-tab/services/translation-topic.service.spec.ts
182. core/templates/pages/exploration-editor-page/translation-tab/services/voiceover-recording.service.ts
183. core/templates/pages/exploration-editor-page/translation-tab/state-translation-status-graph/state-translation-status-graph.component.spec.ts
184. core/templates/pages/exploration-editor-page/translation-tab/state-translation-status-graph/state-translation-status-graph.component.ts
185. core/templates/pages/exploration-editor-page/translation-tab/translation-tab.component.spec.ts
186. core/templates/pages/exploration-editor-page/translation-tab/translation-tab.component.ts
187. core/templates/pages/exploration-editor-page/translation-tab/translator-overview/translator-overview.component.spec.ts
188. core/templates/pages/exploration-editor-page/translation-tab/translator-overview/translator-overview.component.ts
189. core/templates/pages/exploration-player-page/layout-directives/content-language-selector.component.spec.ts
190. core/templates/pages/exploration-player-page/layout-directives/content-language-selector.component.ts
191. core/templates/pages/exploration-player-page/layout-directives/feedback-popup.component.spec.ts
192. core/templates/pages/exploration-player-page/layout-directives/feedback-popup.component.ts
193. core/templates/pages/exploration-player-page/layout-directives/learner-local-nav.component.spec.ts
194. core/templates/pages/exploration-player-page/layout-directives/learner-local-nav.component.ts
195. core/templates/pages/exploration-player-page/layout-directives/progress-nav.component.spec.ts
196. core/templates/pages/exploration-player-page/layout-directives/progress-nav.component.ts
197. core/templates/pages/exploration-player-page/learner-experience/learner-answer-info-card.component.ts
198. core/templates/pages/exploration-player-page/learner-experience/ratings-and-recommendations.component.spec.ts
199. core/templates/pages/exploration-player-page/learner-experience/ratings-and-recommendations.component.ts
200. core/templates/pages/exploration-player-page/learner-experience/tutor-card.component.spec.ts
201. core/templates/pages/exploration-player-page/learner-experience/tutor-card.component.ts
202. core/templates/pages/exploration-player-page/modals/refresher-exploration-confirmation-modal.component.ts
203. core/templates/pages/exploration-player-page/services/exploration-player-state.service.spec.ts
204. core/templates/pages/exploration-player-page/services/image-preloader.service.spec.ts
205. core/templates/pages/exploration-player-page/services/image-preloader.service.ts
206. core/templates/pages/exploration-player-page/services/learner-answer-info.service.spec.ts
207. core/templates/pages/exploration-player-page/services/learner-answer-info.service.ts
208. core/templates/pages/exploration-player-page/services/learner-view-rating.service.spec.ts
209. core/templates/pages/exploration-player-page/services/learner-view-rating.service.ts
210. core/templates/pages/exploration-player-page/services/state-classifier-mapping.service.spec.ts
211. core/templates/pages/exploration-player-page/templates/lesson-information-card-modal.component.spec.ts
212. core/templates/pages/exploration-player-page/templates/lesson-information-card-modal.component.ts
213. core/templates/pages/learner-dashboard-page/learner-dashboard-page.component.ts
214. core/templates/pages/practice-session-page/practice-session-page.component.spec.ts
215. core/templates/pages/practice-session-page/practice-session-page.component.ts
216. core/templates/pages/review-test-page/review-test-page.component.spec.ts
217. core/templates/pages/review-test-page/review-test-page.component.ts
218. core/templates/pages/skill-editor-page/editor-tab/skill-editor-main-tab.component.spec.ts
219. core/templates/pages/skill-editor-page/editor-tab/skill-editor-main-tab.component.ts
220. core/templates/pages/skill-editor-page/navbar/skill-editor-navbar.component.spec.ts
221. core/templates/pages/skill-editor-page/navbar/skill-editor-navbar.component.ts
222. core/templates/pages/skill-editor-page/questions-tab/skill-questions-tab.component.spec.ts
223. core/templates/pages/skill-editor-page/questions-tab/skill-questions-tab.component.ts
224. core/templates/pages/skill-editor-page/services/skill-editor-routing.service.spec.ts
225. core/templates/pages/skill-editor-page/services/skill-editor-routing.service.ts
226. core/templates/pages/skill-editor-page/skill-editor-page.component.spec.ts
227. core/templates/pages/skill-editor-page/skill-preview-tab/skill-preview-tab.component.ts
228. core/templates/pages/skill-editor-page/skill-preview-tab/skill-preview-tab.component.spec.ts
229. core/templates/pages/story-editor-page/services/story-editor-state.service.spec.ts
230. core/templates/pages/topic-editor-page/modal-templates/change-subtopic-assignment-modal.component.ts
231. core/templates/pages/topic-editor-page/modal-templates/create-new-subtopic-modal.component.spec.ts
232. core/templates/pages/topic-editor-page/modal-templates/create-new-subtopic-modal.component.ts
233. core/templates/pages/topic-editor-page/navbar/topic-editor-navbar-breadcrumb.component.ts
234. core/templates/pages/topic-editor-page/preview-tab/topic-preview-tab.component.spec.ts
235. core/templates/pages/topic-editor-page/preview-tab/topic-preview-tab.component.ts
236. core/templates/pages/topic-editor-page/questions-tab/topic-questions-tab.component.spec.ts
237. core/templates/pages/topic-editor-page/questions-tab/topic-questions-tab.component.ts
238. core/templates/pages/topic-editor-page/services/entity-creation.service.spec.ts
239. core/templates/pages/topic-editor-page/services/entity-creation.service.ts
240. core/templates/pages/topic-editor-page/services/subtopic-validation.service.ts
241. core/templates/pages/topic-editor-page/services/topic-editor-routing.service.spec.ts
242. core/templates/pages/topic-editor-page/services/topic-editor-routing.service.ts
243. core/templates/pages/topic-editor-page/services/topic-editor-state.service.spec.ts
244. core/templates/pages/topic-editor-page/services/topic-editor-state.service.ts
245. core/templates/pages/topic-editor-page/services/topic-editor-staleness-detection.service.ts
246. core/templates/pages/topic-editor-page/subtopic-editor/subtopic-preview-tab.component.spec.ts
247. core/templates/pages/topic-editor-page/subtopic-editor/subtopic-preview-tab.component.ts
248. core/templates/pages/topics-and-skills-dashboard-page/topics-and-skills-dashboard-page.component.spec.ts
249. core/templates/pages/topics-and-skills-dashboard-page/topics-and-skills-dashboard-page.component.ts
250. core/templates/services/exploration-features.service.spec.ts
251. core/templates/services/exploration-improvements.service.spec.ts
252. core/templates/services/exploration-improvements.service.ts
253. core/templates/services/question-validation.service.spec.ts
254. core/templates/services/state-interaction-stats.service.spec.ts
255. core/templates/services/state-interaction-stats.service.ts
256. core/templates/services/state-top-answers-stats.service.spec.ts
257. core/templates/services/state-top-answers-stats.service.ts
258. extensions/rich_text_components/Image/directives/oppia-noninteractive-image.component.spec.ts
259. extensions/rich_text_components/Image/directives/oppia-noninteractive-image.component.ts
260. extensions/rich_text_components/Math/directives/oppia-noninteractive-math.component.ts
261. extensions/value_generators/templates/copier.component.ts
262. extensions/value_generators/templates/random-selector.component.spec.ts
263. extensions/value_generators/templates/random-selector.component.ts
264. extensions/visualizations/oppia-visualization-enumerated-frequency-table.directive.spec.ts
265. extensions/visualizations/oppia-visualization-enumerated-frequency-table.directive.ts
266. extensions/visualizations/oppia-visualization-sorted-tiles.component.spec.ts
267. extensions/visualizations/oppia-visualization-sorted-tiles.component.ts
</details>


## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16214,https://api.github.com/repos/oppia/oppia/pulls/16214,https://github.com/oppia/oppia/pull/16214,closed,4110,5908,307,86,50,63,1,1,[{'name': 'PR: LGTM'}],2022-10-05 17:44:23+00:00,2022-11-22 06:19:10+00:00,4106087.0,"47 days, 12:34:47","[{'comment_id': 1010345096, 'comment_body': 'prefer `let/const` over var.', 'comment_created': datetime.datetime(2022, 11, 1, 11, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 1010345347, 'comment_body': 'ditto', 'comment_created': datetime.datetime(2022, 11, 1, 11, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 1010345719, 'comment_body': 'prefer `let/const` over var. Here and elsewhere', 'comment_created': datetime.datetime(2022, 11, 1, 11, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ashutoshc8101', 'type': 'User'}, {'comment_id': 1023201585, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 15, 19, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1023201694, 'comment_body': 'done', 'comment_created': datetime.datetime(2022, 11, 15, 19, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1023201810, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 15, 19, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1024250589, 'comment_body': '?', 'comment_created': datetime.datetime(2022, 11, 16, 16, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'heyimShivam', 'type': 'User'}, {'comment_id': 1024252131, 'comment_body': '```suggestion\r\n        stateName)\r\n      ).then(vizInfo => ({\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 16, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1024573670, 'comment_body': '```suggestion\r\n  // The following property is set to null when the\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 22, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1024574355, 'comment_body': ""If this can be `null`, shouldn't we remove the non-null (!) assertion operator? Ditto elsewhere."", 'comment_created': datetime.datetime(2022, 11, 16, 22, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1024576192, 'comment_body': '```suggestion\r\n  // Below property is null if there is no error.\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 22, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1024577025, 'comment_body': '```suggestion\r\n  // Question ID is null when it is not used in the backend.\r\n```\r\n\r\nAlso, what do you mean by ""not used in the backend""?', 'comment_created': datetime.datetime(2022, 11, 16, 22, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1024577799, 'comment_body': 'Why is this cast necessary?', 'comment_created': datetime.datetime(2022, 11, 16, 22, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1024579158, 'comment_body': '```suggestion\r\n    const skillId = this.suggestion.change.skill_id;\r\n```\r\n\r\nPrefer `const` if the variable is not being reassigned. Ditto elsewhere.', 'comment_created': datetime.datetime(2022, 11, 16, 22, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1024579281, 'comment_body': '```suggestion\r\n    const skillId = this.suggestion.change.skill_id;\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 22, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1024580407, 'comment_body': '```suggestion\r\n        if (!userContributionRights) {\r\n          return;\r\n        }\r\n        const reviewableLanguageCodes = (\r\n          userContributionRights.can_review_translation_for_language_codes);\r\n        if (reviewableLanguageCodes.includes(this.activeLanguageCode)) {\r\n          this.isActiveLanguageReviewer = true;\r\n        }\r\n```', 'comment_created': datetime.datetime(2022, 11, 16, 22, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1025497448, 'comment_body': 'Not sure, but it is like something flake. Passes many times but fails inbetween. Not under my work. Just solve it.', 'comment_created': datetime.datetime(2022, 11, 17, 17, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025499036, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 17, 17, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025499498, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 17, 17, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025500065, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 17, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025501042, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 17, 17, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025501446, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 17, 17, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025507517, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 17, 17, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025508292, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 17, 17, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025508477, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 17, 17, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025510319, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 17, 17, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1025611282, 'comment_body': 'Solved by Sahil PR. Thanks @heyimShivam, \r\n\r\nPlease resolve comment.', 'comment_created': datetime.datetime(2022, 11, 17, 19, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027007978, 'comment_body': 'Please keep the files in this list alphabetized', 'comment_created': datetime.datetime(2022, 11, 19, 1, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1027008582, 'comment_body': 'Why are we adding this file to the exclusion list since this PR is supposed to be making typescript checks stricter?', 'comment_created': datetime.datetime(2022, 11, 19, 1, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1027098412, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 19, 14, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027098421, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 19, 14, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027143249, 'comment_body': '```suggestion\r\n  validationError: string | null;\r\n```', 'comment_created': datetime.datetime(2022, 11, 19, 21, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027143278, 'comment_body': '```suggestion\r\n  questionId: string | null;\r\n```\r\n\r\nPlease remove the non-null operator wherever the property can be `null`.', 'comment_created': datetime.datetime(2022, 11, 19, 21, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027143604, 'comment_body': '```suggestion\r\n    const currentSuggestionId = this.remainingContributionIdStack.pop();\r\n```', 'comment_created': datetime.datetime(2022, 11, 19, 21, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027143782, 'comment_body': ""```suggestion\r\n      throw new Error('currentSuggestionId should not be undefined.');\r\n```"", 'comment_created': datetime.datetime(2022, 11, 19, 21, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027143841, 'comment_body': ""Why is this cast necessary? I think we removed it above (https://github.com/oppia/oppia/pull/16214#discussion_r1024577799), so let's remove it here as well."", 'comment_created': datetime.datetime(2022, 11, 19, 21, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027143981, 'comment_body': '```suggestion\r\n  languageDescription: string | null;\r\n```', 'comment_created': datetime.datetime(2022, 11, 19, 21, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027144122, 'comment_body': 'Why is this cast necessary?', 'comment_created': datetime.datetime(2022, 11, 19, 21, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027144763, 'comment_body': ""Why is this cast necessary? Also, let's just rename `attributes` to `attributeValues` for clarity."", 'comment_created': datetime.datetime(2022, 11, 19, 21, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027144802, 'comment_body': 'Why are these casts necessary?', 'comment_created': datetime.datetime(2022, 11, 19, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027144873, 'comment_body': ""This separate variable declaration doesn't add much value (pun not intended). I would just inline it above."", 'comment_created': datetime.datetime(2022, 11, 19, 21, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027228165, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 20, 5, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027228176, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 20, 5, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027228223, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 20, 5, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027228260, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 20, 5, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027228304, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 20, 5, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027228425, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 20, 5, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027342187, 'comment_body': 'Yes, type casted thing is of union type so we need specific one. It is general thing we do with union type.', 'comment_created': datetime.datetime(2022, 11, 20, 19, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027345626, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 11, 20, 20, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027345952, 'comment_body': 'Not understand? can you please explain it more.', 'comment_created': datetime.datetime(2022, 11, 20, 20, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027350777, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 20, 20, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027352554, 'comment_body': 'Why does this need to be exported now? ', 'comment_created': datetime.datetime(2022, 11, 20, 20, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027352766, 'comment_body': '```suggestion\r\n    if (!skillId) {\r\n      return;\r\n    }\r\n```\r\nAllows us to unnest the following code.', 'comment_created': datetime.datetime(2022, 11, 20, 21, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027353012, 'comment_body': 'Not done? Note that the variable should be uncapitalized as well.', 'comment_created': datetime.datetime(2022, 11, 20, 21, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027353048, 'comment_body': '```suggestion\r\n    const currentSuggestionId = this.remainingContributionIdStack.pop();\r\n    if (currentSuggestionId === undefined) {\r\n```', 'comment_created': datetime.datetime(2022, 11, 20, 21, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027353163, 'comment_body': '```suggestion\r\n    const attributes = Array.from(elements, function(element: Element) {\r\n```', 'comment_created': datetime.datetime(2022, 11, 20, 21, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027353854, 'comment_body': ""I meant we can combine this statement with the above, but it's fine to leave as is."", 'comment_created': datetime.datetime(2022, 11, 20, 21, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sagangwee', 'type': 'User'}, {'comment_id': 1027745398, 'comment_body': 'Done, did by mistake.', 'comment_created': datetime.datetime(2022, 11, 21, 9, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027745776, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 21, 9, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027746955, 'comment_body': 'Done, may be earlier use it in spec.', 'comment_created': datetime.datetime(2022, 11, 21, 9, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027749777, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 11, 21, 9, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1027763547, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 21, 9, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1090876140, 'comment_body': 'Hi @JeeveshGarg -- you should probably be aware that this change has caused a significant regression in the contributor dashboard (#16973) that has completely blocked question reviewers from editing questions. This is because this code assigns a string value to outcome.dest, but question answer groups are not supposed to have destinations since they are not part of an exploration. \r\n\r\nCould you please explain why you changed this to `this.questionId` instead of `null`, and what sort of testing you did for this component? ', 'comment_created': datetime.datetime(2023, 1, 30, 16, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}]","[{'commit_sha': '40a48bb02755c6ecf84e045c27de4630a657b32f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a379f577ff6c0539abc03d4a14ba5f0245dcd4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00c839bada955b3eb906b2199fb16dc7e867e7b2', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a069401acad35242825ae28aa1a6fc7634aac53a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae449aa03d10397d8ba7af78790beda8cc129ae', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec057e5301b302793d28a91dda25017d4a8b0ea0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2c2470927bddcafeea889a84ce94c337f5e637d', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb2504ea97859c579416966f52e852e0ef2fa061', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9ec5e4bd331372129387e7b69774c8e9535e2c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01cbfc3f581f0fc864ff19845a2278080fa499f9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9da524de5d91b012825cdb7f37a66e108ad1c72e', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0dde89e47ce958d3739f6bc28f2202e49a10009', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94770f3699377d1873c7ea4e46ad0291a63c516b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23e9c702005ca293bb765c4f01c312d558ec9dc8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59f3dbbdaa72bd91fbea06a06ea4b913e0711a69', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cedc69be342cd05c80950b1772859f7167ecc37', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffeed6c9d466e0d93c4daf5b01223acb0a576552', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6298def2ae37b447272ff20c9d02e68e36bfb54c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92d5dcbfd458dfd6c222dcc386704fa404799b30', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e98b33cc6919ce57d2d56dc948c698066e88fc45', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd72006904a09db155e9f938211107499c9ce223d', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1718b41857ea928cb7feb0e569a0ffa1a8b9f142', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3be7cb8f864002a81d2050ff31e4787ab0b6961f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e019833d05fb2f0f9f5f5c80cec6b48dab5568b4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e22b5d989396a66157c9125666471ecc789e8284', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d9bda04a7b77d934ef098d255cc53cf04269e03', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '802ffb538e260b41818173a352ff2dfaa9575d25', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2f35e2974bdb3112ff955acca95ff337ab6d2ad', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4336aaa850bcdd95c5f8068eea1911e453f1233', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb3c4b812300dba9bad8ff179f565ddf35f53889', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75daed07c467380f8c4dcce921b0ca28444f8570', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '231eb7e2caef8f20e3e5ca04ef82be4486bd73e6', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52cfd862a3586f120d7cbbf3e1a57e7cdc46a895', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '695baeb1fc4d592c983d363b440a461472f6b726', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da28ec085bdcf31ff75c4d07d44158a86cc4c121', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63de6ebc08ef507ac1928ea1de6ee6763198b911', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63e30bbf2e78b44bc70b7fa035900727e1e49207', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1fd55343c437653575cb33a8df5d910a3036798', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08234deaddc21b9d255708ede1665fe07f77921b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb656871b35d9331acb77e6a5e607aeb1e82a201', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b23743fd11acad69687533fe0e3cb28d878ee86', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c02795654c5b93612e764f82b477eae74103f930', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '279345c0cb9caa144f4e5857bafac74f5484c10b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63ce18a5af02f8c28533e4b7124c881168b4210', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef2a17b427f31006460410ad07324d229a3bb73c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf85e95a2a5e4c7cee242bcfdf784d76b714beda', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5152eb7af11d69a8762ca1c872248a0d8281ff3', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc6cbff0273c96989d8ccdce8ad3e308bb113cf0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61222015cdb72de68d8d647efb3ebcf6af802b9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7168fe8353da1246b9e79f01131876ff91e5c78', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e8e147bf95b6af4784d0ed78982c2e415a301c7', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7da18a4b544c59e5f4b901f43186a81c326a5f7', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54834ed6f420e72a6aa56dd88fbf34d5ca82bfc0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58929d77773daaead56eefb8815049b15ca0dc2f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb5ed4c623520bdbc170ec92c0f51708a21d9c2a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca1d26b9c190bf28f63718d7ec99cd9028b2bd72', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e581931a3e1b3a846f81ece9e70d1c1b67ecb9f9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57df06354a2bc568fbbc7c483a16b0ff45ec90ce', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c485c2088059fb5591341d7ff6178dd0372e197', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80508d455c5d3cc03d54a71414355cce467e508a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cd3da00700427653fe3ceee20a418856cafe045', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81ef38e32917d16deabaacee52fc92eef9c3f727', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4135326fce68ad766d689afeb9bef1934e9ea0a1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b93136852c033d545a425209bb12a169691653f4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3987971857f16a30e538d8176ab822114a3076', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '842dc45ad033d32c5f833c3a96fb8e9638b038d3', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cef9df60b74bf98e094130f09092d1a1b05270ce', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47492528400920367c89c5daf452e06058da831d', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2af5081fa6c95ec3c043ea4abfdf897ef749341b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce71a241f42d9ca70c97d909519f292bcd2dd7a3', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2b739d3e53b703192b3260993027203fc4eb5e', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '959f0dad603410fea96d73a72a2aac71c18f3742', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ead9ee75115cbbe0d3806cbcc24ecdc17b9996d', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a7cbeb62d2f1d4a59195ce999bad4d952bc8406', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b8cb96ce67b86b14b16d07659033198b5036f9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da5cd50f4cc2753b50fa27457e62a0c494f79789', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de9d37eea8c88f89a6ef8242d6405a7910e4dce0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfb05ccd21b65671e92d19ee5949ea83b65b4202', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '285fff7219547028e5a1813d130960fe3bea9225', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bd7ae0373dd64605145641181b58b7b93235e0a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdf955c4c57d13029df2c7e9ce4c5b73e6693cdf', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a20b5b2f5105e47cbb3415c0393c5257108801b4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f5a959a97623f6fb76a98647521d91dbf4b4ab8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90ed62468dd5d0ebccf46c29d8f46d2fa3cd591d', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74dbd628558693df8586797ed92ed3b351a374c4', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fd520e3dc7e89deca03bdf404b2de81b37af67f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}]",JG-11,80846488,,User,,39,,0,21
1130266129,MS-last(Improve frontend types): Remove Unknown,"## Overview
<!--
READ ME FIRST:
Please answer *both* questions below and check off every point from the Essential Checklist!
If there is no corresponding issue number, fill in N/A where it says [fill_in_number_here] below in 1.
-->

1. This PR fixes part of #10474 #13015 
2. This PR fixes #16734
3. This PR does the following: Remove Unknown
## Essential Checklist

- [x] The PR title starts with ""Fix #bugnum: "", followed by a short, clear summary of the changes. (If this PR fixes part of an issue, prefix the title with ""Fix part of #bugnum: ..."".)
- [x] The linter/Karma presubmit checks have passed locally on your machine.
- [x] ""Allow edits from maintainers"" is checked. (See [here](https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/allowing-changes-to-a-pull-request-branch-created-from-a-fork) for instructions on how to enable it.)
  - This lets reviewers restart your CircleCI tests for you.
- [x] The PR is made from a branch that's **not** called ""develop"".

## Proof that changes are correct
TS:
![Screenshot from 2023-01-09 23-15-44](https://user-images.githubusercontent.com/80846488/211373403-18b2ebae-bf25-4384-a0c8-2d8a4e6c3345.png)

<!--
Add videos/screenshots of the user-facing interface to demonstrate that the changes
made in this PR work correctly. If this PR is for a developer-facing feature,
provide the videos/screenshots of developer-facing interface.

Please also include videos/screenshots of the developer tools
browser console, so that we can be sure that there are no console errors.

If the changes in your PRs are autogenerated via a script and you cannot provide proof
for the changes then please leave a comment ""No proof of changes needed because {{Reason}}""
and remove all the sections below.
-->

#### Proof of changes on desktop with slow/throttled network

<!--
Make sure to properly verify that everything works correctly, and that there are
no weird UI mistakes or other problems. Also, if there are any newly added fields,
try to fill them out and test that different inputs are correctly accepted/rejected.

Throttle the network (to 3G) using the browser Developer Tools (see references below).
There should be no performance or UI issues while the network is slow.

References:
 - Chrome: https://css-tricks.com/throttling-the-network/
 - Firefox: https://developer.mozilla.org/en-US/docs/Tools/Network_Monitor/Throttling
-->

#### Proof of changes on mobile phone

<!--
In some cases this is not needed (e.g. for pages that we do not expect to
support mobile phones, or for backend-only features).

Feel free to use the Developer Tools emulator for this.

References:
 - Chrome: https://developer.chrome.com/docs/devtools/device-mode/
 - Firefox: https://firefox-source-docs.mozilla.org/devtools-user/index.html#responsive-design-mode
-->

#### Proof of changes in Arabic language

<!--
If the PR changes the UI, make sure to add screenshots with the site
language set to Arabic as well (we use Arabic as it is a language written from right to left).
-->

## PR Pointers

- Make sure to follow the [instructions for making a code change](https://github.com/oppia/oppia/wiki/Make-a-pull-request).
- If you need a review or an answer to a question, and don't have permissions to assign people, **leave a comment** like the following: ""{{Question/comment}} @{{reviewer_username}} PTAL"". Oppiabot will help assign that person for you.
- For what code owners will expect, see the [Code Owner's wiki page](https://github.com/oppia/oppia/wiki/Oppia's-code-owners-and-checks-to-be-carried-out-by-developers).
- Make sure your PR follows conventions in the [style guide](https://github.com/oppia/oppia/wiki/Coding-style-guide), otherwise this will lead to review delays.
- Never force push. If you do, your PR will be closed.
- Some of the e2e tests are flaky, and can fail for reasons unrelated to your PR. We are working on fixing this, but in the meantime, if you need to restart the tests, please check the [""If your build fails"" wiki page](https://github.com/oppia/oppia/wiki/If-CI-checks-fail-on-your-PR).
",True,16597,https://api.github.com/repos/oppia/oppia/pulls/16597,https://github.com/oppia/oppia/pull/16597,closed,942,755,238,152,73,231,1,1,[{'name': 'PR: LGTM'}],2022-11-21 15:56:42+00:00,2023-03-06 03:28:09+00:00,9027087.0,"104 days, 11:31:27","[{'comment_id': 1032821761, 'comment_body': 'Why is this still here and not fixed? (In fact, why is #13015 still open at this stage?)', 'comment_created': datetime.datetime(2022, 11, 26, 18, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032821800, 'comment_body': 'FILES_CONTAINING_UNKNOWN_TYPE', 'comment_created': datetime.datetime(2022, 11, 26, 18, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032821837, 'comment_body': 'Why do you need the `line-too-long` pragma here?\r\n\r\nAlso, we never disable ""code blocks"" with pylint. Please put the single-line-pragma on the right hand side of the line that needs it, if necessary.', 'comment_created': datetime.datetime(2022, 11, 26, 18, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032821924, 'comment_body': 'Add a newline above this.', 'comment_created': datetime.datetime(2022, 11, 26, 19, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032821935, 'comment_body': 'Indent by 4.', 'comment_created': datetime.datetime(2022, 11, 26, 19, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032822203, 'comment_body': 'Hi, for the GSoC milestone 2, you need to remove all the uses of unknown from the code base and resolve this issue: https://github.com/oppia/oppia/issues/13015. If there are any usages of unknown that are valid, explain why they are valid in a comment above the usage. Make sure that your lint check accommodates/ looks for that explanation. Address all the comments in the codebase that are `TODO(#13015): *`', 'comment_created': datetime.datetime(2022, 11, 26, 19, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1032822553, 'comment_body': 'Actually this is not related to unknown, this can only by solving spread type(strict typing). Add comment so that i remember this.\r\n\r\nAbout issue #13015 is still needed as some unknown come from AngularJs files and some are comes from usage of Jquery. I need to sort out all after GSoC. \r\n\r\nThat why i also make list in js-ts linter FILES_CONTAIN_UNKNOWN_TYPE.', 'comment_created': datetime.datetime(2022, 11, 26, 19, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032822605, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 11, 26, 19, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032822709, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 11, 26, 19, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032822851, 'comment_body': '[explain](https://github.com/oppia/oppia/pull/16597#discussion_r1032822553).\r\n\r\nAdd this comment is just make sure, this address in later.', 'comment_created': datetime.datetime(2022, 11, 26, 19, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032822947, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 19, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032823023, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 26, 19, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032824647, 'comment_body': '```suggestion\r\n        """"""Prints a list of lint errors if an unknown type is used. This lint\r\n        check is not enabled by default. Add proper comment if unknown is needed.\r\n```', 'comment_created': datetime.datetime(2022, 11, 26, 19, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032825915, 'comment_body': 'Missing TODO.', 'comment_created': datetime.datetime(2022, 11, 26, 19, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032826003, 'comment_body': 'Can we somehow make sure that after catch there is always correct handling of the error, meaning that `error instanceof Error` is used?', 'comment_created': datetime.datetime(2022, 11, 26, 19, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032826047, 'comment_body': '```suggestion\r\n    loaderService = loaderService as jasmine.SpyObj<LoaderService>;\r\n```\r\n\r\nditto elsewhere', 'comment_created': datetime.datetime(2022, 11, 26, 19, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032826487, 'comment_body': 'I think the reasoning should not only say why is this needed but also (and more importantly) why is this not possible to do this without `unknown` or ignore.\r\n\r\nDitto for all other comments like these.', 'comment_created': datetime.datetime(2022, 11, 26, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032826626, 'comment_body': ""Again this doesn't seem to be like enough justification. Why are we using the default property?"", 'comment_created': datetime.datetime(2022, 11, 26, 19, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032826679, 'comment_body': 'Why may be undefined when we do not allow undefined?', 'comment_created': datetime.datetime(2022, 11, 26, 19, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032826784, 'comment_body': '```suggestion\r\n    readOnly?: string; \r\n    mode?: string;\r\n```', 'comment_created': datetime.datetime(2022, 11, 26, 19, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032826850, 'comment_body': 'Why is it not known? Can we do anything about it?', 'comment_created': datetime.datetime(2022, 11, 26, 19, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032826871, 'comment_body': 'Should here be a TODO?', 'comment_created': datetime.datetime(2022, 11, 26, 19, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032826876, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 11, 26, 19, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032827458, 'comment_body': '```suggestion\r\n    // This throws ""Type NgbModal is not assignable to type\r\n    // \'Modal\'."" We need to suppress this error\r\n    // because of the need to test validations.\r\n    // @ts-ignore\r\n    mockNgbModal = TestBed.inject(NgbModal) as MockNgbModal;\r\n```\r\n?\r\n\r\nAlso, same comments as any above ignores.', 'comment_created': datetime.datetime(2022, 11, 26, 20, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032827716, 'comment_body': 'I think we can remove tests that are testing different types than expected. Especially in files that are fully typed.', 'comment_created': datetime.datetime(2022, 11, 26, 20, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032827873, 'comment_body': 'TODO missing', 'comment_created': datetime.datetime(2022, 11, 26, 20, 8, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032827894, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 11, 26, 20, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032828062, 'comment_body': ""Also I don't understand the common."", 'comment_created': datetime.datetime(2022, 11, 26, 20, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032828250, 'comment_body': '```suggestion\r\n      dataFormat: string\r\n  ): Promise<Object> {\r\n```', 'comment_created': datetime.datetime(2022, 11, 26, 20, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032828293, 'comment_body': ""Why we don't know? Is this the same case as in catch?"", 'comment_created': datetime.datetime(2022, 11, 26, 20, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032828384, 'comment_body': 'What is the blocker for fixing this now?', 'comment_created': datetime.datetime(2022, 11, 26, 20, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032828718, 'comment_body': 'Why is this changed?', 'comment_created': datetime.datetime(2022, 11, 26, 20, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032828942, 'comment_body': '```suggestion\r\n    ngbActiveModal = TestBed.inject(NgbActiveModal);\r\n```', 'comment_created': datetime.datetime(2022, 11, 26, 20, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032829014, 'comment_body': 'ditto elsewhere', 'comment_created': datetime.datetime(2022, 11, 26, 20, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032830939, 'comment_body': 'Hi @JeeveshGarg -- discussed with @srijanreddy98 and @vojtechjelinek: \r\n\r\n- For the legitimate instances of unknown left in the codebase, there has to be a clear explanation of what is required for it to be removed. E.g. ""Remove use of this unknown once jQuery is removed.""\r\n    - Legitimate instances of unknown are restricted to these three categories: (a) dependencies, (b) try/except, (c) inherited classes like ExplorationPropertyService.\r\n\r\n- In #13015, there should be only these three categories and all other checkboxes should be fully fixed in this PR.\r\n', 'comment_created': datetime.datetime(2022, 11, 26, 20, 45, 51, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032830973, 'comment_body': ""I don't understand this comment."", 'comment_created': datetime.datetime(2022, 11, 26, 20, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032831108, 'comment_body': ""I don't understand this comment."", 'comment_created': datetime.datetime(2022, 11, 26, 20, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032831175, 'comment_body': '```suggestion\r\n    # Do this file after removal jQuery from this file.\r\n```', 'comment_created': datetime.datetime(2022, 11, 26, 20, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032831227, 'comment_body': 'This seems weird can we do smth like `String({...})`', 'comment_created': datetime.datetime(2022, 11, 26, 20, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032831346, 'comment_body': ""```suggestion\r\n          mocktoSVG as () => string, 'path', 'group1', component);\r\n```"", 'comment_created': datetime.datetime(2022, 11, 26, 20, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032831349, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 11, 26, 20, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032831416, 'comment_body': 'Do we still need `PositionOfTerm`', 'comment_created': datetime.datetime(2022, 11, 26, 20, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032831647, 'comment_body': ""I don't think this is enough justification."", 'comment_created': datetime.datetime(2022, 11, 26, 20, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032831881, 'comment_body': 'Again this seems a bit weird', 'comment_created': datetime.datetime(2022, 11, 26, 20, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032831970, 'comment_body': '```suggestion\r\n        this.answer) as Answer).code);\r\n```', 'comment_created': datetime.datetime(2022, 11, 26, 20, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032832144, 'comment_body': 'Justificate why is this kept.', 'comment_created': datetime.datetime(2022, 11, 26, 21, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032832609, 'comment_body': 'This is a weird test case, can we maybe refactor what we pass as the argument?', 'comment_created': datetime.datetime(2022, 11, 26, 21, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032832959, 'comment_body': 'This needs more explanation.', 'comment_created': datetime.datetime(2022, 11, 26, 21, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032833020, 'comment_body': 'Why is the type here different?', 'comment_created': datetime.datetime(2022, 11, 26, 21, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032833046, 'comment_body': 'Again, explanation needs to be better.', 'comment_created': datetime.datetime(2022, 11, 26, 21, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032833093, 'comment_body': 'TODO missing.', 'comment_created': datetime.datetime(2022, 11, 26, 21, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032833102, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2022, 11, 26, 21, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032833526, 'comment_body': 'Needs more proper explanation.', 'comment_created': datetime.datetime(2022, 11, 26, 21, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1032836800, 'comment_body': 'Also: removal --> removing', 'comment_created': datetime.datetime(2022, 11, 26, 21, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032836901, 'comment_body': 'Deindent by 4. (Follow the format of other docstrings if you are not sure.)', 'comment_created': datetime.datetime(2022, 11, 26, 21, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1032863551, 'comment_body': 'Why are you adding a file to the exclusion list?', 'comment_created': datetime.datetime(2022, 11, 27, 4, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032863844, 'comment_body': ""I think there's supposed to be another blank line after this line. This issue was flagged by the linter (see https://github.com/oppia/oppia/actions/runs/3556542369/jobs/5973984115), but it should have been caught by your pre-push hooks. Did the pre-push hooks run when you pushed commits to this PR?"", 'comment_created': datetime.datetime(2022, 11, 27, 4, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032863921, 'comment_body': 'This docstring is not correctly formatted. Please see our style guide for instructions. In particular, the second and third lines should not be indented.', 'comment_created': datetime.datetime(2022, 11, 27, 4, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032863963, 'comment_body': 'Please add test cases for this new functionality', 'comment_created': datetime.datetime(2022, 11, 27, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864061, 'comment_body': '```suggestion\r\n            # FILES_CONTAINING_UNKNOWN_TYPE\r\n```', 'comment_created': datetime.datetime(2022, 11, 27, 4, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864188, 'comment_body': ""Where is this lint check disabled / how do we enable it? I don't see that logic"", 'comment_created': datetime.datetime(2022, 11, 27, 4, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864252, 'comment_body': 'Please re-word for grammar, e.g. ""Check whether previous line contains a proper comment. If it does, then skip throwing an error""', 'comment_created': datetime.datetime(2022, 11, 27, 4, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864332, 'comment_body': 'Parentheses are unnecessary:\r\n\r\n```suggestion\r\n                unknown_type = [\r\n                    index.start() for index in unknown_type_object]\r\n```\r\n\r\nDitto elsewhere', 'comment_created': datetime.datetime(2022, 11, 27, 4, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864387, 'comment_body': ""Unnecessary parentheses:\r\n\r\n```suggestion\r\n                unknown_type_conversion_object = re.finditer(\r\n                    pattern='as unknown', string=line)\r\n```\r\n\r\nditto elsewhere"", 'comment_created': datetime.datetime(2022, 11, 27, 4, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864408, 'comment_body': 'I think you can just do `if unknown_type:`', 'comment_created': datetime.datetime(2022, 11, 27, 4, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864532, 'comment_body': 'What makes a comment ""proper""? From the code, it looks like *any* comment on the preceding line is enough. This error message should be detailed enough to tell the user exactly how to fix the problem (or point them to a wiki page with more details)', 'comment_created': datetime.datetime(2022, 11, 27, 4, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864590, 'comment_body': 'I think the word ""unknown"" is confusing here since it could mean either ""a type conversion of kind `unknown`"" or ""a type conversion that the linter doesn\'t know about"". Can you re-word to clarify? Maybe just add backticks around ""unknown"" so that it\'s clearly a code reference', 'comment_created': datetime.datetime(2022, 11, 27, 4, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864698, 'comment_body': ""This criterion seems too broad. For example, what if someone had `Here we do xxx to avoid using type: unknown.` in a comment? That would get flagged by this linter even though it's not actually a usage of the unknown type.\r\n\r\nDitto below"", 'comment_created': datetime.datetime(2022, 11, 27, 4, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032864776, 'comment_body': 'What about multi-line comments, e.g.:\r\n\r\n```js\r\n/*\r\nHere we use type unknown because ...\r\nmore reasoning ...\r\n*/\r\n```', 'comment_created': datetime.datetime(2022, 11, 27, 4, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1032870887, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 5, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032871059, 'comment_body': 'Done, removal of this TODO,\r\n\r\nwill update #13015 after review of Srijan And Vojta.', 'comment_created': datetime.datetime(2022, 11, 27, 5, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032873486, 'comment_body': 'Removed all TODO,\r\n\r\nWill add proper comment on each and every unknown while addressing vojta comments.\r\n\r\nThen add that list in #13015 (later, because need to change des. as well).', 'comment_created': datetime.datetime(2022, 11, 27, 6, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032873576, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 11, 27, 6, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032874567, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 11, 27, 6, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032875918, 'comment_body': 'If you remember we earlier discuss this, to use of else if type of error we expected is not that one. Then throw that error.\r\n\r\nAs for every if we must use else.', 'comment_created': datetime.datetime(2022, 11, 27, 6, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032875961, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 6, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032876411, 'comment_body': 'I think in spec file we don\'t stick to ""not possible statement"". As it is just use to test validations for all cases.\r\n\r\nAlthough improve the comment.', 'comment_created': datetime.datetime(2022, 11, 27, 6, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032884741, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 8, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032884968, 'comment_body': 'No need', 'comment_created': datetime.datetime(2022, 11, 27, 8, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032885021, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 8, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032885133, 'comment_body': 'Comment added for why.', 'comment_created': datetime.datetime(2022, 11, 27, 8, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032886492, 'comment_body': 'Done every where.', 'comment_created': datetime.datetime(2022, 11, 27, 8, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032888068, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 8, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032888357, 'comment_body': ""Yes, there is some future plan of this one in my mind. Like open issue for the same. But correctly i did not make any pre plan during Milestone/proposal making. So can't do this right now as it may cause delays.\r\n\r\nNeed proper planning, issue & description."", 'comment_created': datetime.datetime(2022, 11, 27, 8, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032888453, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 8, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032888525, 'comment_body': ""Same case for very error, as we don't know error type."", 'comment_created': datetime.datetime(2022, 11, 27, 8, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032888614, 'comment_body': 'Solved', 'comment_created': datetime.datetime(2022, 11, 27, 8, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032888720, 'comment_body': 'use same pattern for spec files, So use ts-ignore.', 'comment_created': datetime.datetime(2022, 11, 27, 8, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032889019, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 8, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032889173, 'comment_body': 'Just use typecasting in spec files for test validations. Improve comment. ', 'comment_created': datetime.datetime(2022, 11, 27, 8, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032889235, 'comment_body': 'Just use typecasting in spec files for test validations. Improve comment. ', 'comment_created': datetime.datetime(2022, 11, 27, 8, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032889401, 'comment_body': 'Done, improve', 'comment_created': datetime.datetime(2022, 11, 27, 8, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032889546, 'comment_body': 'Done both', 'comment_created': datetime.datetime(2022, 11, 27, 8, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032891126, 'comment_body': 'Done, everywhere.', 'comment_created': datetime.datetime(2022, 11, 27, 8, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032891196, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 8, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032891421, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2022, 11, 27, 8, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032892391, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 9, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032892489, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 9, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032892592, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 9, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032892611, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 9, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032893134, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 11, 27, 9, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032897361, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 9, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032897574, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 9, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032897658, 'comment_body': 'Changed', 'comment_created': datetime.datetime(2022, 11, 27, 9, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032898331, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 9, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032898589, 'comment_body': 'More clear now, why TODO?', 'comment_created': datetime.datetime(2022, 11, 27, 9, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032898771, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 11, 27, 9, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1032947977, 'comment_body': 'I think you can drop as unknown here.', 'comment_created': datetime.datetime(2022, 11, 27, 15, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1032948870, 'comment_body': 'Why is this added?', 'comment_created': datetime.datetime(2022, 11, 27, 15, 17, 13, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1032948969, 'comment_body': 'TODO should be with an issue number and not username', 'comment_created': datetime.datetime(2022, 11, 27, 15, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1032949023, 'comment_body': 'Here and everywhere', 'comment_created': datetime.datetime(2022, 11, 27, 15, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1032949399, 'comment_body': ""I don't think you should do this. Instead try this:\r\nAt the top of file after the imports\r\n```\r\nconst tabs = ContributorDashboardConstants.CONTRIBUTOR_DASHBOARD_TABS_DETAILS;\r\n```\r\nIn the component:\r\n```\r\ntabsDetails!: (typeof tabs)[keyof (typeof tabs)];\r\n```\r\n\r\nOr you can:\r\nCreate utility type: `type valueof<T> = T[keyof T];`\r\n\r\nAnd in the component use:\r\n`tabsDetails!: valueof<typeof ContributorDashboardConstants.CONTRIBUTOR_DASHBOARD_TABS_DETAILS>;`"", 'comment_created': datetime.datetime(2022, 11, 27, 15, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1032951808, 'comment_body': 'Check comment above. You can just get rid of this of this type.', 'comment_created': datetime.datetime(2022, 11, 27, 15, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1032951922, 'comment_body': ""Why can't error be of type Error?"", 'comment_created': datetime.datetime(2022, 11, 27, 15, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1032951953, 'comment_body': 'Using Object is worse than unknown. Change it to the correct type.', 'comment_created': datetime.datetime(2022, 11, 27, 15, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1032953422, 'comment_body': ""This doesn't look good. Usually we use this to pass a Partial value type to a component for testing. You will need to figure out what is this."", 'comment_created': datetime.datetime(2022, 11, 27, 15, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1033292827, 'comment_body': 'This does not look right, should it follow the TODO format used in other places?', 'comment_created': datetime.datetime(2022, 11, 28, 9, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 1033296301, 'comment_body': 'Should we add a comment explainin why non-null assertion is required (as done in other places in the codebase)?', 'comment_created': datetime.datetime(2022, 11, 28, 9, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kevintab95', 'type': 'User'}, {'comment_id': 1034247829, 'comment_body': ""```suggestion\r\n    // Unknown type is used because we don't know which type of error is thrown.\r\n```\r\n\r\nDitto everywhere else in the PR where applicable (this comment comes out exactly to 80 characters, so it should fit where needed)."", 'comment_created': datetime.datetime(2022, 11, 29, 2, 46, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1061270447, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 4, 9, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1061280985, 'comment_body': '![Screenshot from 2023-01-04 14-52-18](https://user-images.githubusercontent.com/80846488/210523454-4fc569e4-ca84-408e-b601-eef3b7d586a3.png)\r\n', 'comment_created': datetime.datetime(2023, 1, 4, 9, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064000106, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 7, 12, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064003517, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 7, 13, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064003760, 'comment_body': 'Removed', 'comment_created': datetime.datetime(2023, 1, 7, 13, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064024007, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 7, 16, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064024453, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 7, 16, 55, 33, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064024610, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 1, 7, 16, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064025048, 'comment_body': 'Done, removed.', 'comment_created': datetime.datetime(2023, 1, 7, 17, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064026845, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 7, 17, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064044363, 'comment_body': 'It will not work as above type is union of keys value.\r\n\r\n![Screenshot from 2023-01-08 02-02-57](https://user-images.githubusercontent.com/80846488/211169421-5c40a228-af1c-4049-a6a4-91d5903f9a1e.png)\r\n', 'comment_created': datetime.datetime(2023, 1, 7, 20, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064044377, 'comment_body': 'above.', 'comment_created': datetime.datetime(2023, 1, 7, 20, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064045301, 'comment_body': 'Return void, checked from backend.', 'comment_created': datetime.datetime(2023, 1, 7, 20, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064165626, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 15, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064165694, 'comment_body': 'Use --no-verify flag on that time. Added blank line.', 'comment_created': datetime.datetime(2023, 1, 8, 15, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064165824, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 16, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064165898, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 16, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064166656, 'comment_body': 'Rephrase.', 'comment_created': datetime.datetime(2023, 1, 8, 16, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064166706, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064166832, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 16, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064166859, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 16, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064167247, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 16, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064167284, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 16, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064168521, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 16, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064168550, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 8, 16, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1064850552, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 9, 16, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1065097839, 'comment_body': ""Here & elsewhere: this statement would be stronger if it stated that we can't know what type of error is thrown & why. The code already implies that we don't currently know the error, but the reason we can't improve the code to catch a more specific error is the actual piece of information that's important to document in context."", 'comment_created': datetime.datetime(2023, 1, 9, 20, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1065382548, 'comment_body': 'Can you explain why this behaves differently from e.g. core-js, zone.js, etc. above?', 'comment_created': datetime.datetime(2023, 1, 10, 6, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1065383014, 'comment_body': ""@JeeveshGarg Just to check, did you see this comment by @srijanreddy98? It hasn't been responded to."", 'comment_created': datetime.datetime(2023, 1, 10, 6, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1065383717, 'comment_body': 'Why does this refer to me? All TODOs should refer to an issue number that provides full details.\r\n\r\nAlso is the following the only occurrence of the ""fully-detailed"" version of this constant? Just wanted to make sure that we\'re not repeating the same large dict in multiple places.', 'comment_created': datetime.datetime(2023, 1, 10, 6, 42, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1065383926, 'comment_body': '@JeeveshGarg Could you please make sure to address all the old comments? This is another one that has not been addressed.', 'comment_created': datetime.datetime(2023, 1, 10, 6, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1065384889, 'comment_body': ""I don't quite understand what object the error message refers to here. skillDifficulty is already a number above (in the method signature) so it can't be referring to that, right?"", 'comment_created': datetime.datetime(2023, 1, 10, 6, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1065927709, 'comment_body': ""![Screenshot from 2023-01-10 20-57-24](https://user-images.githubusercontent.com/80846488/211592550-c2bf622d-8421-415d-b59a-f2ec54004604.png)\r\n\r\nmost probably npm don't contain types of uivalidate, not sure about that. So add comment that, we can't import it directly like `angular-ui-validate`."", 'comment_created': datetime.datetime(2023, 1, 10, 15, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1065946361, 'comment_body': 'Done, no need of changes in this. update it.', 'comment_created': datetime.datetime(2023, 1, 10, 15, 46, 12, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1065947575, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 1, 10, 15, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1065952508, 'comment_body': ""Yup working with Srijan on this type issue. Unable to fix this by my know without repeating of same dict. This issue also i'm dealing in srijan comments, so you can resolve it here. Will take care of this."", 'comment_created': datetime.datetime(2023, 1, 10, 15, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066454403, 'comment_body': 'not done', 'comment_created': datetime.datetime(2023, 1, 10, 23, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1066456089, 'comment_body': 'Allowing *any* comment seems too loose. The comment on the preceding line might have nothing to do with using the unknown type', 'comment_created': datetime.datetime(2023, 1, 10, 23, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1066456983, 'comment_body': 'not done', 'comment_created': datetime.datetime(2023, 1, 11, 0, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1066458802, 'comment_body': ""Nit here & elsewhere: 'catch' isn't actually a function in this context. It would be more correct to say 'catch block' instead."", 'comment_created': datetime.datetime(2023, 1, 11, 0, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BenHenning', 'type': 'User'}, {'comment_id': 1066461325, 'comment_body': ""I see that now you're checking whether the code being examined is inside a comment, but that doesn't really solve the underlying issue. For example, what if the `: unknown` shows up in a string? More broadly, I think we can eliminate a whole class of issues like this by parsing the code to get an AST and then operating on the AST instead of the text"", 'comment_created': datetime.datetime(2023, 1, 11, 0, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1066462177, 'comment_body': 'What about this:\r\n\r\n```js\r\n/*\r\nSome comment explaining why we use unknown\r\n*/    // Some other comment\r\ncode that uses unknown\r\n```', 'comment_created': datetime.datetime(2023, 1, 11, 0, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1066462425, 'comment_body': 'This is too broad of a condition. For example, what about `spectacular.ts` contains `spec` but is not a spec file', 'comment_created': datetime.datetime(2023, 1, 11, 0, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1066462615, 'comment_body': '```suggestion\r\n// Copyright 2023 The Oppia Authors. All Rights Reserved.\r\n```\r\n\r\nditto elsewhere', 'comment_created': datetime.datetime(2023, 1, 11, 0, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1066464356, 'comment_body': ""These test cases seem overly complicated when we really just need to test combinations of comments and `unknown` types. I'd recommend providing these test cases as strings instead so you can easily write more of them (and catch some of the edge cases I flagged)"", 'comment_created': datetime.datetime(2023, 1, 11, 0, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1066465280, 'comment_body': ""Isn't this usage of `unknown` invalid? If so, then why wasn't this caught by the tests?"", 'comment_created': datetime.datetime(2023, 1, 11, 0, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'U8NWXD', 'type': 'User'}, {'comment_id': 1066720606, 'comment_body': 'this file is added to list of `FILES_CONTAINING_UNKNOWN_TYPE`. we are ignoring these files.', 'comment_created': datetime.datetime(2023, 1, 11, 8, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066736163, 'comment_body': 'We are not allowing this type of comments in codebase. ESlint throw error first.', 'comment_created': datetime.datetime(2023, 1, 11, 9, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066736836, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 11, 9, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066738041, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 11, 9, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066739550, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 1, 11, 9, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066742790, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 1, 11, 9, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066746606, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 1, 11, 9, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066757828, 'comment_body': ""I do agree with you, but unlike other lint checks, there isn't a pattern when explaining the unknown. Even after a proper justification, each comment must be verified by a reviewer."", 'comment_created': datetime.datetime(2023, 1, 11, 9, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066819766, 'comment_body': 'improve test files, now dealing only with all cases we want to encounter. As lint checks demand for files along with path, so string might be complicated.', 'comment_created': datetime.datetime(2023, 1, 11, 10, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1066935053, 'comment_body': 'Uncommented unknown. Ditto below', 'comment_created': datetime.datetime(2023, 1, 11, 12, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066937062, 'comment_body': 'Why can this be both `string` and `boolean`?', 'comment_created': datetime.datetime(2023, 1, 11, 12, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066956285, 'comment_body': 'Should we use `@ts-expect-error`?', 'comment_created': datetime.datetime(2023, 1, 11, 12, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066956384, 'comment_body': 'Should we use `@ts-expect-error`?', 'comment_created': datetime.datetime(2023, 1, 11, 12, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066958389, 'comment_body': 'Unknown without comment.', 'comment_created': datetime.datetime(2023, 1, 11, 12, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066960089, 'comment_body': ""Isn't there any better solution than this?"", 'comment_created': datetime.datetime(2023, 1, 11, 12, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066961364, 'comment_body': 'Unneeded change.', 'comment_created': datetime.datetime(2023, 1, 11, 12, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066965675, 'comment_body': 'Can you add stubs for this library in _typings_ folder?', 'comment_created': datetime.datetime(2023, 1, 11, 13, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066973560, 'comment_body': 'Missing explanation.', 'comment_created': datetime.datetime(2023, 1, 11, 13, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066976246, 'comment_body': 'Uncommented `unknown`', 'comment_created': datetime.datetime(2023, 1, 11, 13, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066976713, 'comment_body': 'Missign comment.', 'comment_created': datetime.datetime(2023, 1, 11, 13, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066981950, 'comment_body': ""I don't understand why we cannot use the correct type"", 'comment_created': datetime.datetime(2023, 1, 11, 13, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066982402, 'comment_body': '```suggestion\r\n    playerTranscriptService = playerTranscriptService as\r\n```', 'comment_created': datetime.datetime(2023, 1, 11, 13, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066982563, 'comment_body': 'ditto below', 'comment_created': datetime.datetime(2023, 1, 11, 13, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1066983580, 'comment_body': 'There should be `isinstance` to verify the type of error below', 'comment_created': datetime.datetime(2023, 1, 11, 13, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1067347149, 'comment_body': 'Yeah -- @JeeveshGarg I think the error message tells you how to fix this?', 'comment_created': datetime.datetime(2023, 1, 11, 18, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1067351993, 'comment_body': 'Er, I can\'t really resolve it as long as there\'s a ""TODO(sll)"" here... As codeowner I need to check the final state of all the files I code-own before I can sign off.\r\n\r\nCouldn\'t you do the thing you mention in the TODOs (i.e. refer to where it\'s defined rather than redefining it)?\r\n\r\nAnyway, feel free to ping again on this thread once the ""duplicate constants"" issue has been resolved, and I\'ll take another look. Thanks!', 'comment_created': datetime.datetime(2023, 1, 11, 18, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1067353273, 'comment_body': '@JeeveshGarg Not sure what ""above"" means (in your comment). Could you please point to it or repeat the comment here too? It is hard to navigate a large PR so probably better to avoid too much referencing (as codeowners see only a subset of files).', 'comment_created': datetime.datetime(2023, 1, 11, 18, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1094750976, 'comment_body': 'Can you make it generic?', 'comment_created': datetime.datetime(2023, 2, 2, 16, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'srijanreddy98', 'type': 'User'}, {'comment_id': 1106016770, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 2, 14, 15, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106027421, 'comment_body': 'Allow unknown without comment in spec files.\r\n\r\nhttps://github.com/oppia/oppia/issues/16734', 'comment_created': datetime.datetime(2023, 2, 14, 16, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106029571, 'comment_body': 'Allow unknown without comment in spec files.\r\n\r\nhttps://github.com/oppia/oppia/issues/16734', 'comment_created': datetime.datetime(2023, 2, 14, 16, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106030176, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 2, 14, 16, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106031925, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 14, 16, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106032222, 'comment_body': 'same', 'comment_created': datetime.datetime(2023, 2, 14, 16, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106032376, 'comment_body': 'Same', 'comment_created': datetime.datetime(2023, 2, 14, 16, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106032521, 'comment_body': 'Same', 'comment_created': datetime.datetime(2023, 2, 14, 16, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106033881, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 14, 16, 6, 16, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106055876, 'comment_body': 'not allowing us. Show unused.', 'comment_created': datetime.datetime(2023, 2, 14, 16, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1106056500, 'comment_body': 'same\r\n', 'comment_created': datetime.datetime(2023, 2, 14, 16, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1118329158, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 27, 6, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1118329272, 'comment_body': 'Done, removed\r\n', 'comment_created': datetime.datetime(2023, 2, 27, 6, 27, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1118329798, 'comment_body': 'Done, point to issue #13015.', 'comment_created': datetime.datetime(2023, 2, 27, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1118331495, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 27, 6, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1118338979, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 27, 6, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1118346767, 'comment_body': '@JeeveshGarg Could you please reply to this comment instead of resolving it?', 'comment_created': datetime.datetime(2023, 2, 27, 6, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1118348543, 'comment_body': 'This is not done, AFAICT? The old code is still there.\r\n\r\n/cc @srijanreddy98 in case the original comment/suggestion needs modification.', 'comment_created': datetime.datetime(2023, 2, 27, 7, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1118348809, 'comment_body': 'The comment still says ""TODO(sll)"".', 'comment_created': datetime.datetime(2023, 2, 27, 7, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1118395480, 'comment_body': 'This line should be deindented by one space, as it was before.', 'comment_created': datetime.datetime(2023, 2, 27, 8, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1118395899, 'comment_body': 'Can you put `url, { params } as Object` in this line? That would read better.\r\n\r\nAlternatively something like https://github.com/oppia/oppia/pull/16597/files?file-filters%5B%5D=.py&file-filters%5B%5D=.ts&owned-by%5B%5D=seanlip&show-viewed-files=true#diff-004bcdf23f8fc0f4dad66c09ecdec309358013e4f6ce48ceaf01706436008d5bR189 would work.', 'comment_created': datetime.datetime(2023, 2, 27, 8, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'seanlip', 'type': 'User'}, {'comment_id': 1118402931, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 27, 8, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1118403009, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 2, 27, 8, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1118661959, 'comment_body': 'Try, but it causes failure inside lighthouse.\r\n\r\n![Screenshot from 2023-02-27 17-44-58](https://user-images.githubusercontent.com/80846488/221561832-82048290-1120-4002-ad3e-a9a7dc02fda5.png)\r\n', 'comment_created': datetime.datetime(2023, 2, 27, 12, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1122961570, 'comment_body': '```suggestion\r\n    windowRef = TestBed.inject(WindowRef) as jasmine.SpyObj<WindowRef>;\r\n```', 'comment_created': datetime.datetime(2023, 3, 2, 11, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1122962650, 'comment_body': 'Is the `as unknown` on line below still needed?', 'comment_created': datetime.datetime(2023, 3, 2, 11, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1122963583, 'comment_body': '```suggestion\r\n    alertsService = alertsService as jasmine.SpyObj<AlertsService>;\r\n```', 'comment_created': datetime.datetime(2023, 3, 2, 11, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1122963943, 'comment_body': 'ditto below, get rid of the unnecessary branckets', 'comment_created': datetime.datetime(2023, 3, 2, 11, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1122964804, 'comment_body': '```suggestion\r\n    ngbActiveModal = ngbActiveModal as jasmine.SpyObj<NgbActiveModal>;\r\n```', 'comment_created': datetime.datetime(2023, 3, 2, 11, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1122967918, 'comment_body': '@JeeveshGarg this is stil not replied to', 'comment_created': datetime.datetime(2023, 3, 2, 11, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1124558291, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 3, 3, 14, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1124562661, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 3, 3, 14, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1124563356, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 3, 3, 14, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1124697083, 'comment_body': 'Done, no need of changes, revert them. May be resolved with many of genuinely resolved comments. Thanks for the pin again.', 'comment_created': datetime.datetime(2023, 3, 3, 16, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1124698841, 'comment_body': 'Removed, use `useValue`.', 'comment_created': datetime.datetime(2023, 3, 3, 16, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}, {'comment_id': 1125676486, 'comment_body': '```suggestion\r\n    mockSkillCreationBackendApiService = (\r\n      // This throws ""Type \'MockSkillCreationBackendApiService\' is not\r\n      // assignable to type desire"". We need to suppress this error because of\r\n      // the need to test validations. This happens because the\r\n      // MockSkillCreationBackendApiService is a class and not an interface.\r\n      // @ts-ignore\r\n      TestBed.inject(SkillCreationBackendApiService) as\r\n      MockSkillCreationBackendApiService\r\n    );\r\n```', 'comment_created': datetime.datetime(2023, 3, 5, 14, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1125677226, 'comment_body': 'Sorry nto sure what you mean.', 'comment_created': datetime.datetime(2023, 3, 5, 14, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vojtechjelinek', 'type': 'User'}, {'comment_id': 1125685853, 'comment_body': 'Done', 'comment_created': datetime.datetime(2023, 3, 5, 15, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'JeeveshGarg', 'type': 'User'}]","[{'commit_sha': '3f5da8bc4cfac4084ea7aa09ff5b6e2dd3ad90c3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7b3627d075f0582ec928bdf1d333e8f0b3abb840', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7b76eae78a6bb17ae79b9e182d425813dfe9115c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a0e7bfb598f1fa690b5627c2a8d0ece7c69f25f8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1724e154c1c33a56456d9f720df6daf128ef99c1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '946c0af75af8263e0a0603493728db5998b76af7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e7d0738c08ce81111c08db17c9529a5e74a73b1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '17b27f0d215a83a872bb4cca12108abac1853781', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ea0537c7952ed59855b87ac528e6fd5478e99ec5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd3376b2af215797d9b5c92a2d4f50def5b1642ef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f83817fb37cd6dbd87a86e0fa38907d660b42aeb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8e42fa37ed0ace1417711508d992d095e1646572', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fe76de71d1bc2a81b77ddd8c39b69ac8ad824c25', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd2ed1d93c81f37049ae460af10392fc35df6bd10', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7d0ad34e438cd7f64b94d9352812263975abf306', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c8f7b162ad4300ea4ed866a84ae9d2480bdc9234', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '64c6761816b8013f9a5ba7eec0de2275612ffc5b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ab68307ec007dd7399ae66e80bacafca1f51d5b5', 'committer_username': 'srijanreddy98', 'committer_name': 'Srijan Reddy', 'committer_email': 'srijan@srijanreddy.com', 'commit_date': datetime.datetime(2016, 10, 22, 17, 32, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ee797bf549982bce2b353da62596b3620b9cb18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6ca1b0f37e53c824a8521f95c14bfcb13e163175', 'committer_username': 'srijanreddy98', 'committer_name': 'Srijan Reddy', 'committer_email': 'srijan@srijanreddy.com', 'commit_date': datetime.datetime(2016, 10, 22, 17, 32, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7fad055a8f346e059f365df703d1e6c531a4df0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5120cecbac6afc71977d243e2363df0330f9d658', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '16dc9b175d2649cf73fc0c3bdcf00c9350c898d3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f8a96b333eaebec78ab6500fafd656cfb00d4123', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e443e2fc12489411349f8e1d5a649a227a65c674', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fc77de41a63d299af5b71ad2172caa1c5cf90099', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a83032c6032560e593a9e37abd4eb5e2f9f7eec3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6e7a0a8903c285cfa29801d61f37a0e63ea01e19', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '691cc2b0f5e80bf6e6d8e2e0f48e0dff42816ca9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5338e5f0fa6ba42b9a84cd0148591f51eba93709', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7a9d2b5542c8351ee49b1177d5cb34c34a5676f3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '03080e327cfe5a85b86ac17a6f97dd8689bd68d5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '52cf3741c0aaf3ddf7cb05335d6db5bda0989f7d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1a752f42594abfe3a8ab644ee84e5e9ae3dcb5ec', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6636a7ced441d80bc62e50aba81c6d0c508c1240', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c93a621703fffb2eb072fc1df50ec66dfa133420', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a49199c429bb980b142a594218489408f66c8b3c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee2931faad56a3e502d25e653e1387b9af2cdf20', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1971b1a8e17f7a112647557eee6bd8448454a959', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b5e755d4713b55792d7723401ad62cd0d493bc', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '309a8cf04edb9dd14b7d111209845011e3e153b1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ebdf3ee6c7f6a0b45ef42dbdd4cfbabe3f15ef0b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '760483b66a98c8ab9ed086025cfcc657ffd4400b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b85d1ca9a9e050090fdc4e3aa4041367877b1eef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2bda7fd64bd27e98b1d7d3bf79a393fbdd67e9fe', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '531cc776956948c0bafdbea1af30a3f45df5a395', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5bdcf581e5cb9957f404eed89611de2a01dd274f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd788cd20d2fcfb153aa7e3bc863c9f387162313e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd0f88928dafa60dbb3790c083331e4fd24a10eaa', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '981669eaa919f4ebe30562386eb147bab121fdd2', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fbaf9c7dd12222a227d74eb7a558e4ffb93ceef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '768ead60e12495462fd054db63f7dd1b480072a7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eeae06d2db73fc81297de06814b6ffecb06598c6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e73a48afca275ca681ed41f540cbb0ec044f79b9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4a7ecfa34d12a6fc79d40e020c06d54d1f4e68c3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eb957df70d0374feb4c3ddfca23a2d7297a7fc01', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '986ff635edb2aa4e034fba188c120b31ac4ff587', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c370006b022dfefccab2b70635137f614b2b63', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638ab07bf8da82b35eb920bbf309a8695b80d5e7', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd19f3ffe39cdc04dac25325c3773c72bbf0ca64', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2f61500a6598e8aa581a75485820723e84c420d2', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '497a3d504f9cc2ed6bbd20d1f7f461fefd08bcd4', 'committer_username': 'vojtechjelinek', 'committer_name': 'Vojtěch Jelínek', 'committer_email': 'vojtech.jelinek@hey.com', 'commit_date': datetime.datetime(2014, 12, 10, 14, 8, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8b4318d357eb1d869491e39151ecd4ee1903352', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df4bd838f6c4e356bbeb8e8f4212e932aebc1308', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '152fc1ff435f3db56feceafcafbda950b46ef8ec', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9a5859faa3232a561bdb3f79d806acb4cf289fd', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e35d1635f5c1452daa47e5472ef958e957d327b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24fd610cccb0ff3f2fc918e3d9a8ca00a33b116a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a8ddfddf1c354254f79361b5563de9bb9660c19', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '52042527d0b559b6e21bfcd015cc5ce685abae3a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3062f2a7ec789997bd9deb6185bcee8d38bfe6fe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c968ef3d388f52216c42fbb5a73f5f2e20123fbf', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b514db70861cbfdadcb08788e3e644bc2f94fd8', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6938badc80982013dd64310fbc86499e9573648b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ca93e28e81e4f2cdbe2ddfaa7b0c3fe5ab58b1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62352fd7a1252a4608480af9a14af90ce7ac1cc3', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e89c4acecb92a69f6861d6b47c6127fe3463295a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ce5fc872ebbfcfd9d1a11d495272f2199c708e3', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b20cbfe061319eae166691c17d32b872bd720b3f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21586c7bed892bb592726c8f6e22b6253ca325ad', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d6ca4b8292c70bd176a2431d5d71c4bfeaab4b5', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '115e329bdc20a3468b7be714ec461ec4f7f021a9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92879c25a02347fbc44545ec7c785057660d16d6', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ace901f6830cde0c86294ea724a1a815a58c50c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77f2b6ab64dc87799802a3625fbfbfed36024081', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04298ac1131ddb6a7b3bdaed3bbcc53b2d1ece8d', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '918c4d7aa11b50ad1b0dc01ef754988d3d9b321a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd18cd29405f4b56d1cdc8d9446120baa2788bd5c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3028494874106becea1615c13eec754e3db7c7ae', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '559f8cd3b0c0ab5d81607efaf41b6f1bc4f57b0a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '036d7535fbb076ca37e8a2cf3f3241cb18bbc7bf', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36b728ddbdecc68361177d75dd4b062d4f2c2597', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a9f5c0d0569210ebb6ca0e23e2cb64293f35c47', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b582a4f5795e4fa2629f253ed71d537620749015', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5fda9c0a711081d816562e0be94d30a9a526dc9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8ebe2366d73f9f49cd9d16f50952375d3633079', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38a0c7561440b14506c9a5f5ab0e4a046318fc07', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31b7915758afd4cf20fdf3f2a281ec851dd89214', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3382a7c74b07d865a0f2636c255c9edf7c1a0693', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83e99fc44b0e3aa0e50cd2fa7ebb71ebaff9796b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceab502d46ed1bdc74090e4986c70ec06126d17e', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6994b90aab3076991d05c50c97719be4afa76433', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84f3e08522b7528d1c718e3e77ea25c6c21cd6ec', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b6e0df929701b0c027495da3bae5a903d0800f39', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c247683ca47cbd2f21b9c7e36585e009d25bddc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5612caf54cb989fd9d22793af37d91fbfba1165d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6ffa8c20b74881669e6b829dbe8cef665079fd10', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fa976c6d771f0f01b6f695f48b9af089972c1157', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6371ac8f9a3bc51b240a408fd2e628bea9b8d64c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '362b00f4702ba68407c25fae56e3411200ee618b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5efbf55c4af66150e426c78bcbd717c38f4ac867', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '269576b5507ca81acca73153a77dba452203acbe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9596cb62593e50b2301364c674a7c65629f7f402', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '61a1fc63231981d44135a961e63755b86a2af827', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5f74c91cac147e903f8589d3f43857d6fa73a999', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ffed78c6368bdb40428a8e04967f74f08e4bb1a5', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba31a673ba65c65cefb0b283aff955aab9af058b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '775616d5df304f1595e89beb4b320a833364c5ed', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58d56e9e59454335aedbf775e4fd038ca017006c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce150091da58b3dda4c020f6ff55c81be4f66ade', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf527ce84caef1434a3c77dc5333852cbb8869c', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ac8f3a8ea3e3807f4408b0eb0356d9bd34b3e60', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713bc00b696d505f19fe7d30ca3585a31e83fa71', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c01c4ccb82b2e77ca430959c032e2ab61eee1d', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ac9ee31d66a764891344c2a5ff0e9a68b31bb1a', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f67f5fe58d13a100ed4a4ed9a42332e6c9633441', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fa36e03688dc8e9e9b98000e007b001478f6ca0', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f1e715bba631773e3b4ff79b795bea96966160', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c0b99a3761d94591995d44334aac80906137d22', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e25366149ecddf77e7fa9efbb7994e9c185a239', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0cf5de56dfd74c64c875610853303cdedbc4c69', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e47ee1f24e9a19eeaeff506cb2f15e9e5cdd0c75', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c3b55511ce14fd3cfe94799831cd5d0bf00cf78', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b218c7698b0211727bb1a9f5bc653628f3108cd6', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e56ec0411ef0a04c8cc421ac17666658711c389', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72aba08688e4e6f68c8d1ea882c5601c68249e81', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81aaea107886db0cb4de195971f50f2712a8182f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c16c40f4a08244fd763724892e739348584fb9f1', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf035760f8043cbbc18250cd4b0a1e8afaf85a38', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f20e55323c7235c87348e079721b537f4e50dbd2', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96a4ec6d854bb51e9185f91f7e50dd5890945360', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '327a897491b8aa4b50c3a4d61ad212559e8ac795', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '904fd25a8758da8bb685891a4cd030f4a4b397f9', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f8f5845e78d94500cfec0e919ce61b7826c071', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9621317ed3f74bae19ef7919bbd6b7697de8585', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd56f6b8ec84c5366504ce63fb9291f0df37e3a7', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '721c741fcd25365baf41c6803d65d1e0aeb76b6f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b1ca213f0a21ff6ba93784f4e7096a55fafbb7b', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '370317b741ac2446c89a19e8f9d27b54ccd2b79f', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f82369e6a5dcdcc9ff5dde77ff09edf7a21e77de', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dfee45483dc5352c50020e1f0e299630e8b1913', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6757302a1aac34f86c0b97daa025eac1bf33549', 'committer_username': 'JeeveshGarg', 'committer_name': 'JG-11', 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 17, 17, 5, 35, tzinfo=datetime.timezone.utc)}]",JG-11,80846488,,User,,39,,0,21

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
40687563,oppia,oppia/oppia,Python,3839,5716,240,775,15750,1419,417,27,"[{'id': 1222199521, 'number': 17199, 'closed': datetime.datetime(2023, 1, 31, 17, 37, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 30, 19, 32, 11, tzinfo=datetime.timezone.utc), 'time_taken': 79498.0, 'time_delta': '22:04:58', 'additions': 2, 'deletions': 6, 'state': 'closed'}, {'id': 1191261824, 'number': 16865, 'closed': datetime.datetime(2023, 2, 14, 12, 48, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 9, 18, 41, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3089167.0, 'time_delta': '35 days, 18:06:07', 'additions': 743, 'deletions': 1272, 'state': 'closed'}, {'id': 1130266129, 'number': 16597, 'closed': datetime.datetime(2023, 3, 6, 3, 28, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 15, 56, 42, tzinfo=datetime.timezone.utc), 'time_taken': 9027087.0, 'time_delta': '104 days, 11:31:27', 'additions': 942, 'deletions': 755, 'state': 'closed'}, {'id': 1077653039, 'number': 16214, 'closed': datetime.datetime(2022, 11, 22, 6, 19, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 5, 17, 44, 23, tzinfo=datetime.timezone.utc), 'time_taken': 4106087.0, 'time_delta': '47 days, 12:34:47', 'additions': 4110, 'deletions': 5908, 'state': 'closed'}, {'id': 1062772302, 'number': 16100, 'closed': datetime.datetime(2022, 10, 22, 23, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 21, 12, 12, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2717846.0, 'time_delta': '31 days, 10:57:26', 'additions': 6, 'deletions': 5, 'state': 'closed'}, {'id': 1028591670, 'number': 15912, 'closed': datetime.datetime(2022, 8, 22, 7, 21, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 17, 9, 47, 44, tzinfo=datetime.timezone.utc), 'time_taken': 423223.0, 'time_delta': '4 days, 21:33:43', 'additions': 106, 'deletions': 58, 'state': 'closed'}, {'id': 1007809260, 'number': 15799, 'closed': datetime.datetime(2022, 8, 7, 19, 41, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 21, 48, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1115551.0, 'time_delta': '12 days, 21:52:31', 'additions': 1445, 'deletions': 1012, 'state': 'closed'}, {'id': 976856991, 'number': 15620, 'closed': datetime.datetime(2022, 7, 10, 6, 22, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 9, 8, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1458813.0, 'time_delta': '16 days, 21:13:33', 'additions': 1865, 'deletions': 1201, 'state': 'closed'}, {'id': 965569118, 'number': 15578, 'closed': datetime.datetime(2022, 6, 20, 13, 35, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 13, 10, 48, 20, tzinfo=datetime.timezone.utc), 'time_taken': 614831.0, 'time_delta': '7 days, 2:47:11', 'additions': 944, 'deletions': 1116, 'state': 'closed'}, {'id': 962695479, 'number': 15560, 'closed': datetime.datetime(2022, 6, 12, 17, 52, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 9, 10, 30, 38, tzinfo=datetime.timezone.utc), 'time_taken': 285692.0, 'time_delta': '3 days, 7:21:32', 'additions': 918, 'deletions': 1075, 'state': 'closed'}, {'id': 944259846, 'number': 15487, 'closed': datetime.datetime(2022, 6, 9, 8, 52, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 23, 10, 43, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1462129.0, 'time_delta': '16 days, 22:08:49', 'additions': 5859, 'deletions': 4162, 'state': 'closed'}, {'id': 927860941, 'number': 15438, 'closed': datetime.datetime(2022, 6, 7, 12, 16, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 4, 17, 12, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2919865.0, 'time_delta': '33 days, 19:04:25', 'additions': 586, 'deletions': 562, 'state': 'closed'}, {'id': 897995135, 'number': 15257, 'closed': datetime.datetime(2022, 4, 25, 12, 58, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 2, 7, 58, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2005189.0, 'time_delta': '23 days, 4:59:49', 'additions': 388, 'deletions': 183, 'state': 'closed'}, {'id': 897950046, 'number': 15255, 'closed': datetime.datetime(2022, 4, 2, 4, 38, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 2, 4, 33, 54, tzinfo=datetime.timezone.utc), 'time_taken': 263.0, 'time_delta': '0:04:23', 'additions': 25, 'deletions': 13, 'state': 'closed'}, {'id': 893359953, 'number': 15236, 'closed': datetime.datetime(2022, 3, 30, 1, 29, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 29, 17, 56, 42, tzinfo=datetime.timezone.utc), 'time_taken': 27197.0, 'time_delta': '7:33:17', 'additions': 157, 'deletions': 159, 'state': 'closed'}, {'id': 881468276, 'number': 15143, 'closed': datetime.datetime(2022, 4, 16, 3, 48, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 15, 6, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2637719.0, 'time_delta': '30 days, 12:41:59', 'additions': 4788, 'deletions': 3731, 'state': 'closed'}, {'id': 872550235, 'number': 15089, 'closed': datetime.datetime(2022, 4, 24, 8, 4, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 22, 14, 38, tzinfo=datetime.timezone.utc), 'time_taken': 4182606.0, 'time_delta': '48 days, 9:50:06', 'additions': 1024, 'deletions': 356, 'state': 'closed'}, {'id': 869422631, 'number': 15056, 'closed': datetime.datetime(2022, 3, 7, 10, 20, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 11, 21, 26, tzinfo=datetime.timezone.utc), 'time_taken': 428355.0, 'time_delta': '4 days, 22:59:15', 'additions': 4322, 'deletions': 3408, 'state': 'closed'}, {'id': 867918365, 'number': 15050, 'closed': datetime.datetime(2022, 3, 23, 8, 29, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 1, 14, 20, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1879685.0, 'time_delta': '21 days, 18:08:05', 'additions': 234, 'deletions': 103, 'state': 'closed'}, {'id': 867913345, 'number': 15049, 'closed': datetime.datetime(2022, 3, 31, 7, 48, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 1, 14, 15, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2568742.0, 'time_delta': '29 days, 17:32:22', 'additions': 400, 'deletions': 235, 'state': 'closed'}, {'id': 864352419, 'number': 15025, 'closed': datetime.datetime(2022, 3, 4, 18, 59, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 26, 8, 29, 33, tzinfo=datetime.timezone.utc), 'time_taken': 556181.0, 'time_delta': '6 days, 10:29:41', 'additions': 57, 'deletions': 7, 'state': 'closed'}, {'id': 852297026, 'number': 14936, 'closed': datetime.datetime(2022, 4, 18, 17, 32, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 14, 17, 1, 42, tzinfo=datetime.timezone.utc), 'time_taken': 5445036.0, 'time_delta': '63 days, 0:30:36', 'additions': 129, 'deletions': 3, 'state': 'closed'}, {'id': 838183251, 'number': 14838, 'closed': datetime.datetime(2022, 2, 16, 7, 57, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 2, 11, 5, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1198283.0, 'time_delta': '13 days, 20:51:23', 'additions': 424, 'deletions': 520, 'state': 'closed'}, {'id': 831873351, 'number': 14774, 'closed': datetime.datetime(2022, 2, 6, 11, 52, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 25, 21, 15, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1003017.0, 'time_delta': '11 days, 14:36:57', 'additions': 1162, 'deletions': 500, 'state': 'closed'}, {'id': 831163367, 'number': 14766, 'closed': datetime.datetime(2022, 3, 27, 13, 19, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 25, 7, 45, 27, tzinfo=datetime.timezone.utc), 'time_taken': 5290467.0, 'time_delta': '61 days, 5:34:27', 'additions': 411, 'deletions': 307, 'state': 'closed'}, {'id': 827750915, 'number': 14723, 'closed': datetime.datetime(2022, 1, 25, 7, 8, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 20, 17, 12, tzinfo=datetime.timezone.utc), 'time_taken': 395803.0, 'time_delta': '4 days, 13:56:43', 'additions': 409, 'deletions': 275, 'state': 'closed'}, {'id': 824708686, 'number': 14681, 'closed': datetime.datetime(2022, 1, 31, 9, 11, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 17, 15, 25, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1187181.0, 'time_delta': '13 days, 17:46:21', 'additions': 572, 'deletions': 332, 'state': 'closed'}, {'id': 823725411, 'number': 14661, 'closed': datetime.datetime(2022, 2, 2, 10, 8, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 15, 19, 19, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1522142.0, 'time_delta': '17 days, 14:49:02', 'additions': 444, 'deletions': 303, 'state': 'closed'}, {'id': 818784111, 'number': 14618, 'closed': datetime.datetime(2022, 1, 25, 7, 5, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 11, 14, 49, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1181759.0, 'time_delta': '13 days, 16:15:59', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 818773411, 'number': 14617, 'closed': datetime.datetime(2022, 1, 11, 14, 48, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 11, 14, 37, 44, tzinfo=datetime.timezone.utc), 'time_taken': 648.0, 'time_delta': '0:10:48', 'additions': 35, 'deletions': 29, 'state': 'closed'}, {'id': 816917106, 'number': 14593, 'closed': datetime.datetime(2022, 1, 30, 11, 33, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 8, 20, 1, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1870300.0, 'time_delta': '21 days, 15:31:40', 'additions': 607, 'deletions': 395, 'state': 'closed'}, {'id': 814221726, 'number': 14546, 'closed': datetime.datetime(2022, 2, 8, 17, 35, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 4, 21, 42, 6, tzinfo=datetime.timezone.utc), 'time_taken': 3009200.0, 'time_delta': '34 days, 19:53:20', 'additions': 1380, 'deletions': 1100, 'state': 'closed'}, {'id': 811873646, 'number': 14522, 'closed': datetime.datetime(2022, 1, 14, 6, 45, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 30, 9, 33, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1285924.0, 'time_delta': '14 days, 21:12:04', 'additions': 34, 'deletions': 28, 'state': 'closed'}, {'id': 810250643, 'number': 14493, 'closed': datetime.datetime(2022, 1, 13, 4, 44, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 27, 8, 22, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1455738.0, 'time_delta': '16 days, 20:22:18', 'additions': 197, 'deletions': 129, 'state': 'closed'}, {'id': 810249595, 'number': 14492, 'closed': datetime.datetime(2021, 12, 27, 12, 24, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 27, 8, 20, 29, tzinfo=datetime.timezone.utc), 'time_taken': 14663.0, 'time_delta': '4:04:23', 'additions': 327, 'deletions': 61, 'state': 'closed'}, {'id': 809357144, 'number': 14479, 'closed': datetime.datetime(2021, 12, 24, 12, 7, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 23, 19, 9, 15, tzinfo=datetime.timezone.utc), 'time_taken': 61113.0, 'time_delta': '16:58:33', 'additions': 66, 'deletions': 44, 'state': 'closed'}, {'id': 808559629, 'number': 14476, 'closed': datetime.datetime(2021, 12, 29, 11, 52, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 22, 16, 52, 47, tzinfo=datetime.timezone.utc), 'time_taken': 586790.0, 'time_delta': '6 days, 18:59:50', 'additions': 156, 'deletions': 38, 'state': 'closed'}, {'id': 807546113, 'number': 14470, 'closed': datetime.datetime(2022, 1, 5, 17, 59, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 21, 13, 37, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1311756.0, 'time_delta': '15 days, 4:22:36', 'additions': 122, 'deletions': 27, 'state': 'closed'}, {'id': 805695651, 'number': 14458, 'closed': datetime.datetime(2021, 12, 23, 19, 17, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 17, 21, 49, 12, tzinfo=datetime.timezone.utc), 'time_taken': 509321.0, 'time_delta': '5 days, 21:28:41', 'additions': 275, 'deletions': 191, 'state': 'closed'}, {'id': 805166326, 'number': 14454, 'closed': datetime.datetime(2021, 12, 29, 12, 24, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 17, 8, 57, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1049174.0, 'time_delta': '12 days, 3:26:14', 'additions': 437, 'deletions': 60, 'state': 'closed'}, {'id': 802313497, 'number': 14429, 'closed': datetime.datetime(2021, 12, 18, 20, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 14, 12, 56, tzinfo=datetime.timezone.utc), 'time_taken': 371760.0, 'time_delta': '4 days, 7:16:00', 'additions': 120, 'deletions': 18, 'state': 'closed'}, {'id': 800503948, 'number': 14406, 'closed': datetime.datetime(2022, 1, 21, 11, 1, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 11, 17, 31, 35, tzinfo=datetime.timezone.utc), 'time_taken': 3518969.0, 'time_delta': '40 days, 17:29:29', 'additions': 245, 'deletions': 183, 'state': 'closed'}, {'id': 799827569, 'number': 14402, 'closed': datetime.datetime(2022, 2, 6, 11, 48, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 10, 11, 24, 2, tzinfo=datetime.timezone.utc), 'time_taken': 5012662.0, 'time_delta': '58 days, 0:24:22', 'additions': 250, 'deletions': 0, 'state': 'closed'}, {'id': 786768894, 'number': 14301, 'closed': datetime.datetime(2021, 12, 17, 23, 4, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 23, 9, 13, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2123511.0, 'time_delta': '24 days, 13:51:51', 'additions': 594, 'deletions': 336, 'state': 'closed'}, {'id': 786720852, 'number': 14299, 'closed': datetime.datetime(2021, 12, 2, 14, 29, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 23, 8, 10, 40, tzinfo=datetime.timezone.utc), 'time_taken': 800341.0, 'time_delta': '9 days, 6:19:01', 'additions': 77, 'deletions': 109, 'state': 'closed'}, {'id': 779951545, 'number': 14246, 'closed': datetime.datetime(2021, 12, 4, 1, 29, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 13, 19, 39, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1748972.0, 'time_delta': '20 days, 5:49:32', 'additions': 79, 'deletions': 61, 'state': 'closed'}, {'id': 771131955, 'number': 14167, 'closed': datetime.datetime(2021, 11, 3, 17, 40, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 2, 6, 50, 7, tzinfo=datetime.timezone.utc), 'time_taken': 125397.0, 'time_delta': '1 day, 10:49:57', 'additions': 105, 'deletions': 19, 'state': 'closed'}, {'id': 769883690, 'number': 14155, 'closed': datetime.datetime(2021, 10, 31, 16, 8, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 31, 8, 50, 30, tzinfo=datetime.timezone.utc), 'time_taken': 26275.0, 'time_delta': '7:17:55', 'additions': 100, 'deletions': 16, 'state': 'closed'}, {'id': 767805307, 'number': 14143, 'closed': datetime.datetime(2021, 10, 28, 10, 38, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 27, 21, 30, 45, tzinfo=datetime.timezone.utc), 'time_taken': 47289.0, 'time_delta': '13:08:09', 'additions': 99, 'deletions': 90, 'state': 'closed'}, {'id': 767180016, 'number': 14137, 'closed': datetime.datetime(2021, 12, 4, 18, 28, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 27, 8, 41, 53, tzinfo=datetime.timezone.utc), 'time_taken': 3318399.0, 'time_delta': '38 days, 9:46:39', 'additions': 99, 'deletions': 50, 'state': 'closed'}]"
