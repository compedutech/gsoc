pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
998479807,Added a TextControl with Apply and Clear buttons,"Apart from adding the above mentioned. Also, using message, I tried to clear out the `TextControl` with `SetText(NULL)` whenever the user presses the `Clear` Button, but it didn't seem to be working.",True,121,https://api.github.com/repos/HaikuArchives/Calendar/pulls/121,https://github.com/HaikuArchives/Calendar/pull/121,closed,98,6,5,7,9,51,0,0,[],2022-07-16 18:48:40+00:00,2022-08-01 06:04:14+00:00,1336534.0,"15 days, 11:15:34","[{'comment_id': 922766416, 'comment_body': ""Please check the class descriptions in the [BeBook](https://www.haiku-os.org/legacy-docs/bebook/BTextControl.html) and [Haiku Book](https://www.haiku-os.org/docs/api/classBTextControl.html).\r\n\r\nYou can pass the ctor a label and a BMessage that's send when the user sends their changes."", 'comment_created': datetime.datetime(2022, 7, 17, 4, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 922766442, 'comment_body': 'When using BTextControls messaging, no ""Apply"" button is needed.', 'comment_created': datetime.datetime(2022, 7, 17, 4, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 922766635, 'comment_body': 'To align the widgets to the bottom of the window, use an .AddGlue() here.', 'comment_created': datetime.datetime(2022, 7, 17, 4, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 922766735, 'comment_body': ""If the BTextControl gets a proper label, there's no need for an grid layout.\r\nAlso, it's easier to read, if the elements belonging to a layout group are indented in the code."", 'comment_created': datetime.datetime(2022, 7, 17, 4, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 922766742, 'comment_body': 'No need for that AddGlue().', 'comment_created': datetime.datetime(2022, 7, 17, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 922766837, 'comment_body': 'Check the BTextControl description in BeBook/HaikuBook with what parameter SetText() is called.', 'comment_created': datetime.datetime(2022, 7, 17, 4, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 923128816, 'comment_body': 'I\'ve checked the description, to clear out the contents, the parameter should be an empty string, that is, `""""` \r\nMaking the call as : `fTextFilter->SetText("""");`. This clears the content of the BTextControl.\r\nBut it didn\'t happen when the Clear Button is pressed. There must be something issue with the messaging, can you help me figure out what is wrong here?', 'comment_created': datetime.datetime(2022, 7, 18, 9, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 923229182, 'comment_body': ""I'm utterly baffled.\r\nThe message kFilterCleared never reaches MessageReceived()  - I put a printf() in the kFilterCleared-case,never shows up.\r\nTotally weird. If I change the fFilterClearButton to send kMonthUpMessage, I can change the month with the Clear button. And vice-versa: using kFilterCleared as message for the fMonthUpButton, I can clear the filter text box...  Whaaaat?\r\n\r\nOver to @nielx..."", 'comment_created': datetime.datetime(2022, 7, 18, 10, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 924088709, 'comment_body': 'Somewhere in the inheritance hierarchy of the BButton, there are a BControl, which inherits BInvoker. The BInvoker is the common helper that sends messages whenever an event relevant to the control happened (like checking a check box or clicking a button). The invoker needs a target.  This can be explicitly set. The BControl code sets the target to the window, if there is no custom target defined. The clear and apply messages are sent to the window and not the view. If you actually check the MessageReceived() in src/MainWindow.cpp, you can see that the other events are also received there, and are forwarded explicitly. This must be done for the event(s) you want to monitor on these new controls as well.', 'comment_created': datetime.datetime(2022, 7, 19, 6, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 924398778, 'comment_body': ""Still weird. Why does the fMonthUpButton, created a few lines above, work as expected? Doing a `fFilterClearButton->SetTarget(this)` doesn't fix it either."", 'comment_created': datetime.datetime(2022, 7, 19, 11, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 926038533, 'comment_body': 'That works because of this line: https://github.com/HaikuArchives/Calendar/blob/4d200fc9a7b6605b9da0de41e88115ddbd67d143/src/MainWindow.cpp#L142\r\n\r\nSetting the target does not work, because at the time the view is created, it is not yet attached to a window. The target is a looper plus an optional handler. There is no looper known at this time yet.', 'comment_created': datetime.datetime(2022, 7, 20, 20, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 926454748, 'comment_body': 'Sure, removed with the last commit', 'comment_created': datetime.datetime(2022, 7, 21, 9, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 926455578, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2022, 7, 21, 9, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 926456392, 'comment_body': 'Removed the Grid Layout, and added the label to BTextControl', 'comment_created': datetime.datetime(2022, 7, 21, 9, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 926456545, 'comment_body': 'sure', 'comment_created': datetime.datetime(2022, 7, 21, 9, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 929527170, 'comment_body': 'You should probably use a unique message constant instead of reusing kFilterCleared. \r\nThis message will be sent to the MainWindow, like the others. From there you can forward it to the EventTabView and make that aware of the filter messages, so that it can be applied to the list.', 'comment_created': datetime.datetime(2022, 7, 26, 5, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 929940956, 'comment_body': 'Yeah, that was just for checking out the Clear Button, I have updated it now', 'comment_created': datetime.datetime(2022, 7, 26, 13, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 932586227, 'comment_body': 'Private variables start with an f prefix (see the other ones).\r\nAlso... you are using a C-style char* string that is allocated above with `strdup()`, but is never freed. At least you need to put a free in the destructor of the class, but even better would be to use a C++ object that does RAII and cleans up itself. In this case a BString or std::string would be better. ', 'comment_created': datetime.datetime(2022, 7, 28, 19, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 932587877, 'comment_body': 'This code block could be simplified by calling the `event->GetName()` etc. in the std::string constructor. You do not need the intermediate variables.', 'comment_created': datetime.datetime(2022, 7, 28, 19, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 932589681, 'comment_body': 'This code fragment right now is a bit inefficient. The reason is that you are creating the wholeEvent string every time this method is called, even if there is no filter text. It would be better to refactor the _SearchForKeywords method to take the event as parameter, and construct the wholeEvent string there if there is something to filter.', 'comment_created': datetime.datetime(2022, 7, 28, 19, 17, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 932590262, 'comment_body': 'Both these operation create unnecessary copies of data you already have. Please look at the other comments in this file on how this can be made more efficient, with less copying.', 'comment_created': datetime.datetime(2022, 7, 28, 19, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 932591970, 'comment_body': 'I am not crazy about this approach, as it creates more copies of the data you already have. There are ways to rewrite this where you take an iterator to the start and end of every word in the string, and then run the find using the iterator.', 'comment_created': datetime.datetime(2022, 7, 28, 19, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 932592386, 'comment_body': 'Please remember to cleanup commented out code before you submit your final PR', 'comment_created': datetime.datetime(2022, 7, 28, 19, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 932592826, 'comment_body': ""I don't get why you are clearing the filter here after receiving the message that the filter has changed."", 'comment_created': datetime.datetime(2022, 7, 28, 19, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 932593883, 'comment_body': 'Do you need to do this check? you could also move the check for an empty string to your SearchForKeywords method.', 'comment_created': datetime.datetime(2022, 7, 28, 19, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 932594221, 'comment_body': 'I guess all changes in this file are no longer necessary?', 'comment_created': datetime.datetime(2022, 7, 28, 19, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 932595253, 'comment_body': 'Did you find out in the documentation if the kFilterChanged message itself actually contains the new string? In that case, you could simplify this code by just taking the string from the kFilterChanged message.', 'comment_created': datetime.datetime(2022, 7, 28, 19, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 933763485, 'comment_body': ""I checked the BeBook. There are `AddString()` and `FindString()` functions. What we can do is attach the string to the message and then send it to the `MainWindow`, where we can retrieve the string and use it\r\nBut this is not possible due to the fact that we can't use `kFilterChanged` in SidePanelView. Also, this approach doesn't seem to be much efficient than the one, we're already at."", 'comment_created': datetime.datetime(2022, 7, 30, 6, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933763588, 'comment_body': 'Yes, I am reverting all the changes in `QueryDBManager.cpp`', 'comment_created': datetime.datetime(2022, 7, 30, 6, 57, 40, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933763683, 'comment_body': 'I think these lines are no longer necessary, as we are now dealing with theses two things in the MainWindow itself', 'comment_created': datetime.datetime(2022, 7, 30, 6, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933763703, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 7, 30, 6, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933763790, 'comment_body': 'Okay!', 'comment_created': datetime.datetime(2022, 7, 30, 7, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933795654, 'comment_body': 'Sure, now I have used std::string for this. And the naming is corrected as well', 'comment_created': datetime.datetime(2022, 7, 30, 11, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933795865, 'comment_body': 'I have now modified the `_SearchForKeywords()` function to take the `event` as the parameter, and construct the `wholeEvent` string, when there is something to filter', 'comment_created': datetime.datetime(2022, 7, 30, 11, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933795888, 'comment_body': 'Yes, now fixed', 'comment_created': datetime.datetime(2022, 7, 30, 11, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933796356, 'comment_body': ""Please review the current approach\r\n\r\n```\r\nstd::size_t start=0, end=0;\r\nwhile((end = fFilterKeywords.find(' ', start)) != std::string::npos)\r\n{\r\n\tif (wholeEvent.find(fFilterKeywords.substr(start, end - start))\r\n\t\t!= std::string::npos && end != start)\r\n\t\treturn true;\r\n\tstart = end + 1;\r\n}\r\n\r\nif(wholeEvent.find(fFilterKeywords.substr(start)) != std::string::npos\r\n\t&& end != start)\r\n\treturn true;\r\n```\r\n\r\nIt does not create the copy of the data, as was the case with previous one (using `std::istringstream iss(s2);`)"", 'comment_created': datetime.datetime(2022, 7, 30, 11, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933796454, 'comment_body': 'Yes, thanks for the suggestion! I have moved the empty string check to the `_SearchForKeywords()` method.', 'comment_created': datetime.datetime(2022, 7, 30, 11, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933796625, 'comment_body': 'Regarding this issue;\r\n\r\nThe clear button seems to be working fine when triggered from the MainWindow itself.\r\nBut as always, I am open for further suggestions.', 'comment_created': datetime.datetime(2022, 7, 30, 11, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933935994, 'comment_body': 'That seems to be correct, the only properties added can be found under [ModificationMessage()](https://www.haiku-os.org/legacy-docs/bebook/BTextControl.html) in the BeBook.', 'comment_created': datetime.datetime(2022, 7, 31, 6, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 933936161, 'comment_body': 'For consistency with the message constant and with the text on the button, could you change this into ClearFilterText()?', 'comment_created': datetime.datetime(2022, 7, 31, 6, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 933936449, 'comment_body': 'Do you need the space after the semicolon? \r\nAlso: Calendar is localized. That means that any user-facing strings (like Filter: here or clear below) need to be wrapped in a B_TRANSLATE call.', 'comment_created': datetime.datetime(2022, 7, 31, 6, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 933937201, 'comment_body': 'I prefer this approach to the previous one, but substr() still creates a new string which copies the data. I will put some more comments in the code.', 'comment_created': datetime.datetime(2022, 7, 31, 7, 4, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 933937620, 'comment_body': 'Did you test this? [std::string::substr()](https://en.cppreference.com/w/cpp/string/basic_string/substr) takes two arguments, a start and the number of bytes you want to copy into the new string. Your current use seems to get it until the end, which will work if you are only searching for one keyword but is likely to break for more.', 'comment_created': datetime.datetime(2022, 7, 31, 7, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 933937843, 'comment_body': 'Do you think there is a way to get rid of this fFilterKeywords? I would argue that you can probably rewrite _SearchForKeywords() in such a way that it can take the keywords as a parameter, and that means you no longer need to store the keywords as a class variable.', 'comment_created': datetime.datetime(2022, 7, 31, 7, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 933940207, 'comment_body': ""Yes, I have tested this, and it works really nicely.\r\nThing is that, inside the loop, it is able to read only upto the last keyword. So I have to put this check outside of the loop, to read the last keyword.\r\n\r\nLet me explain this;\r\nSuppose we give the following string to filter: `desk bath work`. Now, the program is supposed to look all three of them as seperate keywords (As we talked about this in a Video Chat early in the project)\r\n\r\nInside the loop, it is only able to read upto the last seperator (which in the case is a blank space `' '`), So the last keyword still remains, that is why I have put a check outside of the loop."", 'comment_created': datetime.datetime(2022, 7, 31, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933940528, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 7, 31, 7, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933944322, 'comment_body': 'I have tried to get rid of the fFilterEvents, but doing that will lead to pass the keywords down to `_PopulateList()` from `SetFilterString()` as argument.\r\n\r\nThe problem with that is `_PopulateList()` is being called from several other members, namely, `LoadEvents()` and `ToggleMode()`. This will lead to pass the keywords down to many members, which obviously is not needed.', 'comment_created': datetime.datetime(2022, 7, 31, 8, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 933947834, 'comment_body': 'Right! You are right that you need to store the keywords permanently then.', 'comment_created': datetime.datetime(2022, 7, 31, 8, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 933951553, 'comment_body': 'Both the `""Filter:""` and `""Clear""` are now wrapped in B_TRANSLATE()', 'comment_created': datetime.datetime(2022, 7, 31, 8, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}]","[{'commit_sha': '7b3e00119b584cf393175705ce4418f909930cf0', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9a8fca4e1e17b7ac91d68914741ec8822dd5705', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7055d11f095a77aad83b09161496b5da7cc8b9c', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '026d4675ad1fdfc213a491373b9ae909c03186b2', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f89472b5bdc8b8fd2b47f982a63d514d356320f7', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '193fef878bcf01bbbcde6e3d59d46205c8b87291', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe185d6bb29ddb7857cd584d695b85022e510ed3', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}]",Harshit Sharma,75475819,,User,,84,,23,61
1016167893,Reminders for Events,"For Issue: #122
Started working on the `calendar_daemon`
Currently I tested out sending Notifications from the Application with the help of `BNotification`

I'm submitting this PR for regular updates regarding the coding and their review",False,123,https://api.github.com/repos/HaikuArchives/Calendar/pulls/123,https://github.com/HaikuArchives/Calendar/pull/123,closed,771,27,76,22,47,61,0,0,[],2022-08-03 11:09:24+00:00,2022-10-02 05:38:46+00:00,5164162.0,"59 days, 18:29:22","[{'comment_id': 939072560, 'comment_body': 'Add the app signature here.', 'comment_created': datetime.datetime(2022, 8, 5, 18, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 939075516, 'comment_body': 'Alphasort includes.', 'comment_created': datetime.datetime(2022, 8, 5, 18, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 939086350, 'comment_body': ""The whole fEventDir, incl. the member variable can be removed, because we'll use a query instead."", 'comment_created': datetime.datetime(2022, 8, 5, 18, 28, 31, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 940498747, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2022, 8, 8, 17, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 940501353, 'comment_body': 'Sorted!', 'comment_created': datetime.datetime(2022, 8, 8, 17, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 945093186, 'comment_body': 'Why is true wrapped in parenthesis? ', 'comment_created': datetime.datetime(2022, 8, 13, 6, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 945093297, 'comment_body': 'This must reuse the existing Event class.', 'comment_created': datetime.datetime(2022, 8, 13, 6, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 945094062, 'comment_body': 'Why not reuse QueryDBManager::GetEventsToNotify()?', 'comment_created': datetime.datetime(2022, 8, 13, 6, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 945094474, 'comment_body': ""I don't quite understand this particular EventLoop. BApplication itself is an event loop based around messages. Can't you handle these events in the app's main event loop?"", 'comment_created': datetime.datetime(2022, 8, 13, 6, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 945117245, 'comment_body': ""It rather is just a habit, wrapping the `return` in parenthesis. Looks neat.\r\nBut yes, as the Haiku coding guidelines suggest not using the parenthesis here, I'd just remove this."", 'comment_created': datetime.datetime(2022, 8, 13, 9, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 945118294, 'comment_body': ""have a look at other infrictions while you'rw at it. always a space after if/while/for etc."", 'comment_created': datetime.datetime(2022, 8, 13, 9, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 945287547, 'comment_body': ""I'm getting stuck in including the `QueryDBManager.h`. If we include this in the MakeFile for Calendar Daemon then it leads to including almost every source file present there, even the `App.cpp`, which leads to `main(): predefined here` error in compiling, how should I approach this?\r\n\r\n@humdingerb @nielx "", 'comment_created': datetime.datetime(2022, 8, 14, 13, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 945300870, 'comment_body': ""It looks like QueryDBManager only uses App in `QueryDBManager::GetAllCategories()` to get the default category:\r\n`\tBString defaultCat = ((App*) be_app)->GetPreferences()->fDefaultCategory;`\r\n\r\nPreferences are fetched from a custom subclass of BApplication so that they're consistent throughout the program. If you're sure you won't use `GetAllCategories()` in the daemon, you might be able to just move `main()` from App.cpp to a new Main.cpp or something.\r\n\r\nIf that's not working (or you want easy settings access for the daemon), you could maybe make App a common subclass of both the program's BApplication and the daemon's BApplication, so that the `((App*) be_app)` calls would be valid for both the daemon and the program.\r\n\r\nEDIT: Sorry, it seems I misunderstood. Yea, you'd have to include a lot to get QueryDBManager working, without a good bit of refactoring."", 'comment_created': datetime.datetime(2022, 8, 14, 14, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'JadedCtrl', 'type': 'User'}, {'comment_id': 945319297, 'comment_body': 'This `EventLoop` is responsible to send the alert for the very first item in the `fEventList` and then remove it.\r\nWhile the app is responsible for handling the changes in the events via `B_QUERY_UPDATE` and `B_NODE_MONITOR`.\r\n\r\nHandling both of these in the same loop of `BApplication` might be problematic, no?', 'comment_created': datetime.datetime(2022, 8, 14, 17, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 945334086, 'comment_body': '@JadedCtrl : not sure why you are apologizing, I am coming to the same conclusion. It is unclear why QueryDbManager.h includes Preferences.h at all, and the only use is as you say, in the GetCategories() method to help sort the list with the default category first. Arguably, that can either be done by the caller, or you can add a parameter to the function to help sort.\r\n\r\nThe other dependencies (Event and Category) are not too heavy and seem to have only minor dependencies...', 'comment_created': datetime.datetime(2022, 8, 14, 19, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 945334757, 'comment_body': ""Why would it be problematic? BLooper has an internal message queue. When the queue is empty, it does nothing and the thread goes to sleep. When a message arrives the thread wakes up and continues work. In your case, you get several messages from the query and the node monitor, telling your daemon something has changed, and other messages (you can probably use Pulse) to wake up your daemon to check whether it needs to alert already. I don't see why those two don't mix."", 'comment_created': datetime.datetime(2022, 8, 14, 19, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 945769930, 'comment_body': 'I removed the ReminderEvent Class completely. Now the application uses only the existing Event class!', 'comment_created': datetime.datetime(2022, 8, 15, 13, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 945781732, 'comment_body': 'Yeah! So, for now I hardcoded the `defaultCat` as `defaultCat = ""Default"";`\r\n\r\nThe problem with passing the `defaultCat` as a parameter in the function is that `GetAllCategories()` is that it is being called in `QueryDBManager.cpp` multiple times. So there will always be need for using `GetPreferences()->fDefaultCategory` there', 'comment_created': datetime.datetime(2022, 8, 15, 14, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 946125997, 'comment_body': 'So what about making it a permanent class member? It can be set in the constructor and updated with a method. If it is unset, there is no default category and there will be no ordering. This will save some CPU cycles in the daemon, because it does not care about the ordering of the categories.', 'comment_created': datetime.datetime(2022, 8, 15, 21, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 946581067, 'comment_body': 'I would also like to mention one more thing for using the QueryDBManager::GetEventsToNotify() in the RefreshEventList()\r\nIn the Calendar Daemon, we are working with live queries. So it is necessary in the RefreshEventList() to set the target of the query using `query.SetTarget(this)`.\r\n\r\nWhat we can do here, is make some changes in the `GetEventsToNotify()` so that it can accept `this` as an arguement and set it there, but then making the `fQuery` a class member in Daemon would have no meaning.', 'comment_created': datetime.datetime(2022, 8, 16, 10, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 947471901, 'comment_body': ""Could you explain your strategy of node monitoring and live queries? If I understand your code correctly, you want to build a list of events to notify for, and you need to know when something changes on disk so that you can rebuild that list. Wouldn't node monitoring suffice for that?"", 'comment_created': datetime.datetime(2022, 8, 17, 5, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 947586652, 'comment_body': ""> If I understand your code correctly, you want to build a list of events to notify for, and you need to know when something changes on disk so that you can rebuild that list. Wouldn't node monitoring suffice for that?\r\n\r\nYeah, node monitoring would definitely suffice for that.\r\n\r\n> Could you explain your strategy of node monitoring and live queries?\r\n\r\nThe Live Queries are able to get the results whenever the any entry is created or deleted, but isn't able to get whether any attribute is changed or not. So humdinger suggested me to implement node monitoring as well ([here](https://github.com/HaikuArchives/Calendar/pull/123/#issuecomment-1209683906))\r\nTherefore, the node monitoring is also present there\r\n"", 'comment_created': datetime.datetime(2022, 8, 17, 8, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956606178, 'comment_body': 'unused', 'comment_created': datetime.datetime(2022, 8, 27, 17, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956606368, 'comment_body': 'homePath and fEventDir seem to be unused.', 'comment_created': datetime.datetime(2022, 8, 27, 17, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956606369, 'comment_body': 'The notification can be removed, I suppose', 'comment_created': datetime.datetime(2022, 8, 27, 17, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956606496, 'comment_body': 'Space after ""if"". Curly brackets not needed.', 'comment_created': datetime.datetime(2022, 8, 27, 17, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956606640, 'comment_body': 'Needs to be localizable.', 'comment_created': datetime.datetime(2022, 8, 27, 17, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956607185, 'comment_body': ""To be properly translatable, including possible plural forms, you'll nee to use BStringFormat(). For a very terse intro, see https://www.haiku-os.org/community/getting-involved/translating/3rdparty/\r\n"", 'comment_created': datetime.datetime(2022, 8, 27, 17, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956607249, 'comment_body': 'No curly brackets needed', 'comment_created': datetime.datetime(2022, 8, 27, 17, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956607307, 'comment_body': 'Use ""OK"" instead of ""Okay"" to fit into the rest of Haiku.', 'comment_created': datetime.datetime(2022, 8, 27, 17, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956607460, 'comment_body': '```suggestion\r\n\tshort_info = ""Calendar daemon"",\r\n```', 'comment_created': datetime.datetime(2022, 8, 27, 17, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956607728, 'comment_body': '```suggestion\r\n\tlong_info = ""Notifies about upcoming events scheduled with Calendar""\r\n```', 'comment_created': datetime.datetime(2022, 8, 27, 17, 55, 32, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 956617720, 'comment_body': 'Removed this.', 'comment_created': datetime.datetime(2022, 8, 27, 19, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956617724, 'comment_body': 'Yeah, so they were present (along with the `EVENT_DIRECTORY`) when we were only Node Monitoring the Events Directory, not the live queries. Now they can be removed.', 'comment_created': datetime.datetime(2022, 8, 27, 19, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956617727, 'comment_body': 'Yeah, that should be removed.', 'comment_created': datetime.datetime(2022, 8, 27, 19, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956617731, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 8, 27, 19, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956617748, 'comment_body': 'Localization done in code!', 'comment_created': datetime.datetime(2022, 8, 27, 19, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956617763, 'comment_body': 'Sure, thanks for the reference!', 'comment_created': datetime.datetime(2022, 8, 27, 19, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956617766, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 27, 19, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956617768, 'comment_body': 'OK :)', 'comment_created': datetime.datetime(2022, 8, 27, 19, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956617771, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 27, 19, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 956617774, 'comment_body': 'Change done ', 'comment_created': datetime.datetime(2022, 8, 27, 19, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 958052966, 'comment_body': 'Are these includes necessary for the daemon? Please remove them one by one and keep the ones you need.', 'comment_created': datetime.datetime(2022, 8, 30, 6, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958053645, 'comment_body': 'This is fine for now, but make a note to expand either the top level readme in the future, or this one, once you have figured out and implemented how this is going to be started/stopped and triggered.', 'comment_created': datetime.datetime(2022, 8, 30, 6, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958054731, 'comment_body': 'I think you should remove the locale changes in the daemon for now, as I think there is a better way. We will discuss this separately.', 'comment_created': datetime.datetime(2022, 8, 30, 6, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958055089, 'comment_body': 'Is this include needed? See more comments below.', 'comment_created': datetime.datetime(2022, 8, 30, 6, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958056664, 'comment_body': 'We can leave this debug output here for this PR, but it **must** be improved as part of this project. We need to make a decision on what to log to the system log, and under what conditions we want debug output to the standard output or to stderr. We can discuss this separately.', 'comment_created': datetime.datetime(2022, 8, 30, 6, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958057577, 'comment_body': 'Is this the way to go? Would there be a reason to cleanly exit the BApplication by requesting it to quit?\r\n(This is not a rhetorical question!)', 'comment_created': datetime.datetime(2022, 8, 30, 6, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958059662, 'comment_body': 'I am still not convinced you need semaphores and a separate thread in an object that is designed to be a message based event loop! See my earlier comments. Focus on reworking this. I understand you previously had issues with node monitoring and with Pulse, but we should resolve those as they are most likely programming errors and not fundamental issues.', 'comment_created': datetime.datetime(2022, 8, 30, 6, 35, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958060632, 'comment_body': 'See comments on event loop earlier', 'comment_created': datetime.datetime(2022, 8, 30, 6, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958064873, 'comment_body': ""Is this really necessary? \r\n\r\nThe way I see it, the daemon needs to know one thing: what is the next event I need to warn for, and when is it? It should of course accommodating for the chance that there are two or more events that are raised simultaneously, but that's the only edge case I can think off. \r\n\r\nDo you then need a running query? Or is this more of a single call to the QueryDBManager, which is meant to be the abstract parent anyway? \r\n\r\nSo in pseudo code\r\n- daemon start\r\n- list<Event> nextEvents = fQueryDbManager->GetNextReminders()\r\n- sleep until reminder\r\n- remind\r\n- list<Event> nextEvents = fQueryDbManager->GetNextReminders()\r\n- sleep until reminder\r\n- remind\r\n\r\nIf the data on the disk changes, then it should be a trigger to reload the next reminders list. That's what node monitoring is for.\r\n\r\nSo I am wondering why you need the live query."", 'comment_created': datetime.datetime(2022, 8, 30, 6, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958065414, 'comment_body': ""Shouldn't node monitoring also be called when new events are added or events are removed (files created/removed)?"", 'comment_created': datetime.datetime(2022, 8, 30, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958100543, 'comment_body': ""And I think humdinger already alluded to it, you don't need to use Pulse, you can use BMessageRunner to set a timer to wake up your application when it is time to notify."", 'comment_created': datetime.datetime(2022, 8, 30, 7, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 958256660, 'comment_body': 'Okay. Should I remove only the catkeys or the code changes as well?', 'comment_created': datetime.datetime(2022, 8, 30, 9, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 958257256, 'comment_body': 'Noted.', 'comment_created': datetime.datetime(2022, 8, 30, 9, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 958279665, 'comment_body': 'Files created/removed is handled by the Live Query. For now, The Node Monitoring is only used for tracking the changes in the attributes.\r\nShould we remove the live query and get the work done with Node Monitor only?\r\n', 'comment_created': datetime.datetime(2022, 8, 30, 10, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 958322024, 'comment_body': ""You're right, this can be handled more effectively through the `BMessageRunner` itself. I'll work on that.\r\nShould I start working on this in this PR, or should we merge this and create a separate PR for removing the separate thread?"", 'comment_created': datetime.datetime(2022, 8, 30, 10, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 958334526, 'comment_body': '> So I am wondering why you need the live query.\r\n\r\nTBH, we do not seem to need the Live Query to gather the events, Node Monitoring will suffice for that. But it was the idea from the beginning to use the Live Queries, so here we are. Should we remove the Live Query?', 'comment_created': datetime.datetime(2022, 8, 30, 11, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 958697843, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 8, 30, 16, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}]","[{'commit_sha': 'f120e928feb09eb6e061659cd1af18d61491b40b', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea80a0676253296c76e173373b8dbc3cc9a29f52', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27192fbb9dd65dec3c8014c83d4462f69c488bfc', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d7b13c6937c8289847666551f54667a43e05be5', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e628d3e77177ec7327ded0b62db6ba4bcb8c857', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78d7b525175223654eb86cbc1e43ca849456b279', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cb5dce1998de7fd0900ebf9ff8a70299e368c7f', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95718dac4fab0c9c4f0da6a8d9ebcdb6e6c6519d', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da67c45bbce34aec69fc9cade116df9bf8c1567c', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3fee0200b8485eab58194d82edc5e133601d16b', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '448bba8abc603ece3904a1e619a9800d0798ec14', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54f007d812fb980f0f825ce174d818ff83602c82', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4321e0b280d872654fb2e14572b4fb3adbd70511', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d88c3928ba74818873706f6aa83383f33675d15', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e0cb8790a173923a889ce6115f12c61a827343b', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dac679657bcaf53ca014e5e68dd1454cca2d7a06', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1d9bbb6bc268d37e19181867cbd98cc44b74887', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd61126828f9f1ee9bf588abe672bf779c808c88d', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b57c108888a3e17eda301fdc353cadf2f6037868', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4430def61d3ebf2a2318d76f3d945682cf7bb29', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f59b6c5ba24b45df8cbc194ed05d10b8aa842be', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c268c9197876ba38a50db79ea0e60cec8d268ac', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}]",Harshit Sharma,75475819,,User,,84,,23,61
1042422685,Code restructure for Daemon app,"For Issue: #122

Restructured the files. Now there is a separate Calendar app and Daemon app",True,124,https://api.github.com/repos/HaikuArchives/Calendar/pulls/124,https://github.com/HaikuArchives/Calendar/pull/124,closed,14,1,71,1,0,0,0,0,[],2022-08-31 13:50:10+00:00,2022-08-31 16:15:46+00:00,8736.0,2:25:36,[],"[{'commit_sha': '561b641e40436bdc89484d25f0dd69041aae6423', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}]",Harshit Sharma,75475819,,User,,84,,23,61
1042662942,Reminders,"For Issue: #122

This PR is supposed to get the `QueryDBManager` code to be independent from the be_app, yet still working in the Calendar app.

Also, to remove the 'dead' functionality from the Calendar, such as:
GoogleCalendar/
utils/ICal

Both of these do not work as of now, but yes, they can serve as a starting point for implementing the same functionality.
What should we do with these?

@humdingerb suggested to have a note in the README about these not working.",True,125,https://api.github.com/repos/HaikuArchives/Calendar/pulls/125,https://github.com/HaikuArchives/Calendar/pull/125,closed,32,28,9,9,5,27,0,0,[],2022-08-31 17:26:00+00:00,2022-09-05 05:26:49+00:00,388849.0,"4 days, 12:00:49","[{'comment_id': 959992479, 'comment_body': 'Normally you would not leave commented code in the codebase, but in this case there may be a good reason. You do need to add a comment here (and in other places) why you are leaving out this code.', 'comment_created': datetime.datetime(2022, 8, 31, 20, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 959994086, 'comment_body': 'This needs to be reworked. You need to keep the current functionality of being able to provide a default category there. Have you thought about adding it as an argument to the constructor? Then in places where the QueryDBManager object is created, it can either be retrieved from the preferences (in the Calendar app), or be given a default value (in the daemon).', 'comment_created': datetime.datetime(2022, 8, 31, 20, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 960642870, 'comment_body': 'I think this can be done here:\r\n* Make `fDefaulCat` as a class member\r\n* Set it through a public function `QueryDBManager::SetDefaultCategory()` before wherever `GetAllCategories()` is being called', 'comment_created': datetime.datetime(2022, 9, 1, 13, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 960643467, 'comment_body': 'I added note for the GCal Functionality', 'comment_created': datetime.datetime(2022, 9, 1, 13, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 961062233, 'comment_body': 'I would actually make it a parameter to the constructor, and also have a SetDefaultCategory() method in case the preferences are updated.', 'comment_created': datetime.datetime(2022, 9, 1, 20, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 961257659, 'comment_body': ""I think that would create unnecessary clutter in the code. We'd have to provide `((App*) be_app)->GetPreferences()->fDefaultCategory` as an arguement wherever fDBManager is being declared (which is present in almost every class) yet we'd still have to update for the `fDefaultCat`."", 'comment_created': datetime.datetime(2022, 9, 2, 3, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 961317659, 'comment_body': ""Small improvement: please use the parameter name 'category'."", 'comment_created': datetime.datetime(2022, 9, 2, 6, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 961317739, 'comment_body': 'fDefaultCategory', 'comment_created': datetime.datetime(2022, 9, 2, 6, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 961320911, 'comment_body': 'From a design standpoint that would be preferred though. If we think of every class as being designed as if it is meant to be part of a well-designed public API. In that case, a caller would not realize how often the default category is used. So you must either make this explicit through (a) adding the parameter to every method that will need a default category or (b) having it clearly be a class property, which is very explicit when it is a constructor parameter.', 'comment_created': datetime.datetime(2022, 9, 2, 6, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 961523756, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 2, 10, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 961523832, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 2, 10, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 961525159, 'comment_body': 'Okay, now the `fDefaultCategory` can be passed in the constructor.\r\n\r\nI have tested it, the default category is being updated everywhere, when it is changed in the Preferences.', 'comment_created': datetime.datetime(2022, 9, 2, 10, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 962108229, 'comment_body': 'No need to call it like this, you have an fCurrentPreferences two lines above, and you even have an fTempPreferences with the same value ;-) ', 'comment_created': datetime.datetime(2022, 9, 3, 5, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 962108298, 'comment_body': 'Consider making it optional by giving it a default value (maybe just an empty string?). You are going to be using it without an argument in the daemon.', 'comment_created': datetime.datetime(2022, 9, 3, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 962353620, 'comment_body': 'If you change this line to \r\n`CategoryList* GetAllCategories(BString defaultCategory = """")`\r\nyou don\'t need to have the empty strings where you don\'t have a specific default category.', 'comment_created': datetime.datetime(2022, 9, 4, 18, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 962353710, 'comment_body': 'You include preferences here...', 'comment_created': datetime.datetime(2022, 9, 4, 18, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 962353747, 'comment_body': 'But then you do not use it to get the default category. And you want that, because below you are building a listview out of them and you want to keep the default on top', 'comment_created': datetime.datetime(2022, 9, 4, 18, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 962355095, 'comment_body': 'Done!\r\n', 'comment_created': datetime.datetime(2022, 9, 4, 18, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 962355119, 'comment_body': 'Sure, corrected now', 'comment_created': datetime.datetime(2022, 9, 4, 18, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 962355370, 'comment_body': '(outdated)', 'comment_created': datetime.datetime(2022, 9, 4, 18, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 962355471, 'comment_body': 'You\'ve commented on a previous commit :)\r\n\r\nNow the Default Category is not needed as the arguement in `QueryDBManager()`\r\n\r\nI also have removed it from the class member. Now it is only being passed as an arguement to `QueryDBManager::GetAllCategories(BString defaultCategory = """")`', 'comment_created': datetime.datetime(2022, 9, 4, 18, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 962369424, 'comment_body': 'Since """" is now the default argument, you can change back this line.', 'comment_created': datetime.datetime(2022, 9, 4, 21, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 962369438, 'comment_body': 'Ditto', 'comment_created': datetime.datetime(2022, 9, 4, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 962369500, 'comment_body': 'I am surprised this even compiles.\r\nDefault argument are in the declaration of a function/method (i.e. in the header) and should not repeated in the implementation.', 'comment_created': datetime.datetime(2022, 9, 4, 21, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 962432329, 'comment_body': 'Noted', 'comment_created': datetime.datetime(2022, 9, 5, 2, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 962432387, 'comment_body': 'Resolved\r\n', 'comment_created': datetime.datetime(2022, 9, 5, 2, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 962432399, 'comment_body': 'Resolved\r\n', 'comment_created': datetime.datetime(2022, 9, 5, 2, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}]","[{'commit_sha': '561b641e40436bdc89484d25f0dd69041aae6423', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd81d3e650c3d166a0c590a6529d071fc06ee7a3', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05752db529dd6d12c6f75a587aae943795016fcc', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a94f9feab58f3023867f4758c731b527df96168', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5e2f76d4cf5b3fa4e0dff255c134a759e0091ea', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '741c7a60b0389524b3fa152d0e3c5ae8f0d7588e', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c99a949cf5c62683e34c2ddd4b8460c0e6a96e40', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf44f20b2b7ec02cba15348b2903ada5ccedfb6', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e0d844aab51e018576346cb7a6d73ab50fbf71', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}]",Harshit Sharma,75475819,,User,,84,,23,61
1046796261,Set up a basic daemon with node monitoring,"For issue: #122 

This PR is supposed to set up a basic daemon which node monitors the Events directory for events adding/removing.

This can be tested as follows:
* Build the daemon using `make` command in `daemon/`
* Open the build in terminal
* Head over to the Calendar app and try adding/removing events from it.

The daemon should mention regarding the update, whether an even is added or is removed in the terminal.",True,126,https://api.github.com/repos/HaikuArchives/Calendar/pulls/126,https://github.com/HaikuArchives/Calendar/pull/126,closed,287,1,4,3,0,21,0,0,[],2022-09-05 19:18:46+00:00,2022-09-08 05:35:43+00:00,209817.0,"2 days, 10:16:57","[{'comment_id': 963101682, 'comment_body': 'Do you need this include here?', 'comment_created': datetime.datetime(2022, 9, 5, 19, 29, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 963102314, 'comment_body': ""Aren't we also interested in B_ATTR_CHANGED?"", 'comment_created': datetime.datetime(2022, 9, 5, 19, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 963102472, 'comment_body': 'No need to add a forward declaration for a type you are getting through #include ', 'comment_created': datetime.datetime(2022, 9, 5, 19, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 963103235, 'comment_body': 'This is probably not necessary and can be removed. The reason is that if there would not be a full definition of BString, you would probably get a compiler error. I think in general we like to explicitly #include <String.h>, even though it is technically not necessary as it is probably already included indirectly.\r\n\r\nJust a point about forward declarations: they work for BMessage and BDirectory, because you only use pointers to them in the class declaration below. ', 'comment_created': datetime.datetime(2022, 9, 5, 19, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 963106144, 'comment_body': 'Yes we are, but currently we are monitoring the events directory only. So, only the B_ENTRY_CREATED & B_ENTRY_REMOVED are being used.\r\n\r\n`B_ATTR_CHANGED` will be used when we are monitoring the nodes of separate events', 'comment_created': datetime.datetime(2022, 9, 5, 19, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 963106321, 'comment_body': 'Well, no `:)', 'comment_created': datetime.datetime(2022, 9, 5, 19, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 963106364, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2022, 9, 5, 19, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 963109464, 'comment_body': '> This is probably not necessary and can be removed. The reason is that if there would not be a full definition of BString, you would probably get a compiler error. I think in general we like to explicitly #include <String.h>, even though it is technically not necessary as it is probably already included indirectly.\r\n> \r\n> Just a point about forward declarations: they work for BMessage and BDirectory, because you only use pointers to them in the class declaration below.\r\n\r\nI think we do not need the forward declarations here and removing all of them does not produce any error. So I am removing all the forward declarations.', 'comment_created': datetime.datetime(2022, 9, 5, 19, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 963262595, 'comment_body': 'Could you please describe the complete and final solution you will pursue to have the daemon triggered when something changes in the events?', 'comment_created': datetime.datetime(2022, 9, 6, 5, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 963499453, 'comment_body': 'Yeah, basically we are going to node monitor the events directory as well as all the events.\r\nThe directory for checking whether any event is created or deleted, using `B_ENTRY_CREATED`, `B_ENTRY_REMOVED`, `B_ENTRY_MOVED`.\r\n\r\nWhen any event is added to the list, `AddEventToList()` will be called. It is in this function where we call for node monitor the event file for `B_ATTR_CHANGED`\r\n\r\n(Suggested by @humdingerb [here](https://github.com/HaikuArchives/Calendar/pull/123/#issuecomment-1209683906))', 'comment_created': datetime.datetime(2022, 9, 6, 9, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 963502642, 'comment_body': ""I remember the discussion, but I think we should reconsider, because I doubt it is scalable. Let's say I use Calendar a lot for both my work and private events. And let's say I have about 10 entries a day, so 3650 entries a year. I don't know if there is a limit for the number of node monitors there are, but setting it up is not free. \r\n\r\nWas the live query idea a dead end?"", 'comment_created': datetime.datetime(2022, 9, 6, 9, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 963522395, 'comment_body': ""> I remember the discussion, but I think we should reconsider, because I doubt it is scalable. Let's say I use Calendar a lot for both my work and private events. And let's say I have about 10 entries a day, so 3650 entries a year. I don't know if there is a limit for the number of node monitors there are, but setting it up is not free.\r\n\r\nYeah, this is true. But what can be done instead of monitoring all the events? We still need to update the list when the time attribute of any event is changed. \r\n\r\n> Was the live query idea a dead end?\r\n\r\nThe live query can track the creation/removal of events, but is unable to get anything for attribute changes.\r\nThe creation/removal of events can also be tracked through the node monitoring, so it doesn't provide much different utility."", 'comment_created': datetime.datetime(2022, 9, 6, 10, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 963531774, 'comment_body': ""> > Was the live query idea a dead end?\r\n> \r\n> The live query can track the creation/removal of events, but is unable to get anything for attribute changes. The creation/removal of events can also be tracked through the node monitoring, so it doesn't provide much different utility.\r\n\r\nHave you confirmed that in a test? Because that's not how I understand the documentation. Did you test it with Humdinger's notes about updating indexes?"", 'comment_created': datetime.datetime(2022, 9, 6, 10, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 963545050, 'comment_body': ""> Have you confirmed that in a test? Because that's not how I understand the documentation. Did you test it with Humdinger's notes about updating indexes?\r\n\r\nIf I understand this correctly, you are asking about querying for the events with `REMINDER_ATTR`.\r\nYes, after updating them in the index, I tested the query. It was working as expected, that is, we were able to track for event creation/removal."", 'comment_created': datetime.datetime(2022, 9, 6, 10, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 963554325, 'comment_body': ""Hi, I think Harshit's correct, that a live query doesn't suffice for our purposes. From the BeBook:\r\n\r\n> A query update message describes a single entry that has changed so that…\r\n> * it now satisfies the predicate (where it didn't use to), or…\r\n> * it no longer satisfies the predicate (where it did before).\r\n\r\nSo, if you only change some event from next Tueday at 5pm to 6pm, you' won't get a query update message.\r\n\r\nMaybe we should throw out the idea of the daemon being totally independent of the Calendar main app. After all, you cannot easily change the start/end time attributes in Tracker anyway, AFAICS.\r\n\r\nMaybe the daemon should just do a simple query (not live) for all events with a set reminder with a start time of now to 6 months in the future (I doubt Haiku has a longer uptime - otherwise one could for example do regularly re-do that query). And if the user add/removes/changes any event in the Calendar main app, have it send a message to the daemon (either with the changed event, or simply a signal to re-do the initial query)."", 'comment_created': datetime.datetime(2022, 9, 6, 10, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 963992873, 'comment_body': 'Sending a message from the Calendar app to the daemon is not a bad idea either. Also, if we set this up (for add/remove/changes) then neither node monitoring nor the live query would be required.\r\n\r\nHow do you see this, @nielx ?', 'comment_created': datetime.datetime(2022, 9, 6, 17, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 964102316, 'comment_body': 'I am not sure. I think receiving messages from the Calendar can be one way to receive updates, but we cannot always assume the Calendar is running, and potentially there is a chance that a user uses a different mechanism to add and edit entries. Furthermore, I think there might not be a guarantee that all messages arrive.\r\n\r\nMaybe the answer is in queries after all. The documentation mentions that there is an automatic `last_modified` attribute. Maybe run a live query that monitors whether there are entries that change in the future?', 'comment_created': datetime.datetime(2022, 9, 6, 19, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 965132083, 'comment_body': ""If we use the `last_modified` attribute, I think of this solution:\r\n* Have another attribute in the event, namely, `EVENT_CREATED`\r\n* The the live query predicate will look like this: `('REMINDER_ATTR' > Current Time) && ('last_modified' >= EVENT_CREATED)`\r\n\r\nDo you think this will work?\r\n"", 'comment_created': datetime.datetime(2022, 9, 7, 17, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 965209413, 'comment_body': ""So if I were to design it, I would have two separate processes:\r\n\r\n- One is to load just enough data to figure out what the next event(s) is (are) to alert for.\r\n- The other is to refresh that bit of information if there is a change of the on disk info. \r\n\r\nIf it is possible to combine those two, then that's fine, but you need to determine/try whether your approach works for that."", 'comment_created': datetime.datetime(2022, 9, 7, 19, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 965510039, 'comment_body': 'fTrashDir seens to be currently unused?', 'comment_created': datetime.datetime(2022, 9, 8, 5, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 965512686, 'comment_body': 'Yes, it is currently unused.\r\n`fTrashDir` was useful in case we are using live queries (to filter out the trashed events)\r\n\r\nBut now we will be node monitoring the events directory, so `fTrashDir` would not be used anywhere. I should remove it.', 'comment_created': datetime.datetime(2022, 9, 8, 5, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}]","[{'commit_sha': 'bc00c979a15a1dcf5a361971aaabe26c48e40d20', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f2328d1d6a57e1397fa1033a37c319d4b0f1a9', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '336b4a41b51c048b8cf169666cfa662c75cf17ff', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}]",Harshit Sharma,75475819,,User,,84,,23,61
1049626938,Saving/Loading for events and GUI Changes for Calendar,"For issue: #122 

The scope of this PR: Get the events to be saved with the Reminder as per the user's requirement

The GUI looks like this:

![EventManagerGUI Revised](https://user-images.githubusercontent.com/75475819/185587273-f3eaac88-59e8-42ac-b1b5-7f556d430a97.png)",True,127,https://api.github.com/repos/HaikuArchives/Calendar/pulls/127,https://github.com/HaikuArchives/Calendar/pull/127,closed,158,7,6,4,4,16,0,0,[],2022-09-08 07:04:16+00:00,2022-09-09 11:38:05+00:00,102829.0,"1 day, 4:33:49","[{'comment_id': 965664296, 'comment_body': ""Shouldn't the Event Window get the ordered version of the category list, with the default category at the top?"", 'comment_created': datetime.datetime(2022, 9, 8, 8, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 965729222, 'comment_body': 'This may throw if the value is out of range or not a number. Is the number enforced somewhere else?', 'comment_created': datetime.datetime(2022, 9, 8, 9, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 965729911, 'comment_body': 'please use full words, menuItem vs mI', 'comment_created': datetime.datetime(2022, 9, 8, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 965730160, 'comment_body': 'please use full words as variable names', 'comment_created': datetime.datetime(2022, 9, 8, 9, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 965737293, 'comment_body': 'Not sure if you want to pass in reminderTime when there is no reminder necessary. reminderTime is uninitialized and may contain garbage.', 'comment_created': datetime.datetime(2022, 9, 8, 9, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 965739407, 'comment_body': 'spaces around the % operator', 'comment_created': datetime.datetime(2022, 9, 8, 9, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 966161769, 'comment_body': 'reminderTime is going to contain `-1` when the reminder is not set', 'comment_created': datetime.datetime(2022, 9, 8, 16, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 966161946, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2022, 9, 8, 16, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 966162088, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 9, 8, 16, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 966175318, 'comment_body': 'Yes, for sure. I removed that for testing the list, and it got left.. Reverting it asap', 'comment_created': datetime.datetime(2022, 9, 8, 16, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 966181966, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 9, 8, 16, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 966192332, 'comment_body': ""The number isn't enforced anywhere. I think we should give this a tooltip, such as: `Enter an integer only` (?)"", 'comment_created': datetime.datetime(2022, 9, 8, 16, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 966271051, 'comment_body': 'It would be good to have a look how other apps do it. Maybe check some preferences?\r\n\r\nIf you are certain that the input only accepts numbers, you _may_ assume this call does not fail, otherwise you should try to catch any exceptions here to prevent the application from crashing.', 'comment_created': datetime.datetime(2022, 9, 8, 18, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 966272218, 'comment_body': 'Right, I can see that now. ', 'comment_created': datetime.datetime(2022, 9, 8, 18, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 966383450, 'comment_body': ""Check out TextView()'s DisallowChar();\r\nFor reference, I do something similar in Clipdinger's SettingsWindow."", 'comment_created': datetime.datetime(2022, 9, 8, 20, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'humdingerb', 'type': 'User'}, {'comment_id': 966574786, 'comment_body': ""> If you are certain that the input only accepts numbers, you may assume this call does not fail, otherwise you should try to catch any exceptions here to prevent the application from crashing.\r\n\r\n> Check out TextView()'s DisallowChar();\r\nFor reference, I do something similar in Clipdinger's SettingsWindow.\r\n\r\nThanks for the reference. Now only numbers are allowed in the `fTextReminderTime`"", 'comment_created': datetime.datetime(2022, 9, 9, 2, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}]","[{'commit_sha': '9f90c3f0536a90bfb667957173465c113bc5a70a', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a347c4e4493a4c9289aae5815fa9689dd801f0e', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c21abd67f4610439bd2e9be23128484b018fa4', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111f5c596cc2b73a6079454660389f1737bd8eec', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}]",Harshit Sharma,75475819,,User,,84,,23,61
1051950052,Querying the DB for next events,"For issue: #122 

The scope of this PR: To get the events-to-be-reminded in `fEventList` and manage it by adding/removing the events as per the requirement.",True,128,https://api.github.com/repos/HaikuArchives/Calendar/pulls/128,https://github.com/HaikuArchives/Calendar/pull/128,closed,76,20,3,9,3,6,0,0,[],2022-09-09 19:49:26+00:00,2022-09-10 19:26:29+00:00,85023.0,23:37:03,"[{'comment_id': 967531157, 'comment_body': 'Why do you use a pointer here, instead of a value member?', 'comment_created': datetime.datetime(2022, 9, 9, 23, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 967533253, 'comment_body': 'No need to initialize if you initialize it later on in your constructor.', 'comment_created': datetime.datetime(2022, 9, 9, 23, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 967587904, 'comment_body': 'Okay\r\n', 'comment_created': datetime.datetime(2022, 9, 10, 4, 28, 38, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 967587990, 'comment_body': ""There's no specific reason, we can use the fDBManager as a value member instead."", 'comment_created': datetime.datetime(2022, 9, 10, 4, 30, 13, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 967671624, 'comment_body': 'With your latest approach, do you still need to be making this public?', 'comment_created': datetime.datetime(2022, 9, 10, 16, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 967671803, 'comment_body': ""`FileToEvent()` won't be required to be public now, I should revert this to private."", 'comment_created': datetime.datetime(2022, 9, 10, 16, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}]","[{'commit_sha': '9f90c3f0536a90bfb667957173465c113bc5a70a', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a347c4e4493a4c9289aae5815fa9689dd801f0e', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23c21abd67f4610439bd2e9be23128484b018fa4', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111f5c596cc2b73a6079454660389f1737bd8eec', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b074d2b1d797e3d0ef1a527b04e939ebc3cc7c61', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8eaa05bf17046ccf6cb8f50827896aa2f6ffc10', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b690f0aa2ea60eeb1a085dfe017249ca3bc76228', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08339ab3078dbf870cf0dcf41efdbbf12c76d103', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd11a9f9ffc3a6d22f080855d7c08199cf22c35f', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}]",Harshit Sharma,75475819,,User,,84,,23,61
1052430662,BMessageRunner set up in daemon,"For issue: #122 

Scope of PR: Set up BMessageRunner to get alerts at the right time

I'm having some difficulty in setting up the BMesageRunner. It currently is not working as (I think) it is, a local variable in the constructor. And it gets destroyed when the constructor completes.
Do we need to have it as class member, or is it not necessary? Can we set it up under BApplication (Somehow?) 
It's a bit confusing as the documentation also does not provide any pointer regarding this.

Also please look at the code, am I in the right direction with this approach?",True,129,https://api.github.com/repos/HaikuArchives/Calendar/pulls/129,https://github.com/HaikuArchives/Calendar/pull/129,closed,117,10,2,6,2,17,0,0,[],2022-09-11 07:01:06+00:00,2022-09-12 21:53:56+00:00,139970.0,"1 day, 14:52:50","[{'comment_id': 967830773, 'comment_body': ""If this is only used in the CalendarDaemon, then I suggest you move it to the CPP file. I would also explicitly assign a value using a 4 character constant, like 'EvNo' to decrease the likelyhood it conflicts with something else. And up to you if you want to make it a static const uint32 instead of an enum."", 'comment_created': datetime.datetime(2022, 9, 11, 13, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 967831589, 'comment_body': ""I think you are forgetting to set the message to the MessageRunner.\r\nAlso you are leaking the notifyMessage; please create it on the stack. Also: have a look at the [BMessageRunner::StartSending()](https://www.haiku-os.org/docs/api/classBMessageRunner.html#ae161adabfc1b87ec78ee38b7563d87ef) static class method. This allows you to fire and forget sending a message, so you don't need to keep the local BMessageRunner."", 'comment_created': datetime.datetime(2022, 9, 11, 13, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 967831759, 'comment_body': 'See the remark below about leaking the BMessage and the alternative way of running BMessageRunner.', 'comment_created': datetime.datetime(2022, 9, 11, 13, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 967856578, 'comment_body': 'Done. Also made `fEventNotify` a `static const uint32`.', 'comment_created': datetime.datetime(2022, 9, 11, 16, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 967863361, 'comment_body': '> I think you are forgetting to set the message to the MessageRunner.\r\n\r\nI set up the MessageRunner in the constructor with its count value as `-1` . That means it is going to send the  `notifyMessage` infinite times (or till the MessageRunner is not destroyed). Only difference is going to be: \r\n\r\n* the data of the message will be changed everytime (which is happening on line 148, 149, 150) \r\n* the duration after which the alert is going to be sent (which is happening from `fMessageRunner->SetInterval(timeout);`)\r\n\r\n\r\n> Also you are leaking the notifyMessage; please create it on the stack.\r\n\r\nBy ""create it on the stack"", you mean make it a class member, right?\r\n\r\n\r\n> Also: have a look at the [BMessageRunner::StartSending()](https://www.haiku-os.org/docs/api/classBMessageRunner.html#ae161adabfc1b87ec78ee38b7563d87ef) static class method. This allows you to fire and forget sending a message, so you don\'t need to keep the local BMessageRunner.\r\n\r\nThat means, we can just create a BMessageRunner inside the Constructor and MessageReceived() function and we won\'t need to have the fMessageRunner as a class member?', 'comment_created': datetime.datetime(2022, 9, 11, 17, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 967892672, 'comment_body': '\r\n> > I think you are forgetting to set the message to the MessageRunner.\r\n> \r\n> I set up the MessageRunner in the constructor with its count value as `-1` . That means it is going to send the `notifyMessage` infinite times (or till the MessageRunner is not destroyed). Only difference is going to be:\r\n> \r\n> * the data of the message will be changed everytime (which is happening on line 148, 149, 150)\r\n\r\nI do not see how it will. See the [class description of BMessageRunner](https://www.haiku-os.org/docs/api/classBMessageRunner.html#details). In general, the convention is that when a function/method takes a `const` reference as a parameter, it will create a copy of it if they are expected to use it after the method/function call ends. This is, however, not enforced so you have to look in docs.\r\n\r\n> * the duration after which the alert is going to be sent (which is happening from `fMessageRunner->SetInterval(timeout);`)\r\n\r\nI see.\r\n\r\n> > Also you are leaking the notifyMessage; please create it on the stack.\r\n> \r\n> By ""create it on the stack"", you mean make it a class member, right?\r\n\r\nI am actually not technically precise, as it is not quite on the stack, but the BMessageRunner object should not be a pointer unless it has to. In C++ you really prefer to only create objects using `new` if you have to, otherwise just use value objects.\r\n\r\n> > Also: have a look at the [BMessageRunner::StartSending()](https://www.haiku-os.org/docs/api/classBMessageRunner.html#ae161adabfc1b87ec78ee38b7563d87ef) static class method. This allows you to fire and forget sending a message, so you don\'t need to keep the local BMessageRunner.\r\n> \r\n> That means, we can just create a BMessageRunner inside the Constructor and MessageReceived() function and we won\'t need to have the fMessageRunner as a class member?\r\n\r\nNo. You would probably not do this in the constructor, but in the ReadyToRun() method where you set the first alert now.\r\n', 'comment_created': datetime.datetime(2022, 9, 11, 21, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 967984389, 'comment_body': ""> I do not see how it will. See the [class description of BMessageRunner](https://www.haiku-os.org/docs/api/classBMessageRunner.html#details). In general, the convention is that when a function/method takes a const reference as a parameter, it will create a copy of it if they are expected to use it after the method/function call ends. This is, however, not enforced so you have to look in docs.\r\n\r\nYou're right. I tried to fix this. Now the `fMessageRunner` builds up everytime one alert is fired (or the list is refreshed) by using the `BMessageRunner::StartSending()`. I tested it also, it works as expected.\r\n\r\n> I am actually not technically precise, as it is not quite on the stack, but the BMessageRunner object should not be a pointer unless it has to. In C++ you really prefer to only create objects using new if you have to, otherwise just use value objects.\r\n\r\nWe cannot make the `fMessageRunner` as a value object here because :\r\nWe have to use fMessageRunner throughout the code and we have to allocate it in the constructor itself. Allocating it in the constructor will only be possible if it is a pointer (using `new`). If it is a value object we cannot initialize it in the constructor."", 'comment_created': datetime.datetime(2022, 9, 12, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 968001428, 'comment_body': 'The StartSending() is a static class method. You do not need an object to call it, you call it using the class specifier (`BMessageRunner::StartSending(...)`).\r\n\r\nAlso, you are still leaking the notifyMessage here.', 'comment_created': datetime.datetime(2022, 9, 12, 5, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 968020583, 'comment_body': '> Also, you are still leaking the notifyMessage here.\r\n\r\nMight be a silly question, but can you please elaborate what fo you mean by ""leaking"" `notifyMessage`?', 'comment_created': datetime.datetime(2022, 9, 12, 6, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 968031887, 'comment_body': 'This is C++ basics: when allocating objects on the heap using the `new` keyword, you need to free them after use using the `delete` keyword. The term used to describe who is responsible for taking care of this, is ownership. Sometimes, ownership transfers. For example, in this PR you create a new `BAlert`. BAlert takes ownership of itself when you call the `Go()` method, and makes sure it is deleted when the object is no longer used. But more often than not, functions and methods do not take ownership but just temporarily use an object.\r\n\r\nBMessageRunner does not take ownership of any message argument you pass, so you need to make sure it is cleaned up.\r\n\r\nThe easy solution here is to not use a pointer and new, and just create it on the stack.', 'comment_created': datetime.datetime(2022, 9, 12, 6, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 968106519, 'comment_body': ""> The StartSending() is a static class method. You do not need an object to call it, you call it using the class specifier (`BMessageRunner::StartSending(...)`).\r\n\r\nI think we should not use the `BMessageRunner::StartSending(...)` because of this edge case:\r\nIf the user deletes the first event in the list, it's Alert will still be sent if we only use this static method. But if we are using it as a member, then we can also cancel the deleted event's Alert."", 'comment_created': datetime.datetime(2022, 9, 12, 8, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 968186961, 'comment_body': ""You shouldn't have to use & before notifyMessage."", 'comment_created': datetime.datetime(2022, 9, 12, 9, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 968188427, 'comment_body': 'This does not work how you think it will. You are now setting up a one-off MessageRunner instance next to your own unique object. If you want to go the way of the member function, you need to delete the original and create a new one.', 'comment_created': datetime.datetime(2022, 9, 12, 9, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 968190675, 'comment_body': 'Here again you are mixing the static functions with the members.\r\nAlso, you deleted the fMessageRunner object in line 212, so you cannot access the object, though it might be the case that the compiler ignores this as technically this is the same as calling BMessageRunner::StartSending.', 'comment_created': datetime.datetime(2022, 9, 12, 9, 29, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}, {'comment_id': 968207404, 'comment_body': 'The MessageRunner takes the pointer to the message as the argument. That was, also, the reason that I made the notifyMessage a pointer', 'comment_created': datetime.datetime(2022, 9, 12, 9, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 968216640, 'comment_body': '> If you want to go the way of the member function, you need to delete the original and create a new one\r\n\r\nUnderstood and done!', 'comment_created': datetime.datetime(2022, 9, 12, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'harshit-sharma-gits', 'type': 'User'}, {'comment_id': 968964688, 'comment_body': 'Actually, the definition was updated to take const references, though the old ones are still there for compatibility. Anyway, these work and there is no more leak, so this can be considered resolved.', 'comment_created': datetime.datetime(2022, 9, 12, 21, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nielx', 'type': 'User'}]","[{'commit_sha': '7601425cf2f532e8acf8b246b633c0b59febe832', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04eac2f13dd8e85d08b1f841553dda0cc6502803', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '956914a541f9d34c6ad34e3cd2f7e6a10d2e5dbb', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc7c492cdc730ccb0193810230879b8df9b3959a', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88dedafd542358b63ea269ac53750e387284c4e4', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '430fd907642c20316d7e01b906b6c87a9da4059e', 'committer_username': 'harshit-sharma-gits', 'committer_name': 'Harshit Sharma', 'committer_email': None, 'commit_date': datetime.datetime(2020, 12, 4, 9, 32, 16, tzinfo=datetime.timezone.utc)}]",Harshit Sharma,75475819,,User,,84,,23,61

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
90836390,Calendar,HaikuArchives/Calendar,C++,20,29,23,12,187,22,1,1,"[{'id': 1060151103, 'number': 132, 'closed': datetime.datetime(2022, 9, 22, 21, 30, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 19, 11, 2, 15, tzinfo=datetime.timezone.utc), 'time_taken': 296907.0, 'time_delta': '3 days, 10:28:27', 'additions': 10, 'deletions': 1, 'state': 'closed'}, {'id': 1055907659, 'number': 131, 'closed': datetime.datetime(2022, 9, 15, 12, 56, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 14, 11, 34, 9, tzinfo=datetime.timezone.utc), 'time_taken': 91336.0, 'time_delta': '1 day, 1:22:16', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1052430662, 'number': 129, 'closed': datetime.datetime(2022, 9, 12, 21, 53, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 11, 7, 1, 6, tzinfo=datetime.timezone.utc), 'time_taken': 139970.0, 'time_delta': '1 day, 14:52:50', 'additions': 117, 'deletions': 10, 'state': 'closed'}, {'id': 1051950052, 'number': 128, 'closed': datetime.datetime(2022, 9, 10, 19, 26, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 9, 19, 49, 26, tzinfo=datetime.timezone.utc), 'time_taken': 85023.0, 'time_delta': '23:37:03', 'additions': 76, 'deletions': 20, 'state': 'closed'}, {'id': 1049626938, 'number': 127, 'closed': datetime.datetime(2022, 9, 9, 11, 38, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 7, 4, 16, tzinfo=datetime.timezone.utc), 'time_taken': 102829.0, 'time_delta': '1 day, 4:33:49', 'additions': 158, 'deletions': 7, 'state': 'closed'}, {'id': 1046796261, 'number': 126, 'closed': datetime.datetime(2022, 9, 8, 5, 35, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 19, 18, 46, tzinfo=datetime.timezone.utc), 'time_taken': 209817.0, 'time_delta': '2 days, 10:16:57', 'additions': 287, 'deletions': 1, 'state': 'closed'}, {'id': 1042662942, 'number': 125, 'closed': datetime.datetime(2022, 9, 5, 5, 26, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 17, 26, tzinfo=datetime.timezone.utc), 'time_taken': 388849.0, 'time_delta': '4 days, 12:00:49', 'additions': 32, 'deletions': 28, 'state': 'closed'}, {'id': 1042422685, 'number': 124, 'closed': datetime.datetime(2022, 8, 31, 16, 15, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 31, 13, 50, 10, tzinfo=datetime.timezone.utc), 'time_taken': 8736.0, 'time_delta': '2:25:36', 'additions': 14, 'deletions': 1, 'state': 'closed'}, {'id': 1016167893, 'number': 123, 'closed': datetime.datetime(2022, 10, 2, 5, 38, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 3, 11, 9, 24, tzinfo=datetime.timezone.utc), 'time_taken': 5164162.0, 'time_delta': '59 days, 18:29:22', 'additions': 771, 'deletions': 27, 'state': 'closed'}, {'id': 998479807, 'number': 121, 'closed': datetime.datetime(2022, 8, 1, 6, 4, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 16, 18, 48, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1336534.0, 'time_delta': '15 days, 11:15:34', 'additions': 98, 'deletions': 6, 'state': 'closed'}, {'id': 988668894, 'number': 120, 'closed': datetime.datetime(2022, 8, 1, 6, 14, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 6, 11, 22, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2227945.0, 'time_delta': '25 days, 18:52:25', 'additions': 139, 'deletions': 1, 'state': 'closed'}]"
