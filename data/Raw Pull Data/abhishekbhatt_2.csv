pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
987746760,Out of place QuadratureAdjoint for Working with StaticArrays,"Tested on PumasAI/SimpleChains.jl/pull/97 , so should be merged after it. 
NeuralODE example

```julia
using SimpleChains, StaticArrays, OrdinaryDiffEq, SciMLSensitivity, Optimization, OptimizationFlux, Plots

u0 = @SArray Float32[2.0, 0.0]
datasize = 30
tspan = (0.0f0, 1.5f0)
tsteps = range(tspan[1], tspan[2], length = datasize)

function trueODE(u, p, t)
    true_A = @SMatrix Float32[-0.1 2.0; -2.0 -0.1]
    ((u.^3)'true_A)'
end

prob = ODEProblem(trueODE, u0, tspan)
data = Array(solve(prob, Tsit5(), saveat = tsteps))

sc = SimpleChain(
                static(2),
                Activation(x -> x.^3),
                TurboDense{true}(tanh, static(50)),
                TurboDense{true}(identity, static(2))
            )

p_nn = SimpleChains.init_params(sc)

f(u,p,t) = sc(u,p)

prob_nn = ODEProblem(f, u0, tspan)

function predict_neuralode(p)
    Array(solve(prob_nn, Tsit5();p=p,saveat=tsteps,sensealg=QuadratureAdjoint(autojacvec=ZygoteVJP())))
end

function loss_neuralode(p)
    pred = predict_neuralode(p)
    loss = sum(abs2, data .- pred)
    return loss, pred
end

callback = function (p, l, pred; doplot = true)
    display(l)
    plt = scatter(tsteps, data[1,:],label=""data"")
    scatter!(plt, tsteps, pred[1,:], label = ""prediction"")
    if doplot
        display(plot(plt))
    end
    return false
end

optf = Optimization.OptimizationFunction((x,p)->loss_neuralode(x), Optimization.AutoZygote())
optprob = Optimization.OptimizationProblem(optf, p_nn)

res = Optimization.solve(optprob, ADAM(0.05),callback=callback,maxiters=300)
```",True,680,https://api.github.com/repos/SciML/SciMLSensitivity.jl/pulls/680,https://github.com/SciML/SciMLSensitivity.jl/pull/680,closed,481,69,10,33,12,29,0,0,[],2022-07-05 18:54:00+00:00,2022-08-13 10:28:27+00:00,3339267.0,"38 days, 15:34:27","[{'comment_id': 914120337, 'comment_body': 'Did you check these different cases? Does it really work with the `.=`?', 'comment_created': datetime.datetime(2022, 7, 5, 19, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 914121542, 'comment_body': ""This is the only assignment that is required for the neural ode with SArrays to work. The others are indexing on `_out` , so, won't be compatibe with SArrays anyway. Let me know if I should simplify it to just contain this assignment."", 'comment_created': datetime.datetime(2022, 7, 5, 19, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ba2tro', 'type': 'User'}, {'comment_id': 914121733, 'comment_body': 'maybe add an `@assert sensealg isa QuadratureAdjoint` if we only implement it for this case and throw an error otherwise.  ', 'comment_created': datetime.datetime(2022, 7, 5, 19, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 914122324, 'comment_body': ""we could also write it as `df(u,p,t,i)`. I think that would make it clearer that it's not mutating. "", 'comment_created': datetime.datetime(2022, 7, 5, 19, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 914123882, 'comment_body': ""do you have a test case where this is actually triggered (i.e, a continuous and a discrete cost contribution)? I'd think it makes more sense to write this part also fully non-mutating.   "", 'comment_created': datetime.datetime(2022, 7, 5, 19, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'frankschae', 'type': 'User'}, {'comment_id': 914160500, 'comment_body': 'comment that this drops diffvar_idxs because it assumes QuadratureAdjoint, or even better, put an `@assert` in here for that.', 'comment_created': datetime.datetime(2022, 7, 5, 20, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 914166112, 'comment_body': 'throw a custom error like above but with a custom error message describing that `!ArrayInterface.ismutable(u0)` types require QuadratureAdjoint. Then we should make an issue to extend it afterwards, but put a low priority on it because of the issue with parameter sizing.', 'comment_created': datetime.datetime(2022, 7, 5, 20, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 914188220, 'comment_body': 'this seems excessive, why does it have a completely separate dispatch instead of a few targeted `ArrayInterface.ismutable` checks?', 'comment_created': datetime.datetime(2022, 7, 5, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 914188729, 'comment_body': ""No it's not, it's dependent on the arguments. Did you try the other arguments?"", 'comment_created': datetime.datetime(2022, 7, 5, 20, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 914240118, 'comment_body': '```suggestion\r\n    if ArrayInterfaceCore.ismutable(eltype(sol.u))\r\n```', 'comment_created': datetime.datetime(2022, 7, 5, 22, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 914516210, 'comment_body': '```suggestion\r\n        gᵤ = isq ? λ : λ[1:idx]\r\n```\r\n\r\nNo views are required on immutables.', 'comment_created': datetime.datetime(2022, 7, 6, 7, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 914518485, 'comment_body': ""this doesn't make sense, the `dgdu` function shouldn't have an `out` argument to mutate if it's out of place."", 'comment_created': datetime.datetime(2022, 7, 6, 7, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 914520668, 'comment_body': 'why 5 instead of 3 returns?', 'comment_created': datetime.datetime(2022, 7, 6, 7, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 914741928, 'comment_body': 'Since `isq = sensealg isa QuadratureAdjoint` which is already reinforced by the `@assert`, we should just put `gᵤ =λ` here', 'comment_created': datetime.datetime(2022, 7, 6, 11, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ba2tro', 'type': 'User'}, {'comment_id': 914782320, 'comment_body': 'true, even better', 'comment_created': datetime.datetime(2022, 7, 6, 12, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 917575713, 'comment_body': 'was this a mistake?', 'comment_created': datetime.datetime(2022, 7, 11, 6, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 917576074, 'comment_body': ""There's 3 quantities this function calculates, dy, dlambda, and dgrad"", 'comment_created': datetime.datetime(2022, 7, 11, 6, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 917576460, 'comment_body': 'You want to revert the changes to this anonymous function, and just if else whether to do this one or the one below.', 'comment_created': datetime.datetime(2022, 7, 11, 6, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 917576953, 'comment_body': 'to make this work, you probably need to change the dgdu accmulation code in adjoint_common inside of the `affect!` definition', 'comment_created': datetime.datetime(2022, 7, 11, 6, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 917587502, 'comment_body': '```suggestion\r\n            ((haskey(kwargs, :callback) && has_continuous_callback(kwargs[:callback])))) ||\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 6, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ba2tro', 'type': 'User'}, {'comment_id': 917597037, 'comment_body': 'yeah, pressed `a` accidentally, thought I corrected it, but it crept in', 'comment_created': datetime.datetime(2022, 7, 11, 6, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ba2tro', 'type': 'User'}, {'comment_id': 917602719, 'comment_body': 'Oh, so its inferred as a redefinition of the first df, which is causing the tests using the first one to fail', 'comment_created': datetime.datetime(2022, 7, 11, 7, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ba2tro', 'type': 'User'}, {'comment_id': 918465402, 'comment_body': 'This is a StaticArray/SimpleChain regression test for optimization, not an adjoint test. Please add a proper adjoint test. It should probably be its own file `adjoint_oop.jl` where it similarly tests the direct and AD interfaces for gradient correctness.\r\n\r\nThis test should be a separate SimpleChains regression test.', 'comment_created': datetime.datetime(2022, 7, 12, 1, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 921433314, 'comment_body': 'Test Lotka-Volterra first. Get the easy case, then the hard case.', 'comment_created': datetime.datetime(2022, 7, 14, 17, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 925484559, 'comment_body': 'Still missing.', 'comment_created': datetime.datetime(2022, 7, 20, 11, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 925484734, 'comment_body': ""That's not good?"", 'comment_created': datetime.datetime(2022, 7, 20, 11, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 925484957, 'comment_body': 'This should be much lower, like 1e-9 or 1e-10?', 'comment_created': datetime.datetime(2022, 7, 20, 11, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}, {'comment_id': 925545212, 'comment_body': 'The tests on master are between autodiff and autodiff(different adjoint algorithms combined with different `autojacvec`s) here the tests are between autodiff and forwarddiff, so the agreement is quite low, like these on master \r\nhttps://github.com/SciML/SciMLSensitivity.jl/blob/a22e87cf6b5ecb6cee5c2c0ce0a93be3099b0d76/test/adjoint.jl#L332-L334\r\nhttps://github.com/SciML/SciMLSensitivity.jl/blob/a22e87cf6b5ecb6cee5c2c0ce0a93be3099b0d76/test/adjoint.jl#L596-L597\r\n', 'comment_created': datetime.datetime(2022, 7, 20, 12, 27, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ba2tro', 'type': 'User'}, {'comment_id': 925558073, 'comment_body': ""Thanks for pointing out that issue. I ran it locally and those match to 1e-10, so added here: https://github.com/SciML/SciMLSensitivity.jl/pull/691 . But I don't see how that would justify a high tolerance here?"", 'comment_created': datetime.datetime(2022, 7, 20, 12, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ChrisRackauckas', 'type': 'User'}]","[{'commit_sha': 'd8ea45bd2368d8605575a4da3105dc0dd3c667d5', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '966f3b767a89754ac554dd86649631c2f0cb0165', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2df07eecd622b4467317aa2fd000e72b5c37dfe3', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdde7083ca82fd52c925836681248c7a7b6bb7c3', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c067abab0cad49aa9e8593f36976fc538a59263', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5c45742e4f1be4a7c6bb2918c347b30ab1007c0', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a7722f4115f58a7ba717cfc46291419218b3cbe', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '971cea06e1b1a00d4d699036d5cbe49e69a944eb', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10843add3c7cfb5261e90c1b8a5417aa29e1b07e', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dba7422257563ce17ab807dd10c9eed578d3926', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6158ba91cb44327dc9d1b9327b22382e92114a54', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2d90fd74d82896c55205b4638299bb404a39f49', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f54125dea38709d88be474a8bb66499617e37a1', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b18f9d3bc051e5d2a78b3f47b5dbff3adaf9ef87', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '174812a4975c382f25637187155c2764513ae6f9', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04ade0d2f2cfc6ae4a6c60685cd0828f7f4042e7', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9140817984d90592306a175a3cf72a569db75fbd', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3747b471ab6783a95447a9deb221473a450b6e7', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15fadafe5370b0f6477163a6b44031a42ccc6563', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '336becf061fa474e342e1a01805be1f4ddd87e9c', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cafd9905555472c37ed48f536c909c048ce1edd', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40b7f2a8374baabe569384fa54ed2082f5dd7464', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '651759104eb291801999c2e44b278c7204f68930', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6cf65baa0ca954629a1df965b4071abf7a56a9b', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c59e9a26040ba331aeff3052b6217d95b4d1852', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd354ba79c801babe34fad29d555eec0da02e74e7', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb850e9236b0b8538fdfa73d2d9569b76c980bb8', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5971d27441866e40c5f4b7cace97302f17fc8721', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9f7ed001cc5743aab9878af1db996f6a3630106', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7c89050cfe98ce8e327454f69a9b8eb4b195307', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf07c990a3f05cb272fdefec050265b71c28bb5c', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02f1ae29b3c3a4ecd8db24ea0ef888028e6033c5', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7340ca4f76e40fd0712aa83fc3914a78f0c05d59', 'committer_username': 'ChrisRackauckas', 'committer_name': 'Christopher Rackauckas', 'committer_email': 'accounts@chrisrackauckas.com', 'commit_date': datetime.datetime(2012, 6, 4, 7, 19, 50, tzinfo=datetime.timezone.utc)}]",Abhishek Bhatt,46929125,,User,,53,,5,5
1016193436,Adjoint and Projections,"Solves a few AD related issues:

- Adjoint of SArray constructor
- SArray projected to SizedArray in pullback due to [this](https://github.com/JuliaDiff/ChainRulesCore.jl/blob/00e17d236e3c09063c5b27a52c550c841d591fd5/src/projection.jl#L230) `reshape` during pullback
- SMatrix tuple dimensions don't match the matrix dimensions when the above is fixed in [this](https://github.com/JuliaDiff/ChainRulesCore.jl/blob/00e17d236e3c09063c5b27a52c550c841d591fd5/src/projection.jl#L368) projection

Example

```julia
using Zygote
using StaticArrays

u0 = @SVector [1.0f0, 1.0f0]
p = @SVector [1.5f0, 1.0f0, 3.0f0, 1.0f0]

function lotka(u, p)
    du1 = p[1]*u[1] - p[2]*u[1]*u[2]
    du2 = -p[3]*u[2] + p[4]*u[1]*u[2]
    @SVector [du1, du2]
    # @SMatrix [du1 du2 du1; du2 du1 du1]
end

function loss(p)
    u = lotka(u0, p)
    sum(1 .- u)
end

loss(p)

grad = Zygote.gradient(loss, p)
```
```
ERROR: Need an adjoint for constructor SVector{2, Float32}. Gradient is of type SizedVector{2, Float32, Vector{Float32}}
Stacktrace:
  [1] error(s::String)
    @ Base .\error.jl:33
  [2] (::Zygote.Jnew{SVector{2, Float32}, Nothing, false})(Δ::SizedVector{2, Float32, Vector{Float32}})
    @ Zygote C:\Users\user\.julia\packages\Zygote\D7j8v\src\lib\lib.jl:326
  [3] (::Zygote.var""#1928#back#222""{Zygote.Jnew{SVector{2, Float32}, Nothing, false}})(Δ::SizedVector{2, Float32, Vector{Float32}})
    @ Zygote C:\Users\user\.julia\packages\ZygoteRules\AIbCs\src\adjoint.jl:67
  [4] Pullback
    @ C:\Users\user\.julia\packages\StaticArraysCore\gkLqH\src\StaticArraysCore.jl:106 [inlined]
  [5] (::typeof(∂(SVector{2, Float32})))(Δ::SizedVector{2, Float32, Vector{Float32}})
    @ Zygote C:\Users\user\.julia\packages\Zygote\D7j8v\src\compiler\interface2.jl:0
  [6] Pullback
    @ C:\Users\user\.julia\dev\StaticArrays\src\convert.jl:163 [inlined]
  [7] Pullback
    @ c:\Users\user\.julia\dev\buffer.jl:668 [inlined]
  [8] (::typeof(∂(lotka)))(Δ::SizedVector{2, Float32, Vector{Float32}})
    @ Zygote C:\Users\user\.julia\packages\Zygote\D7j8v\src\compiler\interface2.jl:0
  [9] Pullback
    @ c:\Users\user\.julia\dev\buffer.jl:673 [inlined]
 [10] (::typeof(∂(loss)))(Δ::Float32)
    @ Zygote C:\Users\user\.julia\packages\Zygote\D7j8v\src\compiler\interface2.jl:0
 [11] (::Zygote.var""#60#61""{typeof(∂(loss))})(Δ::Float32)
    @ Zygote C:\Users\user\.julia\packages\Zygote\D7j8v\src\compiler\interface.jl:41
 [12] gradient(f::Function, args::SVector{4, Float32})
    @ Zygote C:\Users\user\.julia\packages\Zygote\D7j8v\src\compiler\interface.jl:76
 [13] top-level scope
    @ c:\Users\user\.julia\dev\buffer.jl:679
```",False,1068,https://api.github.com/repos/JuliaArrays/StaticArrays.jl/pulls/1068,https://github.com/JuliaArrays/StaticArrays.jl/pull/1068,closed,68,3,4,5,20,5,0,0,[],2022-08-03 11:34:39+00:00,2023-12-14 16:13:55+00:00,43043956.0,"498 days, 4:39:16","[{'comment_id': 966554477, 'comment_body': 'Regardless of where these rules end up living, they should be tested with ChainRulesTestUtils and not ad-hoc via Zygote/ForwardDiff/what have you. That library does far more robust testing than most of us would think to write by hand.', 'comment_created': datetime.datetime(2022, 9, 9, 1, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 966554785, 'comment_body': 'Also, this seems a rather not minimal and domain-specific test?', 'comment_created': datetime.datetime(2022, 9, 9, 1, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 967130594, 'comment_body': 'To match what projection does for `Array`, I think this ought to use the `element` projector to correct eltype. \r\n\r\nThe CRC one also checks that the size differs only in trivial ways (i.e. size-1 trailing dimensions), otherwise errors. Sometimes this is helpful for finding bugs in AD rules. I think this will accept any shape with the right length, which most bugs will still hit... ', 'comment_created': datetime.datetime(2022, 9, 9, 14, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 967134052, 'comment_body': 'If anyone is relying on `ProjectTo(x).axes` actually containing `axes(x)`, then this will be very surprising. Maybe this `Tuple{size...}` thing ought to have a different name:\r\n\r\n```suggestion\r\n    return ChainRulesCore.ProjectTo{SArray}(; element=ChainRulesCore._eltype_projectto(T), axes=axes(x), static_size=S)\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 14, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 967140884, 'comment_body': ""What's the MWE that hits this?\r\n\r\nAnd might it be simpler just to do something like `(p::ChainRulesCore.ProjectTo{<:Tangent{<:Tuple}})(dx::SArray) = p(Tuple(dx))`, correct the type & then take the same path as other tuples?"", 'comment_created': datetime.datetime(2022, 9, 9, 14, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}]","[{'commit_sha': '80ad9ccbde09b8e4b34b5013c1ebc34c548a71e1', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2ae51bebe981395f41234bb5f676826b6ff3cb', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b80bd1e881e5407ce32d7bb21c081ea7c4d413c', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49f41844038a010c34ce8d47f21025f4f9c40a7d', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ca72fefce97b08ac98da5879b94ce70744b4a6', 'committer_username': 'ba2tro', 'committer_name': 'Abhishek Bhatt', 'committer_email': None, 'commit_date': datetime.datetime(2019, 1, 22, 13, 56, 37, tzinfo=datetime.timezone.utc)}]",Abhishek Bhatt,46929125,,User,,53,,5,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
72665210,SciMLSensitivity.jl,SciML/SciMLSensitivity.jl,Julia,71,329,19,53,3298,103,28,8,"[{'id': 1181665258, 'number': 761, 'closed': datetime.datetime(2023, 1, 1, 14, 50, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 1, 7, 26, 59, tzinfo=datetime.timezone.utc), 'time_taken': 26610.0, 'time_delta': '7:23:30', 'additions': 38, 'deletions': 0, 'state': 'closed'}, {'id': 1066089007, 'number': 736, 'closed': datetime.datetime(2022, 9, 24, 23, 13, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 24, 16, 4, 33, tzinfo=datetime.timezone.utc), 'time_taken': 25724.0, 'time_delta': '7:08:44', 'additions': 87, 'deletions': 7, 'state': 'closed'}, {'id': 987746760, 'number': 680, 'closed': datetime.datetime(2022, 8, 13, 10, 28, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 18, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3339267.0, 'time_delta': '38 days, 15:34:27', 'additions': 481, 'deletions': 69, 'state': 'closed'}, {'id': 973484092, 'number': 648, 'closed': datetime.datetime(2022, 6, 21, 21, 0, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 12, 0, 50, tzinfo=datetime.timezone.utc), 'time_taken': 32366.0, 'time_delta': '8:59:26', 'additions': 38, 'deletions': 35, 'state': 'closed'}, {'id': 971517771, 'number': 640, 'closed': datetime.datetime(2022, 7, 4, 8, 48, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 19, 16, 7, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1269612.0, 'time_delta': '14 days, 16:40:12', 'additions': 63, 'deletions': 1, 'state': 'closed'}, {'id': 971401704, 'number': 637, 'closed': datetime.datetime(2022, 6, 19, 9, 49, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 19, 4, 0, 32, tzinfo=datetime.timezone.utc), 'time_taken': 20927.0, 'time_delta': '5:48:47', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 967662924, 'number': 626, 'closed': datetime.datetime(2022, 6, 15, 4, 24, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 15, 4, 22, 38, tzinfo=datetime.timezone.utc), 'time_taken': 120.0, 'time_delta': '0:02:00', 'additions': 61, 'deletions': 61, 'state': 'closed'}, {'id': 956255763, 'number': 592, 'closed': datetime.datetime(2022, 6, 7, 13, 21, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 2, 19, 12, 17, tzinfo=datetime.timezone.utc), 'time_taken': 410981.0, 'time_delta': '4 days, 18:09:41', 'additions': 363, 'deletions': 192, 'state': 'closed'}]"
58931685,StaticArrays.jl,JuliaArrays/StaticArrays.jl,Julia,147,757,15,117,1212,198,33,31,"[{'id': 1016193436, 'number': 1068, 'closed': datetime.datetime(2023, 12, 14, 16, 13, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 3, 11, 34, 39, tzinfo=datetime.timezone.utc), 'time_taken': 43043956.0, 'time_delta': '498 days, 4:39:16', 'additions': 68, 'deletions': 3, 'state': 'closed'}]"
