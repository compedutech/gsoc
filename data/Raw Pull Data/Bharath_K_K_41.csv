pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
911452522,Implemented range and offset levels,"Adds the range level format and the coord_bounds and coord_access level functions.
cc @hameerabbasi ",True,4,https://api.github.com/repos/hameerabbasi/xsparse/pulls/4,https://github.com/hameerabbasi/xsparse/pull/4,closed,207,0,3,6,1,13,0,0,[],2022-04-17 12:25:50+00:00,2022-04-24 13:47:58+00:00,609728.0,"7 days, 1:22:08","[{'comment_id': 852208422, 'comment_body': ""This change isn't needed, we are globbing all the files anyway."", 'comment_created': datetime.datetime(2022, 4, 18, 15, 42, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 852209859, 'comment_body': 'You need both range and offset for DIA.', 'comment_created': datetime.datetime(2022, 4, 18, 15, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 852211522, 'comment_body': 'Dense is innermost, then range, then offset.', 'comment_created': datetime.datetime(2022, 4, 18, 15, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 852211868, 'comment_body': '```suggestion\r\n                static_assert(std::tuple_size_v<I> >= 1, ""Tuple size should be at least 1"");\r\n```', 'comment_created': datetime.datetime(2022, 4, 18, 15, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 852212290, 'comment_body': 'Newline missing.', 'comment_created': datetime.datetime(2022, 4, 18, 15, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 852251450, 'comment_body': 'what change is to be made here?', 'comment_created': datetime.datetime(2022, 4, 18, 16, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 852524876, 'comment_body': 'As discussed, on chat, there needs to be a newline after `#endif`.', 'comment_created': datetime.datetime(2022, 4, 19, 1, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 857092270, 'comment_body': ""```suggestion\r\n                : m_size_M(std::move(size_M))\r\n                , m_size_N(std::move(size_N))\r\n```\r\n\r\nFor optimization reasons, all fields must be initialized in the same order in which they're declared, and declared in the same order in which they're (frequently) used. Smaller fields should go on top and larger ones on the bottom."", 'comment_created': datetime.datetime(2022, 4, 24, 8, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 857092348, 'comment_body': 'This applies to all constructors and classes/structs.', 'comment_created': datetime.datetime(2022, 4, 24, 8, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 857092714, 'comment_body': 'Newline here.', 'comment_created': datetime.datetime(2022, 4, 24, 8, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 857100611, 'comment_body': 'The paper uses NxM (rows x columns) convention while referring to the dimensions of the matrix, would it be best to change the declaration and initializations to follow this convention?', 'comment_created': datetime.datetime(2022, 4, 24, 9, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 857100823, 'comment_body': 'Thanks, will do.', 'comment_created': datetime.datetime(2022, 4, 24, 10, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 857100889, 'comment_body': 'That works, yes.', 'comment_created': datetime.datetime(2022, 4, 24, 10, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}]","[{'commit_sha': '852b0425bce3dddeff31aa2509f32037a765a7ce', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93216acb3a107d96dd2ed8d88ca6899255788ee1', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e2e893e8aeb267a16373d2443d7cfdf9d3c9848', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ff6c1b8ec40145beaaa2f5af2c4a05e8b35f478', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c335696ae8a01c29fb2108099980ef1310c2ee4', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cadf0a3e8c5c020428ed92847fd4b1bdb2778163', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}]",Bharath,57562234,bharathkk0603@gmail.com,User,,30,,6,9
950235934,added singleton level + COO test,Added `singleton.hpp` to implement singleton level format and `singleton.cpp` having one test case with COO format using a compressed and a singleton level.,True,5,https://api.github.com/repos/hameerabbasi/xsparse/pulls/5,https://github.com/hameerabbasi/xsparse/pull/5,closed,174,2,4,8,3,6,0,0,[],2022-05-29 10:44:14+00:00,2022-05-31 06:45:27+00:00,158473.0,"1 day, 20:01:13","[{'comment_id': 884305779, 'comment_body': '```suggestion\r\n    std::vector<uintptr_t> const crd0{ 0, 0, 1, 1, 3, 3, 3 };\r\n    std::vector<uintptr_t> const crd1{ 0, 1, 0, 1, 0, 3, 4 };\r\n```', 'comment_created': datetime.datetime(2022, 5, 29, 18, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 884547837, 'comment_body': 'Can we test on corner cases like SIZE = 100, SIZE1 = 0 or SIZE = 1, SIZE1 = 100? Not sure about the semantics of this test but my intent is to make sure that added code works fine with whatever corner cases are possible. Thanks.', 'comment_created': datetime.datetime(2022, 5, 30, 8, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 884556460, 'comment_body': '> Can we test on corner cases like SIZE = 100, SIZE1 = 0 or SIZE = 1, SIZE1 = 100? Not sure about the semantics of this test but my intent is to make sure that added code works fine with whatever corner cases are possible. Thanks.\r\n\r\nYes that can be done, but as of now, SIZE by itself does not participate in the functions of singleton (pos_bounds and pos_access) so the value of SIZE should not affect the outcome of the test case. \r\nMaybe, I can add another test case having SIZE as 0 and SIZE1 as 100?', 'comment_created': datetime.datetime(2022, 5, 30, 8, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 884557607, 'comment_body': 'Yes I would prefer to do so. ', 'comment_created': datetime.datetime(2022, 5, 30, 8, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}, {'comment_id': 884671579, 'comment_body': ""I added a test case for a 3rd order COO format which has a compressed level followed by two singleton levels. I've used 0, 100 and 1 as edge case sizes.  "", 'comment_created': datetime.datetime(2022, 5, 30, 10, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 884672865, 'comment_body': 'Please feel free to resolve this thread.', 'comment_created': datetime.datetime(2022, 5, 30, 10, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'czgdp1807', 'type': 'User'}]","[{'commit_sha': '75f1bba03468666e13a2f9a5446ddcd58932ebe9', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6701ae80445ab9efb912c3233f12fe731cbb8f36', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5be4e40ee840812a1dfa239b3fa975784ac57b57', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed7e0c9c162b67b07b2c74a0265cdedcaa09bff', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4c47f24f32dabc836c9b0fa43537289e2322ac6', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e83f05b7702820ee7adb794a6553e84da41ac7b3', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '693c8f243b1ca71a5ad3e702ab84ad147ee55dc2', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bf79248ecc35a05b8fcd22a664e9ba1b0d0337a', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}]",Bharath,57562234,bharathkk0603@gmail.com,User,,30,,6,9
973920782,added hashed level + tests,"@hameerabbasi I have added all the functions of hashed level along with a base test case. As for the locate test case, I wasn't sure of the format of the loop, so I'll implement it after discussion although the locate function works.",True,6,https://api.github.com/repos/hameerabbasi/xsparse/pulls/6,https://github.com/hameerabbasi/xsparse/pull/6,closed,345,0,2,10,8,18,0,0,[],2022-06-21 18:07:27+00:00,2022-06-29 11:43:35+00:00,668168.0,"7 days, 17:36:08","[{'comment_id': 907618464, 'comment_body': ""@hameerabbasi this is the iterator class and for defining ++, -- and == operators, I'll need a reference to an iterator of `iterator_type`. Should I wrap the `iterator` class inside another class to get this reference through the iterator of the vector or how should I go about doing it"", 'comment_created': datetime.datetime(2022, 6, 27, 17, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 908624930, 'comment_body': '```suggestion\n                class iterator : public xtl::xbidirectional_iterator_base2<iteration_helper>\n```\n\nSo we can access all methods in the base class.\n', 'comment_created': datetime.datetime(2022, 6, 28, 15, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908626298, 'comment_body': 'Only a reference to the map needed as a member variable.', 'comment_created': datetime.datetime(2022, 6, 28, 15, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908645763, 'comment_body': 'You can directly pass the relevant map here.', 'comment_created': datetime.datetime(2022, 6, 28, 15, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908646639, 'comment_body': 'This is also needed in the constructors.', 'comment_created': datetime.datetime(2022, 6, 28, 15, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908712968, 'comment_body': 'Is it okay to remove `BaseTraits::I i` as a parameter as it is not used anywhere?', 'comment_created': datetime.datetime(2022, 6, 28, 16, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 908715668, 'comment_body': 'Is the size of type IK also needed along with `m_crd_size`?\r\n', 'comment_created': datetime.datetime(2022, 6, 28, 16, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 908747422, 'comment_body': 'Yes, remove everything but the map.', 'comment_created': datetime.datetime(2022, 6, 28, 17, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908747682, 'comment_body': ""No, that isn't needed."", 'comment_created': datetime.datetime(2022, 6, 28, 17, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908759678, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2022, 6, 28, 17, 23, 54, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 908762549, 'comment_body': '```suggestion\n                std::unordered_map<typename BaseTraits::IK, typename BaseTraits::PK>& m_map;\n```\n', 'comment_created': datetime.datetime(2022, 6, 28, 17, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908763261, 'comment_body': 'Oh, my bad, I misunderstood your question, yes, size is needed.', 'comment_created': datetime.datetime(2022, 6, 28, 17, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908803152, 'comment_body': 'This will be the maximum value of `PK` for this level, plus `1`.', 'comment_created': datetime.datetime(2022, 6, 28, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908806612, 'comment_body': ""The values of `PK` must be non-overlapping always, like they are here, and every value in the range `0..size_crd` must be present. `0` is included, `size_crd` isn't."", 'comment_created': datetime.datetime(2022, 6, 28, 18, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 908806839, 'comment_body': 'Same for all the other tests.', 'comment_created': datetime.datetime(2022, 6, 28, 18, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 909316863, 'comment_body': 'Okay, so should the `PK` values go from 0 to 3?', 'comment_created': datetime.datetime(2022, 6, 29, 7, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 909331179, 'comment_body': 'No, from 0 to 6 as here, and size_crd will be 7.', 'comment_created': datetime.datetime(2022, 6, 29, 8, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 909442708, 'comment_body': ""I've fixed the `size_crd` for all the test cases."", 'comment_created': datetime.datetime(2022, 6, 29, 10, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}]","[{'commit_sha': '912c52cf44a42f2c3573c5f09df38e1a188cbbb9', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c4cc86c3264511005a1e11155cb9ff08f2e0f1b', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f26eba8e7377a4f10cb36cb4cd144fd31cd0f23d', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf1782f9f4729d0080836f54a7037465677998cf', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcd399fd89d8e3bce02e61a7dfb50fe47f4a577d', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95b96113f9a55ead999fccf8bd42e79211eeb8c3', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f509dbcd6054c8a529d06ff2ba8519692c1c091d', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '913d2602d08773bc7dfd427afa1d4d0122a02a30', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e5a5ad9baa216918f9336cbf87c9cb5a1e64bf3', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60661f14c57701e57b351933d89015ac898c5955', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}]",Bharath,57562234,bharathkk0603@gmail.com,User,,30,,6,9
982688015,CI pass fix,Included vector and unordered map.,True,8,https://api.github.com/repos/hameerabbasi/xsparse/pulls/8,https://github.com/hameerabbasi/xsparse/pull/8,closed,3,0,1,1,0,0,0,0,[],2022-06-29 14:33:16+00:00,2022-06-29 15:52:23+00:00,4747.0,1:19:07,[],"[{'commit_sha': '6e2ce701da79f09243440bc51ecef5e59ef4ba48', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}]",Bharath,57562234,bharathkk0603@gmail.com,User,,30,,6,9
987631570,Add Append Capability to Compressed Level + Test,"@hameerabbasi I've implemented the 4 append functions applicable to compressed level. I wasn't exactly sure of the format of the test case so I've just included all the functions for a base-case, I can add more test cases with other other levels once the format is finalized.",True,9,https://api.github.com/repos/hameerabbasi/xsparse/pulls/9,https://github.com/hameerabbasi/xsparse/pull/9,closed,260,32,8,12,3,9,0,0,[],2022-07-05 16:36:23+00:00,2022-07-17 09:04:01+00:00,1009658.0,"11 days, 16:27:38","[{'comment_id': 921427594, 'comment_body': '```suggestion\r\n    CHECK(l1 == SIZE1);\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 17, 52, 55, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 921428736, 'comment_body': ""This seems incorrect, but in any case I'd remove this function (and the `sized` property) from `hashed`, it doesn't possess it with our implementation."", 'comment_created': datetime.datetime(2022, 7, 14, 17, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 921429464, 'comment_body': '```suggestion\r\n            CHECK(l1 * SIZE2 + l2 == p2);\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 17, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 921429696, 'comment_body': '```suggestion\r\n        CHECK(l2 == SIZE2);\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 17, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 921430027, 'comment_body': '```suggestion\r\n    CHECK(l1 == SIZE1);\r\n```', 'comment_created': datetime.datetime(2022, 7, 14, 17, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 922093025, 'comment_body': 'Okay, so do I remove `insert_edges` and `m_crd_size` from hashed?', 'comment_created': datetime.datetime(2022, 7, 15, 11, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 922143290, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2022, 7, 15, 13, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 922327997, 'comment_body': 'How do we show the size function of dense level in this test?', 'comment_created': datetime.datetime(2022, 7, 15, 16, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 922392663, 'comment_body': 'That is usually needed only when iterating. You calculate the size of sized levels by passing the amount of inserted coordinates in the last level.', 'comment_created': datetime.datetime(2022, 7, 15, 17, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}]","[{'commit_sha': '5dad3fcd4cd6e2cb8d9d7ba4f8eb92b89aac3b04', 'committer_username': 'hameerabbasi', 'committer_name': 'Hameer Abbasi', 'committer_email': None, 'commit_date': datetime.datetime(2012, 8, 21, 15, 48, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e2ce701da79f09243440bc51ecef5e59ef4ba48', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8e9a32acb028dbf354a1a093cd4c8ff7d17ca9d', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5740639a2871074350e33302490bd1eaa1255e0a', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '573be7f7ae5f276a87375e974adfb1b55ad002e5', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78f9b2ccfebf9f3bcd677c4a91e40369558ac98c', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a69466e38c3b989e9c38b9cde2dcc9fbf6b9f8b', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eff2e66656d6503cfa51ca3980041cf653677a61', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae479641891329867a6b3ddfe66d43b166795381', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916a48935b7381dd2152d59634af675dc893cbf2', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3180b9e9828ff9d15a56a4b78c6c554d0a886899', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e35895f48d69a36a774ae16dc789987bc8db98cc', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}]",Bharath,57562234,bharathkk0603@gmail.com,User,,30,,6,9
995774353,Add Level properties,@hameerabbasi I've added the base classes for properties with each level inheriting their properties (optional ones too for now).,True,10,https://api.github.com/repos/hameerabbasi/xsparse/pulls/10,https://github.com/hameerabbasi/xsparse/pull/10,closed,0,0,0,0,3,0,0,0,[],2022-07-13 17:39:43+00:00,2022-08-10 04:18:59+00:00,2371156.0,"27 days, 10:39:16",[],[],Bharath,57562234,bharathkk0603@gmail.com,User,,30,,6,9
999112816,Add Level Properties + Container Traits,"I've added the `container_traits` for `vector`, `set` & `unordered_map`. If the template parameters look good, we can get the levels to inherit from these container traits.",True,11,https://api.github.com/repos/hameerabbasi/xsparse/pulls/11,https://github.com/hameerabbasi/xsparse/pull/11,closed,179,140,11,12,19,3,0,0,[],2022-07-18 09:21:12+00:00,2022-07-25 17:05:05+00:00,632633.0,"7 days, 7:43:53","[{'comment_id': 924134419, 'comment_body': 'The templates here will be `TVec`, `TSet` and `TMap`, defaulting to the (unordered) `std` versions.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 924164775, 'comment_body': 'Done. Should we now inherit from `container_traits` for every level?', 'comment_created': datetime.datetime(2022, 7, 19, 7, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 924209561, 'comment_body': 'No need for this variant.', 'comment_created': datetime.datetime(2022, 7, 19, 8, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}]","[{'commit_sha': '8034de6eab44d7c4180da3651182755a7f9aa252', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f71e808d2fd0a9378d3cadcfe8407a687d5aaf03', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '162311bc7555eaea73a3a5a3735ac55ca176bf6d', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '878a954adf01eb4b5e4c364b52bc3d71ee8c899a', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13cc65bc11e197a70dcdd3722d07012697742b5c', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6e083b610bdba5e9068d2f4ecf83b7ec731b375', 'committer_username': 'hameerabbasi', 'committer_name': 'Hameer Abbasi', 'committer_email': None, 'commit_date': datetime.datetime(2012, 8, 21, 15, 48, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e7fc9e02852c72a5beccaa4f9d1ae8c3836e8d9', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbbc3ecb9fb9514b8408aaf3088546df5c63f490', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25901dcb1948b96096987b00e61b1d8ee9f520ab', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9a9e25bf2501644b366e14f080a5338d9548938', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b65fa28e5b926864345af419311ee3c6d90e0c38', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c78cde826993f1595f0086d1b986afe1b57c444', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}]",Bharath,57562234,bharathkk0603@gmail.com,User,,30,,6,9
1022619585,Add Level Properties,Added the level properties for each level along with `static_assert` for mandatory properties.,True,12,https://api.github.com/repos/hameerabbasi/xsparse/pulls/12,https://github.com/hameerabbasi/xsparse/pull/12,closed,180,67,11,3,1,1,0,0,[],2022-08-10 12:05:46+00:00,2022-08-11 12:31:54+00:00,87968.0,"1 day, 0:26:08","[{'comment_id': 943389539, 'comment_body': '```suggestion\r\n            static_assert(!LevelProperties::is_branchless);\r\n            static_assert(LevelProperties::is_compact);\r\n```\r\n\r\nSame pattern everywhere else.', 'comment_created': datetime.datetime(2022, 8, 11, 11, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}]","[{'commit_sha': '2f261570a1ac0bf1da1f6f71ef68ebc626a73f5e', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49c0373a68f75b8bf37371edc9dd4f3313d83996', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8e8d3b63aa9946b4c023deabcdd5e9d9d14433b', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}]",Bharath,57562234,bharathkk0603@gmail.com,User,,30,,6,9
1030233989,Add iterator merge,"@hameerabbasi, I've written the merge function which outputs a compressed level...I'm working on intersection and union loops, should they also be functions in this file? ",True,13,https://api.github.com/repos/hameerabbasi/xsparse/pulls/13,https://github.com/hameerabbasi/xsparse/pull/13,closed,475,7,8,21,23,58,0,0,[],2022-08-18 16:59:08+00:00,2022-10-22 15:11:26+00:00,5609538.0,"64 days, 22:12:18","[{'comment_id': 967248402, 'comment_body': '```suggestion\r\n    class Coiterate<IK, PK, std::tuple<Levels&...>>\r\n```\r\n\r\nYou can get `iter_helper` from inside the levels.', 'comment_created': datetime.datetime(2022, 9, 9, 16, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 967248895, 'comment_body': 'Additionally we only need a reference.', 'comment_created': datetime.datetime(2022, 9, 9, 16, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 967249219, 'comment_body': '```suggestion\r\n            std::tuple<Levels&...> levelsTuple;\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 16, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 967249596, 'comment_body': 'We only need this for the ones we co-iterate over, not the ones we locate over.', 'comment_created': datetime.datetime(2022, 9, 9, 16, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 967251073, 'comment_body': ""Nice! I'll need to look into `std::apply`. I would change the argument name, it can get confusing with two `min`s."", 'comment_created': datetime.datetime(2022, 9, 9, 16, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 967251428, 'comment_body': '```suggestion\r\n                    std::tuple<std::optional<PK>> vec;\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 16, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 967251789, 'comment_body': 'Make `IK` and `PK` template parameters.', 'comment_created': datetime.datetime(2022, 9, 9, 16, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 967268416, 'comment_body': ""But I'm not sure how we are going to get the required IKs and PKs for the level since `iter_helper` takes in `(std::make_tuple(previous IKs...), previous P)` as arguments. This might differ for different levels right?"", 'comment_created': datetime.datetime(2022, 9, 9, 16, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 967268984, 'comment_body': 'Will do!', 'comment_created': datetime.datetime(2022, 9, 9, 16, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 978967992, 'comment_body': 'This should be in `iterator`', 'comment_created': datetime.datetime(2022, 9, 23, 18, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 978968127, 'comment_body': 'As should this.', 'comment_created': datetime.datetime(2022, 9, 23, 18, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 978969467, 'comment_body': ""This shouldn't be stored I believe, we just need to initialise the iteration helpers once in `iterator`. If not possible, please move it to `iterator`."", 'comment_created': datetime.datetime(2022, 9, 23, 18, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 978970822, 'comment_body': ""I'm not entirely sure what this function is supposed to do... Maybe provide a comment?"", 'comment_created': datetime.datetime(2022, 9, 23, 18, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 978975457, 'comment_body': 'Descriptive argument names would be nice.', 'comment_created': datetime.datetime(2022, 9, 23, 18, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 978976187, 'comment_body': 'I see you figured out `std::tie`! Good work!', 'comment_created': datetime.datetime(2022, 9, 23, 18, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 978978581, 'comment_body': '```suggestion\r\n                    !(*this != other)\r\n```', 'comment_created': datetime.datetime(2022, 9, 23, 18, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 978979999, 'comment_body': 'I think this can also be converted to an apply, which generates a tuple of booleans, and unpack that tuple and feed it to `m_comparisonHelper`.', 'comment_created': datetime.datetime(2022, 9, 23, 18, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 978982874, 'comment_body': 'I think maybe this will help here: https://stackoverflow.com/a/58545993', 'comment_created': datetime.datetime(2022, 9, 23, 18, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 978986218, 'comment_body': 'This should be done in `++`, dereferencing should be a `const` operation.', 'comment_created': datetime.datetime(2022, 9, 23, 19, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 979274016, 'comment_body': ""@hameerabbasi If this is inside `iterator`, then do we need to pass these to `iterator`'s constructor as parameters? Because right now we are getting them from `coiteration_helper`'s constructor...\r\n"", 'comment_created': datetime.datetime(2022, 9, 24, 16, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 979277179, 'comment_body': ""That's correct."", 'comment_created': datetime.datetime(2022, 9, 24, 17, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 979278331, 'comment_body': 'Actually, no. It should be the `IK`s you get out of the beginning of each iterator.', 'comment_created': datetime.datetime(2022, 9, 24, 17, 24, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 979278478, 'comment_body': ""I don't think it needs to be stored either. Unless you mean `IKM1`?"", 'comment_created': datetime.datetime(2022, 9, 24, 17, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 996476987, 'comment_body': 'This should be reversed, and you should calculate `!=` this way, and reverse that to get `==`.', 'comment_created': datetime.datetime(2022, 10, 16, 18, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 996572846, 'comment_body': 'Yeah, and also the operators need to be `const` so that was an issue as well.', 'comment_created': datetime.datetime(2022, 10, 17, 2, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 998579289, 'comment_body': ""Let's move this out into `CoIterate`."", 'comment_created': datetime.datetime(2022, 10, 18, 18, 29, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998579574, 'comment_body': 'Same here.', 'comment_created': datetime.datetime(2022, 10, 18, 18, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998580291, 'comment_body': ""Let's remove this, we can co-iterate over one level just fine."", 'comment_created': datetime.datetime(2022, 10, 18, 18, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998580666, 'comment_body': ""Let's add an exception if the size of all the levels passed in isn't the same."", 'comment_created': datetime.datetime(2022, 10, 18, 18, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998580960, 'comment_body': 'This still needs addressing.', 'comment_created': datetime.datetime(2022, 10, 18, 18, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998581879, 'comment_body': ""Let's just have `CoIterate`, don't know why we need the helper class at all."", 'comment_created': datetime.datetime(2022, 10, 18, 18, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998583804, 'comment_body': 'This should be obtained automatically, be dereferencing all non-end iterators and finding the min. No need to take it as an argument to the ctor.', 'comment_created': datetime.datetime(2022, 10, 18, 18, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998585427, 'comment_body': 'These need reversing as discussed.', 'comment_created': datetime.datetime(2022, 10, 18, 18, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998585525, 'comment_body': 'So does this.', 'comment_created': datetime.datetime(2022, 10, 18, 18, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998586532, 'comment_body': ""Let's store the iter_helpers of levels as a class variable in `CoIterate`."", 'comment_created': datetime.datetime(2022, 10, 18, 18, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998589030, 'comment_body': 'We should just store the tuple of iter helpers of all inner levels. Store the refs to the levels in `CoIterate`, and the iter helpers (non-ref) here.', 'comment_created': datetime.datetime(2022, 10, 18, 18, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 998590173, 'comment_body': 'There is a memory bug here -- We need an actual, scoped iter_helper, store those as well in the coiteration_helper.', 'comment_created': datetime.datetime(2022, 10, 18, 18, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 999613868, 'comment_body': ""PKM1 and I should be inside the coiteration helper.\n\nIdeally I'd like coiterate to take levels and helper to take PKM1 and I."", 'comment_created': datetime.datetime(2022, 10, 19, 15, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 999630216, 'comment_body': ""Oh yeah, sorry I missed that, I'll make the change."", 'comment_created': datetime.datetime(2022, 10, 19, 15, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 999644671, 'comment_body': '@hameerabbasi but if we move PKM1 and I inside the helper class, then we would also need to pass an instance of the outer `Coiterate` since we need the tuple of levels to create the `iter_helpers` tuple. Would that be okay?', 'comment_created': datetime.datetime(2022, 10, 19, 15, 45, 53, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 999660629, 'comment_body': 'Yes, that is desired behaviour. You will have a iter_helper method on Coiterator which should take I and PKM1 and produce a coiteration_helper.', 'comment_created': datetime.datetime(2022, 10, 19, 15, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1000843554, 'comment_body': 'Please move this to `CoIterate`', 'comment_created': datetime.datetime(2022, 10, 20, 16, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1000846962, 'comment_body': 'This still needs addressing.\n\nApplying `!=` to the individual iterators and passing it through `f` gives us the result of the `!=` operator.\n\nFlipping that gives us the result of `==`.\n\nThe logic needs to be flipped here.', 'comment_created': datetime.datetime(2022, 10, 20, 16, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1000847820, 'comment_body': ""Let's replace this by the first int."", 'comment_created': datetime.datetime(2022, 10, 20, 16, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1000851913, 'comment_body': 'Should I move the `comparisonHelper` to Coiterate?', 'comment_created': datetime.datetime(2022, 10, 20, 16, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 1000854514, 'comment_body': 'Should I replace this with the smallest int `INT_MIN`?\r\n', 'comment_created': datetime.datetime(2022, 10, 20, 16, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 1000859902, 'comment_body': 'Yes.', 'comment_created': datetime.datetime(2022, 10, 20, 16, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1000860758, 'comment_body': 'I mean the first integer in the tuple. Numeric limits might not work for BigInts and so on.', 'comment_created': datetime.datetime(2022, 10, 20, 16, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1000862244, 'comment_body': 'Oh, but that would again cause us to dereference the end iterator to get the first IK.', 'comment_created': datetime.datetime(2022, 10, 20, 16, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 1000866870, 'comment_body': 'Ah, ignore in that case.\n\nCalculate IK only in begin and advance if possible.', 'comment_created': datetime.datetime(2022, 10, 20, 16, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1002444899, 'comment_body': 'Can this perhaps be replaced by a fold expression?', 'comment_created': datetime.datetime(2022, 10, 22, 11, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1002445180, 'comment_body': ""I'd replace with `std::invalid_argument`."", 'comment_created': datetime.datetime(2022, 10, 22, 11, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1002445405, 'comment_body': 'Any statement after a `return` will never be executed.', 'comment_created': datetime.datetime(2022, 10, 22, 11, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1002446072, 'comment_body': 'Ignore this one -- GitHub formatting is weird on mobile.', 'comment_created': datetime.datetime(2022, 10, 22, 11, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1002480960, 'comment_body': 'Fold expressions for the arguments of the function?\r\n', 'comment_created': datetime.datetime(2022, 10, 22, 13, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 1002480989, 'comment_body': ""Yeah, I'll do that."", 'comment_created': datetime.datetime(2022, 10, 22, 13, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}, {'comment_id': 1002497373, 'comment_body': ""If it's not easily done, let's ignore it for now."", 'comment_created': datetime.datetime(2022, 10, 22, 14, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hameerabbasi', 'type': 'User'}, {'comment_id': 1002501379, 'comment_body': 'Okay!', 'comment_created': datetime.datetime(2022, 10, 22, 14, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'bharath2438', 'type': 'User'}]","[{'commit_sha': 'b77af409607126ef324b566e61b029141b01b1dc', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b1c0c5e0d6b634cd5eacc7902a01abe68f4307d', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee8b5f8221a4da4a21c3f41c77577a7664c8632e', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2ad52b4b83e5bc6a6dc839e0d6759fef4dcde3', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b0f3a965be9fc3e5bdd2e7ea62275849ef82ebe', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76dcc722faccdb584ee10d3bcb613358420829dc', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad7cf4513bdbe718558480385893e1a079921579', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c24559d46925de0ea65cba0a33fe16fcf7f86d7d', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35ea5fa45bc6c7fd36ea1198332f28bc2601a018', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fdc996c6631a3e8d8b26c237a7f6cc33fae6d12', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '219408ba0ed187090bf2bd5ab8ecbbfc683972a6', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21fc1d944ec084a9b9f40443a1783784358c0ed7', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32300cb7776cc26e3acae998cd2a116f3c29f6b9', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbafb77acdf63f3e5a632df43a592737b776a2eb', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6400c29f49441236d1a66fcdf7b5f5b9d4ff9766', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38cb5aa67f1b7b714758ba0ee1f882e4d8fd454e', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ce33a3e52dd11548a016633e2ece2d28707a2d', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '033ccda23261c490b3033d2287751f624c136847', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a276bfb169ece1bd168fbd784a9097e37f2fadee', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47e3bf0301d6604446c01d62790013b781532f80', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '701045cf8da6948f6e21e7f78d75b88bd0e0dbf1', 'committer_username': 'bharath2438', 'committer_name': 'Bharath', 'committer_email': 'bharathkk0603@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 12, 16, 20, tzinfo=datetime.timezone.utc)}]",Bharath,57562234,bharathkk0603@gmail.com,User,,30,,6,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
365144269,xsparse,hameerabbasi/xsparse,C++,6,9,5,17,143,4,4,1,"[{'id': 1030233989, 'number': 13, 'closed': datetime.datetime(2022, 10, 22, 15, 11, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 18, 16, 59, 8, tzinfo=datetime.timezone.utc), 'time_taken': 5609538.0, 'time_delta': '64 days, 22:12:18', 'additions': 475, 'deletions': 7, 'state': 'closed'}, {'id': 1022619585, 'number': 12, 'closed': datetime.datetime(2022, 8, 11, 12, 31, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 12, 5, 46, tzinfo=datetime.timezone.utc), 'time_taken': 87968.0, 'time_delta': '1 day, 0:26:08', 'additions': 180, 'deletions': 67, 'state': 'closed'}, {'id': 999112816, 'number': 11, 'closed': datetime.datetime(2022, 7, 25, 17, 5, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 9, 21, 12, tzinfo=datetime.timezone.utc), 'time_taken': 632633.0, 'time_delta': '7 days, 7:43:53', 'additions': 179, 'deletions': 140, 'state': 'closed'}, {'id': 995774353, 'number': 10, 'closed': datetime.datetime(2022, 8, 10, 4, 18, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 13, 17, 39, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2371156.0, 'time_delta': '27 days, 10:39:16', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 987631570, 'number': 9, 'closed': datetime.datetime(2022, 7, 17, 9, 4, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 16, 36, 23, tzinfo=datetime.timezone.utc), 'time_taken': 1009658.0, 'time_delta': '11 days, 16:27:38', 'additions': 260, 'deletions': 32, 'state': 'closed'}, {'id': 982688015, 'number': 8, 'closed': datetime.datetime(2022, 6, 29, 15, 52, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 29, 14, 33, 16, tzinfo=datetime.timezone.utc), 'time_taken': 4747.0, 'time_delta': '1:19:07', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 973920782, 'number': 6, 'closed': datetime.datetime(2022, 6, 29, 11, 43, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 18, 7, 27, tzinfo=datetime.timezone.utc), 'time_taken': 668168.0, 'time_delta': '7 days, 17:36:08', 'additions': 345, 'deletions': 0, 'state': 'closed'}, {'id': 950235934, 'number': 5, 'closed': datetime.datetime(2022, 5, 31, 6, 45, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 29, 10, 44, 14, tzinfo=datetime.timezone.utc), 'time_taken': 158473.0, 'time_delta': '1 day, 20:01:13', 'additions': 174, 'deletions': 2, 'state': 'closed'}, {'id': 911452522, 'number': 4, 'closed': datetime.datetime(2022, 4, 24, 13, 47, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 17, 12, 25, 50, tzinfo=datetime.timezone.utc), 'time_taken': 609728.0, 'time_delta': '7 days, 1:22:08', 'additions': 207, 'deletions': 0, 'state': 'closed'}]"
