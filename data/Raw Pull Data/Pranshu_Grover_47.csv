pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1021607718,CloudEvents Mapper,"Validates and Maps incoming Structured CloudEvents to Ditto Protocol for JSON as well as ```base64``` encoded String.

Fixes: #1393
Fixes: #1394",True,1437,https://api.github.com/repos/eclipse-ditto/ditto/pulls/1437,https://github.com/eclipse-ditto/ditto/pull/1437,closed,453,1,3,39,3,80,0,0,[],2022-08-09 14:37:24+00:00,2022-09-13 15:16:08+00:00,3026324.0,"35 days, 0:38:44","[{'comment_id': 946508269, 'comment_body': 'Those static variables are not used - so they be removed again.', 'comment_created': datetime.datetime(2022, 8, 16, 8, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946509704, 'comment_body': 'What is the reason you configure this content-type ""blocklist"" for the CloudEventsMapper?\r\nThat means that messages e.g. processed from Eclipse Hono are not processed by this mapper.\r\n\r\nI don\'t think that makes sense for this mapper.', 'comment_created': datetime.datetime(2022, 8, 16, 8, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946510059, 'comment_body': 'Those static variables are never used.', 'comment_created': datetime.datetime(2022, 8, 16, 8, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946511223, 'comment_body': '* why is this method public? it should be private\r\n* `UnsupportedEncodingException` is not thrown by this method - can be removed', 'comment_created': datetime.datetime(2022, 8, 16, 8, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946514377, 'comment_body': 'Why is this validation of the payload so complicated?\r\n* you create a Map\r\n* you iterate over the JsonObject and add all of its values to the map\r\n* and explicitly check for `null` for specific keys\r\n\r\nWhy not just use the `JsonObject`\'s getter for checking for presence of the fields, e.g.:\r\n```java\r\njsonObject.getValue(""specversion"").isPresent()\r\n```\r\n\r\nHere you would probably want to use the defined string constants which are not used.', 'comment_created': datetime.datetime(2022, 8, 16, 8, 59, 43, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946526370, 'comment_body': 'please replace `.orElse(null)` with just `.get()` of the Optional API', 'comment_created': datetime.datetime(2022, 8, 16, 9, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946527476, 'comment_body': 'when `""data""` is not in the JSON, this will throw an exception.\r\nPlease handle that more explicitly (e.g. as another ""if"" cause).', 'comment_created': datetime.datetime(2022, 8, 16, 9, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946530491, 'comment_body': 'Please handle the exception instead of just printing it to `STDERR`.\r\nBuild and throw a `MessageMappingFailedException` which is defined to be throwed in the interface the mapper implements.', 'comment_created': datetime.datetime(2022, 8, 16, 9, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946530854, 'comment_body': 'this variable can and should be `final`', 'comment_created': datetime.datetime(2022, 8, 16, 9, 16, 31, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946531029, 'comment_body': 'this variable can and should be `final`', 'comment_created': datetime.datetime(2022, 8, 16, 9, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946532213, 'comment_body': 'this variable can and should be `final`', 'comment_created': datetime.datetime(2022, 8, 16, 9, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946533280, 'comment_body': 'this variable can and should be `final`', 'comment_created': datetime.datetime(2022, 8, 16, 9, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946535757, 'comment_body': ""You can't return `null` here - all our APIs are marked to return non-null values.\r\n\r\nReturn an empty list, e.g. with `return Collections.emptyList();`"", 'comment_created': datetime.datetime(2022, 8, 16, 9, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946537546, 'comment_body': 'So the outbound CloudEvents mapping is not part of this PR?\r\nI don\'t think that it is a good idea to split that up.\r\n\r\nBecause if we merge this PR, this functionality will be in the code - while only half of the ""CloudEvents"" mapping functionality is present.\r\n\r\nPlease also provide the outbound CloudEvent mapping as part of this PR.', 'comment_created': datetime.datetime(2022, 8, 16, 9, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946538287, 'comment_body': 'Please put the copyright header above the package declaration.', 'comment_created': datetime.datetime(2022, 8, 16, 9, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946539405, 'comment_body': 'Please use the Java multiline strings for defining the test JSON payloads, e.g.:\r\n```java\r\nString testPayload = """"""\r\n          {\r\n            ""foo"":""bar""\r\n          }\r\n          """""";\r\n```', 'comment_created': datetime.datetime(2022, 8, 16, 9, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946539779, 'comment_body': 'Please use the Java multiline strings for defining the test JSON payloads', 'comment_created': datetime.datetime(2022, 8, 16, 9, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946539842, 'comment_body': 'Please use the Java multiline strings for defining the test JSON payloads', 'comment_created': datetime.datetime(2022, 8, 16, 9, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946540069, 'comment_body': 'Please use the Java multiline strings for defining the test JSON payloads', 'comment_created': datetime.datetime(2022, 8, 16, 9, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 946540129, 'comment_body': 'Please use the Java multiline strings for defining the test JSON payloads', 'comment_created': datetime.datetime(2022, 8, 16, 9, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962929423, 'comment_body': 'constant identifiers in Java should be in uppercase, so please change to e.g. `CONTENT_TYPE`', 'comment_created': datetime.datetime(2022, 9, 5, 13, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962938730, 'comment_body': 'please remove that comment', 'comment_created': datetime.datetime(2022, 9, 5, 14, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962938869, 'comment_body': 'Please remove those comments', 'comment_created': datetime.datetime(2022, 9, 5, 14, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962940957, 'comment_body': 'please move private methods below public ones', 'comment_created': datetime.datetime(2022, 9, 5, 14, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962941304, 'comment_body': 'those 2 lines can be combined in \r\n```suggestion\r\n    return new String(messageByte);\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 14, 3, 37, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962941737, 'comment_body': 'please move package private methods below public ones, above private methods', 'comment_created': datetime.datetime(2022, 9, 5, 14, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962941994, 'comment_body': 'the `payload` param should be `final`', 'comment_created': datetime.datetime(2022, 9, 5, 14, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962942817, 'comment_body': 'simplify to:\r\n```suggestion\r\n    return jsonObject.getValue(SPECVERSION).isPresent() && \r\n            jsonObject.getValue(TYPE).isPresent() && \r\n            jsonObject.getValue(ID).isPresent() && \r\n            jsonObject.getValue(SOURCE).isPresent();\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 14, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962944620, 'comment_body': 'please choose a better method name ..\r\nwhat is checked here? if the passed payload is\r\na) a JsonObject\r\nb) contains CloudEvent fields expected in ""structured"" format\r\n\r\nso maybe: `isStructuredCloudEvent()` ?', 'comment_created': datetime.datetime(2022, 9, 5, 14, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962944916, 'comment_body': 'put private methods below public ones', 'comment_created': datetime.datetime(2022, 9, 5, 14, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962945251, 'comment_body': 'remove `throws Exception` - this is too unspecific', 'comment_created': datetime.datetime(2022, 9, 5, 14, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962946044, 'comment_body': 'reuse a variable for the optional instead of creating it twice:\r\n```suggestion\r\n    final Optional<String> base64Opt = payloadJson.getValue(""data_base64"");\r\n    if (base64Opt.isPresent()) {\r\n      final String base64Data = base64Opt.get().asString();\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 14, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962946740, 'comment_body': '```suggestion\r\n      return DittoJsonException.wrapJsonRuntimeException(\r\n          () -> ProtocolFactory.jsonifiableAdaptableFromJson(newObject(decodedData)));\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 14, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962947202, 'comment_body': 'Same here - please reuse the same `Optional` variable', 'comment_created': datetime.datetime(2022, 9, 5, 14, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962948115, 'comment_body': ""Don't throw a checked and unspecific `Exception` here.\r\nInstead e.g. throw a `MessageMappingFailedException` here."", 'comment_created': datetime.datetime(2022, 9, 5, 14, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962948913, 'comment_body': '* this method can be private\r\n* place private methods below public ones\r\n* the name is too unspecific - check the headers for what?', 'comment_created': datetime.datetime(2022, 9, 5, 14, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962950198, 'comment_body': 'please use `containsKey` instead of checking for `null`.\r\nCan also be simplified a lot to:\r\n```suggestion\r\n    final Map<String, String> headers = message.getHeaders();\r\n    return message.getHeaders().containsKey(CE_ID) && \r\n            headers.containsKey(CE_SOURCE) && \r\n            headers.containsKey(CE_TYPE) && \r\n            headers.containsKey(CE_SPECVERSION);\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 14, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962951504, 'comment_body': '`message.findContentType().get()` - you are accessing an `Optional` contentType with `.get()` which will throw an exception if there is no content type available.\r\nPlease fix.', 'comment_created': datetime.datetime(2022, 9, 5, 14, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962952713, 'comment_body': 'You should not just catch *any*  exception and replace it with another - that way the root ""cause"" will be lost.\r\nBuild and throw a new MessageMappingFailedException with the catched exception as `cause`.', 'comment_created': datetime.datetime(2022, 9, 5, 14, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962953422, 'comment_body': 'this is no constant, please name the variable with lowercase letters', 'comment_created': datetime.datetime(2022, 9, 5, 14, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962953574, 'comment_body': 'the parameter should be `final`', 'comment_created': datetime.datetime(2022, 9, 5, 14, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962955606, 'comment_body': 'please don\'t initialize Maps like this, this is an anti-pattern\r\n\r\n> Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to memory leaks if the anonymous inner class is returned and held by other objects. Even when there’s no leak, DBI is so obscure that it’s bound to confuse most maintainers.\r\n\r\nInstead, just use a `JsonObjectBuilder` for building a new JsonObject:\r\n```java\r\nfinal JsonObject externalMessageObject = JsonObject.newBuilder()\r\n            .set(""data"", dataObject)\r\n            .set(...)\r\n            .build();\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 14, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962956133, 'comment_body': ""why don't you use constants here? but at another place in the mapper you do for the same identifiers"", 'comment_created': datetime.datetime(2022, 9, 5, 14, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962956543, 'comment_body': 'this method is not used - can be removed', 'comment_created': datetime.datetime(2022, 9, 5, 14, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962957030, 'comment_body': 'Please undo any changes made to this file - you only reformatted the code but did not change anything.', 'comment_created': datetime.datetime(2022, 9, 5, 14, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962957456, 'comment_body': 'Still open: copyright header must be placed above the package declaration.', 'comment_created': datetime.datetime(2022, 9, 5, 14, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962957811, 'comment_body': 'unused constant', 'comment_created': datetime.datetime(2022, 9, 5, 14, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962957875, 'comment_body': 'unused constant', 'comment_created': datetime.datetime(2022, 9, 5, 14, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962958100, 'comment_body': 'constants should be in capital letters', 'comment_created': datetime.datetime(2022, 9, 5, 14, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962959155, 'comment_body': 'is the ""outbound"" mapping really ready? I don\'t think so and I wouldn\'t check the ""Outbound"" column yet.', 'comment_created': datetime.datetime(2022, 9, 5, 14, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962959909, 'comment_body': 'Please apply JSON proper formatting', 'comment_created': datetime.datetime(2022, 9, 5, 14, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 962959982, 'comment_body': 'Please apply JSON proper formatting', 'comment_created': datetime.datetime(2022, 9, 5, 14, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963574075, 'comment_body': 'To handle this, would adding a catch block for ```NoSuchElementException``` resolve it?', 'comment_created': datetime.datetime(2022, 9, 6, 11, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Pranshu-G', 'type': 'User'}, {'comment_id': 963625815, 'comment_body': 'No, that would be a really bad code style.', 'comment_created': datetime.datetime(2022, 9, 6, 12, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963642599, 'comment_body': ""instead of ```.get``` an ```orElse(null)``` as that way an exception won't be thrown\r\n"", 'comment_created': datetime.datetime(2022, 9, 6, 12, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Pranshu-G', 'type': 'User'}, {'comment_id': 963654468, 'comment_body': 'That would throw a `NullPointerException` when then calling `.equals(contentType)` on it.\r\nA simple solution would just be:\r\n```\r\nif (message.findContentType().orElse("""").equals(contentType))\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 12, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963888236, 'comment_body': 'this should be a `else if` instead', 'comment_created': datetime.datetime(2022, 9, 6, 15, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963889440, 'comment_body': ""what? why would you catch a `MessageMappingFailedException` and throw another `MessageMappingFailedException` instead?\r\nI don't see a need for this try-catch .."", 'comment_created': datetime.datetime(2022, 9, 6, 15, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963892701, 'comment_body': 'building this exception should be moved down where it actually is thrown\r\notherwise this is built for each and every message, even if they are valid cloudEvents - which causes non-needed garbage on the heap', 'comment_created': datetime.datetime(2022, 9, 6, 15, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963894623, 'comment_body': '`""data""` should become a constant of this class', 'comment_created': datetime.datetime(2022, 9, 6, 16, 0, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963895046, 'comment_body': '`""data""` should become a constant of this class', 'comment_created': datetime.datetime(2022, 9, 6, 16, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963895255, 'comment_body': '`""data_base64""` should become a constant of this class', 'comment_created': datetime.datetime(2022, 9, 6, 16, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963896610, 'comment_body': 'Please let your IDE optimize the imports - a lot of them are not used at the moment.', 'comment_created': datetime.datetime(2022, 9, 6, 16, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963897378, 'comment_body': 'add blank line between `package` and the first `import`', 'comment_created': datetime.datetime(2022, 9, 6, 16, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963903346, 'comment_body': 'I am unsure if this is the correct content-type for ""binary CloudEvents"" ..\r\nBecause the payload is cleary DittoProtocol JSON, so content-type should be `""application/vnd.eclipse.ditto+json""`.\r\n\r\nBut then the CloudEventsMapper would not process the message, or would it.\r\nWhat do you think @ctron ?\r\n\r\nShouldn\'t `content-type:application/vnd.eclipse.ditto+json` together with all required ""binary CloudEvent"" headers also be handled by the CloudEventsMapper?\r\nCurrently it isn\'t ..', 'comment_created': datetime.datetime(2022, 9, 6, 16, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963903631, 'comment_body': '```suggestion\r\nA Structured CloudEvent for Ditto would look like this:\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 16, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963904876, 'comment_body': 'That\'s a bad heading - you provide examples below this heading and not ""Specifications"".\r\n```suggestion\r\n#### CloudEvents examples\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 16, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 963908132, 'comment_body': 'Must a ""binary CloudEvent"" really contain the CloudEvent contentType?\r\nAs I understood the ""binary CloudEvent"" the CloudEvent attributes are read from headers whereas the payload does not have anything to do with a CloudEvent.\r\nOr am I wrong?', 'comment_created': datetime.datetime(2022, 9, 6, 16, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 964405834, 'comment_body': 'Please organize imports - many of them are unused.', 'comment_created': datetime.datetime(2022, 9, 7, 5, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 965610625, 'comment_body': 'Yes, a cloud event always has a content-type:\r\n* https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/bindings/kafka-protocol-binding.md#321-content-type\r\n* https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/bindings/kafka-protocol-binding.md#331-kafka-content-type\r\n\r\nIn the case of a binary cloud event, the content type is mapped to the ""data content type"", in the structural cloud event is must have a value of `application/cloudevents+json; charset=UTF-8` (or `application/cloudevents+json`).', 'comment_created': datetime.datetime(2022, 9, 8, 7, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ctron', 'type': 'User'}, {'comment_id': 965616268, 'comment_body': 'Right, in this case the content type is the content type of the data which is equal to the payload in the case of a binary encoded event. So it should be `application/vnd.eclipse.ditto+json`.\r\n\r\nFrom what I see, the takes the ""ditto headers"", which to my understanding are the incoming headers, and passes them along for further processing.', 'comment_created': datetime.datetime(2022, 9, 8, 7, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ctron', 'type': 'User'}, {'comment_id': 967149856, 'comment_body': 'According to the [CloudEvents spec](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#source-1) the source needs to be an `URI-reference`.\r\n`""org.eclipse.ditto""` is not an URI.\r\n\r\nSo we have to adjust this IMHO.\r\nI would suggest to use: `""https://github.com/eclipse/ditto""`', 'comment_created': datetime.datetime(2022, 9, 9, 14, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 967159778, 'comment_body': 'I would only use `""org.eclipse.ditto.outbound""` as prefix of the CE type.\r\nThe [CloudEvents spec](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#type) defines:\r\n> This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc.\r\n\r\nThat\'s why I think that we should append the `topicPath` (without the entityId which would be in the `subject` of the CE) of the `adaptable`:\r\n```java\r\nfinal String topicPathWithoutEntityId = adaptable.getTopicPath().getPath().split(""/"", 3)[2];\r\nfinal String type = OUTBOUNDTYPE + "":"" + topicPathWithoutEntityId;\r\n```\r\n\r\nThat way we would get e.g. such a type when a twin is modified:\r\n```\r\norg.eclipse.ditto.outbound:things/twin/events/modified\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 14, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 967165299, 'comment_body': 'The CE `id` should instead be determined by the `correlation-id` of the `adaptable` - and only as fallback be a new UUID, so I propose:\r\n```suggestion\r\n    final String outboundID = adaptable.getDittoHeaders().getCorrelationId()\r\n            .orElseGet(() -> UUID.randomUUID().toString());\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 14, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 967168260, 'comment_body': 'when using `""data""` and therefore sending a ""structured CloudEvent"" my understanding is that we also need to set the [datacontenttype](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#datacontenttype).\r\n\r\nPlease add this as field to the JsonObject and use the `BINARY_CONTENT_TYPE` (you might want to rename the constant to just `DITTO_PROTOCOL_CONTENT_TYPE`).', 'comment_created': datetime.datetime(2022, 9, 9, 14, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 967172590, 'comment_body': 'In addition to the existing fields in the JsonObject I would suggest to add:\r\n* [time](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#time) ( retrievable by `adaptable.getPayload().getTimestamp().orElse(Instant.now())`\r\n* [subject](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/spec.md#subject) ( retrievable by `adaptable.getTopicPath().getNamespace() + "":"" + adaptable.getTopicPath().getEntityName()`)', 'comment_created': datetime.datetime(2022, 9, 9, 14, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 967178401, 'comment_body': 'I think we should extract the `""id""` of the incoming CE and use it as `correlation-id` of the DittoHeaders, e.g.:\r\n```suggestion\r\n        final DittoHeaders headers = binaryAdaptable.getDittoHeaders()\r\n                .toBuilder()\r\n                .correlationId(message.getHeaders().get(CE_ID))\r\n                .build();\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 15, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 967179769, 'comment_body': 'Same as above - also for ""structured CEs"" the ""id"" of the CE should be added as the DittoHeaders\' `correlation-id` - must be extracted from the CE JSON accordingly.', 'comment_created': datetime.datetime(2022, 9, 9, 15, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 967181230, 'comment_body': 'I think now we can check also the ""outbound"" column again - everything should be in place.', 'comment_created': datetime.datetime(2022, 9, 9, 15, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'thjaeckle', 'type': 'User'}, {'comment_id': 968269204, 'comment_body': ""Technically, it doesn't need to be a URI, but a URI-reference, which `org.eclipse.ditto` would be.\r\n\r\nBut also the recommendation is to use an absolute URI. So this change would make sense indeed."", 'comment_created': datetime.datetime(2022, 9, 12, 10, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ctron', 'type': 'User'}]","[{'commit_sha': 'ccdcfb35a91fe10371425c1623365c881553ea0b', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '348f9ae0c198b2c648f875fc62d04737dbdad44a', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad9bf42b2871598162681c402db3495d0b35c81a', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a49b7da751f289df7bdda8ec802bb2a3f32cefe', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f667a4d11ae80e2913f3aaae608972f4fa2c7efa', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8639d9d8a484ad5e46aac7629ebc52990ad3096', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '390ae324e8a585d2911928e45abce6d7dd9809b0', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d28c2b44d1c65853923557381a8a46456f0d06', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f7426f9740575ddf20797289f34574f5f87ae62', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72642cd329e56e10d903181c5f97639e30698af3', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '533c07638012e4a0a72440632a29590d1a5cc92e', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8a9b887a44902215c21b60cb48e8969d897ac44', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f2e79ca6a67460d769effa90c3fe3e30c611fb3', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c54115f73464c0b1fb2b1477f2451b0124cb75d', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edcb97508ce0a3749361910644583581b14b46b7', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e37d674a041f0fc78f341cce9f54cef7fd82f8c', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1a9fe5828ba1f2681944367849106d5401c3b85', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfdde88add47ec7a4d14aeb73805fcd952521761', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df2f6d4ea5a5e351fbc40ac6db8a96f8459d5658', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161e33f6dd4dd959d5dbb78c45235a750220ecae', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b057e66f0f12292af5f0ab6eca52f8f17438ee75', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2700aab6461582bac47f3565922132217c6f323d', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '772441c7a17b34cdf2defbe47a892a747f3a4686', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91f8493a735118b62d5332055ed36a6be3b4c93f', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c036c2135af135ea4f41596e0767a3a1850eca7b', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6af6dec236324f66377d86fb868c4f0aae05c44e', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8a3547c1b0530e8da044a23f7374aa6e7e926df', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e084dac87bfb5aae514001c6b22a827209c2808c', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ab3054d8ec121dd560b625399e7f86709968d71', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '895579dcb3b3d7e4a48d487537cee03f22f991cd', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '263a9f1c30315de680b9c0f3d11dad165ca6c80d', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68e656ad407456552e391b195ce8c5386e3f1210', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36166a1355f954bd6c9d93146ee9254daf004a36', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65cc53380f88065c5c1334303c334df7feed7276', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99fb7f17e277f44c23354cc29a69fdcd4998dc87', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a037f1bd4fbb3b1d309f72915549e31d4e6c2c60', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c20cdf4b3748d9e87544754f31226ea7e75ccc0', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0221c9e541c8ba0de9483ece23b835613e2a765c', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71338846ce433fffd90504b97c24f135ad2f2a76', 'committer_username': 'Pranshu-G', 'committer_name': 'Pranshu Grover', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 29, 13, 59, 20, tzinfo=datetime.timezone.utc)}]",Pranshu Grover,85025189,,User,,22,,5,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
87849739,ditto,eclipse-ditto/ditto,Java,218,665,34,82,11601,103,23,10,"[{'id': 1021607718, 'number': 1437, 'closed': datetime.datetime(2022, 9, 13, 15, 16, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 14, 37, 24, tzinfo=datetime.timezone.utc), 'time_taken': 3026324.0, 'time_delta': '35 days, 0:38:44', 'additions': 453, 'deletions': 1, 'state': 'closed'}, {'id': 958126556, 'number': 1395, 'closed': datetime.datetime(2022, 7, 4, 16, 9, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 4, 8, 12, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2620587.0, 'time_delta': '30 days, 7:56:27', 'additions': 79, 'deletions': 18, 'state': 'closed'}, {'id': 958107480, 'number': 1392, 'closed': datetime.datetime(2022, 6, 4, 8, 5, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 4, 5, 44, 11, tzinfo=datetime.timezone.utc), 'time_taken': 8470.0, 'time_delta': '2:21:10', 'additions': 25, 'deletions': 12, 'state': 'closed'}]"
