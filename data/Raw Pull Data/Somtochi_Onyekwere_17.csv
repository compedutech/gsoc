pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
473345759,Add blog post: GSoC ‘20 - Building operators for cluster addons,This blog post gives an overview of the work done by @SomtochiAma during the Google Summer of Code internship period with Kubernetes,True,23432,https://api.github.com/repos/kubernetes/website/pulls/23432,https://github.com/kubernetes/website/pull/23432,closed,118,0,1,8,16,56,7,5,"[{'name': 'cncf-cla: yes'}, {'name': 'size/L'}, {'name': 'lgtm'}, {'name': 'sig/docs'}, {'name': 'approved'}, {'name': 'language/en'}, {'name': 'area/blog'}]",2020-08-25 17:15:30+00:00,2020-09-15 16:52:08+00:00,1812998.0,"20 days, 23:36:38","[{'comment_id': 476658173, 'comment_body': ""Wouldn't hurt to link to the upstream GSoC page here. "", 'comment_created': datetime.datetime(2020, 8, 25, 18, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'castrojo', 'type': 'User'}, {'comment_id': 476658819, 'comment_body': 'Probably want this to say ""I was given the opportunity to work with Kubernetes"" instead of ""I as opportune...""', 'comment_created': datetime.datetime(2020, 8, 25, 18, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'castrojo', 'type': 'User'}, {'comment_id': 476659241, 'comment_body': ""Expand out [k/k] here to give people context who might not know how we're organized in GitHub. "", 'comment_created': datetime.datetime(2020, 8, 25, 18, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'castrojo', 'type': 'User'}, {'comment_id': 476660280, 'comment_body': 'Wouldn\'t hurt to link to them directly in here as a call to action. Probably like ""I encourage you to [check them out] ..."" ', 'comment_created': datetime.datetime(2020, 8, 25, 18, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'castrojo', 'type': 'User'}, {'comment_id': 476660568, 'comment_body': ""Link to the RBAC docs in here so people who don't know what it is can look it up real quick. "", 'comment_created': datetime.datetime(2020, 8, 25, 18, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'castrojo', 'type': 'User'}, {'comment_id': 476660885, 'comment_body': 'The [] and () need to be swapped here. ', 'comment_created': datetime.datetime(2020, 8, 25, 18, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'castrojo', 'type': 'User'}, {'comment_id': 476664887, 'comment_body': 'missing ""on"".\r\n""I worked on the..""\r\n\r\n""Project"" can be lower case.\r\n', 'comment_created': datetime.datetime(2020, 8, 25, 18, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 476665631, 'comment_body': '""Kubernetes has progressed...""', 'comment_created': datetime.datetime(2020, 8, 25, 18, 50, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 476666693, 'comment_body': '""networking"" can be lowercase here:\r\n\r\n> ones like Calico(for Networking)\r\n', 'comment_created': datetime.datetime(2020, 8, 25, 18, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477210261, 'comment_body': '```suggestion\r\nMy name is Somtochi Onyekwere from the Federal University of Technology, Owerri (Nigeria) and this year, I was given the opportunity to work with Kubernetes (under the CNCF organization) and this led to an amazing summer spent learning, contributing and interacting with the community.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 10, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477211304, 'comment_body': '```suggestion\r\nKubernetes has progressed greatly in the past few years with a flourishing community and a large number of contributors. The codebase is gradually moving away from the monolith structure where all the code resides in the [kubernetes/kubernetes](https://github.com/kubernetes/kubernetes) repository to being split into multiple sub-projects. Part of the focus of cluster-addons is to make some of these sub-projects work together in an easy to assemble, self-monitoring, self-healing and Kubernetes-native way. It enables them to work seamlessly without human intervention.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 10, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477212046, 'comment_body': '```suggestion\r\nThe community is exploring the use of operators as a mechanism to monitor various resources in the cluster and properly manage these resources. In addition to this, it provides self-healing and it is a kubernetes-native pattern that can encode how best these addons work and manage them properly.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 10, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477213214, 'comment_body': '^ did some rewording ""all sub-projects"" -> ""some sub-projects""\r\nalso indicated that the move from monolith arch is still ongoing.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477213949, 'comment_body': '```suggestion\r\nOperators are custom controllers with custom resource definitions that encode application-specific knowledge and are used for managing complex stateful applications. It is a widely accepted pattern. Managing addons via operators, with these operators encoding knowledge of how best the addons work, introduces a lot of advantages while setting standards that will be easy to follow and scale.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 10, 58, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477217702, 'comment_body': 'providing context makes changes in tense from present to past more gradual:\r\n\r\n```suggestion\r\nThe addon operators can solve a lot of problems, but they have their challenges. Those under the cluster-addons project had missing pieces and were still a proof of concept. Generating the RBAC for the operators was a pain and sometimes the operators were given too much privilege. The operators weren’t very extensible as it only pulled manifests from local filesystems or HTTP(s) servers and a lot of simple addons were generating the same code.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477218215, 'comment_body': '```suggestion\r\n\tI spent the summer working on these issues, looking at them with fresh eyes and coming up with solutions for both the known and unknown issues.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477218730, 'comment_body': '```suggestion\r\nThe [kubebuilder-declarative-pattern](https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern) (from here on referred to as KDP) repo is an extra layer of addon specific tooling on top of the [kubebuilder](https://github.com/kubernetes-sigs/kubebuilder) SDK that is enabled by passing the experimental `--pattern=addon` flag to `kubebuilder create` command. Together, they create the base code for the addon operator. During the internship, I worked on a couple of features in KDP and cluster-addons.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477219207, 'comment_body': '```suggestion\r\nEnabling version check for operators helped in making safer upgrades/downgrades to different versions of the addon, even though the operator had complex logic. It is a way of matching the version of an addon to the version of the operator that knows how to manage it well. Most addons have different versions and these versions might need to be managed differently. This feature checks the custom resource for the `addons.k8s.io/min-operator-version` annotation which states the minimum operator version that is needed to manage the version against the version of the operator. If the operator version is below the minimum version required, the operator pauses with an error telling the user that the version of the operator is too low. This helps to ensure that the correct operator is being used for the addon.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477219986, 'comment_body': '```suggestion\r\nPreviously, there was support for only local file directories and HTTPS repositories for storing manifests. Giving creators of addon operators the ability to store manifest in GitHub repository enables faster development and version control.  When starting the controller, you can pass in a flag to specify the location of your channels directory. The channels directory contains manifest for different versions, the controller pulls the manifest from this directory and applies it to the cluster. During the internship period, I extended it to include Git repositories.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477220508, 'comment_body': '```suggestion\r\nThe reconciliation loop that ensures that the desired state matches the actual state prevents modification of objects in the cluster. This makes it hard to experiment or investigate what might be wrong in the cluster as any changes made are promptly reverted. I resolved this by allowing users to place `addons.k8s.io/ignore` annotation to the resource that they don’t want the controller to reconcile. The controller checks for this annotation and doesn’t reconcile that object. To resume reconciliation, the annotation can be removed from the resource.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477221122, 'comment_body': '```suggestion\r\nOne of the operators that I worked on is a generic controller that could manage more than one cluster addon that did not require extra configuration. To do this, the operator couldn’t use a particular type and needed the kubebuilder-declarative-repo to support using the [unstructured.Unstructured](https://godoc.org/k8s.io/apimachinery/pkg/apis/meta/v1/unstructured#Unstructured) type. There were various functions in the kubebuilder-declarative-pattern that couldn’t handle this type and return an error if the object passed in was not of type `addonsv1alpha1.CommonObject`. The functions were modified to handle both `unstructured.Unstructured` and `addonsv1alpha.CommonObject`.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477222769, 'comment_body': '```suggestion\r\nIt is hard to find out at a glance which objects were created by an addon custom resource. This kubectl plugin alleviates that pain by displaying all the objects in the cluster that a resource has ownerrefs on. You simply pass the kind and the name of the resource as arguments to the program and it checks the cluster for the objects and gives the kind, name, the namespace of such an object. It could be useful to get a general overview of all the objects that the controller is reconciling by passing in the name and kind of custom resource.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477223335, 'comment_body': '```suggestion\r\nTo fully understand addons operators and make changes to how they are being created, you have to try creating and using them. Part of the summer was spent building operators for some popular addons like the Kubernetes dashboard, flannel, NodeLocalDNS and so on. Please check the [cluster-addons](https://github.com/kubernetes-sigs/cluster-addons) repository for the different addon operators. In this section, I will just highlight one that is a little different from the others.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477224110, 'comment_body': '```suggestion\r\nThe generic controller can be shared between addons that don’t require much configuration. This minimizes resource consumption on the cluster as it reduces the number of controllers that need to be run. Also instead of building your own operator, you can just use the generic controller and whenever you feel that your needs have grown and you need a more complex operator, you can always scaffold the code with kubebuilder and continue from where the generic operator stopped. To use the generic controller, you can generate the CRD using this tool ([generic-addon](https://github.com/kubernetes-sigs/cluster-addons/blob/master/tools/generic-addon/README.md)). You pass in the kind, group, and the location of your channels directory (it could be a Git repository too!). The tool generates the - CRD, RBAC manifest and two custom resources for you.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477224197, 'comment_body': '```suggestion\r\nThe process is as follows:\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477224404, 'comment_body': '```suggestion\r\nThis tool creates:\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477225145, 'comment_body': '```suggestion\r\nApply these manifests, but ensure to apply the CRD before the CR.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477226278, 'comment_body': '```suggestion\r\nThen, run the Generic controller, either on your machine or in-cluster.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477228172, 'comment_body': '```suggestion\r\nIf you are interested in building an operator, please check out [this guide](https://github.com/kubernetes-sigs/cluster-addons/blob/master/dashboard/README.md).\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477228695, 'comment_body': '```suggestion\r\nA lot of work was definitely done on the cluster addons during the GSoC period. But we need more people building operators and using them in the cluster. We need wider adoption in the community. Build operators for your favourite addons and tell us how it went and if you had any issues. Check out this [README.md](https://github.com/kubernetes-sigs/cluster-addons/blob/master/dashboard/README.md) to get started.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477229284, 'comment_body': '```suggestion\r\nI really want to appreciate my mentors [Justin Santa Barbara](https://github.com/justinsb) (Google) and [Leigh Capili](https://github.com/stealthybox) (Weaveworks). My internship was awesome because they were awesome. They set a golden standard for what mentorship should be. They were accessible and always available to clear any confusion. I think what I liked best was that they didn’t just dish out tasks, instead, we had open discussions about what was wrong and what could be improved. They are really the best and I hope I get to work with them again!\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477229809, 'comment_body': '```suggestion\r\nSo far I have learnt a lot about Go, the internals of Kubernetes, and operators. I want to conclude by encouraging people to contribute to open-source (especially Kubernetes :)) regardless of your level of experience. It has been a well-rounded experience for me and I have come to love the community. It is a great initiative and it is a great way to learn and meet awesome people. Special shoutout to Google for organizing this program.\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 477229972, 'comment_body': '```suggestion\r\nIf you are interested in cluster addons and finding out more on addon operators, you are welcome to join our slack channel #cluster-addons on the Kubernetes [slack](kubernetes.slack.com).\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 11, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}, {'comment_id': 488101553, 'comment_body': '```suggestion\r\nSpecifically, I worked on the _Cluster Addons: Package all the things!_ project. The project focused on building operators for better management of various cluster addons, extending the tooling for building these operators and making the creation of these operators a smooth process.\r\n```\r\n(because the link text is slightly wrong, and also GSoC 2020 is archived)', 'comment_created': datetime.datetime(2020, 9, 14, 17, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488102019, 'comment_body': 'You could link to https://kubernetes.io/docs/concepts/overview/components/#addons if you want to.', 'comment_created': datetime.datetime(2020, 9, 14, 17, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488102191, 'comment_body': 'You could link to https://kubernetes.io/docs/concepts/extend-kubernetes/operator/, again if you want to.', 'comment_created': datetime.datetime(2020, 9, 14, 17, 25, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488102420, 'comment_body': '```suggestion\r\nThe addon operators can solve a lot of problems, but they have their challenges. Those under the cluster-addons project had missing pieces and were still a proof of concept. Generating the RBAC configuration for the operators was a pain and sometimes the operators were given too much privilege. The operators weren’t very extensible as it only pulled manifests from local filesystems or HTTP(s) servers and a lot of simple addons were generating the same code.\r\n```', 'comment_created': datetime.datetime(2020, 9, 14, 17, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488102747, 'comment_body': '```suggestion\r\n## Operator version checking\r\n```', 'comment_created': datetime.datetime(2020, 9, 14, 17, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488102900, 'comment_body': '```suggestion\r\n## Git repository for storing the manifests\r\n```', 'comment_created': datetime.datetime(2020, 9, 14, 17, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488103367, 'comment_body': ""I'd put the link inside the phrase “Building the RBAC generator” rather than in the heading."", 'comment_created': datetime.datetime(2020, 9, 14, 17, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488103559, 'comment_body': 'Can you move the hyperlink out of the heading? Blog headings are usually hyperlinks already.', 'comment_created': datetime.datetime(2020, 9, 14, 17, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488103745, 'comment_body': '```suggestion\r\n## Generic controller\r\n```', 'comment_created': datetime.datetime(2020, 9, 14, 17, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488104197, 'comment_body': 'For the first mention of CRD, I suggest you write it as “CustomResourceDefinition (CRD)”', 'comment_created': datetime.datetime(2020, 9, 14, 17, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488104396, 'comment_body': '```suggestion\r\n- Generate all the manifests needed with the [`generic-addon` tool](https://github.com/kubernetes-sigs/cluster-addons/blob/master/tools/generic-addon/README.md).\r\n```', 'comment_created': datetime.datetime(2020, 9, 14, 17, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488104627, 'comment_body': 'You might want to append `yaml` here, to get syntax highlighting (I would).', 'comment_created': datetime.datetime(2020, 9, 14, 17, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488106759, 'comment_body': ""“CR” isn't an abbreviation that the API server recognizes, so I'd write that out in full. \r\n```suggestion\r\n4. The custom resource for your addon\r\n5. A generic custom resource\r\n```"", 'comment_created': datetime.datetime(2020, 9, 14, 17, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488107062, 'comment_body': '```suggestion\r\n2. The RBAC rules for the CustomResourceDefinitions\r\n3. The RBAC rules for applying the manifests\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 9, 14, 17, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488107369, 'comment_body': ""This link isn't quite right. Also, we often signpost readers to https://slack.k8s.io/ (a vending machine for Slack invitations).\r\n\r\nTo be clear, the signposting is an _extra_ link we provide."", 'comment_created': datetime.datetime(2020, 9, 14, 17, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488107404, 'comment_body': 'If you want, you could also hyperlink `#cluster-addons` to https://kubernetes.slack.com/messages/cluster-addons', 'comment_created': datetime.datetime(2020, 9, 14, 17, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sftim', 'type': 'User'}, {'comment_id': 488470321, 'comment_body': '```suggestion\r\nSpecifically, I worked on the _Cluster Addons: Package all the things!_ project. The project focused on building operators for better management of various cluster addons, extending the tooling for building these operators and making the creation of these operators a smooth process.\r\n```', 'comment_created': datetime.datetime(2020, 9, 15, 8, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}, {'comment_id': 488471888, 'comment_body': '```suggestion\r\nWhat are cluster addons? Cluster addons are a collection of resources (like Services and deployment) that are used to give a Kubernetes cluster additional functionalities. They range from things as simple as the Kubernetes dashboards (for visualization) to more complex ones like Calico (for networking). These addons are essential to different applications running in the cluster and the cluster itself. The addon operator provides a nicer way of managing these addons and understanding the health and status of the various resources that comprise the addon. You can get a deeper overview in this [article](https://kubernetes.io/docs/concepts/overview/components/#addons).\r\n```', 'comment_created': datetime.datetime(2020, 9, 15, 8, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}, {'comment_id': 488472349, 'comment_body': '```suggestion\r\nOperators are custom controllers with custom resource definitions that encode application-specific knowledge and are used for managing complex stateful applications. It is a widely accepted pattern. Managing addons via operators, with these operators encoding knowledge of how best the addons work, introduces a lot of advantages while setting standards that will be easy to follow and scale. This [article](https://kubernetes.io/docs/concepts/extend-kubernetes/operator) does a good job of explaining operators.\r\n```', 'comment_created': datetime.datetime(2020, 9, 15, 8, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}, {'comment_id': 488473129, 'comment_body': '```suggestion\r\nThe addon operators can solve a lot of problems, but they have their challenges. Those under the [cluster-addons project](https://github.com/kubernetes-sigs/cluster-addons) had missing pieces and were still a proof of concept. Generating the RBAC configuration for the operators was a pain and sometimes the operators were given too much privilege. The operators weren’t very extensible as it only pulled manifests from local filesystems or HTTP(s) servers and a lot of simple addons were generating the same code.\r\n```', 'comment_created': datetime.datetime(2020, 9, 15, 8, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}, {'comment_id': 488474905, 'comment_body': '```suggestion\r\nEnabling version checks for operators helped in making upgrades/downgrades safer to different versions of the addon, even though the operator had complex logic. It is a way of matching the version of an addon to the version of the operator that knows how to manage it well. Most addons have different versions and these versions might need to be managed differently. This feature checks the custom resource for the `addons.k8s.io/min-operator-version` annotation which states the minimum operator version that is needed to manage the version against the version of the operator. If the operator version is below the minimum version required, the operator pauses with an error telling the user that the version of the operator is too low. This helps to ensure that the correct operator is being used for the addon.\r\n```', 'comment_created': datetime.datetime(2020, 9, 15, 8, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}, {'comment_id': 488475374, 'comment_body': '```suggestion\r\nPreviously, there was support for only local file directories and HTTPS repositories for storing manifests. Giving creators of addon operators the ability to store manifest in GitHub repository enables faster development and version control.  When starting the controller, you can pass a flag to specify the location of your channels directory. The channels directory contains manifest for different versions, the controller pulls the manifest from this directory and applies it to the cluster. During the internship period, I extended it to include Git repositories.\r\n```', 'comment_created': datetime.datetime(2020, 9, 15, 8, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}, {'comment_id': 488484265, 'comment_body': '```suggestion\r\nThe reconciliation loop that ensures that the desired state matches the actual state prevents modification of objects in the cluster. This makes it hard to experiment or investigate what might be wrong in the cluster as any changes made are promptly reverted. I resolved this by allowing users to place an `addons.k8s.io/ignore` annotation on the resource that they don’t want the controller to reconcile. The controller checks for this annotation and doesn’t reconcile that object. To resume reconciliation, the annotation can be removed from the resource.\r\n```', 'comment_created': datetime.datetime(2020, 9, 15, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}]","[{'commit_sha': '8f708911d6f62a55801862bb33d059f038e6a820', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4339d17460cf704f74faf01cf3d0d2ce3de7bc4a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40d9c0f111f310a8f53bb2b1d31a7856b7c66445', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c81a9277505271dc4a18200778b1a3902771c4a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ca22b9fd62396d37ec89272c7fd712fae5b205', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0269a804199a43fe4e9ee4785980d4d31450c8d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '141e5aed01834c39893ed5c51d85381c5534b2cf', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b5bb4d46f0ea1cafcca889c880c6b5ac5810ad9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
444110944,Adds Version Check,,True,102,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/102,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/102,closed,135,12,5,3,5,11,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-07-03 15:29:06+00:00,2020-08-10 13:32:21+00:00,3276195.0,"37 days, 22:03:15","[{'comment_id': 452200988, 'comment_body': 'Have you run gofmt?  (And I guess we need to add a gofmt check!)', 'comment_created': datetime.datetime(2020, 7, 9, 13, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452201137, 'comment_body': 'Nit: should we remove?', 'comment_created': datetime.datetime(2020, 7, 9, 13, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452201515, 'comment_body': 'Oh cool - using a signature inspired by Reconcilers is an interesting pattern to explore!', 'comment_created': datetime.datetime(2020, 7, 9, 13, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452202248, 'comment_body': ""Nit: I think you should report this as a `log.Error(err)`, even if we don't return an error. "", 'comment_created': datetime.datetime(2020, 7, 9, 13, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452203503, 'comment_body': ""I actually think it would be reasonable to return an error, if the annotation is specified but we can't parse it.  It _could_ be a version schema our operator is too old to understand.  (More likely, it's just a typo).\r\n\r\nBut ... the user did specify the annotation in their manifest...\r\n\r\nI think returning an error is reasonable, it will help users create valid manifests.  A message in the logs is going to get overlooked and users will be surprised when it doesn't work."", 'comment_created': datetime.datetime(2020, 7, 9, 13, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452204673, 'comment_body': 'You could move this to `NewVersionCheck`; I think it\'s very natural to return an error there if passed a bad version :-)\r\n\r\nRelated question is: should we refuse to apply manifests that specify invalid minimum versions (i.e. ignore vs error).  I would vote ""error"" I think, based on my chain of thoughts in this review!', 'comment_created': datetime.datetime(2020, 7, 9, 13, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452205295, 'comment_body': ""Nit: Don't name it `bool` - it's confusing.  e.g. maybe something like `validVersion, err := r.options.status.VersionCheck(...)` "", 'comment_created': datetime.datetime(2020, 7, 9, 13, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452205525, 'comment_body': 'Nit: I think this can return an error; we need to bubble it up if so.', 'comment_created': datetime.datetime(2020, 7, 9, 13, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452651075, 'comment_body': ""There are also two versions, what happens if we cannot parse the operator's version?"", 'comment_created': datetime.datetime(2020, 7, 10, 6, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 460859327, 'comment_body': 'Nit: this should say `min-operator-version` to match the annotation value', 'comment_created': datetime.datetime(2020, 7, 27, 12, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460860469, 'comment_body': 'So this actually ""shadows"" the err value we care about.  So on line 142 err will be nil.\r\n\r\nSometimes people use a different name e.g. `updateErr :=...`\r\n\r\nBut I think a better pattern - when you can use it - is to so `if err := r.client.Status()...; err != nil` as then the scope of the shadowing err should just be the `if` statement (I think!) ', 'comment_created': datetime.datetime(2020, 7, 27, 12, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '1b07d8729175a1a4874df27057a3f69df433fb0d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1793337ef20aed72eb034e982d22ab8775b039', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8ba229bb90c99978b98b1764de17fea1d9f677a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
446890877,Base git repository working,,True,104,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/104,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/104,closed,222,2,6,11,6,6,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-07-09 14:18:09+00:00,2020-08-11 02:14:18+00:00,2807769.0,"32 days, 11:56:09","[{'comment_id': 460861635, 'comment_body': ""Nit: this looks like leftover debug code.  It's OK to log with a very high verbosity (e.g. 4 or 6) instead, but I would probably just delete it - it's most valuable when you're first developing/debugging."", 'comment_created': datetime.datetime(2020, 7, 27, 12, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460862152, 'comment_body': '(If you did want to log the bytes, this could be a good place to log it - when something has gone wrong.  If we were debugging this, the first thing we would ask is ""what is the contents of channel?"")', 'comment_created': datetime.datetime(2020, 7, 27, 12, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460863515, 'comment_body': 'If you use `path.Join` you can probably avoid the repetition here: https://play.golang.org/p/-XheAesp5eZ\r\n\r\n(Note: path.Join and not filepath.Join, because even on windows we want a url-style path with forward slashes)', 'comment_created': datetime.datetime(2020, 7, 27, 12, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460864048, 'comment_body': 'Missing `defer file.Close()` I think.\r\n\r\nI think you can also just do `ioutil.ReadFile` though, which is probably easier', 'comment_created': datetime.datetime(2020, 7, 27, 12, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460864303, 'comment_body': ""Nit: using `filepath.Join` is generally easier & safer when constructing paths (and here, it's a filesystem path, so you want filepath, not path!)"", 'comment_created': datetime.datetime(2020, 7, 27, 12, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460867291, 'comment_body': 'Nit: if you use `strings.SplitN(url, "".git//"", 2)` you will only split on the first `.git//`, and not drop any other segments.\r\n\r\nAn alternative would be to check that newURL ends up with `len(.) == 2`\r\n\r\n(urlTokens or tokens or urlComponents or components might also be a more descriptive name, as it isn\'t really a URL)', 'comment_created': datetime.datetime(2020, 7, 27, 12, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': 'e1e6aa0b9c28ff86e981c42c37362b6cda59f020', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40c96504657456bf391dbd937a0fd0356c7c6bc5', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf81ecfa10b81a0c8fd092b396d38f802a480e0', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2da3260204596bc523cba812ba01dc45d09432db', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a22cf207dd79af81fe5cbea7aa5ae985cf6e064', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2bb5ed0f72675e8aa5ced07b63fb47827e7816', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd390a595857bea6edb5120be3471086a0f71610', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abc9b354361c008a862f6a9dbdd4ba0453705228', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b95789878ad7524e2deb2d6352078a8515f8bd0d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5eabba8da61296f076c01146802b067363636f1', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '238d579dd5d8611b71ebd04d77f732f567200028', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
470797957,Allows use of private repositories,,True,119,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/119,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/119,closed,92,2,2,1,2,2,5,1,"[{'name': 'sig/api-machinery'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-08-20 09:53:31+00:00,2020-09-22 14:56:49+00:00,2869398.0,"33 days, 5:03:18","[{'comment_id': 492798306, 'comment_body': 'In the future, we could also support setting this directly in an env var (e.g. `GIT_SSH_KEY` or something like that).  But this is good', 'comment_created': datetime.datetime(2020, 9, 22, 14, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 493254946, 'comment_body': 'That sounds great! I will do so in a follow-up PR.', 'comment_created': datetime.datetime(2020, 9, 23, 7, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': '788f31991e1d52047b572ddd027652152e7477ea', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
453917155,Checks for annotation for objects in-cluster,,True,111,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/111,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/111,closed,59,3,1,3,6,8,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-07-20 22:59:01+00:00,2020-08-11 02:24:18+00:00,1826717.0,"21 days, 3:25:17","[{'comment_id': 458026546, 'comment_body': ""We may want to construct this earlier and cache it in the Reconciler object; though it doesn't matter as much for the dynamic client which doesn't have as much state."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458027643, 'comment_body': 'Nit: rename gvk to `resource` or similar', 'comment_created': datetime.datetime(2020, 7, 21, 11, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458027747, 'comment_body': 'I think you can use RESTMapping, like here https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/blob/master/pkg/patterns/declarative/pkg/watch/dynamic.go#L64', 'comment_created': datetime.datetime(2020, 7, 21, 11, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458028356, 'comment_body': ""We probably also special-case `apierrors.IsNotFound(err)`; that's going to be the error for every object for a new CR and it's not work logging for IMO."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458028577, 'comment_body': ""Let's discuss a name for this annotation in pairing today!"", 'comment_created': datetime.datetime(2020, 7, 21, 11, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458028925, 'comment_body': 'We can just use an empty value for the annotation i.e. just check `if ok`.  yaml makes values like ""true"" annoyingly difficult to set...', 'comment_created': datetime.datetime(2020, 7, 21, 11, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458029740, 'comment_body': 'Just FYI, you can just do `var newItems []*manifest.Object` - the nil slice is treated like an empty array by append.  (Though if you look at my older code, I did this too!)', 'comment_created': datetime.datetime(2020, 7, 21, 11, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460884350, 'comment_body': 'As with the other PR, probably caching this (like you do dynamicClient) is a win', 'comment_created': datetime.datetime(2020, 7, 27, 13, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '9baf86365da6d06b5b9164293a1cb9b2813d2179', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce13d325fa977168301af65daa754b63af03b93', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3e778b3239e0ac0c8739ca00ac133a357f77fb', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
448079526,Checks for ignore reconciliation annotations,,False,105,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/105,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/105,closed,6,0,1,4,12,3,7,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lifecycle/rotten'}, {'name': 'size/XS'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'do-not-merge/hold'}]",2020-07-13 08:14:00+00:00,2021-03-07 16:47:11+00:00,20507591.0,"237 days, 8:33:11","[{'comment_id': 458040374, 'comment_body': 'We can figure out a name for this in pairing :-)', 'comment_created': datetime.datetime(2020, 7, 21, 11, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458040521, 'comment_body': ""I'd just allow any value (or even no value), so `if ok`.  (We might also want to rename `ok` to `found`)"", 'comment_created': datetime.datetime(2020, 7, 21, 11, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458040887, 'comment_body': ""I don't _think_ we need to support this on the manifest ... but if you can think of a reason we should allow it, that's fine."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '7f7564c51306407d25366419fe1a9b3e7e43af35', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67d3af8f1d2227562482f3e01dbaeb9e5e43c83f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f029eb80fad51612e246cd5f73f3126640871b', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63301e08c5e0684633ababaada9bb63436e17d90', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
455179948,Unstructured support in different functions,,True,112,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/112,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/112,closed,141,45,4,6,5,11,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-07-22 15:07:55+00:00,2020-08-10 14:20:20+00:00,1638745.0,"18 days, 23:12:25","[{'comment_id': 460887345, 'comment_body': 'I think this should be ""status"" ""healthy"".  We probably also should check the error (as you do with version)', 'comment_created': datetime.datetime(2020, 7, 27, 13, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460888250, 'comment_body': 'Nit: Do you need to declare this here?  Looks like you could declare it in on line 54 with `else if p, ok := object....` ?', 'comment_created': datetime.datetime(2020, 7, 27, 13, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460888604, 'comment_body': 'Nit: unstructured, not unstruct, as we expect this will eventually bubble-up to the user.', 'comment_created': datetime.datetime(2020, 7, 27, 13, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460890322, 'comment_body': 'It might be clearer if you constructed the `healthy` state first, and then applied it to the object.  i.e. move the type-checking on src to around line 89', 'comment_created': datetime.datetime(2020, 7, 27, 13, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460890972, 'comment_body': 'Missed error-check here', 'comment_created': datetime.datetime(2020, 7, 27, 13, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460891648, 'comment_body': 'If you make this `a.client.Update(ctx, src)`, can you eliminate the duplication between the two if branches?', 'comment_created': datetime.datetime(2020, 7, 27, 13, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 463776976, 'comment_body': ""I don't know if this would work as the status wasn't changed on `src`. Unlike the `SetNestedField` in `unstruct` and `SetCommonStatus` in `instance` that changes the status"", 'comment_created': datetime.datetime(2020, 7, 31, 18, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 467929607, 'comment_body': 'Looking at the other PRs, we might want to create helper functions here.  e.g. `GetVersion` and `GetHealthy` (or maybe `GetCommonSpec` and `GetCommonStatus`)', 'comment_created': datetime.datetime(2020, 8, 10, 14, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467932637, 'comment_body': ""Do we know where we don't change `src`?  `src` and `unstruct` are just a pointer-cast, so they should be the same object.\r\n\r\n(Also, if we're changing status we might have to use `client.Status().Update(...)`"", 'comment_created': datetime.datetime(2020, 8, 10, 14, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467969417, 'comment_body': 'I could definitely work on this. I think it is a good idea', 'comment_created': datetime.datetime(2020, 8, 10, 15, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 468450052, 'comment_body': 'It seems every time we run the update function, `src` has changed.  I will change to `client.Status().Update(...)` in another PR', 'comment_created': datetime.datetime(2020, 8, 11, 9, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': '24073d921b2c52cc84d5a2de5c423d491edbce60', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f56540e3b458ca48ffceff93027cddbd54020fd', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3a2e08052bad5dad186ee8c9065f45c6ee533cb', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae732735de2bb7ec3a6eb73bfc1c41a475e1539', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a498436332c0af9c1ca144a4fa2f33b198e3557', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e9532755beba0cedeafe1053c2de24ce58a1932', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
467941774,Refactors the kstatus functions and adds unstructured support in the version check,,True,117,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/117,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/117,closed,188,84,5,4,3,3,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-08-14 11:52:29+00:00,2020-08-16 13:56:18+00:00,180229.0,"2 days, 2:03:49","[{'comment_id': 471114818, 'comment_body': 'Is it `healthy` or `Healthy`?  It should be the JSON form I believe', 'comment_created': datetime.datetime(2020, 8, 16, 13, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 471115080, 'comment_body': 'Idea for a future PR: I wonder if we can refactor this into our helper methods ... e.g. GetCommonStatus and SetCommonStatus', 'comment_created': datetime.datetime(2020, 8, 16, 13, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 471115281, 'comment_body': 'I think this one should be `healthy` (and `errors`) also', 'comment_created': datetime.datetime(2020, 8, 16, 13, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '742fc0096e25cfb54ac34a7203529fde01c41c42', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02727e768a3975598946ea9ef3003f690a58dc88', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55909ee67261d53255db0b9ec83a7a2143c7932f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e3ba92c7424c9be2d202c86674b1cdcf8ab1a2', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
453865122,Uses kstatus to compute status of CR,,True,110,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/110,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/110,closed,188,6,5,7,6,16,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-07-20 21:42:24+00:00,2020-08-11 12:48:18+00:00,1868754.0,"21 days, 15:05:54","[{'comment_id': 458031394, 'comment_body': 'Probably log and skip this object; maybe post a status of ""unknown"" or ""error""', 'comment_created': datetime.datetime(2020, 7, 21, 11, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458032507, 'comment_body': ""You could make statusMap `map[status.Status]bool` and avoid the `String()` conversion.  That said, I bet they're strings anyway..."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460881095, 'comment_body': 'Is NotFoundStatus the best match?  I\'m wondering if we have an ""internal error"" status', 'comment_created': datetime.datetime(2020, 7, 27, 13, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460881378, 'comment_body': 'This might get a little verbose - we can try it and see!', 'comment_created': datetime.datetime(2020, 7, 27, 13, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460881755, 'comment_body': 'Nit: can we use the status.Status constants here, instead of the strings?', 'comment_created': datetime.datetime(2020, 7, 27, 13, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460882223, 'comment_body': ""Personally I'd prefer a longer line vs breaking in the middle of a type"", 'comment_created': datetime.datetime(2020, 7, 27, 13, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460882507, 'comment_body': 'Nit: we might want to cache this in future :-)', 'comment_created': datetime.datetime(2020, 7, 27, 13, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460883352, 'comment_body': 'Nit: always better to pass in the context if you control the method signature... even if the caller just specifies `context.TODO()`, it just avoids having to refactor in future.\r\n', 'comment_created': datetime.datetime(2020, 7, 27, 13, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460883551, 'comment_body': 'Nit: `unable to get resource: %v`', 'comment_created': datetime.datetime(2020, 7, 27, 13, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 463751945, 'comment_body': 'There is `unknown` status', 'comment_created': datetime.datetime(2020, 7, 31, 17, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 463754565, 'comment_body': 'Should we just log the `kind` and `name` without the `status`', 'comment_created': datetime.datetime(2020, 7, 31, 18, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 463761297, 'comment_body': 'I am not completely sure I understand', 'comment_created': datetime.datetime(2020, 7, 31, 18, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 467925009, 'comment_body': 'nit:typo', 'comment_created': datetime.datetime(2020, 8, 10, 14, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467925581, 'comment_body': ""Unknown is probably better - we don't want other systems to draw incorrect conclusions and NotFound feels very transient.  Another option would be to post no status at all for the whole CR, but I feel like unknown is better."", 'comment_created': datetime.datetime(2020, 8, 10, 14, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467927195, 'comment_body': 'It\'s just that you\'re going to be logging for every ""child"" object each time you go round the reconcile loop.  I think it\'s fine to leave in for now, because it will help us understand what\'s going on, and it\'s also going to be very obvious; we\'ll just likely want to reduce it to V(2) once we\'re all happy that it works as we expect!', 'comment_created': datetime.datetime(2020, 8, 10, 14, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467928049, 'comment_body': ""I've realized we should probably have some helper functions for this, so that we can deal with unstructured also!  We might also be able then to eliminate the need for the methods and just use reflection instead, though I'm not sure if that actually helps us that much."", 'comment_created': datetime.datetime(2020, 8, 10, 14, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '4db3a640c86bf781ede2f9acfe01c9006582871a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab8a7aa7a20895bafe0f583e2b1e0446e3d5b09', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8cfe9c3c4f44822cead43251ffaf1e8452aa469', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb413b7c0f82b2e8679704a27186aa1bbd185370', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cacde34cc49fe692169a013742685e5377d0283d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bec825a7803802efe706622fb4d7590c1ace4034', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5a1d50f0ddc7924c20917b4f14b3289a5bb45fe', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
471581861,Aggregate status looks in the correct namespace,,True,120,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/120,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/120,closed,23,14,2,2,4,0,5,2,"[{'name': 'sig/api-machinery'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-08-21 11:37:27+00:00,2020-09-22 14:56:57+00:00,2776770.0,"32 days, 3:19:30",[],"[{'commit_sha': 'bf79716519acdbf9dfa2e6600ae81b3b687aa5e4', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e778f94f2ea7052a94761d9d64acc4c325708f33', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
445284239,Adds function for parsing list,,True,103,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/103,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/103,closed,43,0,1,2,4,7,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-07-07 09:27:54+00:00,2020-07-21 12:03:15+00:00,1218921.0,"14 days, 2:35:21","[{'comment_id': 452206584, 'comment_body': 'Nit: gofmt needed, I think', 'comment_created': datetime.datetime(2020, 7, 9, 13, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452207113, 'comment_body': ""Nit: we should check the group also.  The easy way is to check the APIGroup (which sadly includes the version, but I think that's OK)"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452207350, 'comment_body': 'Nit: please remove debug code :-)', 'comment_created': datetime.datetime(2020, 7, 9, 13, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452207609, 'comment_body': 'Nice find on `EachListItem` :+1: ', 'comment_created': datetime.datetime(2020, 7, 9, 13, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452208671, 'comment_body': ""Nit: renaming castItem to `itemUnstructured` may be clearer (similarly, you might rename `obj` to `itemObject`).  (I do like rust's ability to redefine variables with the same name but with a different type, avoids these problems)"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452209962, 'comment_body': ""I think leigh was suggesting that it might be easier to just keep a second list:\r\n\r\n```\r\nvar out []*manifest.Object\r\n\r\nif IsList(obj) {\r\n  out = append(out, extract(obj))\r\n} else {\r\n  out = append(out, obj)\r\n}\r\nreturn manifest.NewManifest(out)\r\n}\r\n```\r\n\r\nI'm not sure what happens to the iteration when you concurrently modify `infos`!"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452571091, 'comment_body': '😅 Will do', 'comment_created': datetime.datetime(2020, 7, 10, 1, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': 'e64ec1dcf900297d813c3d7a53e603d97c4b79f6', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cda8476a3cda2cf9df0aa078a7279c6f9808d9f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
440687712,Uses new apply function so we don't need kubectl,,True,101,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/101,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/101,closed,137,13,7,3,4,5,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-06-26 16:53:17+00:00,2020-07-02 12:38:47+00:00,503130.0,"5 days, 19:45:30","[{'comment_id': 446976294, 'comment_body': 'Nit we tend not to split these over lines, or if we do we split all the args, one per line', 'comment_created': datetime.datetime(2020, 6, 29, 13, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 446980978, 'comment_body': ""Nit: remove this (I think it's just old code)"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 446981103, 'comment_body': ""Nit: remove if it's old code"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 446981732, 'comment_body': 'Not sure if splitting this function out is worth it vs just inlining it?', 'comment_created': datetime.datetime(2020, 6, 29, 13, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 446982988, 'comment_body': 'Nit: I think having two types might be clearer here - e.g. one `ExecKubectl` and one called `DirectApply`, that both implement the same interface.  We can discuss in our GSoC sync :-)', 'comment_created': datetime.datetime(2020, 6, 29, 13, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '5246099113e2f099f20e146b82710a7c744146cc', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f50d562c85871e8c5bc31960bb1e9cd6dec85b', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8367f1f2086e49e0b85c839bafdb4b94172cead5', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
398504184,Makes file loading more flexible,This puts any objects that cannot be parsed into Unstructured.unstructured into a blob.,True,78,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/78,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/78,closed,166,9,2,3,6,3,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-04-04 10:44:03+00:00,2020-04-13 15:49:49+00:00,795946.0,"9 days, 5:05:46","[{'comment_id': 404935406, 'comment_body': ""Can you increase the log verbosity here? This isn't something we should see by default"", 'comment_created': datetime.datetime(2020, 4, 7, 16, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}, {'comment_id': 407308007, 'comment_body': '@SomtochiAma \r\nDo you have some policies of choice ""5"" in `V`?\r\n\r\n@johnsonj \r\nDo you have some policies of choose of number in `V`?\r\nI checked what numbers are used in current code.\r\nThere are `V(1)` and `V(2)` only.\r\n\r\n```shell\r\n~/go/src/sigs.k8s.io/kubebuilder-declarative-pattern$ grep ""V("" -r ./pkg\r\n./pkg/patterns/declarative/image.go:\t\t\t\tlog.WithValues(""manifest"", manifestItem).WithValues(""registry"", registry).V(1).Info(""applying image registory to manifest"")\r\n./pkg/patterns/declarative/image.go:\t\t\t\tlog.WithValues(""manifest"", manifestItem).WithValues(""secret"", secret).V(1).Info(""applying image pull secret to manifest"")\r\n./pkg/patterns/declarative/pkg/manifest/objects.go:\t\t\tlog.V(5).Info(""Unable to parse into Unstructured, Storing as blob"")\r\n./pkg/patterns/declarative/pkg/manifest/patch.go:\t\tlog.WithValues(""patched"", patched).V(2).Info(""applying patches"")\r\n./pkg/patterns/declarative/pkg/kubectlcmd/client.go:\tlog.WithValues(""stdout"", stdout.String()).WithValues(""stderr"", stderr.String()).V(2).Info(""ran kubectl apply"")\r\n./pkg/patterns/declarative/sort.go:\t\t\tlog.WithValues(""group"", o.Group).WithValues(""kind"", o.Kind).V(2).Info(""unknown group / kind"")\r\n./pkg/patterns/declarative/labels.go:\t\t\tlog.WithValues(""object"", o).WithValues(""labels"", labels).V(1).Info(""add labels to object"")\r\n./pkg/patterns/addon/patch.go:\t\tlog.WithValues(""patch"", patch).V(1).Info(""parsed patch"")\r\n./pkg/patterns/addon/pkg/status/aggregate.go:\t\t\tlog.WithValues(""type"", gk).V(2).Info(""type not implemented for status aggregation, skipping"")\r\n./pkg/patterns/addon/pkg/status/aggregate.go:\tlog.WithValues(""object"", src).WithValues(""status"", status).V(2).Info(""built status"")\r\n```', 'comment_created': datetime.datetime(2020, 4, 13, 4, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 407365190, 'comment_body': 'I will change it to 2 then. I was thinking it had the same numbers as `klog`', 'comment_created': datetime.datetime(2020, 4, 13, 7, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': 'd63354321ace35abfdcfa25460522d3a99c18646', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be04c01afe1f6d98d7f7f5f050784194c744724e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e21ea068a4d256826e57b3920565dac776a035', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
438533971,Moves some functions from Coredns operator that could be reused ,…erator,True,100,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/100,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/100,closed,81,0,1,1,5,0,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-06-23 12:21:26+00:00,2020-06-29 13:37:25+00:00,522959.0,"6 days, 1:15:59",[],"[{'commit_sha': 'aa704f544de49e8ad2b2b96919cb401936091134', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
469990508,Refactors code to set and get status from object,,True,118,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/118,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/118,closed,88,143,6,1,5,8,5,1,"[{'name': 'sig/api-machinery'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-08-19 07:59:30+00:00,2020-10-08 14:22:17+00:00,4342967.0,"50 days, 6:22:47","[{'comment_id': 492733208, 'comment_body': 'Is this intended?  Should we add these two fields in a separate PR?', 'comment_created': datetime.datetime(2020, 9, 22, 13, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 492735860, 'comment_body': ""I probably would have just inlined this function each time, but I guess it's nice that it is consistent! :+1: \r\n"", 'comment_created': datetime.datetime(2020, 9, 22, 13, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 492737482, 'comment_body': 'Should be `log`, rather than using fmt which will go to stdout.', 'comment_created': datetime.datetime(2020, 9, 22, 13, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 492737871, 'comment_body': ""I'm a little uneasy about introducing this in this refactor PR"", 'comment_created': datetime.datetime(2020, 9, 22, 13, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 493096792, 'comment_body': 'nit: replace `CommonSpec` with `CommonStatus`', 'comment_created': datetime.datetime(2020, 9, 22, 23, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 493252605, 'comment_body': 'Thanks. I could change it if that would be more concise.', 'comment_created': datetime.datetime(2020, 9, 23, 7, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 493252899, 'comment_body': 'Sure. I will change it', 'comment_created': datetime.datetime(2020, 9, 23, 7, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 501759157, 'comment_body': ""Nit - if you're not going to need error out side the block, it's probably better to do either `err := ...` or `if err := foo(); err != nil`"", 'comment_created': datetime.datetime(2020, 10, 8, 14, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '462d6f72bceb4b8a84acfbd96c3e15930a4e74bf', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
466005007,Adds helper functions,,True,116,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/116,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/116,closed,88,46,4,2,5,2,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-08-11 10:07:25+00:00,2020-08-13 13:42:14+00:00,185689.0,"2 days, 3:34:49","[{'comment_id': 468556764, 'comment_body': ""There is a pattern that is sometimes used in parsing https://blog.golang.org/errors-are-values\r\n\r\nHowever in this case because the methods are different it's better just to repeat the `if err != nil` block 3 times.\r\n\r\nIt might be we combine GetCommonName / GetCommonVersion / GetCommonChannel into GetCommonSpec in future, in which case we'd only have one error check."", 'comment_created': datetime.datetime(2020, 8, 11, 12, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 469175440, 'comment_body': 'Great article! I always wondered about the frequency of `if err != nil `. ', 'comment_created': datetime.datetime(2020, 8, 12, 10, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': 'ff10940292be96663aa0e8e144b332456f9fc7bc', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da257690f80cd9f1ef718cc1f23259b05107212b', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
434025723,Takes in manifest and generates role,,True,68,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/68,https://github.com/kubernetes-sigs/cluster-addons/pull/68,closed,1074,0,12,10,5,12,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'ok-to-test'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-06-13 16:18:42+00:00,2020-06-29 14:01:26+00:00,1374164.0,"15 days, 21:42:44","[{'comment_id': 442842558, 'comment_body': 'It might be easier to use the structs from k8s.io/api here, e.g. https://github.com/kubernetes/api/blob/49be0e3344fe443eb3d23105225ed2f1ab1e6cab/rbac/v1/types.go#L167', 'comment_created': datetime.datetime(2020, 6, 19, 13, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442842908, 'comment_body': 'Should comment be two lines lower?', 'comment_created': datetime.datetime(2020, 6, 19, 13, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442843665, 'comment_body': 'Tip: I like to do this:\r\n\r\n```\r\nfunc main() {\r\n  err := run()\r\n  if err != nil {\r\n    fmt.Fprintf(os.Stderr, ""%v\\n"", err)\r\n    os.Exit(1)\r\n  }\r\n}\r\n\r\nfunc run() error {\r\n... real work....\r\n}\r\n```\r\n\r\nbecause then we can just return an error.  Two advantages:\r\n\r\n* A little more compact\r\n* It makes it easier to refactor the code into functions; the top-level function is a special-case in terms of error handling, so I try to make that special-case as small as possible.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442844290, 'comment_body': ""Nit: it's clearer (IMO) without the line break between the thing which generates the error and which checks the error\r\n\r\n```\r\na, err := foo()\r\nif err != nil {\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 6, 19, 13, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442845621, 'comment_body': 'Technically the key should include the api group, in case two kinds are named the same in two apigroups.\r\n\r\nTwo ways to do that:\r\n\r\n* Invent some delimiter that is ""safe"": `m[obj.APIGroup + ""::"" + obj.Kind] = true`\r\n* Use a struct:\r\n\r\n```\r\nstruct key {\r\n  APIGroup string\r\n  Kind string\r\n}\r\n```\r\n\r\nFor cases like this where I\'m not really reading the values back, I tend to just use the string trick.  If I\'m reading them back or parsing the keys I tend to use a struct.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442846405, 'comment_body': ""Alternatives:\r\n\r\n* `map[string]bool` lets you do `if m[obj.Kind] {` and I tend to use this\r\n* `map[string]struct{}` is the go way of writing that there are no values, so it is a little more memory efficient.  You have to use the longer way of checking though (as you've done here), so if it's not verified as performance critical I tend to use the simpler boolean form."", 'comment_created': datetime.datetime(2020, 6, 19, 13, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442846830, 'comment_body': ""There's a pluralize helper in kubebuilder I think, which I guess we should probably use.  I agree this is annoying though :-)\r\n\r\nIt's technically the resource name, which might be completely different to the kind.  In practice, it's the plural (and lower cased)."", 'comment_created': datetime.datetime(2020, 6, 19, 13, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442848052, 'comment_body': 'Tip: It can be easier just to write to stdout by default.  You can always pipe it somewhere in a shell.\r\n\r\nMost flexible option is to take a flag like ""out"".  If you pass `--out=-` then write to stdout, otherwise treat it as a file.\r\n\r\n```\r\nvar w io.Writer\r\nif out == ""-"" {\r\n  w = os.Stdout\r\n} else {\r\n  f, err := os.Create(out)\r\n  if err != nil ...\r\n  defer f.Close()\r\n  w = f\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 13, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442848493, 'comment_body': ""I like it.  There is a function in kubebuilder that does something similar, but I suspect your function here might be more robust - and definitely easier to understand!\r\n\r\nI'm fine if we want to leave this as is :-)"", 'comment_created': datetime.datetime(2020, 6, 19, 13, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442848895, 'comment_body': 'Would be great to make this into a golden-test :-)', 'comment_created': datetime.datetime(2020, 6, 19, 13, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 443091851, 'comment_body': 'This is nice. Reduce code for error handling', 'comment_created': datetime.datetime(2020, 6, 20, 1, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 446990766, 'comment_body': 'Nit: we might want a string enum (as otherwise we tend to end up with lots of flags :-) )', 'comment_created': datetime.datetime(2020, 6, 29, 13, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '522b3f2629de0c15a155437fd580905ed67626e3', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f06f74018fc078c58f688f4e0a9d9db39a654fc3', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a69ab1bf828210aeb96ee76574ee1b057fc1374d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7638406f484f60fd8ea64318d669bdb44827d264', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '888d7ac0fd0cd350a590031f17e7ba302bda9042', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc5f9a4ecb6d8a6967cc19ae26e098b8f7049eee', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42c790ed4a3353fef1ffe9284ed82240a5724845', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4af1f3a025b07d99aad11698f2dae83b7e6c7e5e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da8ebc6c553a78adb7e87b353f870b482c84ea5f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a256085e54be72817afe9a06af0a92989b9b9b0', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
447432687,Kubectl plugin for resources that have a particular ownerref,,True,73,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/73,https://github.com/kubernetes-sigs/cluster-addons/pull/73,closed,840,0,3,7,3,11,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XL'}, {'name': 'ok-to-test'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-07-10 13:13:37+00:00,2020-07-30 11:32:31+00:00,1721934.0,"19 days, 22:18:54","[{'comment_id': 462923361, 'comment_body': 'We probably want to evolve this to use the shared code from cli-runtime, for example https://github.com/kubernetes/sample-cli-plugin', 'comment_created': datetime.datetime(2020, 7, 30, 11, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462923558, 'comment_body': 'I needed to add `_ ""k8s.io/client-go/plugin/pkg/client/auth""` to auth to a GKE cluster', 'comment_created': datetime.datetime(2020, 7, 30, 11, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462923826, 'comment_body': 'Nit: you can just return the error here, as you handle it by calling os.Exit(1)', 'comment_created': datetime.datetime(2020, 7, 30, 11, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462924524, 'comment_body': ""Nit: It's usually clearer if you start off by assigning `kind := os.Args[1]` and `name := os.Args[2]` early in the method.  Effectively parse/process the args first, then use the processed values. "", 'comment_created': datetime.datetime(2020, 7, 30, 11, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462925027, 'comment_body': 'Another nit; you should probably log a warning if PrintResource returns an error, e.g. with klog.Warningf', 'comment_created': datetime.datetime(2020, 7, 30, 11, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462925366, 'comment_body': 'I believe there are some nice helpers for this in cli-runtime', 'comment_created': datetime.datetime(2020, 7, 30, 11, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462926206, 'comment_body': 'You can also use schema.ParseGroupVersion', 'comment_created': datetime.datetime(2020, 7, 30, 11, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462926590, 'comment_body': ""Can we have a TODO here to resolve the kind.  (I think it's fine to do later, but I hit this when I tried doing `kubectl ownerref rs foo`, instead of `kubectl ownerref replicaset foo`)"", 'comment_created': datetime.datetime(2020, 7, 30, 11, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462927223, 'comment_body': ""Idea to speed this up in future: we can run these in parallel.  We likely need some limit, so it's going to be tricky, but that will speed things up a lot!"", 'comment_created': datetime.datetime(2020, 7, 30, 11, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462928465, 'comment_body': ""I think the rules on ownerrefs are that a cluster-scoped object can own a cluster-scoped object or a namespace-scoped object.  A namespace-scoped object can only own a namespace-spaced object in the same namespace.\r\n\r\nIf I'm remembering those rules correctly, we can probably prune the search space a little bit.  It looks like you're passing in the namespace, which is good when `resource` is namespace-scoped.  If namespace is cluster-scoped, we probably shouldn't pass in a namespace.\r\n\r\nIf the object we're looking for is cluster scoped, we can likely skip namespace-scoped resources.  But... I'd imagine that will be relatively rare."", 'comment_created': datetime.datetime(2020, 7, 30, 11, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462929528, 'comment_body': ""Another potential optimization: I think it's possible to just get the ObjectMeta, see e.g. https://github.com/kubernetes/kubernetes/pull/77819"", 'comment_created': datetime.datetime(2020, 7, 30, 11, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '27ec18891652cd63cdb5a1be446ffb2e399af9be', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41861f0b54bd977a9645057d316b0fe087280a49', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93e5a7522140a9def01423a6ec546e7ca59b8c6c', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74476e1d419bcb9e8098fec9c709f511b3a71e0f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a80fbe0aba038064738622e1bcd3afebf1f49805', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426f58716535a9505cdd62f5016dcb1a94490079', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95594bcbf8455317929e14c374e92031ad5d98a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
455820024,Generic controller,,True,75,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/75,https://github.com/kubernetes-sigs/cluster-addons/pull/75,closed,3409,44,64,13,11,7,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'ok-to-test'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-07-23 16:17:06+00:00,2020-08-16 13:56:18+00:00,2065152.0,"23 days, 21:39:12","[{'comment_id': 462931876, 'comment_body': 'Nit: We can remove the `<---` marker :-)', 'comment_created': datetime.datetime(2020, 7, 30, 11, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462932271, 'comment_body': 'Nit: I think we should have a TODO to say ""add a watch on Generic, respond to changes"" or something like that', 'comment_created': datetime.datetime(2020, 7, 30, 11, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462932751, 'comment_body': ""I actually don't think we need these rbac permissions.  I guess we want get/list/watch on generics, but you could also move than to main.go."", 'comment_created': datetime.datetime(2020, 7, 30, 11, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462933190, 'comment_body': 'Nit: I think this should say ""Watch for changes to the objectKind"" or something like that', 'comment_created': datetime.datetime(2020, 7, 30, 11, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 463793877, 'comment_body': 'Is there any difference, moving it to `main.go`', 'comment_created': datetime.datetime(2020, 7, 31, 19, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 466312706, 'comment_body': 'Error. The line `COPY addons/ addons/` should be changed to ` COPY channels/ channels/` otherwise docker build will fail. @SomtochiAma ', 'comment_created': datetime.datetime(2020, 8, 6, 10, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cmoulliard', 'type': 'User'}]","[{'commit_sha': 'ab772bb6d7fdab65bbb14f896823128d390d6e59', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac573da184666da6f4aec5f8198d5bc8a8fcffb1', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b02b33871ae5ee0bb9b5be6deadae5d8f30d982', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4965deff33527b9a2db5534f1e6ecf343eb34d8c', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '703f80ad18440db58c5d9ab71db972f80be094bb', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0add6c11f77b4aad6a9110e16d833c1a04e3804f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1d47cb77222e3e0396f481a4e44a6a858ee74f1', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a4e5febb3ad962dabc903ec9c6c8d75226f8f4', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47fa845375829b82f1a1f8bc0bddaab9e107f33a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0403bf1d591b6de729a3b9919abaf47f02a0a2b3', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c65e4fd9a8505d5d1bae691c87ec4b6e6009e9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21073c931dc6e6255a7e350165394d9a9dd95648', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69df19f264e0b24c6d5ed95cc358ad878321286', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
381432704,Operator for the Kubernetes dashboard,This is a pull request to add an operator for the Kubernetes dashboard,True,44,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/44,https://github.com/kubernetes-sigs/cluster-addons/pull/44,closed,4015,0,58,8,8,7,4,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-02-28 14:56:34+00:00,2020-03-17 14:52:23+00:00,1554949.0,"17 days, 23:55:49","[{'comment_id': 390748373, 'comment_body': 'Add setting for building manifests of Application CR because dashboard operator use it.\r\n\r\n```suggestion\r\n- bases/addons.k8s.io_dashboards.yaml\r\n- bases/app.k8s.io_application.yaml\r\n```', 'comment_created': datetime.datetime(2020, 3, 11, 5, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390751959, 'comment_body': 'Dashboard operator is not demo of the kubebuilder-declarative-pattern no longer.\r\nWe can delete this.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 3, 11, 5, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753529, 'comment_body': '@johnsonj \r\nWhat value should we change with?\r\nThis value is `maintainer@example.org` since [v1.8.3 in kubebuilder-declarative-pattern](https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/blob/master/examples/dashboard-operator/channels/packages/dashboard/1.8.3/manifest.yaml#L188)\r\n\r\nOr, can we change here with below?\r\n```suggestion\r\n      url: https://github.com/kubernetes/dashboard\r\n```', 'comment_created': datetime.datetime(2020, 3, 11, 5, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753680, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2020, 3, 11, 5, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753714, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2020, 3, 11, 5, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753762, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2020, 3, 11, 5, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753777, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2020, 3, 11, 5, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}]","[{'commit_sha': '3c8ecf1404096b8cacc75af98b29851fb383bf89', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a423e7b41e6aedbb843a255154738c6fcc5093', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f51761c71d7ca81b3c530fcc6d4d3d068fdbb9d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6a1371d030631e137aa7ebdfbb874142d3eca68', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345ccda31f8082b894ae375a75940b66976f5dfe', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d03919311eec7e9f3ae7615bb29eff1098a1c9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd9dc05635ea4505f21ba970830c80242e707a28', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4a572a1345357c67f8cb6ac2a69e32bdbe551c1', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
437442586,Flannel Operator,,True,69,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/69,https://github.com/kubernetes-sigs/cluster-addons/pull/69,closed,3800,0,56,8,7,0,5,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'needs-ok-to-test'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-06-20 18:05:03+00:00,2020-06-29 13:55:26+00:00,762623.0,"8 days, 19:50:23",[],"[{'commit_sha': 'be362c99cd9577ba4ca30eb3f158097de47c4ef4', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23a1ee79f19a08e70a3f7f04fdb0a3c4bdc73826', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f7e562b2c0bed154b40917aa149488c950aff4c', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcbb5200d9935e6da3df2c64eed313e336b71fb2', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0c5fc986e8085f1e8cb04d7a41e6058a5f53899', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed6a2b0ae83ba2093d83632034b9e9651b514ca0', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0266c342a61cafb5393e491c08300f3679e0b480', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba1c9c1b5d8005f7d6b0c364bf31cdf9a2caf882', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
427904454,NodeLocalDNS operator,"This is for the localnodedns operator

- [x] Boilerplate
- [x] Ensure it runs out of the cluster
- [x] Ensure it runs in-cluster
- [x] Golden file tests",True,59,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/59,https://github.com/kubernetes-sigs/cluster-addons/pull/59,closed,2662,0,52,10,7,18,4,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-06-04 15:08:50+00:00,2020-06-29 14:15:26+00:00,2156796.0,"24 days, 23:06:36","[{'comment_id': 439603394, 'comment_body': 'Here, we can try to fetch the Cluster IP from the `kube-dns` service.\r\n`kubectl get svc kube-dns -n kube-system -o jsonpath={.spec.clusterIP}`\r\n\r\nIf we are unable to determine, then we can use the default value.', 'comment_created': datetime.datetime(2020, 6, 12, 19, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439604887, 'comment_body': 'Nit: newline', 'comment_created': datetime.datetime(2020, 6, 12, 19, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439616262, 'comment_body': 'The test file seems empty. How are the golden test files generated?', 'comment_created': datetime.datetime(2020, 6, 12, 19, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439622391, 'comment_body': '~The `__PILLAR__CLUSTER__DNS__` placeholder values should probably be generated properly~\r\n\r\nNvm, looks like the automatically updated Corefile values reflected only in the logs as per https://github.com/kubernetes/dns/blob/9903307a652efd77d5de40fdab3bfcd468fd1c74/cmd/node-cache/app/configmap.go#L67', 'comment_created': datetime.datetime(2020, 6, 12, 20, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439622611, 'comment_body': '~The `__PILLAR__UPSTREAM__SERVERS__` placeholder values should probably be generated properly~\r\n\r\nNvm, looks like the automatically updated Corefile values reflected only in the logs as per https://github.com/kubernetes/dns/blob/9903307a652efd77d5de40fdab3bfcd468fd1c74/cmd/node-cache/app/configmap.go#L67', 'comment_created': datetime.datetime(2020, 6, 12, 20, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439624338, 'comment_body': 'Does node-local-cache need/use an application?', 'comment_created': datetime.datetime(2020, 6, 12, 20, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439724344, 'comment_body': 'Sorry, That was a mistake', 'comment_created': datetime.datetime(2020, 6, 13, 9, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 439724675, 'comment_body': 'There are similar functions in the coredns-operators for finding the ClusterIP and DNS Domain for a cluster. Maybe we could reuse it? Wdyt?', 'comment_created': datetime.datetime(2020, 6, 13, 9, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 439725499, 'comment_body': 'I actually thought all addons needed an application. What qualifies an addon to use an application?', 'comment_created': datetime.datetime(2020, 6, 13, 9, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 442820272, 'comment_body': 'This file is auto-generated I believe - is this a bug in our kubebuilder plugin?', 'comment_created': datetime.datetime(2020, 6, 19, 12, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442821527, 'comment_body': ""We don't *require* an application.\r\n\r\nI think it's a good idea to have one, it means we have a consistent object that groups the addon contents.  Some UIs (for example GKE's) will display Applications nicely.\r\n\r\nI know sig-apps is having some debates about Application, but until we have something better, I think we want _something_, so let's use an Application.  If something better comes along, we can then easily replace Applications with new-thing!"", 'comment_created': datetime.datetime(2020, 6, 19, 12, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442825156, 'comment_body': 'This is going to be annoying feedback, so I\'m sorry in advance...\r\n\r\nShould we name it ""LocalNodeDNS"" or ""NodeLocalDNS"" or ""DNSNodeCache""?  We want to be consistent with other names.\r\n\r\nI\'ve always personally called in NodeLocalDNS.  We should probably pick whatever name is most commonly used (with luck, that will be LocalNodeDNS!).\r\n\r\nThe names inside the code don\'t matter as much as the CRD name - it\'s the CRD name that users will interact with.', 'comment_created': datetime.datetime(2020, 6, 19, 12, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442826733, 'comment_body': 'In general, use logging functions over stdout / stderr.  So either `klog.Warningf(""error determining kube-proxy mode...`) or `log.Log(""error determining kube-proxy mode...`.\r\n\r\nYou also should include the error, otherwise it\'s really hard for someone that sees the log to know what went wrong; for example:\r\n\r\n`klog.Warningf(""error determining kube-proxy mode, defaulting to iptables: %v"", err)`\r\n\r\nI think log has a dedicated helper:\r\n\r\n`log.Error(err, ""error determining kube-proxy mode, defaulting to iptables"")` \r\n\r\nLogging in kubernetes is generally in flux right now; we\'re moving to structured logging (log) but doing so by adding it to klog (I think)  https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/1602-structured-logging', 'comment_created': datetime.datetime(2020, 6, 19, 13, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442829416, 'comment_body': ""Yes, we should start to create a shared library of these functions.  I think probably in kubebuilder-declarative-pattern, because if e.g. the DNS team takes on ownership of this operator this repo may eventually end up pretty empty :-)\r\n\r\nI think we can do this in a follow on PR, if you'd like.  (You can add a TODO here so we don't forget)"", 'comment_created': datetime.datetime(2020, 6, 19, 13, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442979283, 'comment_body': 'Aah, makes sense. I should add one for the coredns operator then.', 'comment_created': datetime.datetime(2020, 6, 19, 18, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 442979869, 'comment_body': 'I think the ""official"" name is NodeLocalDNS (I\'m using https://github.com/kubernetes/kubernetes/tree/release-1.18/cluster/addons/dns/nodelocaldns as reference), so I think we should follow that.', 'comment_created': datetime.datetime(2020, 6, 19, 18, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 443091201, 'comment_body': 'I doubt. I edit the file somewhere along the line. But I will generate a new operator and check, to be sure', 'comment_created': datetime.datetime(2020, 6, 20, 1, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 443091314, 'comment_body': 'I think NodeLocalDNS is the one that is most commonly use. Should I manually change all occurrences of the name(I think this is error-prone) or generate a new operator with the new name. ', 'comment_created': datetime.datetime(2020, 6, 20, 1, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': 'c5c9283d4d3d7bd0478de155c4a3d671af0f1fb6', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e25a0da9d1f5762a0d2046ef82cc57dc33085e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd7748c23ed8c73efc7564714cc2246d14286fb9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673aaa339c58079f5df4d1ef007fe7b4fdd428ef', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129b27bbab6a2a277892aea5af9abadad1ddb3c4', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c9107ac5dae5d72ed45e5e8f84a707e8f378bf', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c483a5b0d89a228e02c0ecb06a328b764e6760d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0fa09a155a2179547dd59fcd3336e587a45e80e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b198c9bff54e4a866db043237e63b04030a74dcc', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f26542e26b6bbca8931fa62e7b9bef10499f88', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
426325790,Makes controller run in-cluster,,True,1,https://api.github.com/repos/johnsonj/addon-operators/pulls/1,https://github.com/johnsonj/addon-operators/pull/1,closed,575,16,12,3,0,10,0,0,[],2020-06-02 03:22:12+00:00,2020-06-10 14:34:48+00:00,731556.0,"8 days, 11:12:36","[{'comment_id': 436038749, 'comment_body': 'This is a notable change -- I think it does make sense.\r\nThe Namespace of the CustomResource can be used to patch the manifests.\r\nMost clusters will only have 1 instance of this CR, but containing it within a namespace like `kube-system` could make RBAC and ownership more clear.\r\nYou *could* manage kube-proxy daemonsets for different Node Groups in separate Namespaces.', 'comment_created': datetime.datetime(2020, 6, 5, 16, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 436039957, 'comment_body': 'this is a reasonable default :+1:\r\nusers can override for esoteric deploys', 'comment_created': datetime.datetime(2020, 6, 5, 16, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 436040778, 'comment_body': 'I think these keys should go into an `apiserver-endpoint.patch.yaml`.\r\nYou can then include that patch in the `kustomization.yaml`', 'comment_created': datetime.datetime(2020, 6, 5, 16, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 436041791, 'comment_body': ""Same story here -- I think these should be separated into `tolerate-controlplane.patch.yaml`\r\nIt's actually possible to create a separate variant for this kind of install, but starting with separate patches is a good step."", 'comment_created': datetime.datetime(2020, 6, 5, 16, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 436042868, 'comment_body': ""These RBAC additions look good.\r\nI think they should be moved to the `role.yaml` which is the primary role bound to the operator's ServiceAccount."", 'comment_created': datetime.datetime(2020, 6, 5, 16, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 436099485, 'comment_body': 'This is inline with the existing operators (eg coredns). I think I generated this CRD incorrectly by not picking Namespaced from the onset. \r\n\r\nReally great point about different node groups.', 'comment_created': datetime.datetime(2020, 6, 5, 18, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}, {'comment_id': 438168071, 'comment_body': 'If I run `make manifests` will this get overwritten? If so, it may make more sense to have the user edit the patch (`patches/apiserver_endpoint.patch.yaml`)', 'comment_created': datetime.datetime(2020, 6, 10, 14, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}, {'comment_id': 438169096, 'comment_body': 'Do you know why the dashboard operator and kind are getting pulled into this file? Maybe a weird local cache issue?', 'comment_created': datetime.datetime(2020, 6, 10, 14, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}, {'comment_id': 438194043, 'comment_body': ""That's weird. I would look into it"", 'comment_created': datetime.datetime(2020, 6, 10, 15, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 438289289, 'comment_body': 'True. That should change', 'comment_created': datetime.datetime(2020, 6, 10, 17, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': '2eddc479e2fb78e65a9afe3070fe1117b15f2571', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3be60ae148492a8eeb515909c3afcc71100505e5', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b965cf3f4f3f620e5dfbd7d30599b4c6cbbde04e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
426351462,Golden files test for kube proxy,,True,2,https://api.github.com/repos/johnsonj/addon-operators/pulls/2,https://github.com/johnsonj/addon-operators/pull/2,closed,208,12,4,1,1,0,0,0,[],2020-06-02 05:01:59+00:00,2020-06-05 18:37:29+00:00,308130.0,"3 days, 13:35:30",[],"[{'commit_sha': '8019c20003d70727ddb9d529afad90e7ea03c8f9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
433090283,Tidy up the operator and ensure create-cluster.sh works,"@johnsonj I couldn't make the pull request to the cluster addons repo because yours hasn't been merged. This pr
- Updates controller-runtime
-Cleans up the go.mod file
- Updates README.md and test
- Edit the create-cluster.sh script to work[The config flag no longer works with kinder]",True,3,https://api.github.com/repos/johnsonj/addon-operators/pulls/3,https://github.com/johnsonj/addon-operators/pull/3,closed,150,589,6,1,1,0,0,0,[],2020-06-11 13:43:53+00:00,2020-06-11 15:02:45+00:00,4732.0,1:18:52,[],"[{'commit_sha': '82cac3696c004a32acce396f20076b8688b21bd9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
433363247,Updates go versiom,,True,4,https://api.github.com/repos/johnsonj/addon-operators/pulls/4,https://github.com/johnsonj/addon-operators/pull/4,closed,2,2,2,1,1,0,0,0,[],2020-06-11 22:25:01+00:00,2020-06-11 23:18:21+00:00,3200.0,0:53:20,[],"[{'commit_sha': '9e0a7df5248d7ed2965ea980030ba9a0944dd33c', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
444136121,Uses packages from declarative pattern repo,,True,71,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/71,https://github.com/kubernetes-sigs/cluster-addons/pull/71,closed,63,10,4,1,3,1,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'ok-to-test'}, {'name': 'approved'}, {'name': 'size/M'}, {'name': 'lgtm'}]",2020-07-03 16:47:16+00:00,2020-07-09 13:44:31+00:00,507435.0,"5 days, 20:57:15","[{'comment_id': 452212487, 'comment_body': 'We should figure out when we want to create a version in kubebuilder-declarative-pattern :-)', 'comment_created': datetime.datetime(2020, 7, 9, 13, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': 'd69b7a0a890401ea108c66aeab254ab90acf5c5e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
379060433,Adds docs on how to run operator locally,This PR adds how to run the operator locally.,True,42,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/42,https://github.com/kubernetes-sigs/cluster-addons/pull/42,closed,12,0,1,1,4,4,4,1,"[{'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/S'}, {'name': 'lgtm'}]",2020-02-24 15:42:41+00:00,2020-02-24 17:56:50+00:00,8049.0,2:14:09,"[{'comment_id': 383392957, 'comment_body': ""Thanks for adding this @SomtochiAma !\r\n\r\nWe're using Go modules for this project so a user shouldn't need to set GOPATH. Do these instructions work with setting `GO111MODULE=on` instead of GOPATH=..? \r\n\r\nInstead of go build and running bin/manager, i'd suggest putting `make run` after `make install`. This ensures all files are generated."", 'comment_created': datetime.datetime(2020, 2, 24, 17, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}, {'comment_id': 383403773, 'comment_body': 'Okay. I will try to do it without setting GOPATH and if it works, I will update the PR.', 'comment_created': datetime.datetime(2020, 2, 24, 17, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 383416118, 'comment_body': 'The ""generate"" command in the make file checks if the GOPATH is set else it exits with an error. Therefore make run need the GOPATH Set.', 'comment_created': datetime.datetime(2020, 2, 24, 17, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 383420685, 'comment_body': ""Ohh- thank you! Let's go with this as it is then. We're still in the weird world where go modules exists, but not everywhere :) "", 'comment_created': datetime.datetime(2020, 2, 24, 17, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}]","[{'commit_sha': '7a6894a72c4919747e2186fdf6a93a2d0fd10b77', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
417647862,Readme for dashboard operator and updates stable version,,True,56,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/56,https://github.com/kubernetes-sigs/cluster-addons/pull/56,closed,76,11,3,2,2,4,4,1,"[{'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/M'}, {'name': 'lgtm'}]",2020-05-13 22:33:45+00:00,2020-05-15 18:45:37+00:00,159112.0,"1 day, 20:11:52","[{'comment_id': 425367352, 'comment_body': 'ack removal of Application CustomResource', 'comment_created': datetime.datetime(2020, 5, 14, 19, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 425455900, 'comment_body': ""Here's one more thing we can help the reader understand :)\r\n`````suggestion\r\n\r\nNow in another terminal, create an instance of the Dashboard custom resource:\r\n\r\n```bash\r\nkubectl create ns kubernetes-dashboard\r\nkubectl -n kubernetes-dashboard apply -f config/samples/addons_v1alpha1_dashboard.yaml\r\n```\r\n\r\nYou should see the operator respond and apply the resources from your package.\r\n\r\n`````"", 'comment_created': datetime.datetime(2020, 5, 14, 22, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 425458757, 'comment_body': ""Caught some small typos here /w `mkdoir` and `kubectl apply`.\r\n\r\nIt can be a bit clunky to ask a user to `cd` into directories, because you need to instruct them to `cd` back out.\r\nHere's a simpler method:\r\n`````suggestion\r\nMake a directory under `channels/packages/dashboard` for a stable version of the dashboard -- then download the manifest for it:\r\n```bash\r\nmkdir -p channels/packages/dashboard/2.0.0\r\nwget -O channels/packages/dashboard/2.0.0/manifest.yaml https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml\r\n```\r\n\r\n`````"", 'comment_created': datetime.datetime(2020, 5, 14, 22, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 425459158, 'comment_body': '```suggestion\r\n# Determine a stable version and include its manifest:\r\n```', 'comment_created': datetime.datetime(2020, 5, 14, 22, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}]","[{'commit_sha': '6bbcd08b046768b99193cd4ffc2e5a3e7c5bca44', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f477452b91063a4695a292a2c99a184054bf2e18', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
390305783,Updates installer instructions for Mac OS,,False,49,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/49,https://github.com/kubernetes-sigs/cluster-addons/pull/49,closed,5,2,2,3,9,1,4,2,"[{'name': 'cncf-cla: yes'}, {'name': 'lifecycle/rotten'}, {'name': 'size/XS'}, {'name': 'lgtm'}]",2020-03-18 09:00:36+00:00,2020-12-03 05:50:04+00:00,22452568.0,"259 days, 20:49:28","[{'comment_id': 413553479, 'comment_body': ""In Mac, `make binary` is called and it calls `autogen` and `vendor` prerequisites, on the other hand, In Linux, this target calls `$(MAKE) shell ...` which doesn't call  `autogen` and `vendor` prereqiusites.\r\nSo, this is not same action, I think.\r\n\r\nHow about change [`shell` target](https://github.com/kubernetes-sigs/cluster-addons/blob/af88a3421fa5edcad9666e9a8eefe91298cb3612/installer/Makefile#L12-L23) to add `GOOS` and `GOARCH` on `docker run` in Mac?\r\nWhen specify `GOOS=darwin` and `GOARCH=amd64`, go compiles binary for Mac."", 'comment_created': datetime.datetime(2020, 4, 23, 6, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}]","[{'commit_sha': '1c0e9d27d30e355c6a9ab8f3cc170648c6b34d4d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '816ed2c2d950abbb70228951c1756c947fb7f910', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04571e3339ef07730d10cec86fce85afa455d738', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
383136011,Updates CoreDNS readme for kubebuilder 2.0,Some of the information in the readme is no longer relevant with kubebuilder 2.0. This pull request updates the readme.,True,45,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/45,https://github.com/kubernetes-sigs/cluster-addons/pull/45,closed,5,22,1,2,3,1,4,1,"[{'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/S'}, {'name': 'lgtm'}]",2020-03-03 19:36:33+00:00,2020-03-04 16:45:48+00:00,76155.0,21:09:15,"[{'comment_id': 387515734, 'comment_body': '```suggestion\r\nkubebuilder init --fetch-deps=false --domain=k8s.io --license=apache2\r\n```', 'comment_created': datetime.datetime(2020, 3, 4, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}]","[{'commit_sha': 'b07542e3b506b91d2d9bf9d36ac738d0241817c6', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cab4bdf23b6adb698938d2a82a3838c782b5ef7', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
417653991,Removes some steps that are now been built into kubebuidler,,True,96,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/96,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/96,closed,0,49,1,1,5,0,6,2,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-05-13 22:52:24+00:00,2020-05-22 14:48:38+00:00,748574.0,"8 days, 15:56:14",[],"[{'commit_sha': '0ecb227e272024462cbfd77667b7dd3116ac1a1e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
471670144,Centralize Documentations and README.md,This pull request is for centralizing the documentation in cluster-addons and making the documentation more interesting and clearer to whoever is poking around. Reviews and suggestions are welcome from everyone @rajansandeep @dholbach @stealthybox @justinsb .,True,78,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/78,https://github.com/kubernetes-sigs/cluster-addons/pull/78,closed,120,49,4,3,3,2,4,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/L'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-08-21 14:32:36+00:00,2020-09-04 16:59:41+00:00,1218425.0,"14 days, 2:27:05","[{'comment_id': 475700551, 'comment_body': '```suggestion\r\nWe are also exploring other concepts such as managing different simple addons with a single controller to reduce consumption of resources and make it dead simple to manage addons. We welcome you to create your own addon operators and try using the ones created by this community.\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 15, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}, {'comment_id': 480472824, 'comment_body': '```suggestion\r\n## Usage\r\n```', 'comment_created': datetime.datetime(2020, 8, 31, 23, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}]","[{'commit_sha': '00064796d12ab95dd1a4782f9166a6b3ca2d644d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7804dad9f1fd8bf0c1a39fe9ad37e1bb71f49cd9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbfe711b8eea300547c8683e6bc04da11f046056', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
455820024,Generic controller,,True,75,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/75,https://github.com/kubernetes-sigs/cluster-addons/pull/75,closed,3409,44,64,13,11,7,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'ok-to-test'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-07-23 16:17:06+00:00,2020-08-16 13:56:18+00:00,2065152.0,"23 days, 21:39:12","[{'comment_id': 462931876, 'comment_body': 'Nit: We can remove the `<---` marker :-)', 'comment_created': datetime.datetime(2020, 7, 30, 11, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462932271, 'comment_body': 'Nit: I think we should have a TODO to say ""add a watch on Generic, respond to changes"" or something like that', 'comment_created': datetime.datetime(2020, 7, 30, 11, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462932751, 'comment_body': ""I actually don't think we need these rbac permissions.  I guess we want get/list/watch on generics, but you could also move than to main.go."", 'comment_created': datetime.datetime(2020, 7, 30, 11, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462933190, 'comment_body': 'Nit: I think this should say ""Watch for changes to the objectKind"" or something like that', 'comment_created': datetime.datetime(2020, 7, 30, 11, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 463793877, 'comment_body': 'Is there any difference, moving it to `main.go`', 'comment_created': datetime.datetime(2020, 7, 31, 19, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 466312706, 'comment_body': 'Error. The line `COPY addons/ addons/` should be changed to ` COPY channels/ channels/` otherwise docker build will fail. @SomtochiAma ', 'comment_created': datetime.datetime(2020, 8, 6, 10, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cmoulliard', 'type': 'User'}]","[{'commit_sha': 'ab772bb6d7fdab65bbb14f896823128d390d6e59', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac573da184666da6f4aec5f8198d5bc8a8fcffb1', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b02b33871ae5ee0bb9b5be6deadae5d8f30d982', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4965deff33527b9a2db5534f1e6ecf343eb34d8c', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '703f80ad18440db58c5d9ab71db972f80be094bb', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0add6c11f77b4aad6a9110e16d833c1a04e3804f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1d47cb77222e3e0396f481a4e44a6a858ee74f1', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2a4e5febb3ad962dabc903ec9c6c8d75226f8f4', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47fa845375829b82f1a1f8bc0bddaab9e107f33a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0403bf1d591b6de729a3b9919abaf47f02a0a2b3', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c65e4fd9a8505d5d1bae691c87ec4b6e6009e9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21073c931dc6e6255a7e350165394d9a9dd95648', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69df19f264e0b24c6d5ed95cc358ad878321286', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
447432687,Kubectl plugin for resources that have a particular ownerref,,True,73,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/73,https://github.com/kubernetes-sigs/cluster-addons/pull/73,closed,840,0,3,7,3,11,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XL'}, {'name': 'ok-to-test'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-07-10 13:13:37+00:00,2020-07-30 11:32:31+00:00,1721934.0,"19 days, 22:18:54","[{'comment_id': 462923361, 'comment_body': 'We probably want to evolve this to use the shared code from cli-runtime, for example https://github.com/kubernetes/sample-cli-plugin', 'comment_created': datetime.datetime(2020, 7, 30, 11, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462923558, 'comment_body': 'I needed to add `_ ""k8s.io/client-go/plugin/pkg/client/auth""` to auth to a GKE cluster', 'comment_created': datetime.datetime(2020, 7, 30, 11, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462923826, 'comment_body': 'Nit: you can just return the error here, as you handle it by calling os.Exit(1)', 'comment_created': datetime.datetime(2020, 7, 30, 11, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462924524, 'comment_body': ""Nit: It's usually clearer if you start off by assigning `kind := os.Args[1]` and `name := os.Args[2]` early in the method.  Effectively parse/process the args first, then use the processed values. "", 'comment_created': datetime.datetime(2020, 7, 30, 11, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462925027, 'comment_body': 'Another nit; you should probably log a warning if PrintResource returns an error, e.g. with klog.Warningf', 'comment_created': datetime.datetime(2020, 7, 30, 11, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462925366, 'comment_body': 'I believe there are some nice helpers for this in cli-runtime', 'comment_created': datetime.datetime(2020, 7, 30, 11, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462926206, 'comment_body': 'You can also use schema.ParseGroupVersion', 'comment_created': datetime.datetime(2020, 7, 30, 11, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462926590, 'comment_body': ""Can we have a TODO here to resolve the kind.  (I think it's fine to do later, but I hit this when I tried doing `kubectl ownerref rs foo`, instead of `kubectl ownerref replicaset foo`)"", 'comment_created': datetime.datetime(2020, 7, 30, 11, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462927223, 'comment_body': ""Idea to speed this up in future: we can run these in parallel.  We likely need some limit, so it's going to be tricky, but that will speed things up a lot!"", 'comment_created': datetime.datetime(2020, 7, 30, 11, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462928465, 'comment_body': ""I think the rules on ownerrefs are that a cluster-scoped object can own a cluster-scoped object or a namespace-scoped object.  A namespace-scoped object can only own a namespace-spaced object in the same namespace.\r\n\r\nIf I'm remembering those rules correctly, we can probably prune the search space a little bit.  It looks like you're passing in the namespace, which is good when `resource` is namespace-scoped.  If namespace is cluster-scoped, we probably shouldn't pass in a namespace.\r\n\r\nIf the object we're looking for is cluster scoped, we can likely skip namespace-scoped resources.  But... I'd imagine that will be relatively rare."", 'comment_created': datetime.datetime(2020, 7, 30, 11, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 462929528, 'comment_body': ""Another potential optimization: I think it's possible to just get the ObjectMeta, see e.g. https://github.com/kubernetes/kubernetes/pull/77819"", 'comment_created': datetime.datetime(2020, 7, 30, 11, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '27ec18891652cd63cdb5a1be446ffb2e399af9be', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41861f0b54bd977a9645057d316b0fe087280a49', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93e5a7522140a9def01423a6ec546e7ca59b8c6c', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74476e1d419bcb9e8098fec9c709f511b3a71e0f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a80fbe0aba038064738622e1bcd3afebf1f49805', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426f58716535a9505cdd62f5016dcb1a94490079', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e95594bcbf8455317929e14c374e92031ad5d98a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
444136121,Uses packages from declarative pattern repo,,True,71,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/71,https://github.com/kubernetes-sigs/cluster-addons/pull/71,closed,63,10,4,1,3,1,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'ok-to-test'}, {'name': 'approved'}, {'name': 'size/M'}, {'name': 'lgtm'}]",2020-07-03 16:47:16+00:00,2020-07-09 13:44:31+00:00,507435.0,"5 days, 20:57:15","[{'comment_id': 452212487, 'comment_body': 'We should figure out when we want to create a version in kubebuilder-declarative-pattern :-)', 'comment_created': datetime.datetime(2020, 7, 9, 13, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': 'd69b7a0a890401ea108c66aeab254ab90acf5c5e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
443629670,Adds role for manager,,True,70,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/70,https://github.com/kubernetes-sigs/cluster-addons/pull/70,closed,43,1,5,1,4,0,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'ok-to-test'}, {'name': 'approved'}, {'name': 'size/M'}, {'name': 'lgtm'}]",2020-07-02 16:37:30+00:00,2020-07-09 13:26:32+00:00,593342.0,"6 days, 20:49:02",[],"[{'commit_sha': '84f62875f3114cfd7536af1040c37f0df6ac7c0a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
437442586,Flannel Operator,,True,69,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/69,https://github.com/kubernetes-sigs/cluster-addons/pull/69,closed,3800,0,56,8,7,0,5,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'needs-ok-to-test'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-06-20 18:05:03+00:00,2020-06-29 13:55:26+00:00,762623.0,"8 days, 19:50:23",[],"[{'commit_sha': 'be362c99cd9577ba4ca30eb3f158097de47c4ef4', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23a1ee79f19a08e70a3f7f04fdb0a3c4bdc73826', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f7e562b2c0bed154b40917aa149488c950aff4c', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcbb5200d9935e6da3df2c64eed313e336b71fb2', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0c5fc986e8085f1e8cb04d7a41e6058a5f53899', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed6a2b0ae83ba2093d83632034b9e9651b514ca0', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0266c342a61cafb5393e491c08300f3679e0b480', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba1c9c1b5d8005f7d6b0c364bf31cdf9a2caf882', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
434025723,Takes in manifest and generates role,,True,68,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/68,https://github.com/kubernetes-sigs/cluster-addons/pull/68,closed,1074,0,12,10,5,12,5,1,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'ok-to-test'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-06-13 16:18:42+00:00,2020-06-29 14:01:26+00:00,1374164.0,"15 days, 21:42:44","[{'comment_id': 442842558, 'comment_body': 'It might be easier to use the structs from k8s.io/api here, e.g. https://github.com/kubernetes/api/blob/49be0e3344fe443eb3d23105225ed2f1ab1e6cab/rbac/v1/types.go#L167', 'comment_created': datetime.datetime(2020, 6, 19, 13, 32, 34, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442842908, 'comment_body': 'Should comment be two lines lower?', 'comment_created': datetime.datetime(2020, 6, 19, 13, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442843665, 'comment_body': 'Tip: I like to do this:\r\n\r\n```\r\nfunc main() {\r\n  err := run()\r\n  if err != nil {\r\n    fmt.Fprintf(os.Stderr, ""%v\\n"", err)\r\n    os.Exit(1)\r\n  }\r\n}\r\n\r\nfunc run() error {\r\n... real work....\r\n}\r\n```\r\n\r\nbecause then we can just return an error.  Two advantages:\r\n\r\n* A little more compact\r\n* It makes it easier to refactor the code into functions; the top-level function is a special-case in terms of error handling, so I try to make that special-case as small as possible.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442844290, 'comment_body': ""Nit: it's clearer (IMO) without the line break between the thing which generates the error and which checks the error\r\n\r\n```\r\na, err := foo()\r\nif err != nil {\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 6, 19, 13, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442845621, 'comment_body': 'Technically the key should include the api group, in case two kinds are named the same in two apigroups.\r\n\r\nTwo ways to do that:\r\n\r\n* Invent some delimiter that is ""safe"": `m[obj.APIGroup + ""::"" + obj.Kind] = true`\r\n* Use a struct:\r\n\r\n```\r\nstruct key {\r\n  APIGroup string\r\n  Kind string\r\n}\r\n```\r\n\r\nFor cases like this where I\'m not really reading the values back, I tend to just use the string trick.  If I\'m reading them back or parsing the keys I tend to use a struct.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442846405, 'comment_body': ""Alternatives:\r\n\r\n* `map[string]bool` lets you do `if m[obj.Kind] {` and I tend to use this\r\n* `map[string]struct{}` is the go way of writing that there are no values, so it is a little more memory efficient.  You have to use the longer way of checking though (as you've done here), so if it's not verified as performance critical I tend to use the simpler boolean form."", 'comment_created': datetime.datetime(2020, 6, 19, 13, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442846830, 'comment_body': ""There's a pluralize helper in kubebuilder I think, which I guess we should probably use.  I agree this is annoying though :-)\r\n\r\nIt's technically the resource name, which might be completely different to the kind.  In practice, it's the plural (and lower cased)."", 'comment_created': datetime.datetime(2020, 6, 19, 13, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442848052, 'comment_body': 'Tip: It can be easier just to write to stdout by default.  You can always pipe it somewhere in a shell.\r\n\r\nMost flexible option is to take a flag like ""out"".  If you pass `--out=-` then write to stdout, otherwise treat it as a file.\r\n\r\n```\r\nvar w io.Writer\r\nif out == ""-"" {\r\n  w = os.Stdout\r\n} else {\r\n  f, err := os.Create(out)\r\n  if err != nil ...\r\n  defer f.Close()\r\n  w = f\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 13, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442848493, 'comment_body': ""I like it.  There is a function in kubebuilder that does something similar, but I suspect your function here might be more robust - and definitely easier to understand!\r\n\r\nI'm fine if we want to leave this as is :-)"", 'comment_created': datetime.datetime(2020, 6, 19, 13, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442848895, 'comment_body': 'Would be great to make this into a golden-test :-)', 'comment_created': datetime.datetime(2020, 6, 19, 13, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 443091851, 'comment_body': 'This is nice. Reduce code for error handling', 'comment_created': datetime.datetime(2020, 6, 20, 1, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 446990766, 'comment_body': 'Nit: we might want a string enum (as otherwise we tend to end up with lots of flags :-) )', 'comment_created': datetime.datetime(2020, 6, 29, 13, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '522b3f2629de0c15a155437fd580905ed67626e3', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f06f74018fc078c58f688f4e0a9d9db39a654fc3', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a69ab1bf828210aeb96ee76574ee1b057fc1374d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7638406f484f60fd8ea64318d669bdb44827d264', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '888d7ac0fd0cd350a590031f17e7ba302bda9042', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc5f9a4ecb6d8a6967cc19ae26e098b8f7049eee', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42c790ed4a3353fef1ffe9284ed82240a5724845', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4af1f3a025b07d99aad11698f2dae83b7e6c7e5e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da8ebc6c553a78adb7e87b353f870b482c84ea5f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a256085e54be72817afe9a06af0a92989b9b9b0', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
434024772,[WIP] RBAC gen,,False,67,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/67,https://github.com/kubernetes-sigs/cluster-addons/pull/67,closed,3359,0,55,9,2,0,4,0,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'needs-ok-to-test'}, {'name': 'do-not-merge/work-in-progress'}]",2020-06-13 16:10:36+00:00,2020-06-13 16:18:29+00:00,473.0,0:07:53,[],"[{'commit_sha': 'c5c9283d4d3d7bd0478de155c4a3d671af0f1fb6', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e25a0da9d1f5762a0d2046ef82cc57dc33085e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd7748c23ed8c73efc7564714cc2246d14286fb9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673aaa339c58079f5df4d1ef007fe7b4fdd428ef', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129b27bbab6a2a277892aea5af9abadad1ddb3c4', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c9107ac5dae5d72ed45e5e8f84a707e8f378bf', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c483a5b0d89a228e02c0ecb06a328b764e6760d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0fa09a155a2179547dd59fcd3336e587a45e80e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c3717beb5d0e294f26a2eabc3a5561d2a28f067', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
427904454,NodeLocalDNS operator,"This is for the localnodedns operator

- [x] Boilerplate
- [x] Ensure it runs out of the cluster
- [x] Ensure it runs in-cluster
- [x] Golden file tests",True,59,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/59,https://github.com/kubernetes-sigs/cluster-addons/pull/59,closed,2662,0,52,10,7,18,4,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-06-04 15:08:50+00:00,2020-06-29 14:15:26+00:00,2156796.0,"24 days, 23:06:36","[{'comment_id': 439603394, 'comment_body': 'Here, we can try to fetch the Cluster IP from the `kube-dns` service.\r\n`kubectl get svc kube-dns -n kube-system -o jsonpath={.spec.clusterIP}`\r\n\r\nIf we are unable to determine, then we can use the default value.', 'comment_created': datetime.datetime(2020, 6, 12, 19, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439604887, 'comment_body': 'Nit: newline', 'comment_created': datetime.datetime(2020, 6, 12, 19, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439616262, 'comment_body': 'The test file seems empty. How are the golden test files generated?', 'comment_created': datetime.datetime(2020, 6, 12, 19, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439622391, 'comment_body': '~The `__PILLAR__CLUSTER__DNS__` placeholder values should probably be generated properly~\r\n\r\nNvm, looks like the automatically updated Corefile values reflected only in the logs as per https://github.com/kubernetes/dns/blob/9903307a652efd77d5de40fdab3bfcd468fd1c74/cmd/node-cache/app/configmap.go#L67', 'comment_created': datetime.datetime(2020, 6, 12, 20, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439622611, 'comment_body': '~The `__PILLAR__UPSTREAM__SERVERS__` placeholder values should probably be generated properly~\r\n\r\nNvm, looks like the automatically updated Corefile values reflected only in the logs as per https://github.com/kubernetes/dns/blob/9903307a652efd77d5de40fdab3bfcd468fd1c74/cmd/node-cache/app/configmap.go#L67', 'comment_created': datetime.datetime(2020, 6, 12, 20, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439624338, 'comment_body': 'Does node-local-cache need/use an application?', 'comment_created': datetime.datetime(2020, 6, 12, 20, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439724344, 'comment_body': 'Sorry, That was a mistake', 'comment_created': datetime.datetime(2020, 6, 13, 9, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 439724675, 'comment_body': 'There are similar functions in the coredns-operators for finding the ClusterIP and DNS Domain for a cluster. Maybe we could reuse it? Wdyt?', 'comment_created': datetime.datetime(2020, 6, 13, 9, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 439725499, 'comment_body': 'I actually thought all addons needed an application. What qualifies an addon to use an application?', 'comment_created': datetime.datetime(2020, 6, 13, 9, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 442820272, 'comment_body': 'This file is auto-generated I believe - is this a bug in our kubebuilder plugin?', 'comment_created': datetime.datetime(2020, 6, 19, 12, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442821527, 'comment_body': ""We don't *require* an application.\r\n\r\nI think it's a good idea to have one, it means we have a consistent object that groups the addon contents.  Some UIs (for example GKE's) will display Applications nicely.\r\n\r\nI know sig-apps is having some debates about Application, but until we have something better, I think we want _something_, so let's use an Application.  If something better comes along, we can then easily replace Applications with new-thing!"", 'comment_created': datetime.datetime(2020, 6, 19, 12, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442825156, 'comment_body': 'This is going to be annoying feedback, so I\'m sorry in advance...\r\n\r\nShould we name it ""LocalNodeDNS"" or ""NodeLocalDNS"" or ""DNSNodeCache""?  We want to be consistent with other names.\r\n\r\nI\'ve always personally called in NodeLocalDNS.  We should probably pick whatever name is most commonly used (with luck, that will be LocalNodeDNS!).\r\n\r\nThe names inside the code don\'t matter as much as the CRD name - it\'s the CRD name that users will interact with.', 'comment_created': datetime.datetime(2020, 6, 19, 12, 57, 59, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442826733, 'comment_body': 'In general, use logging functions over stdout / stderr.  So either `klog.Warningf(""error determining kube-proxy mode...`) or `log.Log(""error determining kube-proxy mode...`.\r\n\r\nYou also should include the error, otherwise it\'s really hard for someone that sees the log to know what went wrong; for example:\r\n\r\n`klog.Warningf(""error determining kube-proxy mode, defaulting to iptables: %v"", err)`\r\n\r\nI think log has a dedicated helper:\r\n\r\n`log.Error(err, ""error determining kube-proxy mode, defaulting to iptables"")` \r\n\r\nLogging in kubernetes is generally in flux right now; we\'re moving to structured logging (log) but doing so by adding it to klog (I think)  https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/1602-structured-logging', 'comment_created': datetime.datetime(2020, 6, 19, 13, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442829416, 'comment_body': ""Yes, we should start to create a shared library of these functions.  I think probably in kubebuilder-declarative-pattern, because if e.g. the DNS team takes on ownership of this operator this repo may eventually end up pretty empty :-)\r\n\r\nI think we can do this in a follow on PR, if you'd like.  (You can add a TODO here so we don't forget)"", 'comment_created': datetime.datetime(2020, 6, 19, 13, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 442979283, 'comment_body': 'Aah, makes sense. I should add one for the coredns operator then.', 'comment_created': datetime.datetime(2020, 6, 19, 18, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 442979869, 'comment_body': 'I think the ""official"" name is NodeLocalDNS (I\'m using https://github.com/kubernetes/kubernetes/tree/release-1.18/cluster/addons/dns/nodelocaldns as reference), so I think we should follow that.', 'comment_created': datetime.datetime(2020, 6, 19, 18, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 443091201, 'comment_body': 'I doubt. I edit the file somewhere along the line. But I will generate a new operator and check, to be sure', 'comment_created': datetime.datetime(2020, 6, 20, 1, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 443091314, 'comment_body': 'I think NodeLocalDNS is the one that is most commonly use. Should I manually change all occurrences of the name(I think this is error-prone) or generate a new operator with the new name. ', 'comment_created': datetime.datetime(2020, 6, 20, 1, 50, 5, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': 'c5c9283d4d3d7bd0478de155c4a3d671af0f1fb6', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09e25a0da9d1f5762a0d2046ef82cc57dc33085e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd7748c23ed8c73efc7564714cc2246d14286fb9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673aaa339c58079f5df4d1ef007fe7b4fdd428ef', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129b27bbab6a2a277892aea5af9abadad1ddb3c4', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c9107ac5dae5d72ed45e5e8f84a707e8f378bf', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c483a5b0d89a228e02c0ecb06a328b764e6760d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0fa09a155a2179547dd59fcd3336e587a45e80e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b198c9bff54e4a866db043237e63b04030a74dcc', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f26542e26b6bbca8931fa62e7b9bef10499f88', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
417647862,Readme for dashboard operator and updates stable version,,True,56,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/56,https://github.com/kubernetes-sigs/cluster-addons/pull/56,closed,76,11,3,2,2,4,4,1,"[{'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/M'}, {'name': 'lgtm'}]",2020-05-13 22:33:45+00:00,2020-05-15 18:45:37+00:00,159112.0,"1 day, 20:11:52","[{'comment_id': 425367352, 'comment_body': 'ack removal of Application CustomResource', 'comment_created': datetime.datetime(2020, 5, 14, 19, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 425455900, 'comment_body': ""Here's one more thing we can help the reader understand :)\r\n`````suggestion\r\n\r\nNow in another terminal, create an instance of the Dashboard custom resource:\r\n\r\n```bash\r\nkubectl create ns kubernetes-dashboard\r\nkubectl -n kubernetes-dashboard apply -f config/samples/addons_v1alpha1_dashboard.yaml\r\n```\r\n\r\nYou should see the operator respond and apply the resources from your package.\r\n\r\n`````"", 'comment_created': datetime.datetime(2020, 5, 14, 22, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 425458757, 'comment_body': ""Caught some small typos here /w `mkdoir` and `kubectl apply`.\r\n\r\nIt can be a bit clunky to ask a user to `cd` into directories, because you need to instruct them to `cd` back out.\r\nHere's a simpler method:\r\n`````suggestion\r\nMake a directory under `channels/packages/dashboard` for a stable version of the dashboard -- then download the manifest for it:\r\n```bash\r\nmkdir -p channels/packages/dashboard/2.0.0\r\nwget -O channels/packages/dashboard/2.0.0/manifest.yaml https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml\r\n```\r\n\r\n`````"", 'comment_created': datetime.datetime(2020, 5, 14, 22, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}, {'comment_id': 425459158, 'comment_body': '```suggestion\r\n# Determine a stable version and include its manifest:\r\n```', 'comment_created': datetime.datetime(2020, 5, 14, 22, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'stealthybox', 'type': 'User'}]","[{'commit_sha': '6bbcd08b046768b99193cd4ffc2e5a3e7c5bca44', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f477452b91063a4695a292a2c99a184054bf2e18', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
390305783,Updates installer instructions for Mac OS,,False,49,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/49,https://github.com/kubernetes-sigs/cluster-addons/pull/49,closed,5,2,2,3,9,1,4,2,"[{'name': 'cncf-cla: yes'}, {'name': 'lifecycle/rotten'}, {'name': 'size/XS'}, {'name': 'lgtm'}]",2020-03-18 09:00:36+00:00,2020-12-03 05:50:04+00:00,22452568.0,"259 days, 20:49:28","[{'comment_id': 413553479, 'comment_body': ""In Mac, `make binary` is called and it calls `autogen` and `vendor` prerequisites, on the other hand, In Linux, this target calls `$(MAKE) shell ...` which doesn't call  `autogen` and `vendor` prereqiusites.\r\nSo, this is not same action, I think.\r\n\r\nHow about change [`shell` target](https://github.com/kubernetes-sigs/cluster-addons/blob/af88a3421fa5edcad9666e9a8eefe91298cb3612/installer/Makefile#L12-L23) to add `GOOS` and `GOARCH` on `docker run` in Mac?\r\nWhen specify `GOOS=darwin` and `GOARCH=amd64`, go compiles binary for Mac."", 'comment_created': datetime.datetime(2020, 4, 23, 6, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}]","[{'commit_sha': '1c0e9d27d30e355c6a9ab8f3cc170648c6b34d4d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '816ed2c2d950abbb70228951c1756c947fb7f910', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04571e3339ef07730d10cec86fce85afa455d738', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
383136011,Updates CoreDNS readme for kubebuilder 2.0,Some of the information in the readme is no longer relevant with kubebuilder 2.0. This pull request updates the readme.,True,45,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/45,https://github.com/kubernetes-sigs/cluster-addons/pull/45,closed,5,22,1,2,3,1,4,1,"[{'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/S'}, {'name': 'lgtm'}]",2020-03-03 19:36:33+00:00,2020-03-04 16:45:48+00:00,76155.0,21:09:15,"[{'comment_id': 387515734, 'comment_body': '```suggestion\r\nkubebuilder init --fetch-deps=false --domain=k8s.io --license=apache2\r\n```', 'comment_created': datetime.datetime(2020, 3, 4, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dholbach', 'type': 'User'}]","[{'commit_sha': 'b07542e3b506b91d2d9bf9d36ac738d0241817c6', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cab4bdf23b6adb698938d2a82a3838c782b5ef7', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
381432704,Operator for the Kubernetes dashboard,This is a pull request to add an operator for the Kubernetes dashboard,True,44,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/44,https://github.com/kubernetes-sigs/cluster-addons/pull/44,closed,4015,0,58,8,8,7,4,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'approved'}, {'name': 'lgtm'}]",2020-02-28 14:56:34+00:00,2020-03-17 14:52:23+00:00,1554949.0,"17 days, 23:55:49","[{'comment_id': 390748373, 'comment_body': 'Add setting for building manifests of Application CR because dashboard operator use it.\r\n\r\n```suggestion\r\n- bases/addons.k8s.io_dashboards.yaml\r\n- bases/app.k8s.io_application.yaml\r\n```', 'comment_created': datetime.datetime(2020, 3, 11, 5, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390751959, 'comment_body': 'Dashboard operator is not demo of the kubebuilder-declarative-pattern no longer.\r\nWe can delete this.\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 3, 11, 5, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753529, 'comment_body': '@johnsonj \r\nWhat value should we change with?\r\nThis value is `maintainer@example.org` since [v1.8.3 in kubebuilder-declarative-pattern](https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/blob/master/examples/dashboard-operator/channels/packages/dashboard/1.8.3/manifest.yaml#L188)\r\n\r\nOr, can we change here with below?\r\n```suggestion\r\n      url: https://github.com/kubernetes/dashboard\r\n```', 'comment_created': datetime.datetime(2020, 3, 11, 5, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753680, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2020, 3, 11, 5, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753714, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2020, 3, 11, 5, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753762, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2020, 3, 11, 5, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 390753777, 'comment_body': 'ditto.', 'comment_created': datetime.datetime(2020, 3, 11, 5, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}]","[{'commit_sha': '3c8ecf1404096b8cacc75af98b29851fb383bf89', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a423e7b41e6aedbb843a255154738c6fcc5093', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f51761c71d7ca81b3c530fcc6d4d3d068fdbb9d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6a1371d030631e137aa7ebdfbb874142d3eca68', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345ccda31f8082b894ae375a75940b66976f5dfe', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82d03919311eec7e9f3ae7615bb29eff1098a1c9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd9dc05635ea4505f21ba970830c80242e707a28', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4a572a1345357c67f8cb6ac2a69e32bdbe551c1', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
379060433,Adds docs on how to run operator locally,This PR adds how to run the operator locally.,True,42,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/42,https://github.com/kubernetes-sigs/cluster-addons/pull/42,closed,12,0,1,1,4,4,4,1,"[{'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/S'}, {'name': 'lgtm'}]",2020-02-24 15:42:41+00:00,2020-02-24 17:56:50+00:00,8049.0,2:14:09,"[{'comment_id': 383392957, 'comment_body': ""Thanks for adding this @SomtochiAma !\r\n\r\nWe're using Go modules for this project so a user shouldn't need to set GOPATH. Do these instructions work with setting `GO111MODULE=on` instead of GOPATH=..? \r\n\r\nInstead of go build and running bin/manager, i'd suggest putting `make run` after `make install`. This ensures all files are generated."", 'comment_created': datetime.datetime(2020, 2, 24, 17, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}, {'comment_id': 383403773, 'comment_body': 'Okay. I will try to do it without setting GOPATH and if it works, I will update the PR.', 'comment_created': datetime.datetime(2020, 2, 24, 17, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 383416118, 'comment_body': 'The ""generate"" command in the make file checks if the GOPATH is set else it exits with an error. Therefore make run need the GOPATH Set.', 'comment_created': datetime.datetime(2020, 2, 24, 17, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 383420685, 'comment_body': ""Ohh- thank you! Let's go with this as it is then. We're still in the weird world where go modules exists, but not everywhere :) "", 'comment_created': datetime.datetime(2020, 2, 24, 17, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}]","[{'commit_sha': '7a6894a72c4919747e2186fdf6a93a2d0fd10b77', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
342372423,kubeproxy operator,"TODO:
- [x] boilerplate
- [x] operator can run external to the cluster
- [x] make the operator run in the cluster
- [x] golden file tests
",True,35,https://api.github.com/repos/kubernetes-sigs/cluster-addons/pulls/35,https://github.com/kubernetes-sigs/cluster-addons/pull/35,closed,2564,0,51,14,14,12,4,2,"[{'name': 'cncf-cla: yes'}, {'name': 'size/XXL'}, {'name': 'approved'}, {'name': 'lgtm'}]",2019-11-18 21:33:06+00:00,2020-07-02 12:44:47+00:00,19581101.0,"226 days, 15:11:41","[{'comment_id': 361275025, 'comment_body': 'Sorry to comment to WIP PR.\r\nIs it better to add `var _ addonv1alpha1.Patchable = &KubeProxy{}` ? \r\nBecause of `KubeProxy` has `PatchSpec` interface.\r\nAs like [here](https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/blob/master/examples/dashboard-operator/api/v1alpha1/dashboard_types.go#L38).', 'comment_created': datetime.datetime(2019, 12, 25, 7, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 438859894, 'comment_body': 'We can update to use golang 1.13', 'comment_created': datetime.datetime(2020, 6, 11, 15, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 438861521, 'comment_body': 'We can update to use golang 1.13', 'comment_created': datetime.datetime(2020, 6, 11, 15, 15, 50, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 438863784, 'comment_body': 'This seems like a really useful script that can be used to establish e2e/smoketests for all operators.\r\nShould this be moved outside to a `test/`or `hack/` dir? \r\nhttps://github.com/kubernetes-sigs/cluster-addons/pull/63 might give some more context', 'comment_created': datetime.datetime(2020, 6, 11, 15, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439102847, 'comment_body': 'The script is for creating a kinder cluster without kubeproxy. I could make a PR for one that creates a normal kind or kinder cluster with kube-proxy already installed. Wdyt?', 'comment_created': datetime.datetime(2020, 6, 11, 22, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 439115875, 'comment_body': "">The script is for creating a kinder cluster without kubeproxy. \r\n\r\nYes, this is exactly what's desired. My thinking is once this script creates the cluster, the existing `smoketest.go` can run the tests on it."", 'comment_created': datetime.datetime(2020, 6, 11, 22, 59, 55, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 439146253, 'comment_body': ""> > The script is for creating a kinder cluster without kubeproxy.\r\n> \r\n> Yes, this is exactly what's desired. My thinking is once this script creates the cluster, the existing `smoketest.go` can run the tests on it.\r\n\r\nOooh, I see what you mean. @johnsonj wdyt?"", 'comment_created': datetime.datetime(2020, 6, 12, 0, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 439470407, 'comment_body': ""Totally makes sense to me. We'll always need our own `kube-up.sh`, even in a world where these operators are default we need a way to test with our versions!\r\n\r\nNow the question I'd pose is: Copy the shell script, or reimplement it in Go? "", 'comment_created': datetime.datetime(2020, 6, 12, 14, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}, {'comment_id': 439634182, 'comment_body': 'I think that the shell script should suffice', 'comment_created': datetime.datetime(2020, 6, 12, 20, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'rajansandeep', 'type': 'User'}, {'comment_id': 440129514, 'comment_body': 'Almost all command line flags of kube-proxy are now deprecated (see [here](https://github.com/kubernetes/kubernetes/blob/1fa20301a0173eb7945ea8b80ac60997adceaffa/cmd/kube-proxy/app/server.go#L226)). Hence, I would advocate for the use of the kube-proxy component config here.\r\n\r\ncc @mtaufen @stealthybox ', 'comment_created': datetime.datetime(2020, 6, 15, 12, 8, 57, tzinfo=datetime.timezone.utc), 'commenter': 'rosti', 'type': 'User'}, {'comment_id': 440131871, 'comment_body': ""I don't think that this is the best way for a long term solution. I would recommend having a field in `KubeProxySpec` that explicitly sets that value. But it's fine to use this approach as long as the value in the CRD is not set."", 'comment_created': datetime.datetime(2020, 6, 15, 12, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'rosti', 'type': 'User'}, {'comment_id': 440151641, 'comment_body': 'just a FYI, from the kinder docs:\r\n\r\n> The exported logic in kinder packages can be a subject of change at any point in time, thus using kinder as a library is unsupported.\r\n\r\nthis message is rather incomplete.\r\n\r\none caveat is that kinder has no support guarantees for usage external to the kubeadm e2e tests even for its CLI. this means that if we have to change something in kinder we would likely do it without a deprecation policy and me might break consumers.\r\n\r\nbut overall using it for testing the operators seems fine and if one day kubeadm uses the operators we would likely run tests on such a setup using kinder.\r\n', 'comment_created': datetime.datetime(2020, 6, 15, 12, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neolit123', 'type': 'User'}]","[{'commit_sha': '2c39b22d35b8a43b79669510b362f80c651de6fb', 'committer_username': 'johnsonj', 'committer_name': 'Jeff Johnson', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 29, 1, 41, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2385c56a496774c9a0837a0cf5bcec304a34bf67', 'committer_username': 'johnsonj', 'committer_name': 'Jeff Johnson', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 29, 1, 41, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf18fd7fb44d87f6f9c1b042aea6ae7b1f71f7a', 'committer_username': 'johnsonj', 'committer_name': 'Jeff Johnson', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 29, 1, 41, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8019c20003d70727ddb9d529afad90e7ea03c8f9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5d447b54c3835d1a5d7924399caa5d8d9d6ee8e', 'committer_username': 'johnsonj', 'committer_name': 'Jeff Johnson', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 29, 1, 41, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2eddc479e2fb78e65a9afe3070fe1117b15f2571', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3be60ae148492a8eeb515909c3afcc71100505e5', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b965cf3f4f3f620e5dfbd7d30599b4c6cbbde04e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1497c994e11bf07d182105bbb6d5232404b3d1', 'committer_username': 'johnsonj', 'committer_name': 'Jeff Johnson', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 29, 1, 41, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a5a45909b1774fb313923c79494fb985c31167', 'committer_username': 'johnsonj', 'committer_name': 'Jeff Johnson', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 29, 1, 41, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82cac3696c004a32acce396f20076b8688b21bd9', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ccce07d478be2d4c772fa92060f2b124d62adaa', 'committer_username': 'johnsonj', 'committer_name': 'Jeff Johnson', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 29, 1, 41, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e0a7df5248d7ed2965ea980030ba9a0944dd33c', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74654031869f43882e1d59e31040db8d606c6b08', 'committer_username': 'johnsonj', 'committer_name': 'Jeff Johnson', 'committer_email': None, 'commit_date': datetime.datetime(2010, 9, 29, 1, 41, 49, tzinfo=datetime.timezone.utc)}]",Jeff Johnson,420069,,User,,53,,13,80
455179948,Unstructured support in different functions,,True,112,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/112,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/112,closed,141,45,4,6,5,11,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-07-22 15:07:55+00:00,2020-08-10 14:20:20+00:00,1638745.0,"18 days, 23:12:25","[{'comment_id': 460887345, 'comment_body': 'I think this should be ""status"" ""healthy"".  We probably also should check the error (as you do with version)', 'comment_created': datetime.datetime(2020, 7, 27, 13, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460888250, 'comment_body': 'Nit: Do you need to declare this here?  Looks like you could declare it in on line 54 with `else if p, ok := object....` ?', 'comment_created': datetime.datetime(2020, 7, 27, 13, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460888604, 'comment_body': 'Nit: unstructured, not unstruct, as we expect this will eventually bubble-up to the user.', 'comment_created': datetime.datetime(2020, 7, 27, 13, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460890322, 'comment_body': 'It might be clearer if you constructed the `healthy` state first, and then applied it to the object.  i.e. move the type-checking on src to around line 89', 'comment_created': datetime.datetime(2020, 7, 27, 13, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460890972, 'comment_body': 'Missed error-check here', 'comment_created': datetime.datetime(2020, 7, 27, 13, 31, 17, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460891648, 'comment_body': 'If you make this `a.client.Update(ctx, src)`, can you eliminate the duplication between the two if branches?', 'comment_created': datetime.datetime(2020, 7, 27, 13, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 463776976, 'comment_body': ""I don't know if this would work as the status wasn't changed on `src`. Unlike the `SetNestedField` in `unstruct` and `SetCommonStatus` in `instance` that changes the status"", 'comment_created': datetime.datetime(2020, 7, 31, 18, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 467929607, 'comment_body': 'Looking at the other PRs, we might want to create helper functions here.  e.g. `GetVersion` and `GetHealthy` (or maybe `GetCommonSpec` and `GetCommonStatus`)', 'comment_created': datetime.datetime(2020, 8, 10, 14, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467932637, 'comment_body': ""Do we know where we don't change `src`?  `src` and `unstruct` are just a pointer-cast, so they should be the same object.\r\n\r\n(Also, if we're changing status we might have to use `client.Status().Update(...)`"", 'comment_created': datetime.datetime(2020, 8, 10, 14, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467969417, 'comment_body': 'I could definitely work on this. I think it is a good idea', 'comment_created': datetime.datetime(2020, 8, 10, 15, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 468450052, 'comment_body': 'It seems every time we run the update function, `src` has changed.  I will change to `client.Status().Update(...)` in another PR', 'comment_created': datetime.datetime(2020, 8, 11, 9, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': '24073d921b2c52cc84d5a2de5c423d491edbce60', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f56540e3b458ca48ffceff93027cddbd54020fd', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3a2e08052bad5dad186ee8c9065f45c6ee533cb', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ae732735de2bb7ec3a6eb73bfc1c41a475e1539', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a498436332c0af9c1ca144a4fa2f33b198e3557', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e9532755beba0cedeafe1053c2de24ce58a1932', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
453917155,Checks for annotation for objects in-cluster,,True,111,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/111,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/111,closed,59,3,1,3,6,8,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-07-20 22:59:01+00:00,2020-08-11 02:24:18+00:00,1826717.0,"21 days, 3:25:17","[{'comment_id': 458026546, 'comment_body': ""We may want to construct this earlier and cache it in the Reconciler object; though it doesn't matter as much for the dynamic client which doesn't have as much state."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 29, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458027643, 'comment_body': 'Nit: rename gvk to `resource` or similar', 'comment_created': datetime.datetime(2020, 7, 21, 11, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458027747, 'comment_body': 'I think you can use RESTMapping, like here https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/blob/master/pkg/patterns/declarative/pkg/watch/dynamic.go#L64', 'comment_created': datetime.datetime(2020, 7, 21, 11, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458028356, 'comment_body': ""We probably also special-case `apierrors.IsNotFound(err)`; that's going to be the error for every object for a new CR and it's not work logging for IMO."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458028577, 'comment_body': ""Let's discuss a name for this annotation in pairing today!"", 'comment_created': datetime.datetime(2020, 7, 21, 11, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458028925, 'comment_body': 'We can just use an empty value for the annotation i.e. just check `if ok`.  yaml makes values like ""true"" annoyingly difficult to set...', 'comment_created': datetime.datetime(2020, 7, 21, 11, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458029740, 'comment_body': 'Just FYI, you can just do `var newItems []*manifest.Object` - the nil slice is treated like an empty array by append.  (Though if you look at my older code, I did this too!)', 'comment_created': datetime.datetime(2020, 7, 21, 11, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460884350, 'comment_body': 'As with the other PR, probably caching this (like you do dynamicClient) is a win', 'comment_created': datetime.datetime(2020, 7, 27, 13, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '9baf86365da6d06b5b9164293a1cb9b2813d2179', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dce13d325fa977168301af65daa754b63af03b93', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e3e778b3239e0ac0c8739ca00ac133a357f77fb', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
453865122,Uses kstatus to compute status of CR,,True,110,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/110,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/110,closed,188,6,5,7,6,16,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-07-20 21:42:24+00:00,2020-08-11 12:48:18+00:00,1868754.0,"21 days, 15:05:54","[{'comment_id': 458031394, 'comment_body': 'Probably log and skip this object; maybe post a status of ""unknown"" or ""error""', 'comment_created': datetime.datetime(2020, 7, 21, 11, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458032507, 'comment_body': ""You could make statusMap `map[status.Status]bool` and avoid the `String()` conversion.  That said, I bet they're strings anyway..."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460881095, 'comment_body': 'Is NotFoundStatus the best match?  I\'m wondering if we have an ""internal error"" status', 'comment_created': datetime.datetime(2020, 7, 27, 13, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460881378, 'comment_body': 'This might get a little verbose - we can try it and see!', 'comment_created': datetime.datetime(2020, 7, 27, 13, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460881755, 'comment_body': 'Nit: can we use the status.Status constants here, instead of the strings?', 'comment_created': datetime.datetime(2020, 7, 27, 13, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460882223, 'comment_body': ""Personally I'd prefer a longer line vs breaking in the middle of a type"", 'comment_created': datetime.datetime(2020, 7, 27, 13, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460882507, 'comment_body': 'Nit: we might want to cache this in future :-)', 'comment_created': datetime.datetime(2020, 7, 27, 13, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460883352, 'comment_body': 'Nit: always better to pass in the context if you control the method signature... even if the caller just specifies `context.TODO()`, it just avoids having to refactor in future.\r\n', 'comment_created': datetime.datetime(2020, 7, 27, 13, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460883551, 'comment_body': 'Nit: `unable to get resource: %v`', 'comment_created': datetime.datetime(2020, 7, 27, 13, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 463751945, 'comment_body': 'There is `unknown` status', 'comment_created': datetime.datetime(2020, 7, 31, 17, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 463754565, 'comment_body': 'Should we just log the `kind` and `name` without the `status`', 'comment_created': datetime.datetime(2020, 7, 31, 18, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 463761297, 'comment_body': 'I am not completely sure I understand', 'comment_created': datetime.datetime(2020, 7, 31, 18, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 467925009, 'comment_body': 'nit:typo', 'comment_created': datetime.datetime(2020, 8, 10, 14, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467925581, 'comment_body': ""Unknown is probably better - we don't want other systems to draw incorrect conclusions and NotFound feels very transient.  Another option would be to post no status at all for the whole CR, but I feel like unknown is better."", 'comment_created': datetime.datetime(2020, 8, 10, 14, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467927195, 'comment_body': 'It\'s just that you\'re going to be logging for every ""child"" object each time you go round the reconcile loop.  I think it\'s fine to leave in for now, because it will help us understand what\'s going on, and it\'s also going to be very obvious; we\'ll just likely want to reduce it to V(2) once we\'re all happy that it works as we expect!', 'comment_created': datetime.datetime(2020, 8, 10, 14, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 467928049, 'comment_body': ""I've realized we should probably have some helper functions for this, so that we can deal with unstructured also!  We might also be able then to eliminate the need for the methods and just use reflection instead, though I'm not sure if that actually helps us that much."", 'comment_created': datetime.datetime(2020, 8, 10, 14, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '4db3a640c86bf781ede2f9acfe01c9006582871a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ab8a7aa7a20895bafe0f583e2b1e0446e3d5b09', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8cfe9c3c4f44822cead43251ffaf1e8452aa469', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb413b7c0f82b2e8679704a27186aa1bbd185370', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cacde34cc49fe692169a013742685e5377d0283d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bec825a7803802efe706622fb4d7590c1ace4034', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5a1d50f0ddc7924c20917b4f14b3289a5bb45fe', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
448079526,Checks for ignore reconciliation annotations,,False,105,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/105,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/105,closed,6,0,1,4,12,3,7,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lifecycle/rotten'}, {'name': 'size/XS'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'do-not-merge/hold'}]",2020-07-13 08:14:00+00:00,2021-03-07 16:47:11+00:00,20507591.0,"237 days, 8:33:11","[{'comment_id': 458040374, 'comment_body': 'We can figure out a name for this in pairing :-)', 'comment_created': datetime.datetime(2020, 7, 21, 11, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458040521, 'comment_body': ""I'd just allow any value (or even no value), so `if ok`.  (We might also want to rename `ok` to `found`)"", 'comment_created': datetime.datetime(2020, 7, 21, 11, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 458040887, 'comment_body': ""I don't _think_ we need to support this on the manifest ... but if you can think of a reason we should allow it, that's fine."", 'comment_created': datetime.datetime(2020, 7, 21, 11, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '7f7564c51306407d25366419fe1a9b3e7e43af35', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67d3af8f1d2227562482f3e01dbaeb9e5e43c83f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98f029eb80fad51612e246cd5f73f3126640871b', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63301e08c5e0684633ababaada9bb63436e17d90', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
446890877,Base git repository working,,True,104,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/104,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/104,closed,222,2,6,11,6,6,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-07-09 14:18:09+00:00,2020-08-11 02:14:18+00:00,2807769.0,"32 days, 11:56:09","[{'comment_id': 460861635, 'comment_body': ""Nit: this looks like leftover debug code.  It's OK to log with a very high verbosity (e.g. 4 or 6) instead, but I would probably just delete it - it's most valuable when you're first developing/debugging."", 'comment_created': datetime.datetime(2020, 7, 27, 12, 42, 59, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460862152, 'comment_body': '(If you did want to log the bytes, this could be a good place to log it - when something has gone wrong.  If we were debugging this, the first thing we would ask is ""what is the contents of channel?"")', 'comment_created': datetime.datetime(2020, 7, 27, 12, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460863515, 'comment_body': 'If you use `path.Join` you can probably avoid the repetition here: https://play.golang.org/p/-XheAesp5eZ\r\n\r\n(Note: path.Join and not filepath.Join, because even on windows we want a url-style path with forward slashes)', 'comment_created': datetime.datetime(2020, 7, 27, 12, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460864048, 'comment_body': 'Missing `defer file.Close()` I think.\r\n\r\nI think you can also just do `ioutil.ReadFile` though, which is probably easier', 'comment_created': datetime.datetime(2020, 7, 27, 12, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460864303, 'comment_body': ""Nit: using `filepath.Join` is generally easier & safer when constructing paths (and here, it's a filesystem path, so you want filepath, not path!)"", 'comment_created': datetime.datetime(2020, 7, 27, 12, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460867291, 'comment_body': 'Nit: if you use `strings.SplitN(url, "".git//"", 2)` you will only split on the first `.git//`, and not drop any other segments.\r\n\r\nAn alternative would be to check that newURL ends up with `len(.) == 2`\r\n\r\n(urlTokens or tokens or urlComponents or components might also be a more descriptive name, as it isn\'t really a URL)', 'comment_created': datetime.datetime(2020, 7, 27, 12, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': 'e1e6aa0b9c28ff86e981c42c37362b6cda59f020', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40c96504657456bf391dbd937a0fd0356c7c6bc5', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf81ecfa10b81a0c8fd092b396d38f802a480e0', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2da3260204596bc523cba812ba01dc45d09432db', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a22cf207dd79af81fe5cbea7aa5ae985cf6e064', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b2bb5ed0f72675e8aa5ced07b63fb47827e7816', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd390a595857bea6edb5120be3471086a0f71610', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abc9b354361c008a862f6a9dbdd4ba0453705228', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b95789878ad7524e2deb2d6352078a8515f8bd0d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5eabba8da61296f076c01146802b067363636f1', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '238d579dd5d8611b71ebd04d77f732f567200028', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
445284239,Adds function for parsing list,,True,103,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/103,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/103,closed,43,0,1,2,4,7,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-07-07 09:27:54+00:00,2020-07-21 12:03:15+00:00,1218921.0,"14 days, 2:35:21","[{'comment_id': 452206584, 'comment_body': 'Nit: gofmt needed, I think', 'comment_created': datetime.datetime(2020, 7, 9, 13, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452207113, 'comment_body': ""Nit: we should check the group also.  The easy way is to check the APIGroup (which sadly includes the version, but I think that's OK)"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452207350, 'comment_body': 'Nit: please remove debug code :-)', 'comment_created': datetime.datetime(2020, 7, 9, 13, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452207609, 'comment_body': 'Nice find on `EachListItem` :+1: ', 'comment_created': datetime.datetime(2020, 7, 9, 13, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452208671, 'comment_body': ""Nit: renaming castItem to `itemUnstructured` may be clearer (similarly, you might rename `obj` to `itemObject`).  (I do like rust's ability to redefine variables with the same name but with a different type, avoids these problems)"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452209962, 'comment_body': ""I think leigh was suggesting that it might be easier to just keep a second list:\r\n\r\n```\r\nvar out []*manifest.Object\r\n\r\nif IsList(obj) {\r\n  out = append(out, extract(obj))\r\n} else {\r\n  out = append(out, obj)\r\n}\r\nreturn manifest.NewManifest(out)\r\n}\r\n```\r\n\r\nI'm not sure what happens to the iteration when you concurrently modify `infos`!"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452571091, 'comment_body': '😅 Will do', 'comment_created': datetime.datetime(2020, 7, 10, 1, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': 'e64ec1dcf900297d813c3d7a53e603d97c4b79f6', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cda8476a3cda2cf9df0aa078a7279c6f9808d9f', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
444110944,Adds Version Check,,True,102,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/102,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/102,closed,135,12,5,3,5,11,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-07-03 15:29:06+00:00,2020-08-10 13:32:21+00:00,3276195.0,"37 days, 22:03:15","[{'comment_id': 452200988, 'comment_body': 'Have you run gofmt?  (And I guess we need to add a gofmt check!)', 'comment_created': datetime.datetime(2020, 7, 9, 13, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452201137, 'comment_body': 'Nit: should we remove?', 'comment_created': datetime.datetime(2020, 7, 9, 13, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452201515, 'comment_body': 'Oh cool - using a signature inspired by Reconcilers is an interesting pattern to explore!', 'comment_created': datetime.datetime(2020, 7, 9, 13, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452202248, 'comment_body': ""Nit: I think you should report this as a `log.Error(err)`, even if we don't return an error. "", 'comment_created': datetime.datetime(2020, 7, 9, 13, 6, 2, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452203503, 'comment_body': ""I actually think it would be reasonable to return an error, if the annotation is specified but we can't parse it.  It _could_ be a version schema our operator is too old to understand.  (More likely, it's just a typo).\r\n\r\nBut ... the user did specify the annotation in their manifest...\r\n\r\nI think returning an error is reasonable, it will help users create valid manifests.  A message in the logs is going to get overlooked and users will be surprised when it doesn't work."", 'comment_created': datetime.datetime(2020, 7, 9, 13, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452204673, 'comment_body': 'You could move this to `NewVersionCheck`; I think it\'s very natural to return an error there if passed a bad version :-)\r\n\r\nRelated question is: should we refuse to apply manifests that specify invalid minimum versions (i.e. ignore vs error).  I would vote ""error"" I think, based on my chain of thoughts in this review!', 'comment_created': datetime.datetime(2020, 7, 9, 13, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452205295, 'comment_body': ""Nit: Don't name it `bool` - it's confusing.  e.g. maybe something like `validVersion, err := r.options.status.VersionCheck(...)` "", 'comment_created': datetime.datetime(2020, 7, 9, 13, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452205525, 'comment_body': 'Nit: I think this can return an error; we need to bubble it up if so.', 'comment_created': datetime.datetime(2020, 7, 9, 13, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 452651075, 'comment_body': ""There are also two versions, what happens if we cannot parse the operator's version?"", 'comment_created': datetime.datetime(2020, 7, 10, 6, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}, {'comment_id': 460859327, 'comment_body': 'Nit: this should say `min-operator-version` to match the annotation value', 'comment_created': datetime.datetime(2020, 7, 27, 12, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 460860469, 'comment_body': 'So this actually ""shadows"" the err value we care about.  So on line 142 err will be nil.\r\n\r\nSometimes people use a different name e.g. `updateErr :=...`\r\n\r\nBut I think a better pattern - when you can use it - is to so `if err := r.client.Status()...; err != nil` as then the scope of the shadowing err should just be the `if` statement (I think!) ', 'comment_created': datetime.datetime(2020, 7, 27, 12, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '1b07d8729175a1a4874df27057a3f69df433fb0d', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1793337ef20aed72eb034e982d22ab8775b039', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8ba229bb90c99978b98b1764de17fea1d9f677a', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
440687712,Uses new apply function so we don't need kubectl,,True,101,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/101,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/101,closed,137,13,7,3,4,5,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-06-26 16:53:17+00:00,2020-07-02 12:38:47+00:00,503130.0,"5 days, 19:45:30","[{'comment_id': 446976294, 'comment_body': 'Nit we tend not to split these over lines, or if we do we split all the args, one per line', 'comment_created': datetime.datetime(2020, 6, 29, 13, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 446980978, 'comment_body': ""Nit: remove this (I think it's just old code)"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 446981103, 'comment_body': ""Nit: remove if it's old code"", 'comment_created': datetime.datetime(2020, 6, 29, 13, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 446981732, 'comment_body': 'Not sure if splitting this function out is worth it vs just inlining it?', 'comment_created': datetime.datetime(2020, 6, 29, 13, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}, {'comment_id': 446982988, 'comment_body': 'Nit: I think having two types might be clearer here - e.g. one `ExecKubectl` and one called `DirectApply`, that both implement the same interface.  We can discuss in our GSoC sync :-)', 'comment_created': datetime.datetime(2020, 6, 29, 13, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'justinsb', 'type': 'User'}]","[{'commit_sha': '5246099113e2f099f20e146b82710a7c744146cc', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62f50d562c85871e8c5bc31960bb1e9cd6dec85b', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8367f1f2086e49e0b85c839bafdb4b94172cead5', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
438533971,Moves some functions from Coredns operator that could be reused ,…erator,True,100,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/100,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/100,closed,81,0,1,1,5,0,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-06-23 12:21:26+00:00,2020-06-29 13:37:25+00:00,522959.0,"6 days, 1:15:59",[],"[{'commit_sha': 'aa704f544de49e8ad2b2b96919cb401936091134', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
417653991,Removes some steps that are now been built into kubebuidler,,True,96,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/96,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/96,closed,0,49,1,1,5,0,6,2,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'size/M'}, {'name': 'approved'}]",2020-05-13 22:52:24+00:00,2020-05-22 14:48:38+00:00,748574.0,"8 days, 15:56:14",[],"[{'commit_sha': '0ecb227e272024462cbfd77667b7dd3116ac1a1e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159
398504184,Makes file loading more flexible,This puts any objects that cannot be parsed into Unstructured.unstructured into a blob.,True,78,https://api.github.com/repos/kubernetes-sigs/kubebuilder-declarative-pattern/pulls/78,https://github.com/kubernetes-sigs/kubebuilder-declarative-pattern/pull/78,closed,166,9,2,3,6,3,6,1,"[{'name': 'sig/api-machinery'}, {'name': 'ok-to-test'}, {'name': 'lgtm'}, {'name': 'cncf-cla: yes'}, {'name': 'approved'}, {'name': 'size/L'}]",2020-04-04 10:44:03+00:00,2020-04-13 15:49:49+00:00,795946.0,"9 days, 5:05:46","[{'comment_id': 404935406, 'comment_body': ""Can you increase the log verbosity here? This isn't something we should see by default"", 'comment_created': datetime.datetime(2020, 4, 7, 16, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'johnsonj', 'type': 'User'}, {'comment_id': 407308007, 'comment_body': '@SomtochiAma \r\nDo you have some policies of choice ""5"" in `V`?\r\n\r\n@johnsonj \r\nDo you have some policies of choose of number in `V`?\r\nI checked what numbers are used in current code.\r\nThere are `V(1)` and `V(2)` only.\r\n\r\n```shell\r\n~/go/src/sigs.k8s.io/kubebuilder-declarative-pattern$ grep ""V("" -r ./pkg\r\n./pkg/patterns/declarative/image.go:\t\t\t\tlog.WithValues(""manifest"", manifestItem).WithValues(""registry"", registry).V(1).Info(""applying image registory to manifest"")\r\n./pkg/patterns/declarative/image.go:\t\t\t\tlog.WithValues(""manifest"", manifestItem).WithValues(""secret"", secret).V(1).Info(""applying image pull secret to manifest"")\r\n./pkg/patterns/declarative/pkg/manifest/objects.go:\t\t\tlog.V(5).Info(""Unable to parse into Unstructured, Storing as blob"")\r\n./pkg/patterns/declarative/pkg/manifest/patch.go:\t\tlog.WithValues(""patched"", patched).V(2).Info(""applying patches"")\r\n./pkg/patterns/declarative/pkg/kubectlcmd/client.go:\tlog.WithValues(""stdout"", stdout.String()).WithValues(""stderr"", stderr.String()).V(2).Info(""ran kubectl apply"")\r\n./pkg/patterns/declarative/sort.go:\t\t\tlog.WithValues(""group"", o.Group).WithValues(""kind"", o.Kind).V(2).Info(""unknown group / kind"")\r\n./pkg/patterns/declarative/labels.go:\t\t\tlog.WithValues(""object"", o).WithValues(""labels"", labels).V(1).Info(""add labels to object"")\r\n./pkg/patterns/addon/patch.go:\t\tlog.WithValues(""patch"", patch).V(1).Info(""parsed patch"")\r\n./pkg/patterns/addon/pkg/status/aggregate.go:\t\t\tlog.WithValues(""type"", gk).V(2).Info(""type not implemented for status aggregation, skipping"")\r\n./pkg/patterns/addon/pkg/status/aggregate.go:\tlog.WithValues(""object"", src).WithValues(""status"", status).V(2).Info(""built status"")\r\n```', 'comment_created': datetime.datetime(2020, 4, 13, 4, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'atoato88', 'type': 'User'}, {'comment_id': 407365190, 'comment_body': 'I will change it to 2 then. I was thinking it had the same numbers as `klog`', 'comment_created': datetime.datetime(2020, 4, 13, 7, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'somtochiama', 'type': 'User'}]","[{'commit_sha': 'd63354321ace35abfdcfa25460522d3a99c18646', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be04c01afe1f6d98d7f7f5f050784194c744724e', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e21ea068a4d256826e57b3920565dac776a035', 'committer_username': 'somtochiama', 'committer_name': 'Somtochi Onyekwere', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 22, 15, 52, 9, tzinfo=datetime.timezone.utc)}]",Somtochi Onyekwere,34774756,,User,,117,,185,159

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
51478266,website,kubernetes/website,HTML,14229,4410,220,6120,50601,789,64,222,"[{'id': 524069398, 'number': 25115, 'closed': datetime.datetime(2020, 11, 19, 16, 58, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 19, 16, 17, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2502.0, 'time_delta': '0:41:42', 'additions': 4370, 'deletions': 2109, 'state': 'closed'}, {'id': 499308523, 'number': 24408, 'closed': datetime.datetime(2020, 10, 8, 16, 10, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 7, 14, 49, 18, tzinfo=datetime.timezone.utc), 'time_taken': 91258.0, 'time_delta': '1 day, 1:20:58', 'additions': 3337, 'deletions': 779, 'state': 'closed'}, {'id': 473345759, 'number': 23432, 'closed': datetime.datetime(2020, 9, 15, 16, 52, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 17, 15, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1812998.0, 'time_delta': '20 days, 23:36:38', 'additions': 118, 'deletions': 0, 'state': 'closed'}]"
171560361,kubebuilder-declarative-pattern,kubernetes-sigs/kubebuilder-declarative-pattern,Go,84,254,18,50,727,10,4,7,"[{'id': 476285412, 'number': 121, 'closed': datetime.datetime(2020, 9, 22, 14, 57, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 13, 5, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1907516.0, 'time_delta': '22 days, 1:51:56', 'additions': 50, 'deletions': 0, 'state': 'closed'}, {'id': 471581861, 'number': 120, 'closed': datetime.datetime(2020, 9, 22, 14, 56, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 11, 37, 27, tzinfo=datetime.timezone.utc), 'time_taken': 2776770.0, 'time_delta': '32 days, 3:19:30', 'additions': 23, 'deletions': 14, 'state': 'closed'}, {'id': 470797957, 'number': 119, 'closed': datetime.datetime(2020, 9, 22, 14, 56, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 9, 53, 31, tzinfo=datetime.timezone.utc), 'time_taken': 2869398.0, 'time_delta': '33 days, 5:03:18', 'additions': 92, 'deletions': 2, 'state': 'closed'}, {'id': 469990508, 'number': 118, 'closed': datetime.datetime(2020, 10, 8, 14, 22, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 7, 59, 30, tzinfo=datetime.timezone.utc), 'time_taken': 4342967.0, 'time_delta': '50 days, 6:22:47', 'additions': 88, 'deletions': 143, 'state': 'closed'}, {'id': 467941774, 'number': 117, 'closed': datetime.datetime(2020, 8, 16, 13, 56, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 11, 52, 29, tzinfo=datetime.timezone.utc), 'time_taken': 180229.0, 'time_delta': '2 days, 2:03:49', 'additions': 188, 'deletions': 84, 'state': 'closed'}, {'id': 466005007, 'number': 116, 'closed': datetime.datetime(2020, 8, 13, 13, 42, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 10, 7, 25, tzinfo=datetime.timezone.utc), 'time_taken': 185689.0, 'time_delta': '2 days, 3:34:49', 'additions': 88, 'deletions': 46, 'state': 'closed'}, {'id': 455179948, 'number': 112, 'closed': datetime.datetime(2020, 8, 10, 14, 20, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 15, 7, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1638745.0, 'time_delta': '18 days, 23:12:25', 'additions': 141, 'deletions': 45, 'state': 'closed'}, {'id': 453917155, 'number': 111, 'closed': datetime.datetime(2020, 8, 11, 2, 24, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 22, 59, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1826717.0, 'time_delta': '21 days, 3:25:17', 'additions': 59, 'deletions': 3, 'state': 'closed'}, {'id': 453865122, 'number': 110, 'closed': datetime.datetime(2020, 8, 11, 12, 48, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 21, 42, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1868754.0, 'time_delta': '21 days, 15:05:54', 'additions': 188, 'deletions': 6, 'state': 'closed'}, {'id': 448079526, 'number': 105, 'closed': datetime.datetime(2021, 3, 7, 16, 47, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 8, 14, tzinfo=datetime.timezone.utc), 'time_taken': 20507591.0, 'time_delta': '237 days, 8:33:11', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 446890877, 'number': 104, 'closed': datetime.datetime(2020, 8, 11, 2, 14, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 14, 18, 9, tzinfo=datetime.timezone.utc), 'time_taken': 2807769.0, 'time_delta': '32 days, 11:56:09', 'additions': 222, 'deletions': 2, 'state': 'closed'}, {'id': 445284239, 'number': 103, 'closed': datetime.datetime(2020, 7, 21, 12, 3, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 9, 27, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1218921.0, 'time_delta': '14 days, 2:35:21', 'additions': 43, 'deletions': 0, 'state': 'closed'}, {'id': 444110944, 'number': 102, 'closed': datetime.datetime(2020, 8, 10, 13, 32, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 15, 29, 6, tzinfo=datetime.timezone.utc), 'time_taken': 3276195.0, 'time_delta': '37 days, 22:03:15', 'additions': 135, 'deletions': 12, 'state': 'closed'}, {'id': 440687712, 'number': 101, 'closed': datetime.datetime(2020, 7, 2, 12, 38, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 16, 53, 17, tzinfo=datetime.timezone.utc), 'time_taken': 503130.0, 'time_delta': '5 days, 19:45:30', 'additions': 137, 'deletions': 13, 'state': 'closed'}, {'id': 438533971, 'number': 100, 'closed': datetime.datetime(2020, 6, 29, 13, 37, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 12, 21, 26, tzinfo=datetime.timezone.utc), 'time_taken': 522959.0, 'time_delta': '6 days, 1:15:59', 'additions': 81, 'deletions': 0, 'state': 'closed'}, {'id': 417653991, 'number': 96, 'closed': datetime.datetime(2020, 5, 22, 14, 48, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 22, 52, 24, tzinfo=datetime.timezone.utc), 'time_taken': 748574.0, 'time_delta': '8 days, 15:56:14', 'additions': 0, 'deletions': 49, 'state': 'closed'}, {'id': 398504184, 'number': 78, 'closed': datetime.datetime(2020, 4, 13, 15, 49, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 4, 10, 44, 3, tzinfo=datetime.timezone.utc), 'time_taken': 795946.0, 'time_delta': '9 days, 5:05:46', 'additions': 166, 'deletions': 9, 'state': 'closed'}]"
176715424,cluster-addons,kubernetes-sigs/cluster-addons,Go,47,157,15,16,265,5,2,0,"[{'id': 477877069, 'number': 81, 'closed': datetime.datetime(2021, 2, 23, 19, 6, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 2, 14, 53, 52, tzinfo=datetime.timezone.utc), 'time_taken': 15048773.0, 'time_delta': '174 days, 4:12:53', 'additions': 452, 'deletions': 45, 'state': 'closed'}, {'id': 475325939, 'number': 80, 'closed': datetime.datetime(2020, 9, 4, 14, 57, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 10, 33, 5, tzinfo=datetime.timezone.utc), 'time_taken': 620679.0, 'time_delta': '7 days, 4:24:39', 'additions': 24, 'deletions': 5, 'state': 'closed'}, {'id': 471670144, 'number': 78, 'closed': datetime.datetime(2020, 9, 4, 16, 59, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 14, 32, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1218425.0, 'time_delta': '14 days, 2:27:05', 'additions': 120, 'deletions': 49, 'state': 'closed'}, {'id': 470099662, 'number': 77, 'closed': datetime.datetime(2020, 9, 4, 13, 33, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 11, 22, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1390242.0, 'time_delta': '16 days, 2:10:42', 'additions': 172, 'deletions': 10, 'state': 'closed'}, {'id': 455820024, 'number': 75, 'closed': datetime.datetime(2020, 8, 16, 13, 56, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 16, 17, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2065152.0, 'time_delta': '23 days, 21:39:12', 'additions': 3409, 'deletions': 44, 'state': 'closed'}, {'id': 447432687, 'number': 73, 'closed': datetime.datetime(2020, 7, 30, 11, 32, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 13, 13, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1721934.0, 'time_delta': '19 days, 22:18:54', 'additions': 840, 'deletions': 0, 'state': 'closed'}, {'id': 444136121, 'number': 71, 'closed': datetime.datetime(2020, 7, 9, 13, 44, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 16, 47, 16, tzinfo=datetime.timezone.utc), 'time_taken': 507435.0, 'time_delta': '5 days, 20:57:15', 'additions': 63, 'deletions': 10, 'state': 'closed'}, {'id': 443629670, 'number': 70, 'closed': datetime.datetime(2020, 7, 9, 13, 26, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 16, 37, 30, tzinfo=datetime.timezone.utc), 'time_taken': 593342.0, 'time_delta': '6 days, 20:49:02', 'additions': 43, 'deletions': 1, 'state': 'closed'}, {'id': 437442586, 'number': 69, 'closed': datetime.datetime(2020, 6, 29, 13, 55, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 18, 5, 3, tzinfo=datetime.timezone.utc), 'time_taken': 762623.0, 'time_delta': '8 days, 19:50:23', 'additions': 3800, 'deletions': 0, 'state': 'closed'}, {'id': 434025723, 'number': 68, 'closed': datetime.datetime(2020, 6, 29, 14, 1, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 16, 18, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1374164.0, 'time_delta': '15 days, 21:42:44', 'additions': 1074, 'deletions': 0, 'state': 'closed'}, {'id': 434024772, 'number': 67, 'closed': datetime.datetime(2020, 6, 13, 16, 18, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 16, 10, 36, tzinfo=datetime.timezone.utc), 'time_taken': 473.0, 'time_delta': '0:07:53', 'additions': 3359, 'deletions': 0, 'state': 'closed'}, {'id': 427904454, 'number': 59, 'closed': datetime.datetime(2020, 6, 29, 14, 15, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 15, 8, 50, tzinfo=datetime.timezone.utc), 'time_taken': 2156796.0, 'time_delta': '24 days, 23:06:36', 'additions': 2662, 'deletions': 0, 'state': 'closed'}, {'id': 417647862, 'number': 56, 'closed': datetime.datetime(2020, 5, 15, 18, 45, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 22, 33, 45, tzinfo=datetime.timezone.utc), 'time_taken': 159112.0, 'time_delta': '1 day, 20:11:52', 'additions': 76, 'deletions': 11, 'state': 'closed'}, {'id': 390305783, 'number': 49, 'closed': datetime.datetime(2020, 12, 3, 5, 50, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 9, 0, 36, tzinfo=datetime.timezone.utc), 'time_taken': 22452568.0, 'time_delta': '259 days, 20:49:28', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 383136011, 'number': 45, 'closed': datetime.datetime(2020, 3, 4, 16, 45, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 3, 19, 36, 33, tzinfo=datetime.timezone.utc), 'time_taken': 76155.0, 'time_delta': '21:09:15', 'additions': 5, 'deletions': 22, 'state': 'closed'}, {'id': 381432704, 'number': 44, 'closed': datetime.datetime(2020, 3, 17, 14, 52, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 28, 14, 56, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1554949.0, 'time_delta': '17 days, 23:55:49', 'additions': 4015, 'deletions': 0, 'state': 'closed'}, {'id': 379060433, 'number': 42, 'closed': datetime.datetime(2020, 2, 24, 17, 56, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 24, 15, 42, 41, tzinfo=datetime.timezone.utc), 'time_taken': 8049.0, 'time_delta': '2:14:09', 'additions': 12, 'deletions': 0, 'state': 'closed'}]"
185685246,addon-operators,johnsonj/addon-operators,Go,0,0,3,7,26,1,5,1,"[{'id': 437547045, 'number': 5, 'closed': None, 'created': datetime.datetime(2020, 6, 21, 13, 41, 25, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 43, 'deletions': 1, 'state': 'open'}, {'id': 433363247, 'number': 4, 'closed': datetime.datetime(2020, 6, 11, 23, 18, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 22, 25, 1, tzinfo=datetime.timezone.utc), 'time_taken': 3200.0, 'time_delta': '0:53:20', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 433090283, 'number': 3, 'closed': datetime.datetime(2020, 6, 11, 15, 2, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 13, 43, 53, tzinfo=datetime.timezone.utc), 'time_taken': 4732.0, 'time_delta': '1:18:52', 'additions': 150, 'deletions': 589, 'state': 'closed'}, {'id': 426351462, 'number': 2, 'closed': datetime.datetime(2020, 6, 5, 18, 37, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 5, 1, 59, tzinfo=datetime.timezone.utc), 'time_taken': 308130.0, 'time_delta': '3 days, 13:35:30', 'additions': 208, 'deletions': 12, 'state': 'closed'}, {'id': 426325790, 'number': 1, 'closed': datetime.datetime(2020, 6, 10, 14, 34, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 3, 22, 12, tzinfo=datetime.timezone.utc), 'time_taken': 731556.0, 'time_delta': '8 days, 11:12:36', 'additions': 575, 'deletions': 16, 'state': 'closed'}]"
