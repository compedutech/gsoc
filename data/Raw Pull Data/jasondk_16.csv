pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
553813200,LB-519: Show the timestamp imported in the Last.FM importer,"# Problem

JIRA ticket [LB-519](https://tickets.metabrainz.org/browse/LB-519)
The Last.FM import page doesn't show the timestamp of the last imported track, so users can't gauge the progress.

# Solution

I retrieved the first song's listened_to from the payload, which is the latest timestamp imported on that page.
I converted this to an epoch to display it as a string and add it to the message.

![image](https://user-images.githubusercontent.com/57575778/104384711-c8064f00-54e6-11eb-9d5c-9e81eac50bf4.png)




",True,1236,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1236,https://github.com/metabrainz/listenbrainz-server/pull/1236,closed,42,2,3,4,10,0,0,0,[],2021-01-12 22:59:51+00:00,2021-01-19 19:09:36+00:00,590985.0,"6 days, 20:09:45",[],"[{'commit_sha': '57803549d3f8588db0a0b5213208a159c0478216', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a77f5c8909ebc29fc3c6cbeae9b7d41321c34760', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f085c95973b64e1a31e8d0497c6d41070dfc221d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '00ce94ac89744cf4a5e21ac4ac589f5413425033', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
557154879,[LB-516] Rewrite the APIService retries to be iterative,"[Jira Ticket LB-516](https://tickets.metabrainz.org/browse/LB-516)
Rewrite the APIService retries to be iterative + updated tests

# Problem

the retry logic in the APIService file for submit-listens recursively calls the same function if there's a rate limit error or something similar.
This is risky as it can lead to heap overflows in the real world. We should change this logic to be iterative instead.

# Solution

- Removed recursive function calls and added a while loop to make function iterative

- Because the function can't return a response and continue the loop at the same time, the 429 error test was updated to retain it's functionality.
",True,1242,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1242,https://github.com/metabrainz/listenbrainz-server/pull/1242,closed,57,35,2,10,4,3,0,0,[],2021-01-19 04:19:11+00:00,2021-01-29 12:20:20+00:00,892869.0,"10 days, 8:01:09","[{'comment_id': 561524429, 'comment_body': ""This won't cause the JavaScript to sleep for 3 seconds here, it will simply setup a timeout to call the given callback after 3 seconds and continue. If you want it to sleep you can wait on a `Promise` which gets resolved in 3 seconds like this.\r\n```js\r\nawait new Promise((resolve) => setTimeout(resolve, 3000))\r\n```"", 'comment_created': datetime.datetime(2021, 1, 21, 2, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ishaanshah', 'type': 'User'}, {'comment_id': 561525561, 'comment_body': 'I think there should be a `continue` statement over here, otherwise it will just return the 429 response. ', 'comment_created': datetime.datetime(2021, 1, 21, 2, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ishaanshah', 'type': 'User'}, {'comment_id': 561527264, 'comment_body': 'You should wait on a `Promise` here too as mentioned above, otherwise we will be executing the loop very quickly which will lead to performance issues.', 'comment_created': datetime.datetime(2021, 1, 21, 2, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ishaanshah', 'type': 'User'}]","[{'commit_sha': '57803549d3f8588db0a0b5213208a159c0478216', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a77f5c8909ebc29fc3c6cbeae9b7d41321c34760', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f085c95973b64e1a31e8d0497c6d41070dfc221d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '00ce94ac89744cf4a5e21ac4ac589f5413425033', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '68bddfcae58c7cb5e281ce8f8a46f738099b15d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c371f0160f77d8c301ad4bba59b77c64df22c22f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3f0ff20e9982cfb72ab11380b150a63748280ab3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '784c3eed3ef5b035fae99a7b59e70c102d8a0a2a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f8886156e1004ebff319f773b55b2472a4519cba', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd0915dab424ade40c1e7538abe6dd31e1be3b63d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
625727117,LB-802: Importer Last.FM privacy warning,"[LB-802](https://tickets.metabrainz.org/browse/LB-802)

This PR checks whether or not the user's Last.FM scrobbles are private and displays a more helpful error message.
![image](https://user-images.githubusercontent.com/57575778/116494053-e3f2ee00-a854-11eb-8dd9-899a3c52b798.png)
",True,1417,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1417,https://github.com/metabrainz/listenbrainz-server/pull/1417,closed,134,2,4,4,2,6,0,1,[],2021-04-29 02:08:02+00:00,2021-05-25 13:01:49+00:00,2285627.0,"26 days, 10:53:47","[{'comment_id': 629212031, 'comment_body': ""While this does work as expected, I think it may be wise to use only one format in these tests (`expect( await…).toEqual` vs. `await expect(…).resolves.toEqual`)\r\n\r\nI suppose `await expect(x).resolves.to…` is more flexible and ensures promise rejections are caught cleanly (and allows us to test `.rejects.toThrowError()`  as you did below), so let's go with that format."", 'comment_created': datetime.datetime(2021, 5, 10, 9, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 629213095, 'comment_body': ""Small nitpick, but I think the  `getUserPrivacy` file should be called something like  `lastFMPrivateUser`.\r\nAs we keep adding more mocks it'll be handy to have a clearer description."", 'comment_created': datetime.datetime(2021, 5, 10, 9, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 629213362, 'comment_body': 'Same comment as above for `await expect(…)`', 'comment_created': datetime.datetime(2021, 5, 10, 9, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 629220948, 'comment_body': 'Could you add a more precise expectation for (part of) the privacy message, like \r\n`.toContain(""Please make sure your Last.fm recent listening information is public by updating your privacy settings"")` ?', 'comment_created': datetime.datetime(2021, 5, 10, 9, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 629222517, 'comment_body': '```suggestion\r\n      return Promise.reject(new Error(""Fetch error""));\r\n```\r\nand may follow it with:\r\n`await expect(instance.getUserPrivacy()).rejects.toThrowError(""Fetch error"");`\r\n\r\nWith that we ensure this is the specific error that was thrown; otherwise another error somewhere else in the code could throw another error and we wouldn\'t realize.', 'comment_created': datetime.datetime(2021, 5, 10, 9, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 637380016, 'comment_body': 'That makes sense, and I updated getUserPrivacy() to throw the specific error from the failed fetch instead of throwing a new error to match with the test.', 'comment_created': datetime.datetime(2021, 5, 22, 9, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}]","[{'commit_sha': '9423d782371f27ebc6e962d6a19e4586b34800e2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c51fbec8e9e28054d8b1f72ef09a6b95c3bf92c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '554f0125e88ea96fecfa3a2b931ffd45260e195b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f458054ccf06276af7d5d299ec66d4a2e99594f0', 'committer_username': 'MonkeyDo', 'committer_name': 'Monkey Do', 'committer_email': None, 'commit_date': datetime.datetime(2013, 12, 13, 16, 38, 28, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
584608116,LB-531: Adjust timestamp format for older listens on listens page,"Jira ticket [LB-529:](https://tickets.metabrainz.org/browse/LB-529)

# Problem

The timestamps on the recent listens page can be vague when viewing older listens.

# Solution

preciseTimestamp will determine how old the listened_at date is and format it accordingly on the ListenCard:
![image](https://user-images.githubusercontent.com/57575778/109933776-a0c73500-7c80-11eb-8046-5fdaa0e59b48.png) (<24 hours)
![image](https://user-images.githubusercontent.com/57575778/109933814-acb2f700-7c80-11eb-8d36-373528b07ea6.png) (<1 year)
![image](https://user-images.githubusercontent.com/57575778/109933881-bc324000-7c80-11eb-9ea0-68763767215e.png) (>1 year)


",True,1314,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1314,https://github.com/metabrainz/listenbrainz-server/pull/1314,closed,410,21,7,21,2,13,0,0,[],2021-03-04 08:32:43+00:00,2021-03-06 12:05:21+00:00,185558.0,"2 days, 3:32:38","[{'comment_id': 587344184, 'comment_body': 'Better to remove the comment or explicitly set year to `undefined` for clarity.', 'comment_created': datetime.datetime(2021, 3, 4, 10, 25, 22, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 587352091, 'comment_body': ""We use formats other than Listen in other parts fo the website, for which we'll also want to use this method (once it's in utils.tsx).\r\n\r\nIn order to make it work everywhere, we'll want to pass just a timestamp argument rather than the whole listen object.\r\n\r\nThis `listen.listened_at_iso || listen.listened_at` business should be outside of this method consequently.\r\n"", 'comment_created': datetime.datetime(2021, 3, 4, 10, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 587502481, 'comment_body': ""I'm just opening a suggestion here - should it be a listen over 365 days old, or should it be any listen from last year? e.g. in Feb 2021, a listen from Dec 2020 will include the year"", 'comment_created': datetime.datetime(2021, 3, 4, 14, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 587503508, 'comment_body': ""I don't know how the JS Date object works here, but listened_at is going to be in the UTC timezone. Is this object in the local tz, or UTC, and how does it compare with the timezone in the next line?"", 'comment_created': datetime.datetime(2021, 3, 4, 14, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 587503975, 'comment_body': ""Just asking a question here, should we hard-code this locale, or is there a way of using the browser's default locale?"", 'comment_created': datetime.datetime(2021, 3, 4, 14, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alastair', 'type': 'User'}, {'comment_id': 587536167, 'comment_body': ""I think if I'm in Feb 2021 and I see a date in March, I'll assume it's that of the past year. \r\nI think this assumption works well and we end up with a slightly less formal looking date."", 'comment_created': datetime.datetime(2021, 3, 4, 14, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 587538803, 'comment_body': 'Date expects a UTC timestamp and toLocaleString will transform it according to the current TZ (unless `timeZone` is specified in the options).', 'comment_created': datetime.datetime(2021, 3, 4, 14, 57, 5, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 587539971, 'comment_body': ""Nice catch, I missed that! \r\n\r\nWe should use `.toLocaleString(undefined, {…options})` so that the user's browser's locale is automatically used (while still passing options as a second argument)."", 'comment_created': datetime.datetime(2021, 3, 4, 14, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 588274257, 'comment_body': 'If I\'m not mistaken, `listened_at_iso` is going to be an ISO datetime string such as `2020-04-10T10:12:04Z`.\r\n\r\n`Number(""2020-04-10T10:12:04Z"") => NaN` so you\'ll have to find another way around this.\r\n\r\nFor example the ES6 [nullish coalescing operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator) `??` : \r\n`listen.listened_at_iso ?? listen.listened_at * 1000`\r\n\r\nThe one potential drawback I can think of is that the above line will return listened_at_iso even if it is an empty string (empty string not considered null). However I think we can live with that.\r\n\r\nAn alternative would be to use lodash utilities, something like this:\r\n`_.isString(listen.listened_at_iso) && Boolean(listen.listened_at_iso) ? listen.listened_at_iso : listen.listened_at * 1000` which, let\'s face it, is a lot uglier, but checks if listened_at_iso is a non-empty string.', 'comment_created': datetime.datetime(2021, 3, 5, 12, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 588274424, 'comment_body': 'Same comment as above', 'comment_created': datetime.datetime(2021, 3, 5, 12, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 588276008, 'comment_body': 'With my previous comment, I realized we can expect either a unix timestamp (number) or an ISO datetime string, so the type should be `(listened_at\r\n: number | string)`', 'comment_created': datetime.datetime(2021, 3, 5, 12, 57, 31, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 588281866, 'comment_body': ""With the comment above came the realization that we should probably add one last protection in case the expected  ISO date string or unix timestamp is not what we expect, or if an unexpected `undefined` is passed:\r\n\r\nWe can easily check if the Date object was able to create a new valid date like this:\r\n```\r\nif(isNaN(listenDate)){\r\n    return '—';\r\n}\r\n```\r\n\r\nHere I'm suggesting we return a placeholder rather than nothing if the date is invalid. How does that sound? Or should we `return listened_at;` instead?"", 'comment_created': datetime.datetime(2021, 3, 5, 13, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 588854561, 'comment_body': 'I went with returning listened_at: all numbers will translate into valid outputs (even negative numbers for some reason) so I imagine that if the date is invalid it would be from an incorrectly formatted ISO string that might be more helpful than just a placeholder.', 'comment_created': datetime.datetime(2021, 3, 6, 8, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}]","[{'commit_sha': '57803549d3f8588db0a0b5213208a159c0478216', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a77f5c8909ebc29fc3c6cbeae9b7d41321c34760', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f085c95973b64e1a31e8d0497c6d41070dfc221d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '00ce94ac89744cf4a5e21ac4ac589f5413425033', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '68bddfcae58c7cb5e281ce8f8a46f738099b15d2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c371f0160f77d8c301ad4bba59b77c64df22c22f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c0910ff8d106accb3ad90d8c93d9d7185727c2bf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b62cffc74c615b1f23ae8802dc26f55e23accbf8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '85e8322e6ac63f9558cce19e6de472d1eed0ba8a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '785e91c2a49a309668929dbc7a5d3c4f33d05599', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '36c23810829667398af99584d572c050eed40dbb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '48849b0d7651405c79d623fcd8be71b8dcbae4a7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c455939b3f61c00cbc6b4e0b1c1e3a9d3780406a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '46771bc7537a5f66c59c286f75ec5eea3ffacb18', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '10d23a394087f62e79eacfaa51aa9107eecb5e02', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '248404f39af2f57ce038e0dacbe6d24d56152d0e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bb0e9218334e5bd9624ca786d9e98d0abc9c8e21', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5e366429b89bc07c5420060b2b191a71af0530d4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'aac119324cb854b0127c0111ae5571dbc4b99491', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '58e338e6e8ccb57f7c05cd93c72cf7664da39e38', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5dcef2f97b7c06ae294fa5c01824a84ba974b287', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
658651912,Implement pinned recording table,"This PR aims to adds the pinned recording table to the database and contains the corresponding SQL update script.

After the script is run the table looks like this:
![image](https://user-images.githubusercontent.com/57575778/120429156-c4eeec80-c329-11eb-9854-8ed7caec4706.png)
",True,1492,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1492,https://github.com/metabrainz/listenbrainz-server/pull/1492,closed,42,0,6,3,4,6,0,0,[],2021-06-01 05:10:35+00:00,2021-06-09 16:16:04+00:00,731129.0,"8 days, 11:05:29","[{'comment_id': 643075959, 'comment_body': 'Let\'s replace this with ""pinned_until TIMESTAMP WITH TIME ZONE NOT NULL"". This way when a track is pinned, we set this value to now() + 1 week. Then in the view that displays the user\'s pinned tracks we can look if the pin has expired and adjust the text accordingly. (e.g. This user has this pinned track X OR This user\'s last pinned track was X)', 'comment_created': datetime.datetime(2021, 6, 1, 12, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 643076189, 'comment_body': 'Fix this too, obvs. :)', 'comment_created': datetime.datetime(2021, 6, 1, 12, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 643077770, 'comment_body': 'We\'re unlikely to want to fetch data from this table using both user_id and recording_mbid. The normal pattern I expect is to ask ""what recordings does this user have pinned""? So, this index should be on user_id only.', 'comment_created': datetime.datetime(2021, 6, 1, 12, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 643078023, 'comment_body': 'In other places we would normally use TEXT here.', 'comment_created': datetime.datetime(2021, 6, 1, 12, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 643078729, 'comment_body': ""Let's call this pinned_recording, since we're pinning recordings and not tracks (the MB db actually has tracks, which are distinct from recordings)."", 'comment_created': datetime.datetime(2021, 6, 1, 12, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 643102177, 'comment_body': 'Also, this should not be a UNIQUE index, otherwise a user can never pin the same track twice.', 'comment_created': datetime.datetime(2021, 6, 1, 13, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}]","[{'commit_sha': '42d2f3d778441bcb34d3dd91d5b61e32a70c41da', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da2ebbe2431f84fafac09f57349729f6ad0b7b27', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c283f88375f20ac3fdd23dfb31461e3ed8a1e04', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
665451678,Add pinned recording database methods,"This PR adds: 
- The `pinned_recording.py` pydantic model representing a valid a pinned recording object,
- the `pinned_recording` python module containing SQLAlchemy query functions used to interact with the database,
- and the database tests.",True,1503,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1503,https://github.com/metabrainz/listenbrainz-server/pull/1503,closed,476,0,4,19,4,25,0,0,[],2021-06-09 00:19:32+00:00,2021-06-15 15:23:37+00:00,572645.0,"6 days, 15:04:05","[{'comment_id': 648132180, 'comment_body': 'Asserts in production code are not really a good idea -- especially if they are uncaught like in this case. I would prefer that you manually check them using if and then raise a BadRequest (or whatever) exception.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 648132804, 'comment_body': 'It would be good to specify the expected format in the error message.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 648134138, 'comment_body': ""Let's define the 7 as a constant of the class so it becomes findable and obvious."", 'comment_created': datetime.datetime(2021, 6, 9, 9, 32, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 648139917, 'comment_body': 'I think we should also store the row ID here.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 648141758, 'comment_body': 'I would prefer to see a single row ID passed into this function. This makes it 100% clear which row to delete and it makes the DB access faster.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 648143078, 'comment_body': 'You should be using >= here and any place you compare with NOW.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 648144535, 'comment_body': 'Format this query like the others please.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 648149511, 'comment_body': 'I suppose catching an Assertion error would do the trick, but I still prefer to avoid assert here.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 648151069, 'comment_body': 'Use the constant here...', 'comment_created': datetime.datetime(2021, 6, 9, 9, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 648570024, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 18, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 648575473, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 18, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 648592854, 'comment_body': 'Changed > to >= everywhere we look for active pins.', 'comment_created': datetime.datetime(2021, 6, 9, 18, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 648593273, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 18, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 648605515, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 9, 19, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 648627202, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 19, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 648627385, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 6, 9, 19, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 648667363, 'comment_body': 'Updated!', 'comment_created': datetime.datetime(2021, 6, 9, 20, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 649068350, 'comment_body': 'Lets not ever raise AssertionError -- lets use ValueError  instead.', 'comment_created': datetime.datetime(2021, 6, 10, 10, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 649070801, 'comment_body': 'Also, raising exceptions that are caught right away and then another exception is raised is not terribly pythonic. Just raise the exceptions with the right error messages and ditch the outer except block, please.', 'comment_created': datetime.datetime(2021, 6, 10, 10, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 649071803, 'comment_body': 'Please also do this for the block above.', 'comment_created': datetime.datetime(2021, 6, 10, 10, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 649764728, 'comment_body': 'I simplified the validators. The remaining code where the exception is caught and another is raised is necessary because we would want to catch the pydantic value error, the AttributeError, and the ValueError from our own required conditions, right? Please let me know if it looks better!', 'comment_created': datetime.datetime(2021, 6, 11, 7, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 650826652, 'comment_body': ""I think it can be useful to write this validators in a way so that they can be reused. For an example, see [this](https://pydantic-docs.helpmanual.io/usage/validators/#reuse-validators). We use datetime and mbids in other models so there's definitely scope for reusing."", 'comment_created': datetime.datetime(2021, 6, 14, 10, 23, 47, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 650828510, 'comment_body': 'Nitpick. I think we should move this constant of the model and name it like `DAYS_UNTIL_UNPIN` to be consistent with how we declare constants elsewhere.', 'comment_created': datetime.datetime(2021, 6, 14, 10, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 651356291, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 15, 0, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 651386034, 'comment_body': 'Done, I ended up keeping only the pinned_until validator for now, I think the use case for the validator would be specific only to this model.', 'comment_created': datetime.datetime(2021, 6, 15, 1, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}]","[{'commit_sha': '07466232bb22295ba1162bf8cc7de6e5cb710f0d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9cc4bb2dff3bedaafce25436294e5737fdc1759', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a5194ff8adb1d2aa43d31d6ffeff75a355e86be', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c86bea76108177772e76a253dd4c08c8bfdbecc', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a02052e17f3f2656ae28d05d7360aba99aa4b7f', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5cda0ad28d71454e60ceb39a8d60b6cb96742d1', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f74bb12d9b3510324e8e419d01bc33af100c097d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0adf4ef647625e10815b27f52cb852c4c9d47c01', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cf96f6bdeed1c65e2736c7f8e186b7c3719d55d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de18abde39754558d159f89d33af7bdbd23c7809', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252ce054c9f9711ab28e28b4a355f5d36494e175', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5664ed5ad167b7f5aa3c179f3c7d68c33eaccdb8', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f3129249c643f255a116af9a76999a2bdce14659', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c950dcb16aa4c035b96ce7b5dc9c99334d48ad3b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b7e87209a93ac8e83bfcdaaeffd9efa8388a9b7', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a946272d670cbc7e4736ac472c51d439201598f', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2670017e8aa347ae63a628ac4936473defa16720', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a23f3bb81cc16acadb688f14a14e5dc8e62ca428', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e392fe6a54c4237c2c68f86e23813770ef745c6', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
673255709,Add Pinned Recording API endpoint,"TO DO:
- [x] Add tests

This PR aims to add the Pinned Recording API endpoint which contains routes to 

- pin, 
https://api.listenbrainz.org/1/pin
- unpin, 
https://api.listenbrainz.org/1/pin/unpin
- delete pin, 
https://api.listenbrainz.org/1/pin/delete/(pinned-id)
- get pin history for a user, 
https://api.listenbrainz.org/1/(user-name)/pins
- and get pin for a user's following list.
https://api.listenbrainz.org/1/(user-name)/pins/following",True,1514,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1514,https://github.com/metabrainz/listenbrainz-server/pull/1514,closed,759,2,8,26,4,9,0,0,[],2021-06-18 08:00:45+00:00,2021-06-29 07:52:26+00:00,949901.0,"10 days, 23:51:41","[{'comment_id': 655981916, 'comment_body': ""You also need to add the feature flag to this file, https://github.com/metabrainz/listenbrainz-server/blob/master/consul_config.py.ctmpl . I'll update the production config and let you know the exact changes needed to this file."", 'comment_created': datetime.datetime(2021, 6, 22, 8, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 656003747, 'comment_body': 'I added `FEATURE_PINNED_REC = \'\'\'{{template ""KEY"" ""feature_pinned_rec""}}\'\'\'`  following the pattern from other commits, please let me know if this is sufficient.', 'comment_created': datetime.datetime(2021, 6, 22, 8, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 656063831, 'comment_body': 'Just casting to an int is normally what we do, rather than using floor().', 'comment_created': datetime.datetime(2021, 6, 22, 9, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 656074282, 'comment_body': 'remove.', 'comment_created': datetime.datetime(2021, 6, 22, 10, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 656074812, 'comment_body': 'nuke.', 'comment_created': datetime.datetime(2021, 6, 22, 10, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 656075179, 'comment_body': ""'aight, scan the module for any other prints. :)"", 'comment_created': datetime.datetime(2021, 6, 22, 10, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 656494587, 'comment_body': 'Oops. Done', 'comment_created': datetime.datetime(2021, 6, 22, 18, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 660069821, 'comment_body': 'I updated the consul configs. Can you please merge the latest master into your branch and then change this line to `FEATURE_PINNED_REC = {{template ""KEY_JSON"" ""feature_pinned_rec""}}`.', 'comment_created': datetime.datetime(2021, 6, 28, 19, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 660340577, 'comment_body': 'Changed!', 'comment_created': datetime.datetime(2021, 6, 29, 7, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}]","[{'commit_sha': 'e6f87ac026c1c97aa92dcc7356258ed4a91a29f9', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '748abb1d5f116ebe5699cf4f4d57a198c5240b35', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb1ff952db767f19d2b883ec4da456fb9b2cf15', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56f04bba54c2aefdfc3a70230689759fba7d94c', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c8de188c38b1994298ab50eb47a8de7de3489f0', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50fea7f2812998b5f5a85c15018814c916608972', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6043253d34e934ff6d23ae9ff6fbe8e28bbcc875', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73cbf50cae39354d7efcaa244cfde44e0dc6307c', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b23f51ceb35f85d850bd72bec676c05a1fb0fc02', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ecd2727047fbea728b9c2b99fab6f7c714a160', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d837e45f5759fbb6f304dd389bee59bc0d1a290', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e640eb9f3b11dae997d6f852586608175363739', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ad3ac151b13e7f2cc54f564b9308086314a5f3', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b7e838ce0e8fbccb06887d5e45b8d11885067d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '452b71e332b97b1fd89e2949e59df7d05b940d82', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f428071b28d796444c0e3591c30933f6af6807', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6383674cc905933753a406cebd9be5848393ec31', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59108bf1f8b27bf78b776509f4180fe494c2f7e4', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be00e7741ac7b88e2ccffd8fe4a23651905f4c99', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14867bd7a9ce275297ccbffc8efc8a9564b0dab8', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a8722cfbaf3487250e8141832c75db13cecb987', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe3c84350c6802672037177df43b0df79571e8d6', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d87fd5202955fbf94128949c8ce110e324a151b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b9fee69acf5dd00b6c4828b1f6cc589e9f8b003', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4651ab1c57668f3d8a62282a0ff1df0c4a9966ea', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14b87c43ce4ca9970ca472cf92ffee110e0b3f6f', 'committer_username': 'amCap1712', 'committer_name': 'Kartik Ohri', 'committer_email': 'kartikohri13@gmail.com', 'commit_date': datetime.datetime(2017, 4, 19, 2, 7, 5, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
678256369,Add optional recordingMBID to pinned recordings,"This PR aims to add recording MBID's to pinned recordings. (builds upon [#1514 ](https://github.com/metabrainz/listenbrainz-server/pull/1514))

As part of ListenBrainz' migration to MBID's, we should store optional MBID's in addition to required MSID's in the `pinned_recordings `table, which allows us to easily switch to MBID's in the future once mapping improves.

Changes specific to this PR:
- update create_tables.sql
- adds admin sql file to recreate the pinned_recording table
- update PinnedRecording model + validator
- update SQLAlchemy queries + tests
- update API + tests

",True,1527,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1527,https://github.com/metabrainz/listenbrainz-server/pull/1527,closed,147,31,8,38,1,3,0,0,[],2021-06-26 01:51:28+00:00,2021-06-30 11:17:04+00:00,379536.0,"4 days, 9:25:36","[{'comment_id': 660423278, 'comment_body': 'I see your logic here -- but I would really prefer to see this redone using ALTER TABLE rather than DROP TABLE. This is more proof against future disasters -- imagine if someone fat-fingers a script name and wants to run a simple update script, but instead gets this script instead by accident. BAM, all of our pins are gone. If this is ALTER TABLE, then the statement will fail (since the column will already exist in this case) and nothing bad happens.', 'comment_created': datetime.datetime(2021, 6, 29, 9, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 660427719, 'comment_body': ""Shouldn't we also test recording_mbids here as well?"", 'comment_created': datetime.datetime(2021, 6, 29, 9, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 660461493, 'comment_body': ""I didn't think about this, it makes sense to be extra cautious about using DROP TABLE. :o Done."", 'comment_created': datetime.datetime(2021, 6, 29, 9, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}]","[{'commit_sha': 'e6f87ac026c1c97aa92dcc7356258ed4a91a29f9', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '748abb1d5f116ebe5699cf4f4d57a198c5240b35', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb1ff952db767f19d2b883ec4da456fb9b2cf15', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56f04bba54c2aefdfc3a70230689759fba7d94c', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c8de188c38b1994298ab50eb47a8de7de3489f0', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50fea7f2812998b5f5a85c15018814c916608972', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6043253d34e934ff6d23ae9ff6fbe8e28bbcc875', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73cbf50cae39354d7efcaa244cfde44e0dc6307c', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b23f51ceb35f85d850bd72bec676c05a1fb0fc02', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ecd2727047fbea728b9c2b99fab6f7c714a160', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d837e45f5759fbb6f304dd389bee59bc0d1a290', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e640eb9f3b11dae997d6f852586608175363739', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ad3ac151b13e7f2cc54f564b9308086314a5f3', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b7e838ce0e8fbccb06887d5e45b8d11885067d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '452b71e332b97b1fd89e2949e59df7d05b940d82', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f428071b28d796444c0e3591c30933f6af6807', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6383674cc905933753a406cebd9be5848393ec31', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59108bf1f8b27bf78b776509f4180fe494c2f7e4', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be00e7741ac7b88e2ccffd8fe4a23651905f4c99', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14867bd7a9ce275297ccbffc8efc8a9564b0dab8', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a8722cfbaf3487250e8141832c75db13cecb987', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128e3ae1b6e4b5dbf45c0a90aec9481182090ca3', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38ebfb135db8db01f10d8aa7fff6751cfccfa204', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c560dce3466955e0abc767c9e1c68c2947b05d47', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe3c84350c6802672037177df43b0df79571e8d6', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d87fd5202955fbf94128949c8ce110e324a151b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e3fec991d67ce7961906191c4b4aa6c7f979bc7', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da925030a8f3f7954c5fb7b0188d23d5028bafb', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b9fee69acf5dd00b6c4828b1f6cc589e9f8b003', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4651ab1c57668f3d8a62282a0ff1df0c4a9966ea', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa131946187df3a839d875be4d8461bf7af3bd54', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932d3f482a72c59d55fa5bd0914aec0f657836a9', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9925c90daff20502baae917d85c80558502c4e8d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebcbb76f815615af565fdaf54d0b214410b84563', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2729be94b5dcaec52781685ef21fd8e884738642', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a98924b02cf1ef3490cfd5efc0ee3e4282199f6', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '937263270c06945c65d3d108cc6ba9377c8ac82b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86a5bf499d2da47fac62e5404bc358f9d7f724dd', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
681417869,Add Pinned Recording Modal,"This PR aims to add the PinRecordingModal component to the frontend to allow users to pin recordings.

Changes:
- adds PinRecordingModal component + tests + snapshot
- adds APIService function + tests
- adds modal to RecentListens page + tests + snapshot
- adds new ListenControl to ListenCard + tests + snapshot
- adds new optional attributes to ListenControl
- updates preciseTimestamp in utils to take optional display setting

![image](https://user-images.githubusercontent.com/57575778/124192421-1e0d8580-da7a-11eb-8887-ee266b3760a4.png)




",True,1538,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1538,https://github.com/metabrainz/listenbrainz-server/pull/1538,closed,700,32,13,66,2,14,0,0,[],2021-07-01 03:43:27+00:00,2021-07-08 10:11:03+00:00,628056.0,"7 days, 6:27:36","[{'comment_id': 662376521, 'comment_body': ""this seems weird? Could we initialize it as an empty string `''` and then remove the optionality from the `PinRecordingModalState` type as well? It removes us having to work with undefined, less code is always good.\r\n\r\nwhat do you think?"", 'comment_created': datetime.datetime(2021, 7, 1, 15, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 662377420, 'comment_body': '(nit)\r\n\r\nThis sentence reads a bit weird to me, it can also be taken in a negative sense. Could we make the sentence more obviously positive?\r\n\r\n""Why do you love this song?"" or something similar? I also notice that the placeholder is along these lines, so perhaps we\'re okay with this.', 'comment_created': datetime.datetime(2021, 7, 1, 15, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 662378988, 'comment_body': '(optional, not blocking the PR)\r\n\r\nDo we know the actual time for this? Maybe we could show it on hover or something, it might be a good user experience.', 'comment_created': datetime.datetime(2021, 7, 1, 15, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 662379536, 'comment_body': ""This button doesn't have an onClick, is that intentional? Does bootstrap handle the closing of the modal instead?"", 'comment_created': datetime.datetime(2021, 7, 1, 15, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 662380522, 'comment_body': ""Is there a reason we don't allow line breaks?"", 'comment_created': datetime.datetime(2021, 7, 1, 15, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 662384189, 'comment_body': ""For my understanding, why are we supporting an undefined `recordingToPin` in the modal? Ideally if we do not have a `recordingToPin` we wouldn't render the modal at all. This would help because then we don't need to care about weird edgecases where recordingToPin is undefined and we're rendering the modal without track names or something. Ideally, we should make the types as strict as possible."", 'comment_created': datetime.datetime(2021, 7, 1, 15, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 662516189, 'comment_body': ""Done. I agree, string `''` and undefined string are the same but this lets us remove the optionality. "", 'comment_created': datetime.datetime(2021, 7, 1, 18, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 662550324, 'comment_body': ""Sure, I appended the timestamp to the text, that way it's viewed more easily as opposed to having to hover. "", 'comment_created': datetime.datetime(2021, 7, 1, 19, 46, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 662553083, 'comment_body': 'Yes, when clicked, bootstrap uses the data-dismiss attribute in the button to hide elements with the class ""modal"" on the page iirc.', 'comment_created': datetime.datetime(2021, 7, 1, 19, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 662556292, 'comment_body': 'It just makes the cards look uniform when they eventually get rendered back to the user, otherwise we could get a blurb content with nothing but line breaks. Restricting it in the input rather is better imo because the user can see how it will look when it gets rendered.\r\n\r\nTwitter allows one line break at a time in tweets, maybe we could do that if this is too restrictive?', 'comment_created': datetime.datetime(2021, 7, 1, 19, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 662566964, 'comment_body': ""The `PinnedRecordingModal ` would have to be rendered before it gets shown: if we only render `PinnedRecordingModal `when `recordingToPin `is set the dataTarget in `ListenControl` isn't able to locate the element with `id=#PinRecordingModal` to show the first time it gets clicked since setState doesn't update `recordingToPin` in the state immediately. \r\n\r\nI changed the component so recordingToPin required for the modal, its now initialized to a random listen in RecentListens so we can avoid the weird undefined edgecases like you said."", 'comment_created': datetime.datetime(2021, 7, 1, 20, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 662567221, 'comment_body': 'Changed the message to make the purpose of pinning recordings a bit clearer.', 'comment_created': datetime.datetime(2021, 7, 1, 20, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 662591003, 'comment_body': 'Updated this function so we can explicitly choose a setting to display timestamps (was needed to show timestamp in modal). ', 'comment_created': datetime.datetime(2021, 7, 1, 21, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 666049791, 'comment_body': ""No I think it's okay for now, let's iterate on it later if we need to."", 'comment_created': datetime.datetime(2021, 7, 8, 9, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}]","[{'commit_sha': 'e6f87ac026c1c97aa92dcc7356258ed4a91a29f9', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '748abb1d5f116ebe5699cf4f4d57a198c5240b35', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb1ff952db767f19d2b883ec4da456fb9b2cf15', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56f04bba54c2aefdfc3a70230689759fba7d94c', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c8de188c38b1994298ab50eb47a8de7de3489f0', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50fea7f2812998b5f5a85c15018814c916608972', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6043253d34e934ff6d23ae9ff6fbe8e28bbcc875', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73cbf50cae39354d7efcaa244cfde44e0dc6307c', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b23f51ceb35f85d850bd72bec676c05a1fb0fc02', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5ecd2727047fbea728b9c2b99fab6f7c714a160', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d837e45f5759fbb6f304dd389bee59bc0d1a290', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e640eb9f3b11dae997d6f852586608175363739', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ad3ac151b13e7f2cc54f564b9308086314a5f3', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b7e838ce0e8fbccb06887d5e45b8d11885067d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '452b71e332b97b1fd89e2949e59df7d05b940d82', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73f428071b28d796444c0e3591c30933f6af6807', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6383674cc905933753a406cebd9be5848393ec31', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59108bf1f8b27bf78b776509f4180fe494c2f7e4', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be00e7741ac7b88e2ccffd8fe4a23651905f4c99', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14867bd7a9ce275297ccbffc8efc8a9564b0dab8', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a8722cfbaf3487250e8141832c75db13cecb987', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128e3ae1b6e4b5dbf45c0a90aec9481182090ca3', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38ebfb135db8db01f10d8aa7fff6751cfccfa204', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d4d573379aa782c6bb796b86f2280a8621b950f', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c560dce3466955e0abc767c9e1c68c2947b05d47', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f8d3b601313b3856967a66b4412f9c9d90fb32d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66f4f4997435c3a61a717bad21e07f5b31e5d7f8', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe3c84350c6802672037177df43b0df79571e8d6', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d87fd5202955fbf94128949c8ce110e324a151b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e3fec991d67ce7961906191c4b4aa6c7f979bc7', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6da925030a8f3f7954c5fb7b0188d23d5028bafb', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b9fee69acf5dd00b6c4828b1f6cc589e9f8b003', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4651ab1c57668f3d8a62282a0ff1df0c4a9966ea', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa131946187df3a839d875be4d8461bf7af3bd54', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932d3f482a72c59d55fa5bd0914aec0f657836a9', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '804aabd8bf1661bb1dbc0a8667b763eb8c6c359b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a5e793567a9e3f9d878cc62951990ec2c464393', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9925c90daff20502baae917d85c80558502c4e8d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebcbb76f815615af565fdaf54d0b214410b84563', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2729be94b5dcaec52781685ef21fd8e884738642', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a3cb41b7a17996fca3dddde11febd4b5730d4b4', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd947ab56f7da13fe94525b2af153050cc3078752', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffdcd7ec25292a49d8466d69c79f237455a2143f', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa34f954a9066e508cd7600fb0e22b380dadfe12', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f9eab6ad0efb3349f9b11b0d320c7c8eeb4c108', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a98924b02cf1ef3490cfd5efc0ee3e4282199f6', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '612abf4f820b350be7fc2052067b85595da56571', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '937263270c06945c65d3d108cc6ba9377c8ac82b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86a5bf499d2da47fac62e5404bc358f9d7f724dd', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93a43368c00943d6e1adddcd47d38c3ed7d4c263', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a04648e12e9645117cd2670aa834ea048a84cb56', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cf69474b105ae8517c16f74f51aeac8325bf076', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847ed5c09a357a91e7a17db0eda4296cb7f30424', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a96ed52d46dbdcb05873a18ca69941de214592d8', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1a14822ee5be712049f921b44aca4c16c482769', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e715548f749698d1c3ee952d76b7e7a35d2604', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '035d1179ca5daaa7da966b27620adbf661b05250', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b3ed8287f3251168345bf571f504880413f24a', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7fcf09f4a0c2e2d66670b7efd00c57c3f7ad8a0', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f96d80dc8d131f9c1e6c47d9b4c16a6c3efe17d4', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '051889f1d80a93fd8bd830f213f6508fcd89631a', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1cda17c5db0689022c46008d4b72574ca353200', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92b9ed2026364a2928302b29a6ce1146835b3066', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '863cae1bf9c3e30cc5d41b2b3ed3cee3623b63fd', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7be458be7f93b9fa1795189cf97d14ae3e33965', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '638465f5f40dc44149c2d168cd9931d391aabfb3', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
687291435,Add PinnedRecordingCard component,"This PR aims to implement a PinnedRecordingCard component and renders it on the Recent Listens page.
![chrome-capture](https://user-images.githubusercontent.com/57575778/125186799-46675380-e1e1-11eb-89ce-1fa04997265c.gif)
 
",True,1549,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1549,https://github.com/metabrainz/listenbrainz-server/pull/1549,closed,1020,2,14,35,4,10,0,1,[],2021-07-11 07:46:53+00:00,2021-08-09 18:55:48+00:00,2545735.0,"29 days, 11:08:55","[{'comment_id': 668712893, 'comment_body': '```suggestion\r\n  pinnedRecording: PinnedRecording;\r\n```\r\n\r\nthis should be small camelcase to keep consistency with other prop names.', 'comment_created': datetime.datetime(2021, 7, 13, 12, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 671069802, 'comment_body': ""let's add a comment explaining why we reload here, it's not immediately obvious to someone who doesn't have much context on the code"", 'comment_created': datetime.datetime(2021, 7, 16, 8, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 671070421, 'comment_body': 'nit\r\n```suggestion\r\n    expect(instance.determineIfCurrentlyPinned()).toBe(true);\r\n```\r\n\r\nwe know that this function always returns a bool , so tightening up the assertion would be a good idea.', 'comment_created': datetime.datetime(2021, 7, 16, 8, 36, 57, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 671070588, 'comment_body': 'same nit\r\n\r\n```suggestion\r\n    expect(instance.determineIfCurrentlyPinned()).toBe(false);\r\n```', 'comment_created': datetime.datetime(2021, 7, 16, 8, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 671072080, 'comment_body': ""this component is huge, hundreds of lines of jsx in one component is not ideal. It's not immediately obvious to me if this could be broken into smaller sub-components, but if it could, we should definitely do it. In general small components are easier to reason about and test.\r\n\r\nWould you mind taking a look and seeing if this can be broken into smaller subcomponents?"", 'comment_created': datetime.datetime(2021, 7, 16, 8, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 671072599, 'comment_body': 'maybe we could create separate components for browser and phone? That would make this file quite a lot smaller and easier to read.', 'comment_created': datetime.datetime(2021, 7, 16, 8, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 671073156, 'comment_body': ""This code is duplicated later as well, is this in other places as well? Could we make it a separate component, or at least a function so that we don't need to duplicate code?"", 'comment_created': datetime.datetime(2021, 7, 16, 8, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}, {'comment_id': 672095037, 'comment_body': 'The browser and phone components are very similar and only have a few differing lines in render() to shift some html around. I broke up the similarities into JSX-element-returning-functions to make the component more readable. \r\n\r\nPlease let me know if this looks better (not sure if you wanted the two split up into different files), if it still looks too big, some other large components are written similarly and I could update those as well. ', 'comment_created': datetime.datetime(2021, 7, 19, 8, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 672097360, 'comment_body': 'I separated it into a function `renderPinTitle` and also did the same for `renderPinDate` and `renderBlurbContent`.', 'comment_created': datetime.datetime(2021, 7, 19, 8, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 673866228, 'comment_body': 'love this, very nice!', 'comment_created': datetime.datetime(2021, 7, 21, 10, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'paramsingh', 'type': 'User'}]","[{'commit_sha': '6bb6cfc0412659473c804fbd60ed26884b991884', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56f008c553dfef7ef9e6eca0a2d978fa989afc56', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8bf6bb69bb6a8a2f4ccd0419856fe6396a4b15b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87c21c97c606941dce471ab5c5db21c18dea3061', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccb413b97d9e1918a432226dfe3bcbba147eeffc', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12fb2dcb862aa36702b2440c84e281cec686c64', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8defbaaa8b976610a525a2b0c712c7c9ef3c1900', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0bd41ebabfe3c8c123fd7ef567d636393d9b3ad', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5198a2a644b8c48b5092c4f437d09dfacee97dd', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '127a8e66c1e1cf7f07bec30e69c61ed2a3914c0b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '096e378844b6d288f1ec35427422f564d80df3f4', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f38d0f54825ca4212e46067b7e7b06b22367f46', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68c34f489561a0807432cb0b7dd44dc8beac75b1', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39c0c8f00d4df5a81294595458bb3b51b76c1d62', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04fce39fca62492454ee820523aae5569ac8ff33', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1031c8b8f6a6f003be8993a17764a979b2ce143d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8252f73ffc7250c1bda29afb4b254a6c071b1dca', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6108887b04d0b2835ed2792e0802d9fe87ac2185', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce66d972c48ac73522e98984e285bb9485594c22', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90a3d5baa702a757284abfa172e060d5d78b88ce', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60917718f8d124abba0c68f5176aca823ebb874', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54f830dc59b2cb4633630a4e79a462da3d614e34', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d2cd12dd99dc9ce78eac59b9e535f17252aa6f', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a663d84c3ad8347ab187702c034c1215f45d1561', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ef7d028d034ddd981f052f4f86e5405257bbd5', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a46cd9f47e868065a180680ba203a5381025cfc6', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85a40d60c48e749ffc9212bac6c044b8670ca565', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '158bfaf34b0bf473b846a07e08ca96ff6b1d2e8b', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bd3748db88cc715eebefc8895f4c0c0f1f8f5e0', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5edf51e6d15ded1f78ff6eced08df863c3cbccc6', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e807f898cbf88bb0612e23ff85cc8b5632898c14', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '281ea8f38553d66abfd695f0259f5d9e307ee128', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82f9fca35511815e129527e453bc819c376ab60d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '118fbf62179e23eeb312d7c9ac7b32989243858d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e457efa5eb34b1ce4e05440547dd4cd5ecf87fa', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
712222972,Make pins listenable on BrainzPlayer,"(this PR doesn't depend on any others to be merged)

This PR aims to make pins listenable on BrainzPlayer (and also changes to take an object instead of an #id.)
Props `className`, `playListen()`, and `removePinFromPinsList()` are added to PinnedRecordingCard component. 

![chrome-capture (1)](https://user-images.githubusercontent.com/57575778/129338900-9a859819-21e2-44d7-873f-a0b9bef89274.gif)
",True,1581,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1581,https://github.com/metabrainz/listenbrainz-server/pull/1581,closed,106,16,7,8,0,4,0,1,[],2021-08-13 09:49:04+00:00,2021-08-24 10:30:26+00:00,952882.0,"11 days, 0:41:22","[{'comment_id': 694088524, 'comment_body': 'To be implemented in future or forgot to commit something?', 'comment_created': datetime.datetime(2021, 8, 23, 15, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 694236317, 'comment_body': ""I am not sure this will work as expected. Should this effect also take place if a listen of the same recording which is pinned is being played ? In that case, this won't work. I am fine either way but wanted to confirm the intent."", 'comment_created': datetime.datetime(2021, 8, 23, 19, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 694720385, 'comment_body': ""There's no need to pass in a function that does anything since there's no pin list in this component, only in userPins. removePinFromPinsList could also be made into an optional prop but I figured this looks cleaner."", 'comment_created': datetime.datetime(2021, 8, 24, 10, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 694723757, 'comment_body': ""Yes it works as intended, if BrainzPlayer is playing something only one card component should be highlighted at a time whether it's a listen or pin."", 'comment_created': datetime.datetime(2021, 8, 24, 10, 28, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}]","[{'commit_sha': 'd10ccfc1f32a9392526997f1e6f344c93a35d4a0', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ff429809e4c9309c7a0758aae106a5915739df', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e7958d7c4406fc7335f52e4386209624ad6c1d7', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0399ab6963f271678ad3e5ab2f50d8742dfabc79', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bd18bdee4abc3f267da73fcb3a135d905a4a611', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d38618b8b3ffb91404a7ba67e3e75237d4b791d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3a4c143a612f2833a14f8ab7379cd6cc3c0ea9e', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7dce16d508f4d34df42cb2fbdab4f105c430631', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
713303531,Pin history view,"(based off #1581, diff link [here](https://github.com/jdaok/listenbrainz-server/compare/make-pins-listenable-on-brainzplayer..jdaok:pin-hist-view))

TO DO: 
- [x] add userPins.test.tsx

This PR aims to add a Pins tab to profiles to allow users to view any recordings they have pinned.
![image](https://user-images.githubusercontent.com/57575778/129548370-5f4ccd84-e1ae-48b6-afb8-b4568e9594d4.png)
",True,1583,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1583,https://github.com/metabrainz/listenbrainz-server/pull/1583,closed,1073,3,9,17,3,2,0,1,[],2021-08-16 10:18:12+00:00,2021-08-24 14:45:02+00:00,707210.0,"8 days, 4:26:50","[{'comment_id': 694241739, 'comment_body': 'Need to add methods and CORS header like https://github.com/metabrainz/listenbrainz-server/pull/1588', 'comment_created': datetime.datetime(2021, 8, 23, 19, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 694242560, 'comment_body': 'This endpoint should probably be paged, like accepting a count and offset in the query parameters and passing it to `get_pin_history_for_user`.', 'comment_created': datetime.datetime(2021, 8, 23, 19, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}]","[{'commit_sha': 'e210ed10ea52720f92089a94ea7cc37eaecd3df7', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90f7f57ff473542b77c20825e268c9a6e1842412', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b65b7200d439c7f37bc676c66980d19701b4ef9', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5a49018b7dd803329c22b649143437645a4d238', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa705adb785c0cc419925e60b343f3d1a1c02318', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d03b51ed95539b0ce3ae1c41f3239a4b019ded2', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd2c32291f05ac6e85dd95f363e67aab39b1013d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '518bc249b5e225cbb9fcb0c7233ce4c637ce5918', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0627f6bad9ae218d056c65ebb820b5bee67602c6', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80b3ccb070a7a3b7d38ba68156ef44db59b4dc58', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6b3f579072b5356613f9ecaf95fa072da387dd7', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'effac0c5acb7b40a13ea6031524517e3f54eae1d', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e19da265649447551c76077e7cecef29d867ee16', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d9d148f71ba430fb6c2c15509f7a56e0e76472', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afc5efaccd39b85b0f91fe299015707209360fad', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75cadc82f4a031e2b6b2d97e2d709e7b6ab2a8ae', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7365413aacc62e8178fbad6ebfd764016ae79642', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
717279624,Add CritiqueBrainz functions to APIService,"(this PR does not depend on any others and can be merged)

This PR adds some types and helper functions to APIService that will be used by the Critiquebrainz review modal.

`lookupMBRelease()` & `lookupMBReleaseFromTrack() `send lookup requests to MusicBrainz, these will be used to search for entities of Listens in the review modal.",True,1584,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1584,https://github.com/metabrainz/listenbrainz-server/pull/1584,closed,120,0,3,7,1,5,0,2,[],2021-08-22 09:36:24+00:00,2021-08-25 16:06:15+00:00,282591.0,"3 days, 6:29:51","[{'comment_id': 695904892, 'comment_body': ""This is equivalent to `return await response.json();` which is warned against by an eslint rule. Here's a nice writeup on it, https://jakearchibald.com/2017/await-vs-return-vs-return-await/. TL,DR; is that `return await` is only useful inside a try/catch.\r\n\r\nSo in this case, it'll probably be fine to do `return response.json()`. But I am not sure if we would want to add a try/catch here or in the react component etc. @MonkeyDo knows better about react error handling so this is fine by me for now."", 'comment_created': datetime.datetime(2021, 8, 25, 16, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 697106854, 'comment_body': 'I agree that over here we will be fine with just `return response.json()`. The relevant change can be made.', 'comment_created': datetime.datetime(2021, 8, 27, 2, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'akshaaatt', 'type': 'User'}, {'comment_id': 697107072, 'comment_body': 'We are missing an `await` over here.', 'comment_created': datetime.datetime(2021, 8, 27, 2, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'akshaaatt', 'type': 'User'}, {'comment_id': 697107129, 'comment_body': 'The `await` again.', 'comment_created': datetime.datetime(2021, 8, 27, 2, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'akshaaatt', 'type': 'User'}, {'comment_id': 697107543, 'comment_body': 'This could just be `language` since the api uses this standard. This is not necessary though.', 'comment_created': datetime.datetime(2021, 8, 27, 2, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'akshaaatt', 'type': 'User'}]","[{'commit_sha': 'aaee8cae88f84eb073476ab6b2a0a06ec398f3fd', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f36aa38f2ac8ebb0033b088492aa545b5d37df89', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e468f99014d1b0556bc10b938fa8026d994acb', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128c006ea3d0cbf27d760e86fef777d6671efdbc', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c88cd20dad54659d222a49b77f23e7f4575e1b1', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60995b4c603453c10d31228e5a2f66b71b96e593', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9213a08e047c12d97beaeead5ead607e62434e61', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4
717282873,CritiqueBrainz Review Modal,"Please do not merge until
- [x] https://github.com/metabrainz/critiquebrainz/pull/306
- [x] https://github.com/metabrainz/critiquebrainz/pull/303
- [x] https://github.com/metabrainz/critiquebrainz/pull/371
- [x] `CBReviewModal.test.tsx` added

**To test the modal, build #1586 instead**

![image](https://user-images.githubusercontent.com/57575778/130351707-d89a7b8b-3c68-4960-876c-c881d69b51fc.png)
![ezgif-3-60ef907d4b1d](https://user-images.githubusercontent.com/57575778/130351091-e0d67653-bd5d-450f-a834-c47f500b0cd4.gif)

I added two libraries: [iso-639-1](https://www.npmjs.com/package/iso-639-1) to get the languages needed for the dropdown selector, and [React Simple Star Rating](https://www.npmjs.com/package/react-simple-star-rating) to implement the 5 star rating, which requires that React is also updated to a newer version.

",True,1585,https://api.github.com/repos/metabrainz/listenbrainz-server/pulls/1585,https://github.com/metabrainz/listenbrainz-server/pull/1585,closed,1611,212,14,30,5,70,0,0,[],2021-08-22 10:03:05+00:00,2021-09-08 15:17:47+00:00,1487682.0,"17 days, 5:14:42","[{'comment_id': 695909418, 'comment_body': 'Can this be done in the react component instead?', 'comment_created': datetime.datetime(2021, 8, 25, 16, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 695918618, 'comment_body': 'This looks unrelated.', 'comment_created': datetime.datetime(2021, 8, 25, 16, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 695938332, 'comment_body': 'Oh! I see its used here. My understanding from the chat logs was that lastfm supplied mbids are not trust worthy and hence should not be used. @mayhem thoughts?', 'comment_created': datetime.datetime(2021, 8, 25, 16, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 696033393, 'comment_body': 'Correct -- they could be used as hints, but that is about it ', 'comment_created': datetime.datetime(2021, 8, 25, 19, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mayhem', 'type': 'User'}, {'comment_id': 696447246, 'comment_body': ""Using jquery in the component made it so Jest kept failing the tests. We could try installing the jquery and types library to fix but we already have the jquery loaded on the page here (unless i'm missing something)"", 'comment_created': datetime.datetime(2021, 8, 26, 9, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 696479211, 'comment_body': ""Ok, lastfm mbids removed. For what it's worth though I tested exclusively with lastfm mbids and they were pretty spot on for my imported listens."", 'comment_created': datetime.datetime(2021, 8, 26, 9, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 696511802, 'comment_body': 'Cool, no worries. I suggested that because keeping everthing about the component in the same file looked nicer to me. But since that causes issues, its fine to keep it here.', 'comment_created': datetime.datetime(2021, 8, 26, 10, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 696648666, 'comment_body': 'CB may not support all languages this component supports. The list of allowed languages is available from `https://critiquebrainz.org/ws/1/review/languages`. We should filter `allLanguages` to retain only those languages returned by the CB endpoint.', 'comment_created': datetime.datetime(2021, 8, 26, 13, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 696830348, 'comment_body': 'I started debugging the failing tests. This test is failing because `submitReviewToCB` function of the compoment is spied here. Spying implicitly mocks the method as well, so when at L368, `instance.submitReviewToCB` is invoked, it is the mocked implementation which is called and not the actual method to submit the review. Maybe spy on the `APIService` method instead?', 'comment_created': datetime.datetime(2021, 8, 26, 17, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 696832031, 'comment_body': ""Huh, reading the docs again, my hypothesis seems wrong. I'll look again."", 'comment_created': datetime.datetime(2021, 8, 26, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 697105491, 'comment_body': ""@amCap1712 Just to be sure, the CB endpoint returns 184 iso639-1 codes (it looks like this is standard and this list won't be changing often). Is it okay to store this list of codes locally to avoid an API call to the CB endpoint?"", 'comment_created': datetime.datetime(2021, 8, 27, 2, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 697142812, 'comment_body': 'I looked into the languages CB supports. https://github.com/metabrainz/critiquebrainz/blob/2e01fa328bdd0e7430bd7cce2c997feb863608da/critiquebrainz/db/review.py#L30-L33\r\nIt seems to support all ISO 639-1 languages. Fine to leave as is for now then.', 'comment_created': datetime.datetime(2021, 8, 27, 4, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'amCap1712', 'type': 'User'}, {'comment_id': 698597399, 'comment_body': 'This didn\'t seem to work for me. When I load the page and open the review modal,   clicking on the info icon does not open the popover as expected.\r\nIf I run `$(\'[data-toggle=""popover""]\').popover();` in the console it does work.\r\nIt\'s possible that this is because the modal is not yet rendered on page load, and so the selector `[data-toggle=""popover""]` doesn\'t return any element.\r\n\r\nI think generally it would be better to move away from jQuery (which I\'d like to get rid of eventually) to a React-based solution.\r\n\r\nThere are full-blown Bootstrap libraries for react that support popovers, but that might be a bit much at this time for this single use-case.\r\nPerhaps a small library such as [react-tiny-popover](https://www.npmjs.com/package/react-tiny-popover) would do the trick?', 'comment_created': datetime.datetime(2021, 8, 30, 15, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698603984, 'comment_body': ""This should probably be \r\n```suggestion\r\n          onClick={this.submitReviewToCB}\r\n```\r\nand get the auth access token from `this.context` in the submitReviewToCB method directly.\r\n\r\nIn general, it is better to not create arrow functions (`() =>{…}`) or bound functions in the render part, because at each re-render those functions will be recreated, which will slow down the application a tiny bit.\r\nOn the other hand, class methods like submitReviewToCB are only created once when the class is instantiated and are preferable when —like the code I'm commenting on— it is avoidable.\r\n\r\nFor the retry mechanism that requires passing a new auth token, you can get away with something like this:\r\n```\r\nsubmitReviewToCB = async (\r\n    access_token?: string,\r\n    maxRetries: number = 1\r\n  ): Promise<void> => {\r\n    const { isCurrentUser, newAlert, listen } = this.props;\r\n    const { APIService, critiquebrainzAuth } = this.context;\r\n    const accessToken = access_token ?? critiquebrainzAuth?.access_token;\r\n```\r\nThe only change is on the last line I redefine an accessToken variable that will be either the new token (after refreshing) that was passed as an argument, or if it's undefined the CB access_token from the context."", 'comment_created': datetime.datetime(2021, 8, 30, 15, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698605917, 'comment_body': ""Some more background on that if you're curious: https://reactjs.org/docs/faq-functions.html#arrow-function-in-render"", 'comment_created': datetime.datetime(2021, 8, 30, 15, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698608629, 'comment_body': '```suggestion\r\n      this.handleError(error, ""Could not fetch release group MBID"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 15, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698610403, 'comment_body': '```suggestion\r\n      this.handleError(error, ""Could not fetch recording MBID"");\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 15, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698619342, 'comment_body': ""I think some renaming and comments around here can clarify what is going on.\r\nIt's hard to follow the code when one (like myself) knows nothing about the structure of MusicBrainz responses, medias, tracks and whatnot .\r\n\r\n```suggestion\r\n      // Select the first release media that has tracks\r\n      const mediaWithTracks = releaseMedias.find((res: any) => res.tracks);\r\n```\r\n\r\nAnd below:\r\n```\r\nconst matchingNameTrack = mediaWithTracks.tracks.find( …\r\n```"", 'comment_created': datetime.datetime(2021, 8, 30, 16, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698623774, 'comment_body': 'This might make more sense  instead at the end of this method, in the else block if we found no MBID:\r\n\r\n```\r\nif(artist_mbid) {\r\n // we set the artistEntity here\r\n}\r\nelse {\r\nthis.setState({ artistEntity: null });\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 16, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698624132, 'comment_body': 'Same comment as above, perhaps better to set this in the else block if there is no release_group_mbid', 'comment_created': datetime.datetime(2021, 8, 30, 16, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698625624, 'comment_body': ""Brackets please :)\r\nI myself used to not care, but brackets do help with code readability and avoiding costly mistakes in the future (when someone else works on the code)\r\nAlso just to be consistent with the other if blocks !\r\n\r\n```suggestion\r\n    if (additional_info?.release_group_mbid) {\r\n      release_group_mbid = additional_info?.release_group_mbid;\r\n    // If listen doesn't contain release_group_mbid attribute,\r\n    // search for it using the release mbid instead\r\n    } else if (additional_info?.release_mbid) {\r\n      release_group_mbid = await this.getGroupMBIDFromRelease(\r\n        additional_info?.release_mbid\r\n      );\r\n    }\r\n```"", 'comment_created': datetime.datetime(2021, 8, 30, 16, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698626644, 'comment_body': ""Again I'll ask for {{{{{{{{{ moar brackets }}}}}}}}} :p\r\n\r\nI think you can skip the last `else` block by defining `let entity = null;` as a null at first"", 'comment_created': datetime.datetime(2021, 8, 30, 16, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698630293, 'comment_body': 'We test one condition but show an error fro two conditions; either we should also test for `textContent.length > this.maxTextLength` or change the error text to be something like `Your review needs to be longer than ${this.minTextLength} characters.`', 'comment_created': datetime.datetime(2021, 8, 30, 16, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698634154, 'comment_body': 'This is basically a ""reset"", is that correct?\r\nShould it also reset the `recordingEntity`, `artistEntity` and `releaseGroupEntity` ? \r\nWhat about `acceptLicense`?\r\nIf it\'s easier, this could be extracted to a separate method `resetCBReviewForm` or something like that, if you ever need to call it from another place.', 'comment_created': datetime.datetime(2021, 8, 30, 16, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698644288, 'comment_body': ""I think you're missing another `});` here and the rest of the tests below are all part of  `refreshCritiquebrainzToken` "", 'comment_created': datetime.datetime(2021, 8, 30, 16, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698647991, 'comment_body': 'Calling this async method here seems odd; did you mean to `return this.submitReviewToCB(newToken, maxRetries - 1);` ?\r\nIn which case you\'ll probably want to set loading to false somewhere else.\r\n\r\nIf you didn\'t mean to return another promise, I guess I\'m not sure how any error in the second call would be caught, considering we\'re out of the ""try"" part of this try-catch block. That\'s the sort of mental gymnastics that makes my head hurt :) , but that should be testable in the test file if this is intended', 'comment_created': datetime.datetime(2021, 8, 30, 16, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698649962, 'comment_body': 'In what cases can there be a success but no entityToReview ?\r\nIt seems to me that it should never happen and might indicate an issue', 'comment_created': datetime.datetime(2021, 8, 30, 16, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698651219, 'comment_body': '```suggestion\r\n            We could not find a recording for{"" ""}\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 16, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698652074, 'comment_body': 'I think you can\r\n```suggestion\r\n                return null;\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 16, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698654103, 'comment_body': 'It would be nice to style this text to give a direct indication to the user if they are under the required.\r\nSomething like :\r\n```\r\n<small className={textContent.length < this.minTextLength ? \'text-danger\' : \'\'} style={{ display: ""block"", textAlign: ""right"" }}>', 'comment_created': datetime.datetime(2021, 8, 30, 17, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698655581, 'comment_body': 'If the rating is optional, it should be marked as such (or the other fields marked as required)', 'comment_created': datetime.datetime(2021, 8, 30, 17, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698656386, 'comment_body': 'Do you think this could be misinterpreted?\r\nIs a clarification like this required?\r\n```suggestion\r\n          <b>Language of your review: </b>\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 17, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698658150, 'comment_body': ""Damn, that's a long and intimidating checkbox…\r\nI guess there's no good way around it, just like in CB itself."", 'comment_created': datetime.datetime(2021, 8, 30, 17, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698661096, 'comment_body': 'Here you override the onSubmit of the form with a ""submit"" button with an onclick event pointing to this.submitReviewToCB(…).\r\nWith my suggestions above regarding that, I think you should be able to use\r\n```suggestion\r\n          <form className=""modal-content"" onSubmit={this.submitReviewToCB}>\r\n```\r\nand on your submit button remove the onClick handler.\r\nThe `type=""submit""` you have on the button should trigger the method passed as `onSubmit` to the <form> element', 'comment_created': datetime.datetime(2021, 8, 30, 17, 11, 31, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698661479, 'comment_body': 'This looks incorrect :)', 'comment_created': datetime.datetime(2021, 8, 30, 17, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698663610, 'comment_body': ""That's elegant!\r\nIf it comes from the internet, do put a link to the source as a comment"", 'comment_created': datetime.datetime(2021, 8, 30, 17, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698670118, 'comment_body': 'All this new CSS code should live in a new separate file in the root of the css directory, rather than modifying this file in theme/bootstrap.', 'comment_created': datetime.datetime(2021, 8, 30, 17, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698672539, 'comment_body': ""That doesn't look right, that `hate` variable is used for ratings but we shouldn't rely on it always being there.\r\nBut I do see the definition of @hate is just `@hate: @blue` . @blue is defined in static/css/colors.less and those aren't going anywhere, so you can use @blue directly."", 'comment_created': datetime.datetime(2021, 8, 30, 17, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698674531, 'comment_body': '```suggestion\r\n          Words: {countWords(textContent)} / Characters: {textContent.length}\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 17, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698677079, 'comment_body': ""That's an important missing word :p\r\n```suggestion\r\n          <a href={`${this.CBBaseUrl}/review/${reviewMBID}`}> here.</a>\r\n```"", 'comment_created': datetime.datetime(2021, 8, 30, 17, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698682004, 'comment_body': 'I see this as a good opportunity to add missing data to MusicBrainz, if we couldn\'t find anything.\r\n\r\n```suggestion\r\n          We could not link <b>{listen.track_metadata?.track_name}</b> by{"" ""}\r\n          <b>{listen.track_metadata?.artist_name}.</b> to any recording or artist on\r\n          MusicBrainz. If you can\'t find them when searching <a href=""https://musicbrainz.org/search"">on MusicBrainz</a> either,\r\n          please consider <a href=""https://musicbrainz.org/doc/Introduction_to_Editing"">adding them to our database</a>.\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 17, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 698688238, 'comment_body': ""An open question to everybody: do we want to default to English?\r\nThere might be ways to [detect the user's preferred language](https://caniuse.com/mdn-api_navigatorlanguage_languages) from the navigator, and we could always fall back to english for non-supported browsers."", 'comment_created': datetime.datetime(2021, 8, 30, 17, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 699001549, 'comment_body': 'Oops.. Fixed now', 'comment_created': datetime.datetime(2021, 8, 31, 5, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 699169747, 'comment_body': 'Done, form changed to read ""Rating (optional):""', 'comment_created': datetime.datetime(2021, 8, 31, 9, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 699179888, 'comment_body': ""Those cases don't exist, but `entityToReview.name` is included in the success message so the && is needed to make typescript happy (entityToReview can be null)"", 'comment_created': datetime.datetime(2021, 8, 31, 10, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 699183485, 'comment_body': 'The first suggestion is genius ! Done', 'comment_created': datetime.datetime(2021, 8, 31, 10, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 699186071, 'comment_body': 'Will go with the second option since the text area already limits the amount of characters that can be typed.', 'comment_created': datetime.datetime(2021, 8, 31, 10, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 699192592, 'comment_body': 'Thanks, I updated the comments.', 'comment_created': datetime.datetime(2021, 8, 31, 10, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 699196695, 'comment_body': ""Agreed.. I was wondering if we could move it to a popup window or it's own page instead, but this is dangerous since users might miss it entirely."", 'comment_created': datetime.datetime(2021, 8, 31, 10, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 699232969, 'comment_body': 'This can be simplified.', 'comment_created': datetime.datetime(2021, 8, 31, 11, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'akshaaatt', 'type': 'User'}, {'comment_id': 699233684, 'comment_body': 'We are missing an `await` over here.', 'comment_created': datetime.datetime(2021, 8, 31, 11, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'akshaaatt', 'type': 'User'}, {'comment_id': 699238248, 'comment_body': 'This does not provide satisfactory UX. This needs to be fixed. If not right now, it should be dealt with later.', 'comment_created': datetime.datetime(2021, 8, 31, 11, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'akshaaatt', 'type': 'User'}, {'comment_id': 699438321, 'comment_body': 'Do you mean this?\r\n```suggestion\r\n    if (!user?.access_token) {\r\n```', 'comment_created': datetime.datetime(2021, 8, 31, 15, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 699750341, 'comment_body': 'Yes @MonkeyDo ! :)\r\nInfact, we can make this a one liner as `return !user?.access_token;`', 'comment_created': datetime.datetime(2021, 9, 1, 0, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'akshaaatt', 'type': 'User'}, {'comment_id': 699856306, 'comment_body': ""Ok, I understand (apparently React shouldn't be used together with jQuery anyway). I tried out the library you pointed to but the styling it came with wasn't working with our pages, I ended up using the [react-tooltip library](https://www.npmjs.com/package/react-tooltip) instead."", 'comment_created': datetime.datetime(2021, 9, 1, 5, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 700038198, 'comment_body': ""Thanks, this makes sense to me, I'll remember to try to avoid arrow functions in render()."", 'comment_created': datetime.datetime(2021, 9, 1, 9, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 700115748, 'comment_body': 'I guess we want to invert that boolean: `return !!user?.access_token;`', 'comment_created': datetime.datetime(2021, 9, 1, 11, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 700604179, 'comment_body': ""Yasss @MonkeyDo you're on point. A correction regarding that! Thanks."", 'comment_created': datetime.datetime(2021, 9, 1, 22, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'akshaaatt', 'type': 'User'}, {'comment_id': 700849442, 'comment_body': 'I meant to return a promise, and I updated the function so loading is only set to false on the last error, or on success.', 'comment_created': datetime.datetime(2021, 9, 2, 8, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 702263611, 'comment_body': ""I think it's a good idea, it will save non english users an extra click every time they want to review. \r\nI will get this implemented in a separate PR once this one is merged so this one doesn't get too bloated. "", 'comment_created': datetime.datetime(2021, 9, 4, 9, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 702264348, 'comment_body': ""I agree that the checkbox isn't ideal but I'm wondering what would be the best way to get around this. My understanding was that details of terms of service stuff should ideally be viewable upfront. Maybe it would be okay to move this into a popover, or give the text it's own page on CritiqueBrainz and just link it from the modal. @MonkeyDo what did you think?"", 'comment_created': datetime.datetime(2021, 9, 4, 9, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 702910202, 'comment_body': ""It's not a question I'm comfortable answering, to be honest. Maybe @alastair can give us his point of view?\r\n(alastair, we're talking about the checkbox with the super long license text in the modal, see the video in the description)\r\nDoes the license text need to be in full as-is, or could it be a link to a page with the full text, or a popover, or something else?\r\n\r\nHowever I don't think this preoccupation should block this PR."", 'comment_created': datetime.datetime(2021, 9, 6, 13, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 702917925, 'comment_body': 'I wonder if there would be a way to use the user\'s browser language, and defaulting to english if it\'s not accessible.\r\nPerhaps something with `const locale = navigator.language || navigator.userLanguage || ""en"";`, although I haven\'t checked how well the language codes match.\r\nFor example for my browser I get `fr-FR`; is that accepted, or should it be `fr` only?\r\n\r\nAnyway, something for another PR !\r\n', 'comment_created': datetime.datetime(2021, 9, 6, 13, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 702928305, 'comment_body': ""How does this test work?\r\nI can't see anywhere where you're un-setting the access token, and I assume the globalProps have a CB token set by default, right?"", 'comment_created': datetime.datetime(2021, 9, 6, 14, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 702928747, 'comment_body': 'I think this is currently the same test as the one below where `""does nothing if license was not accepted""`, looking at line 248', 'comment_created': datetime.datetime(2021, 9, 6, 14, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 702930483, 'comment_body': ""Similarly here on line 288 shouldn't `acceptLicense` be set to `true`?"", 'comment_created': datetime.datetime(2021, 9, 6, 14, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 703106820, 'comment_body': 'Thanks for catching, I missed this while rewriting the submit function. Logic in tests should be fixed now :)', 'comment_created': datetime.datetime(2021, 9, 7, 0, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 703379825, 'comment_body': ""Now that you've replace the popover functionality with a library, this should be removed"", 'comment_created': datetime.datetime(2021, 9, 7, 10, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}, {'comment_id': 704085802, 'comment_body': ""@MonkeyDo Yeah you're right, it should be the two letter iso-639-1 code `fr` only. There's no direct way to get it from the browser it looks like but we can use something like `navigator.language.substring(0,2)` to get it from the locale."", 'comment_created': datetime.datetime(2021, 9, 8, 6, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jdaok', 'type': 'User'}, {'comment_id': 704524447, 'comment_body': ""Or maybe split on characters `-` (and maybe `_` I'd need to review language codes), since I assume some languages will have more than 2 characters"", 'comment_created': datetime.datetime(2021, 9, 8, 15, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'MonkeyDo', 'type': 'User'}]","[{'commit_sha': '086708eb761edfc3320fa598c39fe820235f6101', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd941998ef771464acee9ae36604fa374bc5df0ba', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8602436d5a417c6b086661adc045c16174956365', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6931079bda871921c1b33ba58c2fe55be3e5abf1', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fea3f5f083ec61aab4952f920b46f52132d1083', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c5049f6c8e137199eb83cc5b8524e4bee34e729', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22ff98f4e293793e4a7183820bd5a7740c43b420', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b32fae2a93e007ce841a1a09b24e49674a16ef3', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953d85663832c786717947099396bac858562660', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a71cc6b505e63024be7a2dce34b1b7630fae17e4', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d861719c012107c8b504b21d25e0aa8b322fcc5', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb35307753bc89510c7841f76047226cc257efa', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3ae610b9e6e7061b5a15dbfce9502cd77378715', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9820d4440380d9345449c090b2bc9641fdaf4bd3', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c8bebdaa7192b88ad3a7b6d30b5047a3dc325a', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0f43c6f1f500b2bff4c43fa0087ff234edf0c3e', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d5c58c07cdd025ba20cc947638d22c0cd6245b2', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '264769001740f88f72ee054fd1510d6451ed959f', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76891d0413f6a8bbc39af1571b735131ac5dc02e', 'committer_username': 'amCap1712', 'committer_name': 'Kartik Ohri', 'committer_email': 'kartikohri13@gmail.com', 'commit_date': datetime.datetime(2017, 4, 19, 2, 7, 5, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f160ac578fc35e37492fff2d50c338a74167561', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9aa0076a070abe7795c84931735ee59c7bc3102c', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '490b5455c7d6b013de45de59eb97defc17aa1507', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfc7646eaf6010b3fae6f2de0a76eb6baf982324', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41861fdd89ca30d9eb1985344d5ac8f59e22d5f5', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a6de998f11c1dd44072bf1f8a516933db7daa3c', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31a04dc7808d7d4c8d7acce7ef4f97f137841066', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb29c8a868b0a3329c993af334357a260e736a28', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c0aa16693f15660f731f3a46821384fa5c79b1', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3739a6d660d316ed023ef1c48a6082c64da3d861', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aea8508b4be49e83420fafc902b33018e7c1e90f', 'committer_username': 'jdaok', 'committer_name': 'Jason', 'committer_email': 'jasondaok@gmail.com', 'commit_date': datetime.datetime(2019, 11, 9, 22, 12, 43, tzinfo=datetime.timezone.utc)}]",Jason,57575778,jasondaok@gmail.com,User,,9,,13,4

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
41960013,listenbrainz-server,metabrainz/listenbrainz-server,Python,209,669,33,120,11878,15,83,15,"[{'id': 727363019, 'number': 1605, 'closed': datetime.datetime(2022, 5, 20, 14, 53, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 5, 8, 49, 38, tzinfo=datetime.timezone.utc), 'time_taken': 22226645.0, 'time_delta': '257 days, 6:04:05', 'additions': 753, 'deletions': 111, 'state': 'closed'}, {'id': 721639513, 'number': 1599, 'closed': datetime.datetime(2021, 8, 28, 2, 53, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 27, 22, 9, 43, tzinfo=datetime.timezone.utc), 'time_taken': 17019.0, 'time_delta': '4:43:39', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 721628404, 'number': 1598, 'closed': datetime.datetime(2021, 8, 27, 22, 46, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 27, 21, 39, 56, tzinfo=datetime.timezone.utc), 'time_taken': 4023.0, 'time_delta': '1:07:03', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 717283854, 'number': 1586, 'closed': datetime.datetime(2021, 11, 24, 14, 43, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 10, 10, 16, tzinfo=datetime.timezone.utc), 'time_taken': 8137982.0, 'time_delta': '94 days, 4:33:02', 'additions': 132, 'deletions': 4, 'state': 'closed'}, {'id': 717282873, 'number': 1585, 'closed': datetime.datetime(2021, 9, 8, 15, 17, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 10, 3, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1487682.0, 'time_delta': '17 days, 5:14:42', 'additions': 1611, 'deletions': 212, 'state': 'closed'}, {'id': 717279624, 'number': 1584, 'closed': datetime.datetime(2021, 8, 25, 16, 6, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 9, 36, 24, tzinfo=datetime.timezone.utc), 'time_taken': 282591.0, 'time_delta': '3 days, 6:29:51', 'additions': 120, 'deletions': 0, 'state': 'closed'}, {'id': 713303531, 'number': 1583, 'closed': datetime.datetime(2021, 8, 24, 14, 45, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 10, 18, 12, tzinfo=datetime.timezone.utc), 'time_taken': 707210.0, 'time_delta': '8 days, 4:26:50', 'additions': 1073, 'deletions': 3, 'state': 'closed'}, {'id': 712222972, 'number': 1581, 'closed': datetime.datetime(2021, 8, 24, 10, 30, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 9, 49, 4, tzinfo=datetime.timezone.utc), 'time_taken': 952882.0, 'time_delta': '11 days, 0:41:22', 'additions': 106, 'deletions': 16, 'state': 'closed'}, {'id': 710650611, 'number': 1580, 'closed': datetime.datetime(2021, 8, 16, 9, 57, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 10, 31, 14, tzinfo=datetime.timezone.utc), 'time_taken': 343554.0, 'time_delta': '3 days, 23:25:54', 'additions': 395, 'deletions': 0, 'state': 'closed'}, {'id': 710635731, 'number': 1579, 'closed': datetime.datetime(2021, 8, 16, 9, 45, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 10, 21, 9, tzinfo=datetime.timezone.utc), 'time_taken': 343445.0, 'time_delta': '3 days, 23:24:05', 'additions': 44, 'deletions': 21, 'state': 'closed'}, {'id': 700212310, 'number': 1570, 'closed': datetime.datetime(2021, 8, 3, 9, 57, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 11, 15, 51, tzinfo=datetime.timezone.utc), 'time_taken': 340919.0, 'time_delta': '3 days, 22:41:59', 'additions': 102, 'deletions': 58, 'state': 'closed'}, {'id': 694247012, 'number': 1560, 'closed': datetime.datetime(2021, 8, 9, 18, 57, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 10, 24, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1672334.0, 'time_delta': '19 days, 8:32:14', 'additions': 252, 'deletions': 7, 'state': 'closed'}, {'id': 694110362, 'number': 1559, 'closed': datetime.datetime(2021, 8, 9, 18, 56, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 7, 8, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1684092.0, 'time_delta': '19 days, 11:48:12', 'additions': 145, 'deletions': 4, 'state': 'closed'}, {'id': 692062421, 'number': 1555, 'closed': datetime.datetime(2021, 8, 9, 20, 10, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 18, 9, 57, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1937566.0, 'time_delta': '22 days, 10:12:46', 'additions': 56, 'deletions': 64, 'state': 'closed'}, {'id': 688558579, 'number': 1551, 'closed': datetime.datetime(2021, 7, 24, 3, 36, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 7, 5, 32, tzinfo=datetime.timezone.utc), 'time_taken': 937842.0, 'time_delta': '10 days, 20:30:42', 'additions': 96, 'deletions': 0, 'state': 'closed'}, {'id': 688547950, 'number': 1550, 'closed': datetime.datetime(2021, 7, 24, 3, 36, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 6, 55, 48, tzinfo=datetime.timezone.utc), 'time_taken': 938455.0, 'time_delta': '10 days, 20:40:55', 'additions': 44, 'deletions': 1, 'state': 'closed'}, {'id': 687291435, 'number': 1549, 'closed': datetime.datetime(2021, 8, 9, 18, 55, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 7, 46, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2545735.0, 'time_delta': '29 days, 11:08:55', 'additions': 1020, 'deletions': 2, 'state': 'closed'}, {'id': 687285515, 'number': 1547, 'closed': datetime.datetime(2021, 7, 15, 10, 22, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 6, 51, 55, tzinfo=datetime.timezone.utc), 'time_taken': 358256.0, 'time_delta': '4 days, 3:30:56', 'additions': 118, 'deletions': 17, 'state': 'closed'}, {'id': 681417869, 'number': 1538, 'closed': datetime.datetime(2021, 7, 8, 10, 11, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 3, 43, 27, tzinfo=datetime.timezone.utc), 'time_taken': 628056.0, 'time_delta': '7 days, 6:27:36', 'additions': 700, 'deletions': 32, 'state': 'closed'}, {'id': 679738992, 'number': 1535, 'closed': datetime.datetime(2021, 7, 1, 15, 17, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 29, 8, 58, 11, tzinfo=datetime.timezone.utc), 'time_taken': 195572.0, 'time_delta': '2 days, 6:19:32', 'additions': 44, 'deletions': 3, 'state': 'closed'}, {'id': 678256369, 'number': 1527, 'closed': datetime.datetime(2021, 6, 30, 11, 17, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 1, 51, 28, tzinfo=datetime.timezone.utc), 'time_taken': 379536.0, 'time_delta': '4 days, 9:25:36', 'additions': 147, 'deletions': 31, 'state': 'closed'}, {'id': 673255709, 'number': 1514, 'closed': datetime.datetime(2021, 6, 29, 7, 52, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 8, 0, 45, tzinfo=datetime.timezone.utc), 'time_taken': 949901.0, 'time_delta': '10 days, 23:51:41', 'additions': 759, 'deletions': 2, 'state': 'closed'}, {'id': 671089831, 'number': 1510, 'closed': datetime.datetime(2021, 6, 22, 7, 53, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 7, 8, 37, tzinfo=datetime.timezone.utc), 'time_taken': 521112.0, 'time_delta': '6 days, 0:45:12', 'additions': 186, 'deletions': 91, 'state': 'closed'}, {'id': 669985498, 'number': 1508, 'closed': datetime.datetime(2021, 11, 24, 7, 3, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 1, 38, 45, tzinfo=datetime.timezone.utc), 'time_taken': 14016310.0, 'time_delta': '162 days, 5:25:10', 'additions': 288, 'deletions': 212, 'state': 'closed'}, {'id': 665451678, 'number': 1503, 'closed': datetime.datetime(2021, 6, 15, 15, 23, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 0, 19, 32, tzinfo=datetime.timezone.utc), 'time_taken': 572645.0, 'time_delta': '6 days, 15:04:05', 'additions': 476, 'deletions': 0, 'state': 'closed'}, {'id': 658651912, 'number': 1492, 'closed': datetime.datetime(2021, 6, 9, 16, 16, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 1, 5, 10, 35, tzinfo=datetime.timezone.utc), 'time_taken': 731129.0, 'time_delta': '8 days, 11:05:29', 'additions': 42, 'deletions': 0, 'state': 'closed'}, {'id': 625733409, 'number': 1418, 'closed': datetime.datetime(2021, 5, 27, 14, 21, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 29, 2, 25, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2462181.0, 'time_delta': '28 days, 11:56:21', 'additions': 21, 'deletions': 0, 'state': 'closed'}, {'id': 625727117, 'number': 1417, 'closed': datetime.datetime(2021, 5, 25, 13, 1, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 29, 2, 8, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2285627.0, 'time_delta': '26 days, 10:53:47', 'additions': 134, 'deletions': 2, 'state': 'closed'}, {'id': 591512002, 'number': 1336, 'closed': datetime.datetime(2021, 4, 21, 15, 39, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 12, 9, 27, 6, tzinfo=datetime.timezone.utc), 'time_taken': 3478315.0, 'time_delta': '40 days, 6:11:55', 'additions': 71, 'deletions': 15, 'state': 'closed'}, {'id': 584608116, 'number': 1314, 'closed': datetime.datetime(2021, 3, 6, 12, 5, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 4, 8, 32, 43, tzinfo=datetime.timezone.utc), 'time_taken': 185558.0, 'time_delta': '2 days, 3:32:38', 'additions': 410, 'deletions': 21, 'state': 'closed'}, {'id': 566545838, 'number': 1270, 'closed': datetime.datetime(2021, 2, 10, 10, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 3, 5, 27, 7, tzinfo=datetime.timezone.utc), 'time_taken': 621713.0, 'time_delta': '7 days, 4:41:53', 'additions': 139, 'deletions': 37, 'state': 'closed'}, {'id': 559642592, 'number': 1251, 'closed': datetime.datetime(2021, 4, 29, 2, 12, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 22, 1, 24, 25, tzinfo=datetime.timezone.utc), 'time_taken': 8383658.0, 'time_delta': '97 days, 0:47:38', 'additions': 5865, 'deletions': 2669, 'state': 'closed'}, {'id': 557154879, 'number': 1242, 'closed': datetime.datetime(2021, 1, 29, 12, 20, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 19, 4, 19, 11, tzinfo=datetime.timezone.utc), 'time_taken': 892869.0, 'time_delta': '10 days, 8:01:09', 'additions': 57, 'deletions': 35, 'state': 'closed'}, {'id': 553813200, 'number': 1236, 'closed': datetime.datetime(2021, 1, 19, 19, 9, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 12, 22, 59, 51, tzinfo=datetime.timezone.utc), 'time_taken': 590985.0, 'time_delta': '6 days, 20:09:45', 'additions': 42, 'deletions': 2, 'state': 'closed'}]"
