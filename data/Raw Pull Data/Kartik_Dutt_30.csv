pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
417305909,Add IoU metric for bounding boxes.,"Hey everyone,
This PR aims to add IoU metric to this repo. I need to add more detailed tests for it. Also some metrics such ip_metric don't have tests in `metric_tests.cpp`. Did I miss something?

Also, This metric is for bounding boxes which I would need for NMS and object detection algorithm. I do plan on opening another PR to add mIoU to take as input a matrix where each pixel is label. That is more useful for segmentation so I have left that for now.

Files changed:
- metrics/CMakeLists.txt
- metrics/iou_metric.hpp
- metrics/iou_metric_impl.hpp
- tests/metric_tests.cpp

Changes made :
- Added IoU metric (only for bounding boxes).
- Added a simple test. (will add more soon).

Let me know if I missed something. 
Thanks a ton! 
Regards.",True,2402,https://api.github.com/repos/mlpack/mlpack/pulls/2402,https://github.com/mlpack/mlpack/pull/2402,closed,203,2,5,2,2,8,3,0,"[{'name': 'c: core'}, {'name': 's: unanswered'}, {'name': 't: added feature'}]",2020-05-13 11:41:53+00:00,2020-05-15 23:27:29+00:00,215136.0,"2 days, 11:45:36","[{'comment_id': 424374416, 'comment_body': '```suggestion\r\n  * lower left coordinate and x1, y1, represent upper right coordinate.\r\n  * \r\n  * Second representation follows the following representation : x0, y0, h, w.\r\n  * Where x0 and x1 are bottom left bounding box coordinates and h, w are\r\n  * height and width of the bounding box.\r\n```\r\nThis is a neat trick :)', 'comment_created': datetime.datetime(2020, 5, 13, 11, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 424375179, 'comment_body': '```suggestion\r\n  Log::Assert(a.n_elem == b.n_elem && a.n_elem == 4, ""Incorrect \\\r\n      shape for bounding boxes. They must contain 4 elements either in the form \\\r\n      (x0, y0, x1, y1) or (x0, y0, h, w). Refer to the documentation for more \\\r\n      information."");\r\n```', 'comment_created': datetime.datetime(2020, 5, 13, 11, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 424808546, 'comment_body': 'Nice!, would it be a good idea to check if the coordinates or components actually consist of a rectangle?', 'comment_created': datetime.datetime(2020, 5, 14, 0, 41, 28, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 424858408, 'comment_body': ""Yes, that makes sense when coordinates are represented as `(x0, y0, x1, y1)` incase they form a line or their order isn't correct."", 'comment_created': datetime.datetime(2020, 5, 14, 4, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 424898694, 'comment_body': '```suggestion\r\nvoid IoU<UseCoordinates>::serialize(\r\n    Archive& ar,\r\n    const unsigned int /* version */)\r\n```', 'comment_created': datetime.datetime(2020, 5, 14, 6, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 425373936, 'comment_body': ""Let's change `python` to `Python` :)\r\n```suggestion\r\n  // Value calculated using Python interpreter.\r\n```"", 'comment_created': datetime.datetime(2020, 5, 14, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 425374146, 'comment_body': 'Likewise.\r\n```suggestion\r\n  // Value calculated using Python interpreter.\r\n```', 'comment_created': datetime.datetime(2020, 5, 14, 19, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 425532780, 'comment_body': 'Awesome!, Done. I will start with NMS next for this repo. Thanks a lot for the reviews.', 'comment_created': datetime.datetime(2020, 5, 15, 2, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': 'fe854e04ae2aa2659f4c009afcfc07592d8d10b5', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74f86706afef470fa03ccb4fbba10d8a9295b64c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
419094383,Add Fast NMS.,"Hey everyone,
Currently this WIP implementation of Fast Non Maximal Suppression. 

Things left to do:
1. Add tests.
2. Add more comments.
3. Add size checks.

[Reference implementation](https://www.computervisionblog.com/2011/08/blazing-fast-nmsm-from-exemplar-svm.html)
[Test - Link](https://colab.research.google.com/drive/1VBNZ_wuedMotXrhNgmcJKuq4hC6NK98e?usp=sharing)",True,2410,https://api.github.com/repos/mlpack/mlpack/pulls/2410,https://github.com/mlpack/mlpack/pull/2410,closed,401,3,7,6,6,45,2,0,"[{'name': 'c: methods'}, {'name': 't: added feature'}]",2020-05-17 10:45:17+00:00,2020-05-23 23:20:09+00:00,563692.0,"6 days, 12:34:52","[{'comment_id': 427101761, 'comment_body': 'Can you change like this for consistent design?\r\n```suggestion\r\n      typename OutputType\r\n>\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 7, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427102753, 'comment_body': 'How about this for readability?\r\n```suggestion\r\n      Refer to the documentation for more information."");\r\n      \r\n  // Clear selected bounding boxes.\r\n  selectedBoundingBoxes.clear();\r\n  \r\n  // Obtain Sorted indices for bounding boxes according to\r\n  // their confidence scores.\r\n  arma::uvec sortedIndices = arma::sort_index(confidenceScores);\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 7, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427109123, 'comment_body': 'Can you give a space between the code and comment?\r\n```suggestion\r\n    size_t selectedIndex = sortedIndices(sortedIndices.n_elem - 1);\r\n    \r\n    // Choose the box with the largest probability.\r\n    selectedBoundingBoxes.insert_cols(0, boundingBoxes.col(selectedIndex));\r\n    \r\n    // Check if there are other bounding boxes to compare with.\r\n    if (sortedIndices.n_elem == 1)\r\n    {\r\n      break;\r\n    }\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 8, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427109782, 'comment_body': 'Can you give a space?\r\n```suggestion\r\n  arma::vec bbox1(4), bbox2(4), bbox3(4);\r\n  \r\n  // Set values of each bounding box.\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 8, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427109947, 'comment_body': 'Likewise\r\n```suggestion\r\n  selectedBoundingBox.clear();\r\n  \r\n  // Fill new bounding boxes.\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 8, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427112932, 'comment_body': 'Sure will make the changes. Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 19, 8, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427113039, 'comment_body': 'Sure will make the changes. Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 19, 8, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427188361, 'comment_body': ""Let's rectify the `tparam`'s name and add descriptions about `Transpose`. BTW, do you think users will use the `Transpose` parameter? otherwise, would it be a little unnecessary option?\r\n```suggestion\r\n * @tparam UseCoordinates Toggles between the two representation of bounding box.\r\n```"", 'comment_created': datetime.datetime(2020, 5, 19, 10, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427190272, 'comment_body': ""Sure, I'll make that change as well. About the `Transpose` parameter, I am not sure, if they use with rest of the layers the current implementation would work and transpose is not needed. I am not 100% if users would need it, I can remove it if you want. Kindly let me know what you think.\r\nRegards."", 'comment_created': datetime.datetime(2020, 5, 19, 10, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427195616, 'comment_body': ""I think this idea is great, but it would be better to remove it at this point. We will add this option later when we realized it's vital on the API side. Sometimes, it's hard to remove the existing feature than add new feature in consideration of backward compatibility after release."", 'comment_created': datetime.datetime(2020, 5, 19, 10, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427198887, 'comment_body': ""Sure, Then I'll remove it and fix the style issue and add more tests. Then I guess this will be ready. Thanks a lot."", 'comment_created': datetime.datetime(2020, 5, 19, 10, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427453887, 'comment_body': ""Linux doesn't seem to recognize this function. I'll try to find out why once the armadillo site is up. Other than this I think the rest is complete. I have added tests to show various cases.\r\nRegards."", 'comment_created': datetime.datetime(2020, 5, 19, 16, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427571271, 'comment_body': '@kartikdutt18 \r\n\r\n<img width=""834"" alt=""image"" src=""https://user-images.githubusercontent.com/26578203/82367685-0afc3b00-99c9-11ea-9001-47a9c09a0d60.png"">\r\n\r\nAccording to the Armadillo document :point_up:, `shed_rows()` for a vector is supported since Armadillo v9.400, and our Azure Pipelines use the 8.400 or higher version.\r\n\r\nAs a workaround, we can use `shed_row()` for a vector, and below snippet will work.\r\n```\r\narma::uvec indices = arma::find(calculateIoU > threshold);\r\nfor (size_t i = 0; i < indices.size(); i++)\r\n{\r\n  sortedIndices.shed_row(indices(i));\r\n}\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 19, 20, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427704327, 'comment_body': 'How about this?\r\n```suggestion\r\n * Intersection over Union (IoU). NMS iteratively removes lower scoring boxes\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 2, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427704644, 'comment_body': 'I think you intended to say `Bounding boxes must contain ...`', 'comment_created': datetime.datetime(2020, 5, 20, 2, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427707642, 'comment_body': ""Shouldn't we do like this?\r\n```suggestion\r\n  bbox.insert_cols(0, bbox3);\r\n```"", 'comment_created': datetime.datetime(2020, 5, 20, 2, 32, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427707684, 'comment_body': 'Likewise', 'comment_created': datetime.datetime(2020, 5, 20, 2, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427709165, 'comment_body': ""Our output, `selectedBoundingBoxes` will have the selected bounding boxes in the ascending order of the `confidenceScores` and I think it's more reasonable to store the the boxes **in the descending order**. By doing that, I think users can more easily access the bounding box that is from the largest confidence score.\r\n```suggestion\r\n  }\r\n  selectedBoundingBoxes = arma::fliplr(selectedBoundingBoxes);\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 5, 20, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427712431, 'comment_body': 'That makes sense. Thanks a lot. Making the changes now.\nRegards. ', 'comment_created': datetime.datetime(2020, 5, 20, 2, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427712896, 'comment_body': ""Ahh, That's definitely a typo. Fixing it now. Thanks a lot."", 'comment_created': datetime.datetime(2020, 5, 20, 2, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427713605, 'comment_body': ""What about change **indices** as `selectedIndices`, not bounding boxes? I think it would be better for the usability... and I'm sorry about that I didn't mention it in the previous discussion. I mean\r\n```suggestion\r\n                       OutputType& selectedIndices,\r\n```"", 'comment_created': datetime.datetime(2020, 5, 20, 2, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427714471, 'comment_body': ""PyTorch returns indices but I wasn't sure if that would be the way to go because the user would have to select the bounding boxes, This reduces their effort. I am fine with either approach. Kindly let me know what you think."", 'comment_created': datetime.datetime(2020, 5, 20, 2, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427715468, 'comment_body': ""For some reason, I thought users might need to get indices, not real coordinates. By just giving indices as an output, we can don't care the case and users can utilize both the indices and coordinates. Please let me know what you think :)"", 'comment_created': datetime.datetime(2020, 5, 20, 3, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427715875, 'comment_body': ""Ahh, makes sense. I'll make the changes and adapt the tests. "", 'comment_created': datetime.datetime(2020, 5, 20, 3, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427716266, 'comment_body': ""Ahh, Instead of using for loops I am now using the following :\r\n```\r\nsortedIndices = sortedIndices(arma::find(calculateIoU <= threshold));\r\n```\r\nThe tests pass. I'll push with rest of the changes in half an hour."", 'comment_created': datetime.datetime(2020, 5, 20, 3, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427741685, 'comment_body': 'For your information, `arma::reverse(selectedIndices);` is supported since v8.500  :)', 'comment_created': datetime.datetime(2020, 5, 20, 4, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427742075, 'comment_body': 'Can you put `metric_test.cpp` again for keeping the alphabetical order?', 'comment_created': datetime.datetime(2020, 5, 20, 5, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 427744718, 'comment_body': 'Sorry about that, changing it.', 'comment_created': datetime.datetime(2020, 5, 20, 5, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427744840, 'comment_body': ""I'll make the change thanks for pointing it out. Thanks a lot."", 'comment_created': datetime.datetime(2020, 5, 20, 5, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 427745681, 'comment_body': 'Done. Just tested on local machine, seems to pass the tests.\r\nRegards.', 'comment_created': datetime.datetime(2020, 5, 20, 5, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 428366535, 'comment_body': 'Need explanations about the method and parameters and please make sure to mention that `selectedIndices` is sorted in descending order of the confidence scores.', 'comment_created': datetime.datetime(2020, 5, 20, 23, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 428366814, 'comment_body': 'Picky comment, it needs to be \r\n```suggestion\r\n  arma::vec confidenceScores(3);\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 23, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 428367004, 'comment_body': '```suggestion\r\n  // Fill bounding box.\r\n```', 'comment_created': datetime.datetime(2020, 5, 20, 23, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 428367440, 'comment_body': ""Let's reduce this two new lines to one :)"", 'comment_created': datetime.datetime(2020, 5, 20, 23, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 428409549, 'comment_body': 'Sorry about that, Made the changes to reflect the same. Thanks a lot for the reviews.', 'comment_created': datetime.datetime(2020, 5, 21, 2, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 428409625, 'comment_body': 'Done :)', 'comment_created': datetime.datetime(2020, 5, 21, 2, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 428834189, 'comment_body': 'Looks like this would fit on a single line.', 'comment_created': datetime.datetime(2020, 5, 21, 18, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 428836960, 'comment_body': 'The extra `()` seem unnecessary.', 'comment_created': datetime.datetime(2020, 5, 21, 18, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 428838488, 'comment_body': ""I'm not sure but can you use `{2}` instead of `arma::uvec(1).fill(2)`?"", 'comment_created': datetime.datetime(2020, 5, 21, 18, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 428840040, 'comment_body': 'I find this really difficult to read maybe we can split this up and store the temporary results?', 'comment_created': datetime.datetime(2020, 5, 21, 18, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 428841339, 'comment_body': 'Since this is a template parameter, this is set once at creation time, so no need to serialize the value.', 'comment_created': datetime.datetime(2020, 5, 21, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 428842147, 'comment_body': 'Sure, I can try that.', 'comment_created': datetime.datetime(2020, 5, 21, 18, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 428843356, 'comment_body': 'Right, makes sense. Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 21, 18, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 428850160, 'comment_body': 'Yes, I just tried this one, It throws an error of no matching function.', 'comment_created': datetime.datetime(2020, 5, 21, 18, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 428852164, 'comment_body': 'Ahh, makes sense, resolved in the next commit. Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 21, 19, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '09a22b05b5670f7b0cca0402fa224a37163882a4', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edf22015afaebc41f02dbed72821f775da8ce66a', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f9c950047ef4f151e1ffcb7652a4b092438b6e1', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c33887451fc8f4d4793f281cb7e04e966cec168', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5212f26a1015e8e0b7d629c9dd23ccb88e994cdb', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07867c777ad9481382f5a7e6476681526b5a99e0', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
425648248,Bug Fix : Check correctness of shape in Transposed Conv. layer only when output width and height aren't zero.,"Transposed convolution should check for correctness only when output width / height is specified.
In #1493, A check was added in this layer which went on subsequent modifications in further layers. However the drawback of such a check is that if user doesn't pass outputW or outputH to the layer the layer will always give fatal. That means we will always have to specify outputW, outputH. I have added a check to ensure both of them aren't zero.
CC: @zoq",True,2436,https://api.github.com/repos/mlpack/mlpack/pulls/2436,https://github.com/mlpack/mlpack/pull/2436,closed,17,2,2,5,5,3,2,0,"[{'name': 'c: methods'}, {'name': 't: bugfix'}]",2020-05-31 18:08:19+00:00,2020-06-06 15:11:50+00:00,507811.0,"5 days, 21:03:31","[{'comment_id': 434820533, 'comment_body': 'The indentation is off here, looks like we can remove two spaces.', 'comment_created': datetime.datetime(2020, 6, 3, 20, 0, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 434991058, 'comment_body': ""Hey @zoq, Let me know if this change makes sense or I'll try to fix the VAE model in some other way. I thought that visitor should set size of output width and output height but I think that happens during forward pass."", 'comment_created': datetime.datetime(2020, 6, 4, 4, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436168511, 'comment_body': '```suggestion\r\n  BOOST_REQUIRE_NO_THROW(decoder->Add<TransposedConvolution<>>(16, 1,\r\n      15, 15, 1, 1, 1, 1, 14, 14));\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 21, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': '01f5953e5fca9bebc32d9c464aa59d8f43240819', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b3d7f088a99f483f03890a7f741e9b8da220bce', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '515a84b7ecd14fb3b29dcabf3fff82cbd32fa130', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1d5443a765185775f5d7f03a0507fc04601003', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f26bfb040e1ca3fada0a3c70fe94717613a48e26', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
438997588,Extending Support of BatchNorm layer to Convolutional Layer output.,"Hey everyone,
There is an issue with how the batch norm layer is implemented in mlpack. Details for it are mentioned below.

Pre-reqs:
For simplicity, let's take an example where batch norm is used for computer vision problems (dataset is made up of images).
In mlpack, each column represents a separate image and each row has imageWidth * imageHeight * imageDepth.
In most libraries like PyTorch the batch norm layer requires inputChannels and generates a weight and bias matrix of size equal to inputChannels.
Eg. For an input of size`(16, 16, 32)` the batch norm layer in PyTorch will be of the form : `nn.BatchNorm2d(32)` and that will create a weight and bias matrix of size `32 x 1`.

Issue : 
In mlpack, The batch norm takes the input Rows as input i.e. imageWidth * imageHeight * imageDepth and hence declares a weight and bias matrix of size of imageWidth * imageHeight * imageDepth. So for the above example to use batch norm layer in mlpack we would call it as `BatchNorm(16 * 16 * 32)` and it will declare a weight matrix of size 16 * 16 * 32.

This drastically increases parameter size when dealing with layer images and output channels (eq. 128 * 128 * 1024) thereby increasing trainable params, training time and complexity of model.

Furthermore, I am working mlpack-PyTorch Weight Converter so that we can directly transfer model weights from PyTorch to mlpack and this is currently acting as a blocker. The PyTorch implementation gives me a weight matrix of size `32` for `(224, 224, 32)` where as mlpack gives me a weight matrix of `224 * 224 * 32`.  I think we would have to first fix this so use the converter. Using the converter we would save weeks of training time for all models.

I have added a simple test below to showcase the problem. Kindly let me know if I missed something. Thanks a lot.
CC: @KimSangYeon-DGU, @saksham189, @zoq",True,2474,https://api.github.com/repos/mlpack/mlpack/pulls/2474,https://github.com/mlpack/mlpack/pull/2474,closed,474,96,3,5,46,148,2,0,"[{'name': 'c: methods'}, {'name': 't: bugfix'}]",2020-06-24 06:44:01+00:00,2020-07-13 14:55:18+00:00,1671077.0,"19 days, 8:11:17","[{'comment_id': 446493516, 'comment_body': ""Forward pass is complete, There is an error inrunning variance. The values of mean (including running) and variance match however the value for running variance doesn't. So the output is correct but backward and gradient will be incorrect. Working on fixing this now."", 'comment_created': datetime.datetime(2020, 6, 27, 6, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 446617747, 'comment_body': ""Fixed the error. The reference I was using didn't match with PyTorch's implementation completely and hence gave me errors so I am only using PyTorch as reference. [NoteBook Link](https://colab.research.google.com/drive/12Yqa6G9fqkLukUIG5s6denFnx_gfSnr5?usp=sharing). Now we can make the changes in backward and gradient. I have added tests for forward for both training and testing."", 'comment_created': datetime.datetime(2020, 6, 28, 8, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 446627962, 'comment_body': ""@kartikdutt18 The notebook link isn't accessible, can you check it?"", 'comment_created': datetime.datetime(2020, 6, 28, 9, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 446628064, 'comment_body': 'Sorry about that, This [one](https://colab.research.google.com/drive/12Yqa6G9fqkLukUIG5s6denFnx_gfSnr5?usp=sharing) should work.', 'comment_created': datetime.datetime(2020, 6, 28, 9, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 446655616, 'comment_body': 'Let me know once the PR is ready for review. ', 'comment_created': datetime.datetime(2020, 6, 28, 14, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 446655744, 'comment_body': 'Will do, Only backward function is left. After that it should be ready from my side.', 'comment_created': datetime.datetime(2020, 6, 28, 14, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 446882723, 'comment_body': 'We assume this for every layer. Is this required?', 'comment_created': datetime.datetime(2020, 6, 29, 10, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 446889910, 'comment_body': 'Do you think it might be better to reshape the input as a cube and then take the mean? \r\nWe could then probably avoid the loop. Let me know what you think.', 'comment_created': datetime.datetime(2020, 6, 29, 11, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 446892690, 'comment_body': 'Yeah, sure I can remove this.', 'comment_created': datetime.datetime(2020, 6, 29, 11, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 446893951, 'comment_body': 'From understanding point of view, that would be better. I think that might also give better speed. So I guess I should change the implementation?', 'comment_created': datetime.datetime(2020, 6, 29, 11, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 446896277, 'comment_body': 'Yes sure. ', 'comment_created': datetime.datetime(2020, 6, 29, 11, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 446896652, 'comment_body': ""Great, I'll make the changes."", 'comment_created': datetime.datetime(2020, 6, 29, 11, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 447240967, 'comment_body': '```suggestion\r\n    double nElements = (double) input.n_elem / size;\r\n```\r\n\r\nJust to keep the static code analysis job green.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 447241435, 'comment_body': '```suggestion\r\n  // We will calculate mini-batch norm on each channel / feature map.\r\n```\r\n\r\nI think `minibatch` works as well?', 'comment_created': datetime.datetime(2020, 6, 29, 20, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 448126079, 'comment_body': ""Hey @saksham189, I have made the changes for forward in a cpp file. All output for both training and testing match with pytorch. The cpp file can be viewed using this [Link](https://github.com/kartikdutt18/mlpack-test/blob/master/batchnorm_3d_test/batchnorm_3d.cpp). I'll make the changes for backward in the next hour or so. Sorry I couldn't make the changes yesterday, I had some errands to run."", 'comment_created': datetime.datetime(2020, 7, 1, 5, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 448126136, 'comment_body': 'Sure, Will make the changes.', 'comment_created': datetime.datetime(2020, 7, 1, 5, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 448263802, 'comment_body': 'I have made the changes, I will add more tests (detailed) to show running deterministic output, mean and variance.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 448293762, 'comment_body': 'That sounds good, thanks.', 'comment_created': datetime.datetime(2020, 7, 1, 11, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 448514404, 'comment_body': 'I have added a couple of tests for output, variance, deterministic output and mean. Should I also add GradientBatchNormTest with Convolutional layer.', 'comment_created': datetime.datetime(2020, 7, 1, 17, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 448989584, 'comment_body': '```suggestion\r\n  // Gamma acts as the scaling parameters for the normalized output.\r\n  gamma = arma::mat(weights.memptr(), size, 1, false, false);\r\n  // Beta acts as the shifting parameters for the normalized output. \r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 9, 59, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 448990006, 'comment_body': 'Hey can you remove this? ', 'comment_created': datetime.datetime(2020, 7, 2, 13, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 448992979, 'comment_body': 'I think we did this above. Is it required? ', 'comment_created': datetime.datetime(2020, 7, 2, 13, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449002447, 'comment_body': 'do we need to clear this everytime?', 'comment_created': datetime.datetime(2020, 7, 2, 13, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449002716, 'comment_body': 'is this required?', 'comment_created': datetime.datetime(2020, 7, 2, 13, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449004952, 'comment_body': ""don't think this is required"", 'comment_created': datetime.datetime(2020, 7, 2, 13, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449010977, 'comment_body': 'Do you think we could remove this special case from here and just use the convolutional layer part for computing the batchnorm for the linear layer as well. This would be the case where there is only one 1 pixel in the image. Let me know your thoughts.  ', 'comment_created': datetime.datetime(2020, 7, 2, 13, 42, 47, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449013086, 'comment_body': 'why did we remove this existing test? It should be fine with the linear layer I guess. ', 'comment_created': datetime.datetime(2020, 7, 2, 13, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449014001, 'comment_body': 'Yes I think that might be a good idea. ', 'comment_created': datetime.datetime(2020, 7, 2, 13, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449014784, 'comment_body': 'Ohh sorry, I thought I had removed this. Will push a commit for it.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 48, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449015962, 'comment_body': 'Yes it does, I was testing different threshold for linear region so I commented it out. Will fix it in the next commit.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449016426, 'comment_body': ""I think that should work. I'll make the changes. Thanks."", 'comment_created': datetime.datetime(2020, 7, 2, 13, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449016736, 'comment_body': 'I guess `convience` is a typo for convenience (?)', 'comment_created': datetime.datetime(2020, 7, 2, 13, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 449017214, 'comment_body': 'Right, Makes sense. Sorry about that.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449017646, 'comment_body': ""I think just set_size would work fine. I'll remove it. Thanks."", 'comment_created': datetime.datetime(2020, 7, 2, 13, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449018250, 'comment_body': ""It isn't it. Will remove it in the next commit."", 'comment_created': datetime.datetime(2020, 7, 2, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449018610, 'comment_body': '```suggestion\r\n    // Used in backward propagation.\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 449021843, 'comment_body': 'Right, sorry about the typos, Will fix them in the next commit.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449031222, 'comment_body': 'Or maybe we should keep this as optimization to the linear layer. ', 'comment_created': datetime.datetime(2020, 7, 2, 14, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449036138, 'comment_body': 'I think we should leave this as if for now since it would work faster for linear layer. Let me know what you think.', 'comment_created': datetime.datetime(2020, 7, 2, 14, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449037515, 'comment_body': ""I think so, let's leave it as it is for now, if needed we can open an issue for discussion."", 'comment_created': datetime.datetime(2020, 7, 2, 14, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449077003, 'comment_body': ""Because `count` is initialized with `0`, do you think it's good that we add a check whether the value is `0` or not?"", 'comment_created': datetime.datetime(2020, 7, 2, 15, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 449080545, 'comment_body': ""I don't think user will call training variance before a single pass.I think it would be nice to add a check anyway."", 'comment_created': datetime.datetime(2020, 7, 2, 15, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449081457, 'comment_body': ""Agreed, so I was thinking it's good or not :) "", 'comment_created': datetime.datetime(2020, 7, 2, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 449416985, 'comment_body': 'Hey @saksham189, @KimSangYeon-DGU, The gradient threshold is already very high without the batch norm layer.  If I uncomment the batch norm layer, it will still pass the test. The minimum threshold required with just the convolutional layer is around 0.3. Could you please suggest how I should proceed?\r\nHmm, I reduced number of channels and I could reduce the threshold to 0.1', 'comment_created': datetime.datetime(2020, 7, 3, 7, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449421222, 'comment_body': 'I think with reduced number of channels I got an error of 0.05. (So to keep it bit above that, I have set threshold as 0.08).', 'comment_created': datetime.datetime(2020, 7, 3, 7, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449675977, 'comment_body': 'I tried various combinations of the network, checked the implementation and I got a minimum error of 0.04. I have made all the other changes. Kindly let me know what you think.', 'comment_created': datetime.datetime(2020, 7, 3, 18, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449747971, 'comment_body': 'This variable `batchSize`  is already initialized at line 78.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 7, 4, 7, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 449749877, 'comment_body': ""@kartikdutt18 If there is no issue in implementation, I'm fine with this way. With this threshold `8e-2`, how many did you pass this test case? Did you run this test with the different random seed by any chance? Generally, when I made a test case with a stochastic property, I run the test case about 2~3,000 times with the different seed to see whether the threshold is enough or not.\r\n\r\n[Reference](https://github.com/mlpack/mlpack/issues/1741)\r\n\r\nLet me know your thoughts.\r\n\r\n```suggestion\r\n    if (CheckGradient(function) < 8e-2)\r\n    {\r\n      pass = true;\r\n      break;\r\n    }\r\n  }\r\n```"", 'comment_created': datetime.datetime(2020, 7, 4, 7, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 449750578, 'comment_body': ""I did run it a couple of times (around 7-8), Let me set the seed to NULL and run it 3000 times ans see how many times it passes. I'll get back to you with the results. Thanks."", 'comment_created': datetime.datetime(2020, 7, 4, 7, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449750731, 'comment_body': 'Yes, with this reference above, it recommends about 1,000 passes :) but I just run 3,000 times to make test case robust.', 'comment_created': datetime.datetime(2020, 7, 4, 7, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 449752807, 'comment_body': 'It seems you missed the `Backward()` test. We need to check the `delta` value with the fixed input values.', 'comment_created': datetime.datetime(2020, 7, 4, 8, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 449759015, 'comment_body': 'In thousand runs it passed the tests 972 times (972 / 1000).So, I am increasing the threshold to 0.1 and running the test again.', 'comment_created': datetime.datetime(2020, 7, 4, 10, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449764638, 'comment_body': 'With threshold set to 0.1, I ran it 1500 times, it passed the test in all 1500 runs.', 'comment_created': datetime.datetime(2020, 7, 4, 11, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449765573, 'comment_body': ""Sure, I'll add them shortly."", 'comment_created': datetime.datetime(2020, 7, 4, 11, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449778347, 'comment_body': 'Great, it seems that value is enough.', 'comment_created': datetime.datetime(2020, 7, 4, 14, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 449779065, 'comment_body': 'These lines have some discrepancy.', 'comment_created': datetime.datetime(2020, 7, 4, 14, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 449779136, 'comment_body': 'These also have some discrepancy.', 'comment_created': datetime.datetime(2020, 7, 4, 14, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 449780973, 'comment_body': 'If you have spare time, fill in the exact same values from PyTorch and set error to 0.1 (same as BatchNormTest) and it will pass the test.', 'comment_created': datetime.datetime(2020, 7, 4, 15, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449785833, 'comment_body': 'Yep! I checked. That works perfectly, thanks.', 'comment_created': datetime.datetime(2020, 7, 4, 16, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 449793364, 'comment_body': 'If the training has not started yet we could log an error message saying that the training has not started yet. ', 'comment_created': datetime.datetime(2020, 7, 4, 18, 5, 48, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449794141, 'comment_body': 'I think this can fit on one line', 'comment_created': datetime.datetime(2020, 7, 4, 18, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449794176, 'comment_body': 'I think this should go outside the if statement so, we can check this while testing as well. Let me know what you think.', 'comment_created': datetime.datetime(2020, 7, 4, 18, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449794428, 'comment_body': ""I think we should do that only where we take average, otherwise we won't be able to set running mean and variance if we directly want to run. Ohh, we need a setter for this. Kindly let me know what you think."", 'comment_created': datetime.datetime(2020, 7, 4, 18, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449794505, 'comment_body': 'Ahh, Makes sense. This should go outside the `if statement`', 'comment_created': datetime.datetime(2020, 7, 4, 18, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 449833871, 'comment_body': 'alright I think we can leave it like this for now. ', 'comment_created': datetime.datetime(2020, 7, 5, 4, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449833923, 'comment_body': 'can you make this change?', 'comment_created': datetime.datetime(2020, 7, 5, 4, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 449833930, 'comment_body': 'Great.', 'comment_created': datetime.datetime(2020, 7, 5, 4, 49, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450083755, 'comment_body': 'Do you think you can write a check to see if this delta value is expectable compared with `PyTorch`?', 'comment_created': datetime.datetime(2020, 7, 6, 9, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 450085724, 'comment_body': 'Hey @KimSangYeon-DGU, I added a sum check for backward function. Individual values are too small to be nearly equal. Kindly let me know what you think. Most of the layers have sum check or no check at all (eg. Conv Layers)\r\n[Link](https://github.com/mlpack/mlpack/pull/2474/files#diff-d686e5871ec51f01e597deaae104def3R3856)', 'comment_created': datetime.datetime(2020, 7, 6, 9, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450091636, 'comment_body': ""Oh, I see. I didn't notice it. Thanks for letting me know."", 'comment_created': datetime.datetime(2020, 7, 6, 9, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 450168212, 'comment_body': 'What does this comment mean?', 'comment_created': datetime.datetime(2020, 7, 6, 11, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 450168415, 'comment_body': 'What does this comment mean?', 'comment_created': datetime.datetime(2020, 7, 6, 11, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 450168963, 'comment_body': ""If you checked with PyTorch, I think it's better to mention this values are the same with PyTorch."", 'comment_created': datetime.datetime(2020, 7, 6, 11, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 450169092, 'comment_body': ""If you checked with PyTorch, I think it's better to mention this values are the same with PyTorch."", 'comment_created': datetime.datetime(2020, 7, 6, 11, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 450173492, 'comment_body': ""Because we define `batchSize` above, let's use it.\r\n```cpp\r\nfor (size_t i = 0; i < batchSize; ++i)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 6, 12, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 450173606, 'comment_body': '```suggestion\r\n      for (size_t i = 0; i < batchSize; i++)\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 12, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 450174291, 'comment_body': '```suggestion\r\n    // Re-used in backward propagation.\r\n```', 'comment_created': datetime.datetime(2020, 7, 6, 12, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 450176572, 'comment_body': 'It refers to the test matrix i.e. the test matrix if of the form 3 x 2 x 4 x 1 {N, C, ImW, ImH}.', 'comment_created': datetime.datetime(2020, 7, 6, 12, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450176736, 'comment_body': 'Right we can change this now.', 'comment_created': datetime.datetime(2020, 7, 6, 12, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450177048, 'comment_body': 'It refers to the test matrix i.e. the test matrix if of the form 1 x 2 x 3 x 2 {N, C, ImW, ImH}.', 'comment_created': datetime.datetime(2020, 7, 6, 12, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450177308, 'comment_body': 'Right, makes sense.', 'comment_created': datetime.datetime(2020, 7, 6, 12, 10, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450188458, 'comment_body': 'I changed the comment a bit, I think the current version is a bit clearer. Kindly let me know what you think.', 'comment_created': datetime.datetime(2020, 7, 6, 12, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450284449, 'comment_body': 'since average is `true` we should initialize momentum to 0?', 'comment_created': datetime.datetime(2020, 7, 6, 15, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450287826, 'comment_body': '`If true use average otherwise use momentum for computing running mean and variance over the dataset`\r\nmaybe something like this would be better. ', 'comment_created': datetime.datetime(2020, 7, 6, 15, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450290931, 'comment_body': 'I guess this is only when average is true so, we should have it inside that if statement', 'comment_created': datetime.datetime(2020, 7, 6, 15, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450291355, 'comment_body': 'this should also go inside the if statement where average is true', 'comment_created': datetime.datetime(2020, 7, 6, 15, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450292857, 'comment_body': 'I guess this should only happen once but this is inside a for loop so it happens `batchSize` times. Let me know your thoughts. ', 'comment_created': datetime.datetime(2020, 7, 6, 15, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450296179, 'comment_body': 'This implementation would produce slightly different variance values from the one below for cnn \r\nHere when we use `runningVariance += diff % (input.col(i) - runningMean);` we are using the updated value of `runningMean` whereas for cnn we have `runningVariance += (diff.t() % diff.t());` . Can you check which one of these is correct ? ', 'comment_created': datetime.datetime(2020, 7, 6, 15, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450299220, 'comment_body': ""Sure, I'll make the changes."", 'comment_created': datetime.datetime(2020, 7, 6, 15, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450299858, 'comment_body': 'Sure, makes sense.', 'comment_created': datetime.datetime(2020, 7, 6, 15, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450308000, 'comment_body': 'Also the `runningMean` would be different because we add iteratively here (keep incrementing count by 1) whereas for cnn we are adding the entire batchsize to count at once. ', 'comment_created': datetime.datetime(2020, 7, 6, 15, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450344213, 'comment_body': 'Right. Making the changes. Thanks.', 'comment_created': datetime.datetime(2020, 7, 6, 16, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450412900, 'comment_body': ""Hey @saksham189, I made the implementation match from PyTorch in mini batchnorm (They don't use Welford to calculate cumulative average / variance). This is much more simplified and I have also added tests for average method and they match to 1e-3 precision."", 'comment_created': datetime.datetime(2020, 7, 6, 18, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450760140, 'comment_body': 'I think they are using cumulative moving average, so we should mention that.\r\nAlso could you give me a link to the pytorch implementation that you are referring to. ', 'comment_created': datetime.datetime(2020, 7, 7, 10, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450760378, 'comment_body': 'sounds good.', 'comment_created': datetime.datetime(2020, 7, 7, 10, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450765452, 'comment_body': 'Here is the [python based](https://github.com/ptrblck/pytorch_misc/blob/master/batch_norm_manual.py) batchnorm implementation with PyTorch also the [notebook](https://colab.research.google.com/drive/12Yqa6G9fqkLukUIG5s6denFnx_gfSnr5?usp=sharing) where I use both the above implementation and PyTorch for reference. Also, Could you help in figuring why the serialization tests keep failing. Before I made the last 2 commits they were working fine and I checked that all parameters are serialized.', 'comment_created': datetime.datetime(2020, 7, 7, 10, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450806014, 'comment_body': 'Can you check which of the assertions are failing and try to see the outputs after loading the serialised model?\r\nDoes the test pass locally?', 'comment_created': datetime.datetime(2020, 7, 7, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450807854, 'comment_body': ""> Does the test pass locally?\r\n\r\nIt does. According to azure build, I think it's not able to load the serialized model again (It fails on this [line](https://github.com/mlpack/mlpack/blob/ba5f9b075962740adc26260a105ce5eac27232ba/src/mlpack/tests/serialization.hpp#L235))."", 'comment_created': datetime.datetime(2020, 7, 7, 11, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450837433, 'comment_body': 'The logs show that we get an `Input stream error`', 'comment_created': datetime.datetime(2020, 7, 7, 12, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 450838539, 'comment_body': ""Yes, I'm trying to reproduce this locally but can't so far. I'll set up Ubuntu and see what's wrong there. "", 'comment_created': datetime.datetime(2020, 7, 7, 12, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 450839674, 'comment_body': 'Actually I am also on Mac OS so, I am not able to reproduce this. @KimSangYeon-DGU can you take a look at this issue?', 'comment_created': datetime.datetime(2020, 7, 7, 12, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 451342933, 'comment_body': 'Hmm, Strange, I think I have a fix. Pushing a commit hopefully that will work.', 'comment_created': datetime.datetime(2020, 7, 8, 7, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 451345796, 'comment_body': ""Oh, I deleted a previous comment because I built on `master` branch.\r\nI'm building on `ErrorInBatchNorm` branch."", 'comment_created': datetime.datetime(2020, 7, 8, 7, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 451348046, 'comment_body': 'No worries, Could you please pull from the branch again.', 'comment_created': datetime.datetime(2020, 7, 8, 7, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 451426688, 'comment_body': 'Had the same issue on Ubuntu 18.04... I need to figure out it.\r\n```\r\nRunning 1 test case...\r\ninput stream error\r\n/home/skim/Desktop/DEV/GSoC/Kartik/mlpack/src/mlpack/tests/serialization.hpp(235): fatal error: in ""ANNLayerTest/BatchNormSerializationTest"": critical check success == true has failed [false != true]\r\n\r\n*** 1 failure is detected in the test module ""mlpackTest""\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 9, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 451428126, 'comment_body': ""One think that I did figure out was that if I replace the following portion:\r\n```\r\n        double averageFactor = average ? 1.0 / count : momentum;\r\n        double nElements = (double) input.n_elem / size;\r\n        nElements = 1.0 * nElements / (1.0 * nElements - 1.0);\r\n \r\n        runningMean = (1 - averageFactor) * runningMean + averageFactor * mean;\r\n        runningVariance = (1 - averageFactor) * runningVariance + nElements *\r\n            averageFactor * variance;\r\n```\r\nwith the older Welford method code, It doesn't fail (The value tests will but serialization won't)."", 'comment_created': datetime.datetime(2020, 7, 8, 10, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 451667326, 'comment_body': ""I simplified the whole implementation and let's see the results from build (Tests pass locally). I'll add some comments in the next commit. I will also clean up the commits soon."", 'comment_created': datetime.datetime(2020, 7, 8, 16, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 452814530, 'comment_body': 'I think I figured out the error, The current implementation would pass the build. The error occurs if I declare the nElemenets variable which is equal to `n / (n - 1)` which is multiplied with the variance.', 'comment_created': datetime.datetime(2020, 7, 10, 12, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453298275, 'comment_body': 'why did we remove the linear layer case from here? IMO we should have it for speed optimization', 'comment_created': datetime.datetime(2020, 7, 12, 10, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453298470, 'comment_body': 'It was getting complicated to manage both of them, any change that we needed to make had to made in both of them. This should be easier to maintain.', 'comment_created': datetime.datetime(2020, 7, 12, 10, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453298725, 'comment_body': 'can you also explain the reason for the serialisation issue?', 'comment_created': datetime.datetime(2020, 7, 12, 10, 34, 24, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453299272, 'comment_body': 'I think the reason was when we try to load the values there was a division by zero in the expression, It was resolved by add eps to the expression. input.n_elem / size (Both initialized to 0).', 'comment_created': datetime.datetime(2020, 7, 12, 10, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453308687, 'comment_body': '>  IMO we should have it for speed optimization\r\n\r\nI have made the changes for this as well, Let me know if I should push it or we can keep it as it is.', 'comment_created': datetime.datetime(2020, 7, 12, 12, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453318435, 'comment_body': 'can you also explain where you are getting the `input.n_elem - size` from?\r\ncan you provide a link to the implementation?', 'comment_created': datetime.datetime(2020, 7, 12, 13, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453319480, 'comment_body': ""> and this doesn't (causes input stream error).\r\nrunningVariance = (1 - averageFactor) * runningVariance +\r\n       input.n_elem * (1.0 / (input.n_elem - size + eps)) *\r\n       averageFactor * variance.t();\r\n\r\nThis is the same as above? So, why do we not have the error?"", 'comment_created': datetime.datetime(2020, 7, 12, 13, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453319506, 'comment_body': ""That's simplification of n / n - 1 where n = input.n_elem / size."", 'comment_created': datetime.datetime(2020, 7, 12, 13, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453319603, 'comment_body': 'We get an error if I remove eps. (I think because size will be initialized to 0).', 'comment_created': datetime.datetime(2020, 7, 12, 13, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453319903, 'comment_body': 'The reference implementation is same as above (The notebook and PyTorch). \r\n[python based](https://github.com/ptrblck/pytorch_misc/blob/master/batch_norm_manual.py) batchnorm implementation with PyTorch also the [notebook](https://colab.research.google.com/drive/12Yqa6G9fqkLukUIG5s6denFnx_gfSnr5?usp=sharing)', 'comment_created': datetime.datetime(2020, 7, 12, 13, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453322795, 'comment_body': ""Also, I ran the tests 1500 times (I think twice or thrice) and it didn't fail so I think this works."", 'comment_created': datetime.datetime(2020, 7, 12, 14, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453337316, 'comment_body': 'for the linear layer this translates to `batchSize/(batchSize - 1)`. Are you sure this is correct? \r\nThe implementation is for `batchnorm2d`. Does that apply to the linear layer?', 'comment_created': datetime.datetime(2020, 7, 12, 16, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453338325, 'comment_body': 'I think they are the same, Maybe this make [sense](https://github.com/pytorch/pytorch/issues/2628). ', 'comment_created': datetime.datetime(2020, 7, 12, 16, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453338970, 'comment_body': 'This also might be [useful - PyTorch Discuss Forum](https://discuss.pytorch.org/t/why-2d-batch-normalisation-is-used-in-features-and-1d-in-classifiers/88360/2).', 'comment_created': datetime.datetime(2020, 7, 12, 16, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453341805, 'comment_body': 'No, my doubt is that if `batchSize = 1` then `batch/(batchSize- 1 + eps)` would be a very large number. How does that make sense?', 'comment_created': datetime.datetime(2020, 7, 12, 17, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453342064, 'comment_body': 'Hmm, BatchSize number of columns. For one that would mean a single input point is passed through the dataset. How would you suggest to change. It does make sense that if batchSize == 1 then it would be a large number.', 'comment_created': datetime.datetime(2020, 7, 12, 17, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453342223, 'comment_body': 'So for that it would mean shape would be 1x1. (single feature x single input), Would we use batchnorm where there is a single element (no cols or rows). Let me check it again.', 'comment_created': datetime.datetime(2020, 7, 12, 17, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453343057, 'comment_body': 'why does that mean that the number of rows would be 1? For example if the output size of a linear layer is 10 and the batchSize is 1 and we initialise batchnorm with size 10, then we would have output of 10x1 passed to batchNorm and n would be be 10/10 = 1. Is that not correct?', 'comment_created': datetime.datetime(2020, 7, 12, 17, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453344307, 'comment_body': 'Right, sorry that makes sense. I just tested what would happen in pytorch with batchnorm 2d and the running var became nan,\r\n```\r\nA = np.array([ 5.1 , 3.5 , 1.4, 4.9 , 3.0 , 1.4 , 4.7 , 3.2 , 1.3 ]).reshape((1, 9, 1, 1))\r\nmy_bn = MyBatchNorm2d(9, eps = 1e-5, affine=True)\r\ntrain_and_eval(my_bn, A)\r\n```\r\n\r\nOutput : \r\n```\r\nTRAIN_BN_RUNNING_VAR:\r\ntensor([nan, nan, nan, nan, nan, nan, nan, nan, nan])\r\n```\r\n\r\nWhere as running this gave me the following error : \r\n```\r\nlayer = torch.nn.BatchNorm2d(9)\r\nlayer(torch.FloatTensor(A))\r\n```\r\nOutput : \r\n```\r\nValueError: Expected more than 1 value per channel when training, got input size torch.Size([1, 9, 1, 1])\r\n```', 'comment_created': datetime.datetime(2020, 7, 12, 17, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453344573, 'comment_body': 'I think I got your point, I will look into the batchNorm 1d implementation as well and get back to you.', 'comment_created': datetime.datetime(2020, 7, 12, 17, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453345424, 'comment_body': 'Hey @saksham189, Could you also please look at [this thread](https://github.com/pytorch/pytorch/issues/7716). Also, Take a look at this [Link](https://stackoverflow.com/questions/8023878/standard-deviation-of-one-element). To calculate variance batchSize must be greater than 1.', 'comment_created': datetime.datetime(2020, 7, 12, 17, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453346055, 'comment_body': 'If this makes sense, I can push a commit to check the same or we can add a warning and keep it as it is. Kindly let me know what you think.', 'comment_created': datetime.datetime(2020, 7, 12, 18, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453349094, 'comment_body': ""Ahh, The serialisation test also had batchSize == 1 that's why there was an error. "", 'comment_created': datetime.datetime(2020, 7, 12, 18, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453418553, 'comment_body': 'I have added a warning for now and set it 0 for batch size == 1 case. Kindly let me know what you think.', 'comment_created': datetime.datetime(2020, 7, 13, 3, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453632247, 'comment_body': 'yup looks fine now. Thanks for looking into this.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453632985, 'comment_body': ""Thanks for pointing it out, I'll push a commit for the style fix in just a sec."", 'comment_created': datetime.datetime(2020, 7, 13, 13, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453733025, 'comment_body': 'Hey @kartikdutt18 . \r\nIts okay with me if we want to go ahead and merge this PR right away, but there is a minor bug in this step 4 of the Backward method() as I have described [here](https://iamshnoo.github.io/blog/week-5/) in detail.\r\n\r\nAs can be seen from the comment for step 4 itself, there should be 2 terms in the expression for normTemp, where the second term should probably just be the following\r\n```\r\narma::mean(inputMean.each_slice() % vars * -2) , 2)  / input.n_cols\r\n```\r\n\r\nSince this PR is already a major change of the layer, maybe you would like to include this as a small fix?\r\nOr I can just create a issue for this separately, which we can work on and resolve later as well. \r\nAnyway, I was advised to atleast mention this here and so I thought I should.\r\n\r\nThanks a lot for the work though, it has helped me a lot with the Instance Norm.', 'comment_created': datetime.datetime(2020, 7, 13, 15, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 453735063, 'comment_body': ""> arma::sum(inputMean.each_slice() % vars * -2) , 2)  / input.n_cols\r\n\r\nIsn't gTemp initialized to this?"", 'comment_created': datetime.datetime(2020, 7, 13, 15, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453737190, 'comment_body': ""Let me do this, I already have the fast backward PR ready (I can open that, I didn't add it in this one since it gave higher gradients earlier, I will open one PR post dinner so that will require debugging and at least its no longer a blocker for any of my further tasks)."", 'comment_created': datetime.datetime(2020, 7, 13, 15, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453738204, 'comment_body': 'I dont think so.\r\n```\r\ngTemp = g (initially)\r\n```\r\n\r\nThen in step 3 : \r\n```\r\ngTemp = (norm.each_slice() % arma::repmat(stdInv,  input.n_rows / size, 1) +\r\n                (inputMean.each_slice() % vars * 2)) / input.n_cols;\r\n```\r\n\r\nThen in step 4:\r\nThe summation of the second term from step 3 along with a negative sign has to be added again to gTemp.\r\n\r\n<img width=""350"" alt=""Screenshot 2020-07-13 at 9 04 36 PM"" src=""https://user-images.githubusercontent.com/45921510/87323500-7d624500-c54c-11ea-89f4-1edb451d933c.png"">\r\n\r\n<img width=""125"" alt=""Screenshot 2020-07-13 at 9 05 10 PM"" src=""https://user-images.githubusercontent.com/45921510/87323550-8d7a2480-c54c-11ea-9de1-d20ee928b02e.png"">\r\n', 'comment_created': datetime.datetime(2020, 7, 13, 15, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 453739771, 'comment_body': ""> gTemp = g (initially)\r\n\r\nI think it's initialized to this (from the code)\r\n```\r\n  gTemp = (norm.each_slice() % arma::repmat(stdInv,\r\n       input.n_rows / size, 1) +\r\n       (inputMean.each_slice() % vars * 2)) / input.n_cols;\r\n```\r\n\r\nIt would be redundant  to discuss this here, Lets wait for my PR."", 'comment_created': datetime.datetime(2020, 7, 13, 15, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453741390, 'comment_body': ""> I think it's initialized to this (from the code)\r\n\r\nNo. That's the gradient from a separate branch in the graph.\r\nAs you can see from the pictures of the equations I included above, we need to add the thing I mentioned.\r\n```cpp\r\ndL / dG = (norm.each_slice() % arma::repmat(stdInv,  input.n_rows / size, 1)/ input.n_cols;\r\ndL / dI = (inputMean.each_slice() % vars * 2) / input.n_cols;\r\n\r\ng = dL/ dG + dL/dI  // in step 3 from the code (initialisation)\r\n// And then again we need to do\r\ng += sum( -dL/dG -dL/dI)\r\n\r\n// but we are just doing\r\ng += sum( -dL/dG)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 13, 15, 38, 8, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 453744216, 'comment_body': 'Hey @iamshnoo can you just check the summation you are talking about adding, does it add up to zero?', 'comment_created': datetime.datetime(2020, 7, 13, 15, 40, 44, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453745895, 'comment_body': '> I already have the fast backward PR ready\r\n\r\nSure, open that one, then we can merge it and totally forget about this one after debugging that properly.\r\nThat would be the ideal thing to do as I see it.\r\n', 'comment_created': datetime.datetime(2020, 7, 13, 15, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 453748668, 'comment_body': 'Hey @iamshnoo can you take a look here and tell me if this is relevant https://github.com/mlpack/mlpack/pull/1943 ?', 'comment_created': datetime.datetime(2020, 7, 13, 15, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453758816, 'comment_body': ""> does it add up to zero?\r\n\r\nYou mean,``` arma::sum(inputMean.each_slice() % vars * -2) , 2)  / input.n_cols == 0``` ?\r\n\r\nI haven't checked yet, but I have checked that this calculation matches with 2 existing python implementations from cs231n [here](https://github.com/cthorey/CS231/blob/master/assignment2/cs231n/layers.py#L210) and [here](https://kratzert.github.io/2016/02/12/understanding-the-gradient-flow-through-the-batch-normalization-layer.html) which have already been verified by numerical gradient check functions [here](https://github.com/cthorey/CS231/blob/master/assignment2/cs231n/gradient_check.py). So, it should be correct.\r\n\r\nAnyway, the faster  implementation of the BatchNorm which Kartik mentioned above, won't need this term (and many others) anyway, and since he will be putting up a PR on that soon, I guess we can leave this issue as a comment for now till that gets completed."", 'comment_created': datetime.datetime(2020, 7, 13, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 453764326, 'comment_body': ""> Hey @iamshnoo can you take a look here and tell me if this is relevant #1943 ?\r\n\r\nYep, thanks for pointing that out. That resolves the doubt I had.\r\nThat term becoming zero is also the reason why it won't be needed for the faster implementation, which is what I just figured out :)"", 'comment_created': datetime.datetime(2020, 7, 13, 16, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'iamshnoo', 'type': 'User'}, {'comment_id': 453767940, 'comment_body': 'Awesome, Anyways both of the implementations gave the same value so I thought the above implementation was correct. Opened #2512.', 'comment_created': datetime.datetime(2020, 7, 13, 16, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453768187, 'comment_body': 'Alright so the backward computation we currently have is correct and so, I will resolve this conversation here. \r\nIf you want you can open a new issue to discuss about further optimization to the backward function but IMO it should not be done here because the work for this PR is complete. ', 'comment_created': datetime.datetime(2020, 7, 13, 16, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 453768917, 'comment_body': 'Right.', 'comment_created': datetime.datetime(2020, 7, 13, 16, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': 'ca8adb01239cea0a5d64fe3cbddb356278ab4dc5', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4937f83eccf9849558d04ec505149b9c8b5daada', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ae5fcd7a3b23714ea190ca13a72ae3f96a6729e', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '626bd67d649ba02e35aef99689746aeb3ca5a5a3', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7cdf7cd94b0b7616d80a3a300102ac17b512458', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
448354383,Optimize Backward Propogation for BatchNorm Layer.,"Hey everyone,
This PR aims to use faster backward propogation for BatchNorm Layer. The reason this was divided into two parts was simple i.e. The previous PR that implemented mini-batchnorm was a blocker for my tasks which is now removed and this is simply an optimization. Also, This gives me very high gradients(0.9 - 1) so this needs some debugging.
[Reference 1](https://kratzert.github.io/2016/02/12/understanding-the-gradient-flow-through-the-batch-normalization-layer.html) -> Previous BatchNorm
[Reference 2](http://cthorey.github.io./backpropagation/) -> Fast BatchNorm.

The values for both batchnorm match and hence both are correct.",False,2512,https://api.github.com/repos/mlpack/mlpack/pulls/2512,https://github.com/mlpack/mlpack/pull/2512,closed,22,27,1,1,4,6,4,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: methods'}, {'name': 't: added feature'}]",2020-07-13 16:13:02+00:00,2021-12-28 06:00:51+00:00,46014469.0,"532 days, 13:47:49","[{'comment_id': 453828599, 'comment_body': 'This will modify `gy` if `gyTemp` is changed somewhere. Probably if someone wants to access `previousLayer.Delta()`, it will not give the actual result, or if it is used in skip connections it may create a problem. Maybe I am not understanding correctly but can you please clarify this?', 'comment_created': datetime.datetime(2020, 7, 13, 17, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 453831974, 'comment_body': 'gY is passed as const, If I try modifying it will, it will throw an error anyway (which is not done). Also this prevents creating an auxiliary array(copy) to prevent space allocation. Same is done for other layers as well.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453839781, 'comment_body': 'Can you please try this small program?\r\n```cpp\r\n#include<armadillo>\r\n\r\nusing namespace arma;\r\n\r\nvoid test(const arma::mat& x,\r\n          arma::mat& y)\r\n{\r\n  size_t splitRatio = 2;\r\n  arma::cube xTemp(const_cast<arma::mat&>(x).memptr(), x.n_rows / splitRatio, x.n_cols, splitRatio, false, false);\r\n  xTemp.zeros();\r\n  \r\n  y.set_size(xTemp.n_rows * xTemp.n_cols, xTemp.n_slices);\r\n  for (size_t i = 0; i < xTemp.n_slices; ++i)\r\n  {\r\n    y.col(i) = arma::vectorise(xTemp.slice(i));\r\n  }\r\n}\r\n\r\nint main()\r\n{\r\n  arma::mat x = arma::randu(10, 4);\r\n  arma::mat y;\r\n  x.print(""x initially:"");\r\n  test(x, y);\r\n  x.print(""x finally:"");\r\n}\r\n\r\n```\r\nAlso if I see on cppreference, it says--\r\n>In particular, only const_cast may be used to cast away (remove) constness or volatility. \r\n\r\nhttps://en.cppreference.com/w/cpp/language/const_cast', 'comment_created': datetime.datetime(2020, 7, 13, 18, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 453845489, 'comment_body': 'Right, But I didn\'t change gYTemp anywhere. \r\n```\r\n\r\n#include<armadillo>\r\n\r\nusing namespace arma;\r\n\r\nvoid test(const arma::mat& x,\r\n          arma::mat& y)\r\n{\r\n  size_t splitRatio = 2;\r\n  arma::cube xTemp(const_cast<arma::mat&>(x).memptr(), x.n_rows / splitRatio, x.n_cols, splitRatio, false, false);\r\n\r\n  y.set_size(xTemp.n_rows * xTemp.n_cols, xTemp.n_slices);\r\n  for (size_t i = 0; i < xTemp.n_slices; ++i)\r\n  {\r\n    y.col(i) = arma::vectorise(xTemp.slice(i));\r\n  }\r\n}\r\n\r\nint main()\r\n{\r\n  arma::mat x = arma::randu(10, 4);\r\n  arma::mat y;\r\n  x.print(""x initially:"");\r\n  test(x, y);\r\n  x.print(""x finally:"");\r\n}\r\n```\r\nThis shouldn\'t be an issue, so If I make sure not to change it should that be issue ?\r\nAlso take a look at Convolution layer, Transposed Conv layers and many more.\r\n\r\nWe can prevent both creating an auxiliary matrix as well as not modify the matrix if we simply don\'t modify the matrix. Let me know if that makes sense.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 453852913, 'comment_body': 'Ohh...wait! I was reading `gTemp` as `gyTemp`. I\'m really sorry 😂. Maybe someone else can suggest better what is good practice here. In my opinion, you can leave if it is ""known"" that it is not modified.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mrityunjay-tripathi', 'type': 'User'}, {'comment_id': 453853586, 'comment_body': 'No worries.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '86613b572c62529eedd7f076c59687c55adc8158', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
462714567,Changes in Deterministic settings of FNN.,"Hey everyone,
I've made some changes in deterministic parameter of FFN.
**Issue**
While predicting, the deterministic parameter was not being set correctly i.e. layers which whose output is dependent on deterministic parameter gave same output in training and prediction. The following changes resolve the issue for me.

I have added review comments below to explain the changes better but maybe I missed something so kindly let me know what you think.

Regards,
Kartik.",True,2552,https://api.github.com/repos/mlpack/mlpack/pulls/2552,https://github.com/mlpack/mlpack/pull/2552,closed,24,15,2,4,6,8,1,0,[{'name': 't: bugfix'}],2020-08-04 11:46:45+00:00,2020-08-04 18:25:32+00:00,23927.0,6:38:47,"[{'comment_id': 464991525, 'comment_body': 'Model should always start with training mode.', 'comment_created': datetime.datetime(2020, 8, 4, 11, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 464991816, 'comment_body': 'ResetData is used in training mode and hence deterministic should be set to false so that all layers are in training mode.', 'comment_created': datetime.datetime(2020, 8, 4, 11, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 464992160, 'comment_body': ""The forward call shouldn't interfere with deterministic since this will be called either from Train or Predict or directly."", 'comment_created': datetime.datetime(2020, 8, 4, 11, 48, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 465029599, 'comment_body': '@zoq can you see if this is required for any use case? I think we should be able to remove this. ', 'comment_created': datetime.datetime(2020, 8, 4, 12, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 465076069, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2020, 8, 4, 14, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 465077106, 'comment_body': ""That's fine."", 'comment_created': datetime.datetime(2020, 8, 4, 14, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 465142241, 'comment_body': ""This test didn't make much sense to me, so I have removed it for now. I think #2398 has the correct test for this."", 'comment_created': datetime.datetime(2020, 8, 4, 15, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 465178902, 'comment_body': 'Agreed.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}]","[{'commit_sha': 'bdb5abd1818079da69fe16083f0acefe6f59605c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd570d7c69478b8e249c67dfbb92dfd5b7d85c242', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ddd2250fed23455d1ab5dbfa10216410e04d56a', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd85c689424bdf9c5a1a8d3953ff110d3c0608982', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
391888458,Restructuring - 1 (Adding Data loader and associated Utility Functions).,"Basic Structure of models repo:

```
--models
        -- data (Empty everything will be download in runtime)

	 -- dataloaders (Input dataset name like ""mnist"" or path to your csv)

	 -- research (Train models from CLI)

		-- object_classification.cpp (specify model and params).

	-- models (All models implemented as a class)

		--lenet (All lenet models (1, 4, 5))
		--simple_nn (An FFN model)

	-- utils
		-- utils.hpp 
                -- Useful functions such as GetLabels to get labels for predictions
	-- weights
		-- Add weights for model (Download only, will be empty in repo)
	-- tests
		Added tests to download, load, train and perform inference using models.

```
There a ton to do, so I have added a list below of what I plan to accomplish in this PR:

- [x] Set basic structure ?
- [x] Add data loader for mnist.
- [x] Add Run Time Download of mnist using wget in cmake.
- [x] Add LeNet model.
- [x] Add Simple NN model. (I don't think this should be here, let me know what you think?)
- [x] Add Tests (BOOST_AUTO_TEST_CASE maybe ? , details in mlpack/examples#57)
- [ ] Add Documentation for models and how to use them.
- [x] Add object classification file. (This is where CLI would be added to specify parameters).
- [x] Add basic Cmake.
- [ ] Remove Cmake to match git submodules.
- [ ] Add downloadable weights (Also in run time).
- [x] Maybe Add LeNet versions as typedef ? (Sounds like a good idea, what do you think?)
- [x] According to discussion on IRC, I have removed LSTMs from here (I can add them as models if necessary, Let me know How I should proceed with this)
- [x] **Add comments and provide style fixes.** 
- [x] Change travis and maybe integrate Azure Pipelines?
I think there would be a separate PR to add CLI.

Adding a timeline here to complete remaining points to ensure that I don't fall behind:
- [x] Add object detection file (complete this by  27/03).
- [x] Add Typedef for lenet (by 27/03).
- [x] Train lenet models (by 27/03)
- [x] Add working tests (complete them by 28/03)
- [x] Document this and examples repo (complete by 29/03)
- [ ] Repeat for VAE (by 29/03).
This will complete the main C++ functionalities then.",True,3,https://api.github.com/repos/mlpack/models/pulls/3,https://github.com/mlpack/models/pull/3,closed,1520,3824,21,32,45,88,2,0,"[{'name': 'c: build system'}, {'name': 't: added feature'}]",2020-03-21 17:38:53+00:00,2020-05-20 15:25:11+00:00,5175978.0,"59 days, 21:46:18","[{'comment_id': 402309450, 'comment_body': ""Might be easier to type as `DatasetX` (and lowercased `dataset` matches mlpack documentation's usage a bit better).  Your call. :+1:"", 'comment_created': datetime.datetime(2020, 4, 2, 13, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402309973, 'comment_body': ""```suggestion\r\n  size_t WrapIndex(int index, size_t length)\r\n```\r\n(Just to match the mlpack style.  I didn't adapt usages of this function throughout the code though.)"", 'comment_created': datetime.datetime(2020, 4, 2, 13, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402310336, 'comment_body': ""```suggestion\r\n```\r\n\r\nI think this file is all you, correct me if I'm wrong. :)"", 'comment_created': datetime.datetime(2020, 4, 2, 13, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402313774, 'comment_body': 'Maybe it would be worthwhile to hold some struct that matches names of well-known datasets?  i.e.\r\n\r\n```\r\n// short name => details.  Maybe this can all be initialized in one line, I haven\'t tried.\r\nconst std::map<std::string, DatasetDetails> datasetMap;\r\ndatasetMap[""mnist""] = Datasets::MNIST();\r\n...\r\n```\r\n\r\nI think I have my syntax wrong there, but you get the idea I assume. :)\r\n\r\nThen, in this function you could just check if `dataset` is in the keys of `datasets` and use that `DatasetDetails`, thus making the code below not specific to MNIST. :+1:', 'comment_created': datetime.datetime(2020, 4, 2, 13, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402314715, 'comment_body': 'Maybe is it worth adding this here so the function doesn\'t ever return without doing anything?\r\n```\r\nelse\r\n{\r\n  Log::Fatal << ""Unknown dataset \'"" << dataset << ""\'!"" << std::endl;\r\n}\r\n``` ', 'comment_created': datetime.datetime(2020, 4, 2, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402314898, 'comment_body': '```suggestion\r\n        0, wrapIndex(endInputFeatures, dataset.n_rows), dataset.n_cols - 1);\r\n```', 'comment_created': datetime.datetime(2020, 4, 2, 13, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402315169, 'comment_body': 'Any particular reason this is commented out?  It seems like you would want to fit the scaler to the full dataset here.', 'comment_created': datetime.datetime(2020, 4, 2, 13, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402315468, 'comment_body': 'We can make this use an mlpack.org URL before merge. :+1:', 'comment_created': datetime.datetime(2020, 4, 2, 13, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402315956, 'comment_body': 'I guess, are you thinking that we can add the `PARAM_*()` calls in a later PR?', 'comment_created': datetime.datetime(2020, 4, 2, 13, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402316150, 'comment_body': 'Can you make sure the files end with a newline?  (Sorry, minor issue. :))', 'comment_created': datetime.datetime(2020, 4, 2, 13, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402316500, 'comment_body': ""I think it would be useful to add some comments to the top of this file describing what it's for, the type of model that it trains, how one might use it, etc."", 'comment_created': datetime.datetime(2020, 4, 2, 13, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402316708, 'comment_body': '```suggestion\r\n        const std::string& weights = ""none"");\r\n```\r\nTiny style comment. :)', 'comment_created': datetime.datetime(2020, 4, 2, 13, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402317825, 'comment_body': ""```suggestion\r\n  Sequential<>* leNet;\r\n```\r\nAlso, maybe it would be better to store `leNet` as an `FFN` instead?  (If one wanted to use `LeNet` inside of other models, it would be easy to wrap it in a `Sequential<>` then.  But at least `object_recognition.cpp` uses an FFN that's only `LeNet`, so that code could be simplified with `leNet` as just an `FFN`. :+1:"", 'comment_created': datetime.datetime(2020, 4, 2, 13, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402318764, 'comment_body': 'I think this can only be 1, 4, or 5.  Want to add a static assert check for that?', 'comment_created': datetime.datetime(2020, 4, 2, 13, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402319448, 'comment_body': ""I'm confused, these lines don't seem to do anything?"", 'comment_created': datetime.datetime(2020, 4, 2, 13, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402320185, 'comment_body': 'If `leNetVer` is a template parameter, it might make the most sense to simply split these out into separate functions, like:\r\n\r\n```\r\ntemplate<>\r\nLeNet<1>::BuildNetwork()\r\n{\r\n  leNet->Add<Linear<>>(16 * inputWidth * inputHeight, numClasses);\r\n}\r\n\r\ntemplate<>\r\nLeNet<4>::BuildNetwork()\r\n{\r\n  leNet->Add<Linear<>>(16 * inputWidth * inputHeight, 120);\r\n  leNet->Add<LeakyReLU<>>();\r\n  leNet->Add<Linear<>>(120, numClasses);\r\n}\r\n\r\n...\r\n```\r\n\r\nThen you can just call `BuildNetwork()` from this constructor and it will select the right specialization. :)', 'comment_created': datetime.datetime(2020, 4, 2, 13, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402321186, 'comment_body': ""What are the requirements for `weights` here?  I see from the code that if it's `mnist`, we'll load MNIST weights from a file, but what does a user have to run to make sure that the files exist on disk?  It's probably worth pointing that out here in the documentation.  (I don't see any code handling for `imagenet` though?)"", 'comment_created': datetime.datetime(2020, 4, 2, 13, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402321949, 'comment_body': 'Want to add some tests for when `DataLoader` is used incorrectly?  (i.e., does it crash as expected?)', 'comment_created': datetime.datetime(2020, 4, 2, 13, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402322164, 'comment_body': '```suggestion\r\n * @file utils_tests.cpp\r\n```\r\n:)', 'comment_created': datetime.datetime(2020, 4, 2, 13, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402322490, 'comment_body': 'Should we remove the files we downloaded with `remove()` after running the tests?  (Also should this line compare with `mnist_test.csv` not `mninst_test.csv`?)', 'comment_created': datetime.datetime(2020, 4, 2, 13, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402323322, 'comment_body': 'Ah, I think this will only work on Linux or OS X (or systems where `curl` is on the path, which is probably not usually the case on Windows).  Do you think you can use the cURL C API for this, then link against libcurl?', 'comment_created': datetime.datetime(2020, 4, 2, 13, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402323853, 'comment_body': ""If we need OpenSSL, I think that's just fine, but should we add it to the dependencies we search for and require in the main `CMakeLists.txt`?"", 'comment_created': datetime.datetime(2020, 4, 2, 13, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 402324250, 'comment_body': 'Seems like this should be added to the root CMakeLists.txt?', 'comment_created': datetime.datetime(2020, 4, 2, 13, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 406338387, 'comment_body': 'I am going a different way at least for now, I am writing my own implementation of checksum.', 'comment_created': datetime.datetime(2020, 4, 9, 16, 47, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406338458, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2020, 4, 9, 16, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406338703, 'comment_body': 'Sounds like a good idea. Will add it to the implementation.', 'comment_created': datetime.datetime(2020, 4, 9, 16, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406338871, 'comment_body': 'Agreed, I will add them as well.', 'comment_created': datetime.datetime(2020, 4, 9, 16, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 406340642, 'comment_body': 'I did something similar to how PyTorch builds model. Convolution and Pooling Blocks add convolutional layer, activation function layer pooling layer and normalization respectively. Rather than writing them again and again we can simply use blocks to remove redundant code. They add layers to the leNet layer.', 'comment_created': datetime.datetime(2020, 4, 9, 16, 51, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 408392302, 'comment_body': ""Looks like the comments don't match with the parameters, but maybe this isn't ready yet?"", 'comment_created': datetime.datetime(2020, 4, 14, 19, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 408563048, 'comment_body': ""> Looks like the comments don't match with the parameters\r\n\r\nTerribly sorry about, the dataloader went through different versions to remove redundant / duplicate code and I think that led to incomplete parameters in it.\r\n\r\n> but maybe this isn't ready yet?\r\n\r\nThere are only few points left. I was writing more tests for models, utils and dataloader. In the next few hours I will remove all dependencies and switch to boost lib. I will review my PR and make the required style changes like this one. Maybe you could take a look after that if you get a chance. Thanks a lot."", 'comment_created': datetime.datetime(2020, 4, 15, 3, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 416084389, 'comment_body': 'Maybe a simple example here would be nice to have, similar to:\r\n\r\nhttps://github.com/mlpack/mlpack/blob/9672d5d15368aca5600e6f72cb8f2fd15d2bc25d/src/mlpack/methods/mean_shift/mean_shift.hpp#L32-L41', 'comment_created': datetime.datetime(2020, 4, 27, 19, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 416085469, 'comment_body': 'Do you think we should provide a Constructor that returns the loaded and processed dataset as well?', 'comment_created': datetime.datetime(2020, 4, 27, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 416088233, 'comment_body': 'We might want to apply a policy based design here, like a dataset specific class to apply some specific functions after the data is loaded, something like:\r\n\r\n```c++\r\nclass Mnist {\r\n  static void Update(...)\r\n  {\r\n\r\n  }\r\n}\r\n```\r\n\r\nlet me know what you think', 'comment_created': datetime.datetime(2020, 4, 27, 19, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 416350393, 'comment_body': 'Yes, will add it in the next commit. Thanks a lot for the review.', 'comment_created': datetime.datetime(2020, 4, 28, 6, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 416736248, 'comment_body': 'Yeah, we could do that. Just one more thing, I am currently storing a class that determines type of dataset and if it is of `csv` format we store rows to drop, rows to use for prediction etc. I think we should keep that as it is or would you suggest having them in the class you mentioned above.', 'comment_created': datetime.datetime(2020, 4, 28, 16, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 416736544, 'comment_body': 'This would definitely more sense when more datasets are added.', 'comment_created': datetime.datetime(2020, 4, 28, 16, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 416739037, 'comment_body': ""I am terribly sorry but I didn't get your point here. I assuming it means that we should add a constructor for custom dataset as well ?"", 'comment_created': datetime.datetime(2020, 4, 28, 16, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 421581079, 'comment_body': ""Hey @zoq, I was thinking if we could do something like the following :\r\n\r\n```\r\nclass Preprocess\r\n{\r\n   public:\r\n   static void MNIST(input-args)\r\n   {\r\n     // Preprocess dataset.\r\n    }\r\n}\r\n```\r\n\r\nThat way we don't have to have a separate class for each dataset we add here, and eventually save the lines that would have to be maintained.\r\n\r\nKindly let me know if this makes sense. Thanks a lot.\r\n\r\nRegards,\r\nKartik."", 'comment_created': datetime.datetime(2020, 5, 7, 15, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 422286900, 'comment_body': 'Nevermind I thought I have to first create the `DataLoader` object and after that use `DownloadDataset` to get the dataset, but I can just use `TrainX`. Sorry for the confusion.', 'comment_created': datetime.datetime(2020, 5, 8, 18, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 422287402, 'comment_body': 'Sure, that looks reasonable to me.', 'comment_created': datetime.datetime(2020, 5, 8, 18, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 422289734, 'comment_body': 'Great, Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 8, 18, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 422289848, 'comment_body': 'Great, making rest of the changes now. Thanks a ton!', 'comment_created': datetime.datetime(2020, 5, 8, 18, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 423156995, 'comment_body': ""I'm wondering if we should use a more descriptive name, like `TrainSet` or `TrainPredictors` and `TrainLabels` or `TrainResponses`, let me know what you think."", 'comment_created': datetime.datetime(2020, 5, 11, 16, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423157351, 'comment_body': 'I guess we could also return a tuple.', 'comment_created': datetime.datetime(2020, 5, 11, 16, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423158823, 'comment_body': 'Yes, Maybe `TrainFeatures` and `TrainLabels` make sense and `TrainSet` would return a tuple.\r\n\r\n> I guess we could also return a tuple.\r\n\r\nYes, that could be added.\r\nThanks for the review.\r\nRegards.', 'comment_created': datetime.datetime(2020, 5, 11, 16, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 423190268, 'comment_body': 'I like the naming.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423208207, 'comment_body': ""Might be nice to comment on the parameter even if it's a private function."", 'comment_created': datetime.datetime(2020, 5, 11, 17, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423208660, 'comment_body': 'I would use `{}` here to make this easier to read.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423209016, 'comment_body': 'Should this be `downloaded.`?', 'comment_created': datetime.datetime(2020, 5, 11, 17, 41, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423209615, 'comment_body': '```suggestion\r\n    data::Split(dataset, trainDataset, validDataset, ratio /* Add shuffle */);\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 17, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423209945, 'comment_body': 'We might want to add a TODO here, to make this easier to find.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423210025, 'comment_body': '```suggestion\r\n        0, WrapIndex(endInputFeatures, dataset.n_rows), dataset.n_cols - 1);\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 17, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423210720, 'comment_body': ""We could also use `mlpack::log` here, but I don't really have a preference."", 'comment_created': datetime.datetime(2020, 5, 11, 17, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423211162, 'comment_body': '```suggestion\r\n  static void MNIST(DatasetX& /* trainX */, DatasetY& trainY,\r\n```\r\n\r\nJust to be consistent with the rest.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423211284, 'comment_body': '```suggestion\r\n      DatasetY& /* validX */, DatasetY& validY, DatasetX& /* testX */)\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 17, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423211757, 'comment_body': ""I'm wondering if we should split this up into multiple PR's makes it easier to review, let me know what you think."", 'comment_created': datetime.datetime(2020, 5, 11, 17, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 423213715, 'comment_body': 'Sure, Sorry I missed it.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 423213838, 'comment_body': 'Agreed.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 423214081, 'comment_body': 'Yes. Thanks for pointing it out.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 423214258, 'comment_body': 'Will do.', 'comment_created': datetime.datetime(2020, 5, 11, 17, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 423657422, 'comment_body': 'I think the documentation should be `Modify the Training Dataset Labels.`\r\nand `Modify the Training Dataset Predictors.` \r\n\r\nCould you make the changes everywhere else? ', 'comment_created': datetime.datetime(2020, 5, 12, 11, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 423657948, 'comment_body': 'Scaler', 'comment_created': datetime.datetime(2020, 5, 12, 11, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 423659102, 'comment_body': 'IMO `augmentation probability` would sound better.', 'comment_created': datetime.datetime(2020, 5, 12, 11, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 423663086, 'comment_body': 'I agree with @zoq This PR is already quite big. \r\nLet us know what you think @kartikdutt18 ', 'comment_created': datetime.datetime(2020, 5, 12, 11, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 423664627, 'comment_body': 'Agreed, as discussed on the IRC, I will remove the portion related to LeNet and object detection and keep only the data loader portion with its utility functions. I hope that makes sense. Let me know what you think.', 'comment_created': datetime.datetime(2020, 5, 12, 11, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 423664794, 'comment_body': 'Sorry about that, will do.', 'comment_created': datetime.datetime(2020, 5, 12, 11, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 423664938, 'comment_body': 'Agreed, Will make the changes. Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 12, 11, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 423665118, 'comment_body': 'Sorry about that, will make the required changes. Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 12, 11, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 424748898, 'comment_body': 'Can you check if that works with an absolute path? Or I guess `iris.csv` should work as well, maybe the path isn\'t correct? Looking at the ci config:\r\n\r\n`script: cd build/tests/ && sudo CTEST_OUTPUT_ON_FAILURE=1 ctest -R UtilsTest`\r\n\r\nwe should be in `build/tests/` so I would think we have to use `""./../../data/iris.csv""`?\r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 13, 21, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 424749246, 'comment_body': 'I think that is true for most of us 😃 ', 'comment_created': datetime.datetime(2020, 5, 13, 21, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 424857790, 'comment_body': '> we should be in build/tests/ so I would think we have to use ""./../../data/iris.csv""?\r\n\r\nI think this shouldn\'t be required since CtestConfig.CMake sets path for execution to build so the data folder should be accessible. I\'ll try with absolute path and get back to you. Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 14, 4, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 424857888, 'comment_body': 'True, xD.', 'comment_created': datetime.datetime(2020, 5, 14, 4, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 425059804, 'comment_body': 'Finally figured it out, The tests pass now (getting 400 in one of them) but the rest pass. The issue was GitHub deleted the empty data folder. Locally I still had the folder so that caused this issue on azure and not locally. Sorry about this.\r\nThanks a lot.\r\nRegards.', 'comment_created': datetime.datetime(2020, 5, 14, 11, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 425060495, 'comment_body': 'Ah, great that you figured it out.', 'comment_created': datetime.datetime(2020, 5, 14, 11, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 425061198, 'comment_body': 'I made a lot of commits for this. Hopefully this commit will give a green build on OSX. (Squashing the rest).', 'comment_created': datetime.datetime(2020, 5, 14, 11, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 425061944, 'comment_body': ""Right, it's often not that easy to debug something on the ci pipeline."", 'comment_created': datetime.datetime(2020, 5, 14, 11, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 426186921, 'comment_body': '```suggestion\r\n    CTEST_OUTPUT_ON_FAILURE=1 ctest -T Test -C ./. \r\n```', 'comment_created': datetime.datetime(2020, 5, 16, 20, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 426290800, 'comment_body': ""Let's switch to `x86` and see if that helps."", 'comment_created': datetime.datetime(2020, 5, 17, 18, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 426291623, 'comment_body': 'One more thing @zoq we are also getting warning regarding MLPACK_LIBRARY while configuration. Should we change that too? \r\nI think so It must be `mlpack/build/Release/mlpack.lib`.', 'comment_created': datetime.datetime(2020, 5, 17, 18, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 426293152, 'comment_body': 'Yes, good idea.', 'comment_created': datetime.datetime(2020, 5, 17, 18, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 426294021, 'comment_body': ""Sure, I'll make the change. Thanks a lot."", 'comment_created': datetime.datetime(2020, 5, 17, 19, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 426342829, 'comment_body': 'Hey @kartikdutt18 MLPACK_INCLUDE_DIR was looking good. You just have to change MLPACK_LIBRARY.', 'comment_created': datetime.datetime(2020, 5, 18, 2, 36, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 426344256, 'comment_body': ""Hey @Yashwants19, I'll just push a commit. Thanks a lot."", 'comment_created': datetime.datetime(2020, 5, 18, 2, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 426352713, 'comment_body': 'Hi @kartikdutt18 do we have to include all boost libraries here again after including `BOOST_LIBRARIES`?', 'comment_created': datetime.datetime(2020, 5, 18, 3, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 426352996, 'comment_body': ""Yes, that was needed. It doesn't work without them. I think we can remove BOOST_LIBRARIES."", 'comment_created': datetime.datetime(2020, 5, 18, 3, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 426359627, 'comment_body': 'We can clear the list of boost libraries [here](https://github.com/mlpack/models/blob/de580de972993e54f4ff6f7a195ce384f33f5eb7/CMakeLists.txt#L183). It can be handled by visual studio itself. ', 'comment_created': datetime.datetime(2020, 5, 18, 4, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 426598055, 'comment_body': 'Thanks a lot @zoq, @Yashwants19, The build works fine. To fix the architecture issue I passed Win64 flag and that fixed it. For the other error about mlpack was resolved by the above comments and the rest were related to installing some more boost libs.\r\n\r\nThanks a lot!\r\nRegards. ', 'comment_created': datetime.datetime(2020, 5, 18, 12, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 426598309, 'comment_body': 'Just cleaning commits now. Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 18, 12, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '1f78389b226246d1618cf272fc6ff3eff59bc223', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '404cc27d45b5735eeb2886fc21fb1580c4c4d9e1', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c6602359f8758e1588cee3d3d4c27eebb34370e', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f4e7ea5d20bd4472ee425a0cc5170bb21807398', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76cb3299f86b9a1fea0fb41d5883951cbd3a0097', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f973ce2e42cbf5265d4aaf5638170ef86abfc21e', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18c0428db5c6f3971e1f9002c809730af99b5bf5', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aec74928de95ff43649905c54f2ccec2d48397fb', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b5e0b0effd47a1e7405c7a8b81b31fbc3ca4896', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ecb724fc2a1a834ca513f854b82931d6d9ebf7d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f03a7894771cdb3e3e171c9da1537382e5c23f', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5849e122df78b497810e1f8145042e370f6c5cd', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57c0801ba4ac8a870bd7174790ef2105b83463e9', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590024525b37829e5f638cf288c498f9673eefc8', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa5cd8543dd0ea9e1663547285e8b85c8e230ef5', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e48fcfee607701725691a9d32cc30f48906a164', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c10fa9e2c45c91820e196cef12b702ee99ee7843', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00e12b1f19cca55fea1e674527de98c3313ab3a0', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '085089fb137bdf9f592867ffced85fc3010b6e92', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5d847041397bf3339f67b1b146e5de84cb56135', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f44a275d050bcb0bffd9df97a5de5b885513e5a4', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c42118d624a51c9e25efc131585b73849a49a8d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '355f4da5ff20cce530500e6d56cb4f52d6eec8f4', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '878e560047f32988f1c0c50b490828a8f10d24b4', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '718958e26a4bd1e2a91fa3f7af293545ce6f123c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a592bd098dbe37d11f66e22e87dcc4437f05103c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5be1eb8073433d78e1bc3c4908de3709679bbd56', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caee0ac6b1841ed3ec779dce8bc744315e05e4d9', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae5e07785c6a386dffd6645e3321ad4e6af9cd4', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db25ad715f40ea940c778b1f1ede6e780a8d998b', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0618c69e9e1d52b8f8e13fcee245fcf8eed9bd2b', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a03b73b89424a3f93eeea695c1a4b25ac3b2a95', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
421187094,Adding documentation for dataloader.,"I have updated readme a little bit to show use of data loaders and pre-processor functions. I have left utility functions out for now. Let me know if I should include them.
One other is I have copied the Contribution.md from mlpack repo.
I think it makes sense to have a wiki page for data loaders, utility functions and pre-processors. Kindly let me know if the wiki page idea makes sense. Thanks a lot.
Looking forward to your suggestions.
Regards.",True,9,https://api.github.com/repos/mlpack/models/pulls/9,https://github.com/mlpack/models/pull/9,closed,171,9,2,6,15,7,2,0,"[{'name': 'c: documentation'}, {'name': 't: added feature'}]",2020-05-21 07:01:52+00:00,2020-06-02 04:55:22+00:00,1029210.0,"11 days, 21:53:30","[{'comment_id': 429888153, 'comment_body': '```suggestion\r\nTo dowload any file from mlpack.org simple use the following command.\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 11, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 429888561, 'comment_body': 'Looks like we have to adjust the listing here.', 'comment_created': datetime.datetime(2020, 5, 25, 11, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 429908107, 'comment_body': ""Sure, I'll make the changes. Thanks a lot."", 'comment_created': datetime.datetime(2020, 5, 25, 12, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 433595739, 'comment_body': '+1\r\nDo you think we should do that now, or in another PR?', 'comment_created': datetime.datetime(2020, 6, 2, 3, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}, {'comment_id': 433596188, 'comment_body': ""I can do that now. I'll push a commit in couple of minutes."", 'comment_created': datetime.datetime(2020, 6, 2, 3, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 433596358, 'comment_body': 'I think the columns would be name, type and details. Does this make sense?', 'comment_created': datetime.datetime(2020, 6, 2, 3, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 433601495, 'comment_body': 'Done, You could take a look at the table [here](https://github.com/kartikdutt18/models/blob/Dataloader-documentation/README.md).', 'comment_created': datetime.datetime(2020, 6, 2, 3, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '6f99b15ee509058ef3ac7153b418aab060cc2a3e', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9da0d1eaf00964d61d333660c8214c0575cd6772', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a530587a742fa7323c1afb6a7272731ecf8cdd93', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f1100258c18ffbbbb4956a8f43b01c3cbf542d4', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4db1dbb81610391878d7087a96b8c37244b6e23', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed7bab9928b58e58c97bd2c6865a15d9d7fedcba', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
423008500,Restructuring 2 - Add Utility functions and Run all Tests,"This PR is transferred from #8, Since FFN weights some time cause invalid memory access which seems related to mlpack/mlpack#2314. So I am adding utility function to unzip files here and I'll continue working on image dataloader and then we can get back to the LeNet model.
I hope this makes sense.
This PR provides the following :
1. Unzip Utility Function.
2. Some bug fixes.
3. Runs all tests. 
(Probably we should get mnist_test/train in mnist.tar.gz since mnist test and train are fixed).
4. ListDir Utility function.

Looking forward to your suggestions.
Regards.

CC: @KimSangYeon-DGU",True,12,https://api.github.com/repos/mlpack/models/pulls/12,https://github.com/mlpack/models/pull/12,closed,289,47,10,6,10,31,1,0,[{'name': 't: added feature'}],2020-05-26 06:23:51+00:00,2020-06-02 02:06:38+00:00,589367.0,"6 days, 19:42:47","[{'comment_id': 432179109, 'comment_body': 'Should we keep this block commented-out?', 'comment_created': datetime.datetime(2020, 5, 28, 23, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432179846, 'comment_body': '```suggestion\r\n      mlpack::Log::Warn << ""The "" << path << "" doesn\'t exist."" << std::endl;\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 23, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432234973, 'comment_body': 'Once the mnist_train / test.csv is in mlpack.org/datasets we can uncomment this.', 'comment_created': datetime.datetime(2020, 5, 29, 3, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432235175, 'comment_body': ""Right, we fix it in the next commit after I rebase. We'll have a green build. Thanks a lot."", 'comment_created': datetime.datetime(2020, 5, 29, 3, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432917759, 'comment_body': 'We also need to add a comment for these checks', 'comment_created': datetime.datetime(2020, 5, 31, 7, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432917961, 'comment_body': ""Can you use 1 newline and add a comment about what we're checking in this block?\r\n\r\nAnd, perhaps, I missed something... can you let me know why the data were distributed like below?\r\n`Train : 8,400`\r\n`Valid: 33,600`\r\n`Test: 28,000`"", 'comment_created': datetime.datetime(2020, 5, 31, 7, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432918092, 'comment_body': 'Can you let me know the use case of this function?', 'comment_created': datetime.datetime(2020, 5, 31, 7, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432918230, 'comment_body': 'Will do in the next commit. Thanks.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 20, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432918455, 'comment_body': 'This fills the pathVector with paths of all files in the `path`. For example, if we have a folder called images with 30 files with names 1.jpeg, 2.jpeg and so on then pathVector will be equal to `{""1.jpeg"", ""2.jpeg"" ...}`. I use it to get all annotations and images in the folder for PASCAL VOC dataloader.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 24, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432918537, 'comment_body': 'Aha, thanks for letting me know! nice :)', 'comment_created': datetime.datetime(2020, 5, 31, 7, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432918697, 'comment_body': 'This is the same split as mlpack::data::split. Here 0.8 means 80% testing and 20 % training data. mlpack takes in test ratio. I though it would be best not to invert. Let me know if I should do that or keep it same as mlpack. Here is the link for data [file](https://github.com/mlpack/mlpack/blob/1e802b27b28e555f7a70ac450bf2cf3b63870b64/src/mlpack/core/data/split_data.hpp#L121).', 'comment_created': datetime.datetime(2020, 5, 31, 7, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432919791, 'comment_body': 'Ok, then, it would be better to change the parameter name `ratio` to `testRatio` for clarification in `DataLoader` class :)', 'comment_created': datetime.datetime(2020, 5, 31, 7, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432919871, 'comment_body': ""Sure, I'll make the change."", 'comment_created': datetime.datetime(2020, 5, 31, 7, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432920115, 'comment_body': 'Also, kindly update the parameter description as well in [here](https://github.com/kartikdutt18/models/blob/6ae432e2951f2a222fc37fe796b7131dea0e9da1/dataloader/dataloader.hpp#L66)', 'comment_created': datetime.datetime(2020, 5, 31, 7, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432920246, 'comment_body': 'Sure, will make the changes. Thanks a lot.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432920343, 'comment_body': 'It seems [this](https://github.com/kartikdutt18/models/blob/6ae432e2951f2a222fc37fe796b7131dea0e9da1/dataloader/dataloader.hpp#L109) also needs to be changed', 'comment_created': datetime.datetime(2020, 5, 31, 7, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432920435, 'comment_body': 'I think I can set it to 0.25 instead. I think that makes sense.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432920715, 'comment_body': 'Yes, but I think the `ratio` is a little vague, so it should be changed to `testRatio` and description is also needed to be clear to declare it is a ratio for test data.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432920882, 'comment_body': ""Ah, but it's not the work for this PR... sorry. I can do it if you want."", 'comment_created': datetime.datetime(2020, 5, 31, 7, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432920970, 'comment_body': 'I can make the change. I almost done with this commit.', 'comment_created': datetime.datetime(2020, 5, 31, 7, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432921184, 'comment_body': 'Done, the tests pass locally. The build should reciprocate the same. Opening the other PR now.', 'comment_created': datetime.datetime(2020, 5, 31, 8, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432921599, 'comment_body': 'I probably missed something, the mlpack::data::split already uses testRatio and I changed it here too. Kindly let me know if I missed something.', 'comment_created': datetime.datetime(2020, 5, 31, 8, 8, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432924904, 'comment_body': ""I requested the changes because I think the parameter name `ratio` in `DataLoader` is passed to `mlpack::data::Split()` that uses `testRatio`, so the name `ratio` in `DataLoader` is a little vague because it seems train-test split ratio, not test-train ratio. Please let me know if it doesn't make sense.\r\n\r\nAlso, I'm still trying to find why the data distribution ratio is.\r\n```\r\nTrain : 8,400 (12%)\r\nValid: 33,600 (48%)\r\nTest: 28,000 (40%)\r\n```\r\n\r\nThe total number of data is `70,000` and if we split the whole data with the test ratio `0.8`, the train-test ratio should be `0.2` and `0.8`. And the current `DataLoader` implementation splits the train data into train and valid data using the test ratio.\r\n\r\nSo, shouldn't the data distribution be like this?\r\n```\r\nTrain: 2,800 (4%)\r\nValid: 11,200 (16%)\r\nTest: 56,000 (80%)\r\n```\r\nAre the sources of train and test data different?\r\n"", 'comment_created': datetime.datetime(2020, 5, 31, 8, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432925105, 'comment_body': '```suggestion\r\n  BOOST_REQUIRE_EQUAL(std::get<1>(dataloader.ValidSet()).n_rows, 1);\r\n```', 'comment_created': datetime.datetime(2020, 5, 31, 8, 54, 52, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432925219, 'comment_body': ""> So, shouldn't the data ratio be like this? Are the sources of train and test data different?\r\n\r\nYes, the sources are different. The train and validation set from mnist_train.csv which contains 40k data points and test comes from mnist_test.csv which has 28k points."", 'comment_created': datetime.datetime(2020, 5, 31, 8, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432925346, 'comment_body': 'Often people use test and validation set interchangeably however they are not the same. Validation set comes from train test split where as test data is data on which we actually use the model we trained. Kindly let me know if this makes sense.  \r\nAlso I changed the the variable name ratio to test ratio in the dataloader everywhere (I think so).', 'comment_created': datetime.datetime(2020, 5, 31, 8, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432925574, 'comment_body': ""Ah, ok. I thought it's from the same file :) "", 'comment_created': datetime.datetime(2020, 5, 31, 9, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432925717, 'comment_body': 'Should I use validRatio instead I think that makes even more sense.', 'comment_created': datetime.datetime(2020, 5, 31, 9, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432925924, 'comment_body': 'Nice. that makes sense to me as well.', 'comment_created': datetime.datetime(2020, 5, 31, 9, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 432925990, 'comment_body': 'Right, making the changes.', 'comment_created': datetime.datetime(2020, 5, 31, 9, 5, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432926544, 'comment_body': 'Done. :)', 'comment_created': datetime.datetime(2020, 5, 31, 9, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': 'c4113eb9d8bf953a995c2f307455c396fce099a7', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78aa733bdbdf900d89af52954138f133b7c86ff9', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ae432e2951f2a222fc37fe796b7131dea0e9da1', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '040decbb33e819b52c6d05cfd0c787b48dbcb367', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb66ce85e4e843e17a301aa663fdf2007fc7f58f', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed7a643408a98bab9147686f2d08b1966fb9d3ea', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
428473299,Image Dataloader with Field type,"This is nearly the same PR as the other image dataloader. Difference is that I have used field vector inserting bounding boxes.
So in preprocessing of dataset for model we would have instant lookups.",True,18,https://api.github.com/repos/mlpack/models/pulls/18,https://github.com/mlpack/models/pull/18,closed,1262,21,14,4,9,79,1,0,[{'name': 't: added feature'}],2020-06-05 14:07:19+00:00,2020-06-11 22:17:08+00:00,547789.0,"6 days, 8:09:49","[{'comment_id': 435950102, 'comment_body': ""Hey @KimSangYeon-DGU, I have implemented the split for field type as well. It works if we isolate it from the rest of the dataloader. The issue is that with the dataloader it gives a compilation error i.e. if DatasetY = arma::mat then we are trying to insert vector instead of double. So I tried various combinations of enable_if to have two functions, One that would work for matrix type and other for field type. However I haven't yet been able to resolve the issue. The other PR works for matrix with data split and everything but I think field type is the way to go. Kindly let me know what you think and any suggestions to resolve the issue."", 'comment_created': datetime.datetime(2020, 6, 5, 14, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 435955059, 'comment_body': 'I think I figured something. Let me try it out.', 'comment_created': datetime.datetime(2020, 6, 5, 14, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 435967144, 'comment_body': ""This works mostly as work around, Let me know if this makes sense and I'll complete the rest. One more reason to use field is that in split function an image may end up in training and validation both and might have different bounding boxes. Here each image only has all its corresponding bounding boxes so it will either be in training or validation. And now we can support both mat type and field type."", 'comment_created': datetime.datetime(2020, 6, 5, 14, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436201619, 'comment_body': ""@kartikdutt18 Nice, let's work with this PR instead of #13 because this approach gives us more flexible way."", 'comment_created': datetime.datetime(2020, 6, 5, 23, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436201892, 'comment_body': 'For follow-up with @zoq [comment](https://github.com/mlpack/models/pull/13/#discussion_r436166401), can you remove this template parameter and instantiate it locally?', 'comment_created': datetime.datetime(2020, 6, 5, 23, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436202930, 'comment_body': '```suggestion\r\n    if (shuffle)\r\n      order = arma::shuffle(order);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436202982, 'comment_body': '```suggestion\r\n      for (size_t i = 0; i < trainSize; i++)\r\n        trainLabels(0, i) = std::move(labels[i]);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436203307, 'comment_body': '```suggestion\r\n      for (size_t i = trainSize; i < dataset.n_cols; i++)\r\n        validLabels(0, i - trainSize) = std::move(labels[i]);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436203399, 'comment_body': '```suggestion\r\n      if (augmentations.size() == 0)\r\n        augmentations.push_back(""resize = {64, 64}"");\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436204218, 'comment_body': ""Let's change the source to mlpack's one in the future :) "", 'comment_created': datetime.datetime(2020, 6, 5, 23, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436204668, 'comment_body': '```suggestion\r\n    arma::uvec order = arma::linspace<arma::uvec>(0, dataset.n_cols - 1,\r\n        dataset.n_cols);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436205242, 'comment_body': '```suggestion\r\n    arma::uvec order = arma::linspace<arma::uvec>(0, dataset.n_cols - 1,\r\n        dataset.n_cols);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436205269, 'comment_body': '```suggestion\r\n    if (shuffle)\r\n      order = arma::shuffle(order);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436205305, 'comment_body': '```suggestion\r\n      for (size_t i = 0; i < trainSize; i++)\r\n        trainLabels(0, i) = std::move(labels[i]);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436205352, 'comment_body': '```suggestion\r\n      for (size_t i = trainSize; i < dataset.n_cols; i++)\r\n        validLabels(0, i - trainSize) = std::move(labels[i]);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436205402, 'comment_body': '```suggestion\r\n      if (augmentations.size() == 0)\r\n        augmentations.push_back(""resize = {64, 64}"");\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436205773, 'comment_body': '```suggestion\r\n      if (zipFile)\r\n        Utils::ExtractFiles(downloadPath, pathForExtraction);\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436208437, 'comment_body': 'When `validRatio` is 1, there is a case that the `validSize` is the same as `dataset.n_cols`\r\n```suggestion\r\n    if (validSize <= dataset.n_cols)\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 23, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436233182, 'comment_body': ""Great, I'll add support for matrix type shortly."", 'comment_created': datetime.datetime(2020, 6, 6, 3, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436233367, 'comment_body': ""Makes sense. I'll add some boundary checks as well."", 'comment_created': datetime.datetime(2020, 6, 6, 3, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436288036, 'comment_body': ""Done, I'll make one more commit tonight or tomorrow morning and then it will be ready to go from my side too. Regards."", 'comment_created': datetime.datetime(2020, 6, 6, 17, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436335862, 'comment_body': 'This is ready to go from my side but the matrix type gives invalid read sometimes. I will try to figure out where I am making an invalid read.', 'comment_created': datetime.datetime(2020, 6, 7, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436338585, 'comment_body': ""Figured it out, there was a typo between width and height. Fixed now. This is ready for review. Kindly let me know what you think. I am starting with documentation along with this. I'll open another PR for it."", 'comment_created': datetime.datetime(2020, 6, 7, 8, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436389457, 'comment_body': 'could you remove the extra lines here', 'comment_created': datetime.datetime(2020, 6, 7, 18, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 436389680, 'comment_body': 'do you mean particular cell or image? ', 'comment_created': datetime.datetime(2020, 6, 7, 18, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 436390076, 'comment_body': 'Sure, removing now.', 'comment_created': datetime.datetime(2020, 6, 7, 18, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436390140, 'comment_body': 'I used cell here because some augmentation maybe be applied to csv like addition of Gaussian noise. Kindly let me know if I need to change it.', 'comment_created': datetime.datetime(2020, 6, 7, 18, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436497660, 'comment_body': 'By cell you mean pixel? I am not sure about the terminology here', 'comment_created': datetime.datetime(2020, 6, 8, 7, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 436498872, 'comment_body': 'I mean the whole image. Say, we have n images then we apply augmentation to augmentationProbability * n images. Let me change it to data point, does that make sense or any another word.', 'comment_created': datetime.datetime(2020, 6, 8, 7, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436881284, 'comment_body': 'For the clarification, how about this?\r\n```suggestion\r\n   * @param datapointDepth Depth of a single data point. For one 2-dimensional\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 17, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436881917, 'comment_body': '```suggestion\r\n   * @param datapointDepth Depth of a single data point. For one 2-dimensional\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 17, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436882254, 'comment_body': '```suggestion\r\n   * Function to determine if augmentation has Resize function.\r\n   *\r\n   * @param augmentation Optional argument to check if a string has\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 17, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436883216, 'comment_body': '```suggestion\r\n    // Use regex to find one or two numbers. If only one provided\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 17, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436891568, 'comment_body': 'It seems you forgot to uncomment them', 'comment_created': datetime.datetime(2020, 6, 8, 17, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436895946, 'comment_body': '```suggestion\r\n * Augmentation class used to perform augmentations by transforming the data.\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 18, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436896179, 'comment_body': '```suggestion\r\n  //! Locally held augmentations and transforms that need to be applied.\r\n```', 'comment_created': datetime.datetime(2020, 6, 8, 18, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436903785, 'comment_body': 'Can we use the path https://github.com/mlpack/mlpack/blob/master/src/mlpack/tests/data/test_image.png ?', 'comment_created': datetime.datetime(2020, 6, 8, 18, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436903946, 'comment_body': 'Ahh this was done to prevent unused parameter warning in compilers. ', 'comment_created': datetime.datetime(2020, 6, 8, 18, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436904229, 'comment_body': ""Sure, I'll make the change now."", 'comment_created': datetime.datetime(2020, 6, 8, 18, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436905160, 'comment_body': 'Yes, and the server name will be https://github.com/mlpack/mlpack.git', 'comment_created': datetime.datetime(2020, 6, 8, 18, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436913106, 'comment_body': 'For the curl type download, I am concatenating server name and url to download. Should I just take into input the whole URL and server to distinguish between asio download or curl download.', 'comment_created': datetime.datetime(2020, 6, 8, 18, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436916696, 'comment_body': 'Ahh, thanks for the clarification :)', 'comment_created': datetime.datetime(2020, 6, 8, 18, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436921459, 'comment_body': ""No, I think it's enough :)"", 'comment_created': datetime.datetime(2020, 6, 8, 18, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436935596, 'comment_body': 'IMO image would sound better. Because even if it is csv file the augmentation is still being applied to an image. ', 'comment_created': datetime.datetime(2020, 6, 8, 19, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 436936970, 'comment_body': ""Ok, the left work is to change this `serverName` to mlpack's one, right?\r\n\r\nDo you have a plan to add more in this PR? (if so, I think it's better to open another PR :D)"", 'comment_created': datetime.datetime(2020, 6, 8, 19, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 436944162, 'comment_body': 'Would the augmentation names be case sensitive? Do you think they could be case-insensitive?', 'comment_created': datetime.datetime(2020, 6, 8, 19, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 436945850, 'comment_body': 'Other than this, This is ready. I will ask rcurtin to upload the datasets and test sets once everything else is ready. ', 'comment_created': datetime.datetime(2020, 6, 8, 19, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436946109, 'comment_body': 'So I am guessing that there should only be 1 resize transform. Maybe we should throw an error if we find 2. ', 'comment_created': datetime.datetime(2020, 6, 8, 19, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 436946262, 'comment_body': ""Sure I can use the tolower util from mlpack. I'll add a commit for it in the morning. "", 'comment_created': datetime.datetime(2020, 6, 8, 19, 22, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 436947501, 'comment_body': 'Do you think it might be better to throw an error here instead since its a public function?', 'comment_created': datetime.datetime(2020, 6, 8, 19, 24, 18, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 436949429, 'comment_body': 'Let me know what you think', 'comment_created': datetime.datetime(2020, 6, 8, 19, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 437133919, 'comment_body': 'I changed it to allow multliple resize transforms. I hope this change makes sense.', 'comment_created': datetime.datetime(2020, 6, 9, 4, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 437136176, 'comment_body': ""I have added a warning that prints the following message : \r\n```\r\n[WARN ] Unknown augmentation : 'horizontal-flip' not found!\r\n```\r\nI hope this makes sense."", 'comment_created': datetime.datetime(2020, 6, 9, 4, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 437669651, 'comment_body': 'Do you use travis here or is that an old artefact?', 'comment_created': datetime.datetime(2020, 6, 9, 19, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 437670030, 'comment_body': '```suggestion\r\n    // Use regex to find one or two numbers. If only one provided\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 19, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 437670637, 'comment_body': 'I like the approach.', 'comment_created': datetime.datetime(2020, 6, 9, 19, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 437671196, 'comment_body': '```suggestion\r\n          dataset.n_cols - 1));\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 19, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 437671487, 'comment_body': '```suggestion\r\n   * Performs train/test split.\r\n```\r\n\r\nJust a suggestion.', 'comment_created': datetime.datetime(2020, 6, 9, 19, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 437671968, 'comment_body': 'Do you think we should print a warning here?', 'comment_created': datetime.datetime(2020, 6, 9, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 437792681, 'comment_body': 'It seems you missed this comment, can you check it?', 'comment_created': datetime.datetime(2020, 6, 10, 0, 21, 12, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 437832338, 'comment_body': 'Terribly sorry about that. Let me fix it in the next commit.', 'comment_created': datetime.datetime(2020, 6, 10, 2, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 437832440, 'comment_body': 'Done, in the last commit :)', 'comment_created': datetime.datetime(2020, 6, 10, 2, 57, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 437832726, 'comment_body': ""Yes, I think this is an old artefact. I'll remove it the next commit."", 'comment_created': datetime.datetime(2020, 6, 10, 2, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 437832856, 'comment_body': ""Agreed, I'll add a warning here. Thanks."", 'comment_created': datetime.datetime(2020, 6, 10, 2, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 437872271, 'comment_body': 'Thanks. :)', 'comment_created': datetime.datetime(2020, 6, 10, 5, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 437875131, 'comment_body': 'Done. Added a boundary check as well [here](https://github.com/mlpack/models/pull/18/files#diff-e334979f69acae3640bee0da79a64c3aR162). Sorry I missed it before. Thanks.', 'comment_created': datetime.datetime(2020, 6, 10, 5, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 438466223, 'comment_body': 'Did you have a chance to look at this?', 'comment_created': datetime.datetime(2020, 6, 10, 23, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 438468527, 'comment_body': ""Because some images have multiple objects in the dataset, let's use the term `images` instead of `objects`.\r\n```suggestion\r\n  // There is 1 image in the validation set.\r\n```"", 'comment_created': datetime.datetime(2020, 6, 10, 23, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 438468760, 'comment_body': '```suggestion\r\n  // There are 7 images in the validation set.\r\n```', 'comment_created': datetime.datetime(2020, 6, 10, 23, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 438470993, 'comment_body': '```suggestion\r\n  // There are 6 images in the training set.\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 0, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 438472106, 'comment_body': '```suggestion\r\n  // There are 6 images in the training set.\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 0, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 438472217, 'comment_body': '```suggestion\r\n  // There is 1 image in the validation set.\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 0, 6, 1, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 438472312, 'comment_body': '```suggestion\r\n  // There is 1 image in the validation set.\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 0, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 438476801, 'comment_body': 'It seems you missed this comment :D', 'comment_created': datetime.datetime(2020, 6, 11, 0, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 438528522, 'comment_body': ""I think this is ready then, I'll ping rcurtin on the IRC"", 'comment_created': datetime.datetime(2020, 6, 11, 3, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 438529254, 'comment_body': ""Hey @KimSangYeon-DGU, added the warning before this line that's why it didn't show up here. Here is the [link](https://github.com/mlpack/models/pull/18/files#diff-d47cdd2f19276dd4d53c5cf0f5c3833fR71)."", 'comment_created': datetime.datetime(2020, 6, 11, 3, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 438529612, 'comment_body': ""I'll increase the number in tests a bit so that we can also use them model testing."", 'comment_created': datetime.datetime(2020, 6, 11, 4, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 438558842, 'comment_body': 'I have made the change from my side. It will give a 404 right now but once datasets are up, it should work.', 'comment_created': datetime.datetime(2020, 6, 11, 5, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 438568284, 'comment_body': 'Thanks for letting me know!', 'comment_created': datetime.datetime(2020, 6, 11, 6, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}]","[{'commit_sha': '785905abc807a30f07917fbc16880ecea0d981ac', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b306aa1ae78d58a03a73510378dc08b52cab959', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a975740062e4f7521670d383494a31139b3341ca', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fc6e7b7d9681f5e86df6422cfe9ed6d6b6ec02c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
430778275,Image Dataloader Documentation,"Hey everyone, This is the documentation for image dataloader. I'll be updating the wiki in the forked repo shortly and will post the link here. Kindly let me know what you think. Till then, I'll get started with DarkNet 19. Thanks.",True,19,https://api.github.com/repos/mlpack/models/pulls/19,https://github.com/mlpack/models/pull/19,closed,44,9,1,5,5,0,1,0,[{'name': 'c: documentation'}],2020-06-08 05:59:12+00:00,2020-06-11 22:20:03+00:00,318051.0,"3 days, 16:20:51",[],"[{'commit_sha': '153117cb3ba5eacddf81dedf014a6c2d97f1c338', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f5d8c2f572a9d0a56d9a339fef8d1cc48bff302', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2f5afdd4ea28f0909bd1b99c7a9f326a6044e4a', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee409250d6a8107d650a12cbc101c5db806cdbef', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5bb0a7d334586fd683772567bd6842c0e7e770a', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
431303927,"Add DarkNet models, Ensmallen Callbacks and ChannelFirst Preprocessor.","Hey everyone,
This is is a WIP of DarkNet model for this repo.

TO DO:

- [x] Add Basic class definitions.

- [x] Add basic definition for tests.

- [x] Add Darknet 19 architecture.

- [x] Add Darknet 53 architecture.

- [ ] Add weights for CIFAR-10 for both models.
Add Transfer Learning Function in Each model.

Kindly let me know what you think.
Thanks a lot.",True,20,https://api.github.com/repos/mlpack/models/pulls/20,https://github.com/mlpack/models/pull/20,closed,845,9,15,35,111,122,1,0,[{'name': 't: added feature'}],2020-06-08 18:00:33+00:00,2020-08-12 12:32:03+00:00,5596290.0,"64 days, 18:31:30","[{'comment_id': 437673680, 'comment_body': 'Are we using travis?', 'comment_created': datetime.datetime(2020, 6, 9, 19, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 437833148, 'comment_body': ""I think that's an old artefact. Will fix it in the next commit."", 'comment_created': datetime.datetime(2020, 6, 10, 3, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 438857538, 'comment_body': 'So my approach would be to create the network layer by layer call the `Reset()` method and check the number of parameters `mode.Parameters().n_elem` just to check what the actual parameters are, maybe there is some uninitialized parameter which blows the model size.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 438861103, 'comment_body': 'Sure, makes sense. I will try it and get back to you. Thanks a lot.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 438871195, 'comment_body': 'So I think I figured out the issue a bit. This line [here](https://github.com/mlpack/models/pull/20/files#diff-ed328327354cde0c25612990454cf11dR134) is where the model blows out of proportion even if you add a single layer.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439072800, 'comment_body': 'Ahh, thanks for going through the process.', 'comment_created': datetime.datetime(2020, 6, 11, 21, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439714754, 'comment_body': '@KimSangYeon-DGU, is this not a valid operation? I create and memory to a pointer and return it.', 'comment_created': datetime.datetime(2020, 6, 13, 6, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439715026, 'comment_body': ""Since I didn't wan't to make changes in this branch I was using a different branch. I just pushed it [here](https://github.com/kartikdutt18/models/tree/BreakingDownDarknet)."", 'comment_created': datetime.datetime(2020, 6, 13, 6, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439715677, 'comment_body': 'It seems I successfully re-produced the issue. I\'ll look into it.\r\n<img width=""460"" alt=""image"" src=""https://user-images.githubusercontent.com/26578203/84562251-de0d2080-ad07-11ea-9507-79154548442f.png"">\r\n', 'comment_created': datetime.datetime(2020, 6, 13, 6, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 439715822, 'comment_body': 'Great, Thanks a lot.', 'comment_created': datetime.datetime(2020, 6, 13, 6, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439762976, 'comment_body': ""VGDB didn't get me anywhere, maybe instead of returning the pointer I should add it to the base model. Maybe that should work. I'll try that tomorrow morning. "", 'comment_created': datetime.datetime(2020, 6, 13, 19, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439769171, 'comment_body': ""> maybe instead of returning the pointer I should add it to the base model. \r\n\r\nYes, I think so. let's try do that."", 'comment_created': datetime.datetime(2020, 6, 13, 21, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 439800701, 'comment_body': '@KimSangYeon-DGU, To resolve the segmentation fault, I stopped returning the pointer and avoided copying FFN. However it gives me this error now,\r\n```\r\nAssertion failed: (false), function forced_return, file /usr/local/include/boost/variant/detail/forced_return.hpp, line 38.\r\n```\r\n', 'comment_created': datetime.datetime(2020, 6, 14, 7, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439814443, 'comment_body': 'Hmm, So the problem occurs in adding a pooling layers. If a make a model of DarknetBlocks and Convolutional blocks it works. Somehow pooling layers cause the error above.', 'comment_created': datetime.datetime(2020, 6, 14, 10, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439820762, 'comment_body': '@kartikdutt18 I was trying to this code, but it failed to build because of the `no matching function for call to \'mlpack::ann::Convolution<...`. It\'s already 4:40 AM to me, so I\'ll look into it further in the night\r\n\r\n```\r\nif (DarkNetVer == 19)\r\n  {\r\n    darkNet.Add<IdentityLayer<> >();\r\n\r\n    darkNet.Add<Convolution<> >(inputChannel, 32, 3, 3, 1, 1, 1, 1, 128, 128);\r\n    darkNet.Add<LeakyReLU<> >();\r\n\r\n    darkNet.Add<MaxPooling<> >(2, 2, 2, 2, true);\r\n\r\n    darkNet.Add<Convolution<> >(32, 64, 3, 3, 1, 1, 1, 1, 64, 64);\r\n    darkNet.Add<LeakyReLU<> >();\r\n\r\n    darkNet.Add<MaxPooling<> >(2, 2, 2, 2, true);\r\n\r\n    darkNet.Add<Convolution<> >(64, 128, 3, 3, 1, 1, 1, 1, 1, 32, 32);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(128, 64, 1, 1, 1, 1, 1, 1, 1, 32, 32);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(64, 128, 3, 3, 1, 1, 1, 1, 1, 32, 32);\r\n    darkNet.Add<LeakyReLU<> >();\r\n\r\n    darkNet.Add<MaxPooling<> >(2, 2, 2, 2, true);\r\n\r\n    darkNet.Add<Convolution<> >(128, 256, 3, 3, 1, 1, 1, 1, 1, 16, 16);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(256, 128, 1, 1, 1, 1, 1, 1, 1, 16, 16);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(128, 256, 3, 3, 1, 1, 1, 1, 1, 16, 16);\r\n    darkNet.Add<LeakyReLU<> >();\r\n\r\n    darkNet.Add<MaxPooling<> >(2, 2, 2, 2, true);\r\n\r\n    darkNet.Add<Convolution<> >(256, 512, 3, 3, 1, 1, 1, 1, 1, 8, 8);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(512, 256, 1, 1, 1, 1, 1, 1, 1, 8, 8);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(256, 512, 3, 3, 1, 1, 1, 1, 1, 8, 8);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(512, 256, 1, 1, 1, 1, 1, 1, 1, 8, 8);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(256, 512, 3, 3, 1, 1, 1, 1, 1, 8, 8);\r\n    darkNet.Add<LeakyReLU<> >();\r\n\r\n    darkNet.Add<MaxPooling<> >(2, 2, 2, 2, true);\r\n\r\n    darkNet.Add<Convolution<> >(512, 1024, 3, 3, 1, 1, 1, 1, 1, 4, 4);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(1024, 512, 1, 1, 1, 1, 1, 1, 1, 4, 4);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(512, 1024, 3, 3, 1, 1, 1, 1, 1, 4, 4);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(1024, 512, 1, 1, 1, 1, 1, 1, 1, 4, 4);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(512, 1024, 3, 3, 1, 1, 1, 1, 1, 4, 4);\r\n    darkNet.Add<LeakyReLU<> >();\r\n    darkNet.Add<Convolution<> >(1024, 1000, 1, 1, 1, 1, 1, 1, 1, 4, 4);\r\n    darkNet.Add<LeakyReLU<> >();\r\n\r\n    //darkNet.Add(PoolingBlock(inputWidth, inputHeight,\r\n    //    inputWidth, inputHeight, ""mean""));\r\n\r\n    if (includeTop)\r\n    {\r\n      darkNet.Add<Linear<> >(1000, numClasses);\r\n      darkNet.Add<LogSoftMax<> >();\r\n    }\r\n\r\n    darkNet.ResetParameters();\r\n  }\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 11, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 439820889, 'comment_body': ""Also, I found the initialization with template paramters `FFN<OutputLayerType, InitializationRuleType> darkNet;` doesn't work properly, so I manually set it like below for the debugging.\r\n```\r\nFFN<NegativeLogLikelihood<>, RandomInitialization> darkNet;\r\n```"", 'comment_created': datetime.datetime(2020, 6, 14, 11, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 439821035, 'comment_body': ""> Hmm, So the problem occurs in adding a pooling layers. If a make a model of DarknetBlocks and Convolutional blocks it works. Somehow pooling layers cause the error above.\r\n\r\nAhh, Ok, that's good finding!"", 'comment_created': datetime.datetime(2020, 6, 14, 11, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 439823128, 'comment_body': 'I think you are on Linux machine, So in Linux machine the compiler gets confused between Add layer and Add function. So something this like would work : \r\n```\r\nif (DarkNetVer == 19)\r\n  {\r\n    darkNet.Add(new IdentityLayer<>());\r\n\r\n    darkNet.Add(new Convolution<>(inputChannel, 32, 3, 3, 1, 1, 1, 1, 128, 128));\r\n    darkNet.Add(new LeakyReLU<>());\r\n\r\n    darkNet.Add(new MaxPooling<>(2, 2, 2, 2, true));\r\n```', 'comment_created': datetime.datetime(2020, 6, 14, 12, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439823334, 'comment_body': ""> Also, I found the initialization with template paramters FFN<OutputLayerType, InitializationRuleType> darkNet; doesn't work properly, so I manually set it like below for the debugging.\r\n\r\nThat's strange. Right now I just compiled mlpack and added input variable (width / height) in constructor, incase the issue was with some visitor but even then the code fails with the same error."", 'comment_created': datetime.datetime(2020, 6, 14, 12, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439951400, 'comment_body': ""I think I got the model working on rough implementation, I'll just clean it up and start training."", 'comment_created': datetime.datetime(2020, 6, 15, 6, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439954697, 'comment_body': 'On 128 x128, These are the results of 3 epochs. A smaller size like 56 or something would give better results.\r\n```\r\n5.08502e+9================================================================================================] 100% - ETA: 0s - loss: 4.89669e+9\r\n26/26 [====================================================================================================] 100% - 49s 6529ms/step - loss: 5.08502e+9\r\nEpoch 2/3\r\n1.65297e+9================================================================================================] 100% - ETA: 0s - loss: 1.59175e+9\r\n26/26 [====================================================================================================] 100% - 52s 6636ms/step - loss: 1.65297e+9\r\nEpoch 3/3\r\n6.2459e+8=================================================================================================] 100% - ETA: 0s - loss: 6.01457e+8\r\n26/26 [====================================================================================================] 100% - 50s 6563ms/step - loss: 6.2459e+8\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 6, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439954806, 'comment_body': 'Will clean up, push a commit and start training.', 'comment_created': datetime.datetime(2020, 6, 15, 6, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439991844, 'comment_body': ""So we can't use 32 x 32 image,\r\n```\r\nConv Layer.  (32, 32, 3) ----> (32, 32, 32)\r\nConv Layer.  (16, 16, 32) ----> (16, 16, 64)\r\nConv Layer.  (8, 8, 64) ----> (8, 8, 128)\r\nConv Layer.  (8, 8, 128) ----> (8, 8, 64)\r\nConv Layer.  (8, 8, 64) ----> (8, 8, 128)\r\nConv Layer.  (2, 2, 128) ----> (2, 2, 256)\r\nConv Layer.  (2, 2, 256) ----> (2, 2, 128)\r\nConv Layer.  (2, 2, 128) ----> (2, 2, 256)\r\nConv Layer.  (1, 1, 256) ----> (1, 1, 512)\r\nConv Layer.  (1, 1, 512) ----> (1, 1, 256)\r\nConv Layer.  (1, 1, 256) ----> (1, 1, 512)\r\nConv Layer.  (1, 1, 512) ----> (1, 1, 256)\r\nConv Layer.  (1, 1, 256) ----> (1, 1, 512)\r\nConv Layer.  (0, 0, 512) ----> (0, 0, 1024)\r\nConv Layer.  (0, 0, 1024) ----> (0, 0, 512)\r\nConv Layer.  (0, 0, 512) ----> (0, 0, 1024)\r\nConv Layer.  (0, 0, 1024) ----> (0, 0, 512)\r\nConv Layer.  (0, 0, 512) ----> (0, 0, 1024)\r\nConv Layer.  (0, 0, 1024) ----> (0, 0, 1000)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 15, 7, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440003374, 'comment_body': 'Hmm, can you try to use padding? Not sure if this is a good solution though', 'comment_created': datetime.datetime(2020, 6, 15, 8, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 440005458, 'comment_body': ""Agreed, I can try using valid padding type in pooling layers. Let me use that. I also tried 48x48 and 56x56 they also didn't work."", 'comment_created': datetime.datetime(2020, 6, 15, 8, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440044019, 'comment_body': 'So I used adaptive pooling instread and set input dim => ceil(input dim / 2) instead which makes it work for 32 x 32.\r\n```\r\nConv Layer.  (32, 32, 3) ----> (32, 32, 32)\r\nPooling Layer.  (32, 32) ----> (16, 16)\r\nConv Layer.  (16, 16, 32) ----> (16, 16, 64)\r\nPooling Layer.  (16, 16) ----> (8, 8)\r\nConv Layer.  (8, 8, 64) ----> (8, 8, 128)\r\nConv Layer.  (8, 8, 128) ----> (8, 8, 64)\r\nConv Layer.  (8, 8, 64) ----> (8, 8, 128)\r\nPooling Layer.  (8, 8) ----> (4, 4)\r\nConv Layer.  (4, 4, 128) ----> (4, 4, 256)\r\nConv Layer.  (4, 4, 256) ----> (4, 4, 128)\r\nConv Layer.  (4, 4, 128) ----> (4, 4, 256)\r\nPooling Layer.  (4, 4) ----> (2, 2)\r\nConv Layer.  (2, 2, 256) ----> (2, 2, 512)\r\nConv Layer.  (2, 2, 512) ----> (2, 2, 256)\r\nConv Layer.  (2, 2, 256) ----> (2, 2, 512)\r\nConv Layer.  (2, 2, 512) ----> (2, 2, 256)\r\nConv Layer.  (2, 2, 256) ----> (2, 2, 512)\r\nPooling Layer.  (2, 2) ----> (1, 1)\r\nConv Layer.  (1, 1, 512) ----> (1, 1, 1024)\r\nConv Layer.  (1, 1, 1024) ----> (1, 1, 512)\r\nConv Layer.  (1, 1, 512) ----> (1, 1, 1024)\r\nConv Layer.  (1, 1, 1024) ----> (1, 1, 512)\r\nConv Layer.  (1, 1, 512) ----> (1, 1, 1024)\r\nConv Layer.  (1, 1, 1024) ----> (1, 1, 1000)\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 9, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440053496, 'comment_body': 'These results are on subset (1k images -> 32 x 32), Kindly let me know what you think,\r\n```\r\nEpoch 1/3\r\n2.28237====================================================================================================] 100% - ETA: 0s - loss: 2.19784\r\n26/26 [====================================================================================================] 100% - 31s 5844ms/step - loss: 2.28237\r\nEpoch 2/3\r\n2.23357====================================================================================================] 100% - ETA: 0s - loss: 2.15084\r\n26/26 [====================================================================================================] 100% - 30s 5795ms/step - loss: 2.23357\r\nEpoch 3/3\r\n2.18636====================================================================================================] 100% - ETA: 0s - loss: 2.10539\r\n26/26 [====================================================================================================] 100% - 30s 5773ms/step - loss: 2.18636\r\n```\r\nI also switched to He Initialization from Random.', 'comment_created': datetime.datetime(2020, 6, 15, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440074015, 'comment_body': 'The loss is decreasing which is always good :) Can you also report the classification accuracy? ', 'comment_created': datetime.datetime(2020, 6, 15, 10, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 440079041, 'comment_body': ""Sure, I'll write a custom callback for it."", 'comment_created': datetime.datetime(2020, 6, 15, 10, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440645468, 'comment_body': 'I have implemented the callback, The output looks something like this, (3.14 is just a dummy value). Pushing a commit for it.\r\n```\r\nEpoch 1/3\r\n2.28237====================================================================================================] 100% - ETA: 0s - loss: 2.19784\r\n26/26 [====================================================================================================] 100% - 31s 5812ms/step - loss: 2.28237\r\ntrain accuracy : 3.140000\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 7, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440646030, 'comment_body': 'Kindly let me know if this would be a good addition to ensmallen as well? I can open a PR for it there.', 'comment_created': datetime.datetime(2020, 6, 16, 7, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440646404, 'comment_body': ""I don't think we can access training data, right?"", 'comment_created': datetime.datetime(2020, 6, 16, 7, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440694256, 'comment_body': ""I totally agree to check the progress of the training by printing the classification accuracy against the validation dataset, but we should consider whether this feature is vital or not at this juncture, because we're on the beginning of the summer and there might be critical blockers that take a long time and we didn't expect in the middle of working.\r\n\r\nAt this point, I think checking the accuracy against the test dataset using the trained model is enough.\r\n\r\nIMO, for the time being, we can open a PR about that, and then we can work this later after finishing other works scheduled."", 'comment_created': datetime.datetime(2020, 6, 16, 8, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 440701306, 'comment_body': ""> IMO, for the time being, we can open a PR about that, and then we can work this later after finishing other works scheduled.\r\n\r\nMakes sense. So I'll keep it as ensmallen_utils.hpp for now and open a PR in ensmallen that can be completed when other tasks are completed."", 'comment_created': datetime.datetime(2020, 6, 16, 9, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440701451, 'comment_body': ""And, at this point, I think it's very nice to figure out why `MaxPooling` and `MeanPooling` don't work in this architecture, but `AdaptiveMaxPooling` and `AdaptiveMeanPooling` work."", 'comment_created': datetime.datetime(2020, 6, 16, 9, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 440705673, 'comment_body': '> IMO, for the time being, we can open a PR about that, and then we can work this later after finishing other works scheduled.\r\n\r\nAhh, sorry @kartikdutt18 I wanted to mean an issue, not PR.', 'comment_created': datetime.datetime(2020, 6, 16, 9, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 440706095, 'comment_body': 'I got MaxPooling and MeanPooling to work as well but for 32 x 32 they go to 0 x 0 so I used adaptive pooling to maintain a size of atleast 1.', 'comment_created': datetime.datetime(2020, 6, 16, 9, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440707778, 'comment_body': ""Ok, thanks for correcting me. Can you open a issue about the ensmallen's callback? I think we don't need to open a PR at this time to make a space other contributors can take"", 'comment_created': datetime.datetime(2020, 6, 16, 9, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 440708427, 'comment_body': 'Sure, I can open an issue.', 'comment_created': datetime.datetime(2020, 6, 16, 9, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440729110, 'comment_body': 'Opened mlpack/ensmallen#200', 'comment_created': datetime.datetime(2020, 6, 16, 9, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440738001, 'comment_body': 'Yes, I guess it makes sense to pass the features through the constructor.', 'comment_created': datetime.datetime(2020, 6, 16, 10, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 440743656, 'comment_body': 'Initial result on subset.\r\n```\r\nEpoch 1/3\r\n2.28237====================================================================================================] 100% - ETA: 0s - loss: 2.19784\r\n[====================================================================================================] 100% - 36s 6013ms/step - loss: 2.28237\r\nTrain accuracy : 30.769231\r\n```\r\nI guess I can start training on whole dataset now. Should also print validation accuracy.', 'comment_created': datetime.datetime(2020, 6, 16, 10, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440745652, 'comment_body': 'https://github.com/mlpack/ensmallen/issues/200\r\nI am going to resolve this for now. ', 'comment_created': datetime.datetime(2020, 6, 16, 10, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 440746963, 'comment_body': 'Alright great! 👍  How long is the training going to take? I thought it would be quite slow since the model is quite big. ', 'comment_created': datetime.datetime(2020, 6, 16, 10, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 440757735, 'comment_body': 'It takes about 10 minutes to load the dataset. Once 2 - 3 epochs complete, I will post the results and a rough idea about training time. I will just remove all redundant files from my system first.', 'comment_created': datetime.datetime(2020, 6, 16, 10, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440757927, 'comment_body': 'Great.', 'comment_created': datetime.datetime(2020, 6, 16, 10, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440788467, 'comment_body': 'alright sure. Sounds good.', 'comment_created': datetime.datetime(2020, 6, 16, 11, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 440805890, 'comment_body': 'Started training, will post the results soon.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440856928, 'comment_body': ""It's been roughly an hour now since model started training. An it is still at the first epoch.\r\n```\r\n68/998 [======>.............................................................................................] 6% - ETA: 48s - loss: 2.15807\r\n```"", 'comment_created': datetime.datetime(2020, 6, 16, 13, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 440997551, 'comment_body': 'why is the ETA so off?', 'comment_created': datetime.datetime(2020, 6, 16, 16, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 441005638, 'comment_body': ""I'm not sure, that is the ETA for the iteration or the epoch?\r\nI think it is for a single iteration. And I'm dumping the output in text file."", 'comment_created': datetime.datetime(2020, 6, 16, 17, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441018720, 'comment_body': 'alright makes sense', 'comment_created': datetime.datetime(2020, 6, 16, 17, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 441020047, 'comment_body': ""Great, I'll let it train the whole night. I'll also plot a graph for the results tomorrow."", 'comment_created': datetime.datetime(2020, 6, 16, 17, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441391902, 'comment_body': 'I think the model is overfitting : \r\nTrain accuracy : 75.88\r\nOne epoch took nearly 12 epochs or more. Should I train on the subset first?', 'comment_created': datetime.datetime(2020, 6, 17, 8, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441467990, 'comment_body': 'If the model is overfitting then the train accuracy should have been higher right?\r\n\r\nI like the idea of training on a subset first because the training time seems very high and it would not be reasonable to do trial and error with such a long waiting time. \r\n\r\nAlso, I think we could try training for one more epoch to see if there is any improvement in the results. Let me know what you think. ', 'comment_created': datetime.datetime(2020, 6, 17, 11, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 441470753, 'comment_body': ""> If the model is overfitting then the train accuracy should have been higher right?\r\n\r\nI think that model overfit because even simple models like LeNet on MNIST also don't reach 75% accuracy.\r\n\r\nSure, I have added a periodic save so that we at least have weights after each epoch. So I have set the epochs = 5 for now, earlier I had set them equal to 10 and we wouldn't have gotten any weights until it finished training. Will keep posting results here."", 'comment_created': datetime.datetime(2020, 6, 17, 11, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441472328, 'comment_body': 'Also added validation accuracy after each epoch so we will know if the model overfits, if the difference is too large to ignore.', 'comment_created': datetime.datetime(2020, 6, 17, 11, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441740533, 'comment_body': 'Great! thanks for the update. I also agree with the idea of training on the subset.', 'comment_created': datetime.datetime(2020, 6, 17, 18, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 441741569, 'comment_body': 'Great, The current size is 100 images per class so 1000 images. Should I go for 10k or 15k?\r\nKindly let me know what training size makes sense.', 'comment_created': datetime.datetime(2020, 6, 17, 18, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441749969, 'comment_body': ""You'll increase the size of images per class to make the entire training size 10k or 15k, right? Then, let's go for 15k :)"", 'comment_created': datetime.datetime(2020, 6, 17, 18, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 441750631, 'comment_body': 'Great, So should I stop the current training on whole dataset?', 'comment_created': datetime.datetime(2020, 6, 17, 18, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441750792, 'comment_body': 'And I have a question. How will you make the subset?', 'comment_created': datetime.datetime(2020, 6, 17, 18, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 441751599, 'comment_body': ""I'll select the first 1500 images (in sorted form) from training set of cifar10 training set for each class. I can do random as well."", 'comment_created': datetime.datetime(2020, 6, 17, 18, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441775757, 'comment_body': ""BTW, is it possible to increase the size of the training dataset? To prevent the model from overfitting, it's better to train the model with images as many as possible.\r\n\r\nIf possible, let's use all the 50,000 training images. "", 'comment_created': datetime.datetime(2020, 6, 17, 19, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 441776884, 'comment_body': '> Great, The current size is 100 images per class so 1000 images. Should I go for 10k or 15k?\r\n\r\nIt seems you already made a subset from the 50,000 training dataset :) ', 'comment_created': datetime.datetime(2020, 6, 17, 19, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 441778183, 'comment_body': 'With 40k images for training it takes more than 12 hours for a single epoch. I can let it train on any number between 10k and 40k. What do you suggest. ', 'comment_created': datetime.datetime(2020, 6, 17, 19, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441778902, 'comment_body': 'This 100 images per class or 1k subset was just to test callbacks and model. ', 'comment_created': datetime.datetime(2020, 6, 17, 19, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441780455, 'comment_body': ""> > Great, The current size is 100 images per class so 1000 images. Should I go for 10k or 15k?\r\n> \r\n> It seems you already made a subset from the 50,000 training dataset :)\r\n\r\nYup that's what I was thinking. \r\nWhat was the final train accuracy you got? @kartikdutt18 (on the 40k train set)"", 'comment_created': datetime.datetime(2020, 6, 17, 19, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 441782012, 'comment_body': '> This 100 images per class or 1k subset was just to test callbacks and model.\r\n\r\nSo, when you trained the model with 75.88 accuracy, how many training and testing dataset did you use?\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 17, 19, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 441783755, 'comment_body': ""Its still training on 40k images. I had to add periodic save so I had to restart training otherwise we wouldn't have gotten any weights for the next 10 days as well valid accuracy. Its half way through the first epoch. We should have training accuracy for 2 epochs by tomorrow afternoon."", 'comment_created': datetime.datetime(2020, 6, 17, 19, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441784870, 'comment_body': 'For actual training that got 75% after first epoch, I used the orignal dataset with 80% training data(40k) and 20% valid data(10k).', 'comment_created': datetime.datetime(2020, 6, 17, 19, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441786217, 'comment_body': '@saksham189 @kartikdutt18 How about train with 10k images, not 40k? 40k takes so long time... ', 'comment_created': datetime.datetime(2020, 6, 17, 19, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 441787433, 'comment_body': 'Makes sense. That way we could have multiple epochs in a day. ', 'comment_created': datetime.datetime(2020, 6, 17, 19, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441789011, 'comment_body': ""> Makes sense. That way we could have multiple epochs in a day.\r\n\r\nLet's give it a try :)"", 'comment_created': datetime.datetime(2020, 6, 17, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 441790786, 'comment_body': 'Sure I will make the changes, fist thing in the morning. ', 'comment_created': datetime.datetime(2020, 6, 17, 19, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441823875, 'comment_body': '```suggestion\r\n * Definition of ensmallen Utility functions.\r\n```\r\n\r\nPedantic style issue.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441824529, 'comment_body': 'I see this is going to be used by a bunch of other models as well, so it might be nice to comment on each parameter.', 'comment_created': datetime.datetime(2020, 6, 17, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441831610, 'comment_body': 'I like this one, really useful.', 'comment_created': datetime.datetime(2020, 6, 17, 21, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441832175, 'comment_body': 'Do you think we should use `mlpack::Log` here instead?', 'comment_created': datetime.datetime(2020, 6, 17, 21, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441833452, 'comment_body': 'Hm, I would probably remove that line here, just to be consistent with the rest of the codebase.', 'comment_created': datetime.datetime(2020, 6, 17, 21, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441834287, 'comment_body': 'See comment above.', 'comment_created': datetime.datetime(2020, 6, 17, 21, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441835651, 'comment_body': 'Do you think we can use `DarkNetVersion` here just to make it super clear?', 'comment_created': datetime.datetime(2020, 6, 17, 21, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 441984856, 'comment_body': 'I think it will be even faster now, looks like OpenMP wasn\'t being linked correctly in cmake. Also created the subset.\r\nFixed using:\r\n```\r\nif (USE_OPENMP AND OPENMP_FOUND AND CMAKE_CXX_COMPILER_ID MATCHES ""AppleClang"")\r\n  if (CMAKE_CXX_COMPILER_VERSION VERSION_EQUAL ""7.0"" OR\r\n          CMAKE_CXX_COMPILER_VERSION VERSION_GREATER ""7.0"")\r\n        target_link_libraries(${name} ${OpenMP_libomp_LIBRARY})\r\n      endif()\r\n  endif()\r\n```', 'comment_created': datetime.datetime(2020, 6, 18, 5, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441985283, 'comment_body': ""I'll add it in the next commit. Thanks."", 'comment_created': datetime.datetime(2020, 6, 18, 5, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441985317, 'comment_body': ':)', 'comment_created': datetime.datetime(2020, 6, 18, 5, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441985371, 'comment_body': ""Sure, I'll make the changes."", 'comment_created': datetime.datetime(2020, 6, 18, 5, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441985432, 'comment_body': 'Agreed.', 'comment_created': datetime.datetime(2020, 6, 18, 5, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 441985564, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2020, 6, 18, 5, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 443506034, 'comment_body': 'I can\'t simply do t->Parameter() or t.Parameter() here since not all layer have that function but Convolutional layers do. We would have to check if a layer has that function or not first. Interestingly this could be used as model summary function. Currently it outputs ""unsupported"" layer name.', 'comment_created': datetime.datetime(2020, 6, 22, 11, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 443657044, 'comment_body': 'Right, `enable_if` should be helpful here.', 'comment_created': datetime.datetime(2020, 6, 22, 15, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 443675829, 'comment_body': 'Agreed, will try it out.', 'comment_created': datetime.datetime(2020, 6, 22, 16, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 444022949, 'comment_body': 'I am able to load the weights from a csv into the FFN class. Here the [link](https://github.com/kartikdutt18/PyTorch-mlpack-DarkNet-Weight-Converter/blob/master/darknet.ipynb) to how the csv was generated. So I this is what we can do :\r\n1. Create csv files for all layers that have weights.\r\n2. Create a map with all layers and corresponding csv file path. Calculating offset and transferring weights to the FFN weights as shown above. \r\nI think this could work. To test it I guess I would have to download the imagenet dataset and run validation on it.\r\nKindly let me know what you think.\r\nCC : @KimSangYeon-DGU, @saksham189, @zoq ', 'comment_created': datetime.datetime(2020, 6, 23, 7, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 444024074, 'comment_body': 'Then, I think we can avoid training models and simply transfer pytorch weights into mlpack and store them as ready to use binaries.', 'comment_created': datetime.datetime(2020, 6, 23, 7, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 444032646, 'comment_body': ""Great, let's check the validation accuracy using the mlpack's Darknet-19 model :)\r\nI think we can check the validation using [imagenette](https://github.com/fastai/imagenette) dataset that is a subset of imagenet"", 'comment_created': datetime.datetime(2020, 6, 23, 7, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 444034231, 'comment_body': ""Awesome, So I'll create a WeightConverter class to iterate over layers rather than manually adding weights. And we can test it out. I also found weights for DarkNet53. "", 'comment_created': datetime.datetime(2020, 6, 23, 7, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 444043442, 'comment_body': '@kartikdutt18 Ahh, but the `imagenette` has only 10 classes, so I think we need to check the validation with `imagenet` dataset :D', 'comment_created': datetime.datetime(2020, 6, 23, 8, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 444044757, 'comment_body': ""Since we are only generating prediction, I don't think that should be an issue but I can do imagenet as well. Kindly let me know what you think."", 'comment_created': datetime.datetime(2020, 6, 23, 8, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 444046083, 'comment_body': 'About the validation set, there is a reference at [this](https://pjreddie.com/darknet/imagenet/) on the `Validating On ImageNet` part.', 'comment_created': datetime.datetime(2020, 6, 23, 8, 18, 56, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 444046741, 'comment_body': ""> Since we are only generating prediction, I don't think that should be an issue but I can do imagenet as well. Kindly let me know what you think.\r\n\r\nAhh, makes sense :) 👍 "", 'comment_created': datetime.datetime(2020, 6, 23, 8, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 467701174, 'comment_body': 'Would it be a good to change `mnist` to `imagenet` now? and are there additional tests you want to add for DarkNet models? ', 'comment_created': datetime.datetime(2020, 8, 10, 6, 2, 52, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 467870848, 'comment_body': ""Sure, I have updated the tests but they aren't being run now. I have opened a PR with correct preprocessing required to convert mlpack loaded image equivalent to PyTorch's ToTensor(). We can use that to preprocess the data and use the saved model for prediction."", 'comment_created': datetime.datetime(2020, 8, 10, 12, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 468309591, 'comment_body': 'Can you add that to this PR only and run the tests to make sure everything is working as intended?', 'comment_created': datetime.datetime(2020, 8, 11, 3, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 468309793, 'comment_body': 'Yeah, already on it.', 'comment_created': datetime.datetime(2020, 8, 11, 3, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 468581974, 'comment_body': ""I have added a simple tests as well as the imagenet preprocessor in this PR. I haven't added tests for weights because of mlpack/mlpack#2561. I think we can merge this PR since the model is working and any changes would be internal implementation in mlpack. To see if the model is working correctly you can run the following commands : \r\n```\r\ngit clone https://github.com/kartikdutt18/mlpack-PyTorch-Weight-Translator.git\r\ncd mlpack-PyTorch-Weight-Translator\r\n./run.sh\r\n```\r\nWith this you will see the model weights being created and transferred into the Darknet model and being used for prediction. You can see that the final accuracy of `0.7236842105` (divided by 100). Kindly let me know if you face any issues. If this makes sense, I think we can merge this PR and then later add a PR with tests for weights once mlpack/mlpack#2561 is resolved."", 'comment_created': datetime.datetime(2020, 8, 11, 13, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 468809496, 'comment_body': 'alright I will do a review. In the meantime can you work on finishing the YOLO PR ? ', 'comment_created': datetime.datetime(2020, 8, 11, 19, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 468829695, 'comment_body': ""Looks good, but let's follow the existing codebase `4 spaces for new line`\r\n```suggestion\r\n   * @param modelPrefix Weights will be stored as\r\n   *     modelPrefix_epoch_loss.bin.\r\n```"", 'comment_created': datetime.datetime(2020, 8, 11, 19, 57, 39, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468829817, 'comment_body': 'Likewise\r\n```suggestion\r\n   * @param silent Boolean to determine whether or not to print saving\r\n   *     of model.\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 19, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468830512, 'comment_body': 'Picky comment \r\n```suggestion\r\n * Definition of a DarkNet CNN.\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 19, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468830770, 'comment_body': 'AFAIK, 4 spaces for new line\r\n```suggestion\r\n   * @param numClasses Optional number of classes to classify images into,\r\n   *     only to be specified if includeTop is  true.\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 19, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468831607, 'comment_body': 'Should we change it to `none` or `imagenet`?', 'comment_created': datetime.datetime(2020, 8, 11, 20, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468832033, 'comment_body': '```suggestion\r\n   * @param type One of ""max"" or ""mean"". Determines whether add mean pooling\r\n   *     layer or max pooling layer.\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468832951, 'comment_body': '```suggestion\r\n   * @param inputShape A three-valued tuple indicating input shape.\r\n   *     First value is number of Channels ...\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468833244, 'comment_body': '```suggestion\r\n   * @param numClasses Optional number of classes to classify images into,\r\n   *     only to be specified if includeTop is  true.\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468834120, 'comment_body': '```suggestion\r\n      darkNet.Add(new Convolution<>(1024, numClasses, 1, 1,\r\n          1, 1, 0, 0, inputWidth, inputHeight));\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468834287, 'comment_body': '```suggestion\r\n      for (size_t i = 0; i < blockCount; i++)\r\n        DarkNet53ResidualBlock(curChannels);\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468834737, 'comment_body': '```suggestion\r\n    if (batchNorm)\r\n      bottleNeck->Add(new BatchNorm<>(outSize, 1e-5, false));\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468834902, 'comment_body': '```suggestion\r\n    if (baseLayer != NULL)\r\n      baseLayer->Add(bottleNeck);\r\n    else\r\n      darkNet.Add(bottleNeck);\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468835294, 'comment_body': ""I think it shouldn't be capitalized\r\n```suggestion\r\n   *                   First value is number of channels (Channels-First).\r\n```"", 'comment_created': datetime.datetime(2020, 8, 11, 20, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468836398, 'comment_body': '```suggestion\r\n      if (!silent)\r\n        output << ""Model saved as "" << modelName << std::endl;\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468837018, 'comment_body': '```suggestion\r\n      for (size_t i = 0; i < trainFeatures.n_elem; i++)\r\n          trainFeatures(i) = ((uint8_t)(trainFeatures(i)) / 255.0);\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 20, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 468990398, 'comment_body': ""Sure. I'll work on it."", 'comment_created': datetime.datetime(2020, 8, 12, 3, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 469181039, 'comment_body': 'Thanks for the review, I think I have all of them.', 'comment_created': datetime.datetime(2020, 8, 12, 11, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '314448a32833a1e1226b40ab81b07dbf44b8c55c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5adb851bc2704b7c38c1937555c08389db97335', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e196d89aaf9842e5e5ee548cb05be1d77598d02', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50966bc326e7140686a4565b168f016bcd05a74', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b444b52a2d675d088c9b16eac4464b3946fd2af', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77ee0bf6e444ac4dc2728fc3d03c54165bfa940b', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '038a2fb63e781977d77d8aabbe4fd1681ec3427d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ff86eeaaeae5d1c9b826dbfddc8e77def4abb3a', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bca33e48e77a9e4850f67f565b3ecf92d569ad68', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a61cf5ebb092076cd1fa86e95a1c70fe0926735a', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21f5c472108a26736881657ec19eabb41885b6c2', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ff1f1738ceff121beff3e83aea28f78beff017d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccb359caae1dbc03e238be259c6cd3032e8c950', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf2abd92c327b51b082672649afbba6a399b7ed9', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6010bbe58595cb014af340f97e45d5e7d5929fe0', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa58f33ebac8257032736653b766c72a7e10dc14', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b99b330ee3472dded7d7645c73d6375e4935917', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '761edd9216d9158de2a03ba788d02e7f42f0b0dd', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac81ca1e5847afa8b85951a7fbba6d98040ce201', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '949d512056478c88c8436c4c3a56010a37790e8e', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fb83fda6474d6de916ca436d4892977a764324', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27670c0b8d3cf288748c925e883eead02e950fed', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef422f1afff1a8d8776ec0fed3754621a16a76ef', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb2435231a457d946a89d11c10ca10d92623945', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aba774c1afd40f2e5a5fe22a5fbd61dbdd08923', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14abd611e667ab489d1050976df4d34680c98001', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca5573c816e5fc60e2a41b51af416a0fc674454', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaf6890447740370704850ddcfffc39187481a8', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1aae1697ab61a11b7f0493e1e8351573583ac99', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83c885520b1da64d7d29d123703b1474e8f07dc3', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0220e38f039a9bc9e325601721bbc029adf02600', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07d6040ab340804542ccfe078d76bcb695ad5103', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '025db538d9aa985060137b8e1085a842ec04a6d2', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68780d0fea8dac1d6010cbb1b2be0e6c46f8eeb8', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acc4eb044e0459f436f25aaa872219750b73447c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
436663590,Documentation for Darknet model.,"Hey everyone, This PR aims to complete the readme and add documentation for Darknet models which will be added in #20.",True,23,https://api.github.com/repos/mlpack/models/pulls/23,https://github.com/mlpack/models/pull/23,closed,12,45,1,2,8,2,1,0,[{'name': 'c: documentation'}],2020-06-18 17:33:37+00:00,2020-08-13 16:08:57+00:00,4833320.0,"55 days, 22:35:20","[{'comment_id': 444038332, 'comment_body': '```suggestion\r\n|  Darknet&nbsp;19 | DarkNet<NegativeLogLikelihood<>, HeInitialization, 19>&nbsp;darknet19({imageDepth, imageWidth, imageHeight}, numClasses)| CIFAR-10 |[YOLO9000](https://pjreddie.com/media/files/papers/YOLO9000.pdf)|\r\n|  Darknet&nbsp;53 | DarkNet<NegativeLogLikelihood<>, HeInitialization, 53>&nbsp;darknet19({imageDepth, imageWidth, imageHeight}, numClasses)| CIFAR-10 |[YOLOv3](https://pjreddie.com/media/files/papers/YOLOv3.pdf)|\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 8, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 444039139, 'comment_body': 'Ahh, makes sense. Thanks a lot.', 'comment_created': datetime.datetime(2020, 6, 23, 8, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '09bacf37185223f6865e25c1ea78dda56af57d4e', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e34a93a2cbebb5af0de8146c4b1680c9f3e4166f', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
466807531,Remove simpler models.,"Hey everyone,
Since we now have a separate repository for simple models / examples and we have also merged a model for the models repo. This PR removes the LSTM and Kaggle example since they are part of the examples repo now.
This PR checks of another task from #1. 
Kindly let me know what you think.
Regards,
Kartik.",True,28,https://api.github.com/repos/mlpack/models/pulls/28,https://github.com/mlpack/models/pull/28,closed,0,1802,14,1,0,0,0,0,[],2020-08-12 14:26:40+00:00,2020-08-20 07:15:07+00:00,665307.0,"7 days, 16:48:27",[],"[{'commit_sha': '45c10b1c30fbc6205c8b82dcfbd734f146ebf46d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
447800384,Add YOLO PreProcessor,"Hey everyone,
This PR aims to add preprocessor function for YOLO class. This basically converts annotations into feature maps that can be used for training YOLO model i.e. have the same format as output of YOLO model.
To Do :
- [x] Add tests to verify output.

CC : @KimSangYeon-DGU, @saksham189, @zoq",True,25,https://api.github.com/repos/mlpack/models/pulls/25,https://github.com/mlpack/models/pull/25,closed,272,1,3,9,9,20,1,0,[{'name': 't: added feature'}],2020-07-11 18:20:14+00:00,2020-09-11 04:29:57+00:00,5306983.0,"61 days, 10:09:43","[{'comment_id': 454602662, 'comment_body': 'Should this be ""[...] as well as the center for the bounding box.""?', 'comment_created': datetime.datetime(2020, 7, 14, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 454771504, 'comment_body': 'Right, I will fix it in the next commit.', 'comment_created': datetime.datetime(2020, 7, 15, 3, 40, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 455894540, 'comment_body': 'Hey @kartikdutt18 \r\nTo normalize the width and height of image into -1 and 1, can you refer to [this](https://stats.stackexchange.com/questions/178626/how-to-normalize-data-between-1-and-1)?', 'comment_created': datetime.datetime(2020, 7, 16, 15, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 455898923, 'comment_body': 'Ahh, I misunderstood the question', 'comment_created': datetime.datetime(2020, 7, 16, 16, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 458988797, 'comment_body': 'Maybe we should also compare the normalized boxes with pre calculated ones, what do you think?', 'comment_created': datetime.datetime(2020, 7, 22, 18, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 458989473, 'comment_body': '```suggestion\r\n```\r\n\r\nLooks like we can remove the extra line here.', 'comment_created': datetime.datetime(2020, 7, 22, 18, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 458991135, 'comment_body': ""I have seen at least one dataset that alreay used the centered bbox format but wasn't normalized, do you think we should introduce a parameter to skip the step?"", 'comment_created': datetime.datetime(2020, 7, 22, 18, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 458992623, 'comment_body': 'Sure, I can add that as well.', 'comment_created': datetime.datetime(2020, 7, 22, 18, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 458992784, 'comment_body': 'Makes sense. Thanks for the suggestion.', 'comment_created': datetime.datetime(2020, 7, 22, 18, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 458993341, 'comment_body': ""Ahh makes sense. I'll add that as well."", 'comment_created': datetime.datetime(2020, 7, 22, 18, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 475109007, 'comment_body': 'Does this detect YOLOv2 as well?', 'comment_created': datetime.datetime(2020, 8, 22, 16, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475109215, 'comment_body': '```suggestion\r\n      arma::cube outputTemp(const_cast<arma::Mat<eT> &>(output).memptr() +\r\n          offset, gridHeight, gridWidth, numPredictions, false, false);\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 16, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475109221, 'comment_body': ""```suggestion\r\n   * @param annotations Field object created using model's dataloader containing\r\n   *     annotation for images.\r\n```"", 'comment_created': datetime.datetime(2020, 8, 22, 16, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475109490, 'comment_body': ""```suggestion\r\n      // For YOLOv2 or higher, each bounding box can represent a class\r\n      // so we don't repeat labels as done for YOLOv1. We will use map\r\n      // to store last inserted bounding box.\r\n```"", 'comment_created': datetime.datetime(2020, 8, 22, 16, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475109545, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 16, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475222889, 'comment_body': '`unordered_map` should be slightly more efficient for this purpose. Let me know what you think.', 'comment_created': datetime.datetime(2020, 8, 23, 13, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'saksham189', 'type': 'User'}, {'comment_id': 475229970, 'comment_body': 'Agreed, I was using that earlier but it gave a compilation error so I switched to using a map.', 'comment_created': datetime.datetime(2020, 8, 23, 15, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 478434934, 'comment_body': 'Yes it does. It might also work for YOLOv4 unless they changed feature map but it works for all versions between 1 and 3 (inclusive).', 'comment_created': datetime.datetime(2020, 8, 27, 13, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 480247814, 'comment_body': 'Hey @kartikdutt18, can you explain the input, output, and terms of `cell` and `grid` which are used in this implementation? ', 'comment_created': datetime.datetime(2020, 8, 31, 16, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 480285002, 'comment_body': 'Hey @KimSangYeon-DGU, no worries, The input here would be a field type containing bounding boxes, the output would be an arma::mat which be would be of size batchSize * (featureMapSize) where featureSize would correspond to  S * S * (numBoundingBoxes * (numClasses + 5)) for YOLOv3 and S * S * (numBoundingBoxes * 5 + numClasses). Here cell is a single cell / data point in Feature Size. And the grid is featureSize reshaped as a cube (S, S, (numBoundingBoxes * 5 + numClasses)). ', 'comment_created': datetime.datetime(2020, 8, 31, 17, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '8026eaa14f1bf3b999e1cd77015a2211c88d8c3f', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c77971640b60ee4453008daa345c265829f7700c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b4f17644bc1abc25dbccb5a5ceb427f444a8126', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90d7e34b67f47ba436265539a1117aad653825c1', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f2d25ac45b0beb78111ec8c49336bde3d578ff5', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8739797719236b70e21bd50682878a022eca74a0', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e0c946b268f8fdfa4f50b1270aca4f4df4c38a', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b771205fbb14d680cf693c7d9093c2ad8d3766d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7275abfe21120656fa4b5fb52def23bd8f4c901e', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
468729526,YOLO Loss Function / Detector.,"Hey everyone,
With the Input pipeline complete (PreProcessing part), this PR aims to complete the output pipeline as well. This PR adds Loss Function for the YOLO model.

To Do :

- [x] Complete Implementation
- [x] Add tests.",False,29,https://api.github.com/repos/mlpack/models/pulls/29,https://github.com/mlpack/models/pull/29,open,739,1,8,20,2,0,3,0,"[{'name': 's: keep open'}, {'name': 's: needs review'}, {'name': 't: added feature'}]",2020-08-17 10:04:37+00:00,,0.0,,[],"[{'commit_sha': '8026eaa14f1bf3b999e1cd77015a2211c88d8c3f', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c77971640b60ee4453008daa345c265829f7700c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b4f17644bc1abc25dbccb5a5ceb427f444a8126', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90d7e34b67f47ba436265539a1117aad653825c1', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f2d25ac45b0beb78111ec8c49336bde3d578ff5', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8739797719236b70e21bd50682878a022eca74a0', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80e0c946b268f8fdfa4f50b1270aca4f4df4c38a', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b771205fbb14d680cf693c7d9093c2ad8d3766d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '238a0eaa577701bf2b94d5d25a96906315de4116', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49df47c2f07ef71a45649cd989ef29d43819dddf', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db79297ee030158e206e3939d555d66f098358ac', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb8d2917f1b1cffd65f3d635225c497c4c08b7ab', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adf5a96ed610a084a76e3d0b214f1b50b38dbb58', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b72dd4dfe756d08f0971f9742a85d3f19ae89c80', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b98c43624cffcd532b1a4962b590c85fbc45184f', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2876944d68b5970179329443b4f126698527720c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd47858d4bea948550147efbaf9531a4e14f4228', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68cf5b02d7bf7a677922d913bd449690705a67e', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfc8874327255665a489a395c817f3ffe3a0feb', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac2ec58a384ef60d346865d7c8edf1b0a1eaabd5', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
446628554,Add YOLO class.,"Hey everyone,
This PR aims to YOLO class to the models repo. The following is the TO-DO list:

- [x] Add PreProcessor Function (Convert DataLoader annotations to YOLO targets). (I'll add this by 10.07.20)

- [x] Add Detection stage for the YOLO class (Where loss is calculated, feature maps are converted to understandable format).

- [x] Add YOLO model architecture.
",True,24,https://api.github.com/repos/mlpack/models/pulls/24,https://github.com/mlpack/models/pull/24,closed,454,0,5,8,8,19,1,0,[{'name': 't: added feature'}],2020-07-09 05:33:40+00:00,2020-08-31 16:24:33+00:00,4618253.0,"53 days, 10:50:53","[{'comment_id': 475108384, 'comment_body': '```suggestion\r\n   * @param featureShape A twp-valued tuple indicating width and height of output feature\r\n   *                     map.\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 16, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475108438, 'comment_body': '```suggestion\r\n    if (batchNorm)\r\n      bottleNeck->Add(new BatchNorm<>(outSize, 1e-8, false));\r\n```', 'comment_created': datetime.datetime(2020, 8, 22, 16, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475108741, 'comment_body': 'Please let us know if the weight file is ready. Do you intend to use the weight converter?', 'comment_created': datetime.datetime(2020, 8, 22, 16, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475110525, 'comment_body': ""Yes I do intend to use the weights. I am done with the implementation of detector too, It makes some extra copies which can be avoided which I'll remove and then I'll leave a comment here when everything is ready."", 'comment_created': datetime.datetime(2020, 8, 22, 17, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 475230113, 'comment_body': ""I'm done with the detector part as well and I'm moving forward with testing the model. If everything works well, I'll add the YOLO model in converter repo for you to test it and then we can merge this PR."", 'comment_created': datetime.datetime(2020, 8, 23, 15, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 477206224, 'comment_body': ""I have added a simple tests in this PR. I haven't added tests for weights because of mlpack/mlpack#2561. I think we can merge this PR since the model is working and any changes would be internal implementation in mlpack. To see if the model is working correctly you can run the following commands :\r\n```\r\ngit clone https://github.com/kartikdutt18/mlpack-PyTorch-Weight-Translator.git\r\ncd mlpack-PyTorch-Weight-Translator\r\n./run.sh yolov1_tiny\r\n```\r\nWith this you will see the model weights being created and transferred into the YOLO model and being used for prediction. You can see that the iou of predictions made by PyTorch model and YOLO model are same i.e. 1.0. Kindly let me know if you face any issues. If this makes sense, I think we can merge this PR and then later add a PR with tests for weights once mlpack/mlpack#2561 is resolved.\r\n(Similar comment from DarkNet)."", 'comment_created': datetime.datetime(2020, 8, 26, 10, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 477206692, 'comment_body': 'With this we should also merge #29 and #25 as well.', 'comment_created': datetime.datetime(2020, 8, 26, 10, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 478396580, 'comment_body': '@kartikdutt18 Rather than creating a weight file, how about save it to the `weight` directory for making it ready-for-use?', 'comment_created': datetime.datetime(2020, 8, 27, 12, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478397221, 'comment_body': '```suggestion\r\n   * @param numClasses Optional number of classes to classify images into,\r\n   *     only to be specified if includeTop is  true.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 12, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478397693, 'comment_body': 'Please use 4 spaces in a new line.\r\n\r\n```suggestion\r\n   * @param inputShape A three-valued tuple indicating input shape.\r\n   *     First value is number of Channels (Channels-First).\r\n   *              ...\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 12, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478397796, 'comment_body': '```suggestion\r\n   * @param numClasses Optional number of classes to classify images into,\r\n   *     only to be specified if includeTop is  true.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 12, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478397940, 'comment_body': '```suggestion\r\n   * @param featureShape A twp-valued tuple indicating width and height of output feature\r\n   *     map.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 12, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478398070, 'comment_body': '```suggestion\r\n   * @tparam SequentialType Layer type in which convolution block will\r\n   *     be added.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 12, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478398292, 'comment_body': '```suggestion\r\n   * @param batchNorm Boolean to determine whether a batch normalization\r\n   *     layer is added.\r\n   * @param baseLayer Layer in which Convolution block will be added, if\r\n   *     NULL added to YOLO FFN.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 12, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478398498, 'comment_body': '```suggestion\r\n   * @param type One of ""max"" or ""mean"". Determines whether add mean pooling\r\n   *     layer or max pooling layer.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 12, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478400544, 'comment_body': 'Please use 4 spaces.\r\n\r\n```suggestion\r\ntemplate<\r\n    typename OutputLayerType,\r\n    typename InitializationRuleType\r\n>\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 13, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478401024, 'comment_body': '```suggestion\r\ntemplate<\r\n    typename OutputLayerType,\r\n    typename InitializationRuleType\r\n>\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 13, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 478432920, 'comment_body': 'This would face the same problem as DarkNet since this also uses BatchNorm Layer which has a serialization issue.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 478438054, 'comment_body': 'Sorry about the same style errors repeated in different PRs. I think I fixed them all. Thanks for pointing them out.', 'comment_created': datetime.datetime(2020, 8, 27, 13, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '602549f67caf4d45196b45f204f9a469aa09b20f', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2e7bcebd2a7f09e1196b9569b36c263db4c1371', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34f09632a690fb597c1f453600e724598516244c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa6eeff4c11350a475e8c0b5c80ace46fd78224f', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a8b2bcec8396ca068ba080234dc81937e25d725', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ed980c4f3d88d8c842c0b202ca8bb5945e3800f', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c34764aa97b5bfe37ec473107a2a8e6fed450b1', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1c3bbf741adba1a43243091968257ac71119ac0', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
469429044,Bounding Box Visualizer,"Hey everyone,
This PR aims to add visualisation tools to the repository. This comes with an addition opencv dependency. Below there is a function to add bounding boxes. I plan to add one more function that also handles labels in bounding boxes.

Regards,
Kartik.",False,31,https://api.github.com/repos/mlpack/models/pulls/31,https://github.com/mlpack/models/pull/31,open,115,1,4,2,3,7,3,0,"[{'name': 's: keep open'}, {'name': 's: needs review'}, {'name': 't: added feature'}]",2020-08-18 11:15:59+00:00,,0.0,,"[{'comment_id': 475105251, 'comment_body': 'In my opinion, it seems to be better for users to be able to choose a color of the bounding box.', 'comment_created': datetime.datetime(2020, 8, 22, 16, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475105416, 'comment_body': 'I think the method name might be simplified into one like `DrawBBox`. I think it is not too ambiguous. Kindly let me know what you think.', 'comment_created': datetime.datetime(2020, 8, 22, 16, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475105816, 'comment_body': ""Because it processes a set of images sequentially, why don't you set this method to get an image, not a set of images? Users can extend this feature by calling it multiple times in their codes. Of course, we can create two methods, one is for a single image and the other is for multiple images. I'm just worried about this API may constrain the flexibility."", 'comment_created': datetime.datetime(2020, 8, 22, 16, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'KimSangYeon-DGU', 'type': 'User'}, {'comment_id': 475106144, 'comment_body': 'Sure that makes sense. Will make the changes.', 'comment_created': datetime.datetime(2020, 8, 22, 16, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 475106192, 'comment_body': ""Sure, I'll change it."", 'comment_created': datetime.datetime(2020, 8, 22, 16, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 478437187, 'comment_body': ""I'm not sure how we would want to do this. There might be multiple objects in the image belonging to different class so either we could take input a map where each label corresponded to a tuple. Kindly let me know if this makes sense."", 'comment_created': datetime.datetime(2020, 8, 27, 13, 54, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 637096487, 'comment_body': 'why this is commented out?', 'comment_created': datetime.datetime(2021, 5, 21, 17, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'birm', 'type': 'User'}]","[{'commit_sha': '3c3b4c24bdfbaf69072f31bafafae37e4076f258', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61757f32f85b64eb8cade82c062bfce398fc8106', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
470900691,[WIP] YOLOv3 Layer,"Hey everyone,
This PR aims to add YOLOv3 model. Currently I have added a generalized of forward propogation of YOLOv3 layer which should work for both YOLOv3 and tiny YOLOv3. We would only have to pass the DarkNet 53 blocks from DarkNet PR into this and it will form the necessary connections.
Regards,
Kartik.",False,32,https://api.github.com/repos/mlpack/models/pulls/32,https://github.com/mlpack/models/pull/32,open,702,0,6,3,3,0,4,0,"[{'name': 's: keep open'}, {'name': 's: needs review'}, {'name': 't: added feature'}, {'name': 's: unanswered'}]",2020-08-20 13:11:00+00:00,,0.0,,[],"[{'commit_sha': 'e9f0cac66747fe286076c28ef858a52dc09f869d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53f57db20326dccdc6b006014faa11f67972ce16', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd52e6a9f16d3a407ff9a48bb7a4bc244ea71a2eb', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
456950102,Add BatchNorm Layer to mnist_cnn.,"Hey everyone, This PR adds BatchNorm Layer to mnist_cnn example.
Closes #105.
The results of training are given below :

With BatchNorm

<img width=""1093"" alt=""Screenshot 2020-07-05 at 4 03 00 PM"" src=""https://user-images.githubusercontent.com/39593019/86530802-7ea2ca80-bed9-11ea-970d-3df3142022be.png"">

Accuracy : 
```
Accuracy: train = 89.2%,         valid = 89.0482%
```
Without BatchNorm

<img width=""1098"" alt=""Screenshot 2020-07-05 at 4 06 16 PM"" src=""https://user-images.githubusercontent.com/39593019/86530809-90846d80-bed9-11ea-8b0d-e11c5ba54009.png"">

Kindly let me know what you think.
Regards.
",False,106,https://api.github.com/repos/mlpack/examples/pulls/106,https://github.com/mlpack/examples/pull/106,closed,16,7,2,1,8,6,4,0,"[{'name': 't: added feature'}, {'name': 's: needs review'}, {'name': 's: keep open'}, {'name': 'c: examples'}]",2020-07-27 07:04:36+00:00,2024-08-05 14:46:50+00:00,127035734.0,"1470 days, 7:42:14","[{'comment_id': 461888490, 'comment_body': 'With the BatchNorm layer, do we reach the max number of iterations or does, `EarlyStopAtMinLoss` reuturn before that?', 'comment_created': datetime.datetime(2020, 7, 28, 21, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 462013276, 'comment_body': ""With BatchNorm Layer the model converges in 10-11 epochs. The `EarlyStopAtMinLoss` keeps it training, even though there isn't any improvement in training / validation loss. So I set max_iterations to 10. I can reduce the patience of `EarlyStopAtMinLoss` if that's a better solution."", 'comment_created': datetime.datetime(2020, 7, 29, 3, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 462273019, 'comment_body': 'Sounds like a good idea, we can leave maxIterations set to 10.', 'comment_created': datetime.datetime(2020, 7, 29, 12, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 594437963, 'comment_body': 'Actually in this case `MAX_ITERATIONS` should be set to the number of points in the training set * 10, since `MAX_ITERATIONS` refers to the number of points seen, not the number of epochs. :+1:', 'comment_created': datetime.datetime(2021, 3, 15, 15, 28, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 594439084, 'comment_body': '```suggestion\r\n```\r\nNo need for extra blank lines. :)', 'comment_created': datetime.datetime(2021, 3, 15, 15, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 594442093, 'comment_body': 'Hey, Sure. I will pull in the latest branch, commit the suggestions, test and revert.', 'comment_created': datetime.datetime(2021, 3, 15, 15, 33, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '679c839fbd69e1c3b141556996c4c24b59da0856', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
459043549,Add tests for Convolutional layer.,"Hey everyone, 
While working on my project, I noticed there weren't tests for Conv. layers. This PR adds tests to show that the output of the Conv. layer matches PyTorch's implementation.

[Test Link](https://colab.research.google.com/drive/1WHRldnsE0eFb-XWQnQuLEQmQQnoZKaia?usp=sharing).

Regards,
Kartik.",True,2548,https://api.github.com/repos/mlpack/mlpack/pulls/2548,https://github.com/mlpack/mlpack/pull/2548,closed,37,0,1,2,1,2,2,0,"[{'name': 'c: testing'}, {'name': 't: added feature'}]",2020-07-30 10:10:58+00:00,2020-07-31 17:28:13+00:00,112635.0,"1 day, 7:17:15","[{'comment_id': 463211952, 'comment_body': 'Perhaps a good idea to mentioned that the value was computed with Pytorch?', 'comment_created': datetime.datetime(2020, 7, 30, 19, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 463393630, 'comment_body': 'Sure, Makes sense.', 'comment_created': datetime.datetime(2020, 7, 31, 4, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '114ffe1706c5fc49a46241db053eca10152a753b', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da459d7d2781f7a60a59b502bc5a4293edf6386c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
454946353,Use 0 to numClass Labels instead of 1 to 10 where NLL is used.,"Hey everyone,
This PR makes the change from 0 to numClasses for training labels. The PR will be merged after mlpack/mlpack#2534. This PR also adds BatchNorm for ConvLayer to give better output and faster convergence.
Kindly let me know your thoughts.

Regards,
Kartik.",False,104,https://api.github.com/repos/mlpack/examples/pulls/104,https://github.com/mlpack/examples/pull/104,closed,9,17,2,2,4,2,2,0,"[{'name': 't: added feature'}, {'name': 's: keep open'}]",2020-07-22 07:53:39+00:00,2021-03-15 15:27:38+00:00,20417639.0,"236 days, 7:33:59","[{'comment_id': 459767963, 'comment_body': ""It could be useful to keep this comment but adapt it such that it reads from 0 to `numClasses - 1` or something.  I think it's useful to keep because it indicates that the responses *shouldn't* be one-hot encoded (which is the default for some other toolkits)."", 'comment_created': datetime.datetime(2020, 7, 23, 22, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 459831983, 'comment_body': ""Makes sense, I'll re-add it."", 'comment_created': datetime.datetime(2020, 7, 24, 3, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '3b22c9221f7964f4c3586a8a74fd124f9ceabc96', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519d6109e645823904cc59e2fd57a9a3890d7072', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
452472369,Move Sequentials to LayerType,"Hey everyone,
This PR moves sequential type to LayerType. 
The reason I have made the change is as follows :
```
  // Layer1 is identity layer.
  std::cout << (darknet.GetModel().Model()[0].type() == typeid(new mlpack::ann::IdentityLayer<>())) << std::endl;
  // Layer2 is sequential layer.
  std::cout << (darknet.GetModel().Model()[1].type() == typeid(new mlpack::ann::Sequential<>())) << std::endl;
```
The sequential layer comparison fails if the below change isn't made.

The reason I want to make the comparison is listed below : 
I need to load running mean and variance into BatchNorm Layer and in general the BatchNorm Layer might be wrapped in many sequentials or residual layers (darknet53) so I was applying something similar to dfs here.

```
// Queue containing csv paths for running mean.
std::queue<std::string> batchNormRunningMean;

template<typename LayerType = mlpack::ann::FFN<>>
void LoadRunningMeanAndVariance(LayerType& baseLayer, size_t i = 0)
{
  while (i < baseLayer.Model().size() && !batchNormRunningMean.empty())
   {
    if (baseLayer.Model()[i].type() == typeid(new mlpack::ann::Sequential<>()))
   {
     LoadRunningMeanAndVariance<mlpack::ann::Sequential<>>(*baseLayer.Model()[i]);
   }
   if (!batchNormRunningMean.empty() && baseLayer.Model()[i].type() == typeid(mlpack::ann::BatchNorm<>()))
   {
      arma::mat runningMean;
      mlpack::data::Load(batchNormRunningMean.front(), runningMean);
      batchNormRunningMean.pop();
      baseLayer.Model()[i]->RunningMean() = runningMean;
   }
   i++;
  }
}
```

We can also use this to create a model summary while maintaining an index and if each layer had Name Parameter in them.

Keeping this as draft for now, Will have to remove openmp change if build fails else we can restart the build for #2412 and merge that as well.

Kindly let me know if the above logic makes sense or if there is a better way of handling this.
Thanks.

Regards,
Kartik,

CC: @KimSangYeon-DGU, @saksham189 ",False,2519,https://api.github.com/repos/mlpack/mlpack/pulls/2519,https://github.com/mlpack/mlpack/pull/2519,closed,4,4,1,1,12,0,5,0,"[{'name': 's: stale'}, {'name': 's: needs review'}, {'name': 'c: build system'}, {'name': 's: unanswered'}, {'name': 'c: methods'}]",2020-07-19 10:03:29+00:00,2020-08-30 18:38:53+00:00,3659724.0,"42 days, 8:35:24",[],"[{'commit_sha': 'f2aa9e9aedf0371ade6ba18e9f912ff33e77461b', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
439002285,Document Go in CMake Flags and Style Fixes.,"Hey everyone,
Adding mention of Go Bindings in cmake flag in readme.
Thanks.",True,2475,https://api.github.com/repos/mlpack/mlpack/pulls/2475,https://github.com/mlpack/mlpack/pull/2475,closed,15,11,6,4,1,4,3,0,"[{'name': 'c: build system'}, {'name': 'c: binding'}, {'name': 'c: methods'}]",2020-06-24 06:55:25+00:00,2020-06-26 05:00:38+00:00,165913.0,"1 day, 22:05:13","[{'comment_id': 444902401, 'comment_body': 'Hey should we also add `BUILD_GO_SHLIB` option here?\r\nThis option allows us to build shared libraries required by Go-bindings.', 'comment_created': datetime.datetime(2020, 6, 24, 13, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 445039341, 'comment_body': ""Hmm, I guess it would be always on when building bindings right and if we don't build bindings they won't have any effect. Or did I miss something."", 'comment_created': datetime.datetime(2020, 6, 24, 16, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 445295632, 'comment_body': 'I had use `BUILD_GO_SHLIB` because when we ask the user to download go-bindings, then we also ask the user to build these go-shared libraries on their own, and this option will help the user to just build the shared libraries required by the go-bindings and not the complete go-bindings (.go and .h files). \r\nI am not sure, if we should add this option or not.', 'comment_created': datetime.datetime(2020, 6, 25, 4, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Yashwants19', 'type': 'User'}, {'comment_id': 445731576, 'comment_body': ""Let's add it for now. If some one presents a different opinion, we can remove it then."", 'comment_created': datetime.datetime(2020, 6, 25, 17, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '28624d63534ce34ffd25ab27212f06cfdc849c68', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70b6544f8dbbcf94a28c2db7b1c63543fefefdeb', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '073820123cbc75916b712ffeb9e8e18b5ee0da83', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43b4acfc6d70f1c43af7565b555a2a854583608d', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
432197363,Change parameter description in BatchNorm layer to make it more clear.,"Hey everyone,
I have changed the parameter description for the batch norm layer a bit. From parameter description it wasn't clear to me what units mean, hence added the word 'channels' which is more commonly used. Kindly let me know what you think.
Regards.",True,2453,https://api.github.com/repos/mlpack/mlpack/pulls/2453,https://github.com/mlpack/mlpack/pull/2453,closed,2,2,2,1,1,0,2,0,"[{'name': 'c: documentation'}, {'name': 'c: methods'}]",2020-06-10 04:43:49+00:00,2020-06-11 19:54:17+00:00,141028.0,"1 day, 15:10:28",[],"[{'commit_sha': 'bb3d5ef3afed8b4fb6e1ba9a412b3913275ba635', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40
422694274,Remove Python 2.7 From Linux Azure Build.,"This is yet another attempt to fix azure build failure. The linux build have failing for the past 2 or so days as I think setuptools is not being found for python2. SetupTools<45 should work I guess. Kindly let me know what you think.
Regards.",True,2430,https://api.github.com/repos/mlpack/mlpack/pulls/2430,https://github.com/mlpack/mlpack/pull/2430,closed,8,19,2,12,17,8,1,0,[{'name': 'c: build system'}],2020-05-25 11:10:35+00:00,2020-06-14 04:04:12+00:00,1702417.0,"19 days, 16:53:37","[{'comment_id': 432452479, 'comment_body': ""For some reason, Linux finds python 3.5 interpreter [here](https://dev.azure.com/mlpack/mlpack/_build/results?buildId=2227&view=logs&j=936136b6-c495-56a6-9e3e-988b38df8fb3&t=75e8b850-1221-57d5-1a8e-32c2f4ae7860&l=188) because of that we have to use pandas v0.24.2. If we don't force this version we can't build the python_bindings. @zoq, I am not sure where the python 3.5 is coming from. When you get a chance could you please take a look at this. Also maybe we can request changes here to prevent this from being merged.\r\nRegards."", 'comment_created': datetime.datetime(2020, 5, 29, 12, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 432534210, 'comment_body': 'Do you think you could set the direct path to python 3.7 in the CMake configuration?  `-DPYTHON_EXECUTABLE=/opt/hostedtoolcache/Python/3.7.7/x64/bin/python3`?  (Or something like that.)', 'comment_created': datetime.datetime(2020, 5, 29, 14, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 432972557, 'comment_body': 'Hey @rcurtin, I tried a couple of things which include  : \r\n1. Updating python 3.5 to 3.7 , Without specifying executable using python config auto update.\r\n2. Install using apt update.\r\n3. Moving 3.7 files to python3.\r\n4. Specifying exec path with all the above conditions. This causes results in Cython not found.\r\n5. Changed cmake to first find python3.7 then try for other version.\r\n5. Just specifying executable to python3.7 causes Cython not found.\r\nThe only that works is using python3.5 (installed ver) and then specifying to the last pandas version. Could you give me some more insight here. Thanks a lot. ', 'comment_created': datetime.datetime(2020, 5, 31, 18, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439392505, 'comment_body': 'Maybe we need to use `/opt/hostedtoolcache/Python/3.7.7/x64/bin/python3` here instead?  I wonder if this is just installing Cython to the wrong Python installation.  Just an idea... maybe the issue is trickier than that. :+1:', 'comment_created': datetime.datetime(2020, 6, 12, 12, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rcurtin', 'type': 'User'}, {'comment_id': 439411260, 'comment_body': 'Thanks @rcurtin, That did work. We should get the binding test in linux machine after the build finishes.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439465205, 'comment_body': 'I think this is ready to go now. Thanks.', 'comment_created': datetime.datetime(2020, 6, 12, 14, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}, {'comment_id': 439499456, 'comment_body': 'Do you mind to call this just Python?', 'comment_created': datetime.datetime(2020, 6, 12, 15, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zoq', 'type': 'User'}, {'comment_id': 439509149, 'comment_body': 'Agreed, Done.', 'comment_created': datetime.datetime(2020, 6, 12, 16, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'kartikdutt18', 'type': 'User'}]","[{'commit_sha': '5308337689d5dd042a9f158daa4c08237148d03e', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43fb03331b60c2e2e1c51852bf48d6816e2ec1cb', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2e19e795d92ff5debcb60972485622bbbf2aaf', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc388a6bace0961048d83154eab7970024b45ea3', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5939799b602319fb67f9f04db38235fcc89cfc27', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5d9c60de8c913474fb71d8adb4c89ec32b6820c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b260319d1eeaf723e6daba6ecefd22a878dbaee', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23129175f94ba0fcfe9208d54c28260af4aadf68', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4b48ad4002c7125f5ce77efc29916c61aea1764', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fc3eca7f3759a8a8a1636103d9c61e80ef7d0f0', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bea69a1fa2b0cc3d4f9eb5d2e9d08f497a93210', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6764267d397d3238d73ca10045a3a7e6f754734c', 'committer_username': 'kartikdutt18', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2018, 5, 24, 13, 53, 25, tzinfo=datetime.timezone.utc)}]",,39593019,,User,,108,,20,40

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
28149409,mlpack,mlpack/mlpack,C++,1591,4978,183,321,30199,24,11,15,"[{'id': 687681081, 'number': 3012, 'closed': datetime.datetime(2021, 7, 12, 11, 19, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 9, 47, 30, tzinfo=datetime.timezone.utc), 'time_taken': 5515.0, 'time_delta': '1:31:55', 'additions': 1176, 'deletions': 166, 'state': 'closed'}, {'id': 495707421, 'number': 2639, 'closed': datetime.datetime(2020, 10, 3, 18, 4, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 30, 18, 42, 10, tzinfo=datetime.timezone.utc), 'time_taken': 256967.0, 'time_delta': '2 days, 23:22:47', 'additions': 98, 'deletions': 113, 'state': 'closed'}, {'id': 495704473, 'number': 2637, 'closed': datetime.datetime(2020, 10, 17, 18, 16, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 30, 18, 37, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1467524.0, 'time_delta': '16 days, 23:38:44', 'additions': 51, 'deletions': 6, 'state': 'closed'}, {'id': 462714567, 'number': 2552, 'closed': datetime.datetime(2020, 8, 4, 18, 25, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 11, 46, 45, tzinfo=datetime.timezone.utc), 'time_taken': 23927.0, 'time_delta': '6:38:47', 'additions': 24, 'deletions': 15, 'state': 'closed'}, {'id': 459043549, 'number': 2548, 'closed': datetime.datetime(2020, 7, 31, 17, 28, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 10, 10, 58, tzinfo=datetime.timezone.utc), 'time_taken': 112635.0, 'time_delta': '1 day, 7:17:15', 'additions': 37, 'deletions': 0, 'state': 'closed'}, {'id': 452472369, 'number': 2519, 'closed': datetime.datetime(2020, 8, 30, 18, 38, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 19, 10, 3, 29, tzinfo=datetime.timezone.utc), 'time_taken': 3659724.0, 'time_delta': '42 days, 8:35:24', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 448354383, 'number': 2512, 'closed': datetime.datetime(2021, 12, 28, 6, 0, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 16, 13, 2, tzinfo=datetime.timezone.utc), 'time_taken': 46014469.0, 'time_delta': '532 days, 13:47:49', 'additions': 22, 'deletions': 27, 'state': 'closed'}, {'id': 442846642, 'number': 2491, 'closed': datetime.datetime(2020, 7, 2, 13, 26, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 17, 44, 5, tzinfo=datetime.timezone.utc), 'time_taken': 70943.0, 'time_delta': '19:42:23', 'additions': 16, 'deletions': 13, 'state': 'closed'}, {'id': 439026662, 'number': 2476, 'closed': datetime.datetime(2020, 8, 2, 12, 35, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 7, 48, 22, tzinfo=datetime.timezone.utc), 'time_taken': 3386841.0, 'time_delta': '39 days, 4:47:21', 'additions': 3, 'deletions': 5, 'state': 'closed'}, {'id': 439002285, 'number': 2475, 'closed': datetime.datetime(2020, 6, 26, 5, 0, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 6, 55, 25, tzinfo=datetime.timezone.utc), 'time_taken': 165913.0, 'time_delta': '1 day, 22:05:13', 'additions': 15, 'deletions': 11, 'state': 'closed'}, {'id': 438997588, 'number': 2474, 'closed': datetime.datetime(2020, 7, 13, 14, 55, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 6, 44, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1671077.0, 'time_delta': '19 days, 8:11:17', 'additions': 474, 'deletions': 96, 'state': 'closed'}, {'id': 432197363, 'number': 2453, 'closed': datetime.datetime(2020, 6, 11, 19, 54, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 4, 43, 49, tzinfo=datetime.timezone.utc), 'time_taken': 141028.0, 'time_delta': '1 day, 15:10:28', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 425648248, 'number': 2436, 'closed': datetime.datetime(2020, 6, 6, 15, 11, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 31, 18, 8, 19, tzinfo=datetime.timezone.utc), 'time_taken': 507811.0, 'time_delta': '5 days, 21:03:31', 'additions': 17, 'deletions': 2, 'state': 'closed'}, {'id': 422694274, 'number': 2430, 'closed': datetime.datetime(2020, 6, 14, 4, 4, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 11, 10, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1702417.0, 'time_delta': '19 days, 16:53:37', 'additions': 8, 'deletions': 19, 'state': 'closed'}, {'id': 419094383, 'number': 2410, 'closed': datetime.datetime(2020, 5, 23, 23, 20, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 17, 10, 45, 17, tzinfo=datetime.timezone.utc), 'time_taken': 563692.0, 'time_delta': '6 days, 12:34:52', 'additions': 401, 'deletions': 3, 'state': 'closed'}, {'id': 418970535, 'number': 2407, 'closed': datetime.datetime(2020, 5, 16, 18, 20, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 16, 13, 47, 16, tzinfo=datetime.timezone.utc), 'time_taken': 16415.0, 'time_delta': '4:33:35', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 417305909, 'number': 2402, 'closed': datetime.datetime(2020, 5, 15, 23, 27, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 11, 41, 53, tzinfo=datetime.timezone.utc), 'time_taken': 215136.0, 'time_delta': '2 days, 11:45:36', 'additions': 203, 'deletions': 2, 'state': 'closed'}, {'id': 412096445, 'number': 2392, 'closed': datetime.datetime(2020, 5, 1, 23, 2, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 1, 11, 29, 47, tzinfo=datetime.timezone.utc), 'time_taken': 41578.0, 'time_delta': '11:32:58', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 408604012, 'number': 2387, 'closed': datetime.datetime(2020, 6, 28, 17, 58, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 24, 15, 2, 25, tzinfo=datetime.timezone.utc), 'time_taken': 5626544.0, 'time_delta': '65 days, 2:55:44', 'additions': 160, 'deletions': 66, 'state': 'closed'}, {'id': 405005083, 'number': 2374, 'closed': datetime.datetime(2020, 4, 28, 2, 12, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 17, 8, 48, 6, tzinfo=datetime.timezone.utc), 'time_taken': 926676.0, 'time_delta': '10 days, 17:24:36', 'additions': 166, 'deletions': 0, 'state': 'closed'}, {'id': 402002609, 'number': 2368, 'closed': datetime.datetime(2020, 6, 11, 8, 45, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 10, 17, 46, 54, tzinfo=datetime.timezone.utc), 'time_taken': 5324339.0, 'time_delta': '61 days, 14:58:59', 'additions': 25, 'deletions': 5, 'state': 'closed'}, {'id': 393992099, 'number': 2340, 'closed': datetime.datetime(2020, 3, 26, 19, 37, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 26, 7, 1, 47, tzinfo=datetime.timezone.utc), 'time_taken': 45338.0, 'time_delta': '12:35:38', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 392796422, 'number': 2329, 'closed': datetime.datetime(2020, 3, 24, 16, 46, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 24, 6, 8, 36, tzinfo=datetime.timezone.utc), 'time_taken': 38263.0, 'time_delta': '10:37:43', 'additions': 12, 'deletions': 11, 'state': 'closed'}, {'id': 387720743, 'number': 2292, 'closed': datetime.datetime(2020, 3, 13, 17, 55, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 11, 11, 15, tzinfo=datetime.timezone.utc), 'time_taken': 24247.0, 'time_delta': '6:44:07', 'additions': 62, 'deletions': 66, 'state': 'closed'}, {'id': 387154170, 'number': 2281, 'closed': datetime.datetime(2020, 3, 12, 11, 31, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 12, 10, 16, 3, tzinfo=datetime.timezone.utc), 'time_taken': 4538.0, 'time_delta': '1:15:38', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 385945607, 'number': 2271, 'closed': datetime.datetime(2020, 3, 13, 3, 45, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 10, 5, 31, 19, tzinfo=datetime.timezone.utc), 'time_taken': 252825.0, 'time_delta': '2 days, 22:13:45', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 385143098, 'number': 2265, 'closed': datetime.datetime(2020, 3, 12, 9, 7, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 7, 13, 5, 57, tzinfo=datetime.timezone.utc), 'time_taken': 417712.0, 'time_delta': '4 days, 20:01:52', 'additions': 93, 'deletions': 8, 'state': 'closed'}, {'id': 384118240, 'number': 2257, 'closed': datetime.datetime(2020, 3, 8, 4, 22, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 5, 7, 47, 35, tzinfo=datetime.timezone.utc), 'time_taken': 246872.0, 'time_delta': '2 days, 20:34:32', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 380801884, 'number': 2244, 'closed': datetime.datetime(2020, 3, 3, 11, 53, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 11, 42, 56, tzinfo=datetime.timezone.utc), 'time_taken': 432654.0, 'time_delta': '5 days, 0:10:54', 'additions': 33, 'deletions': 177, 'state': 'closed'}, {'id': 380159952, 'number': 2242, 'closed': datetime.datetime(2020, 7, 23, 15, 7, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 26, 11, 6, 47, tzinfo=datetime.timezone.utc), 'time_taken': 12801619.0, 'time_delta': '148 days, 4:00:19', 'additions': 31, 'deletions': 3, 'state': 'closed'}, {'id': 379981195, 'number': 2240, 'closed': datetime.datetime(2020, 3, 24, 2, 39, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 26, 3, 3, 35, tzinfo=datetime.timezone.utc), 'time_taken': 2331366.0, 'time_delta': '26 days, 23:36:06', 'additions': 28, 'deletions': 22, 'state': 'closed'}, {'id': 376719661, 'number': 2219, 'closed': datetime.datetime(2020, 2, 22, 5, 59, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 18, 16, 38, 31, tzinfo=datetime.timezone.utc), 'time_taken': 307250.0, 'time_delta': '3 days, 13:20:50', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 375723513, 'number': 2209, 'closed': datetime.datetime(2020, 4, 5, 15, 11, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 15, 15, 5, 9, tzinfo=datetime.timezone.utc), 'time_taken': 4320378.0, 'time_delta': '50 days, 0:06:18', 'additions': 353, 'deletions': 0, 'state': 'closed'}, {'id': 375491264, 'number': 2207, 'closed': datetime.datetime(2020, 3, 5, 23, 33, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 14, 17, 18, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1750479.0, 'time_delta': '20 days, 6:14:39', 'additions': 204, 'deletions': 0, 'state': 'closed'}, {'id': 373265181, 'number': 2195, 'closed': datetime.datetime(2020, 5, 3, 19, 9, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 10, 17, 39, 56, tzinfo=datetime.timezone.utc), 'time_taken': 7176557.0, 'time_delta': '83 days, 1:29:17', 'additions': 770, 'deletions': 19, 'state': 'closed'}, {'id': 372003439, 'number': 2182, 'closed': datetime.datetime(2020, 2, 15, 19, 54, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 6, 16, 48, 13, tzinfo=datetime.timezone.utc), 'time_taken': 788776.0, 'time_delta': '9 days, 3:06:16', 'additions': 138, 'deletions': 0, 'state': 'closed'}, {'id': 371188663, 'number': 2178, 'closed': datetime.datetime(2020, 2, 10, 18, 57, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 5, 5, 22, 32, tzinfo=datetime.timezone.utc), 'time_taken': 480920.0, 'time_delta': '5 days, 13:35:20', 'additions': 22, 'deletions': 9, 'state': 'closed'}, {'id': 370220248, 'number': 2172, 'closed': datetime.datetime(2020, 7, 25, 7, 7, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 3, 9, 47, 38, tzinfo=datetime.timezone.utc), 'time_taken': 14937569.0, 'time_delta': '172 days, 21:19:29', 'additions': 967, 'deletions': 0, 'state': 'closed'}, {'id': 369842367, 'number': 2168, 'closed': datetime.datetime(2020, 2, 3, 0, 5, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 1, 2, 42, 31, tzinfo=datetime.timezone.utc), 'time_taken': 163360.0, 'time_delta': '1 day, 21:22:40', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 368152922, 'number': 2163, 'closed': datetime.datetime(2020, 2, 15, 23, 8, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 28, 18, 3, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1573522.0, 'time_delta': '18 days, 5:05:22', 'additions': 382, 'deletions': 137, 'state': 'closed'}, {'id': 364446390, 'number': 2158, 'closed': datetime.datetime(2020, 1, 26, 19, 13, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 17, 21, 26, tzinfo=datetime.timezone.utc), 'time_taken': 697903.0, 'time_delta': '8 days, 1:51:43', 'additions': 149, 'deletions': 2, 'state': 'closed'}, {'id': 356891190, 'number': 2126, 'closed': datetime.datetime(2020, 1, 28, 15, 56, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 26, 7, 1, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2883290.0, 'time_delta': '33 days, 8:54:50', 'additions': 306, 'deletions': 33, 'state': 'closed'}, {'id': 356420742, 'number': 2123, 'closed': datetime.datetime(2019, 12, 24, 10, 20, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 23, 18, 48, 51, tzinfo=datetime.timezone.utc), 'time_taken': 55880.0, 'time_delta': '15:31:20', 'additions': 98, 'deletions': 10, 'state': 'closed'}]"
248572894,models,mlpack/models,C++,41,34,24,25,456,17,1,12,"[{'id': 620009102, 'number': 53, 'closed': datetime.datetime(2021, 4, 21, 10, 10, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 21, 9, 12, 28, tzinfo=datetime.timezone.utc), 'time_taken': 3465.0, 'time_delta': '0:57:45', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 576892756, 'number': 47, 'closed': datetime.datetime(2021, 3, 19, 15, 12, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 20, 8, 16, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2357783.0, 'time_delta': '27 days, 6:56:23', 'additions': 73, 'deletions': 6, 'state': 'closed'}, {'id': 495732334, 'number': 37, 'closed': None, 'created': datetime.datetime(2020, 9, 30, 19, 21, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 11, 'deletions': 1, 'state': 'open'}, {'id': 493068692, 'number': 35, 'closed': datetime.datetime(2020, 9, 30, 19, 21, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 25, 13, 23, 29, tzinfo=datetime.timezone.utc), 'time_taken': 453498.0, 'time_delta': '5 days, 5:58:18', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 476442889, 'number': 34, 'closed': datetime.datetime(2020, 9, 1, 19, 3, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 31, 17, 50, 53, tzinfo=datetime.timezone.utc), 'time_taken': 90741.0, 'time_delta': '1 day, 1:12:21', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 470900691, 'number': 32, 'closed': None, 'created': datetime.datetime(2020, 8, 20, 13, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 702, 'deletions': 0, 'state': 'open'}, {'id': 469429044, 'number': 31, 'closed': None, 'created': datetime.datetime(2020, 8, 18, 11, 15, 59, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 115, 'deletions': 1, 'state': 'open'}, {'id': 468729526, 'number': 29, 'closed': None, 'created': datetime.datetime(2020, 8, 17, 10, 4, 37, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 739, 'deletions': 1, 'state': 'open'}, {'id': 466807531, 'number': 28, 'closed': datetime.datetime(2020, 8, 20, 7, 15, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 14, 26, 40, tzinfo=datetime.timezone.utc), 'time_taken': 665307.0, 'time_delta': '7 days, 16:48:27', 'additions': 0, 'deletions': 1802, 'state': 'closed'}, {'id': 465470689, 'number': 27, 'closed': datetime.datetime(2020, 8, 12, 12, 48, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 12, 30, 43, tzinfo=datetime.timezone.utc), 'time_taken': 173888.0, 'time_delta': '2 days, 0:18:08', 'additions': 40, 'deletions': 0, 'state': 'closed'}, {'id': 447800384, 'number': 25, 'closed': datetime.datetime(2020, 9, 11, 4, 29, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 18, 20, 14, tzinfo=datetime.timezone.utc), 'time_taken': 5306983.0, 'time_delta': '61 days, 10:09:43', 'additions': 272, 'deletions': 1, 'state': 'closed'}, {'id': 446628554, 'number': 24, 'closed': datetime.datetime(2020, 8, 31, 16, 24, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 5, 33, 40, tzinfo=datetime.timezone.utc), 'time_taken': 4618253.0, 'time_delta': '53 days, 10:50:53', 'additions': 454, 'deletions': 0, 'state': 'closed'}, {'id': 436663590, 'number': 23, 'closed': datetime.datetime(2020, 8, 13, 16, 8, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 17, 33, 37, tzinfo=datetime.timezone.utc), 'time_taken': 4833320.0, 'time_delta': '55 days, 22:35:20', 'additions': 12, 'deletions': 45, 'state': 'closed'}, {'id': 431303927, 'number': 20, 'closed': datetime.datetime(2020, 8, 12, 12, 32, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 18, 0, 33, tzinfo=datetime.timezone.utc), 'time_taken': 5596290.0, 'time_delta': '64 days, 18:31:30', 'additions': 845, 'deletions': 9, 'state': 'closed'}, {'id': 430778275, 'number': 19, 'closed': datetime.datetime(2020, 6, 11, 22, 20, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 8, 5, 59, 12, tzinfo=datetime.timezone.utc), 'time_taken': 318051.0, 'time_delta': '3 days, 16:20:51', 'additions': 44, 'deletions': 9, 'state': 'closed'}, {'id': 428473299, 'number': 18, 'closed': datetime.datetime(2020, 6, 11, 22, 17, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 14, 7, 19, tzinfo=datetime.timezone.utc), 'time_taken': 547789.0, 'time_delta': '6 days, 8:09:49', 'additions': 1262, 'deletions': 21, 'state': 'closed'}, {'id': 427792719, 'number': 17, 'closed': datetime.datetime(2020, 6, 4, 18, 32, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 12, 12, 25, tzinfo=datetime.timezone.utc), 'time_taken': 22830.0, 'time_delta': '6:20:30', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 425034624, 'number': 13, 'closed': datetime.datetime(2020, 6, 8, 6, 5, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 10, 57, 48, tzinfo=datetime.timezone.utc), 'time_taken': 846434.0, 'time_delta': '9 days, 19:07:14', 'additions': 1085, 'deletions': 22, 'state': 'closed'}, {'id': 423008500, 'number': 12, 'closed': datetime.datetime(2020, 6, 2, 2, 6, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 26, 6, 23, 51, tzinfo=datetime.timezone.utc), 'time_taken': 589367.0, 'time_delta': '6 days, 19:42:47', 'additions': 289, 'deletions': 47, 'state': 'closed'}, {'id': 421187094, 'number': 9, 'closed': datetime.datetime(2020, 6, 2, 4, 55, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 7, 1, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1029210.0, 'time_delta': '11 days, 21:53:30', 'additions': 171, 'deletions': 9, 'state': 'closed'}, {'id': 420900059, 'number': 8, 'closed': None, 'created': datetime.datetime(2020, 5, 20, 17, 17, 29, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 70838, 'deletions': 33, 'state': 'open'}, {'id': 391888458, 'number': 3, 'closed': datetime.datetime(2020, 5, 20, 15, 25, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 21, 17, 38, 53, tzinfo=datetime.timezone.utc), 'time_taken': 5175978.0, 'time_delta': '59 days, 21:46:18', 'additions': 1520, 'deletions': 3824, 'state': 'closed'}]"
92665356,examples,mlpack/examples,Jupyter Notebook,89,116,24,37,1035,5,1,2,"[{'id': 456950102, 'number': 106, 'closed': datetime.datetime(2024, 8, 5, 14, 46, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 7, 4, 36, tzinfo=datetime.timezone.utc), 'time_taken': 127035734.0, 'time_delta': '1470 days, 7:42:14', 'additions': 16, 'deletions': 7, 'state': 'closed'}, {'id': 454946353, 'number': 104, 'closed': datetime.datetime(2021, 3, 15, 15, 27, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 7, 53, 39, tzinfo=datetime.timezone.utc), 'time_taken': 20417639.0, 'time_delta': '236 days, 7:33:59', 'additions': 9, 'deletions': 17, 'state': 'closed'}, {'id': 420514063, 'number': 91, 'closed': datetime.datetime(2020, 5, 20, 7, 13, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 5, 22, 41, tzinfo=datetime.timezone.utc), 'time_taken': 6668.0, 'time_delta': '1:51:08', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 414517400, 'number': 83, 'closed': datetime.datetime(2020, 5, 8, 14, 2, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 7, 7, 46, 28, tzinfo=datetime.timezone.utc), 'time_taken': 108937.0, 'time_delta': '1 day, 6:15:37', 'additions': 55, 'deletions': 80, 'state': 'closed'}, {'id': 398278967, 'number': 73, 'closed': datetime.datetime(2020, 5, 16, 5, 37, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 16, 46, 46, tzinfo=datetime.timezone.utc), 'time_taken': 3675048.0, 'time_delta': '42 days, 12:50:48', 'additions': 740, 'deletions': 0, 'state': 'closed'}, {'id': 395273342, 'number': 72, 'closed': datetime.datetime(2020, 5, 12, 1, 58, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 29, 15, 47, 44, tzinfo=datetime.timezone.utc), 'time_taken': 3751869.0, 'time_delta': '43 days, 10:11:09', 'additions': 503, 'deletions': 0, 'state': 'closed'}, {'id': 395056549, 'number': 71, 'closed': datetime.datetime(2020, 4, 15, 3, 46, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 28, 6, 51, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1544142.0, 'time_delta': '17 days, 20:55:42', 'additions': 328, 'deletions': 0, 'state': 'closed'}, {'id': 388748381, 'number': 64, 'closed': datetime.datetime(2020, 3, 19, 7, 8, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 15, 15, 54, 7, tzinfo=datetime.timezone.utc), 'time_taken': 314068.0, 'time_delta': '3 days, 15:14:28', 'additions': 212, 'deletions': 0, 'state': 'closed'}, {'id': 385626593, 'number': 60, 'closed': datetime.datetime(2020, 3, 19, 7, 9, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 14, 38, 34, tzinfo=datetime.timezone.utc), 'time_taken': 837083.0, 'time_delta': '9 days, 16:31:23', 'additions': 1770, 'deletions': 5313, 'state': 'closed'}, {'id': 380800212, 'number': 56, 'closed': datetime.datetime(2020, 3, 26, 1, 49, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 11, 39, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2383818.0, 'time_delta': '27 days, 14:10:18', 'additions': 100, 'deletions': 131, 'state': 'closed'}, {'id': 372836052, 'number': 50, 'closed': datetime.datetime(2020, 3, 19, 7, 9, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 9, 14, 44, 37, tzinfo=datetime.timezone.utc), 'time_taken': 3342286.0, 'time_delta': '38 days, 16:24:46', 'additions': 556, 'deletions': 1, 'state': 'closed'}, {'id': 365287105, 'number': 38, 'closed': datetime.datetime(2020, 2, 8, 20, 35, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 21, 12, 47, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1583273.0, 'time_delta': '18 days, 7:47:53', 'additions': 93, 'deletions': 0, 'state': 'closed'}]"
