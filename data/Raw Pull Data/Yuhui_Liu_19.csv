pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
426913521,Refactor NearestCentroid class,"- Add fit/predict to Machine class
- Refactor NearestCentroid to be stateless
- Add NearestCentroid unittest",True,5053,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5053,https://github.com/shogun-toolbox/shogun/pull/5053,closed,43,38,5,6,4,36,0,0,[],2020-06-03 01:40:58+00:00,2020-07-31 06:41:46+00:00,5029248.0,"58 days, 5:00:48","[{'comment_id': 434265373, 'comment_body': 'there is a bug in previous implementation, current_class should be an index, instead of a label. it took me some time to find it.', 'comment_created': datetime.datetime(2020, 6, 3, 1, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 434328918, 'comment_body': ""uhoh :) the deprecation should mean that it's still functional :)\r\nso either use a warning and still be functional (but i guess that's not possible coz of not having labels) so in this case i would just drop the whole thing :)\r\nif Machine::train_machine is a pure virtual function, then maybe we should just create there an implementation with this error...."", 'comment_created': datetime.datetime(2020, 6, 3, 6, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 434329171, 'comment_body': '```suggestion\r\n\t\tfit(const std::shared_ptr<Features>& feat, const std::shared_ptr<Labels>& lab)\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 6, 3, 6, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 434329289, 'comment_body': '```suggestion\r\n\t\tvirtual std::shared_ptr<Labels> predict(const std::shared_ptr<Features>& X)\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 6, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 434329320, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 6, 3, 6, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 434329487, 'comment_body': 'great catch!', 'comment_created': datetime.datetime(2020, 6, 3, 6, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 434345443, 'comment_body': 'Should these be pure virtual eventually? ', 'comment_created': datetime.datetime(2020, 6, 3, 6, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434345986, 'comment_body': ""```suggestion\r\n\t\t\t\tscale[i] = 1.0 / static_cast<float64_t>(total);\r\n```\r\nDoesn't change anything but it is more explicit"", 'comment_created': datetime.datetime(2020, 6, 3, 6, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434348181, 'comment_body': 'why not unordered_map and then reserve num_classes?', 'comment_created': datetime.datetime(2020, 6, 3, 6, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434349978, 'comment_body': 'You could rewrite this in order to reuse the iterator in the `else` branch. I am not sure if the compiler will do this for you and you might get some performance considering this is a inner loop.', 'comment_created': datetime.datetime(2020, 6, 3, 7, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434350484, 'comment_body': 'So `MulticlassLabels` do no require you to use continuous class labels, e.g. [0,1,2], rather than [0,2,4]?', 'comment_created': datetime.datetime(2020, 6, 3, 7, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434350871, 'comment_body': ""Doesn't the constructor memset to 0?"", 'comment_created': datetime.datetime(2020, 6, 3, 7, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434375515, 'comment_body': 'these could be `const` right? ', 'comment_created': datetime.datetime(2020, 6, 3, 7, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434375627, 'comment_body': '`const` I think?', 'comment_created': datetime.datetime(2020, 6, 3, 7, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434376527, 'comment_body': '```suggestion\r\n\tstd::shared_ptr<Labels> predict(std::shared_ptr<Features> X) override;\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 7, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434376949, 'comment_body': '```suggestion\r\n\tfit(std::shared_ptr<Features> feat, std::shared_ptr<Labels> lab) override;\r\n```', 'comment_created': datetime.datetime(2020, 6, 3, 7, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434377527, 'comment_body': '`predict` should be `const` right?', 'comment_created': datetime.datetime(2020, 6, 3, 7, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434377682, 'comment_body': 'if we plan to change all the train/apply to fit/predict, then these should be pure virtual, but how do we handle non-parametric models?', 'comment_created': datetime.datetime(2020, 6, 3, 7, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 434381262, 'comment_body': 'Non-parametric models would still have to be `fit` right? Because you stil need to store the ""train"" data? That\'s why maybe it would be good to subclass Machine to Parametric/NonParametric, where the latter stores features and labels', 'comment_created': datetime.datetime(2020, 6, 3, 8, 1, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434381516, 'comment_body': 'and then ParametricMachine never stores features/labels', 'comment_created': datetime.datetime(2020, 6, 3, 8, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434494390, 'comment_body': 'nitpick minor: Capital D', 'comment_created': datetime.datetime(2020, 6, 3, 11, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 434494762, 'comment_body': '@vigsterkr @gf712 could we pls move this check into the base class? It is repeated 100 times in all sorts of different styles ...', 'comment_created': datetime.datetime(2020, 6, 3, 11, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 434495244, 'comment_body': 'currently, most class require that', 'comment_created': datetime.datetime(2020, 6, 3, 11, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 434496029, 'comment_body': ""@vigsterkr @gf712 while we are touching these things. Wouldnt it be better to do all these sort of input checks in the base class and then call a (virtual) method that can assume that\r\n* the pointers are not null\r\n* the number of examples are the same\r\n\r\nso we don't have to have all this duplicate checks?"", 'comment_created': datetime.datetime(2020, 6, 3, 11, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 434496929, 'comment_body': ""this labels to index, this is a problem that re-occurs in other places, so I'd not solve it here.\r\nActually, we have some mechanisms in place that convert labels internally (code is e.g. in multiclass labels)."", 'comment_created': datetime.datetime(2020, 6, 3, 11, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 434497108, 'comment_body': 'see comment above, I wouldnt fix that here, as this happens in many places', 'comment_created': datetime.datetime(2020, 6, 3, 11, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 434498641, 'comment_body': 'yup agreed, like `train` calls `train_machine`, `predict` does the checks and `predict_labels` is pure virtual  ', 'comment_created': datetime.datetime(2020, 6, 3, 11, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434499717, 'comment_body': 'agreed, the labels and features base classes implement `get_num_labels` and `get_num_vectors`, so it makes sense to have the check in Machine', 'comment_created': datetime.datetime(2020, 6, 3, 11, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 434500729, 'comment_body': ""@karlnapf  didn't you start a PR that does this mapping?"", 'comment_created': datetime.datetime(2020, 6, 3, 11, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435120413, 'comment_body': 'yes, there is something merged even.\r\nBut we need to re-think/redesign parts of it as it had issues ...', 'comment_created': datetime.datetime(2020, 6, 4, 9, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435246864, 'comment_body': '@LiuYuHui I am not sure if you saw the discussion on IRC but we thought that something like #5054 would be a better approach. So for now assume that the values passed to the algorithm do not have to be mapped at this level. So I think you should revert this and change the test (for now) to have labels `[0,1]` ', 'comment_created': datetime.datetime(2020, 6, 4, 13, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435247760, 'comment_body': '`SGVector<float64_t> y{0,0,0,1,1,1};`', 'comment_created': datetime.datetime(2020, 6, 4, 13, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435248184, 'comment_body': 'yes, i saw the discussion.', 'comment_created': datetime.datetime(2020, 6, 4, 13, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 441417054, 'comment_body': 'not needed', 'comment_created': datetime.datetime(2020, 6, 17, 9, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 442167414, 'comment_body': 'why not `Machine knn = create_machine(""KNN"", k=k, distance=d)`?', 'comment_created': datetime.datetime(2020, 6, 18, 11, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 442503880, 'comment_body': 'Why True?', 'comment_created': datetime.datetime(2020, 6, 18, 21, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'c569eb36e6b005ab3d1b3c7f9b781762917ef12b', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92719b69479c31cda02d2343189f71f5841437d7', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c7ed71ec94b4f84dde436f20e1ea588c5a94e81', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa414d571d6b7abf052ab6d80c213152220ba2d5', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590684df6da7ca68515eb5125f1d1ee030600f4b', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8c07e4b45710ff7b60e67535d18f45335e9335', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
427837958,Add NonParametricMachine class,,True,5055,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5055,https://github.com/shogun-toolbox/shogun/pull/5055,closed,128,90,21,4,4,32,0,0,[],2020-06-04 13:25:10+00:00,2020-06-15 07:40:48+00:00,929738.0,"10 days, 18:15:38","[{'comment_id': 435256753, 'comment_body': 'It can also be a regressor, so I would say train machine', 'comment_created': datetime.datetime(2020, 6, 4, 13, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435257087, 'comment_body': 'same here, it might be a regression task. I would say use the same description as in the old methods', 'comment_created': datetime.datetime(2020, 6, 4, 13, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435257900, 'comment_body': 'I think this should be pure virtual no? I guess for now keep it, because otherwise it will be too much work to refactor everything in one go', 'comment_created': datetime.datetime(2020, 6, 4, 13, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435258155, 'comment_body': 'same comment as in `fit_machine`', 'comment_created': datetime.datetime(2020, 6, 4, 13, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435258662, 'comment_body': '@vigsterkr are we starting to use relative paths yet or will we do that once we switch to plugins?', 'comment_created': datetime.datetime(2020, 6, 4, 13, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435259255, 'comment_body': '```suggestion\r\n\trequire(lab, ""Labels not set!"");\r\n```', 'comment_created': datetime.datetime(2020, 6, 4, 13, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435264756, 'comment_body': ""and then also remove `m_labels` from `Machine`, but I guess we won't forget that as we will get compiler errors otherwise :D"", 'comment_created': datetime.datetime(2020, 6, 4, 13, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435271266, 'comment_body': 'yeah at some point we should start doing that. the current include pattern we use is not the best.... ', 'comment_created': datetime.datetime(2020, 6, 4, 13, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 435296536, 'comment_body': 'you need to disable this, because it is already present in `Machine`, and then reenable when the whole refactor is done', 'comment_created': datetime.datetime(2020, 6, 4, 14, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 435406809, 'comment_body': ""pls have  a look at the train method of Machine ... there needs to me more stuff in here.\r\nI also don't see why we would need to add fit_machine, rather than re-use train machine?"", 'comment_created': datetime.datetime(2020, 6, 4, 16, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435407161, 'comment_body': 'minor: This should read ""No labels provided"" as it refers to the arguments, not the members ...', 'comment_created': datetime.datetime(2020, 6, 4, 16, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435407515, 'comment_body': '++', 'comment_created': datetime.datetime(2020, 6, 4, 16, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435407914, 'comment_body': 'These error msgs should be different. A SG_NOTIMPLEMENTED exception would be appripriate', 'comment_created': datetime.datetime(2020, 6, 4, 16, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435408468, 'comment_body': 'maybe features_train ?', 'comment_created': datetime.datetime(2020, 6, 4, 16, 57, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435408970, 'comment_body': '""Training features of nonparametric model""', 'comment_created': datetime.datetime(2020, 6, 4, 16, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435678466, 'comment_body': 'when the whole refactor is done, `fit_machine` should be the same as `train_machine`, but if i change the parameters of `train_machine`,  it will be too much work to refactor everything in one pr, so `fit_machine` is just a temporary method.', 'comment_created': datetime.datetime(2020, 6, 5, 4, 4, 48, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 435749461, 'comment_body': 'But I think that this non parametric machine can be done before this big refactor, thus you don’t need these methods in here yet. ', 'comment_created': datetime.datetime(2020, 6, 5, 7, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435754728, 'comment_body': 'Non-parametric machines also needs to be refactored, right?if my understand is right, we want to change `train_machine(shared_ptr<Features>)` to `fit(shared_ptr<Features>, shared_ptr<Labels>)`.', 'comment_created': datetime.datetime(2020, 6, 5, 8, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 435755781, 'comment_body': 'and the reture value between train_machine and fit_machine is different.', 'comment_created': datetime.datetime(2020, 6, 5, 8, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 435962662, 'comment_body': 'yes it all needs to be refactored. My point was that maybe we can do one after the other. But it is OK to move on as you suggest here as well.\r\nKeep in mind it is hard to change everything at once ...', 'comment_created': datetime.datetime(2020, 6, 5, 14, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435981148, 'comment_body': 'you need to store bore data and labels in the member here, that is the whole point of the class :)', 'comment_created': datetime.datetime(2020, 6, 5, 15, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435983731, 'comment_body': 'imo these methods shouldnt be added, but this should replace `train` (as discussed on irc with @gf712 )', 'comment_created': datetime.datetime(2020, 6, 5, 15, 6, 39, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435984115, 'comment_body': 'as above, wouldnt add this method, it just adds noise ... no need. We can rename the methods later if we want', 'comment_created': datetime.datetime(2020, 6, 5, 15, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 435985329, 'comment_body': ""I'd do this after the m_labels refactor is done"", 'comment_created': datetime.datetime(2020, 6, 5, 15, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 436329605, 'comment_body': 'Nice!', 'comment_created': datetime.datetime(2020, 6, 7, 6, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 436329718, 'comment_body': 'const auto&', 'comment_created': datetime.datetime(2020, 6, 7, 6, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 436330154, 'comment_body': 'const auto&', 'comment_created': datetime.datetime(2020, 6, 7, 6, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 436330197, 'comment_body': 'I think like this is fine for now!', 'comment_created': datetime.datetime(2020, 6, 7, 6, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 436330222, 'comment_body': 'I think this API is much better', 'comment_created': datetime.datetime(2020, 6, 7, 6, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 436693322, 'comment_body': 'You also need to include %include <shogun/machine/NonParametricMachine.h>', 'comment_created': datetime.datetime(2020, 6, 8, 13, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 436693659, 'comment_body': 'After this ', 'comment_created': datetime.datetime(2020, 6, 8, 13, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 437936281, 'comment_body': ""So from the output of azure pipelines it seems like this has to come after ` %include <shogun/machine/Machine.h>`, so you'll have to find all the places with this line, and add `%include <shogun/machine/NonParametricMachine.h>` after that"", 'comment_created': datetime.datetime(2020, 6, 10, 8, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'fd7bc34181e775c61f6d91d42814998d9e61ae9b', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05eb78101b3f58fca7e6f80ee605ba60e23bc993', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48d3a3e284e662a655e6ac25b6a2126688f0ea23', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8edfdb4218a04443b32f5839405b92b2a949f656', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
437405228,Refactor gaussian process machine,,True,5072,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5072,https://github.com/shogun-toolbox/shogun/pull/5072,closed,28,80,10,3,3,12,0,0,[],2020-06-20 12:15:35+00:00,2020-06-21 21:51:09+00:00,120934.0,"1 day, 9:35:34","[{'comment_id': 443127956, 'comment_body': 'could you use either string constants here (defined in the class you are putting to), or use c++ setters?', 'comment_created': datetime.datetime(2020, 6, 20, 12, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 443194662, 'comment_body': 'minor thing, you now have the declaration and definition side by side, you can just put all in the same line', 'comment_created': datetime.datetime(2020, 6, 21, 8, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443194806, 'comment_body': 'can this be `result->set_values(get_variance_vector(data))`?', 'comment_created': datetime.datetime(2020, 6, 21, 8, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443194888, 'comment_body': ""why not `auto`? I guess it didn't work with put?"", 'comment_created': datetime.datetime(2020, 6, 21, 8, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443220134, 'comment_body': 'what about these types of checks? that this doesnt support sparse inference methods?', 'comment_created': datetime.datetime(2020, 6, 21, 13, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 443220228, 'comment_body': 'same question here, where does this logic live now?', 'comment_created': datetime.datetime(2020, 6, 21, 13, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 443220364, 'comment_body': 'ah  nevermind. This basically fell back to predicting on the inducing features in case there was no training data provided. But that doesnt make sense anyways...it should just predict on the data provided and if a user wants to predict at the inducing points only, he has to pass those into the train method. ', 'comment_created': datetime.datetime(2020, 6, 21, 13, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 443223416, 'comment_body': ""but shouldn't this constructor be changed so it works without labels?"", 'comment_created': datetime.datetime(2020, 6, 21, 14, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443223436, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 6, 21, 14, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443227285, 'comment_body': 'yes, the ctor should be modified eventually\r\n@LiuYuHui you can decide whether you want to change it in this PR, or in subsequent ones?', 'comment_created': datetime.datetime(2020, 6, 21, 14, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 443227340, 'comment_body': ""(I like smaller PRs more, so if you're ok doing this in another one, I will merge this one)"", 'comment_created': datetime.datetime(2020, 6, 21, 14, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 443256663, 'comment_body': 'Sounds good, we can go through this when we merge into develop ', 'comment_created': datetime.datetime(2020, 6, 21, 21, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': '73fb54db16ef7f790019629ba1d35681bf8cd2d7', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad51a8eba28a63f72faa344f3d9d00f8886a13de', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '805190282db15ff76d1b72917db632f8acce3a8f', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
437866106,Refactor KernelMachine,i think `KernelMachine` is the only left part of the non-parametric model but maybe have other edge cases.,True,5075,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5075,https://github.com/shogun-toolbox/shogun/pull/5075,closed,26,42,8,3,2,12,0,0,[],2020-06-22 11:10:00+00:00,2020-07-01 08:22:22+00:00,767542.0,"8 days, 21:12:22","[{'comment_id': 443679852, 'comment_body': 'minor whitespace glitch', 'comment_created': datetime.datetime(2020, 6, 22, 16, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 443681212, 'comment_body': 'Wait, wouldnt labels be provided as a parameter here? Or has the member been set elsewhere? I think in both parametric and nonparametric, the train method should have feats,labels as parameters. In nonparametric these are then stored locally', 'comment_created': datetime.datetime(2020, 6, 22, 16, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 443908439, 'comment_body': 'yes, the m_labels have been set in `train`.\r\nhttps://github.com/shogun-toolbox/shogun/blob/3d99460a74f40649645488f095a75ea21be38df6/src/shogun/machine/Machine.cpp#L74-L77', 'comment_created': datetime.datetime(2020, 6, 23, 1, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 443976887, 'comment_body': 'The idea is that when the refactor is done we can remove m_labels from Machine, and then we can remove the set_labels in train', 'comment_created': datetime.datetime(2020, 6, 23, 5, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443980901, 'comment_body': '```suggestion\r\n        SGVector<int32_t> svs, float64_t b) : KernelMachine()\r\n{\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 6, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 443981014, 'comment_body': '```suggestion\r\nKernelMachine::KernelMachine(const std::shared_ptr<KernelMachine>& machine) : KernelMachine()\r\n{\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 6, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 444091611, 'comment_body': 'but then we need to touch everything *again* ... imo the labels should be passed to `train_machine` (also to be consistent with feature being passed). We should never (in train) rely on labels/features being retrieved from members.', 'comment_created': datetime.datetime(2020, 6, 23, 9, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444101788, 'comment_body': 'but then we need to change everything in one go no? I think the idea was to do these small PRs for npmachine, and when they are done we can have a big PR where we just replace the function signatures?\r\nThe idea is that then we can also uncomment this\r\nhttps://github.com/shogun-toolbox/shogun/blob/3d99460a74f40649645488f095a75ea21be38df6/src/shogun/machine/NonParametricMachine.h#L22-L24', 'comment_created': datetime.datetime(2020, 6, 23, 9, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 444107140, 'comment_body': 'i see. so signatures come later. sorry about my moans then :)\r\nIt is just all these files need to be touched again. But I guess it will be considerably easier once these changes here are done', 'comment_created': datetime.datetime(2020, 6, 23, 9, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444122610, 'comment_body': ""I think at the start we looked at also changing the signatures, but then we also thought about making things like `train_machine` pure virtual, so then we will need to change all that too. Also could make `apply` `const`. So doing all that when the labels are separated more from the implementation is imo simpler, but I also don't have to write the code :D"", 'comment_created': datetime.datetime(2020, 6, 23, 10, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 444598366, 'comment_body': ""sorry, I don't understand why I should change `NonParametricMachine` to `KernelMachine`."", 'comment_created': datetime.datetime(2020, 6, 24, 1, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 444651019, 'comment_body': 'https://www.variadic.xyz/2012/01/17/c11-delegating-constructors/', 'comment_created': datetime.datetime(2020, 6, 24, 5, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}]","[{'commit_sha': 'e87eeb696edca0736898daf068707cf7aca66e6b', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac67bbe6afae9209c9b786110dc0f305326350db', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84a3e5a43f7fe0344bb93c6e8af0b23649ee8e22', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
443908346,Refactor LinearMachine,"- [x] Refactor C++ side
- [x] Fix unit test
- [x] Refactor meta example
- [x] Refactor jupyter example",True,5089,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5089,https://github.com/shogun-toolbox/shogun/pull/5089,closed,547,898,81,9,11,73,0,0,[],2020-07-03 07:49:40+00:00,2020-07-12 13:35:46+00:00,798366.0,"9 days, 5:46:06","[{'comment_id': 449434505, 'comment_body': ""how are the features now passed to `LinearMachine`? Is this done in `LinearMulticlassMachine`'s train routine?"", 'comment_created': datetime.datetime(2020, 7, 3, 7, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449439832, 'comment_body': 'could this be `const std::shared_ptr<DenseFeatures<ST>>&`', 'comment_created': datetime.datetime(2020, 7, 3, 8, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449440007, 'comment_body': 'could this be `const std::shared_ptr<DenseFeatures<ST>>&`?', 'comment_created': datetime.datetime(2020, 7, 3, 8, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449441325, 'comment_body': ""yes, it should be done in `LinearMulticlassMachine`'s `train`, but the `train` is defined in `MulticlassMachine` if I change the definition of `train`, there will be a lot of class to be changed, so I plan to do this when I refactor `MulticlassMachine`."", 'comment_created': datetime.datetime(2020, 7, 3, 8, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 449441679, 'comment_body': ""shoudn't this be `regression_labels(labs)`? @karlnapf this does the implicit conversion from one label type to `RegressionLabels` if possible right?"", 'comment_created': datetime.datetime(2020, 7, 3, 8, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449442493, 'comment_body': ""shouldn't this check stay? but use `labels->get_num_labels()` instead?"", 'comment_created': datetime.datetime(2020, 7, 3, 8, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449442975, 'comment_body': ""I see, but don't the tests break?"", 'comment_created': datetime.datetime(2020, 7, 3, 8, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449443975, 'comment_body': ""I plan to add this check to `train_machin` of `Machine`, then we don't have to write this check for every class."", 'comment_created': datetime.datetime(2020, 7, 3, 8, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 449445322, 'comment_body': 'this should be just `require(data, ""Features not provided!"");`, as it will use the `bool` operator of `shared_ptr`', 'comment_created': datetime.datetime(2020, 7, 3, 8, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449446264, 'comment_body': 'ah yes, I saw that it is already there, cool!', 'comment_created': datetime.datetime(2020, 7, 3, 8, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449578743, 'comment_body': 'yes, this is really something we should pay attention on doing ... as then we might be able to make features/labels const in `train`', 'comment_created': datetime.datetime(2020, 7, 3, 13, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449579456, 'comment_body': '++', 'comment_created': datetime.datetime(2020, 7, 3, 13, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449580240, 'comment_body': 'do you want to add the label encoder here already?', 'comment_created': datetime.datetime(2020, 7, 3, 13, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449580397, 'comment_body': 'these are the types of calls that would be removed, as `labs` could be assumed to be multiclass labels (converted by your label encoder in the base class)\r\nI think you could do that in this PR already ... (see comment in Machine::train)', 'comment_created': datetime.datetime(2020, 7, 3, 13, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449580956, 'comment_body': '@gf712 you think it might be worth having a check for these in the base class as well?', 'comment_created': datetime.datetime(2020, 7, 3, 13, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449581254, 'comment_body': 'should be done by label encoder in base class', 'comment_created': datetime.datetime(2020, 7, 3, 13, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449582006, 'comment_body': 'woa isnt this method purely virtual?', 'comment_created': datetime.datetime(2020, 7, 3, 13, 24, 8, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449582368, 'comment_body': 'check is done in base class, can be removed', 'comment_created': datetime.datetime(2020, 7, 3, 13, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449582835, 'comment_body': 'it should be exactly this ... but the label encoder needs to do its work for this to work...I think you can just leave it like this if nothing breaks', 'comment_created': datetime.datetime(2020, 7, 3, 13, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449583723, 'comment_body': ""yes agreed. You mean check this in `LinearMachine` right? And the here it's a static cast?"", 'comment_created': datetime.datetime(2020, 7, 3, 13, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449584280, 'comment_body': 'but the label encoder does not handle `RegressionLabels`. Should it?', 'comment_created': datetime.datetime(2020, 7, 3, 13, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449590895, 'comment_body': 'while I agree it could be a static cast in a perfect world, in this world it seems unsafe (in case we forget something) ... but I would just make sure to catch as much as possible in base classes', 'comment_created': datetime.datetime(2020, 7, 3, 13, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449594912, 'comment_body': 'probably not. If a user passed discrete labels to a regression algorithm, she will just see this error here (not likely)', 'comment_created': datetime.datetime(2020, 7, 3, 13, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449595777, 'comment_body': 'I guess we could imagine the case where we have two different kind of regression labels ... then we wouldnt want to assert the right subclass here if they are convertable. So actually I would pass *all* labels through the label encoder in `train` ... and the label encoder checks the a class is already of the right type and satisfies all the constraints (none here in this case) and if so, it just forwards.\r\nSo I think YES, it should be dealt with by the label encoder', 'comment_created': datetime.datetime(2020, 7, 3, 13, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 449751552, 'comment_body': 'I think it is good that add the label encoder in another PR, as this PR already has many things that need to be changed.', 'comment_created': datetime.datetime(2020, 7, 4, 8, 11, 57, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 449851218, 'comment_body': 'Do all LinearMachine algorithms use `DotFeatures`? If so we could just write train_machine as final in LinearMachine and then dispatch the call to another virtual function for LinearMachine implementations, e.g. `LinearMachine::iteration(const std::shared_ptr<DotFeatures>& data, const std::shared_ptr<Labels>& labs)`', 'comment_created': datetime.datetime(2020, 7, 5, 8, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449851683, 'comment_body': 'something like this https://godbolt.org/z/jT3B8t', 'comment_created': datetime.datetime(2020, 7, 5, 8, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449853161, 'comment_body': 'since you are fixing these\r\n```suggestion\r\n\t\tvoid iteration(\r\n```', 'comment_created': datetime.datetime(2020, 7, 5, 8, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449853293, 'comment_body': '@LiuYuHui let me know if you need me to rebase to have access to LabelEncoder', 'comment_created': datetime.datetime(2020, 7, 5, 9, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449853340, 'comment_body': '```suggestion\r\n\t\tvoid iteration(\r\n```', 'comment_created': datetime.datetime(2020, 7, 5, 9, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449853885, 'comment_body': 'this has to be fixed at some point. But at least it is not exposed to the user', 'comment_created': datetime.datetime(2020, 7, 5, 9, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 449859288, 'comment_body': 'I see, make sense, I will do this.', 'comment_created': datetime.datetime(2020, 7, 5, 10, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 449859406, 'comment_body': 'yes, it is a great help if you can help me to rebase.', 'comment_created': datetime.datetime(2020, 7, 5, 10, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 450099098, 'comment_body': 'makes sense!', 'comment_created': datetime.datetime(2020, 7, 6, 9, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 450733370, 'comment_body': 'why do you need this?', 'comment_created': datetime.datetime(2020, 7, 7, 9, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 450739074, 'comment_body': ""the `linear machine` now switch `train(shared_ptr<Features> data)` to `train(const shared_ptr<Features>& data, const std::shared_ptr<Labels>& labs)`, but other `machine`s still use `train(shared_ptr<Features> data)`, i can't find a good way to detect which `train` machine objects have. "", 'comment_created': datetime.datetime(2020, 7, 7, 9, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 450742406, 'comment_body': 'what about adding wrappers?', 'comment_created': datetime.datetime(2020, 7, 7, 9, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 450746373, 'comment_body': ""hmm I don't understand, right now `train(const std::shared_ptr<Features>& data, const std::shared_ptr<Labels>& lab)` calls `train(std::shared_ptr<Features> data)` no? So why not always call `machine->train(current_data, m_labels);`?"", 'comment_created': datetime.datetime(2020, 7, 7, 9, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 450748370, 'comment_body': 'oh i see you changed it in this PR. So is this `try` temporary until you finished refactoring all the machines?', 'comment_created': datetime.datetime(2020, 7, 7, 9, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 450813061, 'comment_body': 'any exception?', 'comment_created': datetime.datetime(2020, 7, 7, 12, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 450813680, 'comment_body': ""space, and below there's something wrong with the indentation.."", 'comment_created': datetime.datetime(2020, 7, 7, 12, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 450814013, 'comment_body': 'whitespace not required ;)', 'comment_created': datetime.datetime(2020, 7, 7, 12, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 450814118, 'comment_body': 'remove whitespace', 'comment_created': datetime.datetime(2020, 7, 7, 12, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 450814158, 'comment_body': 'remove whitespace', 'comment_created': datetime.datetime(2020, 7, 7, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 450814213, 'comment_body': 'remove whitespace', 'comment_created': datetime.datetime(2020, 7, 7, 12, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 450814319, 'comment_body': 'remove whitespace\r\n', 'comment_created': datetime.datetime(2020, 7, 7, 12, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 450814408, 'comment_body': 'extra whitespace', 'comment_created': datetime.datetime(2020, 7, 7, 12, 7, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 450814952, 'comment_body': 'extra whitespace', 'comment_created': datetime.datetime(2020, 7, 7, 12, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 451425120, 'comment_body': ':smile: ', 'comment_created': datetime.datetime(2020, 7, 8, 9, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 451538168, 'comment_body': 'I think here you either use a more descriptive error message, or you rewrite this as `const auto dot_feat = data->as<DotFeatures>()`', 'comment_created': datetime.datetime(2020, 7, 8, 13, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451538353, 'comment_body': 'can it not be pure virtual?', 'comment_created': datetime.datetime(2020, 7, 8, 13, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451539051, 'comment_body': 'where did this come from?', 'comment_created': datetime.datetime(2020, 7, 8, 13, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 451918702, 'comment_body': 'some place need linearmachine instance.', 'comment_created': datetime.datetime(2020, 7, 9, 1, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 451924186, 'comment_body': 'this part from `MulticlassMachine`, as now `LinearMachine` use `train(shared_ptr<Features>, shared_ptr<Labels>)`, i add a override version for `LinearMulticlassMachine`.\r\nhttps://github.com/shogun-toolbox/shogun/blob/f01b18655994c7a4630acc4b67b60912a957217e/src/shogun/machine/MulticlassMachine.cpp#L217-L257', 'comment_created': datetime.datetime(2020, 7, 9, 2, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 452000351, 'comment_body': 'You mean they instantiate `LinearMachine`?', 'comment_created': datetime.datetime(2020, 7, 9, 6, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 452000684, 'comment_body': 'oh i see thanks!', 'comment_created': datetime.datetime(2020, 7, 9, 6, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 452010466, 'comment_body': 'yes', 'comment_created': datetime.datetime(2020, 7, 9, 7, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 452042201, 'comment_body': 'leaving that part of refactor for when we merge with develop branch', 'comment_created': datetime.datetime(2020, 7, 9, 8, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 452042636, 'comment_body': 'this is just temporary, is just to make tests work for now. The try catch will have to be removed before merging with develop', 'comment_created': datetime.datetime(2020, 7, 9, 8, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 452043086, 'comment_body': '@karlnapf there are some really weird things going on in some classes where we instantiate LinearMachine, even though I am pretty sure this class should be abstract', 'comment_created': datetime.datetime(2020, 7, 9, 8, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 452044352, 'comment_body': 'eh? how? that should not be the case.\r\n@LiuYuHui could you point me to the line where std::make_shared<LinearMachine> is being called?', 'comment_created': datetime.datetime(2020, 7, 9, 8, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 452045833, 'comment_body': 'my favourite https://github.com/shogun-toolbox/shogun/blob/aede117e19ec3530583261ce3ca21879a2612495/src/shogun/multiclass/MulticlassLibLinear.cpp#L132', 'comment_created': datetime.datetime(2020, 7, 9, 8, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453305838, 'comment_body': 'remove the docstring', 'comment_created': datetime.datetime(2020, 7, 12, 11, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306026, 'comment_body': 'update doc', 'comment_created': datetime.datetime(2020, 7, 12, 11, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306067, 'comment_body': 'update doc', 'comment_created': datetime.datetime(2020, 7, 12, 11, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306230, 'comment_body': '```suggestion\r\n\tconst auto feats = std::static_pointer_cast<Features>(dot_feats);\r\n```\r\nyou are casting up so it is safe to use static cast', 'comment_created': datetime.datetime(2020, 7, 12, 11, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306266, 'comment_body': 'remove doc', 'comment_created': datetime.datetime(2020, 7, 12, 11, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306293, 'comment_body': 'remove space', 'comment_created': datetime.datetime(2020, 7, 12, 11, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306490, 'comment_body': 'remove whitespace', 'comment_created': datetime.datetime(2020, 7, 12, 11, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306515, 'comment_body': 'update doc', 'comment_created': datetime.datetime(2020, 7, 12, 11, 50, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306583, 'comment_body': 'remove whitespace', 'comment_created': datetime.datetime(2020, 7, 12, 11, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306698, 'comment_body': 'update docs', 'comment_created': datetime.datetime(2020, 7, 12, 11, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 453306742, 'comment_body': 'update docs', 'comment_created': datetime.datetime(2020, 7, 12, 11, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'ff714f340c668b98836f9edc31938f9f76f79e24', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '945ae985e8efeb1eaf3e725bc4cae855fc0a0246', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25d2d1f85ea7dc0be5958d3e038c44a5d7db0298', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1388dab213ff0712797536d10f14fcfc12941806', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ee11dce39250c26fbc9b39d7b9c42a3582c794', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771271940732c0934676320093fb9f24af46d0e1', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e93ef1d27ad4319b88a98c866a1ef5585a0fcfd', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9d745b36a4f00021166b33d0fad1279bb1a170e', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67eedaac8d231d252fca70b46d9c0e0e59cc6b8d', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
455682184,[WIP]Refactor MulticlassMachine,"~~Fix by https://github.com/shogun-toolbox/shogun-libtooling/pull/2~~
- [x] fix C++ code
- [x] fix unit test 
- [x] fix meta example
- [ ] fix jupyter notebook",True,5101,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5101,https://github.com/shogun-toolbox/shogun/pull/5101,closed,329,415,68,4,1,15,0,0,[],2020-07-23 12:45:06+00:00,2020-07-28 05:38:35+00:00,406409.0,"4 days, 16:53:29","[{'comment_id': 459422961, 'comment_body': 'this is really odd :D', 'comment_created': datetime.datetime(2020, 7, 23, 12, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459423333, 'comment_body': 'same here... not sure what is happening?', 'comment_created': datetime.datetime(2020, 7, 23, 12, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459424275, 'comment_body': '```suggestion\r\n\tif (!labs)\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 12, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459424699, 'comment_body': 'so `m_features` is now still part of `Machine`?', 'comment_created': datetime.datetime(2020, 7, 23, 12, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459424985, 'comment_body': '```suggestion\r\n\tvirtual bool train_machine(const std::shared_ptr<Features>& data, const std::shared_ptr<Labels>& labs);\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 12, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459884358, 'comment_body': 'extra space, I think you meant to put the space between constructor and destructor', 'comment_created': datetime.datetime(2020, 7, 24, 7, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459884444, 'comment_body': 'do you still need this constructor?', 'comment_created': datetime.datetime(2020, 7, 24, 7, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459884583, 'comment_body': 'remove space', 'comment_created': datetime.datetime(2020, 7, 24, 7, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459884626, 'comment_body': 'remove space', 'comment_created': datetime.datetime(2020, 7, 24, 7, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459884727, 'comment_body': '```suggestion\r\n\t\tbool train_machine(const std::shared_ptr<Features>& data, const std::shared_ptr<Labels>& labs) override\r\n```', 'comment_created': datetime.datetime(2020, 7, 24, 7, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459885066, 'comment_body': 'if these methods becomes noops can they just be removed? How are the subsets handled now?', 'comment_created': datetime.datetime(2020, 7, 24, 7, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459885169, 'comment_body': 'remove space', 'comment_created': datetime.datetime(2020, 7, 24, 7, 7, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459886561, 'comment_body': 'just add/remove subset to feature that will be passed in `train_machine`.', 'comment_created': datetime.datetime(2020, 7, 24, 7, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 459898637, 'comment_body': 'remove spaces', 'comment_created': datetime.datetime(2020, 7, 24, 7, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 459902282, 'comment_body': 'I see, makes sense to me :)', 'comment_created': datetime.datetime(2020, 7, 24, 7, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'f46fbfb52e50dce787215ef59f8a4c5cd2c510eb', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef95d188c8ad3b8bce5a877d0f6122cd2d8881d9', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '247954c2af20bce03a7bc016181c9c97a0adde4e', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cf7122f90eb79a908cc174856149ef3f37d87d3', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
462164741,Refactor all machine,,True,5104,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5104,https://github.com/shogun-toolbox/shogun/pull/5104,closed,244,411,69,5,3,12,0,0,[],2020-08-03 13:02:57+00:00,2020-08-10 11:54:21+00:00,600684.0,"6 days, 22:51:24","[{'comment_id': 466246811, 'comment_body': 'you should rebase ', 'comment_created': datetime.datetime(2020, 8, 6, 8, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466246982, 'comment_body': 'why commented out?', 'comment_created': datetime.datetime(2020, 8, 6, 8, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466247542, 'comment_body': '\\o/', 'comment_created': datetime.datetime(2020, 8, 6, 8, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466247687, 'comment_body': 'these checks are not needed?', 'comment_created': datetime.datetime(2020, 8, 6, 8, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466247958, 'comment_body': 'can remove the TODO?', 'comment_created': datetime.datetime(2020, 8, 6, 8, 51, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466248301, 'comment_body': 'remove extra space', 'comment_created': datetime.datetime(2020, 8, 6, 8, 52, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466248339, 'comment_body': 'remove extra space', 'comment_created': datetime.datetime(2020, 8, 6, 8, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466248950, 'comment_body': 'I think you can remove these comments', 'comment_created': datetime.datetime(2020, 8, 6, 8, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466249256, 'comment_body': 'remove extra space', 'comment_created': datetime.datetime(2020, 8, 6, 8, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466350697, 'comment_body': 'what happens here?', 'comment_created': datetime.datetime(2020, 8, 6, 11, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 466375468, 'comment_body': 'now pipeline have two `train` method, original `train` will not throw a exception.', 'comment_created': datetime.datetime(2020, 8, 6, 12, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 466375887, 'comment_body': 'move these checks to `NonParametricMachine::train`', 'comment_created': datetime.datetime(2020, 8, 6, 12, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}]","[{'commit_sha': 'bbe66a7e05eb54766125baed86c900746e83de6e', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '841f727ff13f94815090f98243a16cea271db5c4', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7328df3bdfc41b2d09de9820a6b629a89aabc8ad', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6578c4eec56280ff108ae1271d453889dc2c12c', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4afedc4652f992871313cc34b918bed0d4a476a0', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
424949588,Add find labels,,True,1,https://api.github.com/repos/shogun-toolbox/shogun-libtooling/pulls/1,https://github.com/shogun-toolbox/shogun-libtooling/pull/1,closed,176,0,3,3,0,0,0,0,[],2020-05-29 08:00:37+00:00,2020-06-14 17:15:33+00:00,1415696.0,"16 days, 9:14:56",[],"[{'commit_sha': '8dda2b7e12bcc3bac227f37d3feff59c2699727e', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2871ac3325f4ee2ac7bef34713fb5c2b6e63b327', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c17d4def95cf21e73daa2e6054518fba8de2246', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
449302578,[WIP] Refactor multiclass,"- [x] find constructor involving in labels, rewrite parameter and body.
- [x] find method involving in labels, rewrite parameter and body.
- [ ] when find CXXCtorInitializer involving labels, remove the labels.
- [ ] when find `set_labels` in CXXMethod, remove it.",False,2,https://api.github.com/repos/shogun-toolbox/shogun-libtooling/pulls/2,https://github.com/shogun-toolbox/shogun-libtooling/pull/2,open,344,0,3,5,6,0,0,0,[],2020-07-15 07:34:52+00:00,,0.0,,[],"[{'commit_sha': '5dbd3e0d1d3aad9ce3bb5063d6932c880c498a8a', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeec93dfdca92715a7995b47e2a1f5508f698f03', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7754b4c9723edcc4ba7bda3730550ee78271b6d4', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07b01a868bf872cb59fcf3a07e19b1c8069be1d7', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb7d793d6f76bb8acd99772b8001363c3a2381ca', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
465465708,Make Machine class stateless,@LiuYuHui's main GSoC project. Machine class becomes stateless wrt Features and Labels which means that the user has to provide features and labels when fitting a Machine. This is essentially done by adding the notion of (Non)Parametric Machines.,False,5111,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5111,https://github.com/shogun-toolbox/shogun/pull/5111,open,1446,1990,269,9,2,2,1,0,[{'name': 'Tag: GSoC'}],2020-08-10 12:20:00+00:00,,0.0,,"[{'comment_id': 538210484, 'comment_body': '@LiuYuHui I had to change the return type, since that is the type of Machine::train. In future it might be worth returning the Machine object.', 'comment_created': datetime.datetime(2020, 12, 8, 10, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 538363789, 'comment_body': 'At some point Machines should return a pointer to themselves after calling train (like in sklearn) so that we can use a builder pattern in situations like this', 'comment_created': datetime.datetime(2020, 12, 8, 13, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'a3adb93589ca611ec49b5caa80f5c1eb8cb6a006', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e91dd0b16e9f84ce2b44f904290399e1303cea6', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8149be4242939adb4e6985acc197734a67ca65', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a02018b88ebedac7ba63574daf8b5f573fc3a57d', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf39050a4991b4c2d82d52c249c865c210f621da', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '314b50e9f9e04c3fd05bed444e73db810354242d', 'committer_username': 'gf712', 'committer_name': 'Gil', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 11, 13, 43, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85bfb7ffc014efdfb9a73c610e32937697f3a8c3', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a668174e6403a4a8ac0642e7b71b0ee2c02b2bcb', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ec52a45d60beaa11c309e2c420dabf4f5aca529', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Gil,12395516,,User,,40,,17,31
434268288,Add label encoder,"Related to #5054 
Add LabelEncoder/MulticlassLabelsEncoder/BinaryLabelEncoder",True,5067,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5067,https://github.com/shogun-toolbox/shogun/pull/5067,closed,557,0,4,8,10,85,0,0,[],2020-06-15 03:44:27+00:00,2020-07-01 15:24:29+00:00,1424402.0,"16 days, 11:40:02","[{'comment_id': 439955157, 'comment_body': ""I don't think it will work having a single `fit_impl`. I think BinaryLabels require {-1,+1}, but I could have labels {0,10}. So I would expect that mapping to happen in the BinaryLabelEncoder? Otherwise I will just get {0,10} here, right?"", 'comment_created': datetime.datetime(2020, 6, 15, 6, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439955892, 'comment_body': 'ah that is done in transform, but then how do you keep the original mapping? What if I fit to a set that starts with label 0 and then test set first label is 10? Would I still get the same mapping?', 'comment_created': datetime.datetime(2020, 6, 15, 6, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439956107, 'comment_body': '`Math::fequals` does this', 'comment_created': datetime.datetime(2020, 6, 15, 6, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439956297, 'comment_body': 'Here you assume that the labels are either 0 or 1 right?', 'comment_created': datetime.datetime(2020, 6, 15, 6, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439957349, 'comment_body': ""isn't this the result of `fit_impl`?"", 'comment_created': datetime.datetime(2020, 6, 15, 6, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439959730, 'comment_body': 'what about something with values that are not {-1,1}. Could you also test for something with more than two labels to make sure the exception is thrown?', 'comment_created': datetime.datetime(2020, 6, 15, 6, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439960074, 'comment_body': 'I am assuming something with negative values and 0 would also work?', 'comment_created': datetime.datetime(2020, 6, 15, 6, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439960359, 'comment_body': 'i assume that the labels of fit should have the same categories as the labels of transform.', 'comment_created': datetime.datetime(2020, 6, 15, 6, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 439960453, 'comment_body': ""could you also test for something that isn't the result? For example something like `{2,0,1,0}`?"", 'comment_created': datetime.datetime(2020, 6, 15, 6, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439960901, 'comment_body': ""Also what happens when you transform with something that wasn't fitted? For example if now there was a labels 3, but your labels space is {1,2,6}?"", 'comment_created': datetime.datetime(2020, 6, 15, 6, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439961930, 'comment_body': 'Yes, that makes sense I think. I was just a bit confused at the start :D', 'comment_created': datetime.datetime(2020, 6, 15, 6, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439961977, 'comment_body': 'The labels have been transformed by `auto transformed_vec = transform_impl(result_vector);`, so the labels should only contain 0 or 1 now.', 'comment_created': datetime.datetime(2020, 6, 15, 6, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 439962902, 'comment_body': 'Oh I see, so if you have something like {0,10} -> {0,1} -> {-1,+1}? Have you checked everything works fine with negative labels as well?\r\n', 'comment_created': datetime.datetime(2020, 6, 15, 6, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439963111, 'comment_body': 'if values are not {-1, 1}, they will be transformed to {-1, 1}, i will add more unite test.', 'comment_created': datetime.datetime(2020, 6, 15, 6, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 439964976, 'comment_body': 'yes, it exactly is what I did, for the situation with negative labels, i will add more test.', 'comment_created': datetime.datetime(2020, 6, 15, 6, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 439965713, 'comment_body': 'plz dont change it to Math::  ;) we wanna kill that thing sooner or later', 'comment_created': datetime.datetime(2020, 6, 15, 6, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 439966645, 'comment_body': 'hmm I guess we need to replace this with a utility function somewhere then? Because this is quite a common operation', 'comment_created': datetime.datetime(2020, 6, 15, 7, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 439981836, 'comment_body': ""btw if you don't rename a variable you can just write it as `[&normalized_to_origin]`"", 'comment_created': datetime.datetime(2020, 6, 15, 7, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 440025165, 'comment_body': 'normalized_to_origin is a class member, so if I want to use normalized_to_origin in lambda, I guess I have to write `[& normalized_to_origin = normalized_to_origin]`?', 'comment_created': datetime.datetime(2020, 6, 15, 8, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 440049357, 'comment_body': 'could you pls re-use the code we have for these transformations? I put some links in the issue.\r\nOr at least then delete the old code', 'comment_created': datetime.datetime(2020, 6, 15, 9, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 440049961, 'comment_body': '""BinaryLabel"" -> ""Binary labels"".\r\nAnd also please print what the values are so that the user can see what is wrong. See also the existing code for that', 'comment_created': datetime.datetime(2020, 6, 15, 9, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 440050097, 'comment_body': 'See comment above', 'comment_created': datetime.datetime(2020, 6, 15, 9, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 440247563, 'comment_body': 'nitpick: ""Binary labels"" (the idea is to not replicate class/variable/type names in user facing error messages).\r\nStill would be good to print the unique labels in this error message', 'comment_created': datetime.datetime(2020, 6, 15, 15, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 440248419, 'comment_body': 'could be an issue, and then while we are at it can also replace all the CMath::fequals calls', 'comment_created': datetime.datetime(2020, 6, 15, 15, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 440248916, 'comment_body': 'could we maybe put this string somewhere so it is not replicated so many times.... as well as the check code itself?', 'comment_created': datetime.datetime(2020, 6, 15, 15, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 440250278, 'comment_body': 'I guess you want to test\r\n\r\n* binary labels are passed (no-op)\r\n* labels with two unique values are passed (and transformed into binary)\r\n* labels with fewer or more than two unique values are passed (error)', 'comment_created': datetime.datetime(2020, 6, 15, 15, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 440251098, 'comment_body': 'could you use a loop (or macro) and the original vector so make this less verbose?', 'comment_created': datetime.datetime(2020, 6, 15, 15, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 440561716, 'comment_body': 'but the amount of the unique labels may be exceed more than two, such as if `{0,1,2,3,4,5,6,7,8}` is passed to the method, should we print all values?', 'comment_created': datetime.datetime(2020, 6, 16, 3, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 440592421, 'comment_body': ""yeah the idea is that the user gets a feedback what is the the problem with his input. i.e. you print out that we've detected `{0,1,2}` as unique labels in his data set... this should help one to figure out/fix the input... "", 'comment_created': datetime.datetime(2020, 6, 16, 5, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 440719238, 'comment_body': '++ what viktor says here.\r\nAlso keep in mind that the unique number of labels will be relatively small (unless someone passes regression labels .... so maybe you could cap them at length 10 or so and make a ""..."", although I don\'t really think that is necessary)', 'comment_created': datetime.datetime(2020, 6, 16, 9, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 441472455, 'comment_body': ""neat! Didn't know this was a thing :D"", 'comment_created': datetime.datetime(2020, 6, 17, 11, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 441476234, 'comment_body': 'I think you need to rename this function, it is a bit confusing what you get back. Imo it should be `can_convert_float_to_int` and then you just have to invert the logic to `std::abs(e1 - e2) < std::numeric_limits<float64_t>::epsilon();`, and then fix the logic in each call', 'comment_created': datetime.datetime(2020, 6, 17, 11, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 441478395, 'comment_body': ""@karlnapf doesn't BinaryLabels throw in this situation? And if not shouldn't it?\r\nAlso shouldn't this test be done with MulticlassLabels?"", 'comment_created': datetime.datetime(2020, 6, 17, 11, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 441481075, 'comment_body': 'Should this inherit from `Transformer`?', 'comment_created': datetime.datetime(2020, 6, 17, 11, 40, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 441482921, 'comment_body': 'It seems like `Transformer` transform `Features`, not `Labels`.\r\nhttps://github.com/shogun-toolbox/shogun/blob/41b6247f0a8c0f9ce45b388ae085d42d90bdd16d/src/shogun/transformer/Transformer.h#L60-L62', 'comment_created': datetime.datetime(2020, 6, 17, 11, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 441483629, 'comment_body': 'Ah makes sense, nvm!', 'comment_created': datetime.datetime(2020, 6, 17, 11, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 441699973, 'comment_body': 'nit: ""Cannot interpret {} as binary labels""', 'comment_created': datetime.datetime(2020, 6, 17, 17, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 441700333, 'comment_body': 'I think it doesnt atm, but I am not sure.\r\n', 'comment_created': datetime.datetime(2020, 6, 17, 17, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 442667743, 'comment_body': ""ah yes, you're right!"", 'comment_created': datetime.datetime(2020, 6, 19, 7, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443552287, 'comment_body': 'so will this give the user a warning? Because they are using non-integer representations?', 'comment_created': datetime.datetime(2020, 6, 22, 13, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443679493, 'comment_body': 'I think it should (though maybe it should be possible to de-activate it? not sure if this can be spamy)', 'comment_created': datetime.datetime(2020, 6, 22, 16, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 443978863, 'comment_body': 'I assume this would only happen once when you fit thought no? And the user can also change the io level.', 'comment_created': datetime.datetime(2020, 6, 23, 5, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443979543, 'comment_body': 'Imo this shouldn’t be needed. The user should set this with log level, eg switch from warn to error', 'comment_created': datetime.datetime(2020, 6, 23, 5, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 443981793, 'comment_body': '++', 'comment_created': datetime.datetime(2020, 6, 23, 6, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 443981921, 'comment_body': '```suggestion\r\n\t\t\tif (!can_convert_float_to_int(result_vector))\r\n```\r\nspdlog and log level will take care of this', 'comment_created': datetime.datetime(2020, 6, 23, 6, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 443982108, 'comment_body': '```suggestion\r\n\t\t\treturn fit_impl(result_vector);\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 6, 6, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 443982454, 'comment_body': 'drop it', 'comment_created': datetime.datetime(2020, 6, 23, 6, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 443983209, 'comment_body': '```suggestion\r\n\t\t\tif (!can_convert_float_to_int(result_vector))\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 6, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vigsterkr', 'type': 'User'}, {'comment_id': 444090091, 'comment_body': 'in grid search it would happen quite a few times. But yes with the loglevel that is best taken care of', 'comment_created': datetime.datetime(2020, 6, 23, 9, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444751853, 'comment_body': 'Class doc: ""Implements a reversible mapping from any form of labels to binary labels (+1, -1).""', 'comment_created': datetime.datetime(2020, 6, 24, 9, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444752137, 'comment_body': 'Could we move this docstring to the base class and just leave it empty here (as it contains nothing relevant for this subclass)', 'comment_created': datetime.datetime(2020, 6, 24, 9, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444752745, 'comment_body': 'is that always true? Wouldnt you want to print the actual conversion? I.e. is result_vector[0] always mapped to -1?', 'comment_created': datetime.datetime(2020, 6, 24, 9, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444753019, 'comment_body': 'same here, move to base class and remove here', 'comment_created': datetime.datetime(2020, 6, 24, 9, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444753774, 'comment_body': 'I think we should either introduce this utility function now, or just use CMath::fequals and include this in a larger refactor (it is copy paste)', 'comment_created': datetime.datetime(2020, 6, 24, 9, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444753846, 'comment_body': 'base class', 'comment_created': datetime.datetime(2020, 6, 24, 9, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444754373, 'comment_body': 'what does this do? The same as the `check_is_valid`below? I think it might require that at least two labels exist, so not sure that is appropriate here?', 'comment_created': datetime.datetime(2020, 6, 24, 9, 9, 23, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444754545, 'comment_body': '`Math::fequals` or utility func', 'comment_created': datetime.datetime(2020, 6, 24, 9, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444754875, 'comment_body': 'base class', 'comment_created': datetime.datetime(2020, 6, 24, 9, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444756130, 'comment_body': '```suggestion\r\n\t\t\t    ""Cannot interpret ({}) as binary labels, need exactly two classes."",\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 9, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444756734, 'comment_body': ""Can't this be implemented in the base class?"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444757175, 'comment_body': '@gf712 I think it might not be good to assert this as sometimes labels might only contain one class. But I guess this will pop up if a problem and we can change it then :)', 'comment_created': datetime.datetime(2020, 6, 24, 9, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444757502, 'comment_body': 'Actually udpate. Simply use docstring of base class', 'comment_created': datetime.datetime(2020, 6, 24, 9, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444758255, 'comment_body': ""don't we also need a check valid here? Something that ensures that the labels are contiguous? [0,1,2,3,4, ... ] no gaps.\r\nI wrote some code for this in the links I posted. Either re-use or remove my code :)"", 'comment_created': datetime.datetime(2020, 6, 24, 9, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444758381, 'comment_body': 'same comments as for binary labels class', 'comment_created': datetime.datetime(2020, 6, 24, 9, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444758909, 'comment_body': '""Implements a reversible mapping from any form of labels to one of Shogun\'s target label spaces (binary, multi-class, etc).""', 'comment_created': datetime.datetime(2020, 6, 24, 9, 17, 2, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444759358, 'comment_body': 'CMath::fequals or utility pls :)', 'comment_created': datetime.datetime(2020, 6, 24, 9, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 444759610, 'comment_body': '`inverse_mapping`', 'comment_created': datetime.datetime(2020, 6, 24, 9, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 445269090, 'comment_body': 'the type of return value is different, one is `shared_ptr<BinaryLabels>`, the other one is `shared_ptr<MulticlassLabels>`.\r\n``` cpp\r\nstd::shared_ptr<Labels> BinaryLabelEncoder::fit_transform(const std::shared_ptr<Labels>& labs) override\r\n{\r\n    const auto result_vector = labs->as<DenseLabels>()->get_labels();\r\n    return std::make_shared<BinaryLabels>(\r\n\t          transform_impl(fit_impl(result_vector)));\r\n}\r\n```\r\n```cpp\r\nstd::shared_ptr<Labels> MulticlassLabelsEncoder::fit_transform(const std::shared_ptr<Labels>& labs) override\r\n{\r\n    const auto result_vector = labs->as<DenseLabels>()->get_labels();\r\n    return std::make_shared<MulticlassLabels>(\r\n\t          transform_impl(fit_impl(result_vector)));\r\n}', 'comment_created': datetime.datetime(2020, 6, 25, 2, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 445277577, 'comment_body': 'yes, I should remove `check_is_valid` and only use `ensure_valid` here, `ensure_valid` have more strict constraint as it ensures labels have only contained {-1, +1}.', 'comment_created': datetime.datetime(2020, 6, 25, 2, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 446152869, 'comment_body': 'I am thinking whether we need a check valid here, as inverse_transform is to map from internal encoding to origin encoding. for example, {100, 100, 200, 300} -> {0, 0, 1, 2}, {0, 0, 1, 2} are transformed by internal encoding, but it is not continuous', 'comment_created': datetime.datetime(2020, 6, 26, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 446191583, 'comment_body': 'ah you are right of course :)', 'comment_created': datetime.datetime(2020, 6, 26, 13, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 446520598, 'comment_body': 'whitespaces are weird here. Could you clean up?', 'comment_created': datetime.datetime(2020, 6, 27, 12, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 446521207, 'comment_body': 'typo can not -> cannot', 'comment_created': datetime.datetime(2020, 6, 27, 12, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 446521365, 'comment_body': 'nit: remove this line', 'comment_created': datetime.datetime(2020, 6, 27, 12, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 446549854, 'comment_body': 'I wonder whether this should be templated (for both float and int type) and live somewhere where other conversion tools (safe_convert) live...this might be useful elesewhere\r\n@gf712 thoughts?', 'comment_created': datetime.datetime(2020, 6, 27, 17, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 446549877, 'comment_body': 'some whitespace glitches', 'comment_created': datetime.datetime(2020, 6, 27, 17, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 446844943, 'comment_body': 'hmm, in what situation would there only be one label?', 'comment_created': datetime.datetime(2020, 6, 29, 8, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 446847725, 'comment_body': 'When predicting, although I am not sure this is ever called in that case.', 'comment_created': datetime.datetime(2020, 6, 29, 8, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 446849042, 'comment_body': 'Yes, ideally this would be templated', 'comment_created': datetime.datetime(2020, 6, 29, 8, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 446850495, 'comment_body': 'seems like this is only called in fit and transform, so should be fine', 'comment_created': datetime.datetime(2020, 6, 29, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 446851082, 'comment_body': '@LiuYuHui could you do this change so that when `CMath::fequals` is replaced we can just find and replace these things?', 'comment_created': datetime.datetime(2020, 6, 29, 8, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 446857295, 'comment_body': 'yep + 1 and if it becomes a  problem we just change it', 'comment_created': datetime.datetime(2020, 6, 29, 8, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 448201620, 'comment_body': '```suggestion\r\n\t\tconstexpr float64_t eps = std::numeric_limits<float64_t>::epsilon();\r\n```', 'comment_created': datetime.datetime(2020, 7, 1, 8, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 448212390, 'comment_body': 'when I changed `const` to `constexpr`, I got an error:  `non-static data member ‘eps’ declared ‘constexpr’`', 'comment_created': datetime.datetime(2020, 7, 1, 8, 45, 9, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 448213026, 'comment_body': 'ah yes, it should be `static constexpr float64_t eps = std::numeric_limits<float64_t>::epsilon();`', 'comment_created': datetime.datetime(2020, 7, 1, 8, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'ea60ba610e8c71e84c1715cc4e7a5454cbee6fbf', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e7e3fe1d66d03624b26f04595b7f49778fcc7e', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '266cfc4fed3ad74da74c20c8e9d2f0b49f56fd7c', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aea04e761fe7c63c129c76664f07fc17bf71be67', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '145f0934a2ff662772b5979ade974c65753150a7', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11f8db6a8153744888a10ec63c0ec134b9b660d0', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c2f7d41589927b3f2249d1ae2505bbaf214fab8', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2eb4d58d1c9f54d6424947504883732f25ac233', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
466544458,Add RegressionLabels Encoder,,True,5112,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5112,https://github.com/shogun-toolbox/shogun/pull/5112,closed,81,1,2,2,0,2,0,0,[],2020-08-12 06:18:50+00:00,2020-12-08 13:38:44+00:00,10221594.0,"118 days, 7:19:54","[{'comment_id': 469113700, 'comment_body': '```suggestion\r\n\tclass RegressionLabelEncoder : public LabelEncoder\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 9, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 469114088, 'comment_body': '```suggestion\r\n#define _REGRESSIONLABELENCODER__H__\r\n```\r\ncould you capitalise these to stay consistent please?', 'comment_created': datetime.datetime(2020, 8, 12, 9, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'f90b2da029dd79386de988b8c54ab9e2bd842ed9', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a47ecd31ccb716a2632019d36e034743c6cf35d9', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
419904622,[WIP] Add composite class,,True,5038,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5038,https://github.com/shogun-toolbox/shogun/pull/5038,closed,424,1,11,16,1,47,0,0,[],2020-05-19 06:24:45+00:00,2020-08-30 14:13:14+00:00,8927309.0,"103 days, 7:48:29","[{'comment_id': 427134165, 'comment_body': 'maybe you could put this in a std::thread, so that the bagging is done in parallel', 'comment_created': datetime.datetime(2020, 5, 19, 8, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427142868, 'comment_body': ""btw what you would need here is a BaggingMachine that can handle several different Machine objects. This is just bootstrapping from the features and applying the same Machine N times, I think? @karlnapf I don't think we have an actual EnsembleMachine for this?"", 'comment_created': datetime.datetime(2020, 5, 19, 8, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427150220, 'comment_body': 'I wonder whether the class should be called `Ensemble` ? Or is that inappropriate?', 'comment_created': datetime.datetime(2020, 5, 19, 9, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427150675, 'comment_body': 'I dont think we have, but I am not sure. Think @vigsterkr wrote this stuff', 'comment_created': datetime.datetime(2020, 5, 19, 9, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427151037, 'comment_body': 'be mindful that the train method is not (yet) const. (It should be, one of the things @LiuYuHui could look into after the refactor)', 'comment_created': datetime.datetime(2020, 5, 19, 9, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 427155329, 'comment_body': ""actually, it's not applying the same Machine N times, the `train_machine` method of `BaggingMachine` train `m_machine`, then put the trained `machine` to the `m_bags`, so i have to repeatedly set `m_machine` and `train`.\r\nhttps://github.com/shogun-toolbox/shogun/blob/e29377db4f95b90b52425de084bf6d6ac39d2aba/src/shogun/machine/BaggingMachine.cpp#L159-L219"", 'comment_created': datetime.datetime(2020, 5, 19, 9, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 427157821, 'comment_body': 'but if you scroll up you see that m_bags is cleared before entering the loop', 'comment_created': datetime.datetime(2020, 5, 19, 9, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427158042, 'comment_body': 'https://github.com/shogun-toolbox/shogun/blob/e29377db4f95b90b52425de084bf6d6ac39d2aba/src/shogun/machine/BaggingMachine.cpp#L144-L145', 'comment_created': datetime.datetime(2020, 5, 19, 9, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427159526, 'comment_body': ""Shouldn't there be a `EnsembleMachine` and then `Composite` becomes a helper class in `Pipeline` to have the interface `with` and `then` to add things to the ensemble?"", 'comment_created': datetime.datetime(2020, 5, 19, 9, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427172489, 'comment_body': ""oh, i see, so `BaggingMachine` can only train the same Machine N times? that's weird"", 'comment_created': datetime.datetime(2020, 5, 19, 9, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 427180103, 'comment_body': 'It\'s not weird (imo), see on [wikipedia](https://en.wikipedia.org/wiki/Bootstrap_aggregating) (""Bagging is a special case of the model averaging approach""). Model averaging (or ensemble learning) is the more general algorithm, which is what you need here. But it seems like we don\'t have it in shogun.', 'comment_created': datetime.datetime(2020, 5, 19, 9, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 427183304, 'comment_body': 'thanks, so it seems like that i should add the `EnsembleMachine` class to shogun.', 'comment_created': datetime.datetime(2020, 5, 19, 10, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 427189931, 'comment_body': ""Yes I think so. it shouldn't be too difficult. You can just have a loop over a vector of Machine in the train machine class function and put a `#pragma parallel` over the loop. You could actually test and see if it would be better to write it with `std::thread`, but that is probably more for later on"", 'comment_created': datetime.datetime(2020, 5, 19, 10, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461486937, 'comment_body': '@gf712 I am not sure if my implementation is right, the accuracy is very low.', 'comment_created': datetime.datetime(2020, 7, 28, 10, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 461489914, 'comment_body': 'Why not inherit from `Machine`?', 'comment_created': datetime.datetime(2020, 7, 28, 10, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461490133, 'comment_body': '```suggestion\r\n\t\tEnsembleMachine(const T& machines)\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 7, 28, 10, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461491038, 'comment_body': 'I would delete the copy constructor if possible, because you are doing shallow copies of the `Machine`s.', 'comment_created': datetime.datetime(2020, 7, 28, 10, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461491338, 'comment_body': '```suggestion\r\n\t\t\treturn ""EnsembleMachine"";\r\n```', 'comment_created': datetime.datetime(2020, 7, 28, 10, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461493260, 'comment_body': 'why `EXPECT_GE`? The result should be deterministic, ie `EXPECT_EQ`', 'comment_created': datetime.datetime(2020, 7, 28, 10, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461494088, 'comment_body': 'have you tried to look at the data that is being generated here? I am not sure I understand the logic..', 'comment_created': datetime.datetime(2020, 7, 28, 10, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461494685, 'comment_body': 'Actually not sure... @vigsterkr should we enable copy constructors in `Machine` algorithms?', 'comment_created': datetime.datetime(2020, 7, 28, 10, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461494966, 'comment_body': 'so I guess this is then passed to `EnsembleMachine`?', 'comment_created': datetime.datetime(2020, 7, 28, 10, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461495061, 'comment_body': 'I copy those code from `MulticlassLibLinear_unittest`.', 'comment_created': datetime.datetime(2020, 7, 28, 10, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 461495170, 'comment_body': 'does this compile? pretty sure it cannot be `const`?', 'comment_created': datetime.datetime(2020, 7, 28, 10, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 461497792, 'comment_body': ""yes, the compiler doesn't complain anything, it can not be `const` because use `set_label` in here?"", 'comment_created': datetime.datetime(2020, 7, 28, 11, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 461525804, 'comment_body': ""ah nvm, it's the `shared_ptr` that is `const`, not the underlying type"", 'comment_created': datetime.datetime(2020, 7, 28, 12, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 462079986, 'comment_body': 'but then if I have 100 machines and only set 8 threads, 92 machines will be trained in sequentially? ', 'comment_created': datetime.datetime(2020, 7, 29, 6, 58, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 462080437, 'comment_body': 'why do you need to override clone?', 'comment_created': datetime.datetime(2020, 7, 29, 6, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 462080689, 'comment_body': 'you can remove this from here no?', 'comment_created': datetime.datetime(2020, 7, 29, 7, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 462081104, 'comment_body': ""I still don't understand why this `EXPECT_GE` rather than `EXPECT_EQ`? Shouldn't you always get the same result?"", 'comment_created': datetime.datetime(2020, 7, 29, 7, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 462858567, 'comment_body': ""shouldn't these methods override the Machine virtual members? Otherwise this won't work with the base class"", 'comment_created': datetime.datetime(2020, 7, 30, 9, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 464281207, 'comment_body': '@gf712 when I run this meta example, there is a exception that "" Parameter EnsembleMachine::machine does not exist."", but in build/src/shogun/class_list.cpp, I can find `EnsembleMachine`.', 'comment_created': datetime.datetime(2020, 8, 3, 8, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 464290543, 'comment_body': 'you register the parameters in a function that seems to be never called. registration should happen when you construct an object, so you should move this to the constructor', 'comment_created': datetime.datetime(2020, 8, 3, 9, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 464290633, 'comment_body': '```suggestion\r\n\t\t\tSG_ADD(&m_machines, ""machines"", ""Array of machines."", ParameterProperties::HYPER);\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 9, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 464290992, 'comment_body': '@karlnapf is this ok as a hyperparameter?', 'comment_created': datetime.datetime(2020, 8, 3, 9, 13, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 464291377, 'comment_body': '@LiuYuHui the error happens here. I commented below on what is causing the issue', 'comment_created': datetime.datetime(2020, 8, 3, 9, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467802629, 'comment_body': ""Isn't this defined anywhere else? If not you should move this to another file, because it should be pretty common"", 'comment_created': datetime.datetime(2020, 8, 10, 10, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467803139, 'comment_body': ""shouldn't the type just be `std::pair<std::string, variant<std::shared_ptr<Transformer>, std::shared_ptr<Machine>>>`?"", 'comment_created': datetime.datetime(2020, 8, 10, 10, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467803653, 'comment_body': 'either pass this by const& or std::move when you push_back', 'comment_created': datetime.datetime(2020, 8, 10, 10, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467803790, 'comment_body': 'either pass this by const& or std::move in assignment', 'comment_created': datetime.datetime(2020, 8, 10, 10, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467805044, 'comment_body': 'does this work? Is this creating a default `EnsembleMachine` in the default constructor?', 'comment_created': datetime.datetime(2020, 8, 10, 10, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467805252, 'comment_body': 'could you add some documentation please?', 'comment_created': datetime.datetime(2020, 8, 10, 10, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467805325, 'comment_body': 'documentation', 'comment_created': datetime.datetime(2020, 8, 10, 10, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467805541, 'comment_body': 'add class documentation', 'comment_created': datetime.datetime(2020, 8, 10, 10, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467805582, 'comment_body': 'add class documentation', 'comment_created': datetime.datetime(2020, 8, 10, 10, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467853411, 'comment_body': 'i plan to make this function accept both lvalue and rvalue.', 'comment_created': datetime.datetime(2020, 8, 10, 11, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}, {'comment_id': 468305958, 'comment_body': ""it seems work, the compiler don't complain."", 'comment_created': datetime.datetime(2020, 8, 11, 3, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'LiuYuHui', 'type': 'User'}]","[{'commit_sha': 'fb0c7f5df08800fe7025f5423d05811a45dc893e', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89bd963c1d549b2941bbdac6814515d6116c32b5', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52cb1e45256703c89ca3c877c6a7a753fd7e34d3', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03f20d09d33b9f83cb78ca135da9d74d8ede9472', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c39006dcc5a1465375048e4a917e909b90f1c2ff', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25265cec347c061c7ac1ed2ef9767b72603dcb3b', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6e524cafb15dc6798c77cca1b504d965045efc7', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd60da71a9d7bdbb83ae3f815783ac9b10bdb44d4', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a79443958c1eb677c2a53b80bc1cd71446f2c4d4', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9567e38bc05b6a5dd567d5a6ad4e71c2b0e03139', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '982b0455d1dc32fc28445265268ee49e07c07cda', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '623b7a25b5602dfe5174d1d8bc1abf23fef9c9f6', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '179b419b816e8e24cc105da5ce5be3993735fcd2', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e84455fc50e5597bc985225546ba032b4231b22', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c68b1bee9c76b043b0663282762ded1b0cd504b1', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '346162b438d4e305ed5dccf8732c9d5c614abba2', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
464369416,Suggest class name if class name not found,fixes #4475 ,True,5110,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5110,https://github.com/shogun-toolbox/shogun/pull/5110,closed,44,2,4,4,8,10,0,0,[],2020-08-07 03:34:04+00:00,2020-12-08 13:39:29+00:00,10663525.0,"123 days, 10:05:25","[{'comment_id': 467020472, 'comment_body': 'can you move this declaration please? It is in the way of doxygen string', 'comment_created': datetime.datetime(2020, 8, 7, 12, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467061059, 'comment_body': ""on stack? Don't we do shogun objects on heap usually?"", 'comment_created': datetime.datetime(2020, 8, 7, 14, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 467079489, 'comment_body': ""probably should, I think we should be consistent even if here it isn't needed"", 'comment_created': datetime.datetime(2020, 8, 7, 14, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467373582, 'comment_body': 'I think this should be in base_types.h and also have the same base types that are forward declared there', 'comment_created': datetime.datetime(2020, 8, 8, 7, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467806019, 'comment_body': 'could you just this to a more meaningful name please?', 'comment_created': datetime.datetime(2020, 8, 10, 10, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467806379, 'comment_body': '@vigsterkr do you know if there is another way to lookup the class name and get the name as a string?', 'comment_created': datetime.datetime(2020, 8, 10, 10, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467806480, 'comment_body': 'what about the base class names?', 'comment_created': datetime.datetime(2020, 8, 10, 10, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 467806810, 'comment_body': 'this will have to be cleaned up in the future, this copy is not necessary. But can be done in another pr', 'comment_created': datetime.datetime(2020, 8, 10, 10, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 468063041, 'comment_body': 'Not sure if this is of any help: https://github.com/shogun-toolbox/shogun/blob/develop/src/shogun/lib/any.h#L856', 'comment_created': datetime.datetime(2020, 8, 10, 17, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479382282, 'comment_body': ""the problem is that it isn't cross platform, i.e. doesn't work with msvc "", 'comment_created': datetime.datetime(2020, 8, 28, 15, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'ca7cfe96abe26931c0fb0e263185fc0db5ac1f83', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b36075db6a92f4333db82b3aeff4c706fdd60900', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f995509d30532bd5d6fdd465e51fd03175964069', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e380b589af9e6657cceabdebd8c1b0e46dbb8cb9', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48
467755318,ADD CVMachine,,False,5113,https://api.github.com/repos/shogun-toolbox/shogun/pulls/5113,https://github.com/shogun-toolbox/shogun/pull/5113,closed,263,125,17,6,2,23,1,0,[{'name': 'stale'}],2020-08-14 04:10:17+00:00,2021-06-14 10:16:57+00:00,26287600.0,"304 days, 6:06:40","[{'comment_id': 479335135, 'comment_body': 'Could you give this class a docstring that desribes its purpose?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479335482, 'comment_body': 'some formatting went wrong here :)', 'comment_created': datetime.datetime(2020, 8, 28, 14, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479335685, 'comment_body': 'pls use `kSeed`', 'comment_created': datetime.datetime(2020, 8, 28, 14, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479336295, 'comment_body': 'Also suggested name change `CVMachine`', 'comment_created': datetime.datetime(2020, 8, 28, 14, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479336760, 'comment_body': 'could you make this a shared pointer?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479337211, 'comment_body': 'I assume this comes from a separate run? What about actually computing this by hand (i.e. running the xval by hand on these parameter values)', 'comment_created': datetime.datetime(2020, 8, 28, 14, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479337494, 'comment_body': 'yes to this interface change!', 'comment_created': datetime.datetime(2020, 8, 28, 14, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479337659, 'comment_body': ""(don't forget to update the notebooks as wel!)"", 'comment_created': datetime.datetime(2020, 8, 28, 14, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479338180, 'comment_body': 'sure about the move here? The caller might still need the old references?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479338957, 'comment_body': 'are these const ?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479339683, 'comment_body': 'is `Machine::apply` now able to work with const labels features?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479340099, 'comment_body': 'I wonder whether fixing the type here to float64 is best?\r\n@gf712 what do you think?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479340769, 'comment_body': 'nice idea to use this! :)', 'comment_created': datetime.datetime(2020, 8, 28, 14, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479341883, 'comment_body': ""I'd prefer if every parameter would act on a clone of the machine (without the data). This would make it easier to parallelize this code later"", 'comment_created': datetime.datetime(2020, 8, 28, 14, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479342919, 'comment_body': 'this might kill using the queue, but we could just sort the results afterwards and each fold writes to an array', 'comment_created': datetime.datetime(2020, 8, 28, 14, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479379948, 'comment_body': 'Here it is fine, because he is passing the shared_ptr by value', 'comment_created': datetime.datetime(2020, 8, 28, 15, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 479380810, 'comment_body': 'Hmm we can use the widest representation, and then it cast down when passed to the setters? Otherwise this could be Any..', 'comment_created': datetime.datetime(2020, 8, 28, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 479406897, 'comment_body': 'What do you mean exactly?', 'comment_created': datetime.datetime(2020, 8, 28, 16, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 479775627, 'comment_body': 'I mean either we use a std::vector<Any> for each parameter space, or represent all parameters as `float64`, since then we can convert that to any other type, like `int64`. We could template this, but not sure if this has to be exposed to interfaces?', 'comment_created': datetime.datetime(2020, 8, 30, 14, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 481100828, 'comment_body': 'ah I see. I think probably it is best to keep the interface simple here. @LiuYuHui maybe you can add a test/use-case/example for a float parameter and an int parameter (where the float is converted, and a runtime error occurs if the float cannot be casted to an int in a lossless manner)', 'comment_created': datetime.datetime(2020, 9, 1, 12, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'karlnapf', 'type': 'User'}, {'comment_id': 538239433, 'comment_body': 'Could you format this with clang-format please?', 'comment_created': datetime.datetime(2020, 12, 8, 10, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 538241235, 'comment_body': 'Maybe you could add a helper function/static class function to create these parameter maps?\r\n```cpp\r\nauto params = CVMachine<T>::create_parameter_map({""tau"", {0.1, 0.2, 0.5, 0.8, 2}});\r\n// or\r\nauto params = create_parameter_map({""tau"", {0.1, 0.2, 0.5, 0.8, 2}});\r\n```', 'comment_created': datetime.datetime(2020, 12, 8, 10, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}, {'comment_id': 538242471, 'comment_body': 'Could you add a test case please?', 'comment_created': datetime.datetime(2020, 12, 8, 10, 58, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gf712', 'type': 'User'}]","[{'commit_sha': 'f29267de490343d5bbeaa08f4ac8fb05359ee73d', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f41eddebbe1a109ddf19f165fcefbb9356f8187', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a330f537f240c0ad857b89afb570359f14c12339', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58c05f3a5bec3f9edcad00fecd997af83b082cdf', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd628a35eb92af859298cffd8751eb84c09c014', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3718e4574bd1efae87e41b10bab71b7e986bedbb', 'committer_username': 'LiuYuHui', 'committer_name': 'Yuhui Liu', 'committer_email': None, 'commit_date': datetime.datetime(2015, 8, 23, 5, 44, 24, tzinfo=datetime.timezone.utc)}]",Yuhui Liu,13926137,,User,,46,,224,48

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1555094,shogun,shogun-toolbox/shogun,C++,1038,3024,216,248,17589,427,60,10,"[{'id': 491435962, 'number': 5127, 'closed': datetime.datetime(2021, 10, 12, 20, 58, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 23, 3, 2, tzinfo=datetime.timezone.utc), 'time_taken': 33242216.0, 'time_delta': '384 days, 17:56:56', 'additions': 81, 'deletions': 3, 'state': 'closed'}, {'id': 467755318, 'number': 5113, 'closed': datetime.datetime(2021, 6, 14, 10, 16, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 4, 10, 17, tzinfo=datetime.timezone.utc), 'time_taken': 26287600.0, 'time_delta': '304 days, 6:06:40', 'additions': 263, 'deletions': 125, 'state': 'closed'}, {'id': 466544458, 'number': 5112, 'closed': datetime.datetime(2020, 12, 8, 13, 38, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 6, 18, 50, tzinfo=datetime.timezone.utc), 'time_taken': 10221594.0, 'time_delta': '118 days, 7:19:54', 'additions': 81, 'deletions': 1, 'state': 'closed'}, {'id': 464369416, 'number': 5110, 'closed': datetime.datetime(2020, 12, 8, 13, 39, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 3, 34, 4, tzinfo=datetime.timezone.utc), 'time_taken': 10663525.0, 'time_delta': '123 days, 10:05:25', 'additions': 44, 'deletions': 2, 'state': 'closed'}, {'id': 462164741, 'number': 5104, 'closed': datetime.datetime(2020, 8, 10, 11, 54, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 13, 2, 57, tzinfo=datetime.timezone.utc), 'time_taken': 600684.0, 'time_delta': '6 days, 22:51:24', 'additions': 244, 'deletions': 411, 'state': 'closed'}, {'id': 459121351, 'number': 5103, 'closed': datetime.datetime(2020, 8, 5, 8, 38, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 12, 14, 26, tzinfo=datetime.timezone.utc), 'time_taken': 505427.0, 'time_delta': '5 days, 20:23:47', 'additions': 135, 'deletions': 199, 'state': 'closed'}, {'id': 455682184, 'number': 5101, 'closed': datetime.datetime(2020, 7, 28, 5, 38, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 12, 45, 6, tzinfo=datetime.timezone.utc), 'time_taken': 406409.0, 'time_delta': '4 days, 16:53:29', 'additions': 329, 'deletions': 415, 'state': 'closed'}, {'id': 450942615, 'number': 5099, 'closed': datetime.datetime(2020, 7, 17, 16, 20, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 9, 8, 2, tzinfo=datetime.timezone.utc), 'time_taken': 25931.0, 'time_delta': '7:12:11', 'additions': 28, 'deletions': 36, 'state': 'closed'}, {'id': 446589144, 'number': 5093, 'closed': datetime.datetime(2020, 7, 9, 6, 36, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 3, 8, 42, tzinfo=datetime.timezone.utc), 'time_taken': 12487.0, 'time_delta': '3:28:07', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 443908346, 'number': 5089, 'closed': datetime.datetime(2020, 7, 12, 13, 35, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 7, 49, 40, tzinfo=datetime.timezone.utc), 'time_taken': 798366.0, 'time_delta': '9 days, 5:46:06', 'additions': 547, 'deletions': 898, 'state': 'closed'}, {'id': 440903356, 'number': 5083, 'closed': datetime.datetime(2020, 7, 6, 13, 3, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 12, 18, 49, tzinfo=datetime.timezone.utc), 'time_taken': 780281.0, 'time_delta': '9 days, 0:44:41', 'additions': 0, 'deletions': 88, 'state': 'closed'}, {'id': 438580439, 'number': 5078, 'closed': datetime.datetime(2020, 6, 30, 8, 3, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 13, 42, 29, tzinfo=datetime.timezone.utc), 'time_taken': 584489.0, 'time_delta': '6 days, 18:21:29', 'additions': 29, 'deletions': 34, 'state': 'closed'}, {'id': 438278001, 'number': 5076, 'closed': datetime.datetime(2020, 6, 23, 13, 3, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 2, 40, 4, tzinfo=datetime.timezone.utc), 'time_taken': 37412.0, 'time_delta': '10:23:32', 'additions': 37, 'deletions': 52, 'state': 'closed'}, {'id': 437866106, 'number': 5075, 'closed': datetime.datetime(2020, 7, 1, 8, 22, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 11, 10, tzinfo=datetime.timezone.utc), 'time_taken': 767542.0, 'time_delta': '8 days, 21:12:22', 'additions': 26, 'deletions': 42, 'state': 'closed'}, {'id': 437405228, 'number': 5072, 'closed': datetime.datetime(2020, 6, 21, 21, 51, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 12, 15, 35, tzinfo=datetime.timezone.utc), 'time_taken': 120934.0, 'time_delta': '1 day, 9:35:34', 'additions': 28, 'deletions': 80, 'state': 'closed'}, {'id': 437381721, 'number': 5071, 'closed': datetime.datetime(2020, 6, 20, 11, 30, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 8, 1, 5, tzinfo=datetime.timezone.utc), 'time_taken': 12554.0, 'time_delta': '3:29:14', 'additions': 26, 'deletions': 42, 'state': 'closed'}, {'id': 434268288, 'number': 5067, 'closed': datetime.datetime(2020, 7, 1, 15, 24, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 3, 44, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1424402.0, 'time_delta': '16 days, 11:40:02', 'additions': 557, 'deletions': 0, 'state': 'closed'}, {'id': 433972795, 'number': 5066, 'closed': datetime.datetime(2020, 6, 16, 12, 17, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 7, 36, 36, tzinfo=datetime.timezone.utc), 'time_taken': 276059.0, 'time_delta': '3 days, 4:40:59', 'additions': 38, 'deletions': 51, 'state': 'closed'}, {'id': 427837958, 'number': 5055, 'closed': datetime.datetime(2020, 6, 15, 7, 40, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 13, 25, 10, tzinfo=datetime.timezone.utc), 'time_taken': 929738.0, 'time_delta': '10 days, 18:15:38', 'additions': 128, 'deletions': 90, 'state': 'closed'}, {'id': 426913521, 'number': 5053, 'closed': datetime.datetime(2020, 7, 31, 6, 41, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 1, 40, 58, tzinfo=datetime.timezone.utc), 'time_taken': 5029248.0, 'time_delta': '58 days, 5:00:48', 'additions': 43, 'deletions': 38, 'state': 'closed'}, {'id': 419904622, 'number': 5038, 'closed': datetime.datetime(2020, 8, 30, 14, 13, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 6, 24, 45, tzinfo=datetime.timezone.utc), 'time_taken': 8927309.0, 'time_delta': '103 days, 7:48:29', 'additions': 424, 'deletions': 1, 'state': 'closed'}, {'id': 406037860, 'number': 5011, 'closed': datetime.datetime(2020, 6, 14, 8, 29, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 12, 38, 14, tzinfo=datetime.timezone.utc), 'time_taken': 4737100.0, 'time_delta': '54 days, 19:51:40', 'additions': 1215, 'deletions': 917, 'state': 'closed'}, {'id': 398494071, 'number': 4995, 'closed': datetime.datetime(2020, 4, 27, 6, 46, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 4, 9, 11, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1978539.0, 'time_delta': '22 days, 21:35:39', 'additions': 1914, 'deletions': 1735, 'state': 'closed'}, {'id': 397931691, 'number': 4992, 'closed': datetime.datetime(2020, 4, 3, 10, 41, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 3, 4, 38, 35, tzinfo=datetime.timezone.utc), 'time_taken': 21748.0, 'time_delta': '6:02:28', 'additions': 5, 'deletions': 6, 'state': 'closed'}, {'id': 394191581, 'number': 4962, 'closed': datetime.datetime(2020, 3, 29, 7, 53, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 26, 14, 5, 54, tzinfo=datetime.timezone.utc), 'time_taken': 236847.0, 'time_delta': '2 days, 17:47:27', 'additions': 38, 'deletions': 41, 'state': 'closed'}, {'id': 387579578, 'number': 4918, 'closed': datetime.datetime(2020, 3, 18, 11, 23, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 4, 1, 18, tzinfo=datetime.timezone.utc), 'time_taken': 458524.0, 'time_delta': '5 days, 7:22:04', 'additions': 191, 'deletions': 78, 'state': 'closed'}, {'id': 385351438, 'number': 4899, 'closed': datetime.datetime(2020, 3, 11, 10, 39, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 2, 2, 1, tzinfo=datetime.timezone.utc), 'time_taken': 203873.0, 'time_delta': '2 days, 8:37:53', 'additions': 34, 'deletions': 1, 'state': 'closed'}, {'id': 384819177, 'number': 4887, 'closed': datetime.datetime(2020, 3, 6, 14, 21, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 13, 24, 11, tzinfo=datetime.timezone.utc), 'time_taken': 3457.0, 'time_delta': '0:57:37', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 382352715, 'number': 4869, 'closed': datetime.datetime(2020, 3, 5, 8, 7, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 12, 18, 37, tzinfo=datetime.timezone.utc), 'time_taken': 244110.0, 'time_delta': '2 days, 19:48:30', 'additions': 180, 'deletions': 40, 'state': 'closed'}, {'id': 380757133, 'number': 4855, 'closed': datetime.datetime(2020, 2, 27, 18, 53, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 27, 10, 26, 59, tzinfo=datetime.timezone.utc), 'time_taken': 30413.0, 'time_delta': '8:26:53', 'additions': 23, 'deletions': 25, 'state': 'closed'}, {'id': 378855542, 'number': 4837, 'closed': datetime.datetime(2020, 2, 26, 13, 8, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 24, 8, 3, 23, tzinfo=datetime.timezone.utc), 'time_taken': 191095.0, 'time_delta': '2 days, 5:04:55', 'additions': 37, 'deletions': 39, 'state': 'closed'}, {'id': 378274858, 'number': 4834, 'closed': datetime.datetime(2020, 2, 26, 12, 35, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 21, 13, 10, 11, tzinfo=datetime.timezone.utc), 'time_taken': 429893.0, 'time_delta': '4 days, 23:24:53', 'additions': 66, 'deletions': 0, 'state': 'closed'}, {'id': 377646718, 'number': 4831, 'closed': datetime.datetime(2020, 3, 5, 8, 21, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 20, 9, 35, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1205158.0, 'time_delta': '13 days, 22:45:58', 'additions': 27, 'deletions': 16, 'state': 'closed'}, {'id': 358990732, 'number': 4810, 'closed': datetime.datetime(2020, 4, 1, 10, 20, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 3, 13, 36, 27, tzinfo=datetime.timezone.utc), 'time_taken': 7677847.0, 'time_delta': '88 days, 20:44:07', 'additions': 41, 'deletions': 4, 'state': 'closed'}, {'id': 358580988, 'number': 4809, 'closed': datetime.datetime(2020, 1, 2, 8, 10, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 2, 8, 9, 2, tzinfo=datetime.timezone.utc), 'time_taken': 103.0, 'time_delta': '0:01:43', 'additions': 724, 'deletions': 608, 'state': 'closed'}, {'id': 357487909, 'number': 4806, 'closed': datetime.datetime(2020, 3, 16, 18, 27, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 28, 13, 51, 42, tzinfo=datetime.timezone.utc), 'time_taken': 6842127.0, 'time_delta': '79 days, 4:35:27', 'additions': 268, 'deletions': 3, 'state': 'closed'}]"
253049872,shogun-libtooling,shogun-toolbox/shogun-libtooling,C++,1,1,9,2,5,1,1,1,"[{'id': 449302578, 'number': 2, 'closed': None, 'created': datetime.datetime(2020, 7, 15, 7, 34, 52, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 344, 'deletions': 0, 'state': 'open'}, {'id': 424949588, 'number': 1, 'closed': datetime.datetime(2020, 6, 14, 17, 15, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 29, 8, 0, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1415696.0, 'time_delta': '16 days, 9:14:56', 'additions': 176, 'deletions': 0, 'state': 'closed'}]"
