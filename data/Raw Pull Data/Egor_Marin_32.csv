pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1379412431,[GSoC] Parallelisation of AnalysisBase with multiprocessing and dask,"Fixes #4158
~~Also fixes # 4259 as a check in `AnalysisBase.run()`~~ no it doesn't, I'll do another PR that does that.


~~Related to #4158, does not help f-i-x-i-n-g (cudos to github bot) the issue per se but paves the way towards that.~~

Changes made in this Pull Request:
- several methods added `analysis.base.AnalysisBase`, implementing backend configuration, splitting of the frames for analysis, computation, and results aggregation
- module `analysis.backends` introduces `BackendBase` class, as well as built-in backends `BackendMultiprocessing`, `BackendSerial` and `BackendDask`, implementing the `apply` method for computations using various backends
- module `analysis.results` introduces `ResultsGroup` class that allows for merging of multiple uniform `Results` objects from the same module, given appropriate aggregation functions


PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?


<!-- readthedocs-preview mdanalysis start -->
----
:books: Documentation preview :books:: https://mdanalysis--4162.org.readthedocs.build/en/4162/

<!-- readthedocs-preview mdanalysis end -->",True,4162,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/4162,https://github.com/MDAnalysis/mdanalysis/pull/4162,closed,2373,362,25,288,78,604,3,4,"[{'name': 'enhancement'}, {'name': 'parallelization'}, {'name': 'GSoC'}]",2023-06-05 17:38:25+00:00,2024-08-16 19:12:31+00:00,37848846.0,"438 days, 1:34:06","[{'comment_id': 1218732201, 'comment_body': 'We typically write out `**kwargs` in the code.', 'comment_created': datetime.datetime(2023, 6, 6, 0, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1218732682, 'comment_body': 'restore the doc string for `run()`', 'comment_created': datetime.datetime(2023, 6, 6, 0, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1218733252, 'comment_body': 'indentation of next line is ugly', 'comment_created': datetime.datetime(2023, 6, 6, 0, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1218734056, 'comment_body': 'Why do we need our own `delayed()`.\r\n\r\nCan\'t we do\r\n```python\r\ntry:\r\n   from dask import delayed\r\nexcept ImportError:\r\n   def delayed(*args, **kwargs):\r\n      raise ImportError(""Please install dask for this functionality"")\r\n```', 'comment_created': datetime.datetime(2023, 6, 6, 0, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1218734730, 'comment_body': ""Raise an exception as soon as we enter a code path that requires dask but we don't have it imported. "", 'comment_created': datetime.datetime(2023, 6, 6, 0, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1224091825, 'comment_body': ""Maybe it's not necessary to have all args parsed from `run` to compute if you run `_setup_frames` in the current `run` instead."", 'comment_created': datetime.datetime(2023, 6, 9, 9, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1224093193, 'comment_body': 'explicitly write `scheduler=None`', 'comment_created': datetime.datetime(2023, 6, 9, 9, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1224220161, 'comment_body': ""I don't understand what you're proposing :("", 'comment_created': datetime.datetime(2023, 6, 9, 12, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1224220329, 'comment_body': 'good idea!', 'comment_created': datetime.datetime(2023, 6, 9, 12, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1224262446, 'comment_body': 'I mean you can\r\n```python\r\ndef _compute(self, verbose=None, *, progressbar_kwargs={}):\r\n   ...\r\n\r\ndef run(self, start=None, stop=None, step=None, frames=None,\r\n            verbose=None, scheduler=None, \r\n            *, progressbar_kwargs={},\r\n            ):\r\n\r\n        self._setup_frames(self._trajectory, start=start, stop=stop,\r\n                           step=step, frames=frames)\r\n    ...\r\n```\r\nbecause `_setup_frames` will store these values as attributes.\r\n\r\nBesides, you need to make sure `self.start` etc are assigned to what the user has requested (not just the last bslice)', 'comment_created': datetime.datetime(2023, 6, 9, 12, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1224467148, 'comment_body': ""The name confused me a lot which makes me think it's for single node (local?) dask usage."", 'comment_created': datetime.datetime(2023, 6, 9, 15, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1224468886, 'comment_body': 'Raise an error when dask is using threads scheduler.', 'comment_created': datetime.datetime(2023, 6, 9, 15, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1228637239, 'comment_body': 'Imports should all go at the top of the file.', 'comment_created': datetime.datetime(2023, 6, 13, 20, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1228642561, 'comment_body': ""I don't think we want to leave `_conclude()` here, see discussion on Discord.\r\n\r\n@orbeckst snippet for reference:\r\n```python\r\ndef run(start, stop):\r\n    if run in serial:\r\n         self._run(start, stop)\r\n    else:\r\n         # Make bslices\r\n         self._run(bslice_start, bslice_stop)\r\n         _parallel_conclude() # combines the self.results of each worker object\r\n    _conclude() # without changes\r\n```"", 'comment_created': datetime.datetime(2023, 6, 13, 20, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1228644013, 'comment_body': ""This part is getting difficult to follow with all other comments, but it's `self.run` or `self._compute`?"", 'comment_created': datetime.datetime(2023, 6, 13, 20, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1232865335, 'comment_body': ""not clear what the `scheduler` kwarg really does ‚Äî if you don't know dask then it makes zero sense. Should be made clear that it's related to parallelization and `n_workers`.\r\n\r\n`n_workers` should be explained, too.\r\n\r\nImagine reading the docs as someone who is not you... will that person be able to discover new functionality or learn enough to make use of your new features?"", 'comment_created': datetime.datetime(2023, 6, 16, 22, 58, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1232866095, 'comment_body': ""Where would syntax warnings come from? From Python??\r\n\r\nRemove ‚Äî it's noisy code. If you need to teach your IDE not to warn you then you have to do it in a way that doesn't introduce junk code."", 'comment_created': datetime.datetime(2023, 6, 16, 23, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1232866493, 'comment_body': '""this functionality"" should be made more explicit: which arguments/values triggered the exception?', 'comment_created': datetime.datetime(2023, 6, 16, 23, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1246753508, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 6, 29, 15, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246753840, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 6, 29, 15, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246755201, 'comment_body': ""it's now used as a helper function for multiprocessing"", 'comment_created': datetime.datetime(2023, 6, 29, 15, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246755314, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 6, 29, 15, 7, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246755403, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 6, 29, 15, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246757855, 'comment_body': 'done, I guess? `_setup_frames` is now called inside `run` instead of `_compute`', 'comment_created': datetime.datetime(2023, 6, 29, 15, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246759080, 'comment_body': 'actually, now I call `_compute` instead of `run` (which makes much more sense), and `scheduler` keyword is not used there.', 'comment_created': datetime.datetime(2023, 6, 29, 15, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246759616, 'comment_body': 'now we have only `multiprocessing` and `dask`üëç', 'comment_created': datetime.datetime(2023, 6, 29, 15, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246760230, 'comment_body': ""I'm currently explicitly passing `processes` to dask, so I guess it's ok"", 'comment_created': datetime.datetime(2023, 6, 29, 15, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246760667, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 6, 29, 15, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246765158, 'comment_body': 'I believe the docs are now clearer than they used to be, thanks.', 'comment_created': datetime.datetime(2023, 6, 29, 15, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246765608, 'comment_body': 'yep, fixed, sorry for that.', 'comment_created': datetime.datetime(2023, 6, 29, 15, 15, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1246767896, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2023, 6, 29, 15, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1247546235, 'comment_body': ""I am not sure this is the best way to mark whether one analysis is **currently** parallelizable.\r\n\r\nPreviously, when I dealt with `Transformation`, I added a parameter `parallelizable` so that every subclass can decide whether to raise an error/override to use serial code path. https://github.com/MDAnalysis/mdanalysis/blob/develop/package/MDAnalysis/transformations/base.py#L108\r\n\r\nMaybe it's a better solution?"", 'comment_created': datetime.datetime(2023, 6, 30, 7, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1247554336, 'comment_body': ""It's probably already on your to-do list, but I assume we do want it to support `dask.distributed.Client`?"", 'comment_created': datetime.datetime(2023, 6, 30, 7, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1247559368, 'comment_body': ""This is a useful function and people (e.g. me) might want to utilize it independently in other contexts. Maybe it's better to move this into `util` (as in pmda?)"", 'comment_created': datetime.datetime(2023, 6, 30, 7, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1250324848, 'comment_body': 'Fuse them?', 'comment_created': datetime.datetime(2023, 7, 3, 6, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250326763, 'comment_body': 'Is this necessary?', 'comment_created': datetime.datetime(2023, 7, 3, 6, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250330573, 'comment_body': 'Defining a function here increase code complexity IMO. Is it possible to move it elsewhere? A possibility is a private function of the module, but since the name is very clear and it is quite general, moving it to `MDAnalysis.lib.util` might be a good alternative too?', 'comment_created': datetime.datetime(2023, 7, 3, 6, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250333665, 'comment_body': 'If you move this, add a docstring. And maybe the name ""array"" is too limiting since the coercion to a set would work with many different collections. `collection_is_boolean` or similar might be better?', 'comment_created': datetime.datetime(2023, 7, 3, 6, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250342098, 'comment_body': 'Would defining this before `slices=` make the code a bit more readable? You could also do a small optimization in the case `array_is_boolean`, since `frames` and `range(len(frames))` would be the same?\r\n\r\nWould using NumPy be more efficient to define the range?', 'comment_created': datetime.datetime(2023, 7, 3, 6, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250344242, 'comment_body': 'Check that `n_workers > 0`?', 'comment_created': datetime.datetime(2023, 7, 3, 6, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250344613, 'comment_body': 'Is the indentation here correct?', 'comment_created': datetime.datetime(2023, 7, 3, 6, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250346634, 'comment_body': 'Following the above, do these need a `.. versionadded:: 2.6.0` (or whatever version will be relevant)?', 'comment_created': datetime.datetime(2023, 7, 3, 6, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250347534, 'comment_body': 'Describe the changes you introduced.', 'comment_created': datetime.datetime(2023, 7, 3, 6, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250350939, 'comment_body': ""This function needs to be properly documented, so that users know exactly what it does and when they'd like to override it."", 'comment_created': datetime.datetime(2023, 7, 3, 6, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1250358135, 'comment_body': ""I'd add a comment on why this is necessary. Same for other classes where some schedulers are not supported."", 'comment_created': datetime.datetime(2023, 7, 3, 7, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1252326037, 'comment_body': ""I rewrote the `_setup_bslices` slightly, and now I think it doesn't have a place for separate function inside it -- the current version returns (n, 2) shaped ndarray with frame index during iteration & frame index in trajectory, and it looks too specific for a separate function."", 'comment_created': datetime.datetime(2023, 7, 4, 20, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252334591, 'comment_body': ""Rewrote, but I'm not sure if it's better now. Simple fuse doesn't work here."", 'comment_created': datetime.datetime(2023, 7, 4, 20, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252334763, 'comment_body': 'No, removed. Thanks!', 'comment_created': datetime.datetime(2023, 7, 4, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252335289, 'comment_body': ""I re-wrote it as a comprehension -- I believe there's no need in a function now."", 'comment_created': datetime.datetime(2023, 7, 4, 20, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252342070, 'comment_body': 'This whole part is slightly re-written now, and hopefully slightly optimized -- I moved the `enumerate` part to numpy completely.', 'comment_created': datetime.datetime(2023, 7, 4, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252343259, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 7, 4, 20, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252344025, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 7, 4, 20, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252344625, 'comment_body': ""I think after the code part is done and agreed upon, I'll go through the documentation and add `versionadded` in proper places."", 'comment_created': datetime.datetime(2023, 7, 4, 20, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252344743, 'comment_body': 'see the comment above', 'comment_created': datetime.datetime(2023, 7, 4, 20, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252346772, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 7, 4, 20, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1252714275, 'comment_body': 'I agree: be explicit. And if we already have precedent in transformations then follow precedent as this creates a more uniform user experience.\r\n\r\nAnd it looks as if the same `def _setup_scheduler()` exists in many classes ‚Äî avoid boiler plate code , use an explicit `parallelizable = False` and the your base._setup_scheduler() can just test for `self.parallelizable`.', 'comment_created': datetime.datetime(2023, 7, 5, 8, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252725764, 'comment_body': ""Why use `bslice_idx` instead of passing through the appropriate object, i.e. call it as\r\n```python\r\nself._compute(self._bslices[bslice_idx], ...)\r\n```\r\nI don't understand what the advantage is of passing through an integer vs the actual object."", 'comment_created': datetime.datetime(2023, 7, 5, 8, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252745436, 'comment_body': ""You're reverse-engineering the `frames`. I think you could just apply it the way that the trajectory reader would do it:\r\n```python\r\nframe_indices = np.arange(len(u.trajectory))\r\nif frames is None:\r\n   frames = slice(start, stop, step)\r\nselected_frames = frame_indices[frames]\r\n```\r\n(although double check the reader code for what happens with negative indices when fancy indexing) and then work with `selected_frames`."", 'comment_created': datetime.datetime(2023, 7, 5, 8, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252747736, 'comment_body': ""Also, it's confusing that you replace `frames`, just give it a separate name."", 'comment_created': datetime.datetime(2023, 7, 5, 8, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252749384, 'comment_body': '`slices` seems unnecessary, just assign directly to `self._bslices`.', 'comment_created': datetime.datetime(2023, 7, 5, 8, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252751438, 'comment_body': ""Actually, I'd like the function better if it just returned `bslices` and didn't set `self._bslices`. It's more transparent to do this in calling code.\r\n\r\nPerhaps then a different name for the function is warranted, like `_get_bslices()` "", 'comment_created': datetime.datetime(2023, 7, 5, 8, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252752450, 'comment_body': '`scheduler in (""multiprocessing"", ""dask"")` ? Not sure what\'s nicer.', 'comment_created': datetime.datetime(2023, 7, 5, 8, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252755180, 'comment_body': 'formatting is wrong\r\n- versionadded belongs to `frames`\r\n- verbose is separate kwarg entry', 'comment_created': datetime.datetime(2023, 7, 5, 8, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252757494, 'comment_body': 'I suggest to add it now with a 2.6 because once we get ready to merge we immediately see that just the version number needs to be changed. (also applies to comments below)', 'comment_created': datetime.datetime(2023, 7, 5, 8, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252759546, 'comment_body': 'if this is used by `setup_bslices` then it would make code clearer if it were returned and then used by calling code', 'comment_created': datetime.datetime(2023, 7, 5, 8, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252764729, 'comment_body': ""You're following the previous code by directly changing instance attributes. In principle that's ok. However, I find that it makes following the flow of data really difficult and for instance, it's not clear that setup_scheduler HAS to come before setup_bslices because the latter needs to know how many slices to create: this is a hidden dependency that is hard to spot.\r\n\r\nI suggest to move to a more functional style\r\n```\r\nn_slices = self._setup_scheduler(scheduler=scheduler, n_workers=n_workers)\r\nself._bslices = self._setup_bslices(n_slices, start=start, stop=stop, step=step, frames=frames)\r\n```\r\nor something along those lines ‚Äî you get the idea how this makes it clearer what's happening."", 'comment_created': datetime.datetime(2023, 7, 5, 8, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252766467, 'comment_body': 'See my comment below on making n_bslices an argument and explicitly passing it in.', 'comment_created': datetime.datetime(2023, 7, 5, 8, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252768470, 'comment_body': ""I'd just use the bslice directly\r\n```python\r\n(self, bslice) for bslice in self._bslices\r\n```\r\nMakes for clearer code."", 'comment_created': datetime.datetime(2023, 7, 5, 8, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252770161, 'comment_body': ""Or is the concern that `bslice` can be large and you just want to use the data structure once that's already shipped to each process?"", 'comment_created': datetime.datetime(2023, 7, 5, 8, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252773691, 'comment_body': 'I am not a big fan of big if/elifs. Is it possible to just make each block call a method like `_compute_serial()`, `_compute_multiprocessing()`, `_compute_dask()`? That would make the code cleaner and possibly easier to extend.\r\n\r\nOne might even be able to do away with if and just use a dispatch table. ', 'comment_created': datetime.datetime(2023, 7, 5, 8, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252780240, 'comment_body': 'Do we need to store `_remote_results` or could we just pass it through and have `_parallel_conclude()` deal with it?\r\n```\r\nself._parallel_conclude(results)\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252780450, 'comment_body': 'What happens here? Is the sum() an array concatenation??', 'comment_created': datetime.datetime(2023, 7, 5, 8, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252781868, 'comment_body': 'add a NOTE that developers should be prepared to override this method as it is not universal', 'comment_created': datetime.datetime(2023, 7, 5, 8, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252784025, 'comment_body': 'You might have to explain somewhere what the data look like that the workers have. Eg are all arrays the full size and workers only fill in their parts? Or do they get shorter arrays and then we concatenate?', 'comment_created': datetime.datetime(2023, 7, 5, 8, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252787130, 'comment_body': ""Not clear why this should work if one doesn't know the data structure layout.\r\n\r\nIt's also quite hackish and my first instinct is to assume that it will eventually break or introduce really weird values.\r\n\r\n(Does this mean that EACH worker holds FULL arrays for everything? That would negate potential memory advantages of splitting analysis.)"", 'comment_created': datetime.datetime(2023, 7, 5, 8, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252788174, 'comment_body': 'How do you detect a timeseries??', 'comment_created': datetime.datetime(2023, 7, 5, 9, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1252791700, 'comment_body': 'Overall, this is currently quite a hack with lots of heuristics and assumptions. I think I want to revisit how we reduce data. If we need to add additional hints to `Results` to do this properly (e.g., bundle the appropriate `_reduce()`) then we should  consider it.', 'comment_created': datetime.datetime(2023, 7, 5, 9, 3, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1254492816, 'comment_body': 'I specifically check the name of the attribute -- see https://github.com/marinegor/mdanalysis/blob/9d9d9186be5054218cfee51dbc8a2bd1eac8490e/package/MDAnalysis/analysis/base.py#L704', 'comment_created': datetime.datetime(2023, 7, 6, 14, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1254985463, 'comment_body': 'pep8 spacing please', 'comment_created': datetime.datetime(2023, 7, 6, 22, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1254988880, 'comment_body': 'This sounds to me like it should go under analysis? It\'s a ""parallel analysis"" thing after all?', 'comment_created': datetime.datetime(2023, 7, 6, 22, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1255890974, 'comment_body': 'I think it should be separate from analysis ‚Äî people might want analysis but without parallel things. Perhaps we can rename it to ‚Äúparallel‚Äù as a more general thing?', 'comment_created': datetime.datetime(2023, 7, 7, 14, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1255903070, 'comment_body': ""We had this discussion over in Discord: \r\n\r\nhttps://discord.com/channels/807348386012987462/1105792867143798835/1119002894008590337\r\n\r\nHappy with either `dask` or `parallel`, but I agree it's better to have it separate.\r\n\r\n[Note: With GitHub Discussion it would be easier to link such discussion. =)] "", 'comment_created': datetime.datetime(2023, 7, 7, 14, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1255905074, 'comment_body': ""I'd go with parallel then - dask is too unintuitive a key."", 'comment_created': datetime.datetime(2023, 7, 7, 14, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1255906476, 'comment_body': 'Also please update pyproject.toml', 'comment_created': datetime.datetime(2023, 7, 7, 14, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1255914178, 'comment_body': ""I'm seeing a lot of repeats of this construct. Rather than doing this for all the default cases, would it not be better for this to be directly inherited as the default implementation of this method from the base class? It would avoid breaking a bunch of stuff downstream."", 'comment_created': datetime.datetime(2023, 7, 7, 14, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1276549365, 'comment_body': 'I think this one is fixed now -- by default, `available_schedulers` is set to those implemented in `ParallelExecutor` class (the one that does computations), and in some classes their list is limited to e.g. only `local`.', 'comment_created': datetime.datetime(2023, 7, 27, 16, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276551262, 'comment_body': "">It's probably already on your to-do list, but I assume we do want it to support dask.distributed.Client?\r\nThis one is fixed, indeed.\r\n\r\n>This is a useful function and people (e.g. me) might want to utilize it independently in other contexts\r\nNot sure if it's still the case for `_setup_computation_groups`, but if you insist, I'll reorganize it as a separate function."", 'comment_created': datetime.datetime(2023, 7, 27, 16, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276553503, 'comment_body': 'This one yielded `n_parts` and `n_workers` separation.', 'comment_created': datetime.datetime(2023, 7, 27, 16, 41, 11, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276556643, 'comment_body': ""Now I pass actual computation groups instead of their indices, and also don't use `setup_scheduler` at all."", 'comment_created': datetime.datetime(2023, 7, 27, 16, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276575154, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 7, 27, 17, 0, 50, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276576436, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 7, 27, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276577319, 'comment_body': 'irrelevant by now', 'comment_created': datetime.datetime(2023, 7, 27, 17, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276577989, 'comment_body': 'I believe the current style of `AnalysisBase.run()` is more functional now', 'comment_created': datetime.datetime(2023, 7, 27, 17, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276578579, 'comment_body': 'And this one is done, too', 'comment_created': datetime.datetime(2023, 7, 27, 17, 2, 35, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276578810, 'comment_body': 'And this one as well is done', 'comment_created': datetime.datetime(2023, 7, 27, 17, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276581125, 'comment_body': '>What happens here? Is the sum() an array concatenation??\r\nno, but since both arrays were initialized as zeros, it effectively merges all non-zero places\r\n\r\n>You might have to explain somewhere what the data look like that the workers have. \r\nYou mean, in the documentation?\r\n\r\n>Eg are all arrays the full size and workers only fill in their parts?\r\nthis one, yes.\r\n', 'comment_created': datetime.datetime(2023, 7, 27, 17, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276592526, 'comment_body': "">Does this mean that EACH worker holds FULL arrays for everything\r\nyes, they do, since they're being set up by the `setup_frames` I believe. \r\nI'll think on how to improve it."", 'comment_created': datetime.datetime(2023, 7, 27, 17, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276595809, 'comment_body': 'The current implementation uses the following notation: the ""backend"" variable is essentially the package name that you need to import. While I do agree that installing it is slightly unintuitive, I believe that documentation will fix that. Also, there is an explicit `available_backends` variable attached to each class, that helps people to choose the backend.', 'comment_created': datetime.datetime(2023, 7, 27, 17, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1276596325, 'comment_body': 'This is now replaced by default `available_schedulers`, which in some cases are limited.', 'comment_created': datetime.datetime(2023, 7, 27, 17, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1278268752, 'comment_body': '```suggestion\nclass ParallelExecutor():\n```\n', 'comment_created': datetime.datetime(2023, 7, 29, 8, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278268868, 'comment_body': '```suggestion\n    def available_backends(cls):\n```\n? Or ""supported""? Maybe even just ""backends"" (and a docstring).', 'comment_created': datetime.datetime(2023, 7, 29, 8, 34, 18, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278268932, 'comment_body': 'Please add docstring (at the class level).', 'comment_created': datetime.datetime(2023, 7, 29, 8, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278269352, 'comment_body': ""I'm wondering if we can just add a warning and set the number of workers to 1? Not sure what's better for the user point of view. Maybe this is better since avoids possible surprises."", 'comment_created': datetime.datetime(2023, 7, 29, 8, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278269533, 'comment_body': 'Should n_workers default to 1? Or to something else?', 'comment_created': datetime.datetime(2023, 7, 29, 8, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278269704, 'comment_body': 'See comment above: ""available_backends"" would be more consistent.', 'comment_created': datetime.datetime(2023, 7, 29, 8, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278285814, 'comment_body': 'Can you move this to above the distopia entry? These are meant to be alphabetically ordered.', 'comment_created': datetime.datetime(2023, 7, 29, 11, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1278285862, 'comment_body': 'Can you move this to above distopia please? These are meant to be alphabetically ordered', 'comment_created': datetime.datetime(2023, 7, 29, 11, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1278286035, 'comment_body': 'Here and everywhere else - please have a look & address the many flake8 found in tthe diff (https://github.com/MDAnalysis/mdanalysis/actions/runs/5683556166/job/15404355400)\r\n\r\nPlease ignore all the `black` stuff, just the lines that look like this: https://github.com/MDAnalysis/mdanalysis/actions/runs/5683556166/job/15404355400#step:4:617', 'comment_created': datetime.datetime(2023, 7, 29, 11, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1278286098, 'comment_body': ""```suggestion\r\nclass ParallelExecutor:\r\n```\r\nI don't think this is necessary in a Py3+ world anymore."", 'comment_created': datetime.datetime(2023, 7, 29, 11, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1278286191, 'comment_body': 'Please add tests for all these errors', 'comment_created': datetime.datetime(2023, 7, 29, 11, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1278286317, 'comment_body': ""docstrings on all these please, otherwise it's impossible tto know what they are intended to do"", 'comment_created': datetime.datetime(2023, 7, 29, 11, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1278286439, 'comment_body': ""I don't really have a super constructive comment there. This is _a long_ if/else branch, it's only going to grow and become more painful. Anyone got any ideas on how to avoid this? A dictionary maybe?"", 'comment_created': datetime.datetime(2023, 7, 29, 11, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1278286718, 'comment_body': 'Rather than make the default ""all the backends"", can we please make the default ""local"" and and just have `available_backends` go through a validator of types?\r\n\r\nOtherwise by default anything in the wild that inherits from AnalysisBase (both here and all over the downstream ecosystem) is suddenly going to find itself with a ton of available backends.', 'comment_created': datetime.datetime(2023, 7, 29, 11, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1278286732, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 29, 11, 20, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1278289995, 'comment_body': 'Agree. It is very tedious but important. And many Codecov annotations make reviewing more difficult (interestingly, they are not rendered on the mobile app).', 'comment_created': datetime.datetime(2023, 7, 29, 12, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278290104, 'comment_body': ""I'm unsettled too by this long list of `elif`s. A dictionary might be a good solution, but I can't think of a better way right now."", 'comment_created': datetime.datetime(2023, 7, 29, 12, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278290204, 'comment_body': 'This function looks very general. Should it be lifted out of the class (and take a `backend` as input)?\r\n\r\nFree functions are easier to test and to re-use.', 'comment_created': datetime.datetime(2023, 7, 29, 12, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278290809, 'comment_body': ""I see you removed the external `delayed` from `_compute_with_dask` but it is still present here. I'm not totally sure which one is best, but the common patter in Dask's documentation seems to avoid the external delayed and do `dask.compute(*computations)`.\r\n\r\n```python\r\nresults = []\r\nfor x in L:\r\n    y = dask.delayed(f)(x)\r\n    results.append(y)\r\n\r\nresults = dask.compute(*results)\r\n```"", 'comment_created': datetime.datetime(2023, 7, 29, 12, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278291017, 'comment_body': ""This function is very important, I'd add more details here in the docstring. Just saying that `Set the self._computation_groups` is OK for the beginning of the docstring, but it is not explaining much."", 'comment_created': datetime.datetime(2023, 7, 29, 12, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278291046, 'comment_body': '`n_parts` missing?', 'comment_created': datetime.datetime(2023, 7, 29, 12, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278291195, 'comment_body': 'IIRC, the `Returns` docstring has a different syntax. Pleas double check.\r\n```suggestion\r\n        list\r\n            (n, 2)-shaped np.ndarray with frame indices and numbers\r\n```', 'comment_created': datetime.datetime(2023, 7, 29, 12, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278291451, 'comment_body': 'Some parameters missing from the docstring? Please double check this docstring.', 'comment_created': datetime.datetime(2023, 7, 29, 12, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278291630, 'comment_body': 'Is this consistent with what you do above? Above, you did not allow to specify both a `client` and a `backend`.', 'comment_created': datetime.datetime(2023, 7, 29, 12, 20, 10, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278292167, 'comment_body': ""I'm not sure how your comment relates to the discussion above. Could you please elaborate? I think the consensus here is to name this `parallel` and add both `dask` and `dask.distributed`."", 'comment_created': datetime.datetime(2023, 7, 29, 12, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1278295245, 'comment_body': ""The question in going to ask here, and I'm happy to have a longer offline conversation about it.\n\nDo we absolutely *need* all these backends & options? I realise it's fun and offers flexibility, but from my perspective what we're doing here is working ourselves into a future maintenance nightmare."", 'comment_created': datetime.datetime(2023, 7, 29, 13, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1279228414, 'comment_body': 'and should be int', 'comment_created': datetime.datetime(2023, 7, 31, 12, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1280952039, 'comment_body': ""Sorry, I don't fully understand what's bad with these elifs, especially given that some of them require a different running scenario, like `dask.distributed`.\r\n\r\nFrom what I understand @IAlibay is suggesting, it could look like this:\r\n\r\n```python\r\ndef available_schedulers(self):\r\n    return {'multiprocessing':self._compute_with_multiprocessing, 'dask':self._compute_with_dask, ...}\r\n    \r\n def apply(self, func, computations):\r\n     callable = self.available_schedulers.get(self.backend)\r\n     if callable is None:\r\n         raise ValueError\r\n     return callable(func, computations)\r\n```\r\n\r\nbut I believe it's slightly harder to work with, especially given that the dictionary size isn't going to increase significantly any time soon, and having 5 options in a flat if-elif-else is more explicit than hiding them in a dictionary values. "", 'comment_created': datetime.datetime(2023, 8, 1, 17, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1280955824, 'comment_body': "">Do we absolutely need all these backends & options?\r\n\r\nWell, this class isn't really supposed to be used by users right off the bat. For the user, there are essentially 3 backend mechanisms:\r\n - `multiprocessing` -- which has an advantage of being built-in\r\n - `dask` -- an extra dependency, but more flexible serialization mechanism than `multiprocessing`\r\n - `dask.distributed` -- for those 1% who a) are planning to analyze really huge trajectories b) know how to configure a `dask.distributed` cluster\r\n \r\nI assume 90% of people will try to use (and be happy with) `multiprocessing`, then if it's not available for their task, switch to `dask`, and if it's still slow -- run distributed version."", 'comment_created': datetime.datetime(2023, 8, 1, 17, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1280995264, 'comment_body': 'Yep, corrected.', 'comment_created': datetime.datetime(2023, 8, 1, 18, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1280995306, 'comment_body': 'Added', 'comment_created': datetime.datetime(2023, 8, 1, 18, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1280997272, 'comment_body': ""I believe not -- since this class isn't designed for a broad public use, perhaps it's better to be explicit with the number of workers for those who use it.\r\nThe AnalysisBase, however, indeed has a default value of 1."", 'comment_created': datetime.datetime(2023, 8, 1, 18, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1280999158, 'comment_body': ""I don't think that it would make much sense -- this whole class was the point of having this function, but I believe that backend should be configured first -- for this purpose, I have a class around it."", 'comment_created': datetime.datetime(2023, 8, 1, 18, 27, 14, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281000239, 'comment_body': 'Thanks, fixed.', 'comment_created': datetime.datetime(2023, 8, 1, 18, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281063429, 'comment_body': ""I think it's better now"", 'comment_created': datetime.datetime(2023, 8, 1, 19, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281063540, 'comment_body': 'Yes! Not anymore.', 'comment_created': datetime.datetime(2023, 8, 1, 19, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281068059, 'comment_body': ""Thanks, it was the autodoc automatic format that I didn't check. Fixed."", 'comment_created': datetime.datetime(2023, 8, 1, 19, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281078308, 'comment_body': ""Yep, you're right -- fixed."", 'comment_created': datetime.datetime(2023, 8, 1, 19, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281091055, 'comment_body': 'Thanks @marinegor. Please ""Resolver conversation"" if you addressed a comment (and it does not need further discussion review at this stage).', 'comment_created': datetime.datetime(2023, 8, 1, 19, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1281091714, 'comment_body': 'Indeed, I stumbled to the default later on in the review but forgot to delete this comment.', 'comment_created': datetime.datetime(2023, 8, 1, 19, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1281098986, 'comment_body': ""True -- it's a legacy of development process, removed."", 'comment_created': datetime.datetime(2023, 8, 1, 20, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281101307, 'comment_body': ""Yep, I didn't think about the downstream projects. The MDAnalysis itself will then have a `available_backends` for each class explicitly, but I guess it's not a problem."", 'comment_created': datetime.datetime(2023, 8, 1, 20, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281110634, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 1, 20, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281111369, 'comment_body': ""I ran `black` on `base.py` since it's the file I edit the most, but I'm yet hesitant to run it on other files that I'm working on, like `rms.py` in this PR for example."", 'comment_created': datetime.datetime(2023, 8, 1, 20, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281112886, 'comment_body': ""Please don't run `black` on the whole file. it'll not only make review hard but it'll also make it hard to know that you changed here"", 'comment_created': datetime.datetime(2023, 8, 1, 20, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1281114553, 'comment_body': 'Unresolving and tagging @RMeli here.', 'comment_created': datetime.datetime(2023, 8, 1, 20, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1281114730, 'comment_body': 'I still stand by `available_backends` as more descriptive name', 'comment_created': datetime.datetime(2023, 8, 1, 20, 20, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1281148276, 'comment_body': ""Re: if/else - it's a code smell. Large if/else branches (7 here) hints to a non-optimal design choice. For example, what happens if you need to keep adding options? The current design is such that the tree grows and then it becomes very hard to maintain / make work.\r\n\r\nIt doesn't necessarily mean that it's the wrong code decision, but it's always good to query these things and check if an alternative design might be more appropriate (not necessarily a dictionary, but any kind of early validation etc..)."", 'comment_created': datetime.datetime(2023, 8, 1, 21, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1281150147, 'comment_body': ""> Well, this class isn't really supposed to be used by users right off the bat\r\n\r\nMy comment here isn't about what users do, but rather what the maintenance burden will look like for us. The wider the number of backends the wider the maintenance costs. If they are all necessary that's an acceptable cost, but without any prior information here it's something I have to ask."", 'comment_created': datetime.datetime(2023, 8, 1, 21, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1281183342, 'comment_body': 'Yep. I suggested ""availabe"" here before seeing you used it elsewhere (later on). What I was objecting is the ""possible_backends"" you used here.', 'comment_created': datetime.datetime(2023, 8, 1, 21, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1282876010, 'comment_body': 'remove this line.', 'comment_created': datetime.datetime(2023, 8, 3, 8, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1282877892, 'comment_body': 'I assume you forgot to add the client_FrameAnalysis to` test_start_stop_step`?', 'comment_created': datetime.datetime(2023, 8, 3, 8, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1283602056, 'comment_body': ""If the whole class was the point of having this function, shouldn't the class be a functor? The function seems very general to me and potentially useful, so lifting it out of the class (and, eventually, in a separate module), together with the associated functions called within would make it easily available if needed, but more importantly easily testable.\r\n\r\nIf you are interested, there is a great talk about this topic (in C++ not Python, but the underlying concepts apply to OOP vs free functions generally): [Free Your Functions!](https://www.youtube.com/watch?v=WLDT1lDOsb4)."", 'comment_created': datetime.datetime(2023, 8, 3, 18, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1283604474, 'comment_body': 'See discussion on Discord: https://discord.com/channels/807348386012987462/1105792867143798835/1136030236308418671', 'comment_created': datetime.datetime(2023, 8, 3, 19, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1283605893, 'comment_body': 'This is under `analysis`. It needs to be move under `parallel`, to be consistent with `setup.py`.', 'comment_created': datetime.datetime(2023, 8, 3, 19, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1283606708, 'comment_body': '@marinegor Since this is an entirely new file, here you can safely apply `black` if you want.', 'comment_created': datetime.datetime(2023, 8, 3, 19, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1285228254, 'comment_body': ""I know about the functors, but I believe it's relatively unnecessary here -- if we were to use this class in at least 2 different contexts, perhaps it'd be better to lift it up. But for now I believe we're using it exactly here and nowhere else, hence I don't see any points in introducing additional complexity with the class location and functionality."", 'comment_created': datetime.datetime(2023, 8, 6, 14, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1288325134, 'comment_body': ""It missed the scenario when `backend=None` but `client=client`. Either explicitly set `backend='dask.distributed` or check for the condition here."", 'comment_created': datetime.datetime(2023, 8, 9, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1288329965, 'comment_body': '`client` is both a `ParallelExecutor` and a `dask.distributed.Client` which is confusing.', 'comment_created': datetime.datetime(2023, 8, 9, 11, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1290636127, 'comment_body': ""My point is that the complexity is not added but reduced by lifting these general functions out. But if you are happier with this solution it's fine by me!"", 'comment_created': datetime.datetime(2023, 8, 10, 20, 17, 15, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1290646700, 'comment_body': '```suggestion\r\n    if ignore_names is not None and modulename in ignore_names:\r\n        return True\r\n```\r\n\r\nHowever I struggle to see the usefulness of `ignore_names`.', 'comment_created': datetime.datetime(2023, 8, 10, 20, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1290650599, 'comment_body': '```suggestion\r\n        raised = ValueError if any(failing_condition) else FinallyRaised\r\n```\r\n? Clearer/more concise?', 'comment_created': datetime.datetime(2023, 8, 10, 20, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1290653074, 'comment_body': '`is_installed` is a quite general function that you added to `lib.util` (which is great), but I feel the `ignore_names` is not very general. You need it here because you are passing something that is not a module name (and therefore you already know they are not installed). Is there a better way of doing this without having to add `ignore_names` to the `is_installed` function (with the additional complexity that it entails)?', 'comment_created': datetime.datetime(2023, 8, 10, 20, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1290659461, 'comment_body': 'What will happen if `_get_global_client()` disappears one day? =(', 'comment_created': datetime.datetime(2023, 8, 10, 20, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1290661848, 'comment_body': 'Is this the behaviour we want? Since this function only makes sense with `dask.distributed`, maybe it would be better to propagate the exception (with a nice error message).', 'comment_created': datetime.datetime(2023, 8, 10, 20, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1290663736, 'comment_body': '@marinegor This is one of the examples I mentioned previously of ""resolved conversation"" without changes. I can\'t see the doctoring here or under the class (there is a docstring for the class, but it does not document the arguments of `__init__`.', 'comment_created': datetime.datetime(2023, 8, 10, 20, 48, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1290664403, 'comment_body': '```suggestion\r\n        list[str]\r\n```\r\n\r\nI think return documentation has no name? (IIRC)', 'comment_created': datetime.datetime(2023, 8, 10, 20, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1290665627, 'comment_body': '```suggestion\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 8, 10, 20, 50, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1290667405, 'comment_body': '```suggestion\r\n            n_workers = sum(client.nthreads().values()) if client else 1\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 8, 10, 20, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1291603960, 'comment_body': 'Just FYI - there are utilities in `MDAnalysisTests`, if you need a method that fits a specific test purpose, it is a much lower maintenance overhead to put it in `MDAnalysisTests` than in `MDAnalysis`.', 'comment_created': datetime.datetime(2023, 8, 11, 17, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1291605755, 'comment_body': ""```suggestion\r\n\r\nclass ParallelExecutor:\r\n```\r\n\r\nA 1k+ line file is a lot. Is there a point at which we should consider moving this class out of here and into it's own file?"", 'comment_created': datetime.datetime(2023, 8, 11, 17, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1291605886, 'comment_body': '```suggestion\r\n\r\ndef is_valid_distributed_client(client: object):\r\n```', 'comment_created': datetime.datetime(2023, 8, 11, 17, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1297704436, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 17, 20, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1297704971, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 17, 20, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1297705999, 'comment_body': ""it's used to distinguish absent module (like `dask`) and not a module at all (like `local`, which is the name for backend but not a valid module name)"", 'comment_created': datetime.datetime(2023, 8, 17, 20, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1297706684, 'comment_body': 'indeed, I keep forgetting about this idiome.', 'comment_created': datetime.datetime(2023, 8, 17, 20, 28, 14, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1297724168, 'comment_body': ""thanks! I removed `is_installed` altogether, and put the function into `MDAnalysis.lib.util`, since it's needed in `base.py`"", 'comment_created': datetime.datetime(2023, 8, 17, 20, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1297744197, 'comment_body': ""yes, you're right. Fixed."", 'comment_created': datetime.datetime(2023, 8, 17, 20, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1297747079, 'comment_body': 'a legacy of passing `Pool` directly, before Yuxuan discovered the `chunksize=1` trick. Removed.', 'comment_created': datetime.datetime(2023, 8, 17, 21, 0, 14, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1297747991, 'comment_body': 'yep, keep forgetting, thanks', 'comment_created': datetime.datetime(2023, 8, 17, 21, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1297845384, 'comment_body': ""I believe there's a way to get to it via trying to connect to its default port, or simply spawning another instance of `Client` instead of using an already running one.\r\n\r\nbut I almost got rid of all the places where I'm using it, so I can try to work on completely removing it from the codebase."", 'comment_created': datetime.datetime(2023, 8, 17, 23, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1297846367, 'comment_body': ""I think the logic is slightly different now, but I'm not sure what you mean, to be honest"", 'comment_created': datetime.datetime(2023, 8, 17, 23, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1299164296, 'comment_body': ""Please don't do that, it's a flaky test but there's probably a deeper issue that needs to be fixed elsewhere, I'd prefer not silently skip anywhere in our stack until it is resolved."", 'comment_created': datetime.datetime(2023, 8, 19, 9, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1299906595, 'comment_body': 'I think it makes sense to create a new file e.g. `parallel.py` inside analysis and move this class there.', 'comment_created': datetime.datetime(2023, 8, 21, 10, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1299915498, 'comment_body': 'Not sure which comment you mean but you should add `versionchanged` and `versionadded` to the code you write.', 'comment_created': datetime.datetime(2023, 8, 21, 10, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1299928295, 'comment_body': 'Could you get more specific about what the error message is? e.g. which can not be pickled?', 'comment_created': datetime.datetime(2023, 8, 21, 10, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1299933350, 'comment_body': 'I assume these can be `staticmethod` inside the ResultsGroup class?', 'comment_created': datetime.datetime(2023, 8, 21, 10, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1299933742, 'comment_body': 'write an example (code snippet) about how to use this class.', 'comment_created': datetime.datetime(2023, 8, 21, 10, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1300305429, 'comment_body': 'Yes, thanks! Changed.', 'comment_created': datetime.datetime(2023, 8, 21, 15, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1306716031, 'comment_body': ""The doc string under init should be moved to the one at the class level and we don't have a doc string for init ‚Äî that's how I understand it. (We haven't been consistent in the past but for new code we try to be.)"", 'comment_created': datetime.datetime(2023, 8, 27, 20, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306717050, 'comment_body': ""What happens if `dask` is not installed? This should fall gracefully with a message for the user that dask is needed.\r\n\r\nIf there's a reason why this situation would be caught elsewhere, please add a comment describing how users that haven't installed the _optional_ dask package will be alerted that they need it."", 'comment_created': datetime.datetime(2023, 8, 27, 20, 13, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306717099, 'comment_body': 'see comment above ‚Äî how are you dealing with `dask` being optional?', 'comment_created': datetime.datetime(2023, 8, 27, 20, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306717727, 'comment_body': ""Let's move the init doc string into the class doc string."", 'comment_created': datetime.datetime(2023, 8, 27, 20, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306717848, 'comment_body': 'break line', 'comment_created': datetime.datetime(2023, 8, 27, 20, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306718096, 'comment_body': 'Maybe rename to `raise_no_aggregator` to be clearer?', 'comment_created': datetime.datetime(2023, 8, 27, 20, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306718137, 'comment_body': 'What happens if set to `False`? Does this even work?? ', 'comment_created': datetime.datetime(2023, 8, 27, 20, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306718167, 'comment_body': 'format\r\n```suggestion\r\n            if no aggregation function for a key is found and ``do_raise=True``\r\n```', 'comment_created': datetime.datetime(2023, 8, 27, 20, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306718320, 'comment_body': 'should be tested!', 'comment_created': datetime.datetime(2023, 8, 27, 20, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306718343, 'comment_body': 'should be tested!', 'comment_created': datetime.datetime(2023, 8, 27, 20, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306718433, 'comment_body': ""Why `sum()` ‚Äî shouldn't it be `mean()`??"", 'comment_created': datetime.datetime(2023, 8, 27, 20, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306718600, 'comment_body': 'just use\r\n```suggestion\r\n        return np.mean(floats)\r\n```\r\nThis will make results consistent between `float_mean()` and `ndarray_mean()`.', 'comment_created': datetime.datetime(2023, 8, 27, 20, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306718807, 'comment_body': ""Is this formatting change necessary? Try to avoid it because it makes the diff noisy. It's much better to do PRs that are _only_ cosmetic changes separate from functional ones.\r\n\r\n(There are more of these purely formatting changes below.)"", 'comment_created': datetime.datetime(2023, 8, 27, 20, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306718859, 'comment_body': 'Here the autoformatter(?) is creating rubbish formatting changes... at least the strings should now be fused! Please fix.', 'comment_created': datetime.datetime(2023, 8, 27, 20, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306720079, 'comment_body': ""How can `backend` be optional when it doesn't have a default value? (Is this something new in Python??)\r\n\r\n"", 'comment_created': datetime.datetime(2023, 8, 27, 20, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306720134, 'comment_body': 'Should the default be set to `None`?', 'comment_created': datetime.datetime(2023, 8, 27, 20, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306720162, 'comment_body': 'Similar questions for `n_workers` and `client`.', 'comment_created': datetime.datetime(2023, 8, 27, 20, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306725048, 'comment_body': 'markup\r\n```suggestion\r\n              - ``None`` if you want to run things locally\r\n```', 'comment_created': datetime.datetime(2023, 8, 27, 21, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306725297, 'comment_body': 'I assume the equals sign in `{self.available_backends=}` is a sensible thing to say but because the line is to yet tested (but should be), I am mentioning it.', 'comment_created': datetime.datetime(2023, 8, 27, 21, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306725432, 'comment_body': 'needs to be indented so that `frames` is marked as added. It was correct before.', 'comment_created': datetime.datetime(2023, 8, 27, 21, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306726041, 'comment_body': 'This line (and others) look as if they are too long. They should be ‚â§75 chars for docs (see numpy doc string standard below) but at least follow the ‚â§79 chars for [PEP8 requirements of MDAnalysis](https://userguide.mdanalysis.org/stable/contributing_code.html#code-formatting-in-python).\r\n\r\nWe could do a better job [documenting our requirements for docs](https://userguide.mdanalysis.org/stable/contributing_code.html#guidelines-for-writing-docstrings) but if in doubt, follow the [numpy doc string standard](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard) because we say\r\n\r\n> MDAnalysis has a lot of documentation in the Python doc strings. The docstrings follow the [Numpy Docstring Standard](https://numpydoc.readthedocs.io/en/latest/format.html#docstring-standard), which is used widely in the Scientific Python community. They are nice to read as normal text and are converted by sphinx to normal ReST through [napoleon](http://sphinxcontrib-napoleon.readthedocs.org/en/latest/index.html).', 'comment_created': datetime.datetime(2023, 8, 27, 21, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306727022, 'comment_body': 'Not implemented is the technical reason but when a user sees `NotImplementedError` then they ask ""*when* will it be implemented?"" ‚Äî it sounds as if it\'s really on us to fix the problem. Instead I\'d like to raise `ValueError` here because that\'s just a wrong (incompatible) choice from the user. \r\n\r\nYou just have to document in the doc string under which circumstances there\'s no progress bar and suggest alternatives.', 'comment_created': datetime.datetime(2023, 8, 27, 21, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306727353, 'comment_body': 'I am going to guess that dask\'s cloudpickle(?) does better than whatever multiprocessing uses... but I also want to know details because in principle ""everything"" (well, lots of things) are picklable with standard pickle.', 'comment_created': datetime.datetime(2023, 8, 27, 21, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306727475, 'comment_body': 'Add a doc string.', 'comment_created': datetime.datetime(2023, 8, 27, 21, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306727500, 'comment_body': 'add a doc string', 'comment_created': datetime.datetime(2023, 8, 27, 21, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306727588, 'comment_body': 'How is the content of `available_backends` changed? \r\n\r\nOr do I need to **override** it in a derived class with additional content and so mark it as parallelizable?? \r\n\r\nTake my questions as what a user/developer might ask. Your docs should be answering such questions.', 'comment_created': datetime.datetime(2023, 8, 27, 21, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306727662, 'comment_body': 'Note the special backend ""local"". Explain what it does!', 'comment_created': datetime.datetime(2023, 8, 27, 21, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306727870, 'comment_body': ""Yes, I agree, especially if it becomes a module that doesn't need to import anything else from MDA."", 'comment_created': datetime.datetime(2023, 8, 27, 21, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306728504, 'comment_body': ""These cannot be in a new method as this method didn't exist at that releases. Remove from here and make sure that they are retained in the original `run()` docs. \r\n"", 'comment_created': datetime.datetime(2023, 8, 27, 21, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306728645, 'comment_body': '`client` should be documented ‚Äî what type is it?', 'comment_created': datetime.datetime(2023, 8, 27, 21, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306728808, 'comment_body': 'Is this the same things as the input `client`? If not, use different names in the docs. Assume that readers will think that same name implies same type (and probably even same object).', 'comment_created': datetime.datetime(2023, 8, 27, 21, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306729059, 'comment_body': '@marinegor add a `versionchanged 2.7.0` that summarizes the addition of parallelization. In the parameter list above, add `versionadded 2.7.0` for each new kwarg (following the example for frames).', 'comment_created': datetime.datetime(2023, 8, 27, 22, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306729135, 'comment_body': 'add a versionadded 2.7.0', 'comment_created': datetime.datetime(2023, 8, 27, 22, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306729143, 'comment_body': 'add a versionadded 2.7.0', 'comment_created': datetime.datetime(2023, 8, 27, 22, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306729149, 'comment_body': 'add a versionadded 2.7.0', 'comment_created': datetime.datetime(2023, 8, 27, 22, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306729226, 'comment_body': 'add a versionadded 2.7.0 (*indented* so that it shows up for `client`!)', 'comment_created': datetime.datetime(2023, 8, 27, 22, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306730844, 'comment_body': 'Does this one need to be set for each derived class? And the default is that existing classes do _not_ have parallel capability? \r\n\r\nAll of these questions would be really important to document for developers: **How do I get my new analysis to run in parallel?**', 'comment_created': datetime.datetime(2023, 8, 27, 22, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306731105, 'comment_body': 'I think what I am saying is that we should have a tutorial style article for the User Guide similar to https://userguide.mdanalysis.org/stable/examples/analysis/custom_parallel_analysis.html', 'comment_created': datetime.datetime(2023, 8, 27, 22, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306731613, 'comment_body': '""Initializes the class, saving aggregation functions in _lookup attribute."" is just a technical description of the code and it talks about underscore-attributes that the user should not even care about. You can just remove it. Write from  a users/developers perspective: Answer the question ""What does this class do for me?""', 'comment_created': datetime.datetime(2023, 8, 27, 22, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306731791, 'comment_body': ""**We need examples here.** Otherwise there's no way that anyone can actually use it.\r\n\r\nWhat is the signature of `Callable`? Are these the static methods?? Can it be _anything_?"", 'comment_created': datetime.datetime(2023, 8, 27, 22, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306732442, 'comment_body': 'remove ""Simple"" ‚Äî nothing is ""simple"" once you write a class for it; you also don\'t need to say it\'s a class. Focus on what it does. Perhaps:\r\n\r\n```reST\r\n""""""Management and aggregation of results stored in :class:`Result` instances.\r\n\r\nA :class:`ResultsGroup` is an optional description for :class:`Result` ""dictionaries"" \r\nare used in analysis classes based on :class:`AnalysisBase`. For each *key* in a \r\n:class:`Result` it describes how multiple pieces of the data held under the key are\r\nto be aggregated. This approach is necessary when parts of a trajectory are analyzed\r\nindependently (e.g., in parallel) and then need to me merged (with :meth:`merge`) to\r\nobtain a complete data set.\r\n``` \r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 27, 22, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306732497, 'comment_body': 'add empty line after title/synopsis line', 'comment_created': datetime.datetime(2023, 8, 27, 22, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306732647, 'comment_body': 'What happens when `agg_function == None`??? Is this being tested?', 'comment_created': datetime.datetime(2023, 8, 27, 22, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306732709, 'comment_body': ""This seems problematic (see below)! Test the case when there's no key and `None` is used."", 'comment_created': datetime.datetime(2023, 8, 27, 22, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306732817, 'comment_body': 'line break', 'comment_created': datetime.datetime(2023, 8, 27, 22, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306734080, 'comment_body': ""`ndarray_sum` is not intuitive ‚Äî it's pretty much the last thing I would have thought I'd need to use. I get that this works because you're adding arrays that have Nframes size but contain zeroes for all other workers so adding all arrays effectively concatenates. \r\n\r\nI'd *much* prefer if the code did something obvious like just creating shorter arrays for each worker and then **concatenate** them so that this reads\r\n```python\r\nreturn ResultsGroup(lookup={'rmsd': ResultsGroup.ndarray_concatenate})\r\n```\r\n\r\nLess clever hacks and more obvious code equals less debugging and fewer confused users/developers."", 'comment_created': datetime.datetime(2023, 8, 27, 22, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306738358, 'comment_body': 'This conversation here explains a lot of questions that I had above about why we start with ""local"". It makes sense and I see that there\'s a consensus to opt-in to parallel analysis.\r\n\r\nAbove I said that this still needs to be **documented**, though. \r\n\r\nIt\'s an important decision about how the class will work so it should even be said explicitly (perhaps even in a `.. note::`) that existing analysis classes will not automatically work in parallel and that parallel execution has to be **explicitly enabled** by doing X Y Z. \r\n\r\nFor reference, I am linking @p-j-smith \'s suggestion https://github.com/MDAnalysis/mdanalysis/issues/4158#issuecomment-1694694120 to make the distinction between normal (serial, ""local"") and parallelizable analysis classes even more distinct by having `AnalysisBase` and `ParallelAnalysisBase`.', 'comment_created': datetime.datetime(2023, 8, 27, 22, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306740088, 'comment_body': 'Why did you name it ""local"" instead of ""serial""? I am just finding myself thinking that the latter would imply much more clearly that this is essentially the old behavior. There are probably good reasons to keep the name ""local"" and in this case it needs to be **documented well** (perhaps in multiple places such as the doc string here and the overall docs) so that it\'s immediately clear what it means.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 27, 22, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306740706, 'comment_body': '@marinegor please *apply the suggestion* and don\'t mark it as resolved,especially not when you didn\'t apply it. Even though GitHub labels it as a ""suggestion"", you should really treat it as a ""apply when you read it"" because your reviewers thought about it AND spend the time to make it easy for you. In short: **just hit the button.**', 'comment_created': datetime.datetime(2023, 8, 27, 22, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306742360, 'comment_body': 'import at top', 'comment_created': datetime.datetime(2023, 8, 27, 23, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1306746482, 'comment_body': 'This is a crucial part of the new API. It really needs to be documented ‚Äî I talked about it in https://github.com/MDAnalysis/mdanalysis/issues/4158#issuecomment-1694790525 but that\'s just what I assumed from reading the code.\r\n\r\nI think my biggest conceptual problem is that **adding a new backend** (e.g., ""mpi"") will require **changing every single class in MDAnalysis and elsewhere**. This is impractical and defeats the idea of having a central AnalysisBase class that allows propagating of updates to user code. If I wrote an analysis class based on AnalysisBase then I should be able to profit from any changes.\r\n\r\nI\'ll write this as a longer comment on the PR so that we can have more of a discussion.\r\n', 'comment_created': datetime.datetime(2023, 8, 27, 23, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1324213551, 'comment_body': 'The new file is there now', 'comment_created': datetime.datetime(2023, 9, 13, 9, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324214345, 'comment_body': ""This function isn't used anymore"", 'comment_created': datetime.datetime(2023, 9, 13, 9, 7, 29, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324214533, 'comment_body': 'Removed the mark, of course', 'comment_created': datetime.datetime(2023, 9, 13, 9, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324299193, 'comment_body': ""I removed this function altogether, since we're not using Client anymore."", 'comment_created': datetime.datetime(2023, 9, 13, 10, 18, 2, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324300189, 'comment_body': 'I added a docstring and left likely more clear comment on which problems does multiprocessing cause.', 'comment_created': datetime.datetime(2023, 9, 13, 10, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324314647, 'comment_body': "">write an example (code snippet) about how to use this class.\r\nDone, also added an example for `do_raise=False` and how to skip merging of some attributes you don't want to merge.\r\n\r\n>Let's move the init doc string into the class doc string.\r\nDone, now `__init__`'s one is empty (if I got what you meant right)\r\n"", 'comment_created': datetime.datetime(2023, 9, 13, 10, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324320056, 'comment_body': ""I believe that now it's slightly better -- if `dask` is not installed, passing a `backend='dask'` will raise a `ValueError` on `return backend_class(n_workers=n_workers)` during `__init__` of a respective `BackendDask` class, where it suggests installing `dask`."", 'comment_created': datetime.datetime(2023, 9, 13, 10, 38, 5, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324320203, 'comment_body': 'See response above', 'comment_created': datetime.datetime(2023, 9, 13, 10, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324321283, 'comment_body': "">Let's move the init doc string into the class doc string.\r\n\r\nDone.\r\n\r\n>What happens if set to False? Does this even work??\r\n\r\nNope, it doesn't, thanks. I changed the logic & added an example for using `do_raise`.\r\n"", 'comment_created': datetime.datetime(2023, 9, 13, 10, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324324374, 'comment_body': ""I believe that now an example serves its purpose clarifying what's going on.\r\nI also changed a name to `require_all_aggregators` -- probably it explains what's going on better, together with the example."", 'comment_created': datetime.datetime(2023, 9, 13, 10, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324324735, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 9, 13, 10, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324324983, 'comment_body': 'Added tests for this!', 'comment_created': datetime.datetime(2023, 9, 13, 10, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324325030, 'comment_body': 'Added tests for this!', 'comment_created': datetime.datetime(2023, 9, 13, 10, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324325157, 'comment_body': 'Exactly! Fixed.', 'comment_created': datetime.datetime(2023, 9, 13, 10, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324325342, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 9, 13, 10, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324328136, 'comment_body': ""I decided that private methods better not have default values, since they're only called by a library code where we better be explicit. Hence, there are no default values for them, only type annotations."", 'comment_created': datetime.datetime(2023, 9, 13, 10, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324329831, 'comment_body': 'Fixed the documentation here', 'comment_created': datetime.datetime(2023, 9, 13, 10, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324331340, 'comment_body': 'I believe that `_configure_backend` is now tested more thoroughly with `test_base.py::test_backend_configuration_{fails,works_when_unsafe}`', 'comment_created': datetime.datetime(2023, 9, 13, 10, 49, 2, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324331530, 'comment_body': 'Fixed, I believe', 'comment_created': datetime.datetime(2023, 9, 13, 10, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324335340, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 9, 13, 10, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324335541, 'comment_body': 'There is no client now, so also done.', 'comment_created': datetime.datetime(2023, 9, 13, 10, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324335682, 'comment_body': 'See above', 'comment_created': datetime.datetime(2023, 9, 13, 10, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324335912, 'comment_body': 'Added', 'comment_created': datetime.datetime(2023, 9, 13, 10, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324339279, 'comment_body': 'Added', 'comment_created': datetime.datetime(2023, 9, 13, 10, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324339321, 'comment_body': 'Added', 'comment_created': datetime.datetime(2023, 9, 13, 10, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324339498, 'comment_body': 'No client anymore', 'comment_created': datetime.datetime(2023, 9, 13, 10, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324341851, 'comment_body': '>Does this one need to be set for each derived class? And the default is that existing classes do not have parallel capability?\r\n\r\n\r\nI believe the new duck-typed backend argument answers it more clearly. Also, I added an example on custom backend implementation to `BackendBase` and reference that part here.\r\n', 'comment_created': datetime.datetime(2023, 9, 13, 10, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324343488, 'comment_body': ""I added two examples.\r\nDo you think I still need to add `Callable`'s signature? It obviously can't be anything, but adding a signature would introduce a generic type, something like\r\n\r\n```\r\nParameters\r\n-----------\r\n  lookup: dict[str, Callable[T, R]]\r\n  computations: list[T]\r\n\r\nReturns\r\n--------\r\n  list[R]\r\n```"", 'comment_created': datetime.datetime(2023, 9, 13, 11, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324345339, 'comment_body': ""Oh, that's awesome. Thanks, added (with minor fixes)"", 'comment_created': datetime.datetime(2023, 9, 13, 11, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324345864, 'comment_body': 'I did not get what you wanted to have here :(', 'comment_created': datetime.datetime(2023, 9, 13, 11, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324346164, 'comment_body': 'I changed the logic', 'comment_created': datetime.datetime(2023, 9, 13, 11, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324346689, 'comment_body': ""I'm not following, sorry"", 'comment_created': datetime.datetime(2023, 9, 13, 11, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324721380, 'comment_body': ""Renamed everything to 'serial'"", 'comment_created': datetime.datetime(2023, 9, 13, 15, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324722877, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2023, 9, 13, 15, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324723326, 'comment_body': 'I guess this can also be resolved now', 'comment_created': datetime.datetime(2023, 9, 13, 15, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324748804, 'comment_body': ""I recall this one was introduced after fixing`flake8` error, which I believe @IAlibay mentioned somewhere along this PR.\r\nAt least when I'm getting the line back, `flake8` complains about inconsistent indentation."", 'comment_created': datetime.datetime(2023, 9, 13, 16, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324749535, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2023, 9, 13, 16, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324755938, 'comment_body': ""UPD: I'm following, line too long. Fixed."", 'comment_created': datetime.datetime(2023, 9, 13, 16, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324774991, 'comment_body': 'I believe the docs looks better now, thanks', 'comment_created': datetime.datetime(2023, 9, 13, 16, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1324777495, 'comment_body': ""Unfortunately, this is probably the last thing I'm yet struggling with a bit (surprisingly) -- how to pass exactly the necessary amount of work. I did a few tries but didn't succeed -- mainly due to the fact that `n_frames` and `times` do not lay in `self.results`, but are general attributes of the class, and it's slightly harder to keep track of it.\r\n\r\nSince I believe all the rest is fixed now, I'll try to put more effort into it."", 'comment_created': datetime.datetime(2023, 9, 13, 16, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1327609659, 'comment_body': ""might be worth adding this comment to the docstring of `AnalysisFromFunction` so people don't wonder why this backend is missing"", 'comment_created': datetime.datetime(2023, 9, 15, 17, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1327621142, 'comment_body': ""I think you can simplify this function, and remove the code that duplicates logic in `AnalysisBase._setup_frames`, as in [#4269](https://github.com/MDAnalysis/mdanalysis/pull/4269/files#diff-9603716538916396b1e6fa9b37342f3052712200aab4c39ed04db3420f446115R781).  You'll also need to [iterate over the sliced trajectory](https://github.com/MDAnalysis/mdanalysis/pull/4269/files#diff-9603716538916396b1e6fa9b37342f3052712200aab4c39ed04db3420f446115R452) in `AnalysisBase._compute`"", 'comment_created': datetime.datetime(2023, 9, 15, 17, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1327623977, 'comment_body': 'I think `supported_backends` might be a better name. And then rename the `unsafe` parameter of the `run` method to `unsupported_backend`.', 'comment_created': datetime.datetime(2023, 9, 15, 17, 59, 4, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1327625952, 'comment_body': ""in `AnalysisBase` this defaults to `False`, but I guess that doesn't really make sense here because there would be no way for the user to set it to `True`. Perhaps `is_parallelisable` should be passed as an argument to `__init__`? And possibly `available_backends` too?"", 'comment_created': datetime.datetime(2023, 9, 15, 18, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1327634953, 'comment_body': ""I initially found it a little strange that a list of analysis class objects is returned, but I guess it's one per worker? Could you add a short comment explaining this?"", 'comment_created': datetime.datetime(2023, 9, 15, 18, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1327735462, 'comment_body': 'is it necessary to run tests with both 1 and then 2 workers for the parallel backends, rather than just e.g. 2 workers? I think all the logic being tested is the same, and anything that fails with 1 worker would also fail with 2 workers', 'comment_created': datetime.datetime(2023, 9, 15, 20, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1327779312, 'comment_body': 'I find this a little difficult to follow - is it possible to define the fixtures in a simpler (non-dynamic way), even if it means being a bit more verbose?', 'comment_created': datetime.datetime(2023, 9, 15, 20, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1331427432, 'comment_body': '```suggestion\n""""""Analysis backends --- :mod:`MDAnalysis.analysis.parallel`\n==============================================================\n""""""\nfrom collections import UserDict\n```', 'comment_created': datetime.datetime(2023, 9, 20, 10, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331428022, 'comment_body': 'Maybe a better name for this file now might be **backend.py**?', 'comment_created': datetime.datetime(2023, 9, 20, 10, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331429646, 'comment_body': 'create a **doc/sphinx/source/documentation_pages/analysis/parallel.rst** file and add a line `analysis/parallel` to **doc/sphinx/source/documentation_pages/analysis_modules.rst**', 'comment_created': datetime.datetime(2023, 9, 20, 10, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331432797, 'comment_body': 'raise a depreation warning for importing from the original place? Also add the versionchanged and changelog about moving this code block here', 'comment_created': datetime.datetime(2023, 9, 20, 10, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331437734, 'comment_body': 'pep 8', 'comment_created': datetime.datetime(2023, 9, 20, 10, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331456024, 'comment_body': '\n```suggestion\n    .. code-block:: python\n        # implement a thread-based backend\n        from MDAnalysis.analysis.parallel import BackendBase\n        class ThreadsBackend(BackendBase):\n            def apply(self, func, computations):\n                from multiprocessing.dummy import Pool\n\n                with Pool(processes=self.n_workers) as pool:\n                    results = pool.map(func, computations)\n                return results\n        from MDAnalysis.analysis.rms import RMSD\n        R = RMSD(...) # setup the run\n        n_workers = 2\n        backend = ThreadsBackend(n_workers=n_workers)\n        R.run(backend=backend)\n```', 'comment_created': datetime.datetime(2023, 9, 20, 10, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331456906, 'comment_body': 'use code-block for long blocks of codes\n\nor you have to add `>>>` for each line here', 'comment_created': datetime.datetime(2023, 9, 20, 10, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331463417, 'comment_body': '\n```suggestion\n        in the `computations` list. Should effectively be equivalent to running\n        `[func(item) for item in computations]`\n```', 'comment_created': datetime.datetime(2023, 9, 20, 11, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331465181, 'comment_body': '**Results** not `Result`', 'comment_created': datetime.datetime(2023, 9, 20, 11, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331474324, 'comment_body': '.. versionadded:: 2.7.0\n\nshould be two colons.', 'comment_created': datetime.datetime(2023, 9, 20, 11, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331498446, 'comment_body': ""This code snippet can run without any issue.\r\n\r\n```python\r\nimport MDAnalysis as mda\r\nfrom MDAnalysisTests.datafiles import PDB, XTC\r\nfrom MDAnalysis.analysis.base import AnalysisFromFunction\r\nfrom MDAnalysis.analysis.align import rotation_matrix\r\n\r\ndef rotation_matrix_func(mobile, ref):\r\n    return rotation_matrix(mobile.positions, ref)[0][0]\r\n\r\nu = mda.Universe(PDB, XTC)\r\nmobile = u.select_atoms('resid 1-10')\r\nref = u.select_atoms('resid 1-10').positions\r\nrot = AnalysisFromFunction(rotation_matrix_func,\r\n                           u.trajectory,\r\n                           mobile, ref)\r\nrot.run(backend='multiprocessing', n_workers=12, unsafe=True)\r\n```\r\n\r\nI think the error only occurs if analysis_class wrapper is used?"", 'comment_created': datetime.datetime(2023, 9, 20, 11, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1331641218, 'comment_body': 'and several versionadded below as well', 'comment_created': datetime.datetime(2023, 9, 20, 13, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1361206879, 'comment_body': 'As discussed in https://github.com/MDAnalysis/mdanalysis/issues/4158#issuecomment-1714302736, `dask-distributed` should be removed (distributed memory parallelism will be explored and provided via an MDAKit).', 'comment_created': datetime.datetime(2023, 10, 16, 20, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361210210, 'comment_body': 'Would it be worth to have the link to `sklearn.utils.Bunch` as well?', 'comment_created': datetime.datetime(2023, 10, 16, 20, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361213852, 'comment_body': '```suggestion\r\n            raise AttributeError(f""\'{key}\' is a protected dictionary attribute"")\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361216861, 'comment_body': ""Shouldn't all the keys be validated with `_validate_key` here too?"", 'comment_created': datetime.datetime(2023, 10, 16, 20, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361217594, 'comment_body': '```suggestion\r\n            raise AttributeError(f""\'Results\' object has no attribute \'{attr}\'"") from err\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361217770, 'comment_body': '```suggestion\r\n            raise AttributeError(f""\'Results\' object has no attribute \'{attr}\'"") from err\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 12, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361219105, 'comment_body': '```suggestion\r\n        number of workers (usually, processes) over which the work is split\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 10, 16, 20, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361220929, 'comment_body': ""If the code actually runs, I'd keep the `>>>` (which you indeed need to have at each line). So we can make sure that problems are picked up by `doctest`. Otherwise what @yuxuanzhuang suggests is indeed better."", 'comment_created': datetime.datetime(2023, 10, 16, 20, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361221699, 'comment_body': '```suggestion\r\n        .. versionadded:: 2.7.0\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361222842, 'comment_body': '```suggestion\r\n        .. versionadded:: 2.7.0\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 18, 25, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361223321, 'comment_body': '```suggestion\r\n        .. versionadded:: 2.7.0\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361225830, 'comment_body': '```suggestion\r\n        .. versionadded:: 2.7.0\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361228601, 'comment_body': ""This comment is a bit redundant IMO. If it's `NotImplementedError`, it's clear that it needs to be implemented."", 'comment_created': datetime.datetime(2023, 10, 16, 20, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361229061, 'comment_body': '```suggestion\r\n    .. versionadded:: 2.7.0\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361230741, 'comment_body': '```suggestion\r\n    def _get_warnigns(self):\r\n        return {self.n_workers > 1, ""n_workers is ignored when executing with backend=\'serial\'""}\r\n```\r\nThe `>1` part might be a bit confusing for the end user. I\'d just say that `n_workers` is ignored (unless it is 1, for which no warning is issued).', 'comment_created': datetime.datetime(2023, 10, 16, 20, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361231050, 'comment_body': '```suggestion\r\n    .. versionadded:: 2.7.0\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361231328, 'comment_body': '```suggestion\r\n    .. versionadded:: 2.7.0\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361232468, 'comment_body': ""I'd expand the documentation a bit to explain what `scheduler='process'` and `chunksize=1` do."", 'comment_created': datetime.datetime(2023, 10, 16, 20, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361233351, 'comment_body': ""Better to point to `dask`'s installation instructions instead?"", 'comment_created': datetime.datetime(2023, 10, 16, 20, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361233585, 'comment_body': '```suggestion\r\n    Management and aggregation of results stored in :class:`Results` instances.\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361236304, 'comment_body': '```suggestion\r\n    .. versionadded:: 2.7.0\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361237020, 'comment_body': '```suggestion\r\n    >>> # you can also set `None` for those attributes that you want to skip\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361237513, 'comment_body': ""`lookup` is defined below, so it's a bit confusing to refer to it beforehand."", 'comment_created': datetime.datetime(2023, 10, 16, 20, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361239412, 'comment_body': '```suggestion\r\n        .. versionadded:: 2.7.0\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361240522, 'comment_body': '```suggestion\r\n            if True, raise an exception when no aggregation function for a particular argument is found\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361241659, 'comment_body': 'What is this referring to?', 'comment_created': datetime.datetime(2023, 10, 16, 20, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361241910, 'comment_body': '```suggestion\r\n            merged :class:`Results`\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361243287, 'comment_body': 'Better name for `rv`? `results`? `merged_results`?', 'comment_created': datetime.datetime(2023, 10, 16, 20, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361247456, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 10, 16, 20, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1361249717, 'comment_body': '```suggestion\r\n    return importlib.util.find_spec(modulename) is not None\r\n```\r\nThis way the module is not actually imported.', 'comment_created': datetime.datetime(2023, 10, 16, 20, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362654251, 'comment_body': ""I assume you moved this class to `parallel.py` to avoid circular dependencies? In hindsight, I think that's not the right place, since one would expect only things related to parallel analysis to be in there. What about creating an `utils.py` or `results.py` module?"", 'comment_created': datetime.datetime(2023, 10, 17, 19, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362655040, 'comment_body': 'I like @p-j-smith suggestion!', 'comment_created': datetime.datetime(2023, 10, 17, 19, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362656569, 'comment_body': 'This part of the docstring sounds incomplete?', 'comment_created': datetime.datetime(2023, 10, 17, 19, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362656880, 'comment_body': '```suggestion\r\n            names of built-in backends that can be used in :meth:`run(backend=...)`\r\n```', 'comment_created': datetime.datetime(2023, 10, 17, 19, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362659479, 'comment_body': 'I think this no longer works with Python 3.11. See 3.11 note here: https://docs.python.org/3.11/library/functions.html#classmethod\r\n\r\n> Changed in version 3.11: Class methods can no longer wrap other [descriptors](https://docs.python.org/3.11/glossary.html#term-descriptor) such as [property()](https://docs.python.org/3.11/library/functions.html#property).', 'comment_created': datetime.datetime(2023, 10, 17, 19, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362659709, 'comment_body': 'I think this no longer works with Python 3.11. See comment above.', 'comment_created': datetime.datetime(2023, 10, 17, 19, 31, 56, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362663887, 'comment_body': 'Formatting looks off.', 'comment_created': datetime.datetime(2023, 10, 17, 19, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362665177, 'comment_body': 'Are balanced slices called ""computation groups"" now?', 'comment_created': datetime.datetime(2023, 10, 17, 19, 38, 11, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362668498, 'comment_body': 'Any reason for type annotations to be applied only to some of the arguments?', 'comment_created': datetime.datetime(2023, 10, 17, 19, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362668788, 'comment_body': 'This comments apply elsewhere too.', 'comment_created': datetime.datetime(2023, 10, 17, 19, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362672353, 'comment_body': '```suggestion\r\n        if all(isinstance(obj, bool) for obj in used_frames):\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 10, 17, 19, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362673473, 'comment_body': '```suggestion\r\n        # similar to list(enumerate(frames))\r\n```', 'comment_created': datetime.datetime(2023, 10, 17, 19, 46, 25, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362675050, 'comment_body': '@marinegor please resolve the conversations that can be trivially solved to reduce noise.', 'comment_created': datetime.datetime(2023, 10, 17, 19, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362682561, 'comment_body': ""Not sure I fully understand this. If you pass a string that is not in `builtin_backends`, you just get back the same string. So it's not a `backend_class`, isn't it? But maybe it does not matter too much in the code that follows, since stuff like `backend_class is not BackendSerial` would work anyways."", 'comment_created': datetime.datetime(2023, 10, 17, 19, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362683926, 'comment_body': '```suggestion\r\n        if backend_class is not BackendSerial and any(t.parallelizable for t in self._trajectory.transformations):\r\n```', 'comment_created': datetime.datetime(2023, 10, 17, 19, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362687549, 'comment_body': ""I don't see it... Where is it?"", 'comment_created': datetime.datetime(2023, 10, 17, 19, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362691288, 'comment_body': 'Please check the Codecov warnings and add the appropriate test.\r\n\r\n```suggestion\r\n            warnings.warn(f""Analysis not making use of all workers: {executor.n_workers=} is greater than {n_parts=}"")\r\n```', 'comment_created': datetime.datetime(2023, 10, 17, 20, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362694317, 'comment_body': 'See comments above.', 'comment_created': datetime.datetime(2023, 10, 17, 20, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362696983, 'comment_body': 'See comments above.', 'comment_created': datetime.datetime(2023, 10, 17, 20, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362754398, 'comment_body': ""Solving because it's marked as outdated anyways."", 'comment_created': datetime.datetime(2023, 10, 17, 20, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362755176, 'comment_body': 'This looks outdated too. Resolving because of that.', 'comment_created': datetime.datetime(2023, 10, 17, 20, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362755648, 'comment_body': '@marinegor is this still outstanding?', 'comment_created': datetime.datetime(2023, 10, 17, 20, 51, 38, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362758531, 'comment_body': ""Solving because things have been split out to `parallel.py`. @marinegor please resolve conversations where the it is trivial to agree that it's solved."", 'comment_created': datetime.datetime(2023, 10, 17, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362763621, 'comment_body': 'Solving because outdated.', 'comment_created': datetime.datetime(2023, 10, 17, 20, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362766586, 'comment_body': 'I think @orbeckst was asking to add a blank line after the title, i.e. ""Merge results into a single object."". This appears outdated now, so I\'m resolving the conversation but please check this suggestion is generally applied.', 'comment_created': datetime.datetime(2023, 10, 17, 21, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362767644, 'comment_body': 'Solving because ""local"" has been changed in favour of ""serial"".', 'comment_created': datetime.datetime(2023, 10, 17, 21, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1362774666, 'comment_body': ""What's the reason for this change? Looks unrelated to the reminder of the PR to me. What am I missing?"", 'comment_created': datetime.datetime(2023, 10, 17, 21, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1450945878, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2024, 1, 12, 21, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450947078, 'comment_body': "">I assume you moved this class to parallel.py to avoid circular dependencies\r\nYes, indeed.\r\n\r\nI am fine with creating `results.py`, although it's not that big of a file -- although definitely not `utils.py`, since it's too generic."", 'comment_created': datetime.datetime(2024, 1, 12, 21, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450954068, 'comment_body': ""Hm, thanks! I don't actually now how to resolve this properlyü§î\r\n\r\nWe can simply drop `property` for all language versions then, assuming that people won't change anything explicitly anyway.\r\nOr write a specific `@readonlyclassmethod` decorator, although I think it's a bit too much, and would prefer dropping `property`."", 'comment_created': datetime.datetime(2024, 1, 12, 21, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450959555, 'comment_body': ""Yep, it's now `supported_backends` & `unsupported_backend: bool`, thanks!"", 'comment_created': datetime.datetime(2024, 1, 12, 21, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450962844, 'comment_body': 'Yep, fixed that.', 'comment_created': datetime.datetime(2024, 1, 12, 21, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450963262, 'comment_body': 'See discussion above', 'comment_created': datetime.datetime(2024, 1, 12, 22, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450964202, 'comment_body': 'Fixed in commit (sorry, missed this one when reviewing the review)', 'comment_created': datetime.datetime(2024, 1, 12, 22, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450965542, 'comment_body': ""Yes -- they're neither necessarily balanced nor slices anymore, so I guess it makes sense."", 'comment_created': datetime.datetime(2024, 1, 12, 22, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450966354, 'comment_body': 'Fixed, I guess', 'comment_created': datetime.datetime(2024, 1, 12, 22, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450966779, 'comment_body': 'Yep, thanks a lot for this. I split the `_setup_frames` into two functions -- see changes.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450968935, 'comment_body': ""The new code written by me uses type annotations -- however, where I simply changed formatting / didn't touch the code, it's without type annotations.\r\nI updated the code -- if the new function uses old set of arguments, I add type annotations (like in `_setup_computation_groups`)."", 'comment_created': datetime.datetime(2024, 1, 12, 22, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450969319, 'comment_body': 'Yep, also fixed in a commit manually.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450969647, 'comment_body': 'Fixed in commit.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450971062, 'comment_body': ""Yes, you're right -- this was to avoid type comparison here, and ensure we don't get `str` type for built-in ones. All other types would fall through and get rejected later."", 'comment_created': datetime.datetime(2024, 1, 12, 22, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450971213, 'comment_body': 'Fixed in commit.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450971771, 'comment_body': 'Fixed in commit.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450973681, 'comment_body': ""Yes, it's one per worker (or, if `n_parts != n_workers`, one per one part). I tried to make the comment here more clear."", 'comment_created': datetime.datetime(2024, 1, 12, 22, 14, 11, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450973766, 'comment_body': 'See discussion above.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450975000, 'comment_body': ""Oh, it actually only fails in tests, because there's a function inside function that can't get pickled.\r\n\r\nI'll think a bit on how to add a separate test for that, but I guess we can add 'backend=multiprocessing' to `AnalysisFromFunction`."", 'comment_created': datetime.datetime(2024, 1, 12, 22, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450975466, 'comment_body': 'See discussion above.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450976715, 'comment_body': "">Perhaps is_parallelisable should be passed as an argument to __init__? And possibly available_backends too?\r\n\r\nI don't think it makes sense to potentially have the ability to make each other instance parallelizable/not parallelizable, since technically all instances are of the same computational capacity.\r\nIdeally, this should be implemented as a metaclass, I guess. But above there's a discussion on `@classmethod & @property` won't work together anymore, so perhaps we'll remove the `@property` anyway.\r\n\r\n"", 'comment_created': datetime.datetime(2024, 1, 12, 22, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450977937, 'comment_body': ""Ok, added -- although it wasn't my piece of code, I just moved it."", 'comment_created': datetime.datetime(2024, 1, 12, 22, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450979331, 'comment_body': 'Could you please point me to an example of how you deal with wrong imports in MDAnalysis?', 'comment_created': datetime.datetime(2024, 1, 12, 22, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450980065, 'comment_body': ""I'm not sure -- I only moved the code."", 'comment_created': datetime.datetime(2024, 1, 12, 22, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450980386, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450981643, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450981923, 'comment_body': 'Yep, changed.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450982793, 'comment_body': 'It should end with `.`. Fixed.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450983061, 'comment_body': 'Indeed, changed to `merged_results`.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450983492, 'comment_body': 'UPD: new commits fix distribution of results between workers, and now each of them has proper amount of results.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 31, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450983736, 'comment_body': ""Can we resolve this conversation? I feel like it's outdated, with the current implementation."", 'comment_created': datetime.datetime(2024, 1, 12, 22, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450984370, 'comment_body': 'True, changed to `2` only.', 'comment_created': datetime.datetime(2024, 1, 12, 22, 32, 56, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1450986249, 'comment_body': ""I recall I was having issues with `with expectation ...`, and changed it to have more concise parametrization of the test.\r\nI could change it back and make it a separate PR. Or it's ok like this?"", 'comment_created': datetime.datetime(2024, 1, 12, 22, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1451813949, 'comment_body': 'I am now thinking that we can safely leave it as `@classmethod`, name it `get_supported_backends`, and live with the fact that we must add `()` after each call.\r\n\r\nThe reason why `property` is not needed here, is that there is no good way to accidentally set `get_supported_backends` it to something else hoping to add some backends to a class, without changing it from bound method to attribute. Initially I put `@property` hoping to make it slightly hack-proof, but I think `@classmethod` will do exactly the same.', 'comment_created': datetime.datetime(2024, 1, 14, 22, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1466392651, 'comment_body': 'Closing as outdated.', 'comment_created': datetime.datetime(2024, 1, 25, 13, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1466394239, 'comment_body': 'Resolving as outdated.', 'comment_created': datetime.datetime(2024, 1, 25, 13, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1469068151, 'comment_body': 'The title divider line should be here', 'comment_created': datetime.datetime(2024, 1, 29, 4, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1469069840, 'comment_body': '\n```suggestion\n    \n```', 'comment_created': datetime.datetime(2024, 1, 29, 4, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1469070201, 'comment_body': '\n```suggestion\n\n```', 'comment_created': datetime.datetime(2024, 1, 29, 4, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1469070539, 'comment_body': '\n```suggestion\n--------------------------------------\n```', 'comment_created': datetime.datetime(2024, 1, 29, 4, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1471960609, 'comment_body': ""I'd probably expand the description here, to clarify the different serialization."", 'comment_created': datetime.datetime(2024, 1, 30, 21, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1471961244, 'comment_body': '```suggestion\r\nProvides :class:`BackendBase` base class to implement custom\r\n```', 'comment_created': datetime.datetime(2024, 1, 30, 21, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1471961698, 'comment_body': '```suggestion\r\nsubclasses. Two built-in backend classes classes are provided:\r\n```', 'comment_created': datetime.datetime(2024, 1, 30, 21, 8, 17, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1471970492, 'comment_body': '```suggestion\r\n                raise RuntimeError(msg)\r\n```\r\nNot sure if `ValueError` is very informative in all cases here, maybe `RuntimeError` is a better exception for this purpose?', 'comment_created': datetime.datetime(2024, 1, 30, 21, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1471977798, 'comment_body': ""This is an user-facing function, it's missing the docstring."", 'comment_created': datetime.datetime(2024, 1, 30, 21, 21, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1471977858, 'comment_body': ""This is an user-facing function, it's missing the docstring."", 'comment_created': datetime.datetime(2024, 1, 30, 21, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1471977931, 'comment_body': ""This is an user-facing function, it's missing the docstring."", 'comment_created': datetime.datetime(2024, 1, 30, 21, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1471979101, 'comment_body': '```suggestion\r\nStarting from 2.8.0, MDAnalysis ``AnalysisBase`` subclasses can run on a backend\r\n```', 'comment_created': datetime.datetime(2024, 1, 30, 21, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1471982267, 'comment_body': '```suggestion\r\nfor the maximum available on your machine):\r\n```', 'comment_created': datetime.datetime(2024, 1, 30, 21, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1471985080, 'comment_body': 'Resolving, this has been moved.', 'comment_created': datetime.datetime(2024, 1, 30, 21, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1472044849, 'comment_body': 'In defense of @marinegor  I am probably someone who said during earlier reviews that [ValueErrors](https://docs.python.org/3/library/exceptions.html#ValueError) should be raised when a value is not correct, e.g., because it\'s not available as a backend. If you choose [RuntimeError](https://docs.python.org/3/library/exceptions.html#RuntimeError) (which is ""raised when an error is detected that doesn‚Äôt fall in any of the other categories"") the msg should state clearly what went wrong.', 'comment_created': datetime.datetime(2024, 1, 30, 22, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1472358083, 'comment_body': ""That's very fair. My line of thought here is that the message is indeed very informative. If the checks end up checking stuff other than parameters, ValueError might not be general enough. Just thinking out loud, since exceptions are technically user-facing."", 'comment_created': datetime.datetime(2024, 1, 31, 6, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1478484719, 'comment_body': '```suggestion\r\n        R.run(backend=backend, unsupported_backend=True)\r\n```\r\nPerhaps also add a note to the docstring to mention that `unsupported_backend` must be `True` when using a user-defined backend', 'comment_created': datetime.datetime(2024, 2, 5, 16, 2, 39, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1478489918, 'comment_body': '```suggestion\r\n        """"""Main function that will get called when using an instance of `BackendBase`,\r\n```', 'comment_created': datetime.datetime(2024, 2, 5, 16, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1478501308, 'comment_body': 'would be good to clarify that by default only the serial backend is enabled, which is the same as the current behaviour.', 'comment_created': datetime.datetime(2024, 2, 5, 16, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1478513161, 'comment_body': ""what happens if someone passes `n_workers` to the `run` method of their analysis, and passes an instantiated backend that has `n_workers` set?\r\ni.e.\r\n```python\r\nfrom MDAnalysis.analysis.backends import BackendMultiprocessing\r\n\r\nbackend = BackendMultiprocessing(n_workers=10)\r\nmy_analysis.run(n_workers=2, backend=backend)\r\n```\r\n(This probably isn't something users would do with the builtin backends, but they might with their own backends, e.g. if they have a backend for using Dask Distributed they will need to pass an instance rather than then class itself)\r\n\r\nWould 10 workers be used or 2? Either way, it might be confusing for users.\r\n\r\nOne way around this would be to remove the `n_workers` argument from `run`, and have the backends default to using 1 worker per cpu. Then if a user wants to change this they can instantiate the backend and pass this object in.\r\n\r\nOr perhaps for now just add a note to the docstring explaining what would happen in this situation."", 'comment_created': datetime.datetime(2024, 2, 5, 16, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1478521997, 'comment_body': ""Is this section aimed at users writing new analyses or people running in-built analyses? If it's the latter, the[ analysis modules docs](https://github.com/MDAnalysis/mdanalysis/blob/develop/package/doc/sphinx/source/documentation_pages/analysis_modules.rst) might be a better place for it. "", 'comment_created': datetime.datetime(2024, 2, 5, 16, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1478524490, 'comment_body': '```suggestion\r\n        `backends.BackendBase` instance with an implemented `apply` method\r\n```', 'comment_created': datetime.datetime(2024, 2, 5, 16, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1478548770, 'comment_body': ""(This probably isn't something users would do with the builtin backends, but they might with their own backends, e.g. if they have a backend for using Dask Distributed they will need to pass an instance rather than then class itself)\r\n\r\n"", 'comment_created': datetime.datetime(2024, 2, 5, 16, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1478567194, 'comment_body': ""Ideally existing tests shouldn't need to be changed. If it's something that needs fixing, a separate PR would probably be best"", 'comment_created': datetime.datetime(2024, 2, 5, 16, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1480701728, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2024, 2, 7, 0, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1480705784, 'comment_body': ""Done -- I can't reliably explain what's the difference, but I added reference to `dask` documentaion here."", 'comment_created': datetime.datetime(2024, 2, 7, 0, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1480711256, 'comment_body': 'I would stick to `ValueError`, but thanks!', 'comment_created': datetime.datetime(2024, 2, 7, 0, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1480716518, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2024, 2, 7, 0, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1480731856, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2024, 2, 7, 0, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1480731940, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2024, 2, 7, 0, 37, 42, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1480740764, 'comment_body': 'Indeed, thanks.', 'comment_created': datetime.datetime(2024, 2, 7, 0, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1480742333, 'comment_body': 'Done', 'comment_created': datetime.datetime(2024, 2, 7, 0, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1480752935, 'comment_body': ""Oh, thanks, that's a nice catch! I added a check to ensure user specifies the n_workers only once, during the `__init__` of the backend."", 'comment_created': datetime.datetime(2024, 2, 7, 0, 59, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1480764011, 'comment_body': 'False alarm, reverted.', 'comment_created': datetime.datetime(2024, 2, 7, 1, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1481007285, 'comment_body': 'Reference to the documentation sounds perfect, thanks!', 'comment_created': datetime.datetime(2024, 2, 7, 7, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1484857455, 'comment_body': 'newest entry first here if possible', 'comment_created': datetime.datetime(2024, 2, 9, 22, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1484859038, 'comment_body': 'Is this the right word? ""computation"" reads somewhat incorrectly here', 'comment_created': datetime.datetime(2024, 2, 9, 22, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1484860303, 'comment_body': '```suggestion\n\ndef test_can_run_frames(u):\n```\n', 'comment_created': datetime.datetime(2024, 2, 9, 22, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1484862403, 'comment_body': '```suggestion\n\ndef is_installed(modulename: str):\n```', 'comment_created': datetime.datetime(2024, 2, 9, 22, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1484869159, 'comment_body': ""This seems like a pretty crucial test that it might be worth doing two copies of this? One where you do pass the new fixture and one where you don't? The thought here is that we want to ensure that we don't introduce breaking behaviour anywhere by having some kind of non optional new kwarg."", 'comment_created': datetime.datetime(2024, 2, 9, 22, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1484889260, 'comment_body': 'Please check that the formatting in the docs is correct, eg https://mdanalysis--4162.org.readthedocs.build/en/4162/documentation_pages/analysis/backends.html has the versionchanged garbled. Basically, look at the generated pages and fix any reST that displays funnily. Possibly use two empty lines before versionchanged\r\n', 'comment_created': datetime.datetime(2024, 2, 9, 23, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1485664535, 'comment_body': 'should be `get_supported_backends`', 'comment_created': datetime.datetime(2024, 2, 11, 21, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1497931994, 'comment_body': 'It\'s certainly the word I was looking for, as in ""something to be computed"". If you believe some other word should be used, please correct me!', 'comment_created': datetime.datetime(2024, 2, 21, 16, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1497933891, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2024, 2, 21, 16, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1497936560, 'comment_body': ""In this particular case -- sure, no problem. But duplicating all tests for every backend seems very excessive, and I'd rather not do that."", 'comment_created': datetime.datetime(2024, 2, 21, 17, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1497940162, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2024, 2, 21, 17, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1500735052, 'comment_body': 'Done -- and I also done it for `test_frame_slice`', 'comment_created': datetime.datetime(2024, 2, 23, 14, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1502205431, 'comment_body': 'FIxed', 'comment_created': datetime.datetime(2024, 2, 26, 8, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1502207595, 'comment_body': 'I (think) it\'s fine now, at least from what I can see in my sections.\r\n\r\nBut if you search ""versionchanged"" or ""versionadded"" in documentation, you still have few hits in both -- but I guess it shouldn\'t be this way', 'comment_created': datetime.datetime(2024, 2, 26, 8, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1502207840, 'comment_body': 'Added', 'comment_created': datetime.datetime(2024, 2, 26, 8, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1502208445, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2024, 2, 26, 8, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1511771178, 'comment_body': '```suggestion\r\nStarting from v2.8.0, MDAnalysis has introduced process-based parallelization for\r\nvirtually all analysis classes. This page will briefly explain what has changed\r\nin the :class:`MDanalysis.analysis.base.AnalysisBase` protocol, how it affects\r\nusers and developers, when you should use parallelization (almost always!), and\r\nwhen you should abstain from doing so (rarely).\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511772776, 'comment_body': '```suggestion\r\nAll this work was done as part of Google Summer of Code 2023 by @marinegor\r\nand MDAnalysis GSoC mentors.\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 48, 51, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511774467, 'comment_body': ""```suggestion\r\nAlso, backends are getting added to the new classes slowly -- in 2.8.0 only\r\n:class:`MDAnalysis.analysis.rms.RMSD` got new backends. But since adding\r\nparallelization to a class is very simple, it won't take much time until it's\r\nintroduced to all trivial classes.\r\n```"", 'comment_created': datetime.datetime(2024, 3, 4, 20, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511775428, 'comment_body': '```suggestion\r\nThe main idea behind its current implementation is that a trajectory analysis is\r\noften trivially parallelizable, meaning you can analyze all frames\r\nindependently, and then merge them in a single object. This approach is also\r\nknown as ""split-apply-combine"", and isn\'t new to MDAnalysis users, since it was\r\nfirst introduced in [pmda](https://github.com/mdanalysis/pmda). Version 2.8.0 of\r\nMDAnalysis brings this approach to the main library.\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511775789, 'comment_body': '```suggestion\r\nIn short, after checking input parameters and configuring the backend,\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511776286, 'comment_body': ""```suggestion\r\n``AnalysisBase`` splits all the frames into *computation groups* (equally sized\r\n```\r\nI think it's better to use plain English, unless you use code formatting."", 'comment_created': datetime.datetime(2024, 3, 4, 20, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511776487, 'comment_body': '```suggestion\r\nsequential groups of frames to be processed by each worker). All groups then get\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511778654, 'comment_body': '```suggestion\r\nFrom a user point of new, there are no new (non-trivial) methods. If\r\nyou want to write your own analysis class, you still have to implement only\r\n``_prepare``, ``_single_frame`` and ``_conclude``. However, from a developer point of\r\nview, there are a few new methods:\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511779085, 'comment_body': '```suggestion\r\nThe first two methods share the functionality of ``_setup_frames``.\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511779467, 'comment_body': '```suggestion\r\nthrough the trajectory. ``_prepare_sliced_trajectory`` assigns\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511780498, 'comment_body': '```suggestion\r\nclass -- namely, it compares a given backend (if it\'s a ``str`` instance, such as\r\n```\r\nOr ""the""?', 'comment_created': datetime.datetime(2024, 3, 4, 20, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511781012, 'comment_body': '```suggestion\r\n:class:`MDAnalysis.analysis.backends.BackendBase` instance accordingly. If the user\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511781758, 'comment_body': ""```suggestion\r\nmethod), it ensures that number of workers wasn't specified twice (during backend\r\n```"", 'comment_created': datetime.datetime(2024, 3, 4, 20, 58, 9, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511782099, 'comment_body': '```suggestion\r\nAfter a backend is configured, ``_setup_computation_groups`` splits the frames\r\n```\r\nOr ""the""?', 'comment_created': datetime.datetime(2024, 3, 4, 20, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511782332, 'comment_body': '```suggestion\r\nprepared earlier in ``self._prepare_sliced_trajectory`` into a number of groups,\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511782715, 'comment_body': '```suggestion\r\n``_prepare_sliced_trajectory``, and attributes necessary for a specific\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 20, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511786239, 'comment_body': '```suggestion\r\nWhen to use parallelization? (Known limitations)\r\n================================================\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 21, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511787457, 'comment_body': '```suggestion\r\nIn all cases, parallelization will not be useful only when frames are being\r\n```\r\n?', 'comment_created': datetime.datetime(2024, 3, 4, 21, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511788273, 'comment_body': '```suggestion\r\nto not get any benefits from parallelization. Otherwise, you should be fine.\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 21, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511788781, 'comment_body': '```suggestion\r\nSerialization issues\r\n--------------------\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 21, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511790653, 'comment_body': '```suggestion\r\nIf you want to add parallelization to your own analysis class, first make sure\r\nyour algorithm allows you to do that, i.e. you can process each frame independently.\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 21, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511791022, 'comment_body': ""```suggestion\r\n        def get_supported_backends(cls):\r\n            return ('serial', 'multiprocessing', 'dask',)\r\n```"", 'comment_created': datetime.datetime(2024, 3, 4, 21, 5, 21, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511791481, 'comment_body': ""```suggestion\r\nThat's it! The first two methods are boilerplate -- ``get_supported_backends``\r\n```"", 'comment_created': datetime.datetime(2024, 3, 4, 21, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511793461, 'comment_body': '```suggestion\r\nStarting from v2.8.0, MDAnalysis ``AnalysisBase`` subclasses can run on a backend\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 21, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1511794898, 'comment_body': '```suggestion\r\nFor now, you have to be verbal and specify both ``backend`` and ``n_workers``,\r\nsince the feature is new and there are no good defaults for it. For example,\r\nif you specify a too big `n_workers`, and your trajectory frames are big,\r\nyou might get and out-of-memory error when executing your run.\r\n```', 'comment_created': datetime.datetime(2024, 3, 4, 21, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1514592797, 'comment_body': 'ah indeed', 'comment_created': datetime.datetime(2024, 3, 6, 14, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1517201385, 'comment_body': 'This example raises an error: `ValueError: n_workers specified twice`. `backend = BackendMultiprocessing(n_workers=2)` also raises the same error when used as a backend here.', 'comment_created': datetime.datetime(2024, 3, 8, 6, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1517203716, 'comment_body': ""I assume it's just for testing?"", 'comment_created': datetime.datetime(2024, 3, 8, 6, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1517205786, 'comment_body': 'Also add a warning **ThreadsBackend leads to erroneous results**.', 'comment_created': datetime.datetime(2024, 3, 8, 6, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1517213036, 'comment_body': '```suggestion\r\n\r\n\r\n```', 'comment_created': datetime.datetime(2024, 3, 8, 6, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1517213273, 'comment_body': '```suggestion\r\n----------------------------------------------------\r\n```', 'comment_created': datetime.datetime(2024, 3, 8, 6, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1517217446, 'comment_body': 'To be precise, RMSF can be parallelized with split-apply-combine---with a different algorithm (https://www.mdanalysis.org/pmda/api/rmsf.html). I would be more careful with the words here.', 'comment_created': datetime.datetime(2024, 3, 8, 6, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1555600121, 'comment_body': 'Added a warning to the documentation, and refactored the n_workers instantiation a bit, to grab it from backend argument first.', 'comment_created': datetime.datetime(2024, 4, 8, 10, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1555600426, 'comment_body': 'Yep, thanks. Removed.', 'comment_created': datetime.datetime(2024, 4, 8, 10, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1555605962, 'comment_body': 'Yes, indeed, my bad, I meant a different thing. I assume saying ""parallelization of RMSF (in its current implementation) isn\'t possible"" is correct, right?', 'comment_created': datetime.datetime(2024, 4, 8, 10, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1560936806, 'comment_body': 'Perhaps make clear that a serial backend is provided too\r\n```\r\nThree built-in backend classes classes are provided:\r\n:class:`BackendSerial` for serial processing, :class:`BackendMultiprocessing`...\r\n```', 'comment_created': datetime.datetime(2024, 4, 11, 12, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1560937282, 'comment_body': '```suggestion\r\nPython ``multiprocessing`` module, and :class:`BackendDask`, that uses the same\r\n```', 'comment_created': datetime.datetime(2024, 4, 11, 12, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1560937717, 'comment_body': '```suggestion\r\n    checks for its validity, such as `n_workers` and possibly other ones.\r\n```', 'comment_created': datetime.datetime(2024, 4, 11, 12, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1560943044, 'comment_body': '```suggestion\r\n        workload between. Must be a positive integer.\r\n```', 'comment_created': datetime.datetime(2024, 4, 11, 12, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1560944228, 'comment_body': '```suggestion\r\n        number of processes in to distribute the workload between. Must be a\r\n```', 'comment_created': datetime.datetime(2024, 4, 11, 12, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1560948069, 'comment_body': '```suggestion\r\n            (""module \'dask\' is missing. Please install: ""\r\n```', 'comment_created': datetime.datetime(2024, 4, 11, 12, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1562335880, 'comment_body': '> If the checks end up checking stuff other than parameters, `ValueError` might not be general enough.\r\n\r\nI agreed with @orbeckst and @marinegor until you pointed this out @RMeli.\r\nPerhaps the `_get_checks` and `_get_warnings` functions could just be a series of checks that raise an appropriate exception / warning when necessary:\r\n\r\n```python\r\ndef _get_checks(self):\r\n    """"""Check correctness (e.g. ``dask`` is installed if using ``backend=\'dask\'``)\r\n     of the backend\r\n    Raises\r\n    ------\r\n    ValueError\r\n        if `n_workers` is not a positive integer\r\n    """"""\r\n    if not isinstance(self.n_workers, int) or self.n_workers <= 0:\r\n        raise ValueError(f""n_workers should be positive integer, got {self.n_workers=}"")\r\n```\r\n\r\nAnd `_validate` would then look like this:\r\n\r\n```python\r\ndef _validate(self):\r\n    """"""Check correctness and good usage of the backend""""""\r\n    self._get_checks()\r\n    self._get_warnings()\r\n```\r\n\r\nThis way, the most appropriate exception can be raised, and it\'s more explicit what is being validated', 'comment_created': datetime.datetime(2024, 4, 12, 10, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1562357639, 'comment_body': '```suggestion\r\n        if len(objects) == 1:\r\n            merged_results = objects[0]\r\n            return merged_results\r\n        \r\n        merged_results = Results()\r\n        for key in objects[0].keys():\r\n            agg_function = self._lookup.get(key, None)\r\n            if agg_function is not None:\r\n                results_of_t = [obj[key] for obj in objects]\r\n                merged_results[key] = agg_function(results_of_t)\r\n            elif require_all_aggregators:\r\n                raise ValueError(f""No aggregation function for {key=}"")\r\n        return merged_results\r\n```\r\nJust to reduce some of the indentation', 'comment_created': datetime.datetime(2024, 4, 12, 10, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1562368300, 'comment_body': 'should this be:\r\n> introduced a :func:`get_supported_backends` function ...\r\n\r\n?', 'comment_created': datetime.datetime(2024, 4, 12, 10, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1562371075, 'comment_body': 'should `_get_checks` and `_get_warnings` be described here?', 'comment_created': datetime.datetime(2024, 4, 12, 10, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1562377524, 'comment_body': 'is it guaranteed that all analyses will be parallelized in 3.0, or is it an aim?', 'comment_created': datetime.datetime(2024, 4, 12, 10, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1571100047, 'comment_body': 'Indeed, thanks.', 'comment_created': datetime.datetime(2024, 4, 18, 17, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1571102292, 'comment_body': 'Done, thanks.', 'comment_created': datetime.datetime(2024, 4, 18, 17, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1571102572, 'comment_body': 'Done, thanks.', 'comment_created': datetime.datetime(2024, 4, 18, 17, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1571104882, 'comment_body': 'Added', 'comment_created': datetime.datetime(2024, 4, 18, 17, 5, 16, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1572411145, 'comment_body': ""@p-j-smith I think that was my first idea, but then I thought that it could be good to be able to get the list of warning/exceptions without necessarily raising them -- for example, when trying to configure some more complex backend, like on a cluster.\n\nBut it could also be that I'm solving a problem that doesn't yet exist."", 'comment_created': datetime.datetime(2024, 4, 19, 13, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1572414458, 'comment_body': ""Isn't this an attribute of a class (which is also a function)? I'm not sure how to call it correctly in this case."", 'comment_created': datetime.datetime(2024, 4, 19, 13, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1572418047, 'comment_body': ""Isn't this dedicated to the `AnalysisBase` class?\nHowever, I've added a short section about `_get_checks` and `_get_warnings` below."", 'comment_created': datetime.datetime(2024, 4, 19, 13, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1572421524, 'comment_body': ""It's an aim, although you probably better ask @orbeckst for a better phrasing regarding the future."", 'comment_created': datetime.datetime(2024, 4, 19, 13, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1572436865, 'comment_body': 'I think the `supported_backends` property was replaced by a [`get_supported_backends` method](https://github.com/MDAnalysis/mdanalysis/blob/9c45568dbcbed8b3af9bb7e06b83546d9eb2d866/package/MDAnalysis/analysis/base.py#L262-L263)', 'comment_created': datetime.datetime(2024, 4, 19, 14, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1572437044, 'comment_body': 'ah yes, thanks!', 'comment_created': datetime.datetime(2024, 4, 19, 14, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1572439252, 'comment_body': 'Looking at the [3.0 roadmap](https://www.mdanalysis.org/2023/10/25/towards_3.0/) we are aiming at parallelization where possible (the roadmap is a bit vague) but not guaranteeing it ‚Äî @hmacdope do you agree?\r\n\r\nI think we can let the current text stand as is. It\'s a good goal... and will provide plenty of issues where people can try to solve one issue (""parallelize analysis tool X"").', 'comment_created': datetime.datetime(2024, 4, 19, 14, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1572454878, 'comment_body': 'Oh I see, so someone could use this function to know how they should configure their backend? I think the usual way to do this would be with docs and tutorials showing to configure the backend', 'comment_created': datetime.datetime(2024, 4, 19, 14, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'p-j-smith', 'type': 'User'}, {'comment_id': 1589851440, 'comment_body': 'fix link as [inline reST link](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html#external-links)\r\n```suggestion\r\nfirst introduced in `PMDA <https://github.com/mdanalysis/pmda>`_. Version 2.8.0 of\r\n```', 'comment_created': datetime.datetime(2024, 5, 4, 1, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1589865637, 'comment_body': ""Why is this a method? Can't we make it a managed attribute ... or just a class attribute?\r\n\r\nI find it confusing when `is_XXX` has a call signature.\r\n\r\nFurthermore, in `transformations.TransformationBase` we have the attribute `parallelizable` https://github.com/MDAnalysis/mdanalysis/blob/45fb664a4e053772c3d5cf541b2705e270a7f2a6/package/MDAnalysis/transformations/base.py#L108 ‚Äî I would prefer having a common API, i.e., turn `_is_parallelizable` into the attribute `parallelizable`. It should _not_ be a class attribute of the base class to avoid someone accidentally changing it in a derived class without having overriden it first (which would ultimately mess up the parent class) ‚Äî or make it a managed attribute. "", 'comment_created': datetime.datetime(2024, 5, 4, 3, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1589895725, 'comment_body': 'Propose to make this an attribute.', 'comment_created': datetime.datetime(2024, 5, 4, 5, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1590179983, 'comment_body': '`dask.compute` only recognizes `num_workers`. \r\n\r\nhttps://docs.dask.org/en/stable/scheduler-overview.html?highlight=num_workers#configuring-the-schedulers', 'comment_created': datetime.datetime(2024, 5, 4, 23, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'yuxuanzhuang', 'type': 'User'}, {'comment_id': 1590398564, 'comment_body': ""When the `client_RMSD` fixture is used for the first time, it's a bit mysterious where it comes from and what it does because it's not defined in the same file.\r\n\r\nAdd a comment explaining where `client_RMSD` is defined and what it does."", 'comment_created': datetime.datetime(2024, 5, 5, 19, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1590400218, 'comment_body': ""I don't understand what the test is doing.\r\n\r\nIt does not really make sense to set `parallelizable=True` for `NoJump` because it is inherently _not parallelizable_.\r\n\r\nAnd even if `parallelizable=True` then why does the parallel execution below fail with ValueError?"", 'comment_created': datetime.datetime(2024, 5, 5, 20, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1590400692, 'comment_body': 'Add a comment describing where `client_FrameAnalysis` is defined and what it does.\r\n\r\nGlobal fixture definitions in pytest seem necessary but they make for very unreadable code ‚Äî too much magic going on. Thus, comments are necessary.', 'comment_created': datetime.datetime(2024, 5, 5, 20, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1590400926, 'comment_body': 'Add a comment about location of definition for `client_AnalysisFromFunction` and purpose.\r\n\r\nOnce there are a few of these comments, someone new to the tests will pick up the pattern.', 'comment_created': datetime.datetime(2024, 5, 5, 20, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1590410772, 'comment_body': ""The current documentation https://mdanalysis--4162.org.readthedocs.build/en/4162/documentation_pages/analysis/parallelization.html#adding-parallelization-to-your-own-analysis-class states that the method to change is called `is_parallelizable()` (no leading underscore):\r\n```python\r\n    @classmethod\r\n    def is_parallelizable(self):\r\n        return True\r\n```\r\n\r\nDocs and code need to be consistent.\r\n\r\n(In any case, as said in other comments, I'd prefer an attribute `parallelizable` to be consistent with the transformations.)"", 'comment_created': datetime.datetime(2024, 5, 5, 20, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1590411141, 'comment_body': ""If this a new function, add an explicit test for it.\r\n\r\nI think, at the moment we get coverage for it because it is used in code but that's not a test of the function itself."", 'comment_created': datetime.datetime(2024, 5, 5, 20, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1606797216, 'comment_body': 'Fixed, thanks.', 'comment_created': datetime.datetime(2024, 5, 20, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1606800548, 'comment_body': "">Oh I see, so someone could use this function to know how they should configure their backend?\r\n\r\nYes, more or less -- or try to configure it few times without explicitly catching an exception.\r\n\r\n>I think the usual way to do this would be with docs and tutorials showing to configure the backend\r\n\r\nI don't mind changing it, but still think that this way is slightly more flexible to the potential developer."", 'comment_created': datetime.datetime(2024, 5, 20, 13, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1606915272, 'comment_body': ""I see, it's a valid concern.\r\n\r\nIt first was a `@property @classmethod`, but:\r\n\r\n>Class properties are deprecated in Python 3.11 and will not be supported in Python 3.13 // Pylance\r\n\r\nSo I changed it to be a `@classmethod` only. The (initial) reason why it's not an attribute is that there's no such thing as `@classattribute`, and I wanted `parallelizable` to be a readonly property of a class, and not of its instance, since we don't always know the parameters of the class `__init__` to check if it's parallelizable.\r\n\r\nAs for now, I see two possible solutions to it (see also a [gist](https://gist.github.com/marinegor/7edd5787aa03b1896855c5ac3422cffb)):\r\n - have `__is_parallelizable` attribute of all `AnalysisBase` subclasses, and a `@property` that returns it. The downside is that someone could change it to be `True`, and everything will break -- but I guess that's what you get when you change double-underscore parameter which isn't supposed to be changed.\r\n - rename `_is_parallelizable` to something like `get_parallelizability()` and leave it as `@classmethod`, hence maintaining the semantics that you prefer, i.e. a verb-containing method is callable.\r\n \r\nAlso, we wanted to have a default `AnalysisBase` attribute/property/method/whatever to make parallelization opt-in, so I can't see a way to make it instantiated in `__init__`."", 'comment_created': datetime.datetime(2024, 5, 20, 15, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1606917221, 'comment_body': 'Fixed; also see discussion above.', 'comment_created': datetime.datetime(2024, 5, 20, 15, 17, 42, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1606921815, 'comment_body': 'Added a test.', 'comment_created': datetime.datetime(2024, 5, 20, 15, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1606923707, 'comment_body': 'See discussion above', 'comment_created': datetime.datetime(2024, 5, 20, 15, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1606997049, 'comment_body': 'Let\'s just not mess around with double-underscore attributes. If we _really_ wanted to we could un-do the dunder-name mangling but given that Python just does not allow us to really lock away anything, just use convention and if users want to mess up things then they are allowed to. I suggest we use properties with simple class attributes in the following way:\r\n```python\r\nclass AnalysisBase:\r\n    # class authors: override _analysis_algorithm_is_parallelizable \r\n    # in derived classes and only set to True if you have confirmed \r\n    # that your algorithm works reliably when parallelized with \r\n    # the split-apply-combine approach (see docs)\r\n    _analysis_algorithm_is_parallelizable = False\r\n\r\n    def __init__(self, traj, **kwargs):\r\n        ...\r\n\r\n    @property\r\n    def parallelizable(self):\r\n        """"""Read-only attribute that indicates if this analysis can be\r\n        performed in parallel.\r\n\r\n        .. warning:: \r\n           The author of the code has to determine if the algorithm\r\n           can be run in parallel. If users change this setting in any \r\n           way then **wrong results** will likely be produced.\r\n        """"""\r\n        return self._analysis_algorithm_is_parallelizable\r\n```\r\nand then a parallelizable derived class can just use\r\n```python\r\nclass MyParallelAnalysis(AnalysisBase):\r\n        _analysis_algorithm_is_parallelizable = True\r\n```\r\n\r\nEnterprising users will be able to change `_analysis_algorithm_is_parallelizable` but we tell them they shouldn\'t so that becomes their problem, not ours.\r\n\r\nUsing an un-documented single underscore attr with a long name should also make clear that this is not something that users ought to touch.\r\n\r\nAt the end of the day, all of Python APIs are just conventions so I am ok with doing this by convention.\r\n', 'comment_created': datetime.datetime(2024, 5, 20, 16, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1610472806, 'comment_body': "">It does not really make sense to set parallelizable=True for NoJump because it is inherently not parallelizable.\r\n\r\nI just wanted to have any transformation that would allow me to set this attribute. Should I pick another one? Though I changed it to `parallelizable=False`, so I think it's not necessary.\r\n\r\n>And even if parallelizable=True then why does the parallel execution below fail with ValueError?\r\n\r\nYou're right, it should be that a) `NoJump(parallelizable=False)` b) serial works and c) serial fails. I changed the code of `AnalysisBase` and the test."", 'comment_created': datetime.datetime(2024, 5, 22, 18, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1634183473, 'comment_body': '```suggestion\r\n                    :attr:`_analysis_algorithm_is_parallelizable`. Note that you\r\n```', 'comment_created': datetime.datetime(2024, 6, 11, 4, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1634183954, 'comment_body': '```suggestion\r\n        .. note::   If you want to check parallelizability of the whole class, without\r\n```', 'comment_created': datetime.datetime(2024, 6, 11, 4, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1634184802, 'comment_body': '```suggestion\r\n                    explicitly creating an instance of the class, see\r\n```', 'comment_created': datetime.datetime(2024, 6, 11, 4, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1634186415, 'comment_body': 'I _think_ we need to mark-up managed attributes as attr instead of meth\r\n```suggestion\r\n        :attr:`parallelizable` and :meth:`get_supported_backends()`\r\n```', 'comment_created': datetime.datetime(2024, 6, 11, 4, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1634186891, 'comment_body': '```suggestion\r\n            if :attr:`parallelizable` is set to ``False`` but backend is\r\n```', 'comment_created': datetime.datetime(2024, 6, 11, 4, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1634187700, 'comment_body': '```suggestion\r\n            if :attr:`parallelizable` is ``True`` and custom backend instance is used\r\n```', 'comment_created': datetime.datetime(2024, 6, 11, 4, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1634189970, 'comment_body': ""Is this the correct error message?\r\n\r\nI read the code as: If we end up here we would expect that _all_ trajectories have parallelizable transformations BUT we found at least one that wasn't parallelizable so we are raising this exception."", 'comment_created': datetime.datetime(2024, 6, 11, 4, 59, 50, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1636946402, 'comment_body': 'Oh, I guess it should read ""should not have non-parallelizable transformations"" then!', 'comment_created': datetime.datetime(2024, 6, 12, 18, 57, 30, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1636962901, 'comment_body': 'Added a comment at first occurrence ', 'comment_created': datetime.datetime(2024, 6, 12, 19, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1637362037, 'comment_body': ""It's fine with the examples. Initially, it's just us upgrading other analysis so we will be figuring out ways how to describe it in more detail if necessary."", 'comment_created': datetime.datetime(2024, 6, 13, 1, 39, 25, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1697545938, 'comment_body': 'Resolving as outdated.', 'comment_created': datetime.datetime(2024, 7, 30, 20, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697546844, 'comment_body': 'Resolving as outdated.', 'comment_created': datetime.datetime(2024, 7, 30, 20, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697547053, 'comment_body': 'Resolving as outdated.', 'comment_created': datetime.datetime(2024, 7, 30, 20, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697550041, 'comment_body': 'The `versionadded` have been fixed as far as I can tell.', 'comment_created': datetime.datetime(2024, 7, 30, 20, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697550480, 'comment_body': 'Resolving as outdated.', 'comment_created': datetime.datetime(2024, 7, 30, 20, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697554245, 'comment_body': 'Resolving as outdated.', 'comment_created': datetime.datetime(2024, 7, 30, 20, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697555858, 'comment_body': '```suggestion\r\nThree built-in backend classes are provided:\r\n```', 'comment_created': datetime.datetime(2024, 7, 30, 20, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697556504, 'comment_body': '```suggestion\r\n* *serial*: :class:`BackendSerial`, that is equivalent to using no\r\n  parallelization and is the default\r\n```', 'comment_created': datetime.datetime(2024, 7, 30, 20, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697564565, 'comment_body': 'Can we consider this resolved, i.e. the code will stay as-is?', 'comment_created': datetime.datetime(2024, 7, 30, 20, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697577344, 'comment_body': 'This is for future consideration, but it might be interesting to expose the `chunksize` to the user.', 'comment_created': datetime.datetime(2024, 7, 30, 20, 54, 36, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697585103, 'comment_body': 'A non-issue, but something maybe to consider in the future: the output format of `R.run().results` and `R.run(backend=backend).results` is different (floating point vs scientific notation).', 'comment_created': datetime.datetime(2024, 7, 30, 21, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697590356, 'comment_body': '```suggestion\r\n            (""module \'dask\' is missing. Please install \'dask\': ""\r\n             ""https://docs.dask.org/en/stable/install.html"")\r\n```', 'comment_created': datetime.datetime(2024, 7, 30, 21, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697593201, 'comment_body': ""Can you please give a bit more context to this TODO (i.e. it is something that still needs to be tackled in this PR or is it something for the future)? If it's not relevant, please remove."", 'comment_created': datetime.datetime(2024, 7, 30, 21, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697595360, 'comment_body': '```suggestion\r\n    from MDAnalysis.analysis.results import Results, ResultsGroup\r\n    import numpy as np\r\n    \r\n```\r\n`np` is used below.', 'comment_created': datetime.datetime(2024, 7, 30, 21, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697598882, 'comment_body': 'For the future: maybe these code blocks should become doctests?', 'comment_created': datetime.datetime(2024, 7, 30, 21, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697601186, 'comment_body': 'Is it hard to add a test for this? Probably not too important, but `codecov` is complaining. (Could be left as a TODO for the future.)', 'comment_created': datetime.datetime(2024, 7, 30, 21, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697604762, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2024, 7, 30, 21, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697609514, 'comment_body': ""```suggestion\r\n   2023 by @marinegor and MDAnalysis GSoC mentors.\r\n```\r\nMaybe add an actual link to your GitHub profile? (I don't think this is linked automatically, but might be wrong.)"", 'comment_created': datetime.datetime(2024, 7, 30, 21, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697612814, 'comment_body': '```suggestion\r\nIn order to use parallelization in a built-in analysis class ``SomeAnalysisClass``,\r\n```\r\nNitpick, feel free to ignore. It would need to be changed elsewhere.', 'comment_created': datetime.datetime(2024, 7, 30, 21, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1697618067, 'comment_body': '```suggestion\r\ninstance gets an object that will **combine** all the objects from other\r\n```\r\nI think ""remote"" only applied to `dask-distributed` that was finally dropped for this PR?', 'comment_created': datetime.datetime(2024, 7, 30, 21, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1702857630, 'comment_body': ""```suggestion\r\nimplement custom execution backends for\r\n```\r\nOr something like that, otherwise it's a bit hard to understand what backend is from these docs."", 'comment_created': datetime.datetime(2024, 8, 3, 18, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702858046, 'comment_body': 'Please raise an issue for this, the object return should be the same.', 'comment_created': datetime.datetime(2024, 8, 3, 18, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702858608, 'comment_body': '```suggestion\r\n    parallelization.\r\n```', 'comment_created': datetime.datetime(2024, 8, 3, 18, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702860028, 'comment_body': 'An issue for discussion afterwards, since this isn\'t the only place we do this, I believe that as of Python 3.5, you can get away without having to redefine the docstring, it\'ll just inherit it from the parent.\r\n\r\nSee:\r\n\r\n```\r\nIn [10]: class Base:\r\n    ...:     def __init__(self, n_workers):\r\n    ...:         self.n_workers = n_workers\r\n    ...:         pass\r\n    ...:     def _run(self):\r\n    ...:         """"""\r\n    ...:         prints out the number of workers\r\n    ...:         """"""\r\n    ...:         print(self.n_workers)\r\n    ...: \r\n\r\nIn [11]: class A(Base):\r\n    ...:     def _run(self):\r\n    ...:         print(self.n_workers+1)\r\n    ...: \r\n\r\nIn [12]: Base._run??\r\nSignature: Base._run(self)\r\nSource:   \r\n    def _run(self):\r\n        """"""\r\n        prints out the number of workers\r\n        """"""\r\n        print(self.n_workers)\r\nFile:      ~/github/IndustryBenchmarks2024/docs/source/<ipython-input-10-3ad4e8f2102b>\r\nType:      function\r\n\r\nIn [13]: A._run??\r\nSignature: A._run(self)\r\nDocstring: prints out the number of workers\r\nSource:   \r\n    def _run(self):\r\n        print(self.n_workers+1)\r\nFile:      ~/github/IndustryBenchmarks2024/docs/source/<ipython-input-11-e1adfaaade90>\r\nType:      function\r\n```', 'comment_created': datetime.datetime(2024, 8, 3, 18, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702860292, 'comment_body': '```suggestion\r\n        Serially applies `func` to each task object in ``computations``.\r\n```', 'comment_created': datetime.datetime(2024, 8, 3, 18, 45, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702861012, 'comment_body': '```suggestion\r\n        """"""Applies `func` to each object in ``computations`` using `multiprocessing`\'s `Pool.map`.\r\n```', 'comment_created': datetime.datetime(2024, 8, 3, 18, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702863226, 'comment_body': '```suggestion\r\n\r\n\r\n```', 'comment_created': datetime.datetime(2024, 8, 3, 19, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702863999, 'comment_body': ""```suggestion\r\nThis section explains the implementation and background for\r\n```\r\nThat's explicit in the `versionadded` above."", 'comment_created': datetime.datetime(2024, 8, 3, 19, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702864312, 'comment_body': ""```suggestion\r\n   only :class:`MDAnalysis.analysis.rms.RMSD` supports parallel analysis, but\r\n   we aim to increase support in future releases.\r\n```\r\nI'd prefer we don't promise extra things for 3.0, especially when it's not linked to an API break. cc @orbeckst "", 'comment_created': datetime.datetime(2024, 8, 3, 19, 21, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702864854, 'comment_body': 'This is fine here for now, but I do want to say that this will be replaced by the work done in https://github.com/MDAnalysis/mdanalysis/pull/4345 once I get a chance to complete it.', 'comment_created': datetime.datetime(2024, 8, 3, 19, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702864873, 'comment_body': '```suggestion\r\n\r\n    @property\r\n```', 'comment_created': datetime.datetime(2024, 8, 3, 19, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702865086, 'comment_body': ""```suggestion\r\n    _analysis_algorithm_is_parallelizable = True\r\n\r\n    @classmethod\r\n    def get_supported_backends(cls):\r\n        return ('serial', 'multiprocessing', 'dask',)\r\n\r\n```"", 'comment_created': datetime.datetime(2024, 8, 3, 19, 27, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702865243, 'comment_body': '```suggestion\r\n```\r\nAgreed, please remove.', 'comment_created': datetime.datetime(2024, 8, 3, 19, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702866425, 'comment_body': '```suggestion\r\n        """"""Merge results into a single object. If objects contain single\r\n           element, returns it while ignoring _lookup attribute.\r\n```', 'comment_created': datetime.datetime(2024, 8, 3, 19, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702866929, 'comment_body': ""```suggestion\r\n            if True, raise an exception when no aggregation function for a\r\n            particular argument is found. Allows to skip aggregation for the\r\n            parameters that aren't needed in the final object --\r\n            see :class:`ResultsGroup`.\r\n```"", 'comment_created': datetime.datetime(2024, 8, 3, 19, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702866981, 'comment_body': 'Please raise an issue for this.', 'comment_created': datetime.datetime(2024, 8, 3, 19, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702868860, 'comment_body': ""Whilst there's no guidance for this, I would strongly suggest putting class variables at the top of the class (something which I think we've been reasonably good at doing - see our various writers / readers: https://github.com/MDAnalysis/mdanalysis/blob/develop/package/MDAnalysis/coordinates/LAMMPS.py#L154).\r\n\r\nMaking sure we have keep this consistency in our documentation would be good.\r\n\r\n```suggestion\r\n        _analysis_algorithm_is_parallelizable = True\r\n\r\n        @classmethod\r\n        def get_supported_backends(cls):\r\n            return ('serial', 'multiprocessing', 'dask',)\r\n\r\n```"", 'comment_created': datetime.datetime(2024, 8, 3, 19, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702869030, 'comment_body': 'as above, I would suggest moving this to the top of the class', 'comment_created': datetime.datetime(2024, 8, 3, 19, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702873025, 'comment_body': 'This seems like an erroneous deletion?', 'comment_created': datetime.datetime(2024, 8, 3, 20, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702876201, 'comment_body': 'Docstrings first lines have a quasi-meaning or being a one-ish line explanation of what the thing does. We also have a handy `Notes` section in sphinx.\r\n\r\n```suggestion\r\n        Set things up before the analysis loop begins. \r\n        \r\n        Notes\r\n        -----\r\n        ``self.results`` is initialized already in :meth:`self.__init__` with an\r\n        empty instance of :class:`MDAnalysis.analysis.results.Results` object.\r\n        You can still call your attributes as if they were usual ones,\r\n        ``Results`` just keeps track of that to be able to run a proper\r\n        aggregation after a parallel run, if necessary.\r\n```', 'comment_created': datetime.datetime(2024, 8, 3, 20, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702876317, 'comment_body': '```suggestion\r\n\r\n        Notes\r\n        -----\r\n        Aggregation of results from individual workers happens in\r\n        :meth:`self.run()`, so here you have to implement everything as if you\r\n        had a non-parallel run. If you want to enable proper aggregation for\r\n        parallel runs for you analysis class, implement ``self._get_aggregator``\r\n        and check :mod:`MDAnalysis.analysis.results` for how to use it.\r\n        """"""\r\n```', 'comment_created': datetime.datetime(2024, 8, 3, 20, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702876788, 'comment_body': ""Any reason why this isn't covered by tests? If not, then at the very least please raise an issue for it to be done later."", 'comment_created': datetime.datetime(2024, 8, 3, 20, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702877978, 'comment_body': ""Any reason why this isn't covered by tests? If not, then at the very least please raise an issue for it to be done later."", 'comment_created': datetime.datetime(2024, 8, 3, 20, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702878675, 'comment_body': ""Shouldn't this be for `progressbar_kwargs` not verbose?"", 'comment_created': datetime.datetime(2024, 8, 3, 20, 15, 9, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1702878775, 'comment_body': 'No versionadded for this?', 'comment_created': datetime.datetime(2024, 8, 3, 20, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 1704259491, 'comment_body': ""I'm ok with that"", 'comment_created': datetime.datetime(2024, 8, 5, 15, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704276478, 'comment_body': ""I'm ok with leaving as is, leaving the decision for @orbeckst "", 'comment_created': datetime.datetime(2024, 8, 5, 15, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704282899, 'comment_body': 'Done', 'comment_created': datetime.datetime(2024, 8, 5, 15, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704283337, 'comment_body': 'Done', 'comment_created': datetime.datetime(2024, 8, 5, 15, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704296842, 'comment_body': ""Didn't resolve or commit that -- leave it up to @orbeckst  "", 'comment_created': datetime.datetime(2024, 8, 5, 15, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704347843, 'comment_body': "">the object return should be the same.\r\n\r\nit's the same (e.g. `np.allclose(R.run().results, R.run(backend=backend).results` is `True`), though `__repr__` is different. I can't quite get what's the problem, so I'll raise an issue.\r\n\r\n"", 'comment_created': datetime.datetime(2024, 8, 5, 16, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704351705, 'comment_body': 'Done in #611398dd3', 'comment_created': datetime.datetime(2024, 8, 5, 16, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704361118, 'comment_body': 'Indeed, changed back in e31e3171f', 'comment_created': datetime.datetime(2024, 8, 5, 16, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704361955, 'comment_body': ""Just clarifying that this is resolved now, but I won't close since I didn't raise it."", 'comment_created': datetime.datetime(2024, 8, 5, 16, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704362993, 'comment_body': 'I guess this can be resolved now.', 'comment_created': datetime.datetime(2024, 8, 5, 16, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704366812, 'comment_body': 'it was like this:\r\n\r\n<img width=""1129"" alt=""image"" src=""https://github.com/user-attachments/assets/d330d093-9f76-4563-afcc-0d80d6683f47"">\r\n\r\nnot sure what\'s logic for `versionadded`, but indeed this one duplicates the versionchanged below. I removed it in ', 'comment_created': datetime.datetime(2024, 8, 5, 16, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704367949, 'comment_body': 'Indeed, thanks. Fixed in 2ca27d078', 'comment_created': datetime.datetime(2024, 8, 5, 16, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704370394, 'comment_body': ""Added, thanks. I think you're right, it's not linked automatically (at least online or in vscode)"", 'comment_created': datetime.datetime(2024, 8, 5, 16, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704376927, 'comment_body': ""UPD: to be honest, I think it's an issue with `ThreadsBackend`, since truly parallel backends (both `dask` and `multiprocessing`) give normal results. And to be fair, documentation clearly states that it produces erroneous results.\r\n\r\nSo I won't be raising an issue for this, though I'm open for further discussion"", 'comment_created': datetime.datetime(2024, 8, 5, 16, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704383801, 'comment_body': 'Raised an issue: https://github.com/MDAnalysis/mdanalysis/issues/4649', 'comment_created': datetime.datetime(2024, 8, 5, 16, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704384383, 'comment_body': 'Raised an issue: https://github.com/MDAnalysis/mdanalysis/issues/4648', 'comment_created': datetime.datetime(2024, 8, 5, 16, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704386984, 'comment_body': 'Raised an issue: https://github.com/MDAnalysis/mdanalysis/issues/4650', 'comment_created': datetime.datetime(2024, 8, 5, 16, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}, {'comment_id': 1704609121, 'comment_body': ""Ok, that's fair enough I think. No need to raise an issue if the official backends work as expected."", 'comment_created': datetime.datetime(2024, 8, 5, 20, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1704612532, 'comment_body': '```suggestion\r\n                     (""module \'dask\' is missing. Please install \'dask\': ""\r\n```\r\nThis needs to be updated too, this test is now failing.', 'comment_created': datetime.datetime(2024, 8, 5, 20, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 1706451257, 'comment_body': 'LGTM', 'comment_created': datetime.datetime(2024, 8, 7, 6, 29, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718015956, 'comment_body': '```suggestion\r\n          - ``self._ts`` -- Timestep instance\r\n```', 'comment_created': datetime.datetime(2024, 8, 15, 6, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718019679, 'comment_body': '```suggestion\r\n            step size for analysis (1 means to read every frame)\r\n```', 'comment_created': datetime.datetime(2024, 8, 15, 6, 27, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718021997, 'comment_body': '```suggestion\r\n                ""associated unparallelizable transformations""))\r\n```\r\n\r\n@marinegor please double check the correction here.', 'comment_created': datetime.datetime(2024, 8, 15, 6, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718023963, 'comment_body': 'not needed (would be a versionchanged anyway)\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2024, 8, 15, 6, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718024953, 'comment_body': 'add missing \r\n```suggestion\r\n\r\n            .. versionadded:: 2.8.0\r\n```\r\n(might have been accidentally added one above)\r\n', 'comment_created': datetime.datetime(2024, 8, 15, 6, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718026896, 'comment_body': 'This will incorrectly fail if `backend=BackendSerial` is passed through, even though it\'s functionally equivalent to `backend=""serial""`.', 'comment_created': datetime.datetime(2024, 8, 15, 6, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718029723, 'comment_body': '```suggestion\r\n        if ((progressbar_kwargs or verbose) and \r\n            not (backend == ""serial"" or \r\n            issubclass(backend, BackendSerial) or\r\n            isinstance(backend, BackendSerial))):\r\n```\r\nThis is looking a bit wordy but I think str, classes, and instances are all allowed so we need to check for all three. Is this correct @marinegor ?', 'comment_created': datetime.datetime(2024, 8, 15, 6, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718047418, 'comment_body': 'formatting\r\n```suggestion\r\n        """"""Merge multiple Results into a single Results instance. \r\n\r\n        Merge multiple :class:`Results` instances into a single one, using the \r\n        `lookup` dictionary to determine the appropriate aggregator functions for\r\n        each named results attribute. If the resulting object only contains a single\r\n        element, it just returns it without using any aggregators.\r\n```', 'comment_created': datetime.datetime(2024, 8, 15, 7, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718050623, 'comment_body': 'document the input Results!\r\n```suggestion\r\n        ----------\r\n        objects : Sequence[Results]\r\n            Multiple :class:`Results` instances with the same data attributes.\r\n```\r\n         ', 'comment_created': datetime.datetime(2024, 8, 15, 7, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1718052522, 'comment_body': 'reST not markdown\r\n```suggestion\r\n   2023 by `@marinegor <https://github.com/marinegor>`_ and MDAnalysis GSoC mentors.\r\n```', 'comment_created': datetime.datetime(2024, 8, 15, 7, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 1719976523, 'comment_body': ""I actually do, thanks. I can't add a test now, but I've added an issue to resolve this."", 'comment_created': datetime.datetime(2024, 8, 16, 15, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'marinegor', 'type': 'User'}]","[{'commit_sha': 'c58da9fdf4eb49248e87177b9561d20f26768d11', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1061a80a089ad43365287646cee7b25c99b38df8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2d7a56c38ec1e75f7a7dc048c3c36d2374cb8cd2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3d1cf8009bcb22b2c32ffc0d6d388b56ecccc633', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bb31a325c74529e5f20d9f50c7985930187a96f6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eb1feb1d7a5dfb406c1f1487fa52267ebaf583cc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4e11bcfe77182ca79f031c9bb8ba40469baf2c70', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bc295c8c9447e9fef1320a4a03f997d6a100f501', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '75d170701b17cf28d981056d286e8246c8fb0631', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c5bd0b5922012881f3ddd49c34cb3d122605cc64', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '556c3094f5dfa2c571a8ebd7fa3a80ba2c81b149', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '83630b45e2ec98e2454707f009bb7b421d622bee', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e41cba3a74971e6f291742fef99a92a4803b58e8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '16593231b6392104f04bdc7a830560b7b880ecac', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f9a80729cf7704e1172271a280ff9a51a3e913cd', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f975ecf52c7da7da2c8c2770fc30edec80cf68a2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cf0253d2112a7a6749145f736ef04acd53526877', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8b0f4fb8693be7ed49c98c72ba8d0faa28f20bfe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'cc25c65f2c328a78326bad3020ff6d2a41c6438d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4aa005b030ad4171d9193f278333a13b070692ae', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4c1a73ae4b4a57e2db1b7422f3c9908233b3b777', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b76d6ff7884bdcd1debf0e0ccdb18d6854eb44ce', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '502fb84a491f948cc6af31469b971cefbaaf0612', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '49d1742614a8f13a8102c2d2cfb3be5e93eea0a1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '90a318dd53a9989ba071ab137d99ab05898ee5e5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3cc1dffd1ba3e95643791e5c82ad42ca692bffa6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '33e8b4c779389088aa210f2f899db4994bb249b3', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1058ed301f5204de406f5d56ccd9ed4a5139ebef', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b49a8ba0926d7b438deb4b7ffc94a47b67a68ef6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4e083845a559fddf46a1ec6fb153556ac8ce4e36', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '274a6ffbfc4979f0eac5ebe221cbb1f9be74009f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '664e378ba272f4dc7ea6033a569ec84c7b1e7d7c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8eeba7e73a8d730c9d3af904e12fbea64d4608e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '42e34dc9ea87f36f2175557e3d3bda7eaf6b168c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '38fe4eaac5ae58ccd186417ddeee2f7a88547eeb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b9b651d4b790eb49371c8d6d1f0ff839934731c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0c151a1ea49c4ac6ae79af3d6f79cfd1e71d4de2', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '33af08928ca84992f7f18bed6b057d6eed9eedc6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a79229d6ab9ebfc25ae8975710fdd748e5c67795', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a78835844d1c31782e6cb6f6d68216c8ba282ef1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6fe92c2b318f3f29ae5fbba09c061becb0302e47', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4c0937e2e099db92dbd0b42a6c876d6dbf054852', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c40e9e1467b03e1206f9cc0afdb5e9821cd3faca', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '68795b84151d50aa1aea6802fc8dd71ca1db4e93', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '419a97aae973b35712b66577c1bd09359250b545', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bab8e8184f2f5faa7e1f068cd9599bd6f6e7c512', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '641170f54ca2f3ce3f5cf2998fde82834e3e71c6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f31792af07d8186d99c8b7d148c39abc6c12c005', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4a10112f20c6890688fa6d42442c70d5b9747c11', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c8187aed5dfb4b537e6329a00bd80a5421a11044', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac035ebea192f622ce52d0486d207072eef8784b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '076b4ce392792a8d1574b72a5c7ebd078ca73887', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0dffdc88dd5c2211a3c9df064fcd74cba34e9fa1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd9429a8356dc3eca148b80d2ede08713adb30add', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '767388f7c61863425f09243bbed3decc929d425d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1780468ea69430936c7271c446807d27a4eb9a03', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '00593c05e5619b7cacc811eb3e0006c8bc41c349', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6603173726b79ae471d8885a82af4d588da3f924', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fd3378880214660900dcd2dedbad721a3e57a340', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2a3b2f225fa2b57195c02be5c0ba897e359411ec', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '268eada9a8f364470f806d4a37959289d82109b0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4a019af128dd60636d1848fb4a4b90d7b12a768d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '48771258894f5343bdf583a9d13aa5af931e8cf7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9d9d9186be5054218cfee51dbc8a2bd1eac8490e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '81a8df4bca5839dc084cfff25abea9bdc133b7be', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1430a84537f6ebe63c0d5ddfc6ea31262fa9e168', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '48f094c8a5a6506d4e8166538e0cbcac47bbb62b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '110b589c6de209695b8eb823be9fb703018ae0dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd9d63d1a331728d1b2391d34b933aa047356c99e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '60e4ea4db892cd37648f7cae57c8b5661218a85e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a91dacc626e4a2926574192aaec2e0c53ca54b07', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '247d8702f4b0e1b75043d69e99f0349077702aeb', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'df76f9126781b170ec3462ab393f97655efcb36c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '17c29d731b0dffbab367616dd30c54a36ab07577', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fc6d44df9c76cededc7475bc15a8ebeec9487556', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fc74f5ca7595508c8a80d315d71bd33b9afd4f31', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '284d7c0409853736243cff3ba0b575704dc8fd10', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ee91c1b1d943707a17c36ed0371fc7d2218742c6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b2fdd41b0ced72538dc6064c0326b48bc7685511', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eab7136fe7e53b4f45a8a029f28fb2e62a5136bf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '180569afbe4a569f07e0bb8ccbf378b09dd1fcb0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba2246ae0f850c3bdea05f27baf6fbbc756429f1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c08885d5cf2328e6a431b9b7fed097532764d3f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5c7b750f90c4e02580201c4c7cbd65211c2b0b20', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '49c9dcb2c023c1d18112ed6d64470f850cbcd430', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '62760c9151027432e74227bf0f4b1aae8cb86bb4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '90e99a56799653334d57ce98eb516aa78ec69985', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '39f324aecde409d3fd71d2d4cf88e577fd460ca6', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7d7b5e55e65cfcbeca83a21b2ebcfca8a19114cf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '787309bf75af5103bbbc74bf5664265178fc5320', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '77cff6d3fe26e04eb25b6852bdb1c824e38d20fe', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2c583c413f0b21f7d284037146625093dfedbc99', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '76c59d374d5c265382e87355b040b0f2b55fbb02', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ba307749138766204f44b54164441696927372f7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ac0b4a3e60f44fe384e70b006d16b119cbbd7f58', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6e76520b274133f9068ce5f9449bc50a98a5a27b', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a5d24a3c09dbe85c56bc2c36a495116bd35f03be', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2417d877a354b631995cbecee506d93411174813', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1af07d34cff1d8d6eb5bd2e041e3d19f3a959e1a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '38a81dbc8600af4817862e291a7fd9a0f94a3474', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd95615919076d2716a623d54eb6622470a0dcc15', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9e5e5add8a2b2e6465c663f5ac73be3ac2e9a6a4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'fed5d9dfa304f9747940036df5376bc30867cae1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '966cecac1c4495df7bf33cb1c9b58d40e6c29fc4', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'dd1fe28313bbae6b4a6879a6f8516a3ff2c381a9', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5643de17e62825dd5ecdef719d8ec48ff4060caa', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '14c5c53555bc53147d26ea1715d0277da7092a0f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '477f08dd41765cc46c2fc0c55e4fcd9a8a228984', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8c6738ca5489929c15878f955c8b1e99374b499a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '144b909e98c13403e57ba9b87c2da0e931dd1e99', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3224f28091092ccc3010a11f29da9f5972d91464', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'f1da39e516327a223bd25b6a1b9b198ddb3943fc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a0ed309e11c3e7d872c63b61cb2f51e1faa4ead1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'e8625c0e7ce4d148045c1259f4b17ac51853a74e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0ba8407e349ece3213cdcbc428cd9eb05da8b78f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6206760922c3f267e12d318094b1b2c9fa10e3c5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2e101cdc46b68acfc460f4cfef4cea70317e6639', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'b6cb101135abceea60a6348ac0c72e8d533bf810', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '1d547f7effe1b97c1bca43f7eefc0338f6828d33', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '34ec5fc26e21a38c7914baf9cf8a90d714381451', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0ecec69d1504e8eca22eca2159cead9ad90402b5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '81b7b71b3028fa3882fba5806e1600ddeb3642c8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '540cd264bd9e8fcf76321cd85198df794ea87cdc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5a39a1affea965aaaedc6d30e70955cc68118d2d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7695dded2ee98e241e795574f56a2f855d6aa255', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '074f1b2084e44171a0b6f08c2341c858cd639df8', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '94cbefd4beeead57af7c147a91d7f53ca0697be7', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '7f536727c485e456a124f6c3109d114225fccd84', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0ca5c5ff3f83e9f9594f7fc649530bf79a9b3b51', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '72ece490a47baab1c2dae81f89d3d7c4b157f26d', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ef95b040d7d8b71d30d0a1d48355133d033d70ca', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6d37652806ec64d905726d6166aaed19c1649704', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6c26771e4868489f6e81f1e122dd39c438b9363c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5cd0ab03b25c2441db1f97548a48d0abdf2fa4fc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '165174c7de5f0cf76b9ea40bee8123d22fd0859e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '0a72d047a5e50d559a7ea562df26cc5c3e5cc0ae', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a1682663ff3e36a3c93c03c1818cc2ff018e357c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '5683245d850a8eb8bad56e9c939c7b0ffac0d882', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '28b67f8e9008019ead5525639e899aa1c8ec00df', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '44a460099f8086c86a4aa33147809a680ae9a902', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'bf3fb0617674432a0efc5d0168cc8f91237c39dc', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'ced8a0491f109d88a664c91a807393d0e786b991', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a399f67739e7ab83c299c4757165b2a670c55e2f', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eafa51de5803c8d30baab46c8fc8f4c88c09878e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4ba84a8c194faa46fb3fbbfcd545dbfacd08ab9c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a936b4a3c7129eac45b08a1214aac39023375aa1', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9641dc5dd60e92583a303accf61478974ae1a965', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '9dda9415cb5fde3afb3fec025d25823eb8539253', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '2d9ca292f487058befee58fbdcd701ad43c16c15', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '211cbcf6a64ed932641acb869ea642ccd6a42fca', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4de9107c563ac20ed778dcb2a84ab017b7909f5', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a58e8e1378b66040167c0324a0a713a831dfd6da', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856f65c4a888ec104875eea60b8266a7e601f650', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1058e008f7a4fd7fa59dae99f7e1a4dac95744da', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24a11c36c6df179243c631c720a810a228f5257d', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22987c7c29d09f25b90e9f119742552bf5e7ec3e', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc033a16ec6ff96e12214cf511852085848b7636', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'eb43f4f9f9f6fdd7c937f55c44168eb7baa5da9c', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'db3d8bc806cfcb4ef14c1eefe0c7e7aed90cf21d', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1107cccfe8766072a10a155c465b50610a4600b8', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb53e3faa8941050ae02d8aab2a3c07f55dc2c75', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44bcd8920fe3550596de2941ab5ec7f8abfc6668', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0be8ab95a0aaa0819dfa060929b3e6eea0dcff5d', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25ef3c76ed8d482767abe697a3b01d44d932486d', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '633505f88f49bd8929785d172c328cff7c6f6934', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92bad39bf1e1355ea295bb93385d03d90f1a8b88', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb1779a84be2f877703583e935ab231c888490f', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf96b67e41e281726518bf9b7a09da69a22aec9e', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '102e91a9c8fe38a7a1d66ced31c4414c0c9797bb', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a552c89af55433e4a53757e1e92397a4e2156f', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a685fdd67f36541bf287829dcd31085af772b62', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8b080dfb7f070239476d06bb547155cfa67de9e', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '514688b4335ece328fa6b1e868e33825e873b852', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebcd4ca1562647720c746c934df90b9c4f348de6', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcdf3307e6798162c11925ecbfa86f1c69a51ca1', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f529a41c75b733c7b3c072279370d043fd21e883', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf07a0f0b011a07cd85a5bac7585d58744d2bdf3', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3408a540f6b417279f6c456dc85e7f8f622a452e', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39c9560c000bb8fcff1bba0294a6951002025cbb', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53e00e83a6b6c5f6f417e797f4451fc218624a7a', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fb504b621e7d16bf06e266f816d6289b09b1fb5', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f240a5aa89c90d0297a128d48ddb293c846e887', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abe711da4cfe1b29a5b0e905ee1060fc3d9ea555', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a59a750d381370f0e56ce04d3578aaeb1c34186', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b87152eb25e7adfd90829fdafb09f983ade4d039', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff508de78a8db681212a82d7ed8a91eba9fd6f2f', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd045225a6e8cc7e006716e3b12ba0ecb0beaee81', 'committer_username': 'RMeli', 'committer_name': 'Rocco Meli', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 6, 11, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9e8e53ccf6bdd4145d91f43a1b4d275ad473386', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a53df61036ec85a22727ceaee53dcfd4c5453ee0', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ea030c2a8b0de82534f9e2d4ba6b6c71e02519a', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '656e4617b7da77fa055a4fecf63cc26f586bb047', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '552aab4a864d5a96637b8a72b4a3c52e3c10c8b7', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea7b0c9c9f418f03301235e042b57b9803848b28', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7de11c4605d9ba0d7e9e0e546abf457ec93bffd', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536a197cca87b12a9c7d082fbb5a3634fab4cfca', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04705d7f2a3e47905d8da2680e25f837e82e359a', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a71c809d517ba28d17396e19bcd0652968e48498', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c94b5bf3e42bebdca0fda845c42b9e05fdabeeb0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a67f5d38b1cb7fdfb635cd76dc626ce019239b6e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '12b255b89a11cdf60255980e31d957e365bc973c', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaa4c30ed0b0a35beeb954cf85c06246be7c524c', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e2ae2179db13cdb4ed4c5931af1bd8e37f407cc', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fded90ecded5d3ce72166dbbe598ed6a25925994', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '605b451735305f0d6a577db68d476c3573fbd1e8', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f1e1b8863856f1f811c57a89ea60502d3a8941', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f307d1e930522a4fa75fa80910ec278ea1b9927f', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16030ade5b66e0bebb0d874a6808f8e46a093bd8', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c13f526480a6cadabd763d12ba0538ab658fed4d', 'committer_username': 'RMeli', 'committer_name': 'Rocco Meli', 'committer_email': None, 'commit_date': datetime.datetime(2015, 3, 6, 11, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d0c8d37c7d60dec26f8bb1ff31c5c4b3214f829', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '95b004fc6b142d4f4c55c728f031082e606dd363', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '6e8de75f8ccedb685950d492ab7a8ce40db5e44f', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6bbfddc0d3f06c3a0eed9359bb3e334ea0d2d4', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9eaab9d00282c2dd39ac752ece8d0a1686ef9d0', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '95d969e0a7fe4d92a9ec78ddfd692723def1a6bf', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'c4383819adc175eb46947c4d4f32e3ca956ae6ef', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '140f25211ad777751ebd4b39ad876edc006234b5', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69a44ec85ccbfd0977c5e3170e4ce5e976f5e6bd', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a6724883ad5c3dba58b3b53d24e8cb4dac53349', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c45568dbcbed8b3af9bb7e06b83546d9eb2d866', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35fb1aec0f22e05cd51de9666b3cb0b0bd886333', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e0ccc2c69c49d829d9090acac4fba8127714e4', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab394a49e305549e1ead392aa85b9af7c897791e', 'committer_username': 'yuxuanzhuang', 'committer_name': 'Yuxuan Zhuang', 'committer_email': 'yuxuan.zhuang@stanford.edu', 'commit_date': datetime.datetime(2016, 12, 18, 15, 21, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1324890d3698ef6f2eff237cedd5e1b614fab7f4', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68a7d23dd3fa17234f30ecc58a9d31a6952c204e', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f231c538ccf1923e80244c9be7a60641deebd2', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09649745046ea615b2b1c9fddca922df4bad8e4c', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '962721274becf6c25dce735de0d95619ddfa7781', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99d43b919f56d6a3065e29cf411f63bd7500622f', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd63a38be13d639bad22de5964364837ca9e13295', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c51139bea2e724ab3ed7f490398b79f155698196', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d6fc0a3749fd1c3931cbd4fbe45ab31b3bdaec6', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '862cfb43b40bf39c72566d813a99adb8c44f79e7', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa87c2de7824a9f289947ca515a407638ec47c05', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb9df2641e36c27a2883150fdee2bded4cd2ad81', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b581c91cd018127b6e84119233155801eb3b03', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eddd8c96f1cd9558edc9a61c83f691934bba6bf', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f182b9e2b23df5a4f8599d8993ee6302fdab43a6', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1f4e28977fb12a18b57e2a747a06112a2b7c153', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd543f42282e11c0b505a7dd1fd295c62019406e1', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '611398dd3f1691a65fe1f9a5c7513a01a125c829', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e31e3171fd5e48e13e85797f9cee815b3e0b4533', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccd1842a1499e226fb7bbcfe6ba9b142eabd6490', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ca27d078ae81425840b69139bddfd3fa90851a5', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c063585e4191ca2e276a5a4c10d7628934d3577b', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bbd90180c63ed464d00ade27594bab1c695e39f', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afba2c3d044f99433b430d927d46434fd3f85068', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe37f919b9a53a2e4007667364edb11c5dc739e', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff4d0c28b5bafd03302962973df0d54e0dcb817d', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6672ffc001b86fe2a8e51a0bb7ef21070894127', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dc4613180ffe831fca75af0bd29660eb019a563', 'committer_username': 'marinegor', 'committer_name': 'Egor Marin', 'committer_email': 'marinegor@fastmail.com', 'commit_date': datetime.datetime(2016, 7, 27, 15, 39, 43, tzinfo=datetime.timezone.utc)}]",Egor Marin,20686002,marinegor@fastmail.com,User,,33,,8,10

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
33389183,mdanalysis,MDAnalysis/mdanalysis,Python,642,1273,42,232,7060,465,57,48,"[{'id': 1980137059, 'number': 4638, 'closed': datetime.datetime(2024, 7, 25, 0, 36, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 21, 23, 8, 47, tzinfo=datetime.timezone.utc), 'time_taken': 264472.0, 'time_delta': '3 days, 1:27:52', 'additions': 13, 'deletions': 1, 'state': 'closed'}, {'id': 1883131462, 'number': 4604, 'closed': datetime.datetime(2024, 5, 24, 0, 15, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 22, 18, 53, 2, tzinfo=datetime.timezone.utc), 'time_taken': 105767.0, 'time_delta': '1 day, 5:22:47', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1683732127, 'number': 4433, 'closed': datetime.datetime(2024, 1, 18, 11, 13, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 17, 21, 44, 29, tzinfo=datetime.timezone.utc), 'time_taken': 48562.0, 'time_delta': '13:29:22', 'additions': 27, 'deletions': 4, 'state': 'closed'}, {'id': 1676562901, 'number': 4423, 'closed': datetime.datetime(2024, 1, 20, 22, 5, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 12, 14, 23, 54, tzinfo=datetime.timezone.utc), 'time_taken': 718877.0, 'time_delta': '8 days, 7:41:17', 'additions': 17, 'deletions': 3, 'state': 'closed'}, {'id': 1535806106, 'number': 4304, 'closed': datetime.datetime(2024, 6, 18, 8, 3, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 29, 14, 7, 8, tzinfo=datetime.timezone.utc), 'time_taken': 22701381.0, 'time_delta': '262 days, 17:56:21', 'additions': 876, 'deletions': 1, 'state': 'closed'}, {'id': 1379412431, 'number': 4162, 'closed': datetime.datetime(2024, 8, 16, 19, 12, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 5, 17, 38, 25, tzinfo=datetime.timezone.utc), 'time_taken': 37848846.0, 'time_delta': '438 days, 1:34:06', 'additions': 2373, 'deletions': 362, 'state': 'closed'}, {'id': 1284650624, 'number': 4085, 'closed': datetime.datetime(2023, 3, 29, 4, 42, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 21, 17, 18, 6, tzinfo=datetime.timezone.utc), 'time_taken': 645887.0, 'time_delta': '7 days, 11:24:47', 'additions': 19, 'deletions': 2, 'state': 'closed'}]"
