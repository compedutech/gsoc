pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
560832722,Fix parseLongPath() to handle namespaces,"Fixes #477 
If a `path` of length 1 is passed and qualifies as a namespace character, return `(ns, """")`
",True,479,https://api.github.com/repos/openzim/libzim/pulls/479,https://github.com/openzim/libzim/pull/479,closed,80,14,4,1,25,11,0,0,[],2021-01-25 06:47:31+00:00,2021-02-03 20:30:54+00:00,827003.0,"9 days, 13:43:23","[{'comment_id': 563958751, 'comment_body': 'I think that from the point of view of consistency, the following cases should be treated as equivalent:\r\n\r\n- `A`\r\n- `A/`\r\n- `/A`\r\n- `/A/`', 'comment_created': datetime.datetime(2021, 1, 25, 18, 43, 17, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 564285351, 'comment_body': 'Yes @veloman-yunkan, There is no point in treating them as invalid cases. Modifying the code to accommodate this and adding unit tests for these cases as well.', 'comment_created': datetime.datetime(2021, 1, 26, 6, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 564297330, 'comment_body': ""The condition `(i + 2 <= longPath.size() && longPath[i+1] != '/')` will be a little easier to understand if rewritten as `(i + 1 < longPath.size() && longPath[i+1] != '/')` (since `i+1` is used as an index into `longPath` we check that it isn't out of bounds)"", 'comment_created': datetime.datetime(2021, 1, 26, 7, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 564302161, 'comment_body': 'In general, it is a good practice to have only a single `return` statement in a function. In this case, it is easily achieved by slightly changing how `shortPath` is extracted from `longPath`:\r\n\r\n```c++\r\n  auto shortPath = longPath.substr(std::min(i+2, longPath.size()));\r\n```', 'comment_created': datetime.datetime(2021, 1, 26, 7, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 564482227, 'comment_body': 'Yes, this looks much neater. Thanks!', 'comment_created': datetime.datetime(2021, 1, 26, 12, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 565322253, 'comment_body': 'This workaround should be employed only if the archive uses the old namespace scheme.\r\n\r\nBesides, the case of the empty path will cause problems (the old code was not protected against that corner case too). I think we can add an `ASSERT` that `path` is not empty.', 'comment_created': datetime.datetime(2021, 1, 27, 13, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 565333585, 'comment_body': ""@veloman-yunkan so I should modify this to:\r\n```c++\r\nArchive::EntryRange<EntryOrder::pathOrder> Archive::findByPath(std::string path) const\r\n{\r\n    entry_index_t begin_idx, end_idx;\r\n    if (m_impl->hasNewNamespaceScheme()) {\r\n      ...\r\n    } else {\r\n      ASSERT(path.empty(), !=, true);\r\n      if(path.size() <= 3 && path.back() == '/') path.pop_back();\r\n      ...\r\n    }\r\n    return Archive::EntryRange<EntryOrder::pathOrder>(m_impl, begin_idx.v, end_idx.v);\r\n}\r\n```\r\nIs this the correct approach?"", 'comment_created': datetime.datetime(2021, 1, 27, 14, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 565361886, 'comment_body': 'Let the `ASSERT` be outside/above the `if` statement', 'comment_created': datetime.datetime(2021, 1, 27, 14, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 565991644, 'comment_body': 'It would be better to handle a empty `path` as a special case and returning the same Range than `iterByPath`.\r\n\r\nI\'ve used a lot of ASSERT in the past but we should not.\r\nThe ASSERT should be use for assertion (things that must be always true. If not, this is a bug) ASSERT may be removed in the future in release mode.\r\n\r\nHere we are checking a value coming from the user. We must check it ""normally"" and throw a correct exception.', 'comment_created': datetime.datetime(2021, 1, 28, 10, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 566025742, 'comment_body': ""@mgautierfr That makes sense. For this particular issue, I guess having a separate `if(path.empty())` will be fine.\r\n```c++\r\nArchive::EntryRange<EntryOrder::pathOrder> Archive::findByPath(std::string path) const\r\n{\r\n    entry_index_t begin_idx, end_idx;\r\n    if (path.empty()) {\r\n       begin_idx = m_impl->getStartUserEntry();\r\n       end_idx = m_impl->getEndUserEntry();\r\n    } else if (m_impl->hasNewNamespaceScheme()) {\r\n      ...\r\n    } else {\r\n      if(path.size() <= 3 && path.back() == '/') path.pop_back();\r\n      ...\r\n    }\r\n    return Archive::EntryRange<EntryOrder::pathOrder>(m_impl, begin_idx.v, end_idx.v);\r\n}\r\n```\r\nIs this the change you are suggesting? "", 'comment_created': datetime.datetime(2021, 1, 28, 11, 37, 50, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 566090602, 'comment_body': 'Yes.\r\n\r\nCan you add test for `/` path also please ? (as if the path is empty)', 'comment_created': datetime.datetime(2021, 1, 28, 13, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}]","[{'commit_sha': '6d8de41bb29a98dfbce17beb8ea277f3e4e9c1b4', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
576524586,Fixes #502 File name consistent with input provided,"Fixes #502 

`"".zim""` extension is not automatically added to the output file path if it is not provided by the user in the input.",True,503,https://api.github.com/repos/openzim/libzim/pulls/503,https://github.com/openzim/libzim/pull/503,closed,12,13,4,2,15,4,0,0,[],2021-02-19 15:13:42+00:00,2021-02-24 09:42:16+00:00,412114.0,"4 days, 18:28:34","[{'comment_id': 579811907, 'comment_body': 'So, I had overlooked this fictitious usage of `TempFile` in #493, which resulted in the temporary ZIM file being left behind/not deleted. There is nothing to do about this comment, just documenting my own negligence in order to prevent some of it in the future.', 'comment_created': datetime.datetime(2021, 2, 21, 14, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 580344134, 'comment_body': 'It would be better to initialize `basename` in the initializer list.', 'comment_created': datetime.datetime(2021, 2, 22, 15, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 580878316, 'comment_body': 'It would be better to rename `basename` to `zimName`', 'comment_created': datetime.datetime(2021, 2, 23, 9, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 580879269, 'comment_body': 'This can also be moved in the initializer list.', 'comment_created': datetime.datetime(2021, 2, 23, 9, 24, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}]","[{'commit_sha': '69363a90a1b400b6001c2cae4f7484505b54fd66', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e705b41daa5604d6d5acf2c61ba5d2a6a35b65c2', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
586086023,Filter duplicates entries(redirections) in search suggestions,"Fixes #276 

The motive of this pr is to allow efficient collapsing of duplicate entries(redirects) and to index target paths for redirect entries. If we have three entries like:
1. `Article Target`, `testPath`
2. `Article Redirect 1`, `redirectionPath1`, redirect to Article Target
3. `Article Redirect 2`, `redirectionPath2`, redirect to Article Target

Then a suggestion query  ""Article"" should return {`Article Target`}. That is, articles with the same path are collapsed and the article that is left is the most relevant one.

The changes included in this pr are
- Creating a new value slot `targetPath` in the index to store path/redirectPath of the entries.
- Set `targetPath` as the collapse key if it is available in the index.
- Add unit tests supporting the changes and explaining behavior of chain redirects.

Since we have been storing the `path` as the `data` of the index, To implement this on older indexes afaik, each document in the index would have to be read individually to get the `data`, store it in a set to maintain uniqueness and then create a new `MSet` out of these selected documents. This is a bit tricky and affects the search performance. So I prefer to skip this entirely for older zims (which will be skipped since they don't have `targetPath` in valuesmap) and use it as a feature in the newer zim files. Open to suggestions here.

TODO:
- ~~Handle multiple redirects~~ Redirect chain seems like a super edgy case and the work needed to fix it is not proportionate to the value it brings. Skipping it for this pr.",True,515,https://api.github.com/repos/openzim/libzim/pulls/515,https://github.com/openzim/libzim/pull/515,closed,97,6,5,3,13,18,0,0,[],2021-03-06 15:42:43+00:00,2021-03-12 05:51:14+00:00,482911.0,"5 days, 14:08:31","[{'comment_id': 589318329, 'comment_body': 'Please add redirection chain and be explicit in the tests that we are NOT fixing the chain.\r\n\r\n(And if later we fix the chaining, we will update this test to show that we ARE fixing the chain).', 'comment_created': datetime.datetime(2021, 3, 8, 10, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 589319554, 'comment_body': '`value_store` doesn\'t seem to be a good name. As we store the path of the entry, it would be better to call it ""path"".', 'comment_created': datetime.datetime(2021, 3, 8, 10, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 589354598, 'comment_body': ""I don't really understand why path would be a good name, but in any case we should document in the code each metadata and the meaning of the value."", 'comment_created': datetime.datetime(2021, 3, 8, 11, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 589411076, 'comment_body': 'Because a variable[*] name should indicate what it contains. As we store a path, ""path"" seems a good name.\r\n""value_store"" doesn\'t provide any information. We store a value yes, but it is the purpose of a variable. We never name a variable ""variable"".\r\n\r\n[*] This is not technically a variable, but this is a slot in which we can put a value. The same rule applies when we need to name it.', 'comment_created': datetime.datetime(2021, 3, 8, 13, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 589414509, 'comment_body': 'AFAIK this metadata is almost free text, so we should have something more explicit than just `path`. In particular if beside we have `title:0` which means? titles are not stored as value? What about `path_stored_as_value`?', 'comment_created': datetime.datetime(2021, 3, 8, 13, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 589433189, 'comment_body': 'Ok, I think I need to explain how we store things in the xapian database.\r\nWe are storing ""document"" in the xapian database :\r\n- It contains a data. This is the ""main content"" of the document. It is intended to be the data we want to retrieve and we should not use it in the query step (for performance reason).\r\n- We can associate some terms with it. This is the classical ""indexation"" step, analyse the content and generate a index based on the terms.\r\n- We can also add some specific values to a document. This can be used as metadata for the document or be used in the query (to filter, sort, ...)\r\n\r\nBut in xapian, the value are identified by a integer.\r\nWe set the value with `document.add_value(index, value)` (to set the `value` in the slot `index`).\r\nAnd we can use it in several ways :\r\n- `Xapian::LatLongDistancePostingSource(index, centre, metric, distance)` to add query on the geographic position stored in the slot `index`.\r\n- `Xapian::Enquire::set_sort_by_relevance_then_value(index, false)` to sort by relevance and then by value stored in the slot `index`.\r\n- `Xapian::Enquire::set_collapse_key(index)` to collapse (regroup) results using the value stored in the slot `index`.\r\n\r\nThe question is what index to use ?\r\nWe can hard code this in the code. But then it would be pretty difficult to add/remove/change value when we want to fix/add feature and keep compatibility. We need a way to know what values are stored in the document and in which slot.\r\n\r\nThis is the purpose of the ""valuesmap"" metadata (which is a database metadata).\r\nIt is a string telling what values are stored in the documents and in which slot.\r\n- `""title:0""` means we store the title at slot 0.\r\n- `""title:0;wordcount:1;geo.position:2""` means we store title at slot 0, wordcount in slot 1 and geo.position in slot 2.\r\n\r\nThis way, when doing the query. We can parse the string to get a map and then use this maps this way :\r\n`Xapian::Enquire::set_collapse_key(valuemap[""title""])`. We don\'t have to hardcode the index, we get it from the database metadata.\r\nWe give a name to the value. (It is the exact same purpose of the variable, we give a name to a value instead of using its address)\r\n\r\nIf somehow, we drop the wordcount because we find it useless, we could create a database without it and have a valuesmap `""title:0;geo.position:1""`. Old libraries (on new zim) would know there is no `wordcount` and that `geo.position` are in slot 1 (instead of 2).\r\nNew library (on old zim) would know that the `geo.position` is in slot 2 (and don\'t care about `wordcount` value).\r\n\r\nBy setting the value map to `""title:0;path:1""` we are telling the reading library that title is stored in slot 0 and path in slot 1.\r\n`value_store` doesn\'t provide any useful information.\r\n`path_store_as_value` is providing to much information (by definition, path is stored as value)\r\n\r\n---\r\n\r\nI just realize your misunderstanding : 0/1 are not boolean telling if the value is stored or not.\r\nWe are not telling if the path is stored as value or not. We are telling in which slot we can find the path.', 'comment_created': datetime.datetime(2021, 3, 8, 13, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 589559780, 'comment_body': ""Thanks @mgautierfr! That clears a lot of stuff. Yes, I think `path` is a more appropriate name for slot # 1 in the titles index. It is explicit about what it actually stores. I'll fix this."", 'comment_created': datetime.datetime(2021, 3, 8, 16, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 589640228, 'comment_body': 'Adding a separate test which checks the current expected behavior. I have added a comment there specifying the nature of the test.', 'comment_created': datetime.datetime(2021, 3, 8, 18, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 590134402, 'comment_body': 'I\'m surprised with this.\r\nAs ""Article Redirect 1"" is a direct redirect to ""Article Target"" we should avoid a duplication between them.\r\nThe result should be ""Article Redirect 2"" and one of ""Article Target""/""Article Redirect 1"" (depending of the score).', 'comment_created': datetime.datetime(2021, 3, 9, 9, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 590166790, 'comment_body': 'Make `const`\r\n\r\nA general advice - anything should be `const` by default. That helps to eliminate a lot of errors due to unintended change of state. Mutation must be allowed if it cannot be avoided.', 'comment_created': datetime.datetime(2021, 3, 9, 10, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 591475527, 'comment_body': 'Yes it is actually surprising. When I add another redirect 3 targeting to redirect 2, the result set is `{ ""Article Target"", ""Article Redirect 1"", ""Article Redirect 2"" }` even though the values written by indexer are:\r\n```\r\nwrote: article target testPath\r\nwrote: Article Redirect 1 testPath\r\nwrote: Article Redirect 2 redirectionPath1\r\nwrote: Article Redirect 3 redirectionPath2\r\n```\r\nI am not really sure whats happening here because the last article is getting collapsed even though the path is different. Looking into this.', 'comment_created': datetime.datetime(2021, 3, 10, 12, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 591621336, 'comment_body': 'The test is working as expected. This apparent ""issue"" is the expected behavior for indexing target path instead of the redirect\'s path, \r\n- when I make a query `""Article Redirect 1""`, the result set I get is `{""Article Target""}`\r\n- when I make a query `""Article Redirect 3""`, the result set I get is `{""Article Redirect 2""}`. \r\n\r\nSo the result set I am getting in the unit test is essentially:\r\n```\r\n""Article Target"" (originally: article target)\r\n""Article Redirect 1"" (originally: article redirect 2, but indexed path is of its target ""article redirect 1"")\r\n""Article Redirect 2"" (originally: article redirect 3, but indexed path is of its target ""article redirect 2"")\r\n``` \r\nSince this is a question of what behavior is to be expected, I need your suggestions @mgautierfr @veloman-yunkan @kelson42 .\r\n\r\nI think indexing the path of the redirect(original path) in the document data and path of the target(redirectPath) in the values map can fix this if need be. ', 'comment_created': datetime.datetime(2021, 3, 10, 15, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 592198199, 'comment_body': 'It is not the behavior expected (at least not by me).\r\n\r\nIn you test we are indexing three things :\r\n- `Article Target` with path `testPath` (the item)\r\n- `Article Redirect 1` with path `testPath` (the redirection `redirectionPath1`)\r\n- `Article Redirect 2` with path `redirectionPath1` (the redirection `redirectionPath2`)\r\n\r\nWhen we search for ""Article"" we should have (internally) :\r\n- A ""group"" for `testPath` [`Article Target`, `Article Redirect 1`]\r\n- A ""group"" for `redirectionPath1` [`Article Redirect 2`]\r\n\r\nAs we keep only one element per group we should have the result (`Article Target`, `Article Redirect 2`) or (`Article Redirect 1`, `Article Redirect 2`), depending of the score of `Article Target` and `Article Redirect 1`.\r\n\r\nIf we search for ""Redirect"" we should have (internally) :\r\n- A ""group"" for `testPath` [`Article Redirect 1`]\r\n- A ""group"" for `redirectionPath1` [`Article Redirect 2`]\r\n\r\nAs we keep only one element per group we should have the result (`Article Redirect 1`, `Article Redirect 2`).\r\n\r\nBut we should never have a result (`Article Target`, `Article Redirect 1`) as they are sharing the same key(path).\r\n', 'comment_created': datetime.datetime(2021, 3, 11, 9, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 592322333, 'comment_body': '@mgautierfr Understood, I have changed the value to store the path/redirectPath and the data in the index is storing the original path. Now we are getting the expected behavior. Re-requested a review.', 'comment_created': datetime.datetime(2021, 3, 11, 12, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 592367256, 'comment_body': 'In fact, this is not only backward compatibility.\r\nWe are still getting a entry using the path stored in the data\r\nhttps://github.com/openzim/libzim/blob/master/src/search_internal.h#L88\r\n\r\nAnd it is a ""good"" thing. The data of the document is the id to get the entry in the zim file.\r\n(If we change this, we may store the id (number) of the entry instead of the path. But it is not so easy to do)\r\n\r\nThe ""path"" we are storing in the values is something different, it is not the id of the entry, it is a collapsing value and it is normal it is different.\r\n', 'comment_created': datetime.datetime(2021, 3, 11, 13, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 592369649, 'comment_body': 'We are not storing the path of the entry. So ""path"" is maybe not the good name after all.\r\nWe may name it ""targetPath""/""finalPath"" (if we want to describe what is in the value) or ""collapseKey""(if we want to describe how we use the value).\r\n\r\nI would go with ""targetPath"". (It would be ""finalPath"" if we were resolving redirect chain).', 'comment_created': datetime.datetime(2021, 3, 11, 13, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 592383660, 'comment_body': 'Yeah that makes sense. I should change `path` to `targetPath`.', 'comment_created': datetime.datetime(2021, 3, 11, 14, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 592385863, 'comment_body': 'Oh! that means it will be inevitable to have paths stored in two places until we find another **efficient** method to implement the collapse feature. I should change the comment then.', 'comment_created': datetime.datetime(2021, 3, 11, 14, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}]","[{'commit_sha': 'b13bec8941616c394121ebb49e5f37ca9f2acaff', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '782f398cf0905653700fbf00bdd44fe4441ab82d', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4fe0d2854bfd4a7f6699d8c2a6fd9a00ed51588', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
568802032,Optimize BM25 for better kiwix-search suggestions,"Fixes #458 
Since we are using a separate index for titles, using the default `Xapian::BM25Weight` tuning parameters poses some issues. BM25 is a ""bag of words"" algorithm based upon the frequency of words - there's no scoring bonus for matching ordering or for anchoring for a title search which is preferred when we search over titles. The changes I plan to include with this pr are:
- Tune `Xapian::BM25Weight`
The within-document-frequency(wdf) factor k1 with a default value of `1` is too much for a title search. Reducing `k1` to `0.001` and increasing length normalization is sufficient improvement. 
- `set_sort_by_relevance_then_values(valuesmap[""title""])`
When searching a large index, we have several documents with the same relevance. This mixup causes issues like single term queries like ""berlin"" going way down the suggestion list when it should be around the top. Sorting by values for the same relevance brings them back to top.

With these two changes:
```
$ kiwix-search --suggestion -v wikipedia_en_all_mini_2021-01.zim ""berlin"" 
Performing suggestion query `berlin`
Setup queryparser using language eng
Mark query as 'partial'
Parsed query 'berlin' to Query((Zberlin@1 OR (WILDCARD SYNONYM berlin OR Zberlin@1)))
Berlin, Berlin 100
Berlin Berlin 100
Berlin, Berlin (2020) 99
Berlín 99
Berliner 99
Berline 99
Berlin 99
.berlin 99
Hotel Berlin, Berlin 99
Hotel Berlin Berlin 99
```


",True,492,https://api.github.com/repos/openzim/libzim/pulls/492,https://github.com/openzim/libzim/pull/492,closed,205,87,6,3,17,32,0,1,[],2021-02-06 15:04:14+00:00,2021-02-24 13:12:47+00:00,1548513.0,"17 days, 22:08:33","[{'comment_id': 576676363, 'comment_body': 'It would be better if the order in which the items are added is different from the expected order of the query results. Otherwise, the matching order may have a much simpler explanation.', 'comment_created': datetime.datetime(2021, 2, 16, 9, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 576677519, 'comment_body': ""The line doesn't make sense, since there is no such entry in this ZIM archive."", 'comment_created': datetime.datetime(2021, 2, 16, 9, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 576992772, 'comment_body': '@maneeshpm Probabky we should set the mainpage to the first page in the list,', 'comment_created': datetime.datetime(2021, 2, 16, 17, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 577328226, 'comment_body': 'Right, Shuffling the order.', 'comment_created': datetime.datetime(2021, 2, 17, 5, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 577328518, 'comment_body': ""The mainPath isn't playing any role in our tests anyway. Removing it."", 'comment_created': datetime.datetime(2021, 2, 17, 5, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 577673244, 'comment_body': 'Usage of `TempFile` here is fictitious, since it is only used to generate a temporary path. The file created at that path is not removed.', 'comment_created': datetime.datetime(2021, 2, 17, 14, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 577673588, 'comment_body': ""Can't this be replaced with `ASSERT_EQ(expectedResult, resultSet)`?"", 'comment_created': datetime.datetime(2021, 2, 17, 14, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 577674875, 'comment_body': ""Can't this be replaced with `ASSERT_EQ(expectedResult, resultSet)`?"", 'comment_created': datetime.datetime(2021, 2, 17, 14, 51, 54, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 577732494, 'comment_body': 'Do you think using `remove(<PATH>);` after the file is used the best way to do this?', 'comment_created': datetime.datetime(2021, 2, 17, 15, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 577738302, 'comment_body': 'I would convert the `createTestZim()` function into a helper class `TempZimArchive` that removes the underlying file in its destructor.', 'comment_created': datetime.datetime(2021, 2, 17, 16, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 577758701, 'comment_body': '@veloman-yunkan Do we have a class/solution which allow to handle these tmp_file elegantly (without having to remove the file explecitly for example)?', 'comment_created': datetime.datetime(2021, 2, 17, 16, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 577766264, 'comment_body': 'For other scenarios `TempFile` was such a class. It can be slightly enhanced so that we can derive `TempZimArchive`  from it.', 'comment_created': datetime.datetime(2021, 2, 17, 16, 39, 39, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 577874436, 'comment_body': ""1. Class names must start with a capital letter\r\n2. This class's design is not what I had in mind. I envisioned it to be derived from `TempFile` and use its path as is (instead of adding an extension). Then `TempFile`'s destructor would automatically remove the file. If a ZIM file absolutely has to have a .zim  extension then `TempFile` should be enhanced to allow specifying an extension."", 'comment_created': datetime.datetime(2021, 2, 17, 19, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 578670195, 'comment_body': 'It looks like an extension is necessary, without it I get a `zim-file is too small to contain a header` error. \r\nTo modify TempFile, after changing the header to contain a default parameter `TempFile(const char* name, const char* ext = """");`, I change [this](https://github.com/openzim/libzim/blob/dfac3a68b1fcbf12baa5d021de414348b3af474b/test/tools.cpp#L52) to\r\n```c++\r\n  const char* const TMPDIR = std::getenv(""TMPDIR"");\r\n  const std::string tmpdir(TMPDIR ? TMPDIR : ""/tmp"");\r\n  path_ = tmpdir + ""/"" + name + ""_XXXXXX"" + (ext[0] == \'\\0\' ? """" : "".""  + std::string(ext));\r\n``` \r\nIt works for Linux but I am not sure how to set this up for windows. I couldn\'t find any function in windows API that lets you create temporary file with extension other than `.TMP`. Is this the right approach?', 'comment_created': datetime.datetime(2021, 2, 18, 18, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 579027741, 'comment_body': '> It looks like an extension is necessary, without it I get a `zim-file is too small to contain a header` error.\r\n\r\nThis looks like something is unclear, the filename extension does not impact the size of the file.', 'comment_created': datetime.datetime(2021, 2, 19, 9, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 579105375, 'comment_body': '@kelson42 The actual issue here is, even if I pass the path `testZim` which was created using TempFile to the creator, the zim created is `testZim.zim`. The extension is added automatically. Thats why we get this error when we try to read the archive with `testZim` only.', 'comment_created': datetime.datetime(2021, 2, 19, 11, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 579112532, 'comment_body': 'I believe this is a pretty old but still problematic behaviour/bug. Would you please open a separate ticket? This should be trivial to fix.', 'comment_created': datetime.datetime(2021, 2, 19, 11, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 579120755, 'comment_body': 'Sure, will do that. So do you think the correct behavior is to create a zim file with the exact name that is passed with or without extension?', 'comment_created': datetime.datetime(2021, 2, 19, 11, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 579174855, 'comment_body': 'yes, I believe so', 'comment_created': datetime.datetime(2021, 2, 19, 13, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 580397623, 'comment_body': 'Those values are pretty obscure.\r\nWhy do we need to change `k1` and `b` ? and why to this value ?\r\nDo we need to change other factors ?\r\n\r\nI suppose that you have read some documentation to find this, it would be nice to have a link to it. Or document the tuning here (or in commit message)', 'comment_created': datetime.datetime(2021, 2, 22, 16, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 580400173, 'comment_body': '@mgautierfr Yes, doc is here https://xapian.org/docs/apidoc/html/classXapian_1_1Weight.html... but not sure this is a good idea to start to put documentation links to external doc when this is trivial to find. Anyway maybe here we can do an exception.', 'comment_created': datetime.datetime(2021, 2, 22, 16, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 580434416, 'comment_body': ""You are pointing to the api of `Xapian::Weight` class. This class is implemented by `BM25Weight` but never directly used in our code (and it cannot as it is a abstract class).\r\n\r\nBut I don't ask for this kind of documentation. I'm asking why changing `k1` to `0.001` and `b` to `1` is good. Why those values and not another ones ?\r\nWhy not change `k2`, `k3` or `min_normlen` ? Do we have documentation on the `BM25Weight` algorithm (not the api) ?"", 'comment_created': datetime.datetime(2021, 2, 22, 17, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 580438562, 'comment_body': '@mgautierfr [This](https://xapian.org/docs/apidoc/html/classXapian_1_1BM25Weight.html) is the documentation for BM25Weight , I should rather add the reason for the value changes as a comment in the code itself. It will be helpful for future references when we optimize the search further.\r\n- If `k1` is high (default 1), the impact of the order of terms is compromised and the impact of repetition of terms is increased. This is optimal for a full-text search but not a title search.  \r\n- The length of documents also effects the weight assigned. In the ideal case, we want all comparison to be happening over strings of same length, this is ensured by normalising the string with `b` value. Otherwise smaller documents will always be ranked higher.\r\n- For a title search, the order of terms in the query is crucial, so there is no point in normalizing the query length according to document lengths, so `k2` is left as it is.\r\n- The frequency of terms within our query is important, so `k3` is left to the default value of 1.\r\n-  `min_normlen` is the minimum value that normalised document length can get. This is left to the default value as we do not want to give very high relevance to really small documents.', 'comment_created': datetime.datetime(2021, 2, 22, 17, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 580444432, 'comment_body': ""The reason is somehow already in the comment in the code and in the https://github.com/openzim/libzim/pull/492#issue-568802032\r\n\r\nWhat I would like to know is how do you choose `0.001` and `1`. Do you just try it and the result was good enough ? Does a documentation in xapian say that for short content it is better to tune the algorithm this way ? Do the values are the good one or just better than the default (and we may have better ones) ?\r\n\r\n(I'm not saying the values are bad. They are pretty good and improve greatly the results. I just want to understand why those values, at least for my personal curiosity)"", 'comment_created': datetime.datetime(2021, 2, 22, 17, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 580468892, 'comment_body': 'To be honest it was mostly trial and error after understanding the effect of each parameter. There is no documentation specifically for our use case, so I dropped a couple of queries in the xapian irc. There results are compiled [here](https://etherpad.wikimedia.org/p/better_kiwix_suggestions). The reason I ended up with these parameters specifically are mentioned in my last comment. These values can be tuned to even better with some changes to Xapian::PostList, which I intend to work on later. So yes, a better tuning parameter can exist with some modification to the code.', 'comment_created': datetime.datetime(2021, 2, 22, 18, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 580515729, 'comment_body': 'Trailing space. I have seen other I believe... editor should be configured to mark them, so you can easiky see them and delete them.', 'comment_created': datetime.datetime(2021, 2, 22, 19, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 580515978, 'comment_body': 'Keeping carriage return would be healthier', 'comment_created': datetime.datetime(2021, 2, 22, 19, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 580517124, 'comment_body': 'Indentation is funky here and in the whole class.', 'comment_created': datetime.datetime(2021, 2, 22, 19, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 580517979, 'comment_body': 'Not bad, but we don’t need a trailing comma at the end of the list here and in the other lists.', 'comment_created': datetime.datetime(2021, 2, 22, 19, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 580917411, 'comment_body': ""I personally like the comma at the end of a list (if the grammar allow it).\r\nThis way, when we add a new item (line) to the list, we don't have to change the previous line. It simplify the diff (and the review).\r\n\r\n(It is just a comment, do not add it back)."", 'comment_created': datetime.datetime(2021, 2, 23, 10, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 580923545, 'comment_body': 'make `explicit`', 'comment_created': datetime.datetime(2021, 2, 23, 10, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 580924016, 'comment_body': 'There is no temporary directory', 'comment_created': datetime.datetime(2021, 2, 23, 10, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}]","[{'commit_sha': '649c6b93bb7d395a62b53d527556485161225fd0', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20b58a8b183a18265277b9f7efae75623f9ed42b', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48105554981a0b67994881c20f59b917c81fb2ca', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
575141685,Improve phrase search suggestions,"This pr is in continuation with #492
Fixes #509

Search with `OP_PHRASE` as the default operator
We are not providing higher weightage to `subquery_phrase`. The way this works is, suppose for a particular document, `subquery_and` gives a weightage `A` and `subquery_phrase` gives a weightage `B`. When we join these two queries with `OP_OR`, the net weight of this document becomes `A+B`. So this is why we are not losing any of the document which we used to get with only a single query. We are promoting the documents with terms in the correct order with the added weight of `subquery_phrase`. We have to do it because using only `subquery_phrase` makes the search too exclusive.

before:
```
$ kiwix-search -v --suggestion wikipedia_en_all_mini_2021-01.zim ""the wolf of ""
Performing suggestion query `the wolf of `
Setup queryparser using language eng
Mark query as 'partial'
Parsed query 'the wolf of ' to Query((Zthe@1 AND Zwolf@2 AND Zof@3))
Teen Wolf 3: The Return of The Wolf 100
The House of the Wolfings 93
The Mouth of the Wolf 93
The Lair of the Wolf 93
The Skin of the Wolf 93
The Cry of the Wolf 93
The House of the Wolf 93
The Wolf of the Sila 93
The Year of the Wolf 93
The Hour of the Wolf 93
```
After
```
▸ kiwix-search -v --suggestion wikipedia_en_all_mini_2021-01.zim ""the wolf of ""
Performing suggestion query `the wolf of `
Setup queryparser using language eng
Mark query as 'partial'
Parsed query 'the wolf of ' to Query(((the PHRASE 3 wolf PHRASE 3 of) OR (Zthe@1 AND Zwolf@2 AND Zof@3)))
The Wolf of Badenoch 100
The Wolf of Debt 100
The Wolf of Gubbio 100
The Wolf of Kabul 100
The Wolf of Rimini 100
The Wolf of Zhongshan 100
The Wolf of the Sila 99
The Wolf Of Wall Street 99
The Wolf of Snow Hollow 99
The Wolf of Wall Street 99
```",True,501,https://api.github.com/repos/openzim/libzim/pulls/501,https://github.com/openzim/libzim/pull/501,closed,215,47,3,4,17,13,0,0,[],2021-02-17 19:01:12+00:00,2021-03-04 12:11:23+00:00,1271411.0,"14 days, 17:10:11","[{'comment_id': 582062331, 'comment_body': 'missing spaces.', 'comment_created': datetime.datetime(2021, 2, 24, 15, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 582064310, 'comment_body': 'We should have controls here with a title having only ""wolf"", to secure the stopwords are handled properly.', 'comment_created': datetime.datetime(2021, 2, 24, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 582064733, 'comment_body': 'Same here, a control title without the words ""the"" and ""of"" would be welcome.', 'comment_created': datetime.datetime(2021, 2, 24, 15, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 584154473, 'comment_body': 'To me this is not clear should be camel case or not? But having two different ways to represent variables is not recommended.', 'comment_created': datetime.datetime(2021, 2, 27, 16, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 584154498, 'comment_body': 'Missing space at the end,', 'comment_created': datetime.datetime(2021, 2, 27, 16, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 584154644, 'comment_body': 'Adding an empty line after the block seems logical to me.', 'comment_created': datetime.datetime(2021, 2, 27, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 584154803, 'comment_body': 'Indentation seems wrong', 'comment_created': datetime.datetime(2021, 2, 27, 16, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 584154827, 'comment_body': 'Indentation wrong', 'comment_created': datetime.datetime(2021, 2, 27, 16, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 584154853, 'comment_body': 'Identation wrong', 'comment_created': datetime.datetime(2021, 2, 27, 16, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 584671705, 'comment_body': 'How do you ensure that `subquery_phrase` has higher weight than `subquery_and`. Does it happen automatically due to some rules in Xapian?', 'comment_created': datetime.datetime(2021, 3, 1, 12, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 584691572, 'comment_body': 'We are not providing higher weightage to `subquery_phrase`. The way this works is, suppose for a particular document, `subquery_and` gives a weightage A and `subquery_phrase` gives a weightage B. When we join these two queries with OP_OR, the net weight of this document becomes A+B. So this is why we are not losing any of the document which we used to get with only a single query. We are promoting the documents with terms in correct order with the added weight of `subquery_phrase`. We have to do it because just using `subquery_phrase` makes the search too exclusive.\r\n\r\nI should perhaps add this as a comment in the code itself.', 'comment_created': datetime.datetime(2021, 3, 1, 12, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 587219315, 'comment_body': 'Why we have `queryParser` in camel case and `suggestion_mode` without camel case? This problem appears in many other places of this PR.', 'comment_created': datetime.datetime(2021, 3, 4, 7, 37, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 587401760, 'comment_body': ""Changing the variables I used in the patch to underscore casing. It's worth noting that we still have a mix of camel case and underscore throughout the file. "", 'comment_created': datetime.datetime(2021, 3, 4, 11, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}]","[{'commit_sha': '2beaf65c14122ff9ce51ae3d7047706a2561f5d0', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af4bb171ce3ae24ee012a186699cdabfd683aef8', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311e598bb74cc142a7ab28e2cd21a149c5a09e30', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7fb949507874f126bd73ed82626ad3b7a731295', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
592349592,Remove collapse based on title,"Fixes #474 

We used to have collapse based on `title` value slot of documents in the suggestion search. This is a feature we do not want to keep. Though this is already not working after the merge of #515 (collapse on `targetPath` override this), the code is still there and should be removed. We only want to perform collapse based on `targetPath`. 

The changes included in this pr are
- Add unit tests that handle the case of different articles with the same title as mentioned in the ticket.
- Removes the unwanted title collapse on suggestion search.",True,520,https://api.github.com/repos/openzim/libzim/pulls/520,https://github.com/openzim/libzim/pull/520,closed,26,4,2,2,2,0,0,0,[],2021-03-13 11:40:37+00:00,2021-03-15 13:21:20+00:00,178843.0,"2 days, 1:40:43",[],"[{'commit_sha': 'b24b0712c3134d48cef94597a0175a5b9b29f58a', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a0fa4603968d2d387d90cd94b7d7f6e31470464', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
602518954,Introduce anchor term to titles index,"Fixes #510 

The solution employed in this PR is different from what was discussed on the ticket. There are some fundamental issues when we tweak the behavior of Xapian::Query in order to achieve anchoring, these are:
- `OP_PHRASE` search becomes uncontrollably tight. The query then matches **only** those documents that begin at the 0th position of the title and hence, skips a lot of relevant search results that occur in the middle of the title.
- Any query made with operators that use the position of terms matches all the documents in the index. That is, even in case of an empty query, `OP_PHRASE` matches all the documents.

In this PR, we are forcing the documents to have an `ANCHOR_TERM` ""0posanchor"" at the beginning of titles. This offers much more flexibility and ease of implementation without bothering Xapain code. Now we can have a third subquery `subquery_anchored` with a querystring prefixed by `ANCHOR_TERM` (""0posanchor <querystring>"") that matches only those documents that begin with the search string. The other two subquery `subquery_and` and `subquery_phrase` ensures that we do not miss out on other relevant results. The relevance score of each document becomes `A + B + C` (normalised out of 100) where `A`, `B` and `C` are relevance scores of that document for the individual subqueries `subquery_and`, `subquery_phrase` and `subquery_anchored` respectively.

Handling compatibility:
- indexes without `ANCHOR_TERM` 
For such indexes, the third subquery will be absent for all the documents and `C` will be 0, hence their relevance will be decided only by `A` and `B` as happens now.
- indexes with `ANCHOR_TERM` on older libzim
`subquery_phrase` and `subquery_and` does not mind to have an additional term in the title of the document. For `subquery_and` relevance of all the documents will be decreased by a similar small factor because of the decrease in wdf. Hence relative order is preserved. `subquery_phrase` is not disturbed at all because of a term at the beginning.
",True,526,https://api.github.com/repos/openzim/libzim/pulls/526,https://github.com/openzim/libzim/pull/526,closed,69,11,4,4,6,7,0,0,[],2021-03-29 07:50:54+00:00,2021-04-07 16:18:03+00:00,808029.0,"9 days, 8:27:09","[{'comment_id': 604132758, 'comment_body': 'It would be better to define `ANCHOR_TERM` only once.', 'comment_created': datetime.datetime(2021, 3, 30, 14, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 604138598, 'comment_body': 'Shouldn\'t we have ""aterm this is a title bterm cterm"" before ""aterm bterm this is a title cterm"" ?\r\nAs ""this is a title"" is closer from the beginning (0posanchor)', 'comment_created': datetime.datetime(2021, 3, 30, 14, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 604176020, 'comment_body': 'Yes, I wanted to implement that. But, as of now, Xapian does not support to assign score based on closeness of terms. It can only check whether the querystring terms are present inside a window size which we can specify.', 'comment_created': datetime.datetime(2021, 3, 30, 14, 56, 23, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 604244734, 'comment_body': 'Ok. This is a improvement anyway. We can go with this.', 'comment_created': datetime.datetime(2021, 3, 30, 16, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 604271933, 'comment_body': 'In your opinion, which is the best place to define this so that we have access to it in both files? is there any common file where we define constants?', 'comment_created': datetime.datetime(2021, 3, 30, 16, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 605028011, 'comment_body': 'There is no common header for the constant. (There is one for the type, but we should not use it).\r\n\r\nYou can create a new header ""constant.h"" with this only one `ANCHOR_TERM` for now. We will add more constants later if needed.', 'comment_created': datetime.datetime(2021, 3, 31, 16, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 605465979, 'comment_body': 'The file (and the only constant in it) is not writer specific.\r\nIt would be better to put it directly in src.', 'comment_created': datetime.datetime(2021, 4, 1, 8, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}]","[{'commit_sha': '838823a0aaaf94a646b0deb76a45fcba0fe6d9d1', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70b10c7ea9cb4f14151fe5b7ccdd6aef8593230a', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c38632d65ea231a789eaebcdb8253014a14ff74', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b166aca37e585071d60bc5e1056fd6378e459469', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
615479512,Non-word symbol friendly suggestions,"> @maneeshpm This PR demonstrates a issue discovered during the work on kiwix/kiwix-lib#488 (for more details see commit https://github.com/kiwix/kiwix-lib/pull/488/commits/e5399be066c05b3f065d7d4542c48a0d4fa721e2). The workaround utilized in the said PR doesn't work for libzim out-of-the-box because it breaks some unit tests.
> 
> Would you mind taking over this PR and completing it?

Fixes #536 

The issue is Xapian queryparser does not work with `OP_PHRASE`/`OP_NEAR` as the default operator on certain kinds of queries. To fix this, we can change the default operator to `OP_OR` and bind the terms in a subquery that is created using query constructor with `OP_PHRASE` to handle the phrasing.

The changes included in this PR are:
- Add a unittest `nonWordCharacters` to suggestions.
- Switch default operator to `OP_OR` ",True,534,https://api.github.com/repos/openzim/libzim/pulls/534,https://github.com/openzim/libzim/pull/534,closed,31,1,2,2,6,4,0,1,[],2021-04-14 19:02:52+00:00,2021-04-16 07:55:51+00:00,132779.0,"1 day, 12:52:59","[{'comment_id': 614335112, 'comment_body': 'It\'s `set_stemming_strategy(Xapian::QueryParser::STEM_NONE)` that fixes the failure of the `Suggestion` unit-tests broken by the original ""bad"" fix. Is there any reason for using `OP_OR` instead of `OP_AND`? What negative effects may disabling of stemming have in this case?', 'comment_created': datetime.datetime(2021, 4, 15, 19, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 614336256, 'comment_body': 'What do you think about using this macro in the other `Suggestion` unit-tests (but of course not in this PR)?', 'comment_created': datetime.datetime(2021, 4, 15, 19, 28, 3, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 614348560, 'comment_body': ""The stemmed terms do not have a `positionList` associated with them. They are just words, so they cannot be used for an `OP_PHRASE`. The bad fix used `OP_AND` which enforced stemming. Hence, the bad fix failed the older tests.\r\n\r\nDisabling stemming won't have any effect at all compared to before this PR. It's by default disabled when we used `OP_PHRASE` as the default operator.\r\n\r\nUsing `OP_AND` instead of `OP_OR` won't have any significant impact. I felt that it is a better indicator of our motive here that we are only using it to get proper tokenizing into separate terms and the actual work is done by `OP_PHRASE` subquery.\r\n"", 'comment_created': datetime.datetime(2021, 4, 15, 19, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 614350213, 'comment_body': ""To be honest it's pretty elegant :smile: A product of experience I guess. I will keep updating the rest of the tests whenever I get the chance with this macro."", 'comment_created': datetime.datetime(2021, 4, 15, 19, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}]","[{'commit_sha': '91fd68240e641eadee219165d7802f33d4d0e853', 'committer_username': 'veloman-yunkan', 'committer_name': 'Veloman Yunkan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 13, 23, 27, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8d1882f9b68ce6f61e8970a60c9a9279a025635', 'committer_username': 'veloman-yunkan', 'committer_name': 'Veloman Yunkan', 'committer_email': None, 'commit_date': datetime.datetime(2015, 4, 13, 23, 27, 3, tzinfo=datetime.timezone.utc)}]",Veloman Yunkan,11933502,,User,,23,,0,12
608952229,Create Xapian::WritableDatabase with DB_NO_TERMLIST Flag,"Fixes #417 

We do not use any operation that requires the use of a xapian term list. Removing it makes our indexes a bit leaner. Refer discussion on the linked issue for more info.

Changes included in this PR:
- Use `Xapian::DB_NO_TERMLIST` flag along with `Xapian::DB_CREATE_OR_OVERWRITE` to create xapian database",True,528,https://api.github.com/repos/openzim/libzim/pulls/528,https://github.com/openzim/libzim/pull/528,closed,2,1,1,1,3,0,0,0,[],2021-04-05 13:27:25+00:00,2021-04-05 16:15:01+00:00,10056.0,2:47:36,[],"[{'commit_sha': 'a1c9d96a9e0130cc68d17022d4b299c2407762ee', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13



622547142,Enhancement for title snippet generation,"Fixes #542 

Currently, the `search_iterator::get_snippet()` method only generates a ft snippet in all cases. If the `suggestion_mode` is true, it should generate a snippet for the title string.

The changes included in this PR are:
- Add `titleSnippet` & `fulltextSnippet` unit test to demonstrate the new behavior
- Modifies the `search_iterator::get_snippet()` method to generate a title snippet if `suggestion_mode` is true.",True,545,https://api.github.com/repos/openzim/libzim/pulls/545,https://github.com/openzim/libzim/pull/545,closed,126,0,3,2,15,4,0,0,[],2021-04-24 08:27:38+00:00,2021-05-11 08:19:00+00:00,1468282.0,"16 days, 23:51:22","[{'comment_id': 626623711, 'comment_body': 'As we always get the first result, it is better to set the range [0, 1]\r\n(But it is small optimization)', 'comment_created': datetime.datetime(2021, 5, 5, 14, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 626628499, 'comment_body': 'It could also be interesting to check snippet with query ""this is"". To check the behavior when there are several results.', 'comment_created': datetime.datetime(2021, 5, 5, 14, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 628715749, 'comment_body': 'Adding the range parameter to the macro ', 'comment_created': datetime.datetime(2021, 5, 8, 7, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 628715776, 'comment_body': 'Adding a new test case for this.', 'comment_created': datetime.datetime(2021, 5, 8, 7, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}]","[{'commit_sha': 'ea3b3b222da7c86a4d64986283a26d5d4b86fccc', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9b30fab24e058d20de307a7076f79f93cd70e1c', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
643328085,Fix snippet highlighting for stemmed terms,"Fixes #86 

We address this issue by introducing a new member variable `m_stemmer` that stores the stemmer used for parsing queries by the `InternalDataBase::m_queryparser`. We use this stemmer as a parameter in `Xapian::MSet::snippet` which fixes this issue.

The changes included in this PR are:
- Adds a unit test `stemmedSearch` that demonstrates the expected behavior
- Introduce a member variable `m_stemmer`
- Use `m_stemmer` as a parameter while generating the snippet",True,559,https://api.github.com/repos/openzim/libzim/pulls/559,https://github.com/openzim/libzim/pull/559,closed,34,4,4,2,3,0,0,0,[],2021-05-12 16:41:33+00:00,2021-05-17 12:26:41+00:00,416708.0,"4 days, 19:45:08",[],"[{'commit_sha': '99b7afae6310431df823261c1eb0bd5c5fde1749', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99e2daa2aa5d3954f8dd77dd15d14d3b48a153df', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
624625328,Add unit test for search iterator,"Fixes #546 

Changes contained this PR:
- Move helper code `TempZimArchive` & `TestItem` to tools for better usability.
- Add some unit tests for the search iterator.",True,547,https://api.github.com/repos/openzim/libzim/pulls/547,https://github.com/openzim/libzim/pull/547,closed,150,79,6,2,7,1,0,0,[],2021-04-27 20:11:19+00:00,2021-05-05 13:41:25+00:00,667806.0,"7 days, 17:30:06","[{'comment_id': 625753154, 'comment_body': 'This test must be compiled only if `xapian_dep` is found.', 'comment_created': datetime.datetime(2021, 5, 4, 12, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}]","[{'commit_sha': 'cf8854189ac882aef3773e288f8f5f207ec33b66', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4d05d2aaf32ff24e4377e33913c9cdd340687f2', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13

635388923,"Revert ""added 204 code for empty return of search""","Fixes #466 

Returning status code `204` in case of empty results doesn't show the empty results page as described in #466. Reverting the changes in #396 fixes the issue. We should be returning status code `200` and the client should be able to figure out the ""empty result"" from the response itself.

Changes included in this PR:
- Removes the use of `204` status code in case of empty results in the internal server.
- Removes the corresponding server test.",True,508,https://api.github.com/repos/kiwix/libkiwix/pulls/508,https://github.com/kiwix/libkiwix/pull/508,closed,1,15,2,1,1,0,0,0,[],2021-05-09 05:27:52+00:00,2021-05-09 05:49:43+00:00,1311.0,0:21:51,[],"[{'commit_sha': 'be6b58c6ade7b09cd8145bd8134077233a4af4e5', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
643780301,Add `get_zimId` method to Result,"Fixes #107 

Must be merged after #526.

`get_zimId` method allows the user to get the uuid of the archive from which a result is retrieved directly from the search result itself. 

*Note*: With this, we might want to get rid of the method `get_readerIndex` later since we can directly identify the archive from the search result with this change.

Changes included in this pr:
- Add a new method `get_zimId` to the `Results`

**This PR depends on openzim/libzim#557**",True,510,https://api.github.com/repos/kiwix/libkiwix/pulls/510,https://github.com/kiwix/libkiwix/pull/510,closed,7,7,3,2,11,0,0,0,[],2021-05-13 07:43:34+00:00,2021-05-26 13:15:14+00:00,1143100.0,"13 days, 5:31:40",[],"[{'commit_sha': 'c35f6f91425c7d47299981f45cd42ff27497eae1', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f6d91d51f97dd479366643d7fd51f77c637f77', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
634816237,Use title snippets if available,"Fixes #82 

With openzim/libzim#545 we now support snippet generation for titles. It can be used as the display label on the ui for highlighted titles via the ""label"" field. The old version used plain-title which is still available in the value field.

Changes included in this pr:
- Sets `label` to title snippet if available
- Set up proper rendering of snippet using `_renderItem` property of autocomplete ui",True,505,https://api.github.com/repos/kiwix/libkiwix/pulls/505,https://github.com/kiwix/libkiwix/pull/505,closed,59,19,4,4,12,2,0,0,[],2021-05-08 19:30:08+00:00,2021-05-26 09:04:52+00:00,1517684.0,"17 days, 13:34:44","[{'comment_id': 631005458, 'comment_body': 'Maybe it is time to introduce a class/struct for the suggestion result instead of using a vector of strings.', 'comment_created': datetime.datetime(2021, 5, 12, 12, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 633663820, 'comment_body': 'This is useless for the user to create a suggestion itself.\r\nIt is better to make the constructor private and add the `Reader` as friend class.', 'comment_created': datetime.datetime(2021, 5, 17, 16, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}]","[{'commit_sha': '56434de79ef1a9896d7b37f88ee33ed0f1aeb186', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3288cd80e56a8f5545bf825eb3f5c8553526556e', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5315034afe82c607da990ad22a62e32eb8f87b7f', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5567d8ca49768bb84291ceab6fc83fd7e904d30c', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
645566836,Check if bookName is available in url parameters,"Fixes #496 

In certain pages like the search result page, `bookName` is not of the form `/bookName/endpoint?parameters` which is the assumption here:
https://github.com/kiwix/libkiwix/blob/51883558781008d006b983991bd4ff35e53f3e79/static/skin/taskbar.js#L7-L10
Rather it is available as a query parameter in `/endpoint?content=bookName&otherParameters`. From these pages, `bookName` should be assigned from parameters.

Changes included in this pr:
- Checks if the URL has a `content` parameter. If yes, assign `bookName` to this parameter.",True,528,https://api.github.com/repos/kiwix/libkiwix/pulls/528,https://github.com/kiwix/libkiwix/pull/528,closed,5,2,1,1,5,5,0,0,[],2021-05-17 06:49:07+00:00,2021-05-18 20:36:15+00:00,136028.0,"1 day, 13:47:08","[{'comment_id': 633779797, 'comment_body': ""This fix pushes the imaginary corner case discussed in the previous review further but doesn't eliminate it. Suppose that there is a ZIM archive with an article named `search`. Besides, this fix will break if the `content` parameter stops being the first parameter in the query.\r\n\r\nWhy do you search for `search`?  Why don't you simply check that the path of the url is `${root}/search`?"", 'comment_created': datetime.datetime(2021, 5, 17, 18, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 633780103, 'comment_body': 'Move inside the `if` body.', 'comment_created': datetime.datetime(2021, 5, 17, 18, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 633782313, 'comment_body': 'Declare this variable with `let`. Alternatively you can get rid of both `content` and  `urlParams` auxiliary variables if you use the conditional operator `?`.', 'comment_created': datetime.datetime(2021, 5, 17, 18, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}, {'comment_id': 634294269, 'comment_body': ""That will be better and robust! JS is something that I am not very familiar with, but I should be able to catch up soon. I'll make the change. "", 'comment_created': datetime.datetime(2021, 5, 18, 11, 38, 14, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 634693201, 'comment_body': ""I guess one of my previous comments was not straightforward enough. Don't `search` in the pathname, because that may match URLs that are different from `${root}/search`. Simply\r\n\r\n```JS\r\nconst bookName = (window.location.pathname == `${root}/search`)\r\n               ? (new URLSearchParams(window.location.search)).get('content') \r\n               : window.location.pathname.split(`${root}/`)[1].split('/')[0];\r\n```"", 'comment_created': datetime.datetime(2021, 5, 18, 19, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'veloman-yunkan', 'type': 'User'}]","[{'commit_sha': 'c236f3a32be45c0f0aa0decbf2a1d6aac99e5d52', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
620829427,Fix pagination by setting pageLength properly,"Fixes #617 

The `pageLength` parameter of `kiwix::SearchRenderer` is not set properly which causes it to take an arbitrarily large value, breaking pagination.

The solution is to use the same convention as kiwix-serve. Try to read the `pageLength` from `query` if found, else use a default value of 25. Use this `pageLength` to find `end`. Use `renderer.setPageLength()` method to set the `pageLength` properly.

The changes included in this PR are:
- Find `pageLength` from the query, fall back to a default value of 25
- Use this `pageLength` to find `end`
- Set the `pageLength` in the renderer",True,628,https://api.github.com/repos/kiwix/kiwix-desktop/pulls/628,https://github.com/kiwix/kiwix-desktop/pull/628,closed,6,3,1,1,3,0,0,0,[],2021-04-22 07:18:43+00:00,2021-04-27 09:35:37+00:00,440214.0,"5 days, 2:16:54",[],"[{'commit_sha': 'e7389052231dfeb48a040bf368669627ca18b699', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
656024877,Use SuggestionItem class methods getTitle() and getPath(),"Fixes #648 
We now have a new class SuggestionItem to handle suggestions in libkiwix. We should should its class methods here as well.",True,649,https://api.github.com/repos/kiwix/kiwix-desktop/pulls/649,https://github.com/kiwix/kiwix-desktop/pull/649,closed,2,2,1,1,0,0,0,0,[],2021-05-28 08:07:09+00:00,2021-05-28 08:13:56+00:00,407.0,0:06:47,[],"[{'commit_sha': 'bad3a339025b8c28981a72a50e3e58ebdfdb04a8', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
655972369,Use SuggestionItem member function getTitle(),"Fixes #460 
We have introduced a new class SuggestionItem in libkiwix, it must be used in kiwix-tools as well for handling suggestions.",True,461,https://api.github.com/repos/kiwix/kiwix-tools/pulls/461,https://github.com/kiwix/kiwix-tools/pull/461,closed,1,1,1,1,0,0,0,0,[],2021-05-28 07:30:11+00:00,2021-05-28 07:55:18+00:00,1507.0,0:25:07,[],"[{'commit_sha': '6d9fa0cb45b0e9e089c377aadda4551ba0ce6215', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
650678860,Drop wrappers from Internal Server,"This is the first step, fixes #430 

The aim of this step is to internally remove usage of wrapper structures in libkiwix as much as possible. A majority of work in this step will be focused around bringing this change in the internal server which will in turn add new methods/change existing code to use libzim structures such as `zim::Archive`, `zim::Searcher`, `zim::SearchResultSet` etc directly instead of adding additional layer of `kiwix::Reader` or `kiwix::Searcher`.

Changes included in this PR:
- Drop wrappers from `InternalServer` completely
- Add libzim structure mirror members to `Library` and other kiwix structures
- Add new method in `SearchRenderer` to use libzim structures directly
- Move helpers for handling archive to `archiveTools`",True,536,https://api.github.com/repos/kiwix/libkiwix/pulls/536,https://github.com/kiwix/libkiwix/pull/536,closed,512,154,20,9,11,31,0,0,[],2021-05-22 19:58:21+00:00,2021-07-06 14:18:11+00:00,3867590.0,"44 days, 18:19:50","[{'comment_id': 637495914, 'comment_body': '@mgautierfr Even though all the tests are passing, the addition of this line causes a segmentation fault when I try to run `kiwix-serve` :confused: Can you help figure it out? I can confirm the issue is isolated to this one line irrespective of other changes.', 'comment_created': datetime.datetime(2021, 5, 23, 6, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 637500372, 'comment_body': '@maneeshpm Would be good to extend the tests, so the CI fails as well.', 'comment_created': datetime.datetime(2021, 5, 23, 7, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 637500684, 'comment_body': '@kelson42 Good idea! Let me try that, maybe it will reveal the underlying issue.', 'comment_created': datetime.datetime(2021, 5, 23, 7, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 637503793, 'comment_body': ""@kelson42 I got this issue because, for some reason, I had to rebuild kiwix-tools again against the modified libkiwix even though no API has been changed. I guess it's an isolated incident with my system. Closing this discussion."", 'comment_created': datetime.datetime(2021, 5, 23, 7, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 637591966, 'comment_body': 'good!', 'comment_created': datetime.datetime(2021, 5, 23, 19, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kelson42', 'type': 'User'}, {'comment_id': 639823556, 'comment_body': 'This is what we call a ABI break.\r\nIf you add a member to a structure, the size of this structure is changed.\r\nSo all the code of kiwix-tools compiled with previous version is using the old size of library but the new library is using the new size. So the new libkiwix writes data where it should not (where kiwix-tools has not reserved space for it).', 'comment_created': datetime.datetime(2021, 5, 26, 15, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 639830826, 'comment_body': 'Why using this signature ? (With a out value).\r\n\r\nIt seems easier to have :\r\n```\r\nstd::string getMetadata(const zim::Archive& archive, const std::string& name) {\r\n  try {\r\n    return archive.getMetadata(name);\r\n  } catch(zim::EntryNotFound& e) {\r\n    return """";\r\n  }\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 5, 26, 15, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 640042270, 'comment_body': 'Aaah cool. The segmentation fault makes sense now, Thanks!\r\n', 'comment_created': datetime.datetime(2021, 5, 26, 18, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 640470164, 'comment_body': '`zim::Entry::getRedirectEntry()` indeed return the direct redirect entry.\r\nbut `zim::Entry::getItem(true)` always return a ""final"" item, if the entry is a redirect, it follows the redirect chain to return the final item.\r\nAs we just want to get the item to get the final path, we can use that.', 'comment_created': datetime.datetime(2021, 5, 27, 9, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 642313711, 'comment_body': 'It would be good to adapt a bit the `Reader` to reuse the `Archive` instead of creating it using the path.\r\n\r\nElse we may create twice the `Archive`', 'comment_created': datetime.datetime(2021, 5, 31, 8, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 642318251, 'comment_body': 'If this is a code move (as commit message says), the `Reader` part should reuse this method.\r\n(And in fact, it should, whatever the commit message says)', 'comment_created': datetime.datetime(2021, 5, 31, 8, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 642320324, 'comment_body': ""This test is wrong (and it was already before).\r\nIn the test just before we test that pointer is not null, but not here.\r\n\r\nEither it can't be null (and we don't need the first test) or it can and we must change the way we protect us."", 'comment_created': datetime.datetime(2021, 5, 31, 8, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 642322202, 'comment_body': 'Same here, if we reuse the `Reader` code for this function, it is better that `Reader` use this function.', 'comment_created': datetime.datetime(2021, 5, 31, 8, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 642327880, 'comment_body': 'A `kiwix::Searcher` is a wrapper on all zim search classes (including `zim::SearchResultSet`)\r\n\r\nIt would be simpler to have a constructor on `zim::SearchResultSet` and not on `zim::Search` (no specific render method).\r\nAnd it would be more logical, the `SearchRenderer` renders the result of a search into html. It does handle at all the search part.\r\n\r\n---\r\n\r\nAnd more globally, this kind of design is bad.\r\nYou would have two constructors, which create the ""same"" object. But you would have two methods to use it,\r\nbut you have to use the right method associated to the right constructor.\r\nAnd there is not test to ensure that.\r\nThe method of a instance must be usable on the object, whatever how you\'ve created the object.\r\nIf not, it is probably better to have two classes.', 'comment_created': datetime.datetime(2021, 5, 31, 8, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 642614191, 'comment_body': '@mgautierfr Currently the archive is held as a unique pointer inside the reader, do you think for the time being making it a shared pointer and copy into the above m_archive map when creating instead of directly making it from the path is a good idea?', 'comment_created': datetime.datetime(2021, 5, 31, 17, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 642614815, 'comment_body': 'I wanted to keep the code same as that used in reader and change it in a later commit. I probably left it out, will do it.', 'comment_created': datetime.datetime(2021, 5, 31, 17, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 642619532, 'comment_body': 'Aah right! It can be a nullptr. This block should be executed only if we are not dealing with a nullptr, and if it is, we should be returning a 404(like we do in handle_search). Perhaps we should check if the archive is a nullptr and return a 404 in such a case before we actually start handling the search.\r\n', 'comment_created': datetime.datetime(2021, 5, 31, 17, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 642638350, 'comment_body': 'Yeah, that makes sense. Making `SearchRenderer` depend only on `SearchResultSet`, the only object its concerned about seems more logical and the correct thing to do. I will make the changes. Thanks for the good explanation :)', 'comment_created': datetime.datetime(2021, 5, 31, 18, 49, 31, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 642923083, 'comment_body': 'Yes, we should move to a shared_ptr.\r\nI think the ""correct"" API would be to always creating a reader from a existing archive.\r\nFor compatibility issue, we should have a constructor taking a path an create the archive internally.\r\nOn the library side, we should also first create the archive and create the Reader using it.', 'comment_created': datetime.datetime(2021, 6, 1, 9, 8, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 642923435, 'comment_body': 'Yes, test and early return is good here.', 'comment_created': datetime.datetime(2021, 6, 1, 9, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 652472359, 'comment_body': 'It would be better to use the `at` method.\r\n\r\n```cpp\r\ntry {\r\n    return m_readers.at(it);\r\n} catch (std::out_of_range& e) {}\r\n\r\ntry {\r\n\tauto reader = make_shared<Reader>(m_archive.at(id));\r\n\tm_readers[id] = reader;\r\n\treturn reader;\r\n} catch (std::out_of_range& e) {}\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 8, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 652645208, 'comment_body': 'It is better to take a reference to an archive (`const zim::Archive&`) instead of a pointer.', 'comment_created': datetime.datetime(2021, 6, 16, 12, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 652648200, 'comment_body': 'I would not have put this method definition in the middle of two `urlEncode`/`urlDecode` methods.\r\nIt is better to keep related function grouped together.', 'comment_created': datetime.datetime(2021, 6, 16, 12, 40, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 652655801, 'comment_body': 'This is pretty ""ugly"" to get the final item to get its path to then get the entry.\r\nEither:\r\n- If we need this, we can implement `zim::Entry::getFinalEntry()` (or add a `follow` parameter to `getRedirectEntry`.\r\n- If we need this, we can implement `zim::Item::getEntry()` (which is pretty simple to implement)\r\n- We don\'t need this, the `kiwix::getFinalEntry` result is only used to pass the entry to `build_redirect` and `build_redirect` is always called with the result of `getFinalEntry` and only uses the path of the entry. It would be better to change `build_redirect` to get a `Item`.', 'comment_created': datetime.datetime(2021, 6, 16, 12, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 652663104, 'comment_body': 'I\'m a bit disturb by this, even if this was already done before.\r\n\r\nI\'m somehow the feeling that this feature should be on libzim side.\r\nBut in the same time, thinking of adding this in libzim raises me an issue. It is totally valid to have a ""main entry"" pointing to ""index.html"" and also have a entry with a empty path (or just ""/""). \r\nWhat should be used then ?\r\n\r\nI think the behavior should be to try to get the path using `Archive::getEntryByPath` and if the entry is not found and path is empty, then get the entry using `Archive::getMainEntry`.\r\n\r\nAnd the behavior of the reader should no be changed.', 'comment_created': datetime.datetime(2021, 6, 16, 12, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 652902962, 'comment_body': ""I'll make the change. Is there an advantage of this technique? or is it better coding style?"", 'comment_created': datetime.datetime(2021, 6, 16, 17, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 652925328, 'comment_body': ""Aah right, my bad. I'll make the change."", 'comment_created': datetime.datetime(2021, 6, 16, 17, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 652925587, 'comment_body': ""I don't think we should add it to libzim because this is just a special user(libkiwix) need to get the `mainentry` if the requested entry is not found. Like you mentioned, there can be cases which as a library should not bother libzim. \r\n\r\nThe new behaviour you suggested sounds good, I will make the change."", 'comment_created': datetime.datetime(2021, 6, 16, 18, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 653352994, 'comment_body': '###### `at(key)` vs `[key]` :\r\n`[key]` is stricky as if the key doesn\'t exist in the map, it will be created (with a nullptr shared_ptr here).\r\n`at(key)` will throw a exception if the key is not found.\r\nBecause `[key]` create the entry, we must search if the key exist before using it (what you do).\r\n\r\n###### `at(key)` vs `count(key)`+`[key]` :\r\nWith `at(key)` you do only one lookup. Either you find it and you get the entry, or not.\r\nWith the `count(key)`+`[key]` you need to do two lookup. On for the count, and then another one the get the entry.\r\n\r\nOn top of that, there is some kind of different semantics :\r\nWith a count, you means ""If there is a key in the map, do something (which is return the entry).""\r\nWith the try/at you means ""I want to return the entry, handling the case there is no entry in the map.""\r\n\r\nThe second is a bit more direct and carry better what is your intention.', 'comment_created': datetime.datetime(2021, 6, 17, 8, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 653357674, 'comment_body': '`path.empty() || path == ""/""`\r\n\r\n(I\'ve told you that Reader behavior should not change, so use two different code path for reader and server.\r\nBut, I think we can share the new behavior, the change is pretty small and will not break existing usage of `Reader`)', 'comment_created': datetime.datetime(2021, 6, 17, 8, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 661637997, 'comment_body': 'This show us that libzim API is not so nice.\r\nWe should add a cast to string to `zim::Uuid` to avoid this.', 'comment_created': datetime.datetime(2021, 6, 30, 16, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}]","[{'commit_sha': '940368b8ace64258cc2942999749a0b184a29a71', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d68926539b73325d363fb78936e00b1ebb4cf85', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a236751c74d04f0024932209a1070ee922785246', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75b4d311d7526508c6d50924c6cac947700107d7', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c046f64d83742f085d68c5003196c01f7679fb46', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcece66960146a1fb477ed318986b7b1ef6704ed', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc821638da0daa279b2f9acc8030195d2884b720', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a94a03cd225602d72b87d97309d9add5485a1662', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f639144ab030e4082919e7f4f73a42641182dda', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
683000217,Extend libkiwix structures to be contructed/updated from libzim structures,"Fixes #430
This PR depends upon #536

This is the second stage to remove usage of wrapper structures from libkwix. In this step, we will extend the libkiwix structures to use libzim structures directly. This will still include the wrapper structures in the API but their usage will be derived from that of libzim structures.

Changes included in this PR:
- Modify `kiwix::Book` to be updated from a `zim::Archive`
- Modify `kiwix::Manager` to import a zim file from a `zim::Archive`
Add overloads for libzim structure in kiwix::Book",True,576,https://api.github.com/repos/kiwix/libkiwix/pulls/576,https://github.com/kiwix/libkiwix/pull/576,closed,97,130,7,3,9,5,0,0,[],2021-07-03 09:56:00+00:00,2021-08-03 09:50:25+00:00,2678065.0,"30 days, 23:54:25","[{'comment_id': 665149854, 'comment_body': 'It is better to not include dependency header in public header to not make the dependency a dev dependency for the user.\r\nYou can do the same as pugixml and declare the class only and include the header in the cpp file.', 'comment_created': datetime.datetime(2021, 7, 7, 8, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 665153123, 'comment_body': 'We can directly cast to string now.', 'comment_created': datetime.datetime(2021, 7, 7, 8, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 665161509, 'comment_body': 'Nothing to say on this code except it is ugly (but it was the same before).\r\n\r\nBut I\'m not sure we need the function itself.\r\nThe origin id is used only for patch zim file and it reference the ""base"" zim on which the patch is constructed. It is needed (and usefull) as we need this zim file to apply the patch.\r\n\r\nBut the zimdiff/zimpath tools are not used ""at all"" (and probably buggy in different ways).\r\nWe have no tooling base on them to generate diff zims and nothing to exploit them neither.\r\nAt libkiwix level, this information is totally useless.\r\nWhile we are in a cleanup phase of libkiwix api I would advocate for removing those kind of method (and maybe add them back later when/if we need them when we attack the zim patch issue).\r\n\r\nBut I will open a issue for that, we will not decide now.', 'comment_created': datetime.datetime(2021, 7, 7, 8, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 665601758, 'comment_body': ""I agree with you. If it's not of use to us right now, we should remove it. And to be honest, it seemed more like belonging to libzim rather than libkiwix. "", 'comment_created': datetime.datetime(2021, 7, 7, 18, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 665602043, 'comment_body': 'Aah right. Thanks for pointing it out!', 'comment_created': datetime.datetime(2021, 7, 7, 18, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}]","[{'commit_sha': '8b12434ff2165e0ad5b2fe4c1a6bbc2d056d46ab', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3ba7619df52fb485e536e6e6e1735ebc60f72df', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19afe9442f68c84c12112675ad1fc20961c338db', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
685367672,Fix getTitle to return the actual title,"Fixes #584 
SearchIterator::getTitle() should return the actual title of the entry rather than returning it from the valuesmap which is unaccented.",True,586,https://api.github.com/repos/openzim/libzim/pulls/586,https://github.com/openzim/libzim/pull/586,closed,9,10,2,1,4,2,0,0,[],2021-07-07 17:09:09+00:00,2021-07-27 14:49:07+00:00,1719598.0,"19 days, 21:39:58","[{'comment_id': 666353199, 'comment_body': 'Why adding this test ?\r\nCan we have a entry but no document_fetched ? (knowing that we build the entry from the document)', 'comment_created': datetime.datetime(2021, 7, 8, 16, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 666376713, 'comment_body': ""Aah my bad, I must have added it in some testing and forgot to remove it. I'll fix it back quickly."", 'comment_created': datetime.datetime(2021, 7, 8, 17, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}]","[{'commit_sha': 'a87f88272ab64e70e771655d1a59e7f818e09dc2', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
663052503,Add new Suggestion API,"Fixes #564 

A new struct `SuggestionResultSet` that will be a union based wrapper over a `SearchResultSet` and a `Archive::EntryRange` which can be used to correctly select the ""kind"" of suggestion search depending on the way search is done. We then introduce a function `Search::getSuggestionResults(int start, int end)` that mimics the `Search::getResults` but smartly carries out the search operation based on the availability of title index and returns a `SuggestionResultSet`.

By introducing a new API like this, we can carry out fixing other projects without actually breaking them since this is a soft of fallback enhancement.

Changes included in this PR:
- Add a new struct `SuggestionResultSet`
- Add a new function `Search::getSuggestionResult`

*TODO: Add tests*",True,574,https://api.github.com/repos/openzim/libzim/pulls/574,https://github.com/openzim/libzim/pull/574,closed,1611,308,26,19,37,74,0,0,[],2021-06-06 21:21:03+00:00,2021-08-11 09:37:58+00:00,5660215.0,"65 days, 12:16:55","[{'comment_id': 651744963, 'comment_body': 'You can simply do `m_file = it.m_file`.\r\nIf `it.m_file` is ""nullptr"", it will simply reset `m_file`.', 'comment_created': datetime.datetime(2021, 6, 15, 12, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 651746607, 'comment_body': 'A Searcher is a object **fulltext** searching a set of Archives ~~fulltexts~~', 'comment_created': datetime.datetime(2021, 6, 15, 12, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 651755982, 'comment_body': 'Suggestion really work on only one archive.\r\nSo we should not have this constructor.\r\n\r\n(Same for `add_archive`)', 'comment_created': datetime.datetime(2021, 6, 15, 12, 48, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 651771690, 'comment_body': 'We could rewrite this :\r\n```cpp\r\nif (mp_searchIterator) {\r\n\t++(*mp_searchIterator);\r\n} else if (mp_rangeIterator) {\r\n\t++(*mp_rangeIterator);\r\n}\r\nreturn *this;\r\n```\r\n\r\nFirst, we have less tests. And second, ""positive"" conditions are better than negative ones.\r\n\r\nIf we really want to keep a defensive programming, we should write it this way :\r\n```cpp\r\nif (!mp_rangeIterator && !mp_searchIterator) {\r\n\treturn *this;\r\n}\r\n\r\nif (mp_searchIterator) {\r\n\t++(*mp_searchIterator);\r\n} else {\r\n    ++(*mp_rangeIterator);\r\n}\r\n\r\nreturn *this;\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 13, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 651784638, 'comment_body': 'It seems the comment is not accurate now.', 'comment_created': datetime.datetime(2021, 6, 15, 13, 21, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 651796926, 'comment_body': 'By definition a `Search` or a `SuggestionSearch` is a wrapper around a ""database"" (xapian or archive) and a `Query`. It is ""nonsense"" to create a `SuggestionSearch` on a `Query` only.\r\n\r\nAnd it is dangerous to do that. The `SuggestionSearcher` is returning a wrong `SuggestionSearch` without `mp_internalDb` but user could still use methods on it and they never check `mp_internalDb` is not null.', 'comment_created': datetime.datetime(2021, 6, 15, 13, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 652068565, 'comment_body': ""Ohk, this was just a brace for when we intend to make multizim work. But yeah, that's for a different issue. Will remove it."", 'comment_created': datetime.datetime(2021, 6, 15, 18, 55, 17, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 652071008, 'comment_body': 'Thanks for the tip! This looks much better.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 653334402, 'comment_body': 'You need to reset m_entry and m_idx', 'comment_created': datetime.datetime(2021, 6, 17, 8, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 653340074, 'comment_body': ""(I put the comment here, but it is related to several places).\r\nI don't think we need to store a extra pointer to the archive.\r\n`SuggestionSearch` can only (and always) have the internalDb.\r\nEither the internalDb has database and we do a xapian search, either not and we can use\r\n`mp_internalDb->m_archives[0].findByTitle`. (We just need to be sure that internalDb will have correctly set `m_archives` even if there is no database)."", 'comment_created': datetime.datetime(2021, 6, 17, 8, 22, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 654571117, 'comment_body': 'by resetting `m_idx` you mean to set it equal to `it.m_idx` right?', 'comment_created': datetime.datetime(2021, 6, 18, 16, 59, 49, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 654586836, 'comment_body': 'That makes sense. I have just added a check here \r\nhttps://github.com/openzim/libzim/pull/574/commits/b25b0e538caf772acfce548bd9be0942f2e133e3#diff-da923b7afa45cab7add143c4705b54142e46b2afe9a2627d5fa3b3474bdc8aecR108-R113\r\nthat handles the case where the database is absent, in both `newSuggestionFormat` case and otherwise..\r\nThere are other cases below where the database fails to load(technically not ""absent""). Do we need to make our fallback search in those cases as well?', 'comment_created': datetime.datetime(2021, 6, 18, 17, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 657752635, 'comment_body': 'I\'m not sure of this anymore.\r\nWe have to be careful when we add a archive without a associated xapian database.\r\nWhen we do multisearch, xapian give us the index of the database in which the result is found and we reuse this index to find to corresponding archive.\r\nIf we add a archive but not the xapian database, the index may be wrong.\r\nWe must be sure that we are not breaking things when we do this. (Or at least document it, by putting a comment telling this should be keep in sync except when we use suggestion mode)\r\n\r\n> There are other cases below where the database fails to load(technically not ""absent""). Do we need to make our fallback search in those cases as well?\r\n\r\nYes, we can use the ""basic"" suggestion search as a fallback.', 'comment_created': datetime.datetime(2021, 6, 24, 8, 46, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 657755250, 'comment_body': 'Yes.\r\n\r\nm_entry is somehow a cache. We must reset it when we change the iterator.\r\nm_file is in which archive the iterator iterate. This may change but it is unlinky.\r\nm_idx is the more important, it is what entry is pointed, we MUST\xa0change it', 'comment_created': datetime.datetime(2021, 6, 24, 8, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 658200362, 'comment_body': '@mgautierfr To go around this, we could either add a separate vector of archives `archives_wo_database` in the internalDb that will store all the archives for our basic search. Or we could introduce a list of zim ids that have database `database_archive_ids` in the internalDb and use this list inside the `getZimId()` method, maintaining the vector of archives as it is.\n\nI prefer a separate vector of archives because when(and if) we come up with multisearch for our basic seach, this will be more useful. What do you think?', 'comment_created': datetime.datetime(2021, 6, 24, 18, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 678034342, 'comment_body': 'Missing parenthesis ', 'comment_created': datetime.datetime(2021, 7, 28, 7, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678040242, 'comment_body': 'You change the signature of `parseQuery` but never change the usage of the method (at least not in this commit)', 'comment_created': datetime.datetime(2021, 7, 28, 7, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678051911, 'comment_body': ""We probably don't want to be able to create invalid iterator.\r\nThe best way to ensure that is to remove the default constructor.\r\nIs there somewhere when we create default, invalid, iterator ?"", 'comment_created': datetime.datetime(2021, 7, 28, 7, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678113477, 'comment_body': 'This is dangerous.\r\nYou are dereferencing `mp_rangeIterator` to get a reference to what it owns, you do the same thing with `it.mp_rangeIterator` and then you copy (assignment operator) the two references.\r\nBut if one of the `unique_ptr` is empty, the derefence operation is undefined.\r\n\r\nIt would be better to re create a pointer explicitly, depending of the state of `it` (as it is done in the copy constructor).\r\n\r\nEdit: You have corrected this in next commit.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678114831, 'comment_body': 'We could use `*m_suggestionItem` directly (`operator*()` on the iterator)', 'comment_created': datetime.datetime(2021, 7, 28, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678122312, 'comment_body': 'This comment is not true anymore.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678123223, 'comment_body': 'The was about the difference between the EstimatedMatch and the actual size.\r\nIf they are both the same, we could remove the comment.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678123827, 'comment_body': 'Remove comment.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 15, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678125816, 'comment_body': 'There is only one database in suggestion mode.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678128313, 'comment_body': 'No need to check for `!document_fetched`, `get_document` check it for us.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678129722, 'comment_body': '(No especially associated to this line).\r\n\r\nThe commit message says that we **move** the functions, but the commit itself only add them.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678132113, 'comment_body': 'While we are here I would also remove the `setVerbose` (also in (Search)Query).\r\n\r\nThe verbose is not dependent of the query but of the whole search system (are we in ""debug"" mode or not)\r\nWe should set the verbose mode in the `Searcher`/`SuggestionSearcher` (and keep it in the internal database).', 'comment_created': datetime.datetime(2021, 7, 28, 9, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678133594, 'comment_body': '`m_flags` was here to store different flags depending of suggestion mode or not.\r\nWe should remove it now.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678134625, 'comment_body': 'We could move this test just before.\r\n\r\nAnd always set `hasNewSuggestionFormat` to true after.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678135288, 'comment_body': ""If we return here, we probably don't want `hasNewSuggestionFormat` to be true."", 'comment_created': datetime.datetime(2021, 7, 28, 9, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678138743, 'comment_body': '(I put the comment here but it is more global).\r\n\r\nThe `hasNewSuggestionFormat` has been introduce to mark zim file which have a specific xapian db for suggestion.\r\nIf not, we do suggestion search on the ""classic""/fulltext db.\r\n\r\nEither we always do suggestion search on title db (and we fallback to searchbytitle) and we don\'t need `hasNewSuggestionFormat` or we fallback to fulltext db and we need the flag.\r\n\r\nBut here, we do not fallback to fulltext db and we\'ve keep the flag.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678140031, 'comment_body': 'Also set `mp_entryRange` to null pointer to be complete.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678143955, 'comment_body': 'Should we set the stemming strategy even if we are not in suggestion ?', 'comment_created': datetime.datetime(2021, 7, 28, 9, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678144640, 'comment_body': 'We should remove the `m_flags` variable, we always use the `FLAG_DEFAULT`.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678145118, 'comment_body': 'We should also remove the `m_prefix` variable, we do not search in ""S"" prefix now (in fulltext search).', 'comment_created': datetime.datetime(2021, 7, 28, 9, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678146830, 'comment_body': 'This line is important, it will throw a exception if we cannot find the favicon.', 'comment_created': datetime.datetime(2021, 7, 28, 9, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678164209, 'comment_body': 'You can use reset all the time here, whatever is the value of `mp_rangeIterator`.', 'comment_created': datetime.datetime(2021, 7, 28, 10, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678164459, 'comment_body': 'Can you explain this change please ?', 'comment_created': datetime.datetime(2021, 7, 28, 10, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 678474370, 'comment_body': ""@mgautierfr We have been allowing uninitialized iterator in search_iterator till now, just to maintain a parallel between search and suggestion, this was added. I don't think any part of our code depends on it, Should we remove it? "", 'comment_created': datetime.datetime(2021, 7, 28, 16, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 679266138, 'comment_body': '@mgautierfr Why should we not keep it in the `Searcher`/`SuggestionSearcher` itself? a possible issue of keeping it in the internal db is if I make a `searcher2` from `searcher1`, due to the shared pointer `internalDb` in both the searchers, the verbosity of `searcher2` will be the same as `searcher1` even if its not set explicitly in `searcher2`. Is this something that is expected of such a feature? ', 'comment_created': datetime.datetime(2021, 7, 29, 15, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 679266710, 'comment_body': 'aah, yes we should. Thanks for pointing it out', 'comment_created': datetime.datetime(2021, 7, 29, 15, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 679270349, 'comment_body': 'The `m_entry` is only updated after we call `operator*()` on the iterator. So there is a potential risk of dereferencing a nullptr in `*other.m_entry` if we try to access it before calling the dereference operator. \r\n\r\nSo to mitigate this risk, I think we should directly dereference `other` which will give us the entry.', 'comment_created': datetime.datetime(2021, 7, 29, 15, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 681574340, 'comment_body': 'Yes please.\r\nI tend to prefer to always have valid instance created.\r\nIn previous API, we had the possibility to have invalid Article instance and it was a pain to use as user code has to check the validity of the object before every use.\r\nIt is better to have either a valid instance or a exception when we try to create it (and force user code to handle error at this moment).', 'comment_created': datetime.datetime(2021, 8, 3, 9, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 681577348, 'comment_body': 'I suggest to keep it in the internal db to avoid keeping it in all the search structures (`Searcher`/`Search`/`SearcResult`/...).\r\nBut verbose is not a ""real"" feature of the search. It is more a debug flag. The results of the search is not dependent of this. So it is not really important where we keep it (the simpler is the better).', 'comment_created': datetime.datetime(2021, 8, 3, 9, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 681580881, 'comment_body': 'Ho yes. Good catch. Can you create a specific commit for this and put your explanation in the commit message please ?', 'comment_created': datetime.datetime(2021, 8, 3, 9, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 681606429, 'comment_body': 'Sure! thanks :D', 'comment_created': datetime.datetime(2021, 8, 3, 9, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 682479672, 'comment_body': 'Please use coding style :\r\n```cpp\r\nif (test) {\r\n\taction();\r\n}\r\n```\r\n\r\nnot ```if (test) action;```', 'comment_created': datetime.datetime(2021, 8, 4, 10, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682568443, 'comment_body': 'In the commit message associated to this change :\r\nserach -> search\r\nmodeule -> module\r\nallows -> allowing', 'comment_created': datetime.datetime(2021, 8, 4, 12, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682574065, 'comment_body': 'This whole code could be move in a helper method and shared with search code.', 'comment_created': datetime.datetime(2021, 8, 4, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682581591, 'comment_body': 'I would say that we should not be able (throw a exception) to create a Searcher (or a Search as we really do the search there) if we have no xapian database. If we have a search instance, it should be valid.', 'comment_created': datetime.datetime(2021, 8, 4, 12, 47, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682582315, 'comment_body': 'Wrong comment.', 'comment_created': datetime.datetime(2021, 8, 4, 12, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682586077, 'comment_body': ""initDatabase is a important operation. We don't want to do it only to set the verbosity. And if we add a archive after setting the verbosity, we will lost the verbosity.\r\nIt is better to keep the flag in the searcher and use it in `initDatabase` (same as `m_archives`)"", 'comment_created': datetime.datetime(2021, 8, 4, 12, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682586705, 'comment_body': 'Same problem as search verbosity.', 'comment_created': datetime.datetime(2021, 8, 4, 12, 53, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682592090, 'comment_body': 'We probably want to SuggestionIterator inheriting `std::iterator` (as for SearchIterator) :\r\n`class SuggestionIterator : public std::iterator<std::bidirection_iterator_tag, SuggestionItem>`', 'comment_created': datetime.datetime(2021, 8, 4, 13, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682599079, 'comment_body': '`const auto flags = ...`', 'comment_created': datetime.datetime(2021, 8, 4, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682599500, 'comment_body': 'Should we parse the query using the ""S"" prefix ?', 'comment_created': datetime.datetime(2021, 8, 4, 13, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682602364, 'comment_body': 'We don\'t check for ""S"" prefix anymore.', 'comment_created': datetime.datetime(2021, 8, 4, 13, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682603051, 'comment_body': 'We added the database to `m_database` in search to support multi search. We can simply set `m_database` here.', 'comment_created': datetime.datetime(2021, 8, 4, 13, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682604329, 'comment_body': 'Now that `SuggestionQuery` contains only a string, we can simply remove it and make `SuggestionSearcher::suggest` take a string as argument.', 'comment_created': datetime.datetime(2021, 8, 4, 13, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682608225, 'comment_body': 'This doesn\'t respect start and maxResults.\r\nIt should be ""easy"" to create a new EntryRange with `m_begin = m_begin + start` and `m_end = m_end + start + maxResult` (modulo checking that range limits are valid)', 'comment_created': datetime.datetime(2021, 8, 4, 13, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682659515, 'comment_body': 'Just to be sure, we just need to change the class definition to what you have mentioned right?', 'comment_created': datetime.datetime(2021, 8, 4, 14, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 682670818, 'comment_body': 'Yes. It should be enough (or easy to fix raised errors).', 'comment_created': datetime.datetime(2021, 8, 4, 14, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 682798333, 'comment_body': '@mgautierfr Adding an `EntryRange::offset(uint start, uint maxResults)` to add the offset. I hope this will be beneficial for user.', 'comment_created': datetime.datetime(2021, 8, 4, 17, 0, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 683145610, 'comment_body': 'We fall back to `findByTitle` if we do not have a title index. So the prefix have been removed.', 'comment_created': datetime.datetime(2021, 8, 5, 5, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 683145932, 'comment_body': 'We are not using ft search in ""S"" prefix in absence of title index right? do we still need to check for ""S"" prefix.', 'comment_created': datetime.datetime(2021, 8, 5, 5, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 683146028, 'comment_body': 'That makes sense. Done!', 'comment_created': datetime.datetime(2021, 8, 5, 5, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 685784774, 'comment_body': 'It would be better to create a new `EntryRange` instead of modifying a existing one.', 'comment_created': datetime.datetime(2021, 8, 10, 8, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 685804363, 'comment_body': 'This could be keep unconditionally of xapian. (but maybe under another name as `forceRangeSuggestion`).\r\n(But having the implementation of the method doing something or not depending of xapian).\r\n\r\nThis API can be called ""all the time"". If there is no xapian, it simply does nothing.', 'comment_created': datetime.datetime(2021, 8, 10, 8, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 685808015, 'comment_body': 'This should be keep in the initializer list (with the guard).', 'comment_created': datetime.datetime(2021, 8, 10, 8, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 685809952, 'comment_body': 'This should be keep in the initializer list (with the guard).', 'comment_created': datetime.datetime(2021, 8, 10, 8, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 685811061, 'comment_body': 'This should be keep in the initializer list (with the guard).', 'comment_created': datetime.datetime(2021, 8, 10, 8, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 685814135, 'comment_body': 'Although it should be not possible to have mp_internal and mp_rangeIteror in the same time, it would be nice to keep the `else` to keep the sementic.\r\n\r\n```\r\n} else\r\n#endif // LIBZIM_WITH_XAPIAN\r\n   if (mp_rangeIterator) {\r\n```', 'comment_created': datetime.datetime(2021, 8, 10, 8, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 685823762, 'comment_body': 'Why this ? (Included temporarily added for traces, or real include ?)', 'comment_created': datetime.datetime(2021, 8, 10, 8, 51, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 685833083, 'comment_body': 'Should be moved in ENABLE_XAPIAN guard.', 'comment_created': datetime.datetime(2021, 8, 10, 9, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}]","[{'commit_sha': '599b979572671449dc8e69541f8a85e903105062', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0753a5c64ed24f8de4c78b6fa3385010521b9487', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21399f8feeabdad635538e977807178a00b6138a', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1c7ce709749171c681533523fcbf175e3d39cb8', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb64552ac240fb33db7cc26085c56b4290293e6', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '676257f34043bc34b82ee288eac9fd417932b34b', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3508e103072c4abcff9c721b88c1f9a9e12cbb3b', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd27ca11deeeef0a51ed4a3c3f24b7b425fae9cf', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e19e985cf1dffea95fa3b2f4d1f20c9816c8016', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdd956a1c1ea648a15c7b106b28b2af380702ace', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81c065e179960bb23eff94a1bf31b8d407b8a0ea', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e340246c201d2072b00f0ecba5671df60771eb1', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f5a654a961e887ddcaa5085722f1c6c2286223', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ea62c4e9bbc2cb405072dfb333d9c82887e509b', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c06c40d6857bcc77ec7027fd5d4ecd769e689191', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3b4df9f7b6264e8152b22ffe8a84e5a4e7db72b', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41660778b98c6123883d77a2cd627e03d17894f1', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c7a155fd2237f3afd77f5fcab496733b6d0c744', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '360215832127fd4c387acda20b604c6c946859a3', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13
696454853,Allow kiwix-serve to get suggestions of custom range,"Fixes openzim/libzim#242 

This PR will allow kiwix serve to retrieve suggestions of a given range that can be specified in the front end call. These changes will open up the backend to implement *continuous scroll* feature as specified in the issue. But that is rather working on the front end side and this PR is only ""allowing"" to enable the feature.

Changes included in this PR:
- check for two new arguments `start`, `suggestionLength` in the handle_suggest API that will retrieve suggestions in the range given by (`start`, `start+suggestionLength`).",True,591,https://api.github.com/repos/kiwix/libkiwix/pulls/591,https://github.com/kiwix/libkiwix/pull/591,closed,81,6,2,1,9,5,0,0,[],2021-07-25 07:06:53+00:00,2021-08-20 06:09:36+00:00,2242963.0,"25 days, 23:02:43","[{'comment_id': 676099960, 'comment_body': 'Worth mentioning that getting results of a certain range in a non-Xapian based search is not supported as of now, so we will simply consider the count of suggestions here. \r\nThis will anyway have to be implemented on libzim side after openzim/libzim#574', 'comment_created': datetime.datetime(2021, 7, 25, 7, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 677570046, 'comment_body': 'Just a matter of style but I prefer :\r\n```cpp\r\nif (suggestionLength == 0) {\r\n    suggestionLength = 10;\r\n}\r\n```\r\n\r\nAs for `pageLength` in `handle_search`\r\n\r\n(Yes, I must write a coding style guide)', 'comment_created': datetime.datetime(2021, 7, 27, 15, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 680136831, 'comment_body': '@mgautierfr  Aah right, you mentioned this before :sweat_smile: \r\n\r\n@kelson42 Casually tagging openzim/libzim#513, we should really document our coding style.', 'comment_created': datetime.datetime(2021, 7, 30, 18, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}, {'comment_id': 692182999, 'comment_body': 'Just a small new remark.\r\n`suggestionLength` seems a bit too long and error prone (different cases).\r\n`count` is probably better.', 'comment_created': datetime.datetime(2021, 8, 19, 14, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mgautierfr', 'type': 'User'}, {'comment_id': 692260556, 'comment_body': 'done! ', 'comment_created': datetime.datetime(2021, 8, 19, 15, 52, 49, tzinfo=datetime.timezone.utc), 'commenter': 'maneeshpm', 'type': 'User'}]","[{'commit_sha': '61209ea0d7433aa77902b51ad4b437ca495ac190', 'committer_username': 'maneeshpm', 'committer_name': 'Maneesh P M', 'committer_email': 'manu.pm55@gmail.com', 'commit_date': datetime.datetime(2018, 12, 12, 12, 41, 4, tzinfo=datetime.timezone.utc)}]",Maneesh P M,45821104,manu.pm55@gmail.com,User,,29,,11,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
87638778,libzim,openzim/libzim,C++,48,164,18,32,1943,49,16,2,"[{'id': 770325249, 'number': 645, 'closed': datetime.datetime(2021, 11, 26, 16, 0, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 1, 9, 9, 1, tzinfo=datetime.timezone.utc), 'time_taken': 2184690.0, 'time_delta': '25 days, 6:51:30', 'additions': 49, 'deletions': 7, 'state': 'closed'}, {'id': 709291730, 'number': 607, 'closed': datetime.datetime(2021, 8, 12, 8, 50, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 17, 8, 34, tzinfo=datetime.timezone.utc), 'time_taken': 56491.0, 'time_delta': '15:41:31', 'additions': 28, 'deletions': 29, 'state': 'closed'}, {'id': 700437136, 'number': 597, 'closed': datetime.datetime(2021, 8, 4, 8, 35, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 16, 43, 14, tzinfo=datetime.timezone.utc), 'time_taken': 402716.0, 'time_delta': '4 days, 15:51:56', 'additions': 13, 'deletions': 5, 'state': 'closed'}, {'id': 685367672, 'number': 586, 'closed': datetime.datetime(2021, 7, 27, 14, 49, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 17, 9, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1719598.0, 'time_delta': '19 days, 21:39:58', 'additions': 9, 'deletions': 10, 'state': 'closed'}, {'id': 681079024, 'number': 582, 'closed': datetime.datetime(2021, 7, 6, 8, 43, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 17, 48, 7, tzinfo=datetime.timezone.utc), 'time_taken': 485735.0, 'time_delta': '5 days, 14:55:35', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 663052503, 'number': 574, 'closed': datetime.datetime(2021, 8, 11, 9, 37, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 6, 21, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 5660215.0, 'time_delta': '65 days, 12:16:55', 'additions': 1611, 'deletions': 308, 'state': 'closed'}, {'id': 647787926, 'number': 563, 'closed': datetime.datetime(2021, 5, 25, 13, 20, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 19, 15, 25, 18, tzinfo=datetime.timezone.utc), 'time_taken': 510938.0, 'time_delta': '5 days, 21:55:38', 'additions': 98, 'deletions': 98, 'state': 'closed'}, {'id': 643328085, 'number': 559, 'closed': datetime.datetime(2021, 5, 17, 12, 26, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 12, 16, 41, 33, tzinfo=datetime.timezone.utc), 'time_taken': 416708.0, 'time_delta': '4 days, 19:45:08', 'additions': 34, 'deletions': 4, 'state': 'closed'}, {'id': 640833982, 'number': 557, 'closed': datetime.datetime(2021, 5, 17, 11, 20, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 11, 15, 20, 34, tzinfo=datetime.timezone.utc), 'time_taken': 503986.0, 'time_delta': '5 days, 19:59:46', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 624625328, 'number': 547, 'closed': datetime.datetime(2021, 5, 5, 13, 41, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 27, 20, 11, 19, tzinfo=datetime.timezone.utc), 'time_taken': 667806.0, 'time_delta': '7 days, 17:30:06', 'additions': 150, 'deletions': 79, 'state': 'closed'}, {'id': 622547142, 'number': 545, 'closed': datetime.datetime(2021, 5, 11, 8, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 24, 8, 27, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1468282.0, 'time_delta': '16 days, 23:51:22', 'additions': 126, 'deletions': 0, 'state': 'closed'}, {'id': 608952229, 'number': 528, 'closed': datetime.datetime(2021, 4, 5, 16, 15, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 13, 27, 25, tzinfo=datetime.timezone.utc), 'time_taken': 10056.0, 'time_delta': '2:47:36', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 602518954, 'number': 526, 'closed': datetime.datetime(2021, 4, 7, 16, 18, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 7, 50, 54, tzinfo=datetime.timezone.utc), 'time_taken': 808029.0, 'time_delta': '9 days, 8:27:09', 'additions': 69, 'deletions': 11, 'state': 'closed'}, {'id': 597253991, 'number': 524, 'closed': datetime.datetime(2021, 4, 14, 13, 24, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 20, 10, 8, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2171716.0, 'time_delta': '25 days, 3:15:16', 'additions': 140, 'deletions': 7, 'state': 'closed'}, {'id': 592349592, 'number': 520, 'closed': datetime.datetime(2021, 3, 15, 13, 21, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 13, 11, 40, 37, tzinfo=datetime.timezone.utc), 'time_taken': 178843.0, 'time_delta': '2 days, 1:40:43', 'additions': 26, 'deletions': 4, 'state': 'closed'}, {'id': 586086023, 'number': 515, 'closed': datetime.datetime(2021, 3, 12, 5, 51, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 6, 15, 42, 43, tzinfo=datetime.timezone.utc), 'time_taken': 482911.0, 'time_delta': '5 days, 14:08:31', 'additions': 97, 'deletions': 6, 'state': 'closed'}, {'id': 576524586, 'number': 503, 'closed': datetime.datetime(2021, 2, 24, 9, 42, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 19, 15, 13, 42, tzinfo=datetime.timezone.utc), 'time_taken': 412114.0, 'time_delta': '4 days, 18:28:34', 'additions': 12, 'deletions': 13, 'state': 'closed'}, {'id': 575141685, 'number': 501, 'closed': datetime.datetime(2021, 3, 4, 12, 11, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 17, 19, 1, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1271411.0, 'time_delta': '14 days, 17:10:11', 'additions': 215, 'deletions': 47, 'state': 'closed'}, {'id': 571163585, 'number': 495, 'closed': datetime.datetime(2021, 2, 13, 19, 30, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 10, 14, 55, 46, tzinfo=datetime.timezone.utc), 'time_taken': 275692.0, 'time_delta': '3 days, 4:34:52', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 568802032, 'number': 492, 'closed': datetime.datetime(2021, 2, 24, 13, 12, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 15, 4, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1548513.0, 'time_delta': '17 days, 22:08:33', 'additions': 205, 'deletions': 87, 'state': 'closed'}, {'id': 567381279, 'number': 490, 'closed': datetime.datetime(2021, 2, 4, 7, 22, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 4, 6, 47, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2101.0, 'time_delta': '0:35:01', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 560832722, 'number': 479, 'closed': datetime.datetime(2021, 2, 3, 20, 30, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 25, 6, 47, 31, tzinfo=datetime.timezone.utc), 'time_taken': 827003.0, 'time_delta': '9 days, 13:43:23', 'additions': 80, 'deletions': 14, 'state': 'closed'}]"
72375068,libkiwix,kiwix/libkiwix,C++,56,116,10,46,2835,69,26,9,"[{'id': 756051817, 'number': 620, 'closed': datetime.datetime(2022, 3, 8, 17, 12, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 12, 10, 38, 25, tzinfo=datetime.timezone.utc), 'time_taken': 12724449.0, 'time_delta': '147 days, 6:34:09', 'additions': 307, 'deletions': 19, 'state': 'closed'}, {'id': 700455614, 'number': 597, 'closed': datetime.datetime(2021, 8, 4, 13, 57, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 17, 18, 51, tzinfo=datetime.timezone.utc), 'time_taken': 419948.0, 'time_delta': '4 days, 20:39:08', 'additions': 47, 'deletions': 32, 'state': 'closed'}, {'id': 696454853, 'number': 591, 'closed': datetime.datetime(2021, 8, 20, 6, 9, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 7, 6, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2242963.0, 'time_delta': '25 days, 23:02:43', 'additions': 81, 'deletions': 6, 'state': 'closed'}, {'id': 683000217, 'number': 576, 'closed': datetime.datetime(2021, 8, 3, 9, 50, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 3, 9, 56, tzinfo=datetime.timezone.utc), 'time_taken': 2678065.0, 'time_delta': '30 days, 23:54:25', 'additions': 97, 'deletions': 130, 'state': 'closed'}, {'id': 678562005, 'number': 570, 'closed': datetime.datetime(2021, 7, 3, 9, 56, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 18, 35, 8, tzinfo=datetime.timezone.utc), 'time_taken': 487298.0, 'time_delta': '5 days, 15:21:38', 'additions': 657, 'deletions': 256, 'state': 'closed'}, {'id': 678114069, 'number': 567, 'closed': datetime.datetime(2021, 8, 14, 17, 21, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 18, 48, 33, tzinfo=datetime.timezone.utc), 'time_taken': 4314776.0, 'time_delta': '49 days, 22:32:56', 'additions': 123, 'deletions': 49, 'state': 'closed'}, {'id': 673822643, 'number': 560, 'closed': datetime.datetime(2021, 6, 19, 11, 15, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 5, 2, 19, tzinfo=datetime.timezone.utc), 'time_taken': 22405.0, 'time_delta': '6:13:25', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 650968940, 'number': 537, 'closed': datetime.datetime(2021, 5, 26, 6, 49, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 4, 58, 8, tzinfo=datetime.timezone.utc), 'time_taken': 179479.0, 'time_delta': '2 days, 1:51:19', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 650678860, 'number': 536, 'closed': datetime.datetime(2021, 7, 6, 14, 18, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 22, 19, 58, 21, tzinfo=datetime.timezone.utc), 'time_taken': 3867590.0, 'time_delta': '44 days, 18:19:50', 'additions': 512, 'deletions': 154, 'state': 'closed'}, {'id': 645566836, 'number': 528, 'closed': datetime.datetime(2021, 5, 18, 20, 36, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 17, 6, 49, 7, tzinfo=datetime.timezone.utc), 'time_taken': 136028.0, 'time_delta': '1 day, 13:47:08', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 643780301, 'number': 510, 'closed': datetime.datetime(2021, 5, 26, 13, 15, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 13, 7, 43, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1143100.0, 'time_delta': '13 days, 5:31:40', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 635388923, 'number': 508, 'closed': datetime.datetime(2021, 5, 9, 5, 49, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 9, 5, 27, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1311.0, 'time_delta': '0:21:51', 'additions': 1, 'deletions': 15, 'state': 'closed'}, {'id': 634816237, 'number': 505, 'closed': datetime.datetime(2021, 5, 26, 9, 4, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 8, 19, 30, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1517684.0, 'time_delta': '17 days, 13:34:44', 'additions': 59, 'deletions': 19, 'state': 'closed'}, {'id': 617049851, 'number': 495, 'closed': datetime.datetime(2021, 4, 28, 14, 28, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 16, 18, 52, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1020986.0, 'time_delta': '11 days, 19:36:26', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
112927375,kiwix-desktop,kiwix/kiwix-desktop,C++,97,740,19,34,1378,71,29,12,"[{'id': 656024877, 'number': 649, 'closed': datetime.datetime(2021, 5, 28, 8, 13, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 8, 7, 9, tzinfo=datetime.timezone.utc), 'time_taken': 407.0, 'time_delta': '0:06:47', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 620829427, 'number': 628, 'closed': datetime.datetime(2021, 4, 27, 9, 35, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 22, 7, 18, 43, tzinfo=datetime.timezone.utc), 'time_taken': 440214.0, 'time_delta': '5 days, 2:16:54', 'additions': 6, 'deletions': 3, 'state': 'closed'}]"
72460287,kiwix-tools,kiwix/kiwix-tools,C++,83,428,22,41,1235,35,3,2,"[{'id': 655972369, 'number': 461, 'closed': datetime.datetime(2021, 5, 28, 7, 55, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 7, 30, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1507.0, 'time_delta': '0:25:07', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
