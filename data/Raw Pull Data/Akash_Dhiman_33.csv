pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
586838885,[android] share to Zulip from other apps [part 1],"Works towards fixing #117
Continuation of work done in #4196 

## screen capture:
![share-to-zulip](https://user-images.githubusercontent.com/40268170/112153444-44b15a00-8c09-11eb-9e8f-af9601c46e3f.gif)


## work done (in both parts):
- Rebased #4196 resolving merge conflicts.
- Enabled share intent so that Zulip appears in Share menu in Android.
- Somewhere between the works of #4196 and the current version of the app, the version of React Navigation was changed from v2 to v5, a major upgrade happened in React Navigation from v4 -> v5, because of this sharingScreen was broken since now params needed to be explicitly passed down Tab.Screen in its initialParams prop so added that.
See more details [here](https://reactnavigation.org/docs/upgrading-from-4.x/).
- Changed file name of the file that gets uploaded/displayed in message when shared to Zulip, previous functionality just took the last element of sharedFileUrl.split('/'), sometimes this file name did not have an extension causing the uploaded data to be stored as a binary file. this caused the shared images to not have any preview and the act of downloading such a file downloaded the binary version of that file. In my changes previously I gave the files a more generic name such as file.pdf for pdfs or image.jpeg for jpegs, this can be confusing, especially in the case of sharing multiple files (a feature also implemented), so in the final version of the share to Zulip the app shares the file with the actual name of the file deduced using ContentResolver.
- Fix a bug inside sharing screen where the list of streams/topics was not scrollable.
- Fix a bug that prevented sharing when app was launched from minimized state, to reproduce it:
    - checkout [previous commit](https://github.com/zulip/zulip-mobile/pull/4514/commits/90b3493a56f45bf3cefbc3857b7ae0608fec36f7).
    - install Zulip, (it can run in background, or not run at all doesn't matter).
    - share from any app to Zulip.
    - sharing screen appears, cancel the share from this screen, Zulip exits.
    - return back to Zulip by selecting it from minimized apps.
    - now go back to the previous app and share to Zulip again.
    - the sharing screen will not be visible.
According to me the section of code that was causing the problem in previous point was present in case someone opens the app from minimized apps after they have cancelled sharing, if it wasn't present they would still see the share screen since the SEND_INTENT that originally started the app persists in the minimized app, the placement of the code however was wrong (inside the handleSend method), this caused intents coming from onNewIntent methods to be ignored, when user has already cancelled/shared content once, and wanted to share again.
- App was quitting after share to Zulip concluded (if user pressed cancel or the share was completed), made it so that now it should redirect the user to the screen they shared the content to, or in case when user cancels it should navigate them back to the screen they were previously. (I can't verify what happens in case share is sent to a group of people since I can't find groups of people to share the content to, without disturbing anyone.)
- Added functionality to share multiple contents (any file type) to Zulip.
- Made the following enhancements:
    - Provide user the ability to remove any content they initially selected for sharing, from within the sharing screen.
    - Display the file name of content being shared.
    - Added Image placeholder for files. (Using material UI's file_present.png icon for this.)
- Double Initialization issue: it was present in a very specific case: when Zulip was started by another activity using startActivityForResult method. In this case it didn't matter if Zulip was in background, it's main activity starts within the calling app's task. To fix this I created a separate activity in android native. intent SEND/MULTIPLE_SEND were captured by this new activity, and they were redirected to the MainActivity using startActivity method, the new activity will open on top of the activity calling startActivityForResult and it would open the MainActivity in a separate task (or reuse a task that already contained it) hence preventing re-initialization of MainActivity.

## not addressed:
- User cannot select a realm to share content on, through the sharing screen. The sharing screen opens on whichever realm the user is currently logged into. (let me know if this feature is required, since the functionality works regardless, only the user flow gets affected.)",True,4514,https://api.github.com/repos/zulip/zulip-mobile/pulls/4514,https://github.com/zulip/zulip-mobile/pull/4514,closed,41,9,10,7,10,39,1,0,[{'name': 'a-share-to'}],2021-03-08 14:48:39+00:00,2021-05-20 22:14:24+00:00,6333945.0,"73 days, 7:25:45","[{'comment_id': 610896165, 'comment_body': ""```\r\nsharing: Switch to 'react-navigation-tabs' for creating tab bars.\r\n\r\nSince the RN 0.60 upgrade, using `createMaterialTopTabNavigator`\r\nexported by 'react-navigation' causes an error - that\r\n'ViewPagerAndroid has been removed from React Native'. Switching to\r\nthe one exported by 'react-navigation-tabs' fixes this.\r\n```\r\n\r\nThis commit looks out-of-place, hmm. Ah, I see Greg said something similar on the old PR: https://github.com/zulip/zulip-mobile/pull/4196/commits/670ac282753a2304ce1e8fc60ac5b082b865a9cb#r457804303.\r\n\r\nProbably just drop the commit."", 'comment_created': datetime.datetime(2021, 4, 9, 20, 46, 20, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610902749, 'comment_body': ""What's the 'double initialization' bug? ðŸ™‚ Let's add to the commit message a summary of symptoms, diagnosis, and why this is the right solution."", 'comment_created': datetime.datetime(2021, 4, 9, 21, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610902970, 'comment_body': ""(Same comment as I made on the previous commit: let's add some useful detail to the commit message. ðŸ™‚)"", 'comment_created': datetime.datetime(2021, 4, 9, 21, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610905032, 'comment_body': 'Interesting; if I understand correctly, this is the ""big reveal"" or the ""moment of truth"", where we take the feature\'s implementation and finally make it available to the user! ðŸŽ‰\r\n\r\nEnhancements aside (those are probably fine to do in later commits), can we expect that this change is OK to make at this point in the branch? In particular, there aren\'t any known bugs, crashes, test failures (well I know there aren\'t any test failures ðŸ™‚), etc., at this point?\r\n\r\nOne reason I ask is that I see several commits after this. So I\'ll be keeping an eye out for bug-fixes in those commits to see if they might better go before this one.\r\n\r\nReading...', 'comment_created': datetime.datetime(2021, 4, 9, 21, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610915411, 'comment_body': '```\r\nsharing: Explicitly provide params to Tab.Screen.\r\n\r\nold code was based on react-navigation v2, currently we are using\r\nreact-navigation v5 which requires params to explicitly be passed\r\nin Tab.Screen components.\r\n\r\nSee below link for details:\r\n\r\n- https://reactnavigation.org/docs/upgrading-from-4.x/\r\n\r\nFixes: #117\r\n```\r\n\r\nA couple of points about this commit:\r\n\r\nOne is, does it fix #117? An earlier commit in the PR was marked as fixing #117. Which one is the fix? ðŸ™‚ \r\n\r\nAlso, I\'m not sure this is quite the right explanation of why these changes are made.\r\n- React Navigation 5 doesn\'t enforce that we pass `initialParams`. If it did, our type-checking would (we\'d hope!) complain that we\'d been leaving it out. We also have plenty of `Foo.Screen` components that work fine without this prop. (It\'d be nice if the [doc](https://reactnavigation.org/docs/screen/#initialparams) said something like ""optional"" on the entry for the prop itselfâ€”but I do see ""You need to provide at least a name and a component to render for each screen"" at the top, which suggests that the others, including this one, are optional.)\r\n- It looks like the equivalent thing to do _before_ React Navigation 5, which I can conveniently see from your link to the doc (thanks for that), is to include `params` in a route config passed to `createFooNavigator` (in this case, `createMaterialTopTabNavigator`).\r\n- We finished the upgrade to React Navigation 5 in #4393. I see from the diff of the commit that converted this file to v5\'s new component-based APIâ€”that was 89a9b6c1bâ€”that we weren\'t including `params` in the corresponding route configs. And yet, here, we\'re adding `initialParams`.\r\n\r\nSo, this commit looks like an interesting, functional change; I\'m not yet convinced that it\'s just an overdue refactor to update an old expression with React-Nav 5\'s vocabulary. ðŸ™‚\r\n\r\nWhat might another explanation be, then? What happens if this change isn\'t made?', 'comment_created': datetime.datetime(2021, 4, 9, 21, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610916512, 'comment_body': ""nit: This pure-formatting fix belongs in its own small NFC commit; it's not interesting alongside the main work being done in this commit."", 'comment_created': datetime.datetime(2021, 4, 9, 21, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610922475, 'comment_body': ""```\r\nsharing: Set appropriate filename of shared content.\r\n\r\npreviously filename was the last element of sharedDataUrl.split('/'),\r\nthis did not always correspond to the actual filename, sometimes\r\nthis element did not contain a file extension causing the uploaded\r\ndata to be stored as a binary file. this made shared images fail to\r\nrender and on downloading the shared content it was downloaded as\r\na binary file, this commit gives the files generic names with\r\nappropriate extensions.\r\n\r\nFixes: #117\r\n```\r\n\r\n(Same thing about the `Fixes: #117` line. Which commit fixes the issue? ðŸ™‚)\r\n\r\nIt seems like you've found a bug that makes file-sharing fail, and this is a fix for it! Glad to have a fix, but best for it to go before the exciting commit that exposes the feature to users, if I understand correctly that this is possible.\r\n\r\n> `sharedDataUrl.split('/')`\r\n\r\n I don't find the identifier `sharedDataUrl` anywhere previous to this commit (or after it). I think you meant `sharedImageUrl` and `sharedFileUrl` (right?), but this makes it a bit harder to follow. ðŸ™‚ "", 'comment_created': datetime.datetime(2021, 4, 9, 21, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610926738, 'comment_body': ""Can you help me understand why the new way to choose `fileName` is OK and what we want? Some concerns are,\r\n\r\n- It can now give the same name for different files, even if those files' original names were different. What was once `cat1.jpeg` and `cat2.jpeg` would both get named `image.jpeg`. Is that right? That sounds like something we should be careful about.\r\n- It's not obvious to me that the second part of a MIME type will be an appropriate file extension.\r\n  - If the MIME type is `text/plain`, it looks like the new code will give us `file.plain` for `fileName`.\r\n  - If the MIME type is `image/svg+xml`, it looks like the new code will give us `image.svg+xml` for `fileName` (from a look at [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)).\r\n  - (Those don't look right, and I'm sure we could find others that also don't look right.)"", 'comment_created': datetime.datetime(2021, 4, 9, 22, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610942689, 'comment_body': ""```\r\n[...] sometimes\r\nthis element did not contain a file extension causing the uploaded\r\ndata to be stored as a binary file\r\n```\r\n\r\nAh, and: could this be solved at a different layer? I see that we're passing `fileName` to `api.uploadFile`. One thing that `api.uploadFile` does is call `getMimeTypeFromFileExtension` to get the MIME type. But that step seems unnecessary for us here, since we already know what the MIME type is. Could the bug you're seeing have been caused by `getMimeTypeFromFileExtension` giving the wrong MIME type? That sounds plausible to me."", 'comment_created': datetime.datetime(2021, 4, 9, 22, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610946072, 'comment_body': 'There\'s a lot going on in this commit! I\'m a little lost when examining each individual change here.\r\n\r\nAs you\'ve seen with at least one bug-fixing commit I\'ve read so far, it\'s an area that\'s pretty prone to bugs, so it\'ll be vitalâ€”as much as possible without introducing regressions or test failuresâ€”to isolate the individual changes into their own commits and explain each one clearly, both to help focus review and to maintain a clean project history. ðŸ™‚\r\n\r\nI\'ll take a closer look at more individual changes later, but one looks interesting to me so far: after this change, the `.type` property has a different shape (and meaning?) from the nearby `.type` property before this change. That one used to take a literal ""image"", ""text"", or ""file"". Now (if I\'ve understood correctly), it\'s computed with `cr.getType()`. That seems like a change that should be reasonably separable from everything else going on here; is that right? Probably there are more, too.', 'comment_created': datetime.datetime(2021, 4, 9, 23, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610952016, 'comment_body': ""```\r\nsharing: Set file name to actual name of the file.\r\n\r\nPreviously files shared to zulip were renamed to have generic file\r\nname, this made it difficult to identify shared files. Now the name\r\nof shared files aren't altered.\r\n\r\nFixes: #117\r\n```\r\n\r\nAhâ€”so this reverts the change earlier in the PR where we started using generic names? Let's change that earlier commit so that we don't use generic names ever, then, since we don't intend to keep that behavior."", 'comment_created': datetime.datetime(2021, 4, 9, 23, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 610953370, 'comment_body': ""```\r\nsharing: Fix bug when app is launched from history.\r\n\r\nthis was required because of the following bug:\r\n1. share from any app to zulip.\r\n2. cancel the share.\r\n3. return back to zulip by selecting it from minimized apps.\r\n4. now go back to the previous app used to share to zulip.\r\n5. share something to zulip again.\r\n6. the sharing screen will not be visible.\r\n\r\nintended behavior: Sharing screen should be visible in step 6\r\n\r\nFixes: #117\r\n```\r\n\r\nCould you talk in the commit message about the diagnosis that led to the change in this commit, and why the particular change is the right way to respond to that diagnosis? So far, I just see a description of the bug's symptoms.\r\n\r\n(This also seems good to go earlier in the branch, before we expose the feature to users.)"", 'comment_created': datetime.datetime(2021, 4, 9, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 618747782, 'comment_body': 'dropped this commit.', 'comment_created': datetime.datetime(2021, 4, 22, 21, 23, 57, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 618747816, 'comment_body': 'Before anything I have chosen to drop this commit and changes introduced by it. As to the reason for this - it is explained below\r\n\r\n> What\'s the \'double initialization\' bug?\r\n\r\nFrom what I could infer double initialization bug is a bug where another instance of the app gets started while the previous one is running, this leads to sharing of the redux store that tends to introduce inconsistencies.\r\nMore discussion on this can be found at [CZO](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/double.20initialization.20on.20sharing)\r\n\r\n**Possible steps of reproduction**\r\nThese are Listed [here](https://github.com/zulip/zulip-mobile/pull/4204#issuecomment-662295317)\r\n\r\nI can\'t seem to run that branch locally (unrelated react native error) so I couldn\'t verify it there, but I did test it out on the rebased version of the app, at the point where I introduced initialParams [f0428a7](https://github.com/zulip/zulip-mobile/pull/4514/commits/f0428a7c36212fb665138cd18ca8289bfc1f3ebe)\r\nI tried the steps of repro with the changes reverted and with the changes present. The symptoms reported were not noticed in the user interface.\r\nHowever I did notice in debug console two symptoms that do correspond to this issue, occurrence of `action persist/REHYDRATE` as well as the log `Running ""ZulipMobile"" with {""rootTag"":21}` two times.\r\nThese occurred when I reverted the changes introduced in \'fix re initialization issue` commit, and disappeared when the changes were present.\r\nThis was the reason I kept this commit before as it indicated double initialization.\r\n\r\n**Why this specific change was supposed to fix this issue?**\r\nIt was discussed in [CZO](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/double.20initialization.20on.20sharing/near/950044)  that when the app were quit, it didn\'t fully quit, it was discovered that `react native host` was still present and on starting the app again in the way the repro steps demanded, the `react native host` would mount another react root view, which would trigger rehydrate and we would have a double initialization issue.\r\n\r\nExcept this may not be the complete story. When an app quits android doesn\'t kill it\'s process entirely, this is true for every app be it react app or not (possibly for optimization purposes for when the app is restarted). This is verifiable as the profiler still indicates the app process as alive even after the app\'s onDestroy method is triggered (Up until the point when the app is available in recent apps view.)\r\n\r\nThe Symptoms that we discover then are not because our app is reinitialized, while a previous instance is running; but instead when we do quit the app (and whenever it\'s onDestroy is called), it also destroys the `react root view` that houses our app without killing the `react native host` so then when we do bring the app to foreground once again a new `react root view` is mounted.\r\nit is certain rootview is destroyed when onDestroy is called, I discovered this by following super.onDestroy by pressing `CTRL+B` in android studio, and it never kills react native host, but does unmount react root view. This was also discussed in [CZO](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/double.20initialization.20on.20sharing/near/950932)\r\nThis behavior is also in agreement with other react apps. `react native host` doesn\'t die but the root view is unmounted. So the double logs we were seeing is because root view was mounted before (it got unmounted without any log) and then mounts again. The dispatch to `rehydrate` happens after as well and we report it as having seen `rehydrate` twice, but at any one moment we only have 1 root view and 1 `rehydrate` dispatch.\r\n\r\n**So what can be the cause of the user interface symptoms discovered in the reproduction step?**\r\nI suspect it had something to do with implementation of `onNewIntent`. Checking in the dates of the repro comment and the commit editing `onNewIntent`. The comment comes before.\r\nWhy do I suspect it to be `onNewIntent`? because the implementation at the time of writing that commit was not the same as what it is today, and the repro steps trigger `onNewIntent` method. Although It seems a bit hard to verify, I will have to manually revert changes.\r\nIn any case the symptoms of double console log are also present in the current master as well - if one quits the app by pressing back button, and restarts the app from recent app, another rootView gets mounted while we can see a  `Running ""ZulipMobile"" with {""rootTag"":21}` before.', 'comment_created': datetime.datetime(2021, 4, 22, 21, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 618747995, 'comment_body': 'Added a much more verbose commit message regarding this, I am also a bit skeptical about the placement of this code and have written about an alternative in the commit message itself, please share your views on it.', 'comment_created': datetime.datetime(2021, 4, 22, 21, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 618748854, 'comment_body': ""I have moved this commit to the point in PR where there are no longer any fatal issues (issues that would crash the app). But it's still at a point after which the feature is enhanced a lot (example: addition of multiple file share). So let me know if it is placed at the correct position now or should it be preferred at the end of those enhancements.\r\n\r\nI have also made sure to mark issue resolved in only one commit (this commit). My thought process was that the entire PR was aimed towards fixing the issue, and each commit solved part of the issue, but I understand your point it is better to mark it in the place where we release the feature."", 'comment_created': datetime.datetime(2021, 4, 22, 21, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 618748908, 'comment_body': ""I think I made a false conclusion with regards to initialParams, editing the commit message will be sufficient to fix this, but the change was necessary regardless.\r\n\r\nwhy I did this?\r\n17f73d8 gives a reason for why this was necessary: The app was crashing on mounting shareToStream, and it used to work before.\r\nthe error I observed precisely was that params was missing from props.route \r\nI suspect the refactor done at SharingScreen.js in 89a9b6c is erraneous, if we observe the changes we see that we were passing navigation object down to the individual screen, from where we extracted the params, but this is not happening in the new design.\r\n\r\nhere is a guide provided by reactnavigation on how to pass params: https://reactnavigation.org/docs/params\r\nbut it doesn't elaborate what to do with tab navigator screens.\r\n\r\nhere is a link to a relevant stack overflow question: https://stackoverflow.com/questions/61258731/passing-params-to-tab-navigator-react-navigation-5\r\n\r\ninference from this is that we can either wrap the Tab.Screens in a Context Provider, consuming it via Tab.Screens or pass in a new prop initialParams, I couldn't find a way to directly pass params to Tab.Screen\r\n\r\nhere are the details about initial params: https://reactnavigation.org/docs/params/#initial-params\r\n\r\ninferences:\r\nif no params are passed initial params will be used\r\nif params are passed initial params will be shallow merged with them. I am not sure which one overrides which one, but i suspect params would override initial params by the naming scheme, regardless this should not be relevant here since we don't have a direct way of passing params to Tab.Screen anyway."", 'comment_created': datetime.datetime(2021, 4, 22, 21, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 618749181, 'comment_body': 'not relevant now.', 'comment_created': datetime.datetime(2021, 4, 22, 21, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 618749290, 'comment_body': 'Changed according to this suggestion', 'comment_created': datetime.datetime(2021, 4, 22, 21, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 618749385, 'comment_body': 'made it more verbose in the commit message.', 'comment_created': datetime.datetime(2021, 4, 22, 21, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 620874033, 'comment_body': 'commit ded9b49277d246ea9669465ad575edeccc37f59d\r\n\r\n    sharing: Reset initialSharedData after sending the map to JS.\r\n    \r\n    This resolves the \'Map already consumed\' bug.\r\n\r\n(and much more detail, which is excellent, thank you!)\r\n\r\nSo effectively this solution makes `getInitialSharedContent` no longer a getter, but instead something that consumes its input. If we call it twice, the second time will get nothing, because the first call already consumed it.\r\n\r\nI think that\'s *probably* the behavior we actually want in any case, even if there weren\'t a crash involved. When you take an action to share something, that\'s a single request to do so -- we don\'t want to be later picking it up from the middle and trying to act on it again.\r\n\r\nFramed that way, I think this is the perfect place to implement that behavior -- right where the data is being handed off to the JS that\'s asked for it, we cross it off as having been consumed.\r\n\r\nI have two remarks from there:\r\n* Because this method now has an important side effect, it should have a name that sounds less like a plain old getter. Just replacing ""get"" with ""read"" might be good -- that makes the name similar to reading data from an input stream, which has exactly the same kind of side effect.\r\n* There\'s another place in the existing code where we handle some data that has a lot in common with this structurally: when you start the app by opening a notification. That code currently has a different behavior:\r\n  ```java\r\n    @ReactMethod\r\n    public void getInitialNotification(Promise promise) {\r\n        if (null == initialNotification) {\r\n            promise.resolve(null);\r\n        } else {\r\n            promise.resolve(Arguments.fromBundle(initialNotification));\r\n        }\r\n    }\r\n  ```\r\n  So if we call `getInitialNotification` several times, we get the same data each time. I think the `Arguments.fromBundle` there basically avoids this ""Map already consumed"" error by creating a new map on each call, as a copy of `initialNotification`.\r\n\r\n  Could you try applying the same repro recipe with opening a notification, instead of sharing text? I am curious what the behavior is. From what you\'ve discovered, I\'m guessing that on the last step when you try starting the app from recent apps, we\'ll end up re-navigating to the conversation where the notification was -- which is a bug.\r\n\r\n  If we do have that bug in notifications, then we should fix it by probably doing the same thing as this commit does, and that will also be helpful confirmation that this commit is the right direction for fixing the sharing issue. (Or if we turn out not to, then that will be interesting and I\'ll be curious to understand better what\'s different between the two cases.)\r\n\r\nOh and I guess also a small comment on the commit message:\r\n\r\n    But it seems that react native discovers that the data in\r\n    initialSharedIntent is outdated and hence is unsafe to use thereby\r\n    giving us the exception and the bug.\r\n\r\nI think it\'s not exactly that it\'s ""outdated"", so much as it is that the memory underlying that `WritableMap` has been re-used for handing that data over to the JS code.\r\n', 'comment_created': datetime.datetime(2021, 4, 27, 5, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 620878291, 'comment_body': ""This does look like a very plausible fix! Here's your updated commit message:\r\n\r\n    sharing: Provide params to Tab.Screen, as `initialParams`.\r\n    \r\n    This addresses the 'blocker bug' at:\r\n    \r\n    17f73d88d79ca2e13944e0b0ce55d06229074c4d\r\n    \r\n    The app was crashing on mounting ShareToStream, with error suggesting\r\n    `props.route.params` is undefined.\r\n    \r\n    This bug was possibly introduced at:\r\n    \r\n    89a9b6c1b770c23135951bb3cb7e8d83bb0819b5\r\n    \r\n    During the refactor no params were specified for Tab.Screen. To fix this\r\n    we now use initialParams. If no `params` are specified `initialParams`\r\n    take its place. It is also shallow merged with any params we do pass.\r\n    \r\n    more details:\r\n    https://reactnavigation.org/docs/params/#initial-params\r\n\r\nThe original bug we were seeing at 17f73d88d79ca2e13944e0b0ce55d06229074c4d can't have been introduced at 89a9b6c1b770c23135951bb3cb7e8d83bb0819b5, because that came several months later.\r\n\r\nI'm not sure if on an earlier react-navigation version (like we had as of 17f73d88d79ca2e13944e0b0ce55d06229074c4d) we were successfully passing the equivalent of `props.route.params` through -- if we were, then I guess there was some other bug that caused things to crash there.\r\n\r\nBut aside from that part of the commit message, this looks like a good way to fix the bug that currently exists.\r\n"", 'comment_created': datetime.datetime(2021, 4, 27, 5, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 620884368, 'comment_body': '> Then just when I thought the problem is solved I noticed that when content is shared from the app `Files by Google` zulip\'s activity started within the task holding `Files by Google` app. Even if zulip is in background, its main activity loads on top of `Files by Google` and I do see a second `""Running with {""rootTag"": # }""` and `action persist/REHYDRATE`. I can even see the two instances of the app running, one previously present in recent Task, and one newly spawned within the app that called the share intent.\r\n\r\nVery odd! The Android docs on `launchMode` seem to really clearly say that shouldn\'t happen:\r\nhttps://developer.android.com/guide/topics/manifest/activity-element#lmode\r\n>  ""`singleTask`"" and ""`singleInstance`"" activities can only begin a task. They are always at the root of the activity stack. Moreover, the device can hold only one instance of the activity at a time â€” only one such task.\r\n\r\nOne detail for reproducibility: what version of Android did you observe this on?\r\n\r\n(I think this *shouldn\'t* differ by Android version -- I don\'t think the documented meaning of that manifest attribute has changed in a long time. But if it\'s behaving in a surprising way, then the Android version is one thing that\'s likely to affect it.)\r\n\r\n\r\n> To deduce as to why this happened I created dummy app in android whose only purpose was to send intent and discovered the following: [â€¦]\r\n> * if the intent is shared via calling the `startActivityForResult` method:\r\n>   * If zulip is in background, it doesn\'t come to foreground, it remains in background and a new zulip MainActivity is created within the dummy app.\r\n>   * If zulip is not in background, It doesn\'t get started in a new task separate from the calling app, instead the same thing happens - a new zulip MainActivity is created within the dummy app. [â€¦]\r\n> * I checked how other apps function in similar scenario there are mainly two ways apps deal with sharing:\r\n>   * They start within the calling app and if share is successful they exit and redirect the user to their previous task within the recent activity (if they had any) or spawn themself in a new task separate from calling app.\r\n>   * They immediately redirect to their previous task (if they had any) or spawns itself in a new task, never do they open in another app even if they are called from `startActivityForResult`. This is probably the result that we require.\r\n\r\nFascinating. Thanks for that debugging and these detailed notes, and I agree with your conclusion.\r\n\r\nPlease add a link in the commit message pointing to https://github.com/zulip/zulip-mobile/pull/4514#issuecomment-798069185 where you wrote those detailed notes down -- those were very helpful for me to understand what this commit is doing.\r\n', 'comment_created': datetime.datetime(2021, 4, 27, 5, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 620884498, 'comment_body': 'nit: last line of file should end with a newline, just like other lines\r\n', 'comment_created': datetime.datetime(2021, 4, 27, 5, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 620886610, 'comment_body': 'I think there are some extra imports here. I don\'t have Android Studio open at the moment but there\'s a command ""Optimize imports"", with a handy keyboard shortcut I\'m only 70% sure of but you can always get to it via the ""actions"" search at Ctrl+Shift+A, that will remove the unused imports and rearrange the rest canonically.\r\n\r\n(And the ""actions"" search result will also tell you what the direct keyboard shortcut is.)', 'comment_created': datetime.datetime(2021, 4, 27, 5, 53, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 620891234, 'comment_body': ""Hmm interesting. Good catch!\r\n\r\n    sharing: Fix bug when app is launched from history.\r\n    \r\n    This was required because of the following bug:\r\n    1. share from any app to zulip.\r\n    2. cancel the share.\r\n    3. return back to zulip by selecting it from minimized apps.\r\n    4. now go back to the previous app used to share to zulip.\r\n    5. share something to zulip again.\r\n    6. the sharing screen will not be visible.\r\n    \r\n    Intended behavior: Sharing screen should be visible in step 6\r\n    \r\n    This bug was possibly introduced in:\r\n    \r\n    70e9ad9d47ae2e192558cb4caa9ae8781251b926\r\n    \r\n    The placement of the code addressing the issue described in that commit\r\n    was erraneous, as it was causing send intents coming from `onNewIntent`\r\n    method to be ignored.\r\n\r\nI think the bug in that commit is actually subtler. It's that this function is doing the rest of its work on `intent`, the parameter it was passed... but this conditional is instead looking at `getIntent()`, a getter on the `Activity`, which is giving it the intent the activity was originally started with.\r\n\r\nWhat if you instead just change this conditional to refer to `intent` rather than `getIntent()`? Does that also resolve the symptoms?\r\n\r\nEven if it does, it might be a good refactor anyway to move this conditional to `onCreate` -- it really should only be relevant there. NB that if we do, then it should still be edited to say `intent`, for a related reason -- it should match what we're passing to `maybeHandleIntent` just below that.\r\n\r\nIt might be clearest to have two commits, actually: one that fixes the bug, by saying `intent` here instead of `getIntent()`, and then optionally a second one that moves this to `onCreate`.\r\n"", 'comment_created': datetime.datetime(2021, 4, 27, 6, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 620891703, 'comment_body': 'nit: should have blank line before this new bit of code, and no blank line between it and the `maybeHandleIntent` below it. That helps make it visually clear that this code goes together with that line.\r\n', 'comment_created': datetime.datetime(2021, 4, 27, 6, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 620895824, 'comment_body': ""Huh interesting. Are you finding that this makes a difference in the behavior you see?\r\n\r\nThe [docs say](https://reactnative.dev/docs/scrollview#nestedscrollenabled-android) this defaults to true, so passing it shouldn't be needed.\r\n\r\nThey also a bit concerningly say:\r\n> Enables nested scrolling for Android API level 21+.\r\n\r\nwhich makes me worry about whether the issue you were seeing will be there on iOS, when we add sharing support there (which I'd expect to use just about exactly the same JS code.) OTOH reportedly it works on iOS anyway:\r\nhttps://stackoverflow.com/questions/59828595/react-native-what-does-nestedscrollenabled-do\r\nOn the other other hand, the people on that thread found that it worked on Android already without the flag, so that's different from what it sounds like you were seeing.\r\n"", 'comment_created': datetime.datetime(2021, 4, 27, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 620897833, 'comment_body': 'This commit message says:\r\n\r\n    sharing: Capture error via sentry if sending shared data fails.\r\n\r\nand that change sounds great. The commit is making a couple of other changes too, though, which makes it a bit confusing to follow.\r\n\r\nHow about just adding the `logging.error` line before the existing `return`?\r\n\r\nI also like keeping the `try` tightly scoped around the `await`, because that means the error handling in the `catch` block gets to be tightly focused and know exactly where the error was. For example if there\'s an error somehow in the `showToast` with the ""sent"" text, then if that\'s inside the `try` block we\'d end up trying to handle it by saying ""Failed to send message"", which wouldn\'t be right.\r\n', 'comment_created': datetime.datetime(2021, 4, 27, 6, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 628933234, 'comment_body': '> Could you try applying the same repro recipe with opening a notification, instead of sharing text?\r\n\r\nI did it and we end up re navigating to the conversation where the notification pointed.\r\nSetting up `initialNotification` to null fixes it.\r\n\r\nI should probably make a different PR to fix it.', 'comment_created': datetime.datetime(2021, 5, 9, 19, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 628933287, 'comment_body': ""> The original bug we were seeing at 17f73d8 can't have been introduced at 89a9b6c, because that came several months later.\r\n\r\nAhh well that's embarrassing , I must have mixed up the dates :sweat_smile:"", 'comment_created': datetime.datetime(2021, 5, 9, 19, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 628933371, 'comment_body': '> One detail for reproducibility: what version of Android did you observe this on?\r\n\r\nAndroid 10. Although I just tested out Android 7 and it behaves like this as well.', 'comment_created': datetime.datetime(2021, 5, 9, 19, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 628933481, 'comment_body': '> What if you instead just change this conditional to refer to intent rather than getIntent()? Does that also resolve the symptoms?\r\n\r\nYup, This also resolves the issue. I have now made two commits as suggested.', 'comment_created': datetime.datetime(2021, 5, 9, 19, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 628933553, 'comment_body': 'Strangely yes, the change in this commit does make a difference. I have added it in 3 places and all of them are relevant for scrolling to work properly (scrolling of stream selection popup and topic selection popup) inside the sharing ui.', 'comment_created': datetime.datetime(2021, 5, 9, 19, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 636481574, 'comment_body': ""For cross-reference: I've expanded this to an entry in our style guide: d99ad3ad2"", 'comment_created': datetime.datetime(2021, 5, 20, 21, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636488496, 'comment_body': 'Sounds good -- please do! You might first file a quick issue for it.\r\n', 'comment_created': datetime.datetime(2021, 5, 20, 21, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636494147, 'comment_body': ""> Android 10. Although I just tested out Android 7 and it behaves like this as well.\r\n\r\nCool, thanks. I've also just taken the liberty of adding a line to your comment at https://github.com/zulip/zulip-mobile/pull/4514#issuecomment-798069185 with that information."", 'comment_created': datetime.datetime(2021, 5, 20, 21, 47, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636506227, 'comment_body': 'So be it, then. Thanks!\r\n\r\nI added a few words about this in this commit message, including a link to this thread.\r\n', 'comment_created': datetime.datetime(2021, 5, 20, 22, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637595497, 'comment_body': 'https://github.com/zulip/zulip-mobile/issues/4758', 'comment_created': datetime.datetime(2021, 5, 23, 20, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}]","[{'commit_sha': 'bb1bba0e3e9b87d4246c895e85dd6a1b540cac03', 'committer_username': 'agrawal-d', 'committer_name': 'Divyanshu Agrawal', 'committer_email': None, 'commit_date': datetime.datetime(2014, 5, 27, 15, 22, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b1c75957954abbf9566226e58dbd705b2d90134', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba965515f8aa3170395280449a5f1047ce5a8aea', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97d8d5a4aa2e99b2c8bbda164cbae37dde4e379b', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a20529e02a7c3d38059f737e0288b390453e799', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6656e20e3049726b3a1b703e5514b45c0f14c3df', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '569cee95a36688032fd360e4ac630dc8d93d6116', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
650183050,[android] Share to Zulip from other apps [part 2],"Fixes: #117
Continuation of work done in #4514

The previous PR thread was getting too long, so as [suggested](https://github.com/zulip/zulip-mobile/pull/4514#issuecomment-845515080) by @gnprice It is now broken into two parts.
To see the screen capture of the demonstration of this feature checkout #4514.
Reviews on that thread by @chrisbobbe: https://github.com/zulip/zulip-mobile/pull/4514#pullrequestreview-632774278
Reviews on that thread by @gnprice: https://github.com/zulip/zulip-mobile/pull/4514#pullrequestreview-645458694

Note that the specific commit that fixes #117 is present in this PR and not #4514.",True,4757,https://api.github.com/repos/zulip/zulip-mobile/pulls/4757,https://github.com/zulip/zulip-mobile/pull/4757,closed,424,377,11,11,8,53,4,0,"[{'name': 'a-Android'}, {'name': 'a-compose/send'}, {'name': 'P1 high-priority'}, {'name': 'a-share-to'}]",2021-05-21 18:10:20+00:00,2021-07-19 17:24:19+00:00,5094839.0,"58 days, 23:13:59","[{'comment_id': 637180840, 'comment_body': ""This should pass `editMessage: null`, same as the existing `navigateToChat` does.\r\n\r\nThe reason is that `ChatScreen` expects that:\r\n```js\r\n// ChatScreen.js\r\ntype Props = $ReadOnly<{|\r\n  navigation: AppNavigationProp<'chat'>,\r\n  route: RouteProp<'chat', {| narrow: Narrow, editMessage: EditMessage | null |}>,\r\n|}>;\r\n```\r\nNote `editMessage` is a required property there.\r\n\r\nThis is exactly the kind of thing that in general the type-checker is supposed to mean you don't have to worry about :slightly_smiling_face: -- if Flow accepts the code, then it's good. All these actions in `navActions.js` represent an exception to that happy general rule, because react-navigation doesn't make it easy to connect the dots between the argument `'chat'` here and the route-params type expected by `ChatScreen` over there. So whenever adding or changing something in `navActions.js`, or changing the route-params type on a screen, we have to manually check that the types line up.\r\n\r\nI should add a comment in `navActions.js` saying that, because I see there isn't one; perhaps also something in the style guide or other docs. Also I should try to just solve that problem -- react-navigation doesn't make it easy, but I think it still can be done.\r\n"", 'comment_created': datetime.datetime(2021, 5, 21, 19, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637181938, 'comment_body': ""nit: keep the blank line -- it visually separates the nav props from the rest.\r\n\r\n(In general, where there's an existing blank line it's best to keep it unless you have a reason it shouldn't be there anymore.)"", 'comment_created': datetime.datetime(2021, 5, 21, 19, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637182256, 'comment_body': 'nit: keep blank line between third-party imports and ours\r\n\r\nAlso an example of the same general rule as in the previous comment :wink: ', 'comment_created': datetime.datetime(2021, 5, 21, 19, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637183924, 'comment_body': ""nit: keep `auth` and `ownUserId` in the same order here as in the `connect` call (probably alphabetical).\r\n\r\nAlso keep `dispatch` first, as it currently is; that's where we typically put it among props gotten from `connect`. The `dispatch: Dispatch` is super boring, and writing it the same way every time helps let the boring thing fade appropriately into the background :slightly_smiling_face: "", 'comment_created': datetime.datetime(2021, 5, 21, 19, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637187597, 'comment_body': ""Hmm, the name `finishShare` no longer seems appropriate -- this now isn't something we do after successfully sending, to finish off the sharing, but instead is something we do if sharing failed.\r\n\r\nPerhaps a name like `onSendError`?"", 'comment_created': datetime.datetime(2021, 5, 21, 19, 45, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637199727, 'comment_body': ""Oh gosh I see, and this exception case shouldn't even happen, because here's the spot in `handleSend` where we make the API call:\r\n```js\r\n  try {\r\n    await sendMessage(auth, messageData);\r\n  } catch (err) {\r\n    showToast(_('Failed to send message'));\r\n    logging.error(err);\r\n    return;\r\n  }\r\n  showToast(_('Message sent'));\r\n```\r\n(Where that `sendMessage` should be `api.sendMessage` -- it's an API call. I probably hadn't written [this style-guide entry](https://github.com/zulip/zulip-mobile/blob/master/docs/style.md#import-api) yet when that line was added, and I guess I let it slip through in code review.)\r\n\r\nThat explains the existing behavior you describe in the commit message:\r\n\r\n    Previously after content was shared to zulip the app would quit,\r\n    regardless of the fact that the content was shared successfully or\r\n    failed to share, â€¦\r\n\r\nThat code is, on its own, doing a fine job of the pattern I described in this style-guide entry I just wrote yesterday:\r\nhttps://github.com/zulip/zulip-mobile/blob/master/docs/style.md#catch-at-ui\r\ni.e. of catching the exception at the level of UI code, and informing the user accordingly.\r\n\r\nBut then basically what's happening in this commit is that you want to introduce another way that the UI responds to the difference between success and failure: you want to navigate one way on success, and another way on failure.\r\n\r\nDoes the new logic in this version actually work as intended? It looks like if the API request fails, the `handleSend` call will show an error toast but then return, and so this code will proceed to `this.shareSuccess()` which will navigate to the relevant narrow.\r\n\r\nTo implement this logic correctly, we probably want a single try/catch. Both this function and its callee `handleSend` are plausible sites for that -- they're both UI code that's responsible for this interaction. I think probably the cleanest way would be to have `handleSend` take care of it; this caller can pass in a `Narrow` object for it to use.\r\n"", 'comment_created': datetime.datetime(2021, 5, 21, 20, 1, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637200704, 'comment_body': ""(One reason it's probably cleanest to have `handleSend` take care of this is that as I was looking at this code, another thing I was thinking is that more of this logic should be pushed into code that's shared between `ShareToPm` and `ShareToStream` -- there's a fair amount that looks duplicate. That's mostly pre-existing before this PR, but would be good not to regress on.)\r\n"", 'comment_created': datetime.datetime(2021, 5, 21, 20, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637205049, 'comment_body': ""nit: instead of the abbreviation `cr` which is kind of cryptic, let's call this `contentResolver`. That's typical Java style, in particular :smile: "", 'comment_created': datetime.datetime(2021, 5, 21, 20, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637205584, 'comment_body': 'So in the [upstream docs](https://developer.android.com/training/secure-file-sharing/retrieve-info.html) which you very helpfully link to (thanks!), this says\r\n```kotlin\r\n        val nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)\r\n```\r\nIs there a difference between `OpenableColumns` and `MediaStore.MediaColumns`?\r\n', 'comment_created': datetime.datetime(2021, 5, 21, 20, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637207639, 'comment_body': ""Hmm, this change highlights to me that we have an unchecked dependency between these types and the Kotlin code that populates these objects.\r\n\r\nThat's OK, but we should definitely have comments pointing that out, bidirectionally. I.e. we should have a comment here saying this needs to be in sync with that particular bit of Kotlin code, and a comment there at that code saying it needs to be in sync with this type definition. That way we reduce the likelihood of some future change causing a mismatch by accident.\r\n\r\nWould you add those comments as a prep commit in this branch? For an example, see `src/notification/types.js` and the corresponding Kotlin code it points to.\r\n"", 'comment_created': datetime.datetime(2021, 5, 21, 20, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637217436, 'comment_body': ""Another thing I'm noticing as I look at this code -- again, basically present before this PR but it'd be good to clean up at the start of the PR, before adding to the code -- is that all this code specific to handling a sharing intent should be gotten out into its own sharing-specific file, out of `MainActivity.kt`.\r\n\r\nPerhaps a good name would be `HandleSendIntent.kt`. Then there's also no need to have the methods live on a `class` definition -- they can live right at top level. See `NotifyReact.kt` for an example, and note in particular the `@file:JvmName` line at the top.\r\n\r\nYou may need to pass in an extra parameter or two to let the code do the things it's currently doing with getters on `Activity`: in particular `application` in `handleSend`, and `this.contentResolver` in `getParamsFromIntent`. Or maybe also something I'm missing, but the compiler will make sure to let you know :wink:\r\n\r\nBecause it's not just moving code verbatim but also refactoring slightly to add those parameters, the cleanest thing might be to move one function at a time: first `getParamsFromIntent` (at the start of the branch before introducing `getFileName`) and I guess `ShareParamsParseException` at the same time, then `handleSend`."", 'comment_created': datetime.datetime(2021, 5, 21, 20, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637218693, 'comment_body': 'Hmm, the nested `if` feels a bit annoying.\r\n\r\nPerhaps `when (intent?.action)`?\r\n', 'comment_created': datetime.datetime(2021, 5, 21, 20, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637221605, 'comment_body': ""When the two cases have different sets of properties, I think it's cleanest to continue to use a tag property like `type: 'text'` / `type: 'content'`, rather than a boolean `isText`.\r\n\r\nOne reason is that this situation isn't particularly inherently boolean -- it's easy to imagine it (re-)growing a third case in the future, and then we'd either switch back to a `type` property or end up with some messy tree of booleans.\r\n\r\nAnother is just that for the human reader a property named `type` is a pretty clear signal, as a matter of convention, that different values will correspond to different sets of other properties and/or different types for them. Whereas a boolean doesn't signal that, because they're used all the time where that isn't the case.\r\n"", 'comment_created': datetime.datetime(2021, 5, 21, 20, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637222589, 'comment_body': '(As a bonus, I think that will simplify this commit somewhat, because the ""text"" case won\'t change. There\'s a lot happening in this commit, so if we were going to change to something like `isText` I\'d be interested in finding ways to split up the changes into several commits. There may also be unrelated ways this commit can helpfully be split up.)', 'comment_created': datetime.datetime(2021, 5, 21, 20, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637225165, 'comment_body': 'Hmm interesting, so this commit changes the way we detect whether the item should be called an ""image"" or a ""file"".\r\n\r\nPreviously we\'d look at the `type` property of the Intent, which I guess is a MIME type, and see if it looked like `image/foo`.\r\n\r\nNow we instead take each URL, and go ask the content resolver about it with `getType`, and pass that on.\r\n\r\nCan you make that change first, before adding the `SEND_MULTIPLE` case? I think that would help split up this commit\'s changes so they can individually be understood.\r\n\r\nDo you believe that for the `SEND` case, the new logic has the exact same behavior? I.e. that `intent.type` is exactly the same as `contentResolver.getType(url)`. That would be helpful to know if so (and you can mark that commit as NFC to express that), or if not it\'d be helpful to know what changes are expected.\r\n', 'comment_created': datetime.datetime(2021, 5, 21, 20, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637226216, 'comment_body': ""Hmm, what if neither `url` nor `urls` is non-null? Or what if both of them are?\r\n\r\nIs the point here that `url` should always be present on `SEND`, and `url` should always be present on `SEND_MULTIPLE`? If so, it'd be best to make that explicit -- instead of conditioning on which of these extras are present on the intent, we can switch on `intent.action` and then assert that the expected extra is present, throwing an exception like the existing code does.\r\n"", 'comment_created': datetime.datetime(2021, 5, 21, 20, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637227264, 'comment_body': ""This is exactly the same logic as in the `url != null` case above, right? Let's deduplicate it. Can just make a little helper method that takes `url` and `contentResolver` as arguments, and returns `singleContent`.\r\n"", 'comment_created': datetime.datetime(2021, 5, 21, 20, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637228325, 'comment_body': 'Hmm, can this be just `null` or `false`? I think that can let this be a couple of lines shorter without really being less clear -- e.g. in `ChatScreen` we say:\r\n```\r\n      {showComposeBox && (\r\n        <ComposeBox\r\n          narrow={narrow}\r\n          editMessage={editMessage}\r\n          completeEditMessage={() => setEditMessage(null)}\r\n        />\r\n      )}\r\n```\r\n', 'comment_created': datetime.datetime(2021, 5, 21, 20, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637232189, 'comment_body': ""Hmm, it's a shame to have to be making all these changes twice. And it makes it likely that as we keep making changes, things will unintentionally diverge.\r\n\r\nWould you try to deduplicate some of this code, in commits that come before the ones where you extend it?\r\n\r\nIt might be as simple as making a component with a name like `SharedContentPreview`, which would contain (initially, before your change to handle multiple files) just the `<Image â€¦ />` line and the conditional on `sharedData.type` that controls it.\r\n\r\nBasically any code you're going to add more logic to, and that's already duplicated, would be good to deduplicate first so you can then add the logic only once. (Ideally it should have been deduplicated in the first place; oh well :shrug: )\r\n"", 'comment_created': datetime.datetime(2021, 5, 21, 21, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 637233543, 'comment_body': ""Hmm, and I see that in fact in the other copy of this duplicate code in the existing tree, before your changes, we also use that pattern!\r\n```\r\n            {sharedData.type === 'image' && (\r\n              <Image source={{ uri: sharedData.sharedImageUrl }} style={styles.imagePreview} />\r\n            )}\r\n```\r\n\r\nWhereas in this copy we do a more awkward `let sharePreview = null` and then conditional update. I *think* those have the exact same behavior, but it'd be easier to be sure if they were identical -- say, by existing in only one copy that just gets called from both places :wink: "", 'comment_created': datetime.datetime(2021, 5, 21, 21, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 669199430, 'comment_body': '> Does the new logic in this version actually work as intended? It looks like if the API request fails, the `handleSend` call will show an error toast but then return, and so this code will proceed to this.shareSuccess() which will navigate to the relevant narrow.\r\n\r\nYeah, it works as you describe, I must have not tested it.\r\n\r\nIn the new revision I have significantly changed this code, (as part of de-duplicating some of the code b/w `ShareToPm` and `ShareToStream`) and so effectively this part of the code now uses only 1 try catch.', 'comment_created': datetime.datetime(2021, 7, 14, 0, 38, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 669199545, 'comment_body': 'Hmm, I remember having a crash on using `OpenableColumn` several times earlier but this does not happen now for some reason. I used `MediaColumn` as an alternative because I thought that it best represented the type of content sent by a `SEND_INTENT`.\r\n\r\nI couldn\'t find what `OpenableColumn` refers to precisely as well, the [docs](https://developer.android.com/reference/android/provider/OpenableColumns) describe them as columns for ""openable uris"" but I don\'t really understand what that refers to.\r\n\r\nI have reverted it to `OpenableColumns`.', 'comment_created': datetime.datetime(2021, 7, 14, 0, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 669199576, 'comment_body': 'added the comments,\r\n\r\non a side note this makes me wonder why notification has its own separate types.js (why not include it in the main types?)', 'comment_created': datetime.datetime(2021, 7, 14, 0, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 669199715, 'comment_body': ""> Perhaps a good name would be `HandleSendIntent.kt`\r\n\r\nThat's already taken by the activity responsible for receiving `sendIntent` :smile:\r\n\r\nI have moved it to a file called `sharing/SharingHelper.kt`, similar to `NotificationHelper.kt`\r\n\r\nI have done it all in 1 commit since, there was just 1 parameter (application) to add and nothing much changed, I have added a descriptive commit to explain that, I hope that is fine."", 'comment_created': datetime.datetime(2021, 7, 14, 0, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 669200212, 'comment_body': ""`contentResolver.getType` has the potential to return null, so in the new revision I am handling this in kotlin code itself although I am not sure if this is the right way, it returns null only when the url provided is broken, this shouldn't really happen with SEND_INTENT but just in case it does, I give a fallback mimeType for `octet-stream`.\r\n\r\nimplementation in master branch deduces types by directly analyzing the send intent, but this won't be possible in case of multiple files, it will just be */* in that case, wonder what will happen there if a broken url is provided."", 'comment_created': datetime.datetime(2021, 7, 14, 0, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 669200435, 'comment_body': ""I've made a `ShareWrapper` method, that deduplicates this and a lot more. Initially I went with just `SharedContentPreview` but there was a lots of de-duplication potential in both the screens. I wonder if this can have any downside though :thinking:."", 'comment_created': datetime.datetime(2021, 7, 14, 0, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 669202692, 'comment_body': ""This can result in an unhandled promise rejection right? should this be wrapped in a try catch? I am using this inside `handleSend` of the `ShareWrapper` introduced in the current revision as well and haven't wrapped it in try catch just yet, wanted someone's opinion on this."", 'comment_created': datetime.datetime(2021, 7, 14, 0, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 670034590, 'comment_body': ""These state properties get dropped from `ShareToStream`, because they're now managed here. They should probably get dropped from `ShareToPm`, too, right?"", 'comment_created': datetime.datetime(2021, 7, 15, 0, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670035921, 'comment_body': ""nit: when there's a type-tag like this `type` property, put it first in the list. That's because that's always the property you want to look at first, to determine which other properties will even be present and what they'd mean."", 'comment_created': datetime.datetime(2021, 7, 15, 0, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670038087, 'comment_body': ""Hmm, yikes, is the existing code here relying on stream names instead of IDs? ... Yep, it is. Well, fixing that is out of scope for this PR. But it would be a good followup while you're in this code.\r\n"", 'comment_created': datetime.datetime(2021, 7, 15, 0, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670039215, 'comment_body': 'Oh I see, this is based on types that were previously in `src/sharing/send.js`. Well, reordering these would be a nice tiny cleanup to tack on, even at the end of the branch.', 'comment_created': datetime.datetime(2021, 7, 15, 0, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670040224, 'comment_body': ""I think we don't even need names for these two subtypes -- we can just have a single definition for their union.\r\n\r\nThen you can write it real compactly:\r\n```js\r\ntype SendTo =\r\n  | {| type: 'stream', stream: string, topic: string |}\r\n  | {| type: 'pm', selectedRecipients: $ReadOnlyArray<UserId> |};\r\n```\r\n\r\nOh, but this is based on types from `send.js`. Yeah, for moving those it's definitely best to leave them in a similar format -- there's plenty happening in that commit, so best not to add more changes than necessary. Would be a nice small cleanup later; could squash it with reordering `type` to go first."", 'comment_created': datetime.datetime(2021, 7, 15, 0, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670042568, 'comment_body': ""This `nestedScrollEnabled` looks like potentially a change that we care about one way or the other. It wasn't set on the `ShareToPm` side, and isn't set in the new wrapper. Is this something we do want set, or don't?\r\n"", 'comment_created': datetime.datetime(2021, 7, 15, 0, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670043470, 'comment_body': ""There is a subtle change happening here:\r\n* Previously, the `AnimatedScaleComponent` (and its siblings below) was a child of the container view, and a sibling of the preview.\r\n* Now, it's passed to the wrapper in its `children` prop, and winds up as a sibling of the container view that contains the preview.\r\n\r\nDoes that affect the layout in a meaningful way, for better or worse?"", 'comment_created': datetime.datetime(2021, 7, 15, 0, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670049769, 'comment_body': ""nit: keep the same organization here as we have for other components that use `connect`:\r\n\r\n* first, the props that callers pass\r\n* then a blank line as a separator\r\n* then the props that `connect` provides\r\n  * `dispatch` first\r\n  * then the props from the `connect` callback, in the same order as they appear there\r\n\r\n`ShareToStream` is a good example here, in fact; but in general any component that uses `connect` should be a good example. Here's a command to get a survey view:\r\n```\r\n$ rg -C4 dispatch: -- $(rg -l react-redux)\r\n```\r\n(The `rg -l` part there is to skip all the `dispatch: Dispatch` lines that appear in thunk actions, by filtering to files that mention react-redux.)\r\n"", 'comment_created': datetime.datetime(2021, 7, 15, 0, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670051007, 'comment_body': '""Terminated"" is kind of ambiguous -- it can mean the thing got aborted because it wasn\'t working; or it can just mean that the thing ended one way or another, succeed or fail.\r\n\r\nHere, what we mean is that it ended and wasn\'t a success -- this is something we won\'t call in the cases where we call `onShareSuccess`. So ""fail"" is a good word to contrast with ""succeed"".\r\n\r\nHow about `onShareFailure`?\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 1, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670052120, 'comment_body': 'Cool, this is a good way to unpack this object.', 'comment_created': datetime.datetime(2021, 7, 15, 1, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670059993, 'comment_body': ""This case should be impossible, right? It'd be a bug in the app, in fact a bug within the sharing code, if we were to reach this case.\r\n\r\nI think treating it as failure is a fine response in the UI, since that's handy. (It'd also be OK to just throw an exception, if there weren't something more specific to do instead that was handy.) But then the other thing we should do is log an error with `logging.error`, so that we see it in Sentry.\r\n\r\nSeparately, the first thing this case should do is call `ensureUnreachable`. That way Flow will confirm that our types say this case really is impossible.\r\n\r\nHere's an example at the end of `handleOutboundEvents.js`:\r\n```js\r\n    default:\r\n      ensureUnreachable(event);\r\n      logging.error(`WebView event of unknown type: ${event.type}`);\r\n      break;\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 7, 15, 1, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670060726, 'comment_body': 'Oh I see, and we also call this if the user cancels. So ""failure"" is too specific.\r\n\r\n""Cancel"" is a good word, though -- in particular it can cover the case where something failed, and then our code cancelled the send in response to that. So how about `onShareCancelled`?', 'comment_created': datetime.datetime(2021, 7, 15, 1, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670064797, 'comment_body': 'Thanks!\r\n\r\n> on a side note this makes me wonder why notification has its own separate types.js (why not include it in the main types?)\r\n\r\nGood question. Two reasons:\r\n* It\'s generally more helpful to have the code organized primarily by what general subsystem it\'s part of -- like notifications, or sharing, or the server API -- rather than by what kind of code it is, like is it type definitions. For example when you\'re working on notifications, you might be touching a bunch of different notifications-related files; but it\'s less common that you\'d be working on ""types, in general"", and be touching a bunch of different types-related files.\r\n* Having a single global ""types"" file tends to create big import cycles. Those can be bad for a variety of reasons; they tend to make the codebase harder for both tools and people to work with. Here\'s an example we ran into: https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/.23M3745.20Server.20version.20to.20Sentry/near/930319\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 1, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670520322, 'comment_body': 'missed them, dropped now.', 'comment_created': datetime.datetime(2021, 7, 15, 14, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 670520417, 'comment_body': 'done, made a separate commit together with making a `SendTo` type.', 'comment_created': datetime.datetime(2021, 7, 15, 14, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 670520871, 'comment_body': 'will keep this in mind for followup issues.', 'comment_created': datetime.datetime(2021, 7, 15, 14, 33, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 670521582, 'comment_body': 'it is necessary. Fixed in the new revision.', 'comment_created': datetime.datetime(2021, 7, 15, 14, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 670521849, 'comment_body': ""I couldn't notice any change, but couldn't speculate that this could have any potential changes either, (I still struggle with css :sweat_smile:).\r\n\r\nRegardless, I tested this on a tablet as well to see if everything is as it should be and it looked like before.\r\nThe relevant documentation would be https://www.w3.org/TR/css-flexbox-1/#flex-initial\r\nwhich makes me feel that It can be a problem in small screens? I tested it on 480x800 emulator and it looked fine as well, not sure which case it will fail"", 'comment_created': datetime.datetime(2021, 7, 15, 14, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 670840304, 'comment_body': 'Cool. The new revision sets that prop in the new wrapper.\r\n\r\nThat does still make this change not [NFC](https://github.com/zulip/zulip-mobile/blob/master/docs/glossary.md#nfc), because previously it wasn\'t set for `ShareToPm` and now it is. Two ways to fix that:\r\n* The cleanest is to have a small commit first that adds it on `ShareToPm` and says why. Then the main commit can be NFC.\r\n  * In this case (https://github.com/zulip/zulip-mobile/pull/4757#issuecomment-881039196), it\'s OK if the ""why"" doesn\'t involve really investigating how or whether the old code worked -- if the story is ""we want it for the stream case, and it seems fine here"", that\'s enough.\r\n* Alternatively the main commit could drop the ""[nfc]"", and mention this change in the commit message. That wouldn\'t normally meet our standards for highly readable commits, but [in this case](https://github.com/zulip/zulip-mobile/pull/4757#issuecomment-881039196) it\'d be OK.\r\n\r\nI think the cleaner thing is actually pretty quick to do, though, with the right tools. (Much easier than splitting up the bigger changes in this commit into several steps would be.) So I\'d encourage you to try it. I\'d use `git rebase -i`, with something like:\r\n```\r\n$ gitk --all HEAD &  # to see what you\'re doing\r\n$ git rebase -i\r\n  # insert a \'break\' line after this ""Deduplicate code"" commit\r\n  # save and exit; now you\'re mid-rebase, and at this commit\r\n$ git reset --hard @~  # reset to before this commit\r\n  # now edit ShareToPm.js to change that one line; save that\r\n$ git commit -am \'wip add nestedScrollEnabled\'\r\n$ git restore -s @{2} .  # get to the same state as after this commit\r\n$ git commit -aC @{2}  # borrow commit message, and author name+date, from this commit\r\n$ git rebase --continue\r\n```\r\n\r\nThe two references to `@{2}` there are a way of mentioning the ""Deduplicate code"" commit -- `@{0}` is the current HEAD, `@{1}` is what it was before this (before the `git commit`), and `@{2}` is what it was before that (before the `git reset`). Alternatively, you could look at the `gitk --all HEAD` or a `git log` command, and copy-paste the commit ID.\r\n\r\nThen after that:\r\n* refresh in gitk, to check your work;\r\n* use `git rebase -i` and just a `reword` on the new commit, to replace the placeholder message with a proper one.\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 22, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670840838, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2021, 7, 15, 22, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670842846, 'comment_body': ""Cool. (Continues this thread: https://github.com/zulip/zulip-mobile/pull/4757#discussion_r670059993 .)\r\n\r\nWe do actually want the `onShareCancelled` call too, though. In general, because our types aren't guarantees, when we explicitly get into a case that should be impossible, we want to do *something* to bail out of the part of the code that's clearly confused. Throwing an exception is the default solution, but here `onShareCancelled` is handy and would be better.\r\n"", 'comment_created': datetime.datetime(2021, 7, 15, 22, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670843728, 'comment_body': ""Cool, sounds good.\r\n\r\nAs described at https://github.com/zulip/zulip-mobile/pull/4757#issuecomment-881039196 , for this particular refactor, if this sort of thing seems to work in the new version, then that's good enough. If we find some issue in the layout later, we can fix it then."", 'comment_created': datetime.datetime(2021, 7, 15, 22, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670854664, 'comment_body': 'Cool.\r\n\r\n> I couldn\'t find what `OpenableColumn` refers to precisely as well, the [docs](https://developer.android.com/reference/android/provider/OpenableColumns) describe them as columns for ""openable uris"" but I don\'t really understand what that refers to.\r\n\r\nHmm, yeah.\r\n\r\nIt does have a link to this bit of docs:\r\nhttps://developer.android.com/reference/android/content/Intent#CATEGORY_OPENABLE\r\n\r\nI think that contains an implicit answer to the question of what an ""openable URI"" is supposed to mean:\r\n\r\n> Used to indicate that an intent only wants URIs that can be opened with `ContentResolver#openFileDescriptor(Uri, String)`. Openable URIs must support at least the columns defined in OpenableColumns when queried.\r\n\r\nIt sounds like ""openable"" here means ""can be opened with that openFileDescriptor method"".\r\n\r\nAnd then following the link to [that method\'s doc](https://developer.android.com/reference/android/content/ContentResolver#openFileDescriptor(android.net.Uri,%20java.lang.String)), it accepts the two URL schemes `content:` and `file:`. So I guess only URLs with those two schemes can be ""openable"". And... also not `content:` URLs where the underlying content provider will return only a part of a file, instead of a whole file.\r\n\r\nAh, but also, following the link from *there* to [`ContentProvider#openFile`](https://developer.android.com/reference/android/content/ContentProvider#openFile(android.net.Uri,%20java.lang.String)):\r\n> For better interoperability with other applications, it is recommended that for any URIs that can be opened, you also support queries on them containing at least the columns specified by OpenableColumns. You may also want to support other common columns if you have additional meta-data to supply, such as MediaStore.MediaColumns.DATE_ADDED in MediaStore.MediaColumns.\r\n\r\nSo that\'s something directly about `OpenableColumns` again. That one only ""recommends"" providers support them. So maybe a way to interpret the OpenableColumns doc:\r\n> Providers that serve openable URIs must support at least these columns when queried.\r\n\r\nis... an ""openable URI"" is one for which the provider supports at least these columns :stuck_out_tongue: \r\n\r\n---\r\n\r\nAh, and in fact the values of these constants are documented -- and `OpenableColumns.DISPLAY_NAME` and `MediaStore.MediaColumns.DISPLAY_NAME` are documented to have the same value, namely `_display_name`.\r\n\r\nSo both expressions are equivalent.\r\n\r\nBut `OpenableColumns` is the name used in the upstream docs for this, so it\'s good to match that.\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 22, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670855882, 'comment_body': 'Cool, yeah, that single commit worked well because just a handful of lines in the moved code had to change.\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 22, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670856820, 'comment_body': '```suggestion\r\n    }?: ""unknown."" + (contentResolver.getType(uri)?.split(\'/\')?.last() ?: ""bin"")\r\n```\r\n\r\nOtherwise this would turn `image/jpeg` into `unknownjpeg`, right?\r\n', 'comment_created': datetime.datetime(2021, 7, 15, 22, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670876003, 'comment_body': ""Yeah, thanks for catching that.\r\n\r\nIn the current revision, it looks like there are two `await`s in `handleSend`. You have a try/catch around the one for `api.sendMessage`, so I think that one is taken care of. It'd be good to add another try/catch around the `await` line that does `api.uploadFile`, too.\r\n"", 'comment_created': datetime.datetime(2021, 7, 15, 23, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '07b1cb192be07c9bc2c165bc00d60545aef1d865', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f57879adb8bc2c42eb810c947bab112f650af4e', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fabeb9ccd19d5d3f7018cc6ad24aaadc5798a777', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '009ed9f8e590698a9bcac8a72f220233a648d5c7', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b8a8668258a781fc97aae2b709e39c55f3bf602', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59d65c3897ea72c5bc8974002126281a7427c3f9', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce48ef5065a2f646cb39688da0d9ed80649ebefc', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b42a5dedfbddc1267db7e53b9677aade2fb324', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b1dd9e7478e7b09316ef17f13e1f1565147e2fd', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b078c19f4ae9eee65aab3de7c978583a3ac50da', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f3b667f0e314f714346c1cfc1c56097e25d858c', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
692795863,[android] Multiple share to zulip / share to Zulip from other apps [part 3],"This PR makes changes to enable users to share multiple files.
Followup for https://github.com/zulip/zulip-mobile/pull/4757",True,4905,https://api.github.com/repos/zulip/zulip-mobile/pulls/4905,https://github.com/zulip/zulip-mobile/pull/4905,closed,123,83,10,7,4,18,1,0,[{'name': 'a-share-to'}],2021-07-19 17:33:33+00:00,2021-07-20 23:00:34+00:00,106021.0,"1 day, 5:27:01","[{'comment_id': 672509368, 'comment_body': ""```suggestion\r\n      {item.mimeType.startsWith('image/') ? (\r\n```\r\n\r\nIncluding the delimiter means it doesn't accidentally match some other word that happens to start with the same letters.\r\n\r\n(Which isn't super likely in this case, but is good in general so as not to have to think about the possibility.)\r\n"", 'comment_created': datetime.datetime(2021, 7, 19, 17, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672510756, 'comment_body': 'I like this prep commit simplifying this code!\r\n', 'comment_created': datetime.datetime(2021, 7, 19, 17, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672525269, 'comment_body': ""This is a very general name, and it's here in the global `types.js` so it has a very general scope. But the real meaning isn't so general -- this is really specific to having a file shared with us (and for that matter specific to Android's API for that; I'm not sure what it looks like on iOS, and we'll figure that out when we add the feature there.)\r\n\r\n`SharedFile` would be a good name, except that it's taken (and even at the tip of the branch, it'd be confusing to have it look so parallel to `SharedText` when it isn't.)\r\n\r\nI may try doing a quick refactor of these types and pushing that to the PR branch."", 'comment_created': datetime.datetime(2021, 7, 19, 18, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672526450, 'comment_body': '```suggestion\r\n        Intent.ACTION_SEND, Intent.ACTION_SEND_MULTIPLE ->\r\n            handleSend(intent, application, contentResolver)\r\n```\r\n\r\nThis makes it a bit clearer that these bodies are indeed the same.', 'comment_created': datetime.datetime(2021, 7, 19, 18, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672527801, 'comment_body': 'The cases we handle should continue to return true, as the doc comment says we will.', 'comment_created': datetime.datetime(2021, 7, 19, 18, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672528920, 'comment_body': ""... Oh I see, it does that below.\r\n\r\nThat's confusing -- at least, evidently I was confused :wink:. Better to pair the handling of the intent with the returning of true to say we did so.\r\n"", 'comment_created': datetime.datetime(2021, 7, 19, 18, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672530449, 'comment_body': 'Let\'s make this message different from the other line above -- it\'s easy, and gives us a better chance of working out what\'s happening if we start spotting these in Sentry.\r\n\r\nSaying ""URLs"", plural, would be enough.', 'comment_created': datetime.datetime(2021, 7, 19, 18, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672531078, 'comment_body': 'Could tighten a bit by inlining `file` here -- the resulting line is only slightly longer.', 'comment_created': datetime.datetime(2021, 7, 19, 18, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672537142, 'comment_body': ""Horizontal sounds good here. Does it scroll if the previews don't fit in the width of the screen?"", 'comment_created': datetime.datetime(2021, 7, 19, 18, 35, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672538493, 'comment_body': 'Buttons should be at least size 24. (Do we have this in, or linked from, our style guide somewhere? If not, we should.)', 'comment_created': datetime.datetime(2021, 7, 19, 18, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672540860, 'comment_body': 'This should get merged into a `setState` call with a callback:\r\nhttps://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 19, 18, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672543154, 'comment_body': ""And then I guess this needs to go inside that `setState` callback too.\r\n\r\nThe length check should then also check that the old length was nonzero -- so if these get repeated for some reason, we only do the cancel once.\r\n\r\nAnd the `showToast` and `onShareCancelled` should probably get put inside a `setTimeout` -- so they don't happen synchronously inside the state update. Maybe that'd be fine, but it feels like the sort of thing that might be glitchy.\r\n"", 'comment_created': datetime.datetime(2021, 7, 19, 18, 44, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 672559175, 'comment_body': '(done -- see below in main thread)', 'comment_created': datetime.datetime(2021, 7, 19, 19, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 673176239, 'comment_body': 'Yes.\r\n\r\nI just tested this, by temporarily setting the image width > my screen width, since images have fixed size of 200 x 200 which is smaller than most practical device widths; observation was that single image scrolls if its width exceeds screen width.', 'comment_created': datetime.datetime(2021, 7, 20, 14, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 673177064, 'comment_body': ""changed overlaySize and `IconCancel`'s size to 24.\r\n\r\nI couldn't find a style guide that said 24, and referred to the size from similar code in `AvatarItem` which is 20. Should that be changed as well?"", 'comment_created': datetime.datetime(2021, 7, 20, 14, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 673527247, 'comment_body': ""Great. What if you have several images, so that each one fits but combined they don't?\r\n"", 'comment_created': datetime.datetime(2021, 7, 20, 22, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 673528832, 'comment_body': 'Then the flatlist scrolls horizontally', 'comment_created': datetime.datetime(2021, 7, 20, 22, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 673535294, 'comment_body': 'Hmm, good question.\r\n\r\nSo, actually the most important aspect of this is that the *touch target* should be at least 48px, to make it accessible for people to accurately hit:\r\nhttps://material.io/design/usability/accessibility.html#layout-and-typography\r\n(I just went and looked that up, and it reminded me that the needed touch-target size is that big.)\r\n\r\nLooking at `AvatarItem`, the whole avatar is the touch target, and it\'s 50px across. (You can see this in the ""Group PM"" / ""New group PM"" screen: select some users, then touch anywhere on their avatar to remove them.) So we\'re covered there. That also means that the icon isn\'t really functioning as a button: it\'s more like a label on the whole avatar as a button, indicating what touching it will do.\r\n\r\nHere, I think making the whole 200px preview a touch target for removing it would be counterintuitive. But perhaps we can make a whole 48px square in the corner around the ""cancel"" icon be the touch target?\r\n', 'comment_created': datetime.datetime(2021, 7, 20, 22, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '9017b4cf5067a825f77843df6dfec4506936e72d', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f980074bb1653fc674f8b558eb80481afadce6b6', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79b1f3d17cf005c774beb3dfadfcd0f51247f20c', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ec801f9f35a8757dbd001bf63732ac43373279b', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1b942b530fd466b590b312bee06ea7404cddd61', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb5ee493e5f23b2534f1748d7a1030e844459d94', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec7c09b6c80eee84a97331534e64c680490620bf', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
608379069,Update the behavior of attach file functionality.,"## Previous functionality:
- On pressing attach file from compose menu, attachment was directly
  dispatched to outbox, they should go through compose box so that a user
  may add more text if desired.
- Users could only attach single files using the attach file option.
    
This commit modifies `handleFilesPicker` (previously `handleFilePicker`) to
support picking multiple files. After picking multiple files the
corresponding data is passed to `insertAttachment` method of `ComposeBox`
where the content is uploaded one by one and the `ComposeBox` is updated
accordingly.
Note that dispatch to `uploadFile` no longer takes place now.

Fixes-part-of: #4540
Fixes-part-of: #2366

## Demonstration of Changes:
### Simple Attachment:
![attachment-simple](https://user-images.githubusercontent.com/40268170/113477918-15b9a480-94a3-11eb-9234-e3fa935a82a4.gif)
### Attachment in between text:
![attachment-between-text](https://user-images.githubusercontent.com/40268170/113477921-1c481c00-94a3-11eb-9471-17e43c166def.gif)
### Attachment without Internet:
![attachment-without-internet](https://user-images.githubusercontent.com/40268170/113477924-236f2a00-94a3-11eb-99a1-fbc7118d60b4.gif)


## Caveats / Not addressed in this PR:
- if a user selects the file to attach (from file selection screen)  by pressing file preview instead of the footer (section of the file that contains name, size time etc) the file is immediately sent to zulip. User needs to tap and hold the file preview in order to select multiple files, or alternatively they can just tap the footer as seen in the first gif of this comment (see above).
**simple press**
![simple-press](https://user-images.githubusercontent.com/40268170/113478160-b2307680-94a4-11eb-995f-0ece0f1c0b79.gif)
**press and hold**
![press-and-hold](https://user-images.githubusercontent.com/40268170/113478165-b52b6700-94a4-11eb-8e2d-dab202eefb54.gif)
- ~The error text in toast when upload fails, is not translated.~
- Loader that depicts that file is being uploaded, is not implemented.",True,4590,https://api.github.com/repos/zulip/zulip-mobile/pulls/4590,https://github.com/zulip/zulip-mobile/pull/4590,closed,68,11,5,5,7,43,0,0,[],2021-04-03 12:28:13+00:00,2021-07-01 00:34:17+00:00,7646764.0,"88 days, 12:06:04","[{'comment_id': 609274752, 'comment_body': ':+1: I agree this is better here than the ""document"" icon -- good thought.\r\n', 'comment_created': datetime.datetime(2021, 4, 8, 4, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609275180, 'comment_body': ""nit: leave the blank line here -- it's there intentionally, to separate the doc comment from the thing above it. That helps keep the comment visually attached to the thing it's about, which comes just after it.\r\n"", 'comment_created': datetime.datetime(2021, 4, 8, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609275565, 'comment_body': 'Abbreviations like ""beg"" can be confusing and we use them sparingly. A good name for this would be ""start"".\r\n', 'comment_created': datetime.datetime(2021, 4, 8, 4, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609276499, 'comment_body': ""Hmm, this doesn't seem quite right -- it means that if for whatever reason when this `setState` callback gets run, the value of `isUploading` is already true, it'll get set to *false*.\r\n\r\nProbably closer to what you want would just be: `this.setState({ isUploading: true })`. That is, we definitely want to be making the value more true here, and never less true.\r\n"", 'comment_created': datetime.datetime(2021, 4, 8, 4, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609278632, 'comment_body': ""But then the counterpart to just setting to `true` above would be to just set to `false` here. And that isn't quite right either -- if the first upload is taking a while, the user could potentially start a second one at the same time, and the second could even finish before the first one.\r\n\r\n(The `!isUploading` version doesn't correctly handle that case either: it'll set it to false when the second upload starts.)\r\n\r\nI think a version that works correctly would be: instead of a boolean, have a `num` as a counter. At the start of the function, do:\r\n```js\r\nthis.setState(({ numUploading }) => ({ numUploading: numUploading + 1 }));\r\n```\r\n\r\nAt the end of the function, do the reverse:\r\n```js\r\nthis.setState(({ numUploading }) => ({ numUploading: numUploading - 1 }));\r\n```\r\n\r\nAnd then at render time when we want to know if we're currently uploading, check whether `numUploading > 0`.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 4, 8, 4, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609284541, 'comment_body': 'Some time may pass while we\'re at this `await`, and the user might make some edits in the input box. It looks like if they add or remove text before the start of what we inserted, the effect will be that we replace the wrong range of text, because `beg` and `end` no longer point to where it is. That\'ll likely leave the markup somewhat garbled, and it may also overwrite what they\'ve typed.\r\n\r\nI think with the native APIs it would be possible to attach something like a ""span"" to the relevant chunk of text, so that we can refer back to it even after the user has made edits that change its offset. But it looks like RN doesn\'t expose that functionality.\r\n\r\nAn alternative solution would be to look for the placeholder string we inserted -- i.e. `[Uploading ${fileName}...]()` -- and just replace that at the (first) place we find it. Hmm, and if we don\'t find it (because e.g. the user edited in the middle of it), then I guess insert it at the end. That seems like it\'d be pretty robust.\r\n', 'comment_created': datetime.datetime(2021, 4, 8, 4, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609288950, 'comment_body': 'I think the overall sequence of what this code does, if there are several files to upload/attach, is going to be:\r\n* We insert the first placeholder, and start uploading.\r\n* Eventually the upload finishes. We edit that placeholder, insert the next one, and start uploading.\r\n* Etc., until we edit the final placeholder.\r\n\r\nAnd I guess that agrees with what I see in your helpful screencaps.\r\n\r\nThat seems like not quite the ideal sequence -- having the placeholders come in one by one may feel kind of glitchy.\r\n\r\nI think a better sequence would be:\r\n* We insert all the placeholders immediately. We start uploading the first file.\r\n* Eventually the upload finishes. We edit that placeholder, and start uploading the next file.\r\n* Etc., until we edit the final placeholder.\r\n\r\n(I think this code already makes exactly the right choice in that it only attempts one upload at a time. Uploads are probably often big files, and we may often be on a slow network connection -- no sense hammering it with a lot of uploads at once.)\r\n', 'comment_created': datetime.datetime(2021, 4, 8, 4, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609291186, 'comment_body': 'We\'ll want the string being translated to be a constant string, with a placeholder in it for the filename. See [docs/howto/translations.md](https://github.com/zulip/zulip-mobile/blob/8430b6da8/docs/howto/translations.md), and search for ""interpolating"".\r\n\r\nWe\'ll also want to add the string to `static/translations/messages_en.json`; from there after the change is merged we\'ll sync it over to Transifex so that contributors there can translate it. See the next few paragraphs in the same doc.\r\n', 'comment_created': datetime.datetime(2021, 4, 8, 4, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609291658, 'comment_body': ""We'll also want this to be translated. See previous comment for link to our docs on how."", 'comment_created': datetime.datetime(2021, 4, 8, 4, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609293380, 'comment_body': ""> `[DocumentPickerResponse]`\r\n\r\nThis doesn't mean what you think it does :smile: -- the syntax you want is `DocumentPickerResponse[]`.\r\n\r\n(Or `$ReadOnlyArray<DocumentPickerResponse>` -- you'll see that one a lot in our code, and it's usually more exactly what we mean, but I think here the difference doesn't matter at all so we may as well do the version with the nice `[]` syntax.)\r\n\r\nThe syntax `[foo]` in Flow means an array of length 1, where the element has type `foo`. The feature is more interesting when there are several elements -- you can specify different types for each one. See docs:\r\nhttps://flow.org/en/docs/types/tuples/\r\n\r\nFor array types, including `$ReadOnlyArray`, see docs here:\r\nhttps://flow.org/en/docs/types/arrays/\r\n"", 'comment_created': datetime.datetime(2021, 4, 8, 4, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 609294549, 'comment_body': ""... Hmm, and I see that perhaps the root cause of this is that our libdef for this `react-native-document-picker` library -- where we wrote down what the types are in its interface -- has it wrong in the same way! That's the file `flow-typed/react-native-document-picker_v3.x.x.js`.\r\n\r\nGo ahead and include a small prep commit where you fix that file :wink: "", 'comment_created': datetime.datetime(2021, 4, 8, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622596845, 'comment_body': 'fixed.', 'comment_created': datetime.datetime(2021, 4, 28, 22, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622596880, 'comment_body': 'there is no need for this now, in this PR, as I have removed this function in newer implementation, I will keep this in mind though for future contributions.', 'comment_created': datetime.datetime(2021, 4, 28, 22, 4, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622596978, 'comment_body': 'fixed. using `numUploading` now.', 'comment_created': datetime.datetime(2021, 4, 28, 22, 4, 27, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622597050, 'comment_body': 'did the necessary changes.', 'comment_created': datetime.datetime(2021, 4, 28, 22, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622597111, 'comment_body': 'yeah this seems much better, I am doing the find and replace implementation you suggested, I also checked out what RN provides just in case and they don\'t expose the ""span"" functionality just as you mentioned, I believe these were the right documentation to look at: https://reactnative.dev/docs/textinput', 'comment_created': datetime.datetime(2021, 4, 28, 22, 4, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622597315, 'comment_body': ""So now I am doing it as you suggested (with a simple addition on failure):\r\n- inserting all placeholders immediately.\r\n- Search placeholders one by one and replace them with `linkText`.\r\n- If any search fails, append the text at the very end of the message.\r\n- If upload itself fails I am now replacing the placeholder with `[Uploading ${fileName} failed.]()`.\r\n\r\nThe last point is important to note since it differs from the web app and the previous implementation. I took this decision based on the fact that replacing it with nothing won't be an ideal choice, since it would be very easy to miss out that some uploads have failed (even with a toast message). a permanent replacement with `[Uploading ${fileName} failed.]()`. would be able to indicate a user (or the recipients) that there was more to send but it failed."", 'comment_created': datetime.datetime(2021, 4, 28, 22, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622597382, 'comment_body': ""Just a concern regarding this, [docs/howto/translations.md](https://github.com/zulip/zulip-mobile/blob/8430b6da8/docs/howto/translations.md) says -\r\n> Translators will translate the constant string 'Hello, {name}', including the placeholder.\r\n\r\ndoes that mean we also converts the filename variable to another language and if so shouldn't that remain preserved since it indicates the name of the file in user's device?"", 'comment_created': datetime.datetime(2021, 4, 28, 22, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622597483, 'comment_body': 'same concern as [above](https://github.com/zulip/zulip-mobile/pull/4590#discussion_r622597382)', 'comment_created': datetime.datetime(2021, 4, 28, 22, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622597720, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 4, 28, 22, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622602182, 'comment_body': ""this counts as a string concatenation which is denied in [/docs/howto/translations.md](https://github.com/zulip/zulip-mobile/blob/8430b6da8/docs/howto/translations.md)\r\n\r\n> Never try to concatenate translated strings together, or do other string manipulation on them.\r\n\r\nis this reasonable code? I kept it here since it only involves concatenation with newlines, which shouldn't create a problem according to me."", 'comment_created': datetime.datetime(2021, 4, 28, 22, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 622747362, 'comment_body': 'Ah, good question -- that explanation was ambiguous. Does this answer the question?\r\nbe39f564a', 'comment_created': datetime.datetime(2021, 4, 29, 5, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622753821, 'comment_body': ""Yep, I think that's right!"", 'comment_created': datetime.datetime(2021, 4, 29, 5, 59, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622755785, 'comment_body': ""Thanks for asking. Yeah, this is fine as far as that's concerned -- what that's really meant to be about is attempting to put together a sentence with translated text, because the structure of the sentence will be different in different languages. I guess I should try to clarify that bit in the doc.\r\n"", 'comment_created': datetime.datetime(2021, 4, 29, 6, 4, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622757147, 'comment_body': ""Instead of computing this a second time, how about having an array `placeholders`, so that here we can just say `placeholders[i]`?\r\n\r\nThen we can still concatenate them for the `insertMessageTextAtCursorPosition` call, say with `placeholders.join('\\n\\n')`.\r\n\r\nThe main advantage of computing them just once is that when we're doing it twice, it makes me worry a bit about whether they'll definitely come out the same both times. I'm pretty sure they always do with the code in this PR, but it's the sort of thing where it'd be very easy for them for a future change to the code to accidentally get them out of sync -- so, better to write the code so that structurally it makes sure they're the same.\r\n"", 'comment_created': datetime.datetime(2021, 4, 29, 6, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622765333, 'comment_body': ""Let's make this try/catch be tightly scoped around just the `await api.uploadFile` line. That way the error handling in the `catch` block gets to be focused on a very specific way things can fail, which is the API call.\r\n\r\nThe fundamental difference between an exception from the API call and an exception from any of the rest of this code is that an exception from any of the rest would represent a bug in our code. But with an API call it's part of its interface that it might throw an exception for reasons that aren't a bug in anything, just the way the network is at that moment. Generally when throwing an exception is a normal part of the interface of something, we want to handle it explicitly right there, but for exceptions that would represent a bug we want to let them propagate up to very general handlers at the outer layers of the app.\r\n\r\nOne way in particular that having this larger `try` block would be bad, if a situation ever arises where it makes a difference, is that it would mean we had a bug somewhere in the code that's trying to replace the placeholder with the link text -- and we'd be suppressing the error here, so that we didn't get a report of it in Sentry to help us find and fix it.\r\n"", 'comment_created': datetime.datetime(2021, 4, 29, 6, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622767651, 'comment_body': ""That reasoning makes sense to me!\r\n\r\nIf the webapp's behavior is that when the upload fails, you just have the `[Uploading ${fileName}...]()` placeholder stick around indefinitely, then I think this `[Uploading ${fileName} failed.]()` behavior would be an improvement there, too. Perhaps mention it in #frontend on chat.zulip.org?\r\n"", 'comment_created': datetime.datetime(2021, 4, 29, 6, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622771187, 'comment_body': 'Oh, in the commit message:\r\n\r\n    ComposeMenu: Refactor `IconFile` to `IconAttach`.\r\n\r\nlet\'s use a different verb instead of ""refactor"" -- like ""Replace `IconFile` with `IconAttach`.""\r\n\r\n(Or perhaps better yet: ""Use `IconAttach` instead of `IconFile`."" I like having the summary line say first what the new code is doing, in preference to what the old code did -- usually that\'s the more important thing to know when going back through the history.)\r\n\r\nThe reason is that ""refactor"" to me means a change that\'s mainly about how the code is, rather than how it behaves to the user -- the paradigmatic case is a change that gives the code some very different structure, while having no visible effect at all on how the code behaves for the user. Whereas the point of this change is 100% about what the user sees.\r\n', 'comment_created': datetime.datetime(2021, 4, 29, 6, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622771651, 'comment_body': ""It looks like this commit is deleting the one place we use `IconFile`. Which makes sense -- this is really the one spot I can think of where it could make sense to use.\r\n\r\nSo let's delete `IconFile` too, in the same commit.\r\n"", 'comment_created': datetime.datetime(2021, 4, 29, 6, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622797837, 'comment_body': '4bb2a4a78', 'comment_created': datetime.datetime(2021, 4, 29, 7, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622801299, 'comment_body': ""Oh, but a different translation-related remark:\r\n\r\nLet's have the translated string here be just `Uploading {fileName}...`, and interpolate the result inside the `[${â€¦}]()` markup syntax.\r\n\r\nThat way what the translators have to deal with is simpler -- no extra markup on the outside, which we'd be counting on them to keep verbatim and we don't have a great way to make that clear to them.\r\n\r\nAnd on the other hand that's perfectly fine from the perspective of the question in the https://github.com/zulip/zulip-mobile/pull/4590/files#r622602182 thread, because the extra stuff we're adding is purely syntax from the markup language, not anything that's part of English or the user's natural language.\r\n\r\n(Conversely, we do want to keep the `...` inside the translated string, because that's punctuation and it might be expressed differently in another language.)\r\n"", 'comment_created': datetime.datetime(2021, 4, 29, 7, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 622801871, 'comment_body': 'Perhaps a newline instead of a space? That seems like probably a cleaner result.', 'comment_created': datetime.datetime(2021, 4, 29, 7, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 623363352, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 4, 29, 20, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 623363395, 'comment_body': 'Sure, did these changes.', 'comment_created': datetime.datetime(2021, 4, 29, 20, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 623363435, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 4, 29, 20, 6, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 623363478, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2021, 4, 29, 20, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 623363656, 'comment_body': 'I see, I was wondering why this specific code pattern --\r\n```javascript\r\ntry {\r\n  mayThrowError()\r\n} catch (e) {\r\n  // handle error\r\n  return;\r\n}\r\n// handle success\r\n```\r\n-- was present at some places, instead of just handling success inside the try block after `mayThrowError`. Infact I changed this in https://github.com/zulip/zulip-mobile/commit/e6bcb0e8905cf02712d62f1ae40079b467b459ca (in #4514) thinking it was not necessary, which you also addressed in https://github.com/zulip/zulip-mobile/pull/4514#discussion_r620897833. This makes sense.', 'comment_created': datetime.datetime(2021, 4, 29, 20, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 623363729, 'comment_body': 'made array of `placeholders` as well as `fileNames`. I also accidentally got the ""replacement fileName"" (`attachment ${i+1}`) out of sync in this very commit :sweat_smile: (you can see it in the code highlighted here) so this makes it a lot more relevant.\r\nbtw I fixed that as well and added a corresponding translation string for it.', 'comment_created': datetime.datetime(2021, 4, 29, 20, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 636405504, 'comment_body': ""Ha, indeed! And I didn't notice that either :grin: So that's a nice live demonstration of the point."", 'comment_created': datetime.datetime(2021, 5, 20, 19, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636411234, 'comment_body': ""The new `return` in that `catch` block above causes me to notice a pitfall here: if anything in the function above this point exits the function early, this `numUploading` decrement won't run and we'll keep thinking there's an ongoing upload forever (until the user navigates out of the narrow so that this component gets discarded.)\r\n\r\nIn particular that will happen if the new `return` fires, but also in the previous revision it could happen if for some reason something inside that `catch` block (like the `this.setMessageInputValue` call, for example) were to throw an exception. (At the end of the branch, there's no longer the `return` but there's even more code in the function, so there are more opportunities for something to throw an exception.)\r\n\r\nThe way to fix this, in a way where it's easy to tell by looking at the code that it's definitely taken care of, is to put this decrement in a `finally` block. So the function might look like this:\r\n```js\r\n  insertAttachment = async (attachments: DocumentPickerResponse[]) => {\r\n    this.setState(({ numUploading }) => ({\r\n      numUploading: numUploading + 1,\r\n    }));\r\n    try {\r\n      // â€¦\r\n    } finally {\r\n      this.setState(({ numUploading }) => ({\r\n        numUploading: numUploading - 1,\r\n      }));\r\n    }\r\n  };\r\n```\r\n\r\nIt's a bit annoying because it causes the whole rest of the function to be indented -- really the ideal pattern here would be [RAII](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization), like in C++ or Rust. But this is probably the best approximation to that that we have in JS.\r\n"", 'comment_created': datetime.datetime(2021, 5, 20, 19, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636413444, 'comment_body': 'tiny nits:\r\n* no blank line here -- that way these are visually joined to the loop that builds them\r\n* swap the order of these declarations, to match the order they get added to in in the loop\r\n', 'comment_created': datetime.datetime(2021, 5, 20, 19, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636414418, 'comment_body': 'nit: this has the structure `` `${/* â€¦ some expression â€¦ */}` ``, right? Simpler to drop the backticks and the `${` / `}`, then.', 'comment_created': datetime.datetime(2021, 5, 20, 19, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636481798, 'comment_body': ""Yep, exactly.\r\n\r\nI've also now gone and expanded this to an entry in our style guide: d99ad3ad2"", 'comment_created': datetime.datetime(2021, 5, 20, 21, 28, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': 'b785c6852c9da50a9dcda07b1b139f522897429d', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b29150d174b90591c298faaf1877a9e610d32f', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cfe98ed8df0a28a367506321d0db353091b9ac4', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e202c27b084a394ef4ac5bd064640209ac7e7dba', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d888e54ca33146025b6badfccd7a96a92038029', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
612800742,Add mark as read option in TopicActionSheet and Modify TopicActionSheet to use `stream_id`.,"## Work Done:
- Renamed `HeaderActionSheet` to `TopicActionSheet`
- Added **mark as read** option in the `TopicActionSheet`
- Wrote test cases to ensure it's visible only when the topic is not actually read.
- Modified `TopicActionSheet` code to use stream_id instead of stream names, refactored test cases and function calls to `showTopicActionSheet` accordingly.

This PR is an alternative to #4194 for marking topics as read.

For more context: https://chat.zulip.org/#narrow/stream/48-mobile/topic/mark.20as.20read

![mark-as-read](https://user-images.githubusercontent.com/40268170/114252790-aa9d3000-99c4-11eb-8e1c-20512e5dfb98.gif)


Related: #3918
Related: #3175
Fixes: #3244

",True,4635,https://api.github.com/repos/zulip/zulip-mobile/pulls/4635,https://github.com/zulip/zulip-mobile/pull/4635,closed,192,97,12,11,8,54,0,0,[],2021-04-10 00:51:04+00:00,2021-07-02 05:56:09+00:00,7189505.0,"83 days, 5:05:05","[{'comment_id': 610998187, 'comment_body': ""Either `if (unreadCount) {` or `if (unreadCount && unreadCount > 0) {` should work here. I'd go with the second, even though it's redundant (well, unless we have a negative number of unreads, in which case we have a second problem...), just since it reads more clearly to me."", 'comment_created': datetime.datetime(2021, 4, 10, 5, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 610998251, 'comment_body': 'You should add the tests in the same commit that you add the code in, in general.', 'comment_created': datetime.datetime(2021, 4, 10, 5, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 610998440, 'comment_body': ""I don't think there's a reason to include this stream in `unreadStreams`, or even to override `unreadStreams` at all, since this test doesn't look at it."", 'comment_created': datetime.datetime(2021, 4, 10, 5, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 610998643, 'comment_body': ""This shouldn't be optional, we should throw an error before we construct this if there's no stream ID."", 'comment_created': datetime.datetime(2021, 4, 10, 5, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 610998724, 'comment_body': ""Instead of adding this code, just change `api.unmuteTopic` and `api.muteTopic` to take a stream ID. I'd do that in the commit before this one."", 'comment_created': datetime.datetime(2021, 4, 10, 5, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 610998936, 'comment_body': ""It should be fairly simple to rewrite `deleteMessagesForTopic` to take a stream ID â€” do that instead of finding the stream name here. Again, I'd do that in a commit before this one."", 'comment_created': datetime.datetime(2021, 4, 10, 5, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 610999795, 'comment_body': ""This should also not be optional. I suspect it may be simpler to keep this taking a `stream: string` for now, so that we can centralize the error handling (since currently, both of the callers get the stream id by searching the subscriptions), but I don't have a strong feeling on that."", 'comment_created': datetime.datetime(2021, 4, 10, 5, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 626838227, 'comment_body': ""On doing this, flow gives me 2 error.\r\n> Avoid using \\`&&\\` to check the value of  number [1]. Consider handling falsy values (0 and NaN) by using a conditional to choose an explicit default instead.\r\n\r\n> Sketchy null check on  number [1] which is potentially 0. Perhaps you meant to check for  null or undefined [2]?\r\n\r\nYour condition checks if `unreadCount` gives a truthy value which is a bad idea for number data type since 0 results in a falsy value (hence we have this rule set in our `.flowconfig`).\r\nI understand that it won't affect this condition but this is a special case, hence, to avoid the error essentially, I am checking for `undefined` explicitly."", 'comment_created': datetime.datetime(2021, 5, 5, 19, 25, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 626838286, 'comment_body': 'Sure, squashed into previous commit in the new revision.', 'comment_created': datetime.datetime(2021, 5, 5, 19, 25, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 626838336, 'comment_body': ""I kept it here to make sure that having any random topic in `unreadStream` doesn't affect the `markTopicAsRead` button to the actionsheet for another topic (this isn't true in the current scenario but may be true for a possible future bad implementation.)\r\nI haven't removed it in the new revision, give me another cue if you think that this is unnecessary and I will remove it."", 'comment_created': datetime.datetime(2021, 5, 5, 19, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 626838444, 'comment_body': 'I have added a try catch block before `showTopicActionSheet` in the new revision and made `stream_id` required.\r\nIn case try fails I am also displaying a toast with a generic ""Something went wrong"". I can\'t figure out a message concise enough to display here so that the user gets an idea what went wrong so I went with that for now, if you have any suggestions let me know.\r\n', 'comment_created': datetime.datetime(2021, 5, 5, 19, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 626838504, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 5, 5, 19, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 626838558, 'comment_body': 'yes, did the necessary changes.', 'comment_created': datetime.datetime(2021, 5, 5, 19, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 626838748, 'comment_body': ""using `streamId` does cause me to repeat the error handling code at the calling site. But If we use `stream` we would have a mixture of two types of ActionSheet (one wanting stream and one wanting streamId) since there are many places where I can easily use `StreamId` (without searching). If we don't do this mixup we would be promoting the use of `stream` where we could easily have used `streamId` which may make using `showTopicActionSheet` difficult in some new places or it may make the refactor we would eventually do, difficult.\r\n\r\nThis is not a very convincing argument by me but I am still using `streamId`."", 'comment_created': datetime.datetime(2021, 5, 5, 19, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 628488095, 'comment_body': ""I'd do this inline, rather than making a variable."", 'comment_created': datetime.datetime(2021, 5, 7, 20, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 628496455, 'comment_body': ""Ah, I see. I'd personally go with `if (!!unreadCount && unreadCount > 0) {`, but it doesn't really matter, since I don't think that `unreadCount` can be `null`. Seems fine as-is."", 'comment_created': datetime.datetime(2021, 5, 7, 20, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 628500708, 'comment_body': ""I don't think there's a reason to use `try`/`catch` here, we can just do:\r\n\r\n```\r\nif (!sub) {\r\n  logging.error('Stream id does not exist.');\r\n  return;\r\n}\r\n```\r\n\r\ninstead."", 'comment_created': datetime.datetime(2021, 5, 7, 20, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 628502694, 'comment_body': 'Same comment as above re: `try`/`catch`', 'comment_created': datetime.datetime(2021, 5, 7, 20, 37, 9, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 628506211, 'comment_body': ""Personally, I'd opt to just not show an error here â€” I don't think there's anything useful the user can do about this condition (which I think we expect to never happen), and just not showing the actionsheet seems better than popping up a cryptic error."", 'comment_created': datetime.datetime(2021, 5, 7, 20, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 628506750, 'comment_body': 'Same comment here as above.', 'comment_created': datetime.datetime(2021, 5, 7, 20, 42, 42, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 631482482, 'comment_body': 'nit: `subscriptions` not needed here', 'comment_created': datetime.datetime(2021, 5, 13, 0, 15, 6, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 631484786, 'comment_body': ""```\r\napi [nfc]: Update setTopicMute to use stream_id.\r\nThis commit also involves appropriate changes to the code calling\r\n`setTopicMute`.\r\n\r\nFixes: #3244\r\n```\r\n\r\nGlad that this fixes #3244! ðŸ™‚ Let's include that in the PR description as a hint for GitHub to fill in the metadata.\r\n\r\nI'm not sure offhand if this implies that #3918 is fixed...I've just posted about that at https://github.com/zulip/zulip-mobile/issues/3918#issuecomment-840219930. ðŸ™‚ "", 'comment_created': datetime.datetime(2021, 5, 13, 0, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 631492488, 'comment_body': 'Also posted a point at https://github.com/zulip/zulip-mobile/issues/3244#issuecomment-840200325 that may need some separate work / thinking to resolve.', 'comment_created': datetime.datetime(2021, 5, 13, 0, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 631495601, 'comment_body': ""Is the added `if (sub)` conditional a functional change? If so, let's be sure it's a change that we want, describe it in the commit message, and un-mark the commit as NFC.\r\n\r\nIf it is NFC, I'm not seeing that that's obvious; that should get an explanation if it turns out to be the case, I think. ðŸ™‚ "", 'comment_created': datetime.datetime(2021, 5, 13, 1, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 631499024, 'comment_body': 'nit: Several of these functions that make data objects (`streamMessage`, `pmMessage`, etc.) accept the property names directly, without bothering to use camelCase. Best to do so here, for consistency, I think: so, `stream_id` instead of `streamId`.', 'comment_created': datetime.datetime(2021, 5, 13, 1, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 631503016, 'comment_body': ""Is this quite the right error message? We've got a stream ID; it's the subscription that we haven't found, right?\r\n\r\nAlso, do we expect the `if (!sub)` condition to ever happen, and why or why not?\r\n\r\nIf we never expect it to happen, let's use [`invariant`](https://github.com/zulip/zulip-mobile/blob/master/docs/style.md#invariant-assertions) instead (here and in similar places in this commit); the number of places we've used that is small but growing. ðŸ™‚ "", 'comment_created': datetime.datetime(2021, 5, 13, 1, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 631503249, 'comment_body': '(same comment as above, about the error message, whether we expect this to happen, and `invariant`)', 'comment_created': datetime.datetime(2021, 5, 13, 1, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 631504123, 'comment_body': '(same comment as above, about whether we expect this to happen, and `invariant`)', 'comment_created': datetime.datetime(2021, 5, 13, 1, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 631506763, 'comment_body': 'Ah, looking back after posting the review: if it turns out to be really clear that we expect `sub` to exist every single time, this is probably another good place to use `invariant` (see my other comments where I mention that).', 'comment_created': datetime.datetime(2021, 5, 13, 1, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 631509549, 'comment_body': ""Ah, I meant to post in my previous review but forgot:\r\n\r\nThe title and error message are translated via `_` (the function with type `GetText`), so we should make sure these user-facing strings have entries in static/translations/messages_en.json; looks like 'Mark topic as read' is already there but the error message is not."", 'comment_created': datetime.datetime(2021, 5, 13, 1, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 632862010, 'comment_body': 'Using invariant in the new revision,\r\n\r\nI think `subscriptions` will not change at this position i.e. it will keep using the same value that `showTopicActionSheet` was called with. even if it is updated by react in between the execution of this function.\r\nI am not sure if that is intentional though (since such a change can happen when the user is about to interact with the action sheet.)\r\n\r\nSo if `showTopicActionSheet` is called with right stream name and Subscription object here,  `(sub !== undefined)` will always be true.\r\nHence I am using invariant.\r\n\r\n**Why i think `subscriptions` will not change at this position?**\r\nI think this is an example of ""stale closure"" (more info at: https://reactjs.org/docs/hooks-faq.html#why-am-i-seeing-stale-props-or-state-inside-my-function)\r\n\r\nEssentially what I could infer from it was that when we pass a state to a function and the state updates, our function creates a closure with the value of state that was passed to it when the function was called and it keeps using that outdated data even when the state updates.\r\nJust in case, a way to solve this is by using `useRef` (for functional components) and its equivalent for class. Here is a blog post discussing this: https://css-tricks.com/dealing-with-stale-props-and-states-in-reacts-functional-components/', 'comment_created': datetime.datetime(2021, 5, 14, 23, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 632862187, 'comment_body': 'Using invariant in the new revision. The reason is explained at https://github.com/zulip/zulip-mobile/pull/4635#discussion_r632862010\r\n\r\nAlso I changed the error message in `invariant`.', 'comment_created': datetime.datetime(2021, 5, 14, 23, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 632862252, 'comment_body': ""On exploring this I realized that the current implementation allows a user to Long Press `TopicItem` on an unsubscribed stream (from `TopicListScreen`) (I think ideally this shouldn't be the case).\r\nIn that scenario subscription will be undefined.\r\nGiven that case I am not sure if we should be `logging.error` as well, so I removed that statement in the new revision and now the code simply returns on not finding subscription."", 'comment_created': datetime.datetime(2021, 5, 14, 23, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 632862278, 'comment_body': 'using invariant here, the reason is same as https://github.com/zulip/zulip-mobile/pull/4635#discussion_r632862010', 'comment_created': datetime.datetime(2021, 5, 14, 23, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 632864663, 'comment_body': ""Just highlighting, that I have used an invariant here as well (this wasn't asked in @chrisbobbe's review). necessary for the subsequent call to `isTopicMuted`.\r\nfor the same reason as https://github.com/zulip/zulip-mobile/pull/4635#discussion_r632862010"", 'comment_created': datetime.datetime(2021, 5, 15, 0, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 636523182, 'comment_body': ""Thanks, writing this expectation explicitly like this is helpful. I think the expectation is not correct. :grin: I'll elaborate in a review comment."", 'comment_created': datetime.datetime(2021, 5, 20, 22, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636523750, 'comment_body': ""(here's a comment just to tie this review to this thread)"", 'comment_created': datetime.datetime(2021, 5, 20, 22, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636536133, 'comment_body': 'Instead of directly building up the internal data structure that `state.unread.streams` comes in, let\'s use the unreads reducer to build it up. That way:\r\n* The details of the data structure stay internal to the unreads model. This makes it easier to change that data structure around later (as we recently did, in fact, earlier this year.)\r\n* By keeping those details out, it also keeps this code that\'s building the data more abstract in a way that I think will make it more readable: it\'ll say ""start from an initial/empty state, then insert each of the messages in this list"".\r\n* Because the reducer takes basically message objects, I think this will ultimately help simplify the tests that use this, too: instead of referring to a stream by an ID here and a name there, and counting on tying those together elsewhere in the test, or using the same ID or name in several places and implicitly using that they\'re the same value, they can use a real `Stream` object throughout.', 'comment_created': datetime.datetime(2021, 5, 20, 23, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636537294, 'comment_body': ""Instead of saying `streamId: 123` here and `stream_id: 123` above where `stream` is constructed, this can say `streamId: stream.stream_id` here. That way the connection between this and the ID of `stream` is explicit.\r\n\r\nI think that also makes it unnecessary to add a `stream_id` option to `eg.makeStream`. In general I think in almost any place we might use that, it'd be better to turn the flow around just like here: let the stream get whatever ID it gets, and where we want to have that stream's ID just refer to it directly.\r\n"", 'comment_created': datetime.datetime(2021, 5, 20, 23, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636537753, 'comment_body': ""Similarly, instead of explicitly setting `name: 'test stream'` and then writing `test stream` again later in the test (in one of the intermediate commits in this branch), we can just say `stream.name` at that later point.\r\n\r\nThat makes the test code simpler and shorter -- and in particular it makes it clear that there's nothing interesting about the particular name and it isn't something the reader needs to pay attention to.\r\n\r\nThat at that point we're passing no arguments to `eg.makeStream` at all, so we might simplify further by using `eg.stream` instead of a local, to further make clear that there's nothing interesting about this particular stream.\r\n"", 'comment_created': datetime.datetime(2021, 5, 20, 23, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636539213, 'comment_body': 'For an example, see:\r\nhttps://github.com/zulip/zulip-mobile/blob/31c4bc808053532499399e0dc241810e4a0113b9/src/unread/__tests__/unreadModel-test.js#L149-L160\r\n\r\nFor another example:\r\nhttps://github.com/zulip/zulip-mobile/blob/31c4bc808053532499399e0dc241810e4a0113b9/src/unread/__tests__/unread-testlib.js#L36-L58\r\n', 'comment_created': datetime.datetime(2021, 5, 20, 23, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636539712, 'comment_body': ""In a related spirit, instead of saying the string `'test topic'` twice and implicitly using that they're the same, it'd be better to have a `const topic = 'test topic'` and refer to that in both places.\r\n"", 'comment_created': datetime.datetime(2021, 5, 20, 23, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 636542937, 'comment_body': ""> Instead of directly building up the internal data structure that `state.unread.streams` comes in, let's use the unreads reducer to build it up.\r\n\r\n(This isn't a principle we have written down anywhere -- in fact I really only started doing it in our code just recently, with that refactor to this very unreads model. I think it becomes more important as our data structures get interesting, like that one is. @chrisbobbe noticed it at the time and we had a conversation about it, which might be informative to read and I should perhaps turn into a style-guide entry or something; maybe it was on one of the PRs where I was making those changes?)\r\n"", 'comment_created': datetime.datetime(2021, 5, 20, 23, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 651973607, 'comment_body': ""I wanted to de-structure this similar to\r\n```javascript\r\nconst [currentStreamId, currentStream] = [...backgroundData.streams.entries()].find(x => x[1].name === streamName);    \r\n```\r\nBecause it seemed more clean, but flow doesn't allow this because it thinks that this can potentially be `undefined`. Is there a way to handle that?"", 'comment_created': datetime.datetime(2021, 6, 15, 16, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 652444821, 'comment_body': ""Because the `Stream` objects contain their stream ID, a direct solution would be to use `.values()` instead of `.entries()`, and then `stream.stream_id` to get the ID.\r\n\r\n(But independently of that, I'd like to avoid introducing a `find` like this -- I'll make a separate comment.)\r\n"", 'comment_created': datetime.datetime(2021, 6, 16, 7, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 652449977, 'comment_body': ""I'd like to avoid introducing this sort of linear scan through all the streams.\r\n\r\nWe have a number of those now, but it's a pattern that's potentially quite bad for performance and I'd like to get rid of over time; that's #3339.\r\n\r\nFortunately it's not too hard to avoid: we just need an appropriate data structure like a `Map`.\r\n\r\nIf you look in `subscriptionSelectors.js` (which has selectors for both streams and subscriptions -- that's itself something we should perhaps do something to clarify), you'll see that we currently have memoizing selectors for three of the four cells in a 2x2 matrix:\r\n```js\r\nexport const getStreamsById: Selector<Map<number, Stream>> = createSelector(\r\n  getStreams,\r\n  streams => new Map(streams.map(stream => [stream.stream_id, stream])),\r\n);\r\n\r\nexport const getSubscriptionsById: Selector<Map<number, Subscription>> = createSelector(\r\n  getSubscriptions,\r\n  subscriptions =>\r\n    new Map(subscriptions.map(subscription => [subscription.stream_id, subscription])),\r\n);\r\n\r\nexport const getSubscriptionsByName: Selector<Map<string, Subscription>> = createSelector(\r\n  getSubscriptions,\r\n  subscriptions => new Map(subscriptions.map(subscription => [subscription.name, subscription])),\r\n);\r\n```\r\n\r\nThe one we need here is the remaining case: a `getStreamsByName`. So the first thing to do is to add a selector like that, following the examples of those three.\r\n\r\nThen we can add a `streamsByName: getStreamsByName(state)` to the `backgroundData` found here and wherever else we need to turn a stream name into a `Stream` and/or a stream ID; and then we can do that by saying `streamsByName.get(streamName)`.\r\n"", 'comment_created': datetime.datetime(2021, 6, 16, 8, 5, 12, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 652455585, 'comment_body': ""This will change what interface we're assuming from the server when we make a request there. When we do that, we want to be sure to say in the commit message why we believe the new interface will work.\r\n\r\nFollowing the link to #3244, it looks like this new way is accepted starting with server 2.0. We're planning to desupport servers older than that soon, but we're not quite ready to do so -- #4750 added a banner to warn people on such old servers that it's time to upgrade, and we'll want to have the release with that banner out for a bit before having a further release that actually stops supporting the older servers.\r\n\r\nSo let's hold this commit off for now, leaving it out of this PR.\r\n"", 'comment_created': datetime.datetime(2021, 6, 16, 8, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 652972739, 'comment_body': 'Better to just call this `stream`. The extra word ""current"" isn\'t really adding any meaning here.\r\n\r\n(Sometimes ""current"" is helpful when there\'s also a ""previous"" or ""next"", or some other notion of another thing of the same kind.)\r\n\r\n... Oh I see, this is the name the existing code had.\r\n\r\nBut we\'re already touching all the places the old name was used. So the diff won\'t really get any bigger or more complex if we also fix up this name while we\'re here :slightly_smiling_face: ', 'comment_created': datetime.datetime(2021, 6, 16, 19, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 652974352, 'comment_body': ""Let's add a TODO comment here that mentions #3998 and #3918. That will help us find this spot and clean it up to use the stream ID too, once we've added stream IDs to our outbox messages."", 'comment_created': datetime.datetime(2021, 6, 16, 19, 13, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 652976867, 'comment_body': ""nit: add a new string here on any line other than the last -- that way the commas don't cause the diff to unnecessarily touch another string :stuck_out_tongue: "", 'comment_created': datetime.datetime(2021, 6, 16, 19, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 652981999, 'comment_body': ""Hmm interesting.\r\n\r\nThis is reasonable, but I'd kind of like to keep this kind of detail of the unreads data structure encapsulated inside the unreads model. I'm thinking perhaps a function in `unreadModel.js` that takes an `UnreadState` and a stream and topic, and returns a count.\r\n\r\nIt looks like we already have one other spot outside the unreads code that similarly looks inside this data structure -- in `topicSelectors.js`:\r\n```js\r\n      const unreadCount = unreadStreams.get(stream.stream_id)?.get(name)?.size ?? 0;\r\n```\r\n(I found that in a kind of crude, but effective, way: by editing the definition of `UnreadStreamsState` to say `export opaque type UnreadStreamsState = â€¦`, and looking through the resulting Flow errors to find any outside the unreads code.)\r\n\r\nI'll write up a quick change to factor that `topicSelectors.js` line out into the function I have in mind, and push that to this PR branch. Then you can rebase it (after fetching the new version of your branch) to come before this commit, and call that function instead.\r\n"", 'comment_created': datetime.datetime(2021, 6, 16, 19, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 652984266, 'comment_body': ""nit: cleaner to say `[stream.stream_id, stream]` -- that makes it more obvious that it's correct, and also more stably correct in case of changes to `streamMessage` or something"", 'comment_created': datetime.datetime(2021, 6, 16, 19, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 653014399, 'comment_body': ""> I'll write up a quick change to factor that `topicSelectors.js` line out into the function I have in mind, and push that to this PR branch.\r\n\r\nOK, that change grew a bit as I wrote it, so I sent it as its own PR: #4805 .\r\n\r\nIf this PR is otherwise ready before that one is merged, no need to wait for it; we can refactor this to use that as a followup. But that PR is pretty short and simple, so it's likely we'll have it merged soon anyway.\r\n"", 'comment_created': datetime.datetime(2021, 6, 16, 20, 14, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 662727426, 'comment_body': 'I think you want `stream.stream_id` here :wink:\r\n\r\n(And in the other spot like it.)', 'comment_created': datetime.datetime(2021, 7, 2, 4, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': 'b305b3d475b87d5a42baa44faaa0f14684e51874', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4dedddbeb0d0e243522beb68d62dcd22aae75be', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d8c8167936cb92d4b9f5eb686c91e80f01d3d2b', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf07e663470caf05660797cd541a63273ba24431', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdf194818840a96947515f5ee789f13f7d8bdf0c', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e6cd052bcb224d0981cb62d8b71e2d895892de7', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a8cf55c9f10b0a4c78533446ba539e872c5a17e', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad3c65dcba95d1ca933c33f6d9eebaa3b423ae24', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcaf3bad557547ebc2edf8378db599a47f5d6b37', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f9c707a16fc1597215397141f11106bdcc99cd5', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f380b02843515cc1a8618a0c21666f9be68c5d57', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
630985832,Fix bug in AndroidManifest that prevented play store from displaying Zulip to certain user as an installable app.,"Fixes: #4722

All of the relevant documentation is given in https://developer.android.com/guide/topics/manifest/uses-feature-element, it explains how play store filtering works and what a developer can do to control that.

gist is explained in the commit message of https://github.com/zulip/zulip-mobile/commit/199b73b6a72fe4f3c74fdba6e5a305bea13b67c1 of this PR.

> Google Play filters which app to display to a user based on `uses-sdk`,
`uses-permission` and `uses-feature` tags.

> In case `uses-feature` is not declared `uses-permission` is used to do
this filtering, and by default it treats the permission it needs as a
compulsory requirement for the app. Hence our app will not show in play
store for devices without the hardware of concern.

> With `uses-feature` we override the filtering done by `uses-permission`
and by setting the required attribute to false we say that our app isn't
dependent on the hardware of concern to work properly (camera in case of
this commit).

**Why did I specifically add `android.hardware.camera` and `android.hardware.camera.autofocus` in `uses-feature`?**
Table 2 at https://developer.android.com/guide/topics/manifest/uses-feature-element#permissions gives a list which hardware requirements are affected by which specific permission. I am speculating here that without `android.hardware.camera.autofocus` an android device with camera but without autofocus hardware won't be shown our app as well.

I am wondering now what exactly will happen if a user without camera does press the button to access camera in our app, and if something like [checking hardware availability](https://developer.android.com/training/permissions/declaring#determine-hardware-availability) be required?",True,4724,https://api.github.com/repos/zulip/zulip-mobile/pulls/4724,https://github.com/zulip/zulip-mobile/pull/4724,closed,10,3,1,2,2,0,0,0,[],2021-05-05 23:18:07+00:00,2021-05-23 22:28:33+00:00,1552226.0,"17 days, 23:10:26",[],"[{'commit_sha': '6c520d7a01950388e0e6f953399301b2fa1b45fd', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88db034dfeb78be8e522ec1ffebe06b8f0aa48df', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
650848258,Make `getInitialNotification` a consumer.,"Quoting from commit of this PR:

> It is speculated that when an app quits android system does not
flush the entire memory of the app until absolutely necessary
(to facilitate faster startup next time). This also involves the
static variable `initialNotification`.

> This situation creates a problem when the app is started next time,
where it processes `initialNotification` again and falsely navigates
to its narrow.

Fixes: #4758",True,4759,https://api.github.com/repos/zulip/zulip-mobile/pulls/4759,https://github.com/zulip/zulip-mobile/pull/4759,closed,23,4,2,2,3,4,0,0,[],2021-05-23 20:07:11+00:00,2021-05-28 04:17:14+00:00,375003.0,"4 days, 8:10:03","[{'comment_id': 637595378, 'comment_body': 'Not sure about the name of this function, android provides us with a `readInitialNotification` and iOS provides us with a `getInitialNotification` this function calls one of them based on the platform. Should I split this and write platform conditional inside `handleInitialNotification`?', 'comment_created': datetime.datetime(2021, 5, 23, 20, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 639316763, 'comment_body': 'Good question.\r\n\r\nI just tested your #4758 repro instructions on iOS (translated slightly to the iOS UI), and it reproduces there. So that name `getInitialNotifications` is an accurate one for the function that `PushNotificationIOS` gives us, it seems.\r\n\r\nI think probably the right thing would be:\r\n* Rename this function of ours to `readInitialNotification`, because that describes the behavior we *want* it to have, and that on Android it now does have.\r\n* File an issue as the iOS counterpart of #4758, and add a TODO comment here pointing at that issue.\r\n', 'comment_created': datetime.datetime(2021, 5, 26, 0, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 639317675, 'comment_body': '```suggestion\r\n    public void readInitialNotification(Promise promise) {\r\n        if (null == initialNotification) {\r\n            promise.resolve(null);\r\n        } else {\r\n            promise.resolve(Arguments.fromBundle(initialNotification));\r\n            initialNotification = null;\r\n        }\r\n```\r\n\r\nThis has the same behavior but I think is a bit cleaner -- it more closely ties the act of clearing `initialNotification` with the act of passing its contents on elsewhere. That makes it more like just a single atomic act of consuming it, which is how we want to think of this.\r\n', 'comment_created': datetime.datetime(2021, 5, 26, 0, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 639327577, 'comment_body': ""> * File an issue as the iOS counterpart of #4758,\r\n\r\nI've just filed this, as #4763."", 'comment_created': datetime.datetime(2021, 5, 26, 0, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': 'cadacdfef20602fa5486c2fbd363c3b3c6d8a271', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97ca123048cc243888f8dabb4240a098249f0887', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
651169267,[android] Make wifi hardware requirement optional. (follow up to #4724),"Usage of `@react-native-community/netinfo` adds the permission
requirement for ACCESS_WIFI_STATE in the final AndroidManifest of
the app, which makes wifi hardware a compulsory requirement to
install the app.

Adding an appropriate `uses-feature` tag makes this requirement
optional.

This was discovered by looking into ""Merged Manifest"" option while
previewing `AndroidManifest.xml` in Android Studio.

Follow up to: #4724 as suggested by @gnprice.",True,4761,https://api.github.com/repos/zulip/zulip-mobile/pulls/4761,https://github.com/zulip/zulip-mobile/pull/4761,closed,8,0,1,1,4,5,0,0,[],2021-05-24 09:12:20+00:00,2021-05-26 00:04:07+00:00,139907.0,"1 day, 14:51:47","[{'comment_id': 638447857, 'comment_body': ""nit: no trailing whitespace\r\n\r\nThis is one bit of linting that's cross-language enough that Git itself highlights it when you use `git diff`:\r\n![image](https://user-images.githubusercontent.com/28173/119439866-17039280-bcd8-11eb-8ed5-6b3f4bad3c0f.png)\r\n\r\n(At least it does if you have `git config --global color.ui auto`, which I definitely recommend. See in general [my gitconfig](https://gist.github.com/gnprice/5f71b63464a76bd7e0480f207b1bbff3).)"", 'comment_created': datetime.datetime(2021, 5, 25, 4, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 638448638, 'comment_body': ""Let's have this commit message link to the same piece of docs as the previous one did:\r\nhttps://developer.android.com/guide/topics/manifest/uses-feature-element\r\n\r\nActually, better yet, to the relevant section within that doc:\r\nhttps://developer.android.com/guide/topics/manifest/uses-feature-element#permissions\r\n\r\nIt's really pretty counterintuitive, at least to me, that the permission implicitly means a hard requirement for the hardware feature, so seeing the doc helps a lot.\r\n"", 'comment_created': datetime.datetime(2021, 5, 25, 4, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 638454388, 'comment_body': ""Small comment/doc-writing tip: better to leave this less specific, just saying that some of our dependencies add this, rather than naming which ones in particular.\r\n\r\nThe reason is that the exact list may change over time: a future version of one of these may stop doing so, a future version of another dependency may start; we might drop one of these, or follow it across a rename, or pull in a new dependency that does the same thing too. When the comment is very specific like this, any of those changes will make it untrue and potentially confusing to a future reader -- *but*, for the point it's really trying to make, none of those details matter, only the fact that there's any dependency at all that does this. So that makes the point just as well, and is much more likely to remain true over time.\r\n\r\nOTOH in the *commit message* these details are great to include (as you do) -- they explain your/our thinking at the time we're making this change, which can be helpful to a future reader; and as part of the commit message they're inherently contextualized as being about this particular moment in time. There's a bit more on this theme in our style guide:\r\nhttps://github.com/zulip/zulip-mobile/blob/master/docs/style.md#commit-messages-vs-comments\r\n"", 'comment_created': datetime.datetime(2021, 5, 25, 4, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 639264980, 'comment_body': 'Thanks for the `.gitconfig`.', 'comment_created': datetime.datetime(2021, 5, 25, 23, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 639265044, 'comment_body': 'I see, will keep this in mind.', 'comment_created': datetime.datetime(2021, 5, 25, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}]","[{'commit_sha': '42cd40d3674c6d147ee6d3c6651945d2e9476905', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
670590303,[nitpick] Fix parameter order for `onPress`.,"nitpick
It was listed as
```javascript
onPress: (topic: string, stream: string) => void,
```
it Should be 
```javascript
onPress: (stream: string, topic: string) => void,
```",True,4802,https://api.github.com/repos/zulip/zulip-mobile/pulls/4802,https://github.com/zulip/zulip-mobile/pull/4802,closed,1,1,1,1,0,0,0,0,[],2021-06-15 17:02:06+00:00,2021-06-15 22:44:24+00:00,20538.0,5:42:18,[],"[{'commit_sha': '70050296dec9f3972d2d3967351259d6d2d5fe01', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
681162539,lightbox [nfc]: Remove meaningless properties in rnfb config.,"Done in `downloadFileToCache`, the object passed to
`RNFetchBlob.config` contained some meaningless properties.

These property are technically the sub properties of the property
`addAndroidDownloads`. But we would want to remove them instead of
adding them there since these essentially configure the android
download manager to download the file, which we do not want in case
of this function.

Normally rnfb will use its internal implementation for downloading
based on the `OkHttp` android library.
Originally reported [here](https://chat.zulip.org/#narrow/stream/48-mobile/topic/Sharing.20from.20lightbox.20broken.20on.20Android/near/1223148)",True,4839,https://api.github.com/repos/zulip/zulip-mobile/pulls/4839,https://github.com/zulip/zulip-mobile/pull/4839,closed,0,3,1,1,1,3,0,0,[],2021-06-30 19:21:31+00:00,2021-07-07 00:29:26+00:00,536875.0,"6 days, 5:07:55","[{'comment_id': 663090155, 'comment_body': '```\r\nThese property are technically the sub properties of the property\r\n`addAndroidDownloads`.\r\n```\r\n\r\nA quick link to the documentation would help someone in the future verify this. ðŸ™‚\r\n\r\n```\r\nNormally rnfb will use its internal implementation for downloading\r\nbased on the `OkHttp` android library.\r\n```\r\n\r\nCould you say more in the commit message, ideally with a link to documentation, about why this is relevant to the change?', 'comment_created': datetime.datetime(2021, 7, 2, 15, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 663091700, 'comment_body': ""Also, I think a link to my report on CZO might be helpful in the commit message. It has some additional context about how the error was discovered; specifically, that I was working on `exact_by_default`. (That context isn't necessary to justify fixing the error, so I don't think it needs to be explained in the commit message. But a link to the discussion might help satisfy people's curiosity about how it was discovered.)"", 'comment_created': datetime.datetime(2021, 7, 2, 15, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 664616190, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 7, 6, 14, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}]","[{'commit_sha': '38a1f4c0dee58a02f12d1cd8dbcf5e9cbf586c3f', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
685419420,lightbox [nfc]: Remove `fileCache` property from rnfb config.,"This is not required as 'path' with `CacheDir` fulfills the same
purpose as `fileCache`.

The difference is 'path' gives specific path to the file while
`fileCache` gives a randomly generated path (including the
filename and its extension). See [1].

We would want to preserve the filename and its extension while
sharing from lightbox and hence `path` is used instead of
`fileCache`.

Originally reported at [2] by Greg.

reference:
[1] https://github.com/joltup/rn-fetch-blob#download-to-storage-directly
[2] https://chat.zulip.org/#narrow/stream/48-mobile/topic/Sharing.20from.20lightbox.20broken.20on.20Android/near/1226489

**tested to verify that this is nfc.**",True,4879,https://api.github.com/repos/zulip/zulip-mobile/pulls/4879,https://github.com/zulip/zulip-mobile/pull/4879,closed,0,1,1,1,1,0,0,0,[],2021-07-07 18:30:46+00:00,2021-07-07 21:04:54+00:00,9248.0,2:34:08,[],"[{'commit_sha': 'c554779aa73b202ce5a6d95de4f5f798b72e2376', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
685476870,"Fix do not mark as read, and make it more visible","Done by first passing `doNotMarkAsRead` information to webview then
migrating `doNotMarkAsRead` from debug setting to general setting.

Fixes: #4849
Fixes: #4850",True,4880,https://api.github.com/repos/zulip/zulip-mobile/pulls/4880,https://github.com/zulip/zulip-mobile/pull/4880,closed,50,34,15,2,1,15,0,0,[],2021-07-07 20:07:12+00:00,2021-07-13 00:31:23+00:00,447851.0,"5 days, 4:24:11","[{'comment_id': 665676095, 'comment_body': ""Is this an appropriate thing to do? I have made the type `Debug = $Shape<{||}>` and flow was giving incompatible shape error on that, I am assuming here that we won't pass through `SessionState` (which contains `debug: Debug`) here because `storeKeys` doesn't contain that value and hence we can ignore the error related to that. Is that correct?"", 'comment_created': datetime.datetime(2021, 7, 7, 20, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 665678937, 'comment_body': 'I am using a global variable here since we need to use this in multiple functions inside `js.js`, it is defined within `handleInitialLoad` and used within `sendScrollMessage`, Is that appropriate? does there exists some better design pattern that I can follow here?', 'comment_created': datetime.datetime(2021, 7, 7, 20, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 665713525, 'comment_body': ""Good question. I think the answer here is to not use `$Shape`:\r\n* In general, `$Shape` has some funny unsound behavior (https://flow.org/en/docs/types/utilities/#toc-shape ) and so we usually avoid it.\r\n* Here, `{||}` already means exactly the type of objects with no properties. So there isn't anything for `$Shape` to do, other than its funny unsoundness.\r\n\r\nIt looks like if I delete the `$Shape` I get an error at the point where it's initialized to `{}`. That is a known Flow quirk, where the empty object literal `{}` can't be used as the empty-object type `{||}`. Fortunately there is a clean workaround, which is to say `Object.freeze({})` instead: https://github.com/facebook/flow/issues/2386#issuecomment-695064325\r\n"", 'comment_created': datetime.datetime(2021, 7, 7, 21, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 665720216, 'comment_body': ""Yeah, good question.\r\n\r\nI think a somewhat better pattern would be to follow what we do for `platformOS`:\r\n* It's defined directly in `script.js`, before the code in `compiledWebviewJs` (which has all the code in `js.js` and its friends) runs. This means it's initialized with the correct value from the beginning, and there's no need to worry about initialization order.\r\n* Then there's a `declare var` line here at the top of `js.js`, so that Flow knows about it.\r\n\r\nThat's still kind of awkward, because there's no type-checking that what we do in `script.js` matches what `js.js` expects. But that's equally true with the parameters we pass to `handleInitialLoad`.\r\n\r\nI think having it in a global is fine, so long as it has a nice explicit name like this. There's kind of an underlying messiness in the fact that this file is pretty long and does quite a lot of different things. So that makes it kind of uncomfortable to add more things to its top-level namespace. But I think the main thing for us to do there is to take some of the larger clusters of related code in this file and move them to separate modules.\r\n"", 'comment_created': datetime.datetime(2021, 7, 7, 21, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 665725826, 'comment_body': ""This is a test for some logic we still have, in `sessionReducer.js`. So we should delete it only when we're actually deleting that logic.\r\n\r\nThat'll be a separate commit from any of the changes in this branch -- basically we'd have a commit ripping out the `Debug` type and `DebugScreen`, and all the remaining references to those. I think it'd be pretty reasonable to include that at the end of this PR, but I'm also happy to let it sit around for a bit and see if we find another use for it soon.\r\n"", 'comment_created': datetime.datetime(2021, 7, 7, 21, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 665728193, 'comment_body': ""We're making a change to the Redux state type, so we should have a migration for it.\r\n\r\n(More specifically, it's in a subtree that we actually store between runs -- see `storeKeys` and `cacheKeys` in `src/boot/store.js`. This didn't apply to the change to `SessionState` via changing `Debug`, because `state.session` isn't stored; it's in `discardKeys`.)\r\n\r\nActually, we had a recent discussion where the conclusion was that maybe we shouldn't quite have a migration in this case, because the way the persisted state gets merged with the reducer's initial state will have the right effect already. But still we should have a comment in the list of migrations, saying what changed and that we explicitly decided no migration was needed.\r\n\r\n(I'm regretting now that that discussion was on GitHub instead of Zulip, though -- it may not be easy to find.)\r\n"", 'comment_created': datetime.datetime(2021, 7, 7, 21, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 665729017, 'comment_body': ""nit: keep the blank line -- it's serving a purpose by separating this comment from what's above, so that it's visually attached to the whole stanza below"", 'comment_created': datetime.datetime(2021, 7, 7, 21, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 665730171, 'comment_body': 'https://github.com/zulip/zulip-mobile/pull/4798#discussion_r652281059 ðŸ™‚ ', 'comment_created': datetime.datetime(2021, 7, 7, 21, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 666367343, 'comment_body': 'Good to know! thanks.', 'comment_created': datetime.datetime(2021, 7, 8, 16, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 666367387, 'comment_body': 'passing it like `platformOS` in new revision.', 'comment_created': datetime.datetime(2021, 7, 8, 16, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 666367496, 'comment_body': 'added back, I am keeping `debug` related code as it is, for potential future use.', 'comment_created': datetime.datetime(2021, 7, 8, 16, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 666367766, 'comment_body': ""is there a difference when using `dropCache` vs returning a modified state like some migrations are doing? example - '28'"", 'comment_created': datetime.datetime(2021, 7, 8, 16, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 668342135, 'comment_body': ""This isn't the right thing here; it actually has no effect on the `settings` state. (You asked about this line in a subthread above, too.)\r\n\r\nI guess I just said above that I regretted having a previous discussion on a GitHub PR thread instead of in Zulip because it's harder to find here, so I'll make a chat thread to go into more detail :slightly_smiling_face: "", 'comment_created': datetime.datetime(2021, 7, 13, 0, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 668350732, 'comment_body': 'https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/data.20migrations/near/1230029', 'comment_created': datetime.datetime(2021, 7, 13, 0, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 668351076, 'comment_body': 'https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/data.20migrations/near/1230029 (same link as below, but here too for cross-reference)\r\n', 'comment_created': datetime.datetime(2021, 7, 13, 0, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '7c90262ea86500ccb1de5307660679c19bd7e19e', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6359d1ae23a5f615564369e0186dfd12194cacf6', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
690859669,Do not mark as read for Search and Special Narrows.,"I am concerned about the changes I made in the very first commit of this PR, search screen `MessageList` was being provided `HOME_NARROW` which was creating problems with my second commit. Is there a particular reason for why it was that way?

Fixes: #4852",True,4900,https://api.github.com/repos/zulip/zulip-mobile/pulls/4900,https://github.com/zulip/zulip-mobile/pull/4900,closed,54,12,3,5,2,10,0,0,[],2021-07-15 16:08:07+00:00,2021-07-21 21:27:12+00:00,537545.0,"6 days, 5:19:05","[{'comment_id': 670931776, 'comment_body': ""It looks like there's really two things happening in this commit:\r\n* Making `query` something we track in this component's state.\r\n* Making this component's child, `SearchMessagesCard`, take `query` as a prop.\r\n\r\nSomething that would help a lot in making those changes easier to review would be to split it into two commits, one for each of those steps.\r\n\r\nFor the mechanics of doing that, `git checkout -p` is handy -- it lets you pick and choose some of the changes from a given other commit. Then you can commit those as a new commit, and then take the remaining changes."", 'comment_created': datetime.datetime(2021, 7, 16, 3, 2, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670934688, 'comment_body': ""Hmm, this state logic doesn't look right to me. I don't actually see where we're ever setting `state.query` to a new value. Here's how this two-argument form of `setState` is meant to be used:\r\nhttps://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous\r\n\r\nThe `setState` calls inside this `setState` callback also seem like not the intended usage.\r\n\r\nOne subtle thing to get right here, independent of the React API, is: we should make `state.query` be something that stays in sync with `state.messages`, i.e. it always reflects the same query that was used to fetch those messages. The reason this is tricky is that the latest query the user has typed may be one that we haven't yet gotten a response for; plus we may have several requests in flight at a time, if the user is typing quickly or if the server (or our connection to it) is slow. That's a major reason this `handleQueryChange` function is as tricky-looking as it is.\r\n\r\nFortunately I think with that problem statement -- keep `state.query` in sync with `state.messages` -- it becomes simple to do it: we just want to update `query` in exactly the same places where we update `messages`, in the same `setState` calls.\r\n\r\n(Keeping it in sync doesn't really matter for what this PR is doing -- they're all search narrows, and that's all the information we're using about them at this point. But it will start mattering when we go to fetch older messages when the user scrolls up, because that's how we make sure that all the messages we show at a given time are always from the same query, and not a mix of different queries.)"", 'comment_created': datetime.datetime(2021, 7, 16, 3, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 670937845, 'comment_body': 'Let\'s avoid `isSpecialNarrow` -- I think the idea of a ""special"" narrow isn\'t really well defined, so it\'s hard to write code that uses it and then reason about whether the thing it\'s doing is what we want.\r\n\r\nInstead, let\'s use `caseNarrow`. That will mean we have an explicit case in this code for each of the different types of narrows, so it\'s clear what choice we\'re making for each of them. That also means (and this is a reason not to use something like `caseNarrowDefault` in this situation) that if we add another type of narrow in the future, then this will be one of the spots that Flow makes sure we see, so we can pick what the right answer is for that future type of narrow.\r\n\r\nAnd in fact, illustrating why it\'s good to make an explicit choice for each type of narrow:\r\n\r\n    If messages are in the following narrows:\r\n    * starred\r\n    * mentioned\r\n    * allPrivate\r\n    * search\r\n\r\nif we were to have a message list for the allPrivate / all-PMs narrow, I think we would want it to have the same behavior as the all-messages narrow -- namely, it would mark things as read. The reason is that that\'s a narrow where the only reason to go there would be to sweep through all those messages in one view; it\'s just a union of some smaller narrows that you can easily navigate to individually in the UI if you want to be more selective.\r\n\r\nTo organize that in the code, probably the best thing is to have a little helper function right in this file -- maybe right above this `connect` call -- with a signature like `marksMessagesAsRead(narrow: Narrow): boolean`. It\'s good to have it in this file (just like this line is in the PR\'s current revision), because it\'s really a UI decision that belongs to this part of the UI.\r\n\r\n(And, probably I should go get rid of `isSpecialNarrow`. Looks like there\'s only one existing caller -- and that one should definitely turn into a `caseNarrow`.)\r\n', 'comment_created': datetime.datetime(2021, 7, 16, 3, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 674220605, 'comment_body': 'I did split the commit in new revision, but along with the edit you suggested at https://github.com/zulip/zulip-mobile/pull/4900#discussion_r670934688, it makes the commit that just adds query to component\'s state raise an eslint error for no unused state. I am supressing this error since using it would essentially be the part two of the split: ""Making this component\'s child, SearchMessagesCard, take query as a prop.""', 'comment_created': datetime.datetime(2021, 7, 21, 18, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 674220866, 'comment_body': ""Changed in the new revision to update the query along with state.message since its much simpler than what I had done and I agree with your point on keeping things at sync, let me know if the way I have done it is correct.\r\n\r\n> I don't actually see where we're ever setting state.query to a new value. Here's how this two-argument form of setState is meant to be used:\r\n\r\nI used a different implementation of `setState`, with the signature\r\n```javascript\r\nsetState(updater, [callback])\r\n```\r\nIt can be found at this link https://reactjs.org/docs/react-component.html#setstate\r\n\r\nSo the first argument is where I set `state.query`. It can be an object that will be shallow merged or a function which can return an object to be shallow merged.\r\n\r\nI think the callback runs after the update / rerender. `setState` is not allowed inside the updater but you can use it inside a callback, a warning (shown below) when you try to use `setState` inside updater function also indicates that this is ok to do.\r\n\r\n![Screenshot from 2021-07-21 23-00-42](https://user-images.githubusercontent.com/40268170/126533699-b84cf5af-4ccb-4373-a931-b5b3840eaa51.png)\r\n\r\nI could have used `componentDidUpdate` here as well I think."", 'comment_created': datetime.datetime(2021, 7, 21, 18, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 674221711, 'comment_body': 'using `caseNarrow` in the new revision.', 'comment_created': datetime.datetime(2021, 7, 21, 18, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 674258550, 'comment_body': '> ```js\r\n> setState(updater, [callback])\r\n> ```\r\n>   \r\n> It can be found at this link https://reactjs.org/docs/react-component.html#setstate\r\n\r\nAh I see, thanks! I think I hadn\'t been aware of that second argument before.\r\n\r\nAnd looking back at the bit of docs I\'d linked, that\'s not actually using the two-argument form -- it\'s just passing the one first argument, the ""updater"", and doing so with a function rather than an object.\r\n\r\n\r\n\r\n> Changed in the new revision to update the query along with state.message since its much simpler than what I had done and I agree with your point on keeping things at sync\r\n\r\n:+1: ', 'comment_created': datetime.datetime(2021, 7, 21, 19, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 674275082, 'comment_body': ""nits:\r\n* put query next to messages, because they're closely tied together\r\n* better yet, put query before messages, because that's the order they naturally exist in: the query is a question, and the messages are an answer to that question\r\n* (then match that order when initializing and setting the state below, just as you do in this revision)"", 'comment_created': datetime.datetime(2021, 7, 21, 19, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 674276359, 'comment_body': ""No need to revise the branch to do this, but a way to perhaps make it easier next time: you can say `/* eslint-disable react/no-unused-state */`, at e.g. the top of the class, and then it applies to the remainder of the file and you don't have to repeat it.\r\n"", 'comment_created': datetime.datetime(2021, 7, 21, 19, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 674278202, 'comment_body': 'When merging this, I can add a bit of jsdoc on what this function is supposed to mean, and some comments inside it on why we make the particular choices we do.', 'comment_created': datetime.datetime(2021, 7, 21, 19, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '2ac2c12c8854440001fed339eae87b250fcd2dfa', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1556409ca3ff4c0c65e5a01304d4ecf71f29a88f', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e33f06b9d230906da5c3a328f4358cd349571968', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f9d0931851e39b1da81d94851cd877d516e4f3e', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46edceaac0a1f1caa3ac8a7d09b19859f9dcaa76', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
695419526,android: remove default textColor of #0 on Android.,"This was introduced in 8919a6aeb, to achieve consistancy with iOS.
With the changes made in 4db472a2e, this becomes the cause of an
inconsistancy where setting system dark mode in android, makes the
text colors black within a dark colored alert dialog box, giving a
poor color contrast and overall bad look to the dialog box.

This commit makes the color white on dark background and black on
light background, based on the theme.

Similar issue on upstream:
https://github.com/facebook/react-native/issues/31345

Discussion on CZO:
https://chat.zulip.org/#narrow/stream/48-mobile/topic/Dark.20theme.20issue.20on.20Android

## Before
![WhatsApp-Image-2021-07-15-at-6 16 17-AM](https://user-images.githubusercontent.com/40268170/126692943-61bc3371-6c23-4fa2-92b2-d122735f34d3.jpeg)

## After (Dark)
![WhatsApp-Image-2021-07-15-at-7 06 10-AM](https://user-images.githubusercontent.com/40268170/126692981-bc9962f2-61df-4fec-af84-8d244972e6a6.jpeg)

## After (Light)
![WhatsApp-Image-2021-07-15-at-7 06 26-AM](https://user-images.githubusercontent.com/40268170/126692996-9bb8237c-cd34-408b-9dd1-07266b09a1fd.jpeg)
",True,4921,https://api.github.com/repos/zulip/zulip-mobile/pulls/4921,https://github.com/zulip/zulip-mobile/pull/4921,closed,0,1,1,1,2,0,0,0,[],2021-07-22 18:50:48+00:00,2021-07-26 19:06:45+00:00,346557.0,"4 days, 0:15:57",[],"[{'commit_sha': '4fc4e96813882fe5652008e3467e268ac86f6d75', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
702608878,android: Drop support for API < 23.,"As Discussed in [CZO](https://chat.zulip.org/#narrow/stream/243-mobile-team/topic/Updating.20.60minSdkVersion.60/near/1236327), Last time (9-2020) we checked, the total
user base using API < 23 is less than 1 percent and hence it is
safe for us to update the API version (according to the [update
policy](https://github.com/zulip/zulip-mobile/blob/master/docs/architecture/platform-versions.md#android-and-ios-versions) [2] we have).

The advantage of this change would be simplification in some of the
code that we use / will be using which will be changed / added in
other commits.

The changes in this commit Involved:
* Changing `android/build.gradle`.
* Setting up chrome version to 44 (set according to what is
  written in `platform-versions.md`).
* Modifications to the documentation.

Marking P1 since Notification UI is built on top of this PR.",True,4938,https://api.github.com/repos/zulip/zulip-mobile/pulls/4938,https://github.com/zulip/zulip-mobile/pull/4938,closed,16,17,6,1,5,4,2,0,"[{'name': 'a-Android'}, {'name': 'P1 high-priority'}]",2021-08-03 20:56:32+00:00,2021-08-05 06:40:22+00:00,121430.0,"1 day, 9:43:50","[{'comment_id': 682098300, 'comment_body': 'would be nice if someone could move conversations of that topic, to platform versions, to make this consistent with others.\r\n(I think only admins can move conversations)', 'comment_created': datetime.datetime(2021, 8, 3, 20, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 682209634, 'comment_body': 'nit: ""Marshmallow""', 'comment_created': datetime.datetime(2021, 8, 4, 0, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 682219043, 'comment_body': ""Hmm, maybe. I'm not really bothered by the inconsistency. @gnprice, are you?"", 'comment_created': datetime.datetime(2021, 8, 4, 1, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'chrisbobbe', 'type': 'User'}, {'comment_id': 683156867, 'comment_body': 'I don\'t mind the links not all being to the same topic. In fact it\'s convenient for the ""platform versions"" topic to not have much detailed discussion on it, to help make it easy to scan through it for the history of the numbers we\'ve posted there, so I\'m happy for the recent discussion to stay on a distinct topic.\r\n\r\nIt would be good to have a quick message there just recording that we\'ve made this change, linking to the discussion thread and to this PR.\r\n', 'comment_created': datetime.datetime(2021, 8, 5, 6, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '2e7ea833ebcce9cd78d7e38853a61cefc723bb06', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
704838675,"Search only on submit, not as you type","This PR does the prep work for implementing #4859 it changes the behavior of search from on query change to on submit.

Fixes: #4964",True,4946,https://api.github.com/repos/zulip/zulip-mobile/pulls/4946,https://github.com/zulip/zulip-mobile/pull/4946,closed,24,8,4,1,2,3,0,0,[],2021-08-05 16:08:38+00:00,2021-08-19 20:48:17+00:00,1226379.0,"14 days, 4:39:39","[{'comment_id': 687278424, 'comment_body': ""It would be simpler if we could have the submit handler just take the query string directly as an argument, rather than have some state up on this component that we're updating. Can we do it that way?\r\n\r\nIt looks like we can -- here's the underlying `TextInput` prop we're using:\r\nhttps://reactnative.dev/docs/textinput#onsubmitediting\r\n> Callback that is called when the text input's submit button is pressed with the argument `{nativeEvent: {text, eventCount, target}}`.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 8, 12, 0, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 687278911, 'comment_body': ""Related to the other comment: with this version, we lose the synchronization between `query` and `messages`. Remember that that will be important:\r\nhttps://github.com/zulip/zulip-mobile/pull/4900#discussion_r670934688\r\nfor when we go to do #4859, fetching more results as you scroll up.\r\n\r\nIf we had to use state on this component to track the query for the submit handler to then use, we could -- we'd just have to have two different queries in the state, one for the one the user might be about to submit and one for the one that the results in `messages` reflect. But simpler to let the not-yet-submitted query be tracked just by the input component, and let the input component pass it to our submit handler as an argument :slightly_smiling_face: \r\n"", 'comment_created': datetime.datetime(2021, 8, 12, 0, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 687281162, 'comment_body': ""I think this should actually work just fine if this component doesn't mention `onSubmitEditing`. It already passes through all the props to the underlying `Input`, with that `{...props}`.\r\n\r\nThat's nice because it means one fewer layer that has to be touched to propagate this through :slightly_smiling_face: "", 'comment_created': datetime.datetime(2021, 8, 12, 0, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '386d58102171d1e6eee2f2e82c231e6257c34213', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
711024820,Fetch data when notification is received,"Fixes: #4853

The first commit for this PR is similar to reply from notifications, where we configure a headless task following https://reactnative.dev/docs/headless-js-android.

The idea I had in mind to get this to work was
* on receiving a firebase message we start the headless service which starts up javascript.
* from javascript we access the redux store and dispatch `EVENT_ADD_MESSAGE`, (we can also consider other associated events here as well)
* this will construct a redux state with our new message in the unread state.
* then we quit from javascript and this saves the unreadState with redux-persist.
* on opening the app normally, it restores this unread state and sees the latest messages.

Issues I currently face:
* Persistence isn't actually working, EVENT_ADD_MESSAGE is triggered, and state does change but it doesn't get stored, new notification restore old state and forget the previous ones, moreover opening the app also doesn't show a change of behavior. Possible reason could be that since a service doesn't die when finished we don't actually finish hence we don't trigger redux-persist to store the data. (I will try to do an exit call from service to see if that is indeed the case)
* Flow is giving me error on dispatching EVENT_ADD_MESSAGE, I am unable to dispatch functions as well it seems, I usually look at other places where similar code is used to try to resolve such scenarios and type hinting fails at many places dispatch is called.
* message provided via notification and what is expected in the payload with EVENT_ADD_MESSAGE are somewhat different, I was wondering if it is possible for them to be more in sync with each other.

The commits are roughly implemented as of now.",False,4956,https://api.github.com/repos/zulip/zulip-mobile/pulls/4956,https://github.com/zulip/zulip-mobile/pull/4956,open,143,33,6,3,1,0,0,0,[],2021-08-12 14:28:25+00:00,,0.0,,[],"[{'commit_sha': 'f2412d0ce2d103d19b8ddf23410f5b2b22634d03', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97828916e5e003e371ca67f3f0f93249073beb59', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c5485cf8eee37bc76f65b168fec0554458ea54e', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
704834138,[wip] Reply from notification in Android,"Builds up on #4842, ignore common commits.

This allows user to respond to notification from notifications itself, without having to open the app.
The idea is to create a [headless](https://reactnative.dev/docs/headless-js-android) js service which
gives control to javascript without having to start the react native tree.
within javascript we restore our redux store and call api.sendMessage
then if that succeeds we call a newly introduced react method UpdateNotification
to update the corresponding notification with the data we just sent.
(this updation is a requirement of android sdk)

Caveats:
- notifications aren't updated after reply is sent see 65ea451
- the whole process is a little slow atleast in debug build.
- cannot reply for an account other than the active one, won't be able to find auth. 


references:
- headless js: https://reactnative.dev/docs/headless-js-android
- tutorial: https://medium.com/software-engineers-toolbox/direct-reply-notification-for-android-in-4-steps-5612b49b5487
- https://developer.android.com/training/notify-user/build-notification#reply-action

Fixes: #4861",False,4945,https://api.github.com/repos/zulip/zulip-mobile/pulls/4945,https://github.com/zulip/zulip-mobile/pull/4945,open,344,294,17,20,3,0,0,0,[],2021-08-05 16:02:34+00:00,,0.0,,[],"[{'commit_sha': '120d6ff0b140d4d672051dfbaa1ca9cd3122f4b4', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ad12f6f64a6f335ae0d8cfa5a80eb60548f83ee', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae59e3bd5ef739acaf5714ed1c283d4e4da67c39', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '843b837df100d606c98aa4ddba3cfdf2572e6c03', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36727230482398963f1a4acc067d08ac5c8b73f7', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fa79f22e024c652143d1af57121e989def9b9d6', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69448f024e11a104da2badabd8782694e80197cb', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '490b5466ae51a77a84041713736440bd27d6f391', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b6f803cd19ce6d90ba767eb7ed2e0ebd880e167', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '715d3fcfe55f72ff86a11711b5236d2ac23e328e', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bba49839d73a700a7712d21e162953f2f26bc0a6', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d09d99b96ad3d18da868754f30c2a8ffc788a8', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '792972ea962b6c87346237611b593f2a24e04a9c', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e5edc43164486cf95a69aeebf76fed68d5b6f6f', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9346796481dad4577d66e4958538023e4ec2a3', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f80f0a6b5fbf220ea5aed1d56e32946a477b053', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf91b28eee5badf5da64de9323817383c8e68ab3', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8f89ee339494e1ec59902104e6966370110e4f1', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65ea451ede51958afc2735ee99089a9834f31a27', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc83cc8f54f281d185d089e54a635fe6567b7ce7', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
681920906,[Android] Improve notification UI.,"The first 3 commits are updating some related code.

The next 4 commits are adding/removing some data structures to facilitate building up of this UI.

The last 2 commits are involved in changing the notification structure
- first one makes it so that the app shows 1 notifications per conversation.
- second one groups the notification.

Summary notification is not yet implemented correctly in this PR, and will show incorrect information (gives summary for all notifications on a summary notification for 1 realm) when API < 24 and user is logged in with multiple realms.

Some methods may no longer be needed, yet are not removed because they may prove useful in implementing other features.

This skips #4633 and fixes part of #2691, part of because summary notification is not yet implemented properly.

some screenshots of the same:
## Summary notification:
![WhatsApp Image 2021-07-01 at 7 55 32 PM (4)](https://user-images.githubusercontent.com/40268170/124141037-aa35a200-daa6-11eb-8447-c520a27a8e0b.jpeg)

## Summary expanded
![WhatsApp Image 2021-07-01 at 7 55 32 PM (3)](https://user-images.githubusercontent.com/40268170/124141028-a86bde80-daa6-11eb-9f65-4ddc57dfbd0b.jpeg)

## Individually Expanded
![WhatsApp Image 2021-07-01 at 7 55 32 PM (2)](https://user-images.githubusercontent.com/40268170/124141021-a6a21b00-daa6-11eb-90b0-9009857c8613.jpeg)

## Message from Another realm
![WhatsApp Image 2021-07-01 at 7 55 32 PM](https://user-images.githubusercontent.com/40268170/124141015-a4d85780-daa6-11eb-980c-cb37b94f3c29.jpeg)

## Future Work
- Provide a proper summary notification.
- Add action buttons to mark as read, mute topic and reply from notification.
- Add custom sound.
- Remove redundant code.",True,4842,https://api.github.com/repos/zulip/zulip-mobile/pulls/4842,https://github.com/zulip/zulip-mobile/pull/4842,closed,198,225,8,11,14,57,3,0,"[{'name': 'a-Android'}, {'name': 'a-notifications'}, {'name': 'P1 high-priority'}]",2021-07-01 14:38:59+00:00,2021-11-08 23:45:49+00:00,11264810.0,"130 days, 9:06:50","[{'comment_id': 685527015, 'comment_body': ""This looks like a conflict-resolution error; this line was recently deleted (moved to another file), and I'm guessing you didn't intend to add it back.\r\n"", 'comment_created': datetime.datetime(2021, 8, 9, 21, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685535372, 'comment_body': 'Thanks for those links to release notes -- those are very helpful!\r\n\r\n         Something related but not done in this commit is to update\r\n         firebase-messaging itself, which as of now stands at 22.0.0 .\r\n\r\nYeah. Reading through the entries in [that release-notes page](https://firebase.google.com/support/release-notes/android) for ""Instance ID"" and ""Cloud Messaging"", it looks like there are some further changes we\'ll need to adapt to as we do that upgrade.\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 21, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685536833, 'comment_body': ""(This comment is a reminder to myself to wordsmith this message when I'm about to merge this change.)"", 'comment_created': datetime.datetime(2021, 8, 9, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685539027, 'comment_body': ""Huh, odd that it isn't available in `NotificationCompatManager`. Do you know what the story is there?\r\n\r\nI'd expect the compat library to cover all the functionality that's there in the latest Android SDK. So when a given method or property isn't there, my first thought is that that's a signal that there's some other preferred way to do the same thing.\r\n"", 'comment_created': datetime.datetime(2021, 8, 9, 21, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685542389, 'comment_body': 'Neat. Can we simplify this a bit more, by using a string ""tag"" instead of this extra?\r\n\r\nThat is, use `StatusBarNotification#getTag`:\r\nhttps://developer.android.com/reference/android/service/notification/StatusBarNotification#getTag()\r\nand when we\'re posting the `Notification` in the first place, use the form of `notify` that takes a string ""tag"":\r\nhttps://developer.android.com/reference/android/app/NotificationManager#notify(java.lang.String,%20int,%20android.app.Notification)\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 21, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685546372, 'comment_body': 'The `!!` here means we\'ll crash if `fcmMessage.identity` is null.\r\n\r\nThat\'s kind of concerning. If we have a good reason to be confident it won\'t be null, that reason doesn\'t live in this function; so wherever that reason does live, we should take care of it there and give this code a way to get an identity that is known not to be null.\r\n\r\nThis is an example of the idea of ""crunchy shell, soft center"", which I describe here:\r\nhttps://github.com/zulip/zulip-mobile/blob/master/docs/architecture/crunchy-shell.md\r\n\r\n----\r\n\r\nIt looks like `identity` should be present on notifications from servers v1.8.0 and up -- quoting from our notes in `FcmMessage.kt`:\r\n```kt\r\n    data[""server""]?.let { serverHost ->\r\n        Identity(\r\n            // `server` was added in server version 1.8.0\r\n            // (released 2018-04-16; commit 014900c2e).\r\n            serverHost = serverHost,\r\n```\r\nSo at this point we can say we\'re not supporting older servers; we can have the `MessageFcmMessage` type say `identity: Identity` instead of `identity: Identity?`, and have the parsing code in `FcmMessage.kt` just reject a notification-message that doesn\'t have the data we need for that.\r\n\r\nThen this code can more reassuringly just say `.identity.realmUri`.\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 21, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685547963, 'comment_body': ""    TODO: Add a Text saying n messages in m conversations. (this will\r\n    only be visible in API < 24)\r\n\r\nLet's put this TODO in a comment in the code, rather than in the commit message. It's really something that applies to the code after this change (and continues to apply to this code into the future, until the TODO is completed or something else changes), rather than something that applies to the change itself.\r\n"", 'comment_created': datetime.datetime(2021, 8, 9, 21, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685549751, 'comment_body': 'Separately: `realmUri`, on the `Identity` type, can also be null.\r\n```kt\r\n            // `realm_uri` was added in server version 1.9.0\r\n            // (released 2018-11-06; commit 5f8d193bb).\r\n            realmUri = data[""realm_uri""]?.parseUrl(""realm_uri""),\r\n```\r\n\r\nWe should fix that the same way.\r\n\r\nThe type-checker didn\'t complain here, because `toString` works even on `null`: it returns the string ""null"". But we don\'t really want to be displaying ""null"" to the user. :stuck_out_tongue: \r\n', 'comment_created': datetime.datetime(2021, 8, 9, 21, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685552642, 'comment_body': 'This should get the same ""should agree"" marker comment as on the other instance of this color.\r\n\r\nHmm, better yet, since we\'re making two of these: there should be a private constant at the top of this file, which has these numbers in it and has that comment. Then they can both refer to that one copy.\r\n\r\nThe main reason the comment is helpful is if/when we change `BRAND_COLOR` again in the future, the comment will come up on a grep for that name, which makes us a lot more likely to spot that this should be updated.\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 22, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685555807, 'comment_body': ""    notif [nfc]: Implement summary notification.\r\n    \r\n    Summary Notification is only visible in API < 24. But are required\r\n    by Android regardless, without them no notification with a group\r\n    will be shown.\r\n\r\nHow did you find that it's required by Android even on newer versions?\r\n\r\nFrom the guide doc for this feature:\r\nhttps://developer.android.com/training/notify-user/group\r\nit sounds more optional than that:\r\n> To support older versions, you can also add a summary notification [â€¦]\r\n\r\nIf we don't need this when on Android 7+ (aka API 24+), then it's probably time to drop support for older Android. We'd have to take a quick look at the numbers, but older versions were down to 3% [a year ago](https://chat.zulip.org/#narrow/stream/48-mobile/topic/platform.20versions/near/1012192), so by now they're probably down into the range where we can cheerfully drop support. And being able to keep this code simpler would definitely be a good reason to do it if so.\r\n"", 'comment_created': datetime.datetime(2021, 8, 9, 22, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685557497, 'comment_body': 'Kotlin tips: `builder.apply { â€¦ } ; return builder` can be just `return builder.apply { â€¦ }`.\r\n\r\nAnd then that plus the `builder` initializer can be further simplified to:\r\n```kt\r\n    return NotificationCompat.Builder(context, CHANNEL_ID).apply {\r\n      // â€¦\r\n    }\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 22, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685558258, 'comment_body': 'Two small things:\r\n* ""You"" should be a string resource so it can get translated.\r\n* Let\'s call this `selfUser`, to disambiguate that it\'s the person using the app through this client, rather than some other user they\'re interacting with. (It is, right?) That\'s the term we use widely for this in the JS code.\r\n', 'comment_created': datetime.datetime(2021, 8, 9, 22, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685559185, 'comment_body': 'Cleaner to define this with its own little `when`-expression, rather than intermingling it with the definition of `title`.\r\n\r\nControl flow is cheap, and separating these makes the code easier for us humans reading it :wink:', 'comment_created': datetime.datetime(2021, 8, 9, 22, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685663465, 'comment_body': 'This is an important bit! :slightly_smiling_face: Definitely interested in seeing how we can handle this part too, with the new design.', 'comment_created': datetime.datetime(2021, 8, 10, 3, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685664767, 'comment_body': ""We probably actually don't want this action anymore. Its functionality was to clear the whole contents of the one UI notification we currently show (by clearing out all the different notification messages we have in the conversations map); but with the new form of notification, the system provides better UI for dismissing notifications.\r\n"", 'comment_created': datetime.datetime(2021, 8, 10, 3, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685665746, 'comment_body': 'One thing I happened to run across just now in the MessagingStyle doc:\r\nhttps://developer.android.com/reference/androidx/core/app/NotificationCompat.MessagingStyle\r\n\r\n> Do not set a conversation title for one-on-one chats, since platforms use the existence of this field as a hint that the conversation is a group.\r\n\r\nSo we should skip `setConversationTitle` for the 1:1 case. Seems redundant with `setGroupConversation`, but :shrug: \r\n', 'comment_created': datetime.datetime(2021, 8, 10, 3, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685666577, 'comment_body': ""Ah, down in the `isGroupConversation` entry on that page, it explains that this stops mattering with Android 9 P. That's good.\r\n\r\nAnd from the `setConversationTitle` entry:\r\n> This behavior can be overridden by calling `setGroupConversation(boolean)` regardless of SDK version.\r\n\r\nCool, then -- we are calling `setGroupConversation`, so we can go ahead and call `setConversationTitle` without worrying about this wrinkle. Seems like the class-level doc is just out of date for these API changes."", 'comment_created': datetime.datetime(2021, 8, 10, 3, 39, 30, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685671152, 'comment_body': 'Let\'s pull this line out as its own helper function, taking an `Identity` and returning a `String` to be used as the notification-group key.\r\n\r\nThe reason that\'s helpful is that it helps put a spotlight on the semantics this is supposed to have:\r\n* It should be constant for a given identity.\r\n* It should be distinct for distinct identities.\r\n\r\nThen the one tweak I\'d like to make to this definition, thanks to that framing, is: instead of `;` let\'s use `|`.\r\n\r\nI think using `;` does in fact meet those two criteria for the behavior, because it can\'t appear in the user ID (which is just going to be a decimal integer, because we\'re stringifying it from an int right here.) But it *can* perhaps appear in the realm URL -- it can certainly appear in URLs, in particular because it\'s a [""URL code point""](https://url.spec.whatwg.org/#url-code-points) in the URL spec\'s terms -- which makes it a bit more subtle than it could be to see that it works. Using `|` means it\'s easier to see, in more ways, that it behaves correctly, because `|` is not a URL code point and can\'t appear in the URL (nor in the user ID.)\r\n', 'comment_created': datetime.datetime(2021, 8, 10, 3, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685671304, 'comment_body': ""Similarly let's use `|` here, just to keep it the same delimiter in both places."", 'comment_created': datetime.datetime(2021, 8, 10, 3, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685678091, 'comment_body': ""And let's pull this out as its own helper function too, this one taking the `FcmMessage`. This helper's job is:\r\n* The result should be constant for a given conversation.\r\n* It should be distinct for distinct conversations.\r\n\r\nThat points at a few improvements we can make, relative to the solution of using the user-facing title as it's defined above:\r\n* For type `Recipient.Pm`, use `sender.id` instead of `sender.fullName`. That way (a) it doesn't get messed up if they change their name, (b) there's no possibility of the key getting confused because the delimiter character appeared in the data.\r\n  * Before relying on `sender.id`, we should make it non-null, the same way as `identity` as discussed above; our notes say this also dates to server v1.8.0.\r\n  * If we didn't reliably have `sender.id`, then `sender.email` would be a next-best solution.\r\n* For `Recipient.GroupPm`, `recipient.pmUsers` is perfect. Best to skip the `getString`, in fact, so this internal data structure's workings aren't complicated by interactions with a translated user-facing string.\r\n* For `Recipient.Stream`... ideally we'd use the stream ID instead of the stream name, but it looks like we don't currently have that in the data. For now, I guess we can settle for a TODO comment in the code saying to switch to stream ID. And for a delimiter, let's use the character `\\x00`, for the same reason as we do that in `keyFromNarrow` in `narrow.js`:\r\n  ```js\r\n      // '\\x00' is the one character not allowed in Zulip stream names.\r\n      // (See `check_stream_name` in zulip.git:zerver/lib/streams.py.)\r\n      topic: (streamName, topic) => `topic:s:${streamName}\\x00${topic}`,\r\n  ```\r\n* Oh also, looking at `keyFromNarrow` reminds me: for these conversation keys let's also have a different fixed prefix for each of the three types of recipient. That way, each of the three different ways we format a conversation key always has a distinct prefix, so it's easy to be sure that they'll never accidentally collide with each other.\r\n"", 'comment_created': datetime.datetime(2021, 8, 10, 4, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685684379, 'comment_body': ""This is one chunk that I notice doesn't have a counterpart in the new code.\r\n\r\nLooking at the API docs, I see that it has no effect on Android 8 O and up!\r\nhttps://developer.android.com/reference/androidx/core/app/NotificationCompat.Builder#setSound(android.net.Uri)\r\nSo it wasn't doing us a lot of good. But: that's because we're supposed to be calling the corresponding method on the notification *channel*'s builder instead:\r\nhttps://developer.android.com/reference/androidx/core/app/NotificationChannelCompat.Builder#setSound(android.net.Uri,%20android.media.AudioAttributes)\r\n\r\nSo it seems like that's something we neglected to take care of when we started using a notification channel a few years ago. But seeing this code and deleting it gives us a nice reminder of how we should be doing it. Would you add a few lines to our `createNotificationChannel` to fix that?\r\n\r\nThe very cleanest thing would be to make sure we continue to do it on the notification itself, for the sake of pre-Android 8 devices, as well as on the channel. But at this point those devices are well into the single-digit percent (they [were 9.0%](https://chat.zulip.org/#narrow/stream/48-mobile/topic/platform.20versions/near/1012192) almost a year ago), so graceful degradation is okay, and I'd be happy with a version that only does it on the channel.\r\n"", 'comment_created': datetime.datetime(2021, 8, 10, 4, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 685689552, 'comment_body': ""Hmm -- can you post a screenshot of how this description appears in the UI? That would help me wordsmith the text for the description.\r\n\r\nI'm not actually seeing anything that looks like this when I browse around the notification settings for other apps on my phone, which is making me suspect that my phone (Android 11 on a Pixel) just ignores the description. I also don't see anything that looks like it in the handy guide doc you linked:\r\nhttps://developer.android.com/training/notify-user/channels\r\n"", 'comment_created': datetime.datetime(2021, 8, 10, 4, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 692234053, 'comment_body': ""> Do you know what the story is there?\r\n\r\nNot sure about this, I couldn't find any reference for why this is the case.\r\n\r\nOn a side note it is also possible to get active notification via [NotificationListenerService#getActiveNotifications](https://developer.android.com/reference/android/service/notification/NotificationListenerService#getActiveNotifications(java.lang.String[])) so they could have nicely consolidated this for most of the android versions. This is how one can get `activeNotifications` in API < 23."", 'comment_created': datetime.datetime(2021, 8, 19, 15, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 692234242, 'comment_body': 'doing it this way in the new revision thanks for that!', 'comment_created': datetime.datetime(2021, 8, 19, 15, 31, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 692234397, 'comment_body': 'changed realmUri and Identity and Sender.id to be Non Nullable in the class.', 'comment_created': datetime.datetime(2021, 8, 19, 15, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 692234828, 'comment_body': ""done, Shouldn't this ideally be in `colors.xml`, so that we only have to update it in one place."", 'comment_created': datetime.datetime(2021, 8, 19, 15, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 692234996, 'comment_body': ""> How did you find that it's required by Android even on newer versions?\r\n\r\nI tested a build without summary Notification, specifically without the notify call to summaryNotification, observation is that notification do occur but they don't group together, even in android 7+. It seems that this notify call triggers the actual grouping.\r\n\r\nAlso while they don't appear completely in Android 7+, (since they get overridden by the summary notification built by the Android OS) they still have some visual influence on how the summary notification looks, for instance, setting\r\n`summaryText` shows as the [header text](https://material.io/design/platform-guidance/android-notifications.html#anatomy-of-a-notification) in summary notification."", 'comment_created': datetime.datetime(2021, 8, 19, 15, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 692235363, 'comment_body': '> It is, right?\r\n\r\nYes its the person using the app through this client.', 'comment_created': datetime.datetime(2021, 8, 19, 15, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 692235633, 'comment_body': 'This is the only thing that remains to be implemented properly, I have made a ""hacky"" version but it has few problems, see 1b9d2e7 for detail.', 'comment_created': datetime.datetime(2021, 8, 19, 15, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 692236016, 'comment_body': ""I am assuming I don't have to do anything for this then right? (its unchanged in the new revision)"", 'comment_created': datetime.datetime(2021, 8, 19, 15, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 692236226, 'comment_body': ""done, using `\\u0000` instead of `\\x00`, kotlin was not letting me use `\\x`, I hope that's fine"", 'comment_created': datetime.datetime(2021, 8, 19, 15, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 692309385, 'comment_body': ""Yep, that's right!"", 'comment_created': datetime.datetime(2021, 8, 19, 16, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 692311170, 'comment_body': 'Sure -- that should be another way (and I guess the only way, in Kotlin) of spelling the same thing.', 'comment_created': datetime.datetime(2021, 8, 19, 16, 44, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 692311543, 'comment_body': '<img width=""331"" alt=""Screenshot 2021-08-19 at 10 12 20 PM"" src=""https://user-images.githubusercontent.com/40268170/130109223-5abdf968-ed5b-4ac9-af2a-f44806983041.png"">\r\n\r\nAt the very end it is the grayed out message. This is accessible on tapping the notification channel name from the app setting.', 'comment_created': datetime.datetime(2021, 8, 19, 16, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 705415062, 'comment_body': ""I have added `audioAttr` use in channel as defined previously for notification builder.\r\n`NotificationCompat.Builder` doesn't allow me to call `setSound` with `audioAttr` (there is no function with that signature in `NotificationCompat.Builder`) so i don't think i can easily add it there."", 'comment_created': datetime.datetime(2021, 9, 9, 14, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 719097181, 'comment_body': 'Ah interesting.\r\n\r\nCan we compute the exact `groupKey` we expect to see here? Perhaps something like `""com.zulipmobile"" + extractGroupKey(fcmMessage.identity)`? (Except that hardcodes the package name, and we should instead use whatever the appropriate API is to refer to it.) (Also, whatever computation is needed should go in its own tiny helper function, probably right next to `extractGroupKey` itself, so it can get a name and javadoc to help explain what it means.)\r\n\r\nThen we could use `==` instead of `endsWith`, which would be cleaner because it\'s easier to confidently reason about. With `endsWith`, we have to worry about whether it\'s possible for one of our `groupKey` values to just happen to end with another one, so that there\'d be an accidental match here. It\'d be possible to design the format of the group keys to rule that out, if we have toâ€¦ but it\'s cleaner, if we can, to just not have that be a possible problem in the first place.\r\n', 'comment_created': datetime.datetime(2021, 9, 30, 6, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719098074, 'comment_body': ""Let's give this a plural name, `getActiveNotifications`. That matches the underlying `activeNotifications` property, as well as the fact that the return value is an array with potentially multiple notifications.\r\n"", 'comment_created': datetime.datetime(2021, 9, 30, 6, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719102261, 'comment_body': 'If I\'m understanding this code right, then we don\'t want this `break` here.\r\n\r\nIt\'s possible to get one of these ""remove"" FCM messages that refers to Zulip messages across several different conversations -- for example if you have notifications from several topics in a stream and you go read all those messages at once, or from several PM threads and you go read those at once, perhaps from the ""Private messages"" view in the web app or perhaps from the ""All messages"" view.\r\n\r\nWhen that happens, we may have several of these `StatusBarNotification` objects we want to go and cancel, right? So we just want to continue this loop until we\'ve gone through all of them.\r\n', 'comment_created': datetime.datetime(2021, 9, 30, 6, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719110864, 'comment_body': 'I believe the key context for what this logic is doing is:\r\n* Each `StatusBarNotification` corresponds to one Zulip conversation.\r\n* The `zulipMessageId` extra corresponds to the *last* Zulip-message ID in that conversation.\r\n\r\nIs that right? If so, I think a couple of one-line comments would help orient the reader to what\'s meant to be going on here. For exampleâ€¦ actually, better. Let\'s *name* the extra to help make that clear, like `lastZulipMessageId`. Then something like:\r\n```suggestion\r\n    val statusBarNotifications = getActiveNotification(context) ?: return\r\n    val groupKey = extractGroupKey(fcmMessage.identity)\r\n    // Find any conversations we can cancel the notification for.\r\n    // The API doesn\'t lend itself to removing individual messages as\r\n    // they\'re read, so we wait until we\'re ready to remove the whole\r\n    // conversation\'s notification.\r\n    for (statusBarNotification in statusBarNotifications) {\r\n        // Each statusBarNotification represents one Zulip conversation.\r\n        val notification = statusBarNotification.notification\r\n        val lastMessageId = notification.extras.getInt(""lastZulipMessageId"")\r\n        if (fcmMessage.messageIds.contains(lastMessageId)) {\r\n            // The latest Zulip message in this conversation was read.\r\n            // That\'s our cue to cancel the notification for the conversation.\r\n            NotificationManagerCompat.from(context).cancel(statusBarNotification.tag, statusBarNotification.id)\r\n```\r\nThat\'s a one-line comment to mention the first point, and some more comments for the ""why"" of what we\'re doing with the conversation\'s last Zulip-message ID.\r\n', 'comment_created': datetime.datetime(2021, 9, 30, 6, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719121240, 'comment_body': ""It looks like this file was included unintentionally.\r\n\r\nWant to add a line for it to our gitignore? Probably it should go in this block:\r\n```\r\n# VS Code: default Java extension\r\n/android/.project\r\n/android/.settings/\r\n```\r\nwhich already has a similar line. Though if that comment doesn't describe how you ended up with this file, then we'd update the comment too.\r\n"", 'comment_created': datetime.datetime(2021, 9, 30, 7, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719122585, 'comment_body': 'Oh also, in that first comment a link to https://github.com/zulip/zulip-mobile/pull/4842#pullrequestreview-725817909 would be helpful, to give a pointer back into the history of our reasoning.\r\n', 'comment_created': datetime.datetime(2021, 9, 30, 7, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719123898, 'comment_body': ""Hmm, yeah, good idea! That'd be a great change to make either before or after the commit where you add a new place we use the color.\r\n"", 'comment_created': datetime.datetime(2021, 9, 30, 7, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719129793, 'comment_body': '> I tested a build without summary Notification, specifically without the notify call to summaryNotification, observation is that notification do occur but they don\'t group together, even in android 7+. It seems that this notify call triggers the actual grouping.\r\n\r\nHmm fascinating -- thanks for determining that. Seems like a bug [in the docs](https://developer.android.com/training/notify-user/group) that they say it\'s optional, then.\r\n\r\nI guess in the example code says:\r\n```kt\r\nval summaryNotification = NotificationCompat.Builder(this@MainActivity, CHANNEL_ID)\r\n        .setContentTitle(emailObject.getSummary())\r\n        //set content text to support devices running API level < 24\r\n        .setContentText(""Two new messages"")\r\n        // [â€¦]\r\n```\r\nwhich makes it sound more like the actual situation you discovered, that the summary notification itself is required but the text is only for older devices.\r\n\r\nWe did [find when I looked recently](https://chat.zulip.org/#narrow/stream/48-mobile/topic/platform.20versions/near/1254509) that indeed Android 6 and older is down to a small enough sliver of our userbase that it makes sense to drop support for it as soon as there\'s something where supporting it would make things more complicated for us. So I think we won\'t go and add a summary text, and instead will just drop support and increase the minimum to Android 7.\r\n', 'comment_created': datetime.datetime(2021, 9, 30, 7, 25, 17, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719130444, 'comment_body': '> * ""You"" should be a string resource so it can get translated.\r\n\r\nbump', 'comment_created': datetime.datetime(2021, 9, 30, 7, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719137940, 'comment_body': 'Fascinating, thanks.\r\n\r\nDo you see this on any other apps you happen to have lying around? I just looked at this part of the UI for several well-known apps -- including Facebook Messenger, which has an extensive set of notification categories, so they\'ve clearly paid attention to this area of the API, and also including Android Messages, which ditto plus it\'s actually from the Android group at Google -- and I don\'t see a grayed-out message like that at all. There\'s the ""Advanced"" section, and then nothing after that. (Also, just to confirm: what Android version are you on?)\r\n\r\nIf other app makers, including the Google Android group itself, aren\'t using this feature, then we clearly don\'t need to feel obligated to do so, and I\'m inclined to skip it. I think the category\'s name itself can convey all the same information -- perhaps we should rename it ""All messages"" to be clearer -- and the way the UI ends up presenting this description text feels pretty out-of-context and not likely to be helpful.\r\n', 'comment_created': datetime.datetime(2021, 9, 30, 7, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719142609, 'comment_body': ""This initializer looks like it'll involve executing a bit of code; which I think means that'll happen when this JVM class is loaded, so basically at app startup. Generally it's best to avoid executing code at the top level like this, because it adds up across a codebase to make programs slow to start up. (Also because in some situations it can suffer races, though I don't think that's an issue here.)\r\n\r\nInstead, this can be a little helper function instead of a constant. Or, if we're using it in just one place, it could go inside that function.\r\n"", 'comment_created': datetime.datetime(2021, 9, 30, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719145580, 'comment_body': 'A fun Kotlin tip to simplify this sort of logic: `?.let`. Here:\r\n```kt\r\n    val messagingStyle = notification?.let {\r\n        NotificationCompat.MessagingStyle.extractMessagingStyleFromNotification(it)\r\n    } ?: NotificationCompat.MessagingStyle(selfUser)\r\n```\r\nThat lets you deduplicate the `NotificationCompat.MessagingStyle(selfUser)` fallback case.\r\n', 'comment_created': datetime.datetime(2021, 9, 30, 7, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719153674, 'comment_body': 'Hmm, I\'m thinking about this comment. It\'s true, we may have several notifications here with the same ""id"", the same second argument to `notify`, because it\'s the Zulip message ID. And we\'ve designed the ""tag"", the first argument, so that it on the other hand is unique.\r\n\r\nBut we don\'t actually need both the tag and the ID in order to uniquely identify a notification, do we? I think just the tag alone does it.\r\n\r\nIs there a thing this comment is telling the reader to do? It reads like it\'s warning about a pitfall, where some other code we write needs to be careful not to do something wrong. But after studying it, I *think* the point is just as an explanation of why we use this three-argument form of `notify`, with the tag arguments.\r\n', 'comment_created': datetime.datetime(2021, 9, 30, 7, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 719157582, 'comment_body': 'Looking again at these notification ""id""s, the second argument to each of these `notify` calls:\r\n\r\nDo we ever use the fact that the summaries have the realm ID as their notification ID? I think we don\'t; and I think if we did, that would probably be a bug, because realm IDs are per-server and in fact are highly likely to collide between any two servers other than Zulip Cloud (because they\'ll probably both be the only realm on the server.) If we don\'t, how about just using a constant ID, like 1? That would help make it clear that we\'re relying entirely on the tags.\r\n\r\nSimilarly, do we ever use the fact that the notification IDs for individual conversations vary, or that they\'re Zulip message IDs? I think we don\'t, in which case it\'d similarly be good to just use a constant. It can even be the same constant -- we\'ve designed these keys so they don\'t collide between the two types, either.\r\n\r\n', 'comment_created': datetime.datetime(2021, 9, 30, 8, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 743001263, 'comment_body': 'using NOTIFICATION_ID, like the main branch here.', 'comment_created': datetime.datetime(2021, 11, 4, 16, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 743001401, 'comment_body': 'changed.', 'comment_created': datetime.datetime(2021, 11, 4, 16, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 743001473, 'comment_body': ""yes, there shouldn't be a need for break here."", 'comment_created': datetime.datetime(2021, 11, 4, 16, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 743001533, 'comment_body': 'using `statusBarNotification.notification.group == groupKey`, the `groupKey` in `statusBarNotification` contains ""ranking"" which may also have a number concatenated at the beginning which I am not sure how to compute.', 'comment_created': datetime.datetime(2021, 11, 4, 16, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 743874068, 'comment_body': 'Huh interesting. Well, glad that solution works.', 'comment_created': datetime.datetime(2021, 11, 5, 17, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 743876774, 'comment_body': ""nit: second line should be indented\r\n\r\n(really by whatever the autoformatter wants to do, probably, but if doing it without an autoformatter I'd go for 4 spaces)\r\n"", 'comment_created': datetime.datetime(2021, 11, 5, 18, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 743877971, 'comment_body': 'This could use a line or two of comment saying that we rely entirely on the tags to distinguish notifications, and so the ""IDs"" can be a constant. I.e. summarizing the reasoning at https://github.com/zulip/zulip-mobile/pull/4842#discussion_r719157582 .', 'comment_created': datetime.datetime(2021, 11, 5, 18, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 745176823, 'comment_body': 'I looked again at the settings UI where this name appears, and I think ""Messages"" works well as the name and ""All messages"" would be unnecessarily redundant.\r\n\r\nA couple of quick comparison points:\r\n* FB Messenger has ""Chats and calls"".\r\n* Android Messages has ""Incoming messages"".\r\n', 'comment_created': datetime.datetime(2021, 11, 8, 23, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': '6eaf7c89210e46989aff4d60aa2d97d3893bf2e4', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4cf3fbd36c94646342ab7fa7731469335cf3206', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ed100f5d5cfbb5bee3d014473ab08ee633678c6', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee5d1e097f3cbf4ac50f4e88f2cdfd545af61b18', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4229325b4e3421b4c04c6939907ba19945151521', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e32186cc7dbd2c8d480abeea28bb7958148def9c', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd605d0e6ca2031909a1e2925e9552ef8b8b338', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '115c70931de59eee86d1f2d8d7b1736e6fa9cccc', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaa8b4009bbb62429da6559d07c4507fe0efc9f1', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '938089bdfb6c965ca7ec0c7b46200aef4a83f259', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c716b6cce34d998484445d86cd46200b127355c2', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
660806548,Implement deep link functionality and enable it for android.,"The implementation in this PR allows user to open mobile app from a special `zulip://` link.
Current implementation is able to navigate to groups, PMs, streams, topics, mentions and starred messages as manually tested by me.
See the documentation addition in https://github.com/zulip/zulip-mobile/commit/d787626a8 to efficiently do a manual test yourself.

## Behavior
- On receiving an appropriate `zulip://` link, if the realm+email on the link matches with current active account, user will be navigated to the specific screen guided by the link.
- If the app is in background it comes to foreground and navigates, if it wasn't running, it starts and navigates.
- If the realm+email is not loggedIn, user is navigated to `realmInputScreen`.

## Caveats
- The current implementation does not work across logged in accounts, when such a case is present we navigate to the account the link was pointing to but fail to navigate to the screen (For a similar reason as #4630). Fix for this is unrelated to deeplink (see #4630)
- navigation deep link still won't work for iOS, a simple follow up native setup will be required for that.

Marking partly fixed because of the caveats.

Fixes-part-of: #4751",False,4775,https://api.github.com/repos/zulip/zulip-mobile/pulls/4775,https://github.com/zulip/zulip-mobile/pull/4775,open,220,72,12,10,0,0,1,0,[{'name': 'a-Android'}],2021-06-03 10:57:31+00:00,,0.0,,[],"[{'commit_sha': '24e76293cc2b1b3be9dacbeaf9092181ab6325bc', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80fb6cd2757382115e4636efa5f80fe5baf2cb7c', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cd1211e408a03934976e3e6e11654073e12f5f0', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '105174218878b57dbf986b8b66a587346aba19cf', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce6fc4753b8fd13ba9d9c4a7a4dc6b0f57d9c919', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4658f0d07f3d04cc978ac3d9957ece57d81bd74', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24a93b24eb4766e188077082165799c4b568efa5', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'def383fa53167584f1ce053c6d000587d6d2cdb1', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1df57dab88e061a6a1b59c08545eed6cce7cf2f', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc71cfb1e1002ee8bdfdee0fec4862ae3b9c5889', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8
690665921,Implement stream action sheets,"Also involves moving `messageActionSheet` to `src/action-sheet/index.js`.


Preview:
![WhatsApp Image 2021-07-15 at 5 43 39 PM](https://user-images.githubusercontent.com/40268170/125786544-bafa3971-09d0-46ca-b394-df64fdcae985.jpeg)

",True,4899,https://api.github.com/repos/zulip/zulip-mobile/pulls/4899,https://github.com/zulip/zulip-mobile/pull/4899,closed,344,44,14,10,5,13,0,0,[],2021-07-15 12:18:10+00:00,2021-10-06 03:00:44+00:00,7137754.0,"82 days, 14:42:34","[{'comment_id': 697078385, 'comment_body': ""I don't think you need this."", 'comment_created': datetime.datetime(2021, 8, 27, 1, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'WesleyAC', 'type': 'User'}, {'comment_id': 703932340, 'comment_body': ""The change at this line risks being significantly slower: the old code is linear (which isn't good), and the new code is still linear, but the new code does a linear amount of *allocation*, building up this new array, and that's potentially quite a bit more costly than just searching through an array.\r\n\r\nAnd this line is in the code that generates the HTML for the message list, so it's something we potentially do many times if the user is looking at a view with a lot of history (provided it's an interleaved view where the stream name appears in headers -- for example the @-mentions or starred-messages views, or a search view once we have #4859.)\r\n\r\nHappily, I think there is an easy solution! We already have the stream ID here, because `item` is a `Message | Outbox` with `type: 'stream'`, and those have a `stream_id`.\r\n\r\nSo we can just use `subscriptions.get(item.stream_id)`, much like in the spot in `action-sheets/index.js` that motivates this change.\r\n"", 'comment_created': datetime.datetime(2021, 9, 8, 0, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 703935807, 'comment_body': ""This logic isn't quite right. See the existing place we look at this `push_notifications` property, in `StreamSettingsScreen`:\r\n```js\r\n    const currentValue = subscription?.push_notifications ?? userSettingStreamNotification;\r\n```\r\n\r\nThat is, if `push_notifications` is nullish, then that doesn't necessarily mean the same as false -- it means it falls back to the value the user has chosen as their default, which may be true.\r\n\r\nWe should probably put that logic in one place; it's already a little awkward that it's duplicated within `StreamSettingsScreen.js`, and it'd be much more awkward (and much more risk of divergence) to have it duplicated across multiple files."", 'comment_created': datetime.datetime(2021, 9, 8, 0, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 703936419, 'comment_body': 'Is this TODO still applicable?', 'comment_created': datetime.datetime(2021, 9, 8, 0, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 703937918, 'comment_body': ""Also, it looks like `streamsByName` isn't needed for `backgroundData`, only for finding `stream` (and thereby the stream's ID.) So it'd be a bit cleaner to have that outside of `backgroundData`.\r\n\r\nThat would also then be helpful when we go on to have `StreamItem`'s parent pass it the stream ID, rather than making `StreamItem` look it up; if `streamsByName` is on its own outside `backgroundData`, it'll be easier then to see that it's no longer needed and cut it out.\r\n"", 'comment_created': datetime.datetime(2021, 9, 8, 0, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 706536239, 'comment_body': ""Hmm, I guess `Outbox` doesn't actually have `stream_id` yet: #3998. (Since #4667 it's there on the type as an optional property, but we never actually provide it.) So that simple solution won't yet work.\r\n\r\nThe most direct solution here would be to use the `subscriptions.values()` [iterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators) just like you're doing, but use it directly with something like a for/of loop, to avoid allocating a big array of all the elements.\r\n\r\nAnother solution would be to go ahead and pass down a `subscriptionsByName` value into this code, gotten from `getSubscriptionsByName`.\r\n"", 'comment_created': datetime.datetime(2021, 9, 11, 1, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 710217151, 'comment_body': 'using `for ... of`.', 'comment_created': datetime.datetime(2021, 9, 16, 15, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 710217433, 'comment_body': ""deduplicated it in `StreamSettingsScreen` by creating a common function in `src/stream`; although I am not sure if it's placed at the right location."", 'comment_created': datetime.datetime(2021, 9, 16, 15, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 710217527, 'comment_body': 'removed streamsByName.', 'comment_created': datetime.datetime(2021, 9, 16, 15, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AkashDhiman', 'type': 'User'}, {'comment_id': 722831289, 'comment_body': 'Cool, this solves the problem.\r\n\r\nSome nits I would do differently:\r\n* This is really about a subscription (the user\'s relationship to a stream, represented by a `Subscription` value) rather than a stream itself (represented by `Stream`), so I\'d put it in `src/subscriptions/` or perhaps `src/settings/`. (This is a distinction our existing code isn\'t super consistent about.)\r\n* I\'ve found it helpful to shift toward fewer, medium-size files rather than lots of tiny files. So instead of giving this its own file, I would make it the first thing added to a file named `src/subscriptions/subscriptionsModel.js` ~~or `src/settings/settingsModel.js`~~ (definitely ""subscriptions""; see below). See b21d7c58de80f40b15ca7de68c2575c5824fd9de (`muteModel`) for a recent example that\'s equally tiny for now. See `src/unread/unreadModel.js` for a larger example, with the reducer in the same file; this function would be a ""getter"", a lot like the function `getUnreadCountForTopic` (added in 0b4c2a446a62d424456cf61005cb23db8876f184) there.\r\n* I think my ideal version of this function would take the whole `PerAccountSettingsState` object, i.e. the return value of `getSettings`, rather than this one flag from it. That way the details of which piece of the user settings is relevant are internal to this function. That also means that where we have code which is ultimately going to call both this function and a few more like it, that code only needs to pass around a single settings object, and doesn\'t have to keep adding more bits of settings to pass down through the chain each time it has to call another function like this one.\r\n  * That is *very* recent, though -- I might not have felt the same way before splitting up `PerAccountSettingsState` vs `GlobalSettingsState`, which just happened in 3d98cf9c405da325ae740ea58b79c9fb749fbcc3 / #5017 a couple of weeks ago (and after you wrote this revision.) In any case I definitely haven\'t discussed or demonstrated this idea much in the past.\r\n  * Also this may involve a bit of refactoring in the layers above where this gets called. Like I said, I think this will lead to less churn there as we add more functions like this, but it means a bit more right now.\r\n* I\'d like the name to somehow indicate that it\'s per-stream, as contrasted with something like `state.settings.offlineNotification` which feels like this same name `getIsNotificationEnabled` could describe it too. The types already mean there isn\'t a great danger of outright mixing this up with something that isn\'t per-stream, but still it\'d be good to make it more immediately obvious to the reader.\r\n  * Something I quite like about this name is that it makes clear it\'s getting an on/off setting! The first few names I think of that do indicate it\'s per-stream, plus align with the property name `push_notifications`, are like `getStreamPushNotifications` and they sound like they\'re getting some actual notifications, whatever that would mean. A name that has both these good properties will probably be somewhat wordy, but I think that\'s OK.\r\n\r\nAll of those are things I\'m happy to take care of after we merge this PR, though -- no need to revise them here. This already solves the really key problem, which is that I want this logic in one place and with its own name.\r\n\r\n---\r\n\r\nOh, but one pair of things I think I would like to have before merge:\r\n* A bit of jsdoc saying what this is intended to mean.\r\n* A jsdoc comment on the `push_notifications` property where `Subscription` is defined, saying to use this function to interpret it.\r\n\r\nThose are key because the problem this is meant to solve is, when someone goes to use that property (just as you did in the original revision of this PR), we want the easy natural thing to be that they spot this function and use it so that they get the right behavior. So the comment from the property to help you find this function is a key part of that.\r\n\r\nHmm, and I guess thinking about that answers the question I was waffling on above about whether this goes in a ""subscription"" model or ""settings"" model: it should go in a `subscriptionsModel.js`, because this function is something you need in order to correctly interpret the subscriptions data. Or from another angle, the question this function is an answer to is a question that comes up when you\'re thinking about a subscription, not when you\'re thinking about settings.\r\n', 'comment_created': datetime.datetime(2021, 10, 6, 2, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 722832756, 'comment_body': ""Let's add a comment here that says `TODO(#3339)` (with parens just like that -- a consistent format is helpful for grepping.) That's because this spot was and still is an instance of #3339, but in this form with an explicit loop it's not as easy to spot when searching for instances of that issue. So the TODO tag will help make sure we find it when we're closing in on finishing that issue.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 10, 6, 2, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 722833706, 'comment_body': 'In this and the next couple of commits, it looks like the changes in this file got a bit messed up.\r\n\r\nI think the net changes at the end of the branch look right, though.', 'comment_created': datetime.datetime(2021, 10, 6, 2, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}, {'comment_id': 722851004, 'comment_body': ""Looks good, thanks! See nits at https://github.com/zulip/zulip-mobile/pull/4899#discussion_r722831289 . In particular the location I'd put it is in a new file `src/subscriptions/subscriptionsModel.js`; discussion in that comment.\r\n"", 'comment_created': datetime.datetime(2021, 10, 6, 3, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'gnprice', 'type': 'User'}]","[{'commit_sha': 'a64be1bee42d15e844206d4449931acf896ee348', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '825e6d5c74fce77d0c15084b4ac45173cff9a19e', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2614c1e4ae9530608ef5fa3691fb1ef4a5c45e8', 'committer_username': 'gnprice', 'committer_name': 'Greg Price', 'committer_email': None, 'commit_date': datetime.datetime(2008, 10, 8, 22, 41, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ad7d35912d4cdbe9289979db66857f54251bd2', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd689f6e6dd1e25385efe0d96448b162762c7c091', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd77391820092e176376a233666ef292831f8e735', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad08419e089b7ff1bd8af7846258d6cbdb08189c', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3400ee1eba0707d67d0f54658a818df10bd456e8', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46b2670cdc6c45f6136f581bf80c12be247cb641', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42710f865619c6f2f0b6893f1f3ddfb6f62cbce7', 'committer_username': 'AkashDhiman', 'committer_name': 'Akash Dhiman', 'committer_email': 'akash.d0407@gmail.com', 'commit_date': datetime.datetime(2018, 6, 14, 12, 31, 35, tzinfo=datetime.timezone.utc)}]",Akash Dhiman,40268170,akash.d0407@gmail.com,User,,25,,5,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
58298428,zulip-mobile,zulip/zulip-mobile,JavaScript,643,1274,36,96,10617,745,12,140,"[{'id': 777674587, 'number': 5125, 'closed': datetime.datetime(2023, 1, 12, 23, 20, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 10, 14, 50, 23, tzinfo=datetime.timezone.utc), 'time_taken': 37009826.0, 'time_delta': '428 days, 8:30:26', 'additions': 25, 'deletions': 18, 'state': 'closed'}, {'id': 758395791, 'number': 5052, 'closed': datetime.datetime(2023, 2, 14, 23, 18, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 14, 14, 15, 3, tzinfo=datetime.timezone.utc), 'time_taken': 42195789.0, 'time_delta': '488 days, 9:03:09', 'additions': 149, 'deletions': 255, 'state': 'closed'}, {'id': 711024820, 'number': 4956, 'closed': None, 'created': datetime.datetime(2021, 8, 12, 14, 28, 25, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 143, 'deletions': 33, 'state': 'open'}, {'id': 704838675, 'number': 4946, 'closed': datetime.datetime(2021, 8, 19, 20, 48, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 16, 8, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1226379.0, 'time_delta': '14 days, 4:39:39', 'additions': 24, 'deletions': 8, 'state': 'closed'}, {'id': 704834138, 'number': 4945, 'closed': None, 'created': datetime.datetime(2021, 8, 5, 16, 2, 34, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 344, 'deletions': 294, 'state': 'open'}, {'id': 702608878, 'number': 4938, 'closed': datetime.datetime(2021, 8, 5, 6, 40, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 3, 20, 56, 32, tzinfo=datetime.timezone.utc), 'time_taken': 121430.0, 'time_delta': '1 day, 9:43:50', 'additions': 16, 'deletions': 17, 'state': 'closed'}, {'id': 695419526, 'number': 4921, 'closed': datetime.datetime(2021, 7, 26, 19, 6, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 18, 50, 48, tzinfo=datetime.timezone.utc), 'time_taken': 346557.0, 'time_delta': '4 days, 0:15:57', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 692795863, 'number': 4905, 'closed': datetime.datetime(2021, 7, 20, 23, 0, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 17, 33, 33, tzinfo=datetime.timezone.utc), 'time_taken': 106021.0, 'time_delta': '1 day, 5:27:01', 'additions': 123, 'deletions': 83, 'state': 'closed'}, {'id': 690859669, 'number': 4900, 'closed': datetime.datetime(2021, 7, 21, 21, 27, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 16, 8, 7, tzinfo=datetime.timezone.utc), 'time_taken': 537545.0, 'time_delta': '6 days, 5:19:05', 'additions': 54, 'deletions': 12, 'state': 'closed'}, {'id': 690665921, 'number': 4899, 'closed': datetime.datetime(2021, 10, 6, 3, 0, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 12, 18, 10, tzinfo=datetime.timezone.utc), 'time_taken': 7137754.0, 'time_delta': '82 days, 14:42:34', 'additions': 344, 'deletions': 44, 'state': 'closed'}, {'id': 685476870, 'number': 4880, 'closed': datetime.datetime(2021, 7, 13, 0, 31, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 20, 7, 12, tzinfo=datetime.timezone.utc), 'time_taken': 447851.0, 'time_delta': '5 days, 4:24:11', 'additions': 50, 'deletions': 34, 'state': 'closed'}, {'id': 685419420, 'number': 4879, 'closed': datetime.datetime(2021, 7, 7, 21, 4, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 18, 30, 46, tzinfo=datetime.timezone.utc), 'time_taken': 9248.0, 'time_delta': '2:34:08', 'additions': 0, 'deletions': 1, 'state': 'closed'}, {'id': 681920906, 'number': 4842, 'closed': datetime.datetime(2021, 11, 8, 23, 45, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 14, 38, 59, tzinfo=datetime.timezone.utc), 'time_taken': 11264810.0, 'time_delta': '130 days, 9:06:50', 'additions': 198, 'deletions': 225, 'state': 'closed'}, {'id': 681162539, 'number': 4839, 'closed': datetime.datetime(2021, 7, 7, 0, 29, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 19, 21, 31, tzinfo=datetime.timezone.utc), 'time_taken': 536875.0, 'time_delta': '6 days, 5:07:55', 'additions': 0, 'deletions': 3, 'state': 'closed'}, {'id': 670590303, 'number': 4802, 'closed': datetime.datetime(2021, 6, 15, 22, 44, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 17, 2, 6, tzinfo=datetime.timezone.utc), 'time_taken': 20538.0, 'time_delta': '5:42:18', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 660806548, 'number': 4775, 'closed': None, 'created': datetime.datetime(2021, 6, 3, 10, 57, 31, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 220, 'deletions': 72, 'state': 'open'}, {'id': 651169267, 'number': 4761, 'closed': datetime.datetime(2021, 5, 26, 0, 4, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 24, 9, 12, 20, tzinfo=datetime.timezone.utc), 'time_taken': 139907.0, 'time_delta': '1 day, 14:51:47', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 650848258, 'number': 4759, 'closed': datetime.datetime(2021, 5, 28, 4, 17, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 23, 20, 7, 11, tzinfo=datetime.timezone.utc), 'time_taken': 375003.0, 'time_delta': '4 days, 8:10:03', 'additions': 23, 'deletions': 4, 'state': 'closed'}, {'id': 650183050, 'number': 4757, 'closed': datetime.datetime(2021, 7, 19, 17, 24, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 21, 18, 10, 20, tzinfo=datetime.timezone.utc), 'time_taken': 5094839.0, 'time_delta': '58 days, 23:13:59', 'additions': 424, 'deletions': 377, 'state': 'closed'}, {'id': 630985832, 'number': 4724, 'closed': datetime.datetime(2021, 5, 23, 22, 28, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 5, 23, 18, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1552226.0, 'time_delta': '17 days, 23:10:26', 'additions': 10, 'deletions': 3, 'state': 'closed'}, {'id': 612800742, 'number': 4635, 'closed': datetime.datetime(2021, 7, 2, 5, 56, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 10, 0, 51, 4, tzinfo=datetime.timezone.utc), 'time_taken': 7189505.0, 'time_delta': '83 days, 5:05:05', 'additions': 192, 'deletions': 97, 'state': 'closed'}, {'id': 608379069, 'number': 4590, 'closed': datetime.datetime(2021, 7, 1, 0, 34, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 3, 12, 28, 13, tzinfo=datetime.timezone.utc), 'time_taken': 7646764.0, 'time_delta': '88 days, 12:06:04', 'additions': 68, 'deletions': 11, 'state': 'closed'}, {'id': 597365165, 'number': 4554, 'closed': datetime.datetime(2021, 4, 7, 22, 31, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 20, 21, 49, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1557697.0, 'time_delta': '18 days, 0:41:37', 'additions': 76, 'deletions': 43, 'state': 'closed'}, {'id': 586838885, 'number': 4514, 'closed': datetime.datetime(2021, 5, 20, 22, 14, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 8, 14, 48, 39, tzinfo=datetime.timezone.utc), 'time_taken': 6333945.0, 'time_delta': '73 days, 7:25:45', 'additions': 41, 'deletions': 9, 'state': 'closed'}]"
