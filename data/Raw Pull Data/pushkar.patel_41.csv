pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
891851023,Change yaml to pyYaml and add pysftp in requirements,Based on discussions at #12.,True,13,https://api.github.com/repos/RADAR-base/radarpipeline/pulls/13,https://github.com/RADAR-base/radarpipeline/pull/13,closed,2,1,1,1,1,0,1,0,[{'name': 'enhancement'}],2022-03-28 13:59:52+00:00,2022-03-29 11:49:48+00:00,78596.0,21:49:56,[],"[{'commit_sha': '77996614799bde64ee5a946492067b0c7d187d56', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}]",pushkar,42088801,,User,,46,,133,695
926642701,Some minor corrections and typo fixes,Minor corrections and some typo fixes,True,14,https://api.github.com/repos/RADAR-base/radarpipeline/pulls/14,https://github.com/RADAR-base/radarpipeline/pull/14,closed,39,25,3,1,0,0,2,0,"[{'name': 'documentation'}, {'name': 'enhancement'}]",2022-05-03 14:33:59+00:00,2022-05-04 13:11:06+00:00,81427.0,22:37:07,[],"[{'commit_sha': '8f37622de5729310557602bac2903a11e9953f1e', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}]",pushkar,42088801,,User,,46,,133,695
1006427024,Add mock data input through pySpark,"Changes:

- Add mock data as a submodule of the repo (from https://github.com/RADAR-base-Analytics/mock-data)
- Create a Spark data reader class for reading CSV files through pyspark
- Improve error handling and logging
- Improve project file structure
- Setup code formatter, imports sorting and code style enforcement
- Improve type hinting
- Add SchemaReader module to read schema
- Add installation instructions in README

Fixes #11, #15, #3",True,17,https://api.github.com/repos/RADAR-base/radarpipeline/pulls/17,https://github.com/RADAR-base/radarpipeline/pull/17,closed,951,337,40,6,2,7,1,0,[{'name': 'enhancement'}],2022-07-23 22:04:11+00:00,2022-07-27 12:39:26+00:00,311715.0,"3 days, 14:35:15","[{'comment_id': 928670691, 'comment_body': 'Maybe add it in the README that you have to download the mock data as well (can be done using ```git submodule update --init --recursive```). A better option would be to download the mock data if it is unavailable, but that can be done in the future. \r\n', 'comment_created': datetime.datetime(2022, 7, 25, 9, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 928685231, 'comment_body': ""Rather than filtering all the data, wouldn't it make more sense to look for schema file by name. For RADAR data specifically, we know that file name would be ```schema_{directory_name}.json```. "", 'comment_created': datetime.datetime(2022, 7, 25, 9, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 928690691, 'comment_body': 'Not sure if this file is needed.', 'comment_created': datetime.datetime(2022, 7, 25, 10, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 928695308, 'comment_body': 'Rather than hard-coding ```mock-config.yaml```, we can have a ```config.yaml``` file which we can set mock-config. ', 'comment_created': datetime.datetime(2022, 7, 25, 10, 7, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 929888418, 'comment_body': 'How about specifying the downloading the submodule while cloning the repo itself through:\r\n```bash\r\n$ git clone --recurse-submodules https://github.com/RADAR-base/radar-pipeline.git\r\n```\r\n\r\nThis is would need only one command to get all the files, and we can add a section in the readme about submodules in case somebody wants to refetch/update those.\r\n\r\nThe idea of automatically checking and downloading the submodules is good. What are your thoughts about downloading them **only** when the user runs a mock pipeline for the first time (like how HuggingFace libraries download the transformer models when the user runs the model configuration call the first time)?', 'comment_created': datetime.datetime(2022, 7, 26, 12, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'thepushkarp', 'type': 'User'}, {'comment_id': 929889087, 'comment_body': 'Right. I was testing some things and missed deleting this file. Will remove.', 'comment_created': datetime.datetime(2022, 7, 26, 12, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'thepushkarp', 'type': 'User'}, {'comment_id': 929925472, 'comment_body': ""> How about specifying the downloading the submodule while cloning the repo itself through\r\n\r\nYes, that would work as well. \r\n\r\n> The idea of automatically checking and downloading the submodules is good. What are your thoughts about downloading them only when the user runs a mock pipeline for the first time \r\n\r\nYes, that's the perfect solution. If the mock data is unavailable, it will download it otherwise would use the mock data locally. \r\n"", 'comment_created': datetime.datetime(2022, 7, 26, 12, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}]","[{'commit_sha': '00cad6b9431cb6b8caa5f596ce2f7514f8665619', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e75e5cffc13064a7f8b0384012269482e17d76d3', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b1565842204eb804924bd4938919080ab0c055d', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d599f2cb75e7078fe920b2316aa746debda606a', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cd1cf8f758bd400261af47605f476f8ba685a9c', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a41d7ac0867ff401c3ce3177161546ea2d692c9f', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}]",pushkar,42088801,,User,,46,,133,695
1015613985,Ingestion improvements,"Changelog

- [x] Ingest all data at once
- [x] Download mock data automatically if unavailable
- [x] Check and fix datatype inconsistencies
- [x] Improve function docstrings and error messages",True,26,https://api.github.com/repos/RADAR-base/radarpipeline/pulls/26,https://github.com/RADAR-base/radarpipeline/pull/26,closed,698,449,17,7,3,0,1,0,[{'name': 'enhancement'}],2022-08-02 21:27:54+00:00,2022-08-16 18:48:52+00:00,1200058.0,"13 days, 21:20:58",[],"[{'commit_sha': 'c6db9255d809f0a23cd5a1df8b192a7942dd7709', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b3dfe4d97e61a0ec509527f0fbabfb2f4cb9116', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4126715612671bd99c3364d73c954d95a194c258', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce190224e707d93ff95e81235489f4421f5c867', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3e8ec9a0039da6eeb1db96941466bd177849132', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fd183bc058f65b90dd2183ee27fb09b567fa238', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '154c36390d741ffcd169731a97553ab0c787dee2', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}]",pushkar,42088801,,User,,46,,133,695
1057776982,Improve features codebase,"- Remove submodule
- Add __init__.py
- Modify some DF operations",True,2,https://api.github.com/repos/RADAR-base-Analytics/mockfeatures/pulls/2,https://github.com/RADAR-base-Analytics/mockfeatures/pull/2,closed,16,48,6,5,0,0,0,0,[],2022-09-15 19:05:04+00:00,2022-09-16 11:17:09+00:00,58325.0,16:12:05,[],"[{'commit_sha': 'ee92c3c97001c234946c715ff1384b88251c5a08', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e992d7f47285052c7316825133302e4a8b09d9f', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd415e55897ebc96085bae77814ca183b9941a9b6', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcb9a7585117d11ea5c268b3edeb8155aa3a5bbd', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c51d9d04c9e8825533bb6635750ca83c4b8050a8', 'committer_username': 'Hsankesara', 'committer_name': 'Heet Sankesara', 'committer_email': 'heetsankesara3@gmail.com', 'commit_date': datetime.datetime(2016, 8, 13, 14, 50, 31, tzinfo=datetime.timezone.utc)}]",pushkar,42088801,,User,,46,,133,695
1047489132,Add Feature and Data Export Modules,"- Add feature processing
- Add output module
- Add documentation
- Refactor codebase
- Update folder structure and submodules",True,30,https://api.github.com/repos/RADAR-base/radarpipeline/pulls/30,https://github.com/RADAR-base/radarpipeline/pull/30,closed,801,427,30,25,3,14,2,1,"[{'name': 'enhancement'}, {'name': 'help wanted'}]",2022-09-06 12:18:39+00:00,2022-09-22 09:33:57+00:00,1372518.0,"15 days, 21:15:18","[{'comment_id': 963639634, 'comment_body': ""remove print statements when you're done with the testing. "", 'comment_created': datetime.datetime(2022, 9, 6, 12, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 966967081, 'comment_body': 'One more change that would be preferable is that if the input is string only, it makes sense to return just one dict rather than list of dicts. \r\nYou can just add a couple of lines before return. \r\n\r\n```python\r\nif len(variable_data_list) == 1:\r\n  return variable_data_list[0]\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 11, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 966968028, 'comment_body': 'Same can be done on `get_data_by_user_id`,\r\n\r\n```python\r\n        if len(user_data_list)==1:\r\n            return user_data_list[0]\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 11, 30, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 966970337, 'comment_body': 'For some reason, `SparkCSVReader` is not reading `value.time `and `value.timeReceived`. I think it has something to do with Schema. ', 'comment_created': datetime.datetime(2022, 9, 9, 11, 33, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 967649901, 'comment_body': ""Strange. I'll check it out and see why its happening."", 'comment_created': datetime.datetime(2022, 9, 10, 13, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'thepushkarp', 'type': 'User'}, {'comment_id': 967779243, 'comment_body': 'Hey @Hsankesara,\r\n\r\nSeems like `SoarkCSVReader` is able to read the data with the time values as seen in the output below:\r\n<img width=""1021"" alt=""image"" src=""https://user-images.githubusercontent.com/42088801/189517138-83773c05-915e-4f89-b98b-1aaee523a861.png"">\r\n\r\nWhen this data is being sent to the features module, it is unable to read it as it is asking to use backticks to access the variable as per the error log:\r\n```\r\n Cannot resolve column name ""value.time"" among (key.projectId, key.userId, key.sourceId, value.time, value.timeReceived, value.batteryLevel, value.isPlugged, value.status); did you mean to quote the `value.time` column?\r\n```\r\n\r\nThis would be solved if we could send the data as a pandas dataframe by default (as pandas is more widely used than spark DFs) for the feature processing, and convert it back to spark dataframe when it is processed  It is related to this earlier comment of yours:\r\n> One more change we can do is ask the research what input format they are using, So we can convert pyspark df to a suitable format. Mock-feature uses pandas, so we should convert it to pandas df. But a more generic module would be helpful.\r\n\r\nThere are a few more considerations that we have to keep in mind:\r\n1. We should also allow the user to use feature processing on the Spark DF if they wish to through specifying it in the config (as you said earlier). But in these cases, the user should be aware of the typicalities of Spark DFs, such as this bakctick issue (though the error messages are helpful in identifying them). Can we go forward with the assumption that the user would be aware of these if they explicitly specify to use the Spark DF through the config?\r\n2. Converting Spark DF to Pandas and back to Spark would cause some computation overhead, which is fine for small data but can take a significant amount of time for larger data. I think we should go forward with the conversion to Pandas for now and can later work on optimizations/other methods to decrease this overhead.', 'comment_created': datetime.datetime(2022, 9, 11, 7, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'thepushkarp', 'type': 'User'}, {'comment_id': 968213083, 'comment_body': ""Hey Pushkar,\r\n\r\nWhen I was testing the module, I converted the spark data frame to pandas data frame, and it wasn't showing the time values for some reason. I will check it again. Maybe it's because of the backtick issue. \r\n\r\nI agree, we should allow user to choose what they want to use. If they are comfortable in using PySpark, then that should be encouraged. But yeah, let's go forward with converting it to pandas df, and we'll focus on optimization later. "", 'comment_created': datetime.datetime(2022, 9, 12, 9, 52, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 968223069, 'comment_body': 'Just tested it again, seems like the problem is still there. \r\n<img width=""1111"" alt=""Screenshot 2022-09-12 at 11 02 05"" src=""https://user-images.githubusercontent.com/21009715/189627095-790f67ec-5029-4e39-b5d4-79559d6a839d.png"">\r\n', 'comment_created': datetime.datetime(2022, 9, 12, 10, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 976571124, 'comment_body': 'can we also add the branch name along with GitHub repo? So we can pull a particular branch the researcher want. The default branch will be `main`.  ', 'comment_created': datetime.datetime(2022, 9, 21, 14, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 976580432, 'comment_body': 'what is the `self.df_type` is doing here? ', 'comment_created': datetime.datetime(2022, 9, 21, 14, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 976683492, 'comment_body': 'Yeah sure. This change is also mentioned in #31.\n\nI was thinking to add this feature with other enhancements in the next PR as this one was getting too big to track all the changes together.', 'comment_created': datetime.datetime(2022, 9, 21, 15, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'thepushkarp', 'type': 'User'}, {'comment_id': 976692707, 'comment_body': 'I had refactored all the datalib modules to use both pyspark and pandas DataFrames. This parameter is used so that in case any calculation requires a implementation specific operation then we can do them conditional on it.', 'comment_created': datetime.datetime(2022, 9, 21, 15, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'thepushkarp', 'type': 'User'}, {'comment_id': 977425610, 'comment_body': 'Sounds good. We can do it in the next PR. ', 'comment_created': datetime.datetime(2022, 9, 22, 9, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}, {'comment_id': 977425946, 'comment_body': 'Ah makes sense. Thanks', 'comment_created': datetime.datetime(2022, 9, 22, 9, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Hsankesara', 'type': 'User'}]","[{'commit_sha': 'd77f5b3f56f4d8d6cce4e0a1a11d179f9e09ebad', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a6d0ceff514ea23909996d9e2340a7e1cd16e24', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6084f7edf2dad0e98ae0965d2bad8644ebf5a080', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70cf5638caa8a234bea6d38c08e2e0b646ab6f1d', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fcaed26939826587803946f05208079b3527d97', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5841536cf34ca5480a779b4a53306042654290dd', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c4db4f74676afd31dbae3ee71c13708fa1a449e', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9770ac523141bb3dacffab3bc4f51863450059dd', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05882d26e845ab1a9f0122117e4a812f34891b4f', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9465786e1e794b62dc75df0e595294e27c474734', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7241173e0db148499f563ae576d5c89e2f4b053e', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2fc250d070ac711a64ce193f678239be63b92d4', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb622fb62e5ac1513a1f79a1026e8e658456f447', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8b2e558470217d2f44aef27be5835c0eeca9068', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c85823a5434c105534970d923c52c5deca89c55', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c386a6a6517a39eff4e2c76cbf553c7141dfb3b8', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3265f24f710aca2df7b4303832ff48039e31af4', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b71ca7272bca1cbbdce16b8d430ca5742776da69', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a6acc7919f2f112cc8381720374873ac3a53a73', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ec39791690f6611e087fda83f349e52b6d5fb4b', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d4e9a22068e9cd0cf8e7c1271539e50b39860e', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': '483e1a855c5914438b4d1223ed25631baab6dbf6', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddc30cf0c89a2ac9e3867241528fe13bfb9e00a4', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1ab07c2a78ebaf423425aa795e1ac4b163faba9', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b785dd29ca78f8cac03cd493d33a584713057eb8', 'committer_username': 'thepushkarp', 'committer_name': 'pushkar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 8, 4, 9, 37, 39, tzinfo=datetime.timezone.utc)}]",pushkar,42088801,,User,,46,,133,695

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
428238903,radarpipeline,RADAR-base/radarpipeline,Python,3,6,8,3,152,17,9,2,"[{'id': 1116484884, 'number': 55, 'closed': datetime.datetime(2022, 11, 17, 17, 31, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 9, 18, 9, 1, tzinfo=datetime.timezone.utc), 'time_taken': 688933.0, 'time_delta': '7 days, 23:22:13', 'additions': 303, 'deletions': 45, 'state': 'closed'}, {'id': 1084652082, 'number': 44, 'closed': datetime.datetime(2022, 10, 12, 14, 12, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 12, 12, 52, 39, tzinfo=datetime.timezone.utc), 'time_taken': 4800.0, 'time_delta': '1:20:00', 'additions': 1932, 'deletions': 20, 'state': 'closed'}, {'id': 1047489132, 'number': 30, 'closed': datetime.datetime(2022, 9, 22, 9, 33, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 12, 18, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1372518.0, 'time_delta': '15 days, 21:15:18', 'additions': 801, 'deletions': 427, 'state': 'closed'}, {'id': 1015613985, 'number': 26, 'closed': datetime.datetime(2022, 8, 16, 18, 48, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 21, 27, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1200058.0, 'time_delta': '13 days, 21:20:58', 'additions': 698, 'deletions': 449, 'state': 'closed'}, {'id': 1006427024, 'number': 17, 'closed': datetime.datetime(2022, 7, 27, 12, 39, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 23, 22, 4, 11, tzinfo=datetime.timezone.utc), 'time_taken': 311715.0, 'time_delta': '3 days, 14:35:15', 'additions': 951, 'deletions': 337, 'state': 'closed'}, {'id': 946039400, 'number': 16, 'closed': datetime.datetime(2022, 6, 26, 20, 45, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 24, 19, 15, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2856597.0, 'time_delta': '33 days, 1:29:57', 'additions': 107, 'deletions': 73, 'state': 'closed'}, {'id': 926642701, 'number': 14, 'closed': datetime.datetime(2022, 5, 4, 13, 11, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 3, 14, 33, 59, tzinfo=datetime.timezone.utc), 'time_taken': 81427.0, 'time_delta': '22:37:07', 'additions': 39, 'deletions': 25, 'state': 'closed'}, {'id': 891851023, 'number': 13, 'closed': datetime.datetime(2022, 3, 29, 11, 49, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 28, 13, 59, 52, tzinfo=datetime.timezone.utc), 'time_taken': 78596.0, 'time_delta': '21:49:56', 'additions': 2, 'deletions': 1, 'state': 'closed'}]"
523666760,mockfeatures,RADAR-base-Analytics/mockfeatures,Python,0,3,3,3,33,0,3,0,"[{'id': 1057776982, 'number': 2, 'closed': datetime.datetime(2022, 9, 16, 11, 17, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 15, 19, 5, 4, tzinfo=datetime.timezone.utc), 'time_taken': 58325.0, 'time_delta': '16:12:05', 'additions': 16, 'deletions': 48, 'state': 'closed'}, {'id': 1057421957, 'number': 1, 'closed': datetime.datetime(2022, 9, 15, 13, 47, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 15, 13, 46, 14, tzinfo=datetime.timezone.utc), 'time_taken': 84.0, 'time_delta': '0:01:24', 'additions': 16, 'deletions': 48, 'state': 'closed'}]"
