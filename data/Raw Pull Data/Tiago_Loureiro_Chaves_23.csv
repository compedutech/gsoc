pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
391238941,Add Vignette post-processing stage,"Added a new post-processing effect implementing Keijiro Takahashi's [KinoVignette](https://github.com/keijiro/KinoVignette).

![image](https://user-images.githubusercontent.com/13294013/77115197-a6deea00-6a0c-11ea-8bb9-0126fdd2f742.png)


This is a naive (almost) direct port of the aforementioned algorithm, as an attempt to add a simple new effect to appleseed.

| no vignetting | 0.5 intensity (**default**) | 1.0 intensity |
|---|---|---|
| ![no_vignette](https://user-images.githubusercontent.com/13294013/77114745-d3463680-6a0b-11ea-90b9-c1d46a6ec636.png) | ![vignette_0_5](https://user-images.githubusercontent.com/13294013/77114868-0ee10080-6a0c-11ea-8d61-a85135b4bd0f.png) | ![vignette_1_0](https://user-images.githubusercontent.com/13294013/77114874-10122d80-6a0c-11ea-81fd-9e0613325677.png) |

See https://www.shadertoy.com/view/3dXyDH for a GLSL port of the algorithm.",True,2807,https://api.github.com/repos/appleseedhq/appleseed/pulls/2807,https://github.com/appleseedhq/appleseed/pull/2807,closed,296,0,5,6,2,24,1,0,[{'name': 'PR | Squash'}],2020-03-19 21:10:04+00:00,2020-03-23 20:14:12+00:00,342248.0,"3 days, 23:04:08","[{'comment_id': 395828423, 'comment_body': '`<= resolution.x - 1` is the same as `< resolution.x` but the latter is clearer', 'comment_created': datetime.datetime(2020, 3, 20, 18, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 395830246, 'comment_body': 'Can you find better names for the variables and maybe comment it ?', 'comment_created': datetime.datetime(2020, 3, 20, 18, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 395862123, 'comment_body': 'I asume `rf` probably means ""radial falloff"", since this is what it computes, but I\'m not really sure about `e`. Also, since these three lines are a direct port of the [original implementation](https://github.com/keijiro/KinoVignette/blob/master/Assets/Kino/Vignette/Shader/Vignette.shader#L41) (which is not commented), I thought it\'d be better not to rename them.\r\n\r\nWhat do you think about leaving the names as they are, but commenting next to `e` that it\'s "" inversely proportional to the fourth power of the distance to the center""? 😅 ', 'comment_created': datetime.datetime(2020, 3, 20, 19, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 396073274, 'comment_body': "">  I thought it'd be better not to rename them\r\n\r\nWhy ? \r\n\r\nIf you rename `rf` to `radial_falloff`, the code becomes much clearer. And `e` to `inverse_radial_falloff`.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 3, 22, 9, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 396082062, 'comment_body': 'Could you please change this to 2020 and use your (real) name?', 'comment_created': datetime.datetime(2020, 3, 22, 11, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082245, 'comment_body': 'Indent with only two spaces.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082268, 'comment_body': 'Move brace to own line.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082313, 'comment_body': 'Replace `const` by `static constexpr` for real constants.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082411, 'comment_body': 'Yep, or\r\n\r\n    background_premult.rgb() *= e;', 'comment_created': datetime.datetime(2020, 3, 22, 11, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082433, 'comment_body': 'Make all variables const.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082453, 'comment_body': '❤\r\n\r\nPlural: references', 'comment_created': datetime.datetime(2020, 3, 22, 11, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082570, 'comment_body': 'Remove redundant blank line.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082585, 'comment_body': 'Indent once more.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082637, 'comment_body': 'Fix here too.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082653, 'comment_body': 'Two spaces.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082672, 'comment_body': 'Align opening braces.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082729, 'comment_body': ""You're not using this variable, AFAICT."", 'comment_created': datetime.datetime(2020, 3, 22, 11, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082839, 'comment_body': 'Indent just once (4 spaces) with respect to the class. Basically only `public`, `private`, etc. are half-indented, everything else is indented as usual.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082883, 'comment_body': ""You're mixing up float and integer here. Use `props.m_canvas_height` for the upper bound, same for `x`."", 'comment_created': datetime.datetime(2020, 3, 22, 11, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396112566, 'comment_body': ""Oops, nice catch! It can be used to make the vignette depended on the image's aspect ratio or not, I was testing it to see which way looks better:\r\n![image](https://user-images.githubusercontent.com/13294013/77254510-315b5f80-6c40-11ea-9a09-19b7fb13516a.png)\r\nSince the original code from Keijiro is always a perfect circle I simplified it in the `coord` initialization and ended up not using this variable, but I guess it'd be good to add it as an option (?) ([in Unity](https://docs.unity3d.com/Packages/com.unity.postprocessing@2.1/manual/Vignette.html) they have a flag for it called `rounded`)."", 'comment_created': datetime.datetime(2020, 3, 22, 16, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 396114439, 'comment_body': ""> Why ?\r\n\r\nI couldn't think of a good name for `e`, but `inverse_radial_falloff` or `inverse_quartic_radial_falloff` is nice (and makes the comment redundant so we can remove it). I'll change it 🙂 "", 'comment_created': datetime.datetime(2020, 3, 22, 16, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 396263386, 'comment_body': 'Please use `std::size_t` in new code.', 'comment_created': datetime.datetime(2020, 3, 23, 7, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396264876, 'comment_body': 'Not sure the word ""background"" is relevant here, maybe just ""pixel""?', 'comment_created': datetime.datetime(2020, 3, 23, 7, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396264907, 'comment_body': 'Fits on one line.', 'comment_created': datetime.datetime(2020, 3, 23, 7, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': 'c59466c27afab1b945fd0be187d8fdf8044ca628', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2daf50415a62a84403e2bb99ec75327e26cee9b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e49aac286f1b8b77522c0b4b70d528f7cf43e37', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7c3a313eea97579f26a7a5267b37997d54777ed', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53bd452ee983d7a3d3b8b4ec5e78b7d365dd174a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc89f468c4cf2c9b4c1a19a62e3e5ada674f3c4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
419777765,Refactor the vignette post-processing stage,"Refactored the vignette post-processing stage to split its computation to threads.

Main changes:  
- Added 5 new test scenes (`sandbox/tests/test scenes/vignette/`).
- Added `thread_count` as a parameter of `PostProcessingStage`'s `execute()`.
- Created a new `EffectJob` which implements `IJob`.
- Created a new `renderer/modeling/postprocessingeffect/` folder, to narrow the actual algorithm implementation for post-processing effects into instances of `IEffectApplier` (the stage's `execute()` now simply spawns jobs to execute its `apply()`).",True,2865,https://api.github.com/repos/appleseedhq/appleseed/pulls/2865,https://github.com/appleseedhq/appleseed/pull/2865,closed,1055,42,23,36,0,43,1,0,[{'name': 'PR | Squash'}],2020-05-18 22:41:12+00:00,2020-06-22 07:03:54+00:00,2967762.0,"34 days, 8:22:42","[{'comment_id': 427067079, 'comment_body': ""What's the difference between `stage` and `effect` ?"", 'comment_created': datetime.datetime(2020, 5, 19, 6, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427067337, 'comment_body': 'I think `IImageEffectApplier` or `IPostProcessEffectApplier` is a better name', 'comment_created': datetime.datetime(2020, 5, 19, 6, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427067532, 'comment_body': 'Same here with the naming, `EffectJob` is too generic', 'comment_created': datetime.datetime(2020, 5, 19, 6, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427068034, 'comment_body': 'We should name this vector the same way we do in other job renderers. Something like `m_jobs`  ? It makes more sense then when you call `execute()` on a job.', 'comment_created': datetime.datetime(2020, 5, 19, 6, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427068296, 'comment_body': '`std::` anything you can \r\n```suggestion\r\n    for (std::size_t i = 0; i < props.m_tile_count; ++i)\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 6, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427069339, 'comment_body': 'In other places, we generally don\'t create a struct for the params. We simply give params and we do `params.get_float(...)"" or something where we need the actual values. Is there a specific reason you created this struct ?', 'comment_created': datetime.datetime(2020, 5, 19, 6, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427478328, 'comment_body': 'I think this is correct, i.e., the job has a ""list of appliers"" and the job factory that has a ""list of jobs"".\r\nLike the [TileJob](https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/renderer/kernel/rendering/generic/tilejob.h#L64) which has a ""list of renderers"" but no job list. It\'s the [TileJobFactory](https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/renderer/kernel/rendering/generic/tilejobfactory.h#L80) that has a `tile_jobs`.', 'comment_created': datetime.datetime(2020, 5, 19, 17, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427486370, 'comment_body': 'Do you mean using a `ParamArray`? I had originally thought about it, but as Franz mentioned on Discord, they shouldn\'t be used to pass values ""internally"", for this we can use standard arguments.\r\n\r\nThus, I preferred to group them into a POD-struct as I think it\'s clean and easier to spot them this way, but I can rewrite `VignetteApplierFactory` to receive each one separately. What do you think?', 'comment_created': datetime.datetime(2020, 5, 19, 17, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427531655, 'comment_body': 'I misunderstood the code, my bad :) You did right ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427535329, 'comment_body': '```suggestion\r\n#include <cassert>\r\n#include <cstddef> \r\n```\r\n\r\nFor size_t', 'comment_created': datetime.datetime(2020, 5, 19, 19, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427535736, 'comment_body': 'Was it for debug ?', 'comment_created': datetime.datetime(2020, 5, 19, 19, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427536203, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 19, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427536639, 'comment_body': 'I think you can use/store VignetteParams reference directly here. ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427537269, 'comment_body': 'Do you use both `create` methods ? ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427538147, 'comment_body': ""I don't think these should be in VignetteParams. Maybe you can simply pass them as parameters to the  `apply()` or execute()` method ?"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427540147, 'comment_body': 'Why passing jobs by reference ? Can we return the jobs instead ? When you call this, effect_jobs is empty so there is no need to fill it by reference', 'comment_created': datetime.datetime(2020, 5, 19, 19, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427541102, 'comment_body': 'Yes, my bad 😅 ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427555749, 'comment_body': ""`<cstddef>` is included in the header file, shouldn't I omit it from the `.cpp` then?"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427561714, 'comment_body': ""No, only the static one (`vignettepostprocessingstage.cpp:124`), the other is required by the interface. Iirc something similar is done in the `GenericFrameRendererFactory`.\r\n\r\nSince there's no way to enforce the definition of a static `create()` with an interface, is it better to remove it and use the non-static one? This would imply the need to create an instance of `VignetteApplierFactory` (for each `VignetteParam`)."", 'comment_created': datetime.datetime(2020, 5, 19, 19, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 428175466, 'comment_body': 'Removed the static one.', 'comment_created': datetime.datetime(2020, 5, 20, 17, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 428650587, 'comment_body': 'Yes, you are right.', 'comment_created': datetime.datetime(2020, 5, 21, 13, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428651970, 'comment_body': ""I don't think this needs to be exposed to the API. I think we expose only stages and that should be enough to apply post process."", 'comment_created': datetime.datetime(2020, 5, 21, 13, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428652098, 'comment_body': '```suggestion\r\n        const std::size_t thread_count = get_rendering_thread_count(m_params);\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428652924, 'comment_body': '```suggestion\r\n        void execute(Frame& frame, const std::size_t thread_count) const override\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428654702, 'comment_body': '```suggestion\r\n\r\n    return effect_jobs;\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428657024, 'comment_body': 'should be formatted like this:\r\n```cpp\r\n             ImageEffectJobFactory::EffectJobVector effect_jobs = \r\n                 effect_job_factory.create(\r\n                     frame,\r\n                     effect_appliers);\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428658227, 'comment_body': 'Is it a const reference ? (i.e.  `const auto&`).\r\n\r\nalso, we use const when the type can be easily determined like ` const auto something = static_cast<TYPE>(...)`. Maybe you should use explicit type here', 'comment_created': datetime.datetime(2020, 5, 21, 13, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 432522797, 'comment_body': 'Move brace to its own line.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 432523034, 'comment_body': 'Mark as `explicit`.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 435858070, 'comment_body': ""I don't think you need to expose that"", 'comment_created': datetime.datetime(2020, 6, 5, 11, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 436372090, 'comment_body': ""For consistency's sake, this should probably be called `PostProcessingEffectJob`."", 'comment_created': datetime.datetime(2020, 6, 7, 14, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372106, 'comment_body': 'And the name change should be propagated here too.', 'comment_created': datetime.datetime(2020, 6, 7, 14, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372390, 'comment_body': 'This assertion feels redundant. It made sense in the context of rendering tile jobs where the number of jobs was indirectly controlled via `m_tile_count_x` and `m_tile_count_y`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372472, 'comment_body': 'A more cache-friendly ordering is the Hilbert one, I would suggest that this would be a better default.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372542, 'comment_body': 'You can simply forward-declare `IImageEffectApplier`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372765, 'comment_body': ""Technically this comment is incorrect as the main purpose of the job manager isn't to wait until jobs have stopped :)"", 'comment_created': datetime.datetime(2020, 6, 7, 15, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372781, 'comment_body': 'Include `<cstddef>`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372923, 'comment_body': 'Why aren\'t you overriding `PostProcessingStage::execute()` here? That was the idea: a multithreaded post-processing stage is just another ""standard"" stage, it just happens to execute a post-processing effect in a multithreaded fashion. The post-processing effect should be passed to the constructor.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373124, 'comment_body': 'I would suggest to only skip if `m_intensity` is exactly equal to 0.0f.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373145, 'comment_body': 'Move brace to its own line.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373389, 'comment_body': 'I see now why you introduced `execute_on_tiles()` but IMHO you can simplify further: any post-processing stage based on `MultithreadPostProcessingStage` should mostly just pass the right effect (here the vignetting effect) to `MultithreadPostProcessingStage` and let that class handle everything.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436433892, 'comment_body': 'Should I keep it if I change `linear_ordering` to `hilbert_ordering`?', 'comment_created': datetime.datetime(2020, 6, 8, 2, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 442892650, 'comment_body': 'Yes, good point.', 'comment_created': datetime.datetime(2020, 6, 19, 15, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': 'ff7146473f374a152f5b30356c46f6eacdc3f11b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae2ff585a231e953197759d17aeb71083e81835c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81becff8bc795ceefa9b5510678d75a4743a1dc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55862a4b0ae8d4c733bd4603cbdf7dd5bf155a25', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9654d2dad257acbf52f92a28c59853fc672d002f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b66cafa9c0b14da71f70009fdccf856c4e04b46', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2ba7d41654aedd40337b9b76fb79e9b12f3350', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7abc491b8bde3c52c639576949fcda70fe4be8eb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59581fd4c9b81625796847ecb9fa64b1f5027a45', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc15e08e9eab0f9097ad82f6e69de237a316302c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdde32591e45fe561d945e0e500d0e7092ac85c3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01c3929e26da7eed3fbd25c0b5a6c0642d9548b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e85e378bc441da0f91f3df12331d840fb2d851fb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f7bf05a348a850fc80216f3b115b2ebc9872ede', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa46eb30f1664e641ef8053d40861ff10ccc5846', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '402ffffe1eac69575302a500bc6b45226b4e42ee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745c693b0dee81564d38fbca46e3dadda39a08e0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74365f6431e10f675b01205ce04943e808fd15e2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7654c52af50d65745978e205c70ab450f7171cd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '189b9493b381258692410e63b92206ebb1c31807', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc83b192b73d3f0dcce2d650aa0ff132d81b587', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9523fbc0b80f1e619a9654407fc0e86e53760edc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1dee06ee07cac7a2b5fd57da81635fb9ed6561', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab440cd8aefcc4d0c8e6032d0417ec76d1a1b737', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb96cc48df1d074f3d46129316347d5ff21ef719', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68751e216454bcce6f0bd7367ab3d0ec60ef666b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95cdebfdfbafa9f9c8ef138bf2d60a6f025c9769', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fadd3cf84d0fd0f4e2a6a762cf0ef96ff2de84a5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08986bbc36f7eedf3a8b6e3d3c092b1ff75ee8f6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f24381dd041e7bb9c71822f5cd7b7b81d5cf905b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cf7871531a6668489d4617506d52a4df413bd3e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f3768c8de10a687e1823c7465a2f0a9edf5bfd1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf5dc1a40b27bffbddfbe8aad3d9278aec803a6b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da70bc454dea815a222956114059481a92f2b74', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '794fc4b216a4fae0e7dec28a27da7e875af91d99', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ee4fc37d5b1bd0225d5841b273ae837c454f6b', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
419777765,Refactor the vignette post-processing stage,"Refactored the vignette post-processing stage to split its computation to threads.

Main changes:  
- Added 5 new test scenes (`sandbox/tests/test scenes/vignette/`).
- Added `thread_count` as a parameter of `PostProcessingStage`'s `execute()`.
- Created a new `EffectJob` which implements `IJob`.
- Created a new `renderer/modeling/postprocessingeffect/` folder, to narrow the actual algorithm implementation for post-processing effects into instances of `IEffectApplier` (the stage's `execute()` now simply spawns jobs to execute its `apply()`).",True,2865,https://api.github.com/repos/appleseedhq/appleseed/pulls/2865,https://github.com/appleseedhq/appleseed/pull/2865,closed,1055,42,23,36,0,43,1,0,[{'name': 'PR | Squash'}],2020-05-18 22:41:12+00:00,2020-06-22 07:03:54+00:00,2967762.0,"34 days, 8:22:42","[{'comment_id': 427067079, 'comment_body': ""What's the difference between `stage` and `effect` ?"", 'comment_created': datetime.datetime(2020, 5, 19, 6, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427067337, 'comment_body': 'I think `IImageEffectApplier` or `IPostProcessEffectApplier` is a better name', 'comment_created': datetime.datetime(2020, 5, 19, 6, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427067532, 'comment_body': 'Same here with the naming, `EffectJob` is too generic', 'comment_created': datetime.datetime(2020, 5, 19, 6, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427068034, 'comment_body': 'We should name this vector the same way we do in other job renderers. Something like `m_jobs`  ? It makes more sense then when you call `execute()` on a job.', 'comment_created': datetime.datetime(2020, 5, 19, 6, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427068296, 'comment_body': '`std::` anything you can \r\n```suggestion\r\n    for (std::size_t i = 0; i < props.m_tile_count; ++i)\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 6, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427069339, 'comment_body': 'In other places, we generally don\'t create a struct for the params. We simply give params and we do `params.get_float(...)"" or something where we need the actual values. Is there a specific reason you created this struct ?', 'comment_created': datetime.datetime(2020, 5, 19, 6, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427478328, 'comment_body': 'I think this is correct, i.e., the job has a ""list of appliers"" and the job factory that has a ""list of jobs"".\r\nLike the [TileJob](https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/renderer/kernel/rendering/generic/tilejob.h#L64) which has a ""list of renderers"" but no job list. It\'s the [TileJobFactory](https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/renderer/kernel/rendering/generic/tilejobfactory.h#L80) that has a `tile_jobs`.', 'comment_created': datetime.datetime(2020, 5, 19, 17, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427486370, 'comment_body': 'Do you mean using a `ParamArray`? I had originally thought about it, but as Franz mentioned on Discord, they shouldn\'t be used to pass values ""internally"", for this we can use standard arguments.\r\n\r\nThus, I preferred to group them into a POD-struct as I think it\'s clean and easier to spot them this way, but I can rewrite `VignetteApplierFactory` to receive each one separately. What do you think?', 'comment_created': datetime.datetime(2020, 5, 19, 17, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427531655, 'comment_body': 'I misunderstood the code, my bad :) You did right ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427535329, 'comment_body': '```suggestion\r\n#include <cassert>\r\n#include <cstddef> \r\n```\r\n\r\nFor size_t', 'comment_created': datetime.datetime(2020, 5, 19, 19, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427535736, 'comment_body': 'Was it for debug ?', 'comment_created': datetime.datetime(2020, 5, 19, 19, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427536203, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 19, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427536639, 'comment_body': 'I think you can use/store VignetteParams reference directly here. ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427537269, 'comment_body': 'Do you use both `create` methods ? ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427538147, 'comment_body': ""I don't think these should be in VignetteParams. Maybe you can simply pass them as parameters to the  `apply()` or execute()` method ?"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427540147, 'comment_body': 'Why passing jobs by reference ? Can we return the jobs instead ? When you call this, effect_jobs is empty so there is no need to fill it by reference', 'comment_created': datetime.datetime(2020, 5, 19, 19, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427541102, 'comment_body': 'Yes, my bad 😅 ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427555749, 'comment_body': ""`<cstddef>` is included in the header file, shouldn't I omit it from the `.cpp` then?"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427561714, 'comment_body': ""No, only the static one (`vignettepostprocessingstage.cpp:124`), the other is required by the interface. Iirc something similar is done in the `GenericFrameRendererFactory`.\r\n\r\nSince there's no way to enforce the definition of a static `create()` with an interface, is it better to remove it and use the non-static one? This would imply the need to create an instance of `VignetteApplierFactory` (for each `VignetteParam`)."", 'comment_created': datetime.datetime(2020, 5, 19, 19, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 428175466, 'comment_body': 'Removed the static one.', 'comment_created': datetime.datetime(2020, 5, 20, 17, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 428650587, 'comment_body': 'Yes, you are right.', 'comment_created': datetime.datetime(2020, 5, 21, 13, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428651970, 'comment_body': ""I don't think this needs to be exposed to the API. I think we expose only stages and that should be enough to apply post process."", 'comment_created': datetime.datetime(2020, 5, 21, 13, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428652098, 'comment_body': '```suggestion\r\n        const std::size_t thread_count = get_rendering_thread_count(m_params);\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428652924, 'comment_body': '```suggestion\r\n        void execute(Frame& frame, const std::size_t thread_count) const override\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428654702, 'comment_body': '```suggestion\r\n\r\n    return effect_jobs;\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428657024, 'comment_body': 'should be formatted like this:\r\n```cpp\r\n             ImageEffectJobFactory::EffectJobVector effect_jobs = \r\n                 effect_job_factory.create(\r\n                     frame,\r\n                     effect_appliers);\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428658227, 'comment_body': 'Is it a const reference ? (i.e.  `const auto&`).\r\n\r\nalso, we use const when the type can be easily determined like ` const auto something = static_cast<TYPE>(...)`. Maybe you should use explicit type here', 'comment_created': datetime.datetime(2020, 5, 21, 13, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 432522797, 'comment_body': 'Move brace to its own line.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 432523034, 'comment_body': 'Mark as `explicit`.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 435858070, 'comment_body': ""I don't think you need to expose that"", 'comment_created': datetime.datetime(2020, 6, 5, 11, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 436372090, 'comment_body': ""For consistency's sake, this should probably be called `PostProcessingEffectJob`."", 'comment_created': datetime.datetime(2020, 6, 7, 14, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372106, 'comment_body': 'And the name change should be propagated here too.', 'comment_created': datetime.datetime(2020, 6, 7, 14, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372390, 'comment_body': 'This assertion feels redundant. It made sense in the context of rendering tile jobs where the number of jobs was indirectly controlled via `m_tile_count_x` and `m_tile_count_y`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372472, 'comment_body': 'A more cache-friendly ordering is the Hilbert one, I would suggest that this would be a better default.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372542, 'comment_body': 'You can simply forward-declare `IImageEffectApplier`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372765, 'comment_body': ""Technically this comment is incorrect as the main purpose of the job manager isn't to wait until jobs have stopped :)"", 'comment_created': datetime.datetime(2020, 6, 7, 15, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372781, 'comment_body': 'Include `<cstddef>`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372923, 'comment_body': 'Why aren\'t you overriding `PostProcessingStage::execute()` here? That was the idea: a multithreaded post-processing stage is just another ""standard"" stage, it just happens to execute a post-processing effect in a multithreaded fashion. The post-processing effect should be passed to the constructor.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373124, 'comment_body': 'I would suggest to only skip if `m_intensity` is exactly equal to 0.0f.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373145, 'comment_body': 'Move brace to its own line.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373389, 'comment_body': 'I see now why you introduced `execute_on_tiles()` but IMHO you can simplify further: any post-processing stage based on `MultithreadPostProcessingStage` should mostly just pass the right effect (here the vignetting effect) to `MultithreadPostProcessingStage` and let that class handle everything.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436433892, 'comment_body': 'Should I keep it if I change `linear_ordering` to `hilbert_ordering`?', 'comment_created': datetime.datetime(2020, 6, 8, 2, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 442892650, 'comment_body': 'Yes, good point.', 'comment_created': datetime.datetime(2020, 6, 19, 15, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': 'ff7146473f374a152f5b30356c46f6eacdc3f11b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae2ff585a231e953197759d17aeb71083e81835c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81becff8bc795ceefa9b5510678d75a4743a1dc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55862a4b0ae8d4c733bd4603cbdf7dd5bf155a25', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9654d2dad257acbf52f92a28c59853fc672d002f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b66cafa9c0b14da71f70009fdccf856c4e04b46', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2ba7d41654aedd40337b9b76fb79e9b12f3350', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7abc491b8bde3c52c639576949fcda70fe4be8eb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59581fd4c9b81625796847ecb9fa64b1f5027a45', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc15e08e9eab0f9097ad82f6e69de237a316302c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdde32591e45fe561d945e0e500d0e7092ac85c3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01c3929e26da7eed3fbd25c0b5a6c0642d9548b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e85e378bc441da0f91f3df12331d840fb2d851fb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f7bf05a348a850fc80216f3b115b2ebc9872ede', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa46eb30f1664e641ef8053d40861ff10ccc5846', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '402ffffe1eac69575302a500bc6b45226b4e42ee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745c693b0dee81564d38fbca46e3dadda39a08e0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74365f6431e10f675b01205ce04943e808fd15e2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7654c52af50d65745978e205c70ab450f7171cd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '189b9493b381258692410e63b92206ebb1c31807', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc83b192b73d3f0dcce2d650aa0ff132d81b587', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9523fbc0b80f1e619a9654407fc0e86e53760edc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1dee06ee07cac7a2b5fd57da81635fb9ed6561', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab440cd8aefcc4d0c8e6032d0417ec76d1a1b737', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb96cc48df1d074f3d46129316347d5ff21ef719', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68751e216454bcce6f0bd7367ab3d0ec60ef666b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95cdebfdfbafa9f9c8ef138bf2d60a6f025c9769', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fadd3cf84d0fd0f4e2a6a762cf0ef96ff2de84a5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08986bbc36f7eedf3a8b6e3d3c092b1ff75ee8f6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f24381dd041e7bb9c71822f5cd7b7b81d5cf905b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cf7871531a6668489d4617506d52a4df413bd3e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f3768c8de10a687e1823c7465a2f0a9edf5bfd1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf5dc1a40b27bffbddfbe8aad3d9278aec803a6b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da70bc454dea815a222956114059481a92f2b74', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '794fc4b216a4fae0e7dec28a27da7e875af91d99', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ee4fc37d5b1bd0225d5841b273ae837c454f6b', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
438899997,Add Bloom post-processing stage,"Added Bloom as a new post-processing stage. Its 5 parameters are:
- `iterations`: number of downsampling iterations used for blurring, which indirectly controls the spread distance / radius
- `intensity`: strength of the Bloom effect (i.e. blending factor with the original image)
- `threshold`: filters out pixels under this level of brightness
- `soft_threshold`: makes the trasition between under/over-threshold gradual (0 = hard, 1 = soft)
- `debug_blur`: toggle to show only the Bloom target image, which is composited with the final render

Main changes:
- Included 11 test scenes (which render in ~30sec on a Core i5-4670K @ 3.40GHz)
- Created 4 new `ImageEffectApplier`s used in the Bloom stage, for:
	- (Weighted) additive color blending
	- Applying a bright-pass filter
	- Resampling images with a slight modification of Marius Bjørge's ""Dual filtering""
	- Resampling images by a factor of 2 (faster than the method above)

The implementation is pretty similar to Keijiro Takahashi's [KinoBloom](https://github.com/keijiro/KinoBloom) (used in [EEVEE](https://github.com/blender/blender/blob/master/source/blender/draw/engines/eevee/shaders/effect_bloom_frag.glsl#L6)) and to Unity's Post-Processing [Bloom](https://github.com/Unity-Technologies/PostProcessing/blob/v2/Documentation~/Bloom.md).

However, instead of using the sampling filters from Jorge Jimenez's [SIGGRAPH2014 presentation](http://advances.realtimerendering.com/s2014/#_NEXT_GENERATION_POST), it is based on Marius Bjørge's [""Bandwidth-Efficient Rendering""](https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_marius_2D00_notes.pdf) presentation from SIGGRAPH2015 (and also, it is not implemented with shaders).
",True,2875,https://api.github.com/repos/appleseedhq/appleseed/pulls/2875,https://github.com/appleseedhq/appleseed/pull/2875,closed,6979,45,45,87,4,21,1,0,[{'name': 'PR | Squash'}],2020-06-24 01:01:25+00:00,2020-09-30 04:14:36+00:00,8478791.0,"98 days, 3:13:11","[{'comment_id': 452350808, 'comment_body': ""How can you ensure this test is robust regarding the fact you're using integers ? A more robust way to test it is `m_src_width * 2 == dst_width`. "", 'comment_created': datetime.datetime(2020, 7, 9, 16, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452357955, 'comment_body': 'Why you use a lambda ? Have you tried your code without it ? Normally, it should be ok but maybe there is a performance issue there. https://stackoverflow.com/a/39864437/4623982', 'comment_created': datetime.datetime(2020, 7, 9, 16, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452359565, 'comment_body': ""Possible optimization (i'm not sure it's worth it): instead of fetching pixels insinde of blerp, fetch them all here using your window size and then blerp it.\r\n\r\nIf possible, fetch it using a scanline or something instead of fetching pixel by pixel."", 'comment_created': datetime.datetime(2020, 7, 9, 16, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452359999, 'comment_body': 'Explain what the applier does (i.e. `Filter out dark pixels ...`)', 'comment_created': datetime.datetime(2020, 7, 9, 16, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452360201, 'comment_body': 'Explain what it does', 'comment_created': datetime.datetime(2020, 7, 9, 16, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452360527, 'comment_body': 'Document the parameters', 'comment_created': datetime.datetime(2020, 7, 9, 16, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361218, 'comment_body': 'Props can be computed outside of the loop', 'comment_created': datetime.datetime(2020, 7, 9, 16, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361335, 'comment_body': 'It can be const', 'comment_created': datetime.datetime(2020, 7, 9, 16, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361797, 'comment_body': 'Warning instead of info ?', 'comment_created': datetime.datetime(2020, 7, 9, 17, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452362170, 'comment_body': 'You should explain the general algorithm somewhere (passes process and stuff). Be sure to also link your references', 'comment_created': datetime.datetime(2020, 7, 9, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452362733, 'comment_body': 'Can you explain why we need such buffer ?', 'comment_created': datetime.datetime(2020, 7, 9, 17, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452366541, 'comment_body': ""I added it to make `result` a `const`. I don't think this showed any performance hit, but I'll double check it and see if using a lambda resulted in something weird in the assembly 🙂 "", 'comment_created': datetime.datetime(2020, 7, 9, 17, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452368177, 'comment_body': 'I tried fetching all of them beforehand for downsampling (that\'s the ""jump from 6 lines to ~100"" I mentioned some time ago 😅), but it didn\'t make any noticeable difference so I didn\'t try it for upsampling.\r\n\r\nI haven\'t looked into fetching a row of pixels at once though.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452370113, 'comment_body': ""I'm using it this way to account for integer truncation, e.g.:\r\nIf the original image is 101x101, the first downscaling will result in a 50x50 image. Thus, we'll later have to upsample from 50x50 to 101x101, so `101 / 2 == 50` works but `50 * 2 == 101` wouldn't."", 'comment_created': datetime.datetime(2020, 7, 9, 17, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452376103, 'comment_body': 'These represent the ""current level"" dimensions, so at the end of each for-loop iteration they are divided by two.\r\nI can move them to the init statement to make it clearer:\r\n```cpp\r\nfor (std::size_t\r\n        level = 0, \r\n        level_width = max_level_props.m_canvas_width, \r\n        level_height = max_level_props.m_canvas_height\r\n    ; level < level_count\r\n    ; ++level)\r\n{\r\n    // ...\r\n}\r\n```\r\n(I\'m not sure what would be the standard way to format it in appleseed)', 'comment_created': datetime.datetime(2020, 7, 9, 17, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452989120, 'comment_body': ""`level_width` and `level_height` aren't constant: https://github.com/appleseedhq/appleseed/pull/2875#discussion_r452376103."", 'comment_created': datetime.datetime(2020, 7, 10, 17, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452989510, 'comment_body': 'Better, ty 🙂 ', 'comment_created': datetime.datetime(2020, 7, 10, 17, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452999557, 'comment_body': 'When we blur an image its intensity fades. So, by adding the intermediate blurring steps we can avoid this, e.g.:\r\n![Jfw0rZ5bno](https://user-images.githubusercontent.com/13294013/87185437-25afa980-c2c0-11ea-8612-bf986fcf2aa2.gif)', 'comment_created': datetime.datetime(2020, 7, 10, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 455521247, 'comment_body': 'Maybe you can explain this directly in the code ?', 'comment_created': datetime.datetime(2020, 7, 16, 5, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 455521665, 'comment_body': ""The result is const but the code is less easy to read. I think it's better to not use lambda and keep the code easy to read. You can make an inline method if you want to make a const with all this."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 461609757, 'comment_body': 'These shaders are already in the sandbox I think. Can you try to reference them instead of duplicating them ? You can try `grep -rn as_blender` in the `test scenes` folder to see how other scenes are using it.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}]","[{'commit_sha': '74080bae310906e7ebe497a81f178dec933752cf', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1fc70d04aa6effa9ed0c32ac9ba66f6ed0deb93', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d84b4436c130a3899b3756901495f530992c18', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41b8e3b928cb75e2808957c166c009a28a4a8be9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb64fb2994636af284fe761bb8d2b622b255ff3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef1a4cef3c580fdd08b7e3b734460cce3aa1b786', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d758767f05d1d3481ff94ec79a9ddd15810a210', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53154763651f5307489df4c7e15f5ced607be514', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c3f30e2ed8d703a28f5df842e1c4f5d17ca2954', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78456923eb178134177b8b64da1c932eb2c2830e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a70d2475bd745f687ce154d929388f2b000ecded', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847d23362ab51d79f00a234bc4834454b1059578', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d8db063be07c6257694f640251e6ad21fadf8be', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f38f89882bafe95532f025151962f1126ebe2a17', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a40789da3206a83e70a9f784abaaa961a9243161', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53815df7b58d503eb586405f318070fb75688b9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe647d99267fda9fddc00969785b8b5c2e9f11d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeff7084d4b925537b1b099c27df8fbe32f3985a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48bfe282c711a630dc90e082d8c895f6e0bb4d54', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c795b498deded2f6260fc2282457cdf68b30172', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b9a9c906c267769e1f42b19a77626c0e246a0d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1379220392b35568e5ccab1c93a82f59afc21ff4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ca1e84284fdd3bef0a3510be380f43b7d69d1c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157b502fb3c19162d2fc609e9a2940ebe50eff17', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fcd6e6816ec9350ee6ce52884afbb5c88e53258', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '858c726323d88c4fd82c4ad5108c4a96cfd670ac', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df25d2d81c17a22900fd2f7c701c142726236e67', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678a0f334703ac3cc7a1c2602107b0bd26415fcd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc72a1262bf466c3d690f37ec690613bcc20dbd4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f576409a1414fcbdd41b3f1209c620660abc06fb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfee087b3110274e2d50d2ef54aacd89851becd0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22094f635787d8bd71ac87b03240355aa70dffc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1d8d47e874aded8e01fd1779260187550053a8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a59237a782577ee89621b939a67706d9f6c828', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83e49be021a6613a6e0aa133ee42d08f00de91eb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07a147a8e1c62bd72f322a4d2f97149bd958a07e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35c70c8f86fd7ff2dbec4af39dcd0b0ffc6d876e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb1f0a8dfbf427e8eb5f99abebcb4e3d0e328d56', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da6e054063498218973b78e14a3f12c23cc7b9b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050f89b6113be8760ab6c1d101b5662e618a3a42', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f77ed84b83dc5bd88bb99de2a91b75e2249bf9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b8be4b72c9c357953ab445c336ed663fe7b7ca5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a50a45d06a9e2806bae309231f61e58716ef7695', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b1a6153d1c1e9183ad900be2b71493237c517d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c84aaaf3d18b46e160c65386c054a2df975686c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e97421ed9b9e38d4b2d954667926ca1c0169dbea', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7b194e6b802bda7355b614ad0201f5be4dd4f4d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992d9e4766d354b4af3a78dca552c2d33f17bae0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a4a650781152e413a6deba5601e938019d70e3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e89a8f95e2bc5f29150edfaf68ea537f12e6590', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ff738abe9ad7fdff0379d1a3e5772416e7d5f85', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b99bffd7e958d573174cc889d5ad5b6241e2357', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6982c8f6e1ce7cc55554a059ab89ae534fc7e1b5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485451caa134f47ceac3c7664ccb50a81681d975', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed87312403e9e0ed6016d7edda9b619b6cd24dd4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46644ca934a7ed5041671cf2ef61a5e310ac5046', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787b7b3975061a5118b3b2559c08e9b8e4ca1e10', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35163385f342a2d7c59006ba0751701bee09d95a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00d1efcd0f70b56203606964ee4d6d3f4a56c05', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3304ac0b599474f62628883ed1d7e74364bef2b6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb87e544d631d6b88823399e07f38fd5cbd202de', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68446b4d2fef97b90af948453fb862c80fb95fa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbee4a14c267f845e8afa3beb61fe52e526fcace', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '691a9c3b9345d90fbac170968ad84863a4eddc42', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1953c5557507ab222acbb2f30e152ea506bdfab', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c3f1ebafbde15ac83a5cf4d5594bb84ba75aa4e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '763b5e9a04d5ab639c77eefa266b49760bb472e2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6cc6694fcd4482c429cb76983c5852f5a41c5b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdf4e0ce76ac071214f41b82f92c5ad6772d475', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad230decf52c10892bb3792af64003a6fe555919', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '287b5231b3c8cc38c88187285e44bbb6e7aa09e9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '389a731f6e9ed0c44a8ca089aeb7d617565d2728', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3032d4d26194133fc298ace96b2fbde0ca8542b1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '211d13457159905201113e8825cee4585faebbfa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b4a6705992c00f35e7d813fa38ae05a5a87dee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07622129735966410e8a9d856f47a3f5f7dbec21', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e84f5aacc71a479cd821a917d237eca0ddc05a7b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dae5b58061990e4891dfb582b1d7f874b116f965', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63bb309545377255f205170f71fa3c61ced94fb2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9bda48018b9c6657904c5aa47be273bee9b7741', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f10f389acb9291c5972b01c1f5e12b62f3d6a1ee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3c8ec71448dc8eae69e5fae3f50edd2f688db7c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6faf2abe940aaf755f8099e93646c5333a848154', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c8d0b04645bd7e73a96fbdfcf3141ef3605951', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5464ee0d896e8c1985c3fede6062653e0cc39708', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a08192e3242f17fa7d3de9f2b293e2bf30fd3d8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e4c86d4a4b8ecd97d158aa686115178aac839b4', 'committer_username': 'oktomus', 'committer_name': 'Kevin Masson', 'committer_email': 'kevin@tuataravfx.com', 'commit_date': datetime.datetime(2013, 6, 9, 22, 6, 18, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
458000119,Add Tone Map post-processing stage,"Added 7 new tone map operators:
- Two ACES approximations:
  - `ACES (Narkowicz)`: by Krzysztof Narkowicz (ref. [[1]](https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/))
  - `ACES (Unreal)`: by Romain Guy (ref. [[2]](https://www.shadertoy.com/view/llXyWr))
- Reinhard's operators from [""Photographic Tone Reproduction for Digital Images""](http://www.cmap.polytechnique.fr/~peyre/cours/x2005signal/hdr_photographic.pdf):
  - `Reinhard`: Equation 3 in the paper (the simple 1/(1+x) tone mapping)
  - `Reinhard (Extended)`: Equation 4 in the paper
- Three filmic curves:
  - `Filmic (Hejl)`: by Jim Hejl (ref. [[3]](http://filmicworlds.com/blog/filmic-tonemapping-operators/), [[4]](https://github.com/tizian/tonemapper))
  - `Filmic (Uncharted)`: by John Hable, used in Uncharted 2 (ref. [[5]](http://filmicworlds.com/blog/filmic-tonemapping-operators/))
  - `Filmic (Piecewise)`: also by John Hable, developed with the aim of being simpler / more intuitive (ref. [[6]](http://filmicworlds.com/blog/filmic-tonemapping-with-piecewise-power-curves/))

The first filmic curve is almost ""plug-n-play"", while the other two are pretty customizable.

I think these seven operators provide a good starting point for *appleseed*.
While there are many other interesting ones that could definitely have been included (look at [`tonemapper`](https://github.com/tizian/tonemapper) for instance), IMHO the most important thing after adding these is to improve the ""user experience"" when using them on *appleseed.studio*.

This mainly involves: **1)** applying the effect as the parameters are changed (in the same way False Colors does it currently); and **2)** having a graph of the tone curve in the stage settings, specially for understanding the parameters of the two filmic curves from John Hable.

---

### Example
![tmo_comparison](https://user-images.githubusercontent.com/13294013/90816601-ed5dab00-e302-11ea-8abc-f5d77501bf6d.png)

### Original
![original](https://user-images.githubusercontent.com/13294013/90816638-ff3f4e00-e302-11ea-801a-fdd59875cd9f.png)
",True,2884,https://api.github.com/repos/appleseedhq/appleseed/pulls/2884,https://github.com/appleseedhq/appleseed/pull/2884,closed,6395,0,34,44,0,1,1,0,[{'name': 'PR | Squash'}],2020-07-28 19:16:51+00:00,2020-09-28 18:32:24+00:00,5354133.0,"61 days, 23:15:33","[{'comment_id': 487401699, 'comment_body': 'Would make sense to use `std::unique_ptr<>` here.', 'comment_created': datetime.datetime(2020, 9, 12, 11, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': '210f674aeceb00ac9f44b839e18a18a787f0c470', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc03dcbc2ca9fd600f7666f1eaea94f5f4b591a3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0482ffe32fdd8f9d5cf0aa1dac4ce0ad6453ee5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1822209665ed18307666a8fc059ae14c1283e99a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '984e9a6c703ecf88d33c3c23e4316cb67e67deba', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3a2181662606752c36114c441f8cb6458c4577', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '056e7ab76fcf472c7211acad3a014e225a5a21db', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3b14344091f239a85fed5dd98f32b6cd66710f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '299dbf4dfd19e1f6406c6bdf8237c004411b4dd5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f708128c35c3e1196786b872aba1091e9278aeb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43dd5f6ec65ca3cca896f39cfacf8821e59fc182', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9830e66aedccddba8c4bcd57e3b5aadb91b4b5c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fff29710c8a36bcf1fea89b4ac87808d2def90fc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad78e9650173471cebb6fe098d97aae0555264d3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4cd0912e4e538e689a564ad24110e6de34e2ed', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1107626d98d4fee927973a1308928f8736e3548', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba7ef417cbd3d5d00f0e38e910970d54afcb6b32', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b22091756bee06ea5de705f64a357580cd0e48a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09953371aa6f1566d46a0188c74970363bc924dd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdc165894fe7911a255913bf8e301ebaf7673cf3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0210d3f3214475f331cb3bd1aae2eb2bf5e762e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b2c64162f40d87e09fa05f7266964bd1f362d4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cdca95a86261a0bd9715b20fef5e4e1af5974e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ef93cb23a2890dd71ccfa21dade15ca17657d4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f83bd2a18e14c37acf8422bbe3b120447bf8d218', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470f63c4e3b1c01a86e7af054f693440760b99db', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05c1df1bcfdd1cbb777f160237757dd482b0af61', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2382d29425d48603475ac8d768855b118a3400', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c56a7a90d85d5d3bbb9b3c89cd3ef8d1c335d41', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43510e1c1d3d679bbed66bc48d73844e326bc51c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78faac19a3549e6cb613f6ca86d552b3eaad0781', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f49c78da559a5d79d73d5c7eafd5b9722c859b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5998ffe31ce4409bb2253188ce0c66c43ae7109f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33f13669d28c6ba07920308113313dc794ef74c0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb48c7420b6c44ab8fbcb4a5027249a823ac6d7', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60c351a729507556c44cece150818cd63d7ea87', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfd2fc3c44cf86e4a73df91909880ba850fb25aa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cccc7fa71f3480ea81c8f142271cafad2326ea1b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49970e298fc95ef5de9128e28181aa2546adb319', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee26f315753f273927a534e23a8e1e1efe178638', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6957c9de3a3fcf20475e7479e70e2b10431db7ef', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fc013ce7feb10f4c5d3cdb1b4aef3d72fb0434b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d60a2c254bd7965d9d4fad6de403596e11a13f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67eeb40a2beec56257c18b30ceaf13c3f507db4a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
468375225,Add Chromatic Aberration post-processing stage,"Added ([lateral](https://en.wikipedia.org/wiki/Chromatic_aberration#Types)) Chromatic Aberration as a new post-processing stage.

This stage has two parameters, for artistic control:
- `strength`: controls the effect intensity by increasing distortion towards the edges of the image (thus, radially increasing the ""color fringes"")
- `fringing`: controls the amount of colors we use for the effect, i.e.:
  - the smallest value will result in the default ""three-color split"", found in most implementations of CA
  - higher values lead to a more ""rainbow-like"" effect, as shown in [this presentation](https://www.youtube.com/watch?v=RdN06E6Xn9E&t=428s) (see image comparisons below)

_Note: ""fringing"" might be a bad/misleading name.. renaming it to something like ""smoothness"" would probably be better._

---

| no aberration | default values |
|---|---|
| ![image](https://user-images.githubusercontent.com/13294013/90426829-0f9fc080-e098-11ea-86cc-ef29e5b90c7e.png) | ![image](https://user-images.githubusercontent.com/13294013/90426876-20503680-e098-11ea-8ce2-0ee6f3a911ed.png) |

_obs.: using a higher `strength` value than the default for the images below:_
| lowest `fringing` | highest `fringing` |
|---|---|
| ![image](https://user-images.githubusercontent.com/13294013/90427057-63120e80-e098-11ea-8317-fccfad3635b3.png) | ![image](https://user-images.githubusercontent.com/13294013/90427077-6c02e000-e098-11ea-95be-703a2b2fa486.png) |",True,2887,https://api.github.com/repos/appleseedhq/appleseed/pulls/2887,https://github.com/appleseedhq/appleseed/pull/2887,closed,1969,0,19,18,0,0,0,0,[],2020-08-15 23:23:30+00:00,2020-09-29 05:05:54+00:00,3822144.0,"44 days, 5:42:24",[],"[{'commit_sha': '3f98fd65caf4d876e27ccad6338aa4485a1d33de', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff86dd214c6a20d79c61661f72e96ad0aed7f640', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3160bfd2647065dc3e9959bf03a8ed316291a6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62e5575d82d7f517a286eda539f7cc23e24cb10', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071c32be3cb301f6e207dcdce2c02fc6a27b5eda', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7a2d26dce2d885f93c94fcc1887cd34491e8c72', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15915d0bffb82269954339ac445af960f698ff6a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a33160bb5976b4677d22c0b23505104d47545616', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35229db3df10b418fe174ee0e4f60da8c9d58668', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f75de9a084cba4cc35a522417c563411326b8c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69cbf0e739730e1efe16db580611ebcb2206874c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24322aa463b7e6d391c27572d5449055eacd0350', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f5b8aa506417fc80a4f18723f6cfc78773d482', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de927f18fb0b0762103af0dc7f7fbd3714056e8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2b2cd170f0fcafbc39a5a61b3dd0a2eae4185e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54fecac54eea4416f5c831268e27db1ab4d2ae49', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27db76b7418e98631852c5ee435c3b6e2cb03c56', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c77feaad03f8b7c04e0e732528c0247e727e6c1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
441550526,Fix Shift+F5 causing False Colors to be applied twice,"The color map post-processing stage, applied when `False Colors` is enabled, is being called twice on `Stop Rendering (Shift+F5)`.

---
This happens by `on_rendering_abort()` being called and emitting a `signal_rendering_abort()` at:
https://github.com/appleseedhq/appleseed/blob/964c5a91d27760370f20b15f07088dc6a0064e36/src/appleseed/renderer/kernel/rendering/masterrenderer.cpp#L173

which also results in emitting `signal_rendering_failed()` on:
https://github.com/appleseedhq/appleseed/blob/964c5a91d27760370f20b15f07088dc6a0064e36/src/appleseed.studio/mainwindow/rendering/renderingmanager.cpp#L113-L117

Thus, `slot_rendering_end()` runs twice.

---
I'm submitting a ""conservative"" fix, as it only prevents False Colors from being applied when a ""failed"" signal is emitted (other previous behavior stay the same).

However, it would be interesting to remove unnecessary computations that are being run twice. Creating a new `signal_rendering_aborted()` on `renderingmanager.cpp` could help splitting what should be run on ""aborting"" from ""failing"", e.g.:
```diff
- if (rendering_result.m_status != MasterRenderer::RenderingResult::Succeeded)
-     emit signal_rendering_failed();
+ switch (rendering_result.m_status)
+ {
+   case MasterRenderer::RenderingResult::Succeeded:
+     break;
+ 
+   case MasterRenderer::RenderingResult::Aborted:
+     emit signal_rendering_aborted();
+     break;
+ 
+   default:
+     emit signal_rendering_failed();
+     break;
+ }
```",True,2877,https://api.github.com/repos/appleseedhq/appleseed/pulls/2877,https://github.com/appleseedhq/appleseed/pull/2877,closed,7,12,4,3,1,0,1,0,[{'name': 'PR | Squash'}],2020-06-29 17:25:54+00:00,2020-10-18 15:35:57+00:00,9583803.0,"110 days, 22:10:03",[],"[{'commit_sha': 'a792bc4602afaa4980352cbada1ea8e06fe007bd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27d23def82492575c80172e755618669f92b30cc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6284638c56401de73e981c45470b9727a74aca1b', 'committer_username': 'oktomus', 'committer_name': 'Kevin Masson', 'committer_email': 'kevin@tuataravfx.com', 'commit_date': datetime.datetime(2013, 6, 9, 22, 6, 18, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
444465612,Fix false colors not being applied to all tiles on a final render,"This PR fixes the following bug (which happens when we have post-processing stages, and `False Colors` is enabled):

![](https://cdn.discordapp.com/attachments/707230180233707591/727955871510036601/IdRVxIiHXU.gif)

**Edit:** I undid the changes I mention below because they don't fit well with https://github.com/appleseedhq/appleseed/pull/2885 (though, I intend to add them in a later PR, once we discuss what'd lead to the best ""user experience"").

~Also, these changes make post-processing effects always run when a rendering is stopped (e.g. `Shift+F5`).~
~If this behavior is desirable, https://github.com/appleseedhq/appleseed/pull/2878 can be closed. Otherwise, we can keeps effects only being applied to final renderings with:~

```diff
@@ -226,7 +226,7 @@ struct MasterRenderer::Impl
             render_info.insert(""render_time"", m_project.get_rendering_timer().get_seconds());

             // Don't proceed further if rendering failed.
-            if (result.m_status == RenderingResult::Failed)
+            if (result.m_status != RenderingResult::Succeeded)
             {
                 controller.on_rendering_abort();
                 return result;
@@ -241,12 +241,7 @@ struct MasterRenderer::Impl
             // Insert post-processing time into frame's render info.
             render_info.insert(""post_processing_time"", stopwatch.get_seconds());

-            switch (result.m_status)
-            {
-              case RenderingResult::Succeeded: controller.on_rendering_success(); break;
-              case RenderingResult::Aborted: controller.on_rendering_abort(); break;
-              assert_otherwise;
-            }
+            controller.on_rendering_success();
         }
```",False,2880,https://api.github.com/repos/appleseedhq/appleseed/pulls/2880,https://github.com/appleseedhq/appleseed/pull/2880,closed,13,15,2,3,5,1,0,0,[],2020-07-05 21:55:16+00:00,2020-10-18 19:04:36+00:00,9061760.0,"104 days, 21:09:20",[],"[{'commit_sha': '6997bcde66f0fd722355b5142a28997a845d190d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '895a78c4bdedbda93acf1ee016ea925a8409c600', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef3af0d899bcee0b2d66bce3e7f7417d61fd6b6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
464169554,Preview post-processing stage changes in appleseed.studio,"This adds a rendered preview when parameter values are changed for post-processing stages (similar to the current behavior of `False Colors`).

Note that only the effect that is being changed is applied for preview (i.e. if there are multiple stages, this won't show all of them).

![gS09PO8IEs](https://user-images.githubusercontent.com/13294013/89563365-b8753280-d7f1-11ea-9c77-3c14f6655f59.gif)

---

**Obs.:** as of right now, when you add a new effect it doesn't work untill you click `OK` to add it _and then_ edit its parameters. This should be fixed before this PR is merged.

---

Other ""nice-to-have""s are:
  - Render effects preview on a downscaled version of the frame, so it's more responsive (and make this a customizable option)
  - Some way to ""opt-out"" of this (e.g. a checkbox), either for all stages or for a specific one, untill all effects are ""real-time""
  - Save / export the current frame, with effects preview (should probably be an optional ""pop-up"")
",False,2885,https://api.github.com/repos/appleseedhq/appleseed/pulls/2885,https://github.com/appleseedhq/appleseed/pull/2885,open,117,10,8,13,1,0,0,0,[],2020-08-06 17:33:27+00:00,,0.0,,[],"[{'commit_sha': 'c8516fb59724ec1d492c1eca8e87af15dd4ccecd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d092999bb24992c7636850fa3aed71255c6c2f8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed4b852c33875b0fce86d917b69f8becdb3b8840', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423af69d9bd3bd8c5da4ec59e03bc3cb22e92f69', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8b15352061631f6a7ed6b7f51bd1df6589abf6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470674d0bc312a5dd03820a712e21835e912e67f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ddd946e0fab6879cd124eb07588d0c5894df8a0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3382ce9281bf1bf379a4ab64726fa0b98f973b24', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9222133c90e9af9a9ab26bb39d888e57275d1f8f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e6452587fbf484712fc80024435f35858527b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dce4fb7400d705ba9d01ab1a4b049041c829b12', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8f4f4e6e65feaca36ff50a5236017cd60cb5a4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ab64a35787235ab1cbacd3a9173ecbea09bc525', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
382129896,Add Google AI's Turbo rainbow colormap,"See [""Turbo, An Improved Rainbow Colormap for Visualization""](https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html).

Values were copied from the referenced C/C++ [gist](https://gist.github.com/mikhailov-work/6a308c20e494d9e0ccc29036b28faa7a).

False colors comparison:
**Jet:**
![jet](https://user-images.githubusercontent.com/13294013/75638343-33666b80-5c0a-11ea-8780-24e2884b797e.png)
**Turbo:**
![turbo](https://user-images.githubusercontent.com/13294013/75638344-35302f00-5c0a-11ea-8aef-b2b626d2511d.png)
",True,2791,https://api.github.com/repos/appleseedhq/appleseed/pulls/2791,https://github.com/appleseedhq/appleseed/pull/2791,closed,306,1,4,2,0,0,0,0,[],2020-03-02 01:16:59+00:00,2020-03-02 09:43:59+00:00,30420.0,8:27:00,[],"[{'commit_sha': 'e3d38c024e730f9ef6752505a540eb4416930124', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f3dba3a7b245b1761b733e3b2a3601d941bd9a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
381620389,Tile highlights are now colored,"Addresses https://github.com/appleseedhq/appleseed/issues/1182.

Added _thread index_ and _number of threads_ as arguments to `on_tile_begin` and `highlight_tile`.

From these values, one color can be uniquely selected per thread, using one of [Inigo Quilez](http://iquilezles.org/www/articles/palettes/palettes.htm)'s color palettes.

 (See https://www.shadertoy.com/view/wlKXDm for a demo)",True,2785,https://api.github.com/repos/appleseedhq/appleseed/pulls/2785,https://github.com/appleseedhq/appleseed/pull/2785,closed,89,27,21,5,0,19,0,0,[],2020-02-28 22:15:56+00:00,2020-03-07 09:56:29+00:00,646833.0,"7 days, 11:40:33","[{'comment_id': 386237188, 'comment_body': 'As far as I understand, only the `RenderWidget` needs `thread_index` and `nb_threads`. Have you tried to give those informations to the `RenderWidget` without affecting all tile callbacks (such as `stdout`) ?', 'comment_created': datetime.datetime(2020, 3, 2, 7, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 386238077, 'comment_body': ""We don't have much control over colors here. Have you considered creating a color palette and picking colors in it like this : \r\n`color_index = thread_index % nb_threads % color_palette_size` ? \r\nLike this we don't cast anything and we can choose the colors :) "", 'comment_created': datetime.datetime(2020, 3, 2, 7, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 386238558, 'comment_body': 'Moreover, you can simply drop the `nb_threads` value if you use a color palette.', 'comment_created': datetime.datetime(2020, 3, 2, 7, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 386238735, 'comment_body': ""Be careful with naming, you used `nb_threads` everywhere but it's actually the number of tile renderer. "", 'comment_created': datetime.datetime(2020, 3, 2, 7, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 386344695, 'comment_body': 'That should be fine because there is always one tile renderer per thread. But yeah, it would be more explicit to pass the thread count.', 'comment_created': datetime.datetime(2020, 3, 2, 11, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386344837, 'comment_body': 'We use the ""count"" terminology throughout the code base, i.e. `thread_count` rather than `nb_threads`.', 'comment_created': datetime.datetime(2020, 3, 2, 11, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386345651, 'comment_body': ""`thread_index` can't be passed just to `RenderWidget` since by definition it varies per thread, and there's only one `RenderWidget`. It must be passed to `highlight_tile()`.\r\n\r\nIt's a different matter for `thread_count`, but if we're passing one, we can as well pass both."", 'comment_created': datetime.datetime(2020, 3, 2, 11, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386346000, 'comment_body': ""`thread_index` is a `std::size_t` so it's always >= 0."", 'comment_created': datetime.datetime(2020, 3, 2, 11, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386346206, 'comment_body': ""Remove initialization if you're going to overwrite it immediately after."", 'comment_created': datetime.datetime(2020, 3, 2, 11, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386347721, 'comment_body': ""Same remarks here.\r\n\r\nIn the meantime I'll try to refactor this code to share the `RenderWidget` class across appleseed.studio and appleseed.bench."", 'comment_created': datetime.datetime(2020, 3, 2, 11, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386347890, 'comment_body': 'As discussed in #dev, I think this is a reasonable solution for the time being.', 'comment_created': datetime.datetime(2020, 3, 2, 11, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386348552, 'comment_body': 'Why assign default values? Moreover, `-1` will be converted to an unsigned value (`~0`) so if default values are really needed, I would rather use `~0`.', 'comment_created': datetime.datetime(2020, 3, 2, 11, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386374112, 'comment_body': ""Should I add `thread_count` to the `TileJob` constructor and use it instead of `m_tile_renderers.size()`?\r\n\r\nI'd then pass it to `TileJobFactory::create`, so we could use `m_thread_count` in here: \r\n\r\nhttps://github.com/appleseedhq/appleseed/blob/8053115547b9b804087586e3e8610eab42b1f6f4/src/appleseed/renderer/kernel/rendering/generic/genericframerenderer.cpp#L366-L374"", 'comment_created': datetime.datetime(2020, 3, 2, 12, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 386879121, 'comment_body': 'Remove default values as explained in #dev.', 'comment_created': datetime.datetime(2020, 3, 3, 9, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386879173, 'comment_body': 'I think the way you did it (passing both thread index and thread count) is better.', 'comment_created': datetime.datetime(2020, 3, 3, 9, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386879906, 'comment_body': ""Ah sorry, I got confused:\r\n\r\n> Should I add thread_count to the TileJob constructor and use it instead of m_tile_renderers.size()?\r\n> I'd then pass it to TileJobFactory::create, so we could use m_thread_count in here\r\n\r\nYes, that sounds better indeed."", 'comment_created': datetime.datetime(2020, 3, 3, 9, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 387295734, 'comment_body': 'I think you can simply remove the default values.\r\n', 'comment_created': datetime.datetime(2020, 3, 3, 21, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 387296313, 'comment_body': 'Remove default values also here.', 'comment_created': datetime.datetime(2020, 3, 3, 21, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 387367647, 'comment_body': 'Fixed it 🙂', 'comment_created': datetime.datetime(2020, 3, 4, 0, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}]","[{'commit_sha': 'ec08efe63e313952578e726f3066aed618cfc39c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a99cdad3e4ccf604386d402b4d3f8ab8e819d22f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e887dc280ff762ee7fa88f2596dcb8520db450', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62690c438d90e2c73c679eb9d826368e5547b095', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '273a13e1240b3a8543c0dd2b7f436b56c00025f9', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
391238941,Add Vignette post-processing stage,"Added a new post-processing effect implementing Keijiro Takahashi's [KinoVignette](https://github.com/keijiro/KinoVignette).

![image](https://user-images.githubusercontent.com/13294013/77115197-a6deea00-6a0c-11ea-8bb9-0126fdd2f742.png)


This is a naive (almost) direct port of the aforementioned algorithm, as an attempt to add a simple new effect to appleseed.

| no vignetting | 0.5 intensity (**default**) | 1.0 intensity |
|---|---|---|
| ![no_vignette](https://user-images.githubusercontent.com/13294013/77114745-d3463680-6a0b-11ea-90b9-c1d46a6ec636.png) | ![vignette_0_5](https://user-images.githubusercontent.com/13294013/77114868-0ee10080-6a0c-11ea-8d61-a85135b4bd0f.png) | ![vignette_1_0](https://user-images.githubusercontent.com/13294013/77114874-10122d80-6a0c-11ea-81fd-9e0613325677.png) |

See https://www.shadertoy.com/view/3dXyDH for a GLSL port of the algorithm.",True,2807,https://api.github.com/repos/appleseedhq/appleseed/pulls/2807,https://github.com/appleseedhq/appleseed/pull/2807,closed,296,0,5,6,2,24,1,0,[{'name': 'PR | Squash'}],2020-03-19 21:10:04+00:00,2020-03-23 20:14:12+00:00,342248.0,"3 days, 23:04:08","[{'comment_id': 395828423, 'comment_body': '`<= resolution.x - 1` is the same as `< resolution.x` but the latter is clearer', 'comment_created': datetime.datetime(2020, 3, 20, 18, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 395830246, 'comment_body': 'Can you find better names for the variables and maybe comment it ?', 'comment_created': datetime.datetime(2020, 3, 20, 18, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 395862123, 'comment_body': 'I asume `rf` probably means ""radial falloff"", since this is what it computes, but I\'m not really sure about `e`. Also, since these three lines are a direct port of the [original implementation](https://github.com/keijiro/KinoVignette/blob/master/Assets/Kino/Vignette/Shader/Vignette.shader#L41) (which is not commented), I thought it\'d be better not to rename them.\r\n\r\nWhat do you think about leaving the names as they are, but commenting next to `e` that it\'s "" inversely proportional to the fourth power of the distance to the center""? 😅 ', 'comment_created': datetime.datetime(2020, 3, 20, 19, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 396073274, 'comment_body': "">  I thought it'd be better not to rename them\r\n\r\nWhy ? \r\n\r\nIf you rename `rf` to `radial_falloff`, the code becomes much clearer. And `e` to `inverse_radial_falloff`.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 3, 22, 9, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 396082062, 'comment_body': 'Could you please change this to 2020 and use your (real) name?', 'comment_created': datetime.datetime(2020, 3, 22, 11, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082245, 'comment_body': 'Indent with only two spaces.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082268, 'comment_body': 'Move brace to own line.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082313, 'comment_body': 'Replace `const` by `static constexpr` for real constants.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082411, 'comment_body': 'Yep, or\r\n\r\n    background_premult.rgb() *= e;', 'comment_created': datetime.datetime(2020, 3, 22, 11, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082433, 'comment_body': 'Make all variables const.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082453, 'comment_body': '❤\r\n\r\nPlural: references', 'comment_created': datetime.datetime(2020, 3, 22, 11, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082570, 'comment_body': 'Remove redundant blank line.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082585, 'comment_body': 'Indent once more.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082637, 'comment_body': 'Fix here too.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082653, 'comment_body': 'Two spaces.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082672, 'comment_body': 'Align opening braces.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082729, 'comment_body': ""You're not using this variable, AFAICT."", 'comment_created': datetime.datetime(2020, 3, 22, 11, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082839, 'comment_body': 'Indent just once (4 spaces) with respect to the class. Basically only `public`, `private`, etc. are half-indented, everything else is indented as usual.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082883, 'comment_body': ""You're mixing up float and integer here. Use `props.m_canvas_height` for the upper bound, same for `x`."", 'comment_created': datetime.datetime(2020, 3, 22, 11, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396112566, 'comment_body': ""Oops, nice catch! It can be used to make the vignette depended on the image's aspect ratio or not, I was testing it to see which way looks better:\r\n![image](https://user-images.githubusercontent.com/13294013/77254510-315b5f80-6c40-11ea-9a09-19b7fb13516a.png)\r\nSince the original code from Keijiro is always a perfect circle I simplified it in the `coord` initialization and ended up not using this variable, but I guess it'd be good to add it as an option (?) ([in Unity](https://docs.unity3d.com/Packages/com.unity.postprocessing@2.1/manual/Vignette.html) they have a flag for it called `rounded`)."", 'comment_created': datetime.datetime(2020, 3, 22, 16, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 396114439, 'comment_body': ""> Why ?\r\n\r\nI couldn't think of a good name for `e`, but `inverse_radial_falloff` or `inverse_quartic_radial_falloff` is nice (and makes the comment redundant so we can remove it). I'll change it 🙂 "", 'comment_created': datetime.datetime(2020, 3, 22, 16, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 396263386, 'comment_body': 'Please use `std::size_t` in new code.', 'comment_created': datetime.datetime(2020, 3, 23, 7, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396264876, 'comment_body': 'Not sure the word ""background"" is relevant here, maybe just ""pixel""?', 'comment_created': datetime.datetime(2020, 3, 23, 7, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396264907, 'comment_body': 'Fits on one line.', 'comment_created': datetime.datetime(2020, 3, 23, 7, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': 'c59466c27afab1b945fd0be187d8fdf8044ca628', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2daf50415a62a84403e2bb99ec75327e26cee9b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e49aac286f1b8b77522c0b4b70d528f7cf43e37', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7c3a313eea97579f26a7a5267b37997d54777ed', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53bd452ee983d7a3d3b8b4ec5e78b7d365dd174a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc89f468c4cf2c9b4c1a19a62e3e5ada674f3c4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
390067605,Fix black-body emission not working when emission color is black,"Addresses https://github.com/appleseedhq/appleseed/issues/2765.

The emission color would [incorrectly](https://appleseed.readthedocs.io/projects/appleseed-maya/en/master/shaders/material/as_standard_surface.html#incandescence-parameters) affect black-body emission behaviour when it was black, as it made `compute_edf` equal to 0:

https://github.com/appleseedhq/appleseed/blob/bc952ad860ca6f93bfe4cdd2b966acac4cb42e20/src/appleseed.shaders/src/appleseed/as_standard_surface.osl#L852-L860

Now, `in_incandescence_color` has no effect when the emission type is ""Black-body"" (i.e. `in_incandescence_type == 1`). The ""Custom"" type behaviour remains unchanged.

![image](https://user-images.githubusercontent.com/13294013/76899000-87fa1f80-6875-11ea-83b8-dd3f65c6929e.png)
",True,2806,https://api.github.com/repos/appleseedhq/appleseed/pulls/2806,https://github.com/appleseedhq/appleseed/pull/2806,closed,3,2,1,1,0,0,0,0,[],2020-03-17 20:43:36+00:00,2020-03-24 22:37:36+00:00,611640.0,"7 days, 1:54:00",[],"[{'commit_sha': '3e9f41e1d71999eb1370e8edc010734062092b2e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
406106895,Fix double slider regression,"Fix slider not updating real values (introduced in https://github.com/appleseedhq/appleseed/commit/b6f0bee4a86e2eebdfedaa4940945b57142ff775). 

[![](https://i.gyazo.com/513cc6fab5f6d9b177874e95e4526bf8.gif)](https://gyazo.com/513cc6fab5f6d9b177874e95e4526bf8)",True,2855,https://api.github.com/repos/appleseedhq/appleseed/pulls/2855,https://github.com/appleseedhq/appleseed/pull/2855,closed,2,2,1,1,0,0,0,0,[],2020-04-20 14:41:59+00:00,2020-04-21 08:26:16+00:00,63857.0,17:44:17,[],"[{'commit_sha': '0070adb8ae87a2477fb1732d16d31aa23c35fc26', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
419777765,Refactor the vignette post-processing stage,"Refactored the vignette post-processing stage to split its computation to threads.

Main changes:  
- Added 5 new test scenes (`sandbox/tests/test scenes/vignette/`).
- Added `thread_count` as a parameter of `PostProcessingStage`'s `execute()`.
- Created a new `EffectJob` which implements `IJob`.
- Created a new `renderer/modeling/postprocessingeffect/` folder, to narrow the actual algorithm implementation for post-processing effects into instances of `IEffectApplier` (the stage's `execute()` now simply spawns jobs to execute its `apply()`).",True,2865,https://api.github.com/repos/appleseedhq/appleseed/pulls/2865,https://github.com/appleseedhq/appleseed/pull/2865,closed,1055,42,23,36,0,43,1,0,[{'name': 'PR | Squash'}],2020-05-18 22:41:12+00:00,2020-06-22 07:03:54+00:00,2967762.0,"34 days, 8:22:42","[{'comment_id': 427067079, 'comment_body': ""What's the difference between `stage` and `effect` ?"", 'comment_created': datetime.datetime(2020, 5, 19, 6, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427067337, 'comment_body': 'I think `IImageEffectApplier` or `IPostProcessEffectApplier` is a better name', 'comment_created': datetime.datetime(2020, 5, 19, 6, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427067532, 'comment_body': 'Same here with the naming, `EffectJob` is too generic', 'comment_created': datetime.datetime(2020, 5, 19, 6, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427068034, 'comment_body': 'We should name this vector the same way we do in other job renderers. Something like `m_jobs`  ? It makes more sense then when you call `execute()` on a job.', 'comment_created': datetime.datetime(2020, 5, 19, 6, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427068296, 'comment_body': '`std::` anything you can \r\n```suggestion\r\n    for (std::size_t i = 0; i < props.m_tile_count; ++i)\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 6, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427069339, 'comment_body': 'In other places, we generally don\'t create a struct for the params. We simply give params and we do `params.get_float(...)"" or something where we need the actual values. Is there a specific reason you created this struct ?', 'comment_created': datetime.datetime(2020, 5, 19, 6, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427478328, 'comment_body': 'I think this is correct, i.e., the job has a ""list of appliers"" and the job factory that has a ""list of jobs"".\r\nLike the [TileJob](https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/renderer/kernel/rendering/generic/tilejob.h#L64) which has a ""list of renderers"" but no job list. It\'s the [TileJobFactory](https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/renderer/kernel/rendering/generic/tilejobfactory.h#L80) that has a `tile_jobs`.', 'comment_created': datetime.datetime(2020, 5, 19, 17, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427486370, 'comment_body': 'Do you mean using a `ParamArray`? I had originally thought about it, but as Franz mentioned on Discord, they shouldn\'t be used to pass values ""internally"", for this we can use standard arguments.\r\n\r\nThus, I preferred to group them into a POD-struct as I think it\'s clean and easier to spot them this way, but I can rewrite `VignetteApplierFactory` to receive each one separately. What do you think?', 'comment_created': datetime.datetime(2020, 5, 19, 17, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427531655, 'comment_body': 'I misunderstood the code, my bad :) You did right ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427535329, 'comment_body': '```suggestion\r\n#include <cassert>\r\n#include <cstddef> \r\n```\r\n\r\nFor size_t', 'comment_created': datetime.datetime(2020, 5, 19, 19, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427535736, 'comment_body': 'Was it for debug ?', 'comment_created': datetime.datetime(2020, 5, 19, 19, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427536203, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 19, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427536639, 'comment_body': 'I think you can use/store VignetteParams reference directly here. ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427537269, 'comment_body': 'Do you use both `create` methods ? ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427538147, 'comment_body': ""I don't think these should be in VignetteParams. Maybe you can simply pass them as parameters to the  `apply()` or execute()` method ?"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427540147, 'comment_body': 'Why passing jobs by reference ? Can we return the jobs instead ? When you call this, effect_jobs is empty so there is no need to fill it by reference', 'comment_created': datetime.datetime(2020, 5, 19, 19, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427541102, 'comment_body': 'Yes, my bad 😅 ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427555749, 'comment_body': ""`<cstddef>` is included in the header file, shouldn't I omit it from the `.cpp` then?"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427561714, 'comment_body': ""No, only the static one (`vignettepostprocessingstage.cpp:124`), the other is required by the interface. Iirc something similar is done in the `GenericFrameRendererFactory`.\r\n\r\nSince there's no way to enforce the definition of a static `create()` with an interface, is it better to remove it and use the non-static one? This would imply the need to create an instance of `VignetteApplierFactory` (for each `VignetteParam`)."", 'comment_created': datetime.datetime(2020, 5, 19, 19, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 428175466, 'comment_body': 'Removed the static one.', 'comment_created': datetime.datetime(2020, 5, 20, 17, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 428650587, 'comment_body': 'Yes, you are right.', 'comment_created': datetime.datetime(2020, 5, 21, 13, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428651970, 'comment_body': ""I don't think this needs to be exposed to the API. I think we expose only stages and that should be enough to apply post process."", 'comment_created': datetime.datetime(2020, 5, 21, 13, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428652098, 'comment_body': '```suggestion\r\n        const std::size_t thread_count = get_rendering_thread_count(m_params);\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428652924, 'comment_body': '```suggestion\r\n        void execute(Frame& frame, const std::size_t thread_count) const override\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428654702, 'comment_body': '```suggestion\r\n\r\n    return effect_jobs;\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428657024, 'comment_body': 'should be formatted like this:\r\n```cpp\r\n             ImageEffectJobFactory::EffectJobVector effect_jobs = \r\n                 effect_job_factory.create(\r\n                     frame,\r\n                     effect_appliers);\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428658227, 'comment_body': 'Is it a const reference ? (i.e.  `const auto&`).\r\n\r\nalso, we use const when the type can be easily determined like ` const auto something = static_cast<TYPE>(...)`. Maybe you should use explicit type here', 'comment_created': datetime.datetime(2020, 5, 21, 13, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 432522797, 'comment_body': 'Move brace to its own line.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 432523034, 'comment_body': 'Mark as `explicit`.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 435858070, 'comment_body': ""I don't think you need to expose that"", 'comment_created': datetime.datetime(2020, 6, 5, 11, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 436372090, 'comment_body': ""For consistency's sake, this should probably be called `PostProcessingEffectJob`."", 'comment_created': datetime.datetime(2020, 6, 7, 14, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372106, 'comment_body': 'And the name change should be propagated here too.', 'comment_created': datetime.datetime(2020, 6, 7, 14, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372390, 'comment_body': 'This assertion feels redundant. It made sense in the context of rendering tile jobs where the number of jobs was indirectly controlled via `m_tile_count_x` and `m_tile_count_y`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372472, 'comment_body': 'A more cache-friendly ordering is the Hilbert one, I would suggest that this would be a better default.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372542, 'comment_body': 'You can simply forward-declare `IImageEffectApplier`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372765, 'comment_body': ""Technically this comment is incorrect as the main purpose of the job manager isn't to wait until jobs have stopped :)"", 'comment_created': datetime.datetime(2020, 6, 7, 15, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372781, 'comment_body': 'Include `<cstddef>`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372923, 'comment_body': 'Why aren\'t you overriding `PostProcessingStage::execute()` here? That was the idea: a multithreaded post-processing stage is just another ""standard"" stage, it just happens to execute a post-processing effect in a multithreaded fashion. The post-processing effect should be passed to the constructor.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373124, 'comment_body': 'I would suggest to only skip if `m_intensity` is exactly equal to 0.0f.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373145, 'comment_body': 'Move brace to its own line.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373389, 'comment_body': 'I see now why you introduced `execute_on_tiles()` but IMHO you can simplify further: any post-processing stage based on `MultithreadPostProcessingStage` should mostly just pass the right effect (here the vignetting effect) to `MultithreadPostProcessingStage` and let that class handle everything.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436433892, 'comment_body': 'Should I keep it if I change `linear_ordering` to `hilbert_ordering`?', 'comment_created': datetime.datetime(2020, 6, 8, 2, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 442892650, 'comment_body': 'Yes, good point.', 'comment_created': datetime.datetime(2020, 6, 19, 15, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': 'ff7146473f374a152f5b30356c46f6eacdc3f11b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae2ff585a231e953197759d17aeb71083e81835c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81becff8bc795ceefa9b5510678d75a4743a1dc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55862a4b0ae8d4c733bd4603cbdf7dd5bf155a25', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9654d2dad257acbf52f92a28c59853fc672d002f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b66cafa9c0b14da71f70009fdccf856c4e04b46', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2ba7d41654aedd40337b9b76fb79e9b12f3350', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7abc491b8bde3c52c639576949fcda70fe4be8eb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59581fd4c9b81625796847ecb9fa64b1f5027a45', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc15e08e9eab0f9097ad82f6e69de237a316302c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdde32591e45fe561d945e0e500d0e7092ac85c3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01c3929e26da7eed3fbd25c0b5a6c0642d9548b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e85e378bc441da0f91f3df12331d840fb2d851fb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f7bf05a348a850fc80216f3b115b2ebc9872ede', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa46eb30f1664e641ef8053d40861ff10ccc5846', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '402ffffe1eac69575302a500bc6b45226b4e42ee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745c693b0dee81564d38fbca46e3dadda39a08e0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74365f6431e10f675b01205ce04943e808fd15e2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7654c52af50d65745978e205c70ab450f7171cd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '189b9493b381258692410e63b92206ebb1c31807', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc83b192b73d3f0dcce2d650aa0ff132d81b587', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9523fbc0b80f1e619a9654407fc0e86e53760edc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1dee06ee07cac7a2b5fd57da81635fb9ed6561', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab440cd8aefcc4d0c8e6032d0417ec76d1a1b737', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb96cc48df1d074f3d46129316347d5ff21ef719', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68751e216454bcce6f0bd7367ab3d0ec60ef666b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95cdebfdfbafa9f9c8ef138bf2d60a6f025c9769', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fadd3cf84d0fd0f4e2a6a762cf0ef96ff2de84a5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08986bbc36f7eedf3a8b6e3d3c092b1ff75ee8f6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f24381dd041e7bb9c71822f5cd7b7b81d5cf905b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cf7871531a6668489d4617506d52a4df413bd3e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f3768c8de10a687e1823c7465a2f0a9edf5bfd1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf5dc1a40b27bffbddfbe8aad3d9278aec803a6b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da70bc454dea815a222956114059481a92f2b74', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '794fc4b216a4fae0e7dec28a27da7e875af91d99', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ee4fc37d5b1bd0225d5841b273ae837c454f6b', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
438899997,Add Bloom post-processing stage,"Added Bloom as a new post-processing stage. Its 5 parameters are:
- `iterations`: number of downsampling iterations used for blurring, which indirectly controls the spread distance / radius
- `intensity`: strength of the Bloom effect (i.e. blending factor with the original image)
- `threshold`: filters out pixels under this level of brightness
- `soft_threshold`: makes the trasition between under/over-threshold gradual (0 = hard, 1 = soft)
- `debug_blur`: toggle to show only the Bloom target image, which is composited with the final render

Main changes:
- Included 11 test scenes (which render in ~30sec on a Core i5-4670K @ 3.40GHz)
- Created 4 new `ImageEffectApplier`s used in the Bloom stage, for:
	- (Weighted) additive color blending
	- Applying a bright-pass filter
	- Resampling images with a slight modification of Marius Bjørge's ""Dual filtering""
	- Resampling images by a factor of 2 (faster than the method above)

The implementation is pretty similar to Keijiro Takahashi's [KinoBloom](https://github.com/keijiro/KinoBloom) (used in [EEVEE](https://github.com/blender/blender/blob/master/source/blender/draw/engines/eevee/shaders/effect_bloom_frag.glsl#L6)) and to Unity's Post-Processing [Bloom](https://github.com/Unity-Technologies/PostProcessing/blob/v2/Documentation~/Bloom.md).

However, instead of using the sampling filters from Jorge Jimenez's [SIGGRAPH2014 presentation](http://advances.realtimerendering.com/s2014/#_NEXT_GENERATION_POST), it is based on Marius Bjørge's [""Bandwidth-Efficient Rendering""](https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_marius_2D00_notes.pdf) presentation from SIGGRAPH2015 (and also, it is not implemented with shaders).
",True,2875,https://api.github.com/repos/appleseedhq/appleseed/pulls/2875,https://github.com/appleseedhq/appleseed/pull/2875,closed,6979,45,45,87,4,21,1,0,[{'name': 'PR | Squash'}],2020-06-24 01:01:25+00:00,2020-09-30 04:14:36+00:00,8478791.0,"98 days, 3:13:11","[{'comment_id': 452350808, 'comment_body': ""How can you ensure this test is robust regarding the fact you're using integers ? A more robust way to test it is `m_src_width * 2 == dst_width`. "", 'comment_created': datetime.datetime(2020, 7, 9, 16, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452357955, 'comment_body': 'Why you use a lambda ? Have you tried your code without it ? Normally, it should be ok but maybe there is a performance issue there. https://stackoverflow.com/a/39864437/4623982', 'comment_created': datetime.datetime(2020, 7, 9, 16, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452359565, 'comment_body': ""Possible optimization (i'm not sure it's worth it): instead of fetching pixels insinde of blerp, fetch them all here using your window size and then blerp it.\r\n\r\nIf possible, fetch it using a scanline or something instead of fetching pixel by pixel."", 'comment_created': datetime.datetime(2020, 7, 9, 16, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452359999, 'comment_body': 'Explain what the applier does (i.e. `Filter out dark pixels ...`)', 'comment_created': datetime.datetime(2020, 7, 9, 16, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452360201, 'comment_body': 'Explain what it does', 'comment_created': datetime.datetime(2020, 7, 9, 16, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452360527, 'comment_body': 'Document the parameters', 'comment_created': datetime.datetime(2020, 7, 9, 16, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361218, 'comment_body': 'Props can be computed outside of the loop', 'comment_created': datetime.datetime(2020, 7, 9, 16, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361335, 'comment_body': 'It can be const', 'comment_created': datetime.datetime(2020, 7, 9, 16, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361797, 'comment_body': 'Warning instead of info ?', 'comment_created': datetime.datetime(2020, 7, 9, 17, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452362170, 'comment_body': 'You should explain the general algorithm somewhere (passes process and stuff). Be sure to also link your references', 'comment_created': datetime.datetime(2020, 7, 9, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452362733, 'comment_body': 'Can you explain why we need such buffer ?', 'comment_created': datetime.datetime(2020, 7, 9, 17, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452366541, 'comment_body': ""I added it to make `result` a `const`. I don't think this showed any performance hit, but I'll double check it and see if using a lambda resulted in something weird in the assembly 🙂 "", 'comment_created': datetime.datetime(2020, 7, 9, 17, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452368177, 'comment_body': 'I tried fetching all of them beforehand for downsampling (that\'s the ""jump from 6 lines to ~100"" I mentioned some time ago 😅), but it didn\'t make any noticeable difference so I didn\'t try it for upsampling.\r\n\r\nI haven\'t looked into fetching a row of pixels at once though.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452370113, 'comment_body': ""I'm using it this way to account for integer truncation, e.g.:\r\nIf the original image is 101x101, the first downscaling will result in a 50x50 image. Thus, we'll later have to upsample from 50x50 to 101x101, so `101 / 2 == 50` works but `50 * 2 == 101` wouldn't."", 'comment_created': datetime.datetime(2020, 7, 9, 17, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452376103, 'comment_body': 'These represent the ""current level"" dimensions, so at the end of each for-loop iteration they are divided by two.\r\nI can move them to the init statement to make it clearer:\r\n```cpp\r\nfor (std::size_t\r\n        level = 0, \r\n        level_width = max_level_props.m_canvas_width, \r\n        level_height = max_level_props.m_canvas_height\r\n    ; level < level_count\r\n    ; ++level)\r\n{\r\n    // ...\r\n}\r\n```\r\n(I\'m not sure what would be the standard way to format it in appleseed)', 'comment_created': datetime.datetime(2020, 7, 9, 17, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452989120, 'comment_body': ""`level_width` and `level_height` aren't constant: https://github.com/appleseedhq/appleseed/pull/2875#discussion_r452376103."", 'comment_created': datetime.datetime(2020, 7, 10, 17, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452989510, 'comment_body': 'Better, ty 🙂 ', 'comment_created': datetime.datetime(2020, 7, 10, 17, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452999557, 'comment_body': 'When we blur an image its intensity fades. So, by adding the intermediate blurring steps we can avoid this, e.g.:\r\n![Jfw0rZ5bno](https://user-images.githubusercontent.com/13294013/87185437-25afa980-c2c0-11ea-8612-bf986fcf2aa2.gif)', 'comment_created': datetime.datetime(2020, 7, 10, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 455521247, 'comment_body': 'Maybe you can explain this directly in the code ?', 'comment_created': datetime.datetime(2020, 7, 16, 5, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 455521665, 'comment_body': ""The result is const but the code is less easy to read. I think it's better to not use lambda and keep the code easy to read. You can make an inline method if you want to make a const with all this."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 461609757, 'comment_body': 'These shaders are already in the sandbox I think. Can you try to reference them instead of duplicating them ? You can try `grep -rn as_blender` in the `test scenes` folder to see how other scenes are using it.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}]","[{'commit_sha': '74080bae310906e7ebe497a81f178dec933752cf', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1fc70d04aa6effa9ed0c32ac9ba66f6ed0deb93', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d84b4436c130a3899b3756901495f530992c18', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41b8e3b928cb75e2808957c166c009a28a4a8be9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb64fb2994636af284fe761bb8d2b622b255ff3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef1a4cef3c580fdd08b7e3b734460cce3aa1b786', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d758767f05d1d3481ff94ec79a9ddd15810a210', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53154763651f5307489df4c7e15f5ced607be514', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c3f30e2ed8d703a28f5df842e1c4f5d17ca2954', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78456923eb178134177b8b64da1c932eb2c2830e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a70d2475bd745f687ce154d929388f2b000ecded', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847d23362ab51d79f00a234bc4834454b1059578', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d8db063be07c6257694f640251e6ad21fadf8be', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f38f89882bafe95532f025151962f1126ebe2a17', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a40789da3206a83e70a9f784abaaa961a9243161', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53815df7b58d503eb586405f318070fb75688b9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe647d99267fda9fddc00969785b8b5c2e9f11d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeff7084d4b925537b1b099c27df8fbe32f3985a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48bfe282c711a630dc90e082d8c895f6e0bb4d54', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c795b498deded2f6260fc2282457cdf68b30172', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b9a9c906c267769e1f42b19a77626c0e246a0d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1379220392b35568e5ccab1c93a82f59afc21ff4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ca1e84284fdd3bef0a3510be380f43b7d69d1c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157b502fb3c19162d2fc609e9a2940ebe50eff17', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fcd6e6816ec9350ee6ce52884afbb5c88e53258', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '858c726323d88c4fd82c4ad5108c4a96cfd670ac', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df25d2d81c17a22900fd2f7c701c142726236e67', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678a0f334703ac3cc7a1c2602107b0bd26415fcd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc72a1262bf466c3d690f37ec690613bcc20dbd4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f576409a1414fcbdd41b3f1209c620660abc06fb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfee087b3110274e2d50d2ef54aacd89851becd0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22094f635787d8bd71ac87b03240355aa70dffc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1d8d47e874aded8e01fd1779260187550053a8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a59237a782577ee89621b939a67706d9f6c828', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83e49be021a6613a6e0aa133ee42d08f00de91eb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07a147a8e1c62bd72f322a4d2f97149bd958a07e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35c70c8f86fd7ff2dbec4af39dcd0b0ffc6d876e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb1f0a8dfbf427e8eb5f99abebcb4e3d0e328d56', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da6e054063498218973b78e14a3f12c23cc7b9b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050f89b6113be8760ab6c1d101b5662e618a3a42', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f77ed84b83dc5bd88bb99de2a91b75e2249bf9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b8be4b72c9c357953ab445c336ed663fe7b7ca5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a50a45d06a9e2806bae309231f61e58716ef7695', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b1a6153d1c1e9183ad900be2b71493237c517d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c84aaaf3d18b46e160c65386c054a2df975686c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e97421ed9b9e38d4b2d954667926ca1c0169dbea', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7b194e6b802bda7355b614ad0201f5be4dd4f4d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992d9e4766d354b4af3a78dca552c2d33f17bae0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a4a650781152e413a6deba5601e938019d70e3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e89a8f95e2bc5f29150edfaf68ea537f12e6590', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ff738abe9ad7fdff0379d1a3e5772416e7d5f85', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b99bffd7e958d573174cc889d5ad5b6241e2357', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6982c8f6e1ce7cc55554a059ab89ae534fc7e1b5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485451caa134f47ceac3c7664ccb50a81681d975', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed87312403e9e0ed6016d7edda9b619b6cd24dd4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46644ca934a7ed5041671cf2ef61a5e310ac5046', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787b7b3975061a5118b3b2559c08e9b8e4ca1e10', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35163385f342a2d7c59006ba0751701bee09d95a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00d1efcd0f70b56203606964ee4d6d3f4a56c05', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3304ac0b599474f62628883ed1d7e74364bef2b6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb87e544d631d6b88823399e07f38fd5cbd202de', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68446b4d2fef97b90af948453fb862c80fb95fa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbee4a14c267f845e8afa3beb61fe52e526fcace', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '691a9c3b9345d90fbac170968ad84863a4eddc42', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1953c5557507ab222acbb2f30e152ea506bdfab', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c3f1ebafbde15ac83a5cf4d5594bb84ba75aa4e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '763b5e9a04d5ab639c77eefa266b49760bb472e2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6cc6694fcd4482c429cb76983c5852f5a41c5b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdf4e0ce76ac071214f41b82f92c5ad6772d475', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad230decf52c10892bb3792af64003a6fe555919', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '287b5231b3c8cc38c88187285e44bbb6e7aa09e9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '389a731f6e9ed0c44a8ca089aeb7d617565d2728', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3032d4d26194133fc298ace96b2fbde0ca8542b1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '211d13457159905201113e8825cee4585faebbfa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b4a6705992c00f35e7d813fa38ae05a5a87dee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07622129735966410e8a9d856f47a3f5f7dbec21', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e84f5aacc71a479cd821a917d237eca0ddc05a7b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dae5b58061990e4891dfb582b1d7f874b116f965', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63bb309545377255f205170f71fa3c61ced94fb2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9bda48018b9c6657904c5aa47be273bee9b7741', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f10f389acb9291c5972b01c1f5e12b62f3d6a1ee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3c8ec71448dc8eae69e5fae3f50edd2f688db7c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6faf2abe940aaf755f8099e93646c5333a848154', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c8d0b04645bd7e73a96fbdfcf3141ef3605951', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5464ee0d896e8c1985c3fede6062653e0cc39708', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a08192e3242f17fa7d3de9f2b293e2bf30fd3d8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e4c86d4a4b8ecd97d158aa686115178aac839b4', 'committer_username': 'oktomus', 'committer_name': 'Kevin Masson', 'committer_email': 'kevin@tuataravfx.com', 'commit_date': datetime.datetime(2013, 6, 9, 22, 6, 18, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
441550526,Fix Shift+F5 causing False Colors to be applied twice,"The color map post-processing stage, applied when `False Colors` is enabled, is being called twice on `Stop Rendering (Shift+F5)`.

---
This happens by `on_rendering_abort()` being called and emitting a `signal_rendering_abort()` at:
https://github.com/appleseedhq/appleseed/blob/964c5a91d27760370f20b15f07088dc6a0064e36/src/appleseed/renderer/kernel/rendering/masterrenderer.cpp#L173

which also results in emitting `signal_rendering_failed()` on:
https://github.com/appleseedhq/appleseed/blob/964c5a91d27760370f20b15f07088dc6a0064e36/src/appleseed.studio/mainwindow/rendering/renderingmanager.cpp#L113-L117

Thus, `slot_rendering_end()` runs twice.

---
I'm submitting a ""conservative"" fix, as it only prevents False Colors from being applied when a ""failed"" signal is emitted (other previous behavior stay the same).

However, it would be interesting to remove unnecessary computations that are being run twice. Creating a new `signal_rendering_aborted()` on `renderingmanager.cpp` could help splitting what should be run on ""aborting"" from ""failing"", e.g.:
```diff
- if (rendering_result.m_status != MasterRenderer::RenderingResult::Succeeded)
-     emit signal_rendering_failed();
+ switch (rendering_result.m_status)
+ {
+   case MasterRenderer::RenderingResult::Succeeded:
+     break;
+ 
+   case MasterRenderer::RenderingResult::Aborted:
+     emit signal_rendering_aborted();
+     break;
+ 
+   default:
+     emit signal_rendering_failed();
+     break;
+ }
```",True,2877,https://api.github.com/repos/appleseedhq/appleseed/pulls/2877,https://github.com/appleseedhq/appleseed/pull/2877,closed,7,12,4,3,1,0,1,0,[{'name': 'PR | Squash'}],2020-06-29 17:25:54+00:00,2020-10-18 15:35:57+00:00,9583803.0,"110 days, 22:10:03",[],"[{'commit_sha': 'a792bc4602afaa4980352cbada1ea8e06fe007bd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27d23def82492575c80172e755618669f92b30cc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6284638c56401de73e981c45470b9727a74aca1b', 'committer_username': 'oktomus', 'committer_name': 'Kevin Masson', 'committer_email': 'kevin@tuataravfx.com', 'commit_date': datetime.datetime(2013, 6, 9, 22, 6, 18, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
444465612,Fix false colors not being applied to all tiles on a final render,"This PR fixes the following bug (which happens when we have post-processing stages, and `False Colors` is enabled):

![](https://cdn.discordapp.com/attachments/707230180233707591/727955871510036601/IdRVxIiHXU.gif)

**Edit:** I undid the changes I mention below because they don't fit well with https://github.com/appleseedhq/appleseed/pull/2885 (though, I intend to add them in a later PR, once we discuss what'd lead to the best ""user experience"").

~Also, these changes make post-processing effects always run when a rendering is stopped (e.g. `Shift+F5`).~
~If this behavior is desirable, https://github.com/appleseedhq/appleseed/pull/2878 can be closed. Otherwise, we can keeps effects only being applied to final renderings with:~

```diff
@@ -226,7 +226,7 @@ struct MasterRenderer::Impl
             render_info.insert(""render_time"", m_project.get_rendering_timer().get_seconds());

             // Don't proceed further if rendering failed.
-            if (result.m_status == RenderingResult::Failed)
+            if (result.m_status != RenderingResult::Succeeded)
             {
                 controller.on_rendering_abort();
                 return result;
@@ -241,12 +241,7 @@ struct MasterRenderer::Impl
             // Insert post-processing time into frame's render info.
             render_info.insert(""post_processing_time"", stopwatch.get_seconds());

-            switch (result.m_status)
-            {
-              case RenderingResult::Succeeded: controller.on_rendering_success(); break;
-              case RenderingResult::Aborted: controller.on_rendering_abort(); break;
-              assert_otherwise;
-            }
+            controller.on_rendering_success();
         }
```",False,2880,https://api.github.com/repos/appleseedhq/appleseed/pulls/2880,https://github.com/appleseedhq/appleseed/pull/2880,closed,13,15,2,3,5,1,0,0,[],2020-07-05 21:55:16+00:00,2020-10-18 19:04:36+00:00,9061760.0,"104 days, 21:09:20",[],"[{'commit_sha': '6997bcde66f0fd722355b5142a28997a845d190d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '895a78c4bdedbda93acf1ee016ea925a8409c600', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef3af0d899bcee0b2d66bce3e7f7417d61fd6b6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
458000119,Add Tone Map post-processing stage,"Added 7 new tone map operators:
- Two ACES approximations:
  - `ACES (Narkowicz)`: by Krzysztof Narkowicz (ref. [[1]](https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/))
  - `ACES (Unreal)`: by Romain Guy (ref. [[2]](https://www.shadertoy.com/view/llXyWr))
- Reinhard's operators from [""Photographic Tone Reproduction for Digital Images""](http://www.cmap.polytechnique.fr/~peyre/cours/x2005signal/hdr_photographic.pdf):
  - `Reinhard`: Equation 3 in the paper (the simple 1/(1+x) tone mapping)
  - `Reinhard (Extended)`: Equation 4 in the paper
- Three filmic curves:
  - `Filmic (Hejl)`: by Jim Hejl (ref. [[3]](http://filmicworlds.com/blog/filmic-tonemapping-operators/), [[4]](https://github.com/tizian/tonemapper))
  - `Filmic (Uncharted)`: by John Hable, used in Uncharted 2 (ref. [[5]](http://filmicworlds.com/blog/filmic-tonemapping-operators/))
  - `Filmic (Piecewise)`: also by John Hable, developed with the aim of being simpler / more intuitive (ref. [[6]](http://filmicworlds.com/blog/filmic-tonemapping-with-piecewise-power-curves/))

The first filmic curve is almost ""plug-n-play"", while the other two are pretty customizable.

I think these seven operators provide a good starting point for *appleseed*.
While there are many other interesting ones that could definitely have been included (look at [`tonemapper`](https://github.com/tizian/tonemapper) for instance), IMHO the most important thing after adding these is to improve the ""user experience"" when using them on *appleseed.studio*.

This mainly involves: **1)** applying the effect as the parameters are changed (in the same way False Colors does it currently); and **2)** having a graph of the tone curve in the stage settings, specially for understanding the parameters of the two filmic curves from John Hable.

---

### Example
![tmo_comparison](https://user-images.githubusercontent.com/13294013/90816601-ed5dab00-e302-11ea-8abc-f5d77501bf6d.png)

### Original
![original](https://user-images.githubusercontent.com/13294013/90816638-ff3f4e00-e302-11ea-801a-fdd59875cd9f.png)
",True,2884,https://api.github.com/repos/appleseedhq/appleseed/pulls/2884,https://github.com/appleseedhq/appleseed/pull/2884,closed,6395,0,34,44,0,1,1,0,[{'name': 'PR | Squash'}],2020-07-28 19:16:51+00:00,2020-09-28 18:32:24+00:00,5354133.0,"61 days, 23:15:33","[{'comment_id': 487401699, 'comment_body': 'Would make sense to use `std::unique_ptr<>` here.', 'comment_created': datetime.datetime(2020, 9, 12, 11, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': '210f674aeceb00ac9f44b839e18a18a787f0c470', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc03dcbc2ca9fd600f7666f1eaea94f5f4b591a3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0482ffe32fdd8f9d5cf0aa1dac4ce0ad6453ee5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1822209665ed18307666a8fc059ae14c1283e99a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '984e9a6c703ecf88d33c3c23e4316cb67e67deba', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3a2181662606752c36114c441f8cb6458c4577', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '056e7ab76fcf472c7211acad3a014e225a5a21db', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3b14344091f239a85fed5dd98f32b6cd66710f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '299dbf4dfd19e1f6406c6bdf8237c004411b4dd5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f708128c35c3e1196786b872aba1091e9278aeb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43dd5f6ec65ca3cca896f39cfacf8821e59fc182', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9830e66aedccddba8c4bcd57e3b5aadb91b4b5c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fff29710c8a36bcf1fea89b4ac87808d2def90fc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad78e9650173471cebb6fe098d97aae0555264d3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4cd0912e4e538e689a564ad24110e6de34e2ed', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1107626d98d4fee927973a1308928f8736e3548', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba7ef417cbd3d5d00f0e38e910970d54afcb6b32', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b22091756bee06ea5de705f64a357580cd0e48a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09953371aa6f1566d46a0188c74970363bc924dd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdc165894fe7911a255913bf8e301ebaf7673cf3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0210d3f3214475f331cb3bd1aae2eb2bf5e762e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b2c64162f40d87e09fa05f7266964bd1f362d4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cdca95a86261a0bd9715b20fef5e4e1af5974e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ef93cb23a2890dd71ccfa21dade15ca17657d4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f83bd2a18e14c37acf8422bbe3b120447bf8d218', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470f63c4e3b1c01a86e7af054f693440760b99db', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05c1df1bcfdd1cbb777f160237757dd482b0af61', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2382d29425d48603475ac8d768855b118a3400', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c56a7a90d85d5d3bbb9b3c89cd3ef8d1c335d41', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43510e1c1d3d679bbed66bc48d73844e326bc51c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78faac19a3549e6cb613f6ca86d552b3eaad0781', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f49c78da559a5d79d73d5c7eafd5b9722c859b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5998ffe31ce4409bb2253188ce0c66c43ae7109f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33f13669d28c6ba07920308113313dc794ef74c0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb48c7420b6c44ab8fbcb4a5027249a823ac6d7', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60c351a729507556c44cece150818cd63d7ea87', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfd2fc3c44cf86e4a73df91909880ba850fb25aa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cccc7fa71f3480ea81c8f142271cafad2326ea1b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49970e298fc95ef5de9128e28181aa2546adb319', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee26f315753f273927a534e23a8e1e1efe178638', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6957c9de3a3fcf20475e7479e70e2b10431db7ef', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fc013ce7feb10f4c5d3cdb1b4aef3d72fb0434b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d60a2c254bd7965d9d4fad6de403596e11a13f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67eeb40a2beec56257c18b30ceaf13c3f507db4a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
468375225,Add Chromatic Aberration post-processing stage,"Added ([lateral](https://en.wikipedia.org/wiki/Chromatic_aberration#Types)) Chromatic Aberration as a new post-processing stage.

This stage has two parameters, for artistic control:
- `strength`: controls the effect intensity by increasing distortion towards the edges of the image (thus, radially increasing the ""color fringes"")
- `fringing`: controls the amount of colors we use for the effect, i.e.:
  - the smallest value will result in the default ""three-color split"", found in most implementations of CA
  - higher values lead to a more ""rainbow-like"" effect, as shown in [this presentation](https://www.youtube.com/watch?v=RdN06E6Xn9E&t=428s) (see image comparisons below)

_Note: ""fringing"" might be a bad/misleading name.. renaming it to something like ""smoothness"" would probably be better._

---

| no aberration | default values |
|---|---|
| ![image](https://user-images.githubusercontent.com/13294013/90426829-0f9fc080-e098-11ea-86cc-ef29e5b90c7e.png) | ![image](https://user-images.githubusercontent.com/13294013/90426876-20503680-e098-11ea-8ce2-0ee6f3a911ed.png) |

_obs.: using a higher `strength` value than the default for the images below:_
| lowest `fringing` | highest `fringing` |
|---|---|
| ![image](https://user-images.githubusercontent.com/13294013/90427057-63120e80-e098-11ea-8317-fccfad3635b3.png) | ![image](https://user-images.githubusercontent.com/13294013/90427077-6c02e000-e098-11ea-95be-703a2b2fa486.png) |",True,2887,https://api.github.com/repos/appleseedhq/appleseed/pulls/2887,https://github.com/appleseedhq/appleseed/pull/2887,closed,1969,0,19,18,0,0,0,0,[],2020-08-15 23:23:30+00:00,2020-09-29 05:05:54+00:00,3822144.0,"44 days, 5:42:24",[],"[{'commit_sha': '3f98fd65caf4d876e27ccad6338aa4485a1d33de', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff86dd214c6a20d79c61661f72e96ad0aed7f640', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3160bfd2647065dc3e9959bf03a8ed316291a6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62e5575d82d7f517a286eda539f7cc23e24cb10', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071c32be3cb301f6e207dcdce2c02fc6a27b5eda', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7a2d26dce2d885f93c94fcc1887cd34491e8c72', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15915d0bffb82269954339ac445af960f698ff6a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a33160bb5976b4677d22c0b23505104d47545616', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35229db3df10b418fe174ee0e4f60da8c9d58668', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f75de9a084cba4cc35a522417c563411326b8c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69cbf0e739730e1efe16db580611ebcb2206874c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24322aa463b7e6d391c27572d5449055eacd0350', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f5b8aa506417fc80a4f18723f6cfc78773d482', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de927f18fb0b0762103af0dc7f7fbd3714056e8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2b2cd170f0fcafbc39a5a61b3dd0a2eae4185e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54fecac54eea4416f5c831268e27db1ab4d2ae49', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27db76b7418e98631852c5ee435c3b6e2cb03c56', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c77feaad03f8b7c04e0e732528c0247e727e6c1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
464169554,Preview post-processing stage changes in appleseed.studio,"This adds a rendered preview when parameter values are changed for post-processing stages (similar to the current behavior of `False Colors`).

Note that only the effect that is being changed is applied for preview (i.e. if there are multiple stages, this won't show all of them).

![gS09PO8IEs](https://user-images.githubusercontent.com/13294013/89563365-b8753280-d7f1-11ea-9c77-3c14f6655f59.gif)

---

**Obs.:** as of right now, when you add a new effect it doesn't work untill you click `OK` to add it _and then_ edit its parameters. This should be fixed before this PR is merged.

---

Other ""nice-to-have""s are:
  - Render effects preview on a downscaled version of the frame, so it's more responsive (and make this a customizable option)
  - Some way to ""opt-out"" of this (e.g. a checkbox), either for all stages or for a specific one, untill all effects are ""real-time""
  - Save / export the current frame, with effects preview (should probably be an optional ""pop-up"")
",False,2885,https://api.github.com/repos/appleseedhq/appleseed/pulls/2885,https://github.com/appleseedhq/appleseed/pull/2885,open,117,10,8,13,1,0,0,0,[],2020-08-06 17:33:27+00:00,,0.0,,[],"[{'commit_sha': 'c8516fb59724ec1d492c1eca8e87af15dd4ccecd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d092999bb24992c7636850fa3aed71255c6c2f8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed4b852c33875b0fce86d917b69f8becdb3b8840', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423af69d9bd3bd8c5da4ec59e03bc3cb22e92f69', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8b15352061631f6a7ed6b7f51bd1df6589abf6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470674d0bc312a5dd03820a712e21835e912e67f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ddd946e0fab6879cd124eb07588d0c5894df8a0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3382ce9281bf1bf379a4ab64726fa0b98f973b24', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9222133c90e9af9a9ab26bb39d888e57275d1f8f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e6452587fbf484712fc80024435f35858527b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dce4fb7400d705ba9d01ab1a4b049041c829b12', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8f4f4e6e65feaca36ff50a5236017cd60cb5a4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ab64a35787235ab1cbacd3a9173ecbea09bc525', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
382129896,Add Google AI's Turbo rainbow colormap,"See [""Turbo, An Improved Rainbow Colormap for Visualization""](https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-for.html).

Values were copied from the referenced C/C++ [gist](https://gist.github.com/mikhailov-work/6a308c20e494d9e0ccc29036b28faa7a).

False colors comparison:
**Jet:**
![jet](https://user-images.githubusercontent.com/13294013/75638343-33666b80-5c0a-11ea-8780-24e2884b797e.png)
**Turbo:**
![turbo](https://user-images.githubusercontent.com/13294013/75638344-35302f00-5c0a-11ea-8aef-b2b626d2511d.png)
",True,2791,https://api.github.com/repos/appleseedhq/appleseed/pulls/2791,https://github.com/appleseedhq/appleseed/pull/2791,closed,306,1,4,2,0,0,0,0,[],2020-03-02 01:16:59+00:00,2020-03-02 09:43:59+00:00,30420.0,8:27:00,[],"[{'commit_sha': 'e3d38c024e730f9ef6752505a540eb4416930124', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f3dba3a7b245b1761b733e3b2a3601d941bd9a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
381620389,Tile highlights are now colored,"Addresses https://github.com/appleseedhq/appleseed/issues/1182.

Added _thread index_ and _number of threads_ as arguments to `on_tile_begin` and `highlight_tile`.

From these values, one color can be uniquely selected per thread, using one of [Inigo Quilez](http://iquilezles.org/www/articles/palettes/palettes.htm)'s color palettes.

 (See https://www.shadertoy.com/view/wlKXDm for a demo)",True,2785,https://api.github.com/repos/appleseedhq/appleseed/pulls/2785,https://github.com/appleseedhq/appleseed/pull/2785,closed,89,27,21,5,0,19,0,0,[],2020-02-28 22:15:56+00:00,2020-03-07 09:56:29+00:00,646833.0,"7 days, 11:40:33","[{'comment_id': 386237188, 'comment_body': 'As far as I understand, only the `RenderWidget` needs `thread_index` and `nb_threads`. Have you tried to give those informations to the `RenderWidget` without affecting all tile callbacks (such as `stdout`) ?', 'comment_created': datetime.datetime(2020, 3, 2, 7, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 386238077, 'comment_body': ""We don't have much control over colors here. Have you considered creating a color palette and picking colors in it like this : \r\n`color_index = thread_index % nb_threads % color_palette_size` ? \r\nLike this we don't cast anything and we can choose the colors :) "", 'comment_created': datetime.datetime(2020, 3, 2, 7, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 386238558, 'comment_body': 'Moreover, you can simply drop the `nb_threads` value if you use a color palette.', 'comment_created': datetime.datetime(2020, 3, 2, 7, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 386238735, 'comment_body': ""Be careful with naming, you used `nb_threads` everywhere but it's actually the number of tile renderer. "", 'comment_created': datetime.datetime(2020, 3, 2, 7, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 386344695, 'comment_body': 'That should be fine because there is always one tile renderer per thread. But yeah, it would be more explicit to pass the thread count.', 'comment_created': datetime.datetime(2020, 3, 2, 11, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386344837, 'comment_body': 'We use the ""count"" terminology throughout the code base, i.e. `thread_count` rather than `nb_threads`.', 'comment_created': datetime.datetime(2020, 3, 2, 11, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386345651, 'comment_body': ""`thread_index` can't be passed just to `RenderWidget` since by definition it varies per thread, and there's only one `RenderWidget`. It must be passed to `highlight_tile()`.\r\n\r\nIt's a different matter for `thread_count`, but if we're passing one, we can as well pass both."", 'comment_created': datetime.datetime(2020, 3, 2, 11, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386346000, 'comment_body': ""`thread_index` is a `std::size_t` so it's always >= 0."", 'comment_created': datetime.datetime(2020, 3, 2, 11, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386346206, 'comment_body': ""Remove initialization if you're going to overwrite it immediately after."", 'comment_created': datetime.datetime(2020, 3, 2, 11, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386347721, 'comment_body': ""Same remarks here.\r\n\r\nIn the meantime I'll try to refactor this code to share the `RenderWidget` class across appleseed.studio and appleseed.bench."", 'comment_created': datetime.datetime(2020, 3, 2, 11, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386347890, 'comment_body': 'As discussed in #dev, I think this is a reasonable solution for the time being.', 'comment_created': datetime.datetime(2020, 3, 2, 11, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386348552, 'comment_body': 'Why assign default values? Moreover, `-1` will be converted to an unsigned value (`~0`) so if default values are really needed, I would rather use `~0`.', 'comment_created': datetime.datetime(2020, 3, 2, 11, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386374112, 'comment_body': ""Should I add `thread_count` to the `TileJob` constructor and use it instead of `m_tile_renderers.size()`?\r\n\r\nI'd then pass it to `TileJobFactory::create`, so we could use `m_thread_count` in here: \r\n\r\nhttps://github.com/appleseedhq/appleseed/blob/8053115547b9b804087586e3e8610eab42b1f6f4/src/appleseed/renderer/kernel/rendering/generic/genericframerenderer.cpp#L366-L374"", 'comment_created': datetime.datetime(2020, 3, 2, 12, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 386879121, 'comment_body': 'Remove default values as explained in #dev.', 'comment_created': datetime.datetime(2020, 3, 3, 9, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386879173, 'comment_body': 'I think the way you did it (passing both thread index and thread count) is better.', 'comment_created': datetime.datetime(2020, 3, 3, 9, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 386879906, 'comment_body': ""Ah sorry, I got confused:\r\n\r\n> Should I add thread_count to the TileJob constructor and use it instead of m_tile_renderers.size()?\r\n> I'd then pass it to TileJobFactory::create, so we could use m_thread_count in here\r\n\r\nYes, that sounds better indeed."", 'comment_created': datetime.datetime(2020, 3, 3, 9, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 387295734, 'comment_body': 'I think you can simply remove the default values.\r\n', 'comment_created': datetime.datetime(2020, 3, 3, 21, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 387296313, 'comment_body': 'Remove default values also here.', 'comment_created': datetime.datetime(2020, 3, 3, 21, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 387367647, 'comment_body': 'Fixed it 🙂', 'comment_created': datetime.datetime(2020, 3, 4, 0, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}]","[{'commit_sha': 'ec08efe63e313952578e726f3066aed618cfc39c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a99cdad3e4ccf604386d402b4d3f8ab8e819d22f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1e887dc280ff762ee7fa88f2596dcb8520db450', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62690c438d90e2c73c679eb9d826368e5547b095', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '273a13e1240b3a8543c0dd2b7f436b56c00025f9', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
391238941,Add Vignette post-processing stage,"Added a new post-processing effect implementing Keijiro Takahashi's [KinoVignette](https://github.com/keijiro/KinoVignette).

![image](https://user-images.githubusercontent.com/13294013/77115197-a6deea00-6a0c-11ea-8bb9-0126fdd2f742.png)


This is a naive (almost) direct port of the aforementioned algorithm, as an attempt to add a simple new effect to appleseed.

| no vignetting | 0.5 intensity (**default**) | 1.0 intensity |
|---|---|---|
| ![no_vignette](https://user-images.githubusercontent.com/13294013/77114745-d3463680-6a0b-11ea-90b9-c1d46a6ec636.png) | ![vignette_0_5](https://user-images.githubusercontent.com/13294013/77114868-0ee10080-6a0c-11ea-8d61-a85135b4bd0f.png) | ![vignette_1_0](https://user-images.githubusercontent.com/13294013/77114874-10122d80-6a0c-11ea-81fd-9e0613325677.png) |

See https://www.shadertoy.com/view/3dXyDH for a GLSL port of the algorithm.",True,2807,https://api.github.com/repos/appleseedhq/appleseed/pulls/2807,https://github.com/appleseedhq/appleseed/pull/2807,closed,296,0,5,6,2,24,1,0,[{'name': 'PR | Squash'}],2020-03-19 21:10:04+00:00,2020-03-23 20:14:12+00:00,342248.0,"3 days, 23:04:08","[{'comment_id': 395828423, 'comment_body': '`<= resolution.x - 1` is the same as `< resolution.x` but the latter is clearer', 'comment_created': datetime.datetime(2020, 3, 20, 18, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 395830246, 'comment_body': 'Can you find better names for the variables and maybe comment it ?', 'comment_created': datetime.datetime(2020, 3, 20, 18, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 395862123, 'comment_body': 'I asume `rf` probably means ""radial falloff"", since this is what it computes, but I\'m not really sure about `e`. Also, since these three lines are a direct port of the [original implementation](https://github.com/keijiro/KinoVignette/blob/master/Assets/Kino/Vignette/Shader/Vignette.shader#L41) (which is not commented), I thought it\'d be better not to rename them.\r\n\r\nWhat do you think about leaving the names as they are, but commenting next to `e` that it\'s "" inversely proportional to the fourth power of the distance to the center""? 😅 ', 'comment_created': datetime.datetime(2020, 3, 20, 19, 58, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 396073274, 'comment_body': "">  I thought it'd be better not to rename them\r\n\r\nWhy ? \r\n\r\nIf you rename `rf` to `radial_falloff`, the code becomes much clearer. And `e` to `inverse_radial_falloff`.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 3, 22, 9, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 396082062, 'comment_body': 'Could you please change this to 2020 and use your (real) name?', 'comment_created': datetime.datetime(2020, 3, 22, 11, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082245, 'comment_body': 'Indent with only two spaces.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082268, 'comment_body': 'Move brace to own line.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082313, 'comment_body': 'Replace `const` by `static constexpr` for real constants.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082411, 'comment_body': 'Yep, or\r\n\r\n    background_premult.rgb() *= e;', 'comment_created': datetime.datetime(2020, 3, 22, 11, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082433, 'comment_body': 'Make all variables const.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082453, 'comment_body': '❤\r\n\r\nPlural: references', 'comment_created': datetime.datetime(2020, 3, 22, 11, 27, 5, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082570, 'comment_body': 'Remove redundant blank line.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082585, 'comment_body': 'Indent once more.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082637, 'comment_body': 'Fix here too.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082653, 'comment_body': 'Two spaces.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082672, 'comment_body': 'Align opening braces.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082729, 'comment_body': ""You're not using this variable, AFAICT."", 'comment_created': datetime.datetime(2020, 3, 22, 11, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082839, 'comment_body': 'Indent just once (4 spaces) with respect to the class. Basically only `public`, `private`, etc. are half-indented, everything else is indented as usual.', 'comment_created': datetime.datetime(2020, 3, 22, 11, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396082883, 'comment_body': ""You're mixing up float and integer here. Use `props.m_canvas_height` for the upper bound, same for `x`."", 'comment_created': datetime.datetime(2020, 3, 22, 11, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396112566, 'comment_body': ""Oops, nice catch! It can be used to make the vignette depended on the image's aspect ratio or not, I was testing it to see which way looks better:\r\n![image](https://user-images.githubusercontent.com/13294013/77254510-315b5f80-6c40-11ea-9a09-19b7fb13516a.png)\r\nSince the original code from Keijiro is always a perfect circle I simplified it in the `coord` initialization and ended up not using this variable, but I guess it'd be good to add it as an option (?) ([in Unity](https://docs.unity3d.com/Packages/com.unity.postprocessing@2.1/manual/Vignette.html) they have a flag for it called `rounded`)."", 'comment_created': datetime.datetime(2020, 3, 22, 16, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 396114439, 'comment_body': ""> Why ?\r\n\r\nI couldn't think of a good name for `e`, but `inverse_radial_falloff` or `inverse_quartic_radial_falloff` is nice (and makes the comment redundant so we can remove it). I'll change it 🙂 "", 'comment_created': datetime.datetime(2020, 3, 22, 16, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 396263386, 'comment_body': 'Please use `std::size_t` in new code.', 'comment_created': datetime.datetime(2020, 3, 23, 7, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396264876, 'comment_body': 'Not sure the word ""background"" is relevant here, maybe just ""pixel""?', 'comment_created': datetime.datetime(2020, 3, 23, 7, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 396264907, 'comment_body': 'Fits on one line.', 'comment_created': datetime.datetime(2020, 3, 23, 7, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': 'c59466c27afab1b945fd0be187d8fdf8044ca628', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2daf50415a62a84403e2bb99ec75327e26cee9b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e49aac286f1b8b77522c0b4b70d528f7cf43e37', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7c3a313eea97579f26a7a5267b37997d54777ed', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53bd452ee983d7a3d3b8b4ec5e78b7d365dd174a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fc89f468c4cf2c9b4c1a19a62e3e5ada674f3c4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
390067605,Fix black-body emission not working when emission color is black,"Addresses https://github.com/appleseedhq/appleseed/issues/2765.

The emission color would [incorrectly](https://appleseed.readthedocs.io/projects/appleseed-maya/en/master/shaders/material/as_standard_surface.html#incandescence-parameters) affect black-body emission behaviour when it was black, as it made `compute_edf` equal to 0:

https://github.com/appleseedhq/appleseed/blob/bc952ad860ca6f93bfe4cdd2b966acac4cb42e20/src/appleseed.shaders/src/appleseed/as_standard_surface.osl#L852-L860

Now, `in_incandescence_color` has no effect when the emission type is ""Black-body"" (i.e. `in_incandescence_type == 1`). The ""Custom"" type behaviour remains unchanged.

![image](https://user-images.githubusercontent.com/13294013/76899000-87fa1f80-6875-11ea-83b8-dd3f65c6929e.png)
",True,2806,https://api.github.com/repos/appleseedhq/appleseed/pulls/2806,https://github.com/appleseedhq/appleseed/pull/2806,closed,3,2,1,1,0,0,0,0,[],2020-03-17 20:43:36+00:00,2020-03-24 22:37:36+00:00,611640.0,"7 days, 1:54:00",[],"[{'commit_sha': '3e9f41e1d71999eb1370e8edc010734062092b2e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
406106895,Fix double slider regression,"Fix slider not updating real values (introduced in https://github.com/appleseedhq/appleseed/commit/b6f0bee4a86e2eebdfedaa4940945b57142ff775). 

[![](https://i.gyazo.com/513cc6fab5f6d9b177874e95e4526bf8.gif)](https://gyazo.com/513cc6fab5f6d9b177874e95e4526bf8)",True,2855,https://api.github.com/repos/appleseedhq/appleseed/pulls/2855,https://github.com/appleseedhq/appleseed/pull/2855,closed,2,2,1,1,0,0,0,0,[],2020-04-20 14:41:59+00:00,2020-04-21 08:26:16+00:00,63857.0,17:44:17,[],"[{'commit_sha': '0070adb8ae87a2477fb1732d16d31aa23c35fc26', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
419777765,Refactor the vignette post-processing stage,"Refactored the vignette post-processing stage to split its computation to threads.

Main changes:  
- Added 5 new test scenes (`sandbox/tests/test scenes/vignette/`).
- Added `thread_count` as a parameter of `PostProcessingStage`'s `execute()`.
- Created a new `EffectJob` which implements `IJob`.
- Created a new `renderer/modeling/postprocessingeffect/` folder, to narrow the actual algorithm implementation for post-processing effects into instances of `IEffectApplier` (the stage's `execute()` now simply spawns jobs to execute its `apply()`).",True,2865,https://api.github.com/repos/appleseedhq/appleseed/pulls/2865,https://github.com/appleseedhq/appleseed/pull/2865,closed,1055,42,23,36,0,43,1,0,[{'name': 'PR | Squash'}],2020-05-18 22:41:12+00:00,2020-06-22 07:03:54+00:00,2967762.0,"34 days, 8:22:42","[{'comment_id': 427067079, 'comment_body': ""What's the difference between `stage` and `effect` ?"", 'comment_created': datetime.datetime(2020, 5, 19, 6, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427067337, 'comment_body': 'I think `IImageEffectApplier` or `IPostProcessEffectApplier` is a better name', 'comment_created': datetime.datetime(2020, 5, 19, 6, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427067532, 'comment_body': 'Same here with the naming, `EffectJob` is too generic', 'comment_created': datetime.datetime(2020, 5, 19, 6, 49, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427068034, 'comment_body': 'We should name this vector the same way we do in other job renderers. Something like `m_jobs`  ? It makes more sense then when you call `execute()` on a job.', 'comment_created': datetime.datetime(2020, 5, 19, 6, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427068296, 'comment_body': '`std::` anything you can \r\n```suggestion\r\n    for (std::size_t i = 0; i < props.m_tile_count; ++i)\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 6, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427069339, 'comment_body': 'In other places, we generally don\'t create a struct for the params. We simply give params and we do `params.get_float(...)"" or something where we need the actual values. Is there a specific reason you created this struct ?', 'comment_created': datetime.datetime(2020, 5, 19, 6, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427478328, 'comment_body': 'I think this is correct, i.e., the job has a ""list of appliers"" and the job factory that has a ""list of jobs"".\r\nLike the [TileJob](https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/renderer/kernel/rendering/generic/tilejob.h#L64) which has a ""list of renderers"" but no job list. It\'s the [TileJobFactory](https://github.com/appleseedhq/appleseed/blob/master/src/appleseed/renderer/kernel/rendering/generic/tilejobfactory.h#L80) that has a `tile_jobs`.', 'comment_created': datetime.datetime(2020, 5, 19, 17, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427486370, 'comment_body': 'Do you mean using a `ParamArray`? I had originally thought about it, but as Franz mentioned on Discord, they shouldn\'t be used to pass values ""internally"", for this we can use standard arguments.\r\n\r\nThus, I preferred to group them into a POD-struct as I think it\'s clean and easier to spot them this way, but I can rewrite `VignetteApplierFactory` to receive each one separately. What do you think?', 'comment_created': datetime.datetime(2020, 5, 19, 17, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427531655, 'comment_body': 'I misunderstood the code, my bad :) You did right ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427535329, 'comment_body': '```suggestion\r\n#include <cassert>\r\n#include <cstddef> \r\n```\r\n\r\nFor size_t', 'comment_created': datetime.datetime(2020, 5, 19, 19, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427535736, 'comment_body': 'Was it for debug ?', 'comment_created': datetime.datetime(2020, 5, 19, 19, 7, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427536203, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 5, 19, 19, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427536639, 'comment_body': 'I think you can use/store VignetteParams reference directly here. ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427537269, 'comment_body': 'Do you use both `create` methods ? ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427538147, 'comment_body': ""I don't think these should be in VignetteParams. Maybe you can simply pass them as parameters to the  `apply()` or execute()` method ?"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 11, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427540147, 'comment_body': 'Why passing jobs by reference ? Can we return the jobs instead ? When you call this, effect_jobs is empty so there is no need to fill it by reference', 'comment_created': datetime.datetime(2020, 5, 19, 19, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 427541102, 'comment_body': 'Yes, my bad 😅 ', 'comment_created': datetime.datetime(2020, 5, 19, 19, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427555749, 'comment_body': ""`<cstddef>` is included in the header file, shouldn't I omit it from the `.cpp` then?"", 'comment_created': datetime.datetime(2020, 5, 19, 19, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 427561714, 'comment_body': ""No, only the static one (`vignettepostprocessingstage.cpp:124`), the other is required by the interface. Iirc something similar is done in the `GenericFrameRendererFactory`.\r\n\r\nSince there's no way to enforce the definition of a static `create()` with an interface, is it better to remove it and use the non-static one? This would imply the need to create an instance of `VignetteApplierFactory` (for each `VignetteParam`)."", 'comment_created': datetime.datetime(2020, 5, 19, 19, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 428175466, 'comment_body': 'Removed the static one.', 'comment_created': datetime.datetime(2020, 5, 20, 17, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 428650587, 'comment_body': 'Yes, you are right.', 'comment_created': datetime.datetime(2020, 5, 21, 13, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428651970, 'comment_body': ""I don't think this needs to be exposed to the API. I think we expose only stages and that should be enough to apply post process."", 'comment_created': datetime.datetime(2020, 5, 21, 13, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428652098, 'comment_body': '```suggestion\r\n        const std::size_t thread_count = get_rendering_thread_count(m_params);\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428652924, 'comment_body': '```suggestion\r\n        void execute(Frame& frame, const std::size_t thread_count) const override\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 32, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428654702, 'comment_body': '```suggestion\r\n\r\n    return effect_jobs;\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 35, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428657024, 'comment_body': 'should be formatted like this:\r\n```cpp\r\n             ImageEffectJobFactory::EffectJobVector effect_jobs = \r\n                 effect_job_factory.create(\r\n                     frame,\r\n                     effect_appliers);\r\n```', 'comment_created': datetime.datetime(2020, 5, 21, 13, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 428658227, 'comment_body': 'Is it a const reference ? (i.e.  `const auto&`).\r\n\r\nalso, we use const when the type can be easily determined like ` const auto something = static_cast<TYPE>(...)`. Maybe you should use explicit type here', 'comment_created': datetime.datetime(2020, 5, 21, 13, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 432522797, 'comment_body': 'Move brace to its own line.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 432523034, 'comment_body': 'Mark as `explicit`.', 'comment_created': datetime.datetime(2020, 5, 29, 14, 27, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 435858070, 'comment_body': ""I don't think you need to expose that"", 'comment_created': datetime.datetime(2020, 6, 5, 11, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 436372090, 'comment_body': ""For consistency's sake, this should probably be called `PostProcessingEffectJob`."", 'comment_created': datetime.datetime(2020, 6, 7, 14, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372106, 'comment_body': 'And the name change should be propagated here too.', 'comment_created': datetime.datetime(2020, 6, 7, 14, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372390, 'comment_body': 'This assertion feels redundant. It made sense in the context of rendering tile jobs where the number of jobs was indirectly controlled via `m_tile_count_x` and `m_tile_count_y`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372472, 'comment_body': 'A more cache-friendly ordering is the Hilbert one, I would suggest that this would be a better default.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372542, 'comment_body': 'You can simply forward-declare `IImageEffectApplier`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372765, 'comment_body': ""Technically this comment is incorrect as the main purpose of the job manager isn't to wait until jobs have stopped :)"", 'comment_created': datetime.datetime(2020, 6, 7, 15, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372781, 'comment_body': 'Include `<cstddef>`.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436372923, 'comment_body': 'Why aren\'t you overriding `PostProcessingStage::execute()` here? That was the idea: a multithreaded post-processing stage is just another ""standard"" stage, it just happens to execute a post-processing effect in a multithreaded fashion. The post-processing effect should be passed to the constructor.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373124, 'comment_body': 'I would suggest to only skip if `m_intensity` is exactly equal to 0.0f.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373145, 'comment_body': 'Move brace to its own line.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436373389, 'comment_body': 'I see now why you introduced `execute_on_tiles()` but IMHO you can simplify further: any post-processing stage based on `MultithreadPostProcessingStage` should mostly just pass the right effect (here the vignetting effect) to `MultithreadPostProcessingStage` and let that class handle everything.', 'comment_created': datetime.datetime(2020, 6, 7, 15, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}, {'comment_id': 436433892, 'comment_body': 'Should I keep it if I change `linear_ordering` to `hilbert_ordering`?', 'comment_created': datetime.datetime(2020, 6, 8, 2, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 442892650, 'comment_body': 'Yes, good point.', 'comment_created': datetime.datetime(2020, 6, 19, 15, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': 'ff7146473f374a152f5b30356c46f6eacdc3f11b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae2ff585a231e953197759d17aeb71083e81835c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81becff8bc795ceefa9b5510678d75a4743a1dc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55862a4b0ae8d4c733bd4603cbdf7dd5bf155a25', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9654d2dad257acbf52f92a28c59853fc672d002f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b66cafa9c0b14da71f70009fdccf856c4e04b46', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a2ba7d41654aedd40337b9b76fb79e9b12f3350', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7abc491b8bde3c52c639576949fcda70fe4be8eb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59581fd4c9b81625796847ecb9fa64b1f5027a45', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc15e08e9eab0f9097ad82f6e69de237a316302c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdde32591e45fe561d945e0e500d0e7092ac85c3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd01c3929e26da7eed3fbd25c0b5a6c0642d9548b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e85e378bc441da0f91f3df12331d840fb2d851fb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f7bf05a348a850fc80216f3b115b2ebc9872ede', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa46eb30f1664e641ef8053d40861ff10ccc5846', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '402ffffe1eac69575302a500bc6b45226b4e42ee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745c693b0dee81564d38fbca46e3dadda39a08e0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74365f6431e10f675b01205ce04943e808fd15e2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7654c52af50d65745978e205c70ab450f7171cd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '189b9493b381258692410e63b92206ebb1c31807', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfc83b192b73d3f0dcce2d650aa0ff132d81b587', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9523fbc0b80f1e619a9654407fc0e86e53760edc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac1dee06ee07cac7a2b5fd57da81635fb9ed6561', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab440cd8aefcc4d0c8e6032d0417ec76d1a1b737', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb96cc48df1d074f3d46129316347d5ff21ef719', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68751e216454bcce6f0bd7367ab3d0ec60ef666b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95cdebfdfbafa9f9c8ef138bf2d60a6f025c9769', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fadd3cf84d0fd0f4e2a6a762cf0ef96ff2de84a5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08986bbc36f7eedf3a8b6e3d3c092b1ff75ee8f6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f24381dd041e7bb9c71822f5cd7b7b81d5cf905b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cf7871531a6668489d4617506d52a4df413bd3e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f3768c8de10a687e1823c7465a2f0a9edf5bfd1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf5dc1a40b27bffbddfbe8aad3d9278aec803a6b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7da70bc454dea815a222956114059481a92f2b74', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '794fc4b216a4fae0e7dec28a27da7e875af91d99', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42ee4fc37d5b1bd0225d5841b273ae837c454f6b', 'committer_username': 'dictoon', 'committer_name': 'François Beaune', 'committer_email': 'franz@appleseedhq.net', 'commit_date': datetime.datetime(2010, 7, 2, 16, 33, 7, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
438899997,Add Bloom post-processing stage,"Added Bloom as a new post-processing stage. Its 5 parameters are:
- `iterations`: number of downsampling iterations used for blurring, which indirectly controls the spread distance / radius
- `intensity`: strength of the Bloom effect (i.e. blending factor with the original image)
- `threshold`: filters out pixels under this level of brightness
- `soft_threshold`: makes the trasition between under/over-threshold gradual (0 = hard, 1 = soft)
- `debug_blur`: toggle to show only the Bloom target image, which is composited with the final render

Main changes:
- Included 11 test scenes (which render in ~30sec on a Core i5-4670K @ 3.40GHz)
- Created 4 new `ImageEffectApplier`s used in the Bloom stage, for:
	- (Weighted) additive color blending
	- Applying a bright-pass filter
	- Resampling images with a slight modification of Marius Bjørge's ""Dual filtering""
	- Resampling images by a factor of 2 (faster than the method above)

The implementation is pretty similar to Keijiro Takahashi's [KinoBloom](https://github.com/keijiro/KinoBloom) (used in [EEVEE](https://github.com/blender/blender/blob/master/source/blender/draw/engines/eevee/shaders/effect_bloom_frag.glsl#L6)) and to Unity's Post-Processing [Bloom](https://github.com/Unity-Technologies/PostProcessing/blob/v2/Documentation~/Bloom.md).

However, instead of using the sampling filters from Jorge Jimenez's [SIGGRAPH2014 presentation](http://advances.realtimerendering.com/s2014/#_NEXT_GENERATION_POST), it is based on Marius Bjørge's [""Bandwidth-Efficient Rendering""](https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_marius_2D00_notes.pdf) presentation from SIGGRAPH2015 (and also, it is not implemented with shaders).
",True,2875,https://api.github.com/repos/appleseedhq/appleseed/pulls/2875,https://github.com/appleseedhq/appleseed/pull/2875,closed,6979,45,45,87,4,21,1,0,[{'name': 'PR | Squash'}],2020-06-24 01:01:25+00:00,2020-09-30 04:14:36+00:00,8478791.0,"98 days, 3:13:11","[{'comment_id': 452350808, 'comment_body': ""How can you ensure this test is robust regarding the fact you're using integers ? A more robust way to test it is `m_src_width * 2 == dst_width`. "", 'comment_created': datetime.datetime(2020, 7, 9, 16, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452357955, 'comment_body': 'Why you use a lambda ? Have you tried your code without it ? Normally, it should be ok but maybe there is a performance issue there. https://stackoverflow.com/a/39864437/4623982', 'comment_created': datetime.datetime(2020, 7, 9, 16, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452359565, 'comment_body': ""Possible optimization (i'm not sure it's worth it): instead of fetching pixels insinde of blerp, fetch them all here using your window size and then blerp it.\r\n\r\nIf possible, fetch it using a scanline or something instead of fetching pixel by pixel."", 'comment_created': datetime.datetime(2020, 7, 9, 16, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452359999, 'comment_body': 'Explain what the applier does (i.e. `Filter out dark pixels ...`)', 'comment_created': datetime.datetime(2020, 7, 9, 16, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452360201, 'comment_body': 'Explain what it does', 'comment_created': datetime.datetime(2020, 7, 9, 16, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452360527, 'comment_body': 'Document the parameters', 'comment_created': datetime.datetime(2020, 7, 9, 16, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361218, 'comment_body': 'Props can be computed outside of the loop', 'comment_created': datetime.datetime(2020, 7, 9, 16, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361335, 'comment_body': 'It can be const', 'comment_created': datetime.datetime(2020, 7, 9, 16, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361797, 'comment_body': 'Warning instead of info ?', 'comment_created': datetime.datetime(2020, 7, 9, 17, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452362170, 'comment_body': 'You should explain the general algorithm somewhere (passes process and stuff). Be sure to also link your references', 'comment_created': datetime.datetime(2020, 7, 9, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452362733, 'comment_body': 'Can you explain why we need such buffer ?', 'comment_created': datetime.datetime(2020, 7, 9, 17, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452366541, 'comment_body': ""I added it to make `result` a `const`. I don't think this showed any performance hit, but I'll double check it and see if using a lambda resulted in something weird in the assembly 🙂 "", 'comment_created': datetime.datetime(2020, 7, 9, 17, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452368177, 'comment_body': 'I tried fetching all of them beforehand for downsampling (that\'s the ""jump from 6 lines to ~100"" I mentioned some time ago 😅), but it didn\'t make any noticeable difference so I didn\'t try it for upsampling.\r\n\r\nI haven\'t looked into fetching a row of pixels at once though.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452370113, 'comment_body': ""I'm using it this way to account for integer truncation, e.g.:\r\nIf the original image is 101x101, the first downscaling will result in a 50x50 image. Thus, we'll later have to upsample from 50x50 to 101x101, so `101 / 2 == 50` works but `50 * 2 == 101` wouldn't."", 'comment_created': datetime.datetime(2020, 7, 9, 17, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452376103, 'comment_body': 'These represent the ""current level"" dimensions, so at the end of each for-loop iteration they are divided by two.\r\nI can move them to the init statement to make it clearer:\r\n```cpp\r\nfor (std::size_t\r\n        level = 0, \r\n        level_width = max_level_props.m_canvas_width, \r\n        level_height = max_level_props.m_canvas_height\r\n    ; level < level_count\r\n    ; ++level)\r\n{\r\n    // ...\r\n}\r\n```\r\n(I\'m not sure what would be the standard way to format it in appleseed)', 'comment_created': datetime.datetime(2020, 7, 9, 17, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452989120, 'comment_body': ""`level_width` and `level_height` aren't constant: https://github.com/appleseedhq/appleseed/pull/2875#discussion_r452376103."", 'comment_created': datetime.datetime(2020, 7, 10, 17, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452989510, 'comment_body': 'Better, ty 🙂 ', 'comment_created': datetime.datetime(2020, 7, 10, 17, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452999557, 'comment_body': 'When we blur an image its intensity fades. So, by adding the intermediate blurring steps we can avoid this, e.g.:\r\n![Jfw0rZ5bno](https://user-images.githubusercontent.com/13294013/87185437-25afa980-c2c0-11ea-8612-bf986fcf2aa2.gif)', 'comment_created': datetime.datetime(2020, 7, 10, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 455521247, 'comment_body': 'Maybe you can explain this directly in the code ?', 'comment_created': datetime.datetime(2020, 7, 16, 5, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 455521665, 'comment_body': ""The result is const but the code is less easy to read. I think it's better to not use lambda and keep the code easy to read. You can make an inline method if you want to make a const with all this."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 461609757, 'comment_body': 'These shaders are already in the sandbox I think. Can you try to reference them instead of duplicating them ? You can try `grep -rn as_blender` in the `test scenes` folder to see how other scenes are using it.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}]","[{'commit_sha': '74080bae310906e7ebe497a81f178dec933752cf', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1fc70d04aa6effa9ed0c32ac9ba66f6ed0deb93', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d84b4436c130a3899b3756901495f530992c18', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41b8e3b928cb75e2808957c166c009a28a4a8be9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb64fb2994636af284fe761bb8d2b622b255ff3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef1a4cef3c580fdd08b7e3b734460cce3aa1b786', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d758767f05d1d3481ff94ec79a9ddd15810a210', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53154763651f5307489df4c7e15f5ced607be514', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c3f30e2ed8d703a28f5df842e1c4f5d17ca2954', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78456923eb178134177b8b64da1c932eb2c2830e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a70d2475bd745f687ce154d929388f2b000ecded', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847d23362ab51d79f00a234bc4834454b1059578', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d8db063be07c6257694f640251e6ad21fadf8be', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f38f89882bafe95532f025151962f1126ebe2a17', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a40789da3206a83e70a9f784abaaa961a9243161', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53815df7b58d503eb586405f318070fb75688b9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe647d99267fda9fddc00969785b8b5c2e9f11d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeff7084d4b925537b1b099c27df8fbe32f3985a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48bfe282c711a630dc90e082d8c895f6e0bb4d54', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c795b498deded2f6260fc2282457cdf68b30172', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b9a9c906c267769e1f42b19a77626c0e246a0d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1379220392b35568e5ccab1c93a82f59afc21ff4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ca1e84284fdd3bef0a3510be380f43b7d69d1c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157b502fb3c19162d2fc609e9a2940ebe50eff17', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fcd6e6816ec9350ee6ce52884afbb5c88e53258', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '858c726323d88c4fd82c4ad5108c4a96cfd670ac', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df25d2d81c17a22900fd2f7c701c142726236e67', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678a0f334703ac3cc7a1c2602107b0bd26415fcd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc72a1262bf466c3d690f37ec690613bcc20dbd4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f576409a1414fcbdd41b3f1209c620660abc06fb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfee087b3110274e2d50d2ef54aacd89851becd0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22094f635787d8bd71ac87b03240355aa70dffc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1d8d47e874aded8e01fd1779260187550053a8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a59237a782577ee89621b939a67706d9f6c828', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83e49be021a6613a6e0aa133ee42d08f00de91eb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07a147a8e1c62bd72f322a4d2f97149bd958a07e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35c70c8f86fd7ff2dbec4af39dcd0b0ffc6d876e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb1f0a8dfbf427e8eb5f99abebcb4e3d0e328d56', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da6e054063498218973b78e14a3f12c23cc7b9b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050f89b6113be8760ab6c1d101b5662e618a3a42', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f77ed84b83dc5bd88bb99de2a91b75e2249bf9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b8be4b72c9c357953ab445c336ed663fe7b7ca5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a50a45d06a9e2806bae309231f61e58716ef7695', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b1a6153d1c1e9183ad900be2b71493237c517d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c84aaaf3d18b46e160c65386c054a2df975686c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e97421ed9b9e38d4b2d954667926ca1c0169dbea', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7b194e6b802bda7355b614ad0201f5be4dd4f4d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992d9e4766d354b4af3a78dca552c2d33f17bae0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a4a650781152e413a6deba5601e938019d70e3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e89a8f95e2bc5f29150edfaf68ea537f12e6590', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ff738abe9ad7fdff0379d1a3e5772416e7d5f85', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b99bffd7e958d573174cc889d5ad5b6241e2357', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6982c8f6e1ce7cc55554a059ab89ae534fc7e1b5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485451caa134f47ceac3c7664ccb50a81681d975', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed87312403e9e0ed6016d7edda9b619b6cd24dd4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46644ca934a7ed5041671cf2ef61a5e310ac5046', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787b7b3975061a5118b3b2559c08e9b8e4ca1e10', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35163385f342a2d7c59006ba0751701bee09d95a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00d1efcd0f70b56203606964ee4d6d3f4a56c05', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3304ac0b599474f62628883ed1d7e74364bef2b6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb87e544d631d6b88823399e07f38fd5cbd202de', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68446b4d2fef97b90af948453fb862c80fb95fa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbee4a14c267f845e8afa3beb61fe52e526fcace', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '691a9c3b9345d90fbac170968ad84863a4eddc42', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1953c5557507ab222acbb2f30e152ea506bdfab', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c3f1ebafbde15ac83a5cf4d5594bb84ba75aa4e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '763b5e9a04d5ab639c77eefa266b49760bb472e2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6cc6694fcd4482c429cb76983c5852f5a41c5b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdf4e0ce76ac071214f41b82f92c5ad6772d475', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad230decf52c10892bb3792af64003a6fe555919', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '287b5231b3c8cc38c88187285e44bbb6e7aa09e9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '389a731f6e9ed0c44a8ca089aeb7d617565d2728', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3032d4d26194133fc298ace96b2fbde0ca8542b1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '211d13457159905201113e8825cee4585faebbfa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b4a6705992c00f35e7d813fa38ae05a5a87dee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07622129735966410e8a9d856f47a3f5f7dbec21', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e84f5aacc71a479cd821a917d237eca0ddc05a7b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dae5b58061990e4891dfb582b1d7f874b116f965', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63bb309545377255f205170f71fa3c61ced94fb2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9bda48018b9c6657904c5aa47be273bee9b7741', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f10f389acb9291c5972b01c1f5e12b62f3d6a1ee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3c8ec71448dc8eae69e5fae3f50edd2f688db7c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6faf2abe940aaf755f8099e93646c5333a848154', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c8d0b04645bd7e73a96fbdfcf3141ef3605951', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5464ee0d896e8c1985c3fede6062653e0cc39708', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a08192e3242f17fa7d3de9f2b293e2bf30fd3d8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e4c86d4a4b8ecd97d158aa686115178aac839b4', 'committer_username': 'oktomus', 'committer_name': 'Kevin Masson', 'committer_email': 'kevin@tuataravfx.com', 'commit_date': datetime.datetime(2013, 6, 9, 22, 6, 18, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
441550526,Fix Shift+F5 causing False Colors to be applied twice,"The color map post-processing stage, applied when `False Colors` is enabled, is being called twice on `Stop Rendering (Shift+F5)`.

---
This happens by `on_rendering_abort()` being called and emitting a `signal_rendering_abort()` at:
https://github.com/appleseedhq/appleseed/blob/964c5a91d27760370f20b15f07088dc6a0064e36/src/appleseed/renderer/kernel/rendering/masterrenderer.cpp#L173

which also results in emitting `signal_rendering_failed()` on:
https://github.com/appleseedhq/appleseed/blob/964c5a91d27760370f20b15f07088dc6a0064e36/src/appleseed.studio/mainwindow/rendering/renderingmanager.cpp#L113-L117

Thus, `slot_rendering_end()` runs twice.

---
I'm submitting a ""conservative"" fix, as it only prevents False Colors from being applied when a ""failed"" signal is emitted (other previous behavior stay the same).

However, it would be interesting to remove unnecessary computations that are being run twice. Creating a new `signal_rendering_aborted()` on `renderingmanager.cpp` could help splitting what should be run on ""aborting"" from ""failing"", e.g.:
```diff
- if (rendering_result.m_status != MasterRenderer::RenderingResult::Succeeded)
-     emit signal_rendering_failed();
+ switch (rendering_result.m_status)
+ {
+   case MasterRenderer::RenderingResult::Succeeded:
+     break;
+ 
+   case MasterRenderer::RenderingResult::Aborted:
+     emit signal_rendering_aborted();
+     break;
+ 
+   default:
+     emit signal_rendering_failed();
+     break;
+ }
```",True,2877,https://api.github.com/repos/appleseedhq/appleseed/pulls/2877,https://github.com/appleseedhq/appleseed/pull/2877,closed,7,12,4,3,1,0,1,0,[{'name': 'PR | Squash'}],2020-06-29 17:25:54+00:00,2020-10-18 15:35:57+00:00,9583803.0,"110 days, 22:10:03",[],"[{'commit_sha': 'a792bc4602afaa4980352cbada1ea8e06fe007bd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27d23def82492575c80172e755618669f92b30cc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6284638c56401de73e981c45470b9727a74aca1b', 'committer_username': 'oktomus', 'committer_name': 'Kevin Masson', 'committer_email': 'kevin@tuataravfx.com', 'commit_date': datetime.datetime(2013, 6, 9, 22, 6, 18, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
444465612,Fix false colors not being applied to all tiles on a final render,"This PR fixes the following bug (which happens when we have post-processing stages, and `False Colors` is enabled):

![](https://cdn.discordapp.com/attachments/707230180233707591/727955871510036601/IdRVxIiHXU.gif)

**Edit:** I undid the changes I mention below because they don't fit well with https://github.com/appleseedhq/appleseed/pull/2885 (though, I intend to add them in a later PR, once we discuss what'd lead to the best ""user experience"").

~Also, these changes make post-processing effects always run when a rendering is stopped (e.g. `Shift+F5`).~
~If this behavior is desirable, https://github.com/appleseedhq/appleseed/pull/2878 can be closed. Otherwise, we can keeps effects only being applied to final renderings with:~

```diff
@@ -226,7 +226,7 @@ struct MasterRenderer::Impl
             render_info.insert(""render_time"", m_project.get_rendering_timer().get_seconds());

             // Don't proceed further if rendering failed.
-            if (result.m_status == RenderingResult::Failed)
+            if (result.m_status != RenderingResult::Succeeded)
             {
                 controller.on_rendering_abort();
                 return result;
@@ -241,12 +241,7 @@ struct MasterRenderer::Impl
             // Insert post-processing time into frame's render info.
             render_info.insert(""post_processing_time"", stopwatch.get_seconds());

-            switch (result.m_status)
-            {
-              case RenderingResult::Succeeded: controller.on_rendering_success(); break;
-              case RenderingResult::Aborted: controller.on_rendering_abort(); break;
-              assert_otherwise;
-            }
+            controller.on_rendering_success();
         }
```",False,2880,https://api.github.com/repos/appleseedhq/appleseed/pulls/2880,https://github.com/appleseedhq/appleseed/pull/2880,closed,13,15,2,3,5,1,0,0,[],2020-07-05 21:55:16+00:00,2020-10-18 19:04:36+00:00,9061760.0,"104 days, 21:09:20",[],"[{'commit_sha': '6997bcde66f0fd722355b5142a28997a845d190d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '895a78c4bdedbda93acf1ee016ea925a8409c600', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef3af0d899bcee0b2d66bce3e7f7417d61fd6b6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
458000119,Add Tone Map post-processing stage,"Added 7 new tone map operators:
- Two ACES approximations:
  - `ACES (Narkowicz)`: by Krzysztof Narkowicz (ref. [[1]](https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/))
  - `ACES (Unreal)`: by Romain Guy (ref. [[2]](https://www.shadertoy.com/view/llXyWr))
- Reinhard's operators from [""Photographic Tone Reproduction for Digital Images""](http://www.cmap.polytechnique.fr/~peyre/cours/x2005signal/hdr_photographic.pdf):
  - `Reinhard`: Equation 3 in the paper (the simple 1/(1+x) tone mapping)
  - `Reinhard (Extended)`: Equation 4 in the paper
- Three filmic curves:
  - `Filmic (Hejl)`: by Jim Hejl (ref. [[3]](http://filmicworlds.com/blog/filmic-tonemapping-operators/), [[4]](https://github.com/tizian/tonemapper))
  - `Filmic (Uncharted)`: by John Hable, used in Uncharted 2 (ref. [[5]](http://filmicworlds.com/blog/filmic-tonemapping-operators/))
  - `Filmic (Piecewise)`: also by John Hable, developed with the aim of being simpler / more intuitive (ref. [[6]](http://filmicworlds.com/blog/filmic-tonemapping-with-piecewise-power-curves/))

The first filmic curve is almost ""plug-n-play"", while the other two are pretty customizable.

I think these seven operators provide a good starting point for *appleseed*.
While there are many other interesting ones that could definitely have been included (look at [`tonemapper`](https://github.com/tizian/tonemapper) for instance), IMHO the most important thing after adding these is to improve the ""user experience"" when using them on *appleseed.studio*.

This mainly involves: **1)** applying the effect as the parameters are changed (in the same way False Colors does it currently); and **2)** having a graph of the tone curve in the stage settings, specially for understanding the parameters of the two filmic curves from John Hable.

---

### Example
![tmo_comparison](https://user-images.githubusercontent.com/13294013/90816601-ed5dab00-e302-11ea-8abc-f5d77501bf6d.png)

### Original
![original](https://user-images.githubusercontent.com/13294013/90816638-ff3f4e00-e302-11ea-801a-fdd59875cd9f.png)
",True,2884,https://api.github.com/repos/appleseedhq/appleseed/pulls/2884,https://github.com/appleseedhq/appleseed/pull/2884,closed,6395,0,34,44,0,1,1,0,[{'name': 'PR | Squash'}],2020-07-28 19:16:51+00:00,2020-09-28 18:32:24+00:00,5354133.0,"61 days, 23:15:33","[{'comment_id': 487401699, 'comment_body': 'Would make sense to use `std::unique_ptr<>` here.', 'comment_created': datetime.datetime(2020, 9, 12, 11, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': '210f674aeceb00ac9f44b839e18a18a787f0c470', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc03dcbc2ca9fd600f7666f1eaea94f5f4b591a3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0482ffe32fdd8f9d5cf0aa1dac4ce0ad6453ee5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1822209665ed18307666a8fc059ae14c1283e99a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '984e9a6c703ecf88d33c3c23e4316cb67e67deba', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3a2181662606752c36114c441f8cb6458c4577', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '056e7ab76fcf472c7211acad3a014e225a5a21db', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3b14344091f239a85fed5dd98f32b6cd66710f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '299dbf4dfd19e1f6406c6bdf8237c004411b4dd5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f708128c35c3e1196786b872aba1091e9278aeb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43dd5f6ec65ca3cca896f39cfacf8821e59fc182', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9830e66aedccddba8c4bcd57e3b5aadb91b4b5c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fff29710c8a36bcf1fea89b4ac87808d2def90fc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad78e9650173471cebb6fe098d97aae0555264d3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4cd0912e4e538e689a564ad24110e6de34e2ed', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1107626d98d4fee927973a1308928f8736e3548', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba7ef417cbd3d5d00f0e38e910970d54afcb6b32', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b22091756bee06ea5de705f64a357580cd0e48a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09953371aa6f1566d46a0188c74970363bc924dd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdc165894fe7911a255913bf8e301ebaf7673cf3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0210d3f3214475f331cb3bd1aae2eb2bf5e762e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b2c64162f40d87e09fa05f7266964bd1f362d4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cdca95a86261a0bd9715b20fef5e4e1af5974e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ef93cb23a2890dd71ccfa21dade15ca17657d4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f83bd2a18e14c37acf8422bbe3b120447bf8d218', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470f63c4e3b1c01a86e7af054f693440760b99db', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05c1df1bcfdd1cbb777f160237757dd482b0af61', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2382d29425d48603475ac8d768855b118a3400', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c56a7a90d85d5d3bbb9b3c89cd3ef8d1c335d41', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43510e1c1d3d679bbed66bc48d73844e326bc51c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78faac19a3549e6cb613f6ca86d552b3eaad0781', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f49c78da559a5d79d73d5c7eafd5b9722c859b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5998ffe31ce4409bb2253188ce0c66c43ae7109f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33f13669d28c6ba07920308113313dc794ef74c0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb48c7420b6c44ab8fbcb4a5027249a823ac6d7', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60c351a729507556c44cece150818cd63d7ea87', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfd2fc3c44cf86e4a73df91909880ba850fb25aa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cccc7fa71f3480ea81c8f142271cafad2326ea1b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49970e298fc95ef5de9128e28181aa2546adb319', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee26f315753f273927a534e23a8e1e1efe178638', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6957c9de3a3fcf20475e7479e70e2b10431db7ef', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fc013ce7feb10f4c5d3cdb1b4aef3d72fb0434b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d60a2c254bd7965d9d4fad6de403596e11a13f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67eeb40a2beec56257c18b30ceaf13c3f507db4a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
464169554,Preview post-processing stage changes in appleseed.studio,"This adds a rendered preview when parameter values are changed for post-processing stages (similar to the current behavior of `False Colors`).

Note that only the effect that is being changed is applied for preview (i.e. if there are multiple stages, this won't show all of them).

![gS09PO8IEs](https://user-images.githubusercontent.com/13294013/89563365-b8753280-d7f1-11ea-9c77-3c14f6655f59.gif)

---

**Obs.:** as of right now, when you add a new effect it doesn't work untill you click `OK` to add it _and then_ edit its parameters. This should be fixed before this PR is merged.

---

Other ""nice-to-have""s are:
  - Render effects preview on a downscaled version of the frame, so it's more responsive (and make this a customizable option)
  - Some way to ""opt-out"" of this (e.g. a checkbox), either for all stages or for a specific one, untill all effects are ""real-time""
  - Save / export the current frame, with effects preview (should probably be an optional ""pop-up"")
",False,2885,https://api.github.com/repos/appleseedhq/appleseed/pulls/2885,https://github.com/appleseedhq/appleseed/pull/2885,open,117,10,8,13,1,0,0,0,[],2020-08-06 17:33:27+00:00,,0.0,,[],"[{'commit_sha': 'c8516fb59724ec1d492c1eca8e87af15dd4ccecd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d092999bb24992c7636850fa3aed71255c6c2f8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed4b852c33875b0fce86d917b69f8becdb3b8840', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423af69d9bd3bd8c5da4ec59e03bc3cb22e92f69', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8b15352061631f6a7ed6b7f51bd1df6589abf6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470674d0bc312a5dd03820a712e21835e912e67f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ddd946e0fab6879cd124eb07588d0c5894df8a0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3382ce9281bf1bf379a4ab64726fa0b98f973b24', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9222133c90e9af9a9ab26bb39d888e57275d1f8f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e6452587fbf484712fc80024435f35858527b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dce4fb7400d705ba9d01ab1a4b049041c829b12', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8f4f4e6e65feaca36ff50a5236017cd60cb5a4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ab64a35787235ab1cbacd3a9173ecbea09bc525', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
468375225,Add Chromatic Aberration post-processing stage,"Added ([lateral](https://en.wikipedia.org/wiki/Chromatic_aberration#Types)) Chromatic Aberration as a new post-processing stage.

This stage has two parameters, for artistic control:
- `strength`: controls the effect intensity by increasing distortion towards the edges of the image (thus, radially increasing the ""color fringes"")
- `fringing`: controls the amount of colors we use for the effect, i.e.:
  - the smallest value will result in the default ""three-color split"", found in most implementations of CA
  - higher values lead to a more ""rainbow-like"" effect, as shown in [this presentation](https://www.youtube.com/watch?v=RdN06E6Xn9E&t=428s) (see image comparisons below)

_Note: ""fringing"" might be a bad/misleading name.. renaming it to something like ""smoothness"" would probably be better._

---

| no aberration | default values |
|---|---|
| ![image](https://user-images.githubusercontent.com/13294013/90426829-0f9fc080-e098-11ea-86cc-ef29e5b90c7e.png) | ![image](https://user-images.githubusercontent.com/13294013/90426876-20503680-e098-11ea-8ce2-0ee6f3a911ed.png) |

_obs.: using a higher `strength` value than the default for the images below:_
| lowest `fringing` | highest `fringing` |
|---|---|
| ![image](https://user-images.githubusercontent.com/13294013/90427057-63120e80-e098-11ea-8317-fccfad3635b3.png) | ![image](https://user-images.githubusercontent.com/13294013/90427077-6c02e000-e098-11ea-95be-703a2b2fa486.png) |",True,2887,https://api.github.com/repos/appleseedhq/appleseed/pulls/2887,https://github.com/appleseedhq/appleseed/pull/2887,closed,1969,0,19,18,0,0,0,0,[],2020-08-15 23:23:30+00:00,2020-09-29 05:05:54+00:00,3822144.0,"44 days, 5:42:24",[],"[{'commit_sha': '3f98fd65caf4d876e27ccad6338aa4485a1d33de', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff86dd214c6a20d79c61661f72e96ad0aed7f640', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3160bfd2647065dc3e9959bf03a8ed316291a6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62e5575d82d7f517a286eda539f7cc23e24cb10', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071c32be3cb301f6e207dcdce2c02fc6a27b5eda', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7a2d26dce2d885f93c94fcc1887cd34491e8c72', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15915d0bffb82269954339ac445af960f698ff6a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a33160bb5976b4677d22c0b23505104d47545616', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35229db3df10b418fe174ee0e4f60da8c9d58668', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f75de9a084cba4cc35a522417c563411326b8c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69cbf0e739730e1efe16db580611ebcb2206874c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24322aa463b7e6d391c27572d5449055eacd0350', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f5b8aa506417fc80a4f18723f6cfc78773d482', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de927f18fb0b0762103af0dc7f7fbd3714056e8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2b2cd170f0fcafbc39a5a61b3dd0a2eae4185e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54fecac54eea4416f5c831268e27db1ab4d2ae49', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27db76b7418e98631852c5ee435c3b6e2cb03c56', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c77feaad03f8b7c04e0e732528c0247e727e6c1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
438899997,Add Bloom post-processing stage,"Added Bloom as a new post-processing stage. Its 5 parameters are:
- `iterations`: number of downsampling iterations used for blurring, which indirectly controls the spread distance / radius
- `intensity`: strength of the Bloom effect (i.e. blending factor with the original image)
- `threshold`: filters out pixels under this level of brightness
- `soft_threshold`: makes the trasition between under/over-threshold gradual (0 = hard, 1 = soft)
- `debug_blur`: toggle to show only the Bloom target image, which is composited with the final render

Main changes:
- Included 11 test scenes (which render in ~30sec on a Core i5-4670K @ 3.40GHz)
- Created 4 new `ImageEffectApplier`s used in the Bloom stage, for:
	- (Weighted) additive color blending
	- Applying a bright-pass filter
	- Resampling images with a slight modification of Marius Bjørge's ""Dual filtering""
	- Resampling images by a factor of 2 (faster than the method above)

The implementation is pretty similar to Keijiro Takahashi's [KinoBloom](https://github.com/keijiro/KinoBloom) (used in [EEVEE](https://github.com/blender/blender/blob/master/source/blender/draw/engines/eevee/shaders/effect_bloom_frag.glsl#L6)) and to Unity's Post-Processing [Bloom](https://github.com/Unity-Technologies/PostProcessing/blob/v2/Documentation~/Bloom.md).

However, instead of using the sampling filters from Jorge Jimenez's [SIGGRAPH2014 presentation](http://advances.realtimerendering.com/s2014/#_NEXT_GENERATION_POST), it is based on Marius Bjørge's [""Bandwidth-Efficient Rendering""](https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_marius_2D00_notes.pdf) presentation from SIGGRAPH2015 (and also, it is not implemented with shaders).
",True,2875,https://api.github.com/repos/appleseedhq/appleseed/pulls/2875,https://github.com/appleseedhq/appleseed/pull/2875,closed,6979,45,45,87,4,21,1,0,[{'name': 'PR | Squash'}],2020-06-24 01:01:25+00:00,2020-09-30 04:14:36+00:00,8478791.0,"98 days, 3:13:11","[{'comment_id': 452350808, 'comment_body': ""How can you ensure this test is robust regarding the fact you're using integers ? A more robust way to test it is `m_src_width * 2 == dst_width`. "", 'comment_created': datetime.datetime(2020, 7, 9, 16, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452357955, 'comment_body': 'Why you use a lambda ? Have you tried your code without it ? Normally, it should be ok but maybe there is a performance issue there. https://stackoverflow.com/a/39864437/4623982', 'comment_created': datetime.datetime(2020, 7, 9, 16, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452359565, 'comment_body': ""Possible optimization (i'm not sure it's worth it): instead of fetching pixels insinde of blerp, fetch them all here using your window size and then blerp it.\r\n\r\nIf possible, fetch it using a scanline or something instead of fetching pixel by pixel."", 'comment_created': datetime.datetime(2020, 7, 9, 16, 57, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452359999, 'comment_body': 'Explain what the applier does (i.e. `Filter out dark pixels ...`)', 'comment_created': datetime.datetime(2020, 7, 9, 16, 57, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452360201, 'comment_body': 'Explain what it does', 'comment_created': datetime.datetime(2020, 7, 9, 16, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452360527, 'comment_body': 'Document the parameters', 'comment_created': datetime.datetime(2020, 7, 9, 16, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361218, 'comment_body': 'Props can be computed outside of the loop', 'comment_created': datetime.datetime(2020, 7, 9, 16, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361335, 'comment_body': 'It can be const', 'comment_created': datetime.datetime(2020, 7, 9, 16, 59, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452361797, 'comment_body': 'Warning instead of info ?', 'comment_created': datetime.datetime(2020, 7, 9, 17, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452362170, 'comment_body': 'You should explain the general algorithm somewhere (passes process and stuff). Be sure to also link your references', 'comment_created': datetime.datetime(2020, 7, 9, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452362733, 'comment_body': 'Can you explain why we need such buffer ?', 'comment_created': datetime.datetime(2020, 7, 9, 17, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 452366541, 'comment_body': ""I added it to make `result` a `const`. I don't think this showed any performance hit, but I'll double check it and see if using a lambda resulted in something weird in the assembly 🙂 "", 'comment_created': datetime.datetime(2020, 7, 9, 17, 9, 7, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452368177, 'comment_body': 'I tried fetching all of them beforehand for downsampling (that\'s the ""jump from 6 lines to ~100"" I mentioned some time ago 😅), but it didn\'t make any noticeable difference so I didn\'t try it for upsampling.\r\n\r\nI haven\'t looked into fetching a row of pixels at once though.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452370113, 'comment_body': ""I'm using it this way to account for integer truncation, e.g.:\r\nIf the original image is 101x101, the first downscaling will result in a 50x50 image. Thus, we'll later have to upsample from 50x50 to 101x101, so `101 / 2 == 50` works but `50 * 2 == 101` wouldn't."", 'comment_created': datetime.datetime(2020, 7, 9, 17, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452376103, 'comment_body': 'These represent the ""current level"" dimensions, so at the end of each for-loop iteration they are divided by two.\r\nI can move them to the init statement to make it clearer:\r\n```cpp\r\nfor (std::size_t\r\n        level = 0, \r\n        level_width = max_level_props.m_canvas_width, \r\n        level_height = max_level_props.m_canvas_height\r\n    ; level < level_count\r\n    ; ++level)\r\n{\r\n    // ...\r\n}\r\n```\r\n(I\'m not sure what would be the standard way to format it in appleseed)', 'comment_created': datetime.datetime(2020, 7, 9, 17, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452989120, 'comment_body': ""`level_width` and `level_height` aren't constant: https://github.com/appleseedhq/appleseed/pull/2875#discussion_r452376103."", 'comment_created': datetime.datetime(2020, 7, 10, 17, 53, 45, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452989510, 'comment_body': 'Better, ty 🙂 ', 'comment_created': datetime.datetime(2020, 7, 10, 17, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 452999557, 'comment_body': 'When we blur an image its intensity fades. So, by adding the intermediate blurring steps we can avoid this, e.g.:\r\n![Jfw0rZ5bno](https://user-images.githubusercontent.com/13294013/87185437-25afa980-c2c0-11ea-8612-bf986fcf2aa2.gif)', 'comment_created': datetime.datetime(2020, 7, 10, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'laurelkeys', 'type': 'User'}, {'comment_id': 455521247, 'comment_body': 'Maybe you can explain this directly in the code ?', 'comment_created': datetime.datetime(2020, 7, 16, 5, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 455521665, 'comment_body': ""The result is const but the code is less easy to read. I think it's better to not use lambda and keep the code easy to read. You can make an inline method if you want to make a const with all this."", 'comment_created': datetime.datetime(2020, 7, 16, 5, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}, {'comment_id': 461609757, 'comment_body': 'These shaders are already in the sandbox I think. Can you try to reference them instead of duplicating them ? You can try `grep -rn as_blender` in the `test scenes` folder to see how other scenes are using it.', 'comment_created': datetime.datetime(2020, 7, 28, 14, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oktomus', 'type': 'User'}]","[{'commit_sha': '74080bae310906e7ebe497a81f178dec933752cf', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1fc70d04aa6effa9ed0c32ac9ba66f6ed0deb93', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5d84b4436c130a3899b3756901495f530992c18', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41b8e3b928cb75e2808957c166c009a28a4a8be9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcb64fb2994636af284fe761bb8d2b622b255ff3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef1a4cef3c580fdd08b7e3b734460cce3aa1b786', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d758767f05d1d3481ff94ec79a9ddd15810a210', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53154763651f5307489df4c7e15f5ced607be514', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c3f30e2ed8d703a28f5df842e1c4f5d17ca2954', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78456923eb178134177b8b64da1c932eb2c2830e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a70d2475bd745f687ce154d929388f2b000ecded', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '847d23362ab51d79f00a234bc4834454b1059578', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d8db063be07c6257694f640251e6ad21fadf8be', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f38f89882bafe95532f025151962f1126ebe2a17', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a40789da3206a83e70a9f784abaaa961a9243161', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53815df7b58d503eb586405f318070fb75688b9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fe647d99267fda9fddc00969785b8b5c2e9f11d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aeff7084d4b925537b1b099c27df8fbe32f3985a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48bfe282c711a630dc90e082d8c895f6e0bb4d54', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c795b498deded2f6260fc2282457cdf68b30172', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b9a9c906c267769e1f42b19a77626c0e246a0d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1379220392b35568e5ccab1c93a82f59afc21ff4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96ca1e84284fdd3bef0a3510be380f43b7d69d1c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157b502fb3c19162d2fc609e9a2940ebe50eff17', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fcd6e6816ec9350ee6ce52884afbb5c88e53258', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '858c726323d88c4fd82c4ad5108c4a96cfd670ac', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df25d2d81c17a22900fd2f7c701c142726236e67', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '678a0f334703ac3cc7a1c2602107b0bd26415fcd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc72a1262bf466c3d690f37ec690613bcc20dbd4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f576409a1414fcbdd41b3f1209c620660abc06fb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfee087b3110274e2d50d2ef54aacd89851becd0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22094f635787d8bd71ac87b03240355aa70dffc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f1d8d47e874aded8e01fd1779260187550053a8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a59237a782577ee89621b939a67706d9f6c828', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83e49be021a6613a6e0aa133ee42d08f00de91eb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07a147a8e1c62bd72f322a4d2f97149bd958a07e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35c70c8f86fd7ff2dbec4af39dcd0b0ffc6d876e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb1f0a8dfbf427e8eb5f99abebcb4e3d0e328d56', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da6e054063498218973b78e14a3f12c23cc7b9b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '050f89b6113be8760ab6c1d101b5662e618a3a42', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f77ed84b83dc5bd88bb99de2a91b75e2249bf9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b8be4b72c9c357953ab445c336ed663fe7b7ca5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a50a45d06a9e2806bae309231f61e58716ef7695', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87b1a6153d1c1e9183ad900be2b71493237c517d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c84aaaf3d18b46e160c65386c054a2df975686c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e97421ed9b9e38d4b2d954667926ca1c0169dbea', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7b194e6b802bda7355b614ad0201f5be4dd4f4d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992d9e4766d354b4af3a78dca552c2d33f17bae0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02a4a650781152e413a6deba5601e938019d70e3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e89a8f95e2bc5f29150edfaf68ea537f12e6590', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ff738abe9ad7fdff0379d1a3e5772416e7d5f85', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b99bffd7e958d573174cc889d5ad5b6241e2357', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6982c8f6e1ce7cc55554a059ab89ae534fc7e1b5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485451caa134f47ceac3c7664ccb50a81681d975', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed87312403e9e0ed6016d7edda9b619b6cd24dd4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46644ca934a7ed5041671cf2ef61a5e310ac5046', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '787b7b3975061a5118b3b2559c08e9b8e4ca1e10', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35163385f342a2d7c59006ba0751701bee09d95a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b00d1efcd0f70b56203606964ee4d6d3f4a56c05', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3304ac0b599474f62628883ed1d7e74364bef2b6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb87e544d631d6b88823399e07f38fd5cbd202de', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68446b4d2fef97b90af948453fb862c80fb95fa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fbee4a14c267f845e8afa3beb61fe52e526fcace', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '691a9c3b9345d90fbac170968ad84863a4eddc42', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1953c5557507ab222acbb2f30e152ea506bdfab', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c3f1ebafbde15ac83a5cf4d5594bb84ba75aa4e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '763b5e9a04d5ab639c77eefa266b49760bb472e2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6cc6694fcd4482c429cb76983c5852f5a41c5b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fdf4e0ce76ac071214f41b82f92c5ad6772d475', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad230decf52c10892bb3792af64003a6fe555919', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '287b5231b3c8cc38c88187285e44bbb6e7aa09e9', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '389a731f6e9ed0c44a8ca089aeb7d617565d2728', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3032d4d26194133fc298ace96b2fbde0ca8542b1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '211d13457159905201113e8825cee4585faebbfa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78b4a6705992c00f35e7d813fa38ae05a5a87dee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07622129735966410e8a9d856f47a3f5f7dbec21', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e84f5aacc71a479cd821a917d237eca0ddc05a7b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dae5b58061990e4891dfb582b1d7f874b116f965', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63bb309545377255f205170f71fa3c61ced94fb2', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9bda48018b9c6657904c5aa47be273bee9b7741', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f10f389acb9291c5972b01c1f5e12b62f3d6a1ee', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3c8ec71448dc8eae69e5fae3f50edd2f688db7c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6faf2abe940aaf755f8099e93646c5333a848154', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c8d0b04645bd7e73a96fbdfcf3141ef3605951', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5464ee0d896e8c1985c3fede6062653e0cc39708', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a08192e3242f17fa7d3de9f2b293e2bf30fd3d8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e4c86d4a4b8ecd97d158aa686115178aac839b4', 'committer_username': 'oktomus', 'committer_name': 'Kevin Masson', 'committer_email': 'kevin@tuataravfx.com', 'commit_date': datetime.datetime(2013, 6, 9, 22, 6, 18, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
441550526,Fix Shift+F5 causing False Colors to be applied twice,"The color map post-processing stage, applied when `False Colors` is enabled, is being called twice on `Stop Rendering (Shift+F5)`.

---
This happens by `on_rendering_abort()` being called and emitting a `signal_rendering_abort()` at:
https://github.com/appleseedhq/appleseed/blob/964c5a91d27760370f20b15f07088dc6a0064e36/src/appleseed/renderer/kernel/rendering/masterrenderer.cpp#L173

which also results in emitting `signal_rendering_failed()` on:
https://github.com/appleseedhq/appleseed/blob/964c5a91d27760370f20b15f07088dc6a0064e36/src/appleseed.studio/mainwindow/rendering/renderingmanager.cpp#L113-L117

Thus, `slot_rendering_end()` runs twice.

---
I'm submitting a ""conservative"" fix, as it only prevents False Colors from being applied when a ""failed"" signal is emitted (other previous behavior stay the same).

However, it would be interesting to remove unnecessary computations that are being run twice. Creating a new `signal_rendering_aborted()` on `renderingmanager.cpp` could help splitting what should be run on ""aborting"" from ""failing"", e.g.:
```diff
- if (rendering_result.m_status != MasterRenderer::RenderingResult::Succeeded)
-     emit signal_rendering_failed();
+ switch (rendering_result.m_status)
+ {
+   case MasterRenderer::RenderingResult::Succeeded:
+     break;
+ 
+   case MasterRenderer::RenderingResult::Aborted:
+     emit signal_rendering_aborted();
+     break;
+ 
+   default:
+     emit signal_rendering_failed();
+     break;
+ }
```",True,2877,https://api.github.com/repos/appleseedhq/appleseed/pulls/2877,https://github.com/appleseedhq/appleseed/pull/2877,closed,7,12,4,3,1,0,1,0,[{'name': 'PR | Squash'}],2020-06-29 17:25:54+00:00,2020-10-18 15:35:57+00:00,9583803.0,"110 days, 22:10:03",[],"[{'commit_sha': 'a792bc4602afaa4980352cbada1ea8e06fe007bd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27d23def82492575c80172e755618669f92b30cc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6284638c56401de73e981c45470b9727a74aca1b', 'committer_username': 'oktomus', 'committer_name': 'Kevin Masson', 'committer_email': 'kevin@tuataravfx.com', 'commit_date': datetime.datetime(2013, 6, 9, 22, 6, 18, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
444465612,Fix false colors not being applied to all tiles on a final render,"This PR fixes the following bug (which happens when we have post-processing stages, and `False Colors` is enabled):

![](https://cdn.discordapp.com/attachments/707230180233707591/727955871510036601/IdRVxIiHXU.gif)

**Edit:** I undid the changes I mention below because they don't fit well with https://github.com/appleseedhq/appleseed/pull/2885 (though, I intend to add them in a later PR, once we discuss what'd lead to the best ""user experience"").

~Also, these changes make post-processing effects always run when a rendering is stopped (e.g. `Shift+F5`).~
~If this behavior is desirable, https://github.com/appleseedhq/appleseed/pull/2878 can be closed. Otherwise, we can keeps effects only being applied to final renderings with:~

```diff
@@ -226,7 +226,7 @@ struct MasterRenderer::Impl
             render_info.insert(""render_time"", m_project.get_rendering_timer().get_seconds());

             // Don't proceed further if rendering failed.
-            if (result.m_status == RenderingResult::Failed)
+            if (result.m_status != RenderingResult::Succeeded)
             {
                 controller.on_rendering_abort();
                 return result;
@@ -241,12 +241,7 @@ struct MasterRenderer::Impl
             // Insert post-processing time into frame's render info.
             render_info.insert(""post_processing_time"", stopwatch.get_seconds());

-            switch (result.m_status)
-            {
-              case RenderingResult::Succeeded: controller.on_rendering_success(); break;
-              case RenderingResult::Aborted: controller.on_rendering_abort(); break;
-              assert_otherwise;
-            }
+            controller.on_rendering_success();
         }
```",False,2880,https://api.github.com/repos/appleseedhq/appleseed/pulls/2880,https://github.com/appleseedhq/appleseed/pull/2880,closed,13,15,2,3,5,1,0,0,[],2020-07-05 21:55:16+00:00,2020-10-18 19:04:36+00:00,9061760.0,"104 days, 21:09:20",[],"[{'commit_sha': '6997bcde66f0fd722355b5142a28997a845d190d', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '895a78c4bdedbda93acf1ee016ea925a8409c600', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef3af0d899bcee0b2d66bce3e7f7417d61fd6b6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
458000119,Add Tone Map post-processing stage,"Added 7 new tone map operators:
- Two ACES approximations:
  - `ACES (Narkowicz)`: by Krzysztof Narkowicz (ref. [[1]](https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/))
  - `ACES (Unreal)`: by Romain Guy (ref. [[2]](https://www.shadertoy.com/view/llXyWr))
- Reinhard's operators from [""Photographic Tone Reproduction for Digital Images""](http://www.cmap.polytechnique.fr/~peyre/cours/x2005signal/hdr_photographic.pdf):
  - `Reinhard`: Equation 3 in the paper (the simple 1/(1+x) tone mapping)
  - `Reinhard (Extended)`: Equation 4 in the paper
- Three filmic curves:
  - `Filmic (Hejl)`: by Jim Hejl (ref. [[3]](http://filmicworlds.com/blog/filmic-tonemapping-operators/), [[4]](https://github.com/tizian/tonemapper))
  - `Filmic (Uncharted)`: by John Hable, used in Uncharted 2 (ref. [[5]](http://filmicworlds.com/blog/filmic-tonemapping-operators/))
  - `Filmic (Piecewise)`: also by John Hable, developed with the aim of being simpler / more intuitive (ref. [[6]](http://filmicworlds.com/blog/filmic-tonemapping-with-piecewise-power-curves/))

The first filmic curve is almost ""plug-n-play"", while the other two are pretty customizable.

I think these seven operators provide a good starting point for *appleseed*.
While there are many other interesting ones that could definitely have been included (look at [`tonemapper`](https://github.com/tizian/tonemapper) for instance), IMHO the most important thing after adding these is to improve the ""user experience"" when using them on *appleseed.studio*.

This mainly involves: **1)** applying the effect as the parameters are changed (in the same way False Colors does it currently); and **2)** having a graph of the tone curve in the stage settings, specially for understanding the parameters of the two filmic curves from John Hable.

---

### Example
![tmo_comparison](https://user-images.githubusercontent.com/13294013/90816601-ed5dab00-e302-11ea-8abc-f5d77501bf6d.png)

### Original
![original](https://user-images.githubusercontent.com/13294013/90816638-ff3f4e00-e302-11ea-801a-fdd59875cd9f.png)
",True,2884,https://api.github.com/repos/appleseedhq/appleseed/pulls/2884,https://github.com/appleseedhq/appleseed/pull/2884,closed,6395,0,34,44,0,1,1,0,[{'name': 'PR | Squash'}],2020-07-28 19:16:51+00:00,2020-09-28 18:32:24+00:00,5354133.0,"61 days, 23:15:33","[{'comment_id': 487401699, 'comment_body': 'Would make sense to use `std::unique_ptr<>` here.', 'comment_created': datetime.datetime(2020, 9, 12, 11, 50, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dictoon', 'type': 'User'}]","[{'commit_sha': '210f674aeceb00ac9f44b839e18a18a787f0c470', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc03dcbc2ca9fd600f7666f1eaea94f5f4b591a3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0482ffe32fdd8f9d5cf0aa1dac4ce0ad6453ee5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1822209665ed18307666a8fc059ae14c1283e99a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '984e9a6c703ecf88d33c3c23e4316cb67e67deba', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3a2181662606752c36114c441f8cb6458c4577', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '056e7ab76fcf472c7211acad3a014e225a5a21db', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec3b14344091f239a85fed5dd98f32b6cd66710f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '299dbf4dfd19e1f6406c6bdf8237c004411b4dd5', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f708128c35c3e1196786b872aba1091e9278aeb', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43dd5f6ec65ca3cca896f39cfacf8821e59fc182', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9830e66aedccddba8c4bcd57e3b5aadb91b4b5c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fff29710c8a36bcf1fea89b4ac87808d2def90fc', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad78e9650173471cebb6fe098d97aae0555264d3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb4cd0912e4e538e689a564ad24110e6de34e2ed', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1107626d98d4fee927973a1308928f8736e3548', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba7ef417cbd3d5d00f0e38e910970d54afcb6b32', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b22091756bee06ea5de705f64a357580cd0e48a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09953371aa6f1566d46a0188c74970363bc924dd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdc165894fe7911a255913bf8e301ebaf7673cf3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0210d3f3214475f331cb3bd1aae2eb2bf5e762e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b2c64162f40d87e09fa05f7266964bd1f362d4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86cdca95a86261a0bd9715b20fef5e4e1af5974e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ef93cb23a2890dd71ccfa21dade15ca17657d4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f83bd2a18e14c37acf8422bbe3b120447bf8d218', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470f63c4e3b1c01a86e7af054f693440760b99db', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05c1df1bcfdd1cbb777f160237757dd482b0af61', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2382d29425d48603475ac8d768855b118a3400', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c56a7a90d85d5d3bbb9b3c89cd3ef8d1c335d41', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43510e1c1d3d679bbed66bc48d73844e326bc51c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78faac19a3549e6cb613f6ca86d552b3eaad0781', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40f49c78da559a5d79d73d5c7eafd5b9722c859b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5998ffe31ce4409bb2253188ce0c66c43ae7109f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33f13669d28c6ba07920308113313dc794ef74c0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb48c7420b6c44ab8fbcb4a5027249a823ac6d7', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60c351a729507556c44cece150818cd63d7ea87', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfd2fc3c44cf86e4a73df91909880ba850fb25aa', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cccc7fa71f3480ea81c8f142271cafad2326ea1b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49970e298fc95ef5de9128e28181aa2546adb319', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee26f315753f273927a534e23a8e1e1efe178638', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6957c9de3a3fcf20475e7479e70e2b10431db7ef', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fc013ce7feb10f4c5d3cdb1b4aef3d72fb0434b', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70d60a2c254bd7965d9d4fad6de403596e11a13f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67eeb40a2beec56257c18b30ceaf13c3f507db4a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
468375225,Add Chromatic Aberration post-processing stage,"Added ([lateral](https://en.wikipedia.org/wiki/Chromatic_aberration#Types)) Chromatic Aberration as a new post-processing stage.

This stage has two parameters, for artistic control:
- `strength`: controls the effect intensity by increasing distortion towards the edges of the image (thus, radially increasing the ""color fringes"")
- `fringing`: controls the amount of colors we use for the effect, i.e.:
  - the smallest value will result in the default ""three-color split"", found in most implementations of CA
  - higher values lead to a more ""rainbow-like"" effect, as shown in [this presentation](https://www.youtube.com/watch?v=RdN06E6Xn9E&t=428s) (see image comparisons below)

_Note: ""fringing"" might be a bad/misleading name.. renaming it to something like ""smoothness"" would probably be better._

---

| no aberration | default values |
|---|---|
| ![image](https://user-images.githubusercontent.com/13294013/90426829-0f9fc080-e098-11ea-86cc-ef29e5b90c7e.png) | ![image](https://user-images.githubusercontent.com/13294013/90426876-20503680-e098-11ea-8ce2-0ee6f3a911ed.png) |

_obs.: using a higher `strength` value than the default for the images below:_
| lowest `fringing` | highest `fringing` |
|---|---|
| ![image](https://user-images.githubusercontent.com/13294013/90427057-63120e80-e098-11ea-8317-fccfad3635b3.png) | ![image](https://user-images.githubusercontent.com/13294013/90427077-6c02e000-e098-11ea-95be-703a2b2fa486.png) |",True,2887,https://api.github.com/repos/appleseedhq/appleseed/pulls/2887,https://github.com/appleseedhq/appleseed/pull/2887,closed,1969,0,19,18,0,0,0,0,[],2020-08-15 23:23:30+00:00,2020-09-29 05:05:54+00:00,3822144.0,"44 days, 5:42:24",[],"[{'commit_sha': '3f98fd65caf4d876e27ccad6338aa4485a1d33de', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff86dd214c6a20d79c61661f72e96ad0aed7f640', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3160bfd2647065dc3e9959bf03a8ed316291a6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62e5575d82d7f517a286eda539f7cc23e24cb10', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '071c32be3cb301f6e207dcdce2c02fc6a27b5eda', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7a2d26dce2d885f93c94fcc1887cd34491e8c72', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15915d0bffb82269954339ac445af960f698ff6a', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a33160bb5976b4677d22c0b23505104d47545616', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35229db3df10b418fe174ee0e4f60da8c9d58668', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f75de9a084cba4cc35a522417c563411326b8c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69cbf0e739730e1efe16db580611ebcb2206874c', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24322aa463b7e6d391c27572d5449055eacd0350', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2f5b8aa506417fc80a4f18723f6cfc78773d482', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de927f18fb0b0762103af0dc7f7fbd3714056e8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2b2cd170f0fcafbc39a5a61b3dd0a2eae4185e', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54fecac54eea4416f5c831268e27db1ab4d2ae49', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27db76b7418e98631852c5ee435c3b6e2cb03c56', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c77feaad03f8b7c04e0e732528c0247e727e6c1', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37
464169554,Preview post-processing stage changes in appleseed.studio,"This adds a rendered preview when parameter values are changed for post-processing stages (similar to the current behavior of `False Colors`).

Note that only the effect that is being changed is applied for preview (i.e. if there are multiple stages, this won't show all of them).

![gS09PO8IEs](https://user-images.githubusercontent.com/13294013/89563365-b8753280-d7f1-11ea-9c77-3c14f6655f59.gif)

---

**Obs.:** as of right now, when you add a new effect it doesn't work untill you click `OK` to add it _and then_ edit its parameters. This should be fixed before this PR is merged.

---

Other ""nice-to-have""s are:
  - Render effects preview on a downscaled version of the frame, so it's more responsive (and make this a customizable option)
  - Some way to ""opt-out"" of this (e.g. a checkbox), either for all stages or for a specific one, untill all effects are ""real-time""
  - Save / export the current frame, with effects preview (should probably be an optional ""pop-up"")
",False,2885,https://api.github.com/repos/appleseedhq/appleseed/pulls/2885,https://github.com/appleseedhq/appleseed/pull/2885,open,117,10,8,13,1,0,0,0,[],2020-08-06 17:33:27+00:00,,0.0,,[],"[{'commit_sha': 'c8516fb59724ec1d492c1eca8e87af15dd4ccecd', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d092999bb24992c7636850fa3aed71255c6c2f8', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed4b852c33875b0fce86d917b69f8becdb3b8840', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '423af69d9bd3bd8c5da4ec59e03bc3cb22e92f69', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b8b15352061631f6a7ed6b7f51bd1df6589abf6', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '470674d0bc312a5dd03820a712e21835e912e67f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ddd946e0fab6879cd124eb07588d0c5894df8a0', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3382ce9281bf1bf379a4ab64726fa0b98f973b24', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9222133c90e9af9a9ab26bb39d888e57275d1f8f', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04e6452587fbf484712fc80024435f35858527b3', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dce4fb7400d705ba9d01ab1a4b049041c829b12', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8f4f4e6e65feaca36ff50a5236017cd60cb5a4', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ab64a35787235ab1cbacd3a9173ecbea09bc525', 'committer_username': 'laurelkeys', 'committer_name': 'Tiago Chaves', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 11, 23, 32, 25, tzinfo=datetime.timezone.utc)}]",Tiago Chaves,13294013,,User,,41,,33,37

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
753784,appleseed,appleseedhq/appleseed,C++,328,2184,130,99,11152,456,6,35,"[{'id': 505522643, 'number': 2896, 'closed': None, 'created': datetime.datetime(2020, 10, 18, 19, 1, 41, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 25, 'deletions': 25, 'state': 'open'}, {'id': 473343658, 'number': 2888, 'closed': datetime.datetime(2020, 9, 12, 11, 40, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 17, 11, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1535356.0, 'time_delta': '17 days, 18:29:16', 'additions': 39, 'deletions': 4, 'state': 'closed'}, {'id': 468375225, 'number': 2887, 'closed': datetime.datetime(2020, 9, 29, 5, 5, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 23, 23, 30, tzinfo=datetime.timezone.utc), 'time_taken': 3822144.0, 'time_delta': '44 days, 5:42:24', 'additions': 1969, 'deletions': 0, 'state': 'closed'}, {'id': 464169554, 'number': 2885, 'closed': None, 'created': datetime.datetime(2020, 8, 6, 17, 33, 27, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 117, 'deletions': 10, 'state': 'open'}, {'id': 458000119, 'number': 2884, 'closed': datetime.datetime(2020, 9, 28, 18, 32, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 19, 16, 51, tzinfo=datetime.timezone.utc), 'time_taken': 5354133.0, 'time_delta': '61 days, 23:15:33', 'additions': 6395, 'deletions': 0, 'state': 'closed'}, {'id': 444465612, 'number': 2880, 'closed': datetime.datetime(2020, 10, 18, 19, 4, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 5, 21, 55, 16, tzinfo=datetime.timezone.utc), 'time_taken': 9061760.0, 'time_delta': '104 days, 21:09:20', 'additions': 13, 'deletions': 15, 'state': 'closed'}, {'id': 442867870, 'number': 2878, 'closed': datetime.datetime(2020, 8, 11, 19, 50, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 18, 18, 17, tzinfo=datetime.timezone.utc), 'time_taken': 3547908.0, 'time_delta': '41 days, 1:31:48', 'additions': 125, 'deletions': 44, 'state': 'closed'}, {'id': 441550526, 'number': 2877, 'closed': datetime.datetime(2020, 10, 18, 15, 35, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 17, 25, 54, tzinfo=datetime.timezone.utc), 'time_taken': 9583803.0, 'time_delta': '110 days, 22:10:03', 'additions': 7, 'deletions': 12, 'state': 'closed'}, {'id': 438899997, 'number': 2875, 'closed': datetime.datetime(2020, 9, 30, 4, 14, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 1, 1, 25, tzinfo=datetime.timezone.utc), 'time_taken': 8478791.0, 'time_delta': '98 days, 3:13:11', 'additions': 6979, 'deletions': 45, 'state': 'closed'}, {'id': 432650416, 'number': 2872, 'closed': datetime.datetime(2020, 6, 24, 0, 50, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 19, 19, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1143041.0, 'time_delta': '13 days, 5:30:41', 'additions': 1042, 'deletions': 0, 'state': 'closed'}, {'id': 419777765, 'number': 2865, 'closed': datetime.datetime(2020, 6, 22, 7, 3, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 18, 22, 41, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2967762.0, 'time_delta': '34 days, 8:22:42', 'additions': 1055, 'deletions': 42, 'state': 'closed'}, {'id': 406106895, 'number': 2855, 'closed': datetime.datetime(2020, 4, 21, 8, 26, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 20, 14, 41, 59, tzinfo=datetime.timezone.utc), 'time_taken': 63857.0, 'time_delta': '17:44:17', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 391238941, 'number': 2807, 'closed': datetime.datetime(2020, 3, 23, 20, 14, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 19, 21, 10, 4, tzinfo=datetime.timezone.utc), 'time_taken': 342248.0, 'time_delta': '3 days, 23:04:08', 'additions': 296, 'deletions': 0, 'state': 'closed'}, {'id': 390067605, 'number': 2806, 'closed': datetime.datetime(2020, 3, 24, 22, 37, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 17, 20, 43, 36, tzinfo=datetime.timezone.utc), 'time_taken': 611640.0, 'time_delta': '7 days, 1:54:00', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 382129896, 'number': 2791, 'closed': datetime.datetime(2020, 3, 2, 9, 43, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 2, 1, 16, 59, tzinfo=datetime.timezone.utc), 'time_taken': 30420.0, 'time_delta': '8:27:00', 'additions': 306, 'deletions': 1, 'state': 'closed'}, {'id': 381620389, 'number': 2785, 'closed': datetime.datetime(2020, 3, 7, 9, 56, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 28, 22, 15, 56, tzinfo=datetime.timezone.utc), 'time_taken': 646833.0, 'time_delta': '7 days, 11:40:33', 'additions': 89, 'deletions': 27, 'state': 'closed'}]"
