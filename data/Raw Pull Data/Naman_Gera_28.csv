pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
421249341,"[GSoC] Add TransferFunction, Series, Parallel and Feedback classes for control package","<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Built upon #18436.

#### Brief description of what is fixed or changed
This PR adds a class for representing LTI systems in transfer function form.

#### Other comments
**TODO**:

- [x] adding `TransferFunction` class along with its functionality.

- [x] Rewrite unit-tests and make sure they pass.

- [x] Adding documentation.

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
*  physics.control
    *  Add `TransferFunction`, `Series`, `Parallel`, and `Feedback` class for physics.control submodule
<!-- END RELEASE NOTES -->",True,19390,https://api.github.com/repos/sympy/sympy/pulls/19390,https://github.com/sympy/sympy/pull/19390,closed,2225,2,15,96,134,411,2,0,"[{'name': 'GSoC'}, {'name': 'physics.control'}]",2020-05-21 09:28:16+00:00,2020-07-11 19:49:58+00:00,4443702.0,"51 days, 10:21:42","[{'comment_id': 428614672, 'comment_body': ""String printing is automatically added for sympy objects and even if you don't work on printers individually, every objects will get printed by looking up for name and its arguments. So this isn't needed"", 'comment_created': datetime.datetime(2020, 5, 21, 12, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 428648597, 'comment_body': ""I don't think that LaTeX printing should be added here, but in the respective printer.\r\nAnd you shouldn't add '$' before and after this, because this can likely cancel out the preceding dollar if this is printed inside some other LaTeX math."", 'comment_created': datetime.datetime(2020, 5, 21, 13, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 428665735, 'comment_body': ""I don't know if these concepts are well defined for transfer functions in matrix form.\r\nhttps://en.wikipedia.org/wiki/Proper_transfer_function\r\nBut I think that this should have limited scope that should not be applied for any arbitrary sympy expression, so it should better be added as a property"", 'comment_created': datetime.datetime(2020, 5, 21, 13, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 428667752, 'comment_body': ""I'm still confused about how this API is supposed to do, and, I don't think that this is needed at all because you can wrap U as transfer function and series connect to yield the same result."", 'comment_created': datetime.datetime(2020, 5, 21, 13, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 428708390, 'comment_body': ""I agree. Also, I'm not sure if `total_degree` is the right name for this type of function. Although, Wikipedia defines _relative degree_ of the transfer function as the difference between the degree of the denominator and that of the numerator. Anyway, I'll add `is_proper` as a property. "", 'comment_created': datetime.datetime(2020, 5, 21, 14, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 428717067, 'comment_body': ""You can make `total_degree` private function and not expose as public API if there are uncertainties.\r\nFor making stuff as `@property` I think that no parameter should be needed, so you'd rather define `is_proper` and `is_strictly_proper` separately."", 'comment_created': datetime.datetime(2020, 5, 21, 15, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 428729853, 'comment_body': 'I think that the most common use case for the class is creating a SISO transfer function, so having to wrap the polynomials in Matrix objects is a bit clunky. Either this class should accept ratios of polynomials in non-matrix form or we also need a `SISOTransferFunction` object.', 'comment_created': datetime.datetime(2020, 5, 21, 15, 31, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 428734720, 'comment_body': ""Same comment I've had on the other PR, I'm worried that if we don't store the numerators and denominators separealy in the class that we will cripple our ability to properly develop some useful methods. The only thing that immediately comes to mind is pole, zero cancelation. If the user creates an expression of ratios of two polynomials, sympy may do some basic simplifications that you don't want to occur. Those simplifications should only occur if the user asks sympy to do them.\r\n\r\nMy hunch is that we need this api:\r\n\r\n```\r\nTransferFunction(s, s**2 + s + 1)\r\n```\r\n\r\nThis give the most basic SISO transfer function that stores the numerator and denominator separately internally.\r\n\r\nIf you want a matrix of transfer functions then there are two options:\r\n\r\n```python\r\ntf1 = TransferFunction(num, den)\r\ntf2 = TransferFunction(num, den)\r\nTF = TransferFunctionMatrix([tf1, tf2])\r\n```\r\n\r\nor even simply:\r\n\r\n```python\r\ntf1 = TransferFunction(num, den)\r\ntf2 = TransferFunction(num, den)\r\nTF = Matrix([tf1, tf2])\r\n```\r\nFor what it is worth, I think making the most basic buidling block be a SISO transfer function makes sense, you can always create classes representing collections of transfer functions.\r\nIt isn't clear to me what utility a class that represents a matrix of transfer functions offers that a sympy Matrix of SISO transfer functions can't."", 'comment_created': datetime.datetime(2020, 5, 21, 15, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 428736111, 'comment_body': ""I don't think using `is_zero` is robust. I think you have to do things like `simplify(expected - result) == 0` to get the best check for symbolic zeroness."", 'comment_created': datetime.datetime(2020, 5, 21, 15, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429376047, 'comment_body': ""`total_degree` is a helper function for `is_proper`, I think we shouldn't add it as a private function.. because it just checks for one rational function not a matrix of rational functions. I'll adjust its logic in `is_proper` and `is_strictly_proper` itself."", 'comment_created': datetime.datetime(2020, 5, 22, 17, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 429381093, 'comment_body': ""Another reason to want a SISO TF as the basic block. You want to be able to do this easily:\r\n\r\n```\r\ntf1 = TF(n, d)\r\ntf2 = TF(n, d)\r\ntf3 = TF(n, d)\r\nG = tf1*tf2  # series connection\r\nfrom control import s\r\nX = Function('X')(s)\r\nY = F*X\r\n```\r\n\r\nHave to worry about matrix shapes in these kinds of operations will be a pain if you are doing SISO work. SISO systems will likely be the primary use case."", 'comment_created': datetime.datetime(2020, 5, 22, 17, 53, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429408146, 'comment_body': ""Sorry for late reply. I've gone through some other resources and I agree with all the things you've said. We should have one SISO transfer function object (although, considering SISO as 1x1 matrix TF was one option that could work).\r\n> If you want a matrix of transfer functions then there are two options:\r\n> ```\r\n> tf1 = TransferFunction(num, den)\r\n> tf2 = TransferFunction(num, den)\r\n> TF = TransferFunctionMatrix([tf1, tf2])\r\n> ```\r\nI think this looks good. I can work on this API, just need some more time. If we decide to have a class named `TransferFunction` (for representing a single rational function), we should define all functionality for that too. It should include addition of two tfs, multiplication, negation, is_proper, is_strictly_proper (for a single tf).\r\n\r\n> SISO systems will likely be the primary use case.\r\n\r\nIf that is the case, should we work on just SISO instead? "", 'comment_created': datetime.datetime(2020, 5, 22, 19, 0, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 429427935, 'comment_body': 'I would like you to create a SISO transfer function class first unless there is a compelling reason not to.', 'comment_created': datetime.datetime(2020, 5, 22, 19, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429430632, 'comment_body': ""Okay! I'm working on it. "", 'comment_created': datetime.datetime(2020, 5, 22, 19, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 429575402, 'comment_body': '@moorepants can we remove this?', 'comment_created': datetime.datetime(2020, 5, 23, 20, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 429580544, 'comment_body': 'Can you explain why is it beneficial to subclass from Mul versus something more simple like Expr or Basic?', 'comment_created': datetime.datetime(2020, 5, 23, 21, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429580868, 'comment_body': ""You need to make sure to follow this design pattern: https://docs.sympy.org/latest/tutorial/manipulation.html#args\r\n\r\n`num` and `den` can't be mutable."", 'comment_created': datetime.datetime(2020, 5, 23, 21, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429580974, 'comment_body': ""I don't think that this should be Mul, because they you can use transfer functions in arbitrary expressions. But they can't be used in arbitrary expressions, only expressions that follow rules of block diagram algebra."", 'comment_created': datetime.datetime(2020, 5, 23, 21, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429583052, 'comment_body': 'I suggest removing entire class until you have a siso transfer function defined and working. Your next PR could be added a class to handle collections of transfer functions.', 'comment_created': datetime.datetime(2020, 5, 23, 22, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429651372, 'comment_body': ""Yep, I'll change that. Thanks for pointing this!"", 'comment_created': datetime.datetime(2020, 5, 24, 16, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 429682032, 'comment_body': '@moorepants if we want to represent a Transfer function as a ratio of polynomials, then it has to somehow use `Mul`.  Or do you just want something like this?\r\n```\r\n>>> tf1 = SISOTransferFunction(s + 1, s**2 + s + 1)\r\n>>> tf1\r\nSISOTransferFunction(s + 1, s**2 + s + 1)\r\n>>> tf1.num \r\ns + 1\r\n>>> tf1.den\r\ns**2 + s + 1\r\n>>> tf1.args\r\n(s + 1, s**2 + s + 1)\r\n```\r\nI added unit tests in the most recent commit. And the most basic example looks like this:\r\n```\r\n>>> tf1 = SISOTransferFunction(s + 1, s**2 + s + 1)\r\n>>> tf1 \r\n(s + 1)/(s**2 + s + 1)\r\n>>> tf1.num\r\ns + 1\r\n>>> tf1.den\r\ns**2 + s + 1\r\n# similarly .args gives a tuple.\r\n```\r\n', 'comment_created': datetime.datetime(2020, 5, 24, 22, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 429683152, 'comment_body': '> And the most basic example looks like this\r\n\r\nPython control has a similar kind of outside api... ', 'comment_created': datetime.datetime(2020, 5, 24, 22, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 429683427, 'comment_body': ""This is a pretty minimal set of unit tests. I don't think it is sufficient to fully understand what the API needs to be and what functionality is needed.\r\n\r\nHere are some suggestions of what the unit tests for a SISO transfer function could include:\r\n\r\n- Instantiation of immutable transfer functions\r\n  - Using different polynomial variables\r\n  - Inputs that are not polynomials and what errors this raises\r\n  - Purely symbolic poylynomials\r\n  - Show that pole, zero cancelation does not occur\r\n- Method for simplifying the transfer function, or how it works with simplify(), this causes pole zero cancelations\r\n- Whether any of the operators should work: `__add__()`, `__mul__()`, `__div__()`, etc., what are operations with other transferfunctions, other expressions, other variables, etc.\r\n- What does the srerp, repr, and str() versions of this class produce\r\n- Evaluating the transfer function numerically given a purely symbolic TFs\r\n- Converting to zero, pole, gain, form\r\n- For low order symbolic transfer functions, have a way to covert to a time domain form, i.e. solve the ODE using the ODE module(s)\r\n- Method to calculate the zeros and poles: symbolically for low order and numerically for high order\r\n- How do standard sympy functions work with TFs: subs(), xreplace(), expand(), factor(), evalf(), etc.?\r\n- Is the Polynomial class used internally in any way, if so you need some tests to show what you want to do with this.\r\n- Method to apply different symbolic input functions in the Laplace domain to the transfer function: step, ramp, impulse, etc.\r\n- Methods for block diagram algebra and feedback\r\n- Printing: latex, pretty printer, code printers, etc.\r\n- Methods for taking the limit as `s` goes to zero and infinity: zero frequency gains, initial values, steady state\r\n- Plots: Zero-Pole plot, Bode, Root locus, Nichols, etc. \r\n- etc, etc, etc.\r\n\r\nUntil you express a large set of the desired functionality for this class as a set of comprehensive unit tests, we can't understand what the proposal is. Once you have unit tests for all or most of the above, then we can review and give you feedback on the class API and functionality design."", 'comment_created': datetime.datetime(2020, 5, 24, 22, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429684997, 'comment_body': ""Thanks, I will study these extra topics in detail and first work on a comprehensive set of unit tests. Cause I thought only the most basic functionality was included in my proposal, so I didn't prepare for that before. But I can work on this now :) "", 'comment_created': datetime.datetime(2020, 5, 24, 23, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 429688933, 'comment_body': ""You should think of your GSoC proposal as showing us what topic you'd like to contribute to SymPy and that you can succeed at contributing that topic. The GSoC proposals are rarely implemented exactly as described and are not vetted in a way that is the same as a review of what code is merged into SymPy. Your GSoC proposal showed that you have a good starting point. About half of the things I've listed above are the minimum things you need in place to get a new class merged into SymPy that follows SymPy design patterns. The other half are the methods that you'd expect a useful transfer function class to have."", 'comment_created': datetime.datetime(2020, 5, 25, 0, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429689296, 'comment_body': ""I've reorganized the list here into the minimal functionality and other functionality. It is important to think about all of this functionality so you don't design the core class in a way that prohibits or makes it difficult to implement the extended set of features.\r\n\r\n# Minimal\r\n\r\n- Instantiation of immutable transfer functions\r\n  - Using different polynomial variables\r\n  - Inputs that are not polynomials and what errors this raises\r\n  - Purely symbolic poylynomials\r\n  - Show that pole, zero cancelation does not occur\r\n- Method for simplifying the transfer function, or how it works with simplify(), this causes pole zero cancelations\r\n- Whether any of the operators should work: `__add__()`, `__mul__()`, `__div__()`, etc., what are operations with other transferfunctions, other expressions, other variables, etc.\r\n- What does the srerp, repr, and str() versions of this class produce\r\n- Evaluating the transfer function numerically given a purely symbolic TFs\r\n- How do standard sympy functions work with TFs: subs(), xreplace(), expand(), factor(), evalf(), etc.?\r\n- Is the Polynomial class used internally in any way, if so you need some tests to show what you want to do with this.\r\n- Printing: latex, pretty printer, code printers, etc.\r\n\r\n# Other\r\n- Converting to zero, pole, gain, form\r\n- For low order symbolic transfer functions, have a way to covert to a time domain form, i.e. solve the ODE using the ODE module(s)\r\n- Method to calculate the zeros and poles: symbolically for low order and numerically for high order\r\n- Method to apply different symbolic input functions in the Laplace domain to the transfer function: step, ramp, impulse, etc.\r\n- Methods for block diagram algebra and feedback\r\n- Methods for taking the limit as `s` goes to zero and infinity: zero frequency gains, initial values, steady state\r\n- Plots: Zero-Pole plot, Bode, Root locus, Nichols, etc. \r\n- etc, etc, etc."", 'comment_created': datetime.datetime(2020, 5, 25, 0, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 429691950, 'comment_body': '> outside api\r\n\r\nWhat is an ""outside api""?', 'comment_created': datetime.datetime(2020, 5, 25, 0, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 430076684, 'comment_body': ""Thanks for mentioning all the required functionality for this class. I'm writing examples to showcase all the methods and features I will add in this. Will be ready soon. I hope I can start the implementation after that. \r\n\r\n> You should think of your GSoC proposal as showing us what topic you'd like to contribute to SymPy and that you can succeed at contributing that topic. The GSoC proposals are rarely implemented exactly as described and are not vetted in a way that is the same as a review of what code is merged into SymPy. Your GSoC proposal showed that you have a good starting point.\r\n\r\nOh I see. Right now, I'm just a little worried that I might not be able to complete all the things mentioned in my proposal within three months.. because new things have been introduced. But I'm excited about learning new stuff, so I will give more time to it. Thanks, though. "", 'comment_created': datetime.datetime(2020, 5, 25, 21, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 430076855, 'comment_body': '> outside api\r\n\r\nAPI*', 'comment_created': datetime.datetime(2020, 5, 25, 21, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 430078254, 'comment_body': ""> Right now, I'm just a little worried that I might not be able to complete all the things mentioned in my proposal within three months.\r\n\r\nI recommend not worrying too much about this. Focus on getting quality contributions that build out the control systems functionality in SymPy and putting in your weekly required time for GSoC. At the end you will have something to be proud of."", 'comment_created': datetime.datetime(2020, 5, 25, 21, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 430081543, 'comment_body': 'Thanks. \r\n\r\n> Evaluating the transfer function numerically given a purely symbolic TFs\r\n\r\nCan you mention more about this one.. like what kind of function should I design? Something like [this](https://www.cds.caltech.edu/~murray/wiki/How_do_I_evaluate_a_certain_transfer_function_at_desired_frequencies_numerically%3F) which python control has? ', 'comment_created': datetime.datetime(2020, 5, 25, 21, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 430085754, 'comment_body': ""Here is an example:\r\n\r\n```python\r\n>>> s = symbols('s')\r\n>>> a0, a1, b0, b1, b2 = symbols('a0, a1, b0, b1, b2')\r\n>>> p1 = a1*s + a0\r\n>>> p2 = b2*s**2 + b1*s + b0\r\n>>> tf = TransferFunction(p1, p2, var=s)\r\n>>> tf.evalf(subs={a0: 1, a1: 2, b0: 3, b1: 4, b2: 5})\r\nTransferFunction(2*s + 1, 5*s**2 + 4*s + 3)\r\n```"", 'comment_created': datetime.datetime(2020, 5, 25, 22, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 430087024, 'comment_body': ""> Can you mention more about this one.. like what kind of function should I design? Something like this which python control has?\r\n\r\nThis is different functionality. I think this might work like:\r\n\r\n```python\r\n>>> s = symbols('s')\r\n>>> num = 2*s + 1\r\n>>> den = 3*s**2 + 2*s + 1\r\n>>> tf = TransferFunction(num, den)\r\n>>> import numpy as np\r\n>>> omegas = np.logspace(0, 1000)\r\n>>> eval_tf = lambdify(s, tf)\r\n>>> magnitudes, phases = eval_tf(omegas)\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 5, 25, 22, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 430090364, 'comment_body': ""Okay! I think that in this PR, we can cover the minimal functionality (as you stated above) for `TransferFunction` and other functionality can be covered in the following PRs when I'll add `bode` and `root_locus` plots. for instance - Methods like finding zeros and poles would be essential for `root_locus` plot. "", 'comment_created': datetime.datetime(2020, 5, 25, 22, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 431168376, 'comment_body': ""I'll remove this class when all functionality  of `TransferFunction` is working properly. "", 'comment_created': datetime.datetime(2020, 5, 27, 14, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 431565325, 'comment_body': ""You need a test for what happens when users have more than one symbol in the expressions. See @oscarbenjamin's earlier comment.\r\n\r\nAlso, what happens if `s` is used in the numerator and `p` in the denominator?\r\n\r\nYou also need a test showing what happens if an expression that isn't a polynomial is used."", 'comment_created': datetime.datetime(2020, 5, 28, 3, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431565689, 'comment_body': ""SymPy does not expand the expressions by default. Why do you want to expand the provided expressions?\r\n\r\n```\r\nIn [1]: import sympy                                                                                                                        \r\n\r\nIn [2]: s = sympy.symbols('s')                                                                                                              \r\n\r\nIn [3]: (s -1 )*(s-2)                                                                                                                       \r\nOut[3]: (s - 2)*(s - 1)\r\n```"", 'comment_created': datetime.datetime(2020, 5, 28, 3, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431565876, 'comment_body': 'You need a test for what happens if the polynomial variable has any assumptions that make it non-complex.', 'comment_created': datetime.datetime(2020, 5, 28, 3, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431566058, 'comment_body': ""This is not what I meant by purely symbolic. This is what I meant:\r\n\r\n```\r\n>>> s = symbols('s')\r\n>>> a0, a1, b0, b1, b2 = symbols('a0, a1, b0, b1, b2')\r\n>>> p1 = a1*s + a0\r\n>>> p2 = b2*s**2 + b1*s + b0\r\n>>> tf = TransferFunction(p1, p2, var=s)\r\n>>> tf.evalf(subs={a0: 1, a1: 2, b0: 3, b1: 4, b2: 5})\r\nTransferFunction(2*s + 1, 5*s**2 + 4*s + 3)\r\n```"", 'comment_created': datetime.datetime(2020, 5, 28, 3, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431566227, 'comment_body': 'I think you need at least 1 s for it to be a transfer function. This should raise a value error, no?', 'comment_created': datetime.datetime(2020, 5, 28, 3, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431566623, 'comment_body': 'I think that `tf.simplify()` might be a better name because this is already a common thing for sympy objects. It should apply simplification hints that are specific for simplifying ratios of polynomials under the hood. `simplify(tf)` should also work.', 'comment_created': datetime.datetime(2020, 5, 28, 3, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431566742, 'comment_body': ""If you don't call it simplify or use simplify() what is the difference that `cancel_poles_and_zeros()` would do that simplify doesnt?"", 'comment_created': datetime.datetime(2020, 5, 28, 3, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431567229, 'comment_body': ""Don't test the dunder methods directly like this. Just do `assert -tf == expected_tf`."", 'comment_created': datetime.datetime(2020, 5, 28, 3, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431567840, 'comment_body': ""Does this just multiply a transfer function by itselt? i.e. does `tf*tf == tf**2 == pow(tf, 2)`? This seems a little odd to support, but I guess that's ok."", 'comment_created': datetime.datetime(2020, 5, 28, 3, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431567900, 'comment_body': 'Ok, I see that python control works this way:\r\n\r\n```\r\nIn [1]: import control                                                                                                                      \r\n\r\nIn [2]: QApplication: invalid style override passed, ignoring it.                                                                           \r\n    Available styles: Windows, Fusion\r\nIn [2]:                                                                                                                                     \r\n\r\nIn [2]: control.TransferFunction([1, 2], [1, 2, 3])                                                                                         \r\nOut[2]: \r\n\r\n    s + 2\r\n-------------\r\ns^2 + 2 s + 3\r\n\r\nIn [3]: tf = control.TransferFunction([1, 2], [1, 2, 3])                                                                                    \r\n\r\nIn [4]: tf*tf                                                                                                                               \r\nOut[4]: \r\n\r\n         s^2 + 4 s + 4\r\n-------------------------------\r\ns^4 + 4 s^3 + 10 s^2 + 12 s + 9\r\n\r\nIn [5]: tf**2                                                                                                                               \r\nOut[5]: \r\n\r\n         s^2 + 4 s + 4\r\n-------------------------------\r\ns^4 + 4 s^3 + 10 s^2 + 12 s + 9\r\n\r\nIn [6]: pow(tf, 2)                                                                                                                          \r\nOut[6]: \r\n\r\n         s^2 + 4 s + 4\r\n-------------------------------\r\ns^4 + 4 s^3 + 10 s^2 + 12 s + 9\r\n\r\n\r\n```\r\n\r\nThis is fine.', 'comment_created': datetime.datetime(2020, 5, 28, 3, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431568262, 'comment_body': ""What is 'add()'? Combining two transfer functions in parallel? "", 'comment_created': datetime.datetime(2020, 5, 28, 3, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431568435, 'comment_body': 'There is no need for special mul and div methods. Just use `tf1*tf2` and `tf2/tf1`.', 'comment_created': datetime.datetime(2020, 5, 28, 4, 0, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431568803, 'comment_body': ""Don't create a pow method, use `pow(a, b)` or `a**b`"", 'comment_created': datetime.datetime(2020, 5, 28, 4, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431796839, 'comment_body': ""What's the point of this? It just increases the no of function calls for no useful reasons.\r\n\r\nYou can just add whatever you were going to add to `add` to this function. "", 'comment_created': datetime.datetime(2020, 5, 28, 12, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 431797022, 'comment_body': 'Also, you forgot __sub__', 'comment_created': datetime.datetime(2020, 5, 28, 12, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 431802908, 'comment_body': '+1 \r\nAll the expressions should be kept as it is unless the user explicitly wants otherwise.', 'comment_created': datetime.datetime(2020, 5, 28, 12, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 431816180, 'comment_body': ""I don't think this should be named `other`\r\nBut that can be discussed later"", 'comment_created': datetime.datetime(2020, 5, 28, 13, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 431816674, 'comment_body': 'Note that all of your methods should work with fully symbolic expressions and its best to write the tests with all symbols, unless you specifically need to test with numbers.', 'comment_created': datetime.datetime(2020, 5, 28, 13, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431830892, 'comment_body': ""You've already created a ``__pow__`` method, you should be using that."", 'comment_created': datetime.datetime(2020, 5, 28, 13, 23, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 431835113, 'comment_body': ""I think it's for combining them in parallel and Mul is for series.\r\n\r\n@namannimmo10 What's the plan if the Functions are in a feedback loop\r\n![image](https://user-images.githubusercontent.com/30147327/83147419-47404180-a115-11ea-968c-0eb44e4e479f.png)\r\n"", 'comment_created': datetime.datetime(2020, 5, 28, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 431838643, 'comment_body': 'I also saw another property `biproper` which is when the degree is exactly equal. \r\n\r\nIs that any useful?', 'comment_created': datetime.datetime(2020, 5, 28, 13, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 431867472, 'comment_body': '```suggestion\r\nfrom sympy import (\r\n    Basic, Matrix, ShapeError, Mul,\r\n    ImmutableMatrix, MutableMatrix, MutableDenseMatrix,\r\n)\r\n```\r\nI think that the first thing is making the tests pass\r\nYou should check the flake8 log\r\nhttps://travis-ci.org/github/sympy/sympy/jobs/691766576', 'comment_created': datetime.datetime(2020, 5, 28, 14, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 431867695, 'comment_body': ""Will that work with expressions then?\r\n\r\n```\r\ntf1 = TransferFunction(...)\r\ntf2 = TransferFunction(...)\r\ntf3 = TransferFunction(...)\r\ntf4 = TransferFunction(...)\r\n\r\ntf1*tf2 + tf3/tf4\r\n```\r\n\r\nThe order of operations would do the muls and divides first then the parallel.  So I think that's correct.\r\n\r\n> @namannimmo10 What's the plan if the Functions are in a feedback loop\r\n\r\nWe will probably want a method for that. But things like this should work:\r\n\r\n```\r\nH1 = TransferFunction(...)\r\nH2 = TransferFunction(...)\r\nyd = Function('yd')(s)\r\ny1 = Function('y')(s)\r\nu1 = Function('u')(s)\r\n\r\nloop = sm.Eq((yd-y1*H2)*H1, y1)\r\nsolve(loop, y1/yd)\r\n```"", 'comment_created': datetime.datetime(2020, 5, 28, 14, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431868666, 'comment_body': ""There may not even be use of importing all the matrix types, and you'll always get missing ones like sparse matrix types.\r\nIt is sufficient to check with `MatrixBase`"", 'comment_created': datetime.datetime(2020, 5, 28, 14, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 431869048, 'comment_body': '@namannimmo10 I\'ve looked through all the tests and made comments. You are also still missing a number of tests for the things in the ""minimal"" list above.', 'comment_created': datetime.datetime(2020, 5, 28, 14, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431870920, 'comment_body': ""I don't think we're quite there yet. I've asked @namannimmo10 to write only unit tests for review for now (no implementation code)."", 'comment_created': datetime.datetime(2020, 5, 28, 14, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431908973, 'comment_body': 'A common parallel structure is the PID controller. This should work:\r\n\r\n```\r\nP = kp\r\nI = ki*TransferFunction(1, s, s)\r\nD = kd*TransferFunction(s, 1, s)\r\ncontroller = P + I + D  # parallel combination\r\nclosed_loop_tf = plant = TransferFunction(num, den, s)\r\nplant.feedback(controller)\r\n```\r\n', 'comment_created': datetime.datetime(2020, 5, 28, 15, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431929182, 'comment_body': ""We can have a `TransferFunction` with numerator and denominator being integers. From python-control:\r\n``` python\r\n>>> from control import TransferFunction\r\n>>> s = TransferFunction.s\r\n>>> G = TransferFunction(5, 6); G\r\n\r\n5\r\n-\r\n6\r\n\r\n>>> type(_)\r\n<class 'control.xferfcn.TransferFunction'>\r\n```"", 'comment_created': datetime.datetime(2020, 5, 28, 15, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 431936283, 'comment_body': '> Why do you want to expand the provided expressions?\r\n\r\nEven I was initially confused but I decided to follow python-control here too! :)\r\n``` python\r\n>>> tf = ((s - 1)*(s - 2))/((s - 3)*(s - 4))\r\n>>> tf\r\n\r\ns^2 - 3 s + 2\r\n--------------\r\ns^2 - 7 s + 12\r\n\r\n```', 'comment_created': datetime.datetime(2020, 5, 28, 15, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 431950499, 'comment_body': 'This is one place not to follow a numerical library. This is the difference in how symbolics work.', 'comment_created': datetime.datetime(2020, 5, 28, 16, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431952324, 'comment_body': ""Why would I need to create a transfer function for a constant? Yes, you can do it in control but I'm not sure why you'd want to. This should work and be the preferable way I think:\r\n\r\n```\r\ntf = TransferFunction(...)\r\nk = S(5)/6\r\nk*tf\r\n```\r\n\r\nk is a constant and if it were a TransferFunction none of the methods associated with TransferFunction would really provide anything useful or work at all."", 'comment_created': datetime.datetime(2020, 5, 28, 16, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431959136, 'comment_body': ""Okay, I'll keep them as they are. (no usage of `expand` here)"", 'comment_created': datetime.datetime(2020, 5, 28, 16, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 431959809, 'comment_body': 'Inverse laplace transform of `1` is dirac delta, so transformation function of constant can model impulse.', 'comment_created': datetime.datetime(2020, 5, 28, 16, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 431963920, 'comment_body': 'Thanks for that reminder!', 'comment_created': datetime.datetime(2020, 5, 28, 16, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 431969093, 'comment_body': ""> I don't think this should be named other\r\n\r\noh yeah, I think just `p` would work."", 'comment_created': datetime.datetime(2020, 5, 28, 16, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 432027202, 'comment_body': ""> What's the point of this?\r\n\r\nI was following the same coding style as in [this](https://github.com/sympy/sympy/blob/ffbac23a0a6ecea7bd005c9871e989fc0959e739/sympy/algebras/quaternion.py#L164) file. But I can remove one of them. \r\n> Also, you forgot sub\r\n\r\nUser can negate the other TransferFunction and add it to the first one, so I thought it was not needed. Thanks, I will define another method `__sub__`. "", 'comment_created': datetime.datetime(2020, 5, 28, 18, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 432033665, 'comment_body': 'Interesting. That quaternion file is not a good pattern to follow. There are no reasons to have public methods for any of the buitin operators like that. Simply define methods for `__add__,__div__,__mul__` etc. and then use the actual operators in the tests `+,/,*`.', 'comment_created': datetime.datetime(2020, 5, 28, 18, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 432041063, 'comment_body': 'Okay, I will add the remaining ones soon. ', 'comment_created': datetime.datetime(2020, 5, 28, 18, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 432053751, 'comment_body': ""yep, I just found that on Wikipedia. I guess that could be useful if that exists in theory. I'll add in the next commit.  "", 'comment_created': datetime.datetime(2020, 5, 28, 18, 58, 51, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 432060941, 'comment_body': ""You need some tests to show that proper errors arise if a user tries to add, multiply, divded, etc. things to transfer functions that can't be added, multiplied, divided, etc. For example what would `TransferFunction(...) + Matrix(...)` do? It should raise an error, along with many other SymPy and non-SymPy objects."", 'comment_created': datetime.datetime(2020, 5, 28, 19, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 432181022, 'comment_body': ""okay, I think I wanted to have another method `cancel_poles_and_zeros()` as it would internally use `simplify` and `expand` to give us the desired result after cancellation. Like this for example: \r\n``` python\r\n>>> from sympy import simplify\r\n>>> tf = TransferFunction(s**5 + s**3 + s, s - s**2)\r\n>>> simplify(tf) \r\nTransferFunction(-(s**4 + s**2 + 1), s - 1)  \r\n>>> tf.cancel_poles_and_zeros() # distributes the -ve sign.\r\nTransferFunction(-s**4 - s**2 - 1, s - 1)\r\n```\r\nMaybe I should rename it to `simplify`?\r\n\r\nedit: it's better to just remove this and let sympy's own `simplify` handle it. We discussed that we shouldn't expand the num and den. "", 'comment_created': datetime.datetime(2020, 5, 28, 23, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 432914344, 'comment_body': ""If we're making `var` compulsory, it should be added to all the definitions, tf1, 2, 3...."", 'comment_created': datetime.datetime(2020, 5, 31, 6, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 432914415, 'comment_body': 'How do we do about var in situations like these', 'comment_created': datetime.datetime(2020, 5, 31, 6, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 432914473, 'comment_body': 'The var should also be a part of the resultant object instances', 'comment_created': datetime.datetime(2020, 5, 31, 6, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 432914591, 'comment_body': ""Also, can you add a test where we're taking the same num and den with some symbols like s, p, q, etc. and one of the TFs is anchored with s and another with p. And the TFs are not the same."", 'comment_created': datetime.datetime(2020, 5, 31, 6, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 432921583, 'comment_body': 'Can you add a few more examples for different configurations?\r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 31, 8, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 432930373, 'comment_body': ""How about this? \r\n1. The user doesn't have to specify the `var` when the transfer function is like this -  `TransferFunction(s**4 + s**3 - 2*s, s**4 - 1)` (`s` being the default variable, as it is most commonly used.)\r\n2. `var` is also not needed when both the numerator and the denominator are numbers. e.g. `TransferFunction(5, 6)`.\r\n3. In all other cases like `TransferFunction(s - 1, 4 - p, s)` and `TransferFunction(p + 3, p**2 - 9, p)` we need to specify the `var` as the third argument.\r\n\r\nI think passing `s` as the third argument every time is unnecessary. "", 'comment_created': datetime.datetime(2020, 5, 31, 10, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 432931942, 'comment_body': ""> Also, can you add a test where we're taking the same num and den with some symbols like s, p, q, etc. and one of the TFs is anchored with s and another with p. And the TFs are not the same.\r\n\r\nHow to decide the `var` (last argument) for the resultant TF?"", 'comment_created': datetime.datetime(2020, 5, 31, 10, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 433004382, 'comment_body': 'I assume this would only fail if the exponent is the polynomial variable. If so, that seems good.', 'comment_created': datetime.datetime(2020, 6, 1, 1, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 433005155, 'comment_body': 'The latex form should not include ""TransferFunction"" is should likely print the same as a Rational.', 'comment_created': datetime.datetime(2020, 6, 1, 1, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 433005207, 'comment_body': 'You need some pretty printing tests.', 'comment_created': datetime.datetime(2020, 6, 1, 1, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 433153245, 'comment_body': 'Exponent must always be an integer, then only we can take power of a TF.', 'comment_created': datetime.datetime(2020, 6, 1, 10, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 433306556, 'comment_body': 'You should use explicit imports rather than manipulating `__all__` like this.', 'comment_created': datetime.datetime(2020, 6, 1, 15, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 433308677, 'comment_body': ""Matrix and MutableMatrix are the same so you don't need to test them separately. Also Matrix sympifies to ImmutableMatrix so it's better to use `_sympify` and then check that the result is an `ImmutableMatrix`. Mutable matrix should never be in the args of `Basic`."", 'comment_created': datetime.datetime(2020, 6, 1, 15, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 433309433, 'comment_body': ""Don't set attributes like this in Basic subclasses. You can make a property called `G` that returns `self.args[0]`."", 'comment_created': datetime.datetime(2020, 6, 1, 15, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 433309450, 'comment_body': ""I think we should pass the variable explicitly in all cases. The variable should also be always accessible from `.args[2]` if the user needs the variable. Here is another example showing why this is needed in user code;\r\n\r\n```\r\ntf1 = TransferFunction(5, 6, s)\r\ntf2 = TransferFunction(5, 6, z)\r\ntf1 == tf2\r\ntf1*tf2\r\n```\r\nThat should raise an error right?\r\n\r\nShould this?\r\n```\r\ntf1 = TransferFunction(5, 6)\r\ntf2 = TransferFunction(5, 6, s)\r\ntf1 == tf2\r\ntf1*tf2\r\n```\r\nIt is ambiguous now, because there is no explicitness about what the variable is for tf1. A transfer function is not a transfer function if it isn't a function of a complex variable.\r\n\r\nI think the best decision will be making it explicit and always required."", 'comment_created': datetime.datetime(2020, 6, 1, 15, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 433310727, 'comment_body': '```\r\nif self.G.shape != other.G.shape\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 15, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 433325887, 'comment_body': 'You can add a property:\r\n```\r\n    @property \r\n    def variable(self):\r\n        return self.args[2]\r\n```\r\nThen users can use `tf.variable` to access it. Users should be discouraged from accessing args directly in case the layout of the args ever needs to change.\r\n\r\nUsing properties rather than direct args access also makes it possible to share code between subclasses that have different args layouts.\r\n', 'comment_created': datetime.datetime(2020, 6, 1, 15, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 433347635, 'comment_body': 'I meant `TransferFunction(p*s**2 + a*p + b*s, c*p**2 + d*s, s) != TransferFunction(p*s**2 + a*p + b*s, c*p**2 + d*s, p)` or something like this', 'comment_created': datetime.datetime(2020, 6, 1, 16, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 433348040, 'comment_body': 'That reminds me, would, `TF(p*s, 1 + p*s, s)` and ` TF(p*s, 1 + p*s, p)` be the same?', 'comment_created': datetime.datetime(2020, 6, 1, 16, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 433375290, 'comment_body': 'I agree with @oscarbenjamin on this. Please add an attribute for the variable.', 'comment_created': datetime.datetime(2020, 6, 1, 17, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 433397039, 'comment_body': ""Thanks! I'll eventually remove `TransferFunctionMatrix` from this PR, and it will be dealt with in the following PRs. Will address these comments there."", 'comment_created': datetime.datetime(2020, 6, 1, 18, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 433406711, 'comment_body': 'Sorry, I misunderstood. \r\n\r\n> That reminds me, would, `TF(p*s, 1 + p*s, s)` and ` TF(p*s, 1 + p*s, p)` be the same?\r\n\r\nI think they are not the same. Also, you mentioned that above: \r\n> And the TFs are not the same. \r\n', 'comment_created': datetime.datetime(2020, 6, 1, 18, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 433412348, 'comment_body': ""> I think the best decision will be making it explicit and always required.\r\n\r\nThanks for pointing this! \r\n\r\n\r\n\r\n> I agree with @oscarbenjamin on this. Please add an attribute for the variable.\r\n\r\nThat's good. I will do that. Similarly, we can also add `num` and `den` as a `property`.\r\n``` python\r\n@property\r\ndef num(self):\r\n    return self._num\r\n\r\n@property\r\ndef den(self):\r\n    return self._den\r\n```"", 'comment_created': datetime.datetime(2020, 6, 1, 18, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 433417448, 'comment_body': 'The task of adding unit tests is almost over. What should be the variable for the resultant TF i.e. `tf3 + tf4`?', 'comment_created': datetime.datetime(2020, 6, 1, 18, 39, 45, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 433439401, 'comment_body': 'That should raise an error.', 'comment_created': datetime.datetime(2020, 6, 1, 19, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 433439864, 'comment_body': 'Basically every operation will have to check whether the polynomial variable is equivalent or an error is raised.', 'comment_created': datetime.datetime(2020, 6, 1, 19, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 436033951, 'comment_body': ""It's only testing if var is a Symbol.\r\nThere should be a different Error message here\r\n"", 'comment_created': datetime.datetime(2020, 6, 5, 16, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436034141, 'comment_body': 'Also, you need to add a different test to check the variable is complex. ', 'comment_created': datetime.datetime(2020, 6, 5, 16, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436034326, 'comment_body': ""I don't think we should be simplifying these by default."", 'comment_created': datetime.datetime(2020, 6, 5, 16, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436035583, 'comment_body': 'This message should be about the variable, not the arguments of the TF. \r\n\r\n""Both the Transfer Functions should have the same variable"" or both should be anchored with the same variable. Something like that.', 'comment_created': datetime.datetime(2020, 6, 5, 16, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436035982, 'comment_body': 'Again, why are we expanding by default? \r\nI think that should be left to the user. ', 'comment_created': datetime.datetime(2020, 6, 5, 16, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436036196, 'comment_body': 'Same in all the other functions', 'comment_created': datetime.datetime(2020, 6, 5, 16, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436037796, 'comment_body': 'We can just do \r\n```python\r\nelse:\r\n    p = abs(p)\r\n    num_, den_ = expand(self.den**p), expand(self.num**p)\r\n    return TransferFunction(num_, den_, self.var)   \r\n```\r\n\r\n`abs(p)` will return a positive number if p is negative, otherwise, it will remain positive.\r\n', 'comment_created': datetime.datetime(2020, 6, 5, 16, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436049869, 'comment_body': '`num_` and `den_` are not the same here. When `p` is negative, ratio will be inverted. ', 'comment_created': datetime.datetime(2020, 6, 5, 17, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436058413, 'comment_body': 'Oh yeah. Then you can do\r\n```python\r\nelse:\r\n    p = abs(p)\r\n    num_, den_ = expand(self.den**p), expand(self.num**p)\r\n    if p<0:\r\n        num_, den_ = den_, num_\r\n    return TransferFunction(num_, den_, self.var)   \r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 17, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436060169, 'comment_body': 'Yes, we should try to avoid using `expand` in library code but consider this:\r\n``` python\r\n>>> tf1 = TransferFunction(p*s**4 + 3*s**3 + 2*s**2 - 5*p + 7, s**3 - 6*s**2 + p - s, s)\r\n>>> tf2 = TransferFunction(s**5 + s**3 - s**2 + s - 5, 4*s**3 - 2*s**2 + 10, s)\r\n>>> tf1 + tf2\r\nTransferFunction((4*s**3 - 2*s**2 + 10)*(p*s**4 - 5*p + 3*s**3 + 2*s**2 + 7) + (p + s**3 - 6*s**2 - s)*(s**5 + s**3 - s**2 + s - 5), (4*s**3 - 2*s**2 + 10)*(p + s**3 - 6*s**2 - s), s)\r\n```\r\nLeaving it as it is might look good when `num` and `den` are as simple as `(s - 4)*(s + 3)` or not higher degree polynomials.. but while dealing with degree 4 or more, I think using `expand` would be a better decision. Python-control also expands `num` and the `den`. Should I remove `expand` from all of them?', 'comment_created': datetime.datetime(2020, 6, 5, 17, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436067461, 'comment_body': ""I am using `sympify` to convert `int` to sympy integers. \r\n``` python\r\n>>> tf3 = TransferFunction(3, 4, p);  type(tf3.num)\r\n<class 'sympy.core.numbers.Integer'>\r\n```"", 'comment_created': datetime.datetime(2020, 6, 5, 17, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436073588, 'comment_body': '> Also, you need to add a different test to check the variable is complex.\r\n\r\nBy test you mean unit test? I will add a test like this: `raises(TypeError, lambda: TransferFunction(s - 1, s + 2, 3))`', 'comment_created': datetime.datetime(2020, 6, 5, 17, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436077177, 'comment_body': 'It should be `_sympify` rather than `sympify` to prevent string inputs.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 436096101, 'comment_body': 'p will always be positive after using `abs`.', 'comment_created': datetime.datetime(2020, 6, 5, 18, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436138806, 'comment_body': 'If `var` is a `Symbol`, it should raise an error if `var.is_real` is `True`, to check whether the variable is complex.', 'comment_created': datetime.datetime(2020, 6, 5, 20, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 436146676, 'comment_body': ""I get this: \r\n``` \r\n>>> x = Symbol('x', real=True)\r\n>>> x.is_complex\r\nTrue\r\n```"", 'comment_created': datetime.datetime(2020, 6, 5, 20, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436153117, 'comment_body': ""Why not use `super()` instead of calling via class's name?"", 'comment_created': datetime.datetime(2020, 6, 5, 20, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 436160202, 'comment_body': '@oscarbenjamin, is that a bug? ', 'comment_created': datetime.datetime(2020, 6, 5, 20, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436161331, 'comment_body': ""I also tested it a bit. The other property remains `None` in all the cases except when `real = True`. \r\n\r\n```python \r\n>>> x = Symbol('x')\r\n>>> y = Symbol('y', real = True)\r\n>>> z = Symbol('z', real = False)\r\n>>> p = Symbol('p', complex = True)\r\n>>> x.is_real\r\n>>> x.is_complex\r\n>>> y.is_real\r\nTrue\r\n>>> y.is_complex\r\nTrue\r\n>>> z.is_complex\r\n>>> z.is_real\r\nFalse\r\n>>> p.is_real\r\n>>> p.is_complex\r\nTrue\r\n```"", 'comment_created': datetime.datetime(2020, 6, 5, 20, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436163734, 'comment_body': ""Yes, it might not look that good. But use cases are more important. The users might want to use unexpanded equations. \r\nThese large polynomials will look bad anyway after a couple more operations. So, it will be better to leave it as it is and let the users expand explicitly if they want. It's just one more step."", 'comment_created': datetime.datetime(2020, 6, 5, 21, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436164115, 'comment_body': 'Oh sorry, I missed that. Let me have another look at it. ', 'comment_created': datetime.datetime(2020, 6, 5, 21, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436174559, 'comment_body': 'The reals are a subset of the complex numbers', 'comment_created': datetime.datetime(2020, 6, 5, 21, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 436233951, 'comment_body': 'Then checking `var.is_real` is not a good idea. Perhaps, we should test for `not var.is_complex` then. ', 'comment_created': datetime.datetime(2020, 6, 6, 3, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436245938, 'comment_body': '> we should test for `not var.is_complex` then.\r\n\r\nYes, that should work. ', 'comment_created': datetime.datetime(2020, 6, 6, 7, 8, 33, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436256075, 'comment_body': 'Every class which subclass from `Basic` uses `Basic.__new__(cls, ....)`', 'comment_created': datetime.datetime(2020, 6, 6, 10, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436259472, 'comment_body': 'OK, I will use `super(TransferFunction, cls).__new__(cls, num, den, var)`.', 'comment_created': datetime.datetime(2020, 6, 6, 11, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436324178, 'comment_body': ""Is there any use of restricting the symbol to be complex?\r\nFor sympy's polynomial module, I don't think that it tests whether the symbols are real or complex, even if the roots can be computed in complex numbers."", 'comment_created': datetime.datetime(2020, 6, 7, 4, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 436342619, 'comment_body': ""Yeah, I also think the only criterion must be that the `var` is a Symbol. \r\nShould I store `num` & `den` as `Poly()` objects internally? \r\nI see the output becomes totally unreadable if we want to keep the numerator and the denominator in non expanded form. \r\nIf not, then how do I check that the user doesn't input anything other than polynomials or integers? One way could be using `Expr`:\r\n``` python\r\n(Pdb) isinstance(p**2 - p*s + 1, Expr)\r\nTrue\r\n```\r\nBut that could also include other arithmetic operations.."", 'comment_created': datetime.datetime(2020, 6, 7, 9, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436352223, 'comment_body': ""> So, it will be better to leave it as it is and let the users expand explicitly if they want\r\n\r\n`expand` doesn't work for the `TransferFunction` which is strange cause other functions like `factor` & `xreplace` are working fine. Same case with `simplify`, it doesn't work! It might work if we were using `Mul` to represent TF, so I am using this version of `simplify`:\r\n\r\n``` python\r\n    def simplify(self):\r\n        tf = cancel(Mul(self.num, 1/self.den)).as_numer_denom()\r\n        num_, den_ = tf[0], tf[1]\r\n        return TransferFunction(num_, den_, self.var)\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 6, 7, 11, 17, 56, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436359690, 'comment_body': '@moorepants, the description of `evalf` says:\r\n\r\n```\r\n    Adaptive numerical evaluation of SymPy expressions, using mpmath\r\n    for mathematical functions\r\n```\r\nAre we sure that this would be used for symbolic evaluation in our case? \r\n``` python\r\n>>> p5 = a*s + b\r\n>>> SP3 = TransferFunction(p5, p, s)\r\n>>> assert SP3.evalf(subs={a: 3, b: -4}) == TransferFunction(3*s - 4, p, s)\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\nAttributeError: \'TransferFunction\' object has no attribute \'evalf\'\r\n```\r\nShould I define a new method `evalf` here?', 'comment_created': datetime.datetime(2020, 6, 7, 12, 45, 33, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436494089, 'comment_body': 'If you want to use `evalf`, you should inherit `EvalfMixin` class and define some necessary methods for it.', 'comment_created': datetime.datetime(2020, 6, 8, 7, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 436908957, 'comment_body': 'This is checking the same thing as the previous statement. I suppose this was supposed to be `den`, not `num`.\r\n\r\nand why use a different if statement, you can add it to the first one. \r\nAlso, if you want to use a different if statement, you should add an else clause for this one too. ', 'comment_created': datetime.datetime(2020, 6, 8, 18, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436918294, 'comment_body': 'Are `simplify(self.num)` and `simplify(self.den)` not working?', 'comment_created': datetime.datetime(2020, 6, 8, 18, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436926752, 'comment_body': 'Also, are we not supporting Floats here, only integers?', 'comment_created': datetime.datetime(2020, 6, 8, 19, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436934203, 'comment_body': 'Any reason for limiting the precision here?\r\n', 'comment_created': datetime.datetime(2020, 6, 8, 19, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436939816, 'comment_body': 'I think we should also add `__eq__` to compare two TFs', 'comment_created': datetime.datetime(2020, 6, 8, 19, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 436955878, 'comment_body': ""I think it's not required since it inherits `Basic`."", 'comment_created': datetime.datetime(2020, 6, 8, 19, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436959414, 'comment_body': 'Creating Floats from Python `float` type gives a minimum precision of 15 digits ', 'comment_created': datetime.datetime(2020, 6, 8, 19, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436962760, 'comment_body': '> I suppose this was supposed to be den, not num.\r\n\r\nThanks for pointing this. I will add it to the first if statement. Hmm yeah, I missed that. Looks like we can have floats as `num` & `den`.', 'comment_created': datetime.datetime(2020, 6, 8, 19, 53, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436965547, 'comment_body': 'Not working!', 'comment_created': datetime.datetime(2020, 6, 8, 19, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 436987781, 'comment_body': ""`Basic` subclasses don't need to implement `__eq__`."", 'comment_created': datetime.datetime(2020, 6, 8, 20, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 436988854, 'comment_body': 'You should define the `_eval_simplify` method rather than `simplify`. That way `simplify(obj)` works.  The `simplify` method is defined on `Basic` and does not need to be redefined in subclasses.', 'comment_created': datetime.datetime(2020, 6, 8, 20, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 437051071, 'comment_body': 'If you have intended to implement feature to add with constants, I don’t think that it should be limited to Integer or Float, but to support any constants via other.is_number.\r\n\r\nAnd I don’t think that we should modify precisions here, but dispatch everything to how sympy addition and multiplication handles floats.', 'comment_created': datetime.datetime(2020, 6, 8, 23, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 437203917, 'comment_body': '`__rsub__` can also be defined. It is the only one missing, I guess.', 'comment_created': datetime.datetime(2020, 6, 9, 7, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 437347039, 'comment_body': '> I don’t think that it should be limited to Integer or Float, but to support any constants via other.is_number.\r\n\r\nI think we have to use `isinstance(other, (Integer, Float))` because `other.is_number` might allow other objects. For instance:\r\n``` python\r\n>>> q = Quaternion(1, 2, 3, 4)\r\n>>> q.is_number\r\nTrue\r\n```', 'comment_created': datetime.datetime(2020, 6, 9, 11, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 437434772, 'comment_body': '@namannimmo10 Have you investigated using the Poly class internally? Here are the docs:\r\n\r\nhttps://docs.sympy.org/latest/modules/polys/reference.html\r\n\r\nI browsed it some this morning and see a number of methods that will likely be useful. What was your consideration on this?', 'comment_created': datetime.datetime(2020, 6, 9, 13, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437439039, 'comment_body': ""Why would you take the absolute value? A power to a negative number should probably raise an error for transfer functions. I'm not sure that is defined."", 'comment_created': datetime.datetime(2020, 6, 9, 13, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437439323, 'comment_body': ""You'll need a test for a negative exponent."", 'comment_created': datetime.datetime(2020, 6, 9, 13, 53, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437439934, 'comment_body': 'How does this work if you have multiple different symbols in the expression? Make a test for that.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437440281, 'comment_body': 'Same comment for degree for both of these methods.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437441609, 'comment_body': ""This set of tests still lacks examples that are completely symbolic. I've mentioned this before but you should create the vast majority of your tests using only symbols and then have tests with numbers for specific things. Otherwise you are opening yourself up for lots of bugs."", 'comment_created': datetime.datetime(2020, 6, 9, 13, 56, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437442855, 'comment_body': 'Should this be a TypeError (comparing the assertions above this on to those below).', 'comment_created': datetime.datetime(2020, 6, 9, 13, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437444332, 'comment_body': 'Yes, subs, xreplace, evalf (and any other similar sympy methods) should work.', 'comment_created': datetime.datetime(2020, 6, 9, 13, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437444699, 'comment_body': ""I don't see a test for xreplace."", 'comment_created': datetime.datetime(2020, 6, 9, 13, 59, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437446086, 'comment_body': 'I see the tests below. Ignore this comment.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437461009, 'comment_body': ""It is there under sympy's own functions."", 'comment_created': datetime.datetime(2020, 6, 9, 14, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 437463194, 'comment_body': ""I haven't seen any unit tests for this yet. What is it's purpose?"", 'comment_created': datetime.datetime(2020, 6, 9, 14, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437464344, 'comment_body': 'Please see https://github.com/sympy/sympy/pull/19390#issuecomment-640556483\r\nYes, I will add tests for this property!', 'comment_created': datetime.datetime(2020, 6, 9, 14, 25, 4, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 437468207, 'comment_body': '> Why would you take the absolute value?\r\n\r\nWhen the exponent `p` is negative, ratio is inverted. I also verified this from python control.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 437490365, 'comment_body': 'Thanks for pointing this! I guess we need to make this change:\r\n```suggestion\r\n        return degree(self.num, self.var) <= degree(self.den, self.var)\r\n```\r\nSo that we can support multiple different symbols in the expression.', 'comment_created': datetime.datetime(2020, 6, 9, 14, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 437497641, 'comment_body': ""As it is written it seems redundant to var. It don't see any need for it without more explanation."", 'comment_created': datetime.datetime(2020, 6, 9, 15, 7, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437498357, 'comment_body': 'I see. Thanks.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 8, 24, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437514992, 'comment_body': 'If it seems redundant, I can remove it. It is only needed in `_eval_subs` which can also work without this property.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 437522806, 'comment_body': ""IMO, we should not inherit another `EvalfMixin` class. I think the more superclasses `TransferFunction` inherits from, the more maintenance/changes are needed. \r\n\r\nIsn't `evalf` normally used for numerical evaluation?\r\nI don't see any difference between `evalf` and normal usage of `subs` here:\r\n``` python\r\n>>> a0,a1,b0,b1,b2=symbols('a0:2, b0:3')\r\n>>> p1 = a1*s + a0\r\n>>> p2 = b2*s**2 + b1*s + b0\r\n>>> SP1=TransferFunction(p1,p2,s)\r\n>>> SP1.subs({a0:1, a1: 2, b0:3, b1: 4, b2: 5})\r\nTransferFunction(2*s + 1, 5*s**2 + 4*s + 3, s)\r\n>>> SP1.evalf(subs={a0: 1, a1: 2, b0: 3, b1: 4, b2: 5})\r\nTransferFunction(2*s + 1, 5*s**2 + 4*s + 3, s)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 9, 15, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 437531612, 'comment_body': ""If this is a standard method that sympy objects have and expect, then you can include it, otherwise I'd remove."", 'comment_created': datetime.datetime(2020, 6, 9, 15, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437532488, 'comment_body': ""Mixing in evalf class is fine and common. That's what it is there for. evalf and subs serve different purposes and have distinct functionality. Both need to be supported."", 'comment_created': datetime.datetime(2020, 6, 9, 15, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437536550, 'comment_body': ""Yes, I tried storing the numerator and the denominator as `Poly` objects internally. i see it becomes totally illegible, given the fact that we are not keeping `num` and `den` in expanded form by default. Right now, it still gives a cleaner structure.. and if we want to change this, we have to make changes in all of the functionality.\r\n``` python\r\n>>> tf1 = TransferFunction((9 - s**3)*(s - 5)*(s + 1)*(s + 6) + (s - 5)*(s + 1)*(s + 3)**2, (9 - s**3)*(s + 1)*(s**4 - 2*s**2 + 1), s)\r\n>>> tf1\r\nTransferFunction(Poly(-s**6 - 2*s**5 + 30*s**4 + 41*s**3 - 2*s**2 - 327*s - 315, s, domain='ZZ'), Poly(-s**8 - s**7 + 2*s**6 + 11*s**5 + 8*s**4 - 19*s**3 - 18*s**2 + 9*s + 9, s, domain='ZZ'), s)\r\n```\r\nThis is just one SISO transfer function, with a collection of TFs, `TFM = TransferFunctionMatrix([tf1, tf2])` this would not look good at all."", 'comment_created': datetime.datetime(2020, 6, 9, 15, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 437561164, 'comment_body': ""That's just a printing issue, which can be adjusted. The issue is more about whether we need the functionality in the polynomial package and, if so, how much do we need? It may be true that we can get away with just using expressions and convert them to Poly for specific calcs if needed internally in the class."", 'comment_created': datetime.datetime(2020, 6, 9, 16, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437572122, 'comment_body': 'I understand. The polynomials package would be powerful in some use cases. \r\n> It may be true that we can get away with just using expressions and convert them to Poly for specific calcs if needed internally in the class.\r\n\r\nIf that can be done with some of its methods, can I proceed further now?', 'comment_created': datetime.datetime(2020, 6, 9, 16, 43, 29, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 437576109, 'comment_body': ""Nothing is stopping you from proceeding. I'm asking you to answer my question. Should we use Poly? Why or why not?"", 'comment_created': datetime.datetime(2020, 6, 9, 16, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 437586330, 'comment_body': ""If I see https://github.com/sympy/sympy/pull/19390#issuecomment-635455769, I don't think that it is possible to have exponential with `Poly`, so it makes the design not a good option for the future.\r\n\r\nAnd I think that we can always convert to Poly objects internally when it is needed for some computation, like it is often done for some sympy modules. \r\nStoring the poly objects in signature may only provide some efficient computation, but I may have some doubts about whether `Poly` is always more efficient than `Expr`, because expr can be in any forms like `(x - a)*(x - b)*(x - c)` such that the root computation can be trivial."", 'comment_created': datetime.datetime(2020, 6, 9, 17, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 437607253, 'comment_body': ""Bound symbols is a standard method for Basic subclasses although it is only implemented on those class that need it. The Basic methods `as_dummy` and `dummy_eq` depend on `bound_symbols` and `_eval_subs` to work. The `as_dummy` method returns an object replacing all bound symbols with canonical symbols and `dummy_eq` uses this to compare to objects modulo bound symbols e.g.:\r\n```julia\r\nIn [21]: Integral(x, (x, y, z)).free_symbols                                                                                                   \r\nOut[21]: {y, z}\r\n\r\nIn [22]: Integral(x, (x, y, z)).bound_symbols                                                                                                  \r\nOut[22]: [x]\r\n\r\nIn [23]: Integral(x, (x, y, z)).as_dummy()                                                                                                     \r\nOut[23]: \r\nz         \r\n⌠         \r\n⎮ _0 d(_0)\r\n⌡         \r\ny         \r\n\r\nIn [24]: Integral(x, (x, y, z)).dummy_eq(Integral(t, (t, y, z)))                                                                               \r\nOut[24]: True\r\n\r\nIn [25]: Integral(x, (x, y, z)) == Integral(t, (t, y, z))                                                                                      \r\nOut[25]: False\r\n```\r\nIt is not possible to infer the bound symbols from the free symbols because a symbol can be both free and bound. It is expected that `_eval_subs` can take care of ensuring that bound symbols are not substituted in a call to `subs`. That is how `as_dummy` works:\r\n```julia\r\nIn [27]: Integral(x, (x, 0, x)).free_symbols                                                                                                   \r\nOut[27]: {x}\r\n\r\nIn [28]: Integral(x, (x, 0, x)).bound_symbols                                                                                                  \r\nOut[28]: [x]\r\n\r\nIn [29]: Integral(x, (x, 0, x)).subs(x, y).xreplace({x:Symbol('_0')}).subs(y, x)                                                               \r\nOut[29]: \r\nx         \r\n⌠         \r\n⎮ _0 d(_0)\r\n⌡         \r\n0         \r\n\r\nIn [30]: Integral(x, (x, 0, x)).as_dummy()                                                                                                     \r\nOut[30]: \r\nx         \r\n⌠         \r\n⎮ _0 d(_0)\r\n⌡         \r\n0 \r\n```"", 'comment_created': datetime.datetime(2020, 6, 9, 17, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 437933186, 'comment_body': 'I agree with @sylee957 here.\r\nI think we should not use Poly internally by default. `Poly` objects also convert themselves into `Expr`. e.g.:\r\n```python\r\n>>> a = Poly(x**4 - 2*x**2 + 1)\r\n>>> factor(a)\r\n(x - 1)**2*(x + 1)**2\r\n```\r\nAnd we can always convert them to Poly objects for some specific computations whenever needed.', 'comment_created': datetime.datetime(2020, 6, 10, 7, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 438064954, 'comment_body': ""I'm good with that. Thanks @sylee957 for the insight."", 'comment_created': datetime.datetime(2020, 6, 10, 11, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438850208, 'comment_body': '```suggestion\r\n    A class for representing continuous transfer functions. This class is used to represent\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 14, 59, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438851011, 'comment_body': '```suggestion\r\n    denominator polynomials in ``var`` of the transfer function respectively, and the third argument is\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 15, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438851344, 'comment_body': 'Remove last sentence.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438851902, 'comment_body': '```suggestion\r\n    num : Expr\r\n```\r\nThe thing after the colon is the acceptable types.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438852261, 'comment_body': 'You need to use the word ""polynomial"" so that users know that only polynomials in `var` can be used.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438852495, 'comment_body': '```suggestion\r\n    var : Symbol\r\n```', 'comment_created': datetime.datetime(2020, 6, 11, 15, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438852708, 'comment_body': 'Needs more explanation. What is the incorrect type?', 'comment_created': datetime.datetime(2020, 6, 11, 15, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438852933, 'comment_body': 'All variables need double backticks for literal rendering.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438853601, 'comment_body': 'Show examples using different operations: +, /, -, *, **, etc. and explain what they do.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438854280, 'comment_body': 'Don\'t capitalize ""transfer function"" anywhere. It is not a proper noun.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438854625, 'comment_body': 'Or ""numerator"" or ""denominator"".', 'comment_created': datetime.datetime(2020, 6, 11, 15, 5, 49, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438855106, 'comment_body': ""I don't know what this means? It still isn't clear why we need this method."", 'comment_created': datetime.datetime(2020, 6, 11, 15, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438855293, 'comment_body': 'Why is p not in this list?', 'comment_created': datetime.datetime(2020, 6, 11, 15, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438855720, 'comment_body': 'Use `self.num` and `self.den`', 'comment_created': datetime.datetime(2020, 6, 11, 15, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438856448, 'comment_body': 'This seems to prevent substituting the `var`. Why?', 'comment_created': datetime.datetime(2020, 6, 11, 15, 8, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438856806, 'comment_body': 'Can you explain why this is the simplification method we should be always using?', 'comment_created': datetime.datetime(2020, 6, 11, 15, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438860433, 'comment_body': ""Why are you not using any hints to expand here? For example, should we be using the 'multinomial` hint? If you know these are always polynomials in `var` then it seems like we should be doing a more specific expansion only with respect to `var`. You don't want other things to expand. If the coefficients to `var` are complex expressions, you wouldn't want to expand those."", 'comment_created': datetime.datetime(2020, 6, 11, 15, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438861046, 'comment_body': ""Dunder methods do not need docstrings in general, as users won't see them. Move these examples into the class level docstring and remove this docstring."", 'comment_created': datetime.datetime(2020, 6, 11, 15, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438861285, 'comment_body': 'Move to class level docstring.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438861528, 'comment_body': 'Move to class level docstring.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438861747, 'comment_body': 'It should be \r\n```\r\nname : type\r\n    description\r\n```\r\nfor all parameters, and for Returns', 'comment_created': datetime.datetime(2020, 6, 11, 15, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438861759, 'comment_body': 'Move to class level docstring.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438861973, 'comment_body': 'Move to class level docstring.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438862189, 'comment_body': 'Move to class level docstring.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438862616, 'comment_body': ""Don't capitalize non-proper nouns."", 'comment_created': datetime.datetime(2020, 6, 11, 15, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438863219, 'comment_body': 'I think you should add more references that are easily accessible than a book. ', 'comment_created': datetime.datetime(2020, 6, 11, 15, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438864224, 'comment_body': 'This is a new module and people will not be familiar with using it. You need to have some elaborate examples to show how it can be used.', 'comment_created': datetime.datetime(2020, 6, 11, 15, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438865397, 'comment_body': 'It should be\r\n`Returns the variable used to anchor the equations/polynomials of the transfer function`\r\nor something like this', 'comment_created': datetime.datetime(2020, 6, 11, 15, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438867091, 'comment_body': ""Also, it doesn't seem too useful for the end-user. Why would the user care about dummy variables while using transfer functions? \r\n\r\nIt should explain what the users are supposed to use this method for."", 'comment_created': datetime.datetime(2020, 6, 11, 15, 23, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438870262, 'comment_body': ""I think it's only for returning the anchor variables as we're only considering them to be bound"", 'comment_created': datetime.datetime(2020, 6, 11, 15, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438871726, 'comment_body': ""That reminds me if we're having a `bound_symbols` method for returning bound symbols, should we also have a `free_symbols` method returning the rest of the symbols?"", 'comment_created': datetime.datetime(2020, 6, 11, 15, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438876718, 'comment_body': ""You started the docstring from a newline here while it was on the same line in the previous instances. Although both of them can be used, and I don't think any one of them is preferred. But, whichever one you decide to use should be used consistently. \r\nDon't mix both the styles through the docstrings. Stick to one."", 'comment_created': datetime.datetime(2020, 6, 11, 15, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438884658, 'comment_body': ""Also, since we don't have any separate methods for series and parallel connections and +,-,*, etc.  will be used for that, you should also explain which configurations are represented by different operations.\r\n"", 'comment_created': datetime.datetime(2020, 6, 11, 15, 43, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438888856, 'comment_body': 'I think Oscar discussed it here: https://github.com/sympy/sympy/pull/19390#issuecomment-640556483\r\nThat we should not substitute bound symbols', 'comment_created': datetime.datetime(2020, 6, 11, 15, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 438953444, 'comment_body': 'Here is a book that is freely veiwable: http://www.cds.caltech.edu/~murray/amwiki/index.php?title=First_Edition', 'comment_created': datetime.datetime(2020, 6, 11, 17, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438953953, 'comment_body': 'Yes!', 'comment_created': datetime.datetime(2020, 6, 11, 17, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438954699, 'comment_body': ""I see that Oscar says that subs shouldn't work on some symbols. If that is the way things are done in sympy, that's fine, but I'm still not sure I understand why subs() and xreplace() should work differently in this case. In fact I'm not sure I know the precise difference in subs and xreplace."", 'comment_created': datetime.datetime(2020, 6, 11, 17, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438976064, 'comment_body': ""The main difference is that `xreplace` is a pure structural replacement whereas `subs` is supposed to represent a mathematically valid substitution. That means that subs will give an unevaluated `Subs` where necessary if a pure replacement wouldn't be mathematically valid:\r\n```julia\r\nIn [30]: expr = Derivative((z*f(x)), x)                                                                                           \r\n\r\nIn [31]: rep = {x:z}                                                                                                              \r\n\r\nIn [32]: expr.subs(rep).doit() == expr.doit().subs(rep)                                                                           \r\nOut[32]: True\r\n\r\nIn [33]: expr.xreplace(rep).doit() == expr.doit().xreplace(rep)                                                                   \r\nOut[33]: False\r\n```"", 'comment_created': datetime.datetime(2020, 6, 11, 18, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 438981399, 'comment_body': ""Thanks! Here is what the commands produce if interested:\r\n\r\n```\r\nmoorepants@agni:~$ isympy\r\nIPython console for SymPy 1.5.1 (Python 3.7.6-64-bit) (ground types: gmpy)\r\n\r\nThese commands were executed:\r\n>>> from __future__ import division\r\n>>> from sympy import *\r\n>>> x, y, z, t = symbols('x y z t')\r\n>>> k, m, n = symbols('k m n', integer=True)\r\n>>> f, g, h = symbols('f g h', cls=Function)\r\n>>> init_printing()\r\n\r\nDocumentation can be found at https://docs.sympy.org/1.5.1/\r\n\r\n\r\nIn [1]: QApplication: invalid style override passed, ignoring it.                                                                           \r\n    Available styles: Windows, Fusion\r\nIn [1]: expr = Derivative((z*f(x)), x)                                                                                                      \r\n\r\nIn [2]: rep = {x:z}                                                                                                                         \r\n\r\nIn [3]: expr.subs(rep)                                                                                                                      \r\nOut[3]: \r\n⎛∂         ⎞│   \r\n⎜──(z⋅f(x))⎟│   \r\n⎝∂x        ⎠│x=z\r\n\r\nIn [4]: expr.subs(rep).doit()                                                                                                               \r\nOut[4]: \r\n  d       \r\nz⋅──(f(z))\r\n  dz      \r\n\r\nIn [5]: expr.xreplace(rep)                                                                                                                  \r\nOut[5]: \r\nd         \r\n──(z⋅f(z))\r\ndz        \r\n\r\nIn [6]: expr.xreplace(rep).doit()                                                                                                           \r\nOut[6]: \r\n  d              \r\nz⋅──(f(z)) + f(z)\r\n  dz             \r\n```"", 'comment_created': datetime.datetime(2020, 6, 11, 18, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 438981638, 'comment_body': 'We need to think about what subs and xreplace should do for transfer functions and if that should be different.', 'comment_created': datetime.datetime(2020, 6, 11, 18, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439022373, 'comment_body': ""> We need to think about what subs and xreplace should do for transfer functions and if that should be different.\r\n\r\nI think that is pretty simple:\r\n`xreplace` performs structural replacement of one Symbol to another. We can't replace a Symbol to, let's say, a constant. \r\n``` python\r\n>>> tf = TransferFunction(s**2 + p*s + p, p**3 + 8*p - s, s)\r\n>>> tf.xreplace({s: f})\r\nTransferFunction(f**2 + f*p + p, -f + p**3 + 8*p, f)\r\n>>> _.bound_symbols\r\n[f]\r\n>>> tf.xreplace({s: 5})\r\n*** TypeError: Variable input must be a Symbol.\r\n```\r\nWhile on the other hand, `subs` can substitute a Symbol in a transfer function to a number or some other symbol.\r\n``` python\r\n>>> tf = TransferFunction(s**2 + p*s + p, p**3 + 8*p - s, s)\r\n>>> tf.subs(p, 3)\r\nTransferFunction(s**2 + 3*s + 3, 51 - s, s)\r\n>>> tf.subs(s, 3)\r\nTransferFunction(p*s + p + s**2, p**3 + 8*p - s, s)\r\n>>> tf.subs(p, r)\r\nTransferFunction(r*s + r + s**2, r**3 + 8*r - s, s)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 11, 19, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 439030809, 'comment_body': ""I have defined this method so that we are able to use sympy's own `simplify` function to cancel poles and zeros in a transfer function (which was not possible earlier). \r\n``` python\r\n>>> G1 = TransferFunction((p + 3)*(p - 1), (p - 1)*(p + 5), p)\r\n>>> from sympy import simplify\r\n>>> simplify(G1)\r\nTransferFunction(p + 3, p + 5, p)\r\n>>> _ == G1.simplify()\r\nTrue\r\n``` "", 'comment_created': datetime.datetime(2020, 6, 11, 19, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 439033462, 'comment_body': "">  xreplace performs structural replacement of one Symbol to another. We can't replace a Symbol to, let's say, a constant.\r\n\r\nEvaluating a transfer function for specific values of `s` is something that is needed. For example, evaluating a transfer function for `s=0` gives you the steady state gain (zero frequency gain). Taking the limit of the transfer function wrt to `inf` gives the high frequency gain. Evaluating for any purely imaginary number gives you the frequency response."", 'comment_created': datetime.datetime(2020, 6, 11, 19, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439038713, 'comment_body': 'There can be other methods for those things rather than subs. I think the way to think about it with subs is that you are substituting something into an expression but it should still be the same kind of object i.e. if `f` is a matrix than `f.subs(x, y)` should also be a matrix. Here we have a transfer function `tf` and `tf.subs(x, y)` should always be a transfer function.\r\n\r\nThe normal way to evaluate a function is like `tf(0)` but to me it makes more sense just to provide an `as_expr()` method that gives the expression so that you can do `tf.as_expr().limit(tf.var, oo)` or `tf.as_expr().subs(tf.var, 0)`.', 'comment_created': datetime.datetime(2020, 6, 11, 20, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 439050681, 'comment_body': 'I agree, @oscarbenjamin.\r\nIn the future (when the ""other"" functionality will be added), I can either define a `__call__` method or `as_expr()` method.', 'comment_created': datetime.datetime(2020, 6, 11, 20, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 439062658, 'comment_body': 'Is `__div__` required? Since the support for Python 2 has been removed, I think only  `__truediv__` should be defined.', 'comment_created': datetime.datetime(2020, 6, 11, 20, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 439067310, 'comment_body': 'Thanks, I just read [this](https://www.python.org/dev/peps/pep-0238/).', 'comment_created': datetime.datetime(2020, 6, 11, 20, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 439082421, 'comment_body': 'okay, I will define another method to return free symbols.', 'comment_created': datetime.datetime(2020, 6, 11, 21, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 439470769, 'comment_body': ""I was thinking about this a bit and realize that we aren't following SymPy design patterns for operators. For example, don't we want multiplication to work like:\r\n\r\n```\r\n>>> H = TransferFunction(num, den, s)\r\n>>> G = Function('G')(s)\r\n>>> type(H*G)\r\nMul\r\n>>> (H*G).args\r\n(H, G)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 12, 14, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439473194, 'comment_body': 'Also:\r\n\r\n```\r\n>>> (H*G).doit().args()\r\n(G*H.num, H.den, s)\r\n>>> type(H*G.doit())\r\nTransferFunction\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 15, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439474475, 'comment_body': 'What about the equality of two transfer functions? I think you are missing a test for that.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439475742, 'comment_body': 'You are missing tests that show what happens if you provide numerators or denominators that are not polynomials of `var`. For example, what if I pass in `TransferFunction(exp(s)/log(s)*s**pi, s, s)`.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439476048, 'comment_body': 'Also, what if the exponents are floats instead of integers in the polynomials?', 'comment_created': datetime.datetime(2020, 6, 12, 15, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439476878, 'comment_body': 'You need some expand tests with all symbolic values (where coefficients and exponents can be symbols).', 'comment_created': datetime.datetime(2020, 6, 12, 15, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439477441, 'comment_body': ""You need to check subs() and evalf() independently also.\r\n\r\nIt isn't clear you are testing for the bound_symbols effect either."", 'comment_created': datetime.datetime(2020, 6, 12, 15, 8, 28, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439478830, 'comment_body': 'What happens if I do:\r\n\r\n```\r\n tf4**(x**2 + x - 1)\r\n```\r\n\r\nwhere  `x != tf4.var`? It should be valid.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439479620, 'comment_body': ""It isn't clear if you have tests that exercise the difference between subs() and xreplace() for this class."", 'comment_created': datetime.datetime(2020, 6, 12, 15, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439480885, 'comment_body': '@sylee957 and @oscarbenjamin Can one or more of you comment on this?', 'comment_created': datetime.datetime(2020, 6, 12, 15, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439482690, 'comment_body': ""I want to reiterate that numbers are used instead of Symbol() for the vast majority of these tests. The tests need to be written primarily as fully symbolic tests. If the symbolic tests work, then it is likely that an identical set of tests that use all numbers except for `TransferFunction.var` will work. We are missing checks for a lot of bugs. I don't see a single test that has a symbolic polynomial coefficient, for example."", 'comment_created': datetime.datetime(2020, 6, 12, 15, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439485536, 'comment_body': ""If the symbolic transfer function algebra need to be defined, I think that a general superclass like `SystemModel` can be added and we can define `SystemModelSeriesConnect`, `SystemModelParallelConnect`, `SystemModelFeedbackConnect` which can also extend to interconnection with state space models or a matrix of transfer functions.\r\n\r\nI'd reference how it's done in mathematica\r\nhttps://reference.wolfram.com/language/ref/SystemsModelSeriesConnect.html\r\nhttps://reference.wolfram.com/language/ref/SystemsModelFeedbackConnect.html"", 'comment_created': datetime.datetime(2020, 6, 12, 15, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 439495465, 'comment_body': 'Why would we want a ""SeriesConnect"" when `H*G` can work (for SISO TFs)? That\'s how we do it on paper and these objects are simply expressions. For descriptions of MIMO systems (collections of TFs or a state space description) you\'ll need these types of methods because you have to pair inputs and outputs, but I\'d like SISO transfer functions to behave like mathematical expressions.', 'comment_created': datetime.datetime(2020, 6, 12, 15, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439498383, 'comment_body': ""One other note from my perspective is that the way mathematica has designed these transfer function tools isn't really appealing and it doesn't really map to good design patterns in sympy. We should use it for inspiration, but I'm not sure we should copy it."", 'comment_created': datetime.datetime(2020, 6, 12, 15, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439501946, 'comment_body': ""If it becomes `Mul`, it should inherently become the type of `Expr`,\r\n\r\nBut I wouldn't find much stuff from `Expr` useful for transfer functions. \r\nThe reason we would use `Expr` is for computing derivative, expanding series, or apply functions like `sin, cos`.\r\nBut would they make sense for transfer functions?"", 'comment_created': datetime.datetime(2020, 6, 12, 15, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 439506439, 'comment_body': ""The derivative of the magnitude of a transfer function as a function of the complex value is an important value in control design, as one example.\r\n\r\nBut I just want to be able to do block diagram algebra with transfer function objects like we do on paper. For example, you should be able to do this:\r\n![zBMx7](https://user-images.githubusercontent.com/276007/84522243-20dce300-ac8b-11ea-928a-72a3d3d4cd2c.png)\r\n\r\nThere are certainly things that you can do with a general expression in SymPy that we shouldn't be able to do on a transfer function, but it seems that the core functionality for algebra is needed.\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 12, 16, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439507604, 'comment_body': 'Here is another nice example:\r\n\r\nhttps://www.youtube.com/watch?v=xTlobODwG5A\r\n\r\nWe should be able to type sympy code using transfer objects that follows that video almost line by line and end up with a transfer function object that we can then utlize the many special methods we can attach to it, like `.bode()`, `.freq_response()`, `.zero_frequency_gain()`, etc. etc.', 'comment_created': datetime.datetime(2020, 6, 12, 16, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439526229, 'comment_body': ""@moorepants it's not clear to me what you are imagining here.\r\n\r\nIs it something like:\r\n```\r\n>>> tf1 = TransferFunction(...)\r\n>>> tf2 = TransferFunction(...)\r\n>>> tf1 * tf2\r\nTransferFunction(...)\r\n```\r\nOr are you thinking of something like\r\n```\r\n>>> tf1 * tf2\r\nSeries(TransferFunction(...), TransferFunction(...))\r\n```\r\nwhere `Series` is another class that shares a similar interface as the TransferFunction?\r\n\r\nIt looks like Mathematica does the former which is easier to implement but doesn't give the sense of seeing how the transfer function has been algebraically composed in the way that you have described."", 'comment_created': datetime.datetime(2020, 6, 12, 16, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 439570137, 'comment_body': ""The second example you show what I'm asking about. I think that a transfer function object should act like a sympy expression but that expression should be limited to the definition and properties of a transfer function and that object should have unique methods associated with a transfer function. Here is a session that uses your Series object idea to do the block diagram algebra for a simple negative feedback loop with proportional gain.\r\n\r\n```python\r\n>>> plant = TransferFunction(1, s**2 + 2*zeta*wn*s + wn**2, s)\r\n>>> plant.root_locus(subs={zeta:0.1, wn: 1})  # plots a root locus for simple proportional feedback\r\n>>> controller = TransferFunction(k, 1, s)\r\n>>> input = Function('X_d')(s)\r\n>>> output = Function('X')(s)\r\n>>> plant*controller\r\nSeries(TransferFunction(k, 1, s), TransferFunction(1, s**2 + 2*zeta*wn*s + wn**2, s))\r\n>>> closed_loop_eq = Eq((input - output)*controller*plant, output))\r\n>>> closed_loop_eq\r\nEq(Series(Parallel(X_d, -X), TransferFunction(k, 1, s), TransferFunction(1, s**2 + 2*zeta*wn*s + wn**2, s)), X)\r\n>>> closed_loop = solve(closed_loop_eq, output/input)\r\n>>> feedback(plant, controller)  # this should produce the same thing in closed_loop or more simply a single transfer function\r\n>>> closed_loop.den  # gives the closed loop characteristic equation as a simple expression\r\n1 + k/(s**2 + 2*zeta*wn*s + wn**2)\r\n>>> closed_loop.var\r\ns\r\n>>> closed_loop\r\nSeries(controller, plant, 1/(Parallel(1, TransferFunction(k, 1, s), TransferFunction(1, s**2 + 2*zeta*wn*s + wn**2, s)))\r\n>>> closed_loop.doit()  # reduces the Series & Parallel objects to single combined transfer function\r\nTransferFunction(...)\r\n>>> closed_loop.bode(subs={k: 5, zeta: 0.2, wn: 1})  # creates a bode plot\r\n>>> closed_loop.poles()  # calculates the poles (if it can)\r\n>>> closed_loop.time_domain()  # returns the ODE this TF represents\r\n>>> closed_loop.step_input_response()  # returns the TF respresent a step response\r\n>>> closed_loop.step_input_response().to_time_domain()  # returns the solution to the ODE in the time domain if it can\r\n>>> closed_loop.step_response_plot(subs={})  # plots a step response for specific numerical values\r\n>>> closed_loop.zero_frequency_gains()  # takes limit as s -> 0\r\nTransferFunction(...)\r\n```\r\n\r\nHopefully that gives an idea. One issue in the PR is that the TranferFunction object is being designed with little thought of how it will actually be used. I really think that a high level set of tests that are derived from textbook transfer function problems will elucidate how someone would actually want to use this class. What I show above, is what seems very useful to me as a control engineer and a person that teaches controls.\r\n\r\nWe want to be able to define specific transfer functions*, do some block diagram algebra to obtain new transfer functions, and then once you have the transfer functions you want, easily access all the fun and useful control engineering tools.\r\n\r\n*although a TransferFunctionExpr object like MatrixExpr may also be useful, maybe in place of Function('G')(s)\r\n"", 'comment_created': datetime.datetime(2020, 6, 12, 18, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439576188, 'comment_body': ""> I think you are missing a test for that\r\n\r\nI don't understand what you mean by that? There are equality tests everywhere. But if you mean complex operations like this:\r\n```\r\ntf7_ = TransferFunction(a0*s + a1*s**2 + a2*s**3, b0*p - b1*s, s)\r\nassert -(-tf7_) == tf7_ == -(-(-(-tf7_)))\r\n```\r\nThen I'm adding those now."", 'comment_created': datetime.datetime(2020, 6, 12, 18, 21, 11, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 439576692, 'comment_body': 'I mean that you should create two transfer functions with the same arguments and show that they are equal.', 'comment_created': datetime.datetime(2020, 6, 12, 18, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439588529, 'comment_body': ""> It isn't clear you are testing for the bound_symbols effect either.\r\n\r\nI removed that method since it was not useful for the end user, as discussed [here](https://github.com/sympy/sympy/pull/19390#discussion_r438867091)."", 'comment_created': datetime.datetime(2020, 6, 12, 18, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 439608271, 'comment_body': 'I have meant the same idea for SystemModelSeriesConnect and Series as you have described.\r\n\r\nBut I’m not sure that the youtube example is easy to implement even with symbolic interconnection operators.\r\n\r\nBecause it can have some limitations like you need to connect blocks inside the smallest feedback loop before moving to the next feedback loop.', 'comment_created': datetime.datetime(2020, 6, 12, 19, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 439616979, 'comment_body': 'The `__pow__` method that I have implemented only accepts integer exponents. \r\n>  `tf4**(x**2 + x - 1)`\r\n\r\nWhy not `x == tf4.var`? Looks strange to support though.', 'comment_created': datetime.datetime(2020, 6, 12, 19, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 439646491, 'comment_body': ""> I have meant the same idea for SystemModelSeriesConnect and Series as you have described.\r\n\r\nOk, good to know. I don't really understand the mathematica code enough yet. That's my fault."", 'comment_created': datetime.datetime(2020, 6, 12, 21, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439646697, 'comment_body': '> Because it can have some limitations like you need to connect blocks inside the smallest feedback loop before moving to the next feedback loop.\r\n\r\nThis is a very common need in classical siso controls.', 'comment_created': datetime.datetime(2020, 6, 12, 21, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439712669, 'comment_body': ""Okay, I agree on to have symbolic interconnection operators.\r\nIt's more easier to check arithmetic is done right by looking at the symbolic operators. Although I'm still afraid that the printed results can look too huge if we can't do anything about that, as you have hidden them by ellipsis.\r\n\r\nBut we may need to convey these ideas clearly to @namannimmo10 about in implementation detail."", 'comment_created': datetime.datetime(2020, 6, 13, 5, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 439714238, 'comment_body': ""> Although I'm still afraid that the printed results can look too huge if we can't do anything about that, as you have hidden them by ellipsis.\r\n\r\nCan't this be the same as normal expressions? srepr will show the long form, but repr will display a mathematical looking expression."", 'comment_created': datetime.datetime(2020, 6, 13, 6, 27, 44, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439741251, 'comment_body': ""Would it make more sense to have the TransferFunction be an attribute of some kind of more symbol-like Block object?\r\n\r\nThe idea would be to create a Block for each block in the block diagram and give the block a name and associated transfer function. The block itself displays as its name but you can ask it for its transfer function:\r\n```python\r\n>>> plant = Block('plant', TransferFunction(...))\r\n>>> plant\r\nplant\r\n>>> plant.transfer_function\r\nTransferFunction(...)\r\n>>> controller = Block('controller', TransferFunction(...))\r\n>>> system = plant * controller\r\n>>> system\r\nSeries(plant, controller)\r\n>>> system.transfer_function\r\nTransferFunction(...)\r\n```"", 'comment_created': datetime.datetime(2020, 6, 13, 13, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 439745599, 'comment_body': ""I'm not sure I see what the benefit is? Is this to prevent doing block diagram algebra directly on the transfer function?"", 'comment_created': datetime.datetime(2020, 6, 13, 15, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439751177, 'comment_body': ""It means that you can see the relationships from the system from a high-level when building it up. The transfer functions might be really complicated but the blocks as you build up show the way that the system is connected rather than the transfer function itself.\r\n\r\nIt also means that you can give identity to components that have different roles in the system but the same transfer function e.g.:\r\n```python\r\n>>> plant1 = Block('plant1', tf)\r\n>>> plant2 = Block('plant2', tf)\r\n>>> plant3 = Block('plant3', tf)\r\n>>> system = (plant1 + plant2) * plant3\r\n>>> system\r\nSeries(Parallel(plant1, plant2), plant3)\r\n```\r\nNow you can do\r\n```python\r\n>>> alternate_plant = Block('alternate_plant', tf_other)\r\n>>> system.subs(plant2, alternate_plant)\r\nSeries(Parallel(plant1, alternate_plant), plant3)\r\n```\r\nIt's possible to substitute for plant2 alone because it is distinct from plant1 and plant3 even though all have the same transfer function.\r\n\r\nGiving identity to the different components makes it possible to distinguish them when e.g. plotting a time series. If you wanted to have a function for showing the block diagram then you would be able to label the different blocks.\r\n\r\nIt's not really clear to me where this is all supposed to end up though. I'm imagining something like a non-graphical version of simulink but maybe that's not it. Your mockup above makes it unclear to me why there is a transfer function object at all rather than just working with expressions that represent it. The methods like `root_locus` etc could just be functions that take an expression as argument e.g.:\r\n```python\r\n>>> plant = 1 / (s**2 + 2*zeta*wn*s + wn**2)\r\n>>> root_locus(plant.subs({zeta:0.1, wn: 1}), s)  # plots a root locus for simple proportional feedback\r\n```"", 'comment_created': datetime.datetime(2020, 6, 13, 16, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 439752015, 'comment_body': 'FWIW, this type of input/output structure is present in the [python-control](https://github.com/python-control/python-control) `InputOutputSystem` class.', 'comment_created': datetime.datetime(2020, 6, 13, 16, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'murrayrm', 'type': 'User'}, {'comment_id': 439754394, 'comment_body': '> Your mockup above makes it unclear to me why there is a transfer function object at all rather than just working with expressions that represent it.\r\n\r\nI think we have to have a transfer function object in this package, otherwise we would not be able to further extend this package in the future. A lot of other functionality would require working with that object, not just working with normal sympy expressions. ', 'comment_created': datetime.datetime(2020, 6, 13, 17, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 439762834, 'comment_body': ""> Your mockup above makes it unclear to me why there is a transfer function object at all rather than just working with expressions that represent it. The methods like root_locus etc could just be functions that take an expression as argument e.g.:\r\n\r\nThis is always true for any objects, you can always write a set of functions that provide equivalent functionality. There are several reasons to create an object: 1) a transfer function is a a mathematical thing just like vectors, matrices, expressions, and sympy is designed around mathematical objects it seems natural to include transfer functions in this category, 2) there are data that all functions that operate on transfer functions share in common that would be useful to have as attributes instead of function arguments, 3) it is pythonic to utilize objects, 3) most other libraries think it is a good idea to use an object to represent a transfer function, 4) transfer functions seem to naturally fit into the expression tree structure that sympy is based on, it's really just a special type of function, etc."", 'comment_created': datetime.datetime(2020, 6, 13, 19, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439763228, 'comment_body': ""> It's possible to substitute for plant2 alone because it is distinct from plant1 and plant3 even though all have the same transfer function.\r\n\r\nThis is useful, but seems like an extra layer of complexity for something that is already available. For example:\r\n\r\n```python\r\n>>> plant1 = Function('G')(s)\r\n>>> plant2 = Function('H')(s)\r\n>>> plant3 = Function('J')(s)\r\n# or\r\n>>> plant1 = TransferFunctionExpr('G', s)\r\n>>> plant2 = TransferFunctionExpr('H', s)\r\n>>> plant3 = TransferFunctionExpr('J', s)\r\n>>> system = (plant1 + plant2) * plant3\r\n>>> system\r\nSeries(Parallel(plant1, plant2), plant3)\r\n>>> alternate_plant = Function('K')(s)\r\n>>> system.subs(plant2, alternate_plant)\r\nSeries(Parallel(plant1, alternate_plant), plant3)\r\n>>> system.subs(plant1, TransferFunction(1, s**2 + 2+ 1, s))\r\n```"", 'comment_created': datetime.datetime(2020, 6, 13, 19, 30, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439763397, 'comment_body': ""I guess I also don't see why block diagram algebra is unique from normal algebra, other than maybe being more limited. We can create a `Series()` class but why isn't `Mul()` sufficient already? Same for `Parallel()` and `Add()`."", 'comment_created': datetime.datetime(2020, 6, 13, 19, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439766930, 'comment_body': ""The reason that block diagram algebra is unique is that there are many different types of block diagrams (transfer function, state space, nonlinear state space, ...) and you can't easily expect the result of addition or multiplication when different types of block diagrams are connected. \r\n\r\nFor example, the series or parallel connection state space blocks are clearly different than scalar algebra or matrix algebra and I don't think that `Add` or `Mul` are going to be useful for them than having a formal addition or multiplication objects. And I already experience that `Add` and `Mul` are terrible to use for objects that are not from `Expr` or `Function` because it implicitly expects many private methods from it. "", 'comment_created': datetime.datetime(2020, 6, 13, 20, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 439767145, 'comment_body': ""> The reason that block diagram algebra is unique is that there are many different types of block diagrams (transfer function, state space, nonlinear state space, ...) and you can't easily expect the result of addition or multiplication when different types of block diagrams are connected.\r\n\r\nA SISO transfer function doesn't need to connect with those things (at least now). The pupose of this PR is to get a fully functional SISO transfer function that would let you solve a large swath of problems in classical controls. We can introduce new things to connect SISO to MIMO systems later. I completely understand why Mul, Add, Pow won't work for a broader set of objects, but this is strictly about SISO transfer functions."", 'comment_created': datetime.datetime(2020, 6, 13, 20, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439767449, 'comment_body': 'If x is a symbol representing an integer, then it is a valid symbolic expression.', 'comment_created': datetime.datetime(2020, 6, 13, 20, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439768063, 'comment_body': ""> but this is strictly about SISO transfer functions.\r\n\r\nIf you want to begin with small like SISO transfer function, why would you not be satisfied with in-place addition or multiplication as done now.\r\n\r\nAnd I also think that finding the actual transfer function from the problems like\r\nhttps://github.com/sympy/sympy/pull/19390#discussion_r439506439 \r\ncan be done with what sympy already had, using `solve` with some algebraic equations.\r\n\r\nSo I'd also consider `TransferFunction` to be sufficient as a final wrapper and can let the user solve the system equation elsewhere, and it doesn't really have to solve anything on its own right now."", 'comment_created': datetime.datetime(2020, 6, 13, 20, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 439768480, 'comment_body': 'Note that if we have a SISO transfer function that works fine using sympy expression functionality then we get this by default:\r\n\r\n```\r\n>>> tf1 = TransferFunction()\r\n>>> tf2 = TransferFunction()\r\n>>> tf3 = TransferFunction()\r\n>>> tf4 = TransferFunction()\r\n>>> # 2 inputs, 3 outputs\r\n>>> mimo_plant = Matrix([[tf1, tf2, tf3], [tf4, tf5, tf6]])  # or we may want a custom TransferFunctionMatrix()\r\n>>> closed_loop_inputs = Matrix([Xd, Yd, Zd])\r\n>>> closed_loop_outputs = Matrix([X, Y, Z])\r\n>>> controller = Matrix([[k1 , k2], [k3, k4], [k5, k6]])\r\n>>> sysetm_eq = (closed_loop_inputs - closed_loop_outputs)*controller*mimo_plant - closed_loop_outputs\r\n```\r\n\r\nAs long as the user ensures the dimensional is correct, this mimo black diagram algebra should work too.', 'comment_created': datetime.datetime(2020, 6, 13, 20, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439768647, 'comment_body': ""> We can create a `Series()` class but why isn't `Mul()` sufficient already? Same for `Parallel()` and `Add()`\r\n\r\nIf the TransferFunction can't be an ordinary Expr because it needs additional attributes/methods then I expect the same would apply to using Add/Mul vs Parallel/Series. This is analogous to why we have `MatMul` for matrices because regular `Mul` has no `shape` attribute, doesn't check the consistency of the matrix dimensions etc."", 'comment_created': datetime.datetime(2020, 6, 13, 20, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 439768841, 'comment_body': ""> If you want to begin with small like SISO transfer function, why would you not be satisfied with in-place addition or multiplication as done now.\r\n\r\nI'm potentially willing to go with that, but I think that sets us up for people trying to use transfer function expressions with a whole host of sympy functions that should work, but won't. The example I give is solve() not working.\r\n\r\n> And I also think that finding the actual transfer function from the problems like\r\n#19390 (comment) can be done with what sympy already had, using solve with some algebraic equations.\r\n\r\nSure, we can do everything we need to do with current sympy tools, but the point of this new module is to remove lots of boiler plate and sympy details, providing end users with a higher level abstraction so that working with transfer functions is more like it is with pencil & paper.\r\n\r\n> So I'd also consider TransferFunction to be sufficient as a final wrapper and can let the user solve the system equation elsewhere, and it doesn't really have to solve anything on its own right now.\r\n\r\nI personally want TransferFunction to have lots of smart methods so I don't have to solve things manually. For example, `TransferFunciton.feedback()` should create a new transfer function of a simple closed loop system because it is such a common task. But I should also be able to do that manually if needed."", 'comment_created': datetime.datetime(2020, 6, 13, 21, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439769301, 'comment_body': ""> If the TransferFunction can't be an ordinary Expr because it needs additional attributes/methods then I expect the same would apply to using Add/Mul vs Parallel/Series. This is analogous to why we have MatMul for matrices because regular Mul has no shape attribute, doesn't check the consistency of the matrix dimensions etc.\r\n\r\nYes, if we need Series() and Parallel() to act like transfer functions, then we need these classes. Here is a comparison:\r\n\r\n```\r\n>>> tf1 = TransferFunction(1, s, s)\r\n>>> tf2 = TransferFunction(1, s**2, s)\r\n>>> tf1*tf2\r\nMul(TransferFunction(1, s, s), TransferFunction(1, s**2, s))\r\n>>> to_transfer_function(tf1*tf2)\r\nTransferFunction(1, s**3, s)\r\n>>> to_transfer_function(tf1*tf2).root_locus()\r\n```\r\nIf it is a Mul then we'd need to somehow convert to a TransferFunction object to be able to use all the properties of a transfer function.\r\n\r\nBut if we have:\r\n\r\n```\r\n>>> tf1 = TransferFunction(1, s, s)\r\n>>> tf2 = TransferFunction(1, s**2, s)\r\n>>> tf1*tf2\r\nSeries(TransferFunction(1, s, s), TransferFunction(1, s**2, s))\r\n>>>\r\n>>> (ttf1*tf2).root_locus()\r\n```\r\n\r\nthen that works nicely. So, I see clearly now why we need Series() and Parallel(), which is synonymous with MatMul and MatAdd."", 'comment_created': datetime.datetime(2020, 6, 13, 21, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439769773, 'comment_body': 'Is it possible that a block from the block diagram would be represented in some way that is not a TransferFunction?', 'comment_created': datetime.datetime(2020, 6, 13, 21, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 439770374, 'comment_body': 'Yes, I think that is a broader need that we haven\'t put much thought into yet. If we get SISO transfer functions working nicely, this gives SymPy the power to solve that large set of problems for SISO classical controls. We could certainly add a ""Block"" object down the road that allows a variety of things to be put into a block diagram. I hesitate to do that right now, because it needs a lot of careful thinking about what can go in the blocks.', 'comment_created': datetime.datetime(2020, 6, 13, 21, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439771656, 'comment_body': ""I wonder if it makes sense conceptually to say that you have two transfer functions arranged in series rather than saying that you have two blocks in series each of which is defined in terms of a transfer function. There are equivalences e.g.\r\n```\r\nSeries(block1, block2).transfer_function == block1.transfer_function * block2.transfer_function\r\nParallel(block1, block2).transfer_function == block1.transfer_function + block2.transfer_function\r\n```\r\nbut I would carefully distinguish between the blocks which are in series/parallel and the transfer functions which are added or multiplied. If that's a distinction that will be wanted down the road then I think it's best to make that distinction now even if right now the only elementary block types are those defined in terms of transfer functions.\r\n\r\nTo me it would be natural to use different operators for the blocks like `&` and `|` rather than `*` and `+`. Or perhaps combining in series might most naturally be represented with something like `block1 >> block2`."", 'comment_created': datetime.datetime(2020, 6, 13, 21, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 439773101, 'comment_body': ""> To me it would be natural to use different operators for the blocks like & and | rather than * and +. Or perhaps combining in series might most naturally be represented with something like block1 >> block2.\r\n\r\nThat'll take a lot of convincing for me. I still want to rip out the overloaded `&` and `^` from sympy.physics.mechanics. The `*` and `+` are what is used it textbooks for these operations, as TFs are functions."", 'comment_created': datetime.datetime(2020, 6, 13, 22, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 439774410, 'comment_body': '> The `*` and `+` are what is used it textbooks for these operations, as TFs are functions.\r\n\r\nTransfer functions are functions but the blocks in the block diagram are not even if common cases can be defined using transfer functions. If that distinction is blurred in the early design then it will be difficult to disentangle later.\r\n\r\n(This point is not about the operators although I think it applies to them as well)', 'comment_created': datetime.datetime(2020, 6, 13, 22, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 442355482, 'comment_body': 'These should print as mathematical expressions without ""Series"". Revert to the original tests.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 442355662, 'comment_body': 'Same comment as for `Series` printing.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 442357163, 'comment_body': 'This should return a Parallel object.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 442357457, 'comment_body': 'All of the `+` operators should return `Parallel()` objects.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 442357826, 'comment_body': 'All of the `*` and `\\` operators should return `Series` objects.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 442358329, 'comment_body': '`Series` and `Parallel` should also have the three ""proper"" methods.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 442361325, 'comment_body': 'Do we really want Series to be printed like this?  ', 'comment_created': datetime.datetime(2020, 6, 18, 16, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442361699, 'comment_body': 'Sure. Another method that could be added is `transfer_function`, which gives the resultant transfer function from a Series or Parallel object.\r\n```python\r\n>>> Series(TF1, TF2).doit() == Series(TF1, TF2).transfer_function\r\nTrue\r\n```', 'comment_created': datetime.datetime(2020, 6, 18, 16, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 442363347, 'comment_body': 'I assume `Series(s**2 + P*s, tf3)` and `Series(s**2 + P*s, tf3)` will not be ValueError? ', 'comment_created': datetime.datetime(2020, 6, 18, 16, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442365458, 'comment_body': 'Why are there 2 series instances here?\r\nIf tf1 * tf2 * tf3 is Series(tf1,tf2,tf3), then tf2 * tf3 * x * tf3 should be Series(tf2, tf3, x, tf3)', 'comment_created': datetime.datetime(2020, 6, 18, 16, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442366299, 'comment_body': ""You should also test Series(tf1, tf2, evaluate=True) with the resulting expression as you've done with `doit`"", 'comment_created': datetime.datetime(2020, 6, 18, 16, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442366893, 'comment_body': 'Also, add something for the default behavior when evaluate is not explicitly stated.', 'comment_created': datetime.datetime(2020, 6, 18, 16, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442371206, 'comment_body': ""I'm not sure how this works, but does Expr allows this ambiguous behaviour where either p or s can be the variable or coefficient?"", 'comment_created': datetime.datetime(2020, 6, 18, 16, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442373185, 'comment_body': 'What about `- Parallel(tf1, tf2)` ?', 'comment_created': datetime.datetime(2020, 6, 18, 17, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442376082, 'comment_body': ""Refer to Jason's comment. "", 'comment_created': datetime.datetime(2020, 6, 18, 17, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442379829, 'comment_body': 'I think that doit() is sufficient. There is no need for a redudant method.', 'comment_created': datetime.datetime(2020, 6, 18, 17, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 442380101, 'comment_body': 'Agreed this seems like it should raise an error.', 'comment_created': datetime.datetime(2020, 6, 18, 17, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 442380356, 'comment_body': 'Yes this should mimic how `Mul` does this.', 'comment_created': datetime.datetime(2020, 6, 18, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 442715839, 'comment_body': 'Then, I think other operators `+, -, *, /` will also have to be overloaded, for doing something like:\r\n `>>> Series(tf1, tf2) + Series(tf3, tf4)`', 'comment_created': datetime.datetime(2020, 6, 19, 8, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 442724079, 'comment_body': 'Apart from `evaluate=True` and `.doit()`, I think `.rewrite()` can also be defined to perform a similar functionality.\r\n```\r\n>>> Series(tf1, tf2).rewrite(TransferFunction)\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 9, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 442730019, 'comment_body': '\r\n> Apart from `evaluate=True` and `.doit()`, I think `.rewrite()` can also be defined to perform a similar functionality.\r\n> \r\n\r\n\r\nhttps://github.com/sympy/sympy/pull/19390#discussion_r442379829', 'comment_created': datetime.datetime(2020, 6, 19, 9, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 442754042, 'comment_body': 'In the comment I think you are proposing a new method, however, [.rewrite()](https://docs.sympy.org/latest/tutorial/simplification.html#rewrite) is an already existing functionality of SymPy. It is a `Basic` method, you just need to override it (probably `_eval_rewrite()`). \r\nI think general SymPy functions should be working.\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 19, 10, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 442764630, 'comment_body': 'I was trying to support only transfer functions or Series/Parallel objects in the arguments. So, any expression or number could be wrapped into a transfer function and passed as an argument. \r\n```python\r\nTransferFunction(2, 1, s)\r\nTransferFunction(s**2 + P*s, 1, s)\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 10, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 442840099, 'comment_body': 'OK, I will add this in the next commit.', 'comment_created': datetime.datetime(2020, 6, 19, 13, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 442843435, 'comment_body': '> I was trying to support only transfer functions or Series/Parallel objects in the arguments\r\n\r\nIs this fine?', 'comment_created': datetime.datetime(2020, 6, 19, 13, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 442921928, 'comment_body': ""Yeah, but, `(tf1 * tf2) + (tf3 * tf4)` would be processed as `Series(tf1, tf2) + Series(tf3, tf4)` and  something like `tf1 + (tf2 * tf3)` as `tf1 - Series(tf2, tf3)` which is how we get `Parallel(tf1, Series(tf2, tf3))`. So, wouldn't this be required anyway?"", 'comment_created': datetime.datetime(2020, 6, 19, 15, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442924783, 'comment_body': 'You can begin with `Series(tf1, tf2) + Series(tf3, tf4)` to return `Series(Series(tf1, tf2), Series(tf3, tf4))` and \r\n`-Parallel(tf1, tf2)` to return `Series(TransferFunction(-1, 1, s), Parallel(tf1, tf2))`', 'comment_created': datetime.datetime(2020, 6, 19, 16, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 442925108, 'comment_body': 'So, `Series/Parallel(expr, tf)` will raise ValueError? \r\n\r\nYou should add a test for that too then.', 'comment_created': datetime.datetime(2020, 6, 19, 16, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 442931946, 'comment_body': ""> `-Parallel(tf1, tf2)` to return `Series(TransferFunction(-1, 1, s), Parallel(tf1, tf2))`\r\n\r\nYes, I was thinking of the same approach. Also, `tf1*tf2 - tf3*tf4` would return `Parallel(Series(tf1, tf2), -Series(tf3, tf4))`. Since we don't want anything like `Series(tf, Series(...))`, `-Series(tf3, tf4)` would be left as it is."", 'comment_created': datetime.datetime(2020, 6, 19, 16, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 444295088, 'comment_body': ""How can I make this work based on the way I'm implementing the `Parallel` class? The way it is done in matrices module is that we have a `MatrixExpr` class (see [this](https://github.com/sympy/sympy/blob/c51e328b476402ba16c7e374ac9ddaaa051bc772/sympy/matrices/expressions/matexpr.py#L94))."", 'comment_created': datetime.datetime(2020, 6, 23, 15, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 444402372, 'comment_body': 'Same goes for test cases like: `-tf1 + tf2 + tf3 + tf4*tf5 + ... == Parallel(-tf1, tf2, tf3, Series(tf4, tf5), ...)`\r\nCan anyone comment here, please?', 'comment_created': datetime.datetime(2020, 6, 23, 17, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 444429130, 'comment_body': ""Naman, I'll have a look later today."", 'comment_created': datetime.datetime(2020, 6, 23, 18, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 444526471, 'comment_body': '`__neg__` will have to handle this, probably by returning `Series(-1, tf1)` for `-tf1`. This is how `MatrixExpr` handles such a thing. (The only difference being matrices evaluates the expression).\r\nI think this type of case would come up for subtractions too.\r\n\r\nSo it would look like:\r\n```\r\ntf1 + tf2 + tf3 + tf4*tf5 + ... == Parallel(Series(-1, tf1), tf2, tf3, Series(tf4, tf5), ...)\r\n```\r\nBut I am not sure about this. It might at times over-complicate the equation.\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 23, 21, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 444533433, 'comment_body': ""> `__neg__` will have to handle this, probably by returning `Series(-1, tf1)` for `-tf1`.\r\n\r\nIt was decided to not support integer arguments in `Series`. I think `-tf1*tf2` can be represented as `Series(-tf1, tf2)` & `-tf1 + tf2` can be represented as `Parallel(-tf1, tf2)`, there shouldn't be an issue with that. The problem here is conversion of the transfer function operations like: \r\n\r\n> -tf1 + tf2 + tf3 + tf4*tf5 + ...\r\n\r\ninto `Parallel` objects. "", 'comment_created': datetime.datetime(2020, 6, 23, 22, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 445159538, 'comment_body': ""I don't understand what exactly is the problem that you are facing. Is it with multiple operators?"", 'comment_created': datetime.datetime(2020, 6, 24, 20, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 445166546, 'comment_body': 'Yes!', 'comment_created': datetime.datetime(2020, 6, 24, 20, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 445364531, 'comment_body': 'For that, you should overload operators (`+, -, *, /`) inside the `Series` and `Parallel` classes too.', 'comment_created': datetime.datetime(2020, 6, 25, 7, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ishanaj', 'type': 'User'}, {'comment_id': 446536782, 'comment_body': ""What exactly is this decorator for?\r\n\r\nFrom what I see in its source code, don't we need to define `_op_priority` for TransferFunctions too if we want to use this?"", 'comment_created': datetime.datetime(2020, 6, 27, 15, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 446536924, 'comment_body': 'Does subclassing from TransferFunctionExpr now solve the problems we were having with  `tf1 + tf2 - tf3 + tf4`?', 'comment_created': datetime.datetime(2020, 6, 27, 15, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 446537049, 'comment_body': 'How are these cases being handled now that removed this from TransferFunction?', 'comment_created': datetime.datetime(2020, 6, 27, 15, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 446547441, 'comment_body': ""`-Parallel(tf1, tf2)` can return `Series(TransferFunction(-1, 1, s), Parallel(tf1, tf2))`, what about `-Series(tf1, tf2)`?? It can't be `Series(TransferFunction(-1, 1, s), tf1, tf2)` because `-tf1*tf2` and `-(tf1*tf2)` are different. I think we need two Series instances (previously discussed [here](https://github.com/sympy/sympy/pull/19390#discussion_r442365458)). So it would be `Series(TransferFunction(-1, 1, s), Series(tf1, tf2))`. "", 'comment_created': datetime.datetime(2020, 6, 27, 17, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 446560361, 'comment_body': 'ping @sylee957 @ishanaj @Sc0rpi0n101 here', 'comment_created': datetime.datetime(2020, 6, 27, 19, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 446595573, 'comment_body': '> I think we need two Series instances (previously discussed [here](https://github.com/sympy/sympy/pull/19390#discussion_r442365458)). So it would be `Series(TransferFunction(-1, 1, s), Series(tf1, tf2))`.\r\n\r\nIf another Series instance is required, we should have it that way.\r\nWhat I meant to say there was for something like `tf1 * tf2 * tf3` being `Series(tf1, Series(tf2, tf3))`. Here, the inner Series is redundant when Series can support multiple parameters and it can be `Series(tf1, tf2, tf3)`. \r\n\r\nNow, if a nested Series instance is required to accurately represent something, it should be allowed. \r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 28, 3, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 446595714, 'comment_body': 'Any reason for removing these tests?\r\n', 'comment_created': datetime.datetime(2020, 6, 28, 3, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 446595918, 'comment_body': 'This should be `TypeError` too since you changed the tests. ', 'comment_created': datetime.datetime(2020, 6, 28, 3, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 446595925, 'comment_body': 'Same for all other instances', 'comment_created': datetime.datetime(2020, 6, 28, 3, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 446637060, 'comment_body': ""I'm not removing all of it. `tf4*tf4` will not be equal to `tf**2`. Although, we'll see if `(tf4*tf4).doit()` is equal to `tf**2`!"", 'comment_created': datetime.datetime(2020, 6, 28, 11, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 446691455, 'comment_body': ""I think `TypeError` should be raised for invalid arguments in `Series` and `Parallel`. But for invalid operations like `tf1 + Matrix()`, Shouldn't it be a `ValueError`?"", 'comment_created': datetime.datetime(2020, 6, 28, 19, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449000755, 'comment_body': 'It would be helpful if these were readable. For example you can do something like:\r\n\r\n```\r\nexpected = """"""\\\r\nmy\r\nmulti-line\r\nthing\r\n""""""', 'comment_created': datetime.datetime(2020, 7, 2, 13, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449002087, 'comment_body': '```suggestion\r\ndef test_TransferFunction_str():\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449007054, 'comment_body': '```suggestion\r\n    # when just the numerator is 0, leave the denominator alone.\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449009025, 'comment_body': ""It's worth checking subs separate from evalf() too."", 'comment_created': datetime.datetime(2020, 7, 2, 13, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449009657, 'comment_body': 'Should this check to make sure you get a Series object?', 'comment_created': datetime.datetime(2020, 7, 2, 13, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449010067, 'comment_body': 'Do you need a ValueError if you raise to anything other than an integer?', 'comment_created': datetime.datetime(2020, 7, 2, 13, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449011900, 'comment_body': 'Do you have Feedback.doit() that would create the solved feedback loop?', 'comment_created': datetime.datetime(2020, 7, 2, 13, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449012254, 'comment_body': 'I see Feedback.doit() here. Good.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449207795, 'comment_body': ""Why do you want to support anything other than integer exponents? I don't think it would be useful anywhere."", 'comment_created': datetime.datetime(2020, 7, 2, 18, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449212037, 'comment_body': '`__pow__` performs an in-place operation, so `tf5*tf5` is not equal to `tf5**2`. \r\nHere I can add some tests like: `(tf5*tf5).doit()**-1 == tf5**-2`', 'comment_created': datetime.datetime(2020, 7, 2, 18, 58, 58, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449225892, 'comment_body': 'Feedback.doit() gives the resultant closed-loop continuous-time transfer function obtained using negative feedback. For example: things like `(tf1*tf2) / (TransferFunction(1, 1, s) + tf1*tf2*tf5)` (which are obtained by solving algebraic equations)  convert to `Feedback(tf1*tf2, tf5)`.\r\n``` python\r\n>>> Feedback(tf1*tf2, tf5).doit()\r\n                       k⋅(a₀ + s)                      \r\n───────────────────────────────────────────────────────\r\n  ⎛          2       ⎞            ⎛ 2                2⎞\r\nk⋅⎝-a₀ + a₁⋅s  + a₂⋅s⎠ + (a₀ + s)⋅⎝s  + 2⋅s⋅wn⋅ζ + wn ⎠\r\n```\r\n', 'comment_created': datetime.datetime(2020, 7, 2, 19, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449284820, 'comment_body': 'Very nice!', 'comment_created': datetime.datetime(2020, 7, 2, 22, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449652221, 'comment_body': 'I think these should print like:\r\n\r\n```\r\nx + y      x - y\r\n------  + -------\r\nx - 2y    x + y\r\n```', 'comment_created': datetime.datetime(2020, 7, 3, 16, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449653575, 'comment_body': ""It is difficult to display this in unevaluated form, but I think that the best we can do is to display in the standard feedback form. See this: https://en.wikipedia.org/wiki/Control_theory#Closed-loop_transfer_function\r\n\r\nSo you'd see something like:\r\n\r\n```\r\n             s\r\n       --------------\r\n       s^2 + s + 3\r\n---------------------------\r\n           s            s\r\n1 + --------- * ----------------\r\n       s + 1       s^2 + s + 3\r\n```\r\n\r\nThis would display the unevaluated parallel and series elements that make up the numerator and denominator of the closed loop transfer function."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449653798, 'comment_body': 'These should follow the same recommendations I made in the pretty print tests to better follow the unevaluated form of these three classes.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449654451, 'comment_body': 'Remove this line. This does not follow the SymPy docstring style guide.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449654948, 'comment_body': 'I think this needs more specifity. It represents LTI systems that can be strictly described by ratios of polynomials in the Laplace Transform complex variable. ', 'comment_created': datetime.datetime(2020, 7, 3, 16, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449655019, 'comment_body': '```suggestion\r\n    a complex variable used to anchor these polynomials of the transfer function. ``num`` and ``den`` can\r\n```', 'comment_created': datetime.datetime(2020, 7, 3, 16, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449655170, 'comment_body': ""I don't see how this is true. How can we allow any sympy expression?"", 'comment_created': datetime.datetime(2020, 7, 3, 16, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449655461, 'comment_body': 'I am not a fan of the term ""anchor"". I\'m not sure what that means mathematically. This is the complex variable of the Laplace Transform. We should call it that.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449655576, 'comment_body': 'What does ""not a expression/polynomial"" mean? This isn\'t explicit.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449655712, 'comment_body': 'Replace with ""Any complex variable can be used for ``var``"".', 'comment_created': datetime.datetime(2020, 7, 3, 16, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449656109, 'comment_body': 'I would rework these sentences that start with ""Using"". The documentation in SymPy in more typically styled like:\r\n\r\n""To negate a transfer function the ``-`` operator can be prepended::""', 'comment_created': datetime.datetime(2020, 7, 3, 16, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449656250, 'comment_body': '```suggestion\r\n    Using ``**`` operator to take the integer power of a transfer function.\r\n```', 'comment_created': datetime.datetime(2020, 7, 3, 16, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449656397, 'comment_body': ""I don't see this reference used anywhere in the docstring. Remove."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 42, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449657078, 'comment_body': 'You need examples of adding, subtracting, multiplying, and dividing TransferFunctions and show that they create Parallell and Series objects. Then you need to show the use of doit() to convert those objects to evaluated TransferFunctions. Users will very unlikley be using Parallel and Series directly to construct what they can with the standard operators. Feedback will be the only class besides TransferFunction that will need to be used.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449657188, 'comment_body': 'polynomial/expression??', 'comment_created': datetime.datetime(2020, 7, 3, 16, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449657438, 'comment_body': 'Do you have a test for this clause?', 'comment_created': datetime.datetime(2020, 7, 3, 16, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449657999, 'comment_body': ""I think you need to raise a ValueError if the numerator or denominators are expressions that aren't polynomials in var."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449658134, 'comment_body': 'Do you have a test for this?', 'comment_created': datetime.datetime(2020, 7, 3, 16, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449659025, 'comment_body': 'This is missing a docstring. All public classes, functions, and methods must have docstrings.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 52, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449659062, 'comment_body': 'Docstring.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449659084, 'comment_body': 'Docstring.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 53, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449659180, 'comment_body': 'These need docstrings.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449659199, 'comment_body': 'Docstrings on all public classes and methods are needed.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 53, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449659236, 'comment_body': 'Missing docstrings.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449774236, 'comment_body': '@moorepants, a few days before you asked me to add unit tests for transfer functions whose numerator or denominator can have a float exponent. I don\'t think a numerator like `a0*s**0.5 + a2*s**0.6 - a1` can be called a ""polynomial"" altho it comes into the category of an `Expr`, that\'s why I have written ""polynomial/expression"" everywhere.', 'comment_created': datetime.datetime(2020, 7, 4, 13, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449774472, 'comment_body': 'It should have an integer exponent to be called as a ""polynomial""!', 'comment_created': datetime.datetime(2020, 7, 4, 13, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449776942, 'comment_body': 'Yes, [here](https://github.com/sympy/sympy/blob/d6771df476f1c2e30010d5fc38f7c88a6671f297/sympy/physics/control/tests/test_lti.py#L193).', 'comment_created': datetime.datetime(2020, 7, 4, 14, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449777522, 'comment_body': 'Yeah!\r\nFor Series: https://github.com/sympy/sympy/blob/d6771df476f1c2e30010d5fc38f7c88a6671f297/sympy/physics/control/tests/test_lti.py#L347\r\nFor Parallel:\r\nhttps://github.com/sympy/sympy/blob/d6771df476f1c2e30010d5fc38f7c88a6671f297/sympy/physics/control/tests/test_lti.py#L456', 'comment_created': datetime.datetime(2020, 7, 4, 14, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449781814, 'comment_body': ""I can't remember what I wrote a few days ago, but I assume I must have meant to write unit tests for error checking to prevent float exponents. There are two places to think about exponents 1) the numerator and denominator expressions and 2) pow(TransferFunction, n). I don't think floats for either of these makes much sense.\r\n\r\nThis class should only support valid expressions resulting from Laplace Transforms. An for now I think it can only support polynomials of s that have integer values. I don't think we can support other possible expressions (yet) so we should raise an error if a user creates a TransferFunction with anything other than a polynomial, no? "", 'comment_created': datetime.datetime(2020, 7, 4, 15, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449783087, 'comment_body': 'Although it is not common, there are situations when transfer functions can be non-rational.  These often arise when dealing with PDEs, for instance.  Some examples [here](http://www.math.uwaterloo.ca/~kmorris/Preprints/Curtain_Morris_final.pdf).', 'comment_created': datetime.datetime(2020, 7, 4, 15, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'murrayrm', 'type': 'User'}, {'comment_id': 449783437, 'comment_body': ""Thanks @murrayrm. We can support them but it may be easier to support a strict subset now and add more expression types in the future as we understand them more and the use cases. If we support rational and irrational polynomials now, it probably doesn't make much difference on the development side of things, so we could leave it in."", 'comment_created': datetime.datetime(2020, 7, 4, 15, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449784084, 'comment_body': 'I agree with @murrayrm. We should support non-rational transfer functions now only. @moorepants, I think there is only one way to support only ""polynomials"", and that is by introducing `Poly` objects internally. The whole class structure would have to be changed I think!', 'comment_created': datetime.datetime(2020, 7, 4, 15, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449786046, 'comment_body': 'Initially, I thought of doing the same thing. But consider a transfer function operation like this: `(tf1 + tf2)*(tf3 + tf4)` how to add parenthesis in this?', 'comment_created': datetime.datetime(2020, 7, 4, 16, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449787464, 'comment_body': 'However, I think that it is too trivial and not practically useful to restrict for integer coefficients. It should be able to support any symbolic real numbers.\r\n\r\nBut I may agree on using integer exponents only. Although there can be other generalized transfer functions, I don’t think that they can use properties that can apply for LTI at all, and need completely different problem solvings.', 'comment_created': datetime.datetime(2020, 7, 4, 16, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 449799371, 'comment_body': '> @moorepants, I think there is only one way to support only ""polynomials"", and that is by introducing Poly objects internally. The whole class structure would have to be changed I think!\r\n\r\nThat may be the case. That\'s why I asked at the very beginning to investigate whether we should be using Poly internally.\r\n\r\nI\'m fine with supporting only expressions that are composed of powers of s. It\'ll be garbage in, garbage out if users supply things that aren\'t supported. Which is a fine design decision as long as the docstring warns about this.', 'comment_created': datetime.datetime(2020, 7, 4, 19, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449801660, 'comment_body': 'Something like this:\r\n```\r\n(x + y      x - y  )  (x + y      x - y ) \r\n|------  + ------- |  |------  + -------|\r\n(x - 2y    x + y   )  (x + y      x - y )\r\n```', 'comment_created': datetime.datetime(2020, 7, 4, 20, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449801697, 'comment_body': 'There should be similar examples when printing expressions of fractions.', 'comment_created': datetime.datetime(2020, 7, 4, 20, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 449807051, 'comment_body': 'How about this?\r\n\r\n``` python\r\n [x + y      x - y  ]   [x + y      x - y ] \r\n [------  + ------- ] * [------  + -------]\r\n [x - 2y    x + y   ]   [x + y      x - y ]\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 4, 21, 31, 22, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 449810941, 'comment_body': 'There are functions in the printing code to add parentheses', 'comment_created': datetime.datetime(2020, 7, 4, 22, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 449822302, 'comment_body': ""However, I'd note that it is *not* always a fixed option to use Poly to restrict for integer exponents.\r\n\r\n![image](https://user-images.githubusercontent.com/34944973/86524029-14c1fb00-beb0-11ea-9fb9-551e4f2d537a.png)\r\n\r\n\r\nFor example, we can use other mathematical objects like multiplication or `Product` to describe a transfer function given by roots, while Poly is actually not an efficient option for this because it automatically expands everything."", 'comment_created': datetime.datetime(2020, 7, 5, 2, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 449831865, 'comment_body': '@murrayrm \r\nIs there any transfer function in the form of polynomials of modular coefficients or finite fields?\r\nIf there exists rigid theory about that, it gives a suitable reason for using Poly.', 'comment_created': datetime.datetime(2020, 7, 5, 4, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 450360392, 'comment_body': ""Using `Mul(num/den, evaluate=False)` doesn't prevent evaluation because `num/den` evaluates before being passed to `Mul`. Since you only pass a single arg to `Mul` it will simply return that argument unchanged (even if `evaluate=False`). If you wanted to prevent evaluation you could use e.g.:\r\n```\r\nres = Mul(num, Pow(den, -1, evaluate=False), evaluate=False)\r\n```"", 'comment_created': datetime.datetime(2020, 7, 6, 17, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 450362677, 'comment_body': '@namannimmo10 Do you have a unit test that ensures this does what is expected? If not you need one.', 'comment_created': datetime.datetime(2020, 7, 6, 17, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 450380078, 'comment_body': 'I think you should add some basic examples of these here. Although, more elaborate examples for Series, Parallel and Feedback should be added to their respective class docstrings. ', 'comment_created': datetime.datetime(2020, 7, 6, 17, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 450381443, 'comment_body': 'If you\'re getting rid of ""anchor"" in the Parameters setion, as Jason said, you should do it here too. ', 'comment_created': datetime.datetime(2020, 7, 6, 17, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 450383680, 'comment_body': 'Will it be possible to take this clause out of the if ladder, and test it just once at the start of the function?', 'comment_created': datetime.datetime(2020, 7, 6, 17, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 450385409, 'comment_body': ""Why would this be ValueError? \r\nYou are adding the worng 'type' of object to the TransferFunction. The value of the object is not wrong, the type of the object is wrong."", 'comment_created': datetime.datetime(2020, 7, 6, 17, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 450387619, 'comment_body': 'There are 5 different return statements in this function. Are all of these use cases tested? ', 'comment_created': datetime.datetime(2020, 7, 6, 17, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 450392662, 'comment_body': ""Generally, class docstrings should contain the majority of information and examples of how the class should be used, what is its purpose, and where it'll be useful. The function and method docstrings need to explain the purpose of that method, and maybe some examples specfically showing the method's use cases. "", 'comment_created': datetime.datetime(2020, 7, 6, 18, 3, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 450396196, 'comment_body': 'Also add tf1.args here', 'comment_created': datetime.datetime(2020, 7, 6, 18, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 450397178, 'comment_body': ""Doesn't `.args` return a set?"", 'comment_created': datetime.datetime(2020, 7, 6, 18, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 450397504, 'comment_body': 'Are all 3 of these tested?', 'comment_created': datetime.datetime(2020, 7, 6, 18, 13, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 451126510, 'comment_body': '@oscarbenjamin, Thanks for pointing this, I totally missed it! Yes, I will update the unit tests.', 'comment_created': datetime.datetime(2020, 7, 7, 20, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 451735531, 'comment_body': ""Yes, we can do that. But if the user adds a transfer function to, let's say, an integer.. then it will raise an `AttributeError` stating that it has no attribute `var`. To avoid that, It will raise a `ValueError` at the bottom of the function stating that `TransferFunction` cannot be added with Integer."", 'comment_created': datetime.datetime(2020, 7, 8, 18, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 451794046, 'comment_body': 'I will change it to ""not a polynomial"".', 'comment_created': datetime.datetime(2020, 7, 8, 20, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 452266599, 'comment_body': 'You can build your documentation [locally](https://docs.sympy.org/latest/documentation-style-guide.html#build-the-documentation) to see if this is rendering properly', 'comment_created': datetime.datetime(2020, 7, 9, 14, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452276804, 'comment_body': ""Why did you change this to ValueError when the error message even says the 'type' of num or den is wrong? \r\n\r\nYou raise should ValueError when user input is of the right type but the value is problematic like you did with den == 0. But in situations like this, where num/den don't belong to the supported types, or when someone performs an operation on an unsupported type like trying to add/multiple the wrong type of variable with a TF, then you should raise TypeError because the 'type' of the variable is wrong before even looking at the 'value'.\r\n\r\nYou can read more about these exceptions at https://docs.python.org/3/library/exceptions.html#TypeError\r\n"", 'comment_created': datetime.datetime(2020, 7, 9, 14, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452278175, 'comment_body': 'Also, in the if-clause, do we really need the Symbol test? Is there any case where Expr can be created without symbols?', 'comment_created': datetime.datetime(2020, 7, 9, 14, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452278875, 'comment_body': 'How about putting this under a Note subheading? ', 'comment_created': datetime.datetime(2020, 7, 9, 14, 54, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452279621, 'comment_body': 'Also, this is longer than 79 characters, try cutting it off after same.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452280686, 'comment_body': 'You should also include that it represents the transfer functions in a series configuration.\r\nParallel objects is a little too vague. Also, this is the docstring for Series, not Parallel. ', 'comment_created': datetime.datetime(2020, 7, 9, 14, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452282048, 'comment_body': 'Maybe also add the TransferFunction and Feedback classes', 'comment_created': datetime.datetime(2020, 7, 9, 14, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452286999, 'comment_body': ""Again, why did you change to ValueError? \r\nYou are not checking the variable's value, you are checking it's type, and the message says the type is unsupported."", 'comment_created': datetime.datetime(2020, 7, 9, 15, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452287659, 'comment_body': '```suggestion\r\n        Returns the complex variable used by all the transfer functions (or ``Series`` objects).\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 15, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452290764, 'comment_body': 'Needs a little more explaination\r\nMaybe, the resultant transfer function obtained after evaluating the transfer functions in Series configuration. Something like that might be better', 'comment_created': datetime.datetime(2020, 7, 9, 15, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452291752, 'comment_body': 'One example each of True and False would be better', 'comment_created': datetime.datetime(2020, 7, 9, 15, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452291888, 'comment_body': 'Same for both other properties', 'comment_created': datetime.datetime(2020, 7, 9, 15, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452292290, 'comment_body': 'Parallel, not Series\r\n\r\nSame everywhere else in the class', 'comment_created': datetime.datetime(2020, 7, 9, 15, 12, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452292642, 'comment_body': 'This one also needs a few more elaborate examples like Series', 'comment_created': datetime.datetime(2020, 7, 9, 15, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452293270, 'comment_body': 'Same as the last class, just Parallel instead of Series.', 'comment_created': datetime.datetime(2020, 7, 9, 15, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452295703, 'comment_body': 'here, you need to provide more examples for exactly how Series is supposed to be used. You need to add more elaborate examples here. You should show tf1 * tf2 returns a Series object, most of the users will prob be creating Series objects using * instead of Series().\r\n\r\nYou also need to show what happens when a Series object is added/multiplied with other Series, Parallel, TF objects.', 'comment_created': datetime.datetime(2020, 7, 9, 15, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452298303, 'comment_body': 'This docstring will be the primary source for the users to find out how this class works, other than the member function docstrings. You need to help them as much as you can by explicitly showing how things work. \r\n\r\nJust think if you are a new user and have absolutely no idea how any of this work, how much will you know and will be able to do after reading the docs. ', 'comment_created': datetime.datetime(2020, 7, 9, 15, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 452489270, 'comment_body': 'This is a property of `Series` class, it\'s obvious that it will return the complex variable used by all the ""Series"" objects. What I meant was this:\r\n``` python\r\n>>> Series(tf1, tf2, Parallel(tf3, tf4)).var\r\ns\r\n```\r\nI will just change it like that,  if it isn\'t explicit.\r\n```suggestion\r\n        Returns the complex variable used by all the transfer functions.\r\n```', 'comment_created': datetime.datetime(2020, 7, 9, 21, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 452517835, 'comment_body': ""I don't think the users will use `Series` or `Parallel` class directly. So, I have added some more examples in `TransferFunction` class level docstrings like how by using `+, -, *` with different transfer functions, we get Series and Parallel objects."", 'comment_created': datetime.datetime(2020, 7, 9, 22, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 452531218, 'comment_body': ""> Is there any case where Expr can be created without symbols?\r\n\r\n``` python\r\n>>> isinstance(Quaternion(1, 2, 3, 4), Expr)\r\nTrue\r\n```\r\nWe don't wanna allow that, I think.\r\nI am sure there are other objects that can be an instance of `Expr`."", 'comment_created': datetime.datetime(2020, 7, 9, 22, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 452565621, 'comment_body': 'Alright, fair enough.', 'comment_created': datetime.datetime(2020, 7, 10, 0, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 453057876, 'comment_body': ""I don't know why this test is not working on Travis. It worked locally!\r\nThis is the code corresponding to it:\r\n``` python\r\n    def __truediv__(self, other): # in Series class.\r\n           .....\r\n           ......\r\n        self_arg_list = set(list(self.args))\r\n        other_arg_list = set(list(other.args[1].args))\r\n        res = list(self_arg_list ^ other_arg_list)\r\n        if len(res) == 0:\r\n            return Feedback(self, other.args[0])\r\n        elif len(res) == 1:\r\n            return Feedback(self, *res)\r\n        else:\r\n            return Feedback(self, Series(*res))\r\n```\r\nMaybe it's because elements in `list(self_arg_list ^ other_arg_list)` are in a random order.. Is there any other way to achieve this??"", 'comment_created': datetime.datetime(2020, 7, 10, 20, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 453063094, 'comment_body': ""Also, I don't know why we want `(tf1*tf2) / (tf + tf1*tf2*tf5*tf3)` to convert into a `Feedback()` object in the first place.. when the user uses `Feedback` class directly!"", 'comment_created': datetime.datetime(2020, 7, 10, 20, 29, 53, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}]","[{'commit_sha': '6a9c54930d3ca798268831d446f2481584709665', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e28cd0e425a14f684dd2678767aaf5d7a8a8eab', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6cc17077e77f1fcbb193c57981031074ee89755', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf97bfc951ca570848bcc65242d29b0c302a617c', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ec18251f1178a0cd0e4dfe7c380b231a40cca59', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56c65c7bc689943887be1860afe46247bdc34c6', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '005dee782102a8118d963e620971424c9d4e6f4a', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fd26b7b75506aa03c18ab426c07c2bde5b5651e', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3fd5bfd9a17af710d61116138faae2218892d1a', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8837d69c774d498a942c35807e7be513d71d5bdb', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40e3ca614ccb877f7d68c6723a7bcddba499ea82', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b773d1b062c84d39648f36ea2b8bd5dc0833d01d', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '270ad85074cbbb659f16f5288f16a60e58628a73', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7c596b96fe25a41e8bce851c11bac1c825ec49a', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77368b1d8e2049de7e340a544acc98b6c52851c2', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a51b3a48918c9c6119533d805ec14a5a6160a1', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6fba397570f1cb6b72bb83f9ee6125ac6466840', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92fd3d70edfce7f029d041ea68ca12bfa8a934db', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b4e1ae765457299f7d54908f51c9f6e883b42b1', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f20b5296793eec1353f4629e7d111b746cf7845', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bb93bf436d76fd0c0fc6ab4c06f64d58f1aa143', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df5cba550f9c3ded49c5fef5a600c5df979b05e4', 'committer_username': 'benepla', 'committer_name': 'Benedikt Placke', 'committer_email': None, 'commit_date': datetime.datetime(2015, 9, 4, 11, 29, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5b8dd4828fa2fcc60ceddff86513e8e36c1427a', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ee4e8e864d5a68723d50a8e83af91c12d90a72', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50c2379b92e1bdbcfbd2b0ac10aa556bf7a0c9e0', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47faf7fb677e8428f839dec03019100ae0b244f4', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b75b074f66d5534749b931108be5d8a3c49a7d6', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98e04d407e573dbfa940e183e86fa5427f3f0e33', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbb12497960dee03b9cc62e4cdbf42bc38c46b0b', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1d10f720f9c0f3110ceab71f8aed00912fd642a', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5aa8c9db15a88f732fcd30ac11cfecf28ba1ab8', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485c06392e95c03bc25a9e5ce9a55e819a6e2af7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb6829bc606770401b527e3b791bfea3fe6829e2', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e2d8029433bb9a3bef5bcaadea83bf4cb46f4ee', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '626b1ea26086a27e14d93e5b75aabda7073a48ad', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce87b4529026c5dbd28afa7c7a91ce7124e7bee7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372d067a3b3eee965c594c5c120efe48d1e1a8a0', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d566a0908b1c357e9aa4cb6c2a884b08576445', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '824ee84d4aecf8d2f081a658c8ab0cfc1d20262c', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1b342d676e06669999f634bfcbcc045d9d2470', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d345c4dbd065d57adeee581430dd8562c7d6bbb', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b29b2e99e4a11ab78befba275f6b2f66aa2d4aa', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '003593fbcdfe0d31b1b53f2e42815ecf3e851b53', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a440c71f863205100cb6655d08b3f59537669c57', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77528277056cb3dbd26a4569d2702ba73aea9326', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa0d1e4c54e75f97eab1bb9b755add056b26ecf8', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee65f0078ff710e60a7221b09e35e502cea7f0a0', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fcabbdcbbb25fdb1e16f00773d5155c83ea6631', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2edd3c19f9f28d6183730fa25a2eaa72062e9b07', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef188f8f80ab9c58ecf403d98faa61dbf917ce43', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cccd73c7aee9dabc88475a97bc23bf61664dad77', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '783e92a7b410be17b884f4ff61518cf7552212f2', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b9cc67265f482b0e1802e4dc5ea5e3378a638c', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd62bdd97d6dc09d3e998c12827e1d8d164482446', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be4fd70f01a0cc3a7e91e9a5bec16e000b69c255', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b14d8d0e4fc6c56e46866462834dbea18edd56c', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '218837f9300498d022ef7357d39161385fe863bf', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dc2da3862571169fd8206df9c8f6027f9faab56', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebcc8342688c88d4adc7a18778146a3de3bb9699', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '124ffb28da447e89094e19a660618ea3bb64a1d1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65736afadc6093fbf7fe02930af3e4db229695f2', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ea6659df3f756b119db1550843186b23da2f715', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffbcf8cab351a3aea0d5243225f5d8be14cb62ec', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79c994725e1bee7cbd8c2af22ee71d21082c6690', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16e73076a1f2bb064a80d65f30b45aa06a8f25bd', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19933e3d28e5bd6ee10470f4258661be762a102f', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb5e9578e702c64ca581df71ebaf7d23b3906e0b', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eea72393071a8e28bea42912039b5db9651412e5', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69517d6474f78e32e6517db8ff95b0708002c9ef', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae03a83d04454923c4e1624998aa6c6e046bfbe3', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26b23c82d4bad1cff022d62fc35ae6220ba9d632', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46f9a6cda18efbc2cd9cc58a56e460f1dad5d916', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a81722045110d4dd92e9f9f094281f868ee7ae2', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37baf80f5f51f813e923d9cc28302ec76478404f', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf4d75ebaa4e3a28efd2c66e9a61edd61680ec86', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52de071a67689f896ef746b7189cde1ee4577f7d', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f22226518ad7fbc67fcb2cc130e613c02fba8691', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81e19881a4bb33f4d6ee8864ecfe51b37397a3a2', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6771df476f1c2e30010d5fc38f7c88a6671f297', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '058a6df619a1128a892c006b3dd04f903ab911d0', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a85383b351a6014665f2f1baaf2ec9fc64cff1ce', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3f326c0ddfc17c6ae23dc0661262510b2e262d4', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bef22eacdf4f5f8037e5d2a750aaa4f4e7e4ca66', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8212c970b8dfbff660b0b0ab6fad74681001c37', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b06643abff733beeeadcbde10e54767eeb943ab8', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0f4c485b308a0f5550fc2a9e7d158c6cdb8d7e8', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '389445c3cc4f4c8261e88fda0b7283dd7a041ca1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6343e759a790fa1269546f514c156dca877d6c08', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2369c29336ed40a85bcf0f2c1b8f2f0dafc66757', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1c3485ba90cd62909157af41b8171fca948ebd7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'beb05a73aca1117eb260ea6af9cb307f843846e4', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15681fdd7356c6ea4b032e37cc15286badbe433e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a19d6b7bd52c5e91bea8ec5674fce1f1ca8a90', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a2cfc1b29397ed9246ae320d379ee7172b6c3bd', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9709b20d9e44f590ff84ad86752d9429b195860', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '284d24f3c4048f1b8d144324b496803dbe34ea67', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}]",Naman Gera,43007653,namangera15@gmail.com,User,,47,,0,62
463729460,[GSoC] Add other useful methods in TransferFunction class,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
https://github.com/sympy/sympy/issues/19352#

#### Brief description of what is fixed or changed


#### Other comments
TODO (along with docs and tests):

- [x] Add zero-frequency (or DC) gain.

- [x] Add method for finding poles.

- [x] Add method for finding zeros.

- [x] Add method for stability.

#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
*  physics.control
   *  Added `dc_gain`, `poles`, `zeros`, and `is_stable` in `TransferFunction` class.
<!-- END RELEASE NOTES -->",True,19896,https://api.github.com/repos/sympy/sympy/pulls/19896,https://github.com/sympy/sympy/pull/19896,closed,181,3,2,1,28,44,2,0,"[{'name': 'GSoC'}, {'name': 'physics.control'}]",2020-08-06 01:42:12+00:00,2020-08-27 21:08:22+00:00,1884370.0,"21 days, 19:26:10","[{'comment_id': 466184133, 'comment_body': 'If s -> 0 then you should get a number not a transfer function.', 'comment_created': datetime.datetime(2020, 8, 6, 6, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 466308224, 'comment_body': 'Returning a number instead of a transfer function was my first choice, but I changed it for two reasons:\r\n 1. In https://github.com/sympy/sympy/pull/19390#discussion_r439570137, you did return a transfer function instead of a number.\r\n```\r\n>>> closed_loop.zero_frequency_gains()  # takes limit as s -> 0\r\nTransferFunction(...) \r\n```\r\n 2. Although other libraries return a number, but this being a symbolic package, and we can get certain values like `(a + b) / c` (`a`, `b`, `c` are `symbols`) after taking a limit so I thought wrapping a transfer function around it was a better choice.', 'comment_created': datetime.datetime(2020, 8, 6, 10, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 466323681, 'comment_body': ""> In #19390 (comment), you did return a transfer function instead of a number.\r\n\r\nThat was likely me not thinking carefully about it.\r\n\r\n> Although other libraries return a number, but this being a symbolic package, and we can get certain values like (a + b) / c (a, b, c are symbols) after taking a limit so I thought wrapping a transfer function around it was a better choice.\r\n\r\nSure, it will be an expression if the values are symbols. If it evaluates to numbers, then it will return a Mul representing a ratio of two numbers I assume.\r\n\r\nEither way it shouldn't return a transfer function because it is no longer a function of s.\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 10, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467876414, 'comment_body': 'This looks like an unnecessary micro-optimziation\r\n```suggestion\r\n            rts.extend([key]*val)\r\n```', 'comment_created': datetime.datetime(2020, 8, 10, 12, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 467880921, 'comment_body': 'Thanks 😅', 'comment_created': datetime.datetime(2020, 8, 10, 12, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 468479135, 'comment_body': 'I think this becomes a lot simpler if you use the `multiple` argument of `eigenvals` or `roots`.\r\n```suggestion\r\n    def pole(self, *, multiple=True):\r\n        """"""\r\n        Returns the poles of a transfer function.\r\n\r\n        Examples\r\n        ========\r\n\r\n        >>> from sympy.abc import s, p, a\r\n        >>> from sympy.physics.control.lti import TransferFunction\r\n        >>> tf1 = TransferFunction((p + 3)*(p - 1), (p - 1)*(p + 5), p)\r\n        >>> tf1.pole()\r\n        [1, -5]\r\n        >>> tf2 = TransferFunction((1 - s)**2, (s**2 + 1)**2, s)\r\n        >>> tf2.pole()\r\n        [-I, -I, I, I]\r\n        >>> tf3 = TransferFunction(s**2, a*s + p, s)\r\n        >>> tf3.pole()\r\n        [-p/a]\r\n\r\n        """"""\r\n        if self.den.is_number:\r\n            return [] if multiple else {}\r\n        p = Poly(self.den, self.var)\r\n        try:\r\n            cmp_matrix = Matrix.companion(p)\r\n        except ValueError:\r\n            return roots(p, self.var, multiple=multiple)\r\n\r\n        try:\r\n            return cmp_matrix.eigenvals(multiple=multiple)\r\n        except MatrixError:\r\n            raise ValueError(""Could not compute poles of this transfer function."")\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 10, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468479692, 'comment_body': 'Can you explain why you use `companion` and `eigenvals` here, instead of just using `roots` always?', 'comment_created': datetime.datetime(2020, 8, 11, 10, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468480577, 'comment_body': 'No need to special case there being no poles\r\n```suggestion\r\n        for pole in poles_:\r\n            p = pole.as_real_imag()[0]\r\n            if p.is_negative is None:\r\n                raise ValueError(""Could not check the stability of this transfer function."")\r\n            if not p.is_negative:\r\n                return False\r\n        return True\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 10, 27, 43, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468482182, 'comment_body': 'This behavior is wrong - if the poles are [unknown, unknown, positive], then this function should return `False` not raise `ValueError`.', 'comment_created': datetime.datetime(2020, 8, 11, 10, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468482882, 'comment_body': 'I think this function should just be:\r\n```\r\nreturn fuzzy_and(pole.as_real_imag()[0].is_negative for pole in poles_)\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 10, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468500526, 'comment_body': 'DC gain is low-frequency gain. 0-frequency response is not defined for unstable systems (blows up). And frequency implies the Fourier transform so it gets all mixed up. I would suggest something like the following \r\n\r\n```python\r\n""""""\r\nComputes the low-frequency gain of the frequency response in the limit as frequency\r\napproaches to zero. For systems with pure integrator terms, DC gain is infinite.\r\n""""""', 'comment_created': datetime.datetime(2020, 8, 11, 11, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 468597455, 'comment_body': 'I already showed how this is handled in the ODE module above https://github.com/sympy/sympy/pull/19896#issuecomment-670478052', 'comment_created': datetime.datetime(2020, 8, 11, 13, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 468876702, 'comment_body': ""```suggestion\r\n    def pole(self):\r\n```\r\nWith the change to use `rootof`, there's little point in this any more."", 'comment_created': datetime.datetime(2020, 8, 11, 21, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468878530, 'comment_body': 'I think this would be worth a helper function at the top of the file\r\n```python\r\ndef _roots(poly, var):\r\n    """""" like roots, but work on high-order polynomials """"""\r\n    r = roots(poly, var, multiple=True)\r\n    n = degree(poly)\r\n    if len(r) != n:\r\n        r = [rootof(poly, var, k) for k in range(n)]\r\n    return r\r\n```\r\nmaking these lines and the ones in `poles`\r\n```\r\nchareqroots = _roots(chareq, self.val)\r\n```', 'comment_created': datetime.datetime(2020, 8, 11, 21, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468879015, 'comment_body': 'Why `simpify`? Does it fail without it?', 'comment_created': datetime.datetime(2020, 8, 11, 21, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468923845, 'comment_body': 'I\'m not sure this is worth changing the message or type. Probably this would be enough\r\n```suggestion\r\n        return _roots(chareq, self.var)\r\n```\r\nor if you really things the message helps\r\n```suggestion\r\n        try:\r\n            return _roots(chareq, self.var)\r\n        except NotImplementedError as e:\r\n            raise NotImplementedError(""Could not compute poles of this transfer function."") from e\r\n```\r\nLet\'s see what another reviewer thinks', 'comment_created': datetime.datetime(2020, 8, 11, 23, 40, 17, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468924001, 'comment_body': '@oscarbenjamin, should we reuse this in the ode code you linked to?', 'comment_created': datetime.datetime(2020, 8, 11, 23, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468924204, 'comment_body': '```suggestion\r\n    def poles(self):\r\n```\r\nseems like a better name, same for `zeros`.', 'comment_created': datetime.datetime(2020, 8, 11, 23, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468924522, 'comment_body': 'These should test `is True`, `is False`, and `is None`, otherwise the test does not distinguish `False` and `None`.', 'comment_created': datetime.datetime(2020, 8, 11, 23, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468927543, 'comment_body': '[Python-control](https://github.com/python-control/python-control) and MATLAB have the same names. Maybe we should follow the convention?', 'comment_created': datetime.datetime(2020, 8, 11, 23, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 468929954, 'comment_body': ""Matlab also has `poles`, which seems to do... exactly the same thing.\r\n\r\nI assume matlab avoids `zeros` because it already uses that for creating zero matrices and doesn't have any namespacing.\r\n\r\nAs far as I can tell, `Python-control` uses `zero(tf)` not `tf.zero()`, so the consistency is already broken.\r\nMaking `poles` plural is consistent with `roots` being plural.\r\n\r\nAgain, will let another maintainer decide."", 'comment_created': datetime.datetime(2020, 8, 12, 0, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468931352, 'comment_body': '```suggestion\r\n        CRootOf(x**9 + x + 1, 3), CRootOf(x**9 + x + 1, 4), CRootOf(x**9 + x + 1, 5), CRootOf(x**9 + x + 1, 6),\r\n```\r\nBackslashes do nothing inside square brackets.', 'comment_created': datetime.datetime(2020, 8, 12, 0, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468931486, 'comment_body': 'An example of `None` would be good.', 'comment_created': datetime.datetime(2020, 8, 12, 0, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 470619930, 'comment_body': 'This should be a method not an attribute. Things that do or may require significant computation should generally be method unless there is some specific reason not to be.', 'comment_created': datetime.datetime(2020, 8, 14, 13, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 477316961, 'comment_body': 'Does this need some clarification that marginal stability is not considered stability?', 'comment_created': datetime.datetime(2020, 8, 26, 13, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 477317959, 'comment_body': ""`dc_gain` seems like a more pythonic name to me, but maybe it's not sympythonic. I'll let some other sympy maintainer decide."", 'comment_created': datetime.datetime(2020, 8, 26, 13, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 477318187, 'comment_body': '(marking unresolved so this gets seen)', 'comment_created': datetime.datetime(2020, 8, 26, 13, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 477328925, 'comment_body': 'Yeah, right... How about `low_frequency_gain`? Ping @moorepants @ilayn', 'comment_created': datetime.datetime(2020, 8, 26, 14, 6, 56, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 477333279, 'comment_body': 'Thanks for pointing! :+1:  I will clarify this.', 'comment_created': datetime.datetime(2020, 8, 26, 14, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 477343714, 'comment_body': 'The convention is settled on this pretty much. I think `dc_gain` is the one that most would expect.', 'comment_created': datetime.datetime(2020, 8, 26, 14, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 477347915, 'comment_body': ""Looks terse but let's go with it."", 'comment_created': datetime.datetime(2020, 8, 26, 14, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 477369931, 'comment_body': '@namannimmo10 Can you also add a `None` example here for the users?', 'comment_created': datetime.datetime(2020, 8, 26, 15, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 477373668, 'comment_body': 'I think it would be a better idea to explicitly state that it would not return True in case of marginal stability. \r\nAlso, some explaination when it might return `None`.', 'comment_created': datetime.datetime(2020, 8, 26, 15, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 477390244, 'comment_body': '`tf4` gives `None`.', 'comment_created': datetime.datetime(2020, 8, 26, 15, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 477393925, 'comment_body': 'This example is easy to miss as being different\r\n```suggestion\r\n\r\n        # not enough info about the symbols to determine stability\r\n        >>> tf4 = TransferFunction(p + 1, a*p - s**2, p)\r\n        >>> tf4.is_stable() is None\r\n        True\r\n```', 'comment_created': datetime.datetime(2020, 8, 26, 15, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 477394566, 'comment_body': 'PEP 257 says that there should be a one-line summary followed by a blank line and a longer description', 'comment_created': datetime.datetime(2020, 8, 26, 15, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 477395340, 'comment_body': 'One possible option:\r\n```suggestion\r\n        Computes the gain as frequency approaches zero.\r\n        \r\n        For systems with pure integrator terms, the DC gain is infinite.\r\n```\r\nfeel free to reword', 'comment_created': datetime.datetime(2020, 8, 26, 15, 35, 13, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 478350919, 'comment_body': 'Can you add an example of this in the docstring?', 'comment_created': datetime.datetime(2020, 8, 27, 11, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 478352826, 'comment_body': 'maybe:\r\n```suggestion\r\n        Returns True if the transfer function is asymptotically stable; else False.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 11, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 478354512, 'comment_body': 'I think `absolutely` stable might be more appropriate here. Also, please check [this](https://www.tutorialspoint.com/control_systems/control_systems_stability.htm).', 'comment_created': datetime.datetime(2020, 8, 27, 11, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 478375081, 'comment_body': 'I don\'t think I\'ve seen the word absolutely used there before - my undergrad course [certainly didn\'t](http://www-control.eng.cam.ac.uk/gv/p6/Handout3.pdf), and a quick google finds way more relevant results for ""asymptotically stable""', 'comment_created': datetime.datetime(2020, 8, 27, 12, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 478397985, 'comment_body': 'Thank you for being precise!', 'comment_created': datetime.datetime(2020, 8, 27, 12, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 478424024, 'comment_body': ""Nitpick; transfer functions don't have frequencies they have frequency responses. It's a minor thing but if we are going for precision it might matter."", 'comment_created': datetime.datetime(2020, 8, 27, 13, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ilayn', 'type': 'User'}, {'comment_id': 478434453, 'comment_body': 'Perhaps\r\n```suggestion\r\n        Computes the gain of the response as the frequency approaches zero.\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 13, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}]","[{'commit_sha': '1dc58d964b3dfb5cd400d25b74d6bda3b10cd0d8', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}]",Naman Gera,43007653,namangera15@gmail.com,User,,47,,0,62
448567569,[GSoC] Add TransferFunctionMatrix class in physics.control,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
https://github.com/sympy/sympy/issues/19352

#### Brief description of what is fixed or changed
This PR introduces MIMO transfer functions in `sympy.physics.control`.

#### Other comments


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
*  physics.control
    * Added `TransferFunctionMatrix` class in physics.control
<!-- END RELEASE NOTES -->",True,19761,https://api.github.com/repos/sympy/sympy/pulls/19761,https://github.com/sympy/sympy/pull/19761,closed,1847,197,9,38,53,95,3,0,"[{'name': 'GSoC'}, {'name': 'Please take over'}, {'name': 'physics.control'}]",2020-07-14 00:02:56+00:00,2021-07-02 18:09:37+00:00,30564401.0,"353 days, 18:06:41","[{'comment_id': 456262857, 'comment_body': 'Why did you xfail this argument test? ', 'comment_created': datetime.datetime(2020, 7, 17, 7, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 456280728, 'comment_body': ""How many times have you used the same TFs for the tests?\nIf you've used any of these for multiple tests, just declare them globally on the top instead of doing it for every function."", 'comment_created': datetime.datetime(2020, 7, 17, 7, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 456306764, 'comment_body': 'https://github.com/sympy/sympy/blob/a1218a6324e023de4777dbe5c47fccbaa582e067/sympy/core/tests/test_args.py#L1\r\n\r\nArgument of `TransferFunctionMatrix` is a list of lists. ', 'comment_created': datetime.datetime(2020, 7, 17, 8, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 458008666, 'comment_body': 'What if someone calls this for an SISO function? Maybe you should add a raise statement for that case. ', 'comment_created': datetime.datetime(2020, 7, 21, 10, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 458010734, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 7, 21, 10, 57, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 458230782, 'comment_body': 'My opinion is that SISO function can be 1*1 transfer function matrix than scalar', 'comment_created': datetime.datetime(2020, 7, 21, 16, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 463995363, 'comment_body': 'I think that this should dispatch to `__add__`', 'comment_created': datetime.datetime(2020, 8, 1, 20, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 463996029, 'comment_body': 'This can make use of extra slots to store shape and variable attributes', 'comment_created': datetime.datetime(2020, 8, 1, 20, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 464056743, 'comment_body': 'Thanks! :sweat_smile: ', 'comment_created': datetime.datetime(2020, 8, 2, 9, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 464064755, 'comment_body': 'I think using `Basic.__new__(cls, arg, shape, var)` would be unnecessary because `shape` and `var` attributes can be derived from `arg`.', 'comment_created': datetime.datetime(2020, 8, 2, 11, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 464070725, 'comment_body': ""Unfortunately, I don't think that you were deriving them, but you were storing _inputs, _outputs as mutable parametets and reusing them, and it is worse than storing them in slots"", 'comment_created': datetime.datetime(2020, 8, 2, 12, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 464082301, 'comment_body': ""OK, I will apply this suggestion. Also, note that the `str` representation of `Series` and `Parallel` will get way too longer. Just saying... \r\nAnyways, It's better for the user to use pretty-printing because normal printing is already too long and unreadable for every object. "", 'comment_created': datetime.datetime(2020, 8, 2, 14, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 465513423, 'comment_body': 'For future reference, it would be best to move the capitalization of these variable names to a different PR, as it makes it difficult for the reader to see the changes that are actually related to the new TransferFunctionMatrix class.', 'comment_created': datetime.datetime(2020, 8, 5, 6, 57, 34, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465514198, 'comment_body': 'The attribute names ""outputs"" and ""inputs"" imply that they\'d return what they are. But this returns the number of outputs and number of inputs. I think that ""num_outputs"" and ""num_inputs"" are better name choices (or something similar.', 'comment_created': datetime.datetime(2020, 8, 5, 6, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465515009, 'comment_body': ""Why does the user have to pass in the shape to initialize? Can't this be inferred from the dimensions of the list of transferfunctions? SymPy Matrix and NumPy array infer these, for example."", 'comment_created': datetime.datetime(2020, 8, 5, 7, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465515933, 'comment_body': 'Why is this invalid? Because of ""Matrix""? I think you should follow duck typing principles here, just like other matrix-like classes. Any container class that looks like a list or list of lists with proper dimensions should work.\r\n\r\nThis example also seems to have two errors. The second one being the shape mismatch. These tests should expose one error at a time.', 'comment_created': datetime.datetime(2020, 8, 5, 7, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465516248, 'comment_body': 'Why is the var ""s"" needed when it is already defined in TF1 and TF2? This should be able to be inferred.', 'comment_created': datetime.datetime(2020, 8, 5, 7, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465517250, 'comment_body': 'I think this should work if dimensions match. The Matrix should be converted to a compatible TransferFunctionMatrix if possible.', 'comment_created': datetime.datetime(2020, 8, 5, 7, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465517773, 'comment_body': ""It would be helpful to write a comment for each of these explaining what they are testing as it isn't apparent without searching for the definitions of the transfer functions."", 'comment_created': datetime.datetime(2020, 8, 5, 7, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465685102, 'comment_body': 'Please see https://github.com/sympy/sympy/pull/19761#discussion_r463996029.', 'comment_created': datetime.datetime(2020, 8, 5, 12, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 465727674, 'comment_body': ""I don't see how that comment answers my question. I don't see why the shape arg or the var arg are necessary when initializing a TransferFunctionMatrix. This information is already present (implicitly) in the first argument."", 'comment_created': datetime.datetime(2020, 8, 5, 13, 30, 42, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465730992, 'comment_body': ""Well, that's what I did in the first place. I guess I have to revert the commit because `shape` and `var` attributes can be taken out from the first argument. "", 'comment_created': datetime.datetime(2020, 8, 5, 13, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 465751761, 'comment_body': 'Why should you have to drop parameters if there are alternative ways like making them as optional parameters', 'comment_created': datetime.datetime(2020, 8, 5, 14, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 465785291, 'comment_body': "">  Well, that's what I did in the first place. I guess I have to revert the commit because shape and var attributes can be taken out from the first argument.\r\n\r\nWhat was the reason for adding them?\r\n"", 'comment_created': datetime.datetime(2020, 8, 5, 14, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465792316, 'comment_body': 'There are some reasons from matrix computation perspective that shape parameter cannot always be dropped because it cannot represent the shape of (0, 0), (0, n), (n, 0), ..., which are often useful for describing zero rank matrix.', 'comment_created': datetime.datetime(2020, 8, 5, 15, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 465799267, 'comment_body': ""I'm not sure I understand that. sympy.Matrix doesn't require declaring the shape on instantiation, so why would this matrix-like object need to?"", 'comment_created': datetime.datetime(2020, 8, 5, 15, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 465801751, 'comment_body': 'Sympy matrix automatically looks up the shape from the lists if they are not explicitly stated, but stores the shape in the Basic.args\r\nSame thing can be done for transfer function matrix.', 'comment_created': datetime.datetime(2020, 8, 5, 15, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 465803320, 'comment_body': '> Same thing can be done for transfer function matrix\r\n\r\nThat sounds good to me!', 'comment_created': datetime.datetime(2020, 8, 5, 15, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 467314509, 'comment_body': ""> Any container class that looks like a list or list of lists with proper dimensions should work.\r\n\r\nFor now, I know how to allow `MutableMatrix` and `ImmutableMatrix` in the first argument. I'm not sure how any container class that looks like a list or list of lists will work."", 'comment_created': datetime.datetime(2020, 8, 7, 22, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 467367515, 'comment_body': 'You should be able to do, at least, all of these:\r\n\r\n```python\r\nTransferFunctionMatrix([[tf1, tf2], [tf3, tf4]])\r\nTransferFunctionMatrix(((tf1, tf2), (tf3, tf4)))\r\nTransferFunctionMatrix(Matrix[[tf1, tf2], [tf3, tf4]])\r\n```', 'comment_created': datetime.datetime(2020, 8, 8, 6, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467455411, 'comment_body': ""> You should be able to do, at least, all of these:\r\n> \r\n> ```python\r\n> TransferFunctionMatrix([[tf1, tf2], [tf3, tf4]])\r\n> TransferFunctionMatrix(((tf1, tf2), (tf3, tf4)))\r\n> TransferFunctionMatrix(Matrix[[tf1, tf2], [tf3, tf4]])\r\n> ```\r\n\r\nAllowing multiple types like this seems like poor API to me. I personally think that it is better just to require the argument to be a Matrix if it is supposed to be a Matrix.\r\n\r\nIf you do want to allow all of these types of input then the simplest way is just to call `Matrix` on the arguments.\r\n\r\nI plan to deprecate using non-Expr classes in `Matrix`. They make it very difficult to improve matrix performance e.g. as in #19686 and lead to many bugs. Many methods need to be changed or disabled to make it possible to have non-Expr in a Matrix in a way that is vaguely consistent (see #19567 that tries to make a Matrix subclass with `Poly` as the elements).\r\n\r\nSo I think that `Matrix([[tf1, tf2], [tf3, tf4]])` should be an error. It is conceivable that we could create a mechanism that makes it possible for that to automatically translate to a different class such as `TransferFunctionMatrix` but that seems out of scope here.\r\n\r\nMy suggestion is to document that the argument should be a list of lists but allow any sequence of sequences by doing something like:\r\n```\r\ndef __new__(self, rows):\r\n    rows = [list(row) for row in rows]\r\n    ...\r\n```\r\n(Or otherwise convert to tuple of tuples in a similar way)\r\n\r\nI don't think that `Matrix([[tf1, tf2], [tf3, tf4]])` should be allowed because `TransferFunction` is non-Expr. It would make sense to have a method for converting a `TransferFunctionMatrix` to a `Matrix` but the elements of the resulting `Matrix` should be `Expr`. It could also make sense to have a function for converting from a `Matrix` to a `TransferFunctionMatrix` but it should be analogous to the way that a `TransferFunction` is constructed from an `Expr` (if there is already a way to do that)."", 'comment_created': datetime.datetime(2020, 8, 8, 11, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 467456207, 'comment_body': ""> Allowing multiple types like this seems like poor API to me. I personally think that it is better just to require the argument to be a Matrix if it is supposed to be a Matrix.\r\n\r\nThis is the API of NumPy and SymPy Matrix for over a decade, over 15 years for NumPy. Users of these libraries are accustom to this and I think we should support it here because of that. We have no performance issues at the moment, so you may be trying to solve a problem that doesn't exist."", 'comment_created': datetime.datetime(2020, 8, 8, 11, 32, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467456412, 'comment_body': 'My point is this should be duck typed. If you want to deprecate what arguments are allowed in Matrix, that is a separate issue. TransferFunctionMatrix should accept anything that behaves like a lists of lists, in the iterable sense.', 'comment_created': datetime.datetime(2020, 8, 8, 11, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467457078, 'comment_body': ""> We have no performance issues at the moment\r\n\r\nThere are massive performance issues with matrices. Many of the performance issues listed on github were opened by you!\r\n\r\nHere's a simple example:\r\n```julia\r\nIn [1]: rref = lambda n: (randMatrix(n) + I*randMatrix(n)).rref()                                                                              \r\n\r\nIn [2]: for n in range(10): \r\n   ...:     %time ok = rref(n) \r\n   ...:                                                                                                                                        \r\nCPU times: user 1.05 ms, sys: 770 µs, total: 1.82 ms\r\nWall time: 1.21 ms\r\nCPU times: user 43.5 ms, sys: 6.59 ms, total: 50.1 ms\r\nWall time: 48.6 ms\r\nCPU times: user 321 ms, sys: 11.3 ms, total: 332 ms\r\nWall time: 333 ms\r\nCPU times: user 262 ms, sys: 1.24 ms, total: 263 ms\r\nWall time: 264 ms\r\nCPU times: user 917 ms, sys: 3.87 ms, total: 921 ms\r\nWall time: 924 ms\r\nCPU times: user 2.73 s, sys: 9.24 ms, total: 2.74 s\r\nWall time: 2.74 s\r\n^C---------------------------------------------------------------------------\r\nKeyboardInterrupt\r\n```\r\n\r\nIn any case having non-Expr in a Matrix is buggy so I think that the solution here is not allowing `Matrix([[tf1, ...]])` If `tf1` is a non-Expr `TransferFunction`. We're quite close to being able to eliminate the other cases that have non-Expr in a Matrix around the sympy codebase after #19882 "", 'comment_created': datetime.datetime(2020, 8, 8, 11, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 467457228, 'comment_body': '> TransferFunctionMatrix should accept anything that behaves like a lists of lists, in the iterable sense.\r\n\r\nAgreed. (That was my suggestion)', 'comment_created': datetime.datetime(2020, 8, 8, 11, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 467457576, 'comment_body': ""Sounds like we were on the same page. We just shouldn't add unit tests for the Matrix() input then, so we don't encode that use."", 'comment_created': datetime.datetime(2020, 8, 8, 11, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467457716, 'comment_body': '> There are massive performance issues with matrices. Many of the performance issues listed on github were opened by you!\r\n\r\nI meant that we have no performance issues with `TransferFunctionMatrix`.', 'comment_created': datetime.datetime(2020, 8, 8, 11, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467460578, 'comment_body': ""> I meant that we have no performance issues with TransferFunctionMatrix.\r\n\r\nAh, yes. Well not yet.\r\n\r\nI don't know what sort of calculations you intend to do with the transfer function matrix later but matrices of rational functions are handled *much* faster by #19686. See e.g. discussion in #19887.\r\n\r\nThe performance issues I refer to are actually performance issues in Matrix itself. Some of the obvious fixes are hard to implement because the implementation is limited by the fact that the class is also used with non-Expr elements in various parts of the codebase. Since it happens around sympy's own codebase I assume that a lot of downstream libraries/users are putting non-Expr into matrices as well so it's a significant backward compatibility problem. Possibly the solution is a new Matrix class (which also presents an opportunity to clean up a lot of other stuff)."", 'comment_created': datetime.datetime(2020, 8, 8, 12, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 467461549, 'comment_body': ""If we are not supporting Matrix() input, then I guess there's no point of converting a `Matrix` into a compatible `TransferFunctionMatrix` here."", 'comment_created': datetime.datetime(2020, 8, 8, 12, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 467461726, 'comment_body': '> I don\'t know what sort of calculations you intend to do with the transfer function matrix later but matrices of rational functions are handled much faster by #19686. See e.g. discussion in #19887.\r\n\r\nI don\'t fully either. This is the problem of trying to design a class without drawing up a broad set of unit tests and examples to show what we\'d like the class to do.\r\n\r\nI\'m a strong proponent of ""documentation driven development"" where we have some rich examples of intended use to be the guide. This PR is shooting in the dark.', 'comment_created': datetime.datetime(2020, 8, 8, 12, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467464086, 'comment_body': 'We are implicitly supportin Matrix because it acts like a lists of lists and can contain TransferFunction objects (currently). No error should be raised for `TransferFunctionMatrix(Matrix([[TF, TF],[TF,TF]]))`.', 'comment_created': datetime.datetime(2020, 8, 8, 13, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467464935, 'comment_body': '> This PR is shooting in the dark\r\n\r\nIf you think of it this way, can we just focus on writing a tutorial showing how to solve basic control problems using the already implemented functionality and also improving the documentation further in a different PR? A good set of examples can be added showing the usage of SISO transfer function and `Feedback` class. If some time would be left, I can continue my work on this PR. ', 'comment_created': datetime.datetime(2020, 8, 8, 13, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 467466824, 'comment_body': 'For the final weeks of GSoC I think that you should 1) finish this PR, 2) improve the documentation for the control module, and 3) add new methods to the classes you created to make them more useful (in that order of importance). But, you should be creating 2) documentation and examples as the first step to figuring out 1), otherwise noone knows what functionality you are trying to attain (including you!).', 'comment_created': datetime.datetime(2020, 8, 8, 13, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 467468975, 'comment_body': ""Unfortunately that's not the case for sympy's Matrix which iterates differently to numpy's 2D arrays or the deprecated `np.matrix`:\r\n```julia\r\nIn [27]: npa = np.array([[1, 2], [3, 4]])                                                                                                      \r\n\r\nIn [28]: npm = np.matrix([[1, 2], [3, 4]])                                                                                                     \r\n\r\nIn [29]: sym = Matrix([[1, 2], [3, 4]])                                                                                                        \r\n\r\nIn [30]: list(npa)                                                                                                                             \r\nOut[30]: [array([1, 2]), array([3, 4])]\r\n\r\nIn [31]: list(npm)                                                                                                                             \r\nOut[31]: [matrix([[1, 2]]), matrix([[3, 4]])]\r\n\r\nIn [32]: list(sym)                                                                                                                             \r\nOut[32]: [1, 2, 3, 4]\r\n```\r\nBoth numpy versions iterate over rows with the rows represented as 1D arrays or 1xn matrices. Iterating over a sympy Matrix yields the elements of the flattened matrix analogous to `np.array.flat`."", 'comment_created': datetime.datetime(2020, 8, 8, 14, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 468910919, 'comment_body': 'Why add the test at all then?', 'comment_created': datetime.datetime(2020, 8, 11, 22, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468911818, 'comment_body': 'Why not just `return self._num_inputs, self._num_outputs`? Are these ever different?', 'comment_created': datetime.datetime(2020, 8, 11, 23, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468912031, 'comment_body': '`SparseMatrix` is forbidden?', 'comment_created': datetime.datetime(2020, 8, 11, 23, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 468912149, 'comment_body': ""There's a Travis build failure due to absence of it. "", 'comment_created': datetime.datetime(2020, 8, 11, 23, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 468913095, 'comment_body': '```suggestion\r\n        if not (isinstance(arg, (list, tuple, DenseMatrix)) and\r\n```\r\n`sympy.matrices.dense.DenseMatrix` is the common base class I think', 'comment_created': datetime.datetime(2020, 8, 11, 23, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 469054820, 'comment_body': 'No, MatrixBase is the most common class', 'comment_created': datetime.datetime(2020, 8, 12, 7, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 469056324, 'comment_body': 'Depends if omitting `SparseMatrix` was deliberate.', 'comment_created': datetime.datetime(2020, 8, 12, 7, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 470178244, 'comment_body': 'Ok, I will allow the most common class, i.e. `MatrixBase`.', 'comment_created': datetime.datetime(2020, 8, 13, 18, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 475429024, 'comment_body': ""Is there any reason to have these special cases? I don't think trying to optimize out `for i in range(1)` is worthwhile."", 'comment_created': datetime.datetime(2020, 8, 24, 8, 35, 30, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 476102799, 'comment_body': 'Thanks! I have those special cases for several reasons.\r\n For instance: consider `tfm1` with shape (2, 3), `tfm2` with shape (3, 1), and `tfm6` with shape (2, 1). I get the following traceback:\r\n``` python\r\n________________________________________________________________________ sympy/physics/control/tests/test_lti.py:test_Series_functions ________________________________________________________________________\r\nTraceback (most recent call last):\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/tests/test_lti.py"", line 512, in test_Series_functions\r\n    assert tfm1*tfm2 + tfm6 == Parallel(Series(tfm1, tfm2), tfm6)\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/lti.py"", line 607, in __add__\r\n    return Parallel(self, other)\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/lti.py"", line 826, in __new__\r\n    obj.is_SISO = True if all(isinstance(arg.doit(), TransferFunction) for arg in args) \\\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/lti.py"", line 826, in <genexpr>\r\n    obj.is_SISO = True if all(isinstance(arg.doit(), TransferFunction) for arg in args) \\\r\n  File ""/home/namannimmo/sympy/sympy/physics/control/lti.py"", line 566, in doit\r\n    a[i][j] = res.args[0][i][k] * arg.args[0][k][j]\r\nTypeError: \'TransferFunction\' object is not subscriptable\r\n```\r\nThat\'s because `tfm2` is a column matrix, and also we need to make `[None, None]` (`(2, 3)` x `(3, 1)` -> `(2, 1)`) as the default list instead of `[[None], [None]]` which will then be passed into a `TransferFunctionMatrix` down below.\r\n\r\nSimilarly, we consider other cases...', 'comment_created': datetime.datetime(2020, 8, 25, 3, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 476182864, 'comment_body': 'Why not always store the entries as a nested list, ie use `[[None, None]]`?', 'comment_created': datetime.datetime(2020, 8, 25, 5, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 476184382, 'comment_body': 'You can simplify a lot by adding\r\n```\r\n# make a column vector\r\narg = [(a,) for a in arg]\r\n```\r\nhere. Then you can remove all the special cases.', 'comment_created': datetime.datetime(2020, 8, 25, 5, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 476332252, 'comment_body': '`True if c else False` is just `c`\r\n```suggestion\r\n        obj.is_SISO = all(isinstance(arg.doit(), TransferFunction) for arg in args)\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 10, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 476333557, 'comment_body': '```suggestion\r\n                if self.is_SISO != other.is_SISO:\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 10, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 477108047, 'comment_body': ""> Why not always store the entries as a nested list, ie use `[[None, None]]`?\r\n\r\nI don't understand how it's a column vector. Its shape would be (1, 2), no??"", 'comment_created': datetime.datetime(2020, 8, 26, 7, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 477112145, 'comment_body': 'Oh, I see. Thanks!!', 'comment_created': datetime.datetime(2020, 8, 26, 8, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 478697098, 'comment_body': 'The error log shows _print_Matrix is not a PrettyPrinter attribute.\r\nMight be `_print_MatrixBase`  https://github.com/sympy/sympy/blob/516b0b2bdab790f5b9b402a88b90f50c2af10d8c/sympy/printing/pretty/pretty.py#L763', 'comment_created': datetime.datetime(2020, 8, 27, 21, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478706248, 'comment_body': '@namannimmo10 you left the instance here.', 'comment_created': datetime.datetime(2020, 8, 27, 21, 28, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478707266, 'comment_body': 'and here', 'comment_created': datetime.datetime(2020, 8, 27, 21, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478707611, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 8, 27, 21, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478707897, 'comment_body': 'here too', 'comment_created': datetime.datetime(2020, 8, 27, 21, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478711112, 'comment_body': 'A better message might be ""The provided Shape does not match the shape of the input. Shape must be equal to ...""', 'comment_created': datetime.datetime(2020, 8, 27, 21, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478711211, 'comment_body': 'Same at other instances', 'comment_created': datetime.datetime(2020, 8, 27, 21, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 478721519, 'comment_body': 'Yep, I removed this attribute recently', 'comment_created': datetime.datetime(2020, 8, 27, 22, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 478721685, 'comment_body': 'This should be just\r\n```suggestion\r\n        return self._print(Matrix(expr.args[0]))\r\n```', 'comment_created': datetime.datetime(2020, 8, 27, 22, 4, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479268000, 'comment_body': 'Please add a class docstring', 'comment_created': datetime.datetime(2020, 8, 28, 13, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 479268228, 'comment_body': 'and docstring here', 'comment_created': datetime.datetime(2020, 8, 28, 13, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 479274464, 'comment_body': 'Yeah, will add the docstrings by tonight. ', 'comment_created': datetime.datetime(2020, 8, 28, 13, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479327128, 'comment_body': 'This comment still applies', 'comment_created': datetime.datetime(2020, 8, 28, 14, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479331515, 'comment_body': 'This `[0]` causes `Series()` with no arguments to crash', 'comment_created': datetime.datetime(2020, 8, 28, 14, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479333881, 'comment_body': 'As above, breaks if `len(args) == 0`', 'comment_created': datetime.datetime(2020, 8, 28, 14, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479338011, 'comment_body': 'I think this would be clearer with functools reduce:\r\n\r\n```python\r\nif self.is_SISO:\r\n    def mul(res, arg):\r\n        arg = arg.doit()\r\n        if res.den == arg.den:\r\n            num_, den_ = res.num + arg.num, res.den\r\n        else:\r\n            num_, den_ = res.num * arg.den + res.den * arg.num, res.den * arg.den\r\n        return TransferFunction(num_, den_, self.var)\r\nelse:\r\n    def mul(res, arg):\r\n        arg = arg.doit()\r\n        if self.num_inputs == 1:\r\n            a = [None] * self.num_outputs\r\n            for x in range(self.num_outputs):\r\n                a[x] = res.args[0][x] + arg.args[0][x]\r\n        else:\r\n            a = [[None] * self.num_inputs for _ in range(self.num_outputs)]\r\n            for row in range(self.num_outputs):\r\n                for col in range(self.num_inputs):\r\n                    a[row][col] = res.args[0][row][col] + arg.args[0][row][col]\r\n        return TransferFunctionMatrix(a, self.shape, self.var)\r\n\r\nreturn functools.reduce(self.args, mul)\r\n```', 'comment_created': datetime.datetime(2020, 8, 28, 14, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479348605, 'comment_body': 'This path needs to check that `Series` and `Parallel` are all `is_SISO`, right?', 'comment_created': datetime.datetime(2020, 8, 28, 14, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479350680, 'comment_body': ""`is_SISO` is a weird name.  A TFM with shape `(1, 1)` has a single input and output, but is not siso. I'd be inclined to either :\r\n\r\n* give this a private name like `_is_not_matrix` (so that it can be removed later)\r\n* create separate `ParallelMatrix` and `SeriesMatrix` classes - almost every method starts with `if is_SISO`, which is a big flag that you should have two different classes"", 'comment_created': datetime.datetime(2020, 8, 28, 14, 41, 44, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479401719, 'comment_body': 'Separate classes might be a good idea, but I think it would be better to do that as a different patch. \r\nAlso, (1,1) TFMatrix should be considered SISO.', 'comment_created': datetime.datetime(2020, 8, 28, 16, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 479401955, 'comment_body': '@namannimmo10 You should also add test cases for these after resolving this. ', 'comment_created': datetime.datetime(2020, 8, 28, 16, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Sc0rpi0n101', 'type': 'User'}, {'comment_id': 479404517, 'comment_body': '> Also, (1,1) TFMatrix should be considered SISO.\r\n\r\nIf this is the case, then all of the places where `is_SISO` is used need to be changed to check something else instead - because what they actually care about is ""are any of my arguments `TFMatrix` instances""?', 'comment_created': datetime.datetime(2020, 8, 28, 16, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479405736, 'comment_body': 'This worries me a little: `.doit()` is no longer quite ""doing it"", it\'s leaving the internal `Series` and `Parallel` object unexpanded. Is this intended behavior?', 'comment_created': datetime.datetime(2020, 8, 28, 16, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479682612, 'comment_body': '@eric-wieser, yes, this is intended behavior. I think `doit()` needs to be called stepwise, that is, upon calling `doit()` again, it expands those `Series` and `Parallel` objects.', 'comment_created': datetime.datetime(2020, 8, 29, 19, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479685286, 'comment_body': ""In this case, I think it's fine to use `_is_not_matrix`. \r\n\r\n> create separate `ParallelMatrix` and `SeriesMatrix` classes - almost every method starts with `if is_SISO`, which is a big flag that you should have two different classes\r\n\r\nI have had a look at other packages/libraries like python-control and Harold and what they have is a single transfer function object. Their algebraic code also does the same, that is, uses an [attribute](https://github.com/ilayn/harold/blob/517e57f119f05d0c10b1ff35f0b0e18fcdcfab39/harold/_classes.py#L658) to differentiate SISO and MIMO TF. I wanted to introduce two new classes for Transfer function matrix interconnection in the beginning, but we could also use these existing `Series` and `Parallel` classes for TFM interconnection, so I did that instead."", 'comment_created': datetime.datetime(2020, 8, 29, 20, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479685300, 'comment_body': ""I don't know enough about the `doit()` architecture to know if that's sensible (so will take your word for it). Mind putting a remark to that effect in the docstring? And maybe a test of `.doit().doit()`, if there isn't one already."", 'comment_created': datetime.datetime(2020, 8, 29, 20, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479805896, 'comment_body': 'using this diff, I get:\r\n> TypeError: reduce() arg 2 must support iteration', 'comment_created': datetime.datetime(2020, 8, 30, 19, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479806122, 'comment_body': 'I got the arguments in the wrong order, like I always do', 'comment_created': datetime.datetime(2020, 8, 30, 19, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 479824102, 'comment_body': 'just by adding this line of code seems to do nothing because `obj` is created above. I tried the following diff to remove the special cases, but I get a bunch of other test failures:\r\n``` julia\r\n                    # Now we multiply two transfer function matrices...\r\n                    # If we have two TFMs with shape (a, b) and (b, d), respectively,\r\n                    # then the resultant TFM will be of shape (a, d).\r\n                    a = [[None] * arg.num_inputs for _ in range(res.num_outputs)]\r\n                    l1, l2 = res.args[0], arg.args[0]\r\n                    if res.num_outputs == 1:\r\n                        l1 = [(a,) for a in l1]\r\n                    if arg.num_inputs == 1:\r\n                        l2 = [(a,) for a in l2]\r\n                    for i in range(res.num_outputs):\r\n                        for j in range(arg.num_inputs):\r\n                            for k in range(arg.num_outputs):\r\n                                if a[i][j] is None:     # First operation.\r\n                                    if res.num_inputs == 1:\r\n                                        a[i][j] = l1[i] * l2[k][j]\r\n                                    else:\r\n                                        a[i][j] = l1[i][k] * l2[k][j]\r\n                                else:\r\n                                    a[i][j] += l1[i][k] * l2[k][j]\r\n\r\n                    res = TransferFunctionMatrix(a, (res.num_outputs, arg.num_inputs), arg.var)\r\n```\r\nWhat do you say? I think we need to consider a bunch of other cases here also.', 'comment_created': datetime.datetime(2020, 8, 30, 22, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479824873, 'comment_body': '@oscarbenjamin, is there any way we could escape the implementation of matrix multiplication here? ', 'comment_created': datetime.datetime(2020, 8, 30, 22, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'namannimmo10', 'type': 'User'}, {'comment_id': 479957662, 'comment_body': '> seems to do nothing because obj is created above.\r\n\r\nRight, you should normalize this _before_ you construct `obj`.', 'comment_created': datetime.datetime(2020, 8, 31, 7, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 480016212, 'comment_body': 'I\'m starting to think you really do want to reuse the matrix classes here. So I\'d propose `__new__` looks like:\r\n```python\r\ndef __new__(cls, arg, shape, var):\r\n    if var is not None and not isinstance(var, Symbol):\r\n        raise TypeError(""Var must be a Symbol, not {}."".format(type(var)))\r\n    if shape is not None and not isinstance(shape, tuple):\r\n        raise TypeError(""Shape must be a tuple, not {}."".format(type(shape)))\r\n\r\n    # let matrix handle conversion from lists\r\n    matrix = ImmutableDenseMatrix(arg)\r\n\r\n    # args[2] is the flattened entries\r\n    for entry in matrix.args[2]:\r\n        if not isinstance(entry, (TransferFunction, Parallel, Series)):\r\n            raise TypeError(""Unsupported type for argument of TransferFunctionMatrix."")\r\n        if var is not None and entry.var != var:\r\n            raise ValueError(""All transfer functions should use the same complex""\r\n                        "" variable (var) of the Laplace transform."")\r\n    \r\n    if shape is not None and matrix.shape != shape:\r\n        raise ValueError(""wrong shape"")  # or a better message\r\n\r\n    obj = super(TransferFunctionMatrix, cls).__new__(cls, matrix)\r\n    obj._var = var\r\n    # etc\r\n    return obj\r\n```\r\n\r\nA big advantage of this approach is that `TransferFunctionMatrix.subs(some_variable, 0)` will just work.', 'comment_created': datetime.datetime(2020, 8, 31, 9, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 480288003, 'comment_body': ""Does `subs` not work with this class?\r\n\r\nThere is a basic problem in sympy with allowing non-Expr (even non-Basic) instances in places such as Matrix entries that are clearly written for Expr instances. I intend to eliminate all places where non-Expr instances are used in a Matrix from the codebase and deprecate having non-Expr in a Matrix.\r\n\r\nI don't think that it is a big deal to implement something like matrix multiplication which is fairly trivial although perhaps it would be better if there was a reusable function somewhere for doing that calculation. It is still a work in progress and not at all documented but I have implemented various matrix routines in such a way that they can be applied to a standard Python list of lists based on only assuming that the elements support the field operations `+`, `-`, `*` and `/` so do not need to Expr or even Basic. My intention was that it should not be necessary to subclass Matrix and insert objects that don't belong there just to reuse the routines for standard matrix operations. Matrix multiplication is handled by this function:\r\nhttps://github.com/sympy/sympy/blob/500f3c9a75020adc7239b50d4deac6144f342396/sympy/polys/domainmatrix.py#L220-L226\r\nThat implementation is optimised for large matrices and cheap elementary arithmetic (e.g. `int` or `mpz` as the elements)."", 'comment_created': datetime.datetime(2020, 8, 31, 17, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 480368353, 'comment_body': ""> Does subs not work with this class?\r\n\r\nMy impression was that `subs` would not recurse into list arguments, but perhaps I missed a sympify somewhere.\r\n\r\nAt any rate, my suggestion above is more about letting the matrix constructor handle the normalization, and less about the multiplication itself. The thing I don't like about this PR is how the special cases for `TFM([tf])` vs `TFM([[tf]])` are in every single method, when they should just be in the constructor."", 'comment_created': datetime.datetime(2020, 8, 31, 20, 3, 15, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 480369110, 'comment_body': ""> I intend to eliminate all places where non-Expr instances are used in a Matrix from the codebase and deprecate having non-Expr in a Matrix.\r\n\r\nIf you do this, I'd argue that it might be worth introducing a base class that works over non-exprs too. In my mind, this control stuff is really trying to work with a new `TransferFunctionExpr` type, just like matrices work with a `Matexpr` type."", 'comment_created': datetime.datetime(2020, 8, 31, 20, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}, {'comment_id': 480404152, 'comment_body': ""> I'd argue that it might be worth introducing a base class\r\n\r\nThe Matrix class is already arranged into a bunch of different base classes:\r\n```julia\r\nIn [1]: Matrix.mro()                                                                                                                                          \r\nOut[1]: \r\n[sympy.matrices.dense.MutableDenseMatrix,\r\n sympy.matrices.dense.DenseMatrix,\r\n sympy.matrices.matrices.MatrixBase,\r\n sympy.matrices.matrices.MatrixDeprecated,\r\n sympy.matrices.matrices.MatrixCalculus,\r\n sympy.matrices.matrices.MatrixEigen,\r\n sympy.matrices.matrices.MatrixSubspaces,\r\n sympy.matrices.matrices.MatrixReductions,\r\n sympy.matrices.matrices.MatrixDeterminant,\r\n sympy.matrices.common.MatrixCommon,\r\n sympy.matrices.common.MatrixArithmetic,\r\n sympy.matrices.common.MatrixOperations,\r\n sympy.matrices.common.MatrixProperties,\r\n sympy.matrices.common.MatrixSpecial,\r\n sympy.matrices.common.MatrixShaping,\r\n sympy.matrices.common.MatrixRequired,\r\n sympy.printing.defaults.Printable,\r\n object]\r\n```\r\nIt's just not really clear how you could make use of any of those classes separately."", 'comment_created': datetime.datetime(2020, 8, 31, 21, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': 'bea4dead1f73b4a330bd2d56b8be20b382ded1ee', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fee062f7fac80f809387d99b1886d2d0d3c206e1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0d6824fbff17e3aeecdfdfa50302dd6d46c8110', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52031aa49802f65c1a96a7ffb1a13460fff1f3e9', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67f0342e1e5d6af9a99e0409246ef4cd0191781e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '862dfefe3d862a492f06fc438f305c0a1de12029', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb1e375f0f777c468682fef96858c03a000261a6', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '490ee3ac6319cf700d0353c3391bedd88e3f3b96', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8de54042aba8af1f33b868d3458ba630a5e8d68', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017a75e558c5fae6ee4bf15def743402c4708945', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cda75975e3851e7e392dce5799d145162e40e979', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69b0bcaf8e6cb76ed0e6badf12121ac31ba947b7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d463de45f00f757d4a42bf6996391083b252576', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36e53efc73b7a8ac804c184cebe77a8d33805004', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '932606bd8b7295fd25ede50f3f97120db8516824', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '880fb24190ba3b8bae9cfaa90565cb51345addbe', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'faad68410f5d99115c1af5a8b553fc3ab8264f43', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7cc4c9eea3d50e4ed6d9644a24d315c5dcf1494b', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8dae74840c1407f7cdff62bf331d8db76a5693', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa73aec1f6ef9a9b675c6f5c8993cc1070c13ca', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '481e692d0235b937a9acd10861bff993c81f78b1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77eff9a43b4d45e9a990d95d13d1dff0c566d771', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb7e7f52e2635ef4b8aed349ae49c6add2862bba', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10e3f86a34e3fb785ded0e5e00c7eafa0d977b8c', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e443ed4aff436e1cd9e1cd433217ea2b854ebb1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7fe3e25be8791147597f02af6799b45b4bc2b6d', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e138dea9f7b0aff453af1fc3b71a6d459c817078', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e81d7ad929ef14b6b6b94df75f87be4f7b66e1a7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42d890f4d6faeb8cb956d69a716e73db8923e1c0', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5394f264b511c0dc0d04a7ce1bd62ab271ed20e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bb809cd005df5a3eb7deb1e355c84a885818394', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '515346aa482c30e2f92c8118b60bc2657e250a18', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b2a12623a243ccd34598dccc6c593b3544ebf56', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c570e04dd4433fda757d0ce6106d299a32f98ff7', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d2f192e6ba1c523b84952bd2b97ede3f7516328', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b8aa82324b1b713ec69dc75867d33a30c4b39db', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a4c3c0e39ac0d2e571e4f55b8dd636f3b28f25', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb606eb38746abb9b19d92229abaa196ff1c16e', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}]",Naman Gera,43007653,namangera15@gmail.com,User,,47,,0,62
425655967,Add physics.control as a valid submodule,,True,87,https://api.github.com/repos/sympy/sympy-bot/pulls/87,https://github.com/sympy/sympy-bot/pull/87,closed,1,0,1,1,6,0,0,0,[],2020-05-31 19:10:06+00:00,2020-06-01 19:16:27+00:00,86781.0,"1 day, 0:06:21",[],"[{'commit_sha': 'bf0e69da5acb48c2ae2e44cacf5d67f7e2de1a78', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}]",Naman Gera,43007653,namangera15@gmail.com,User,,47,,0,62
475231900,[GSoC] Modify docs of is_stable method in TransferFunction class,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->


#### Brief description of what is fixed or changed
Adds the comment in an appropriate position.

#### Other comments

![Screenshot from 2020-08-28 12-44-30](https://user-images.githubusercontent.com/43007653/91532737-5d37eb00-e92c-11ea-9473-b248c95c81e6.png)


#### Release Notes

<!-- Write the release notes for this release below. See
https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more information
on how to write release notes. The bot will check your release notes
automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->",True,20008,https://api.github.com/repos/sympy/sympy/pulls/20008,https://github.com/sympy/sympy/pull/20008,closed,1,3,1,1,10,1,2,0,"[{'name': 'Documentation'}, {'name': 'GSoC'}]",2020-08-28 07:17:44+00:00,2020-08-30 07:34:49+00:00,173825.0,"2 days, 0:17:05","[{'comment_id': 479690329, 'comment_body': 'I think\r\n```\r\n>>> # not enough info about the symbols to determine stability\r\n```\r\nwould also work here, as would making this not be a comment at all and adding a trailing newline\r\n```\r\nNote this returns None if there is not enough info about the symbols to determine stability\r\n\r\n```', 'comment_created': datetime.datetime(2020, 8, 29, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'eric-wieser', 'type': 'User'}]","[{'commit_sha': 'f574ca42852f18ef1c9c33d4ddee45f1f87900c1', 'committer_username': 'namannimmo10', 'committer_name': 'Naman Gera', 'committer_email': 'namangera15@gmail.com', 'commit_date': datetime.datetime(2018, 9, 5, 15, 12, 45, tzinfo=datetime.timezone.utc)}]",Naman Gera,43007653,namangera15@gmail.com,User,,47,,0,62

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4370,12719,292,1320,58702,5125,14,715,"[{'id': 657519717, 'number': 21545, 'closed': datetime.datetime(2021, 5, 30, 10, 54, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 29, 19, 2, 54, tzinfo=datetime.timezone.utc), 'time_taken': 57084.0, 'time_delta': '15:51:24', 'additions': 9, 'deletions': 3, 'state': 'closed'}, {'id': 507028024, 'number': 20304, 'closed': datetime.datetime(2023, 6, 18, 13, 37, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 20, 18, 56, 53, tzinfo=datetime.timezone.utc), 'time_taken': 83875247.0, 'time_delta': '970 days, 18:40:47', 'additions': 42, 'deletions': 0, 'state': 'closed'}, {'id': 475231900, 'number': 20008, 'closed': datetime.datetime(2020, 8, 30, 7, 34, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 7, 17, 44, tzinfo=datetime.timezone.utc), 'time_taken': 173825.0, 'time_delta': '2 days, 0:17:05', 'additions': 1, 'deletions': 3, 'state': 'closed'}, {'id': 471591346, 'number': 19994, 'closed': datetime.datetime(2020, 8, 22, 16, 33, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 12, 0, tzinfo=datetime.timezone.utc), 'time_taken': 102815.0, 'time_delta': '1 day, 4:33:35', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 464204378, 'number': 19906, 'closed': datetime.datetime(2020, 8, 9, 23, 45, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 18, 49, 46, tzinfo=datetime.timezone.utc), 'time_taken': 276951.0, 'time_delta': '3 days, 4:55:51', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 463729460, 'number': 19896, 'closed': datetime.datetime(2020, 8, 27, 21, 8, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 1, 42, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1884370.0, 'time_delta': '21 days, 19:26:10', 'additions': 181, 'deletions': 3, 'state': 'closed'}, {'id': 448567569, 'number': 19761, 'closed': datetime.datetime(2021, 7, 2, 18, 9, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 0, 2, 56, tzinfo=datetime.timezone.utc), 'time_taken': 30564401.0, 'time_delta': '353 days, 18:06:41', 'additions': 1847, 'deletions': 197, 'state': 'closed'}, {'id': 421249341, 'number': 19390, 'closed': datetime.datetime(2020, 7, 11, 19, 49, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 9, 28, 16, tzinfo=datetime.timezone.utc), 'time_taken': 4443702.0, 'time_delta': '51 days, 10:21:42', 'additions': 2225, 'deletions': 2, 'state': 'closed'}, {'id': 386536395, 'number': 18828, 'closed': datetime.datetime(2020, 3, 11, 13, 9, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 11, 7, 56, 46, tzinfo=datetime.timezone.utc), 'time_taken': 18793.0, 'time_delta': '5:13:13', 'additions': 1, 'deletions': 2, 'state': 'closed'}, {'id': 373509248, 'number': 18633, 'closed': datetime.datetime(2020, 2, 11, 11, 3, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 11, 7, 27, 12, tzinfo=datetime.timezone.utc), 'time_taken': 12964.0, 'time_delta': '3:36:04', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 372818528, 'number': 18612, 'closed': datetime.datetime(2020, 2, 13, 21, 24, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 9, 11, 31, 49, tzinfo=datetime.timezone.utc), 'time_taken': 381160.0, 'time_delta': '4 days, 9:52:40', 'additions': 60, 'deletions': 115, 'state': 'closed'}, {'id': 372507483, 'number': 18601, 'closed': datetime.datetime(2020, 2, 8, 11, 15, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 7, 16, 56, 1, tzinfo=datetime.timezone.utc), 'time_taken': 65965.0, 'time_delta': '18:19:25', 'additions': 10, 'deletions': 6, 'state': 'closed'}, {'id': 369075113, 'number': 18517, 'closed': datetime.datetime(2022, 2, 7, 20, 33, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 30, 13, 31, 49, tzinfo=datetime.timezone.utc), 'time_taken': 63874921.0, 'time_delta': '739 days, 7:02:01', 'additions': 15, 'deletions': 2, 'state': 'closed'}, {'id': 367817951, 'number': 18498, 'closed': datetime.datetime(2020, 1, 28, 17, 30, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 28, 4, 21, 30, tzinfo=datetime.timezone.utc), 'time_taken': 47362.0, 'time_delta': '13:09:22', 'additions': 27, 'deletions': 3, 'state': 'closed'}, {'id': 367154817, 'number': 18463, 'closed': datetime.datetime(2020, 1, 26, 13, 31, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 25, 21, 3, 44, tzinfo=datetime.timezone.utc), 'time_taken': 59247.0, 'time_delta': '16:27:27', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 366019173, 'number': 18436, 'closed': datetime.datetime(2020, 7, 11, 19, 50, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 22, 19, 16, 7, tzinfo=datetime.timezone.utc), 'time_taken': 14776456.0, 'time_delta': '171 days, 0:34:16', 'additions': 1313, 'deletions': 0, 'state': 'closed'}, {'id': 365686155, 'number': 18429, 'closed': datetime.datetime(2020, 1, 22, 8, 29, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 22, 6, 25, 8, tzinfo=datetime.timezone.utc), 'time_taken': 7471.0, 'time_delta': '2:04:31', 'additions': 54, 'deletions': 2, 'state': 'closed'}, {'id': 364862313, 'number': 18409, 'closed': datetime.datetime(2020, 1, 21, 23, 46, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 20, 14, 28, 50, tzinfo=datetime.timezone.utc), 'time_taken': 119843.0, 'time_delta': '1 day, 9:17:23', 'additions': 5, 'deletions': 7, 'state': 'closed'}, {'id': 364409972, 'number': 18373, 'closed': datetime.datetime(2020, 1, 19, 13, 48, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 18, 9, 35, 40, tzinfo=datetime.timezone.utc), 'time_taken': 101561.0, 'time_delta': '1 day, 4:12:41', 'additions': 2, 'deletions': 8, 'state': 'closed'}, {'id': 364000571, 'number': 18362, 'closed': datetime.datetime(2020, 1, 26, 20, 56, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 17, 7, 10, 17, tzinfo=datetime.timezone.utc), 'time_taken': 827170.0, 'time_delta': '9 days, 13:46:10', 'additions': 16, 'deletions': 20, 'state': 'closed'}, {'id': 362974249, 'number': 18339, 'closed': datetime.datetime(2020, 1, 17, 7, 0, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 15, 6, 13, 43, tzinfo=datetime.timezone.utc), 'time_taken': 175632.0, 'time_delta': '2 days, 0:47:12', 'additions': 11, 'deletions': 7, 'state': 'closed'}, {'id': 362755795, 'number': 18335, 'closed': datetime.datetime(2020, 1, 17, 9, 19, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 14, 17, 32, 57, tzinfo=datetime.timezone.utc), 'time_taken': 229604.0, 'time_delta': '2 days, 15:46:44', 'additions': 48, 'deletions': 2, 'state': 'closed'}, {'id': 362484997, 'number': 18329, 'closed': datetime.datetime(2020, 5, 12, 11, 42, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 14, 7, 24, 12, tzinfo=datetime.timezone.utc), 'time_taken': 10297125.0, 'time_delta': '119 days, 4:18:45', 'additions': 36, 'deletions': 3, 'state': 'closed'}, {'id': 361746043, 'number': 18302, 'closed': datetime.datetime(2020, 1, 12, 18, 35, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 11, 16, 58, 26, tzinfo=datetime.timezone.utc), 'time_taken': 92216.0, 'time_delta': '1 day, 1:36:56', 'additions': 117, 'deletions': 328, 'state': 'closed'}, {'id': 361480715, 'number': 18286, 'closed': datetime.datetime(2020, 1, 11, 5, 0, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 10, 14, 41, 6, tzinfo=datetime.timezone.utc), 'time_taken': 51558.0, 'time_delta': '14:19:18', 'additions': 238, 'deletions': 282, 'state': 'closed'}, {'id': 360939160, 'number': 18275, 'closed': datetime.datetime(2020, 1, 11, 8, 23, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 9, 12, 39, 12, tzinfo=datetime.timezone.utc), 'time_taken': 157457.0, 'time_delta': '1 day, 19:44:17', 'additions': 11, 'deletions': 22, 'state': 'closed'}, {'id': 360396726, 'number': 18264, 'closed': datetime.datetime(2020, 1, 8, 20, 2, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 8, 10, 52, 52, tzinfo=datetime.timezone.utc), 'time_taken': 32962.0, 'time_delta': '9:09:22', 'additions': 14, 'deletions': 29, 'state': 'closed'}, {'id': 359692716, 'number': 18250, 'closed': datetime.datetime(2020, 1, 7, 15, 22, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 6, 20, 4, 11, tzinfo=datetime.timezone.utc), 'time_taken': 69499.0, 'time_delta': '19:18:19', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 359333271, 'number': 18240, 'closed': None, 'created': datetime.datetime(2020, 1, 5, 20, 23, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 96, 'deletions': 2, 'state': 'open'}, {'id': 359182652, 'number': 18222, 'closed': datetime.datetime(2020, 1, 4, 12, 24, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 1, 4, 4, 44, 59, tzinfo=datetime.timezone.utc), 'time_taken': 27595.0, 'time_delta': '7:39:55', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 358427133, 'number': 18192, 'closed': datetime.datetime(2020, 1, 21, 21, 28, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 31, 22, 1, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1812425.0, 'time_delta': '20 days, 23:27:05', 'additions': 13, 'deletions': 8, 'state': 'closed'}, {'id': 358355814, 'number': 18187, 'closed': datetime.datetime(2019, 12, 31, 15, 17, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 31, 13, 15, 35, tzinfo=datetime.timezone.utc), 'time_taken': 7323.0, 'time_delta': '2:02:03', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 357771561, 'number': 18169, 'closed': datetime.datetime(2020, 1, 5, 11, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 29, 17, 54, 49, tzinfo=datetime.timezone.utc), 'time_taken': 581171.0, 'time_delta': '6 days, 17:26:11', 'additions': 65, 'deletions': 4, 'state': 'closed'}, {'id': 357316730, 'number': 18149, 'closed': datetime.datetime(2019, 12, 29, 0, 2, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 27, 20, 4, 13, tzinfo=datetime.timezone.utc), 'time_taken': 100683.0, 'time_delta': '1 day, 3:58:03', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 356407421, 'number': 18109, 'closed': datetime.datetime(2019, 12, 26, 12, 13, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 23, 17, 51, 53, tzinfo=datetime.timezone.utc), 'time_taken': 238921.0, 'time_delta': '2 days, 18:22:01', 'additions': 33, 'deletions': 17, 'state': 'closed'}, {'id': 356339570, 'number': 18107, 'closed': datetime.datetime(2020, 1, 26, 13, 33, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 23, 14, 0, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2935967.0, 'time_delta': '33 days, 23:32:47', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 356109162, 'number': 18100, 'closed': datetime.datetime(2019, 12, 23, 0, 7, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 22, 18, 9, 14, tzinfo=datetime.timezone.utc), 'time_taken': 21512.0, 'time_delta': '5:58:32', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 356024752, 'number': 18092, 'closed': datetime.datetime(2019, 12, 23, 18, 0, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 21, 19, 23, 41, tzinfo=datetime.timezone.utc), 'time_taken': 167795.0, 'time_delta': '1 day, 22:36:35', 'additions': 0, 'deletions': 9, 'state': 'closed'}]"
140963701,sympy-bot,sympy/sympy-bot,Python,11,22,26,5,409,40,5,4,"[{'id': 425655967, 'number': 87, 'closed': datetime.datetime(2020, 6, 1, 19, 16, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 31, 19, 10, 6, tzinfo=datetime.timezone.utc), 'time_taken': 86781.0, 'time_delta': '1 day, 0:06:21', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
