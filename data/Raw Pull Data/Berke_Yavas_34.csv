pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
992499540,[GSoC 2022] spng encoder/decoder added as optional png codec,"**Merge with extra**: https://github.com/opencv/opencv_extra/pull/995

This pull request contains the implementation of PngEncoder using spng library. One thing that I am not sure about is the CMake configuration. I appreciate any help on CMake configuration

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [X] I agree to contribute to the project under Apache 2 License.
- [X] To the best of my knowledge, the proposed patch is not based on a code under GPL or another license that is incompatible with OpenCV
- [X] The PR is proposed to the proper branch
- [X] There is a reference to the original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake
",True,22226,https://api.github.com/repos/opencv/opencv/pulls/22226,https://github.com/opencv/opencv/pull/22226,closed,8708,13,18,3,32,45,4,0,"[{'name': 'feature'}, {'name': 'category: imgcodecs'}, {'name': 'GSoC'}, {'name': 'category: 3rdparty'}]",2022-07-10 21:12:30+00:00,2022-09-05 10:25:41+00:00,4885991.0,"56 days, 13:13:11","[{'comment_id': 919304490, 'comment_body': ""1. why such a big buffer for the whole image is allocated?\r\n2. it's not deallocated, it's a memory leak. Please, do not allocate memory manually unless it's necessary. Use std::vector."", 'comment_created': datetime.datetime(2022, 7, 12, 18, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 919305115, 'comment_body': 'is it necessary to call this function? You decode the image row by row after it in any case.', 'comment_created': datetime.datetime(2022, 7, 12, 18, 55, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 919306349, 'comment_body': 'the code is correct, but still quite difficult to read. Could you please use explicit `if (ret == SPNG_OK) { ... }` to make the code easier to read? ', 'comment_created': datetime.datetime(2022, 7, 12, 18, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 919307651, 'comment_body': 'where is ctx released?', 'comment_created': datetime.datetime(2022, 7, 12, 18, 58, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 919308710, 'comment_body': 'the API is unstable. You call close() after data is read. User may want, for some reason, call readData several times. ', 'comment_created': datetime.datetime(2022, 7, 12, 18, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 919310311, 'comment_body': 'I do not see where proper encoding to memory is implemented. SPngEncoder::write() only writes image to disk', 'comment_created': datetime.datetime(2022, 7, 12, 19, 2, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 919427759, 'comment_body': 'spng_decode_row() requires the decoder to be initialized by calling spng_decode_image() with the SPNG_DECODE_PROGRESSIVE flag set. This function call does not decode image. It just sets internal flags. It is necessary.', 'comment_created': datetime.datetime(2022, 7, 12, 21, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 919430789, 'comment_body': 'If if understand it correctly, there are related tests in OpenCV for that. It encodes to the buffer and compares with some Vector.  All the test cases is passed. \r\n\r\nThe answer to your question is in line 407, it checks if the encoder should write it to buffer or file. I copied that part from the libpng codec.\r\n\r\n```cpp\r\n            if( m_buf )\r\n            {\r\n                spng_set_png_stream(ctx,(spng_rw_fn*)writeDataToBuf, this);\r\n            }\r\n            else\r\n            {\r\n                f = fopen( m_filename.c_str(), ""wb"" );\r\n                if( f )\r\n                    spng_set_png_file( ctx, f );\r\n            }\r\n```\r\n\r\nHere spng_set_png_stream function call does that.', 'comment_created': datetime.datetime(2022, 7, 12, 21, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 919435156, 'comment_body': 'The following lines should be\r\n\r\n```cpp\r\n        if(!ctx) {\r\n            spng_ctx_free(ctx);\r\n            return false;\r\n        }\r\n  ```\r\n  \r\n  I missed that. Will fix it!\r\n  \r\n  Done!', 'comment_created': datetime.datetime(2022, 7, 12, 21, 18, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 919440970, 'comment_body': ""I don't see a reason why a user wants to read the same data twice. The current png decoder is implemented in this way too. After reading the data, the user can just copy it.\r\n\r\nReference to the current PNG codec.\r\n```\r\nhttps://github.com/opencv/opencv/blob/4.x/modules/imgcodecs/src/grfmt_png.cpp#L307\r\n```\r\n\r\n```cpp\r\nMat mat; \r\ndecoder.readData(mat)\r\nMat matOther;\r\nmatOther = mat;\r\n``` \r\n\r\nUsers should favor that in case of performance. But I think you are right. If the user calls twice in a row, its behavior is undefined. We also should remove this from the current png codec implementation too.\r\n\r\n"", 'comment_created': datetime.datetime(2022, 7, 12, 21, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 919517711, 'comment_body': 'This part of the code is left when I am trying to do the necessary conversion of color formats. That was a bad mistake :). Sorry. Fixed.', 'comment_created': datetime.datetime(2022, 7, 12, 23, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 919517864, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 7, 12, 23, 46, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 919518995, 'comment_body': 'I changed it to\r\n```cpp\r\n        if(!result)\r\n            close();\r\n```\r\n\r\nShould I create a quick patch for the current PNG decoder too?', 'comment_created': datetime.datetime(2022, 7, 12, 23, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 925217966, 'comment_body': 'Please check if `spng_ctx_free` with NULL is expected behaviour.', 'comment_created': datetime.datetime(2022, 7, 20, 6, 24, 12, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 925219278, 'comment_body': 'Why?', 'comment_created': datetime.datetime(2022, 7, 20, 6, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 925454074, 'comment_body': '```cpp\r\nvoid spng_ctx_free(spng_ctx *ctx)\r\n{\r\n    if(ctx == NULL) return;\r\n```\r\n\r\nIt is expected behavior but it seems unnecessary. For the future releases of spng, it might be useful to keep this line.', 'comment_created': datetime.datetime(2022, 7, 20, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 925457699, 'comment_body': 'Author of the libspng wrote this in the example for the setting the chunk limit.\r\n\r\n```cpp\r\n    /* Set memory usage limits for storing standard and unknown chunks,\r\n       this is important when reading untrusted files! */\r\n```\r\n\r\nI thought it was a good idea. But this limits the chunks size. Now I think it is better if I remove it. This methods equivalent is `png_set_chunk_malloc_max`.\r\n\r\nShould i keep this or remove it? ', 'comment_created': datetime.datetime(2022, 7, 20, 10, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 925488064, 'comment_body': ""I do not have strong opinion here. It's ok to have chunk limit. Please add note why you use the particular value or link to original code, if it's inherited behaviour."", 'comment_created': datetime.datetime(2022, 7, 20, 11, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 949853211, 'comment_body': 'I propose to uncomment the line to not have 2 codecs at a time.', 'comment_created': datetime.datetime(2022, 8, 19, 6, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 949873557, 'comment_body': 'This was intended to surpress CMake warning while running the workflow. I made libspng default png codec to test in the workflow. Before merge, i will uncomment that line and set `OCV_OPTION(WITH_SPNG ""Include SPNG support"" OFF`. So we can add libspng as optional codec, not default as we discussed in one of the GSoC meetings with the Vadim and Suleyman.', 'comment_created': datetime.datetime(2022, 8, 19, 7, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 950010018, 'comment_body': 'broken header', 'comment_created': datetime.datetime(2022, 8, 19, 9, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950010981, 'comment_body': 'revert', 'comment_created': datetime.datetime(2022, 8, 19, 9, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950011545, 'comment_body': 'This changes the existed behaviour (like ignoring of system libpng or 3rdparty code from the source).\r\n\r\nThis contradicts with PR\'s title: ""... as optional png codec"".', 'comment_created': datetime.datetime(2022, 8, 19, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950062989, 'comment_body': 'dead code?', 'comment_created': datetime.datetime(2022, 8, 19, 10, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950067524, 'comment_body': 'What if:\r\n- WITH_SPNG = 1\r\n- HAVE_SPNG = 0\r\n', 'comment_created': datetime.datetime(2022, 8, 19, 10, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950068507, 'comment_body': 'Above we have such mess with `set(HAVE_SPNG NO)`.\r\n\r\nCode should be separated and not messed.', 'comment_created': datetime.datetime(2022, 8, 19, 10, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950068922, 'comment_body': 'avoid using indentation in namespaces', 'comment_created': datetime.datetime(2022, 8, 19, 10, 58, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950069456, 'comment_body': 'Why?', 'comment_created': datetime.datetime(2022, 8, 19, 10, 59, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950069753, 'comment_body': 'avoid indentation in namespaces', 'comment_created': datetime.datetime(2022, 8, 19, 10, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950070571, 'comment_body': 'License header is defined in contribution guidelines.', 'comment_created': datetime.datetime(2022, 8, 19, 11, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950071926, 'comment_body': '`#elif defined(HAVE_PNG)`', 'comment_created': datetime.datetime(2022, 8, 19, 11, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 950073253, 'comment_body': ""It is better to have single file per test case (you don't want to debug issue of 15th image of the test)."", 'comment_created': datetime.datetime(2022, 8, 19, 11, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 953380048, 'comment_body': ""@alalek, I already investigated this issue. Since it's many tiny files, one big file is probably preferable for now. I suggest to merge as-is"", 'comment_created': datetime.datetime(2022, 8, 24, 6, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 955841974, 'comment_body': 'This is some kind of general rule for writing tests. All-in-one test is anti-pattern.\r\n\r\nThey should be spitted:\r\n- again, as I mentioned - we need possibility to debug exact case without skipping other 10 cases (debugging code is time consuming task, no need to make it harder)\r\n- test code may do nothing if `glob()` returns nothing due to misconfiguration - and we will not see this in test logs\r\n- all-in-one approach blocks test filtering, disabling', 'comment_created': datetime.datetime(2022, 8, 26, 9, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 955843933, 'comment_body': '> `,`\r\n\r\nDoes it work at all? There is no commas for arguments in CMake scripts syntax.', 'comment_created': datetime.datetime(2022, 8, 26, 9, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 955844434, 'comment_body': '> ZLIB_INCLUDE_DIRS\r\n\r\nThere is dependency on ZLIB, which could be disabled.\r\nNeed to properly handle case if zlib is disabled.', 'comment_created': datetime.datetime(2022, 8, 26, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 955863118, 'comment_body': 'Please minimize amount of changed code (to avoid merge hell):\r\n\r\n```\r\nif(WITH_SPNG)\r\n   ... new code\r\nendif()\r\nif(NOT HAVE_SPNG AND WITH_PNG)\r\n   ... existed untouched code ...\r\nendif()\r\n```\r\n```', 'comment_created': datetime.datetime(2022, 8, 26, 9, 39, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 955868047, 'comment_body': '@alalek, instead of putting generic comments, could you please put the snippet what you have in mind? I personally cannot reverse engineer it from your comment', 'comment_created': datetime.datetime(2022, 8, 26, 9, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 955884827, 'comment_body': ""If it doesn't work then probably it is just not needed at all.\r\nSo `${CURR_INCLUDE_DIR}` could be dropped completely."", 'comment_created': datetime.datetime(2022, 8, 26, 10, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 956476110, 'comment_body': 'Is not this handled in FindLibsGrfmt CMakeList already?', 'comment_created': datetime.datetime(2022, 8, 26, 22, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 956641498, 'comment_body': 'ZLIB is always ""required"" in this file.', 'comment_created': datetime.datetime(2022, 8, 27, 23, 26, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 956641639, 'comment_body': 'Why do we need this `if` check?', 'comment_created': datetime.datetime(2022, 8, 27, 23, 29, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 956641665, 'comment_body': '> `pngsuite/`\r\n\r\nis a common prefix here. It could be moved to the test code', 'comment_created': datetime.datetime(2022, 8, 27, 23, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 956641766, 'comment_body': '> PngSUiteFiles\r\n\r\nPngSuiteFiles or `/*nothing*/` (to avoid any prefix with duplicate naming).', 'comment_created': datetime.datetime(2022, 8, 27, 23, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 956692905, 'comment_body': 'Can you please provide more information about how to handle it? I am not that familiar with CMake and dependency handling. @alalek ', 'comment_created': datetime.datetime(2022, 8, 28, 8, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}]","[{'commit_sha': '3929e26276c247660dcd5f2eb5ced04ad35e8711', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51855448643131608e93d2d35f722182a79cde19', 'committer_username': 'asmorkalov', 'committer_name': 'Alexander Smorkalov', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 11, 11, 21, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4a6e1fd4dcde1a1287395d6f15ea2a000f4192a', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}]",Berke,44481097,iamberkeyavas@gmail.com,User,,11,,4,14
1025897326,"#22226 libspng, pngsuite and png image for perf test",,True,995,https://api.github.com/repos/opencv/opencv_extra/pulls/995,https://github.com/opencv/opencv_extra/pull/995,closed,32448,0,354,1,0,0,0,1,[],2022-08-14 22:20:55+00:00,2022-09-05 10:26:30+00:00,1857935.0,"21 days, 12:05:35",[],"[{'commit_sha': 'a4333feddb93f597d9c118a31d062429a72cb939', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}]",Berke,44481097,iamberkeyavas@gmail.com,User,,11,,4,14
1019067986,update libjpeg-turbo version to 2.1.3,"### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or another license that is incompatible with OpenCV
- [x] The PR is proposed to the proper branch
- [x] There is a reference to the original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake
",True,22344,https://api.github.com/repos/opencv/opencv/pulls/22344,https://github.com/opencv/opencv/pull/22344,closed,70668,182,196,1,7,0,1,1,[{'name': 'category: 3rdparty'}],2022-08-05 20:32:20+00:00,2022-08-12 10:27:52+00:00,568532.0,"6 days, 13:55:32",[],"[{'commit_sha': '06431655197b1cec869d3291436b0610dd15e1a7', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}]",Berke,44481097,iamberkeyavas@gmail.com,User,,11,,4,14
1025124715,[GSoC 2022] nasm/simd support for libjpeg-turbo,"### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or another license that is incompatible with OpenCV
- [x] The PR is proposed to the proper branch
- [x] There is a reference to the original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake

Related with #22344
",True,22372,https://api.github.com/repos/opencv/opencv/pulls/22372,https://github.com/opencv/opencv/pull/22372,closed,173,13,4,2,14,37,4,0,"[{'name': 'optimization'}, {'name': 'category: imgcodecs'}, {'name': 'GSoC'}, {'name': 'category: 3rdparty'}]",2022-08-12 16:26:59+00:00,2022-09-14 06:08:28+00:00,2814089.0,"32 days, 13:41:29","[{'comment_id': 944628642, 'comment_body': 'Need this to set right status for SIMD Support in the line 1353', 'comment_created': datetime.datetime(2022, 8, 12, 16, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 945515898, 'comment_body': 'It makes sense to benchmark imdecode and imencode. They do not read from /write to disk and benchmarks shows pure time.', 'comment_created': datetime.datetime(2022, 8, 15, 8, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 946479858, 'comment_body': 'The macro is not used in the patch.', 'comment_created': datetime.datetime(2022, 8, 16, 8, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 946493481, 'comment_body': 'OpenCV already has processor options detector in CMake. Please reuse variables like X86_64, ARM, PPC64 and others from https://github.com/opencv/opencv/blob/4.x/cmake/OpenCVDetectCXXCompiler.cmake.', 'comment_created': datetime.datetime(2022, 8, 16, 8, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 946494250, 'comment_body': 'Pay attention that NEON, AVX512, etc support are managed with dedicated flags.', 'comment_created': datetime.datetime(2022, 8, 16, 8, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 946521997, 'comment_body': 'It is actually used by simd/CMakeLists.txt [here](https://github.com/opencv/opencv/blob/6aa3e9ff63fcf5e584d9366543005ed07cdc9908/3rdparty/libjpeg-turbo/src/simd/CMakeLists.txt#L363) . I did not want to modify that file. That is why I included it inside that CMakeList.', 'comment_created': datetime.datetime(2022, 8, 16, 9, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 947250847, 'comment_body': '> Pay attention that NEON, AVX512, etc support are managed with dedicated flags.\r\n\r\nCould you eloborate more this? I did not get it what you mean by that.', 'comment_created': datetime.datetime(2022, 8, 16, 21, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 947251019, 'comment_body': 'I carried this into simd/CMakeList', 'comment_created': datetime.datetime(2022, 8, 16, 21, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 947532916, 'comment_body': 'https://github.com/opencv/opencv/wiki/CPU-optimizations-build-options', 'comment_created': datetime.datetime(2022, 8, 17, 7, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 947542588, 'comment_body': 'Briefly, NEON,  AVX2, AVX512, etc support are not guaranteed on all CPUs. There are Atom chips, even without AVX2 support. The same for NEON. Some NVIDIA Tegra chips has arm-v7a architecture, but does not implement NEON extension. NEON code will raise SIGILL here.\r\n`CPU_BASELINE_FINAL` contains all hardware specific optimizations that are enabled by default and does not participate in dynamic dispatch. libjpeg turbo should use the list of options to enable proper optimizations.', 'comment_created': datetime.datetime(2022, 8, 17, 7, 25, 1, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 947544155, 'comment_body': 'For example you can take a look on Carotene HAL management for ARM: https://github.com/opencv/opencv/blob/9fcf0152140c449f74678add820e81de3e69b8b0/CMakeLists.txt#L880', 'comment_created': datetime.datetime(2022, 8, 17, 7, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 947783361, 'comment_body': 'If I understand your concern correctly, NEON and others are handled by libjpeg-turbo simd/cmakelists. \r\n\r\nFor example, [here](https://github.com/opencv/opencv/blob/79afd80817c8d84484052ae06e64d61db202d27a/3rdparty/libjpeg-turbo/src/simd/CMakeLists.txt#L218) NEON support are handled below. \r\n\r\nI will investigave further. Thanks for the link.', 'comment_created': datetime.datetime(2022, 8, 17, 10, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 948687358, 'comment_body': 'Looks strange. Why do you need this?', 'comment_created': datetime.datetime(2022, 8, 18, 6, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 948703209, 'comment_body': 'OpenCV CMake system does not support build for several architectures in a single step. I do not think that the check is required.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 948705460, 'comment_body': '`CMAKE_SIZEOF_VOID_P` is already taken in account when X86_64 and X86 are set. You do not need to warry about it here. See https://github.com/opencv/opencv/blob/9fcf0152140c449f74678add820e81de3e69b8b0/cmake/OpenCVDetectCXXCompiler.cmake#L121', 'comment_created': datetime.datetime(2022, 8, 18, 6, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 948705962, 'comment_body': 'The same for ARM as for x86. See https://github.com/opencv/opencv/blob/9fcf0152140c449f74678add820e81de3e69b8b0/cmake/OpenCVDetectCXXCompiler.cmake#L121', 'comment_created': datetime.datetime(2022, 8, 18, 6, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 948707024, 'comment_body': 'X86, X86_64, AARCH64, etc flags are set for Apple systems too. You do not need to handle it separately.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 948707329, 'comment_body': 'On Windows as well.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 948714572, 'comment_body': ""OpenCV has `CV_DISABLE_OPTIMIZATION` flag in CMake to force disable platform specific optimizations. It's used for debugging purpose mostly, to catch SIMD path misbehavior and compare performance. I propose to replace default value by `(NOT CV_DISABLE_OPTIMIZATION)` how it's done for Carotete: https://github.com/opencv/opencv/blob/9fcf0152140c449f74678add820e81de3e69b8b0/CMakeLists.txt#L246"", 'comment_created': datetime.datetime(2022, 8, 18, 6, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 948716016, 'comment_body': 'Also optimization baseline should be checked.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 953638569, 'comment_body': 'If this code is borrowed from upstream, then we should keep it with minimal changes (to keep updates from upstream reliable)', 'comment_created': datetime.datetime(2022, 8, 24, 10, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 953776572, 'comment_body': 'I borrowed from upstream. It makes sense to keep it as original. What do you mean by minimal changes?', 'comment_created': datetime.datetime(2022, 8, 24, 13, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 960045734, 'comment_body': 'I realized  i do not need that part. I removed but did not pushed yet. It does not affect anything anyway.', 'comment_created': datetime.datetime(2022, 8, 31, 21, 35, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 960046001, 'comment_body': 'Changed this line temporary to build libjpeg-turbo from source in linux too.', 'comment_created': datetime.datetime(2022, 8, 31, 21, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 967861479, 'comment_body': '> MSVC\r\n> MSVC_IDE\r\n\r\nLooks like there is some mess in using of these variables.', 'comment_created': datetime.datetime(2022, 9, 11, 17, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 967861494, 'comment_body': 'unnecessary whitespace change', 'comment_created': datetime.datetime(2022, 9, 11, 17, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 967861499, 'comment_body': 'unnecessary whitespace change', 'comment_created': datetime.datetime(2022, 9, 11, 17, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 967861816, 'comment_body': 'Please move this flag into `3rdparty/libjpeg-turbo`\r\n\r\n`WITH_` prefix should be replaced to `ENABLE_`\r\n(`WITH_` is used in OpenCV for ""auto-detection"" of external components/dependencies/libraries)', 'comment_created': datetime.datetime(2022, 9, 11, 17, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 967862068, 'comment_body': 'We should distinguish a request from the user and the actual ""final"" value (which depends on the platform (e.g. MSA is not handled yet), compiler, etc)\r\n\r\nAlso there is still ""libjpeg"" (without ""-turbo"")', 'comment_created': datetime.datetime(2022, 9, 11, 17, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 967862201, 'comment_body': 'Please avoid indentation in namespaces.', 'comment_created': datetime.datetime(2022, 9, 11, 17, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 967862274, 'comment_body': '> std::string\r\n\r\nWhat is that?', 'comment_created': datetime.datetime(2022, 9, 11, 17, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 967869178, 'comment_body': 'I borrowed these lines from the upstream. Same as `MSVC_IDE` parts.', 'comment_created': datetime.datetime(2022, 9, 11, 18, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 967870142, 'comment_body': '""libjpeg"" without  -turbo will report `""SIMD Support: ""NO""` by default. And i think this is not a false promise. I don`t think that i should worry about that. And libjpeg is deprecated according to [docs](https://github.com/opencv/opencv/tree/4.x/3rdparty) at 4.x.', 'comment_created': datetime.datetime(2022, 9, 11, 18, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 969754507, 'comment_body': '`HAVE_LIBJPEG_TURBO_SIMD` sounds more consistent', 'comment_created': datetime.datetime(2022, 9, 13, 15, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969762634, 'comment_body': 'Please remove debug print', 'comment_created': datetime.datetime(2022, 9, 13, 15, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969765336, 'comment_body': 'I think this message is redundant. SIMD status is reported form `simd/CmakeLists.txt`. In particular on armv6 I see:\r\n```\r\nSIMD extensions: arm (WITH_SIMD = 1)\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 15, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969995856, 'comment_body': ""Actually this line reports this. There is no message reported on `simd/CMakeLists.txt` except failures and it reports NEON or partial NEON support. I believe it is good have for other type CPU's."", 'comment_created': datetime.datetime(2022, 9, 13, 19, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}]","[{'commit_sha': 'd717de571900258dac325fd0c29e39d9b7f45ca0', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04849f26b2c20465d475a29c86bb92351502c8f3', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}]",Berke,44481097,iamberkeyavas@gmail.com,User,,11,,4,14
1038254033,[GSoC 2022] new imread api with named parameters and outputarray,"This proposed new imread api based on [named parameters](https://github.com/opencv/opencv/wiki/OE-34.-Named-Parameters).

There are a few things that needs to be discussed. I have not seen `enum class` usage in openCV. Hence i prepared this pull request using plain enum. Imo, enum classes are better to express intention hence should be favor when usable. I propose to use 

```cpp
enum class ImreadError {
      OK = 0,
      FILE_NOT_FOUND,
      UNRECOGNIZED_FORMAT,
      SIZE_LIMIT_EXCEEDED,
      INVALID_HEADER,
      INVALID_DATA,
     };
```

It is more readable without `IMREAD_ERROR_` prefix. And user can safely check error type with `ImreadError::xxxx` without implicit conversion. 

The other thing is i created a new `findDecoder` method. This is kinda duplicate function. I could implement it via

```cpp
static ImageDecoder findDecoder( string const& filename, ImreadError* error = nullptr) {
   ....
   if(error) {
        *error = IMREAD_OK;
   }
}
```

This is fine and works with the existing api, however it adds 2 extra if check. So if user reads thousand of images and does not use the new api, it adds 2 extra if check. I am not sure if this is ok or not.

Other than that, C++20 users can use designated initializers. Aggregate initialization does not permit default member initialization in C++11, this restriction removed at C++14.

In C++11 :
```cpp
struct Test {
    int a;
    int b = 5;
    int c = 6;
};

int main()
{
    int a;
    Test t{a};
}
```

This code sample does not compile, but it compiles with C++14 version

Sample usage :

```py
import cv2

ret,img = cv2.imread2(""/home/ocpalo/Desktop/aaa.png"", flags = 1)
print(ret) # 0
ret = cv2.imread2(""/home/ocpalo/Desktop/aaa.png"", maxSize = (100,100))
print(ret) # 3, aaa.png size is 3024x4032
```

```cpp

// after c++20
cv::Mat mat;
auto ret = imread2(""filename.png"", mat, {.flags = IMREAD_COLOR, .maxSize {1024,1024});

// after c++14
cv::Mat mat2;
auto ret2 = imread2(""filename.png"", mat2, {IMREAD_COLOR});
```

================================================================================================

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or another license that is incompatible with OpenCV
- [x] The PR is proposed to the proper branch
- [x] There is a reference to the original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake

",False,22431,https://api.github.com/repos/opencv/opencv/pulls/22431,https://github.com/opencv/opencv/pull/22431,open,337,3,4,6,1,18,2,0,"[{'name': 'feature'}, {'name': 'category: imgproc'}]",2022-08-26 18:26:34+00:00,,0.0,,"[{'comment_id': 961466642, 'comment_body': 'c_str() returns `const char*` for a reason. Casting and writing to that pointer should be avoided (it could be a shadow copy).\r\n\r\nMutable `std::vector<uint8_t>` or `cv::AutoBuffer<int8_t>` should be used instead (perhaps including `.checkSignature()`)', 'comment_created': datetime.datetime(2022, 9, 2, 9, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 961471833, 'comment_body': 'indentation is 4 spaces.', 'comment_created': datetime.datetime(2022, 9, 2, 9, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 961474102, 'comment_body': 'Prefer to avoid massive copy-paste.\r\nPrefer `@overload` or `@sa` (see also).', 'comment_created': datetime.datetime(2022, 9, 2, 9, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 961476596, 'comment_body': 'Semantically this should be a direct field of `ImreadParams`.\r\nOtherwise there is unresolved mess between `flags` and `ImreadParams` in designed API.', 'comment_created': datetime.datetime(2022, 9, 2, 9, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 961483524, 'comment_body': 'I believe we should not ""suppressing"" of C++ exceptions. They provide much more useful information than single `ImreadError` value.\r\nSearching for issue reports regarding to `IMREAD_ERROR_INVALID_DATA` keyword would be painful with many useless posts (as there is no useful information).\r\n\r\n/cc @vpisarev ', 'comment_created': datetime.datetime(2022, 9, 2, 9, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 961483942, 'comment_body': 'Signature for `_EQ` is `ASSERT_EQ(expected_reference, actual_result);`.\r\nCorrect order of parameters are required to emit valid error messages.\r\n\r\nReference: https://github.com/opencv/opencv/blob/4.0.0/modules/ts/include/opencv2/ts/ts_gtest.h#L8196-L8200\r\n\r\n```\r\nGTEST_API_ AssertionResult EqFailure(const char* expected_expression,\r\n                                     const char* actual_expression,\r\n                                     const std::string& expected_value,\r\n                                     const std::string& actual_value,\r\n                                     bool ignoring_case);\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 9, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 961960143, 'comment_body': 'Other enum definitions in the same file have 7 spaces. Should i keep 7 spaces or change to 4 spaces?', 'comment_created': datetime.datetime(2022, 9, 2, 19, 41, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 962129545, 'comment_body': '@alalek Do you mean that i should split flags into scale_denom and loadGdal variable and put it inside ImreadParams?', 'comment_created': datetime.datetime(2022, 9, 3, 9, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 962132206, 'comment_body': 'i have doubts about `image.release();`', 'comment_created': datetime.datetime(2022, 9, 3, 9, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sturkmen72', 'type': 'User'}, {'comment_id': 986923890, 'comment_body': '`ImreadStatus` should be better, because some status are not errors.', 'comment_created': datetime.datetime(2022, 10, 4, 14, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 986926541, 'comment_body': '`error` is not defined for GDAL case.', 'comment_created': datetime.datetime(2022, 10, 4, 14, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 986933851, 'comment_body': 'return codes should be available in python too. magic numbers look very strange.', 'comment_created': datetime.datetime(2022, 10, 4, 14, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 986953222, 'comment_body': 'The function duplicates the original function, but adds more statuses. The old function should re-call the new one to not duplicate code.', 'comment_created': datetime.datetime(2022, 10, 4, 14, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 986957329, 'comment_body': 'The function duplicates the original function, but adds more statuses. The old function should re-call the new one to not duplicate code.', 'comment_created': datetime.datetime(2022, 10, 4, 14, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 988269859, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2022, 10, 5, 19, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 988269865, 'comment_body': 'They are available. It was my bad to not use it :). Thanks for pointing out.', 'comment_created': datetime.datetime(2022, 10, 5, 19, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 988269904, 'comment_body': 'It should be `||`, not `&&`. I have updated this one too.', 'comment_created': datetime.datetime(2022, 10, 5, 19, 27, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 988274113, 'comment_body': 'I will work on this one. Since I have separate `flags` variable into `flags` and `scaleDenom`, I need to find a way to merge them back together.', 'comment_created': datetime.datetime(2022, 10, 5, 19, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}]","[{'commit_sha': '9e8d2ffb24942057ff05efba24c62c68aa786323', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '460ccf9a13216b05204d7ecc13ac62a9536a7862', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cfb9616356c24e1fe252290dbcab12dd2d5a9b7', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2812eb3d8c313df4f1b069a7010623bdabe738b', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bacd9d7957c0c208aeaa7e1dda907312ddb1eb3', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e68113e65cda68da69fa709a2f53cc4bba94e32f', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}]",Berke,44481097,iamberkeyavas@gmail.com,User,,11,,4,14
971379207,[GSoC 2022] Multipage Image Decoder API,"I am trying to finalize #17753 pr. To understand the requirements and see what we can do I also take a look at #6574. 

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under Apache 2 License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or another license that is incompatible with OpenCV
- [x] The PR is proposed to the proper branch
- [x] There is a reference to the original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake
",True,22128,https://api.github.com/repos/opencv/opencv/pulls/22128,https://github.com/opencv/opencv/pull/22128,closed,471,49,3,1,17,50,3,0,"[{'name': 'category: imgcodecs'}, {'name': 'RFC'}, {'name': 'GSoC'}]",2022-06-19 00:28:17+00:00,2022-09-21 13:10:22+00:00,8167325.0,"94 days, 12:42:05","[{'comment_id': 903109811, 'comment_body': 'do we need this `#include` in public header?', 'comment_created': datetime.datetime(2022, 6, 21, 22, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 903110376, 'comment_body': ""please, use 'pimpl'. Hide everything non-public in a dedicated impl class"", 'comment_created': datetime.datetime(2022, 6, 21, 22, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 903112350, 'comment_body': ""private constructors is terrible C++ invention. Please, don't use it.\r\nIf user wants `std::vector<ImageCollection> many_collections(1000);`, he should be able to do that. I don't see why in this case the constructor cannot play role of `fromMultiPageImage`?"", 'comment_created': datetime.datetime(2022, 6, 21, 22, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 903112728, 'comment_body': 'do we need forward declaration here?', 'comment_created': datetime.datetime(2022, 6, 21, 22, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 903112921, 'comment_body': '`nimages()` => `size()` to make it more STL-like?', 'comment_created': datetime.datetime(2022, 6, 21, 22, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 903113934, 'comment_body': 'does not just release the image at `index` or it also shifts all the subsequent images so that the sequence of images is still contiguous? If the latter, can we use another STL-like name (erase?) ', 'comment_created': datetime.datetime(2022, 6, 21, 22, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 903114392, 'comment_body': ""Please, hide the implementation details as well. Let's keep the headers as clean as possible"", 'comment_created': datetime.datetime(2022, 6, 21, 22, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 906701823, 'comment_body': 'please remove CV_WRAP for now.', 'comment_created': datetime.datetime(2022, 6, 25, 16, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sturkmen72', 'type': 'User'}, {'comment_id': 906722027, 'comment_body': 'We need this because if user wants to do std::vector<ImageCollection>. Renaming to `init` might be better', 'comment_created': datetime.datetime(2022, 6, 25, 20, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 906722144, 'comment_body': 'This returns the number of pages in image. I think i should find a new, better name for this one. So we can return the current page Size(width, height).', 'comment_created': datetime.datetime(2022, 6, 25, 20, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 919318015, 'comment_body': ""nextPage() call is a problem. During initialization it may be fine, but it's also used to increment iterator. We need some other solution. Is it possible to extract all position-dependent information from the decoder and move it into iterator of ImageCollection?"", 'comment_created': datetime.datetime(2022, 7, 12, 19, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 919321989, 'comment_body': 'when all pages are the same, it\'s quite bad test. We need something different. I would create a multi-page image with different pages, then stored each page as individual file and then compared each page of multi-page image with the same page read as individual image, e.g.:\r\n```\r\nImageCollection imcol(""multi-page.tiff"");\r\nint i = 0;\r\nfor (auto& page : imcol) {\r\n     double diff = norm(page, imread(format(""multi-page-%d.tiff"", i), NORM_INF);\r\n     EXPECT_EQ(diff, 0.);\r\n     i++;\r\n}\r\n```\r\n \r\n', 'comment_created': datetime.datetime(2022, 7, 12, 19, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 930666148, 'comment_body': 'This `nextPage` call is required to find the ImageCollection size. About extracting all position dependent information, I need to pass `m_decoder` and `this` to the iterator in order to do that. So, i am not sure if this is a good idea because operator[] and at() also decodes pages. `this` is required for `operator*` decoding. So it can put pages inside the `m_vector`. I think we need to discuss this.', 'comment_created': datetime.datetime(2022, 7, 27, 6, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 955755339, 'comment_body': 'init() should close the already opened collection, if any', 'comment_created': datetime.datetime(2022, 8, 26, 7, 43, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 955757382, 'comment_body': 'do we need to call advance() here? Can operator [] take care of advancing internal pointer?', 'comment_created': datetime.datetime(2022, 8, 26, 7, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 955773457, 'comment_body': 'Good point thanks, I missed that. Will fix it asap.', 'comment_created': datetime.datetime(2022, 8, 26, 8, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 969513516, 'comment_body': 'reset()?', 'comment_created': datetime.datetime(2022, 9, 13, 11, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969538520, 'comment_body': 'Out-of-range access check is required here.', 'comment_created': datetime.datetime(2022, 9, 13, 12, 7, 4, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969550986, 'comment_body': 'Most probably  `m_decoder->readHeader()`. is redundant here. `nextPage()` calls `readHeader()` after switch to the new page internally. If Also range for `m_current` check will be useful.', 'comment_created': datetime.datetime(2022, 9, 13, 12, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969599860, 'comment_body': 'It makes sense to check index after the loop to ensure that all pages has been read.', 'comment_created': datetime.datetime(2022, 9, 13, 13, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969601183, 'comment_body': 'The same here.', 'comment_created': datetime.datetime(2022, 9, 13, 13, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969602914, 'comment_body': ""I propose to extract `imread` as separate line and check it it's result is not empty."", 'comment_created': datetime.datetime(2022, 9, 13, 13, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969603379, 'comment_body': 'Need `collection.size()` check against constant.', 'comment_created': datetime.datetime(2022, 9, 13, 13, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969603724, 'comment_body': ""I propose to extract imread as separate line and check it it's result is not empty."", 'comment_created': datetime.datetime(2022, 9, 13, 13, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969616787, 'comment_body': 'O(n) is not fully true. For TIFF `TIFFReadDirectory() and readHeader()` are called, but not full decoding pipeline.', 'comment_created': datetime.datetime(2022, 9, 13, 13, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969618633, 'comment_body': 'I propose to make caching optional. It slows down some cases a bit, but may dramatically reduce memory consumption.', 'comment_created': datetime.datetime(2022, 9, 13, 13, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 969622078, 'comment_body': 'I propose to rename the method to `ReleaseCache()`. Other OpenCV classes that contain `release()` method finalize the algorithm, but not clean cache. Object usage after `release()` is not expected.', 'comment_created': datetime.datetime(2022, 9, 13, 13, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 970011893, 'comment_body': 'I inspired from cv::Mat. The intention of the both call is almost the same. But i am fine with the renaming of the method name. \r\n\r\nreleaseCache()', 'comment_created': datetime.datetime(2022, 9, 13, 19, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 970470360, 'comment_body': 'range is already checked at the external method `ImageCollection::at()` method', 'comment_created': datetime.datetime(2022, 9, 14, 8, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 970470488, 'comment_body': 'agree', 'comment_created': datetime.datetime(2022, 9, 14, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 970481454, 'comment_body': ""@asmorkalov, this can be made optional very easily. Just call release/releaseCache() after you finished processing of each image. I think, it's quite simple and yet good enough workaround. I suggest not to make the API more complex at the moment"", 'comment_created': datetime.datetime(2022, 9, 14, 8, 20, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 970484456, 'comment_body': 'how about ""Complexity is O(n) because the collection has to be reinitialized every time in order to go to the correct page. However, the intermediate pages are not decoded during the process, so typically it\'s quite fast""?', 'comment_created': datetime.datetime(2022, 9, 14, 8, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 970511222, 'comment_body': 'Here is the example. Suppose the scenario is user wants to read images sequentially then discard them.\r\n\r\n```cpp\r\nImageCollection collection(""some.tiff"");\r\n\r\nint index = 0;\r\nfor(auto& page: collection) {\r\n    // process page here\r\n    collection.release(index); // or releaseCache as you proposed\r\n    index++;\r\n}\r\n```\r\n\r\nSo the total memory usage here is actually `collection.size() * sizeof(cv::Mat (empty)) + sizeof(current page)`. If user release every image after processing,  there are no extra memory usage.', 'comment_created': datetime.datetime(2022, 9, 14, 8, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 970524541, 'comment_body': 'Ok', 'comment_created': datetime.datetime(2022, 9, 14, 8, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 971068989, 'comment_body': '@asmorkalov you marked this as resolved. In the todays meeting, Vadim also agreed with you to rename the method name. I got confused why you marked this as resolved. I was going to rename it. Should I?', 'comment_created': datetime.datetime(2022, 9, 14, 16, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 971083344, 'comment_body': 'There are 2 methods in the ImageCollection to read images. `.at()` method and `operator[]` operator. As in the STD containers, `.at` method does out-of-range access check but operator[] does not. There is no need to check here.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 971602896, 'comment_body': 'it make sense to use `size_t` for `index` No need to add type conversion to checks.', 'comment_created': datetime.datetime(2022, 9, 15, 7, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 971608893, 'comment_body': 'My fault. I resolved wrong discussion. Renamed method looks better, thanks!', 'comment_created': datetime.datetime(2022, 9, 15, 7, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 971618504, 'comment_body': ""`at()` calls `operator[]`, but not vise versa. In case if index is -1 you'll get out of bound access for std::vector. For index, let say 1e+6 the next loop will be iterated 1e+6 times:  `for(int i = 0; i != index && advance(); ++i) {}`. I propose to move the check from `at()` to `operator[]` or have it in both methods. In `std::vector<>` is reasonable to get rid of range check for performance reason. Range check is heavier than actual work. But it's not true for image codecs. Also it could be a security issue."", 'comment_created': datetime.datetime(2022, 9, 15, 7, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 971777798, 'comment_body': ""OpenCV 4.x relies on C++11 as default C++ standard. `at` was added in C++20. Let's use manual range check + [] to presume compatibility. Details: https://en.cppreference.com/w/cpp/container/vector/at"", 'comment_created': datetime.datetime(2022, 9, 15, 9, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 971778192, 'comment_body': 'OpenCV uses `CV_Assert` for such checks.', 'comment_created': datetime.datetime(2022, 9, 15, 9, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 971778787, 'comment_body': 'The same CV_Assert();', 'comment_created': datetime.datetime(2022, 9, 15, 9, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 971779525, 'comment_body': ""@ocpalo The question is still open. I suspect, that it's a bug."", 'comment_created': datetime.datetime(2022, 9, 15, 9, 51, 51, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 971788449, 'comment_body': '`at` method exists in C++11. In C++20, they added constexpr. ', 'comment_created': datetime.datetime(2022, 9, 15, 10, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 971799880, 'comment_body': 'Sorry, my fault.', 'comment_created': datetime.datetime(2022, 9, 15, 10, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 971859076, 'comment_body': 'Vadim also suspected that this is a bug. But I do not think so. He requested a test to break this and I implemented it and it seems it works fine. I did not included in the comment because it was not well-written test. @asmorkalov If you think a specific scenario that can break this, please tell me. So I can included in the unit tests and see if its broken or not.\r\n\r\nThe idea is, only iterators can advance the to next page that satisfy the requirement which is iterator internal counter is equal to current page index. Since iterators should not pass `end()`, So if this requirement is not satisfied, it does not call `nextPage()`. So file status is protected. Iterator count is incremented in any case, which is required.\r\n\r\nI will write a detailed description of how that incrementing index works tonight. ', 'comment_created': datetime.datetime(2022, 9, 15, 11, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 973894800, 'comment_body': ""Reference as return value destroys the idea with cache. `resetCache` calls `release` for all images, including the image user has reference to. It's not what expected. Previous version relied on reference counting inside of `cv::Mat` and worked well. I propose to restore it back."", 'comment_created': datetime.datetime(2022, 9, 19, 6, 21, 45, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 973907297, 'comment_body': 'Actually, `releaseCache` only calls `release` method on the given index page. For example, suppose you decode all pages into cache,\r\n\r\n```cpp\r\nImageCollection col(""filename.txt"");\r\nfor(auto& i: coll){\r\n     *i; // Decode all pages so they can go to cache\r\n\r\ncoll.releaseCache(2); // only release page 3 from the cache. \r\nauto mat = coll.at(1); // No decoding happens because page 2 is still at the cache\r\n```\r\n\r\nWith returning reference, now it is user responsibility to not call `releaseCache` on the index that he is referring to. \r\n\r\nWhat do you think? And why do you think `releaseCache` releases for all images? I have never mentioned that and noone gave me feedback about that. Should I make that method to release for all images?', 'comment_created': datetime.datetime(2022, 9, 19, 6, 42, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}, {'comment_id': 974004529, 'comment_body': ""I rechecked all cases and it looks like the only dangerous case is something like this:\r\n```\r\nauto current_frame = decoder.at(i);\r\ndecoder.releaseCache();\r\n```\r\nreleaseCache invalidates references (`auto` is `Mat&`), but it's expected behavior. In all other cases like `cv::Mat img = decoder.at(i);` `cv::Mat` copy constructor is called and user code does not suffer. So you are right! Let's go ahead with references then."", 'comment_created': datetime.datetime(2022, 9, 19, 8, 50, 39, tzinfo=datetime.timezone.utc), 'commenter': 'asmorkalov', 'type': 'User'}, {'comment_id': 974025158, 'comment_body': 'In your example, `auto` is deduced to `Mat`. If user wants to get reference to Mat object, he needs `auto&`. Anyway, it is still safe. Thanks!', 'comment_created': datetime.datetime(2022, 9, 19, 9, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ocpalo', 'type': 'User'}]","[{'commit_sha': '062cee2933ebf9390a8ff442f8c806369976da29', 'committer_username': 'ocpalo', 'committer_name': 'Berke', 'committer_email': 'iamberkeyavas@gmail.com', 'commit_date': datetime.datetime(2018, 10, 25, 20, 18, 41, tzinfo=datetime.timezone.utc)}]",Berke,44481097,iamberkeyavas@gmail.com,User,,11,,4,14

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55707,77600,2655,2195,34493,2598,6,132,"[{'id': 1420004392, 'number': 23924, 'closed': datetime.datetime(2023, 7, 5, 6, 38, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 4, 18, 19, 16, tzinfo=datetime.timezone.utc), 'time_taken': 44353.0, 'time_delta': '12:19:13', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1071680442, 'number': 22589, 'closed': datetime.datetime(2022, 9, 30, 7, 10, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 29, 17, 52, 27, tzinfo=datetime.timezone.utc), 'time_taken': 47867.0, 'time_delta': '13:17:47', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1056288842, 'number': 22516, 'closed': datetime.datetime(2022, 9, 14, 17, 38, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 14, 16, 21, 30, tzinfo=datetime.timezone.utc), 'time_taken': 4648.0, 'time_delta': '1:17:28', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1052593370, 'number': 22497, 'closed': datetime.datetime(2022, 9, 12, 5, 50, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 11, 20, 46, 28, tzinfo=datetime.timezone.utc), 'time_taken': 32660.0, 'time_delta': '9:04:20', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 1038254033, 'number': 22431, 'closed': None, 'created': datetime.datetime(2022, 8, 26, 18, 26, 34, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 337, 'deletions': 3, 'state': 'open'}, {'id': 1025124715, 'number': 22372, 'closed': datetime.datetime(2022, 9, 14, 6, 8, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 12, 16, 26, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2814089.0, 'time_delta': '32 days, 13:41:29', 'additions': 173, 'deletions': 13, 'state': 'closed'}, {'id': 1019067986, 'number': 22344, 'closed': datetime.datetime(2022, 8, 12, 10, 27, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 20, 32, 20, tzinfo=datetime.timezone.utc), 'time_taken': 568532.0, 'time_delta': '6 days, 13:55:32', 'additions': 70668, 'deletions': 182, 'state': 'closed'}, {'id': 1015462999, 'number': 22334, 'closed': datetime.datetime(2022, 8, 6, 11, 48, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 18, 36, 48, tzinfo=datetime.timezone.utc), 'time_taken': 321111.0, 'time_delta': '3 days, 17:11:51', 'additions': 75094, 'deletions': 186, 'state': 'closed'}, {'id': 996765928, 'number': 22250, 'closed': datetime.datetime(2022, 8, 5, 7, 53, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 14, 14, 39, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1876440.0, 'time_delta': '21 days, 17:14:00', 'additions': 0, 'deletions': 8, 'state': 'closed'}, {'id': 992499540, 'number': 22226, 'closed': datetime.datetime(2022, 9, 5, 10, 25, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 10, 21, 12, 30, tzinfo=datetime.timezone.utc), 'time_taken': 4885991.0, 'time_delta': '56 days, 13:13:11', 'additions': 8708, 'deletions': 13, 'state': 'closed'}, {'id': 971379207, 'number': 22128, 'closed': datetime.datetime(2022, 9, 21, 13, 10, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 19, 0, 28, 17, tzinfo=datetime.timezone.utc), 'time_taken': 8167325.0, 'time_delta': '94 days, 12:42:05', 'additions': 471, 'deletions': 49, 'state': 'closed'}, {'id': 962284260, 'number': 22081, 'closed': datetime.datetime(2022, 8, 15, 19, 56, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 9, 0, 32, 49, tzinfo=datetime.timezone.utc), 'time_taken': 5858610.0, 'time_delta': '67 days, 19:23:30', 'additions': 23, 'deletions': 1, 'state': 'closed'}]"
5108029,opencv_extra,opencv/opencv_extra,,1581,915,96,201,1802,25,6,25,"[{'id': 1038704177, 'number': 1000, 'closed': None, 'created': datetime.datetime(2022, 8, 27, 20, 34, 7, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 0, 'deletions': 0, 'state': 'open'}, {'id': 1025897326, 'number': 995, 'closed': datetime.datetime(2022, 9, 5, 10, 26, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 22, 20, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1857935.0, 'time_delta': '21 days, 12:05:35', 'additions': 32448, 'deletions': 0, 'state': 'closed'}]"
