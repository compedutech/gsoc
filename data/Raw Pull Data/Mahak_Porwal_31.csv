pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
657775750,User login with OAuth via mwoauth library,"This PR adds a new `oauth` blueprint to the backend API server that initiates and completes the OAuth login flow with the Meta Wikipedia server. The end result is that our app receives a username and user id for the user, and they are ""logged in"" to our app, via a session cookie which stores the same.",True,345,https://api.github.com/repos/openzim/wp1/pulls/345,https://github.com/openzim/wp1/pull/345,closed,318,18,11,17,15,44,0,0,[],2021-05-30 18:46:48+00:00,2021-06-11 01:46:32+00:00,975584.0,"11 days, 6:59:44","[{'comment_id': 642161075, 'comment_body': 'We should not fetch the token from the backend or store it in Local Storage.', 'comment_created': datetime.datetime(2021, 5, 31, 1, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 642162091, 'comment_body': ""Code factor is right that we should have one import for ENV and CREDENTIALS. However, if we don't do the import in get_redis_creds, then in cases where credentials.py doesn't exist, it will be a different error (either a KeyError or a NameError with CREDENTIALS being undefined). Either way, that would cause the server to error out with a cryptic error message.\r\n\r\nWe want to gracefully handle the case where wp1.credentials doesn't exist.\r\n\r\nPerhaps in the except block here you can set ENV = None and CREDENTIALS = None, then check for those values in get_redis_creds() and print an appropriate message if they don't exist."", 'comment_created': datetime.datetime(2021, 5, 31, 1, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 642162315, 'comment_body': ""Similar to the above, if credentials.py doesn't exist, this will probably blow up with a NameError.\r\n\r\nInstead, create a get_session_settings() method that works similarly to get_redis_creds() (and warns the user if credentials.py was undefined)."", 'comment_created': datetime.datetime(2021, 5, 31, 1, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 642162598, 'comment_body': ""Just like in app.py, we need to protect for the case that wp1.credentials doesn't exist, with a try and an `except ImportError`."", 'comment_created': datetime.datetime(2021, 5, 31, 1, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 642162724, 'comment_body': ""If the credentials in fact don't exist, think about what the behavior of this module should be."", 'comment_created': datetime.datetime(2021, 5, 31, 1, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 642163054, 'comment_body': 'Please write a comment about what each of these are.', 'comment_created': datetime.datetime(2021, 5, 31, 1, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 642163133, 'comment_body': ""This endpoint shouldn't exist"", 'comment_created': datetime.datetime(2021, 5, 31, 1, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 642163370, 'comment_body': ""The user shouldn't need the token to logout. However, you might be worried about CRSF for the logout method, which is a valid concern. In that case, we should integrate a Python CSRF plugin (but you can do that in a follow up PR)."", 'comment_created': datetime.datetime(2021, 5, 31, 1, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 642656430, 'comment_body': 'We should not set SESSION_COOKIE_DOMAIN, because we\'re always serving the cookies from the same domain they will be sent to. The browser knows ""I got a cookie from api.wp1.openzim.org, so I will send it back to that server"". And if we put this line, then the cookies don\'t work in localhost testing.', 'comment_created': datetime.datetime(2021, 5, 31, 19, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643498921, 'comment_body': '@audiodude I have added error handling but what should be done when credentials.py doesnot exist?\r\nShould we take input from user?', 'comment_created': datetime.datetime(2021, 6, 1, 21, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 643571014, 'comment_body': 'I think you need credentials: include here too, because otherwise how will the backend know which session to logout?', 'comment_created': datetime.datetime(2021, 6, 2, 0, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643571155, 'comment_body': 'https://developer.mozilla.org/en-US/docs/Web/API/Response/ok', 'comment_created': datetime.datetime(2021, 6, 2, 0, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643571389, 'comment_body': ""I would call this `const data =` because you're returning the data, not the response object."", 'comment_created': datetime.datetime(2021, 6, 2, 0, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643571540, 'comment_body': 'This is superfluous. It takes data and just returns it.', 'comment_created': datetime.datetime(2021, 6, 2, 0, 33, 5, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643571787, 'comment_body': 'Please explain how this should be populated in production, eg tips on how to generate a good secret key.', 'comment_created': datetime.datetime(2021, 6, 2, 0, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643571991, 'comment_body': 'nit: put a ""&nbsp;|&nbsp;"" between the button and the span.', 'comment_created': datetime.datetime(2021, 6, 2, 0, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643572330, 'comment_body': 'What does this do? I was under the impression that it\'s a convenience method for setting config variables based on ""floating"" variables in the module namespace. Why do we need it here?', 'comment_created': datetime.datetime(2021, 6, 2, 0, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643572696, 'comment_body': 'nit: line length.', 'comment_created': datetime.datetime(2021, 6, 2, 0, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643573547, 'comment_body': ""Instead of doing a network request here (and every time a page is loaded), why don't we store the username in the session?\r\n\r\nThen identify() looks like this:\r\n\r\n```\r\ndef identify():\r\n  username = session.get('username')\r\n  if username is None:\r\n     flask.abort(401, 'Unauthorized')\r\n     return\r\n  return jsonify(username)\r\n```"", 'comment_created': datetime.datetime(2021, 6, 2, 0, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643573935, 'comment_body': ""If you're going to use my suggestion about storing the username in the session, then you probably want to have a single key in the session for the access_token and username so that you can pop just one thing here. Maybe:\r\n\r\n```\r\n  session['user'] = {'access_token': access_token, 'username': username}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 2, 0, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643574577, 'comment_body': ""In general, you should wrap a try/except around the smallest possible snippet of code. Here, I think you're expecting the KeyError from line 32, so really that's all that should be in the try/except.\r\n\r\nIn honesty, you should really be doing:\r\n\r\n```\r\nif 'request_token' not in session:\r\n  flask.abort(404, 'User does not exist')\r\n....rest of method....\r\n```"", 'comment_created': datetime.datetime(2021, 6, 2, 0, 43, 12, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643574693, 'comment_body': 'Use `204 NO CONTENT` for responses that are successful but have no body.', 'comment_created': datetime.datetime(2021, 6, 2, 0, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643574792, 'comment_body': 'What if the user is already logged in? Should we really send them back to Wikipedia?', 'comment_created': datetime.datetime(2021, 6, 2, 0, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643575587, 'comment_body': 'Overall, the pattern of:\r\n\r\n```\r\ntry:\r\n  do \r\n  a whole\r\n  bunch\r\n  of things\r\nexcept OneSpecificError:\r\n  flask.abort(404)\r\n```\r\n\r\nIs an anti-pattern. As I mention in other comments, try/except blocks should be limited in scope to the exact lines that can throw the exception. Additionally, there is no need to pop from a dictionary like object if you know the key might not be in it, then wait for an exception to occur. Instead, just use tests like `in` or access like `.get(key_name)`. If those ""fail"" then you can send your error statuses.', 'comment_created': datetime.datetime(2021, 6, 2, 0, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643576325, 'comment_body': 'We might someday need to return other information about the user. Instead of returning a ""naked"" string here, try using a simple dictionary, like:\r\n\r\n```\r\njsonify({\'username\': username})\r\n```\r\n\r\nThat way, if the user data changes, the code that retrieves the username from the backend won\'t have to. (You\'ll also need to update the Vue app of course.)', 'comment_created': datetime.datetime(2021, 6, 2, 0, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 643576860, 'comment_body': ""I think you should check in app.py and not include the oauth blueprint if credentials.py doesn't exist or is missing the MWOAUTH keys.\r\n\r\n```\r\nif CREDENTIALS is None:\r\n  print('No MWOAUTH credentials, not attaching OAuth endpoints')\r\nelse:\r\n  flask.register_blueprint(...)\r\n```"", 'comment_created': datetime.datetime(2021, 6, 2, 0, 50, 42, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 644074155, 'comment_body': 'Should I add these comments\r\n```\r\nTo get your random secret key for production use the following script\r\npython3\r\nimport os\r\nos. urandom(24)\r\n```', 'comment_created': datetime.datetime(2021, 6, 2, 15, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 644356273, 'comment_body': '@audiodude Can I do all the UI changes in seperate PR?', 'comment_created': datetime.datetime(2021, 6, 2, 22, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 644422806, 'comment_body': 'That would work.', 'comment_created': datetime.datetime(2021, 6, 3, 1, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 646033977, 'comment_body': 'Actually, in unit tests the credentials module is _always_ missing. You should design your tests so that they work without them, or in some cases with the module mocked out.', 'comment_created': datetime.datetime(2021, 6, 5, 20, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 646034132, 'comment_body': ""These should be two separate tests:\r\n\r\n1. When there is nothing in the session, it returns 401\r\n2. When the session has a 'user' key it returns the correct username."", 'comment_created': datetime.datetime(2021, 6, 5, 20, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 646034221, 'comment_body': 'What other UI changes are there?', 'comment_created': datetime.datetime(2021, 6, 5, 20, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 646034241, 'comment_body': ""I think you're missing a step here."", 'comment_created': datetime.datetime(2021, 6, 5, 20, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 646034330, 'comment_body': ""nit: Instead of a triple quoted string, use implicit string joining to avoid line length limits. Like this:\r\n\r\n```\r\nprint('No credentials.py file found. Development overlay will '\r\n         'not be enabled.')\r\n```"", 'comment_created': datetime.datetime(2021, 6, 5, 20, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 646034521, 'comment_body': ""```\r\nmissing_credentials = CREDENTIALS is None or ENV is None\r\nif not missing_credentials:\r\n  mwoauth = CREDENTIALS.get(ENV, {}).get(MWOAUTH, {})\r\nif missing_credentials or mwoauth.get('consumer_key') is None or mwoauth.get('consumer_secret') is None:\r\n  ....\r\n```"", 'comment_created': datetime.datetime(2021, 6, 5, 20, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 646035045, 'comment_body': 'Like mentioned previously, this is incorrect because credentials.py will never be checked in for unit tests.', 'comment_created': datetime.datetime(2021, 6, 5, 20, 52, 42, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 646948665, 'comment_body': ""This is the right idea, but the oauth creds don't really belong in the base_db_test file."", 'comment_created': datetime.datetime(2021, 6, 7, 21, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 646949707, 'comment_body': 'Instead, just put the oauth credentials in a constant object (TEST_OAUTH_CREDS) and use that constant instead of get_test_connect_creds().', 'comment_created': datetime.datetime(2021, 6, 7, 21, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 647804929, 'comment_body': ""I don't think you actually need to return after flask.abort, because it raises an exception."", 'comment_created': datetime.datetime(2021, 6, 8, 21, 26, 27, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 647807184, 'comment_body': ""Do you still need this try/except block? If the credentials are missing, won't this module never get imported?"", 'comment_created': datetime.datetime(2021, 6, 8, 21, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 648678049, 'comment_body': 'Yes we will need that. \r\nIn case of tests (mock) it will give error in import.', 'comment_created': datetime.datetime(2021, 6, 9, 20, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 648685469, 'comment_body': ""I believe we talked about this before, but prefer implicit string concatenation over triple quoted strings, for line length purposes:\r\n\r\n```\r\nprint('No credentials.py file found, Please add your '\r\n         'mwoauth credentials in credentials.py')"", 'comment_created': datetime.datetime(2021, 6, 9, 21, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 648691313, 'comment_body': 'Should I squash the commits?', 'comment_created': datetime.datetime(2021, 6, 9, 21, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 648694107, 'comment_body': ""No, I don't think so. I personally believe that squashing is time consuming and error prone. We can merge just like this."", 'comment_created': datetime.datetime(2021, 6, 9, 21, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': '09f6fefcfce82a16d8a7e888d25bf3f28ec2be8a', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '236a3e6c81ac2e052a64ee806183a6e73d3b4fc8', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4e4175373d2999bc448604c384c88ff256ff0b', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66f9603c78023cbb41d37b073cc819fb4597a27e', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09d8be546cb28513749e5746ffc50e123d63c60d', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '078eba5c74f9623c374278f8d01da3b9a5f214ad', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5150871c0e792c05a3e426f357bc31d967110538', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4be1b625ffa8cc54ba0536ac94dc014d4e3a80ea', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c61a93efa39d9a4ffc0f250815e0e6fbb8c1a4d3', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3807a1f7771c79c1b84b3b86ebf82df78dfd4049', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e3457464090d563ab26eec0f1e3ec96278271be', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f703e257fa8c31349d3c1a9503a6e8aac726606', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd128b8f68a376d81130e44faa354c0ed56507e50', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6313f05c361f1c5f0f0a17daaba4333aa59ad572', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d6b2dd4fb358cda99cecd6ad564f81025a8df02', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9c0dbdd9b549c5dbfafd5fa4760b7d0576ef9ef', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be9b68fc2fec095591cdef9f0ea38546f85c77f2', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
668860930,added authorisation on manual updates,@audiodude This fixes #350 ,True,353,https://api.github.com/repos/openzim/wp1/pulls/353,https://github.com/openzim/wp1/pull/353,closed,124,4,9,5,2,15,0,0,[],2021-06-12 12:45:06+00:00,2021-06-14 20:17:27+00:00,199941.0,"2 days, 7:32:21","[{'comment_id': 650418016, 'comment_body': ""So if you're logged in you see the page, otherwise you see a blank page? That's not very user friendly. There should be a v-else div that explains that you need to log in in order to perform a manual update, with a login button."", 'comment_created': datetime.datetime(2021, 6, 12, 17, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 650418054, 'comment_body': ""We shouldn't hide the Manual Update link itself if the user is not logged in. They should still be able to see that the feature exists. However if they go to the page and are not logged in they should see a message with an invitation to log in."", 'comment_created': datetime.datetime(2021, 6, 12, 17, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 650418113, 'comment_body': 'Do we really need Vuex for this? I see that you\'re not using Vuex actions, just modifying the state directly. Isn\'t that against the whole point of Vuex? Maybe we should just use the ""Simple state store"" described in this article? https://vuejs.org/v2/guide/state-management.html#Simple-State-Management-from-Scratch', 'comment_created': datetime.datetime(2021, 6, 12, 17, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 650418260, 'comment_body': 'This is a great helper decorator.', 'comment_created': datetime.datetime(2021, 6, 12, 18, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 650418913, 'comment_body': 'Additionally, we need a mechanism so that once you log in you are redirected back to the manual update page. Some kind of `&next=/#/update` parameter that gets stored in the session.', 'comment_created': datetime.datetime(2021, 6, 12, 18, 7, 46, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 650565268, 'comment_body': 'Instead of an explicit padding, use the bootstrap ""p-1"" ""p-2"" etc classes. Here and below.', 'comment_created': datetime.datetime(2021, 6, 13, 19, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 650565303, 'comment_body': ""Let's go with just `loginUrl`."", 'comment_created': datetime.datetime(2021, 6, 13, 19, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 650565385, 'comment_body': ""You shouldn't have to manually `display: flex` anything, you should be able to use Bootstrap rows and columns to get the desired effect."", 'comment_created': datetime.datetime(2021, 6, 13, 19, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 650565692, 'comment_body': 'You should use `session.pop` here, because we want to consume the next path value and not have it ""hang around"" potentially for the next login.', 'comment_created': datetime.datetime(2021, 6, 13, 19, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 650565912, 'comment_body': 'There should be a new test for when the user requests initiate and has a `next=` param. There should also be a test for when the user hits `complete` and there is a `next_path` in the session.', 'comment_created': datetime.datetime(2021, 6, 13, 19, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 651143148, 'comment_body': 'Same thing here, use pt-* instead', 'comment_created': datetime.datetime(2021, 6, 14, 17, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 651144005, 'comment_body': ""Doesn't pop return the value? So shouldn't you just be able to do `next_path = session.pop('next_path')`?"", 'comment_created': datetime.datetime(2021, 6, 14, 17, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 651148874, 'comment_body': 'Also, make sure to use the Bootstrap button classes: `type=""button""` and `class=""btn btn-primary""`.\r\n\r\nhttps://getbootstrap.com/docs/4.0/components/buttons/', 'comment_created': datetime.datetime(2021, 6, 14, 17, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 651210377, 'comment_body': 'should I add these classes to other login button also?', 'comment_created': datetime.datetime(2021, 6, 14, 19, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 651214906, 'comment_body': 'Yes, the login button should have `btn-primary` but the logout button should be `btn-secondary`.', 'comment_created': datetime.datetime(2021, 6, 14, 19, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': 'b04c343d50cb8854e0d9fb4b0e2f614d65cfa197', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15c620485af22a1ec031f6c5ba0e549ca31f9826', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '865d177fca6db1df9fc8cdb493335f6db5cfaa2f', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3188050979d4a96e5a8ccb56fb27c93b9fdb2c9', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e672604853ae32abfa7ee8fc24edc5e059e85af', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
674926091,added basic route for sites,"This fixes #366 
I will create a separate commit for documentation and testing.",True,368,https://api.github.com/repos/openzim/wp1/pulls/368,https://github.com/openzim/wp1/pull/368,closed,119,2,5,5,3,21,0,0,[],2021-06-21 22:08:58+00:00,2021-06-23 20:06:11+00:00,165433.0,"1 day, 21:57:13","[{'comment_id': 655754958, 'comment_body': ""```suggestion\r\n  sites = redis.get('sites')\r\n  if sites is not None:\r\n```"", 'comment_created': datetime.datetime(2021, 6, 21, 22, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 655755533, 'comment_body': ""```suggestion\r\n    return {'sites': sites.decode('utf-8').split(',')}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 21, 22, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 655756562, 'comment_body': ""```suggestion\r\n  sitematrix = result['sitematrix']\r\n  sitematrix.pop('specials')\r\n```\r\n\r\nSince you use result['sitematrix'] so many times."", 'comment_created': datetime.datetime(2021, 6, 21, 22, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 655756940, 'comment_body': ""```suggestion\r\n  sites = []\r\n```\r\n\r\nIt's good to use the same variable name here as in the caching code above, so that readers can understand we're referring to the same data."", 'comment_created': datetime.datetime(2021, 6, 21, 22, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 655844212, 'comment_body': 'Actually I see now that sites is the name of the blueprint. So maybe `sites_data`, here and elsewhere.', 'comment_created': datetime.datetime(2021, 6, 22, 3, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 655844419, 'comment_body': 'Rename this variable from _ua to MW_USER_AGENT and then import it for use here:\r\n\r\nhttps://github.com/openzim/wp1/blob/main/wp1/api.py#L9', 'comment_created': datetime.datetime(2021, 6, 22, 3, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 656626455, 'comment_body': ""```suggestion\r\n    return {'sites': sites_data.decode('utf-8').split(',')}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 22, 22, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 656626613, 'comment_body': ""```suggestion\r\n  sitematrix = site.api('sitematrix')['sitematrix']\r\n```"", 'comment_created': datetime.datetime(2021, 6, 22, 22, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 656626783, 'comment_body': ""```suggestion\r\n  redis.setex('sites_data', timedelta(days=1), value=','.join(sites_data))\r\n```"", 'comment_created': datetime.datetime(2021, 6, 22, 22, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 656626844, 'comment_body': ""```suggestion\r\n  return {'sites': sites_data}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 22, 22, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 656627028, 'comment_body': 'Please use single quotes.', 'comment_created': datetime.datetime(2021, 6, 22, 22, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 656627100, 'comment_body': 'Single quotes', 'comment_created': datetime.datetime(2021, 6, 22, 22, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 656627596, 'comment_body': 'Why do you need to patch this?', 'comment_created': datetime.datetime(2021, 6, 22, 22, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 656627793, 'comment_body': ""You should patch `wp1.web.sites.site` here and assert that it wasn't called as well."", 'comment_created': datetime.datetime(2021, 6, 22, 22, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 656627898, 'comment_body': '```suggestion\r\n                  sites:\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 22, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 657365484, 'comment_body': 'Please prefer single quotes for all elements of this dictionary and in all cases. Thanks.', 'comment_created': datetime.datetime(2021, 6, 23, 18, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 657365932, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 6, 23, 18, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 657369458, 'comment_body': 'Without patching `wp1.web.sites.mwclient.Site` , `wp1.web.sites.site` is not getting patched \r\n', 'comment_created': datetime.datetime(2021, 6, 23, 18, 36, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 657369871, 'comment_body': 'Already tried patching it without patching `wp1.web.sites.mwclient.Site` but it gives me error', 'comment_created': datetime.datetime(2021, 6, 23, 18, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 657370756, 'comment_body': 'Can you explain why that is the case? We should avoid having ""magic code"".', 'comment_created': datetime.datetime(2021, 6, 23, 18, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 657374313, 'comment_body': 'Nevermind I see the problem. Because `@patch` is a decorator, the parameters get sent to the patched function in reverse order than they appear in the decorator list. So in your case `patched_site` is actually this line, line 63, the patched mwclient. The first patch statement contributes the second function argument and is actually the one that is unused. Please remove it.', 'comment_created': datetime.datetime(2021, 6, 23, 18, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': '4bf0a299868de4e926bc9d7f2d145534bbbde436', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb3ddb80b3a21d6c10c81cf929017f9f58b394b8', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9342b6569603e9597e6d33fee8a111e7141ebfe5', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12660ac88021ca3d4c394fadf4c01b86c89c0a95', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0644b6a3a5b24f6812f5e0ba0b0aec8c2f8401f1', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
678558599,added function and tests for validating article names,This fixes #371 ,True,378,https://api.github.com/repos/openzim/wp1/pulls/378,https://github.com/openzim/wp1/pull/378,closed,65,0,2,3,1,7,0,0,[],2021-06-27 18:09:28+00:00,2021-06-27 22:17:43+00:00,14895.0,4:08:15,"[{'comment_id': 659363816, 'comment_body': 'I think this will be easier to read as a triple quoted string with literal line breaks.', 'comment_created': datetime.datetime(2021, 6, 27, 19, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 659364012, 'comment_body': 'nit: You should call this `expected`.', 'comment_created': datetime.datetime(2021, 6, 27, 19, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 659364045, 'comment_body': 'nit: And call this `actual`', 'comment_created': datetime.datetime(2021, 6, 27, 19, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 659364395, 'comment_body': 'maybe just `is_invalid`?', 'comment_created': datetime.datetime(2021, 6, 27, 19, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 659375255, 'comment_body': 'I have added white spaces for testing and I have already added .strip() in the code.', 'comment_created': datetime.datetime(2021, 6, 27, 20, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 659380134, 'comment_body': 'I think you inverted this. This will be true if the item ""is invalid"" right? Not if it ""is valid""?', 'comment_created': datetime.datetime(2021, 6, 27, 21, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 659380450, 'comment_body': ""Can you split this up across multiple strings please? Not a triple quoted string but:\r\n\r\n```\r\n  ['This is the first part of the string, this is the '\r\n  'second part of the string this is the third part '\r\n  'of the string....']\r\n```"", 'comment_created': datetime.datetime(2021, 6, 27, 21, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': '1b620fb3dd49949e617cd63827952deca3b14709', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a97b9fe15df82981cef5cf2e36a990bd3de22bb', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e76f65fdbf63a727a58d46785740af916911f8a4', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
681098459,Create backend endpoint for saving simple lists,This fixes #379 ,True,381,https://api.github.com/repos/openzim/wp1/pulls/381,https://github.com/openzim/wp1/pull/381,closed,299,69,10,6,4,44,0,0,[],2021-06-30 18:17:31+00:00,2021-07-03 19:16:11+00:00,262720.0,"3 days, 0:58:40","[{'comment_id': 661915309, 'comment_body': 'nit: remove the only', 'comment_created': datetime.datetime(2021, 7, 1, 1, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662422367, 'comment_body': ""Remove. I don't think this is a valid use of the `default` indicator."", 'comment_created': datetime.datetime(2021, 7, 1, 16, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662422820, 'comment_body': 'Just call this `articles`.', 'comment_created': datetime.datetime(2021, 7, 1, 16, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662423239, 'comment_body': 'Just call this `project`.', 'comment_created': datetime.datetime(2021, 7, 1, 16, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662423714, 'comment_body': ""Can't you put a description or other annotation here to describe when it would be true or false? Same with other responses."", 'comment_created': datetime.datetime(2021, 7, 1, 16, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662424660, 'comment_body': ""Why is the name still 'MyLists'? Didn't we fix that in the previous PR?"", 'comment_created': datetime.datetime(2021, 7, 1, 16, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662425218, 'comment_body': 'How about `ref=""project""`?', 'comment_created': datetime.datetime(2021, 7, 1, 16, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662425545, 'comment_body': 'How about `ref=""articles""`?', 'comment_created': datetime.datetime(2021, 7, 1, 16, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662425967, 'comment_body': ""nit: Just call this `save`, we know there's a form involved."", 'comment_created': datetime.datetime(2021, 7, 1, 16, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662427487, 'comment_body': 'You don\'t need to add an event listener manually. Look at the example on https://vuejs.org/v2/guide/events.html\r\n\r\n`<form v-on:submit.prevent=""onSubmit""></form>`', 'comment_created': datetime.datetime(2021, 7, 1, 16, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662428746, 'comment_body': '`def create`', 'comment_created': datetime.datetime(2021, 7, 1, 16, 19, 31, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662429101, 'comment_body': ""Don't call .get_json() twice. Call it once and store the result in an intermediate variable."", 'comment_created': datetime.datetime(2021, 7, 1, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662429963, 'comment_body': '`def test_create_unsuccessful`', 'comment_created': datetime.datetime(2021, 7, 1, 16, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662430174, 'comment_body': '`def test_create_successful`', 'comment_created': datetime.datetime(2021, 7, 1, 16, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662430623, 'comment_body': ""You're missing tests for the 400 when the articles, list name, or project are missing. Should be three separate tests."", 'comment_created': datetime.datetime(2021, 7, 1, 16, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 662516767, 'comment_body': ""We had changed the name from 'createSimpleLists' to 'MyLists'. Should I change it again?"", 'comment_created': datetime.datetime(2021, 7, 1, 18, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 662517785, 'comment_body': 'If I remove `default` the boolean value sets itself to `true`.But the `success` should be `false` if we are returning items.\r\nShould I remove it anyway?', 'comment_created': datetime.datetime(2021, 7, 1, 18, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 663266292, 'comment_body': 'You should remove it. I don\'t know what you mean by ""sets itself to true"".', 'comment_created': datetime.datetime(2021, 7, 2, 22, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663266485, 'comment_body': 'nit: s/doesnot/does not/', 'comment_created': datetime.datetime(2021, 7, 2, 22, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663266786, 'comment_body': ""Shouldn't the value of this attribute be your save method? You want to call the save method on submit right?"", 'comment_created': datetime.datetime(2021, 7, 2, 22, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663266937, 'comment_body': 'Why not give the form a ref attribute so you can get it directly?', 'comment_created': datetime.datetime(2021, 7, 2, 22, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663267333, 'comment_body': 'nit: line too long?', 'comment_created': datetime.datetime(2021, 7, 2, 22, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663267415, 'comment_body': 'You shouldn\'t return a ""status"" field, that\'s redundant with the HTTP status.', 'comment_created': datetime.datetime(2021, 7, 2, 22, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663267753, 'comment_body': ""You need to edit these parameter names to match what's in the openapi.yml. Then you'll need to update the tests as well."", 'comment_created': datetime.datetime(2021, 7, 2, 22, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663267905, 'comment_body': ""This shouldn't be necessary anymore."", 'comment_created': datetime.datetime(2021, 7, 2, 22, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663268135, 'comment_body': ""s/beacuse/because/\r\n\r\nYou'll have to fix it in the actual form as well, too."", 'comment_created': datetime.datetime(2021, 7, 2, 22, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663268483, 'comment_body': 'The it clause should read like a sentence, and capture the behavior you\'re trying to test. So ""It unsuccessful response"" is not a logical sentence. Something like ""It flams the whoobong when the blah blah blah"" -> `it(\'flams the whoobong when the blah blah blah\')`.\r\n\r\nIt looks like I didn\'t catch this for the initial tests on this page, but you should go back and edit those it blocks as well. It would be fine to do that in this same PR.', 'comment_created': datetime.datetime(2021, 7, 2, 22, 19, 57, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663268570, 'comment_body': 'Same as above with regard to it calls reading like a sentence.', 'comment_created': datetime.datetime(2021, 7, 2, 22, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663268922, 'comment_body': 'You should make it more obvious which item is invalid. Even something like `.../nInvalid#Item` would be better', 'comment_created': datetime.datetime(2021, 7, 2, 22, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663269303, 'comment_body': ""Do you think it's a bug that the user typed 'Statue of Liberty#' and we told them that 'Statue_of_Liberty#' (with underscores) is invalid? Maybe we can do better. Just something to think about maybe for a follow up PR."", 'comment_created': datetime.datetime(2021, 7, 2, 22, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663269735, 'comment_body': 'Do you think we should maybe do this in the selection list retrieval code (where we get the URLs from the meta wikipedia API)? Do we have any use for full URLs with https?', 'comment_created': datetime.datetime(2021, 7, 2, 22, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663270019, 'comment_body': '""Get response"" is not the best documentation. All HTTP endpoints return a response. Think about what the user is actually doing when they call this endpoint. Something like \'Save a new Simple list, validating it first and returning invalid items if they exist\'. Okay I guess I wrote it for you ;)', 'comment_created': datetime.datetime(2021, 7, 2, 22, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663270085, 'comment_body': ""getResponse is way too generic. How about 'createSimpleList'?"", 'comment_created': datetime.datetime(2021, 7, 2, 22, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663270279, 'comment_body': ""You're returning 400 if the params are invalid right? You need to document that here."", 'comment_created': datetime.datetime(2021, 7, 2, 22, 27, 38, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663270902, 'comment_body': 'I believe that change was made erroneously. This is the page for creating simple lists right? The name of the file is `CreateSimpleList.vue`. The other page is `MyLists.vue` right?', 'comment_created': datetime.datetime(2021, 7, 2, 22, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663271287, 'comment_body': 'This is not a response, it is a request, so calling it response is very confusing. Either way `data` or simply `json` would be a better name.', 'comment_created': datetime.datetime(2021, 7, 2, 22, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663395073, 'comment_body': 'Please change these back.', 'comment_created': datetime.datetime(2021, 7, 3, 18, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663395130, 'comment_body': 'This one was actually fine ""It displays wiki projects"" is a good sounding sentence.', 'comment_created': datetime.datetime(2021, 7, 3, 18, 32, 36, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663395152, 'comment_body': 's/loosing/losing/', 'comment_created': datetime.datetime(2021, 7, 3, 18, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663395158, 'comment_body': 's/loosing/losing/', 'comment_created': datetime.datetime(2021, 7, 3, 18, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663395217, 'comment_body': ""It 'displays a textbox with invalid article names'"", 'comment_created': datetime.datetime(2021, 7, 3, 18, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663395411, 'comment_body': 'nit: remove print.', 'comment_created': datetime.datetime(2021, 7, 3, 18, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 663398596, 'comment_body': 'Maybe when we send response `(success=false)` to frontend we should remove the `underscores`?', 'comment_created': datetime.datetime(2021, 7, 3, 19, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 663398812, 'comment_body': ""The thing is, at that point we won't know if the user originally typed the underscores or if we added them, so if we universally remove them, we won't be doing the right thing in all cases.\r\n\r\nIt seems like if we wanted to display the original item, we'd have to change the `validate_list` method to check for forbidden characters before it transforms the spaces. Do you want to file an issue for that?"", 'comment_created': datetime.datetime(2021, 7, 3, 19, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': '750c450df85427b3f6e7313f44631f019bc64506', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23f0bc45b3ad93dc07e30b93b4c346b848516263', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d17d2c869191ea953d291f38982541adb128a6e', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81bf884ec47a25dfce2cd354b66a541ea36e87e4', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e33139548260b21512581685b82eaa6836a8ce95', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8116a5cfd30e9a9537fc411898aa42fcd822382a', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
705092242,added method to save builder,This fixes #383.,True,401,https://api.github.com/repos/openzim/wp1/pulls/401,https://github.com/openzim/wp1/pull/401,closed,125,12,6,6,1,27,0,0,[],2021-08-05 23:48:08+00:00,2021-08-10 17:40:22+00:00,409934.0,"4 days, 17:52:14","[{'comment_id': 683858428, 'comment_body': 'nit: no need for trailing underscore', 'comment_created': datetime.datetime(2021, 8, 5, 23, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684835045, 'comment_body': 'Delete this file. When yoyo asks you if you want to save the configuration, say no.', 'comment_created': datetime.datetime(2021, 8, 8, 22, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684835242, 'comment_body': 'This should not be part of the Builder class. It should be its own method in `wp1.logic.builder`. Also, the method that creates the Builder model and the method that inserts it into the database should be two separate methods.', 'comment_created': datetime.datetime(2021, 8, 8, 22, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684835348, 'comment_body': 'You should never import flask libraries outside of the `web` module. Instead, pass the user_id directly.', 'comment_created': datetime.datetime(2021, 8, 8, 22, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684835512, 'comment_body': 'Please sort these imports as follows:\r\n\r\nlibrary imports (datetime, unittest, etc)\r\n\r\nthird party library imports (attr, flask, etc)\r\n\r\nlocal imports (wp1.*)', 'comment_created': datetime.datetime(2021, 8, 8, 22, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684835570, 'comment_body': 'Again, you should not be importing flask libraries outside the `web` directory.', 'comment_created': datetime.datetime(2021, 8, 8, 22, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684835688, 'comment_body': 'If you follow my advice and make a separate `insert_builder` function in `wp1.logic.builder` that just inserts into the database, then you can test that separately.', 'comment_created': datetime.datetime(2021, 8, 8, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684835766, 'comment_body': 'In flask methods, we use get_db, see the other web methods for an example:\r\n\r\nhttps://github.com/openzim/wp1/blob/main/wp1/web/db.py#L14', 'comment_created': datetime.datetime(2021, 8, 8, 22, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684835804, 'comment_body': ""You shouldn't insert the builder until you know the params are valid."", 'comment_created': datetime.datetime(2021, 8, 8, 22, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684835879, 'comment_body': 'Can we do this in a separate PR, getting the lists? Including the Vue changes, in a separate PR?', 'comment_created': datetime.datetime(2021, 8, 8, 22, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 684836006, 'comment_body': 'Tests in web should inherit from BaseWebTestCase: \r\n\r\nhttps://github.com/openzim/wp1/blob/main/wp1/web/projects_test.py#L8', 'comment_created': datetime.datetime(2021, 8, 8, 22, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685511822, 'comment_body': 'The convention in the codebase is that wp10db should be the first argument.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685512723, 'comment_body': ""Use actual JSON serialization:\r\n\r\n```\r\nimport json\r\nparams = json.dumps({'list': articles.split('\\n')}).encode('utf-8')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 9, 20, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685513204, 'comment_body': 'Again, the first param should be wp10db.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 53, 4, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685514279, 'comment_body': 'It is awkward to pass in the data object directly from the web form. You should instead have separate params to this function for `name`, `user_id`, `project`, and `articles`. The reasoning is that a ""data"" dictionary could contain anything and it\'s not clear what is actually needed to create the builder.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685515020, 'comment_body': 'Maybe I said the wrong thing somewhere, but why is there a test in wp1/logic that inherits from BaseWebTestcase? ', 'comment_created': datetime.datetime(2021, 8, 9, 20, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685515418, 'comment_body': ""nit: This method isn't needed if all it's doing is calling super"", 'comment_created': datetime.datetime(2021, 8, 9, 20, 56, 41, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685516123, 'comment_body': 'Why do you need override_db here? You should use `BaseWpOneDbTest` and self.wp10db: https://github.com/openzim/wp1/blob/main/wp1/base_db_test.py#L39', 'comment_created': datetime.datetime(2021, 8, 9, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685516289, 'comment_body': 'This should not be necessary', 'comment_created': datetime.datetime(2021, 8, 9, 20, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685516774, 'comment_body': 'I would name this method ""save_builder"" because it doesn\'t return anything and saves the builder to the database.', 'comment_created': datetime.datetime(2021, 8, 9, 20, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685517576, 'comment_body': 'This does not need to be a BaseWpOneDbTest because it doesn\'t use the ""WpOneDb"" at all.', 'comment_created': datetime.datetime(2021, 8, 9, 21, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685517704, 'comment_body': 'Please sort these imports.', 'comment_created': datetime.datetime(2021, 8, 9, 21, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685518775, 'comment_body': 'Good catch!', 'comment_created': datetime.datetime(2021, 8, 9, 21, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685617631, 'comment_body': 'Import order should be:\r\n\r\nPython standard librarires (json)\r\nempty line\r\nThird party libraries (attr)\r\nempty line\r\nwp1 libraries\r\n\r\nAnd they should be in alphabetical order where possible.', 'comment_created': datetime.datetime(2021, 8, 10, 1, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685618166, 'comment_body': 'nit: why not extract this as a function in this file `_get_builder_by_user_id` since you use it in both test methods?', 'comment_created': datetime.datetime(2021, 8, 10, 1, 5, 9, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685618436, 'comment_body': 'You should set utcnow to return a real value and test that created_at and updated_at have the right value.', 'comment_created': datetime.datetime(2021, 8, 10, 1, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 685618636, 'comment_body': 'nit: newline before wp1 imports.', 'comment_created': datetime.datetime(2021, 8, 10, 1, 6, 59, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': 'ac9056d01a735b75ca90750c177dd9f8b1f92ef0', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8ac6e92f51829226bc8bb78850fd804ed9e78f2', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ee3e86feb14888011dd36cd0673f741e2373fac', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecbfd1f2626b2001ff26da75275d0d94b3bcd763', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd41b52bc1045c7efb0501bc0ee7d079db4e54c', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4595f92420e5d8e27f667df75f87b8f6ec92e11', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
685491007,added auth to selections,This fixes #386 ,True,387,https://api.github.com/repos/openzim/wp1/pulls/387,https://github.com/openzim/wp1/pull/387,closed,108,22,10,2,1,12,0,0,[],2021-07-07 20:29:17+00:00,2021-07-10 16:45:50+00:00,245793.0,"2 days, 20:16:33","[{'comment_id': 666587670, 'comment_body': 'I would name this file `save_list_failure` because there might be other failure fixtures in the future.', 'comment_created': datetime.datetime(2021, 7, 9, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 666587713, 'comment_body': 'Same thing: `save_list_success`.', 'comment_created': datetime.datetime(2021, 7, 9, 0, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 666588225, 'comment_body': ""I would put all of the above tests in a `describe('when the user is logged in', ...` block, so that you could put the cy.intercept for identify in a beforeEach and not have to repeat it every time. Then put this one in a `describe('when the user is not logged in', ...)` block."", 'comment_created': datetime.datetime(2021, 7, 9, 0, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 666597684, 'comment_body': 'Components should be upper camel case: `LoginRequired`. Be sure to rename the file too.', 'comment_created': datetime.datetime(2021, 7, 9, 0, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 666597922, 'comment_body': ""Shouldn't this be used on the ManualUpdate page too?"", 'comment_created': datetime.datetime(2021, 7, 9, 0, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 666919124, 'comment_body': 'Are you talking about the `LoginRequired` component?', 'comment_created': datetime.datetime(2021, 7, 9, 12, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 667126239, 'comment_body': ""Yes, just wondering because I don't see any changes to the ManualUpdate component and I assume it should be using the same LoginRequired component."", 'comment_created': datetime.datetime(2021, 7, 9, 18, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 667141318, 'comment_body': 'But I have made changes to `Update Page` component. \r\nAnd I am using `LoginRequired` component only.', 'comment_created': datetime.datetime(2021, 7, 9, 18, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 667229111, 'comment_body': 'Good point. I only counted two usages and forgot the page was called UpdatePage. I guess the missing usage is on MyLists?', 'comment_created': datetime.datetime(2021, 7, 9, 21, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 667231004, 'comment_body': ""Should I add it?\r\nI purposely didn't add it"", 'comment_created': datetime.datetime(2021, 7, 9, 22, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 667232005, 'comment_body': 'Can you expand on your reasoning for not adding it?', 'comment_created': datetime.datetime(2021, 7, 9, 22, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 667331065, 'comment_body': ""Sorry I got confused with the other PR.\r\nI'll fix it.\r\n"", 'comment_created': datetime.datetime(2021, 7, 10, 12, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}]","[{'commit_sha': 'bdd98bd61b43a20574a892f980b0c2ce6e524044', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e34249976101d8e416200f498b3e2f432bff7d', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
701661450,added simple list builder module,This fixes #395.,True,398,https://api.github.com/repos/openzim/wp1/pulls/398,https://github.com/openzim/wp1/pull/398,closed,132,75,8,7,3,22,0,0,[],2021-08-02 17:41:34+00:00,2021-08-04 20:10:45+00:00,181751.0,"2 days, 2:29:11","[{'comment_id': 681171521, 'comment_body': ""There is no need to have validate_list be it's own function in its own module. It's only used for validating Simple builders like this one. For now, you can move the function to this module as `_validate_list` and call it the way you are doing. But eventually, the validate method on SimpleBuilder should ***be*** that function, if that makes sense."", 'comment_created': datetime.datetime(2021, 8, 2, 18, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681173845, 'comment_body': ""We should validate that the params contain a 'list' entry. We might also want to validate that the params don't contain any **other** entries, to protect against accidentally calling the SimpleBuilder with params that looks similar to, but aren't quite, SimpleBuilder params.\r\n\r\nFor now, you can simply raise `ValueError`, but we should create an issue for tracking a custom Exception hierarchy that we can catch for explicitly."", 'comment_created': datetime.datetime(2021, 8, 2, 18, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681174119, 'comment_body': ""We should validate that 'list' exists here too, see comment above."", 'comment_created': datetime.datetime(2021, 8, 2, 18, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681921491, 'comment_body': 'You need to use a context manager here:\r\n\r\n```\r\nwith self.assertRaises(KeyError):\r\n   code_that_raises()\r\n```\r\n\r\nOtherwise nothing is being asserted.', 'comment_created': datetime.datetime(2021, 8, 3, 16, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681923082, 'comment_body': ""You need to actually raise the exception:\r\n\r\n```\r\nraise ValueError('Missing required param: list')\r\n```\r\n\r\nLet's not use KeyError, that has a very specific meaning around dictionaries. It also is very nice to specify the actual key/param that caused the error."", 'comment_created': datetime.datetime(2021, 8, 3, 16, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681923831, 'comment_body': 's/Unwanted/Additional unnecessary/', 'comment_created': datetime.datetime(2021, 8, 3, 16, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681924332, 'comment_body': 'Why `insert` and not just `append`?', 'comment_created': datetime.datetime(2021, 8, 3, 16, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681925347, 'comment_body': 'Just realized that ""forbidden"" is spelled wrong throughout this function. Please fix.', 'comment_created': datetime.datetime(2021, 8, 3, 16, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681926369, 'comment_body': '`forbiden_chars` is spelled wrong here too.', 'comment_created': datetime.datetime(2021, 8, 3, 16, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681927369, 'comment_body': ""The last value of the tuple should be full, English error messages like:\r\n\r\n['The list contained the following invalid characters: # <', 'The list contained an item longer than 256 bytes', 'The list did not satisfy some other foo bar requirement']"", 'comment_created': datetime.datetime(2021, 8, 3, 16, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681928149, 'comment_body': 'Please move this file to `wp1/selection/models/simple.py`', 'comment_created': datetime.datetime(2021, 8, 3, 16, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681928520, 'comment_body': 's/ValidateArticleNameTest/SimpleBuilderTest/', 'comment_created': datetime.datetime(2021, 8, 3, 16, 40, 37, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681929544, 'comment_body': ""Currently, this ignores the content_type parameter. Since it currently can only output `text/tab-separated-values`, it should raise a `ValueError` if the content_type doesn't match that."", 'comment_created': datetime.datetime(2021, 8, 3, 16, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681929900, 'comment_body': ""nit: I don't think you need .keys() here."", 'comment_created': datetime.datetime(2021, 8, 3, 16, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 681930451, 'comment_body': ""Did you remove this function from the selection module? I don't see that change. It's no longer needed there."", 'comment_created': datetime.datetime(2021, 8, 3, 16, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 682154141, 'comment_body': ""nit: you don't need this line for this test."", 'comment_created': datetime.datetime(2021, 8, 3, 22, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 682156150, 'comment_body': ""I don't think you need this import."", 'comment_created': datetime.datetime(2021, 8, 3, 23, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 682156455, 'comment_body': 'Since this method is now just calling the _validate_list function, can you move the body of _validate_list here and get rid of the extra function?', 'comment_created': datetime.datetime(2021, 8, 3, 23, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 682772921, 'comment_body': 's/forbiden/forbidden/', 'comment_created': datetime.datetime(2021, 8, 4, 16, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 682773320, 'comment_body': ""Looks like 'forbiden' made it into the API? Can you change it here and in openapi.yml?"", 'comment_created': datetime.datetime(2021, 8, 4, 16, 25, 49, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 682774036, 'comment_body': ""Actually, this should be `errors` now, not `forbiden_chars`. Can you file an issue so that they're displayed appropriately on the frontend?"", 'comment_created': datetime.datetime(2021, 8, 4, 16, 26, 50, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 682891448, 'comment_body': 'Please fix.', 'comment_created': datetime.datetime(2021, 8, 4, 19, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': '1af69c4bd04ac14dc83af2ef9cbdff69c9ebe6fb', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8277996cbd27d4f511fbf02e1ef173ca91c3c100', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '986666547e34e72c6db9d7aee3e74ce1f6cbafe5', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbfdbf85c1b3a78d7e947370d271fe3ae976fa6e', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a82740e4b6b78a066207667aa5dfb368e88280fd', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bf422697a9c35ae1dc0859777692e39afbc614c', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7765a38cf2aadb77a5b763daad0bcc830b0067ed', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
669898884,"Skeleton of selection pages, with Secondary Nav Bar",@audiodude This fixes #357 ,True,358,https://api.github.com/repos/openzim/wp1/pulls/358,https://github.com/openzim/wp1/pull/358,closed,119,10,10,3,1,4,0,0,[],2021-06-14 21:50:18+00:00,2021-06-17 18:56:43+00:00,248785.0,"2 days, 21:06:25","[{'comment_id': 651318066, 'comment_body': ""This isn't right. This will just display the secondary nav component as the main component when the URL is `/selection`. I think we don't actually need a base `/selection` route right now."", 'comment_created': datetime.datetime(2021, 6, 14, 22, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 651318222, 'comment_body': 'The secondary nav should not display on all pages, only the selection pages.', 'comment_created': datetime.datetime(2021, 6, 14, 22, 26, 11, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 651318777, 'comment_body': 'The URL should be `/selection/user` not `/selection/myLists`', 'comment_created': datetime.datetime(2021, 6, 14, 22, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 651319040, 'comment_body': 'The URL should be `/selection/lists/simple/new`', 'comment_created': datetime.datetime(2021, 6, 14, 22, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': '8a675eb48a60dd9f7f2aadd130da4b93e919fb6a', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04935423cc3747e06718ebba7a0a045b89973aeb', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3234d9720e9dcba47c17f48d7797ce68bf4482e0', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
677142783,added UI for creating list,"This fixes #367 
Shouldn't this be under the `Create Simple List` page (currently in mock-up it was under My Lists)?
",True,369,https://api.github.com/repos/openzim/wp1/pulls/369,https://github.com/openzim/wp1/pull/369,closed,146,5,4,4,11,19,0,0,[],2021-06-24 14:05:20+00:00,2021-06-26 19:49:04+00:00,193424.0,"2 days, 5:43:44","[{'comment_id': 658234543, 'comment_body': 'This will be true of several pages besides Create Simple List', 'comment_created': datetime.datetime(2021, 6, 24, 19, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658234982, 'comment_body': ""We need to mock out the request for this, because we don't want to call the actual Mediawiki API in CI."", 'comment_created': datetime.datetime(2021, 6, 24, 19, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658236499, 'comment_body': ""I think what you actually want is the opposite of this: that when you don't have a list name, you get an error. Also in general, a test that doesn't make any assertions about the state of the page is not a good test."", 'comment_created': datetime.datetime(2021, 6, 24, 19, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658236614, 'comment_body': ""Same thing, this doesn't test anything."", 'comment_created': datetime.datetime(2021, 6, 24, 19, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658237487, 'comment_body': ""You should perform this transformation in the data fetching function so that the select can simply display the items. Also, if you're going to hardcode en.wikipedia.org, you should remove it from the list so it doesn't appear twice."", 'comment_created': datetime.datetime(2021, 6, 24, 19, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658239882, 'comment_body': 'Change this placeholder to be an appropriate list of items of some sort:\r\n\r\n```\r\nplaceholder=""Eiffel_Tower\r\nStatue_of_Liberty\r\nFreedom_Monument_(Baghdad)\r\nGeorge-Étienne_Cartier_Monument""\r\n```\r\n\r\nNote that this list contains both parenthesis and non-ASCII characters', 'comment_created': datetime.datetime(2021, 6, 24, 19, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658241101, 'comment_body': ""If you've encoded this here, you don't need to hardcode it in the <select> construction."", 'comment_created': datetime.datetime(2021, 6, 24, 19, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658287805, 'comment_body': 'So should I remove this for now?', 'comment_created': datetime.datetime(2021, 6, 24, 21, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 658288245, 'comment_body': 'I am removing it from the list.\r\nI have to hardcode here because it should be seen as default option in select.', 'comment_created': datetime.datetime(2021, 6, 24, 21, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mahakporwal02', 'type': 'User'}, {'comment_id': 658896628, 'comment_body': 'This array can be empty, because your HTML contains a literal `<option>` for en.wikipedia.org. That will render no matter what is in the list.', 'comment_created': datetime.datetime(2021, 6, 25, 16, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658899327, 'comment_body': ""You need to do this in a `beforeEach` in this describe block. Otherwise, you're not doing it for every test."", 'comment_created': datetime.datetime(2021, 6, 25, 16, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658899856, 'comment_body': ""The name of this test should be updated, because it's now testing that the validation works."", 'comment_created': datetime.datetime(2021, 6, 25, 16, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658900048, 'comment_body': 'Why do you need to type into the text input?', 'comment_created': datetime.datetime(2021, 6, 25, 16, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658902371, 'comment_body': ""Although this technically prevents the user from submitting an empty list name, the UI with alerts is not particularly user-friendly. What we would like is a validation function on this page that runs on the `<input>` onBlur, as well as when the save button is clicked. It should change the style of the inputs and display inline error messages, similar to: https://getbootstrap.com/docs/5.0/forms/validation/#custom-styles\r\n\r\nApologies that this wasn't in the mock."", 'comment_created': datetime.datetime(2021, 6, 25, 16, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 658904326, 'comment_body': ""I know in Python you get bugs if you modify a list while you're iterating over it. The same is probably true in Javascript? Why not just:\r\n\r\n```suggestion\r\n      index = this.wikiProjects.indexOf('https://en.wikipedia.org')\r\n      this.wikiprojects.splice(index, 1);\r\n```"", 'comment_created': datetime.datetime(2021, 6, 25, 16, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 659099938, 'comment_body': 'Still wondering this.', 'comment_created': datetime.datetime(2021, 6, 26, 1, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 659194008, 'comment_body': 'If you have this list populated on page load, as well as the hardcoded literal `<option>` you get the following:\r\n\r\n<img width=""783"" alt=""Screen Shot 2021-06-26 at 10 12 06 AM"" src=""https://user-images.githubusercontent.com/57832/123520764-28d5ae00-d667-11eb-87e8-75569693abb7.png"">\r\n\r\nThe array should be empty.', 'comment_created': datetime.datetime(2021, 6, 26, 17, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 659194276, 'comment_body': ""I don't think this is necessary, let's just use the default Bootstrap styles."", 'comment_created': datetime.datetime(2021, 6, 26, 17, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 659194409, 'comment_body': ""This doesn't need to be bold, remove `font-weight` (and generally avoid inline styles)."", 'comment_created': datetime.datetime(2021, 6, 26, 17, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': '32b32317706c01be4a2b319f4978ed5445498bed', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0d9f966274ced9a15f691d7b46bcfbf2326ca4e', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdcac1f25e4b3994eb428dd03614ef178ec6019a', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0a13ad8a8d6df0585470900af09e5a5116ab4f9', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
704803276,Fixed error in frontend,This PR fixes #399 ,True,400,https://api.github.com/repos/openzim/wp1/pulls/400,https://github.com/openzim/wp1/pull/400,closed,5,8,3,1,1,0,0,0,[],2021-08-05 15:21:16+00:00,2021-08-05 16:27:27+00:00,3971.0,1:06:11,[],"[{'commit_sha': 'cc215375d222c5347d7e44c2751505e54e7d5d98', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16
707811496,frontend displays lists in MyLists,"This fixes #406 
I will be adding cypress tests in the following commit.",True,408,https://api.github.com/repos/openzim/wp1/pulls/408,https://github.com/openzim/wp1/pull/408,closed,384,57,10,7,1,27,0,0,[],2021-08-10 22:47:52+00:00,2021-08-16 23:00:46+00:00,519174.0,"6 days, 0:12:54","[{'comment_id': 686372977, 'comment_body': 'This is not a good key, because multiple lists can have the same project name. Maybe return the builder.b_id and use that?', 'comment_created': datetime.datetime(2021, 8, 10, 22, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 686422150, 'comment_body': 'You need to JOIN on the selections on s_builder_id = b_id, so that you know what selections are available for each list/builder.', 'comment_created': datetime.datetime(2021, 8, 11, 1, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 686422404, 'comment_body': ""Generally, you don't want to use methods that are part of the library for testing other parts of the library. Do a cursor.execute and insert this data directly. See logic/project_test.py for examples."", 'comment_created': datetime.datetime(2021, 8, 11, 1, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 686422754, 'comment_body': ""You don't want to put the whole CONTENT_TYPE_TO_EXT dictionary in every builder entry, it's redundant. You need to JOIN with the selections as I mentioned above. Then, for each builder, there should be an array of `selections` that includes the content_type, extension, and url."", 'comment_created': datetime.datetime(2021, 8, 11, 1, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 688657599, 'comment_body': 'I think it would simplify the API if you just returned empty list for this scenario.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 688657963, 'comment_body': 'Please fix.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 688658972, 'comment_body': ""I don't think you can use the name for the id property, because lists are not guaranteed to have unique names."", 'comment_created': datetime.datetime(2021, 8, 13, 17, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 688660834, 'comment_body': 'If there are multiple selections for a builder, won\'t this return two ""article_lists"" for that builder, and you will have duplicates on the UI screen instead of having multiple extensions for one list?', 'comment_created': datetime.datetime(2021, 8, 13, 17, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 688661151, 'comment_body': 'nit: remove print statement', 'comment_created': datetime.datetime(2021, 8, 13, 17, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 688661502, 'comment_body': 'nit: these are reversed, it should always be `assertEqual(expected, actual)`.', 'comment_created': datetime.datetime(2021, 8, 13, 17, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 688662370, 'comment_body': ""Why do you insert into the database, if you're also mocking the return value of get_lists? Only one or the other should be necessary, and I would suggest using real database data."", 'comment_created': datetime.datetime(2021, 8, 13, 17, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 688663019, 'comment_body': ""Per my earlier comment: write a test here, using real get_lists data, that if there are two selections for a builder that the 'list_data' array only contains one list entry. It will probably fail right now."", 'comment_created': datetime.datetime(2021, 8, 13, 17, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 688856470, 'comment_body': 'I thought about this, and I think you want an RIGHT OUTER JOIN on builders, so that you can get the builder even if there are no selections.', 'comment_created': datetime.datetime(2021, 8, 14, 3, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689006054, 'comment_body': 'nit: line length', 'comment_created': datetime.datetime(2021, 8, 14, 23, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689006175, 'comment_body': 'You should have ""test_get_lists_multiple_selections"". If you did, I would be able to see that your query is working right for builders with multiple selections.', 'comment_created': datetime.datetime(2021, 8, 14, 23, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689006222, 'comment_body': 'You should also have ""test_get_lists_builder_with_no_selections"" to test that it retrieves a builder even if the selections table is empty.', 'comment_created': datetime.datetime(2021, 8, 14, 23, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689006328, 'comment_body': 'Honestly, this is a bit too much logic for a web method. Have you considered having the get_lists function return a proper list of builders, all with ""selections"" properties?', 'comment_created': datetime.datetime(2021, 8, 14, 23, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689006358, 'comment_body': 'nit: s/selections_data/selections/', 'comment_created': datetime.datetime(2021, 8, 14, 23, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689006434, 'comment_body': 'Although it made sense to have the builders be a dictionary with ids as keys for how you constructed it, for the API it makes more sense for ""id"" to be just another field on `list_data` and `list_data` itself to be an array.', 'comment_created': datetime.datetime(2021, 8, 15, 0, 0, 36, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689006469, 'comment_body': 'nit: s/list_data/builders/', 'comment_created': datetime.datetime(2021, 8, 15, 0, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689006620, 'comment_body': 'You should have the same tests here I suggested for the get_lists methods: builder with one selection (you already have this), builder with multiple selections (you already have this), builder with no selections (missing) and no builders (missing).', 'comment_created': datetime.datetime(2021, 8, 15, 0, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689006698, 'comment_body': ""Although I suggested that each `item` should have an `id`, property, currently they don't. Did you test your frontend? I don't think this is working."", 'comment_created': datetime.datetime(2021, 8, 15, 0, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689007504, 'comment_body': ""Actually now that I think of it, this won't work either, because there's no `extension` field in the item, it has a list of selections now."", 'comment_created': datetime.datetime(2021, 8, 15, 0, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689168338, 'comment_body': 's/list_data/id_/', 'comment_created': datetime.datetime(2021, 8, 16, 0, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689168394, 'comment_body': 'This should not be necessary. If the list is empty, you can just return it.', 'comment_created': datetime.datetime(2021, 8, 16, 0, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689168586, 'comment_body': 'nit: line length.', 'comment_created': datetime.datetime(2021, 8, 16, 0, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}, {'comment_id': 689168616, 'comment_body': 'nit: line length.', 'comment_created': datetime.datetime(2021, 8, 16, 0, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'audiodude', 'type': 'User'}]","[{'commit_sha': 'ff519e20e8718fbac0dda5af6b9cd20ae560f627', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '710f03f093994a837887fcc5385136da8a6a6bb8', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cfcfb87432fc7554ef03eb47997d13ee5147595', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cddbeb987ddd0026d8c803acbbf18eaa2bffc067', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '899a09306b49d5683cf0678bfd0acddcd39b3f28', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786b13193e5bb658a9d41acc09c81fadbf832d58', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa222893c2b1ee55b28036fd5c2edcd708413542', 'committer_username': 'mahakporwal02', 'committer_name': 'Mahak Porwal', 'committer_email': None, 'commit_date': datetime.datetime(2019, 10, 12, 18, 14, 17, tzinfo=datetime.timezone.utc)}]",Mahak Porwal,56486682,,User,,46,,5,16

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
50779114,wp1,openzim/wp1,Python,17,24,10,7,1577,74,5,1,"[{'id': 719922891, 'number': 437, 'closed': datetime.datetime(2022, 1, 23, 22, 40, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 25, 18, 47, 8, tzinfo=datetime.timezone.utc), 'time_taken': 13060388.0, 'time_delta': '151 days, 3:53:08', 'additions': 58, 'deletions': 31, 'state': 'closed'}, {'id': 707811496, 'number': 408, 'closed': datetime.datetime(2021, 8, 16, 23, 0, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 22, 47, 52, tzinfo=datetime.timezone.utc), 'time_taken': 519174.0, 'time_delta': '6 days, 0:12:54', 'additions': 384, 'deletions': 57, 'state': 'closed'}, {'id': 705092242, 'number': 401, 'closed': datetime.datetime(2021, 8, 10, 17, 40, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 23, 48, 8, tzinfo=datetime.timezone.utc), 'time_taken': 409934.0, 'time_delta': '4 days, 17:52:14', 'additions': 125, 'deletions': 12, 'state': 'closed'}, {'id': 704803276, 'number': 400, 'closed': datetime.datetime(2021, 8, 5, 16, 27, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 15, 21, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3971.0, 'time_delta': '1:06:11', 'additions': 5, 'deletions': 8, 'state': 'closed'}, {'id': 701661450, 'number': 398, 'closed': datetime.datetime(2021, 8, 4, 20, 10, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 17, 41, 34, tzinfo=datetime.timezone.utc), 'time_taken': 181751.0, 'time_delta': '2 days, 2:29:11', 'additions': 132, 'deletions': 75, 'state': 'closed'}, {'id': 686750844, 'number': 388, 'closed': datetime.datetime(2021, 7, 29, 1, 47, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 12, 27, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1689593.0, 'time_delta': '19 days, 13:19:53', 'additions': 104, 'deletions': 17, 'state': 'closed'}, {'id': 685491007, 'number': 387, 'closed': datetime.datetime(2021, 7, 10, 16, 45, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 20, 29, 17, tzinfo=datetime.timezone.utc), 'time_taken': 245793.0, 'time_delta': '2 days, 20:16:33', 'additions': 108, 'deletions': 22, 'state': 'closed'}, {'id': 681098459, 'number': 381, 'closed': datetime.datetime(2021, 7, 3, 19, 16, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 18, 17, 31, tzinfo=datetime.timezone.utc), 'time_taken': 262720.0, 'time_delta': '3 days, 0:58:40', 'additions': 299, 'deletions': 69, 'state': 'closed'}, {'id': 678558599, 'number': 378, 'closed': datetime.datetime(2021, 6, 27, 22, 17, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 27, 18, 9, 28, tzinfo=datetime.timezone.utc), 'time_taken': 14895.0, 'time_delta': '4:08:15', 'additions': 65, 'deletions': 0, 'state': 'closed'}, {'id': 677142783, 'number': 369, 'closed': datetime.datetime(2021, 6, 26, 19, 49, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 14, 5, 20, tzinfo=datetime.timezone.utc), 'time_taken': 193424.0, 'time_delta': '2 days, 5:43:44', 'additions': 146, 'deletions': 5, 'state': 'closed'}, {'id': 674926091, 'number': 368, 'closed': datetime.datetime(2021, 6, 23, 20, 6, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 21, 22, 8, 58, tzinfo=datetime.timezone.utc), 'time_taken': 165433.0, 'time_delta': '1 day, 21:57:13', 'additions': 119, 'deletions': 2, 'state': 'closed'}, {'id': 673768976, 'number': 364, 'closed': datetime.datetime(2021, 6, 19, 18, 31, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 22, 54, 50, tzinfo=datetime.timezone.utc), 'time_taken': 70591.0, 'time_delta': '19:36:31', 'additions': 43, 'deletions': 4, 'state': 'closed'}, {'id': 672928345, 'number': 361, 'closed': datetime.datetime(2021, 6, 18, 23, 34, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 19, 34, 1, tzinfo=datetime.timezone.utc), 'time_taken': 100832.0, 'time_delta': '1 day, 4:00:32', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 669898884, 'number': 358, 'closed': datetime.datetime(2021, 6, 17, 18, 56, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 21, 50, 18, tzinfo=datetime.timezone.utc), 'time_taken': 248785.0, 'time_delta': '2 days, 21:06:25', 'additions': 119, 'deletions': 10, 'state': 'closed'}, {'id': 668860930, 'number': 353, 'closed': datetime.datetime(2021, 6, 14, 20, 17, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 12, 45, 6, tzinfo=datetime.timezone.utc), 'time_taken': 199941.0, 'time_delta': '2 days, 7:32:21', 'additions': 124, 'deletions': 4, 'state': 'closed'}, {'id': 657775750, 'number': 345, 'closed': datetime.datetime(2021, 6, 11, 1, 46, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 30, 18, 46, 48, tzinfo=datetime.timezone.utc), 'time_taken': 975584.0, 'time_delta': '11 days, 6:59:44', 'additions': 318, 'deletions': 18, 'state': 'closed'}, {'id': 626203994, 'number': 328, 'closed': datetime.datetime(2021, 4, 30, 16, 9, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 29, 15, 20, 33, tzinfo=datetime.timezone.utc), 'time_taken': 89316.0, 'time_delta': '1 day, 0:48:36', 'additions': 160, 'deletions': 111, 'state': 'closed'}, {'id': 622145502, 'number': 327, 'closed': datetime.datetime(2021, 4, 23, 17, 40, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 23, 15, 15, 9, tzinfo=datetime.timezone.utc), 'time_taken': 8697.0, 'time_delta': '2:24:57', 'additions': 1, 'deletions': 51, 'state': 'closed'}, {'id': 620939900, 'number': 325, 'closed': datetime.datetime(2021, 4, 23, 2, 18, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 22, 9, 55, 23, tzinfo=datetime.timezone.utc), 'time_taken': 59006.0, 'time_delta': '16:23:26', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 609258229, 'number': 323, 'closed': datetime.datetime(2021, 4, 10, 0, 17, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 22, 1, 36, tzinfo=datetime.timezone.utc), 'time_taken': 353731.0, 'time_delta': '4 days, 2:15:31', 'additions': 27, 'deletions': 1, 'state': 'closed'}, {'id': 609142918, 'number': 322, 'closed': datetime.datetime(2021, 4, 10, 16, 40, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 19, 17, 10, tzinfo=datetime.timezone.utc), 'time_taken': 422620.0, 'time_delta': '4 days, 21:23:40', 'additions': 37, 'deletions': 0, 'state': 'closed'}, {'id': 608584544, 'number': 320, 'closed': datetime.datetime(2021, 4, 4, 18, 26, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 4, 17, 50, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2192.0, 'time_delta': '0:36:32', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 603158976, 'number': 311, 'closed': datetime.datetime(2021, 3, 29, 21, 36, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 21, 29, 6, tzinfo=datetime.timezone.utc), 'time_taken': 416.0, 'time_delta': '0:06:56', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 601839396, 'number': 306, 'closed': datetime.datetime(2021, 3, 26, 18, 57, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 18, 51, 47, tzinfo=datetime.timezone.utc), 'time_taken': 321.0, 'time_delta': '0:05:21', 'additions': 54, 'deletions': 28, 'state': 'closed'}, {'id': 601623964, 'number': 302, 'closed': datetime.datetime(2021, 4, 1, 23, 36, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 13, 39, 5, tzinfo=datetime.timezone.utc), 'time_taken': 554270.0, 'time_delta': '6 days, 9:57:50', 'additions': 31, 'deletions': 0, 'state': 'closed'}, {'id': 601471566, 'number': 301, 'closed': datetime.datetime(2021, 3, 31, 20, 58, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 10, 8, 9, tzinfo=datetime.timezone.utc), 'time_taken': 471015.0, 'time_delta': '5 days, 10:50:15', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 601016964, 'number': 298, 'closed': datetime.datetime(2021, 3, 30, 20, 49, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 25, 19, 51, 52, tzinfo=datetime.timezone.utc), 'time_taken': 435483.0, 'time_delta': '5 days, 0:58:03', 'additions': 17, 'deletions': 1, 'state': 'closed'}, {'id': 599921006, 'number': 287, 'closed': datetime.datetime(2021, 3, 30, 17, 50, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 17, 47, 48, tzinfo=datetime.timezone.utc), 'time_taken': 518566.0, 'time_delta': '6 days, 0:02:46', 'additions': 18, 'deletions': 1, 'state': 'closed'}, {'id': 597506629, 'number': 286, 'closed': datetime.datetime(2021, 3, 29, 22, 0, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 21, 15, 22, 29, tzinfo=datetime.timezone.utc), 'time_taken': 715096.0, 'time_delta': '8 days, 6:38:16', 'additions': 17, 'deletions': 1, 'state': 'closed'}, {'id': 595025513, 'number': 284, 'closed': datetime.datetime(2021, 3, 18, 7, 35, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 17, 20, 19, 37, tzinfo=datetime.timezone.utc), 'time_taken': 40566.0, 'time_delta': '11:16:06', 'additions': 9, 'deletions': 6, 'state': 'closed'}, {'id': 594214234, 'number': 283, 'closed': datetime.datetime(2021, 3, 17, 8, 50, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 20, 26, 10, tzinfo=datetime.timezone.utc), 'time_taken': 44669.0, 'time_delta': '12:24:29', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 593049661, 'number': 282, 'closed': datetime.datetime(2021, 3, 16, 1, 55, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 12, 54, 7, tzinfo=datetime.timezone.utc), 'time_taken': 46883.0, 'time_delta': '13:01:23', 'additions': 4, 'deletions': 0, 'state': 'closed'}]"
