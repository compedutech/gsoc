pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
666888743,[GSoC] [Design] : Socket Library,"Socket Module API

- The markdown document contains details about implementation for the Socket Module APIs exposed to user.
- The document is just for review purpose and PR will be **closed** after review.

Signed-off-by: Lakshya Singh <lakshay.singh1108@gmail.com>
",False,17899,https://api.github.com/repos/chapel-lang/chapel/pulls/17899,https://github.com/chapel-lang/chapel/pull/17899,closed,233,0,1,21,6,97,1,0,[{'name': 'post-release'}],2021-06-10 13:23:24+00:00,2022-01-13 21:02:41+00:00,18776357.0,"217 days, 7:39:17","[{'comment_id': 650547124, 'comment_body': 'Is 5 the default value for backlog ? I believe it should be set to 0. Also, please clarify if its an optional parameter. \r\nPython 3.5 has made this a optional parameter. \r\nYou may describe the parameters after this line. ', 'comment_created': datetime.datetime(2021, 6, 13, 16, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650549465, 'comment_body': 'Could you please write about the name of the Module, describe the classes first and then dive into the methods ?', 'comment_created': datetime.datetime(2021, 6, 13, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650549822, 'comment_body': ""Here, it's not clear how the socket object was created. Do we have a `const socket = Socket()` ?"", 'comment_created': datetime.datetime(2021, 6, 13, 16, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650551353, 'comment_body': ""Additionally, shouldn't we have a `TCPSocket()` subtype since we have `UDPSocket()` subtype. I guess that was inspired from Julia. "", 'comment_created': datetime.datetime(2021, 6, 13, 16, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650551443, 'comment_body': 'I really like the way Julia language has describe their methods in the docs. Perhaps you can rewrite each of the methods in a similar fashion so that its easier for reviewers to understand param types and return types. Also, you could write which are the optional parameters, and also write the default parameter values.  For example, \r\nMethod:\r\n```\r\nsocket.listen( addr, port, backlog, reuseaddr) -> TCPServer\r\n```\r\nParameters:\r\n```\r\naddr: IPAddr - ipv4/ipv6 address \r\nport: Integer - port number\r\nbacklog: Integer - optional parameter, default value = 0\r\nreuseaddr: Boolean - optional parameter, default value = true\r\n```', 'comment_created': datetime.datetime(2021, 6, 13, 16, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650551494, 'comment_body': 'I think the connect method description section should be at the top before describing listen method. ', 'comment_created': datetime.datetime(2021, 6, 13, 16, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650551681, 'comment_body': 'TCPConn seems to be analogous to the TCPSocket instance I had described at the top comment. I think we should rename `TCPConn->TCPSocket`. ', 'comment_created': datetime.datetime(2021, 6, 13, 16, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650552028, 'comment_body': 'We can also rename `TCPListener -> TCPServer`. ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650552182, 'comment_body': 'It would be great if you could describe each of these methods further. ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650552710, 'comment_body': 'Its worth mentioning that addr would point to localhost. Can we support optional parameters like `backlog`, `timeout`, `family` ?  ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650553163, 'comment_body': 'What would be the name of this method ? Maybe `setIPAddr()` ? Also, we need to differentiate between converting string to ipv4 and ipv6.\r\nWe should also have an additional method `getIPAddr()` & `getIPAddr(IPv6)` which would return an IP address string. ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650553260, 'comment_body': 'Could you describe these methods further ? ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650553758, 'comment_body': ""I'm not sure about the addition of these functions. Julia supports these but I believe Python doesn't. Anyways, option to enable or disable the algorithms is a good way to go forward. "", 'comment_created': datetime.datetime(2021, 6, 13, 17, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650553862, 'comment_body': 'I think this argument may be named `tcp_nodelay` set to 1, i.e., disabled by default. ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650558727, 'comment_body': ""Wouldn't this bind function be defined in a base class ? How will the bind function differentiate between ipv4 and ipv6? Please write more about the base class and what other methods including bind will be present in it. "", 'comment_created': datetime.datetime(2021, 6, 13, 18, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650559439, 'comment_body': 'I think `recvfrom` returns an InetAddr and data only. Does Python or Julia return host, port and data ?', 'comment_created': datetime.datetime(2021, 6, 13, 18, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650559740, 'comment_body': 'Most UDP implementations I came across use `send` instead of `write`, so maybe we can rename this to `send`. Can you point me to any implementation where you got this from ?', 'comment_created': datetime.datetime(2021, 6, 13, 18, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650824725, 'comment_body': 'The MAX_VALUE in the Linux kernel is specified to be `4096` but am not sure about what is the generally taken default for `backlog`', 'comment_created': datetime.datetime(2021, 6, 14, 10, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650826589, 'comment_body': ""I have defined `TCPConn` as a translation of `UDPSocket` because the socket isn't just in an unconnected state but will have a established connection and also helps to differ from the TCP socket one we get from `listen`"", 'comment_created': datetime.datetime(2021, 6, 14, 10, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650827129, 'comment_body': ""- no there isn't any socket object we have the function `listen` in the Socket Module that was what I was referring to.\r\n- `TCPListener` seemed more like what it was doing because a server should handle requests on its own but this is just a socket in listening mode which user can use as a server socket"", 'comment_created': datetime.datetime(2021, 6, 14, 10, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650827984, 'comment_body': 'I will make these changes', 'comment_created': datetime.datetime(2021, 6, 14, 10, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650829733, 'comment_body': ""- connect can support timeout using `select` or `epoll`\r\n- I was thinking that we can check at runtime the type of IPAddr so we can use that as family\r\n- backlog 🤔 will be useful only for a socket in a listening state so I don't think will need it here"", 'comment_created': datetime.datetime(2021, 6, 14, 10, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650830462, 'comment_body': 'I was thinking in terms of languages like `D` and `Go` which use `Buffers` to write into connection but I think `send` also make more sense to me might have missed it', 'comment_created': datetime.datetime(2021, 6, 14, 10, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650831405, 'comment_body': '`IAddr` will contain only the host address which might be insufficient for sending back to socket. Python returns a tuple containing `(host, port)`', 'comment_created': datetime.datetime(2021, 6, 14, 10, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650877871, 'comment_body': '- `bind` will be defined at the module level\r\n- it can differentiate btw ipv4 and ipv6 based on the type of host user provides to the function call', 'comment_created': datetime.datetime(2021, 6, 14, 11, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650945879, 'comment_body': ""What is an IPAddr? Having it start with upper case would indicate it is a class but that probably doesn't make sense ( see https://github.com/chapel-lang/chapel/blob/master/doc/rst/developer/bestPractices/StandardModuleStyle.rst for the standard library style guidance we have written down ). Along the same lines, I would expect TCPConn to be a record as well (rather than a class) but this is something we can discuss.\r\n\r\nI am more or less expecting it to be a record that can contain either a IPv4 or IPv6 address. One interesting question is whether or not IPv4 and IPv6 addresses should be different types. It seems reasonable to me to have them have a single type since that way a function like hostname-to-ip doesn't need to have two different versions with different return types."", 'comment_created': datetime.datetime(2021, 6, 14, 13, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650947385, 'comment_body': ""I think it's debateable whether or not TCPConn should return a `file`. Did you consider that option? We could have some `file`s that know they are sockets and then have it be a runtime error to say call `send` with a non-socket file."", 'comment_created': datetime.datetime(2021, 6, 14, 13, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650948369, 'comment_body': ""Let's list these in Chapel style i.e.\r\n\r\n``` chapel\r\nproc connect(addr: IPAddr, port :int): TCPConn\r\n```"", 'comment_created': datetime.datetime(2021, 6, 14, 13, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650949409, 'comment_body': '@ankingcodes - I thought the idea here is just that we will have both of these\r\n\r\n``` chapel\r\nproc connect(addr: IPAddr, port :int): TCPConn\r\nproc connect(addr: string, port :int): TCPConn\r\n```\r\n\r\nI agree it would be interesting to know how one can convert from a string (like ""127.0.01"" or ""github.com"") into an ipAddr.', 'comment_created': datetime.datetime(2021, 6, 14, 13, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650952021, 'comment_body': 'I had thought that we were expecting that users could use the existing I/O channels to read/write a TCP socket. However I can see in some cases it is useful to have the lower-level functions (like send/recv) that are unbuffered so you know you are writing one packet only, at least for UDP. Is that the intention of these read/write functions?\r\n\r\nHow would they do that when starting from a TCPConn?', 'comment_created': datetime.datetime(2021, 6, 14, 13, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650952933, 'comment_body': 'It seems to me that read/write buffering should be achieved with integration with I/O channels but this function might be doing something I am not understanding (e.g. if it is controlling some buffer inside of the socket implementation rather than one provided by the module you are drafting).', 'comment_created': datetime.datetime(2021, 6, 14, 13, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650953862, 'comment_body': 'what does this parameter do?', 'comment_created': datetime.datetime(2021, 6, 14, 13, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650953948, 'comment_body': 'what does this parameter do?', 'comment_created': datetime.datetime(2021, 6, 14, 13, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650955039, 'comment_body': 'Why does TCPConn use setKeepAlive etc but TCPListener uses setSocketOpt? Seems like the approach for setting the socket options should be consistent between the two.', 'comment_created': datetime.datetime(2021, 6, 14, 13, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650955953, 'comment_body': 'Seems like it would be nice to show `proc` prototypes for each of these methods. In particular for returning the TCPConn and addr, we could use a tuple, or we could use an `out` argument for the addr. But IMO the TCPConn should know the address connected and it would make more sense to just have a methods on the TCPConn - one that return the address of the remote end of the connection and one that return the address of the local end of the connection.', 'comment_created': datetime.datetime(2021, 6, 14, 13, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650959912, 'comment_body': 'probably use ""bound"" instead of ""binded""', 'comment_created': datetime.datetime(2021, 6, 14, 13, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650961570, 'comment_body': 'I don\'t really remember what `bind` does in the system call, but can you describe it here for anybody else who has forgotten? Is it only used for UDP because it is ""connectionless"" ? If it\'s just setting the address we are listening on, why wouldn\'t we do that when constructing the listener? Why do we have UDPSocket as a new type here - do we need a separate UDPSocket/TCPSocket at all? Would it be enough to have UDPListener / TCPListener and UDPConnection / TCPConnection?', 'comment_created': datetime.datetime(2021, 6, 14, 13, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650963495, 'comment_body': ""Let's use Chapel syntax to describe the method. The term `host` to me indicates it would be a string but you probably mean it to be an ipaddr."", 'comment_created': datetime.datetime(2021, 6, 14, 13, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 651366136, 'comment_body': 'My initial thought is we can use [getaddrinfo](https://man7.org/linux/man-pages/man3/getaddrinfo.3.html) to resolve addresses that can are in dot-dash notation or hostnames.\r\n>node specifies either a numerical network address (for IPv4, numbers-and-dots notation as supported by inet_aton(3); for IPv6, hexadecimal string format as supported by inet_pton(3)), or a network hostname, whose network addresses are looked up and resolved.', 'comment_created': datetime.datetime(2021, 6, 15, 0, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651368891, 'comment_body': ""`bind` is responsible for binding any socket to a specified address and port. Here the socket can be anything either a UDP or a TCP Socket. `listen` under the hood will can in `bind` to bind `TCPListener` to address and port. With either `TCPConn` or `UDPSocket` that isn't a requirement as the system assigns any free port and localhost address to them by default.\r\n\r\nWhile `TCPConn` is in a connected state when they are created `UDPSocket` are connectionless they are just waiting for the user to use them for `sending` and `receiving` purpose only. But for `sending` and receiving purpose user might require a socket to have a _known_ address that is when `bind` will be useful for `UDPSocket`."", 'comment_created': datetime.datetime(2021, 6, 15, 0, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651370949, 'comment_body': 'The backlog argument defines the maximum length to which specifies the queue length for completely established sockets waiting to be accepted.  If a connection request arrives when the queue is full, the client may receive an error with an indication of ECONNREFUSED or, if the underlying protocol supports retransmission, the request may be ignored so that a later reattempt at connection succeeds', 'comment_created': datetime.datetime(2021, 6, 15, 0, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651371836, 'comment_body': 'calling in `bind` without `reuseaddr` can return an error that some other socket is already bound to the specified address. This can also be a result of re-running the program after only a short waiting period where the `bind` may find address as _already in use_.', 'comment_created': datetime.datetime(2021, 6, 15, 0, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651374181, 'comment_body': ""`setKeepAlive` is something that we can't associate with a socket in listening mode so it isn't available on `TCPListener`. I wasn't sure what will be the options user might want to set on a `TCPListener` there are several [list](https://www.ibm.com/docs/en/zos/2.3.0?topic=functions-setsockopt-set-options-associated-socket) so I associated the default `setSocketOpt` function with `TCPListener`. \r\n\r\nWe can add `setSocketOpt` for `TCPConn` as well 🤔 that can add in the consistency as well as provide some of the usually tweaked options as separate functions"", 'comment_created': datetime.datetime(2021, 6, 15, 1, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651391691, 'comment_body': ""`nagle` will  deal with setting `TCP_NODELAY` while `quickack` will set `TCP_QUICKACK` both can be set or unset irrespective of other's state"", 'comment_created': datetime.datetime(2021, 6, 15, 1, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651393694, 'comment_body': "">I have defined `TCPConn` as a translation of `UDPSocket` because the socket isn't just in an unconnected state but will have an established connection and also helps to differ from the TCP socket one we get from `listen`\r\n\r\nI think we can discuss more what it should be named while `TCPSocket` is the one Julia uses in my opinion it correlates to just a normal socket whereas here this socket has established connection which is what Go uses"", 'comment_created': datetime.datetime(2021, 6, 15, 2, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657049381, 'comment_body': ""A file wouldn't we able to tell about its whereabouts like `address` 🤔"", 'comment_created': datetime.datetime(2021, 6, 23, 12, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657049994, 'comment_body': 'Makes sense I think returning `TCPConn` would suffice', 'comment_created': datetime.datetime(2021, 6, 23, 12, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657056629, 'comment_body': 'updated to chapel IO so wont be required anymore', 'comment_created': datetime.datetime(2021, 6, 23, 12, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657058064, 'comment_body': ""I have updated it to just `setSocketOpt` because if we aren't using C IO then providing options like `RECVBUF` wont translate to chapel IO"", 'comment_created': datetime.datetime(2021, 6, 23, 12, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657060435, 'comment_body': ""- I have added in updates so the `send` and `recv` are only associated with `UDPSocket` instances and `TCPConn` will use Chapel IO.\r\n- I wasn't able to understand the second question"", 'comment_created': datetime.datetime(2021, 6, 23, 12, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657167517, 'comment_body': 'In our meeting we talked about how it could. It might also be possible to get the address from a file descriptor using some OS call.', 'comment_created': datetime.datetime(2021, 6, 23, 14, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 669786727, 'comment_body': 'This could meet the cut for our current thinking about when should we omit parentheses in methods: https://github.com/chapel-lang/chapel/blob/main/doc/rst/developer/bestPractices/StandardModuleStyle.rst#functions-and-methods', 'comment_created': datetime.datetime(2021, 7, 14, 16, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 669787834, 'comment_body': 'Typo.\r\n\r\nMore importantly, as someone not so knowledgeable about this matters, I read ""quickack"" as two separate words, and left to my own devices would capitalize as `quickAck`', 'comment_created': datetime.datetime(2021, 7, 14, 16, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 669788951, 'comment_body': 'Should `family` be param?', 'comment_created': datetime.datetime(2021, 7, 14, 16, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 669792709, 'comment_body': ""To the extent we can, we should reference primary sources from standards bodies rather than secondary sources from vendors or implementors. They're both more authoritative and (I would guess) more likely to stay available at the same URL into the future. So for this one, how about https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html (POSIX) instead of the IBM doc?\r\n(Looking at the others I don't know that we'll be able to do this for all of them, but I'm going to try.)"", 'comment_created': datetime.datetime(2021, 7, 14, 16, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 669794415, 'comment_body': 'Reference https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockopt.html instead?', 'comment_created': datetime.datetime(2021, 7, 14, 16, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 669795090, 'comment_body': 'Nit: ""wont"" needs an apostrophe (""won\'t"").', 'comment_created': datetime.datetime(2021, 7, 14, 17, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 669803539, 'comment_body': 'Is this paragraph really needed? It seems to be describing implementation rather than behavior, which isn\'t good interface practice. Further, The `USENIX` page cited here is marked as ""legacy content"" with implicit encouragement to look at more modern stuff. And some of the content on the IBM page looks IBM-specific; it would probably be better to cite https://pubs.opengroup.org/onlinepubs/9699919799/functions/getnameinfo.html (POSIX).\r\n\r\n**Edit** adding a followup -- if you really do want to talk about `sockaddr_storage`, perhaps reference https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_socket.h.html (POSIX) instead of that USENIX page?', 'comment_created': datetime.datetime(2021, 7, 14, 17, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 669811490, 'comment_body': ""Chatting offline with Michael about the interface, he suggested (and I agree) that it might worth emphasizing why UDP differs from TCP's approach that's channel based."", 'comment_created': datetime.datetime(2021, 7, 14, 17, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 669814254, 'comment_body': 'Probably better to reference https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/netinet_in.h.html here. Note that POSIX leaves the IPv4 loopback address as implementation-defined, though it says most systems do define it, as `INADDR_LOOPBACK`.', 'comment_created': datetime.datetime(2021, 7, 14, 17, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 671482458, 'comment_body': 'Thanks for pointing this out 😄  I actually made the construct in actual [code](https://github.com/chapel-lang/chapel/pull/17960/files#diff-25e31a95ef0ebf2378f1bf89a17c4e717d7ea626f91d109b43530a44f25ebe31R156) just like you suggested just need to update this doc', 'comment_created': datetime.datetime(2021, 7, 16, 19, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671486117, 'comment_body': ""- Correcting the typo\r\n- This was based on Julia's [quickack](https://docs.julialang.org/en/v1/stdlib/Sockets/#Sockets.quickack) function they seem to use lowercase naming for all so am also not sure if it's actually two words but seems so."", 'comment_created': datetime.datetime(2021, 7, 16, 19, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671487423, 'comment_body': ""without family, it won't be possible to distinguish btw IPv4 and IPv6 addresses which have different structures something like `127.0.0.1` to `::1` which are both `localhost` but one is ipv4 and the other is ipv6."", 'comment_created': datetime.datetime(2021, 7, 16, 19, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671488425, 'comment_body': 'certainly, my idea was although to provide the reader a place from where they can read about it with ease never thought about future availability but primary sources should be used instead so will make changes :)', 'comment_created': datetime.datetime(2021, 7, 16, 19, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671488750, 'comment_body': ""I think `man7` is an official page (isn't it ?) because the details about functions is same on both"", 'comment_created': datetime.datetime(2021, 7, 16, 19, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671490244, 'comment_body': ""- I too think we don't need to add details about `getnameinfo` will remove it.\r\n- for `sockaddr_storage` i will change the url."", 'comment_created': datetime.datetime(2021, 7, 16, 19, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671490891, 'comment_body': 'making the change thanks 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 16, 19, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671491303, 'comment_body': 'sure I will add in detail about why the change was made to use raw functions.', 'comment_created': datetime.datetime(2021, 7, 16, 19, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671493288, 'comment_body': 'regarding `INADDR_LOOPBACK` will the user and the code too need `ifdef` checks or we can assume that `INADDR_LOOPBACK` will be available on the majority of systems?', 'comment_created': datetime.datetime(2021, 7, 16, 19, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671498191, 'comment_body': 'Apparently, their convention is ""put multiple words together if they\'re readable, snake_case if they aren\'t"", where I believe we are leaning more aggressively towards distinguishing words. So, I still personally lean towards quickAck, but I\'d prefer others to speak up about this before making any change.\r\n\r\nRelevant part of julia naming conventions: https://docs.julialang.org/en/v1/manual/style-guide/#Use-naming-conventions-consistent-with-Julia-base/', 'comment_created': datetime.datetime(2021, 7, 16, 20, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 671499479, 'comment_body': 'Right, but what I\'m asking is whether it should be a compile-time value:\r\n\r\n```chapel\r\nproc ipAddr.init(host:string = ""localhost"", port:uint(16) = 8000, param family:IPFamily = IPFamily.IPv4)\r\n```\r\n\r\nThis will make an ipv4 address be a different type than an ipv6 address, and cross-type operations will be subject to the limitations/checks that our type system imposes. That seems like an added benefit to me, but maybe we want to use v4 and v6 addresses more interchangeably. And that part is beyond my expertise on the subject matter.', 'comment_created': datetime.datetime(2021, 7, 16, 20, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 671577057, 'comment_body': 'I\'d also be inclined to use `quickAck` in this case.  It doesn\'t feel sufficiently compound / single-word to meet my personal ""all lowercase"" test.', 'comment_created': datetime.datetime(2021, 7, 17, 0, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671666869, 'comment_body': 'made the change 😄 ', 'comment_created': datetime.datetime(2021, 7, 17, 10, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671705756, 'comment_body': ""There is one particular change that I did like to take opinions on. I didn't check it earlier but the actual optimizations are called `naggle` and `delayAck` which are enabled on disabling flag `TCP_NODEDELAY` and `TCP_QUICKACK` respectively. \r\n\r\nThe Julia idea of naming one procedure on optimization and the other on the flag doesn't seem right. We can make changes either to name both based on `flags` they actually change or `optimization` they enable which can be a bit confusing since to enable them we have to disable something else but it might be more known."", 'comment_created': datetime.datetime(2021, 7, 17, 14, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 673137714, 'comment_body': ""In networking programs, it's common to e.g. accept an IP address to work with from the command line and then to work with both ipv4 and ipv6. Additionally, DNS resolution can give a combination of ipv4 and ipv6 results. Lastly, the OS calls we are interacting with are already runtime polymorphic in this way. So I think it's to our advantage *not* to make ipv4 vs ipv6 a compile-time property of an address."", 'comment_created': datetime.datetime(2021, 7, 20, 13, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673139707, 'comment_body': ""The POSIX standard is described in the link Greg provided but the man7 page is the linux manual. We'd like to focus on POSIX rather than linux."", 'comment_created': datetime.datetime(2021, 7, 20, 13, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673143487, 'comment_body': ""We can define it for our own use if it isn't defined (but such things have to happen in C code)."", 'comment_created': datetime.datetime(2021, 7, 20, 13, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673295720, 'comment_body': 'Thanks for the background Michael. All that makes sense to me.', 'comment_created': datetime.datetime(2021, 7, 20, 16, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 673376569, 'comment_body': 'ohh right thanks', 'comment_created': datetime.datetime(2021, 7, 20, 18, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 676785447, 'comment_body': ""I'm a little iffy on C types being the only way to infer the family value.  Would it be reasonable to expose wrapper Chapel types and use those instead?"", 'comment_created': datetime.datetime(2021, 7, 26, 17, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676790938, 'comment_body': 'This conflicts with the declaration above.  Will the default value be 5 or 0?', 'comment_created': datetime.datetime(2021, 7, 26, 17, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676791982, 'comment_body': ""Shouldn't this return an instance of IPFamily instead?"", 'comment_created': datetime.datetime(2021, 7, 26, 17, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676793932, 'comment_body': 'I\'m not sure I know what ""will can in bind to bind"" was supposed to mean, sorry :(', 'comment_created': datetime.datetime(2021, 7, 26, 17, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676795112, 'comment_body': 'reuseaddr is not present in the definition above, was adding it here a mistake or should it be present above?', 'comment_created': datetime.datetime(2021, 7, 26, 17, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676795391, 'comment_body': 'Same question here', 'comment_created': datetime.datetime(2021, 7, 26, 17, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 679020164, 'comment_body': ""I didn't check on it much but now that I see the value will use will be the `DEFAULT_BACKLOG` as the default which will be:\r\n```chapel\r\nparam const DEFAULT_BACKLOG = if SOMAXCONN <= 128 then SOMAXCONN else 128;\r\n```\r\n\r\nIt's based on how python does it https://bugs.python.org/issue21455 but there was discussion on increasing the backlog which never seemed to gather consensus https://bugs.python.org/issue38699"", 'comment_created': datetime.datetime(2021, 7, 29, 10, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679020992, 'comment_body': 'the function call will return a `c_int` via the c system call so is it possible to typecast it to `enum`?', 'comment_created': datetime.datetime(2021, 7, 29, 10, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679021320, 'comment_body': '*call 😅  will make the change', 'comment_created': datetime.datetime(2021, 7, 29, 10, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679021528, 'comment_body': ""shouldn't be here thanks will remove it"", 'comment_created': datetime.datetime(2021, 7, 29, 10, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679029370, 'comment_body': '- For IPV4 i think it will be possible as `in_addr_t` as I can see is\r\n  ```C\r\n  typedef uint32_t in_addr_t;\r\n  ```\r\n- For IPV6 i think that will not be a breeze or even possible not sure\r\n  ```C\r\n  #if !__USE_KERNEL_IPV6_DEFS\r\n  /* IPv6 address */\r\n  struct in6_addr\r\n    {\r\n      union\r\n        {\r\n     \t  uint8_t\t__u6_addr8[16];\r\n\t  uint16_t __u6_addr16[8];\r\n\t  uint32_t __u6_addr32[4];\r\n        } __in6_u;\r\n  #define s6_addr\t\t\t__in6_u.__u6_addr8\r\n  #ifdef __USE_MISC\r\n  # define s6_addr16\t\t__in6_u.__u6_addr16\r\n  # define s6_addr32\t\t__in6_u.__u6_addr32\r\n  #endif\r\n    };\r\n  #endif /* !__USE_KERNEL_IPV6_DEFS */\r\n  ```', 'comment_created': datetime.datetime(2021, 7, 29, 10, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679147316, 'comment_body': 'Yes we can cast integers to enums, e.g. `myint : myEnumType`. That cast can throw though. E.g.\r\n\r\n```\r\nenum myenum { a=1, b, c }\r\nvar i = 32;\r\nvar e = i:myenum;\r\nwriteln(e);\r\n```\r\n\r\nWhat might make sense in to have more than one getter function where one returns the OS view of the family and another returns the enum value. Anyway if we have the potential problem that the OS has more families than our enum value, we could include an `other` element in our enum.', 'comment_created': datetime.datetime(2021, 7, 29, 13, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679253446, 'comment_body': ""I mean, it's also possible to do a switch statement on the values returned and return the appropriate enum value for each without having to cast."", 'comment_created': datetime.datetime(2021, 7, 29, 15, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 679266236, 'comment_body': 'If the type is available as an extern type in Chapel code, it should be straight-forward to have a type variable that points to the extern type, right?  Maybe something like this?\r\n```chapel\r\nextern type sys_in6_addr_t;\r\ntype ipv6Addr = sys_in6_addr_t;\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 15, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 679374822, 'comment_body': ""oh okay, that works but that won't be wrapper 🤔 though right?"", 'comment_created': datetime.datetime(2021, 7, 29, 18, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679379841, 'comment_body': ""The user can only set in the family using the `enum` itself, so if the OS has more families, it will be up to us to expand the options in `enum`; otherwise, the user can't use them; which also allows us to use `enum` casting as the family returned won't be out of the `enum` set."", 'comment_created': datetime.datetime(2021, 7, 29, 18, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679406410, 'comment_body': ""Sorry, that's what I meant by wrapper.  Not a wrapper function or a type that holds another type, more like an alias"", 'comment_created': datetime.datetime(2021, 7, 29, 18, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 679611112, 'comment_body': 'Yeah an `alias` will be great I will make the change for same.', 'comment_created': datetime.datetime(2021, 7, 30, 2, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': '4a2cf4e8930c753b81ce7a79c1e62f7f9343ec65', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eecea7e8c2a820c9db1a444cf68ab36595ca0e42', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98ab805dbfa5a09c8b9fd07c96c7fe862265e6c7', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ec0872377e27af8d4304041327d7db964e79e7f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48d64e93b9261167e1dbaa3b889deeb6559e5c2d', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '371b1b448d192933cb2af0b13dc97e1b14d32cdc', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d08d0f2e11639bc1f8c4335a89749fcbda935f5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9dd891caa608fb0ecf1f6f4181d1cee46dbe118', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea2dfa4e5e220753fb02351eb3dd5366dceeb8a9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '237d2459f63253e8d2e7ac14af2797658638c299', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7cc558474b03d212e4362419b96c47e60cd32ea', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4595f71e29b34ff586fc2ddd3772b66d2c819abb', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50dda82604038405449871f8aa63de72535f3d8', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5720d1a999d28a3731db2dafa814dc83e2c57084', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f46624a79e7ce3a3ca8db54c94c18b6d081bea62', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c033c459fad755cf088d7dc6175155bea324bde2', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916d730800ee81213962d5052fc18b86bbfc380f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a944ce2738a3765a86e8723ea28c079b5049612', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c9eb4a8e7864e5542ba786467e7a9994ed8e009', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d0b2781f874bc001479c7acfa19407117471242', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5431aeb8d63f873ec3d56e253855fe645cf82ea8', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
672890985,[GSoC] Socket Constructs Additions Sys Module,"- feat: setter for sys_sockaddr_t and opaque address constants for loopback and any
- feat: getter for sys_sockaddr_t and size constants for buffer allocation to store IP address
- chore: add in new constants for fcntl commands 
- chore: new constants for set/get socket socket level and its options
- fix: function definition correction for sys_init_sockaddr_t
- chore: remove trailing spaces and newline characters

Promised Future Work:
 * move Chapel-style parts of the new interface from Sys to Sockets when the latter is added

Reviewed by @gbtitus, @mppf, and @ankingcodes.",True,17932,https://api.github.com/repos/chapel-lang/chapel/pulls/17932,https://github.com/chapel-lang/chapel/pull/17932,closed,327,22,5,9,10,19,0,1,[],2021-06-17 18:34:47+00:00,2021-07-07 16:23:22+00:00,1720115.0,"19 days, 21:48:35","[{'comment_id': 654960367, 'comment_body': 'Why are ipv4 constants in uppercase and ipv6 in lowercase ?', 'comment_created': datetime.datetime(2021, 6, 20, 16, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 656118784, 'comment_body': ""these are C defined constants so I didn't change the name but we can do for chapel if required"", 'comment_created': datetime.datetime(2021, 6, 22, 11, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 656780733, 'comment_body': 'I think its good practice to keep all constants to uppercase, provided all other constants are also in uppercase', 'comment_created': datetime.datetime(2021, 6, 23, 5, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 657133590, 'comment_body': ""The direction we're going with the Sys module is that it will become the POSIX module and the things defined in it will match the C functions exactly (including in capitalization)."", 'comment_created': datetime.datetime(2021, 6, 23, 14, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 657135107, 'comment_body': ""Some of the C constants, such as `S_IRWXU`, do not work with the LLVM backend. So it's important to test that these constants do work with the LLVM backend. If they don't, we will create C wrapper functions and parenless Chapel functions to call them (e.g. `proc S_IRWXU { return chpl_wrap_S_IRWXU(); }` ).\r\n\r\n(You're not defining `S_IRWXU` here - I'm just using it as an example that I know has an issue)."", 'comment_created': datetime.datetime(2021, 6, 23, 14, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 657136210, 'comment_body': ""I'm not so sure what `fill` means? It's a new function, right? Maybe we can come up with a better name and add some documentation comments for it?"", 'comment_created': datetime.datetime(2021, 6, 23, 14, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 657137982, 'comment_body': 'just judging from this function signature I would expect it to work with DNS lookup in the event host is a string like www.hpe.com. Maybe we can make it clear that this only works with IP address strings in the documentation and variable names.', 'comment_created': datetime.datetime(2021, 6, 23, 14, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 659131910, 'comment_body': 'My current build for chapel uses LLVM Backend it works there, or shall I check in some other way', 'comment_created': datetime.datetime(2021, 6, 26, 7, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 659132328, 'comment_body': ""I will add in the comments... for name 😅 am open to suggestions wasn't able to come up with one myself. The purpose of this function is to `fill` in details like `family`, `port`, and `address` into the `sys_sockaddr_t`"", 'comment_created': datetime.datetime(2021, 6, 26, 7, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 659132350, 'comment_body': 'sure', 'comment_created': datetime.datetime(2021, 6, 26, 7, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 659156973, 'comment_body': 'here it fails on direct comparison. I am not able to figure out why is it so because on `writeln` output comes out to be the same', 'comment_created': datetime.datetime(2021, 6, 26, 11, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 659157643, 'comment_body': 'buffer obtained from `c_calloc` is being modified here', 'comment_created': datetime.datetime(2021, 6, 26, 11, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 660655552, 'comment_body': ""That's fine"", 'comment_created': datetime.datetime(2021, 6, 29, 14, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 660656042, 'comment_body': 'what about `set` ?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 660659361, 'comment_body': 'If you write it as `proc init` then you would run it with e.g. `new sys_sockaddr_t(host, port, family)`. I think `initialize` is probably not a great term since `init` is short for it but is a special function.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 660662224, 'comment_body': ""I'd recommend running the program under `valgrind` to look for use-after-free type errors. Does the situation change if you double the allocation size? What if you check `getAddr == address` ?"", 'comment_created': datetime.datetime(2021, 6, 29, 14, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 660938853, 'comment_body': ""the issue was related to the call in `createStringfromBorrowed` where I wasn't specifying length properly so I changed the function to use `strlen` and return the use it in the call."", 'comment_created': datetime.datetime(2021, 6, 29, 20, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 661554651, 'comment_body': ""I know it's tempting to remove these instances of trailing whitespace in the copyright blocks, but I believe the automagic copyright updater we run every year will just put them back, so taking them out is a Sisyphean effort."", 'comment_created': datetime.datetime(2021, 6, 30, 14, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 661679902, 'comment_body': '😅 i usually set my editor to remove trailing whitespaces and newlines. If required I can just add them back', 'comment_created': datetime.datetime(2021, 6, 30, 17, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': '59b4d6f5e5558b6ce48e83b5f02e68e8c996aafd', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15566c4abce2b2df57363fe36a396eaf1a201325', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a525efb01718838adbed3e20bf715403e6f0884', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f9837bd1d4e00af9bc59d05c1ee72353465077c', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe05c183e19b79ee852204fa4e997d1bbe1b8b6c', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca570fec79de175d9c8b801615f8c33b7cbaef9c', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '348ae3887903cdaf189cafac005b63038fa5de18', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd9ff9acc9313d8b63e0095f20623f999ab888a7', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb650ad9ebf99e434aa55fd1f1e985dd517ff98', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
678344348,File Descriptor Getter for `file`,"- feat: qio_get_fd function added
- useful for getting file descriptor primary use case in functions like setsocketopt and fcntl to change the file flags by making a system call
- fix different return types on `set_sys_sockaddr_in_t` and `set_sys_sockaddr_in6_t` in runtime and Sys.chpl

",True,17988,https://api.github.com/repos/chapel-lang/chapel/pulls/17988,https://github.com/chapel-lang/chapel/pull/17988,closed,36,24,3,3,2,4,0,1,[],2021-06-26 14:27:40+00:00,2021-07-12 16:27:47+00:00,1389607.0,"16 days, 2:00:07","[{'comment_id': 665371704, 'comment_body': ""let's make this condition also check fl != NULL"", 'comment_created': datetime.datetime(2021, 7, 7, 13, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 666415375, 'comment_body': 'made the changes', 'comment_created': datetime.datetime(2021, 7, 8, 18, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 666430418, 'comment_body': ""Now that I look at it, it'd be nice if this error case set `*out = -1` just so the behavior is more predictable if the error is not checked."", 'comment_created': datetime.datetime(2021, 7, 8, 18, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 666662241, 'comment_body': 'certainly 😄 made the changes for setting `out`', 'comment_created': datetime.datetime(2021, 7, 9, 4, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': '13f5ed135be82437ebca73a7f8a02f16a57198d2', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdc780650189dd048e61196196dc989859eb066', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '367d40503135c17b6c09627bb9ad84c86fa3aa0f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
681563923,[GSOC] Qthread Select,"conditional compilation of `qt_select` for providing in a method to keep original task unblocked when observing for IO.

Prior to `qt_select` call `select` and block for 64ms which allows instantaneous connections to be established
without timing out.

Signed-off-by: Lakshya Singh <lakshay.singh1108@gmail.com>",True,18019,https://api.github.com/repos/chapel-lang/chapel/pulls/18019,https://github.com/chapel-lang/chapel/pull/18019,closed,57,35,1,2,5,19,0,0,[],2021-07-01 07:25:59+00:00,2021-08-04 16:36:00+00:00,2970601.0,"34 days, 9:10:01","[{'comment_id': 665055360, 'comment_body': ""@mppf @krishnadey30 there seems to be an issue here with `qt_connect`. It isn't returning an error even when the port has no service listening on it where we call it to connect. Normal `connect` returns a transport fail error, whereas `qt_connect` returns a zero"", 'comment_created': datetime.datetime(2021, 7, 7, 5, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 665397768, 'comment_body': 'Can you try to make a C reproducer and post it to the threads issue tracker here: https://github.com/Qthreads/qthreads/issues ? Additionally it would be good if you can check that you can get errno from a failed connect call.', 'comment_created': datetime.datetime(2021, 7, 7, 13, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 670508653, 'comment_body': 'Updated this to use `connect` as per discussion is last meeting', 'comment_created': datetime.datetime(2021, 7, 15, 14, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679139631, 'comment_body': 'Can we use `()` around the the `||` just to make the precedence clear? \r\n\r\n```\r\n(timeout->tv_usec > 64000 || timeout->tv_sec >= 1) ? 64000 : timeout->tv_usec;\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 13, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679140677, 'comment_body': ""I don't think this code should be modifying timeout. But, you can make a second local copy. Maybe we can have `struct timeval first_timeout;` and `struct timeval second_timeout;` ?"", 'comment_created': datetime.datetime(2021, 7, 29, 13, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679142146, 'comment_body': 'This can make the seconds value negative, right? Should we set it to 0 in that case?', 'comment_created': datetime.datetime(2021, 7, 29, 13, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679355151, 'comment_body': ""no it won't as the microseconds will only be negative in the case when seconds is at least one or more"", 'comment_created': datetime.datetime(2021, 7, 29, 17, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679355309, 'comment_body': 'made the change', 'comment_created': datetime.datetime(2021, 7, 29, 17, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679355775, 'comment_body': 'made the change', 'comment_created': datetime.datetime(2021, 7, 29, 17, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679393186, 'comment_body': ""Why are we allocating first_timeout? Why can't it be a regular stack value like second_timeout? I would imagine you could write `struct timeval first_timeout = *timeout;`"", 'comment_created': datetime.datetime(2021, 7, 29, 18, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679393753, 'comment_body': ""It'd make sense to swap the uses of the two variables - since we are waiting twice, the timeout we use for the first select should be `first_timeout`, right?"", 'comment_created': datetime.datetime(2021, 7, 29, 18, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679394250, 'comment_body': 'Oh, is the concern just that timeout could be NULL? Seems like something that can be handled without allocating.', 'comment_created': datetime.datetime(2021, 7, 29, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679580689, 'comment_body': 'Yeah that makes sense will update it', 'comment_created': datetime.datetime(2021, 7, 30, 1, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679581083, 'comment_body': ""🤔 yeah that was the reason cause It won't be possible to point a normal struct to `NULL`. What could be the other way of doing it?"", 'comment_created': datetime.datetime(2021, 7, 30, 1, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679817153, 'comment_body': 'made the changes for it to be a stack value', 'comment_created': datetime.datetime(2021, 7, 30, 10, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679907525, 'comment_body': '`struct timeval second_timeout = {0}` to zero initialize it. Otherwise it is garbage memory.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679908861, 'comment_body': 'Here, and in the below call, instead of passing second_timeout, you should check to see if timeout was null, and pass null in that case.\r\n\r\nE.g.\r\n\r\n```\r\nstruct timeval* second_timeout_ptr = NULL;\r\nif (timeout != NULL)\r\n  second_timeout_ptr = &second_timeout;\r\n\r\n...\r\n\r\ngot_nset = qt_select(nfds, readfds, writefds, exceptfds, second_timeout_ptr);\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 13, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 680134996, 'comment_body': 'made the change', 'comment_created': datetime.datetime(2021, 7, 30, 18, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 680135085, 'comment_body': 'right missed out on the `NULL` part', 'comment_created': datetime.datetime(2021, 7, 30, 18, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': '571d224c716ecca2e76842228af204ccdec9522d', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6639c3954de623a39b6a6cc714cfed5ad59018a6', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
691527576,[GSoC] update addrinfo constructs,"- extern proc for adding in `getaddrinfo`
- extern `addrinfo_t`
- add in new getter
- remove duplicate getters and rename functions

Signed-off-by: Lakshya Singh <lakshay.singh1108@gmail.com>",True,18072,https://api.github.com/repos/chapel-lang/chapel/pulls/18072,https://github.com/chapel-lang/chapel/pull/18072,closed,11,9,3,3,2,3,0,0,[],2021-07-16 14:19:31+00:00,2021-07-19 16:47:02+00:00,268051.0,"3 days, 2:27:31","[{'comment_id': 671447596, 'comment_body': ""Let's remove the `// opaque` since it is no longer true"", 'comment_created': datetime.datetime(2021, 7, 16, 18, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 672307392, 'comment_body': ""Why have it named `sys_getaddrinfo` in Chapel? Just name it `getaddrinfo` and then you don't need the renaming.  `extern proc getaddrinfo`"", 'comment_created': datetime.datetime(2021, 7, 19, 13, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 672308432, 'comment_body': ""I think the intent here was to set the freed pointer to NULL, but I see it didn't match the `extern proc` and that is why you made this change. So, also remove the `p = NULL` line here, because the value of `p` won't be communicated back to the call site in C."", 'comment_created': datetime.datetime(2021, 7, 19, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}]","[{'commit_sha': '6acb737768b2e338b64abc0e7e9bab5271d14703', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0179397bdfbe370baddd439fa4f7704eb4623bdd', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02d4ea7b60345e1d35bf6c43b6789da2e98c9d21', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
675305473,[GSoC 2021] Socket Library,"This PR adds an implementation of the Socket library to modules/packages.

This first version has some caveats:

 * requires libevent 2.1 or newer
 * requires CHPL_TASKS=qthreads right now (fifo doesn't work yet)
 * requires the C backend right now (CHPL_TARGET_COMPILER=llvm doesn't work yet)
 * requires libevent be available in /usr/include/event2
 
### Design 
#17899 

### Future Work
  - DNS Resolution using libevent
  - IO Plugin using libevent for non-blocking IO
  - sendAll method for UDP and TCP on lines of python's [sendAll](https://docs.python.org/3/library/socket.html#socket.socket.send)
  - Make work with LLVM and FIFO
  - Separate Module for Libevent",True,17960,https://api.github.com/repos/chapel-lang/chapel/pulls/17960,https://github.com/chapel-lang/chapel/pull/17960,closed,2255,8,29,55,16,132,1,0,[{'name': 'post-release'}],2021-06-22 10:51:07+00:00,2022-01-13 15:08:53+00:00,17727466.0,"205 days, 4:17:46","[{'comment_id': 673636712, 'comment_body': 'Curious what might be the use case of this overload. AFAIK, clients are only concerned with sys_in_addr_t & sys_in6_addr_t. ', 'comment_created': datetime.datetime(2021, 7, 21, 3, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 673637449, 'comment_body': ""We have newlines in between in some functions but not in all. To maintain consistency, I'd suggest to get rid of them. "", 'comment_created': datetime.datetime(2021, 7, 21, 3, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 673643300, 'comment_body': ""In general, I believe Error Messages can be improved on, unless they're supposed to be kept as they are (Did you see similar error messages in Python or Julia ?). "", 'comment_created': datetime.datetime(2021, 7, 21, 3, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 673644031, 'comment_body': 'I assume IPUnspec is an enum named by you, if so, I feel ""IPNoSpec"" would be better. ', 'comment_created': datetime.datetime(2021, 7, 21, 4, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 680400037, 'comment_body': 'The use of this would for inside Module use mostly as to copy an ipAddr or create one we essentially need to copy the `_addressStorage` inside it which is returned from system calls', 'comment_created': datetime.datetime(2021, 7, 31, 19, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 680400057, 'comment_body': 'sure', 'comment_created': datetime.datetime(2021, 7, 31, 19, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 680400165, 'comment_body': ""It's a POSIX translation of `AF_UNSPEC` as we can't have `c_int` in enum I used their values directly"", 'comment_created': datetime.datetime(2021, 7, 31, 19, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 700944398, 'comment_body': 'Why does this throw?', 'comment_created': datetime.datetime(2021, 9, 2, 10, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 701149418, 'comment_body': ""it's possible that the user might have not configured the ipAddr properly so the getters for `family`, `host` and `port` are throwing that's why the comparison operator is also throwing"", 'comment_created': datetime.datetime(2021, 9, 2, 14, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 712243217, 'comment_body': ""Let's say here in this comment that this type supports ipv4 and ipv6 addresses."", 'comment_created': datetime.datetime(2021, 9, 20, 14, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712252432, 'comment_body': 'I was expecting one to write `new ipAddr(""127.0.0.1"", 8111, IPFamily.IPv4)` etc. See https://github.com/chapel-lang/chapel/pull/17899#issuecomment-923007197', 'comment_created': datetime.datetime(2021, 9, 20, 15, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712254722, 'comment_body': ""I don't think this comparison function should throw. I don't really see why the getters should throw, either. If we need to make sure that the ipAddr is valid, we should do that when initializing it / in the `create` call etc.\r\n\r\nAdditionally I would expect that you need to implement also `==` and potentially `<`, `<=`, `>`, and `>=`."", 'comment_created': datetime.datetime(2021, 9, 20, 15, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712256504, 'comment_body': 'You need to create a local temporary fd here so that the last argument to qio_get_fd is local. ', 'comment_created': datetime.datetime(2021, 9, 20, 15, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712257812, 'comment_body': 'If the `tcpConn` is on a different locale, this function will fail, because the file descriptor will not be know to the system on the other locale. I think you need to include an `on` statement here.', 'comment_created': datetime.datetime(2021, 9, 20, 15, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712258020, 'comment_body': 'How about `==` as well?', 'comment_created': datetime.datetime(2021, 9, 20, 15, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712260773, 'comment_body': ""This one seems odd to me. As far as I can tell, the POSIX standard doesn't say anything about what type `pthread_t` should be. It could be a struct. What happens if it is just `extern type pthread_t` ?"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712267845, 'comment_body': ""I would expect that simply returning is sufficient here, rather than calling `pthread_exit`. Do you know of a reason that is not the case?\r\n\r\nNote though that if you want to return an integer, you have to copy it in to a `c_void_ptr`, since you can't return a pointer to a local variable without causing memory errors. So I'd recommend writing it something like this:\r\n\r\n``` chapel\r\nvar retInt : c_intptr = 0;\r\nvar retAsPtr : c_void_ptr;\r\nc_memcpy(retAsPtr, retInt, sizeof(retAsPtr));\r\nreturn retAsPtr;\r\n```\r\n\r\nYou can use a similar `c_memcpy` approach to get the return value out, but it appears today that you do not use it. If you know you don't need a return value from the `dispatchLoop` here, let's just have it return `nil` instead of doing `pthread_exit` and remove the `ret_val` variable entirely."", 'comment_created': datetime.datetime(2021, 9, 20, 15, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712270000, 'comment_body': 'I would imagine that this would cause problems for other modules also wishing to use libevent. It seems like we would need a helper module for the libevent parts and that can manage calling `evthread_use_pthreads();` and `libevent_global_shutdown();`.\r\n', 'comment_created': datetime.datetime(2021, 9, 20, 15, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712271249, 'comment_body': 'Somewhere, we need a description of what the implementation is doing with libevent at a high level. It could be here in a comment (that is not part of the docs) or it could be in the PR message itself.', 'comment_created': datetime.datetime(2021, 9, 20, 15, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712272178, 'comment_body': 'add a comma --\r\n\r\n`if error is not about blocking, throw error`', 'comment_created': datetime.datetime(2021, 9, 20, 15, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712274316, 'comment_body': ""Let's write this with a loop so that the structure is easier to see & so the stack memory usage does not grow with more attempts"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712275705, 'comment_body': ""It seems really weird that this can throw. Can you describe the situation a user would write that would cause it to throw? If it is not possible for a user to run in to it, we don't need this to throw."", 'comment_created': datetime.datetime(2021, 9, 20, 15, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712276870, 'comment_body': 'How about `==` ? Also, it seems odd that this uses `in` intent. I think the default intent would be more appropriate here (and for a record such as tcpListener it is `const ref`).', 'comment_created': datetime.datetime(2021, 9, 20, 15, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712278594, 'comment_body': ""I would expect this to be `const` rather than `var`.\r\n\r\nAlso, see https://github.com/chapel-lang/chapel/blob/main/doc/rst/developer/bestPractices/StandardModuleStyle.rst#other-identifiers -- I would expect this variable to be named `backlogDefault` -- we don't use the underscore naming style in standard modules."", 'comment_created': datetime.datetime(2021, 9, 20, 15, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712279622, 'comment_body': 'It seems that the documentation here should say something about how we are computing this default value, even if it does so in a vague way.', 'comment_created': datetime.datetime(2021, 9, 20, 15, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712281503, 'comment_body': 'Not sure what you mean by `tired` - maybe you meant a different word there?', 'comment_created': datetime.datetime(2021, 9, 20, 15, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712281929, 'comment_body': 'TCP is not a service name - maybe the example would be better with `""http""` for example?', 'comment_created': datetime.datetime(2021, 9, 20, 15, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712283340, 'comment_body': ""the DNS lookup might itself take a long time and I would expect that to be subject to `timeout`. However, I don't know how to implement that. Can libevent do DNS lookup as an event?\r\n"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712286153, 'comment_body': '-> ""Reads up to `bufferLen` bytes from the socket""\r\n\r\n(since the C call recvfrom returns *up* to the buffer length)', 'comment_created': datetime.datetime(2021, 9, 20, 15, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712286363, 'comment_body': ""Let's use a loop here, please"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712289012, 'comment_body': ""Let's write this with a loop please"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712289664, 'comment_body': 'The way it is written now it looks like it might send only some bytes but not all of the passed bytes.\r\nTo send all of the passed bytes I think you would have to have a loop that tries again if only say 1 byte is sent by the sendto call at a time.', 'comment_created': datetime.datetime(2021, 9, 20, 15, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712289885, 'comment_body': ""Let's add `==`"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712290941, 'comment_body': 'Can you show an example of a socket option that would need this?', 'comment_created': datetime.datetime(2021, 9, 20, 15, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712293671, 'comment_body': 'I am expecting these to be methods on tcpListener / tcpConn. E.g. here you can write `proc ref tcpListener.nagle(enable: bool = true)`. Arguably in the design https://github.com/chapel-lang/chapel/pull/17899/files#diff-21447e19620654704318fbb1fb753236379e4d6861085d3bb4de8b7a18830199R136 it was unclear if it is a method or not.\r\n\r\nAlso in the design doc it is `nagle` rather than `naggle`', 'comment_created': datetime.datetime(2021, 9, 20, 15, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 714547063, 'comment_body': 'Added the comment in design doc', 'comment_created': datetime.datetime(2021, 9, 23, 7, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 714706174, 'comment_body': 'Can you add a comment here as well please? (It could be inside of the function - it is just for maintainers to keep track)', 'comment_created': datetime.datetime(2021, 9, 23, 11, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716153392, 'comment_body': 'I will make the change for it as it works even without `c_ulong`', 'comment_created': datetime.datetime(2021, 9, 26, 6, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716153583, 'comment_body': 'sounds right', 'comment_created': datetime.datetime(2021, 9, 26, 6, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716154107, 'comment_body': ""compiler won't allow me to have return statement inside of an `on` statement how should I handle that"", 'comment_created': datetime.datetime(2021, 9, 26, 6, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716154610, 'comment_body': ""I can add in a `try!` here because the `ipAddr` will set properly but my thoughts were let's say a user does something like\r\n```chapel\r\nvar addr1:ipAddr, addr2:ipAddr;\r\nwriteln(addr1 != addr2);\r\n```\r\nBasically, it will throw or halt (will it ?) if we use `try!` when the user uses an uninitialized `ipAddr` record."", 'comment_created': datetime.datetime(2021, 9, 26, 7, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716154801, 'comment_body': 'Will go with `nil` approach', 'comment_created': datetime.datetime(2021, 9, 26, 7, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716155036, 'comment_body': 'my reasons for using this are the same as https://github.com/chapel-lang/chapel/pull/17960#discussion_r716154610 when user will use an uninitialized `tcpListener`', 'comment_created': datetime.datetime(2021, 9, 26, 7, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716155368, 'comment_body': 'I was using the same operator as I did in `ipAddr` so will change it over here, but is `in` required for `ipAddr` too or not?', 'comment_created': datetime.datetime(2021, 9, 26, 7, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716155533, 'comment_body': 'It should be `tried`', 'comment_created': datetime.datetime(2021, 9, 26, 7, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716204173, 'comment_body': 'I am not sure what you mean by implementation', 'comment_created': datetime.datetime(2021, 9, 26, 13, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716204892, 'comment_body': 'we can have another function like `sendAll` which could do that because with udp we are working with packets instead of loads of data so if user wants to send large data they can use `sendAll`. ref: This is how python does it https://docs.python.org/3/library/socket.html#socket.socket.send', 'comment_created': datetime.datetime(2021, 9, 26, 13, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716205017, 'comment_body': 'python has three overloads for setSockOpt so i transferred all three of them https://docs.python.org/3/library/socket.html#socket.socket.setsockopt', 'comment_created': datetime.datetime(2021, 9, 26, 13, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716205433, 'comment_body': 'I seemed to have used method in place of procedure but yeah I will update them to be methods\r\n', 'comment_created': datetime.datetime(2021, 9, 26, 13, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716718520, 'comment_body': 'You have to create a temporary variable, e.g.\r\n\r\n``` chpl\r\nproc myproc() {\r\n  var tmp: int;\r\n  on somewhere {\r\n    tmp = computeSomething();\r\n  }\r\n  return tmp;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 13, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716720544, 'comment_body': 'We can create a `ipAddr.init()` that default initializes the record with 0.0.0.0 e.g. so that these do not have to throw/halt in that case. IMO it will be better if the initializer guarantees that the ipAddr is valid enough for the getters not to throw, and then neither comparison nor comparison will throw.', 'comment_created': datetime.datetime(2021, 9, 27, 13, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716722615, 'comment_body': ""Like, can you make a comment that is a sort of road map / outline for this `Socket.chpl` file? I'm not so worried about outlining the different sections of implementation. I'd like it to describe how the Socket module is using libevent, at a high level. (The low level description can be the source code, but a high level view can be hard for someone reading the source code to get)."", 'comment_created': datetime.datetime(2021, 9, 27, 14, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716723487, 'comment_body': 'Right. So we can make a `tcpListener.init()` that creates an acceptable default and ensure that the necessary properties are there for any other `init` for tcpListener.', 'comment_created': datetime.datetime(2021, 9, 27, 14, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716724001, 'comment_body': ""I don't think it's required in either case and I think the default is better in both of these cases."", 'comment_created': datetime.datetime(2021, 9, 27, 14, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716725221, 'comment_body': ""Right. I'd support a `sendAll` and also a comment here along the lines of this from those Python docs\r\n\r\n>  Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data. For further information on this topic, ..."", 'comment_created': datetime.datetime(2021, 9, 27, 14, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716725927, 'comment_body': 'Sure. It would still be good to show an example that uses it in the docs.', 'comment_created': datetime.datetime(2021, 9, 27, 14, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716764519, 'comment_body': 'Not actually using a DNS name here - do you want to use `localhost` here for this test?', 'comment_created': datetime.datetime(2021, 9, 27, 14, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716765992, 'comment_body': ""I would expect that any time you are using `begin` that you also enclose the code in a `sync` block. For these tests, it would be reasonable to put a `sync` block around the test body. (I don't remember if the unit test infrastructure always adds `sync` blocks, though)."", 'comment_created': datetime.datetime(2021, 9, 27, 14, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716927376, 'comment_body': ""Your tcpListener also needs a `deinit` which probably should close the socket.\r\nIt's important to still have a `close` method since `close` can fail (because there is no way of getting the returned error out of a `deinit`)."", 'comment_created': datetime.datetime(2021, 9, 27, 18, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716928298, 'comment_body': 'This should be throwing and should consume the return code from sys_close and throw if it was not 0', 'comment_created': datetime.datetime(2021, 9, 27, 18, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716929457, 'comment_body': ""As with tcpListener, this record also needs a `deinit` which probably should close the socket.\r\nIt's important to still have a `close` method since `close` can fail (because there is no way of getting the returned error out of a `deinit`)."", 'comment_created': datetime.datetime(2021, 9, 27, 18, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 717031509, 'comment_body': 'In python they have capibility of writing c structs as bytestrings so if we have it in chapel then only this procedure will be useful for us', 'comment_created': datetime.datetime(2021, 9, 27, 20, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 717061943, 'comment_body': ""Sure. But can you show an example for a setsockopt call that would use such a C structure that's more complex than an int or pointer?"", 'comment_created': datetime.datetime(2021, 9, 27, 21, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 723503436, 'comment_body': ""For this I think we don't actually need `sync` because the calls made in main thread are blocking and rely on `begin` block so it will not proceed further without completing which might be a good test as well because we don't want to proceed (similar to sync)"", 'comment_created': datetime.datetime(2021, 10, 6, 16, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 723575210, 'comment_body': 'Sure. But my concern is - what if something goes wrong? If we want to check that something in one task happen before something in another task, we can check that (e.g. with an atomic variable). But if something goes wrong and the blocking does not occur, will the test core-dump or more generally encounter undefined behavior?', 'comment_created': datetime.datetime(2021, 10, 6, 18, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 728452351, 'comment_body': 'Marked as future work', 'comment_created': datetime.datetime(2021, 10, 13, 21, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 728452713, 'comment_body': 'marked as future work', 'comment_created': datetime.datetime(2021, 10, 13, 21, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 728453502, 'comment_body': '@mppf how can we do this in chapel am not sure about that `for a way to encode C structures as bytestrings` or should we just make the user pass in a `c_void_ptr` instead of `bytes`', 'comment_created': datetime.datetime(2021, 10, 13, 21, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 730138543, 'comment_body': ""@king-11 you don't have to be able to show the example in Chapel. I am just interested in an example of when this overload would be used, even if it would be hard or awkward to use in Chapel today. I.e. can you name a setsockopt call that uses such a struct encoded as bytes? That we can learn more about with the C documentation?"", 'comment_created': datetime.datetime(2021, 10, 15, 21, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 730213705, 'comment_body': '@mppf as per the `setsockopt` there are three options that need to use C structs:\n\n- **SO_LINGER** uses `linger` struct\n- **SO_RCVTIMEO** uses `timeval` struct\n- **SO_SNDTIMEO** uses `timeval` struct\n\nI think python just encodes them as bytes and then makes the C call. My thought is we can do the same for it to be an overload for both structs. Otherwise will need to use void pointers.\n\nReference: [Docs](https://pubs.opengroup.org/onlinepubs/000095399/functions/setsockopt.html#:~:text=The%20setsockopt()%20function%20provides,or%20permit%20socket%20data%20broadcasts.)', 'comment_created': datetime.datetime(2021, 10, 16, 5, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 730231898, 'comment_body': 'Marking as future work because we can then integrate libevent into runtime as well while tranferring it to a separate module.', 'comment_created': datetime.datetime(2021, 10, 16, 8, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 730939104, 'comment_body': 'Sure. Can you just mention these specifically in the docs comment? E.g.\r\n\r\n```\r\n  Overload for :proc:`setSockOpt` that allows setting a :mod:`bytes <Bytes>` value\r\n  on socket option.\r\n  This is useful for `setsockopt` calls that work with a C struct, including `SO_LINGER`, `SO_RCVTIMEO`, and `SO_SNDTIMEO`.\r\n  It is up to the caller to ensure that the\r\n  `value` which is a :type::mod:`bytes <Bytes>` parameter contains the proper bits.', 'comment_created': datetime.datetime(2021, 10, 18, 13, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 732928446, 'comment_body': '""the sockets"" -> ""them""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732930545, 'comment_body': '""refer to""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732933688, 'comment_body': '""my"" -> ""by""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732937053, 'comment_body': ""I don't understand what this example is highlighting. We can see all this in the method signature already?"", 'comment_created': datetime.datetime(2021, 10, 20, 16, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732937969, 'comment_body': 'Could you break long lines (comment and the method signature) to fit into 80 columns?', 'comment_created': datetime.datetime(2021, 10, 20, 16, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732939028, 'comment_body': 'I may be missing something as, again, this ""equivalence"" is just too obvious, and I don\'t know what we\'re learning from it.\r\n\r\nDo you maybe mean these to be examples? That might make more sense, but even with that I don\'t think it adds much here.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732942393, 'comment_body': '""provided"". Same in the above.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732945539, 'comment_body': 'Note that these get rendered in docs as well. (I recommend running `make docs` and viewing docs). So, for the comparison operators, either:\r\n\r\n1. `no doc` them, but put in the header documentation that `ipAddr` supports `==` and `!=`.\r\n2. Put proper sentences in the documentation.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732948225, 'comment_body': 'Probably `no doc` this.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732948660, 'comment_body': '""The type returned from...""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732949341, 'comment_body': 'remove full stops in this and similar entries that are not proper sentences', 'comment_created': datetime.datetime(2021, 10, 20, 16, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732949663, 'comment_body': 'Drop ""returns"" and "".""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732950755, 'comment_body': 'Why `const ref`? (Especially because what you return is just an integer)', 'comment_created': datetime.datetime(2021, 10, 20, 16, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732951390, 'comment_body': 'Why `const ref`? (Especially b/c what you return is a local variable)', 'comment_created': datetime.datetime(2021, 10, 20, 16, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732952586, 'comment_body': 'Note that everything (except for `private`s) starting here up to `tcpListener` is rendered in the docs with no text. Either `no doc` them, or put proper documentations.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732953272, 'comment_body': 'break long lines, please.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732959428, 'comment_body': ""I am a bit worried about standalone code in the module level and their maintainability. I am realizing that we don't have module initializers (but we do have deinitializers), but I wonder whether code like this can be put together somewhere in the module definition (very beginning or very end or together right before `deinit`??)"", 'comment_created': datetime.datetime(2021, 10, 20, 16, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732962809, 'comment_body': 'Could you show how `server` is defined here, as well? I feel like this is a key usage of this module, but the example is not sufficient.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733021328, 'comment_body': 'Should this `while` yield the pthread between iterations?', 'comment_created': datetime.datetime(2021, 10, 20, 17, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733021985, 'comment_body': 'no doc this and the below?', 'comment_created': datetime.datetime(2021, 10, 20, 18, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733022095, 'comment_body': '`no doc`', 'comment_created': datetime.datetime(2021, 10, 20, 18, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733023016, 'comment_body': 'Is this something that can change? Or be changed by the user?\r\n\r\nConsider making it a `const` and/or `no doc`.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733023143, 'comment_body': '""calculated""', 'comment_created': datetime.datetime(2021, 10, 20, 18, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733026271, 'comment_body': 'It could help throwing some empty lines between logical parts of the code. But nonetheless, this if/else is just\r\n\r\n```chapel\r\nerr_out = event_add(writerEvent,\r\n                    if timeout.tv_sec==-1 then nil else c_ptrTo(timeout));\r\n```', 'comment_created': datetime.datetime(2021, 10, 20, 18, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733028973, 'comment_body': 'same question as above, should we be worried about yielding here?', 'comment_created': datetime.datetime(2021, 10, 20, 18, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733030116, 'comment_body': 'Should we allow `real`s as timeouts?', 'comment_created': datetime.datetime(2021, 10, 20, 18, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733030826, 'comment_body': 'This function can really use some vertical spacing.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733031302, 'comment_body': 'another `if/else` that can be done in a more lightweight manner.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733031674, 'comment_body': 'Similar, `no doc` or document and/or mention the support for comparison in a header comment.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733032869, 'comment_body': ""For all these 3 overloads, I think a better way is to `no doc` the 2nd and 3rd ones, make the 1st one's argument generic, add a `where` clause to it to type-check, change its documentation to say that it accepts 3 different types."", 'comment_created': datetime.datetime(2021, 10, 20, 18, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733051872, 'comment_body': ""I see that this overloads go on and on a bit more. I think we should think about reducing this number. To be clear, I talk about the documentation, I don't mind about the number of overloads in code."", 'comment_created': datetime.datetime(2021, 10, 20, 18, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733052316, 'comment_body': 'If we make any changes to `setSockOpt`, we should make symmetric changes to `getSockOpt`', 'comment_created': datetime.datetime(2021, 10, 20, 18, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733053124, 'comment_body': 'This might have been discussed elsewhere, but why not `getPeerName`?', 'comment_created': datetime.datetime(2021, 10, 20, 18, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733053523, 'comment_body': 'Same. Especially considering that we have `getSockOpt`, `getsockname` feels really wrong to me.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733054116, 'comment_body': 'Same issue: multiple overloads with trivial differences in the documentation.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733055375, 'comment_body': 'These methods are too far from the types that they are on. Why? Same goes for setDelayAck below.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 739753985, 'comment_body': 'Yeah I think this example seems redundant. Will remove it', 'comment_created': datetime.datetime(2021, 10, 31, 4, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739754196, 'comment_body': 'Going with 1st option and adding details in the doc comment for `ipAddr`', 'comment_created': datetime.datetime(2021, 10, 31, 4, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739754773, 'comment_body': 'No, the yielding is being handled by call to `localSync$.readFE()`', 'comment_created': datetime.datetime(2021, 10, 31, 4, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739754991, 'comment_body': 'The function call in `readFE()` which yields the thread and that will yield and only return when the running event loop passes down an event to the `sync` variable or a timeout occurs which is also passed down by the event loop to `sync` variable.', 'comment_created': datetime.datetime(2021, 10, 31, 4, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739755105, 'comment_body': 'I think a structure holding these values is a bit more intuitive otherwise both at user and library level we need to do trivial tranformation for getting `seconds` and `microseconds` out of the real value.', 'comment_created': datetime.datetime(2021, 10, 31, 4, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739755325, 'comment_body': 'Earlier they were separate function the idea was to keep the documentation about Naggle optimization at one place only and keeping them at separate places will require us to add documentation at all three places(?) or we can reference the documentation for Naggle in other two 🤔 ', 'comment_created': datetime.datetime(2021, 10, 31, 4, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 740381547, 'comment_body': 'this calls in the method on `sockaddr_storage` which is a const ref', 'comment_created': datetime.datetime(2021, 11, 1, 17, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 740407842, 'comment_body': 'I will put the code at the end of module definition but a future work for this module includes shifting all the libevent code into a separate module of its own.', 'comment_created': datetime.datetime(2021, 11, 1, 17, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 740431645, 'comment_body': ""Hmm, I don't know anything about this optimization, and it may make sense if there's such a context. I'll leave the call to you and @mppf"", 'comment_created': datetime.datetime(2021, 11, 1, 18, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 740432666, 'comment_body': 'I am not following.', 'comment_created': datetime.datetime(2021, 11, 1, 18, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 740433150, 'comment_body': 'Ah, right.', 'comment_created': datetime.datetime(2021, 11, 1, 18, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 740433965, 'comment_body': ""I didn't do a lot of socket programming but:\r\n\r\n> I think a structure holding these values is a bit more intuitive\r\n\r\nI disagree with this very strongly :)"", 'comment_created': datetime.datetime(2021, 11, 1, 18, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 740440696, 'comment_body': ""@e-kayrakli - in an offline conversation I had with @king-11 it's my understanding that he's going to look at providing support for both these structures as well as `real` to represent time in seconds."", 'comment_created': datetime.datetime(2021, 11, 1, 18, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 740441444, 'comment_body': 'I think it makes sense to have the methods on tcpConn appear in one place in the documentation. We can create a section on Nagle in the module-level docs comment to refer to from these.', 'comment_created': datetime.datetime(2021, 11, 1, 18, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 740625110, 'comment_body': ""In case I wasn't clear; I have no problem with the current signature, especially if it is following some sort of precedence and/or have other motivations. I was just suggesting of adding a `real` version alongside this one (which what you're saying)."", 'comment_created': datetime.datetime(2021, 11, 1, 23, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 745391432, 'comment_body': 'Internally it calls in `numericHost` and `port` which are defined in the `Sys` module and they are declared with const ref so this functions to call those requires const ref as well.', 'comment_created': datetime.datetime(2021, 11, 9, 8, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 745391508, 'comment_body': 'made the changes.', 'comment_created': datetime.datetime(2021, 11, 9, 8, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 745413245, 'comment_body': 'Oh alright I got it now this was same need not be const ref normal intent will work fine I was a bit confused with `sockaddr_storage` and this', 'comment_created': datetime.datetime(2021, 11, 9, 9, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 748892348, 'comment_body': 'Normally we use pkg-config for such things', 'comment_created': datetime.datetime(2021, 11, 14, 18, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 748892508, 'comment_body': ""Also ldconfig -v and pkg-config won't exist on all systems, so you have to fail gracefully in that event"", 'comment_created': datetime.datetime(2021, 11, 14, 18, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 748892563, 'comment_body': 'See test/library/packages/Crypto.skipif for an example', 'comment_created': datetime.datetime(2021, 11, 14, 18, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 748892651, 'comment_body': ""We need to skip if CHPL_TASKS != qthreads, right? This script needs to return True if the tests should be skipped and it doesn't look like it's doing that. Maybe it is reversed."", 'comment_created': datetime.datetime(2021, 11, 14, 18, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 749964101, 'comment_body': 'Yep made changes\r\n', 'comment_created': datetime.datetime(2021, 11, 16, 7, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 753852876, 'comment_body': ""@mppf I made a local dev env with Ubuntu and tried to work out the issue that I observed in VM. \r\n\r\nIt turns out this is a pretty flaky error and is not caused by `sent_http` it's by `send_number`. This was something I observed earlier too but I thought was resolved at that time. So if you run the test 4/5 times it might run perfectly through all or will be hangup randomly at some iteration.\r\n\r\nThe thing that is intriguing is if I remove the `recv_number` test everything works fine without hanging even if you run it 1k times. Also, I remember now I kept `send_number` after `recv_number` because that is when it hangs, if we keep `send_number` before `recv_number` it won't hang in that case too."", 'comment_created': datetime.datetime(2021, 11, 21, 20, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': 'b802b319b9baed9b0c8e5ee8e19798799b818424', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e246f2e1d06c8b2f449274174f03133e4068372', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e55e7c8e9ae21439ceca7b898df9c4adedbe9448', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c3a8610883c452c5f4b420055009231a374e04e', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '148c65ff4e285b6d503b8ccd23741b7760baaba9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe5495f4702ed03b0f7b69c6de288b3813e088b3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25c6d5f854328d0cb52e17df6b7cbfbae274e0f3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa3ca915419cb9fa161c604304ae0f19cb486f8', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1fb931e5192532e854349b684800a87a38bba5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdfd9b10d0bc14f706fd15efeeaf8d94961ab42', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f256a1cd447cf0a4d2fb80d8d24e494ce1a51a', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a21c08f53b1b9b0eb88990183c1e7361c1dd7a5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a4b7940dc6dfd3e117ae086c61f07eea985cda', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de76af54ea9dda20aca7f74b79d055b036e09cbd', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b3dfcb01e5ec671e75725e7e663fb488da712b6', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfccc673d1d30b31e0ab2f246c1d30403a10e467', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae11b558c3065ed2ab4f3a23d1787ee724cfa18', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58d9d5975403992b47316d32a3858595f1d8941f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2fb1dcfae28f6635144eb5a81e60bfccb89f35f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af436c8dd74af61b17bc73738f42cde4d617476e', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc9f18c07293c3d9e55fb59df872cb099630f04', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e0a8184192c87832ec7c41dbdf32a1da4c1062', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed58323a3ab7b6aa34d87ab3e692ef409fccfee0', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73ff7d5f5ab1fa5ef5dfa7816888351e233b4bdc', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673e8ebc029aa69f245a59cfe7e2420707ecb7d3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41217c0ee5c050fee649d74405e0b1b8edd6467b', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e8cac8dfcfe2352e72f4f79effda39f8a760b98', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fecd420fb87cc8ce377c6fa756bd221f8bc3199', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b18666d4d708ba9a688398a1657f5f53d2a3a9de', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b1026a34eb2eec7276f8c36af2733079c9f1c6b', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca22abc15bdf084bef218dce1a7182a1aed28ebd', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94b47080d9df2b1f04b17d0dfabd3dac895410a3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b9ca705d9ce89ff754f4fbe250ea40df526d5d1', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e1a87cb4f379e3ec297d918b78e27bcd4d09fc3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c544746ebfb0f84050f8b31b0bc39d986a1c678c', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19dfb2a1e3c4b33f96668b55ffafa095c993f0ba', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33968de07f230810ce77b7668acb90ce2b9f0208', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9494909c91c5d42fe1c5a6496240d914786a8d1', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0379a9e2cdcf5041a4b6257aef21c68771122f0', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c96c86e08ad073b4db3e948b33bb9f974ce02f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ee81e96a9221bdcf7a239b64f2a87422415b190', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de79cc8132e6777b59dda8c8539f7b1e3e1aad5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d5e9499a20cbe89e35dd2efb09e4d74670a4f9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '053907321cd55cc8749492e6d1f4c7bf3318d497', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f42722c162137a6c4990906fe55df2c458dec5c5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef524cc03150c1139d1418a6d5cc61e8643567ed', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f382d49d367c23add859894add1127f9306b81b8', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76aa555fc8f15fffd229109999a3eb0445fecda9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dda61f510fe7ce0e91272092f77098bba70b965', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd3dbbcff2fcac81d0005db46700927ab7b9f7f9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7a5e6e611c0ff5404bb61d2d757ae1c578609aa', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b5545caeedb36fe36567ede6d67a33f4575b2e', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd02ec8adc8222b86ce327450bf5ef3a37b0180f4', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f794f4a1272ed16af421c849cf5ce76bfdc65207', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2736074840a05d74bc43fe590a97bda638eba477', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
666888743,[GSoC] [Design] : Socket Library,"Socket Module API

- The markdown document contains details about implementation for the Socket Module APIs exposed to user.
- The document is just for review purpose and PR will be **closed** after review.

Signed-off-by: Lakshya Singh <lakshay.singh1108@gmail.com>
",False,17899,https://api.github.com/repos/chapel-lang/chapel/pulls/17899,https://github.com/chapel-lang/chapel/pull/17899,closed,233,0,1,21,6,97,1,0,[{'name': 'post-release'}],2021-06-10 13:23:24+00:00,2022-01-13 21:02:41+00:00,18776357.0,"217 days, 7:39:17","[{'comment_id': 650547124, 'comment_body': 'Is 5 the default value for backlog ? I believe it should be set to 0. Also, please clarify if its an optional parameter. \r\nPython 3.5 has made this a optional parameter. \r\nYou may describe the parameters after this line. ', 'comment_created': datetime.datetime(2021, 6, 13, 16, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650549465, 'comment_body': 'Could you please write about the name of the Module, describe the classes first and then dive into the methods ?', 'comment_created': datetime.datetime(2021, 6, 13, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650549822, 'comment_body': ""Here, it's not clear how the socket object was created. Do we have a `const socket = Socket()` ?"", 'comment_created': datetime.datetime(2021, 6, 13, 16, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650551353, 'comment_body': ""Additionally, shouldn't we have a `TCPSocket()` subtype since we have `UDPSocket()` subtype. I guess that was inspired from Julia. "", 'comment_created': datetime.datetime(2021, 6, 13, 16, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650551443, 'comment_body': 'I really like the way Julia language has describe their methods in the docs. Perhaps you can rewrite each of the methods in a similar fashion so that its easier for reviewers to understand param types and return types. Also, you could write which are the optional parameters, and also write the default parameter values.  For example, \r\nMethod:\r\n```\r\nsocket.listen( addr, port, backlog, reuseaddr) -> TCPServer\r\n```\r\nParameters:\r\n```\r\naddr: IPAddr - ipv4/ipv6 address \r\nport: Integer - port number\r\nbacklog: Integer - optional parameter, default value = 0\r\nreuseaddr: Boolean - optional parameter, default value = true\r\n```', 'comment_created': datetime.datetime(2021, 6, 13, 16, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650551494, 'comment_body': 'I think the connect method description section should be at the top before describing listen method. ', 'comment_created': datetime.datetime(2021, 6, 13, 16, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650551681, 'comment_body': 'TCPConn seems to be analogous to the TCPSocket instance I had described at the top comment. I think we should rename `TCPConn->TCPSocket`. ', 'comment_created': datetime.datetime(2021, 6, 13, 16, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650552028, 'comment_body': 'We can also rename `TCPListener -> TCPServer`. ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650552182, 'comment_body': 'It would be great if you could describe each of these methods further. ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650552710, 'comment_body': 'Its worth mentioning that addr would point to localhost. Can we support optional parameters like `backlog`, `timeout`, `family` ?  ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650553163, 'comment_body': 'What would be the name of this method ? Maybe `setIPAddr()` ? Also, we need to differentiate between converting string to ipv4 and ipv6.\r\nWe should also have an additional method `getIPAddr()` & `getIPAddr(IPv6)` which would return an IP address string. ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650553260, 'comment_body': 'Could you describe these methods further ? ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650553758, 'comment_body': ""I'm not sure about the addition of these functions. Julia supports these but I believe Python doesn't. Anyways, option to enable or disable the algorithms is a good way to go forward. "", 'comment_created': datetime.datetime(2021, 6, 13, 17, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650553862, 'comment_body': 'I think this argument may be named `tcp_nodelay` set to 1, i.e., disabled by default. ', 'comment_created': datetime.datetime(2021, 6, 13, 17, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650558727, 'comment_body': ""Wouldn't this bind function be defined in a base class ? How will the bind function differentiate between ipv4 and ipv6? Please write more about the base class and what other methods including bind will be present in it. "", 'comment_created': datetime.datetime(2021, 6, 13, 18, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650559439, 'comment_body': 'I think `recvfrom` returns an InetAddr and data only. Does Python or Julia return host, port and data ?', 'comment_created': datetime.datetime(2021, 6, 13, 18, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650559740, 'comment_body': 'Most UDP implementations I came across use `send` instead of `write`, so maybe we can rename this to `send`. Can you point me to any implementation where you got this from ?', 'comment_created': datetime.datetime(2021, 6, 13, 18, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 650824725, 'comment_body': 'The MAX_VALUE in the Linux kernel is specified to be `4096` but am not sure about what is the generally taken default for `backlog`', 'comment_created': datetime.datetime(2021, 6, 14, 10, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650826589, 'comment_body': ""I have defined `TCPConn` as a translation of `UDPSocket` because the socket isn't just in an unconnected state but will have a established connection and also helps to differ from the TCP socket one we get from `listen`"", 'comment_created': datetime.datetime(2021, 6, 14, 10, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650827129, 'comment_body': ""- no there isn't any socket object we have the function `listen` in the Socket Module that was what I was referring to.\r\n- `TCPListener` seemed more like what it was doing because a server should handle requests on its own but this is just a socket in listening mode which user can use as a server socket"", 'comment_created': datetime.datetime(2021, 6, 14, 10, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650827984, 'comment_body': 'I will make these changes', 'comment_created': datetime.datetime(2021, 6, 14, 10, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650829733, 'comment_body': ""- connect can support timeout using `select` or `epoll`\r\n- I was thinking that we can check at runtime the type of IPAddr so we can use that as family\r\n- backlog 🤔 will be useful only for a socket in a listening state so I don't think will need it here"", 'comment_created': datetime.datetime(2021, 6, 14, 10, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650830462, 'comment_body': 'I was thinking in terms of languages like `D` and `Go` which use `Buffers` to write into connection but I think `send` also make more sense to me might have missed it', 'comment_created': datetime.datetime(2021, 6, 14, 10, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650831405, 'comment_body': '`IAddr` will contain only the host address which might be insufficient for sending back to socket. Python returns a tuple containing `(host, port)`', 'comment_created': datetime.datetime(2021, 6, 14, 10, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650877871, 'comment_body': '- `bind` will be defined at the module level\r\n- it can differentiate btw ipv4 and ipv6 based on the type of host user provides to the function call', 'comment_created': datetime.datetime(2021, 6, 14, 11, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 650945879, 'comment_body': ""What is an IPAddr? Having it start with upper case would indicate it is a class but that probably doesn't make sense ( see https://github.com/chapel-lang/chapel/blob/master/doc/rst/developer/bestPractices/StandardModuleStyle.rst for the standard library style guidance we have written down ). Along the same lines, I would expect TCPConn to be a record as well (rather than a class) but this is something we can discuss.\r\n\r\nI am more or less expecting it to be a record that can contain either a IPv4 or IPv6 address. One interesting question is whether or not IPv4 and IPv6 addresses should be different types. It seems reasonable to me to have them have a single type since that way a function like hostname-to-ip doesn't need to have two different versions with different return types."", 'comment_created': datetime.datetime(2021, 6, 14, 13, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650947385, 'comment_body': ""I think it's debateable whether or not TCPConn should return a `file`. Did you consider that option? We could have some `file`s that know they are sockets and then have it be a runtime error to say call `send` with a non-socket file."", 'comment_created': datetime.datetime(2021, 6, 14, 13, 29, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650948369, 'comment_body': ""Let's list these in Chapel style i.e.\r\n\r\n``` chapel\r\nproc connect(addr: IPAddr, port :int): TCPConn\r\n```"", 'comment_created': datetime.datetime(2021, 6, 14, 13, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650949409, 'comment_body': '@ankingcodes - I thought the idea here is just that we will have both of these\r\n\r\n``` chapel\r\nproc connect(addr: IPAddr, port :int): TCPConn\r\nproc connect(addr: string, port :int): TCPConn\r\n```\r\n\r\nI agree it would be interesting to know how one can convert from a string (like ""127.0.01"" or ""github.com"") into an ipAddr.', 'comment_created': datetime.datetime(2021, 6, 14, 13, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650952021, 'comment_body': 'I had thought that we were expecting that users could use the existing I/O channels to read/write a TCP socket. However I can see in some cases it is useful to have the lower-level functions (like send/recv) that are unbuffered so you know you are writing one packet only, at least for UDP. Is that the intention of these read/write functions?\r\n\r\nHow would they do that when starting from a TCPConn?', 'comment_created': datetime.datetime(2021, 6, 14, 13, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650952933, 'comment_body': 'It seems to me that read/write buffering should be achieved with integration with I/O channels but this function might be doing something I am not understanding (e.g. if it is controlling some buffer inside of the socket implementation rather than one provided by the module you are drafting).', 'comment_created': datetime.datetime(2021, 6, 14, 13, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650953862, 'comment_body': 'what does this parameter do?', 'comment_created': datetime.datetime(2021, 6, 14, 13, 36, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650953948, 'comment_body': 'what does this parameter do?', 'comment_created': datetime.datetime(2021, 6, 14, 13, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650955039, 'comment_body': 'Why does TCPConn use setKeepAlive etc but TCPListener uses setSocketOpt? Seems like the approach for setting the socket options should be consistent between the two.', 'comment_created': datetime.datetime(2021, 6, 14, 13, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650955953, 'comment_body': 'Seems like it would be nice to show `proc` prototypes for each of these methods. In particular for returning the TCPConn and addr, we could use a tuple, or we could use an `out` argument for the addr. But IMO the TCPConn should know the address connected and it would make more sense to just have a methods on the TCPConn - one that return the address of the remote end of the connection and one that return the address of the local end of the connection.', 'comment_created': datetime.datetime(2021, 6, 14, 13, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650959912, 'comment_body': 'probably use ""bound"" instead of ""binded""', 'comment_created': datetime.datetime(2021, 6, 14, 13, 43, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650961570, 'comment_body': 'I don\'t really remember what `bind` does in the system call, but can you describe it here for anybody else who has forgotten? Is it only used for UDP because it is ""connectionless"" ? If it\'s just setting the address we are listening on, why wouldn\'t we do that when constructing the listener? Why do we have UDPSocket as a new type here - do we need a separate UDPSocket/TCPSocket at all? Would it be enough to have UDPListener / TCPListener and UDPConnection / TCPConnection?', 'comment_created': datetime.datetime(2021, 6, 14, 13, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 650963495, 'comment_body': ""Let's use Chapel syntax to describe the method. The term `host` to me indicates it would be a string but you probably mean it to be an ipaddr."", 'comment_created': datetime.datetime(2021, 6, 14, 13, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 651366136, 'comment_body': 'My initial thought is we can use [getaddrinfo](https://man7.org/linux/man-pages/man3/getaddrinfo.3.html) to resolve addresses that can are in dot-dash notation or hostnames.\r\n>node specifies either a numerical network address (for IPv4, numbers-and-dots notation as supported by inet_aton(3); for IPv6, hexadecimal string format as supported by inet_pton(3)), or a network hostname, whose network addresses are looked up and resolved.', 'comment_created': datetime.datetime(2021, 6, 15, 0, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651368891, 'comment_body': ""`bind` is responsible for binding any socket to a specified address and port. Here the socket can be anything either a UDP or a TCP Socket. `listen` under the hood will can in `bind` to bind `TCPListener` to address and port. With either `TCPConn` or `UDPSocket` that isn't a requirement as the system assigns any free port and localhost address to them by default.\r\n\r\nWhile `TCPConn` is in a connected state when they are created `UDPSocket` are connectionless they are just waiting for the user to use them for `sending` and `receiving` purpose only. But for `sending` and receiving purpose user might require a socket to have a _known_ address that is when `bind` will be useful for `UDPSocket`."", 'comment_created': datetime.datetime(2021, 6, 15, 0, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651370949, 'comment_body': 'The backlog argument defines the maximum length to which specifies the queue length for completely established sockets waiting to be accepted.  If a connection request arrives when the queue is full, the client may receive an error with an indication of ECONNREFUSED or, if the underlying protocol supports retransmission, the request may be ignored so that a later reattempt at connection succeeds', 'comment_created': datetime.datetime(2021, 6, 15, 0, 54, 32, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651371836, 'comment_body': 'calling in `bind` without `reuseaddr` can return an error that some other socket is already bound to the specified address. This can also be a result of re-running the program after only a short waiting period where the `bind` may find address as _already in use_.', 'comment_created': datetime.datetime(2021, 6, 15, 0, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651374181, 'comment_body': ""`setKeepAlive` is something that we can't associate with a socket in listening mode so it isn't available on `TCPListener`. I wasn't sure what will be the options user might want to set on a `TCPListener` there are several [list](https://www.ibm.com/docs/en/zos/2.3.0?topic=functions-setsockopt-set-options-associated-socket) so I associated the default `setSocketOpt` function with `TCPListener`. \r\n\r\nWe can add `setSocketOpt` for `TCPConn` as well 🤔 that can add in the consistency as well as provide some of the usually tweaked options as separate functions"", 'comment_created': datetime.datetime(2021, 6, 15, 1, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651391691, 'comment_body': ""`nagle` will  deal with setting `TCP_NODELAY` while `quickack` will set `TCP_QUICKACK` both can be set or unset irrespective of other's state"", 'comment_created': datetime.datetime(2021, 6, 15, 1, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 651393694, 'comment_body': "">I have defined `TCPConn` as a translation of `UDPSocket` because the socket isn't just in an unconnected state but will have an established connection and also helps to differ from the TCP socket one we get from `listen`\r\n\r\nI think we can discuss more what it should be named while `TCPSocket` is the one Julia uses in my opinion it correlates to just a normal socket whereas here this socket has established connection which is what Go uses"", 'comment_created': datetime.datetime(2021, 6, 15, 2, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657049381, 'comment_body': ""A file wouldn't we able to tell about its whereabouts like `address` 🤔"", 'comment_created': datetime.datetime(2021, 6, 23, 12, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657049994, 'comment_body': 'Makes sense I think returning `TCPConn` would suffice', 'comment_created': datetime.datetime(2021, 6, 23, 12, 34, 46, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657056629, 'comment_body': 'updated to chapel IO so wont be required anymore', 'comment_created': datetime.datetime(2021, 6, 23, 12, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657058064, 'comment_body': ""I have updated it to just `setSocketOpt` because if we aren't using C IO then providing options like `RECVBUF` wont translate to chapel IO"", 'comment_created': datetime.datetime(2021, 6, 23, 12, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657060435, 'comment_body': ""- I have added in updates so the `send` and `recv` are only associated with `UDPSocket` instances and `TCPConn` will use Chapel IO.\r\n- I wasn't able to understand the second question"", 'comment_created': datetime.datetime(2021, 6, 23, 12, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 657167517, 'comment_body': 'In our meeting we talked about how it could. It might also be possible to get the address from a file descriptor using some OS call.', 'comment_created': datetime.datetime(2021, 6, 23, 14, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 669786727, 'comment_body': 'This could meet the cut for our current thinking about when should we omit parentheses in methods: https://github.com/chapel-lang/chapel/blob/main/doc/rst/developer/bestPractices/StandardModuleStyle.rst#functions-and-methods', 'comment_created': datetime.datetime(2021, 7, 14, 16, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 669787834, 'comment_body': 'Typo.\r\n\r\nMore importantly, as someone not so knowledgeable about this matters, I read ""quickack"" as two separate words, and left to my own devices would capitalize as `quickAck`', 'comment_created': datetime.datetime(2021, 7, 14, 16, 50, 11, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 669788951, 'comment_body': 'Should `family` be param?', 'comment_created': datetime.datetime(2021, 7, 14, 16, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 669792709, 'comment_body': ""To the extent we can, we should reference primary sources from standards bodies rather than secondary sources from vendors or implementors. They're both more authoritative and (I would guess) more likely to stay available at the same URL into the future. So for this one, how about https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html (POSIX) instead of the IBM doc?\r\n(Looking at the others I don't know that we'll be able to do this for all of them, but I'm going to try.)"", 'comment_created': datetime.datetime(2021, 7, 14, 16, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 669794415, 'comment_body': 'Reference https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockopt.html instead?', 'comment_created': datetime.datetime(2021, 7, 14, 16, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 669795090, 'comment_body': 'Nit: ""wont"" needs an apostrophe (""won\'t"").', 'comment_created': datetime.datetime(2021, 7, 14, 17, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 669803539, 'comment_body': 'Is this paragraph really needed? It seems to be describing implementation rather than behavior, which isn\'t good interface practice. Further, The `USENIX` page cited here is marked as ""legacy content"" with implicit encouragement to look at more modern stuff. And some of the content on the IBM page looks IBM-specific; it would probably be better to cite https://pubs.opengroup.org/onlinepubs/9699919799/functions/getnameinfo.html (POSIX).\r\n\r\n**Edit** adding a followup -- if you really do want to talk about `sockaddr_storage`, perhaps reference https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_socket.h.html (POSIX) instead of that USENIX page?', 'comment_created': datetime.datetime(2021, 7, 14, 17, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 669811490, 'comment_body': ""Chatting offline with Michael about the interface, he suggested (and I agree) that it might worth emphasizing why UDP differs from TCP's approach that's channel based."", 'comment_created': datetime.datetime(2021, 7, 14, 17, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 669814254, 'comment_body': 'Probably better to reference https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/netinet_in.h.html here. Note that POSIX leaves the IPv4 loopback address as implementation-defined, though it says most systems do define it, as `INADDR_LOOPBACK`.', 'comment_created': datetime.datetime(2021, 7, 14, 17, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 671482458, 'comment_body': 'Thanks for pointing this out 😄  I actually made the construct in actual [code](https://github.com/chapel-lang/chapel/pull/17960/files#diff-25e31a95ef0ebf2378f1bf89a17c4e717d7ea626f91d109b43530a44f25ebe31R156) just like you suggested just need to update this doc', 'comment_created': datetime.datetime(2021, 7, 16, 19, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671486117, 'comment_body': ""- Correcting the typo\r\n- This was based on Julia's [quickack](https://docs.julialang.org/en/v1/stdlib/Sockets/#Sockets.quickack) function they seem to use lowercase naming for all so am also not sure if it's actually two words but seems so."", 'comment_created': datetime.datetime(2021, 7, 16, 19, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671487423, 'comment_body': ""without family, it won't be possible to distinguish btw IPv4 and IPv6 addresses which have different structures something like `127.0.0.1` to `::1` which are both `localhost` but one is ipv4 and the other is ipv6."", 'comment_created': datetime.datetime(2021, 7, 16, 19, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671488425, 'comment_body': 'certainly, my idea was although to provide the reader a place from where they can read about it with ease never thought about future availability but primary sources should be used instead so will make changes :)', 'comment_created': datetime.datetime(2021, 7, 16, 19, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671488750, 'comment_body': ""I think `man7` is an official page (isn't it ?) because the details about functions is same on both"", 'comment_created': datetime.datetime(2021, 7, 16, 19, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671490244, 'comment_body': ""- I too think we don't need to add details about `getnameinfo` will remove it.\r\n- for `sockaddr_storage` i will change the url."", 'comment_created': datetime.datetime(2021, 7, 16, 19, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671490891, 'comment_body': 'making the change thanks 👍🏻 ', 'comment_created': datetime.datetime(2021, 7, 16, 19, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671491303, 'comment_body': 'sure I will add in detail about why the change was made to use raw functions.', 'comment_created': datetime.datetime(2021, 7, 16, 19, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671493288, 'comment_body': 'regarding `INADDR_LOOPBACK` will the user and the code too need `ifdef` checks or we can assume that `INADDR_LOOPBACK` will be available on the majority of systems?', 'comment_created': datetime.datetime(2021, 7, 16, 19, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671498191, 'comment_body': 'Apparently, their convention is ""put multiple words together if they\'re readable, snake_case if they aren\'t"", where I believe we are leaning more aggressively towards distinguishing words. So, I still personally lean towards quickAck, but I\'d prefer others to speak up about this before making any change.\r\n\r\nRelevant part of julia naming conventions: https://docs.julialang.org/en/v1/manual/style-guide/#Use-naming-conventions-consistent-with-Julia-base/', 'comment_created': datetime.datetime(2021, 7, 16, 20, 6, 30, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 671499479, 'comment_body': 'Right, but what I\'m asking is whether it should be a compile-time value:\r\n\r\n```chapel\r\nproc ipAddr.init(host:string = ""localhost"", port:uint(16) = 8000, param family:IPFamily = IPFamily.IPv4)\r\n```\r\n\r\nThis will make an ipv4 address be a different type than an ipv6 address, and cross-type operations will be subject to the limitations/checks that our type system imposes. That seems like an added benefit to me, but maybe we want to use v4 and v6 addresses more interchangeably. And that part is beyond my expertise on the subject matter.', 'comment_created': datetime.datetime(2021, 7, 16, 20, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 671577057, 'comment_body': 'I\'d also be inclined to use `quickAck` in this case.  It doesn\'t feel sufficiently compound / single-word to meet my personal ""all lowercase"" test.', 'comment_created': datetime.datetime(2021, 7, 17, 0, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'bradcray', 'type': 'User'}, {'comment_id': 671666869, 'comment_body': 'made the change 😄 ', 'comment_created': datetime.datetime(2021, 7, 17, 10, 5, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 671705756, 'comment_body': ""There is one particular change that I did like to take opinions on. I didn't check it earlier but the actual optimizations are called `naggle` and `delayAck` which are enabled on disabling flag `TCP_NODEDELAY` and `TCP_QUICKACK` respectively. \r\n\r\nThe Julia idea of naming one procedure on optimization and the other on the flag doesn't seem right. We can make changes either to name both based on `flags` they actually change or `optimization` they enable which can be a bit confusing since to enable them we have to disable something else but it might be more known."", 'comment_created': datetime.datetime(2021, 7, 17, 14, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 673137714, 'comment_body': ""In networking programs, it's common to e.g. accept an IP address to work with from the command line and then to work with both ipv4 and ipv6. Additionally, DNS resolution can give a combination of ipv4 and ipv6 results. Lastly, the OS calls we are interacting with are already runtime polymorphic in this way. So I think it's to our advantage *not* to make ipv4 vs ipv6 a compile-time property of an address."", 'comment_created': datetime.datetime(2021, 7, 20, 13, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673139707, 'comment_body': ""The POSIX standard is described in the link Greg provided but the man7 page is the linux manual. We'd like to focus on POSIX rather than linux."", 'comment_created': datetime.datetime(2021, 7, 20, 13, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673143487, 'comment_body': ""We can define it for our own use if it isn't defined (but such things have to happen in C code)."", 'comment_created': datetime.datetime(2021, 7, 20, 13, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 673295720, 'comment_body': 'Thanks for the background Michael. All that makes sense to me.', 'comment_created': datetime.datetime(2021, 7, 20, 16, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 673376569, 'comment_body': 'ohh right thanks', 'comment_created': datetime.datetime(2021, 7, 20, 18, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 676785447, 'comment_body': ""I'm a little iffy on C types being the only way to infer the family value.  Would it be reasonable to expose wrapper Chapel types and use those instead?"", 'comment_created': datetime.datetime(2021, 7, 26, 17, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676790938, 'comment_body': 'This conflicts with the declaration above.  Will the default value be 5 or 0?', 'comment_created': datetime.datetime(2021, 7, 26, 17, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676791982, 'comment_body': ""Shouldn't this return an instance of IPFamily instead?"", 'comment_created': datetime.datetime(2021, 7, 26, 17, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676793932, 'comment_body': 'I\'m not sure I know what ""will can in bind to bind"" was supposed to mean, sorry :(', 'comment_created': datetime.datetime(2021, 7, 26, 17, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676795112, 'comment_body': 'reuseaddr is not present in the definition above, was adding it here a mistake or should it be present above?', 'comment_created': datetime.datetime(2021, 7, 26, 17, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 676795391, 'comment_body': 'Same question here', 'comment_created': datetime.datetime(2021, 7, 26, 17, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 679020164, 'comment_body': ""I didn't check on it much but now that I see the value will use will be the `DEFAULT_BACKLOG` as the default which will be:\r\n```chapel\r\nparam const DEFAULT_BACKLOG = if SOMAXCONN <= 128 then SOMAXCONN else 128;\r\n```\r\n\r\nIt's based on how python does it https://bugs.python.org/issue21455 but there was discussion on increasing the backlog which never seemed to gather consensus https://bugs.python.org/issue38699"", 'comment_created': datetime.datetime(2021, 7, 29, 10, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679020992, 'comment_body': 'the function call will return a `c_int` via the c system call so is it possible to typecast it to `enum`?', 'comment_created': datetime.datetime(2021, 7, 29, 10, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679021320, 'comment_body': '*call 😅  will make the change', 'comment_created': datetime.datetime(2021, 7, 29, 10, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679021528, 'comment_body': ""shouldn't be here thanks will remove it"", 'comment_created': datetime.datetime(2021, 7, 29, 10, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679029370, 'comment_body': '- For IPV4 i think it will be possible as `in_addr_t` as I can see is\r\n  ```C\r\n  typedef uint32_t in_addr_t;\r\n  ```\r\n- For IPV6 i think that will not be a breeze or even possible not sure\r\n  ```C\r\n  #if !__USE_KERNEL_IPV6_DEFS\r\n  /* IPv6 address */\r\n  struct in6_addr\r\n    {\r\n      union\r\n        {\r\n     \t  uint8_t\t__u6_addr8[16];\r\n\t  uint16_t __u6_addr16[8];\r\n\t  uint32_t __u6_addr32[4];\r\n        } __in6_u;\r\n  #define s6_addr\t\t\t__in6_u.__u6_addr8\r\n  #ifdef __USE_MISC\r\n  # define s6_addr16\t\t__in6_u.__u6_addr16\r\n  # define s6_addr32\t\t__in6_u.__u6_addr32\r\n  #endif\r\n    };\r\n  #endif /* !__USE_KERNEL_IPV6_DEFS */\r\n  ```', 'comment_created': datetime.datetime(2021, 7, 29, 10, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679147316, 'comment_body': 'Yes we can cast integers to enums, e.g. `myint : myEnumType`. That cast can throw though. E.g.\r\n\r\n```\r\nenum myenum { a=1, b, c }\r\nvar i = 32;\r\nvar e = i:myenum;\r\nwriteln(e);\r\n```\r\n\r\nWhat might make sense in to have more than one getter function where one returns the OS view of the family and another returns the enum value. Anyway if we have the potential problem that the OS has more families than our enum value, we could include an `other` element in our enum.', 'comment_created': datetime.datetime(2021, 7, 29, 13, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679253446, 'comment_body': ""I mean, it's also possible to do a switch statement on the values returned and return the appropriate enum value for each without having to cast."", 'comment_created': datetime.datetime(2021, 7, 29, 15, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 679266236, 'comment_body': 'If the type is available as an extern type in Chapel code, it should be straight-forward to have a type variable that points to the extern type, right?  Maybe something like this?\r\n```chapel\r\nextern type sys_in6_addr_t;\r\ntype ipv6Addr = sys_in6_addr_t;\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 15, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 679374822, 'comment_body': ""oh okay, that works but that won't be wrapper 🤔 though right?"", 'comment_created': datetime.datetime(2021, 7, 29, 18, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679379841, 'comment_body': ""The user can only set in the family using the `enum` itself, so if the OS has more families, it will be up to us to expand the options in `enum`; otherwise, the user can't use them; which also allows us to use `enum` casting as the family returned won't be out of the `enum` set."", 'comment_created': datetime.datetime(2021, 7, 29, 18, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679406410, 'comment_body': ""Sorry, that's what I meant by wrapper.  Not a wrapper function or a type that holds another type, more like an alias"", 'comment_created': datetime.datetime(2021, 7, 29, 18, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lydia-duncan', 'type': 'User'}, {'comment_id': 679611112, 'comment_body': 'Yeah an `alias` will be great I will make the change for same.', 'comment_created': datetime.datetime(2021, 7, 30, 2, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': '4a2cf4e8930c753b81ce7a79c1e62f7f9343ec65', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eecea7e8c2a820c9db1a444cf68ab36595ca0e42', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98ab805dbfa5a09c8b9fd07c96c7fe862265e6c7', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ec0872377e27af8d4304041327d7db964e79e7f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48d64e93b9261167e1dbaa3b889deeb6559e5c2d', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '371b1b448d192933cb2af0b13dc97e1b14d32cdc', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d08d0f2e11639bc1f8c4335a89749fcbda935f5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9dd891caa608fb0ecf1f6f4181d1cee46dbe118', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea2dfa4e5e220753fb02351eb3dd5366dceeb8a9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '237d2459f63253e8d2e7ac14af2797658638c299', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7cc558474b03d212e4362419b96c47e60cd32ea', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4595f71e29b34ff586fc2ddd3772b66d2c819abb', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50dda82604038405449871f8aa63de72535f3d8', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5720d1a999d28a3731db2dafa814dc83e2c57084', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f46624a79e7ce3a3ca8db54c94c18b6d081bea62', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c033c459fad755cf088d7dc6175155bea324bde2', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '916d730800ee81213962d5052fc18b86bbfc380f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a944ce2738a3765a86e8723ea28c079b5049612', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c9eb4a8e7864e5542ba786467e7a9994ed8e009', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7d0b2781f874bc001479c7acfa19407117471242', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5431aeb8d63f873ec3d56e253855fe645cf82ea8', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
672890985,[GSoC] Socket Constructs Additions Sys Module,"- feat: setter for sys_sockaddr_t and opaque address constants for loopback and any
- feat: getter for sys_sockaddr_t and size constants for buffer allocation to store IP address
- chore: add in new constants for fcntl commands 
- chore: new constants for set/get socket socket level and its options
- fix: function definition correction for sys_init_sockaddr_t
- chore: remove trailing spaces and newline characters

Promised Future Work:
 * move Chapel-style parts of the new interface from Sys to Sockets when the latter is added

Reviewed by @gbtitus, @mppf, and @ankingcodes.",True,17932,https://api.github.com/repos/chapel-lang/chapel/pulls/17932,https://github.com/chapel-lang/chapel/pull/17932,closed,327,22,5,9,10,19,0,1,[],2021-06-17 18:34:47+00:00,2021-07-07 16:23:22+00:00,1720115.0,"19 days, 21:48:35","[{'comment_id': 654960367, 'comment_body': 'Why are ipv4 constants in uppercase and ipv6 in lowercase ?', 'comment_created': datetime.datetime(2021, 6, 20, 16, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 656118784, 'comment_body': ""these are C defined constants so I didn't change the name but we can do for chapel if required"", 'comment_created': datetime.datetime(2021, 6, 22, 11, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 656780733, 'comment_body': 'I think its good practice to keep all constants to uppercase, provided all other constants are also in uppercase', 'comment_created': datetime.datetime(2021, 6, 23, 5, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 657133590, 'comment_body': ""The direction we're going with the Sys module is that it will become the POSIX module and the things defined in it will match the C functions exactly (including in capitalization)."", 'comment_created': datetime.datetime(2021, 6, 23, 14, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 657135107, 'comment_body': ""Some of the C constants, such as `S_IRWXU`, do not work with the LLVM backend. So it's important to test that these constants do work with the LLVM backend. If they don't, we will create C wrapper functions and parenless Chapel functions to call them (e.g. `proc S_IRWXU { return chpl_wrap_S_IRWXU(); }` ).\r\n\r\n(You're not defining `S_IRWXU` here - I'm just using it as an example that I know has an issue)."", 'comment_created': datetime.datetime(2021, 6, 23, 14, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 657136210, 'comment_body': ""I'm not so sure what `fill` means? It's a new function, right? Maybe we can come up with a better name and add some documentation comments for it?"", 'comment_created': datetime.datetime(2021, 6, 23, 14, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 657137982, 'comment_body': 'just judging from this function signature I would expect it to work with DNS lookup in the event host is a string like www.hpe.com. Maybe we can make it clear that this only works with IP address strings in the documentation and variable names.', 'comment_created': datetime.datetime(2021, 6, 23, 14, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 659131910, 'comment_body': 'My current build for chapel uses LLVM Backend it works there, or shall I check in some other way', 'comment_created': datetime.datetime(2021, 6, 26, 7, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 659132328, 'comment_body': ""I will add in the comments... for name 😅 am open to suggestions wasn't able to come up with one myself. The purpose of this function is to `fill` in details like `family`, `port`, and `address` into the `sys_sockaddr_t`"", 'comment_created': datetime.datetime(2021, 6, 26, 7, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 659132350, 'comment_body': 'sure', 'comment_created': datetime.datetime(2021, 6, 26, 7, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 659156973, 'comment_body': 'here it fails on direct comparison. I am not able to figure out why is it so because on `writeln` output comes out to be the same', 'comment_created': datetime.datetime(2021, 6, 26, 11, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 659157643, 'comment_body': 'buffer obtained from `c_calloc` is being modified here', 'comment_created': datetime.datetime(2021, 6, 26, 11, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 660655552, 'comment_body': ""That's fine"", 'comment_created': datetime.datetime(2021, 6, 29, 14, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 660656042, 'comment_body': 'what about `set` ?', 'comment_created': datetime.datetime(2021, 6, 29, 14, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 660659361, 'comment_body': 'If you write it as `proc init` then you would run it with e.g. `new sys_sockaddr_t(host, port, family)`. I think `initialize` is probably not a great term since `init` is short for it but is a special function.', 'comment_created': datetime.datetime(2021, 6, 29, 14, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 660662224, 'comment_body': ""I'd recommend running the program under `valgrind` to look for use-after-free type errors. Does the situation change if you double the allocation size? What if you check `getAddr == address` ?"", 'comment_created': datetime.datetime(2021, 6, 29, 14, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 660938853, 'comment_body': ""the issue was related to the call in `createStringfromBorrowed` where I wasn't specifying length properly so I changed the function to use `strlen` and return the use it in the call."", 'comment_created': datetime.datetime(2021, 6, 29, 20, 25, 12, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 661554651, 'comment_body': ""I know it's tempting to remove these instances of trailing whitespace in the copyright blocks, but I believe the automagic copyright updater we run every year will just put them back, so taking them out is a Sisyphean effort."", 'comment_created': datetime.datetime(2021, 6, 30, 14, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'gbtitus', 'type': 'User'}, {'comment_id': 661679902, 'comment_body': '😅 i usually set my editor to remove trailing whitespaces and newlines. If required I can just add them back', 'comment_created': datetime.datetime(2021, 6, 30, 17, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': '59b4d6f5e5558b6ce48e83b5f02e68e8c996aafd', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15566c4abce2b2df57363fe36a396eaf1a201325', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a525efb01718838adbed3e20bf715403e6f0884', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f9837bd1d4e00af9bc59d05c1ee72353465077c', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe05c183e19b79ee852204fa4e997d1bbe1b8b6c', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca570fec79de175d9c8b801615f8c33b7cbaef9c', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '348ae3887903cdaf189cafac005b63038fa5de18', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd9ff9acc9313d8b63e0095f20623f999ab888a7', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adb650ad9ebf99e434aa55fd1f1e985dd517ff98', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
678344348,File Descriptor Getter for `file`,"- feat: qio_get_fd function added
- useful for getting file descriptor primary use case in functions like setsocketopt and fcntl to change the file flags by making a system call
- fix different return types on `set_sys_sockaddr_in_t` and `set_sys_sockaddr_in6_t` in runtime and Sys.chpl

",True,17988,https://api.github.com/repos/chapel-lang/chapel/pulls/17988,https://github.com/chapel-lang/chapel/pull/17988,closed,36,24,3,3,2,4,0,1,[],2021-06-26 14:27:40+00:00,2021-07-12 16:27:47+00:00,1389607.0,"16 days, 2:00:07","[{'comment_id': 665371704, 'comment_body': ""let's make this condition also check fl != NULL"", 'comment_created': datetime.datetime(2021, 7, 7, 13, 29, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 666415375, 'comment_body': 'made the changes', 'comment_created': datetime.datetime(2021, 7, 8, 18, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 666430418, 'comment_body': ""Now that I look at it, it'd be nice if this error case set `*out = -1` just so the behavior is more predictable if the error is not checked."", 'comment_created': datetime.datetime(2021, 7, 8, 18, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 666662241, 'comment_body': 'certainly 😄 made the changes for setting `out`', 'comment_created': datetime.datetime(2021, 7, 9, 4, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': '13f5ed135be82437ebca73a7f8a02f16a57198d2', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afdc780650189dd048e61196196dc989859eb066', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '367d40503135c17b6c09627bb9ad84c86fa3aa0f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
691527576,[GSoC] update addrinfo constructs,"- extern proc for adding in `getaddrinfo`
- extern `addrinfo_t`
- add in new getter
- remove duplicate getters and rename functions

Signed-off-by: Lakshya Singh <lakshay.singh1108@gmail.com>",True,18072,https://api.github.com/repos/chapel-lang/chapel/pulls/18072,https://github.com/chapel-lang/chapel/pull/18072,closed,11,9,3,3,2,3,0,0,[],2021-07-16 14:19:31+00:00,2021-07-19 16:47:02+00:00,268051.0,"3 days, 2:27:31","[{'comment_id': 671447596, 'comment_body': ""Let's remove the `// opaque` since it is no longer true"", 'comment_created': datetime.datetime(2021, 7, 16, 18, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 672307392, 'comment_body': ""Why have it named `sys_getaddrinfo` in Chapel? Just name it `getaddrinfo` and then you don't need the renaming.  `extern proc getaddrinfo`"", 'comment_created': datetime.datetime(2021, 7, 19, 13, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 672308432, 'comment_body': ""I think the intent here was to set the freed pointer to NULL, but I see it didn't match the `extern proc` and that is why you made this change. So, also remove the `p = NULL` line here, because the value of `p` won't be communicated back to the call site in C."", 'comment_created': datetime.datetime(2021, 7, 19, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}]","[{'commit_sha': '6acb737768b2e338b64abc0e7e9bab5271d14703', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0179397bdfbe370baddd439fa4f7704eb4623bdd', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02d4ea7b60345e1d35bf6c43b6789da2e98c9d21', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
681563923,[GSOC] Qthread Select,"conditional compilation of `qt_select` for providing in a method to keep original task unblocked when observing for IO.

Prior to `qt_select` call `select` and block for 64ms which allows instantaneous connections to be established
without timing out.

Signed-off-by: Lakshya Singh <lakshay.singh1108@gmail.com>",True,18019,https://api.github.com/repos/chapel-lang/chapel/pulls/18019,https://github.com/chapel-lang/chapel/pull/18019,closed,57,35,1,2,5,19,0,0,[],2021-07-01 07:25:59+00:00,2021-08-04 16:36:00+00:00,2970601.0,"34 days, 9:10:01","[{'comment_id': 665055360, 'comment_body': ""@mppf @krishnadey30 there seems to be an issue here with `qt_connect`. It isn't returning an error even when the port has no service listening on it where we call it to connect. Normal `connect` returns a transport fail error, whereas `qt_connect` returns a zero"", 'comment_created': datetime.datetime(2021, 7, 7, 5, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 665397768, 'comment_body': 'Can you try to make a C reproducer and post it to the threads issue tracker here: https://github.com/Qthreads/qthreads/issues ? Additionally it would be good if you can check that you can get errno from a failed connect call.', 'comment_created': datetime.datetime(2021, 7, 7, 13, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 670508653, 'comment_body': 'Updated this to use `connect` as per discussion is last meeting', 'comment_created': datetime.datetime(2021, 7, 15, 14, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679139631, 'comment_body': 'Can we use `()` around the the `||` just to make the precedence clear? \r\n\r\n```\r\n(timeout->tv_usec > 64000 || timeout->tv_sec >= 1) ? 64000 : timeout->tv_usec;\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 13, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679140677, 'comment_body': ""I don't think this code should be modifying timeout. But, you can make a second local copy. Maybe we can have `struct timeval first_timeout;` and `struct timeval second_timeout;` ?"", 'comment_created': datetime.datetime(2021, 7, 29, 13, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679142146, 'comment_body': 'This can make the seconds value negative, right? Should we set it to 0 in that case?', 'comment_created': datetime.datetime(2021, 7, 29, 13, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679355151, 'comment_body': ""no it won't as the microseconds will only be negative in the case when seconds is at least one or more"", 'comment_created': datetime.datetime(2021, 7, 29, 17, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679355309, 'comment_body': 'made the change', 'comment_created': datetime.datetime(2021, 7, 29, 17, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679355775, 'comment_body': 'made the change', 'comment_created': datetime.datetime(2021, 7, 29, 17, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679393186, 'comment_body': ""Why are we allocating first_timeout? Why can't it be a regular stack value like second_timeout? I would imagine you could write `struct timeval first_timeout = *timeout;`"", 'comment_created': datetime.datetime(2021, 7, 29, 18, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679393753, 'comment_body': ""It'd make sense to swap the uses of the two variables - since we are waiting twice, the timeout we use for the first select should be `first_timeout`, right?"", 'comment_created': datetime.datetime(2021, 7, 29, 18, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679394250, 'comment_body': 'Oh, is the concern just that timeout could be NULL? Seems like something that can be handled without allocating.', 'comment_created': datetime.datetime(2021, 7, 29, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679580689, 'comment_body': 'Yeah that makes sense will update it', 'comment_created': datetime.datetime(2021, 7, 30, 1, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679581083, 'comment_body': ""🤔 yeah that was the reason cause It won't be possible to point a normal struct to `NULL`. What could be the other way of doing it?"", 'comment_created': datetime.datetime(2021, 7, 30, 1, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679817153, 'comment_body': 'made the changes for it to be a stack value', 'comment_created': datetime.datetime(2021, 7, 30, 10, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 679907525, 'comment_body': '`struct timeval second_timeout = {0}` to zero initialize it. Otherwise it is garbage memory.', 'comment_created': datetime.datetime(2021, 7, 30, 13, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 679908861, 'comment_body': 'Here, and in the below call, instead of passing second_timeout, you should check to see if timeout was null, and pass null in that case.\r\n\r\nE.g.\r\n\r\n```\r\nstruct timeval* second_timeout_ptr = NULL;\r\nif (timeout != NULL)\r\n  second_timeout_ptr = &second_timeout;\r\n\r\n...\r\n\r\ngot_nset = qt_select(nfds, readfds, writefds, exceptfds, second_timeout_ptr);\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 13, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 680134996, 'comment_body': 'made the change', 'comment_created': datetime.datetime(2021, 7, 30, 18, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 680135085, 'comment_body': 'right missed out on the `NULL` part', 'comment_created': datetime.datetime(2021, 7, 30, 18, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': '571d224c716ecca2e76842228af204ccdec9522d', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6639c3954de623a39b6a6cc714cfed5ad59018a6', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253
675305473,[GSoC 2021] Socket Library,"This PR adds an implementation of the Socket library to modules/packages.

This first version has some caveats:

 * requires libevent 2.1 or newer
 * requires CHPL_TASKS=qthreads right now (fifo doesn't work yet)
 * requires the C backend right now (CHPL_TARGET_COMPILER=llvm doesn't work yet)
 * requires libevent be available in /usr/include/event2
 
### Design 
#17899 

### Future Work
  - DNS Resolution using libevent
  - IO Plugin using libevent for non-blocking IO
  - sendAll method for UDP and TCP on lines of python's [sendAll](https://docs.python.org/3/library/socket.html#socket.socket.send)
  - Make work with LLVM and FIFO
  - Separate Module for Libevent",True,17960,https://api.github.com/repos/chapel-lang/chapel/pulls/17960,https://github.com/chapel-lang/chapel/pull/17960,closed,2255,8,29,55,16,132,1,0,[{'name': 'post-release'}],2021-06-22 10:51:07+00:00,2022-01-13 15:08:53+00:00,17727466.0,"205 days, 4:17:46","[{'comment_id': 673636712, 'comment_body': 'Curious what might be the use case of this overload. AFAIK, clients are only concerned with sys_in_addr_t & sys_in6_addr_t. ', 'comment_created': datetime.datetime(2021, 7, 21, 3, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 673637449, 'comment_body': ""We have newlines in between in some functions but not in all. To maintain consistency, I'd suggest to get rid of them. "", 'comment_created': datetime.datetime(2021, 7, 21, 3, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 673643300, 'comment_body': ""In general, I believe Error Messages can be improved on, unless they're supposed to be kept as they are (Did you see similar error messages in Python or Julia ?). "", 'comment_created': datetime.datetime(2021, 7, 21, 3, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 673644031, 'comment_body': 'I assume IPUnspec is an enum named by you, if so, I feel ""IPNoSpec"" would be better. ', 'comment_created': datetime.datetime(2021, 7, 21, 4, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ankushbhardwxj', 'type': 'User'}, {'comment_id': 680400037, 'comment_body': 'The use of this would for inside Module use mostly as to copy an ipAddr or create one we essentially need to copy the `_addressStorage` inside it which is returned from system calls', 'comment_created': datetime.datetime(2021, 7, 31, 19, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 680400057, 'comment_body': 'sure', 'comment_created': datetime.datetime(2021, 7, 31, 19, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 680400165, 'comment_body': ""It's a POSIX translation of `AF_UNSPEC` as we can't have `c_int` in enum I used their values directly"", 'comment_created': datetime.datetime(2021, 7, 31, 19, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 700944398, 'comment_body': 'Why does this throw?', 'comment_created': datetime.datetime(2021, 9, 2, 10, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'rapiz1', 'type': 'User'}, {'comment_id': 701149418, 'comment_body': ""it's possible that the user might have not configured the ipAddr properly so the getters for `family`, `host` and `port` are throwing that's why the comparison operator is also throwing"", 'comment_created': datetime.datetime(2021, 9, 2, 14, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 712243217, 'comment_body': ""Let's say here in this comment that this type supports ipv4 and ipv6 addresses."", 'comment_created': datetime.datetime(2021, 9, 20, 14, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712252432, 'comment_body': 'I was expecting one to write `new ipAddr(""127.0.0.1"", 8111, IPFamily.IPv4)` etc. See https://github.com/chapel-lang/chapel/pull/17899#issuecomment-923007197', 'comment_created': datetime.datetime(2021, 9, 20, 15, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712254722, 'comment_body': ""I don't think this comparison function should throw. I don't really see why the getters should throw, either. If we need to make sure that the ipAddr is valid, we should do that when initializing it / in the `create` call etc.\r\n\r\nAdditionally I would expect that you need to implement also `==` and potentially `<`, `<=`, `>`, and `>=`."", 'comment_created': datetime.datetime(2021, 9, 20, 15, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712256504, 'comment_body': 'You need to create a local temporary fd here so that the last argument to qio_get_fd is local. ', 'comment_created': datetime.datetime(2021, 9, 20, 15, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712257812, 'comment_body': 'If the `tcpConn` is on a different locale, this function will fail, because the file descriptor will not be know to the system on the other locale. I think you need to include an `on` statement here.', 'comment_created': datetime.datetime(2021, 9, 20, 15, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712258020, 'comment_body': 'How about `==` as well?', 'comment_created': datetime.datetime(2021, 9, 20, 15, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712260773, 'comment_body': ""This one seems odd to me. As far as I can tell, the POSIX standard doesn't say anything about what type `pthread_t` should be. It could be a struct. What happens if it is just `extern type pthread_t` ?"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712267845, 'comment_body': ""I would expect that simply returning is sufficient here, rather than calling `pthread_exit`. Do you know of a reason that is not the case?\r\n\r\nNote though that if you want to return an integer, you have to copy it in to a `c_void_ptr`, since you can't return a pointer to a local variable without causing memory errors. So I'd recommend writing it something like this:\r\n\r\n``` chapel\r\nvar retInt : c_intptr = 0;\r\nvar retAsPtr : c_void_ptr;\r\nc_memcpy(retAsPtr, retInt, sizeof(retAsPtr));\r\nreturn retAsPtr;\r\n```\r\n\r\nYou can use a similar `c_memcpy` approach to get the return value out, but it appears today that you do not use it. If you know you don't need a return value from the `dispatchLoop` here, let's just have it return `nil` instead of doing `pthread_exit` and remove the `ret_val` variable entirely."", 'comment_created': datetime.datetime(2021, 9, 20, 15, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712270000, 'comment_body': 'I would imagine that this would cause problems for other modules also wishing to use libevent. It seems like we would need a helper module for the libevent parts and that can manage calling `evthread_use_pthreads();` and `libevent_global_shutdown();`.\r\n', 'comment_created': datetime.datetime(2021, 9, 20, 15, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712271249, 'comment_body': 'Somewhere, we need a description of what the implementation is doing with libevent at a high level. It could be here in a comment (that is not part of the docs) or it could be in the PR message itself.', 'comment_created': datetime.datetime(2021, 9, 20, 15, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712272178, 'comment_body': 'add a comma --\r\n\r\n`if error is not about blocking, throw error`', 'comment_created': datetime.datetime(2021, 9, 20, 15, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712274316, 'comment_body': ""Let's write this with a loop so that the structure is easier to see & so the stack memory usage does not grow with more attempts"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712275705, 'comment_body': ""It seems really weird that this can throw. Can you describe the situation a user would write that would cause it to throw? If it is not possible for a user to run in to it, we don't need this to throw."", 'comment_created': datetime.datetime(2021, 9, 20, 15, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712276870, 'comment_body': 'How about `==` ? Also, it seems odd that this uses `in` intent. I think the default intent would be more appropriate here (and for a record such as tcpListener it is `const ref`).', 'comment_created': datetime.datetime(2021, 9, 20, 15, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712278594, 'comment_body': ""I would expect this to be `const` rather than `var`.\r\n\r\nAlso, see https://github.com/chapel-lang/chapel/blob/main/doc/rst/developer/bestPractices/StandardModuleStyle.rst#other-identifiers -- I would expect this variable to be named `backlogDefault` -- we don't use the underscore naming style in standard modules."", 'comment_created': datetime.datetime(2021, 9, 20, 15, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712279622, 'comment_body': 'It seems that the documentation here should say something about how we are computing this default value, even if it does so in a vague way.', 'comment_created': datetime.datetime(2021, 9, 20, 15, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712281503, 'comment_body': 'Not sure what you mean by `tired` - maybe you meant a different word there?', 'comment_created': datetime.datetime(2021, 9, 20, 15, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712281929, 'comment_body': 'TCP is not a service name - maybe the example would be better with `""http""` for example?', 'comment_created': datetime.datetime(2021, 9, 20, 15, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712283340, 'comment_body': ""the DNS lookup might itself take a long time and I would expect that to be subject to `timeout`. However, I don't know how to implement that. Can libevent do DNS lookup as an event?\r\n"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712286153, 'comment_body': '-> ""Reads up to `bufferLen` bytes from the socket""\r\n\r\n(since the C call recvfrom returns *up* to the buffer length)', 'comment_created': datetime.datetime(2021, 9, 20, 15, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712286363, 'comment_body': ""Let's use a loop here, please"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712289012, 'comment_body': ""Let's write this with a loop please"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712289664, 'comment_body': 'The way it is written now it looks like it might send only some bytes but not all of the passed bytes.\r\nTo send all of the passed bytes I think you would have to have a loop that tries again if only say 1 byte is sent by the sendto call at a time.', 'comment_created': datetime.datetime(2021, 9, 20, 15, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712289885, 'comment_body': ""Let's add `==`"", 'comment_created': datetime.datetime(2021, 9, 20, 15, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712290941, 'comment_body': 'Can you show an example of a socket option that would need this?', 'comment_created': datetime.datetime(2021, 9, 20, 15, 42, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 712293671, 'comment_body': 'I am expecting these to be methods on tcpListener / tcpConn. E.g. here you can write `proc ref tcpListener.nagle(enable: bool = true)`. Arguably in the design https://github.com/chapel-lang/chapel/pull/17899/files#diff-21447e19620654704318fbb1fb753236379e4d6861085d3bb4de8b7a18830199R136 it was unclear if it is a method or not.\r\n\r\nAlso in the design doc it is `nagle` rather than `naggle`', 'comment_created': datetime.datetime(2021, 9, 20, 15, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 714547063, 'comment_body': 'Added the comment in design doc', 'comment_created': datetime.datetime(2021, 9, 23, 7, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 714706174, 'comment_body': 'Can you add a comment here as well please? (It could be inside of the function - it is just for maintainers to keep track)', 'comment_created': datetime.datetime(2021, 9, 23, 11, 33, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716153392, 'comment_body': 'I will make the change for it as it works even without `c_ulong`', 'comment_created': datetime.datetime(2021, 9, 26, 6, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716153583, 'comment_body': 'sounds right', 'comment_created': datetime.datetime(2021, 9, 26, 6, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716154107, 'comment_body': ""compiler won't allow me to have return statement inside of an `on` statement how should I handle that"", 'comment_created': datetime.datetime(2021, 9, 26, 6, 58, 30, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716154610, 'comment_body': ""I can add in a `try!` here because the `ipAddr` will set properly but my thoughts were let's say a user does something like\r\n```chapel\r\nvar addr1:ipAddr, addr2:ipAddr;\r\nwriteln(addr1 != addr2);\r\n```\r\nBasically, it will throw or halt (will it ?) if we use `try!` when the user uses an uninitialized `ipAddr` record."", 'comment_created': datetime.datetime(2021, 9, 26, 7, 2, 57, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716154801, 'comment_body': 'Will go with `nil` approach', 'comment_created': datetime.datetime(2021, 9, 26, 7, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716155036, 'comment_body': 'my reasons for using this are the same as https://github.com/chapel-lang/chapel/pull/17960#discussion_r716154610 when user will use an uninitialized `tcpListener`', 'comment_created': datetime.datetime(2021, 9, 26, 7, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716155368, 'comment_body': 'I was using the same operator as I did in `ipAddr` so will change it over here, but is `in` required for `ipAddr` too or not?', 'comment_created': datetime.datetime(2021, 9, 26, 7, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716155533, 'comment_body': 'It should be `tried`', 'comment_created': datetime.datetime(2021, 9, 26, 7, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716204173, 'comment_body': 'I am not sure what you mean by implementation', 'comment_created': datetime.datetime(2021, 9, 26, 13, 25, 30, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716204892, 'comment_body': 'we can have another function like `sendAll` which could do that because with udp we are working with packets instead of loads of data so if user wants to send large data they can use `sendAll`. ref: This is how python does it https://docs.python.org/3/library/socket.html#socket.socket.send', 'comment_created': datetime.datetime(2021, 9, 26, 13, 30, 27, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716205017, 'comment_body': 'python has three overloads for setSockOpt so i transferred all three of them https://docs.python.org/3/library/socket.html#socket.socket.setsockopt', 'comment_created': datetime.datetime(2021, 9, 26, 13, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716205433, 'comment_body': 'I seemed to have used method in place of procedure but yeah I will update them to be methods\r\n', 'comment_created': datetime.datetime(2021, 9, 26, 13, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 716718520, 'comment_body': 'You have to create a temporary variable, e.g.\r\n\r\n``` chpl\r\nproc myproc() {\r\n  var tmp: int;\r\n  on somewhere {\r\n    tmp = computeSomething();\r\n  }\r\n  return tmp;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 13, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716720544, 'comment_body': 'We can create a `ipAddr.init()` that default initializes the record with 0.0.0.0 e.g. so that these do not have to throw/halt in that case. IMO it will be better if the initializer guarantees that the ipAddr is valid enough for the getters not to throw, and then neither comparison nor comparison will throw.', 'comment_created': datetime.datetime(2021, 9, 27, 13, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716722615, 'comment_body': ""Like, can you make a comment that is a sort of road map / outline for this `Socket.chpl` file? I'm not so worried about outlining the different sections of implementation. I'd like it to describe how the Socket module is using libevent, at a high level. (The low level description can be the source code, but a high level view can be hard for someone reading the source code to get)."", 'comment_created': datetime.datetime(2021, 9, 27, 14, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716723487, 'comment_body': 'Right. So we can make a `tcpListener.init()` that creates an acceptable default and ensure that the necessary properties are there for any other `init` for tcpListener.', 'comment_created': datetime.datetime(2021, 9, 27, 14, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716724001, 'comment_body': ""I don't think it's required in either case and I think the default is better in both of these cases."", 'comment_created': datetime.datetime(2021, 9, 27, 14, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716725221, 'comment_body': ""Right. I'd support a `sendAll` and also a comment here along the lines of this from those Python docs\r\n\r\n>  Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data. For further information on this topic, ..."", 'comment_created': datetime.datetime(2021, 9, 27, 14, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716725927, 'comment_body': 'Sure. It would still be good to show an example that uses it in the docs.', 'comment_created': datetime.datetime(2021, 9, 27, 14, 5, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716764519, 'comment_body': 'Not actually using a DNS name here - do you want to use `localhost` here for this test?', 'comment_created': datetime.datetime(2021, 9, 27, 14, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716765992, 'comment_body': ""I would expect that any time you are using `begin` that you also enclose the code in a `sync` block. For these tests, it would be reasonable to put a `sync` block around the test body. (I don't remember if the unit test infrastructure always adds `sync` blocks, though)."", 'comment_created': datetime.datetime(2021, 9, 27, 14, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716927376, 'comment_body': ""Your tcpListener also needs a `deinit` which probably should close the socket.\r\nIt's important to still have a `close` method since `close` can fail (because there is no way of getting the returned error out of a `deinit`)."", 'comment_created': datetime.datetime(2021, 9, 27, 18, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716928298, 'comment_body': 'This should be throwing and should consume the return code from sys_close and throw if it was not 0', 'comment_created': datetime.datetime(2021, 9, 27, 18, 9, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 716929457, 'comment_body': ""As with tcpListener, this record also needs a `deinit` which probably should close the socket.\r\nIt's important to still have a `close` method since `close` can fail (because there is no way of getting the returned error out of a `deinit`)."", 'comment_created': datetime.datetime(2021, 9, 27, 18, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 717031509, 'comment_body': 'In python they have capibility of writing c structs as bytestrings so if we have it in chapel then only this procedure will be useful for us', 'comment_created': datetime.datetime(2021, 9, 27, 20, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 717061943, 'comment_body': ""Sure. But can you show an example for a setsockopt call that would use such a C structure that's more complex than an int or pointer?"", 'comment_created': datetime.datetime(2021, 9, 27, 21, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 723503436, 'comment_body': ""For this I think we don't actually need `sync` because the calls made in main thread are blocking and rely on `begin` block so it will not proceed further without completing which might be a good test as well because we don't want to proceed (similar to sync)"", 'comment_created': datetime.datetime(2021, 10, 6, 16, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 723575210, 'comment_body': 'Sure. But my concern is - what if something goes wrong? If we want to check that something in one task happen before something in another task, we can check that (e.g. with an atomic variable). But if something goes wrong and the blocking does not occur, will the test core-dump or more generally encounter undefined behavior?', 'comment_created': datetime.datetime(2021, 10, 6, 18, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 728452351, 'comment_body': 'Marked as future work', 'comment_created': datetime.datetime(2021, 10, 13, 21, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 728452713, 'comment_body': 'marked as future work', 'comment_created': datetime.datetime(2021, 10, 13, 21, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 728453502, 'comment_body': '@mppf how can we do this in chapel am not sure about that `for a way to encode C structures as bytestrings` or should we just make the user pass in a `c_void_ptr` instead of `bytes`', 'comment_created': datetime.datetime(2021, 10, 13, 21, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 730138543, 'comment_body': ""@king-11 you don't have to be able to show the example in Chapel. I am just interested in an example of when this overload would be used, even if it would be hard or awkward to use in Chapel today. I.e. can you name a setsockopt call that uses such a struct encoded as bytes? That we can learn more about with the C documentation?"", 'comment_created': datetime.datetime(2021, 10, 15, 21, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 730213705, 'comment_body': '@mppf as per the `setsockopt` there are three options that need to use C structs:\n\n- **SO_LINGER** uses `linger` struct\n- **SO_RCVTIMEO** uses `timeval` struct\n- **SO_SNDTIMEO** uses `timeval` struct\n\nI think python just encodes them as bytes and then makes the C call. My thought is we can do the same for it to be an overload for both structs. Otherwise will need to use void pointers.\n\nReference: [Docs](https://pubs.opengroup.org/onlinepubs/000095399/functions/setsockopt.html#:~:text=The%20setsockopt()%20function%20provides,or%20permit%20socket%20data%20broadcasts.)', 'comment_created': datetime.datetime(2021, 10, 16, 5, 19, 42, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 730231898, 'comment_body': 'Marking as future work because we can then integrate libevent into runtime as well while tranferring it to a separate module.', 'comment_created': datetime.datetime(2021, 10, 16, 8, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 730939104, 'comment_body': 'Sure. Can you just mention these specifically in the docs comment? E.g.\r\n\r\n```\r\n  Overload for :proc:`setSockOpt` that allows setting a :mod:`bytes <Bytes>` value\r\n  on socket option.\r\n  This is useful for `setsockopt` calls that work with a C struct, including `SO_LINGER`, `SO_RCVTIMEO`, and `SO_SNDTIMEO`.\r\n  It is up to the caller to ensure that the\r\n  `value` which is a :type::mod:`bytes <Bytes>` parameter contains the proper bits.', 'comment_created': datetime.datetime(2021, 10, 18, 13, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 732928446, 'comment_body': '""the sockets"" -> ""them""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 0, 24, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732930545, 'comment_body': '""refer to""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732933688, 'comment_body': '""my"" -> ""by""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732937053, 'comment_body': ""I don't understand what this example is highlighting. We can see all this in the method signature already?"", 'comment_created': datetime.datetime(2021, 10, 20, 16, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732937969, 'comment_body': 'Could you break long lines (comment and the method signature) to fit into 80 columns?', 'comment_created': datetime.datetime(2021, 10, 20, 16, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732939028, 'comment_body': 'I may be missing something as, again, this ""equivalence"" is just too obvious, and I don\'t know what we\'re learning from it.\r\n\r\nDo you maybe mean these to be examples? That might make more sense, but even with that I don\'t think it adds much here.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732942393, 'comment_body': '""provided"". Same in the above.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732945539, 'comment_body': 'Note that these get rendered in docs as well. (I recommend running `make docs` and viewing docs). So, for the comparison operators, either:\r\n\r\n1. `no doc` them, but put in the header documentation that `ipAddr` supports `==` and `!=`.\r\n2. Put proper sentences in the documentation.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 20, 56, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732948225, 'comment_body': 'Probably `no doc` this.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732948660, 'comment_body': '""The type returned from...""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732949341, 'comment_body': 'remove full stops in this and similar entries that are not proper sentences', 'comment_created': datetime.datetime(2021, 10, 20, 16, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732949663, 'comment_body': 'Drop ""returns"" and "".""', 'comment_created': datetime.datetime(2021, 10, 20, 16, 25, 50, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732950755, 'comment_body': 'Why `const ref`? (Especially because what you return is just an integer)', 'comment_created': datetime.datetime(2021, 10, 20, 16, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732951390, 'comment_body': 'Why `const ref`? (Especially b/c what you return is a local variable)', 'comment_created': datetime.datetime(2021, 10, 20, 16, 27, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732952586, 'comment_body': 'Note that everything (except for `private`s) starting here up to `tcpListener` is rendered in the docs with no text. Either `no doc` them, or put proper documentations.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732953272, 'comment_body': 'break long lines, please.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732959428, 'comment_body': ""I am a bit worried about standalone code in the module level and their maintainability. I am realizing that we don't have module initializers (but we do have deinitializers), but I wonder whether code like this can be put together somewhere in the module definition (very beginning or very end or together right before `deinit`??)"", 'comment_created': datetime.datetime(2021, 10, 20, 16, 37, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 732962809, 'comment_body': 'Could you show how `server` is defined here, as well? I feel like this is a key usage of this module, but the example is not sufficient.', 'comment_created': datetime.datetime(2021, 10, 20, 16, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733021328, 'comment_body': 'Should this `while` yield the pthread between iterations?', 'comment_created': datetime.datetime(2021, 10, 20, 17, 59, 54, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733021985, 'comment_body': 'no doc this and the below?', 'comment_created': datetime.datetime(2021, 10, 20, 18, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733022095, 'comment_body': '`no doc`', 'comment_created': datetime.datetime(2021, 10, 20, 18, 0, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733023016, 'comment_body': 'Is this something that can change? Or be changed by the user?\r\n\r\nConsider making it a `const` and/or `no doc`.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 2, 15, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733023143, 'comment_body': '""calculated""', 'comment_created': datetime.datetime(2021, 10, 20, 18, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733026271, 'comment_body': 'It could help throwing some empty lines between logical parts of the code. But nonetheless, this if/else is just\r\n\r\n```chapel\r\nerr_out = event_add(writerEvent,\r\n                    if timeout.tv_sec==-1 then nil else c_ptrTo(timeout));\r\n```', 'comment_created': datetime.datetime(2021, 10, 20, 18, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733028973, 'comment_body': 'same question as above, should we be worried about yielding here?', 'comment_created': datetime.datetime(2021, 10, 20, 18, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733030116, 'comment_body': 'Should we allow `real`s as timeouts?', 'comment_created': datetime.datetime(2021, 10, 20, 18, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733030826, 'comment_body': 'This function can really use some vertical spacing.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733031302, 'comment_body': 'another `if/else` that can be done in a more lightweight manner.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733031674, 'comment_body': 'Similar, `no doc` or document and/or mention the support for comparison in a header comment.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733032869, 'comment_body': ""For all these 3 overloads, I think a better way is to `no doc` the 2nd and 3rd ones, make the 1st one's argument generic, add a `where` clause to it to type-check, change its documentation to say that it accepts 3 different types."", 'comment_created': datetime.datetime(2021, 10, 20, 18, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733051872, 'comment_body': ""I see that this overloads go on and on a bit more. I think we should think about reducing this number. To be clear, I talk about the documentation, I don't mind about the number of overloads in code."", 'comment_created': datetime.datetime(2021, 10, 20, 18, 42, 58, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733052316, 'comment_body': 'If we make any changes to `setSockOpt`, we should make symmetric changes to `getSockOpt`', 'comment_created': datetime.datetime(2021, 10, 20, 18, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733053124, 'comment_body': 'This might have been discussed elsewhere, but why not `getPeerName`?', 'comment_created': datetime.datetime(2021, 10, 20, 18, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733053523, 'comment_body': 'Same. Especially considering that we have `getSockOpt`, `getsockname` feels really wrong to me.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 45, 29, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733054116, 'comment_body': 'Same issue: multiple overloads with trivial differences in the documentation.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 733055375, 'comment_body': 'These methods are too far from the types that they are on. Why? Same goes for setDelayAck below.', 'comment_created': datetime.datetime(2021, 10, 20, 18, 48, 17, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 739753985, 'comment_body': 'Yeah I think this example seems redundant. Will remove it', 'comment_created': datetime.datetime(2021, 10, 31, 4, 1, 48, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739754196, 'comment_body': 'Going with 1st option and adding details in the doc comment for `ipAddr`', 'comment_created': datetime.datetime(2021, 10, 31, 4, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739754773, 'comment_body': 'No, the yielding is being handled by call to `localSync$.readFE()`', 'comment_created': datetime.datetime(2021, 10, 31, 4, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739754991, 'comment_body': 'The function call in `readFE()` which yields the thread and that will yield and only return when the running event loop passes down an event to the `sync` variable or a timeout occurs which is also passed down by the event loop to `sync` variable.', 'comment_created': datetime.datetime(2021, 10, 31, 4, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739755105, 'comment_body': 'I think a structure holding these values is a bit more intuitive otherwise both at user and library level we need to do trivial tranformation for getting `seconds` and `microseconds` out of the real value.', 'comment_created': datetime.datetime(2021, 10, 31, 4, 18, 35, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 739755325, 'comment_body': 'Earlier they were separate function the idea was to keep the documentation about Naggle optimization at one place only and keeping them at separate places will require us to add documentation at all three places(?) or we can reference the documentation for Naggle in other two 🤔 ', 'comment_created': datetime.datetime(2021, 10, 31, 4, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 740381547, 'comment_body': 'this calls in the method on `sockaddr_storage` which is a const ref', 'comment_created': datetime.datetime(2021, 11, 1, 17, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 740407842, 'comment_body': 'I will put the code at the end of module definition but a future work for this module includes shifting all the libevent code into a separate module of its own.', 'comment_created': datetime.datetime(2021, 11, 1, 17, 46, 39, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 740431645, 'comment_body': ""Hmm, I don't know anything about this optimization, and it may make sense if there's such a context. I'll leave the call to you and @mppf"", 'comment_created': datetime.datetime(2021, 11, 1, 18, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 740432666, 'comment_body': 'I am not following.', 'comment_created': datetime.datetime(2021, 11, 1, 18, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 740433150, 'comment_body': 'Ah, right.', 'comment_created': datetime.datetime(2021, 11, 1, 18, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 740433965, 'comment_body': ""I didn't do a lot of socket programming but:\r\n\r\n> I think a structure holding these values is a bit more intuitive\r\n\r\nI disagree with this very strongly :)"", 'comment_created': datetime.datetime(2021, 11, 1, 18, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 740440696, 'comment_body': ""@e-kayrakli - in an offline conversation I had with @king-11 it's my understanding that he's going to look at providing support for both these structures as well as `real` to represent time in seconds."", 'comment_created': datetime.datetime(2021, 11, 1, 18, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 740441444, 'comment_body': 'I think it makes sense to have the methods on tcpConn appear in one place in the documentation. We can create a section on Nagle in the module-level docs comment to refer to from these.', 'comment_created': datetime.datetime(2021, 11, 1, 18, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 740625110, 'comment_body': ""In case I wasn't clear; I have no problem with the current signature, especially if it is following some sort of precedence and/or have other motivations. I was just suggesting of adding a `real` version alongside this one (which what you're saying)."", 'comment_created': datetime.datetime(2021, 11, 1, 23, 35, 47, tzinfo=datetime.timezone.utc), 'commenter': 'e-kayrakli', 'type': 'User'}, {'comment_id': 745391432, 'comment_body': 'Internally it calls in `numericHost` and `port` which are defined in the `Sys` module and they are declared with const ref so this functions to call those requires const ref as well.', 'comment_created': datetime.datetime(2021, 11, 9, 8, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 745391508, 'comment_body': 'made the changes.', 'comment_created': datetime.datetime(2021, 11, 9, 8, 36, 50, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 745413245, 'comment_body': 'Oh alright I got it now this was same need not be const ref normal intent will work fine I was a bit confused with `sockaddr_storage` and this', 'comment_created': datetime.datetime(2021, 11, 9, 9, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 748892348, 'comment_body': 'Normally we use pkg-config for such things', 'comment_created': datetime.datetime(2021, 11, 14, 18, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 748892508, 'comment_body': ""Also ldconfig -v and pkg-config won't exist on all systems, so you have to fail gracefully in that event"", 'comment_created': datetime.datetime(2021, 11, 14, 18, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 748892563, 'comment_body': 'See test/library/packages/Crypto.skipif for an example', 'comment_created': datetime.datetime(2021, 11, 14, 18, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 748892651, 'comment_body': ""We need to skip if CHPL_TASKS != qthreads, right? This script needs to return True if the tests should be skipped and it doesn't look like it's doing that. Maybe it is reversed."", 'comment_created': datetime.datetime(2021, 11, 14, 18, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mppf', 'type': 'User'}, {'comment_id': 749964101, 'comment_body': 'Yep made changes\r\n', 'comment_created': datetime.datetime(2021, 11, 16, 7, 14, 59, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}, {'comment_id': 753852876, 'comment_body': ""@mppf I made a local dev env with Ubuntu and tried to work out the issue that I observed in VM. \r\n\r\nIt turns out this is a pretty flaky error and is not caused by `sent_http` it's by `send_number`. This was something I observed earlier too but I thought was resolved at that time. So if you run the test 4/5 times it might run perfectly through all or will be hangup randomly at some iteration.\r\n\r\nThe thing that is intriguing is if I remove the `recv_number` test everything works fine without hanging even if you run it 1k times. Also, I remember now I kept `send_number` after `recv_number` because that is when it hangs, if we keep `send_number` before `recv_number` it won't hang in that case too."", 'comment_created': datetime.datetime(2021, 11, 21, 20, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'king-11', 'type': 'User'}]","[{'commit_sha': 'b802b319b9baed9b0c8e5ee8e19798799b818424', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e246f2e1d06c8b2f449274174f03133e4068372', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e55e7c8e9ae21439ceca7b898df9c4adedbe9448', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c3a8610883c452c5f4b420055009231a374e04e', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '148c65ff4e285b6d503b8ccd23741b7760baaba9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe5495f4702ed03b0f7b69c6de288b3813e088b3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25c6d5f854328d0cb52e17df6b7cbfbae274e0f3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efa3ca915419cb9fa161c604304ae0f19cb486f8', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e1fb931e5192532e854349b684800a87a38bba5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fdfd9b10d0bc14f706fd15efeeaf8d94961ab42', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57f256a1cd447cf0a4d2fb80d8d24e494ce1a51a', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a21c08f53b1b9b0eb88990183c1e7361c1dd7a5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22a4b7940dc6dfd3e117ae086c61f07eea985cda', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de76af54ea9dda20aca7f74b79d055b036e09cbd', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b3dfcb01e5ec671e75725e7e663fb488da712b6', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfccc673d1d30b31e0ab2f246c1d30403a10e467', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cae11b558c3065ed2ab4f3a23d1787ee724cfa18', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58d9d5975403992b47316d32a3858595f1d8941f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2fb1dcfae28f6635144eb5a81e60bfccb89f35f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af436c8dd74af61b17bc73738f42cde4d617476e', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc9f18c07293c3d9e55fb59df872cb099630f04', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49e0a8184192c87832ec7c41dbdf32a1da4c1062', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed58323a3ab7b6aa34d87ab3e692ef409fccfee0', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73ff7d5f5ab1fa5ef5dfa7816888351e233b4bdc', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '673e8ebc029aa69f245a59cfe7e2420707ecb7d3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41217c0ee5c050fee649d74405e0b1b8edd6467b', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e8cac8dfcfe2352e72f4f79effda39f8a760b98', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fecd420fb87cc8ce377c6fa756bd221f8bc3199', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b18666d4d708ba9a688398a1657f5f53d2a3a9de', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b1026a34eb2eec7276f8c36af2733079c9f1c6b', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca22abc15bdf084bef218dce1a7182a1aed28ebd', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94b47080d9df2b1f04b17d0dfabd3dac895410a3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b9ca705d9ce89ff754f4fbe250ea40df526d5d1', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e1a87cb4f379e3ec297d918b78e27bcd4d09fc3', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c544746ebfb0f84050f8b31b0bc39d986a1c678c', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19dfb2a1e3c4b33f96668b55ffafa095c993f0ba', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33968de07f230810ce77b7668acb90ce2b9f0208', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9494909c91c5d42fe1c5a6496240d914786a8d1', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0379a9e2cdcf5041a4b6257aef21c68771122f0', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46c96c86e08ad073b4db3e948b33bb9f974ce02f', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ee81e96a9221bdcf7a239b64f2a87422415b190', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de79cc8132e6777b59dda8c8539f7b1e3e1aad5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39d5e9499a20cbe89e35dd2efb09e4d74670a4f9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '053907321cd55cc8749492e6d1f4c7bf3318d497', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f42722c162137a6c4990906fe55df2c458dec5c5', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef524cc03150c1139d1418a6d5cc61e8643567ed', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f382d49d367c23add859894add1127f9306b81b8', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76aa555fc8f15fffd229109999a3eb0445fecda9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0dda61f510fe7ce0e91272092f77098bba70b965', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd3dbbcff2fcac81d0005db46700927ab7b9f7f9', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7a5e6e611c0ff5404bb61d2d757ae1c578609aa', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b5545caeedb36fe36567ede6d67a33f4575b2e', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd02ec8adc8222b86ce327450bf5ef3a37b0180f4', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f794f4a1272ed16af421c849cf5ce76bfdc65207', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2736074840a05d74bc43fe590a97bda638eba477', 'committer_username': 'king-11', 'committer_name': 'Lakshya Singh', 'committer_email': 'lakshay.singh1108@gmail.com', 'commit_date': datetime.datetime(2019, 6, 21, 4, 42, 12, tzinfo=datetime.timezone.utc)}]",Lakshya Singh,52061363,lakshay.singh1108@gmail.com,User,,121,,58,253

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
21663285,chapel,chapel-lang/chapel,Chapel,415,1764,63,280,102324,2812,46,105,"[{'id': 727181128, 'number': 18345, 'closed': datetime.datetime(2021, 9, 8, 0, 43, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 4, 5, 12, 52, tzinfo=datetime.timezone.utc), 'time_taken': 329409.0, 'time_delta': '3 days, 19:30:09', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 691527576, 'number': 18072, 'closed': datetime.datetime(2021, 7, 19, 16, 47, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 14, 19, 31, tzinfo=datetime.timezone.utc), 'time_taken': 268051.0, 'time_delta': '3 days, 2:27:31', 'additions': 11, 'deletions': 9, 'state': 'closed'}, {'id': 681563923, 'number': 18019, 'closed': datetime.datetime(2021, 8, 4, 16, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 1, 7, 25, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2970601.0, 'time_delta': '34 days, 9:10:01', 'additions': 57, 'deletions': 35, 'state': 'closed'}, {'id': 678344348, 'number': 17988, 'closed': datetime.datetime(2021, 7, 12, 16, 27, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 26, 14, 27, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1389607.0, 'time_delta': '16 days, 2:00:07', 'additions': 36, 'deletions': 24, 'state': 'closed'}, {'id': 675305473, 'number': 17960, 'closed': datetime.datetime(2022, 1, 13, 15, 8, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 22, 10, 51, 7, tzinfo=datetime.timezone.utc), 'time_taken': 17727466.0, 'time_delta': '205 days, 4:17:46', 'additions': 2255, 'deletions': 8, 'state': 'closed'}, {'id': 673906542, 'number': 17953, 'closed': datetime.datetime(2021, 9, 11, 16, 51, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 16, 54, 10, tzinfo=datetime.timezone.utc), 'time_taken': 7257457.0, 'time_delta': '83 days, 23:57:37', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 672890985, 'number': 17932, 'closed': datetime.datetime(2021, 7, 7, 16, 23, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 18, 34, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1720115.0, 'time_delta': '19 days, 21:48:35', 'additions': 327, 'deletions': 22, 'state': 'closed'}, {'id': 666888743, 'number': 17899, 'closed': datetime.datetime(2022, 1, 13, 21, 2, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 13, 23, 24, tzinfo=datetime.timezone.utc), 'time_taken': 18776357.0, 'time_delta': '217 days, 7:39:17', 'additions': 233, 'deletions': 0, 'state': 'closed'}, {'id': 613043869, 'number': 17559, 'closed': datetime.datetime(2021, 5, 10, 17, 3, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 11, 9, 52, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2531468.0, 'time_delta': '29 days, 7:11:08', 'additions': 51, 'deletions': 1, 'state': 'closed'}, {'id': 599502749, 'number': 17453, 'closed': datetime.datetime(2021, 4, 28, 1, 5, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 8, 54, 11, tzinfo=datetime.timezone.utc), 'time_taken': 2995895.0, 'time_delta': '34 days, 16:11:35', 'additions': 745, 'deletions': 30, 'state': 'closed'}, {'id': 597217295, 'number': 17443, 'closed': datetime.datetime(2021, 3, 26, 18, 8, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 20, 5, 37, 45, tzinfo=datetime.timezone.utc), 'time_taken': 563421.0, 'time_delta': '6 days, 12:30:21', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 591420147, 'number': 17395, 'closed': datetime.datetime(2021, 3, 29, 15, 33, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 12, 6, 51, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1500082.0, 'time_delta': '17 days, 8:41:22', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 589221082, 'number': 17388, 'closed': datetime.datetime(2021, 4, 5, 17, 5, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 10, 7, 49, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2279797.0, 'time_delta': '26 days, 9:16:37', 'additions': 221, 'deletions': 0, 'state': 'closed'}, {'id': 581343790, 'number': 17293, 'closed': datetime.datetime(2021, 5, 24, 18, 54, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 27, 14, 58, 6, tzinfo=datetime.timezone.utc), 'time_taken': 7444585.0, 'time_delta': '86 days, 3:56:25', 'additions': 76, 'deletions': 58, 'state': 'closed'}]"
