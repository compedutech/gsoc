pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
670534381,Dds prototype,"Hello Ardupilot community!
This PR is work in progress and consists of the prototype code that aims to provide DDS functionality to Ardupilot for effective communication with ROS2 and Native DDS implementations

Added 2 IDL files

- A simple Num idl to test the xrce dds functionality
- AP_INS idl file for sending INS info

Added the eProsima XRCE Client lib as submodule
Provides Ardupilot an XRCE client to communicate with DDS/ROS2 through :
 Serial(Main focus)
 UDP(Only for testing,to be removed in final version)

Current Issues

- [x] Have tested the code through serial communication and sometimes it is found that data is not properly flushed out in the serial ports resulting in communication to XRCE agent being cut.Working on implementing a function to take care of this issue.
- [x] Have doubts related to setting up the build system to install the XRCE Client from the necessary submodules   

Thanks !",True,17779,https://api.github.com/repos/ArduPilot/ardupilot/pulls/17779,https://github.com/ArduPilot/ardupilot/pull/17779,closed,1375,1,35,12,40,74,3,0,"[{'name': 'ROS'}, {'name': 'GSoC'}, {'name': 'For-4.5'}]",2021-06-15 15:53:25+00:00,2023-03-21 22:22:37+00:00,55664952.0,"644 days, 6:29:12","[{'comment_id': 651935012, 'comment_body': ""This should probably be moved into the library folder. I don't think this part is vehicle specific correct?"", 'comment_created': datetime.datetime(2021, 6, 15, 16, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jmachuca77', 'type': 'User'}, {'comment_id': 651937173, 'comment_body': 'Okay will do so', 'comment_created': datetime.datetime(2021, 6, 15, 16, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 651983919, 'comment_body': 'You should get a serial object from the hal that way you ensure that the port is configured correctly', 'comment_created': datetime.datetime(2021, 6, 15, 17, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 652762599, 'comment_body': 'Also this should be made available on other serial ports as well... maybe check how other libraries are implemented and the parameter system that sets them up.\r\nhttps://github.com/ArduPilot/ardupilot/blob/3386cbb0dfece31d0acffdcb2147abd7df2643c6/libraries/AP_SerialManager/AP_SerialManager.cpp#L412\r\n', 'comment_created': datetime.datetime(2021, 6, 16, 14, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jmachuca77', 'type': 'User'}, {'comment_id': 653223115, 'comment_body': ""You probably shouldn't have any changes within the Copter directory as ROS is applicable on any vehicle.\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653223621, 'comment_body': 'Both of these names are way too generic.\r\n```suggestion\r\nvoid Copter::init_xrce_client()\r\n```', 'comment_created': datetime.datetime(2021, 6, 17, 4, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224042, 'comment_body': 'Use the `AP::ins()` singleton if you need inertial data.\r\n\r\nWithout parameters you should be able to use `SCHED_TASK_CLASS` to call `updateINSTopic`\r\n\r\n`client` is obviously also way too generic a member name.\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224220, 'comment_body': 'This casting-to-void is a bit of a red flag for me.  If it is warranted then it deserves a comment.\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224548, 'comment_body': 'Any reason you need a `typedef`?\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224676, 'comment_body': 'We will *always* we compiling this with C++ :-)\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224939, 'comment_body': 'Not happy having this duplicated in two places....\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653225582, 'comment_body': ""This is non-sensical - why would you turn a perfectly good reference into a pointer?\r\n\r\nReally not sure why the AHRS sem is relevant here - presumably you'll have others relevant so re-using the AHRS sem seems odd.\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653225865, 'comment_body': '```suggestion\r\n    if (use_serial) {\r\n        fd = open(""/dev/ttyUSB1"", O_RDWR | O_NOCTTY | O_NONBLOCK);\r\n```\r\n\r\n(as @jmachuca77 says, use the serial manager instead; you can still use a real serial device easily enough)\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653226159, 'comment_body': 'We do not want to support UDP with this at this time - simplify the PR by always assuming `use_serial`\r\n\r\nAlso... dispense with `this->` in member functions.\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653226606, 'comment_body': 'taking-with-timeout is almost *always* something you do not want to do.\r\n\r\nAlso, usually you want to be doing `WITH_SEMAPHORE(_csem)`\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653227170, 'comment_body': 'Avoid indenting\r\n\r\n```suggestion\r\n    if(!_csem->take(5)){\r\n        return;\r\n    }\r\n   if(!this->connected)\r\n       return;\r\n   }\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653227372, 'comment_body': '```suggestion\r\n    uxrObjectId dwriter_id;\r\n    uint16_t dwriter_req;\r\n```\r\n\r\nand everywhere else\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653251123, 'comment_body': 'You should see this as the mavlink xml, it is the definition to generate the AP_INS.cpp code that is auto generated', 'comment_created': datetime.datetime(2021, 6, 17, 6, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 669597559, 'comment_body': 'The suggested changes have been sir.Please take a look', 'comment_created': datetime.datetime(2021, 7, 14, 13, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 669597911, 'comment_body': 'Changes have been applied', 'comment_created': datetime.datetime(2021, 7, 14, 13, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 669598160, 'comment_body': 'Changes have been applied', 'comment_created': datetime.datetime(2021, 7, 14, 13, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 669620910, 'comment_body': 'Sir the idl files come in handy while developing the xrce dds code so was planning to keep them only for the development phase..will remove them later on in development', 'comment_created': datetime.datetime(2021, 7, 14, 13, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 1112508051, 'comment_body': ""It looks like the examples in the XRCE-DDS also do this by some poor convention even though there is a perfectly good return code to consume and pass up to the application. After stripping down this implementation, I'll make sure the error codes get passed up. \r\n\r\nQuick question - Is C++17, specifically  `[[nodiscard]]` allowed here? "", 'comment_created': datetime.datetime(2023, 2, 21, 3, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1112509715, 'comment_body': ""@peterbarker You had mentioned to limit the scope of this to serial only. One thing I am wondering is whether this should be called ROS2, or more appropriately name it based on the protocol, which would be `SerialProtocol_DDS_XRCE` to match the official OMG standard? ROS2 is not a protocol, it's a framework.  \r\nhttps://www.omg.org/spec/DDS-XRCE/"", 'comment_created': datetime.datetime(2023, 2, 21, 4, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1117168186, 'comment_body': 'I renamed in in e67d89521df982fb668f14a72f3d794a1fd69dfe', 'comment_created': datetime.datetime(2023, 2, 24, 15, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1117182004, 'comment_body': 'I can submit a PR upstream - this serialization function is actually adapted from the generated code from MicroXRCEDDSGen. I agree, we should not discard write issues. \r\n\r\n- [x] Submit PR upstream to not void cast\r\n- [ ] Add submodule for fastddgen\r\n- [ ] Remove manually written serialization instead with autogenerated files using waf', 'comment_created': datetime.datetime(2023, 2, 24, 15, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1118167974, 'comment_body': 'https://github.com/eProsima/Micro-XRCE-DDS-Gen/issues/45\r\nCreated issue and submitted PR. ', 'comment_created': datetime.datetime(2023, 2, 26, 22, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1120381361, 'comment_body': 'Why does ardupilot care about the specific source structure of Micro-XRCE-DDS-Client? Can we have Waf connected to their CMakeLists and just link to their build libraries or cmake targets? \r\n\r\nIf EProsima re-organizes folder structure, it breaks our build. \r\nIf they change implementation file extensions to cpp, it breaks out build. \r\nIf they add more files in another folder that need to be compiled but are private implementations, it breaks our build. ', 'comment_created': datetime.datetime(2023, 2, 28, 16, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1120384044, 'comment_body': ""Can we consume cmake target's PUBLIC_HEADER property rather than redo it here? "", 'comment_created': datetime.datetime(2023, 2, 28, 16, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1120388865, 'comment_body': 'Can be more specific to say \r\n""Enable support of DDS XRCE protocol during compilation""', 'comment_created': datetime.datetime(2023, 2, 28, 16, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133365575, 'comment_body': ""do we need the Micro-CDR submodule? I know we may use it in the future, but I don't think we need it now, or have I missed a dependency?"", 'comment_created': datetime.datetime(2023, 3, 13, 1, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133366161, 'comment_body': 'please make the addition of black a separate PR, same with xmllint', 'comment_created': datetime.datetime(2023, 3, 13, 1, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133366437, 'comment_body': ""I don't see where XRCE_DEPENDENCIES is being set? I think this may be a leftover from an earlier version of the PR"", 'comment_created': datetime.datetime(2023, 3, 13, 1, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133366956, 'comment_body': 'i think we can remove some of these debug messages now', 'comment_created': datetime.datetime(2023, 3, 13, 1, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133367475, 'comment_body': 'what are all the nodiscards here for (and in AP_Vehicle). Why would we want to keep unused symbols?', 'comment_created': datetime.datetime(2023, 3, 13, 1, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133368136, 'comment_body': 'why is update_topic not in the class?\r\nmaybe it should be a member of AP_DDS_Client::Topic_table, so we loop calling update_topic method on each of the topic table entries?', 'comment_created': datetime.datetime(2023, 3, 13, 1, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133369027, 'comment_body': 'i think this should use a DDS_ parameter prefix', 'comment_created': datetime.datetime(2023, 3, 13, 1, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133369162, 'comment_body': 'as noted above, why nodiscard?', 'comment_created': datetime.datetime(2023, 3, 13, 1, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133369484, 'comment_body': 'variable should be dds_client, not xrce_client\r\n', 'comment_created': datetime.datetime(2023, 3, 13, 1, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133370578, 'comment_body': ""It is used; it's enforced by the compiler to be used. Throwing away the result of init() and ignoring it would be bad. "", 'comment_created': datetime.datetime(2023, 3, 13, 1, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133370900, 'comment_body': 'Done 361686e332dd36232b7c313185d2669f2d6af3dd\r\n', 'comment_created': datetime.datetime(2023, 3, 13, 1, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133373354, 'comment_body': 'I tried removing it and got a billion linker errors. We have includes for `#include ""ucdr/microcdr.h""` in `AP_DDS_Client`. That said, this might because we aren\'t building the micro XRCE Client correctly, since microcdr is a dependency there. \r\n\r\nSo, I think we do need it to avoid linker errros, but whatever we\'re doing in waf right now by not calling micro xrce dds client\'s build system and instead building manually from source seems a bit hacky. ', 'comment_created': datetime.datetime(2023, 3, 13, 1, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133375168, 'comment_body': 'ahh, for some reason I thought this was a linker directive, looks like it is equivalent to WARN_IF_UNUSED in ArduPilot, which is __attribute__ ((warn_unused_result)) for GNUC.\r\nI wonder if [[nodiscard]] works with all our compilers?', 'comment_created': datetime.datetime(2023, 3, 13, 2, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133382149, 'comment_body': 'Done. I dumped them both into `add-black-formatter-for-ap-dds` and removed it from this PR. ', 'comment_created': datetime.datetime(2023, 3, 13, 2, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133382726, 'comment_body': 'Done 597edf87f44fafdd208fd336e6cf9104d044ad44\r\n\r\nOnly the error ones, and final success message exist. ', 'comment_created': datetime.datetime(2023, 3, 13, 2, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133382932, 'comment_body': 'Done in 361686e332dd36232b7c313185d2669f2d6af3dd', 'comment_created': datetime.datetime(2023, 3, 13, 2, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133382977, 'comment_body': 'See above. ', 'comment_created': datetime.datetime(2023, 3, 13, 2, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133383426, 'comment_body': ""It can be part of the class for sure, as a static member function. \r\n\r\nAs far as in the topic table, I'm not sure how much I want to build into that yet because the we might break the more than one updater per topic assumption soon with, for example, multi battery support. "", 'comment_created': datetime.datetime(2023, 3, 13, 2, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133385759, 'comment_body': ""If CI passes. What's the behavior if it's not implemented? It's ignored? \r\n\r\nIF so, that's fine. Because the other CI jobs will catch the unused return value. "", 'comment_created': datetime.datetime(2023, 3, 13, 2, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133390834, 'comment_body': ""I don't see either.Removed in `1c28f067a43cd1c9de4fcb81664c3514e6b4dbae`. Build is fine without it. "", 'comment_created': datetime.datetime(2023, 3, 13, 2, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133404297, 'comment_body': 'why this change? I think this is what is causing the CI error', 'comment_created': datetime.datetime(2023, 3, 13, 3, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133414019, 'comment_body': ""Reverted it in 7d025e82e693825435d9c342b5d776a8fa03f552, I'll watch CI to see what changes. "", 'comment_created': datetime.datetime(2023, 3, 13, 3, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133424020, 'comment_body': 'Good eye, I removed it in 7d025e82e693825435d9c342b5d776a8fa03f552. \r\n\r\nYou can see the resulting CI pass the build here. \r\nhttps://github.com/Ryanf55/ardupilot/actions/runs/4401148084\r\n\r\nResolved :sunglasses: ', 'comment_created': datetime.datetime(2023, 3, 13, 4, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133436511, 'comment_body': ""I'm realizing it's not in the class is because we were going to code generate it, but this is the one part that definately can't be generated because it's the bridge to the rest of the API. \r\n\r\nTLDR: It's in the class now, in commit 61099c35ac0dc135baa42d4179bbb0f6fedc58ac"", 'comment_created': datetime.datetime(2023, 3, 13, 4, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134845829, 'comment_body': 'Resolution is to use the macro already in the build system. ', 'comment_created': datetime.datetime(2023, 3, 14, 2, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134856502, 'comment_body': 'populate errcode to something sensible (is there an enum?)', 'comment_created': datetime.datetime(2023, 3, 14, 2, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1134940605, 'comment_body': ""Handled in df8e77bdbc6de6288d8c9d4e85979fe1c0ea5797. It's now marked as a Doxygen todo, and can be solved at a later date after have discussions with EProsima on weak pointers to the `uxr_*` functions we redefined. "", 'comment_created': datetime.datetime(2023, 3, 14, 4, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134944161, 'comment_body': 'Used the macro in a52db916f7f758c580cc10a69315f00273a0e960.\r\n', 'comment_created': datetime.datetime(2023, 3, 14, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134973540, 'comment_body': 'This is now part of our generator. Resolved. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974120, 'comment_body': 'Outdated yea. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974353, 'comment_body': ""It's being used now. "", 'comment_created': datetime.datetime(2023, 3, 14, 5, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974560, 'comment_body': 'Done and Done. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974882, 'comment_body': 'Done (already)', 'comment_created': datetime.datetime(2023, 3, 14, 5, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134975256, 'comment_body': 'Everything is formatted with `astyle` on the PR. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134975494, 'comment_body': 'Format is resolved with astyle', 'comment_created': datetime.datetime(2023, 3, 14, 5, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1136119901, 'comment_body': ""pre-commit changes I'd like to add at a later date:\r\n```\r\n# Use to check python style\r\n  -   repo: https://github.com/psf/black\r\n      rev: 23.1.0\r\n      hooks:\r\n        - id: black\r\n          files: libraries/AP_XRCE_Client/wscript\r\n\r\n  -   repo: https://github.com/lsst-ts/pre-commit-xmllint\r\n      rev: v1.0.0\r\n      hooks:\r\n        - id: format-xmllint\r\n          files: libraries/AP_XRCE_Client/dds_xrce_profile.xml\r\n```"", 'comment_created': datetime.datetime(2023, 3, 14, 19, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1141265570, 'comment_body': '```suggestion\r\n#include <AP_HAL/AP_HAL_Boards.h>\r\n```', 'comment_created': datetime.datetime(2023, 3, 19, 6, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1141265726, 'comment_body': 'Early return here rather than indent.  Possibly doing an internal error first?\r\n', 'comment_created': datetime.datetime(2023, 3, 19, 6, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1141265849, 'comment_body': 'Why not take a reference instead?!\r\n\r\n```suggestion\r\nvoid AP_DDS_Client::update_topic(builtin_interfaces_msg_Time& msg)\r\n```', 'comment_created': datetime.datetime(2023, 3, 19, 6, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1142765809, 'comment_body': '`update_topic` is called at a very high rate. Is it OK to do internal errors at that high rate? ', 'comment_created': datetime.datetime(2023, 3, 20, 23, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1142803013, 'comment_body': 'Done in fc514d56571d59e90a906fd36699ae0219e68973', 'comment_created': datetime.datetime(2023, 3, 21, 0, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1142803176, 'comment_body': ""Now that it's passed by reference, this is no longer an error condition. "", 'comment_created': datetime.datetime(2023, 3, 21, 0, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1142805118, 'comment_body': '```suggestion\r\n    msg = {\r\n        utc_usec / 1000000ULL,\r\n        (utc_usec % 1000000ULL) * 1000UL\r\n    };\r\n```\r\n\r\nJust a suggestion that you play with this.  It means the structure is fully initialised on return, and gives you some type-checking too.\r\n', 'comment_created': datetime.datetime(2023, 3, 21, 0, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1142812200, 'comment_body': ""It sadly loses the context of the first element being seconds and the second element being nanoseconds. Unless you could use C++20's [aggregate initialization that supports designated initializers]( https://en.cppreference.com/w/cpp/language/aggregate_initialization). Maybe there a way to get the best of both worlds 🔍"", 'comment_created': datetime.datetime(2023, 3, 21, 1, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '414670a977c45706a0ef491ef147cf3e152c231e', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c96f64b7b9239242778e8757a17fb40e9ccb782f', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc4d9e6ba28c75dc7b03a69d10dbb5eb2e4d1e85', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e53fa9c5612e1cb47797fd63f240444b455fd4', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53d6c91e83b787f3bbfeb666833473569740dbb', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d129bdfdc91c1299479895413bfc5418432b1b0', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbe5e779146b3248c124f26987c864aa4bef68b', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4232b687dfb98843929018c861d516feff81601', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5123d771aaff927aaace7ff0182b0558112821a5', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f586ad5d5b66568e80ed083981e3ad0cc58537fd', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc194dd678c45d075957eff5ea2b2a1f5515573', 'committer_username': 'khancyr', 'committer_name': 'Pierre Kancir', 'committer_email': None, 'commit_date': datetime.datetime(2011, 4, 2, 12, 40, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e87f3a7953c7792aa483ef9a67a0d913b169b9', 'committer_username': 'khancyr', 'committer_name': 'Pierre Kancir', 'committer_email': None, 'commit_date': datetime.datetime(2011, 4, 2, 12, 40, 56, tzinfo=datetime.timezone.utc)}]",Arsh Pratap,62841337,,User,,57,,3,16
670534381,Dds prototype,"Hello Ardupilot community!
This PR is work in progress and consists of the prototype code that aims to provide DDS functionality to Ardupilot for effective communication with ROS2 and Native DDS implementations

Added 2 IDL files

- A simple Num idl to test the xrce dds functionality
- AP_INS idl file for sending INS info

Added the eProsima XRCE Client lib as submodule
Provides Ardupilot an XRCE client to communicate with DDS/ROS2 through :
 Serial(Main focus)
 UDP(Only for testing,to be removed in final version)

Current Issues

- [x] Have tested the code through serial communication and sometimes it is found that data is not properly flushed out in the serial ports resulting in communication to XRCE agent being cut.Working on implementing a function to take care of this issue.
- [x] Have doubts related to setting up the build system to install the XRCE Client from the necessary submodules   

Thanks !",True,17779,https://api.github.com/repos/ArduPilot/ardupilot/pulls/17779,https://github.com/ArduPilot/ardupilot/pull/17779,closed,1375,1,35,12,40,74,3,0,"[{'name': 'ROS'}, {'name': 'GSoC'}, {'name': 'For-4.5'}]",2021-06-15 15:53:25+00:00,2023-03-21 22:22:37+00:00,55664952.0,"644 days, 6:29:12","[{'comment_id': 651935012, 'comment_body': ""This should probably be moved into the library folder. I don't think this part is vehicle specific correct?"", 'comment_created': datetime.datetime(2021, 6, 15, 16, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jmachuca77', 'type': 'User'}, {'comment_id': 651937173, 'comment_body': 'Okay will do so', 'comment_created': datetime.datetime(2021, 6, 15, 16, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 651983919, 'comment_body': 'You should get a serial object from the hal that way you ensure that the port is configured correctly', 'comment_created': datetime.datetime(2021, 6, 15, 17, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 652762599, 'comment_body': 'Also this should be made available on other serial ports as well... maybe check how other libraries are implemented and the parameter system that sets them up.\r\nhttps://github.com/ArduPilot/ardupilot/blob/3386cbb0dfece31d0acffdcb2147abd7df2643c6/libraries/AP_SerialManager/AP_SerialManager.cpp#L412\r\n', 'comment_created': datetime.datetime(2021, 6, 16, 14, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jmachuca77', 'type': 'User'}, {'comment_id': 653223115, 'comment_body': ""You probably shouldn't have any changes within the Copter directory as ROS is applicable on any vehicle.\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653223621, 'comment_body': 'Both of these names are way too generic.\r\n```suggestion\r\nvoid Copter::init_xrce_client()\r\n```', 'comment_created': datetime.datetime(2021, 6, 17, 4, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224042, 'comment_body': 'Use the `AP::ins()` singleton if you need inertial data.\r\n\r\nWithout parameters you should be able to use `SCHED_TASK_CLASS` to call `updateINSTopic`\r\n\r\n`client` is obviously also way too generic a member name.\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224220, 'comment_body': 'This casting-to-void is a bit of a red flag for me.  If it is warranted then it deserves a comment.\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224548, 'comment_body': 'Any reason you need a `typedef`?\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224676, 'comment_body': 'We will *always* we compiling this with C++ :-)\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224939, 'comment_body': 'Not happy having this duplicated in two places....\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653225582, 'comment_body': ""This is non-sensical - why would you turn a perfectly good reference into a pointer?\r\n\r\nReally not sure why the AHRS sem is relevant here - presumably you'll have others relevant so re-using the AHRS sem seems odd.\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653225865, 'comment_body': '```suggestion\r\n    if (use_serial) {\r\n        fd = open(""/dev/ttyUSB1"", O_RDWR | O_NOCTTY | O_NONBLOCK);\r\n```\r\n\r\n(as @jmachuca77 says, use the serial manager instead; you can still use a real serial device easily enough)\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653226159, 'comment_body': 'We do not want to support UDP with this at this time - simplify the PR by always assuming `use_serial`\r\n\r\nAlso... dispense with `this->` in member functions.\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653226606, 'comment_body': 'taking-with-timeout is almost *always* something you do not want to do.\r\n\r\nAlso, usually you want to be doing `WITH_SEMAPHORE(_csem)`\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653227170, 'comment_body': 'Avoid indenting\r\n\r\n```suggestion\r\n    if(!_csem->take(5)){\r\n        return;\r\n    }\r\n   if(!this->connected)\r\n       return;\r\n   }\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653227372, 'comment_body': '```suggestion\r\n    uxrObjectId dwriter_id;\r\n    uint16_t dwriter_req;\r\n```\r\n\r\nand everywhere else\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653251123, 'comment_body': 'You should see this as the mavlink xml, it is the definition to generate the AP_INS.cpp code that is auto generated', 'comment_created': datetime.datetime(2021, 6, 17, 6, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 669597559, 'comment_body': 'The suggested changes have been sir.Please take a look', 'comment_created': datetime.datetime(2021, 7, 14, 13, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 669597911, 'comment_body': 'Changes have been applied', 'comment_created': datetime.datetime(2021, 7, 14, 13, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 669598160, 'comment_body': 'Changes have been applied', 'comment_created': datetime.datetime(2021, 7, 14, 13, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 669620910, 'comment_body': 'Sir the idl files come in handy while developing the xrce dds code so was planning to keep them only for the development phase..will remove them later on in development', 'comment_created': datetime.datetime(2021, 7, 14, 13, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 1112508051, 'comment_body': ""It looks like the examples in the XRCE-DDS also do this by some poor convention even though there is a perfectly good return code to consume and pass up to the application. After stripping down this implementation, I'll make sure the error codes get passed up. \r\n\r\nQuick question - Is C++17, specifically  `[[nodiscard]]` allowed here? "", 'comment_created': datetime.datetime(2023, 2, 21, 3, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1112509715, 'comment_body': ""@peterbarker You had mentioned to limit the scope of this to serial only. One thing I am wondering is whether this should be called ROS2, or more appropriately name it based on the protocol, which would be `SerialProtocol_DDS_XRCE` to match the official OMG standard? ROS2 is not a protocol, it's a framework.  \r\nhttps://www.omg.org/spec/DDS-XRCE/"", 'comment_created': datetime.datetime(2023, 2, 21, 4, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1117168186, 'comment_body': 'I renamed in in e67d89521df982fb668f14a72f3d794a1fd69dfe', 'comment_created': datetime.datetime(2023, 2, 24, 15, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1117182004, 'comment_body': 'I can submit a PR upstream - this serialization function is actually adapted from the generated code from MicroXRCEDDSGen. I agree, we should not discard write issues. \r\n\r\n- [x] Submit PR upstream to not void cast\r\n- [ ] Add submodule for fastddgen\r\n- [ ] Remove manually written serialization instead with autogenerated files using waf', 'comment_created': datetime.datetime(2023, 2, 24, 15, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1118167974, 'comment_body': 'https://github.com/eProsima/Micro-XRCE-DDS-Gen/issues/45\r\nCreated issue and submitted PR. ', 'comment_created': datetime.datetime(2023, 2, 26, 22, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1120381361, 'comment_body': 'Why does ardupilot care about the specific source structure of Micro-XRCE-DDS-Client? Can we have Waf connected to their CMakeLists and just link to their build libraries or cmake targets? \r\n\r\nIf EProsima re-organizes folder structure, it breaks our build. \r\nIf they change implementation file extensions to cpp, it breaks out build. \r\nIf they add more files in another folder that need to be compiled but are private implementations, it breaks our build. ', 'comment_created': datetime.datetime(2023, 2, 28, 16, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1120384044, 'comment_body': ""Can we consume cmake target's PUBLIC_HEADER property rather than redo it here? "", 'comment_created': datetime.datetime(2023, 2, 28, 16, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1120388865, 'comment_body': 'Can be more specific to say \r\n""Enable support of DDS XRCE protocol during compilation""', 'comment_created': datetime.datetime(2023, 2, 28, 16, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133365575, 'comment_body': ""do we need the Micro-CDR submodule? I know we may use it in the future, but I don't think we need it now, or have I missed a dependency?"", 'comment_created': datetime.datetime(2023, 3, 13, 1, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133366161, 'comment_body': 'please make the addition of black a separate PR, same with xmllint', 'comment_created': datetime.datetime(2023, 3, 13, 1, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133366437, 'comment_body': ""I don't see where XRCE_DEPENDENCIES is being set? I think this may be a leftover from an earlier version of the PR"", 'comment_created': datetime.datetime(2023, 3, 13, 1, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133366956, 'comment_body': 'i think we can remove some of these debug messages now', 'comment_created': datetime.datetime(2023, 3, 13, 1, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133367475, 'comment_body': 'what are all the nodiscards here for (and in AP_Vehicle). Why would we want to keep unused symbols?', 'comment_created': datetime.datetime(2023, 3, 13, 1, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133368136, 'comment_body': 'why is update_topic not in the class?\r\nmaybe it should be a member of AP_DDS_Client::Topic_table, so we loop calling update_topic method on each of the topic table entries?', 'comment_created': datetime.datetime(2023, 3, 13, 1, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133369027, 'comment_body': 'i think this should use a DDS_ parameter prefix', 'comment_created': datetime.datetime(2023, 3, 13, 1, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133369162, 'comment_body': 'as noted above, why nodiscard?', 'comment_created': datetime.datetime(2023, 3, 13, 1, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133369484, 'comment_body': 'variable should be dds_client, not xrce_client\r\n', 'comment_created': datetime.datetime(2023, 3, 13, 1, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133370578, 'comment_body': ""It is used; it's enforced by the compiler to be used. Throwing away the result of init() and ignoring it would be bad. "", 'comment_created': datetime.datetime(2023, 3, 13, 1, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133370900, 'comment_body': 'Done 361686e332dd36232b7c313185d2669f2d6af3dd\r\n', 'comment_created': datetime.datetime(2023, 3, 13, 1, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133373354, 'comment_body': 'I tried removing it and got a billion linker errors. We have includes for `#include ""ucdr/microcdr.h""` in `AP_DDS_Client`. That said, this might because we aren\'t building the micro XRCE Client correctly, since microcdr is a dependency there. \r\n\r\nSo, I think we do need it to avoid linker errros, but whatever we\'re doing in waf right now by not calling micro xrce dds client\'s build system and instead building manually from source seems a bit hacky. ', 'comment_created': datetime.datetime(2023, 3, 13, 1, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133375168, 'comment_body': 'ahh, for some reason I thought this was a linker directive, looks like it is equivalent to WARN_IF_UNUSED in ArduPilot, which is __attribute__ ((warn_unused_result)) for GNUC.\r\nI wonder if [[nodiscard]] works with all our compilers?', 'comment_created': datetime.datetime(2023, 3, 13, 2, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133382149, 'comment_body': 'Done. I dumped them both into `add-black-formatter-for-ap-dds` and removed it from this PR. ', 'comment_created': datetime.datetime(2023, 3, 13, 2, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133382726, 'comment_body': 'Done 597edf87f44fafdd208fd336e6cf9104d044ad44\r\n\r\nOnly the error ones, and final success message exist. ', 'comment_created': datetime.datetime(2023, 3, 13, 2, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133382932, 'comment_body': 'Done in 361686e332dd36232b7c313185d2669f2d6af3dd', 'comment_created': datetime.datetime(2023, 3, 13, 2, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133382977, 'comment_body': 'See above. ', 'comment_created': datetime.datetime(2023, 3, 13, 2, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133383426, 'comment_body': ""It can be part of the class for sure, as a static member function. \r\n\r\nAs far as in the topic table, I'm not sure how much I want to build into that yet because the we might break the more than one updater per topic assumption soon with, for example, multi battery support. "", 'comment_created': datetime.datetime(2023, 3, 13, 2, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133385759, 'comment_body': ""If CI passes. What's the behavior if it's not implemented? It's ignored? \r\n\r\nIF so, that's fine. Because the other CI jobs will catch the unused return value. "", 'comment_created': datetime.datetime(2023, 3, 13, 2, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133390834, 'comment_body': ""I don't see either.Removed in `1c28f067a43cd1c9de4fcb81664c3514e6b4dbae`. Build is fine without it. "", 'comment_created': datetime.datetime(2023, 3, 13, 2, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133404297, 'comment_body': 'why this change? I think this is what is causing the CI error', 'comment_created': datetime.datetime(2023, 3, 13, 3, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133414019, 'comment_body': ""Reverted it in 7d025e82e693825435d9c342b5d776a8fa03f552, I'll watch CI to see what changes. "", 'comment_created': datetime.datetime(2023, 3, 13, 3, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133424020, 'comment_body': 'Good eye, I removed it in 7d025e82e693825435d9c342b5d776a8fa03f552. \r\n\r\nYou can see the resulting CI pass the build here. \r\nhttps://github.com/Ryanf55/ardupilot/actions/runs/4401148084\r\n\r\nResolved :sunglasses: ', 'comment_created': datetime.datetime(2023, 3, 13, 4, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133436511, 'comment_body': ""I'm realizing it's not in the class is because we were going to code generate it, but this is the one part that definately can't be generated because it's the bridge to the rest of the API. \r\n\r\nTLDR: It's in the class now, in commit 61099c35ac0dc135baa42d4179bbb0f6fedc58ac"", 'comment_created': datetime.datetime(2023, 3, 13, 4, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134845829, 'comment_body': 'Resolution is to use the macro already in the build system. ', 'comment_created': datetime.datetime(2023, 3, 14, 2, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134856502, 'comment_body': 'populate errcode to something sensible (is there an enum?)', 'comment_created': datetime.datetime(2023, 3, 14, 2, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1134940605, 'comment_body': ""Handled in df8e77bdbc6de6288d8c9d4e85979fe1c0ea5797. It's now marked as a Doxygen todo, and can be solved at a later date after have discussions with EProsima on weak pointers to the `uxr_*` functions we redefined. "", 'comment_created': datetime.datetime(2023, 3, 14, 4, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134944161, 'comment_body': 'Used the macro in a52db916f7f758c580cc10a69315f00273a0e960.\r\n', 'comment_created': datetime.datetime(2023, 3, 14, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134973540, 'comment_body': 'This is now part of our generator. Resolved. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974120, 'comment_body': 'Outdated yea. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974353, 'comment_body': ""It's being used now. "", 'comment_created': datetime.datetime(2023, 3, 14, 5, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974560, 'comment_body': 'Done and Done. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974882, 'comment_body': 'Done (already)', 'comment_created': datetime.datetime(2023, 3, 14, 5, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134975256, 'comment_body': 'Everything is formatted with `astyle` on the PR. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134975494, 'comment_body': 'Format is resolved with astyle', 'comment_created': datetime.datetime(2023, 3, 14, 5, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1136119901, 'comment_body': ""pre-commit changes I'd like to add at a later date:\r\n```\r\n# Use to check python style\r\n  -   repo: https://github.com/psf/black\r\n      rev: 23.1.0\r\n      hooks:\r\n        - id: black\r\n          files: libraries/AP_XRCE_Client/wscript\r\n\r\n  -   repo: https://github.com/lsst-ts/pre-commit-xmllint\r\n      rev: v1.0.0\r\n      hooks:\r\n        - id: format-xmllint\r\n          files: libraries/AP_XRCE_Client/dds_xrce_profile.xml\r\n```"", 'comment_created': datetime.datetime(2023, 3, 14, 19, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1141265570, 'comment_body': '```suggestion\r\n#include <AP_HAL/AP_HAL_Boards.h>\r\n```', 'comment_created': datetime.datetime(2023, 3, 19, 6, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1141265726, 'comment_body': 'Early return here rather than indent.  Possibly doing an internal error first?\r\n', 'comment_created': datetime.datetime(2023, 3, 19, 6, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1141265849, 'comment_body': 'Why not take a reference instead?!\r\n\r\n```suggestion\r\nvoid AP_DDS_Client::update_topic(builtin_interfaces_msg_Time& msg)\r\n```', 'comment_created': datetime.datetime(2023, 3, 19, 6, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1142765809, 'comment_body': '`update_topic` is called at a very high rate. Is it OK to do internal errors at that high rate? ', 'comment_created': datetime.datetime(2023, 3, 20, 23, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1142803013, 'comment_body': 'Done in fc514d56571d59e90a906fd36699ae0219e68973', 'comment_created': datetime.datetime(2023, 3, 21, 0, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1142803176, 'comment_body': ""Now that it's passed by reference, this is no longer an error condition. "", 'comment_created': datetime.datetime(2023, 3, 21, 0, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1142805118, 'comment_body': '```suggestion\r\n    msg = {\r\n        utc_usec / 1000000ULL,\r\n        (utc_usec % 1000000ULL) * 1000UL\r\n    };\r\n```\r\n\r\nJust a suggestion that you play with this.  It means the structure is fully initialised on return, and gives you some type-checking too.\r\n', 'comment_created': datetime.datetime(2023, 3, 21, 0, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1142812200, 'comment_body': ""It sadly loses the context of the first element being seconds and the second element being nanoseconds. Unless you could use C++20's [aggregate initialization that supports designated initializers]( https://en.cppreference.com/w/cpp/language/aggregate_initialization). Maybe there a way to get the best of both worlds 🔍"", 'comment_created': datetime.datetime(2023, 3, 21, 1, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '414670a977c45706a0ef491ef147cf3e152c231e', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c96f64b7b9239242778e8757a17fb40e9ccb782f', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc4d9e6ba28c75dc7b03a69d10dbb5eb2e4d1e85', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e53fa9c5612e1cb47797fd63f240444b455fd4', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53d6c91e83b787f3bbfeb666833473569740dbb', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d129bdfdc91c1299479895413bfc5418432b1b0', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbe5e779146b3248c124f26987c864aa4bef68b', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4232b687dfb98843929018c861d516feff81601', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5123d771aaff927aaace7ff0182b0558112821a5', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f586ad5d5b66568e80ed083981e3ad0cc58537fd', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc194dd678c45d075957eff5ea2b2a1f5515573', 'committer_username': 'khancyr', 'committer_name': 'Pierre Kancir', 'committer_email': None, 'commit_date': datetime.datetime(2011, 4, 2, 12, 40, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e87f3a7953c7792aa483ef9a67a0d913b169b9', 'committer_username': 'khancyr', 'committer_name': 'Pierre Kancir', 'committer_email': None, 'commit_date': datetime.datetime(2011, 4, 2, 12, 40, 56, tzinfo=datetime.timezone.utc)}]",Arsh Pratap,62841337,,User,,57,,3,16
670534381,Dds prototype,"Hello Ardupilot community!
This PR is work in progress and consists of the prototype code that aims to provide DDS functionality to Ardupilot for effective communication with ROS2 and Native DDS implementations

Added 2 IDL files

- A simple Num idl to test the xrce dds functionality
- AP_INS idl file for sending INS info

Added the eProsima XRCE Client lib as submodule
Provides Ardupilot an XRCE client to communicate with DDS/ROS2 through :
 Serial(Main focus)
 UDP(Only for testing,to be removed in final version)

Current Issues

- [x] Have tested the code through serial communication and sometimes it is found that data is not properly flushed out in the serial ports resulting in communication to XRCE agent being cut.Working on implementing a function to take care of this issue.
- [x] Have doubts related to setting up the build system to install the XRCE Client from the necessary submodules   

Thanks !",True,17779,https://api.github.com/repos/ArduPilot/ardupilot/pulls/17779,https://github.com/ArduPilot/ardupilot/pull/17779,closed,1375,1,35,12,40,74,3,0,"[{'name': 'ROS'}, {'name': 'GSoC'}, {'name': 'For-4.5'}]",2021-06-15 15:53:25+00:00,2023-03-21 22:22:37+00:00,55664952.0,"644 days, 6:29:12","[{'comment_id': 651935012, 'comment_body': ""This should probably be moved into the library folder. I don't think this part is vehicle specific correct?"", 'comment_created': datetime.datetime(2021, 6, 15, 16, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jmachuca77', 'type': 'User'}, {'comment_id': 651937173, 'comment_body': 'Okay will do so', 'comment_created': datetime.datetime(2021, 6, 15, 16, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 651983919, 'comment_body': 'You should get a serial object from the hal that way you ensure that the port is configured correctly', 'comment_created': datetime.datetime(2021, 6, 15, 17, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 652762599, 'comment_body': 'Also this should be made available on other serial ports as well... maybe check how other libraries are implemented and the parameter system that sets them up.\r\nhttps://github.com/ArduPilot/ardupilot/blob/3386cbb0dfece31d0acffdcb2147abd7df2643c6/libraries/AP_SerialManager/AP_SerialManager.cpp#L412\r\n', 'comment_created': datetime.datetime(2021, 6, 16, 14, 44, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jmachuca77', 'type': 'User'}, {'comment_id': 653223115, 'comment_body': ""You probably shouldn't have any changes within the Copter directory as ROS is applicable on any vehicle.\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653223621, 'comment_body': 'Both of these names are way too generic.\r\n```suggestion\r\nvoid Copter::init_xrce_client()\r\n```', 'comment_created': datetime.datetime(2021, 6, 17, 4, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224042, 'comment_body': 'Use the `AP::ins()` singleton if you need inertial data.\r\n\r\nWithout parameters you should be able to use `SCHED_TASK_CLASS` to call `updateINSTopic`\r\n\r\n`client` is obviously also way too generic a member name.\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224220, 'comment_body': 'This casting-to-void is a bit of a red flag for me.  If it is warranted then it deserves a comment.\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224548, 'comment_body': 'Any reason you need a `typedef`?\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224676, 'comment_body': 'We will *always* we compiling this with C++ :-)\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653224939, 'comment_body': 'Not happy having this duplicated in two places....\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653225582, 'comment_body': ""This is non-sensical - why would you turn a perfectly good reference into a pointer?\r\n\r\nReally not sure why the AHRS sem is relevant here - presumably you'll have others relevant so re-using the AHRS sem seems odd.\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 4, 58, 53, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653225865, 'comment_body': '```suggestion\r\n    if (use_serial) {\r\n        fd = open(""/dev/ttyUSB1"", O_RDWR | O_NOCTTY | O_NONBLOCK);\r\n```\r\n\r\n(as @jmachuca77 says, use the serial manager instead; you can still use a real serial device easily enough)\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 4, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653226159, 'comment_body': 'We do not want to support UDP with this at this time - simplify the PR by always assuming `use_serial`\r\n\r\nAlso... dispense with `this->` in member functions.\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653226606, 'comment_body': 'taking-with-timeout is almost *always* something you do not want to do.\r\n\r\nAlso, usually you want to be doing `WITH_SEMAPHORE(_csem)`\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653227170, 'comment_body': 'Avoid indenting\r\n\r\n```suggestion\r\n    if(!_csem->take(5)){\r\n        return;\r\n    }\r\n   if(!this->connected)\r\n       return;\r\n   }\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653227372, 'comment_body': '```suggestion\r\n    uxrObjectId dwriter_id;\r\n    uint16_t dwriter_req;\r\n```\r\n\r\nand everywhere else\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 5, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 653251123, 'comment_body': 'You should see this as the mavlink xml, it is the definition to generate the AP_INS.cpp code that is auto generated', 'comment_created': datetime.datetime(2021, 6, 17, 6, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'khancyr', 'type': 'User'}, {'comment_id': 669597559, 'comment_body': 'The suggested changes have been sir.Please take a look', 'comment_created': datetime.datetime(2021, 7, 14, 13, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 669597911, 'comment_body': 'Changes have been applied', 'comment_created': datetime.datetime(2021, 7, 14, 13, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 669598160, 'comment_body': 'Changes have been applied', 'comment_created': datetime.datetime(2021, 7, 14, 13, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 669620910, 'comment_body': 'Sir the idl files come in handy while developing the xrce dds code so was planning to keep them only for the development phase..will remove them later on in development', 'comment_created': datetime.datetime(2021, 7, 14, 13, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'arshPratap', 'type': 'User'}, {'comment_id': 1112508051, 'comment_body': ""It looks like the examples in the XRCE-DDS also do this by some poor convention even though there is a perfectly good return code to consume and pass up to the application. After stripping down this implementation, I'll make sure the error codes get passed up. \r\n\r\nQuick question - Is C++17, specifically  `[[nodiscard]]` allowed here? "", 'comment_created': datetime.datetime(2023, 2, 21, 3, 56, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1112509715, 'comment_body': ""@peterbarker You had mentioned to limit the scope of this to serial only. One thing I am wondering is whether this should be called ROS2, or more appropriately name it based on the protocol, which would be `SerialProtocol_DDS_XRCE` to match the official OMG standard? ROS2 is not a protocol, it's a framework.  \r\nhttps://www.omg.org/spec/DDS-XRCE/"", 'comment_created': datetime.datetime(2023, 2, 21, 4, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1117168186, 'comment_body': 'I renamed in in e67d89521df982fb668f14a72f3d794a1fd69dfe', 'comment_created': datetime.datetime(2023, 2, 24, 15, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1117182004, 'comment_body': 'I can submit a PR upstream - this serialization function is actually adapted from the generated code from MicroXRCEDDSGen. I agree, we should not discard write issues. \r\n\r\n- [x] Submit PR upstream to not void cast\r\n- [ ] Add submodule for fastddgen\r\n- [ ] Remove manually written serialization instead with autogenerated files using waf', 'comment_created': datetime.datetime(2023, 2, 24, 15, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1118167974, 'comment_body': 'https://github.com/eProsima/Micro-XRCE-DDS-Gen/issues/45\r\nCreated issue and submitted PR. ', 'comment_created': datetime.datetime(2023, 2, 26, 22, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1120381361, 'comment_body': 'Why does ardupilot care about the specific source structure of Micro-XRCE-DDS-Client? Can we have Waf connected to their CMakeLists and just link to their build libraries or cmake targets? \r\n\r\nIf EProsima re-organizes folder structure, it breaks our build. \r\nIf they change implementation file extensions to cpp, it breaks out build. \r\nIf they add more files in another folder that need to be compiled but are private implementations, it breaks our build. ', 'comment_created': datetime.datetime(2023, 2, 28, 16, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1120384044, 'comment_body': ""Can we consume cmake target's PUBLIC_HEADER property rather than redo it here? "", 'comment_created': datetime.datetime(2023, 2, 28, 16, 39, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1120388865, 'comment_body': 'Can be more specific to say \r\n""Enable support of DDS XRCE protocol during compilation""', 'comment_created': datetime.datetime(2023, 2, 28, 16, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133365575, 'comment_body': ""do we need the Micro-CDR submodule? I know we may use it in the future, but I don't think we need it now, or have I missed a dependency?"", 'comment_created': datetime.datetime(2023, 3, 13, 1, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133366161, 'comment_body': 'please make the addition of black a separate PR, same with xmllint', 'comment_created': datetime.datetime(2023, 3, 13, 1, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133366437, 'comment_body': ""I don't see where XRCE_DEPENDENCIES is being set? I think this may be a leftover from an earlier version of the PR"", 'comment_created': datetime.datetime(2023, 3, 13, 1, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133366956, 'comment_body': 'i think we can remove some of these debug messages now', 'comment_created': datetime.datetime(2023, 3, 13, 1, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133367475, 'comment_body': 'what are all the nodiscards here for (and in AP_Vehicle). Why would we want to keep unused symbols?', 'comment_created': datetime.datetime(2023, 3, 13, 1, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133368136, 'comment_body': 'why is update_topic not in the class?\r\nmaybe it should be a member of AP_DDS_Client::Topic_table, so we loop calling update_topic method on each of the topic table entries?', 'comment_created': datetime.datetime(2023, 3, 13, 1, 37, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133369027, 'comment_body': 'i think this should use a DDS_ parameter prefix', 'comment_created': datetime.datetime(2023, 3, 13, 1, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133369162, 'comment_body': 'as noted above, why nodiscard?', 'comment_created': datetime.datetime(2023, 3, 13, 1, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133369484, 'comment_body': 'variable should be dds_client, not xrce_client\r\n', 'comment_created': datetime.datetime(2023, 3, 13, 1, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133370578, 'comment_body': ""It is used; it's enforced by the compiler to be used. Throwing away the result of init() and ignoring it would be bad. "", 'comment_created': datetime.datetime(2023, 3, 13, 1, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133370900, 'comment_body': 'Done 361686e332dd36232b7c313185d2669f2d6af3dd\r\n', 'comment_created': datetime.datetime(2023, 3, 13, 1, 46, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133373354, 'comment_body': 'I tried removing it and got a billion linker errors. We have includes for `#include ""ucdr/microcdr.h""` in `AP_DDS_Client`. That said, this might because we aren\'t building the micro XRCE Client correctly, since microcdr is a dependency there. \r\n\r\nSo, I think we do need it to avoid linker errros, but whatever we\'re doing in waf right now by not calling micro xrce dds client\'s build system and instead building manually from source seems a bit hacky. ', 'comment_created': datetime.datetime(2023, 3, 13, 1, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133375168, 'comment_body': 'ahh, for some reason I thought this was a linker directive, looks like it is equivalent to WARN_IF_UNUSED in ArduPilot, which is __attribute__ ((warn_unused_result)) for GNUC.\r\nI wonder if [[nodiscard]] works with all our compilers?', 'comment_created': datetime.datetime(2023, 3, 13, 2, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133382149, 'comment_body': 'Done. I dumped them both into `add-black-formatter-for-ap-dds` and removed it from this PR. ', 'comment_created': datetime.datetime(2023, 3, 13, 2, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133382726, 'comment_body': 'Done 597edf87f44fafdd208fd336e6cf9104d044ad44\r\n\r\nOnly the error ones, and final success message exist. ', 'comment_created': datetime.datetime(2023, 3, 13, 2, 22, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133382932, 'comment_body': 'Done in 361686e332dd36232b7c313185d2669f2d6af3dd', 'comment_created': datetime.datetime(2023, 3, 13, 2, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133382977, 'comment_body': 'See above. ', 'comment_created': datetime.datetime(2023, 3, 13, 2, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133383426, 'comment_body': ""It can be part of the class for sure, as a static member function. \r\n\r\nAs far as in the topic table, I'm not sure how much I want to build into that yet because the we might break the more than one updater per topic assumption soon with, for example, multi battery support. "", 'comment_created': datetime.datetime(2023, 3, 13, 2, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133385759, 'comment_body': ""If CI passes. What's the behavior if it's not implemented? It's ignored? \r\n\r\nIF so, that's fine. Because the other CI jobs will catch the unused return value. "", 'comment_created': datetime.datetime(2023, 3, 13, 2, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133390834, 'comment_body': ""I don't see either.Removed in `1c28f067a43cd1c9de4fcb81664c3514e6b4dbae`. Build is fine without it. "", 'comment_created': datetime.datetime(2023, 3, 13, 2, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133404297, 'comment_body': 'why this change? I think this is what is causing the CI error', 'comment_created': datetime.datetime(2023, 3, 13, 3, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1133414019, 'comment_body': ""Reverted it in 7d025e82e693825435d9c342b5d776a8fa03f552, I'll watch CI to see what changes. "", 'comment_created': datetime.datetime(2023, 3, 13, 3, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133424020, 'comment_body': 'Good eye, I removed it in 7d025e82e693825435d9c342b5d776a8fa03f552. \r\n\r\nYou can see the resulting CI pass the build here. \r\nhttps://github.com/Ryanf55/ardupilot/actions/runs/4401148084\r\n\r\nResolved :sunglasses: ', 'comment_created': datetime.datetime(2023, 3, 13, 4, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1133436511, 'comment_body': ""I'm realizing it's not in the class is because we were going to code generate it, but this is the one part that definately can't be generated because it's the bridge to the rest of the API. \r\n\r\nTLDR: It's in the class now, in commit 61099c35ac0dc135baa42d4179bbb0f6fedc58ac"", 'comment_created': datetime.datetime(2023, 3, 13, 4, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134845829, 'comment_body': 'Resolution is to use the macro already in the build system. ', 'comment_created': datetime.datetime(2023, 3, 14, 2, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134856502, 'comment_body': 'populate errcode to something sensible (is there an enum?)', 'comment_created': datetime.datetime(2023, 3, 14, 2, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tridge', 'type': 'User'}, {'comment_id': 1134940605, 'comment_body': ""Handled in df8e77bdbc6de6288d8c9d4e85979fe1c0ea5797. It's now marked as a Doxygen todo, and can be solved at a later date after have discussions with EProsima on weak pointers to the `uxr_*` functions we redefined. "", 'comment_created': datetime.datetime(2023, 3, 14, 4, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134944161, 'comment_body': 'Used the macro in a52db916f7f758c580cc10a69315f00273a0e960.\r\n', 'comment_created': datetime.datetime(2023, 3, 14, 4, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134973540, 'comment_body': 'This is now part of our generator. Resolved. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974120, 'comment_body': 'Outdated yea. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974353, 'comment_body': ""It's being used now. "", 'comment_created': datetime.datetime(2023, 3, 14, 5, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974560, 'comment_body': 'Done and Done. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134974882, 'comment_body': 'Done (already)', 'comment_created': datetime.datetime(2023, 3, 14, 5, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134975256, 'comment_body': 'Everything is formatted with `astyle` on the PR. ', 'comment_created': datetime.datetime(2023, 3, 14, 5, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1134975494, 'comment_body': 'Format is resolved with astyle', 'comment_created': datetime.datetime(2023, 3, 14, 5, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1136119901, 'comment_body': ""pre-commit changes I'd like to add at a later date:\r\n```\r\n# Use to check python style\r\n  -   repo: https://github.com/psf/black\r\n      rev: 23.1.0\r\n      hooks:\r\n        - id: black\r\n          files: libraries/AP_XRCE_Client/wscript\r\n\r\n  -   repo: https://github.com/lsst-ts/pre-commit-xmllint\r\n      rev: v1.0.0\r\n      hooks:\r\n        - id: format-xmllint\r\n          files: libraries/AP_XRCE_Client/dds_xrce_profile.xml\r\n```"", 'comment_created': datetime.datetime(2023, 3, 14, 19, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1141265570, 'comment_body': '```suggestion\r\n#include <AP_HAL/AP_HAL_Boards.h>\r\n```', 'comment_created': datetime.datetime(2023, 3, 19, 6, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1141265726, 'comment_body': 'Early return here rather than indent.  Possibly doing an internal error first?\r\n', 'comment_created': datetime.datetime(2023, 3, 19, 6, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1141265849, 'comment_body': 'Why not take a reference instead?!\r\n\r\n```suggestion\r\nvoid AP_DDS_Client::update_topic(builtin_interfaces_msg_Time& msg)\r\n```', 'comment_created': datetime.datetime(2023, 3, 19, 6, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1142765809, 'comment_body': '`update_topic` is called at a very high rate. Is it OK to do internal errors at that high rate? ', 'comment_created': datetime.datetime(2023, 3, 20, 23, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1142803013, 'comment_body': 'Done in fc514d56571d59e90a906fd36699ae0219e68973', 'comment_created': datetime.datetime(2023, 3, 21, 0, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1142803176, 'comment_body': ""Now that it's passed by reference, this is no longer an error condition. "", 'comment_created': datetime.datetime(2023, 3, 21, 0, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}, {'comment_id': 1142805118, 'comment_body': '```suggestion\r\n    msg = {\r\n        utc_usec / 1000000ULL,\r\n        (utc_usec % 1000000ULL) * 1000UL\r\n    };\r\n```\r\n\r\nJust a suggestion that you play with this.  It means the structure is fully initialised on return, and gives you some type-checking too.\r\n', 'comment_created': datetime.datetime(2023, 3, 21, 0, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'peterbarker', 'type': 'User'}, {'comment_id': 1142812200, 'comment_body': ""It sadly loses the context of the first element being seconds and the second element being nanoseconds. Unless you could use C++20's [aggregate initialization that supports designated initializers]( https://en.cppreference.com/w/cpp/language/aggregate_initialization). Maybe there a way to get the best of both worlds 🔍"", 'comment_created': datetime.datetime(2023, 3, 21, 1, 14, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Ryanf55', 'type': 'User'}]","[{'commit_sha': '414670a977c45706a0ef491ef147cf3e152c231e', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c96f64b7b9239242778e8757a17fb40e9ccb782f', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc4d9e6ba28c75dc7b03a69d10dbb5eb2e4d1e85', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46e53fa9c5612e1cb47797fd63f240444b455fd4', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a53d6c91e83b787f3bbfeb666833473569740dbb', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d129bdfdc91c1299479895413bfc5418432b1b0', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dbe5e779146b3248c124f26987c864aa4bef68b', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4232b687dfb98843929018c861d516feff81601', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5123d771aaff927aaace7ff0182b0558112821a5', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f586ad5d5b66568e80ed083981e3ad0cc58537fd', 'committer_username': 'Ryanf55', 'committer_name': 'Ryan', 'committer_email': 'ryanfriedman5410+github@gmail.com', 'commit_date': datetime.datetime(2017, 1, 11, 3, 36, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bc194dd678c45d075957eff5ea2b2a1f5515573', 'committer_username': 'khancyr', 'committer_name': 'Pierre Kancir', 'committer_email': None, 'commit_date': datetime.datetime(2011, 4, 2, 12, 40, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e87f3a7953c7792aa483ef9a67a0d913b169b9', 'committer_username': 'khancyr', 'committer_name': 'Pierre Kancir', 'committer_email': None, 'commit_date': datetime.datetime(2011, 4, 2, 12, 40, 56, tzinfo=datetime.timezone.utc)}]",Arsh Pratap,62841337,,User,,57,,3,16

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
7512484,ardupilot,ArduPilot/ardupilot,C++,17034,10403,658,1076,64545,2447,71,1018,"[{'id': 1486182249, 'number': 24740, 'closed': None, 'created': datetime.datetime(2023, 8, 23, 10, 37, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 43, 'deletions': 18, 'state': 'open'}, {'id': 1481453500, 'number': 24706, 'closed': datetime.datetime(2023, 9, 10, 23, 50, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 13, 30, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1937961.0, 'time_delta': '22 days, 10:19:21', 'additions': 62, 'deletions': 21, 'state': 'closed'}, {'id': 1481416426, 'number': 24705, 'closed': datetime.datetime(2023, 9, 1, 7, 49, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 10, 23, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1113985.0, 'time_delta': '12 days, 21:26:25', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 1481396985, 'number': 24704, 'closed': datetime.datetime(2023, 8, 19, 13, 13, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 8, 45, 51, tzinfo=datetime.timezone.utc), 'time_taken': 16068.0, 'time_delta': '4:27:48', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1409335067, 'number': 24145, 'closed': datetime.datetime(2023, 8, 11, 3, 35, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 27, 8, 13, 35, tzinfo=datetime.timezone.utc), 'time_taken': 3871334.0, 'time_delta': '44 days, 19:22:14', 'additions': 248, 'deletions': 25, 'state': 'closed'}, {'id': 1331113604, 'number': 23629, 'closed': datetime.datetime(2023, 6, 1, 1, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 27, 23, 24, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2945630.0, 'time_delta': '34 days, 2:13:50', 'additions': 187, 'deletions': 25, 'state': 'closed'}, {'id': 1304508020, 'number': 23413, 'closed': datetime.datetime(2023, 4, 6, 10, 45, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 10, 22, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1383.0, 'time_delta': '0:23:03', 'additions': 7, 'deletions': 12, 'state': 'closed'}, {'id': 1303209268, 'number': 23403, 'closed': datetime.datetime(2023, 4, 14, 2, 5, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 5, 13, 32, 56, tzinfo=datetime.timezone.utc), 'time_taken': 736339.0, 'time_delta': '8 days, 12:32:19', 'additions': 90, 'deletions': 114, 'state': 'closed'}, {'id': 670534381, 'number': 17779, 'closed': datetime.datetime(2023, 3, 21, 22, 22, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 15, 53, 25, tzinfo=datetime.timezone.utc), 'time_taken': 55664952.0, 'time_delta': '644 days, 6:29:12', 'additions': 1375, 'deletions': 1, 'state': 'closed'}, {'id': 628389853, 'number': 17321, 'closed': datetime.datetime(2021, 6, 8, 6, 50, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 8, 47, 2, tzinfo=datetime.timezone.utc), 'time_taken': 3276215.0, 'time_delta': '37 days, 22:03:35', 'additions': 21, 'deletions': 6, 'state': 'closed'}, {'id': 592559952, 'number': 16896, 'closed': datetime.datetime(2021, 4, 10, 0, 47, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 14, 15, 7, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2281170.0, 'time_delta': '26 days, 9:39:30', 'additions': 8, 'deletions': 11, 'state': 'closed'}, {'id': 592557630, 'number': 16895, 'closed': None, 'created': datetime.datetime(2021, 3, 14, 14, 53, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 19, 'deletions': 6, 'state': 'open'}, {'id': 582468658, 'number': 16779, 'closed': None, 'created': datetime.datetime(2021, 3, 1, 22, 15, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 110, 'deletions': 15, 'state': 'open'}, {'id': 581434751, 'number': 16762, 'closed': datetime.datetime(2021, 3, 1, 22, 16, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 28, 1, 37, 39, tzinfo=datetime.timezone.utc), 'time_taken': 160751.0, 'time_delta': '1 day, 20:39:11', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 573209236, 'number': 16625, 'closed': None, 'created': datetime.datetime(2021, 2, 15, 2, 29, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 39, 'deletions': 8, 'state': 'open'}, {'id': 572885632, 'number': 16617, 'closed': datetime.datetime(2022, 9, 26, 9, 53, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 13, 5, 9, 58, tzinfo=datetime.timezone.utc), 'time_taken': 50993029.0, 'time_delta': '590 days, 4:43:49', 'additions': 27, 'deletions': 3, 'state': 'closed'}, {'id': 572839889, 'number': 16613, 'closed': datetime.datetime(2024, 7, 25, 7, 2, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 23, 56, 8, tzinfo=datetime.timezone.utc), 'time_taken': 108716808.0, 'time_delta': '1258 days, 7:06:48', 'additions': 10, 'deletions': 1, 'state': 'closed'}, {'id': 572810000, 'number': 16610, 'closed': datetime.datetime(2024, 3, 11, 10, 40, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 22, 23, 35, tzinfo=datetime.timezone.utc), 'time_taken': 96984997.0, 'time_delta': '1122 days, 12:16:37', 'additions': 16, 'deletions': 4, 'state': 'closed'}, {'id': 569687417, 'number': 16562, 'closed': datetime.datetime(2021, 5, 4, 23, 27, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 8, 18, 39, 20, tzinfo=datetime.timezone.utc), 'time_taken': 7361311.0, 'time_delta': '85 days, 4:48:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 568459416, 'number': 16530, 'closed': datetime.datetime(2021, 2, 8, 0, 12, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 5, 16, 15, 12, tzinfo=datetime.timezone.utc), 'time_taken': 201460.0, 'time_delta': '2 days, 7:57:40', 'additions': 0, 'deletions': 5, 'state': 'closed'}, {'id': 565073231, 'number': 16473, 'closed': datetime.datetime(2024, 7, 25, 7, 4, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 1, 10, 43, 1, tzinfo=datetime.timezone.utc), 'time_taken': 109714909.0, 'time_delta': '1269 days, 20:21:49', 'additions': 205, 'deletions': 10, 'state': 'closed'}, {'id': 556183668, 'number': 16338, 'closed': None, 'created': datetime.datetime(2021, 1, 16, 14, 35, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2, 'deletions': 9, 'state': 'open'}, {'id': 552101187, 'number': 16284, 'closed': datetime.datetime(2021, 6, 18, 22, 59, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 9, 9, 4, 9, tzinfo=datetime.timezone.utc), 'time_taken': 13874150.0, 'time_delta': '160 days, 13:55:50', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 551095683, 'number': 16260, 'closed': datetime.datetime(2021, 2, 3, 2, 2, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 7, 14, 35, 6, tzinfo=datetime.timezone.utc), 'time_taken': 2287664.0, 'time_delta': '26 days, 11:27:44', 'additions': 53, 'deletions': 31, 'state': 'closed'}, {'id': 548744235, 'number': 16229, 'closed': datetime.datetime(2021, 1, 5, 9, 43, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 5, 7, 55, 59, tzinfo=datetime.timezone.utc), 'time_taken': 6426.0, 'time_delta': '1:47:06', 'additions': 35, 'deletions': 11, 'state': 'closed'}, {'id': 545718610, 'number': 16141, 'closed': datetime.datetime(2020, 12, 27, 23, 46, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 26, 17, 45, 16, tzinfo=datetime.timezone.utc), 'time_taken': 108069.0, 'time_delta': '1 day, 6:01:09', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 545177214, 'number': 16132, 'closed': datetime.datetime(2021, 2, 3, 3, 45, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 24, 6, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3530832.0, 'time_delta': '40 days, 20:47:12', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 542884499, 'number': 16101, 'closed': datetime.datetime(2020, 12, 21, 11, 26, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 19, 6, 16, 17, tzinfo=datetime.timezone.utc), 'time_taken': 191414.0, 'time_delta': '2 days, 5:10:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 540305254, 'number': 16064, 'closed': None, 'created': datetime.datetime(2020, 12, 15, 14, 47, 24, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 20, 'deletions': 0, 'state': 'open'}, {'id': 536227037, 'number': 16028, 'closed': datetime.datetime(2020, 12, 11, 21, 27, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 10, 20, 17, 28, tzinfo=datetime.timezone.utc), 'time_taken': 90588.0, 'time_delta': '1 day, 1:09:48', 'additions': 2, 'deletions': 2, 'state': 'closed'}]"
