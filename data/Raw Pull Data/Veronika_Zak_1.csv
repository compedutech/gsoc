pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1375755110,Add a parser for GAMESS .dat,"I created a new `gamessdatparser.py` class and put it in the folder with other parsers.
I'm still working on it, but I got it to extract some information from the file (so far tested just with `water_ccd.dat` and `water_mp2.dat`, but I'll run it on all of them later on).",True,1208,https://api.github.com/repos/cclib/cclib/pulls/1208,https://github.com/cclib/cclib/pull/1208,closed,112828,1,62,27,4,14,3,3,"[{'name': 'feature'}, {'name': 'parsers'}, {'name': 'GAMESS'}]",2023-06-02 13:08:47+00:00,2023-06-21 15:40:22+00:00,1650695.0,"19 days, 2:31:35","[{'comment_id': 1214361326, 'comment_body': 'We might as well change this to 2023 now, no need to change other files though.', 'comment_created': datetime.datetime(2023, 6, 2, 13, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1214368953, 'comment_body': ""Believe it or not, we often don't need to use regex, and this file is a special case of probably *never* needing it.  The reason is that all the numeric fields are going to be fixed width because they're written out to the text file using Fortran fixed-width fields.  This should be true even for alphabetical strings (like above, the `water` under `$DATA`) which will have a max length.\r\n\r\nThis means that every regex can be replaced with slicing over fixed indices.  The result will be (sometimes) easier to read and I suspect in benchmarks also faster."", 'comment_created': datetime.datetime(2023, 6, 2, 13, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1214388272, 'comment_body': 'X,Y, Z here will be able to populate `self.atomcoords`', 'comment_created': datetime.datetime(2023, 6, 2, 13, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1214388909, 'comment_body': 'This will be able to populate `self.scfenergies`', 'comment_created': datetime.datetime(2023, 6, 2, 13, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1214390402, 'comment_body': 'Coordinates is extremely general. I am not sure if we need to parse this ""MOMENTS AT POINT"" block yet.', 'comment_created': datetime.datetime(2023, 6, 2, 13, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1214391789, 'comment_body': 'Populate `self.moments`. ', 'comment_created': datetime.datetime(2023, 6, 2, 13, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1214392009, 'comment_body': '`self.mpenergies`', 'comment_created': datetime.datetime(2023, 6, 2, 13, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1217886093, 'comment_body': 'Should I keep only the coords then? What about the symbol and mass?', 'comment_created': datetime.datetime(2023, 6, 5, 10, 44, 14, tzinfo=datetime.timezone.utc), 'commenter': 'weronikazak', 'type': 'User'}, {'comment_id': 1226791263, 'comment_body': ""These aren't the single-point files; they should be `dvb_sp.dat`."", 'comment_created': datetime.datetime(2023, 6, 12, 14, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1228552869, 'comment_body': 'populate `atomcoords`, `atommasses`, `atomnos` https://cclib.github.io/data_notes.html#atomcoords', 'comment_created': datetime.datetime(2023, 6, 13, 18, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1228556921, 'comment_body': 'You can use [this](https://github.com/cclib/cclib/blob/1aedede314a594442c4248453f864725c225c298/cclib/parser/utils.py#L221) to get the atomnos from the symbols', 'comment_created': datetime.datetime(2023, 6, 13, 18, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1228557929, 'comment_body': 'These will populate `mocoeffs`', 'comment_created': datetime.datetime(2023, 6, 13, 18, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1229305546, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2023, 6, 14, 9, 30, 1, tzinfo=datetime.timezone.utc), 'commenter': 'weronikazak', 'type': 'User'}, {'comment_id': 1234167762, 'comment_body': 'This trigger should be something like `$VEC` or something that appears in the .dat files', 'comment_created': datetime.datetime(2023, 6, 19, 14, 50, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}]","[{'commit_sha': '0b8d0f556677c7a23aed3ed208869ee9d3c8ab66', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ba1ed92f28a918892a9dd2ed2fe9a810e0968ea', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5af617b58c8b3acb4d7018395a73be98adb4e17c', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd12585e59d6d8966cdf94c86192707beb830a233', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17699f85f633a746c57ab27057b16d161170842d', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20c27b115d4145f6e381908476ee3b4c19929ad6', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5dbde05e5b5cc70810981a4b9457b244d6b737c', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0205321808346d0581eb8de67b52771d36607b38', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51bbc5729a5a9584533cf311e72d94aa27414e4d', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28a88f76c030dd863d47b71f9de410ffc4a0d4f2', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d014e63891cfd29277f40018dd319e483a06a6b', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b24c95fe4ad3b1b6482bbd1a5170fdc598a78da', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a3b6a9699709914e735a4e1ca85f483398ebd67', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e9b0c30a5b6b5a1f3791ab894b2962cba7005dc', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7af83822d8d8a27f78fcb567ae84112b79b1ede9', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '182c4e3b688aa891168f5a08bebc0c0e13bd0484', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28521ae4c9e564b28e03bbc3fefb279224272771', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a2b2c810a3166d4705707c7c45417891e20409c', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ebdd34d742c87bd1c18927d4af6215d67b6d6aa', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6aa1c36913d72288a2c2e649bd4f733874a577e', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6527e4a974f9d9e1e07d1021ccf846ef138b4640', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '390be708d0157890cefdc2b0b21e96730f464825', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49b37ae0de64499c31a4e138631aab15fd024568', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f9ea702880e285aa78e3f17bbc5bcfb0cb79a50', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cddccc437366d791dd3ee861539e92f0902006ea', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '452d339cce646cc05cc2ad1df69ef32ca3c56b9e', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82200d0eeedf3aac334808bc91ca341459c4d62', 'committer_username': 'berquist', 'committer_name': 'Eric Berquist', 'committer_email': None, 'commit_date': datetime.datetime(2011, 4, 13, 18, 1, 12, tzinfo=datetime.timezone.utc)}]",Weronika Zak,34200460,hello@weronika.link,User,,51,,17,32
1398365117,Parser for Gamess .dat - continuation and fixes,"In this PR I'll try to extract information from [this line](https://github.com/cclib/cclib/blob/master/data/GAMESS/basicGAMESS-US2018/water_mp2.dat#L62) downwards. I branched it off my previous branch `GAMESS-dat-parser`.
The previous PR can be found [here](https://github.com/cclib/cclib/pull/1208).",True,1214,https://api.github.com/repos/cclib/cclib/pulls/1214,https://github.com/cclib/cclib/pull/1214,closed,333,286,2,28,1,27,1,0,[{'name': 'GAMESS'}],2023-06-19 14:38:08+00:00,2023-07-06 03:24:48+00:00,1428400.0,"16 days, 12:46:40","[{'comment_id': 1243103682, 'comment_body': 'These can be parsed into existing objects `nmo`, `nbasis`, and `natom`', 'comment_created': datetime.datetime(2023, 6, 27, 3, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'amandadumi', 'type': 'User'}, {'comment_id': 1243105623, 'comment_body': "" Most of what you've placed in 'atom info' will have cclib objects to populate. The exception is for center number, which is not stored but instead correspond to the index in the arrays storing other data. As an example self.atomnos[0]=8. Where 0 is informed by oxygen being the first atom listed in gamessdat files, which I'm the file is labeled center 1.\r\n\r\n If you aren't able to find the appropriate key from here, let us know: https://cclib.github.io/data.html"", 'comment_created': datetime.datetime(2023, 6, 27, 3, 45, 52, tzinfo=datetime.timezone.utc), 'commenter': 'amandadumi', 'type': 'User'}, {'comment_id': 1243106214, 'comment_body': ' 171-182 seem like a repeat of 136-147', 'comment_created': datetime.datetime(2023, 6, 27, 3, 47, 19, tzinfo=datetime.timezone.utc), 'commenter': 'amandadumi', 'type': 'User'}, {'comment_id': 1243107005, 'comment_body': 'This is  repeat of code from above. This may have just been from the rebase or something. not sure.', 'comment_created': datetime.datetime(2023, 6, 27, 3, 47, 58, tzinfo=datetime.timezone.utc), 'commenter': 'amandadumi', 'type': 'User'}, {'comment_id': 1243107982, 'comment_body': 'This will also  be mapped into an exsisting object of `atombasis`.', 'comment_created': datetime.datetime(2023, 6, 27, 3, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'amandadumi', 'type': 'User'}, {'comment_id': 1243110617, 'comment_body': 'just a few extra lines that need cleaned from the rebase here. ', 'comment_created': datetime.datetime(2023, 6, 27, 3, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'amandadumi', 'type': 'User'}, {'comment_id': 1243128380, 'comment_body': ""The type assignment should be able to inform the construction of the 'gbasis' object. \n\nWe'll need to chat about this a bit though as this would require some experience in atomic basis sets, but we should be able to plan it out together. For now this is just a comment and not yet a request for a specific change. \n\n"", 'comment_created': datetime.datetime(2023, 6, 27, 4, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'amandadumi', 'type': 'User'}, {'comment_id': 1244309067, 'comment_body': ""I had a look, and it seems like `charge`s will be assigned to `atomcharges`. \r\n\r\nI also recall Shiv mentioning the `utils.PeriodicTable` class, and I assume the way to go is by doing `pt.number[symbol]`, where 'pt' is an instance of the class. But I'm not sure what to do with `val1`, `val2`, and `val3`. Are these `atomcoords`?"", 'comment_created': datetime.datetime(2023, 6, 27, 20, 23, 20, tzinfo=datetime.timezone.utc), 'commenter': 'weronikazak', 'type': 'User'}, {'comment_id': 1247870688, 'comment_body': ""Maybe it is because it is still truly a WIP, but as soon as you can see if something is not present so can't be parsed at all, mark it like you did for package versions, otherwise someone will come back to it later and think that it might be possible to implement, then get confused when looking at the output files."", 'comment_created': datetime.datetime(2023, 6, 30, 13, 32, 16, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1247872622, 'comment_body': ""This should actually be a list of float (or list of list of float, can't remember) but that will become apparent once you start work on `testMP.py`."", 'comment_created': datetime.datetime(2023, 6, 30, 13, 34, 14, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1247874423, 'comment_body': 'What is `CHANGENAME`?', 'comment_created': datetime.datetime(2023, 6, 30, 13, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1247875647, 'comment_body': 'I would again avoid regex here and map `int` over `line.split()[2:]`.', 'comment_created': datetime.datetime(2023, 6, 30, 13, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1247875871, 'comment_body': 'Same comment about the regex.', 'comment_created': datetime.datetime(2023, 6, 30, 13, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1247933597, 'comment_body': ""I wasn't sure what key name I should choose, as there are multiple, and I'm not sure on the differences.\r\nhttps://cclib.github.io/data_notes.html#atomcharges"", 'comment_created': datetime.datetime(2023, 6, 30, 14, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'weronikazak', 'type': 'User'}, {'comment_id': 1247948309, 'comment_body': ""I understand now; this is a little confusing.  `atomcharges` is the result of an _output_: those atomic charge schemes are a calculation done for an analysis, and each one is an approximation for what the partial charge on each atom might be.\r\n\r\nThis charge column is an *input* for what the nuclear charge is entering the calculation and is almost always going to be the atomic number.\r\n\r\nWe have to be careful though, because that doesn't mean it's `atomnos`.  You could modify the charge of, say, oxygen, to be 3 or 3.4 going into the calculation, but its atomic number is still 8.  `atomnos` in this case needs to be calculated from the atomic symbol and `PeriodicTable`."", 'comment_created': datetime.datetime(2023, 6, 30, 14, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1247951194, 'comment_body': 'Just to be explicit: this will not set `atomcharges`.  That will be `POPULATION ANALYSIS` after some manipulation.', 'comment_created': datetime.datetime(2023, 6, 30, 14, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1253857522, 'comment_body': 'This is already available as https://github.com/cclib/cclib/blob/2b947c1d0d931d11d1b6fcf5b08eea5999a418a2/cclib/parser/logfileparser.py#L248.', 'comment_created': datetime.datetime(2023, 7, 6, 2, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1253858255, 'comment_body': 'You can get rid of these...', 'comment_created': datetime.datetime(2023, 7, 6, 2, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1253858512, 'comment_body': '...and replace with https://github.com/cclib/cclib/blob/2b947c1d0d931d11d1b6fcf5b08eea5999a418a2/cclib/parser/logfileparser.py#L472\r\nlike `self.append_attribute(""atommasses"", mass)`.', 'comment_created': datetime.datetime(2023, 7, 6, 2, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1253860650, 'comment_body': ""This is ok for now, but is going to be wrong when using a different [basis set](https://en.wikipedia.org/wiki/Basis_set_%28chemistry%29) (cc-pVDZ, def2-QZVPP, pcseg-0, <insert cryptic name here>).  It's going to be hard to do properly because basis set names in GAMESS are non-standard (see [this soup](https://github.com/cclib/cclib/blob/2b947c1d0d931d11d1b6fcf5b08eea5999a418a2/cclib/parser/gamessparser.py#L119) that needs to be completely rewritten)."", 'comment_created': datetime.datetime(2023, 7, 6, 2, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1253866020, 'comment_body': ""I think this is from the previous PR, so apologies for missing it.  If you're going to use a regex here, which might actually be necessary later on, don't call the result `match`, since it's the name of a built-in keyword.  (A similar thing would be using `list` as a variable name.)  I see `mtch` sometimes but the name is up to you."", 'comment_created': datetime.datetime(2023, 7, 6, 3, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1253869084, 'comment_body': ""This isn't atom number.  I compared the results with `EIGENVECTORS` in a regular output file, and this is definitely the molecular orbital number (one-based), and each element (column) is the atomic orbital."", 'comment_created': datetime.datetime(2023, 7, 6, 3, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1253874688, 'comment_body': ""You don't need to increment this if you set it directly as `int(line.split()[0])` of the last line."", 'comment_created': datetime.datetime(2023, 7, 6, 3, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1253878268, 'comment_body': ""It took me a moment to understand what this does.  If it works, it's fine.  What I had suggested was using\r\n```python\r\nline[0:2], line[2:5], line[5:5+15], line[20:20+15], line[35:35+15], line[50:50+15], line[65:65+15]\r\n```\r\nsince the width of each field is fixed."", 'comment_created': datetime.datetime(2023, 7, 6, 3, 22, 42, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1254919334, 'comment_body': ""That's what I did for `nbasis`. `nmo` is the number of all vectors per one molecular orbital."", 'comment_created': datetime.datetime(2023, 7, 6, 21, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'weronikazak', 'type': 'User'}, {'comment_id': 1254940600, 'comment_body': 'Might not be the best place to suggest it, but it would actually be pretty cool if the `self.extend_attribute(...)` [function](https://github.com/cclib/cclib/blob/2b947c1d0d931d11d1b6fcf5b08eea5999a418a2/cclib/parser/logfileparser.py#L479C9-L479C15) had an additional optional parameter for the index (or have a new function that does it). I could use it instead of having to write `self.mocoeffs[-1].extend(mocoeff)`. \r\n\r\nI could even give it a shot and try to implement it myself if that sounds like a good idea.', 'comment_created': datetime.datetime(2023, 7, 6, 21, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'weronikazak', 'type': 'User'}, {'comment_id': 1255937512, 'comment_body': ""I think this is a good idea in one form or another.  Can you make a new issue?  There are lots of other things that these `self.*_attribute` could use, but we haven't kept good track of them."", 'comment_created': datetime.datetime(2023, 7, 7, 14, 44, 37, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}]","[{'commit_sha': '3a8e2790406264fd90d99ea6ef57b8a103f34e30', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eafc303af321e162610996af4bdeb659325a9ce', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d56f02fe674d2bb70e7c5340aed1f62c9c6d3a0', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '708e172ce20ea0e196cea40e502ececa069a4a38', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d4af395b25e8309d6f565a4c98408cbf1c54295', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e10d29483f05db775c59203569cc3876f117939', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edf730fe0e90c03f4b87aceff19439c56cd02f14', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afda670ae7b07fd5f7a7960dc5dd5ffea24e5fc1', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a264dd49e608ef68dab3927a12cf6962f0fa566c', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0666d3a17a158d69b6c4a4fa2493a66af97f41d8', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99ea1435473b11c687e14884e2072648e2409dcd', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '854285abbdc45d4c1a179370c94e72d87e3ac3ac', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '705cac85782c1e2a0f727e2b0e1ece34ec27140e', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c8ee76bb568bef63aaa82b2647b5d8839a2f3c7', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68056adc6f9968f22744b76c267aea7765d43ee4', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29d069b3cfe0863ac5e39330cd9bbb7117a6c337', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0646d16994ac45e2d2e1fa949d018fcfe7f6e27c', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e35ece6438706955ea27dbf9011232380f31da02', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a767b303ddaf64e1d1ef5f0f4ad6db60615c556', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeaab09880bf7a405f54309c3a55f78d43b8472a', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f109efd24f8f78623bdbf64ada4bfe5cfaa748c3', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2566242878f2b50c98fbb3d519b882b269271803', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccde5d618d12912e8611fcb7e5aca49200dd0715', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b78fc52efa8fc6d7597ae04fb317651ab5db9f1', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59f2314389655fb36f9fb945f4216e14413fa357', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0b3d9371dc2ecffe2a142dc077efdaa9e128054', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b1a999778c134c083ac407190ab94b6cf6630ef', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74a5667afaad639ea29e31ce4d10478fe179e87d', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}]",Weronika Zak,34200460,hello@weronika.link,User,,51,,17,32
1426412337,Add optional index parameter to extend_attribute,"This pull request addresses the issue raised in #1224 by implementing the suggested optional parameter to an already existing function. 

After testing, I can confirm that the implementation works seamlessly with existing parsers. Your review and feedback on these changes are highly appreciated!",True,1228,https://api.github.com/repos/cclib/cclib/pulls/1228,https://github.com/cclib/cclib/pull/1228,closed,7,3,1,2,0,1,1,0,[{'name': 'parsers'}],2023-07-09 19:28:18+00:00,2023-07-13 17:11:33+00:00,337395.0,"3 days, 21:43:15","[{'comment_id': 1258146158, 'comment_body': '```suggestion\r\n        if isinstance(getattr(self, name), list) and index is not None:\r\n```\r\nChecks against `None` should always be explicit, unlike checking for an empty container or string.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}]","[{'commit_sha': '692e45f55fcd5b2e00786ec371e793fa91e8ff21', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c3857918192056d9fe6c8d84d0769bd0a4192bc', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}]",Weronika Zak,34200460,hello@weronika.link,User,,51,,17,32
1434878052,Little fixes to the Gamess .dat parser,Implemented the changes proposed in #1214 ,True,1229,https://api.github.com/repos/cclib/cclib/pulls/1229,https://github.com/cclib/cclib/pull/1229,closed,39,59,2,5,0,6,2,0,"[{'name': 'parsers'}, {'name': 'GAMESS'}]",2023-07-14 14:28:51+00:00,2023-07-24 15:53:32+00:00,869081.0,"10 days, 1:24:41","[{'comment_id': 1264227182, 'comment_body': ""let's not set `self.metadata['basis_set']` this is not transferable "", 'comment_created': datetime.datetime(2023, 7, 14, 22, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1264229277, 'comment_body': ""Ok this doesn't always have `E(R` for example\r\n`E(U-B3LYP)=        0.0000000000, E(NUC)=  445.9370123699,   30 ITERS`\r\nand the stuff in the parentheses can change.\r\n `E(R-B3LYP)=     -384.6644423987, E(NUC)=  445.9370123699,   20 ITERS`\r\n but the structure/order of stuff is always the same.\r\n \r\n I would look for `E(` and the split the line. `line.split()[1]` should be put into `self.scfenergies`"", 'comment_created': datetime.datetime(2023, 7, 14, 22, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1264243247, 'comment_body': 'The first two numbers of each of these lines \r\n```\r\n 1  1 7.23252350E-01 3.22989507E-02 1.04897051E-03-4.40452175E-05 0.00000000E+00\r\n ```\r\n don\'t mean much. The first is the mo number we are currently writing out and the second is just a counter for how many lines we have written out.\r\n\r\nI recommend we do something like this:\r\n```\r\nmo_number = int(line[0:2])\r\nline = line[5:]\r\nfixed_width_size = 15\r\nchunks, chunk_size = len(line), len(line)//fixed_width_size\r\nmo_coeff = [ float(line[i:i+chunk_size]) for i in range(0, chunks, chunk_size) ] \r\n# the entire line is not guaranteed to be there but they are always the same width\r\nif mo_number == str(len(self.mocoeffs)):\r\n    self.extend_attribute(""mocoeffs"", mocoeff, -1)\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 23, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1264244338, 'comment_body': ""Let's set `nbasis` based on the `len` of the first mocoeff"", 'comment_created': datetime.datetime(2023, 7, 14, 23, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1272300281, 'comment_body': 'in* ', 'comment_created': datetime.datetime(2023, 7, 24, 13, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}]","[{'commit_sha': 'e07f01eeddd1c185795fb2aed69351a4efb477b6', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e292b5adbaca2c3018ebdc22c648a94ee7cec63', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f204bbb9346e4487f8515e43a10a2694c1fb9e', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '367d9c1f537b01946d99863a9a1dfb9e476d2a79', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '538d888a489cda7ab32a4cf05ff22e8b1b68cb90', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}]",Weronika Zak,34200460,hello@weronika.link,User,,51,,17,32
1441772429,Parser for NBO files,Started a new parser for the NBO files.,True,1233,https://api.github.com/repos/cclib/cclib/pulls/1233,https://github.com/cclib/cclib/pull/1233,closed,290,0,1,5,0,4,2,0,"[{'name': 'parsers'}, {'name': 'NBO'}]",2023-07-19 21:35:16+00:00,2023-07-28 16:08:05+00:00,757969.0,"8 days, 18:32:49","[{'comment_id': 1269444560, 'comment_body': '```suggestion\r\nclass NBO(logfileparser.Logfile):\r\n```', 'comment_created': datetime.datetime(2023, 7, 20, 13, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1269444788, 'comment_body': 'Naming throughout.', 'comment_created': datetime.datetime(2023, 7, 20, 13, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1269447464, 'comment_body': ""It is possible (but highly unlikely) that there will not be a space after the `(`.  It would happen if the principal quantum number is 10 or above.  It's probably ok as it is now..."", 'comment_created': datetime.datetime(2023, 7, 20, 13, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1276355992, 'comment_body': 'Please name this variable something else more descriptive that will also follow `snake_case`.', 'comment_created': datetime.datetime(2023, 7, 27, 14, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}]","[{'commit_sha': '4c7fc4b82f16190a1f481ac3407f4327e9506716', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a9d12c170da7e2ed081d6e2f1679069e0c6362f', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9e4807b6034afbacecc06d57cc79fc25bea61e7', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4709d36c5f48e3a89185de3082218a17979e5971', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '647b462853aa6d2425f3e53f282ac096555a922f', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}]",Weronika Zak,34200460,hello@weronika.link,User,,51,,17,32
1461309827,NBO Parser: Mapping extracted values to attributes,"This pull request is all about mapping the values extracted in the previous version of the NBO parser (#1233 ) to their respective attributes. The aim is to map the parsed data to the relevant elements, ensuring a more organized representation of the results.",True,1244,https://api.github.com/repos/cclib/cclib/pulls/1244,https://github.com/cclib/cclib/pull/1244,closed,40,5,1,2,0,2,2,0,"[{'name': 'parsers'}, {'name': 'NBO'}]",2023-08-03 11:36:03+00:00,2023-08-06 16:27:29+00:00,276686.0,"3 days, 4:51:26","[{'comment_id': 1283242521, 'comment_body': ""We'll need to discuss if we want just a dict instead of a list of dict."", 'comment_created': datetime.datetime(2023, 8, 3, 13, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1283244375, 'comment_body': 'I would put a variable like `charges = []` outside the loop and then have a single `self.atomcharges[""nbo""] = charges` after the loop is done.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}]","[{'commit_sha': '00d76f492919c18226752ea86054481d82838f22', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a769486d5c92c78f2d6a469287a9c83529cc6cb0', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}]",Weronika Zak,34200460,hello@weronika.link,User,,51,,17,32
1470093482,Create and test new attributes for the NBO parser,"This pull request aims to introduce new attributes for the NBO parser, along with corresponding tests for these attributes.",True,1251,https://api.github.com/repos/cclib/cclib/pulls/1251,https://github.com/cclib/cclib/pull/1251,closed,104,31,8,16,15,8,1,0,[{'name': 'NBO'}],2023-08-10 10:31:16+00:00,2023-08-29 22:04:22+00:00,1683186.0,"19 days, 11:33:06","[{'comment_id': 1291442699, 'comment_body': 'This might need to be `dvb_sp.nbo.out` for just the NBO section.', 'comment_created': datetime.datetime(2023, 8, 11, 14, 56, 22, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1296325131, 'comment_body': ""'natural population analysis' -> 'population analysis' since this can hold other types of population analyses.\r\nalso I think you forgot to change the type from `list` to `dict` here"", 'comment_created': datetime.datetime(2023, 8, 16, 19, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shivupa', 'type': 'User'}, {'comment_id': 1297339622, 'comment_body': 'Can you put this in alphabetical order regarding the parser name?', 'comment_created': datetime.datetime(2023, 8, 17, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1297341203, 'comment_body': 'Since only the key name is different from Mulliken, Lowdin, ... in the superclass, can you factor this out into a helper function?', 'comment_created': datetime.datetime(2023, 8, 17, 14, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1297357004, 'comment_body': 'I\'m not sure this test is getting run, because\r\n```\r\n>>> l = [1, 2, 3]\r\n>>> import typing\r\n>>> isinstance(l, typing.List)\r\nTrue\r\n>>> isinstance(l, typing.List[int])\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""/Users/ejberqu/.pyenv/versions/3.10.11/lib/python3.10/typing.py"", line 994, in __instancecheck__\r\n    return self.__subclasscheck__(type(obj))\r\n  File ""/Users/ejberqu/.pyenv/versions/3.10.11/lib/python3.10/typing.py"", line 997, in __subclasscheck__\r\n    raise TypeError(""Subscripted generics cannot be used with""\r\nTypeError: Subscripted generics cannot be used with class and instance checks\r\n```\r\n`typing` is also not for runtime type checking, if you wanted to do that over abstract container types it would be from `collections.abc`, and then checking element types would be a list comprehension over the container.', 'comment_created': datetime.datetime(2023, 8, 17, 15, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1297358135, 'comment_body': '👍 ', 'comment_created': datetime.datetime(2023, 8, 17, 15, 3, 28, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1297359353, 'comment_body': 'Didn\'t we want `self.populations[""npa""] = {""nao"": ..., ...}`?', 'comment_created': datetime.datetime(2023, 8, 17, 15, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1297360664, 'comment_body': '```suggestion\r\n        populations -- population analyses (dict)\r\n```', 'comment_created': datetime.datetime(2023, 8, 17, 15, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}]","[{'commit_sha': '477f314155f2e3787a4c3091265c3ea0c354974a', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d488088027d52e848c40ad213a977d8bd282052', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d90c48cec3066b2fb3531f33d508ec1599c58e9', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f76a70f8d509eec6ed8050bc6551523f50f321c', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '419a78bfeaab253c2dd5e4527df552d10d7271bf', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f33c74e690ee0c4d6c4339764bdcd76b04bafadd', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86ef524dccc3a9653bcfba3866c11cec86854d73', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93c8f09b0b2c93698ef55469380901914d568bd5', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c00c8bf4263c62721ba9892a206567e2ab4b039', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '262bf1e3efe02955aa53501984f914bbfb51c297', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9757afa53bafd721e1a67e0c401ec1a43d982c88', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f90fb5b3ca2de9b44a5b90bf72e0bee7f6fb9376', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a3ff8e085cebe8535c02a1160bc2b0239defa44', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4aeae2feffe5086410a113424c86e704850a9983', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd07b261536ccdf61c141d3c6c49f3d8ddfa19803', 'committer_username': 'berquist', 'committer_name': 'Eric Berquist', 'committer_email': None, 'commit_date': datetime.datetime(2011, 4, 13, 18, 1, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f7dea17ab0c305c5818683a52f9f6ce60cc7487', 'committer_username': 'berquist', 'committer_name': 'Eric Berquist', 'committer_email': None, 'commit_date': datetime.datetime(2011, 4, 13, 18, 1, 12, tzinfo=datetime.timezone.utc)}]",Weronika Zak,34200460,hello@weronika.link,User,,51,,17,32
1484614541,Add attribute _dictofdicts,"Solving the problem reported in issue #1257.
I created a new attribute called `_dictofdicts` and made changes to the `listify()` and `arrify()` functions to include this new type.",True,1258,https://api.github.com/repos/cclib/cclib/pulls/1258,https://github.com/cclib/cclib/pull/1258,closed,49,1,2,3,0,2,1,0,[{'name': 'maintenance'}],2023-08-22 11:50:38+00:00,2023-08-26 15:22:24+00:00,358306.0,"4 days, 3:31:46","[{'comment_id': 1303793171, 'comment_body': 'Can you break this up onto multiple lines?', 'comment_created': datetime.datetime(2023, 8, 24, 4, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'berquist', 'type': 'User'}, {'comment_id': 1305388508, 'comment_body': ""> I meant put the comprehensions over multiple lines. Converting these from comprehensions makes them harder to read.\r\n\r\nI changed it to this format. Not sure if that's what you meant?"", 'comment_created': datetime.datetime(2023, 8, 25, 8, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'weronikazak', 'type': 'User'}]","[{'commit_sha': '294aeb0c9cba71eb205dc7b84643153e80631611', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6367609f846d54c35be7b0464216a9a7bcfe4581', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99676fc89893d25e9f293a95c554f8ab29d0fe1f', 'committer_username': 'weronikazak', 'committer_name': 'Weronika Zak', 'committer_email': 'hello@weronika.link', 'commit_date': datetime.datetime(2017, 12, 3, 1, 47, 32, tzinfo=datetime.timezone.utc)}]",Weronika Zak,34200460,hello@weronika.link,User,,51,,17,32

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
15514912,cclib,cclib/cclib,Python,166,324,20,83,5037,180,26,20,"[{'id': 1484614541, 'number': 1258, 'closed': datetime.datetime(2023, 8, 26, 15, 22, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 22, 11, 50, 38, tzinfo=datetime.timezone.utc), 'time_taken': 358306.0, 'time_delta': '4 days, 3:31:46', 'additions': 49, 'deletions': 1, 'state': 'closed'}, {'id': 1470093482, 'number': 1251, 'closed': datetime.datetime(2023, 8, 29, 22, 4, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 10, 31, 16, tzinfo=datetime.timezone.utc), 'time_taken': 1683186.0, 'time_delta': '19 days, 11:33:06', 'additions': 104, 'deletions': 31, 'state': 'closed'}, {'id': 1461309827, 'number': 1244, 'closed': datetime.datetime(2023, 8, 6, 16, 27, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 11, 36, 3, tzinfo=datetime.timezone.utc), 'time_taken': 276686.0, 'time_delta': '3 days, 4:51:26', 'additions': 40, 'deletions': 5, 'state': 'closed'}, {'id': 1441772429, 'number': 1233, 'closed': datetime.datetime(2023, 7, 28, 16, 8, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 21, 35, 16, tzinfo=datetime.timezone.utc), 'time_taken': 757969.0, 'time_delta': '8 days, 18:32:49', 'additions': 290, 'deletions': 0, 'state': 'closed'}, {'id': 1434878052, 'number': 1229, 'closed': datetime.datetime(2023, 7, 24, 15, 53, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 14, 14, 28, 51, tzinfo=datetime.timezone.utc), 'time_taken': 869081.0, 'time_delta': '10 days, 1:24:41', 'additions': 39, 'deletions': 59, 'state': 'closed'}, {'id': 1426412337, 'number': 1228, 'closed': datetime.datetime(2023, 7, 13, 17, 11, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 9, 19, 28, 18, tzinfo=datetime.timezone.utc), 'time_taken': 337395.0, 'time_delta': '3 days, 21:43:15', 'additions': 7, 'deletions': 3, 'state': 'closed'}, {'id': 1398365117, 'number': 1214, 'closed': datetime.datetime(2023, 7, 6, 3, 24, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 14, 38, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1428400.0, 'time_delta': '16 days, 12:46:40', 'additions': 333, 'deletions': 286, 'state': 'closed'}, {'id': 1375755110, 'number': 1208, 'closed': datetime.datetime(2023, 6, 21, 15, 40, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 2, 13, 8, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1650695.0, 'time_delta': '19 days, 2:31:35', 'additions': 112828, 'deletions': 1, 'state': 'closed'}]"
