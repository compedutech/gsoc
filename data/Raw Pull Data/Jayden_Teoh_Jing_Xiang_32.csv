pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1376983803,Cache patron's loans to reduce IA requests,"<!-- What issue does this PR close? -->
Closes #7591 

<!-- What does this PR achieve? [feature|hotfix|fix|refactor] -->
Implement cache logic that caches patron's loan with 5 minutes time-to-live. If this 5 minute window has passed or if patron has borrowed another book (via `/borrow/ia/$(ocaid)`), then the cache will be invalidated => loans will be fetched again via api.

### Stakeholders
<!-- @ tag stakeholders of this bug -->
@mekarpeles 

<!-- Attribution Disclaimer: By proposing this pull request, I affirm to have made a best-effort and exercised my discretion to make sure relevant sections of this code which substantially leverage code suggestions, code generation, or code snippets from sources (e.g. Stack Overflow, GitHub) have been annotated with basic attribution so reviewers & contributors may have confidence and access to the correct context to evaluate and use this code. -->
",True,7929,https://api.github.com/repos/internetarchive/openlibrary/pulls/7929,https://github.com/internetarchive/openlibrary/pull/7929,closed,83,6,5,33,9,36,2,1,"[{'name': 'Priority: 1'}, {'name': 'Needs: Patch Deploy'}]",2023-06-03 13:02:58+00:00,2023-12-08 23:13:01+00:00,16279803.0,"188 days, 10:10:03","[{'comment_id': 1231032430, 'comment_body': '`use_cache=False` so that the default case is not to use cache and as we discover opportunities we can ""opt-in"" rather than ""opt-out"" (because this seems safer)\r\n\r\n```suggestion\r\ndef get_loans(user, use_cache=False):\r\n```', 'comment_created': datetime.datetime(2023, 6, 15, 13, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1231037006, 'comment_body': '```suggestion\r\ndef get_loans_of_user(user_key, use_cache=False):\r\n```', 'comment_created': datetime.datetime(2023, 6, 15, 13, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1231045375, 'comment_body': ""Suggestion: We could use https://github.com/internetarchive/openlibrary/blob/master/openlibrary/utils/dateutil.py#L13 `utils.dateutils.MINUTE_SECS * 5` to demystify the magic `300` constant\r\n\r\n```suggestion\r\n            and time.time() - cached_loans[args]['timestamp'] < 300\r\n```"", 'comment_created': datetime.datetime(2023, 6, 15, 13, 46, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1231060560, 'comment_body': ""One risk of rolling our own cache method (rather than using memcached) is for e.g. 100k active patrons, assuming 10 loans is something like 10kb, then we'll be using 1gb of RAM.\r\n\r\nAnother option is to serialize the data and store in memcached"", 'comment_created': datetime.datetime(2023, 6, 15, 13, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1236273774, 'comment_body': ""Now that your decorator has been removed, this will no longer work.  I think that you'll have to do something like this:\r\n`lending.get_cached_user_loans(user.key).memcache_delete()`"", 'comment_created': datetime.datetime(2023, 6, 21, 4, 44, 25, tzinfo=datetime.timezone.utc), 'commenter': 'jimchamp', 'type': 'User'}, {'comment_id': 1236274285, 'comment_body': '```suggestion\r\n            loans = get_loans(user)\r\n```\r\nSince `use_cache` defaults to `False`, there is no need to change this function call.', 'comment_created': datetime.datetime(2023, 6, 21, 4, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jimchamp', 'type': 'User'}, {'comment_id': 1236279316, 'comment_body': '```suggestion\r\n    user_is_below_loan_limit = user.get_loan_count() < user_max_loans\r\n```\r\nNo need to change this code, as `use_cache` defaults to `False`.', 'comment_created': datetime.datetime(2023, 6, 21, 4, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jimchamp', 'type': 'User'}, {'comment_id': 1236403186, 'comment_body': 'Revert this code.  This function is only used when the book is borrowed, so we want the actual loan status (not a cached value).', 'comment_created': datetime.datetime(2023, 6, 21, 5, 51, 58, tzinfo=datetime.timezone.utc), 'commenter': 'jimchamp', 'type': 'User'}, {'comment_id': 1236415448, 'comment_body': ""Let's leave this function unchanged, and call either this or `get_cached_user_loans` from `User.get_loan_for()`."", 'comment_created': datetime.datetime(2023, 6, 21, 5, 55, 41, tzinfo=datetime.timezone.utc), 'commenter': 'jimchamp', 'type': 'User'}, {'comment_id': 1236428517, 'comment_body': 'I think that this should be reverted too.', 'comment_created': datetime.datetime(2023, 6, 21, 6, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'jimchamp', 'type': 'User'}, {'comment_id': 1236430815, 'comment_body': ""```suggestion\r\nget_cached_user_loans = cache.memcache_memoize(\r\n    get_loans_of_user, key_prefix='lending.cached_loans', timeout=5 * dateutil.MINUTE_SECS\r\n)\r\n```\r\nThere's no need for the `ttl_for_cached_loans` variable.  Be sure to use `dateutil.MINUTE_SECS` instead of `cache.MINUTE_SECS`."", 'comment_created': datetime.datetime(2023, 6, 21, 6, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'jimchamp', 'type': 'User'}, {'comment_id': 1236435530, 'comment_body': '```suggestion\r\n        loans = lending.get_cached_user_loans(self) if use_cache else borrow.get_loans(self)\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 6, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'jimchamp', 'type': 'User'}, {'comment_id': 1245492152, 'comment_body': 'We should manually test some of these memcache deletes (and ensure these values are being deleted across all memcache instances) -- ol-mem[0,1,2]', 'comment_created': datetime.datetime(2023, 6, 28, 16, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1245497718, 'comment_body': ""Here we are going to want to store a unique value for each individual patron's loans, and therefore the cache key is going to have to be based on the user_key (which won't exist in the decorator declaration. We therefore need the key to be a lambda function, e.g.\r\n\r\nhttps://github.com/internetarchive/openlibrary/blob/master/openlibrary/core/models.py#L105"", 'comment_created': datetime.datetime(2023, 6, 28, 16, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1245499856, 'comment_body': 'In the borrow endpoint we definitely do not want to use the cached version of this function. What we may want to do is **clear** the cache here.', 'comment_created': datetime.datetime(2023, 6, 28, 16, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1245509707, 'comment_body': 'On line 20 here, what we probably want to do is fetch **all** of a patron\'s waiting loans at once?\r\n\r\nThere are 2 scenarios:\r\n1. Every time we\'re on a new book, trying to get the waiting loan and caching the result per each user & ocaid (this still means we\'re making lots of calls and caching them independently)\r\n2. In LoanStatus, we make a single bulk call for all a patron\'s holds (waiting list books) and re-cache this every ~10 minutes. So we\'d be caching per user. If a patron has lots of holds, this could be an expensive call, but doing it in bulk once every 10 minutes seems better than caching every hold separately and making a separate call for each hold.\r\n\r\n@jimchamp and I think the 2nd option may be the right way to go.\r\n\r\n```\r\ndef get_holds(user_key, optional_ocaid=None):\r\n    user_holds = cache.memoize(\r\n        engine=""memcache"", key=f""holds_{user_key}"", expires=10 * dateutil.MINUTE_SECS)(user_key)\r\n    if optional_ocaid:\r\n        # check if option_ocaid in user_holds\r\n        return next([hold for hold in user_holds if hold.ocaid == optional_ocaid] # psuedo code \r\n    return user_holds\r\n```', 'comment_created': datetime.datetime(2023, 6, 28, 16, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1246708630, 'comment_body': 'Consistent naming, suggesting: `get_cached_loans_of_user`', 'comment_created': datetime.datetime(2023, 6, 29, 14, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1246709688, 'comment_body': '```suggestion\r\n            lending.get_cached_loans_of_user(self.key)\r\n            if use_cache\r\n            else lending.get_loans_of_user(self.key)\r\n```', 'comment_created': datetime.datetime(2023, 6, 29, 14, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1246711802, 'comment_body': '```suggestion\r\n            return next(\r\n```', 'comment_created': datetime.datetime(2023, 6, 29, 14, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1246714514, 'comment_body': 'Suggestion: Possibly DRY these 2 functions into 1?', 'comment_created': datetime.datetime(2023, 6, 29, 14, 37, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1246719809, 'comment_body': '```suggestion\r\nget_cached_loans_of_user = cache.memcache_memoize(\r\n```', 'comment_created': datetime.datetime(2023, 6, 29, 14, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1246734124, 'comment_body': '```suggestion\r\n        return cls.find_all(user_key)\r\n```', 'comment_created': datetime.datetime(2023, 6, 29, 14, 52, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1253264694, 'comment_body': 'move to lending.py to avoid classmethod/instancemethod cache challenges', 'comment_created': datetime.datetime(2023, 7, 5, 15, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1253265658, 'comment_body': '`lending.` instead of `self`', 'comment_created': datetime.datetime(2023, 7, 5, 15, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1402583201, 'comment_body': '```suggestion\r\n    """"""The reason we unset the cache entry with `{}` is, in most cases when we want to fetch ground truth loans data it\'s because we\'re making an action on the book like return or borrow which affects one\'s loans. Therefore, we don\'t want to cache the response (which is pre-that-action) that comes back, instead, we unset so the action completes and the next time we visit a page that needs loans, we fetch loans from ground truth and cache that.\r\n    """"""\r\n    get_cached_loans_of_user.memcache_set(\r\n```', 'comment_created': datetime.datetime(2023, 11, 22, 18, 57, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1402584999, 'comment_body': '```suggestion\r\n    * dateutil.MINUTE_SECS,\r\n```', 'comment_created': datetime.datetime(2023, 11, 22, 18, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1409667039, 'comment_body': ""```suggestion\r\n    # Set patron's loans in cache w/ now timestamp\r\n```"", 'comment_created': datetime.datetime(2023, 11, 29, 17, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1409668006, 'comment_body': 'Q: why are we calling both IA loans (which presumably uses s3) and OL web.ctx loans store?', 'comment_created': datetime.datetime(2023, 11, 29, 17, 52, 35, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1409784190, 'comment_body': '```suggestion\r\n    get_cached_loans_of_user.memcache_set(\r\n        [user_key], {}, loans or [], time.time()\r\n    )  # rehydrate cache\r\n```', 'comment_created': datetime.datetime(2023, 11, 29, 19, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1409785281, 'comment_body': '```suggestion\r\n    # rehydrate cache\r\n    get_cached_user_waiting_loans.memcache_set(\r\n        [user_key], {}, result or [], time.time()\r\n    )\r\n    return result or []\r\n```', 'comment_created': datetime.datetime(2023, 11, 29, 19, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1409788044, 'comment_body': '```suggestion\r\n        all_user_waiting_loans = (\r\n            lending.get_cached_user_waiting_loans\r\n            if use_cache\r\n            else lending.get_user_waiting_loans\r\n        )(self.key)\r\n```', 'comment_created': datetime.datetime(2023, 11, 29, 19, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1409799802, 'comment_body': '```suggestion\r\n    get_cached_user_waiting_loans.memcache_set(\r\n        [user_key], {}, result or {}, time.time()\r\n```', 'comment_created': datetime.datetime(2023, 11, 29, 19, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1409800145, 'comment_body': '```suggestion\r\n    """"""Gets the waitingloans of the patron.\r\n```', 'comment_created': datetime.datetime(2023, 11, 29, 19, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1420781141, 'comment_body': '```suggestion\r\n        [user_key], {}, loans, time.time()\r\n```', 'comment_created': datetime.datetime(2023, 12, 8, 16, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}, {'comment_id': 1420935817, 'comment_body': ""This comment hasn't been terminated, and it's causing `testing` to crash."", 'comment_created': datetime.datetime(2023, 12, 8, 19, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jimchamp', 'type': 'User'}, {'comment_id': 1420971380, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 12, 8, 19, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'mekarpeles', 'type': 'User'}]","[{'commit_sha': '068315eed3bbb17b4da6b2f97645da2af38b3d2c', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c04399bb0e1821e700e226b89d36b43b4b679e2f', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2f2f1d58b083b08ca0f6212c261efab37f5b092', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9cdaa3c7554a8b17801bdd79e9b72898bb1166e', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a4964384a00d34a8cdb7e6557872fc76e18bfab', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7d0980ea1c5bc8d8ad80d3acecd30f3cd2e54d2', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2043a9868eef1e755ccf58e260ef25f4ce0cacc', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06f5e2fd52a9b5ba7fddedc22511f6a21091de8e', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20bc6a09bac13a854eec641a3a35c8b9bb8c89b1', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f2c4d756a5e71757fc673e511767b4636aef911', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a202ab51fbb617a3c9bcccbb7ea220fc2a9adc95', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd93ed2e69daf92c3b60d4e4e9faf4b28f1959589', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2464f377fa9d0ecd427684da0b9d33cb18ec39a1', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ceceb5a7298017ca31c014dfd284b67c98fd547a', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2d8681d48677ead321f97e1f58bee3ea472b423', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6992506f47259d7abe7281165ebfbeea9b1c7de1', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40964680124cf2b5294db2a699018ea5ace65274', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1735afd6145432cec04d37c5d68c3647aa51a88d', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81ecec724fe1348d3ad316556d5b0f8c1f61f53d', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af29a7f1bfcce91fa6e05bd57b5ae5aef571776e', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '644aa04a0dfea82255940f1cc8ed4f40ef5c4a5e', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5462b0e22679c55671d9bb43217fd2eaae895bb', 'committer_username': 'JaydenTeoh', 'committer_name': 'Jayden Teoh', 'committer_email': None, 'commit_date': datetime.datetime(2021, 9, 18, 2, 48, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e2dd8579973b2dea2469e4e490cf500ef08a9d', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84b31c312e3e4248987ed03429f76bbc8e20b9ba', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34703351767e9aee443d50c143fffe342f541d9f', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '986fd515a6a79563ec691de581d02efa1fc43f0f', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b16ba0b626906dc514d2d7b3669a24ae73634a39', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cde548e0e8a35057fb45cfa1d2d999ce2356e4e5', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ca4321175a11034e2e2a27173e52b77771487bd', 'committer_username': 'pre-commit-ci[bot]', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 13, 0, 9, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ca821118e7131d1fffbaf633131f880eda0843', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e93460332bb83b286da1d8389465c01a95196aa5', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ed97b3d15922b8426d0c4c8cdb1f7d271b1005', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c75b63ebf5c793928211124468bc310120a30a5', 'committer_username': 'mekarpeles', 'committer_name': 'Mek', 'committer_email': None, 'commit_date': datetime.datetime(2011, 8, 13, 20, 1, 14, tzinfo=datetime.timezone.utc)}]",Jayden Teoh,90945854,,User,,32,,2,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
69609,openlibrary,internetarchive/openlibrary,Python,1306,5057,171,433,18902,975,179,155,"[{'id': 1483866723, 'number': 8216, 'closed': datetime.datetime(2023, 8, 23, 15, 15, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 22, 3, 11, 22, tzinfo=datetime.timezone.utc), 'time_taken': 129822.0, 'time_delta': '1 day, 12:03:42', 'additions': 378, 'deletions': 9, 'state': 'closed'}, {'id': 1453676403, 'number': 8141, 'closed': datetime.datetime(2023, 9, 11, 0, 48, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 11, 24, 48, tzinfo=datetime.timezone.utc), 'time_taken': 3849813.0, 'time_delta': '44 days, 13:23:33', 'additions': 530, 'deletions': 5, 'state': 'closed'}, {'id': 1387170714, 'number': 7948, 'closed': None, 'created': datetime.datetime(2023, 6, 10, 14, 38, 21, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 32, 'deletions': 20, 'state': 'open'}, {'id': 1377618945, 'number': 7931, 'closed': datetime.datetime(2023, 6, 22, 17, 13, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 4, 8, 2, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1588260.0, 'time_delta': '18 days, 9:11:00', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 1376983803, 'number': 7929, 'closed': datetime.datetime(2023, 12, 8, 23, 13, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 13, 2, 58, tzinfo=datetime.timezone.utc), 'time_taken': 16279803.0, 'time_delta': '188 days, 10:10:03', 'additions': 83, 'deletions': 6, 'state': 'closed'}, {'id': 1376716848, 'number': 7928, 'closed': datetime.datetime(2023, 7, 3, 18, 43, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 3, 7, 12, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2633461.0, 'time_delta': '30 days, 11:31:01', 'additions': 152, 'deletions': 0, 'state': 'closed'}, {'id': 1348096428, 'number': 7861, 'closed': datetime.datetime(2023, 5, 17, 21, 4, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 12, 5, 40, 33, tzinfo=datetime.timezone.utc), 'time_taken': 487419.0, 'time_delta': '5 days, 15:23:39', 'additions': 12, 'deletions': 9, 'state': 'closed'}, {'id': 1303621897, 'number': 7766, 'closed': datetime.datetime(2023, 10, 20, 20, 44, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 5, 18, 34, 22, tzinfo=datetime.timezone.utc), 'time_taken': 17114995.0, 'time_delta': '198 days, 2:09:55', 'additions': 524, 'deletions': 27, 'state': 'closed'}, {'id': 1290076023, 'number': 7730, 'closed': datetime.datetime(2023, 6, 20, 22, 0, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 25, 16, 20, 14, tzinfo=datetime.timezone.utc), 'time_taken': 7537209.0, 'time_delta': '87 days, 5:40:09', 'additions': 102, 'deletions': 7, 'state': 'closed'}, {'id': 1281661505, 'number': 7688, 'closed': datetime.datetime(2023, 4, 5, 18, 41, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 19, 15, 48, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1479192.0, 'time_delta': '17 days, 2:53:12', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1277525448, 'number': 7669, 'closed': datetime.datetime(2023, 6, 4, 7, 54, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 15, 21, 2, 53, tzinfo=datetime.timezone.utc), 'time_taken': 6951110.0, 'time_delta': '80 days, 10:51:50', 'additions': 16, 'deletions': 3, 'state': 'closed'}, {'id': 1276390266, 'number': 7663, 'closed': datetime.datetime(2023, 5, 17, 14, 47, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 15, 8, 29, 38, tzinfo=datetime.timezone.utc), 'time_taken': 5465874.0, 'time_delta': '63 days, 6:17:54', 'additions': 8, 'deletions': 21, 'state': 'closed'}, {'id': 1272252741, 'number': 7634, 'closed': datetime.datetime(2023, 3, 28, 18, 4, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 12, 8, 4, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1418375.0, 'time_delta': '16 days, 9:59:35', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1272137370, 'number': 7633, 'closed': None, 'created': datetime.datetime(2023, 3, 11, 19, 35, 1, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 41, 'deletions': 4, 'state': 'open'}, {'id': 1264954980, 'number': 7600, 'closed': datetime.datetime(2023, 3, 9, 13, 17, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 18, 5, 10, tzinfo=datetime.timezone.utc), 'time_taken': 241913.0, 'time_delta': '2 days, 19:11:53', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1264913593, 'number': 7599, 'closed': datetime.datetime(2023, 3, 8, 16, 10, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 17, 36, 27, tzinfo=datetime.timezone.utc), 'time_taken': 167648.0, 'time_delta': '1 day, 22:34:08', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1263416451, 'number': 7597, 'closed': datetime.datetime(2023, 3, 13, 18, 53, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 5, 13, 43, 46, tzinfo=datetime.timezone.utc), 'time_taken': 709776.0, 'time_delta': '8 days, 5:09:36', 'additions': 7, 'deletions': 6, 'state': 'closed'}, {'id': 1255600931, 'number': 7575, 'closed': datetime.datetime(2023, 3, 8, 16, 26, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 27, 14, 44, 26, tzinfo=datetime.timezone.utc), 'time_taken': 783736.0, 'time_delta': '9 days, 1:42:16', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1254534403, 'number': 7574, 'closed': datetime.datetime(2023, 3, 22, 18, 8, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 26, 16, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2080215.0, 'time_delta': '24 days, 1:50:15', 'additions': 29, 'deletions': 5, 'state': 'closed'}, {'id': 1254264476, 'number': 7573, 'closed': datetime.datetime(2023, 3, 28, 15, 34, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 25, 17, 30, 9, tzinfo=datetime.timezone.utc), 'time_taken': 2671437.0, 'time_delta': '30 days, 22:03:57', 'additions': 6, 'deletions': 7, 'state': 'closed'}, {'id': 1254219259, 'number': 7572, 'closed': datetime.datetime(2024, 3, 6, 18, 57, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 25, 13, 59, 55, tzinfo=datetime.timezone.utc), 'time_taken': 32417837.0, 'time_delta': '375 days, 4:57:17', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1254152292, 'number': 7571, 'closed': datetime.datetime(2023, 3, 21, 19, 4, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 25, 9, 47, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2107032.0, 'time_delta': '24 days, 9:17:12', 'additions': 14, 'deletions': 0, 'state': 'closed'}]"
