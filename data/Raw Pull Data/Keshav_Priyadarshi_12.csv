pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
972412351,add initial config for vulntotal,"
Signed-off-by: Keshav Priyadarshi <git@keshav.space>",True,777,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/777,https://github.com/aboutcode-org/vulnerablecode/pull/777,closed,124,0,4,1,1,0,1,1,[{'name': 'VulnTotal'}],2022-06-20 16:05:44+00:00,2022-07-05 08:57:33+00:00,1270309.0,"14 days, 16:51:49",[],"[{'commit_sha': '303efca5669dd7eaf32b75dbd69dce8995fc9a63', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
987213529,add OSVDataSource,"- add OSV DataSource
- add test for OSV DataSource

Signed-off-by: Keshav Priyadarshi <git@keshav.space>",True,788,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/788,https://github.com/aboutcode-org/vulnerablecode/pull/788,closed,692,0,10,4,2,10,1,1,[{'name': 'VulnTotal'}],2022-07-05 09:39:05+00:00,2022-11-18 13:56:38+00:00,11765853.0,"136 days, 4:17:33","[{'comment_id': 967518038, 'comment_body': 'Can you use the newest style of license header for consistency?', 'comment_created': datetime.datetime(2022, 9, 9, 22, 22, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 967518454, 'comment_body': 'Same nit as above: we switch to simpler style of header', 'comment_created': datetime.datetime(2022, 9, 9, 22, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 967519091, 'comment_body': 'You can use a simpler approach and remove the line above `if ""vulns"" in response:` with this:\r\n```suggestion\r\n        for vuln in response.get(""vulns"") or []:\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 22, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 967519626, 'comment_body': 'Prefer this:\r\n`aliases.extend(vuln.get(""aliases"") or [])`\r\n', 'comment_created': datetime.datetime(2022, 9, 9, 22, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 967519748, 'comment_body': 'Same nit as above', 'comment_created': datetime.datetime(2022, 9, 9, 22, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 967520197, 'comment_body': 'Prefer a .get() in most cases to an if and [item] as suggested above', 'comment_created': datetime.datetime(2022, 9, 9, 22, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 967520304, 'comment_body': 'Always prefer extracting a variable.', 'comment_created': datetime.datetime(2022, 9, 9, 22, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 967520599, 'comment_body': 'How is this specific to OSV?\r\nMay be use a nuget.py for this instead', 'comment_created': datetime.datetime(2022, 9, 9, 22, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': '1fa44ce55516b9d9d294a8c68ae4ffec68b26d73', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab161ff6a76c92ec815c0d01460ce1a925c3e985', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '491c318ecc53712400e06c294c2d07e00ef73b72', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '536dd914236d71cb0294ca5cac9b7e7ad55c30ff', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
987222948,add DepsDataSource,"- add Deps DataSource
- add tests for Deps DataSource",True,789,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/789,https://github.com/aboutcode-org/vulnerablecode/pull/789,closed,1057,0,10,4,1,2,1,1,[{'name': 'VulnTotal'}],2022-07-05 09:47:58+00:00,2022-11-18 16:03:16+00:00,11772918.0,"136 days, 6:15:18","[{'comment_id': 967521318, 'comment_body': 'Same nit as elsewhere, please use the new simpler header', 'comment_created': datetime.datetime(2022, 9, 9, 22, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 1026608208, 'comment_body': 'Fixed in https://github.com/nexB/vulnerablecode/pull/789/commits/84100766a5f6be7a4183ee7c6f165cc1924b3123', 'comment_created': datetime.datetime(2022, 11, 18, 16, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': 'e30131fa14d66e139796923f0a5bcffd72e18096', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3235316c242e1c16e856c94fea5a6b6a01872a5b', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84100766a5f6be7a4183ee7c6f165cc1924b3123', 'committer_username': 'pombredanne', 'committer_name': 'Philippe Ombredanne', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 21, 45, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cdf24a89b14fdcc2b20eb60314630a15b4f1078', 'committer_username': 'pombredanne', 'committer_name': 'Philippe Ombredanne', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 21, 45, 6, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
1006681968,add GitHubDataSource,"- add GitHub DataSource
- add tests for GitHub DataSource",True,804,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/804,https://github.com/aboutcode-org/vulnerablecode/pull/804,closed,0,0,0,0,1,0,1,1,[{'name': 'VulnTotal'}],2022-07-25 01:16:42+00:00,2022-11-19 11:17:34+00:00,10144852.0,"117 days, 10:00:52",[],[],Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
1019066221,Add OSS-Index DataSource,"- add OSS-Index DataSource
- add tests for OSS-Index DataSource

Closes #820 ",True,829,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/829,https://github.com/aboutcode-org/vulnerablecode/pull/829,closed,0,0,0,0,1,2,1,1,[{'name': 'VulnTotal'}],2022-08-05 20:29:40+00:00,2022-11-19 11:17:34+00:00,9125274.0,"105 days, 14:47:54","[{'comment_id': 963106570, 'comment_body': 'please assert if length of component is 1 before accesing it', 'comment_created': datetime.datetime(2022, 9, 5, 19, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963106813, 'comment_body': 'Use more pythonic way to get objects from dictionary for example\r\n```suggestion\r\n    if response.get(""vulnerabilities""):\r\n```', 'comment_created': datetime.datetime(2022, 9, 5, 19, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}]",[],Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
1021400702,Vulnerablecode datasource,"- add Vulnerablecode datasource
- test VulnerableCodeDataSource

Closes https://github.com/nexB/vulnerablecode/issues/821",False,832,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/832,https://github.com/aboutcode-org/vulnerablecode/pull/832,closed,4025,0,3,1,2,0,1,1,[{'name': 'VulnTotal'}],2022-08-09 11:34:39+00:00,2022-11-19 11:19:02+00:00,8811863.0,"101 days, 23:44:23",[],"[{'commit_sha': '41709fbbc3777364f6ef5116f6e7ebb36a7fbc76', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
1025773420,Add Snyk datasource,closes https://github.com/nexB/vulnerablecode/issues/834,False,842,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/842,https://github.com/aboutcode-org/vulnerablecode/pull/842,closed,372,0,7,1,1,5,1,1,[{'name': 'VulnTotal'}],2022-08-14 10:33:09+00:00,2022-11-19 11:18:45+00:00,8383536.0,"97 days, 0:45:36","[{'comment_id': 963104797, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2022, 9, 5, 19, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963104842, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2022, 9, 5, 19, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963104881, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2022, 9, 5, 19, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963104990, 'comment_body': 'Write a function for this and write some doctests for it', 'comment_created': datetime.datetime(2022, 9, 5, 19, 41, 36, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963105094, 'comment_body': 'Add docstring and doctest', 'comment_created': datetime.datetime(2022, 9, 5, 19, 41, 59, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}]","[{'commit_sha': '9d6b2caa6a8d98c6c6be55248ec0a2fa29853f87', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
1038389533,Add Gitlab datasource,closes #836 ,True,883,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/883,https://github.com/aboutcode-org/vulnerablecode/pull/883,closed,0,0,0,0,1,14,1,1,[{'name': 'VulnTotal'}],2022-08-26 21:35:21+00:00,2022-11-19 11:17:34+00:00,7306933.0,"84 days, 13:42:13","[{'comment_id': 963103690, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2022, 9, 5, 19, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963103717, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2022, 9, 5, 19, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963103733, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2022, 9, 5, 19, 37, 27, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963103781, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2022, 9, 5, 19, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963104071, 'comment_body': 'check `get_item`', 'comment_created': datetime.datetime(2022, 9, 5, 19, 38, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963104153, 'comment_body': 'check `get_item`', 'comment_created': datetime.datetime(2022, 9, 5, 19, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963104244, 'comment_body': 'Add docstring', 'comment_created': datetime.datetime(2022, 9, 5, 19, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963104365, 'comment_body': 'check `get_item`', 'comment_created': datetime.datetime(2022, 9, 5, 19, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963588542, 'comment_body': 'well, that won\'t work here.\r\n```python\r\n>>> from vulnerabilities.utils import get_item\r\n>>> data = [\r\n...   {\r\n...     ""data"": {\r\n...       ""project"": {\r\n...         ""repository"": {\r\n...           ""paginatedTree"": {\r\n...             ""pageInfo"": {\r\n...               ""endCursor"": ""e1d88bf61d8f6e2d39bdae52121d2c19e0a86ea6"",\r\n...               ""startCursor"": """",\r\n...               ""hasNextPage"": True\r\n...             },\r\n...             ""nodes"": [\r\n...               {\r\n...                 ""trees"": {\r\n...                   ""nodes"": [\r\n...                     {\r\n...                       ""flatPath"": ""pypi/AccessControl""\r\n...                     },\r\n...                     {\r\n...                       ""flatPath"": ""pypi/Acqusition""\r\n...                     },\r\n...                     {\r\n...                       ""flatPath"": ""pypi/Beaker""\r\n...                     }\r\n...                   ]\r\n...                 }\r\n...               }\r\n...             ]\r\n...           }\r\n...         }\r\n...       }\r\n...     }\r\n...   }\r\n... ]\r\n>>> get_item(data, 0, \'data\', \'project\', \'repository\', \'paginatedTree\')\r\ndictionary must be of type `dict\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 11, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 963588921, 'comment_body': '[https://github.com/nexB/vulnerablecode/pull/883#discussion_r963588542](url)', 'comment_created': datetime.datetime(2022, 9, 6, 11, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 963589003, 'comment_body': '[https://github.com/nexB/vulnerablecode/pull/883#discussion_r963588542](url)', 'comment_created': datetime.datetime(2022, 9, 6, 11, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 963590869, 'comment_body': 'I meant this\r\n```suggestion\r\n        assert len(response) > 0\r\n        data = response[0]\r\n        paginated_tree = get_item(data, ""data"", ""project"", ""repository"", ""paginatedTree"")\r\n```\r\nYou are not checking if the item you are accesing exists in the dictionary or not ', 'comment_created': datetime.datetime(2022, 9, 6, 11, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963593240, 'comment_body': 'Check my comment above for same.', 'comment_created': datetime.datetime(2022, 9, 6, 11, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 963593349, 'comment_body': 'Check my comment above for same.', 'comment_created': datetime.datetime(2022, 9, 6, 11, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}]",[],Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
1046797764,register available datasources,automatically register all the datasourse classes available inside `datasources` directory.,True,901,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/901,https://github.com/aboutcode-org/vulnerablecode/pull/901,closed,0,0,0,0,2,0,1,1,[{'name': 'VulnTotal'}],2022-09-05 19:21:23+00:00,2022-11-19 11:17:34+00:00,6450971.0,"74 days, 15:56:11",[],[],Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
1001268634,Add Vulntotal CLI,"``` py
❯ python vulntotal/vulntotal_cli.py --help

Usage: vulntotal_cli.py [OPTIONS] [PURL]

  Runs the PURL through all the available  DataSources and group vulnerability
  by CVEs. Use the special '-' file name to print JSON or YAML results on
  screen/stdout.

Options:
  -l, --list   Lists all the available DataSources.
  --json FILE  Write output as pretty-printed JSON to FILE.
  --yaml FILE  Write output as YAML to FILE.
  -h, --help   Show this message and exit.
```

</br>
</br>
Along with some advanced hidden options especially useful for debugging and development.

``` py

Options:
  -e, --enable                    Enable these datasource/s only.
  -d, --disable                   Disable these datasource/s.
  --ecosystem                     Lists ecosystem supported by active DataSources
  --raw                           List of all the raw response from DataSources.
  --no-threading                  Run DataSources sequentially.
  -p, --pagination                Enable default pagination.
  --no-group                      Don't group by CVE.
```",True,801,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/801,https://github.com/aboutcode-org/vulnerablecode/pull/801,closed,0,0,0,0,12,1,1,1,[{'name': 'VulnTotal'}],2022-07-19 21:42:07+00:00,2022-11-19 11:17:34+00:00,10589727.0,"122 days, 13:35:27","[{'comment_id': 935576663, 'comment_body': 'single dash options should be single letter only.', 'comment_created': datetime.datetime(2022, 8, 2, 13, 11, 42, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]",[],Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
911539961,Test sorting of all the OpenSSL versions ever released,"- fix OpenSSL pre-release comparison
- test the sorting of all the OpenSSL versions ever released
- closes: https://github.com/nexB/univers/issues/46",True,61,https://api.github.com/repos/aboutcode-org/univers/pulls/61,https://github.com/aboutcode-org/univers/pull/61,closed,1149,2,6,2,0,6,0,0,[],2022-04-17 19:52:33+00:00,2022-05-04 07:38:33+00:00,1424760.0,"16 days, 11:46:00","[{'comment_id': 858696058, 'comment_body': 'This is cleaner and means the same:\r\n\r\n```suggestion\r\n        return patch.startswith((""-beta"",""-alpha"",))\r\n```', 'comment_created': datetime.datetime(2022, 4, 26, 13, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 858696999, 'comment_body': 'What passing a value there? isn\'t this something to get directtly from self instead, especially since ""patch"" would become an attribute of self, rather than the [-1] positional index in some tuple ', 'comment_created': datetime.datetime(2022, 4, 26, 13, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 858698328, 'comment_body': 'Rather than having a positional tuple, why not use instead a proper object for this? an attr class with major, minor, build, and patch attributes would go a long way and would avoid having to deal with the magic [:-1]?\r\nOr more simply, just define major, minor, build, and patch as attributes on this object itself. This would be much more explicit and cleaner IMHO.... Always prefer names over positional indexes.', 'comment_created': datetime.datetime(2022, 4, 26, 13, 13, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 862917207, 'comment_body': 'I am not sure I like double parsing the string and overriding __attrs_post_init__ without calling super() too?\r\nWhat about this code instead? (it is not 100% satisfying, but at least it does not double parse):\r\n```\r\n\t\r\n    @property\r\n    def major(self):\r\n        major, _minor, _build, _patch = self.value\r\n        return major\r\n\r\n    @property\r\n    def minor(self):\r\n        _major, minor, _build, _patch = self.value\r\n        return minor\r\n\r\n    @property\r\n    def build(self):\r\n        _major, _minor, build, _patch = self.value\r\n        return build\r\n\r\n    @property\r\n    def patch(self):\r\n        _major, _minor, _build, patch = self.value\r\n        return patch\r\n```\r\nor at least reusing the self.value rather than reparsing it?\r\n\r\n\r\n\r\n\r\n\r\n', 'comment_created': datetime.datetime(2022, 5, 2, 14, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 862967465, 'comment_body': 'IMO this will address all the points you raised.\r\n```python\r\ndef __attrs_post_init__(self):\r\n        super().__attrs_post_init__()\r\n        major, minor, build, patch = self.value\r\n        object.__setattr__(self, ""major"", major)\r\n        object.__setattr__(self, ""minor"", minor)\r\n        object.__setattr__(self, ""build"", build)\r\n        object.__setattr__(self, ""patch"", patch)\r\n```', 'comment_created': datetime.datetime(2022, 5, 2, 15, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 863649777, 'comment_body': 'LGTM :+1: ', 'comment_created': datetime.datetime(2022, 5, 3, 10, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': '8271f721627717c44be721cefd4a282d900d790b', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3eda1edb6f7d9fef2cf1902c200a606243a046ce', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
905046161,Migrate OpenSSL importer to importer-improver model,"closes: https://github.com/nexB/vulnerablecode/issues/615

Signed-off-by: Keshav Priyadarshi <git@keshav.space>

- All suggestions implemented
- Closed PR: https://github.com/nexB/vulnerablecode/pull/648",True,690,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/690,https://github.com/aboutcode-org/vulnerablecode/pull/690,closed,697,613,8,1,0,0,0,0,[],2022-04-09 20:35:07+00:00,2022-04-11 14:17:41+00:00,150154.0,"1 day, 17:42:34",[],"[{'commit_sha': '963e8e40528087e78cc458542839657c554dce6f', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
832870284,Correct notes for cvssv3.1_qr,"Fixes: https://github.com/nexB/vulnerablecode/issues/550

Signed-off-by: keshav-space <keshav6240@gmail.com>",True,599,https://api.github.com/repos/aboutcode-org/vulnerablecode/pulls/599,https://github.com/aboutcode-org/vulnerablecode/pull/599,closed,1,1,1,2,0,0,0,0,[],2022-01-26 22:35:54+00:00,2022-02-02 10:25:24+00:00,560970.0,"6 days, 11:49:30",[],"[{'commit_sha': '344921701c008edffa4d0551a0674a1906f34285', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d41567c078f151aade8ee7164cc65c85f40b7b2', 'committer_username': 'pombredanne', 'committer_name': 'Philippe Ombredanne', 'committer_email': None, 'commit_date': datetime.datetime(2011, 3, 17, 21, 45, 6, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
890918031,add `from_versions` in VersionRange,"context: https://github.com/nexB/vulnerablecode/pull/648#discussion_r834011600
Signed-off-by: Keshav Priyadarshi <git@keshav.space>",True,55,https://api.github.com/repos/aboutcode-org/univers/pulls/55,https://github.com/aboutcode-org/univers/pull/55,closed,153,123,6,2,1,3,0,0,[],2022-03-27 06:46:44+00:00,2022-03-29 14:21:35+00:00,200091.0,"2 days, 7:34:51","[{'comment_id': 836422610, 'comment_body': 'Could you add a docstring?\r\nwhat is this doing? what is the input and what is this returning?\r\nMay be `Return a version range from a list of version strings.`\r\n\r\nAlso is `from_sequence` the best name? what is the use case here? I would say this is to create a range from a list of versions? what about `from_versions` ', 'comment_created': datetime.datetime(2022, 3, 28, 13, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 836435859, 'comment_body': 'Will add docstring there. The use case is to create a range from a list of versions and in that case, `from_versions` seems to be more appropriate.', 'comment_created': datetime.datetime(2022, 3, 28, 13, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 836664237, 'comment_body': 'VersionClass constructor should take care of this', 'comment_created': datetime.datetime(2022, 3, 28, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}]","[{'commit_sha': '2a449c34d7a56458dd0353d6a3dd1fe8c8b3b3f6', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03421e3b6deeb26b7a7c543a571b7127f407353c', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
859826559,Add openssl support in univers,"- closes https://github.com/nexB/univers/issues/36
- For `OpenSSL-FIPS Module` see https://github.com/nexB/univers/issues/41

Signed-off-by: Keshav Priyadarshi <git@keshav.space>",True,42,https://api.github.com/repos/aboutcode-org/univers/pulls/42,https://github.com/aboutcode-org/univers/pull/42,closed,559,0,4,3,1,58,0,0,[],2022-02-21 20:35:41+00:00,2022-03-13 09:06:39+00:00,1686658.0,"19 days, 12:30:58","[{'comment_id': 818127574, 'comment_body': 'This is not a docstring', 'comment_created': datetime.datetime(2022, 3, 2, 21, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818129556, 'comment_body': ""Can you make sure if it's not the same thing ? https://github.com/nexB/univers/blob/7206c1fc35eb32d0006591e6defcc65ded40cfa0/src/univers/version_constraint.py#L91-L95"", 'comment_created': datetime.datetime(2022, 3, 2, 21, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818132200, 'comment_body': ""The docstring should ideally contain a concise documentation of the object. What this doesn't do sounds a bit off for documentation"", 'comment_created': datetime.datetime(2022, 3, 2, 21, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818133428, 'comment_body': 'Does this mean comparison with semver is allowed but always results in a not equal ?', 'comment_created': datetime.datetime(2022, 3, 2, 21, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818144001, 'comment_body': '```suggestion\r\nclass OpensslLegacyVersion(Version):\r\n```', 'comment_created': datetime.datetime(2022, 3, 2, 22, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818144701, 'comment_body': '```suggestion\r\n    """"""\r\n    Openssl versions are of two types\r\n        - Legacy versions: Implemented in OpensslLegaryVersion\r\n        - New versions: Semver\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2022, 3, 2, 22, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818145104, 'comment_body': 'Also, have they explicitly named these version types as ``Legacy`` and ``New`` ?', 'comment_created': datetime.datetime(2022, 3, 2, 22, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818146205, 'comment_body': '```suggestion\r\n    def __new__(cls, string):\r\n    """"""\r\n    Handle the object creation for Openssl version depending on\r\n    whether it is legacy or new/semver.\r\n    """"""\r\n```', 'comment_created': datetime.datetime(2022, 3, 2, 22, 11, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818146598, 'comment_body': 'This should be a comment', 'comment_created': datetime.datetime(2022, 3, 2, 22, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818147449, 'comment_body': 'This is hard to read, can we have examples ? Examples in the form of doctests would be perfect!', 'comment_created': datetime.datetime(2022, 3, 2, 22, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818147687, 'comment_body': 'Example and doctests here too please', 'comment_created': datetime.datetime(2022, 3, 2, 22, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818149769, 'comment_body': 'I see it now. Can you add a few examples of legacy openssl versions in the docstring ?', 'comment_created': datetime.datetime(2022, 3, 2, 22, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818150412, 'comment_body': 'Implement this here and call it from OpensslVersion (ie the other way round)', 'comment_created': datetime.datetime(2022, 3, 2, 22, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818151514, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 2, 22, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818152052, 'comment_body': '```suggestion\r\n        if isinstance(other, SemverVersion):\r\n            # SemverVersion is the new openssl scheme, thus always greater than legacy\r\n```', 'comment_created': datetime.datetime(2022, 3, 2, 22, 20, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818152278, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 2, 22, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818152428, 'comment_body': '```suggestion\r\n        if isinstance(other, SemverVersion):\r\n            # SemverVersion is the new openssl scheme, thus always greater than legacy\r\n```', 'comment_created': datetime.datetime(2022, 3, 2, 22, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818153167, 'comment_body': 'This is cryptic. Can you make it simpler ? ', 'comment_created': datetime.datetime(2022, 3, 2, 22, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818153416, 'comment_body': 'Hard to understand => prone to errors', 'comment_created': datetime.datetime(2022, 3, 2, 22, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 818581034, 'comment_body': 'It\'s not about having an empty version_class, but about having the wrong version_class.\r\nIn events where instantiating a version_class returns a different class object, we need to update the version_class accordingly. But of course, if the version is `None` (as in the case when comparator == ""*""  ) in that case no Version Object is instantiated hence no need to update the `version_class`\r\n\r\nlet\'s say we have something like this:\r\n```python\r\nVersionConstraint.from_string(""1.0.1f"", OpensslVersion)\r\n```\r\nhttps://github.com/nexB/univers/blob/7206c1fc35eb32d0006591e6defcc65ded40cfa0/src/univers/version_constraint.py#L159-L160\r\nOn execution on L159 version will be like: \r\n(Note: OpensslVersion would return either `LegacyOpensslVersion` or `SemverVersion` depending on version string)\r\n```python\r\nLegacyOpensslVersion(string=""1.0.1f"")\r\n```\r\nReturn on L160 would be like:\r\n```python\r\nreturn cls(comparator=""="", version=LegacyOpensslVersion(string=""1.0.1f""), version_class=OpensslVersion) \r\n```\r\nSo, we end up with an absurd return statement where version -> `LegacyOpensslVersion` but version_class is still `OpensslVersion` and that will go on to create problem', 'comment_created': datetime.datetime(2022, 3, 3, 11, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 818583177, 'comment_body': ""So in the case of naming, I borrowed it from Philips's suggestion.\r\nhttps://github.com/nexB/univers/issues/36#issuecomment-1034629474"", 'comment_created': datetime.datetime(2022, 3, 3, 11, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 818587622, 'comment_body': ""No, they don't call it new or Legacy.. they're just calling it old and contemporary format..🤷"", 'comment_created': datetime.datetime(2022, 3, 3, 12, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 818589543, 'comment_body': 'Yeah that makes more sense 😆', 'comment_created': datetime.datetime(2022, 3, 3, 12, 3, 13, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 818620592, 'comment_body': 'Is this good enough??\r\n```python\r\nregexed_vers_self = re.findall(r""^(\\d+\\.\\d+\\.\\d+)(.*)$"", self.value)[0]\r\nregexed_vers_other = re.findall(r""^(\\d+\\.\\d+\\.\\d+)(.*)$"", other.value)[0]\r\n\r\nbase_vers_self = regexed_version_self[0]\r\nbase_vers_other = regexed_version_other[0]\r\n\r\nnumeric_base_version_self = int(base_vers_self.replace(""."","""")\r\nnumeric_base_version_other = int(base_vers_other.replace(""."","""")\r\n\r\npostfix_self = regexed_version_self[1]\r\npostfix_other = regexed_version_other[1]\r\n\r\nif numeric_base_version_self < numeric_base_version_other:\r\n      return True\r\nreturn base_vers_self == base_vers_other and postfix_self < postfix_other\r\n\r\n```', 'comment_created': datetime.datetime(2022, 3, 3, 12, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 818631350, 'comment_body': 'Shall I remove this altogether?', 'comment_created': datetime.datetime(2022, 3, 3, 12, 59, 37, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 818880308, 'comment_body': 'will document that..👍🏼', 'comment_created': datetime.datetime(2022, 3, 3, 17, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 823101083, 'comment_body': 'Do you need this?', 'comment_created': datetime.datetime(2022, 3, 9, 21, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823101435, 'comment_body': 'Why a set and not a list?', 'comment_created': datetime.datetime(2022, 3, 9, 21, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823102237, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 9, 21, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823102493, 'comment_body': 'Make this a doctest instead', 'comment_created': datetime.datetime(2022, 3, 9, 21, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823102651, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 9, 21, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823103530, 'comment_body': '```suggestion\r\n        Return a  four-tuple of (major, minor, build, patch) version segments where\r\n        major, minor, build are integers and patch is a trsing possibly empty.\r\n        Return False if this is not a valid LegacyOpensslVersion.\r\n```', 'comment_created': datetime.datetime(2022, 3, 9, 21, 24, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823105193, 'comment_body': '```suggestion\r\n        # All known legacy base OpenSLL versions\r\n```', 'comment_created': datetime.datetime(2022, 3, 9, 21, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823106192, 'comment_body': 'This comment is not needed...\r\n`check if starts with a valid base` does not explain anything extra than the code `if not string.startswith(all_legacy_base)` does.\r\nWhen the code is readable and obvious, comments are not needed.\r\n', 'comment_created': datetime.datetime(2022, 3, 9, 21, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823107062, 'comment_body': '```suggestion\r\n             if patch and patch[0].isdigit():\r\n```\r\nthis should be indented as this is never needed when `patch=""""`', 'comment_created': datetime.datetime(2022, 3, 9, 21, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823108604, 'comment_body': 'What about instead:\r\n```suggestion\r\n        return f""{self.major}.{self.minor}.{self.build}{self.patch}""\r\n```', 'comment_created': datetime.datetime(2022, 3, 9, 21, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823108758, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 9, 21, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823109239, 'comment_body': '```suggestion\r\n        - LegacyOpensslVersion for versions before version 3.0.0 such as 1.0.1g\r\n```', 'comment_created': datetime.datetime(2022, 3, 9, 21, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823109818, 'comment_body': '```suggestion\r\n        - Semver for versions from 3.0.0 and up\r\n```', 'comment_created': datetime.datetime(2022, 3, 9, 21, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823110761, 'comment_body': 'Always use imperative style.\r\n```suggestion\r\n        Check the validity of new Openssl Version.\r\n```\r\n', 'comment_created': datetime.datetime(2022, 3, 9, 21, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823115883, 'comment_body': 'You should add tests for all the OpensslVersion version comparisons and these should be testing a matrix of:\r\n- all of >,<, ==, !=, >= and <=\r\n- with new-new, old-new, new-old, old-old  and non OpensslVersion object values, as well as LegacyOpensslVersion and Semver versions \r\n- in the general case and right at the boundaries of legacy and new', 'comment_created': datetime.datetime(2022, 3, 9, 21, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 823122181, 'comment_body': 'No, not really needed.', 'comment_created': datetime.datetime(2022, 3, 9, 21, 52, 14, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 823122246, 'comment_body': 'Just to avoid having possible duplicates', 'comment_created': datetime.datetime(2022, 3, 9, 21, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 823130098, 'comment_body': 'Indeed, will replace with\r\n```python\r\n        else:\r\n            patch = build[1:]\r\n            build = int(build[0])\r\n            if patch[0].isdigit():\r\n```', 'comment_created': datetime.datetime(2022, 3, 9, 22, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 823134230, 'comment_body': 'Will add that', 'comment_created': datetime.datetime(2022, 3, 9, 22, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 824232444, 'comment_body': 'remove it then:\r\n\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 10, 22, 36, 35, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 824232976, 'comment_body': '```suggestion\r\n    For example::\r\n```', 'comment_created': datetime.datetime(2022, 3, 10, 22, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 824237012, 'comment_body': ""why would there be possible duplicates? There are no other VersionRange that uses sets this way for constraints.\r\nIt is likely a good idea to avoid duplicated constraints (and I should add this to the vers spec)  but it should not be the responsability of a subclass... rather it would be done in one single place here https://github.com/nexB/univers/blob/6f03cf67d094fd823aca72bbb5352ccfcb0936fe/src/univers/version_range.py#L53 and properly tested. Let's do this in another PR... can you enter an issue for this?"", 'comment_created': datetime.datetime(2022, 3, 10, 22, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 824237303, 'comment_body': 'What does this comment wants to tell me?', 'comment_created': datetime.datetime(2022, 3, 10, 22, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 824237605, 'comment_body': 'why call this a clause if this is a version?', 'comment_created': datetime.datetime(2022, 3, 10, 22, 45, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 824237996, 'comment_body': 'You do not need an empty line there... if you mark this as resolved, then remove the line ;)\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 3, 10, 22, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 824238764, 'comment_body': 'Same ... this is marked resolved but this has no changed?', 'comment_created': datetime.datetime(2022, 3, 10, 22, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 824250697, 'comment_body': 'Yeah, I have implemented all those suggestions locally.. once the test for version comparison is ready I will push those changes ', 'comment_created': datetime.datetime(2022, 3, 10, 23, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 824252711, 'comment_body': ""Just make it look consistent across the version range implementations... Yeah but I get that it's just a version "", 'comment_created': datetime.datetime(2022, 3, 10, 23, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 824254372, 'comment_body': 'Seems more pragmatic...👍', 'comment_created': datetime.datetime(2022, 3, 10, 23, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 824257967, 'comment_body': ""Frankly, it's just stating the obvious. will remove that"", 'comment_created': datetime.datetime(2022, 3, 10, 23, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 824269859, 'comment_body': ""Thanks, then I don't see any chance for possible duplication here. Created an issue for handling duplication in VersionRange https://github.com/nexB/univers/issues/45"", 'comment_created': datetime.datetime(2022, 3, 10, 23, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 824814660, 'comment_body': 'Won\'t work.\r\n```python\r\n>>> from univers.versions import LegacyOpensslVersion\r\n>>> vers=LegacyOpensslVersion(""1.0.2a"")\r\n>>> str(vers)\r\nTraceback (most recent call last):\r\n    ...\r\nAttributeError: \'LegacyOpensslVersion\' object has no attribute \'major\'\r\n```\r\n\r\nWe can have something like this\r\n```python\r\nreturn f""{self.value[0]}.{self.value[1]}.{self.value[2]}{self.value[3]}""\r\n```', 'comment_created': datetime.datetime(2022, 3, 11, 15, 18, 7, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}]","[{'commit_sha': '6f03cf67d094fd823aca72bbb5352ccfcb0936fe', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4112a2f34adbe509e3bd4ad378ebe268340a599e', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ff5a9c58824c49deb2e6095f42941b24d6babb3', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
835207243,Fix for NpmVersionRange.from_native and README,"### 1. Fix `README` 

- Import `versions` instead `version`
     ```python
      [❌] from univers.version import PypiVersion
      [✅] from univers.versions import PypiVersion
   ```
- Use relative-path to execute configure script



### 2. Fix `NpmVersionRange`
- NpmVersionRange.from_native was returning a `tuple` containing `list of VersionConstraint`
- Instead it must return a `tuple` containing `VersionConstraint`

  - Earlier `NpmVersionRange.from_native(""^1.0.2"")` would return `constraints` as
     ```python
     ([VersionConstraint(comparator='<', version=SemverVersion(string='2.0.0')), VersionConstraint(comparator='>=', version=SemverVersion(string='1.0.2'))],)
    ```
   - After Fix
      ```python
      (VersionConstraint(comparator='>=', version=SemverVersion(string='1.0.2')), VersionConstraint(comparator='<', version=SemverVersion(string='2.0.0')))
     ```
- Fixes: https://github.com/nexB/univers/issues/35

### 3. Add test for `NpmVersionRange`
- `test_NpmVersionRange_from_native_with_compatible_with_version_operator`
- `test_NpmVersionRange_from_native_with_approximately_equal_to_operator`

### 4. Don't do black codestyle test for `docs` and `etc`
- codestyle test for `etc` to be handled by `skeleton`
- see: https://github.com/nexB/skeleton/issues/54

Signed-off-by: keshav-space <keshav6240@gmail.com>",True,34,https://api.github.com/repos/aboutcode-org/univers/pulls/34,https://github.com/aboutcode-org/univers/pull/34,closed,32,7,4,2,3,16,0,0,[],2022-01-29 20:36:01+00:00,2022-02-16 21:25:38+00:00,1558177.0,"18 days, 0:49:37","[{'comment_id': 805391000, 'comment_body': 'These are two tests clubbed into one. Please split them accordingly. Something like `test_NpmVersionRange_from_native_range_with_caret_operator` `test_NpmVersionRange_from_native_range_with_tilde_operator`\r\nor even better\r\n`test_NpmVersionRange_from_native_range_with_compatible_with_version_operator` and \r\n`test_NpmVersionRange_from_native_range_with_approximately_equal_to_operator`', 'comment_created': datetime.datetime(2022, 2, 13, 17, 32, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 805391074, 'comment_body': 'This information is already conveyed by the test name. Maybe a different or no docstring ?', 'comment_created': datetime.datetime(2022, 2, 13, 17, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 805391133, 'comment_body': 'We can say this in the function name itself. Long function names in tests are no problem at all', 'comment_created': datetime.datetime(2022, 2, 13, 17, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 805392629, 'comment_body': 'This test is asserting two different things. How about breaking them into separate tests?', 'comment_created': datetime.datetime(2022, 2, 13, 17, 46, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 805392882, 'comment_body': ""As you're already working on npm version range, how about adding an entry here too :)"", 'comment_created': datetime.datetime(2022, 2, 13, 17, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 805395907, 'comment_body': 'Wouldn’t  having separate test for `constraints` and `string conversion`  make it cumbersome? \r\n\r\nThat would effectively mean for doing small test we would need  these many function all having  almost duplicate codes.\r\n\r\n- `test_NpmVersionRange_from_native_range_with_compatible_with_version_operator_constraints`\r\n- `test_NpmVersionRange_from_native_range_with_compatible_with_version_operator_to_string`\r\n- `test_NpmVersionRange_from_native_range_with_approximately_equal_to_operator_constraints`\r\n- `test_NpmVersionRange_from_native_range_with_approximately_equal_to_operator_to_string`', 'comment_created': datetime.datetime(2022, 2, 13, 18, 17, 6, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 805396095, 'comment_body': 'Yeah that makes sense.. :)', 'comment_created': datetime.datetime(2022, 2, 13, 18, 18, 58, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 805396657, 'comment_body': 'As `NpmVersionRange` does not implement a to_string method, we could avoid testing it now. Simply test it for `VersionRange`. A unit test should ideally be testing a unit only. Testing a group of operations should fall under integration tests\r\n', 'comment_created': datetime.datetime(2022, 2, 13, 18, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 805397484, 'comment_body': 'Okay! then going ahead  with `VersionRange` test', 'comment_created': datetime.datetime(2022, 2, 13, 18, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 805593700, 'comment_body': ""The function name says about testing `NpmVersionRange_from_native` but you're only testing the constraints.\r\nHow about:\r\n- Modifying the function name accordingly or\r\n- Changing the test to comply with the name"", 'comment_created': datetime.datetime(2022, 2, 14, 8, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 805593869, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2022, 2, 14, 8, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 805594216, 'comment_body': 'Can you please add more ranges for npm ? It would really help make other tests better.', 'comment_created': datetime.datetime(2022, 2, 14, 8, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 805615905, 'comment_body': ""Yeah, but that's what `from_native` is doing.. i.e returning  tuple of `VersionConstraint`.\r\nAnd the  test `NpmVersionRange_from_native` only intendeds to test that specific `constraints` tuple.\r\nRight?"", 'comment_created': datetime.datetime(2022, 2, 14, 8, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 806063450, 'comment_body': 'A `VersionRange.from_native` is expected to return a `VersionRange` object. Kinda like a factory method.\r\nConsider this\r\n```\r\n>>> type(NginxVersionRange.from_native(""1.1""))\r\nunivers.version_range.NginxVersionRange\r\n```\r\n`constraints` is an attribute of VersionRange class, see https://github.com/nexB/univers/blob/21864169341c4949bd40c931cd8450488de24d64/src/univers/version_range.py#L50', 'comment_created': datetime.datetime(2022, 2, 14, 17, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}, {'comment_id': 806201802, 'comment_body': 'Yeah, That makes complete sense to me.\r\nWill modify the tests to do assertion for `NpmVersionRange` instead of `constraints`\r\n\r\nAnd I guess we have a similar issue with `GemVersionRange_from_native`, shall we do something about this too?\r\n\r\nhttps://github.com/nexB/univers/blob/21864169341c4949bd40c931cd8450488de24d64/tests/test_version_range.py#L182-L189', 'comment_created': datetime.datetime(2022, 2, 14, 20, 12, 1, tzinfo=datetime.timezone.utc), 'commenter': 'keshav-space', 'type': 'User'}, {'comment_id': 806246882, 'comment_body': ""With tests, it's always the more the merrier :) "", 'comment_created': datetime.datetime(2022, 2, 14, 21, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Hritik14', 'type': 'User'}]","[{'commit_sha': 'fd9d3412e8efd6178cea1c95b65b9cad0bb7cfa9', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fc4c361289294db4c18a59ff6ffa9158382e655', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40
860238773,Add black codestyle test for skeleton,"- see https://github.com/nexB/skeleton/issues/54

Signed-off-by: keshav-space <keshav6240@gmail.com>",True,56,https://api.github.com/repos/aboutcode-org/skeleton/pulls/56,https://github.com/aboutcode-org/skeleton/pull/56,closed,44,5,5,1,0,0,0,0,[],2022-02-22 09:58:35+00:00,2022-02-23 09:36:48+00:00,85093.0,23:38:13,[],"[{'commit_sha': '840ccefe0d5bbb20e9a9f7314b707bdefcd1e163', 'committer_username': 'keshav-space', 'committer_name': 'Keshav Priyadarshi', 'committer_email': 'git@keshav.space', 'commit_date': datetime.datetime(2018, 10, 20, 9, 21, 35, tzinfo=datetime.timezone.utc)}]",Keshav Priyadarshi,44315208,git@keshav.space,User,,81,,14,40

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
91780998,vulnerablecode,aboutcode-org/vulnerablecode,Python,188,512,24,48,2248,567,17,16,"[{'id': 2027297878, 'number': 1559, 'closed': None, 'created': datetime.datetime(2024, 8, 20, 10, 7, 41, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 560, 'deletions': 81, 'state': 'open'}, {'id': 2000734975, 'number': 1533, 'closed': None, 'created': datetime.datetime(2024, 8, 2, 12, 48, 23, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 237, 'deletions': 3, 'state': 'open'}, {'id': 1642900275, 'number': 1366, 'closed': datetime.datetime(2023, 12, 15, 7, 55, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 13, 18, 4, 59, tzinfo=datetime.timezone.utc), 'time_taken': 136258.0, 'time_delta': '1 day, 13:50:58', 'additions': 158, 'deletions': 20, 'state': 'closed'}, {'id': 1624218526, 'number': 1354, 'closed': datetime.datetime(2023, 12, 21, 12, 40, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 30, 18, 5, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1794895.0, 'time_delta': '20 days, 18:34:55', 'additions': 578, 'deletions': 14071, 'state': 'closed'}, {'id': 1294327199, 'number': 1160, 'closed': datetime.datetime(2023, 3, 29, 15, 43, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 29, 10, 5, 19, tzinfo=datetime.timezone.utc), 'time_taken': 20276.0, 'time_delta': '5:37:56', 'additions': 575, 'deletions': 61, 'state': 'closed'}, {'id': 1278481710, 'number': 1151, 'closed': datetime.datetime(2024, 7, 31, 11, 5, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 16, 12, 15, 46, tzinfo=datetime.timezone.utc), 'time_taken': 43454973.0, 'time_delta': '502 days, 22:49:33', 'additions': 528, 'deletions': 60, 'state': 'closed'}, {'id': 1256812880, 'number': 1139, 'closed': datetime.datetime(2023, 3, 29, 15, 6, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 28, 9, 58, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2524094.0, 'time_delta': '29 days, 5:08:14', 'additions': 22, 'deletions': 16, 'state': 'closed'}, {'id': 1231702838, 'number': 1118, 'closed': datetime.datetime(2023, 2, 22, 9, 33, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 7, 9, 52, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1294853.0, 'time_delta': '14 days, 23:40:53', 'additions': 17, 'deletions': 4, 'state': 'closed'}, {'id': 1192298286, 'number': 1075, 'closed': datetime.datetime(2023, 1, 31, 16, 17, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 10, 12, 28, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1828149.0, 'time_delta': '21 days, 3:49:09', 'additions': 35, 'deletions': 6, 'state': 'closed'}, {'id': 1046797764, 'number': 901, 'closed': datetime.datetime(2022, 11, 19, 11, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 5, 19, 21, 23, tzinfo=datetime.timezone.utc), 'time_taken': 6450971.0, 'time_delta': '74 days, 15:56:11', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1038389533, 'number': 883, 'closed': datetime.datetime(2022, 11, 19, 11, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 21, 35, 21, tzinfo=datetime.timezone.utc), 'time_taken': 7306933.0, 'time_delta': '84 days, 13:42:13', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1025773420, 'number': 842, 'closed': datetime.datetime(2022, 11, 19, 11, 18, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 14, 10, 33, 9, tzinfo=datetime.timezone.utc), 'time_taken': 8383536.0, 'time_delta': '97 days, 0:45:36', 'additions': 372, 'deletions': 0, 'state': 'closed'}, {'id': 1021400702, 'number': 832, 'closed': datetime.datetime(2022, 11, 19, 11, 19, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 11, 34, 39, tzinfo=datetime.timezone.utc), 'time_taken': 8811863.0, 'time_delta': '101 days, 23:44:23', 'additions': 4025, 'deletions': 0, 'state': 'closed'}, {'id': 1019066221, 'number': 829, 'closed': datetime.datetime(2022, 11, 19, 11, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 20, 29, 40, tzinfo=datetime.timezone.utc), 'time_taken': 9125274.0, 'time_delta': '105 days, 14:47:54', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1006681968, 'number': 804, 'closed': datetime.datetime(2022, 11, 19, 11, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 1, 16, 42, tzinfo=datetime.timezone.utc), 'time_taken': 10144852.0, 'time_delta': '117 days, 10:00:52', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1001268634, 'number': 801, 'closed': datetime.datetime(2022, 11, 19, 11, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 21, 42, 7, tzinfo=datetime.timezone.utc), 'time_taken': 10589727.0, 'time_delta': '122 days, 13:35:27', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 987222948, 'number': 789, 'closed': datetime.datetime(2022, 11, 18, 16, 3, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 9, 47, 58, tzinfo=datetime.timezone.utc), 'time_taken': 11772918.0, 'time_delta': '136 days, 6:15:18', 'additions': 1057, 'deletions': 0, 'state': 'closed'}, {'id': 987213529, 'number': 788, 'closed': datetime.datetime(2022, 11, 18, 13, 56, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 5, 9, 39, 5, tzinfo=datetime.timezone.utc), 'time_taken': 11765853.0, 'time_delta': '136 days, 4:17:33', 'additions': 692, 'deletions': 0, 'state': 'closed'}, {'id': 972412351, 'number': 777, 'closed': datetime.datetime(2022, 7, 5, 8, 57, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 20, 16, 5, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1270309.0, 'time_delta': '14 days, 16:51:49', 'additions': 124, 'deletions': 0, 'state': 'closed'}, {'id': 927784286, 'number': 724, 'closed': datetime.datetime(2022, 5, 6, 10, 51, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 4, 15, 45, 26, tzinfo=datetime.timezone.utc), 'time_taken': 155173.0, 'time_delta': '1 day, 19:06:13', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 917301457, 'number': 710, 'closed': datetime.datetime(2022, 5, 2, 14, 56, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 23, 21, 38, 38, tzinfo=datetime.timezone.utc), 'time_taken': 753464.0, 'time_delta': '8 days, 17:17:44', 'additions': 28719, 'deletions': 473, 'state': 'closed'}, {'id': 905046161, 'number': 690, 'closed': datetime.datetime(2022, 4, 11, 14, 17, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 9, 20, 35, 7, tzinfo=datetime.timezone.utc), 'time_taken': 150154.0, 'time_delta': '1 day, 17:42:34', 'additions': 697, 'deletions': 613, 'state': 'closed'}, {'id': 883528718, 'number': 648, 'closed': datetime.datetime(2022, 4, 9, 19, 38, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 18, 15, 4, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1917257.0, 'time_delta': '22 days, 4:34:17', 'additions': 699, 'deletions': 614, 'state': 'closed'}, {'id': 832870284, 'number': 599, 'closed': datetime.datetime(2022, 2, 2, 10, 25, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 26, 22, 35, 54, tzinfo=datetime.timezone.utc), 'time_taken': 560970.0, 'time_delta': '6 days, 11:49:30', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
348246373,univers,aboutcode-org/univers,Python,9,29,11,188,2566,42,3,4,"[{'id': 1987069007, 'number': 138, 'closed': datetime.datetime(2024, 7, 25, 9, 23, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 25, 9, 15, 33, tzinfo=datetime.timezone.utc), 'time_taken': 487.0, 'time_delta': '0:08:07', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 1511648451, 'number': 125, 'closed': datetime.datetime(2023, 9, 12, 8, 50, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 12, 8, 44, 13, tzinfo=datetime.timezone.utc), 'time_taken': 390.0, 'time_delta': '0:06:30', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 1511007929, 'number': 124, 'closed': datetime.datetime(2023, 9, 12, 4, 36, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 11, 21, 1, 42, tzinfo=datetime.timezone.utc), 'time_taken': 27264.0, 'time_delta': '7:34:24', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 1506077624, 'number': 122, 'closed': datetime.datetime(2023, 9, 7, 12, 1, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 7, 10, 46, 15, tzinfo=datetime.timezone.utc), 'time_taken': 4513.0, 'time_delta': '1:15:13', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 1501249735, 'number': 120, 'closed': datetime.datetime(2023, 9, 6, 18, 47, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 4, 12, 49, 15, tzinfo=datetime.timezone.utc), 'time_taken': 194313.0, 'time_delta': '2 days, 5:58:33', 'additions': 54, 'deletions': 6, 'state': 'closed'}, {'id': 1495279564, 'number': 116, 'closed': datetime.datetime(2023, 8, 31, 14, 53, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 30, 10, 34, 31, tzinfo=datetime.timezone.utc), 'time_taken': 101946.0, 'time_delta': '1 day, 4:19:06', 'additions': 1516, 'deletions': 716, 'state': 'closed'}, {'id': 1494455032, 'number': 115, 'closed': datetime.datetime(2023, 8, 31, 16, 17, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 29, 21, 9, 40, tzinfo=datetime.timezone.utc), 'time_taken': 155255.0, 'time_delta': '1 day, 19:07:35', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1275180169, 'number': 108, 'closed': datetime.datetime(2024, 7, 24, 20, 6, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 14, 14, 45, 1, tzinfo=datetime.timezone.utc), 'time_taken': 43046489.0, 'time_delta': '498 days, 5:21:29', 'additions': 296, 'deletions': 389, 'state': 'closed'}, {'id': 973297088, 'number': 75, 'closed': datetime.datetime(2023, 4, 11, 16, 34, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 9, 2, 44, tzinfo=datetime.timezone.utc), 'time_taken': 25428712.0, 'time_delta': '294 days, 7:31:52', 'additions': 85, 'deletions': 76, 'state': 'closed'}, {'id': 933728223, 'number': 69, 'closed': None, 'created': datetime.datetime(2022, 5, 11, 14, 4, 52, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 123, 'deletions': 88, 'state': 'open'}, {'id': 911539961, 'number': 61, 'closed': datetime.datetime(2022, 5, 4, 7, 38, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 17, 19, 52, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1424760.0, 'time_delta': '16 days, 11:46:00', 'additions': 1149, 'deletions': 2, 'state': 'closed'}, {'id': 890918031, 'number': 55, 'closed': datetime.datetime(2022, 3, 29, 14, 21, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 27, 6, 46, 44, tzinfo=datetime.timezone.utc), 'time_taken': 200091.0, 'time_delta': '2 days, 7:34:51', 'additions': 153, 'deletions': 123, 'state': 'closed'}, {'id': 859826559, 'number': 42, 'closed': datetime.datetime(2022, 3, 13, 9, 6, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 21, 20, 35, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1686658.0, 'time_delta': '19 days, 12:30:58', 'additions': 559, 'deletions': 0, 'state': 'closed'}, {'id': 835207243, 'number': 34, 'closed': datetime.datetime(2022, 2, 16, 21, 25, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 29, 20, 36, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1558177.0, 'time_delta': '18 days, 0:49:37', 'additions': 32, 'deletions': 7, 'state': 'closed'}]"
297756689,skeleton,aboutcode-org/skeleton,Python,7,8,9,15,219,35,2,0,"[{'id': 860238773, 'number': 56, 'closed': datetime.datetime(2022, 2, 23, 9, 36, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 22, 9, 58, 35, tzinfo=datetime.timezone.utc), 'time_taken': 85093.0, 'time_delta': '23:38:13', 'additions': 44, 'deletions': 5, 'state': 'closed'}]"
