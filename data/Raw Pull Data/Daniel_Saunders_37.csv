pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1438177138,add ICARRV and ICAR,"This PR adds support for intrinsic conditional autoregressive (ICAR) models to PyMC. The ICAR is a special case of the CAR distribution that arises when the $\alpha$ parameter equals $1$ and we add a zero-sum constraint. There are two big advantages of ICAR over CAR. 

First, computing the logp likelihood is much faster, especially on large datasets. The CAR distribution involves either inverting a large precision matrix or a variety of eigenvalue strategies. As the dataset gets larger, those operations become quite expensive, even with the sparsity tricks PyMC currently employs. In some benchmarking I was doing I found it takes nearly 60 seconds to find the logp of a dataset with 6000 observations. ICAR exploits a pairwise difference calculation which grows basically linearly with the size of the dataset.

![image](https://github.com/pymc-devs/pymc/assets/83777819/00feeb68-c228-4fcc-9adb-1f5d95bd5889)

Second, the zero-sum constraint can also help improve the identifiability of autoregressive models. Suppose you're working on a spatial statistics problem with the 50 US states. You might want a global intercept in your model plus 50 spatial random effects. With CAR, this leaves you overparameterized. If the sampler increases the mean value of the 50 spatial effects, then it can decrease the value of the global intercept to get the same overall intercept. The vector of random effects in an ICAR distribution is forced to sum to zero, which allows the sampler to independently adjust the global intercept.

Finally, ICAR often serves as a sub-component of larger models, like the BYM model. Providing a convenient API can make easy to build up to the more complex models.

More information on the design of this ICAR distribution can be found in a [stan case study](https://mc-stan.org/users/documentation/case-studies/icar_stan.html)",True,6831,https://api.github.com/repos/pymc-devs/pymc/pulls/6831,https://github.com/pymc-devs/pymc/pull/6831,closed,241,0,3,12,6,12,1,0,[{'name': 'enhancements'}],2023-07-17 22:37:24+00:00,2023-08-18 16:31:03+00:00,2742819.0,"31 days, 17:53:39","[{'comment_id': 1267347421, 'comment_body': 'I think it\'d be better to use a different word than ""centering"", since that\'s usually more about centered vs non-centered parameterizations.  Maybe ""mean_zero_strength"" or something similar instead?', 'comment_created': datetime.datetime(2023, 7, 18, 22, 8, 56, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278035940, 'comment_body': ""this block of comments doesn't add too much to the code doing the checks below, dont think its necessary"", 'comment_created': datetime.datetime(2023, 7, 28, 20, 1, 2, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278036236, 'comment_body': 'here though it might be good to expand on what an edgelist representation is?', 'comment_created': datetime.datetime(2023, 7, 28, 20, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278036693, 'comment_body': 'this comment and the comment check on centering strength are out of date now', 'comment_created': datetime.datetime(2023, 7, 28, 20, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278037795, 'comment_body': 'same as before RE wording, ""center"" vs zero sum.  I think the latter is better and is more consistent with `zero_sum_strength`', 'comment_created': datetime.datetime(2023, 7, 28, 20, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278039273, 'comment_body': 'why are some backslashes twice and others once?', 'comment_created': datetime.datetime(2023, 7, 28, 20, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278040007, 'comment_body': '> on large datasets\r\n\r\nOr small datasets!', 'comment_created': datetime.datetime(2023, 7, 28, 20, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278040926, 'comment_body': '```suggestion\r\n    $N * 0.001$ (where N is the length of the vector $\\\\phi$). This component imposes a zero-sum\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 20, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278041360, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 20, 9, 15, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278048048, 'comment_body': ""```suggestion\r\n        W = np.array([\r\n            [0, 1, 0, 1],\r\n            [1, 0, 1, 0],\r\n            [0, 1, 0, 1],\r\n            [1, 0, 1, 0]\r\n        ])\r\n\r\n        # centered parameterization\r\n        with pm.Model():\r\n            sigma = pm.Exponential('sigma', 1)\r\n            phi = pm.ICAR('phi', W=W, sigma=sigma)\r\n            mu = phi\r\n\r\n        # non-centered parameterization\r\n        with pm.Model():\r\n            sigma = pm.Exponential('sigma', 1)\r\n            phi = pm.ICAR('phi', W=W)\r\n            mu = sigma * phi\r\n```\r\n\r\nadjusted some formatting here, mostly putting a space after comma"", 'comment_created': datetime.datetime(2023, 7, 28, 20, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1278051936, 'comment_body': 'Could add a bit of detail here, like, ""It puts an additional normal prior on the sum of the phi, such that the sum is normally distributed with mean zero and a small standard deviation, whose value is `zero_sum_strength`.  Maybe `zero_sum_stdev` is a clearer name then?  ', 'comment_created': datetime.datetime(2023, 7, 28, 20, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}, {'comment_id': 1279608986, 'comment_body': 'Not sure, I wrote them with single slashes. Maybe one of the pre-commit checks added them by mistake?', 'comment_created': datetime.datetime(2023, 7, 31, 16, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-saunders-phil', 'type': 'User'}]","[{'commit_sha': '1dfa05918ac63102d446b91d1f7d2e9aee512922', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10fed3b7c175717f38e4e03daa42cebc43e5b770', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a6e963d5812e7816161f006042ae3ecf1769b13', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd496689aea72111a673debcac94706ce8750e426', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8114a7debe6334fe02a7e8c04ebe19eabef0cb7c', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf8be008a5ff61d1d0c2008278113d5fb1fd5b78', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '299ea68d48f4024d4c861e3b597b33bcd2735976', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f0579a3475fb1e1b6afbbf59975ae06be548fc8', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6a7acd476e5c1b4f519d2d4d5a014fcbddc198a', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b466044ec5d36f9bc7c5c85c9c138d12ebb1363', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e66e1d0877c35d46ddedf1db6ae727d0b7f44d78', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f8072c59a694a48935142f4df32dbd860cfcb2f', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}]",Daniel Saunders,83777819,,User,,15,,37,15
1412077684,Restrict domain on alpha in the CAR distribution,"#6792

Hi, I think I need some help writing the checks correctly. The intended change is supposed to be fairly trivial. the alpha parameter should be restricted to be (-1,1). I tried making the changes that I thought would enforce them but they are not working. The `make_node()` check is not triggering when I create the random variable with `.dist` or when I use `pm.draw()`. The `lopg()` check is triggering all the time, even when alpha is in the acceptable range.

Maybe something we can discuss @fonnesbeck @bwengals today?


<!-- readthedocs-preview pymc start -->
----
:books: Documentation preview :books:: https://pymc--6801.org.readthedocs.build/en/6801/

<!-- readthedocs-preview pymc end -->",True,6801,https://api.github.com/repos/pymc-devs/pymc/pulls/6801,https://github.com/pymc-devs/pymc/pull/6801,closed,31,5,2,4,9,9,0,0,[],2023-06-28 17:37:58+00:00,2023-07-26 20:06:27+00:00,2428109.0,"28 days, 2:28:29","[{'comment_id': 1245561330, 'comment_body': ""You shouldn't put this assert here. Instead raise an error in the `rng_fn` if the alpha is actually problematic for random draws.\n\nOtherwise Asserts will complicate the graph needlessly.\n\nAnyway the reason you don't see the exception is probably that you need to use `pt.and_` instead of python `and`."", 'comment_created': datetime.datetime(2023, 6, 28, 17, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 1245607711, 'comment_body': 'Yup the `pt.and_` was what I was missing. So instead of using assert in the rng function, I just raise a ValueError? Is that right?\r\n\r\n    if alpha >= 1 or alpha <= -1:\r\n                raise ValueError(""the domain of alpha is: -1 < alpha < 1"")', 'comment_created': datetime.datetime(2023, 6, 28, 18, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-saunders-phil', 'type': 'User'}, {'comment_id': 1245644741, 'comment_body': 'Yes, but alpha could be a vector so you need a `np.all(...)`', 'comment_created': datetime.datetime(2023, 6, 28, 19, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 1245679607, 'comment_body': 'gotcha - okay sent in a new commit with these changes.', 'comment_created': datetime.datetime(2023, 6, 28, 19, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-saunders-phil', 'type': 'User'}, {'comment_id': 1257418834, 'comment_body': 'I assume you mean this?\n\n```suggestion\n        if np.any(alpha >= 1) or np.any(alpha <= -1):\n```\n', 'comment_created': datetime.datetime(2023, 7, 9, 6, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 1257418957, 'comment_body': 'Maybe worth to test the logp as well?', 'comment_created': datetime.datetime(2023, 7, 9, 6, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 1257419050, 'comment_body': '```suggestion\ndef test_car_alpha_bounds(alpha):\n```\n', 'comment_created': datetime.datetime(2023, 7, 9, 6, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ricardoV94', 'type': 'User'}, {'comment_id': 1257530307, 'comment_body': 'Yeah I think so too. Is it okay if I write it within the same test or do we need two separate ones? I went with putting them in the same test with the latest commit but happy to reorganize it.', 'comment_created': datetime.datetime(2023, 7, 9, 19, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-saunders-phil', 'type': 'User'}, {'comment_id': 1257539496, 'comment_body': ""I think either is OK, it's clear what you're testing either way"", 'comment_created': datetime.datetime(2023, 7, 9, 20, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'bwengals', 'type': 'User'}]","[{'commit_sha': '1f003455420b6f930086f2c06f95291eb6be11e3', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '835f533a863e1c24a19f2bb846df56971d0243a9', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eba76f67a1e5997caa10b4a762e4834e1a41225a', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26859b12005f729accb728875c401fde0e32673c', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}]",Daniel Saunders,83777819,,User,,15,,37,15
1365477058,Conditional autoregressive priors,"#417 is got stuck and the original author isn't pursing the PR anymore. However, it would be nice to get this notebook finished. I just don't have the permissions to change #417 directly. So I've made a new PR to, at the very least, test out the preview of read the docs and see if it passes continuous integration checks on github.",True,547,https://api.github.com/repos/pymc-devs/pymc-examples/pulls/547,https://github.com/pymc-devs/pymc-examples/pull/547,closed,1540,28,5,18,10,16,0,0,[],2023-05-26 00:28:57+00:00,2023-06-15 17:39:11+00:00,1789814.0,"20 days, 17:10:14","[{'comment_id': 1213332882, 'comment_body': ""There is also an autoregressive tag https://www.pymc.io/projects/examples/en/latest/blog/tag/autoregressive.html which seems relevant for the notebook based on the title. I'd also recommend going over the list of tags (left sidebar of https://www.pymc.io/projects/examples/en/latest/gallery.html) and add other that might be relevant too."", 'comment_created': datetime.datetime(2023, 6, 1, 15, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1213349370, 'comment_body': 'Also add  yourself here', 'comment_created': datetime.datetime(2023, 6, 1, 15, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1213355844, 'comment_body': '```suggestion\r\nmyst:\r\n  substitutions:\r\n    extra_dependencies: bambi seaborn\r\n```\r\n\r\nI need to update the docs, they recenly updated the metadata keys for this. Ref: https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#substitutions-with-jinja2. It also looks like geopandas and pylibsal and the like should also be added here.', 'comment_created': datetime.datetime(2023, 6, 1, 15, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1213361680, 'comment_body': 'this should be updated to https://www.pymc.io/projects/docs/en/latest/contributing/jupyter_style.html#reading-from-file', 'comment_created': datetime.datetime(2023, 6, 1, 15, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1213368477, 'comment_body': '```suggestion\r\nspat_df[""INDEPENDENT_RES""] = independent_stacked.res.mean(dim=""sample"")\r\n```\r\n\r\nor, given I don\'t see `independent_stacked` variable being used later, it could even be:\r\n\r\n```\r\nspat_df[""INDEPENDENT_RES""] = independent_data[""posterior""][""res""].mean(dim=[""chain"", ""draw""])\r\n```', 'comment_created': datetime.datetime(2023, 6, 1, 15, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1213370805, 'comment_body': 'similar comment as above, `axis=...` should not be used with xarray objects', 'comment_created': datetime.datetime(2023, 6, 1, 15, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1213372321, 'comment_body': 'this cell is not used anywhere, should be removed', 'comment_created': datetime.datetime(2023, 6, 1, 15, 58, 44, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1213382750, 'comment_body': ""I'd probably say something like:\r\n\r\n```\r\n* Adapted from {ref}`another PyMC example notebook <conditional_autoregressive_model>` by Conor Hassan and Daniel Saunders ([pymc-examples#417](https://github.com/pymc-devs/pymc-examples/pull/417) and [pymc-examples#547](https://github.com/pymc-devs/pymc-examples/pull/547/)).\r\n```\r\n\r\nAuthorship of the other notebook should be on the other notebook I think."", 'comment_created': datetime.datetime(2023, 6, 1, 16, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1213383334, 'comment_body': '```suggestion\r\n%watermark -n -u -v -iv -w -p xarray\r\n```\r\n\r\npytensor is imported, so adding it here duplicates it on the watermark', 'comment_created': datetime.datetime(2023, 6, 1, 16, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1218317165, 'comment_body': 'Is there anything I should do on my end? The ipynb file just has:\r\n\r\n```\r\n:::{include} ../extra_installs.md\r\n:::\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2023, 6, 5, 16, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-saunders-phil', 'type': 'User'}, {'comment_id': 1218446525, 'comment_body': 'yes, only the metadata and these two lines are enough. You can see in the preview how this two lines add into the rendered notebook a predefined template with install instructions with pip, conda and from within jupyter: https://pymcio--547.org.readthedocs.build/projects/examples/en/547/case_studies/conditional_autoregressive_priors.html', 'comment_created': datetime.datetime(2023, 6, 5, 18, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1218701834, 'comment_body': ""i'm not clear on where I can add the metadata. The substitutions lines only appears in the myst file (as far as I can tell) and I thought that's entirely generated from the .ipynb. \r\n\r\nAlso, if it matters we don't need seaborn or bambi for this one. Just geopandas and pylibsal. Both should be installed with conda-forge."", 'comment_created': datetime.datetime(2023, 6, 5, 23, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-saunders-phil', 'type': 'User'}, {'comment_id': 1220991583, 'comment_body': 'The section I linked of the style guide covers how to edit the metadata from jupyter. This (together with cell level metadata which we also use) is one of the main reasons we use myst files in addition to ipynb. The ipynb is needed to store outputs and render the website properly, myst ones are needed for proper reviews to be possible (this might change with the improvements in jupyer diffs github is doing but for now I think they are still needed) ', 'comment_created': datetime.datetime(2023, 6, 7, 6, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1222234604, 'comment_body': 'I\'m still pretty unsure - the .ipynb metadata now reads:\r\n\r\n```\r\n  ""substitutions"": {\r\n    ""extra_dependencies"": ""geopandas libpysal""\r\n  },\r\n```\r\n\r\nbut the document preview is unchanged. What might I be missing? Is there an example of a notebook in the pymc library that has used this myst substitutions trick successfully I can model?', 'comment_created': datetime.datetime(2023, 6, 7, 22, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'daniel-saunders-phil', 'type': 'User'}, {'comment_id': 1227092663, 'comment_body': 'It has been updated, you might have been a bit too eager and not waited for the rtd check (has status mark below) finished. I do see the new libraries now.\r\n\r\nThis behaviour is the one that appears in the style guide (and still works) but was recently deprecated. It should be:\r\n\r\n```\r\n  ""myst"": {\r\n    ""substitutions"": {\r\n      ""extra_dependencies"": ""geopandas libpysal""\r\n    }\r\n  },\r\n```', 'comment_created': datetime.datetime(2023, 6, 12, 18, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 1230910039, 'comment_body': 'I think the notebook is more [explanation](https://diataxis.fr/explanation/) type than [reference](https://diataxis.fr/reference/).', 'comment_created': datetime.datetime(2023, 6, 15, 12, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': 'd5350bb14ba2ee595cfab93f01022ddcd5ba15c0', 'committer_username': 'conorhassan', 'committer_name': 'Conor Hassan', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 18, 13, 18, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7145e4ed870513b8b45e0b2c6378708b356ce332', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d2741d268cce80fa4a33f5f4d55b50b688d20f3', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7574d2c13e2a67e93ab9cd20b2066a41913c2abf', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f842b2b2f32b38d6a66ec4f6979c2e63e7ec3eac', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41dc905716a358a517df77739dd4a123543c91db', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6468dec0422f571a02075cca4de6a76290444900', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b85c44989fffda09f709591a9e40ae9f666052d', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95095d08230f237920935e25b3b2401b71159a94', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '851aa5628174d26230c72abf0680373cd3f37a8b', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fcc1ecfe7020f55d686d950457650258ce790f5', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa2f6bdc4799da0869f54b27c141aeccdf0fe5c1', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d6c8d72fb170c4e7da1ebd9b329ab836298481e', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6796f194395e2f9a7e99cb7ca1f4ad381abdc22f', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbe660017490ba50fc191e2715ae54566b795031', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e0302386006ecdfb9fb5b289a0a67c41292534', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27795d14257899717b4381807ec8806ce70cd939', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}, {'commit_sha': '941572cdebf968bc7ea6c9df9c13f9bc84549f9e', 'committer_username': 'daniel-saunders-phil', 'committer_name': 'Daniel Saunders', 'committer_email': None, 'commit_date': datetime.datetime(2021, 5, 6, 16, 13, 17, tzinfo=datetime.timezone.utc)}]",Daniel Saunders,83777819,,User,,15,,37,15

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
192904,pymc,pymc-devs/pymc,Python,1984,8587,224,503,10020,300,18,63,"[{'id': 1481587310, 'number': 6867, 'closed': datetime.datetime(2023, 8, 24, 11, 22, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 19, 21, 6, 31, tzinfo=datetime.timezone.utc), 'time_taken': 396970.0, 'time_delta': '4 days, 14:16:10', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1476518928, 'number': 6862, 'closed': datetime.datetime(2023, 8, 16, 21, 34, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 15, 21, 33, 31, tzinfo=datetime.timezone.utc), 'time_taken': 86431.0, 'time_delta': '1 day, 0:00:31', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 1438177138, 'number': 6831, 'closed': datetime.datetime(2023, 8, 18, 16, 31, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 17, 22, 37, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2742819.0, 'time_delta': '31 days, 17:53:39', 'additions': 241, 'deletions': 0, 'state': 'closed'}, {'id': 1431773215, 'number': 6824, 'closed': datetime.datetime(2023, 7, 13, 10, 28, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 18, 13, 1, tzinfo=datetime.timezone.utc), 'time_taken': 58523.0, 'time_delta': '16:15:23', 'additions': 581, 'deletions': 581, 'state': 'closed'}, {'id': 1412077684, 'number': 6801, 'closed': datetime.datetime(2023, 7, 26, 20, 6, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 17, 37, 58, tzinfo=datetime.timezone.utc), 'time_taken': 2428109.0, 'time_delta': '28 days, 2:28:29', 'additions': 31, 'deletions': 5, 'state': 'closed'}, {'id': 1330685946, 'number': 6693, 'closed': datetime.datetime(2023, 5, 15, 20, 14, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 27, 16, 37, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1568196.0, 'time_delta': '18 days, 3:36:36', 'additions': 266, 'deletions': 0, 'state': 'closed'}, {'id': 1304908083, 'number': 6652, 'closed': datetime.datetime(2023, 4, 6, 15, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 15, 8, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2928.0, 'time_delta': '0:48:48', 'additions': 158, 'deletions': 142, 'state': 'closed'}, {'id': 1280724980, 'number': 6609, 'closed': datetime.datetime(2023, 4, 6, 15, 55, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 17, 20, 25, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1711816.0, 'time_delta': '19 days, 19:30:16', 'additions': 211, 'deletions': 161, 'state': 'closed'}, {'id': 1040121614, 'number': 6080, 'closed': datetime.datetime(2022, 9, 4, 14, 13, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 19, 36, 27, tzinfo=datetime.timezone.utc), 'time_taken': 499033.0, 'time_delta': '5 days, 18:37:13', 'additions': 11, 'deletions': 11, 'state': 'closed'}, {'id': 1019392391, 'number': 6035, 'closed': datetime.datetime(2022, 8, 13, 14, 45, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 6, 18, 25, 40, tzinfo=datetime.timezone.utc), 'time_taken': 591569.0, 'time_delta': '6 days, 20:19:29', 'additions': 23, 'deletions': 21, 'state': 'closed'}, {'id': 1018163231, 'number': 6027, 'closed': datetime.datetime(2022, 8, 5, 2, 29, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 5, 1, 54, 27, tzinfo=datetime.timezone.utc), 'time_taken': 2129.0, 'time_delta': '0:35:29', 'additions': 5, 'deletions': 5, 'state': 'closed'}]"
321449673,pymc-examples,pymc-devs/pymc-examples,Python,227,268,23,85,397,137,9,15,"[{'id': 1606884568, 'number': 601, 'closed': datetime.datetime(2023, 11, 17, 17, 46, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 17, 17, 42, 31, tzinfo=datetime.timezone.utc), 'time_taken': 262.0, 'time_delta': '0:04:22', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1606697865, 'number': 597, 'closed': datetime.datetime(2023, 11, 17, 17, 22, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 17, 15, 46, 29, tzinfo=datetime.timezone.utc), 'time_taken': 5738.0, 'time_delta': '1:35:38', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1481902920, 'number': 566, 'closed': datetime.datetime(2023, 9, 8, 13, 37, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 20, 20, 44, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1615981.0, 'time_delta': '18 days, 16:53:01', 'additions': 9211, 'deletions': 0, 'state': 'closed'}, {'id': 1365477058, 'number': 547, 'closed': datetime.datetime(2023, 6, 15, 17, 39, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 26, 0, 28, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1789814.0, 'time_delta': '20 days, 17:10:14', 'additions': 1540, 'deletions': 28, 'state': 'closed'}]"
