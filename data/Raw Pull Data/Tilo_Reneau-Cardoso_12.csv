pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1479491024,ask: handle real linear inequalities,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->\
Here are some examples of what this PR enables ask to do:

```python
x, y, z = symbols(""x y z"", real=True)
ask(x + y > 2, (x < 0) & (y <0)) # returns False instead of None
ask(x > z, (x > y) & (y > z)) # returns True instead of None
```

Unfortunately, I didn't have time to figure out how to handle infinite values, non-rational values, or complex variables. In the future, it might make sense to remove the `lra_satask` function and integrate the code from this pull request into `satask` once these cases are handled. Then again, one advantage of keeping it separate might be speed.

Currently, variables need to be specified to be real when they are created using the old assumptions. In other words, queries like `ask(x > 0, (x > 1) & Q.real(x))` don't currently work.

Also, if a disallowed predicate such as Q.even is part of a query, that disables inequality handling. This could be changed fairly easily. However, I wanted to avoid slowing down queries that weren't primarily about inequalities.

#### logic/algorithms/lra_theory.py

Contains the LRASolver object which is designed to work in conjunction with a SAT solver to determine if a boolean formula involving inequalities is satisfiable or not. 

#### sympy/assumptions/lra_satask.py

A function that's called in `ask` when `satask` returns None. It does some preprocessing so that all predicates are either Q.gt, Q.lt, Q.ge, Q.le or Q.eq and then makes some calls to `satisfiable` with `use_lra_solver` set to True. The `use_lra_solver` parameter tells satisfiable to use an LRASolver object in conjunction with the dpll2 algorithm.


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->

* assumptions
  * Linear inequalities and equalities with real variables and rational coefficients are now understood by `ask`. For example,  queries like `ask(x > 1, x> 0)` will no longer return None. However, x needs to be initialized as a real variable like this: `x = symbols(""x"", real=True)`. 

* logic 
  *  The dpll2 algorithm now has the option to use an LRA theory solver.

<!-- END RELEASE NOTES -->
",True,25544,https://api.github.com/repos/sympy/sympy/pulls/25544,https://github.com/sympy/sympy/pull/25544,closed,1914,10,10,146,20,56,3,0,"[{'name': 'assumptions'}, {'name': 'GSoC'}, {'name': 'Almost Done'}]",2023-08-17 18:22:08+00:00,2023-09-29 23:54:46+00:00,3735158.0,"43 days, 5:32:38","[{'comment_id': 1297883906, 'comment_body': 'Please try to annotate the mutable fields with types.', 'comment_created': datetime.datetime(2023, 8, 18, 0, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1297884507, 'comment_body': ""I'm not sure if this is intended for inheritance or not.\r\nIf you are not sure, or experimental, I'd just try to decorate `@typing.final` to keep the users out of extending the objects."", 'comment_created': datetime.datetime(2023, 8, 18, 0, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1297916794, 'comment_body': ""It's not. This specific part of the code is actually from https://github.com/sympy/sympy/pull/25363."", 'comment_created': datetime.datetime(2023, 8, 18, 2, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1298002712, 'comment_body': ""I don't see what the point is of explicitly disabling subclassing like that. Especially for a class that's just for internal use anyway. "", 'comment_created': datetime.datetime(2023, 8, 18, 4, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1298004287, 'comment_body': 'The point is we need to discuss about ‘design’ issue before making anything public.\r\n\r\nIf we are still experimenting, or avoid design reviews, I just want to hide that as much from users.\r\n\r\nWe can always ask for forgiveness later, but first, we stick to everything immutable, const, final. \r\nIf we are not making things beautiful at first time, I never want to let users to reuse the code in some other ways.\n\nI want to avoid problems like \n\nhttps://github.com/sympy/sympy/issues/23037#issue-1126487385\n\nWith technical tools that modern PEP provides', 'comment_created': datetime.datetime(2023, 8, 18, 4, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1298997226, 'comment_body': ""@oscarbenjamin could you give any advice on how to speed up this pivot function? Currently it's the bottleneck in the code. "", 'comment_created': datetime.datetime(2023, 8, 19, 1, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1299002177, 'comment_body': '<img width=""589"" alt=""Screen Shot 2023-08-18 at 7 06 29 PM"" src=""https://github.com/sympy/sympy/assets/67246777/81b35817-2eb9-4c98-89b8-2722cf732cb8"">\r\n', 'comment_created': datetime.datetime(2023, 8, 19, 2, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1299152355, 'comment_body': '""substituting""', 'comment_created': datetime.datetime(2023, 8, 19, 8, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'faze-geek', 'type': 'User'}, {'comment_id': 1299304342, 'comment_body': 'How did you reach to the example?\r\nI would take a look at if there is a regression about assignment because of the introduction of `RepMatrix`\r\nhttps://github.com/sympy/sympy/pull/21626', 'comment_created': datetime.datetime(2023, 8, 20, 5, 43, 56, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1300435947, 'comment_body': '> How did you reach to the example?\r\nI made 20 largish random problems using the code in test_lra_theory.py and used the LRASolver to solve them. \r\n\r\n> I would take a look at if there is a regression about assignment because of the introduction of RepMatrix\r\nhttps://github.com/sympy/sympy/pull/21626\r\n\r\nI\'m a bit confused about what this means. Regression as in a test for some fixed bug? What do you mean by ""assignment""?', 'comment_created': datetime.datetime(2023, 8, 21, 17, 28, 27, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1300438417, 'comment_body': 'Assignment here means `M[i, j] = ...`', 'comment_created': datetime.datetime(2023, 8, 21, 17, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1300442009, 'comment_body': '> I made 20 largish random problems using the code in test_lra_theory.py and used the LRASolver to solve them.\r\n\r\nCan you refer to the specific test case?', 'comment_created': datetime.datetime(2023, 8, 21, 17, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1300555561, 'comment_body': '```\r\nproblems = [make_random_problem(num_variables=8, num_constraints=16, rational=False, disable_strict=False,\r\n                                  disable_nonstrict=False, disable_equality=False) for _ in range(20)]\r\n\r\nproblems = [prob_to_enc(cons) for cons in problems]\r\n\r\nfrom pyinstrument import Profiler\r\n\r\nprofiler = Profiler()\r\nprofiler.start()\r\nfor enc in problems:\r\n    lra, x_subs, s_subs = LRASolver.from_encoded_cnf(enc)\r\n    assert_bounds(lra, enc)\r\n    lra.check()\r\n\r\nprofiler.stop()\r\n#profiler.open_in_browser()\r\n```\r\n\r\nThe screenshot is from lra.check().\r\n\r\nSince `num_variables=8, num_constraints=16`, the matrices involved would be around 16 by 24. Basically with these settings each random problem has 16 equalities, strict or non-strict inequalities and each of those constraints would have 8 variables. And the numbers in the matrices would be small integers at first. ', 'comment_created': datetime.datetime(2023, 8, 21, 19, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1304322185, 'comment_body': 'Are you sure that this code runs fine?\r\nI may fiddle to figure out how to run this, but got tuple index errors.', 'comment_created': datetime.datetime(2023, 8, 24, 13, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1304380470, 'comment_body': ""That's fine, but you should probably open a SYMPEP to outline any things you want the whole SymPy community to follow. Once we agree on a SYMPEP, then we can enforce/encourage the policies developed there."", 'comment_created': datetime.datetime(2023, 8, 24, 13, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'moorepants', 'type': 'User'}, {'comment_id': 1304386033, 'comment_body': 'Anyway, I can confirm that there is no much difference about forcing the Matrix to `EXRAW`.\r\nIt means that we may need hard time around, to optimize the algorithm itself.', 'comment_created': datetime.datetime(2023, 8, 24, 14, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1304487498, 'comment_body': '`Matrix.copyin_matrix` can be made more efficient by adding a corresponding DomainMatrix method and using that.', 'comment_created': datetime.datetime(2023, 8, 24, 15, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1309555220, 'comment_body': 'I changed the return type of LRASolver.from_encoded_cnf at some point so that may have been the issue. A lot of stuff was broken a week ago.', 'comment_created': datetime.datetime(2023, 8, 30, 2, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1310624613, 'comment_body': 'Boundary', 'comment_created': datetime.datetime(2023, 8, 30, 17, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1310625613, 'comment_body': 'Arithmetic', 'comment_created': datetime.datetime(2023, 8, 30, 17, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1310972020, 'comment_body': '```suggestion\r\n        We rearrange equation 1 in terms of variable 0 (x)\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 0, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1310976575, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 0, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1310976638, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 8, 31, 0, 39, 28, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1310978750, 'comment_body': ""Maybe I should add leading underscore so it's _LRASolver?"", 'comment_created': datetime.datetime(2023, 8, 31, 0, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1310979805, 'comment_body': 'That may work', 'comment_created': datetime.datetime(2023, 8, 31, 0, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1312033153, 'comment_body': 'You should just use ValueError here. ', 'comment_created': datetime.datetime(2023, 8, 31, 18, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1312040309, 'comment_body': 'This should be a classmethod. ', 'comment_created': datetime.datetime(2023, 8, 31, 18, 22, 30, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1313611246, 'comment_body': 'I have thought similar that staticmethod can always be redundant than classmethod in Python before, especially for everything was duck typed.\r\n\r\nHowever, now I just think that there is also no use of classmethod if the method does not depend on the parameter cls.\r\n\r\nFormally, it should be possible to substitute  staticmethod, with ‘def function’, as well as trivial class methods or trivial bound methods that does not depend on the class, object.\r\n\r\nSo I stopped thinking that that coding was a problem, especially after type checkers or linters are established.', 'comment_created': datetime.datetime(2023, 9, 1, 22, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1313616937, 'comment_body': ""The reason I say it should be a class method is because it's an alternative constructor, which is the typical use-case of class methods in Python. However, in this case, it returns an instance of the class and also something else, so maybe it isn't really a constructor. "", 'comment_created': datetime.datetime(2023, 9, 1, 23, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1313617622, 'comment_body': 'Also this would depend on cls. The function uses `LRASolver`, which would be `cls` if this were a class method. ', 'comment_created': datetime.datetime(2023, 9, 1, 23, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1313618018, 'comment_body': 'Okay, I thought it was pointing out to `pivot` though', 'comment_created': datetime.datetime(2023, 9, 1, 23, 1, 53, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1313976737, 'comment_body': '@oscarbenjamin what do you think should happen here if .kind returns UndefinedKind?\r\n\r\nWould something that returned UndefinedKind be something that this LRASolver might handle? Are there any examples that return UndefinedKind that I could use in the tests?', 'comment_created': datetime.datetime(2023, 9, 2, 20, 20, 12, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1313980799, 'comment_body': 'Currently we have:\r\n```python\r\nIn [1]: cos(x).kind\r\nOut[1]: UndefinedKind\r\n```\r\nIdeally that would be changed but most things are in reality `NumberKind` (regardless of what `.kind` gives) and most of the time `UndefinedKind` really means `NumberKind` just because the system is incomplete.\r\n\r\nFor a test I would just make a new Expr subclass.', 'comment_created': datetime.datetime(2023, 9, 2, 20, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1318971128, 'comment_body': ""I think the problem is here. This should be a single equals sign. It's failing for me because I have pycosat installed. \r\n\r\nBut let's also make sure this is properly tested on CI. It looks like pycosat isn't installed in the optional dependencies build. If it was, we would have caught this. "", 'comment_created': datetime.datetime(2023, 9, 7, 18, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1318972010, 'comment_body': 'This should use `ValueError` not `AssertionError`. Assertions should not be used to check user inputs. ', 'comment_created': datetime.datetime(2023, 9, 7, 18, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1318979641, 'comment_body': 'A better word is ""unequality"". That\'s also what the SymPy Ne class is called.\r\n\r\n```\r\n>>> str(Ne)\r\n""<class \'sympy.core.relational.Unequality\'>""\r\n```', 'comment_created': datetime.datetime(2023, 9, 7, 18, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1318982144, 'comment_body': '```suggestion\r\n    (1 = 2): False\r\n    (y = 1): True\r\n    (y < 1): True\r\n    (y > 1): True\r\n    (x = 0): True\r\n    (x < 0): True\r\n    (x > 0): True\r\n```', 'comment_created': datetime.datetime(2023, 9, 7, 18, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1318986288, 'comment_body': '```suggestion\r\nThis implementation is based on [1]_, which includes a\r\n```', 'comment_created': datetime.datetime(2023, 9, 7, 18, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1318986710, 'comment_body': '```suggestion\r\n[1]_ also explains how backtracking and theory propagation\r\ncould be implemented to speed up the current implementation, \r\nbut these are not currently implemented.\r\n```', 'comment_created': datetime.datetime(2023, 9, 7, 18, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1318987169, 'comment_body': '`pass` is not needed here \r\n\r\n```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 9, 7, 18, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1318999279, 'comment_body': 'And elsewhere too, an AssertionError should only ever occur if there is a bug in the code.', 'comment_created': datetime.datetime(2023, 9, 7, 18, 53, 32, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1319000991, 'comment_body': ""It's better to use `print(file=sys.stderr)`. Also you can use `pretty()` instead of `pprint()` to get the string form so it is also printed to stderr. "", 'comment_created': datetime.datetime(2023, 9, 7, 18, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1319001287, 'comment_body': 'Actually, why not just use the `debug()` function?', 'comment_created': datetime.datetime(2023, 9, 7, 18, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1319003419, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 9, 7, 18, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1319004636, 'comment_body': ""It's also not actually currently the case that `I > 0` is False. That's what I'd propose for it to do, at least internally in the assumptions, but presently it gives an error."", 'comment_created': datetime.datetime(2023, 9, 7, 18, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1319007710, 'comment_body': ""This doesn't need to be done in this pull request, but I'd like to investigate replacing  this (or at least adding in addition to this) with hypothesis strategies. "", 'comment_created': datetime.datetime(2023, 9, 7, 19, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1319009007, 'comment_body': 'Also remove all the timing stuff above that this is coming from.\r\n\r\nIf we want to track the performance here, we should add benchmarks to the benchmarks suite https://github.com/sympy/sympy_benchmarks.', 'comment_created': datetime.datetime(2023, 9, 7, 19, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1319009588, 'comment_body': ""Same here, let's delete all the timing stuff from the test. "", 'comment_created': datetime.datetime(2023, 9, 7, 19, 5, 11, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1319011722, 'comment_body': ""I would suggest refactoring this so that lra_satask raises UnhandledInput exceptions, and the logic here catches those exceptions and returns None. That way, you can call lra_satask directly if you want to be clear about whether something is returning None because it is actually undetermined or just because the input currently can't be handled. "", 'comment_created': datetime.datetime(2023, 9, 7, 19, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1322127304, 'comment_body': 'Also remove the timing stuff from the test. If we want to keep track of timings we should do that in the benchmarking suite. ', 'comment_created': datetime.datetime(2023, 9, 11, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1337716479, 'comment_body': 'I should add some comments explaining what WHITE_LIST and the other variables here are', 'comment_created': datetime.datetime(2023, 9, 26, 20, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1337720116, 'comment_body': ""something like:\r\n```\r\n# Some predicates such as Q.prime can't be handled by lra_satask.\r\n# For example, (x > 0) & (x < 1) & Q.prime(x) is unsat but lra_satask would think it was sat.\r\n# WHITE_LIST is a list of predicates that can always be handled.\r\n```"", 'comment_created': datetime.datetime(2023, 9, 26, 20, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1337723603, 'comment_body': 'maybe `enc_cnf_to_pred_and_expr` would be a better name', 'comment_created': datetime.datetime(2023, 9, 26, 20, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1337743450, 'comment_body': 'maybe `extract_pred_from_old_assum` would be a better name.', 'comment_created': datetime.datetime(2023, 9, 26, 20, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1337757030, 'comment_body': 'put this into a helper function—maybe `check_for_unhandled_input`', 'comment_created': datetime.datetime(2023, 9, 26, 20, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1337761917, 'comment_body': 'Improve comments:\r\n```\r\n# convert old assumptions into predicates and add them to sat_true and sat_false\r\n# also check for unhandled inputs\r\n```\r\n\r\nWe can reuse the check_for_unhandled_input function here.', 'comment_created': datetime.datetime(2023, 9, 26, 20, 45, 49, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}]","[{'commit_sha': 'f2bbc20b429bac6f442f3ab0354e7e04c0dc35ef', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '197c4e945deb846cdfec2cb97d9a5a976fb69624', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40bee6e561a7fe32e3af680854a79e824c669fbb', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e749bb1512b04b9d0738a57a67808c560b9841e7', 'committer_username': 'Upabjojr', 'committer_name': 'Francesco Bonazzi', 'committer_email': None, 'commit_date': datetime.datetime(2013, 4, 11, 17, 28, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7075a3f0accefd946ba5cb136666f9c861307ada', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52c621be31d32b8684c4c136be2085a881cd6a5a', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77630d688e7696e1f2a18e9d588fc7cf1440e3f6', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd57cb2765084984c7b90ff583f296bd8cd9c8744', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fed81b652a5aeffb8fc3bb5da81c4901d3f9467', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74eb15fce7acd82e0d9c5adaed43be7429a2df16', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec517210d212eee30ed1e6a170463a743ff303e6', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2a35311e6d13be881d969bc6a1ad09b8e379dc', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d98bc19c2ddc738ea5254d483c85529ff75d634', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff0fae42edb20464dac8629b5886cfe3e502ad15', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0eac325fd2ebee36d6210f4daceab0b5998270e', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f22dbfe5457ad2bb7e045ec444715bae0623c850', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83c94cf296dcc18c0465797179ad7bc591ea84fe', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cbe601786e2fa97110a30e989f441b54a8a986a', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc52acb87818e4cb26022b9ea7e6f5a876d01f8d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22ab41d35a141d602b54be6e6c852edafc595711', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd50829e0641329f0a995f2dcb3c33fbf7e4700aa', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f7793807885fb3085fd64fc40bfeba6b8c877f3', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91183dc1eb8c3d51784835cd72e2d23876520399', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7532eee78edc55f862bbe0d25cc43d806d644e1f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69e36a6a9b3e82835f4bc75a25d64d9fa24c86a3', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8589f2f7196ec6cf107c91ef578f2ea2201909b2', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4be639f0f83df3392b3fc7781727fe9f7f27c89', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3b61bf7c5ebb60f35768bee7f0c2ecd9f418e59', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f549f2d8146f763aa698c3d231afab2f900111af', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b92f8b1e0f0c6265e52033517e5b71f0a175f781', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '610fb0021ac2de8a3764f802009d42523fc98c42', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef0301dab994c8a8794853c9fd6940ef8020e514', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12a89b8677641f22d37c794a45c4f95f7965093b', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0abf6763af40a09e179236924b688c64a63e127', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a3087ee9bb53c49c360009f0816cdfb60b7d075', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6770ee2005333ea1a589dce302db79fff311a2e2', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e862af95c9e7fa14c6b3fd09749ec6ce77d6a2a0', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae17356a5bb6771bf5361a074691cf166bf1aca8', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30307b6b3d4fda6816c3ae70cb67e4622c3c0b04', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a209dac723c2174ef25079bc9b44ee54732ba4f1', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6be5304bd6abae984478e25e40e3f41dcf104f26', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '486f0cc3c3fe90d36dc466677c5de2174e618cf3', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43ae6ea8d372cd4bc0296d2409d276d5308f0c33', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6eefae002af926899b66741681aaa651898f0815', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3c95e61d3afa67ccf5173fca95f3ba657ccca58', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6be5792111c78bd24567b4499cab30474c2351a4', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fbde89d7738b4c8af5bf8b0325ce2bc5e5bb0f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '212dc932f3c30bf8b116fe7336529a03ce9be93f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519156c557697c005bbe1882e4af1a186fae9e8d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f04e6d2c993bd30bb3d088241b9e9c484eb4d709', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff0cf97325580e8ecd390a9efb207766740e3d09', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3306b14d8b5c188253201806aa53bb759ed707fe', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be3149da73c71de726733d023b1078670b966b1e', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc5f2deac5a09f714ffbb39683b8d17d14ebb905', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9cfeee2f10c17ee42c1d7330987b691ab3c94d7', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a8384f768c061bcf0f9f429a22b483a56d423c5', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9afdc480b4bceb2c3dea3a50a9d653cfa39f4f69', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '507022227612122c92a52678b700c8e97a05f485', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e26520f5af7f548776bc9788cad4d6323e0efb08', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4618c8cd13dbc19fd7c9acd2bf2424fb3fb38632', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d80bd95d8ee3755a0857649ed148ca8d0dac703', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2eceb79a3a3aadea175c8200b48328034b4a4f1', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a31437dc1ad55d1d83169642186d0a7d91d3b2ed', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a1ba1c3ebf44d15c2bd37a9bd928a365c517362', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2e2a20c9ea31fd887ff9e3121797949684e8d24', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f557aa373a4d556a15fd86b7221b906e58c20af', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c22840bc2ff052e957c7d61d5022d88132bb194e', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '790bbe2d0c3b9bdbf99e98c76d913f583b7a865d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d31e45ef238f695342595b4a04cc186ab68633d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21ec8c428246624242bfca71b38f99fcc199fc5e', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3481918d188f744d6835a3788ed74a4357591e0d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75a65a1f2e5032db9dd511b52cf65d93d7d3f370', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '380bf7f4cfb265cfd7cf45a6541cdb262fa4d9a4', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b178effeb033fd94898c2fa43a5c5d3912154583', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd29dd78e3fee775f77c28760c50b65d5ec79ad24', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf8f46c38762176434e985f646ecab4e5e82fb56', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a92be9c9284cacd16554fcadb3694ab5695035', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92468b20108385e5a6d49b3eff5b6775717d3383', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c0a997332e38be5156ca5e4aedfabbab76873a8', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2821e24a4cf28804433c92755bf34005db1fc88', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c51c726c80cdcd9242ad27d49d9479954ccb4172', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03ea59c5655492fd4da750a47042a8ade39d7aba', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7b11ebdeb0c29753da8b63c5b1c11af67b631bb', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21aad0019e4e5731d97583594478ab1b3e7cb145', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '403378f5b56b0e7060ed91802eccba377febdb05', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65df9f8c69a05958212f45814ba4e2c7eab849be', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be4791ddc0f5adcc1b16ecfd5673f614436fc71', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd34c4cf2ae4cbd1128f46f721e5d1b048ccee8d7', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8126a0518148a8859a4f60b4c79e26eaa9b8fec1', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a583382ac272377ea1148916a589a169768d2cb', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7de3936bd289964cd6e1117632bb358a86cb17fe', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c317e198e510e5b29221e20fa3578543db4d1709', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66a79ed48ff5aea0c217d40c8d6a5e01fb192659', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ac54bbd4e767742eb5fa0fcf268bfa604aed9f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f407a518d398e0f98fdd73e68acdfd1447f2ed', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f87173ba1322d61f8f28a2565eea81c2cc8bc5ed', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8cf412dae059bc0bca2815d479465f725862bf8', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '328629fc71cc883352912ee63be77a570e1957cc', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca220313bde6d0494247302d0ddbd5f9a636a8a6', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca3bb3dadf57cb8eb46f045b91b78ae4b21da088', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36318b3b10baeb72ed41b166ccf7e334378c9c95', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c754c926c4b0af835e2e498315d70140289016f7', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58382ae832210d9514c30a9d84800c68b8ad324c', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd238793a34857c1885e2feb37a8d9538a1287298', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4e482dd3951df14d894fcc2d98b653678ebc560', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb190099ad712ea00bd415d097f18fd31e0ae5b', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82005f28bd722b3e763177ac44d79e3f4c70253f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d93f66cd1b255f09fa81cb8fd89f9cf09cf093e', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3663b98f2c0e308feb048727432edaebd2f5ed2', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96b45ec42bb22774116914bf3f3b6fb92000716d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c29dadd997197c0fd6c1c363b19e6d6ca36da430', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '800182dab84b61631e306db82da334f94d50b6f2', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '991226601f1b65dc1f280eb8eacb29ff7d62e742', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed6ff9a486d78c78015f3088eff53f6d31f4fb18', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbaaab847cc909183bf6e79add01e08fa7566e6f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e85f27218ae9248596d5c7a52a44717351a9a1', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9a9d288963b851c85ab38da391681d8d61f95f4', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c8245c56f67edac97e423c0d878e62f46991750', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55f643d01fa9922af751056c8dd200194366fd2c', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76e1e41ae2a977870e10ce48e6a080fb2f83e7c4', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e19e7dc741b6b4d3f4dcca4988dd9b1858888c6', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75f1791dcb26dff8142358b94db1c9078a577274', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede61cc5dff1d40d86a6be3610263b335e3e4c8a', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07acc871a437e7e121f273e7021d7c8081d03285', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b4a5f1a63b0b7663ad38730fc3e67dfd5f83cf5', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a881e49f673340b289d4ffb6dfc7c073118739c1', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '546737ec3ae0929ae66d334256a5bf0947a1a173', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e77809e328b3c8ddcfdfc42702975be5290c903c', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c00242b4aa69a1b7fc7c869680bcef6145e2072', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eea156a8ba13c5e30f2a72ba1c86830423594fa', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c34e298692a94158cf98d47736e8413f43cba22', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59cbc8514e4affae452b7b558c3f1e202ee23b68', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0eb0025e7b24e92b9b6021c1fbd6685f644e99f2', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c615eae719ed3c4c0c616000e9d50c484d5be5a4', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95a7fd573f6d2c09e8b1b19f929ec09896f33f67', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc28a0179724acc10a517ab8daa2bcd252a39588', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d1e103bf029bb6d77d2db9794ecf16854e0eda2', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4e6edb38e2edc04c1449020504c7aae19995aff', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '992380d1ae252212bb2aec7914e54895d21f2a88', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1b2f0d3d06689183c9b53b08b8d54da7db838c8', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca4d921decc92d4c24eee6291ce84b0b168dd46e', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4c172c724395bec8816927e154dfa29860f2d3', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71a96b92333ed37c6e353ea7b6883020e3afd223', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0d9ba0bd11e5614bf806d64c4b5b6657fc5d09', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cca2661879e0bb27739f8823cfd0566bd0bd09b1', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9554d85ca53fd8b1284c10b601c926e9c1fac00d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}]",Tilo Reneau-Cardoso,67246777,,User,,17,,21,15
1452528938,Allow `inference.satisfiable` to handle inequalities by adding z3 as an optional dependency,"Enables `inference.satisfiable` to handle linear and polynomial inequalities. Currently still has some bugs.

#25363 will also add inequality handling. However, what sets this PR apart is that Z3 can handle polynomial inequalities while 25363 will only be able to handle linear inequalities. I thought Z3 would probably also be faster, but after running tests this seems to be very wrong.

Speed tests on `test_bounded()` from `test_query.py`. The ranges are rough estimates I made based on running the code 2 or 3 times.

| Satisfiable Algorithm | Time |
| --- | ----------- |
| dpll2 | 4.2 +/- .3 sec |
| z3 | 1 m 16 +/- 5 sec |

This time can't be improved upon very much because it mostly seems to be a slow down in Z3's python bindings or Z3 itself rather than my string parsing code. Perhaps there's some way to frame the problem differently so Z3 has an easier time with it.

It's possible for z3 to be unsure if something is sat or unsat — in such cases None is returned.

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->

* logic
  * Added Z3 Theorem Prover as an optional algorithm for `satisfiable`. Can be used to handle linear and nonlinear inequalities.

<!-- END RELEASE NOTES -->
",True,25436,https://api.github.com/repos/sympy/sympy/pulls/25436,https://github.com/sympy/sympy/pull/25436,closed,138,2,4,12,12,6,0,0,[],2023-07-27 18:43:13+00:00,2023-08-31 18:06:27+00:00,3021794.0,"34 days, 23:23:14","[{'comment_id': 1297637112, 'comment_body': 'Move this to the top of the file. ', 'comment_created': datetime.datetime(2023, 8, 17, 19, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1304815407, 'comment_body': 'There should only be one blank line here', 'comment_created': datetime.datetime(2023, 8, 24, 20, 9, 11, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1304816167, 'comment_body': 'This should be skipped when z3 is not installed. See sympy/utilities/tests/test_lambdify.py for an example of how to do this. ', 'comment_created': datetime.datetime(2023, 8, 24, 20, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1304816485, 'comment_body': 'delete these changes', 'comment_created': datetime.datetime(2023, 8, 24, 20, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1310807423, 'comment_body': ""I think this blank line is breaking the YAML file, which is why the tests aren't running. "", 'comment_created': datetime.datetime(2023, 8, 30, 20, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1310808129, 'comment_body': ""Actually it's more likely this line, but the below blank line shouldn't be there either. The diff of this file should just be to add `z3` and nothing else. "", 'comment_created': datetime.datetime(2023, 8, 30, 20, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}]","[{'commit_sha': '4b42e4d1a726f68aff6d23a1b1fd42e8e90a6da2', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e528084afcdc7f01a603373f4fd7c7cae93585', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd3ba3c75faee34b3a71eb8f7f5c031b6b0469d7', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50ddf115db11ce9ce917c8e31f7439f020dbb014', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd22026ba036e4b63520d2a701817cb5d236d4fb', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a24fd0474d60ea31b44b29811514100deccef812', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01e65449966abde59ec410082de88af89bc2f96c', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9eebaf1972a262b28626d24dca4fb35b682d8e0c', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9647f9fd5f89b935dde6399b24a1e341600b6b5', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8f4f4feb979892e6de31d8c62c691b33cd929a8', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0de96a9bb87c891c8d8d21a3907991b8158e5787', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6f61ab29e178fb6c94b7d269ee0a8a3a5d9433', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}]",Tilo Reneau-Cardoso,67246777,,User,,17,,21,15
1453921458,Simplex,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
 continuation of #25277

#### Brief description of what is fixed or changed

```console
Tools for optimizing a linear function for a given simplex.

For the linear objective function ``f`` with linear constraints
expressed using `Le`, `Ge` or `Eq` can be found with ``lpmin`` or
``lpmax``. The symbols are **unbounded** unless specifically
constrained.

As an alternative, the matrices describing the objective and the
constraints, and an optional list of bounds can be passed to
``linprog`` which will solve for the minimization of ``C*x``
under constraints ``A*x <= b`` and/or ``Aeq*x = beq``, and
individual bounds for variables given as ``(lo, hi)``. The values
returned are **nonnegative** unless bounds are provided that
indicate otherwise.

Errors that might be raised are UnboundedLPError when there is no
finite solution for the system or InfeasibleLPError when the
constraints represent impossible conditions (i.e. a non-existant
 simplex).

Here is a simple 1-D system: minimize `x` given that ``x >= 1``.

    >>> from sympy.solvers.simplex import lpmin, linprog
    >>> from sympy.abc import x

    The function and a list with the constraint is passed directly
    to `lpmin`:

    >>> lpmin(x, [x >= 1])
    (1, {x: 1})

    For `linprog` the matrix for the objective is `[1]` and the
    uivariate constraint can be passed as a bound with None acting
    as infinity:

    >>> linprog([1], bounds=(1, None))
    (1, [1])

    Or the matrices, corresponding to ``x >= 1`` expressed as
    ``-x <= -1`` as required by the routine, can be passed:

    >>> linprog([1], [-1], [-1])
    (1, [1])

    If there is no limit for the objective, an error is raised.
    In this case there is a valid region of interest (simplex)
    but no limit to how small ``x`` can be:

    >>> lpmin(x, [])
    Traceback (most recent call last):
    ...
    sympy.solvers.simplex.UnboundedLPError:
    Objective function can assume arbitrarily large values!

    An error is raised if there is no possible solution:

    >>> lpmin(x,[x<=1,x>=2])
    Traceback (most recent call last):
    ...
    sympy.solvers.simplex.InfeasibleLPError:
    Inconsistent/False constraint
```

#### Other comments
There are 3 public functions: lpmin, lpmax and linprog. 

`linprog` is patterned after the scipy interface though it has fewer options: 

```python
def linprog(c, A=None, b=None, A_eq=None, b_eq=None, bounds=None):
    """"""Return the minimization of ``c*x`` with the given
    constraints ``A*x <= b`` and ``A_eq*x = b_eq``. Unless bounds
    are given, variables will have nonnegative values in the solution.
```
The other two are for direct symbolic input (which may feel more natural). 

#### TODO
[x] I need to update the docstring to indicate the values are *not* constrained to be nonnegative when passing a matrix; the matrix is just a short-hand representation of the system without symbols.
[x] this doesn't work: `lpmin(x,[y >= 10, x >= y])`

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* solvers
    * simplex module added with public functions `lpmin`, `lpmax` and `linprog` for dealing with linear optimization
<!-- END RELEASE NOTES -->
",True,25440,https://api.github.com/repos/sympy/sympy/pulls/25440,https://github.com/sympy/sympy/pull/25440,closed,1538,13,7,134,33,62,0,0,[],2023-07-28 14:28:51+00:00,2023-08-17 21:35:34+00:00,1753603.0,"20 days, 7:06:43","[{'comment_id': 1278063388, 'comment_body': '```suggestion\r\nfrom sympy.core.relational import Le, Ge, Eq\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 20, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1278063785, 'comment_body': '```suggestion\r\n    assert reduce_rational_inequalities(\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 20, 35, 57, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1278063900, 'comment_body': '```suggestion\r\n    assert reduce_rational_inequalities(\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 20, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1278063985, 'comment_body': '```suggestion\r\n    assert reduce_rational_inequalities(\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 20, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1278064062, 'comment_body': '```suggestion\r\n    assert reduce_rational_inequalities(\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 20, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1278065182, 'comment_body': '```suggestion\r\n    aux = []  # auxilliary symbols added\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 20, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1278065794, 'comment_body': '```suggestion\r\n    univariate = {}  # {x: interval} for univariate constraints\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 28, 20, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1280760797, 'comment_body': '```suggestion\r\nfrom sympy.matrices.matrices import MatrixBase\r\n```', 'comment_created': datetime.datetime(2023, 8, 1, 14, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1280761539, 'comment_body': '```suggestion\r\n    if len(LP) > 2 and all(isinstance(i, (list, MatrixBase)) for i in LP):\r\n```', 'comment_created': datetime.datetime(2023, 8, 1, 14, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1281015846, 'comment_body': 'What if:\r\n\r\nMinimize x subject to y = 2,  x=y\r\n\r\nIf we get rid of y, then the constraint x=y becomes meaningless.', 'comment_created': datetime.datetime(2023, 8, 1, 18, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281031306, 'comment_body': ""Are you sure this works?\r\n\r\nI would think that flipping the sign of the objective function and then flipping the sign of the optimum value wouldn't work because of the constraints.\r\n\r\nWouldn't something along these lines happen?\r\n\r\nmaximize x + y subject to \r\nx <= 2\r\ny <= 3\r\n\r\nbecomes\r\n\r\nminimize x + y\r\nsubject to \r\nx <= 2\r\ny <= 3\r\n\r\nwhich is unbounded even though the original problem was not. \r\n"", 'comment_created': datetime.datetime(2023, 8, 1, 19, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281041400, 'comment_body': 'Oh I see _lp_args handles this I think.', 'comment_created': datetime.datetime(2023, 8, 1, 19, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281049108, 'comment_body': ""I see that it's necessary to keep min_max as an input to this function so that the sign of the final output can be flipped. Couldn't the flipping of the sign of f take place in _lp_args?"", 'comment_created': datetime.datetime(2023, 8, 1, 19, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281049539, 'comment_body': ""I'm not sure if I like the idea that this can take multiple types of input. I think this might make it a little confusing to use. Are there other functions in SymPy that can do something like this?"", 'comment_created': datetime.datetime(2023, 8, 1, 19, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281050762, 'comment_body': 'probably good idea to explicitly mention the constraints must be linear just to be super clear\r\n\r\nunder constraints ``A*x >= b``\r\n\r\n--->\r\n\r\nunder linear constraints ``A*x >= b``', 'comment_created': datetime.datetime(2023, 8, 1, 19, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281059077, 'comment_body': 'I think it might be better to handle all of the logic for converting the maximization problem to a minimization problem and back within `lpmax`. \r\n\r\nThe reduction from maximization problem to minimization problem should be very clear. ', 'comment_created': datetime.datetime(2023, 8, 1, 19, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281073493, 'comment_body': 'To make the reduction clear I think it should take place together, not split up over multiple functions. ', 'comment_created': datetime.datetime(2023, 8, 1, 19, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281077101, 'comment_body': 'Instead of *args, the parameters could be \r\n\r\nobjective, constraints \r\n\r\nwhere \r\n\r\nobjective : either an expression or Matrix([c, d])\r\n\r\nconstraints : either a list of  constraints expressed using Ge, Le or Eq or Matrix([[A, b]])', 'comment_created': datetime.datetime(2023, 8, 1, 19, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281134873, 'comment_body': ""That would require resolving equalities, favoring those that don't appear in the objective. I preferred that, anyway, and can look at making that change."", 'comment_created': datetime.datetime(2023, 8, 1, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1281147552, 'comment_body': 'python `range` does this. SymPy often works with `*args` and `args` and handles conversion. @oscarbenjamin point out that ""Mathematica\'s LinearOptimisation function has the signature LinearOptimisation(objective, constraints, vars) but can alternatively accept matrices like LinearOptimisation(f_vec, (c_mat, b_vec))."" When the logic is straightforward for dealing with the different inputs, I prefer the single interface. But if sentiment is strongly against it, we could do `lpmin_from_matrix`, `lpmin_from_matrices` in addition to `lpmin` But this will not make the viewed code any more transparent to someone that knows the different outputs: it will be `lpmin(M)` (one arg), `lpmin(f, constr)` (two args) or `lpmin(a, b, c)` or `lpmin(a,p,c,d)`.', 'comment_created': datetime.datetime(2023, 8, 1, 20, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1281150115, 'comment_body': 'I can add ""for the vector of symbols, ``x``."" Then, by definition, f and constraints are linear.', 'comment_created': datetime.datetime(2023, 8, 1, 21, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1281151192, 'comment_body': 'See below: there can be 1 (matrix), 2 (f, constr), 3 or 4 args (individual matrix components).', 'comment_created': datetime.datetime(2023, 8, 1, 21, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1281157618, 'comment_body': ""> Couldn't the flipping of the sign of f take place in _lp_args?\r\n\r\n`_lp_args` returns f and const in standard from from the matrices. It is only because `_simplex` doesn't solve the standard form that the handling specifically for `_simplex` is handled at the point of call. That way any other simplex solver could be implemented and the special handling would happen only at the point of call.\r\n\r\n"", 'comment_created': datetime.datetime(2023, 8, 1, 21, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1281164696, 'comment_body': ""> To make the reduction clear I think it should take place together, not split up over multiple functions.\r\n\r\nThis is the flow:\r\n```\r\nlpmin(*args)\r\n    args -> interpreted into standard f, constr in _lp_args\r\n        f, constr -> A,B,C,D with aux variables in _lp_matrices\r\n            A,B,C,D -> solution' (perhaps in terms of aux) in _lp\r\n                solution' -> final solution in lpmin\r\n```"", 'comment_created': datetime.datetime(2023, 8, 1, 21, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1281174934, 'comment_body': ""Perhaps we make lpmin only accept f, constr. If the user wants to use matrices then the call would be \r\n* `lpmin(*primal_dual(M)[0])`  if M is for f and `Ax<=b` or \r\n* `lpmin(*primal_dual(M.T)[1])` if M is for f and `Ax>=b` or \r\n* `lpmin(*primal_dual(_m(a,b,c,d))[0])` if a,b,c,d are the parts from `f=cx-d` and `ax<=b`. \r\n* etc...\r\n\r\nIn other words, give them the tools for changing from one form to the other and let them use them or create lambda's as they desire."", 'comment_created': datetime.datetime(2023, 8, 1, 21, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1281305833, 'comment_body': '> If the user wants to use matrices\r\n\r\nOne of the reasons to use matrices is efficiency, so converting matrices to equations would defeat the purpose.', 'comment_created': datetime.datetime(2023, 8, 2, 2, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281307981, 'comment_body': ""The example I gave involved equalities, but constraints involving variables not in the objective function can also be meaningful in situations without equalities: \r\n\r\nMinimize x subject to y >= 10, x >= y\r\n\r\nHere the problem becomes unbounded when you remove y even though originally this wasn't the case."", 'comment_created': datetime.datetime(2023, 8, 2, 2, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281309016, 'comment_body': ""I don't think this is very important either way. Do whatever you think is best."", 'comment_created': datetime.datetime(2023, 8, 2, 2, 14, 45, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281312114, 'comment_body': ""I think it's reasonable to it this way then. Having multiple functions for the same thing does seem annoying. \r\n\r\nI would maybe mention that the input can be a list constraints expressed using Ge, Le or Eq first, before the matrix stuff. I think most people would prefer not to use the matrix. \r\n\r\nWhat's the reasoning for accepting either M or A, b, c, d? In what situation would someone prefer to use one or the other. It seems simpler to me to either accept just M or A, b, c, d. "", 'comment_created': datetime.datetime(2023, 8, 2, 2, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281317213, 'comment_body': ""So the returned objective function is an expression and constraints contain a list of Ge, Le, Eq?\r\n\r\nIt was my understanding that the purpose of being able to handle matrices was for efficiency reasons.  Wouldn't converting large matrices into SymPy expressions and then back into matrices be slow?\r\n\r\nWhy not have _lp_args convert everything to a standard matrix form?"", 'comment_created': datetime.datetime(2023, 8, 2, 2, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1281318324, 'comment_body': ""I don't think it's necessary to handle predicate from the new assumptions anymore. We can get rid of this. "", 'comment_created': datetime.datetime(2023, 8, 2, 2, 36, 29, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1282082945, 'comment_body': 'One of the reasons people are using SymPy is for the symbols. I suspect scipy or numpy are used when people are interested more in the numerics. But I guess we could let lp follow the scipy minimization signature: `lp(c, A_ub=None, b_ub=None, A_eq=None, b_eq=None, bounds=None)`. lpmin and lpmax could allow for more arbitrary input.', 'comment_created': datetime.datetime(2023, 8, 2, 15, 35, 33, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1282088645, 'comment_body': ""If someone is making A,b,c,d from linear_eq_to_matrix then it's not too hard to wrap it up before sending it `lpmin(Matrix([[A,b],[c,d]]))` but I got that wrong enough times that I just didn't want to think about it -- I know I have A,b,c,d right and just want the function to put them in M correctly."", 'comment_created': datetime.datetime(2023, 8, 2, 15, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1282101329, 'comment_body': ""I'll look at refactoring. It might take some time given the current schedule."", 'comment_created': datetime.datetime(2023, 8, 2, 15, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1289122419, 'comment_body': 'Now that I am not solving equalities, I could stay in ""matrix mode"" in `linprog`. But that might take another week to get time enough to finish it.', 'comment_created': datetime.datetime(2023, 8, 9, 19, 49, 18, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1289127119, 'comment_body': ""This still doesn't work: `lpmin(x,[y >= 10, x >= y])` -> Infeasible"", 'comment_created': datetime.datetime(2023, 8, 9, 19, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1291849452, 'comment_body': 'I think it would be clearer to state these explicitly like `A = Matrix([[2, 1]])`, `B = Matrix(...)` rather than using a list comprehension.', 'comment_created': datetime.datetime(2023, 8, 11, 23, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291853455, 'comment_body': ""Maybe this could even show the inequalities to clarify the relationship between the matrices and the problem:\r\n```python\r\nIn [5]: M = Matrix([[1, 2], [3, 4]])\r\n\r\nIn [6]: x = Matrix(symbols('x:2'))\r\n\r\nIn [7]: b = symbols('y:2')\r\n\r\nIn [8]: [a >= b for a, b in zip(M*x, b)] # No way to avoid a list comprehension here...\r\nOut[8]: [x₀ + 2⋅x₁ ≥ y₀, 3⋅x₀ + 4⋅x₁ ≥ y₁]\r\n```"", 'comment_created': datetime.datetime(2023, 8, 11, 23, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291853970, 'comment_body': 'I think this assert is guaranteed by the immediately preceding if (no big deal)', 'comment_created': datetime.datetime(2023, 8, 11, 23, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291854210, 'comment_body': ""Oh, no it isn't. How do we know this is satisfied?"", 'comment_created': datetime.datetime(2023, 8, 11, 23, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291856089, 'comment_body': 'I guess this could be `min` or `max` rather than `sorted`/', 'comment_created': datetime.datetime(2023, 8, 11, 23, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291858025, 'comment_body': 'I think many people would struggle to understand this when reading it. How about:\r\n```\r\n>>> M = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\r\n>>> M\r\nMatrix([\r\n[1, 2, 3],\r\n[4, 5, 6],\r\n[7, 8, 9]])\r\n>>> A = M[:2,:2]\r\n>>> A\r\nMatrix([\r\n[1, 2],\r\n[4, 5]])\r\n>>> B = M[2,:2]\r\n>>> B\r\nMatrix([[7, 8]])\r\n```\r\netc. To me seeing each result and comparing it with the original is much clearer than interpreting the code.', 'comment_created': datetime.datetime(2023, 8, 11, 23, 16, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291858564, 'comment_body': 'Maybe it better to just raise an error if any side is infinite...', 'comment_created': datetime.datetime(2023, 8, 11, 23, 18, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291859798, 'comment_body': 'Is it simple to avoid assuming nonnegativity by default?', 'comment_created': datetime.datetime(2023, 8, 11, 23, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291865346, 'comment_body': 'Is it actually useful to allow these different possibilities? I find it hard to follow what this function does because of the ambiguity about its arguments.', 'comment_created': datetime.datetime(2023, 8, 11, 23, 26, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291868314, 'comment_body': ""Especially for a public function we need to be careful about signature. I don't see a good reason to stray from what SciPy and Matlab do in this function signature."", 'comment_created': datetime.datetime(2023, 8, 11, 23, 27, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291869703, 'comment_body': 'This is my only real concern for this PR.', 'comment_created': datetime.datetime(2023, 8, 11, 23, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291911098, 'comment_body': 'There is no other way to pass an inequality that allows for any real value. `linprog` uses tuples for limits with None acting as infinity.', 'comment_created': datetime.datetime(2023, 8, 12, 0, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1291911846, 'comment_body': 'It is not hard to do so. It is harder to think what will make the most sense to people using the function. The inequality `x <= 3` clearly permits negative values. So I would rather that the user also indicate x >= 0 if they also want that condition. If I automatically add `x >= 0` then how will the user indicate a range like -1 to 1?', 'comment_created': datetime.datetime(2023, 8, 12, 0, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1291912459, 'comment_body': ""Anyone using scipy can (up to the bounds) pass the same variables there as here. The only difference is that this `linprog` allows a `D` -- but since that doesn't factor into the solution process we could leave it off and let the user ponder why it is not needed. For simplicity I am not opposed to omitting `D`."", 'comment_created': datetime.datetime(2023, 8, 12, 0, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1291914202, 'comment_body': '> It is harder to think what will make the most sense to people using the function\r\n\r\nI think most users would assume that since they are providing assumptions the function will use the provided assumptions rather than imposing any assumptions a priori.', 'comment_created': datetime.datetime(2023, 8, 12, 0, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291916689, 'comment_body': "" I should take a closer look to understand how these APIs work.\r\n\r\nNo objection from my side but I thought I understood this and probably I didn't..."", 'comment_created': datetime.datetime(2023, 8, 12, 0, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1291921806, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 12, 0, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1291923335, 'comment_body': 'It now raises a ValueError', 'comment_created': datetime.datetime(2023, 8, 12, 0, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1291923781, 'comment_body': 'done', 'comment_created': datetime.datetime(2023, 8, 12, 0, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1292030842, 'comment_body': 'modified', 'comment_created': datetime.datetime(2023, 8, 12, 3, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1292030951, 'comment_body': 'It has now been omitted.', 'comment_created': datetime.datetime(2023, 8, 12, 3, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1292284842, 'comment_body': 'Note: I actually struggled with how to say this. I know about the decorated sort but the ""decorated max"" was a little more ellusive. I got it back to a one-liner, however.', 'comment_created': datetime.datetime(2023, 8, 12, 13, 3, 20, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1292287867, 'comment_body': 'Re-reading this, I think I miscued on your intent. I think you are saying that the variables should be unbounded unless constrained otherwise. This is as simple as adding `xi <= oo` for all `xi`. If they want nonnegative values then they should explicitly say `xi >= 0`.', 'comment_created': datetime.datetime(2023, 8, 12, 13, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1292306280, 'comment_body': ""I would expect the method not to assume anything other than that symbols are real by default. It shouldn't be necessary to pass `xi <= oo` in order to specify that `xi` might be negative."", 'comment_created': datetime.datetime(2023, 8, 12, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1292394389, 'comment_body': ""> No objection from my side but I thought I understood this and probably I didn't..\r\n\r\nI am very appreciative of the time given for review. I agree that when working with symbolic constraints that we should let the user make the assumptions rather than imposing an assumption made by a support routine. So now `lpmin/max` are WYSIWYG in terms of constraints and infinities are disallowed (because those are part of the default assumption for variables). See the simple 1-D example in the OP.\r\n\r\nThe basic idea is that a linear function can be minimized on a simplex (n-dim linear region). `_simplex` does the task of minimizing `C*x - D` with `A*x <= B` for nonnegative variables, `x`. Everything else is scaffolding to get a system expressed with Le, Ge or Eq and desired bounds expressed in terms of A, B, C, D and to handle finding the max or the min."", 'comment_created': datetime.datetime(2023, 8, 12, 17, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1292409118, 'comment_body': 'This, now, is how the routine behaves as mentioned in my comment (way below). I totally agree.', 'comment_created': datetime.datetime(2023, 8, 12, 17, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}]","[{'commit_sha': '5884e0435a1aa64b711e768c0dd368978f12b8d9', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7795a9c58698200c406ffd13eb7c87a4990d3588', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d412b04efea413d0e1e3311def92dbab59a8ef', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577969cdfdff1ebf213fcaa6cb9555e3a6ecd8f3', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af405020e77fac7e84e222fc6005de99042160aa', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69480088a89eb0d28a49e97178f9d67552e74e7e', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d3226e7b1a8c904605e44c5d284957ca0de07f', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05ac024f0c78519de865084f82c63ef7ecaf4856', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a39178aeeacc2daab361da9ab702be9d7bfe2997', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1541b7d2fc805a3011d6a3f4ef88f576925a7d57', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713a476699ee811fe33135d0b32bad91376c1071', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd908618be9fbceb0209bc82f202347d4b0b5a896', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b81e39a8113d658d6a18830b3c3fb6eb3dc72984', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e26ea5083f604d5e176b1d38b75039a14aea880', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62dee9482908a20e0f65e154fde46341fc6cdb24', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03b9e28a457ce9c69660e16c91c8ea98a1215440', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1af7205ce1f000aef06c4f7b70610c46350491f', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '120b450ac1219ed2bb2f9fb7d28cc818e6f54dc0', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291d53a448db38a7e4bfe20ec51093e479a9e9ca', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87e3bec7a1696a8dd66701cd4bdafaad0d40e1c9', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5af3e02df9cd7e963ed2e6c6873f0431bfeadd66', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90eae990a5d4eed693ac3ec94868f65eeae7e6d', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621130ee0f4de23419f13fa6e6e9e7824593bfca', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e8f7271edf38fdb7adbbfb566a33831a2d03b9', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c6b1d3496d4ebc19aa98f9b693c842261d1318b', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2faf63e3e65cd4cf757ca63b01c34e2a74071ba6', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a31d9bef1cba955ac645fb13233c60d0214ab5d0', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '232ea1ee62998848966efb2e831a01ead28c1e9c', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a983787c05f1d8e227fd274d3de1eed6bf5be8', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbcd3a9afbd2918695066186bd111ed8c86433c6', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18552bef5babf94c4d19c218c2e6268859cb81f6', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850301000c80da129c01596341a8485091b527e5', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9687b63f7b347e466fd70e2bd9fca1a02e61708', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '127dc30174ad18f14833c8ee729957c5d8300ff9', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05dc9d54d2b279a607c332574b2273c254171de7', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c942b9bfd12f1f1b4188d885a159f0730e10e', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f7fb2492d7316d2eeb22ff03ade690d9975fe50', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87e9590a5c8166afd7503d92bf1689a6ece50f55', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc511ce5665f327184ccde21ceb003afc01664c1', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d7a4f90e7b2ad1faf584b8ed152354d4bf2883', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c45f2140a05a4c46cfb9d869c3df435e55e9b65', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5edf44bbce4dd088409d5e4f4dc1bd5f7342290f', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47eb4f926e25e44f3aa5b8ccb0e9022cc6a78904', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9edfc9868be1a94dd3c532274da40705ece9d7b5', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad929632fed43bdfed79d96832f3e03b86e99f9c', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97424770171056afbc0b62f01b18b2e7a1f7e286', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d699d8a3f334ea8f6225332bdc614c59efee453', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3df9fad315a12dd47a5e3a85c4f780e3242a1636', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22507e8572721f4505b1f55168269a5671a52095', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad9be63e9e6cf38b55d93d24678c51a5e7884bc0', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42cb62e4e513174ae0841a4aa0e682496d819084', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb22705aff11abd03b9df296e842a7ea975d67b1', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f62f35174ab8d918086a0cd140115390cea5b26', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3c3b902753939962bd4226e280ed5973b4d4bbb', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1370069d15ed754a8387b432ffb9044bd6090ec', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '286d00bd5bd0fc3689822e01d9d7bfeb982e1796', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba30ab0f87a16e5d62ae945d2d48303d33cdc526', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74321cf4704ff5501854efa07c13998d66778339', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66dca25236eeb75d95f6e8885c5ce8eefe66ca9', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '238d2031ab6c3b128f260e2f0160a84f70f58cf7', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a01ec396eb97c3532a022cbc5eccf1c2461eac0', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47660b56cb59a01d297f2b279d0c820da91a9a9f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd990d4d3f477b14b912ef0d70f5547dedf9d41', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e8e6d0457fb30e10a2b5cfb988d9ba6234899b', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '303b3d1c1040356b1ab46dc8c3522fe69cda0407', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e9c6cf57bb1126939da384721f0f8e9e664bf2a', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffd60f414177866b06709c075f8ca15019344f35', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771c55377543ab22a599f62ac1f6a9c2a5288e5d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4bbd3c3c1c93c2159a2b7c8fc2ee0c60eaf71a5', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2292161ab554144ff81c6a4dc3e891097ba871ce', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b45717ff87823069effedd87572990bc27db6d93', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030aa6e816a68eb056ec0ab4cb2eec3209eec4ca', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fe4a2882a18c7e1e148ec4d81b683fd1578a946', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '172f33664f6f47aa2a8e34fbf760bf45fd441afd', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7274e9ef8afe99cab5dd74cedf7f1f9fe507e293', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c73971637fdc1bd6c2f339a19fea707e1ab68bdd', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b063fa6ba8cc2c05ece7c18abb175785bb4e07', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5d19ce2f2c69d9cce0dc4236ccc3e23e08c3d55', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b01c76714bbe9cfc847777a64510a06582141c0', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2722e120c8db7681b15ed733c64074610d3aa8af', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f082fc5dc9033e84050da94adf1b0adac2ff81f3', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56142d1a791b2c74269b95731e72f1edd1a6347', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eaf568ee655f77e86af026eb0d917f3e33a191c', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '911deea777ec810571814fb3740a03397abdd1e7', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ba7df3f0a042120d5371bc3743db5471d4bded4', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81d5c3e95ae59722f5e1fd12b899d05a13969891', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22043770f99e3e8fd9aa283165a999155c47f420', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a7f92af21eee145df3145a321750a0d5770e98', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ebfd233216c83e5ccd97881b23ff7e2eff8dbd', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4aa178fb91baa234ee16e2926782198715b4675', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0617661424b676f07d37f3f866b304be38f09dea', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb09b8dc547da4babe7ec2123254b458c12ccfc', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a18e3d0c63b5974376dd775b205d8c2bbcaed61', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37c1569eaefe6870398c4c45315ffc0c5c0d37a6', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0999277056875f74115f78878980ce427685b97', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304a9b41a9e457e4e484a47378fa3ba917150609', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8efd0c0ccd5f7082f6ddc2644e8a2fb5cf604e7f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4a2ba1c73055c11a348944c2a5bf2b86b8f2ff', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb41ad4f0c36d31308d6749e19905f669507d08', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '139b0fd4102b8a6de8cbddc507714738dca709dd', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d7a1941d7859f39811163e58eabec0a02112e9c', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c2c68dcfa7594ccd60f1ecbaa1551f8b872041', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f4db0e2690335a1f35fc787a53e119f8cc9c2e3', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43d23eded73b2377fc8b33574aebce4f39820ac7', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '897c97aab19ce80bfedff2f9a9ca092f79bf3c39', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '137243ad9c8208dbf3584bbb178edbc5fb652af1', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd13da5159054b019226008f1f108345fddb2fc07', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '887f6f621c3c428e4582990d864dd6532d66310b', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e647aada887d205b4b66f3b20e60dab5a17f60b', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0d93b6436be415dbf949d174f92293b326f953c', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '323d6af971d43975794dfa5bdfc48ad79a4e2478', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ddd45d204bf0f019041096dad3110b13dbbe08', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e8da97c3d136edde4b04824cd0cad922f2b9ebc', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c54bd3953551138c3176c441347ac343113bd17e', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3463a5700faab70d6b7f8aed35daa3ba6c8cc70', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f514f275722b95a26bf1a0bc08540bc5fa8b8e', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeffb32e5d4fff8df8e72c49c9022206fe478d22', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75246bcff9fe5b6aac33da1b38d57928aca9bc0c', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '192aebd615e447789b86c50e02c0bf3f5979b97c', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ed9b554c269dc513bc920dcef0dbbe028f642bb', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '031962b0d24a9336d51867d9886117e8e7662e18', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8ee061a6092d3ec6068187185394ca8bdc9fe1d', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07cc5b19c24f6f782cf37580f793c5e943b8fe7d', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd458c7ae98f061248742e0b1c2697755ee83730c', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7b5223a8b4e64c9583fe0a37fa19c514e2b4814', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc25d6666334edd1ad4d3dc1b955be154d9ea1f2', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6c9372e197112f391f4bc8708c2e59122b6197e', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7bbd663df76d2a1da2850ccaeb255285ea06653', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc26d2bf40b9b2a48a7850685bc0c5d70a5f087', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b84569eb054f3a3772c9bbb97e3c46fb638ea5d1', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b2cc0beb64741aa36476d3779e186fb8663b40', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c7de4aec69b0f12dd1105629058b9003b26f8c3', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3992fa6185a35668e8a9f1e9541afee71ab0842d', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'daa33c7b2df9aed558919eabe5a13fa602cb553d', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}]",Christopher Smith,90703,,User,,15,,0,118
1476794029,smtlib: Print Floats correctly,"```
 smtlib_code(Float(0)) # returns '' instead of '0.0'

smtlib_code(.00003) # returns '3.00000000000000e-5' (and z3 does not understand scientific notation)
```

Both of these issues were fixed.

<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->



#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->

* printing 
  * `smtlib_code(Float(0))` now gives `'0.0'` instead of `''` and `smtlib_code(.00003)` gives `'(* 3.0 (^ 10 -5))'` instead of '3.00000000000000e-5'. 

<!-- END RELEASE NOTES -->
",True,25524,https://api.github.com/repos/sympy/sympy/pulls/25524,https://github.com/sympy/sympy/pull/25524,closed,31,5,2,7,3,5,0,0,[],2023-08-16 04:02:01+00:00,2023-08-28 17:13:50+00:00,1084309.0,"12 days, 13:11:49","[{'comment_id': 1297579532, 'comment_body': 'this should use whatever power and mult symbols are specified in the symbols rather than using ^ and *', 'comment_created': datetime.datetime(2023, 8, 17, 18, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1297625804, 'comment_body': 'Is this supposed to be like this? ', 'comment_created': datetime.datetime(2023, 8, 17, 19, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1306494416, 'comment_body': 'Why are we not raising errors?', 'comment_created': datetime.datetime(2023, 8, 26, 17, 24, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1306501713, 'comment_body': ""I'm not sure if you are intending to mark this as todo list or going to keep it as intended."", 'comment_created': datetime.datetime(2023, 8, 26, 18, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1306572348, 'comment_body': ""Good catch. This now throws an exception saying that infinite values are not supported in SMT. As far as I know, that's generally the case."", 'comment_created': datetime.datetime(2023, 8, 26, 22, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}]","[{'commit_sha': '74e40652e54aba43b0f4f9a0dddc8e0d10724100', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f03fe866f433018fe2a13f7e3a8dd62f3aa02e28', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29e58539d7bbd5eb0a160352bf1a705750f50682', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80fc40887cb2eaccb9b6eea1f2b5b7b334397629', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7592a1bfa4e5c77e99ef59e861da2532207b4707', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f966d04330810eed55f6d834a67e83f513e24e', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39583a2b0674aec3ed970d2dc24f6819a0340b43', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}]",Tilo Reneau-Cardoso,67246777,,User,,17,,21,15
1395147963,SMT-Lib printing: Handle predicate objects from new assumptions,"The smtlib_code function will no longer throw an error when it tries to print some predicate from the new assumptions. The printer throws an error if given a predicate that can’t be translated to SMT-Lib or could be but hasn’t been Implemented. While it’s possible to handle even, odd, and some other predicate, this isn’t really all that important so this functionality was dropped.

Example:

In [1]: from sympy.printing.smtlib import smtlib_code

In [2]: from sympy.assumptions.ask import Q

In [3]:smtlib_code(Q.positive(x))

Out[3]]: '(declare-const x Real)\n(assert (> x 0))'

<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->

This is a continuation of this pull request #25232. I worked on a lot of stuff that didn't seem to be a priority so this pull request contains the most essential bits of that one without any distracting commits or comments.

#### Other Comments

@kunalsheth if you want to review this it would be appreciated. 

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* printing
  * make SMT-Lib printer handle some predicates from the new assumptions
<!-- END RELEASE NOTES -->",True,25245,https://api.github.com/repos/sympy/sympy/pulls/25245,https://github.com/sympy/sympy/pull/25245,closed,59,0,2,1,6,1,1,0,[{'name': 'GSoC'}],2023-06-16 06:24:47+00:00,2023-07-06 19:56:02+00:00,1776675.0,"20 days, 13:31:15","[{'comment_id': 1232740272, 'comment_body': 'What happens with unknown predicates? Can we add tests for that? ', 'comment_created': datetime.datetime(2023, 6, 16, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}]","[{'commit_sha': 'd20130ad8fe7cdb5702ff2ebbf3ac14a6a3f8795', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}]",Tilo Reneau-Cardoso,67246777,,User,,17,,21,15
1395279930,Fix incorrect results caused by ask's handling of non-unary predicates,"Fixes #25221

The _extract_all_facts completely ignores non-unary predicates leading to wrong results. For example ask(Q.transcendental(x), Q.algebraic(x) | (0 > y)) incorrectly returns False when it should return None.

If a clause contains non-unary predicates, _extract_all_facts will now avoid returning it.

<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->

* assumptions
  * Make `ask(Q.transcendental(x), Q.algebraic(x) | (0 > y))` give None, not False

<!-- END RELEASE NOTES -->
",True,25246,https://api.github.com/repos/sympy/sympy/pulls/25246,https://github.com/sympy/sympy/pull/25246,closed,10,0,2,4,2,0,0,0,[],2023-06-16 08:07:58+00:00,2023-06-29 19:13:11+00:00,1163113.0,"13 days, 11:05:13",[],"[{'commit_sha': 'bc6442f618ce59e2ea5cfb28c9d896b3a66f46c5', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5519d1032663b7790905868147ecedf481a5f27d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57b41c394fa86a9f4c614b6246fa389716093c48', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25869ec197c574ffc9f14e29207462a4088e502d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}]",Tilo Reneau-Cardoso,67246777,,User,,17,,21,15
1400703906,Add linear programing function using simplex method,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

Continued in https://github.com/sympy/sympy/pull/25440

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->

Continues the work of https://github.com/sympy/sympy/pull/21687 which implements #20391.

#### Brief description of what is fixed or changed

Introduces linear optimization functions and a function to find a feasible solution to a system of linear constraints. Both use  the simplex method.

#### Other comments

I plan to work on this as part of my GSoC project improving relational assumptions. The simplex method can be used to determine whether a system of inequalities is infeasible or not. As Oscar mentioned in https://github.com/sympy/sympy/issues/20391#issuecomment-723446240, this could be used in the new assumptions to answer queries like this:
```
ask(x+y>3, (x>2)&(y>1))
```

The old pull request (#21687) still has some unaddressed comments. After I address them, I'll switch this from a draft to normal pull request.
#### References

1. [wiki on simplex method](https://en.wikipedia.org/wiki/Simplex_algorithm)
1. [short intro to linear programming and related concepts](https://web.tecnico.ulisboa.pt/mcasquilho/acad/or/ftp/FergusonUCLA_LP.pdf)
1. [meaning of dual](https://or.stackexchange.com/questions/4177/physical-interpretation-of-a-dual-of-an-lp#:~:text=The%20dual%20variables%20represent%20the,in%20each%20primal%20constraint%20limit)
2. [primal and dual notes](https://www3.nd.edu/~dgalvin1/30210/30210_F07/presentations/dual_opt.pdf)
#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
* solvers
  * linear programing functions added:  `linprog_maximize_from_equations`, `linprog_from_matrices`
<!-- END RELEASE NOTES -->
",False,25277,https://api.github.com/repos/sympy/sympy/pulls/25277,https://github.com/sympy/sympy/pull/25277,closed,832,16,3,140,58,160,2,0,"[{'name': 'solvers'}, {'name': 'GSoC'}]",2023-06-21 00:50:09+00:00,2023-07-28 14:30:26+00:00,3246017.0,"37 days, 13:40:17","[{'comment_id': 1236932805, 'comment_body': '```suggestion\r\n        free_sym = list(ordered(free_sym | rel.free_symbols))  # make ordering canonical\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1236937533, 'comment_body': ""So the user doesn't have to guess the order of variables, it would be good to return the order used to construct the matrices. In this case it's not strictly necessary to order them as suggested above since the returned order would remove ambiguity."", 'comment_created': datetime.datetime(2023, 6, 21, 12, 41, 40, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1236939307, 'comment_body': '```suggestion\r\n    The method also works with non-integer coefficients (like sqrt(2)).\r\n\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1236941449, 'comment_body': '```suggestion\r\n    >>> A, B, C = _to_standard_form([r1, r2, r3], x + y + 5*z)\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1236942092, 'comment_body': '```suggestion\r\n    >>> A, B, C = _to_standard_form([Eq(x, 3)], x*10)  # x = 3 become x >= 3 and x <= 3\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1236942463, 'comment_body': '```suggestion\r\n    A = []\r\n    B = []\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1236945237, 'comment_body': '```suggestion\r\n    optimum is the optimum solution, and argmax/ argmax_dual give the\r\n    values for x and y, respectively.\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 46, 52, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1236946516, 'comment_body': '```suggestion\r\n    r1 = x - y + 2.0*z <= -4\r\n    r2 = -x + 2*y - 3.0*z <= 8\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1236947007, 'comment_body': '```suggestion\r\nfrom sympy.core.numbers import I, Rational, oo, pi\r\n```', 'comment_created': datetime.datetime(2023, 6, 21, 12, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1237747340, 'comment_body': ""There should be better error checking to make sure constraints and objective are linear.\r\n\r\nAlso, currently if the lhs of an inequality has a constant term it's ignored. For example, `x +2 <= 10` is treated as if it were `x <= 10.`"", 'comment_created': datetime.datetime(2023, 6, 21, 21, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1237751079, 'comment_body': 'If a linear expression has a constant term, it seems like expr.args[0] always accesses it so I can check if an expression has a constant term by checking this. ', 'comment_created': datetime.datetime(2023, 6, 21, 21, 50, 25, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1238430863, 'comment_body': 'This could just use `core.random`', 'comment_created': datetime.datetime(2023, 6, 22, 12, 3, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1238710290, 'comment_body': 'expr.as_independent(*v) -> (i, d) where i is independent of variables in v. But `linear_eq_to_matrix` will handle conversion from equation to matrix and check that it was linear. \r\n\r\n![image](https://github.com/sympy/sympy/assets/90703/913fcb06-bd74-4800-96af-4d55955dd8c2)\r\n', 'comment_created': datetime.datetime(2023, 6, 22, 15, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1239011150, 'comment_body': 'In my GSoC meeting with Aaron, he said there should be better test coverage.\r\nhttps://docs.sympy.org/dev/contributing/new-contributors-guide/writing-tests.html#test-coverage ', 'comment_created': datetime.datetime(2023, 6, 22, 20, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1242988925, 'comment_body': ""I don't think it's necessary to pass in `r` and `s` here. The `_simplex` function can just make a list of integers and permute it then it would return something like:\r\n```\r\nr = [2, 3, 1, 0]\r\n```\r\nThen below you can just do something like:\r\n```\r\nargmax = [M[ri, -1] for ri in r]\r\n```\r\n\r\n_Originally posted by @oscarbenjamin in https://github.com/sympy/sympy/pull/21687#discussion_r703022556_"", 'comment_created': datetime.datetime(2023, 6, 27, 0, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1242999082, 'comment_body': 'I don\'t think this would work. A variable that was originally associated with a column may later become associated with a row. If it returned something like\r\n```\r\nr = [2, 3, 1, 0]\r\n```\r\nthen it wouldn\'t be clear whether `2` was originally a column or row variable. \r\n\r\nHere\'s an example of a pivot operation which shows how a variable associated with a row may switch places with a variable associated with a column. (The image is from the document cited in the docstring of the simplex method).\r\n<img width=""377"" alt=""Screen Shot 2023-06-26 at 5 35 13 PM"" src=""https://github.com/sympy/sympy/assets/67246777/afba39fd-8038-4a81-b0b6-f53b757988de"">\r\n\r\nLet me know if I\'m misunderstanding something. ', 'comment_created': datetime.datetime(2023, 6, 27, 0, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1243026678, 'comment_body': ""Is there a way to link to SciPy's linear programing function? \r\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html"", 'comment_created': datetime.datetime(2023, 6, 27, 1, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1243180142, 'comment_body': ""Most of this function is identical to linear_programming. I'll probably add some helper functions to reduce duplicate code. \r\n\r\nAlso, I'm not sure if this belongs more to sympy/logic rather than sympy/solvers."", 'comment_created': datetime.datetime(2023, 6, 27, 6, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1244433573, 'comment_body': ""I'm not sure why you can't just catch errors than having duplicate functions that returns some error code though.\r\nIf you don't like catching errors, you can redesign the whole function to return error code or customized error type, or vice versa, \r\nbut it shouldn't be meaningless duplicate like `simplex1, simplex2, ...`"", 'comment_created': datetime.datetime(2023, 6, 27, 22, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1244435902, 'comment_body': ""The purpose of this change is for the `find_feasible` function. It's not necessary to perform the entire simplex method if all you're interested in is checking if a system of inequalities is feasible. \r\n\r\nChecking if a system of inequalities is feasible is relevant to my GSoC work with the new assumptions. "", 'comment_created': datetime.datetime(2023, 6, 27, 22, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1244437909, 'comment_body': 'Exceptions or early returns are able to short-circuit such cases anyway.\r\n', 'comment_created': datetime.datetime(2023, 6, 27, 22, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1244440072, 'comment_body': 'By early return do you mean it would be a better idea to add a parameter to `_simplex` that would cause an early return on the first feasible solution instead of splitting it up into two methods?', 'comment_created': datetime.datetime(2023, 6, 27, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1244446094, 'comment_body': ""It would be better to refactor with respect to the actual duplicate code like the while loop, but the point is not to complicate the control sequence (too much optional parameters) or not to introduce any code that doesn't look obvious.\r\nI don't answers for them now, but it can be part of your own responsibility."", 'comment_created': datetime.datetime(2023, 6, 27, 22, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1244810613, 'comment_body': ""I haven't been able to get the coverage functions to run without stalling or crashing. \r\n\r\nI tried \r\n`./bin/coverage_[report.py](http://report.py/) sympy/solvers` (stalls without making progress for at least an hour)\r\nand \r\n`bin/coverage_report.py sympy/solvers/tests/test_inequalities.py` (crashes)\r\n\r\nDespite this, I have added a lot of tests."", 'comment_created': datetime.datetime(2023, 6, 28, 7, 35, 50, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1245014695, 'comment_body': 'This control flow with the phase variable is odd. It would be easier to follow if it was just two loops.', 'comment_created': datetime.datetime(2023, 6, 28, 10, 26, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245015445, 'comment_body': 'This should be in a references section:\r\nhttps://docs.sympy.org/latest/contributing/docstring.html#references-section', 'comment_created': datetime.datetime(2023, 6, 28, 10, 27, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245016246, 'comment_body': 'Are these docstrings included in the rendered docs anywhere? I expect that sphinx would reject this syntax.', 'comment_created': datetime.datetime(2023, 6, 28, 10, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245017210, 'comment_body': 'Docstring test should be wrapped at 80 characters.', 'comment_created': datetime.datetime(2023, 6, 28, 10, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245018707, 'comment_body': 'Usually in a docstring this uses the prompt continuation like the repl:\r\n```\r\n    >>> m = Matrix([[3,1,5],\r\n    ...             [2,-3,1],\r\n    ...             [0,3,1]])\r\n```', 'comment_created': datetime.datetime(2023, 6, 28, 10, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245019843, 'comment_body': 'Wrap long lines', 'comment_created': datetime.datetime(2023, 6, 28, 10, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245021190, 'comment_body': 'Why does this create a new Random?', 'comment_created': datetime.datetime(2023, 6, 28, 10, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245021811, 'comment_body': 'Does the `seed` actually make a difference to the output?', 'comment_created': datetime.datetime(2023, 6, 28, 10, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245031671, 'comment_body': ""There needs to be some definition of what are the inputs that this method can handle. I don't think that arbitrary symbolic expressions can be handled so there should be some checking for this.\r\n\r\nI would be happier with just restricting the method to Rational or Float if it is not clear what is the full class of expressions that can be handled. I think that the algorithm requires being able to solve the zero equivalence problem which is not trivial for arbitrary expressions."", 'comment_created': datetime.datetime(2023, 6, 28, 10, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245033636, 'comment_body': ""I don't think that using free_symbols is a good idea. The caller needs to know the order of the symbols so they should be expected to provide that just like for `linear_eq_to_matrix`."", 'comment_created': datetime.datetime(2023, 6, 28, 10, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245036489, 'comment_body': ""I don't think that `linear_programming` is a good name for this because it is not clear if it is maximising or minimising. It would be clearer to have something like:\r\n```\r\nlinprog_maximize(objective, variables, constraints)\r\n```\r\nNote that we need to provide `variables` because it defines the order of the items in `argmax`."", 'comment_created': datetime.datetime(2023, 6, 28, 10, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245043048, 'comment_body': ""Perhaps `argmax` should be a dictionary like `{x:0 y:1/3, z:2/3}`.\r\n\r\nI still don't think that `variables` should be inferred from `free_symbols` though. That kind of thing seems convenient sometimes but often leads to incorrect interpretation of inputs. At least it should be possible to specify the variables explicitly and that would most likely be the expected usage in library code."", 'comment_created': datetime.datetime(2023, 6, 28, 10, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245531412, 'comment_body': ""For these examples it shouldn't. I included it in docstrings just so people are aware they can use it.\r\n\r\nIf there are multiple argmax / argmax_dual, then it does matter."", 'comment_created': datetime.datetime(2023, 6, 28, 17, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1245535464, 'comment_body': ""If I did it in two loops there would be this duplicate code:\r\n\r\n```\r\n        B = M[:-1, -1]\r\n        A = M[:-1, :-1]\r\n        C = M[-1, :-1]\r\n```\r\nand\r\n\r\n```\r\n        # For each row, we calculate a ratio: B[i] / A[i, j0].\r\n        # The row with the smallest ratio, i0, contains the pivot entry at its intersection with j0.\r\n        # If there are ties, pick a row at random.\r\n        min_ratio = float('inf')\r\n        min_rows = []\r\n        for i in piv_rows:\r\n            ratio = B[i] / A[i, j0]\r\n            if ratio < min_ratio:\r\n                min_ratio = ratio\r\n                min_rows = [i]\r\n            elif ratio == min_ratio:\r\n                min_rows.append(i)\r\n        rand.shuffle(min_rows)\r\n        i0 = min_rows[0]\r\n\r\n        M = _pivot(M, i0, j0)\r\n        R[j0], S[i0] = S[i0], R[j0]\r\n```\r\n        "", 'comment_created': datetime.datetime(2023, 6, 28, 17, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1245539971, 'comment_body': 'They get sorted lexicographically in this line so the caller does know the order.\r\n```\r\nvariables = sorted(variables, key=lambda v: str(v)) # order symbols lexicographically\r\n```\r\n\r\nBut maybe it would be clearer if the order was provided?', 'comment_created': datetime.datetime(2023, 6, 28, 17, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1245545510, 'comment_body': 'Would it be possible to throw an error if it takes too long to compare two expressions?', 'comment_created': datetime.datetime(2023, 6, 28, 17, 27, 3, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1245551752, 'comment_body': ""As far as I can tell, SymPy's random doesn't have a shuffle operation for lists."", 'comment_created': datetime.datetime(2023, 6, 28, 17, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1245561313, 'comment_body': ""If I were to split it up into two loops, perhaps I could make a helper function for this code to avoid duplicate code.\r\n\r\n```\r\n        # For each row, we calculate a ratio: B[i] / A[i, j0].\r\n        # The row with the smallest ratio, i0, contains the pivot entry at its intersection with j0.\r\n        # If there are ties, pick a row at random.\r\n        min_ratio = float('inf')\r\n        min_rows = []\r\n        for i in piv_rows:\r\n            ratio = B[i] / A[i, j0]\r\n            if ratio < min_ratio:\r\n                min_ratio = ratio\r\n                min_rows = [i]\r\n            elif ratio == min_ratio:\r\n                min_rows.append(i)\r\n        rand.shuffle(min_rows)\r\n        i0 = min_rows[0]\r\n```"", 'comment_created': datetime.datetime(2023, 6, 28, 17, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1245653250, 'comment_body': 'It would be better to be able to pass a seed argument to the function rather than calling a global seed like this.', 'comment_created': datetime.datetime(2023, 6, 28, 19, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245654834, 'comment_body': ""It's just the shuffle function in sympy.core.random"", 'comment_created': datetime.datetime(2023, 6, 28, 19, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245663125, 'comment_body': ""I don't think the seed should be served as public API at all.\r\n\r\nThis shouldnt really be using random at all.\r\nThere are other methods, like https://en.wikipedia.org/wiki/Bland%27s_rule which makes the reason that we don't need any random here, but have to be reserached by someone who's gonna implement this in production."", 'comment_created': datetime.datetime(2023, 6, 28, 19, 20, 5, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1245669962, 'comment_body': 'It is better to have a bit of code duplication than a complicated control flow. If it makes sense to define a helper function and that also makes things more readable then that is often a good way to reduce duplication:\r\n```python\r\ndef choose_pivot_row(B, A, rows, col):\r\n    ratios = [B[i] / A[i][col] for i in rows]\r\n    min_ratio = min(ratios)\r\n    min_rows = [i for i in rows if ratios[i] == min_ratio]\r\n    row = rand.choice(min_rows)\r\n    return row\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 28, 19, 27, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245672546, 'comment_body': '> Would it be possible to throw an error if it takes too long to compare two expressions?\r\n\r\nNo.\r\n\r\nIt is better just to stick to cases that you know you can handle. This all becomes a lot more complicated if you have anything more than rational numbers or floats. It is better to stick with something well defined. That also makes it easier to implement the algorithm more efficiently e.g. using DomainMatrix.', 'comment_created': datetime.datetime(2023, 6, 28, 19, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1245674312, 'comment_body': 'Why would they want a lexicographic order?\r\n\r\nFrom the Zen of Python:\r\n\r\n> In the face of ambiguity refuse the temptation to guess.\r\n\r\nIf an arbitrary order is needed then let the user provide it.', 'comment_created': datetime.datetime(2023, 6, 28, 19, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1246096736, 'comment_body': ""From pg. 72-73 Gärtner, Bernd; Matoušek, Jiří (2006). Understanding and Using Linear Programming:\r\n> Unfortunately, regarding efficiency, Bland’s rule is one of the slowest pivot rules and it is almost never used in practice. Another possibility can be found in the literature under the heading lexicographic rule, and here we only sketch it.\r\n> [...]\r\n> It can be shown that under the lexicographic rule, cycling is impossible. In very degenerate cases the lexicographic rule can be quite costly, since it may have to compute many components of the aforementioned vectors before the ties can eventually be broken.\r\n\r\nSeems like the lexicographic rule may be the fastest rule that also avoids cycling (or at least that's what implied but not explicitly stated). However, the source that our simplex implementation is based off of recommends Bland's rule:\r\n\r\nFrom pg. 34 of Thomas S. Ferguson, LINEAR PROGRAMMING: A Concise Introduction:\r\n> In practical problems, the Modified Simplex Rule [the lexicographic rule] is never used. This is partly because cycling in practical problems is rare, and so is not felt to be needed. But also there is a\r\nvery simple modification of the simplex method [Bland’s rule], due to Bland (“New finite pivoting rules\r\nfor the simplex method”, Math. of Oper. Res. 2, 1977, pp. 103-107), that avoids cycling,\r\nand is yet very easy to include in a linear programming algorithm.\r\n\r\nFrom what I can tell, [Z3](https://en.wikipedia.org/wiki/Z3_Theorem_Prover) implements the simplex method using Bland's rule. [This](https://theory.stanford.edu/~nikolaj/programmingz3.html#sec-solving-lra--linear-real-arithmetic) website says that Z3 uses this paper: [A Fast Linear-Arithmetic Solver for DPLL(T)](https://link.springer.com/chapter/10.1007/11817963_11).\r\n\r\nFrom that paper:\r\n> The main procedure of our algorithm is based on the dual Simplex and relies on Bland’s\r\npivot-selection rule to ensure termination.\r\n\r\nI think despite its speed, Bland's rule is a good choice because of its simplicity and a big library like Z3 probably uses it. "", 'comment_created': datetime.datetime(2023, 6, 29, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1247027676, 'comment_body': ""You can use the `external` syntax (see for example the `plot` docstring). I'm not sure if that works in see also or not. You'll have to test it. "", 'comment_created': datetime.datetime(2023, 6, 29, 19, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1251452239, 'comment_body': 'I don’t want to see skip_phase_2 because that is meaningless for users.', 'comment_created': datetime.datetime(2023, 7, 4, 4, 1, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1251454159, 'comment_body': ""The doctest is failing here because the key/values are in a different order. Not sure how to fix this. Maybe I should sort the inequalities before I convert them to a dictionary?\r\n\r\nI'm also not sure if it's useful to even make this a dictionary. It might be better to just return the values or even not return argmax_dual in this function."", 'comment_created': datetime.datetime(2023, 7, 4, 4, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1251457316, 'comment_body': 'I thought you have removed the usage of random. If you remove all source of nondeterminism (like random, set) then it will be fine.\r\n\r\nThe worst thing to do is to use sort inside the library code for not obvious reasons. If you can’t avoid that, it is better to sort before printing in the doctest.', 'comment_created': datetime.datetime(2023, 7, 4, 4, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1251458178, 'comment_body': 'Is it okay for most of the tests to use SciPy? That would mean that a lot of tests would get skipped if SciPy is not installed.', 'comment_created': datetime.datetime(2023, 7, 4, 4, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1251459216, 'comment_body': 'Random is indeed removed. \r\n\r\nActually I think I can fix this by just changing the order.', 'comment_created': datetime.datetime(2023, 7, 4, 4, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1251865965, 'comment_body': 'Here and elsewhere matrices is misspelt.', 'comment_created': datetime.datetime(2023, 7, 4, 10, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1251867082, 'comment_body': 'The name of this function should indicate that it maximises the objective function.', 'comment_created': datetime.datetime(2023, 7, 4, 10, 56, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1251878763, 'comment_body': ""I still think that using free symbols here is a mistake. The user should provide the symbols. Here is a concrete example of why:\r\n```python\r\nIn [2]: f, g, h = symbols('f g h', cls=Function)\r\n\r\nIn [3]: objective = f(x) + 2*g(x) - h(x)\r\n\r\nIn [4]: objective\r\nOut[4]: f(x) + 2⋅g(x) - h(x)\r\n\r\nIn [5]: objective.free_symbols\r\nOut[5]: {x}\r\n```\r\nWe might want to maximise over expressions like `f(x), g(x), h(x)` rather than plain symbols."", 'comment_created': datetime.datetime(2023, 7, 4, 11, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1252225554, 'comment_body': ""I guess I could name it `linprog_maximize_from_equations`. My reasoning for naming it this is that I think it's more important to indicate that it does the same thing as `linprog_from_matrices`. Also, it can be used for minimization problems if you just make the objective function negative. "", 'comment_created': datetime.datetime(2023, 7, 4, 16, 47, 38, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1253576665, 'comment_body': 'Does this just mean ""- the pivot is not zero""?', 'comment_created': datetime.datetime(2023, 7, 5, 19, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253577649, 'comment_body': '```suggestion\r\n    >>> m = Matrix([[3, 1, 5],\r\n    ...             [2,-3, 1],\r\n    ...             [0, 3, 1]])\r\n    >>> _pivot(m, 1, 0) # pivot around 2, which is in row 1 and col 0\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 19, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253579302, 'comment_body': ""I see that `oo == float('inf') == Float('inf')` -- is there any reason to choose the latter instead of the first?"", 'comment_created': datetime.datetime(2023, 7, 5, 19, 50, 40, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253587160, 'comment_body': '```suggestion\r\n    D = ImmutableMatrix([0])  # D is 1x1, A is mxn, B is mx1 and C is 1xn\r\n    M = Matrix([[A, B], [-C, D]])  # error will raise if dimensions are wrong\r\n    if not all(i.is_Float or i.is_Rational for i in M):\r\n            raise TypeError(f""Only rationals and floats are allowed in the Simplex method."" \\\r\n                             f"" ({val}) is neither."")\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 19, 59, 20, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253594256, 'comment_body': 'I am not seeing where an element or R (or S) becomes an indexed object after being created as a string at 1106-1110.', 'comment_created': datetime.datetime(2023, 7, 5, 20, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253597526, 'comment_body': '```suggestion\r\n\r\n    >>> from sympy.matrices.dense import Matrix\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 20, 11, 4, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253597678, 'comment_body': '```suggestion\r\n\r\n    >>> C = Matrix([[3, 1]])\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 20, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253598883, 'comment_body': '```suggestion\r\n        3x + y\r\n    subject to\r\n        x + y <= 2\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 20, 12, 51, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253599050, 'comment_body': '```suggestion\r\n        3x + y\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 20, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253599227, 'comment_body': '```suggestion\r\n    >>> A = Matrix([[1 ,0], [0, 1]])\r\n    >>> B = Matrix([[2], [4]])\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 20, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253600008, 'comment_body': '```suggestion\r\n    >>> r1 = y + 2*z <= 3\r\n    >>> r2 = -x - 3*z <= -2\r\n    >>> r3 = 2*x + y + 7*z <= 5\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 20, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253600780, 'comment_body': '```suggestion\r\n\r\ndef linprog_from_matrices(A, B, C):\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 20, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253600991, 'comment_body': '```suggestion\r\n\r\ndef linprog_maximize_from_equations(constraints, objective, variables):\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 20, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253601499, 'comment_body': '```suggestion\r\n\r\ndef test_linprog_maximize_from_equations():\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 20, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253611447, 'comment_body': ""It would be better to avoid using any infinity. Just initialise this to the first item.\r\n\r\nI have actually measured situations in which the use of `oo` causes slowdowns because `dup_degree` returns `-oo`:\r\nhttps://github.com/sympy/sympy/blob/50eb4007d3305f115cf30217a5235b5ff056626d/sympy/polys/densebasic.py#L153\r\nThe problem is that evaluating `-oo < 0` is much slower than evaluating `float('-inf') < 0`. In the case of `dup_degree` we know that the comparison will always be with an `int` so we should just use `float('-inf')` if really necessary. A symbolic object like `oo` should not be used in low-level routines like the internals of `Poly`. Better would just be a `dup_is_zero` function to avoid depending on infinities at all.\r\n```python\r\nIn [1]: ninf1 = -oo\r\n\r\nIn [2]: ninf2 = float('-inf')\r\n\r\nIn [3]: %timeit ninf1 < 0\r\n33.3 µs ± 964 ns per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\r\n\r\nIn [4]: %timeit ninf2 < 0\r\n43.1 ns ± 1.04 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)\r\n```\r\nThat's a 1000x speed difference: nanoseconds vs microseconds."", 'comment_created': datetime.datetime(2023, 7, 5, 20, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1253635351, 'comment_body': ""I'm using var[0] to get the first character of the string which will be either 'x' or 'y'. Is this bad?"", 'comment_created': datetime.datetime(2023, 7, 5, 20, 53, 2, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1253636662, 'comment_body': 'Previous versions of the code used a double nested for loops which I thought was unintuitive and slower.', 'comment_created': datetime.datetime(2023, 7, 5, 20, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1253649182, 'comment_body': 'It would be better not to use strings. The lists R and S can just store something like tuples of bools and integers. ', 'comment_created': datetime.datetime(2023, 7, 5, 21, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1253650543, 'comment_body': ""I remember reading a comment somewhere ([this comment](https://github.com/sympy/sympy/pull/21687/files#r703017372) from the old PR) that said that it would be better to raise an exception if the dimensions are wrong because it would be less confusing for the average user.\r\n\r\nThe exception should be raised in `linprog_from_matrices` though, not `_simplex`, so I'll fix that.\r\n"", 'comment_created': datetime.datetime(2023, 7, 5, 21, 6, 7, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1253667923, 'comment_body': 'If the output of `linprog_from_matrices` is the same as `linprog_maximize_from_equations` can we drop `maximize` from the function name to just have `linprog_from_eqs`? ', 'comment_created': datetime.datetime(2023, 7, 5, 21, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253670010, 'comment_body': ""Perhaps as a courtesy we could have `return _simplex(*[Matrix(i) for i in (A, B, C)])` so one doesn't have to explicity say `Matrix([[...]])`."", 'comment_created': datetime.datetime(2023, 7, 5, 21, 27, 9, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253672182, 'comment_body': '`linprog_maximize_from_equations`', 'comment_created': datetime.datetime(2023, 7, 5, 21, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253673024, 'comment_body': '`linprog_maximize_from_equations`', 'comment_created': datetime.datetime(2023, 7, 5, 21, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253677539, 'comment_body': 'I think it would be nice to have the general ""front door"" for these functions be `optimize(a, b, c)` where the correct call is determined by the type of `b`: if a list, use matrix call, otherwise the equation call. (I have never really liked ""linear_programming"" as the name for this procedure though I understand the historical use of the phrase is meaningful for those who work in this area. The term ""optimize"" is more likely to catch the interest of someone that perhaps is less familiar with the more technical name.)', 'comment_created': datetime.datetime(2023, 7, 5, 21, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1253681903, 'comment_body': 'The pivot quantity is entree i,j. This is referring to this line:\r\n`\r\nMM[i,j] = 1 / Mij\r\n`\r\n\r\nI should probably make the order correspond to the code more and maybe use different language. ', 'comment_created': datetime.datetime(2023, 7, 5, 21, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1253699819, 'comment_body': ""Does SymPy have other functions that also do some other form of optimization? Is it likely that such functions will be implemented? If so, maybe `optimize` could be a bit confusing as it's more general. \r\n\r\nI don't think it's a good idea to combine `linprog_maximize_from_equations` and `linprog_maximize_from_equations`  into one.  They have different return types, and the inputs are structured very differently. Under the maximization interpretation, matrix `A`, and column vector `B` represent the `constraints` while row vector `C` corresponds to `objective`.  `linprog_maximize_from_equations` has `variables` which there's no equivalent of in `linprog_maximize_from_equations.`"", 'comment_created': datetime.datetime(2023, 7, 5, 22, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1253847237, 'comment_body': ""I'm using tuples of a string and integer now. Like ('x', 1) or ('y', 1). Would it be better to use a bool instead of 'x' and 'y'?"", 'comment_created': datetime.datetime(2023, 7, 6, 2, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1253847600, 'comment_body': ""Yeah I guess that's probably better. I'll change it."", 'comment_created': datetime.datetime(2023, 7, 6, 2, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1254588169, 'comment_body': 'Ah -- I think you mean ""steps"" instead of ""rules""\r\n```\r\nThere are four steps to the pivot operation:\r\n- the value at the pivot location is inverted\r\n...\r\n```', 'comment_created': datetime.datetime(2023, 7, 6, 15, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1254593557, 'comment_body': '```suggestion\r\n    Returns `(optimum, argmax, argmax_dual)`:\r\n```', 'comment_created': datetime.datetime(2023, 7, 6, 15, 20, 47, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1254594537, 'comment_body': '```suggestion\r\n    Returns `(optimum, argmax, and argmax_dual)`:\r\n```', 'comment_created': datetime.datetime(2023, 7, 6, 15, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1254644541, 'comment_body': '```suggestion\r\n    The matrix is modified as follows:\r\n\r\n    - M[k,l]-=M[k,j]*M[i,l]/M[i,j] for k != i and l != j\r\n\r\n    - Entries in row i and col j are divided by the pivot\r\n\r\n    - the sign of entries in column j (except at row i) is changed\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 6, 16, 4, 17, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1254648305, 'comment_body': ""(It's just another way of stating it. I I don't suppose the extra 2n operations are significant in an O(n**2) operation so what you have is a simple way of doing the operation.) The following is a (loose) demonstration of the above steps:\r\n```python\r\ndef piv(M, i, j):\r\n    p = M[i,j]; M = Matrix(M)\r\n    for k in range(M.rows):\r\n        for l in range(M.cols):\r\n            if i != k and j != l:\r\n                M[k,l]-=M[k,j]*M[i,l]/p\r\n    M[i,:] /=p\r\n    M[:,j] /=-p\r\n    M[i,j]*=-1\r\n    return M\r\n```"", 'comment_created': datetime.datetime(2023, 7, 6, 16, 8, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1254661207, 'comment_body': 'I am not suggesting that the code be merged together -- and maybe it\'s not even a good idea to have a program to let either be called by the type of input (i.e. don\'t have a polymorphic signature).  But `linprog_from_matrices`  and `linprog_maximize_from_equations` both return `(optimum, argmax, and argmax_dual)` so they are just starting the same problem from different points, aren\'t they? \r\n\r\nPerhaps we can get rid of the `maximize` from the `equations` name and then have a general ""front-door"" like the following (which for most users will be the most friendly way to call the solver):\r\n\r\n```python\r\ndef linprog(eq, constraints):\r\n    eq = sympify(eq)\r\n    constraints = Tuple(*constraints)\r\n    x= eq.free_symbols\r\n    assert x == constraints.free_symbols  # is this a correct assumption?\r\n    return linprog_from_equations(constraints, eq, x)\r\n```\r\nI\'ll have to look and see how the variables are handled in the return value. It would make most sense if they are returned in a dictionary so one doesn\'t have to worry about ordering of `x`.', 'comment_created': datetime.datetime(2023, 7, 6, 16, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1254699256, 'comment_body': '> is this a correct assumption?\r\n\r\nIt might not be. You could have some variables in the constraints that don\'t appear in the objective function. These variables could still affect the objective by association with variables in the objective. I guess you could also have some variables in the objective function that aren\'t in the constraints, but then that variable would probably cause an unbounded linear programing exception.\r\n\r\n> have a ""front-door"" like the following\r\n\r\nAfter thinking about it more, the return types of the input and output don\'t have to be a problem. You could combine A and B into one matrix and pass that in.\r\n\r\nFor example, these constraints\r\nx  +    y < 3\r\n2x + 2y < 1\r\ncould be represented like this\r\n\r\n```\r\n>>> A = Matrix([[1,1],[2, 2]])\r\n>>> B = Matrix([[3],[1]])\r\n>>> AB = Matrix([[A,B]])\r\n>>> AB\r\nMatrix([[1, 1, 3],\r\n        [2, 2, 1]])\r\n>>> C = Matrix([[1, 2]]) # for objective function to maximize: x + 2y\r\n>>> linprog(C, AB)\r\n```\r\n\r\n> Perhaps we can get rid of `maximize`\r\n\r\n`linprog`, the function you\'re suggesting, is doing maximization. Combining A and B into AB and passing that in as constraints is framing things as maximization. A and B don\'t necessarily represent constraints. In the dual minimization problem, B is the objective function and A and C represent the constraints the dual variables are under.  \r\n\r\n`linprog_maximize_from_equations` is named that way because it takes the maximization interpretation. You could make a similar minimization function for the standard minimization problem but I think that would be less intuitive for users—or at least the dual minimization problem is less intuitive to me.\r\n\r\nOf course, if a user want to minimize a function, f, under some constraints, you can still use `linprog_maximize_from_equations`. You just need to pass in -f to `linprog_maximize_from_equations`.', 'comment_created': datetime.datetime(2023, 7, 6, 16, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1254863026, 'comment_body': ""Let's make sure this gets run on the optional dependencies CI job. "", 'comment_created': datetime.datetime(2023, 7, 6, 20, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'asmeurer', 'type': 'User'}, {'comment_id': 1254880890, 'comment_body': ""OK, I'm not sure than any further changes need to happen from my perspective."", 'comment_created': datetime.datetime(2023, 7, 6, 20, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1258472129, 'comment_body': 'What does `-x - 3*z <= -2: 2/3` mean?', 'comment_created': datetime.datetime(2023, 7, 10, 15, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1259085718, 'comment_body': ""Each constraint is associated with one of the dual variables. So that's just a mapping of each constraint to the values that minimize the dual programing problem. I'm not sure how useful this is. It might be better to return [2/3, 0, 1] instead. "", 'comment_created': datetime.datetime(2023, 7, 11, 1, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1259795539, 'comment_body': 'So does `dict(zip((x,y,z),(2/3,0,1)))` minimize the objective function?', 'comment_created': datetime.datetime(2023, 7, 11, 14, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1259895680, 'comment_body': 'I see from the `simplex` docstring in #22389 what the meaning of the dual solution is.\r\n```\r\n    When x is a column vector of variables, y is a row vector of dual variables,\r\n    and when the objective is to either\r\n\r\n    a) maximize `F = C.T*x + D` constrained by `A*x <= B` and `x >= 0`, or\r\n    b) minimize `f = y.T*B + D` constrained by `y.T*A >= C.T` and `y >= 0`,\r\n\r\n    this method returns a tuple ``(o, A, a)`` where ``o`` is the\r\n    maximum value of ``F`` (found at ``x`` point ``A``) and ``a``\r\n    is the ``y`` point that minimize the ``f``.\r\n    The input ``M`` is ``Matrix([[A, B], [-C.T, D]])``.\r\n\r\n    Examples\r\n    ========\r\n\r\n    >>> from sympy.matrices.dense import Matrix\r\n    >>> from sympy.solvers.inequalities import linear_programming\r\n    >>> from sympy import symbols\r\n    >>> from sympy.abc import x, y\r\n\r\n    >>> A = Matrix([[1, 2], [4, 2], [-1, 1]])\r\n    >>> B = Matrix([4, 12, 1])\r\n    >>> C = Matrix([3, 5])\r\n    >>> D = Matrix([7])\r\n    >>> x = Matrix([x, y])\r\n    >>> y = Matrix(symbols(\'y:3\'))\r\n\r\n    The function and constraints:\r\n\r\n    >>> F = (C.T*x + D)[0]; F\r\n    3*x + 5*y + 7\r\n    >>> [i <= 0 for i in A*x - B]\r\n    [x + 2*y - 4 <= 0, 4*x + 2*y - 12 <= 0, -x + y - 1 <= 0]\r\n\r\n    The corresponding dual system and constraints:\r\n\r\n    >>> f = (y.T*B + D)[0]; f\r\n    4*y0 + 12*y1 + y2 + 7\r\n    >>> [i>=0 for i in y.T*A-C.T]\r\n    [y0 + 4*y1 - y2 - 3 >= 0, 2*y0 + 2*y1 + y2 - 5 >= 0]\r\n\r\n    >>> M = Matrix([[A, B], [-C.T, D]]); M\r\n    Matrix([[1, 2, 4], [4, 2, 12], [-1, 1, 1], [-3, -5, 7]])\r\n    >>> t = max, argmax, argmin_dual = linear_programming(M); t\r\n    (55/3, [8/3, 2/3], [7/3, 1/6, 0])\r\n    >>> F.subs(dict(zip(x, t[1]))) == f.subs(dict(zip(y, t[-1]))) == t[0]\r\n    True\r\n    """"""\r\n```\r\nIt might be better to return the dual system\'s constraints, objective function and variables. But I don\'t use this at all. Does anyone else have an idea of whether/how to return the dual information? I think mapping it to an inequality as done here is not so transparent as to its meaning.', 'comment_created': datetime.datetime(2023, 7, 11, 15, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1260172933, 'comment_body': 'See [this](https://or.stackexchange.com/questions/4177/physical-interpretation-of-a-dual-of-an-lp#:~:text=The%20dual%20variables%20represent%20the,in%20each%20primal%20constraint%20limit.) stack exchange post for more information on what the dual variables represent. \r\n\r\nMy understanding of the post is that the value of the dual variable associated with each constraint tell you how sensitive the optimum value is to changes in that constraint. ', 'comment_created': datetime.datetime(2023, 7, 11, 19, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1261482838, 'comment_body': ""Thanks for the reference re dual. I would also highly recommend the Ferguson discussion on page 14 of the pdf. I recall now going through some of the question/problemss that he posed.\r\n\r\nI would like to see the non-homogeneous form be recognized. Although this is trivial to see the maximization of `2x+y+3` is the same as the maximization of `2x+y`, I don't thing there is a good reason to not allow the natural expression of the function of interest. BUT that constant can be extracted and handled at the `linprog...` level, not at the `simplex` level: so simplex can always not have to worry about a non-zero `D` (in nomenclature of the clip I gave). And I think `simplex` should just take matrix `M` instead of A, B, C. What do you think?\r\n\r\n```python\r\neqs = x + 2*y - 4 <= 0, 4*x + 2*y - 12 <= 0, -x + y - 1 <= 0, 3*x + 5*y + 7\r\nA, B = linear_eq_to_matrix([i.lhs-i.rhs for i in eqs[:-1]]+eqs[-1:], [x,y])\r\nM=Matrix([[A,B]]);M[-1,:]*=-1\r\n_simplex(M)\r\n```"", 'comment_created': datetime.datetime(2023, 7, 12, 17, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1261787215, 'comment_body': 'I\'m not too familiar with either linear programming or the simplex method. Is it unambiguous to say ""here is a matrix M, please do simplex on it to solve a linear programming problem""?\r\n\r\nIf that is unambiguous then we can have a function `simplex(M)` but then it also suggests that we could have a matrix method `M.simplex()`.', 'comment_created': datetime.datetime(2023, 7, 12, 22, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1261975513, 'comment_body': '> BUT that constant can be extracted and handled at the linprog... level\r\n\r\nRight now the constant is just completely ignored in `linprog_from_equations`, which I just realized is problematic because the constant term should affect the final optimum. I agree that `simplex` should be able to take a non-zero D.\r\n\r\n> And I think simplex should just take matrix M instead of A, B, C. What do you think?\r\n\r\nIn earlier versions of `simplex` it just took `M`. I changed it to avoid duplicate code in the linear programming functions and find feasible. I think going back to just using `M` is also reasonable.', 'comment_created': datetime.datetime(2023, 7, 13, 4, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1261981309, 'comment_body': "">  we could have a matrix method M.simplex()\r\n\r\nWe could. I don't think it would be very useful outside of the context of the functions inside this PR though."", 'comment_created': datetime.datetime(2023, 7, 13, 4, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1261984675, 'comment_body': 'I will implement handling for strict inequalities in find_feasible tomorrow. This should be fairly doable.\r\n\r\nBasically, x < 0 can be represented as x + delta <= 0.', 'comment_created': datetime.datetime(2023, 7, 13, 4, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1262875636, 'comment_body': '```suggestion\r\n    >>> r3 = 5 - y >= 2*x + 7*z\r\n```', 'comment_created': datetime.datetime(2023, 7, 13, 17, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1262900437, 'comment_body': 'I like this suggestion but I think it should be `5 - y`, not `y - 5`.\r\n\r\n1. 2x + y + 7z <= 5\r\n2. y - 5 <= -2x - 7z (move the variables to different sides of the equation)\r\n3. 5 - y >= 2x + 7z (multiply by -1)', 'comment_created': datetime.datetime(2023, 7, 13, 18, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1263242796, 'comment_body': '```suggestion\r\n        Strict inequalities (>, <) and not equals (!=) are not allowed.\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 3, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1263906371, 'comment_body': '```suggestion\r\n                rel = Le(rel.lhs, rel.rhs, evaluate=False)\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 16, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1263907405, 'comment_body': '```suggestion\r\n            elif rel.function == Q.eq:\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 16, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1263910711, 'comment_body': '```suggestion\r\n    from sympy.matrices.dense import Matrix\r\n\r\n    eqns = []\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 16, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1264156166, 'comment_body': 'Per comment on main page, I think `argmax_dual` should be `argmin_dual`. And optimum should be noted as the max value for the objective and the min value for the dual objective.', 'comment_created': datetime.datetime(2023, 7, 14, 20, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1264159033, 'comment_body': 'Yeah I agree.', 'comment_created': datetime.datetime(2023, 7, 14, 20, 46, 11, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1264173594, 'comment_body': 'Also, looking at the `LP` code [here](https://github.com/sympy/sympy/pull/22389#issuecomment-1211097848) I think the slack variables are needed when working with `unbound` (or not nonnegative) values for variables.', 'comment_created': datetime.datetime(2023, 7, 14, 21, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1264274982, 'comment_body': 'I also like the idea of immediately getting rid of equalities by substitution rather than creating another inequality to solve.', 'comment_created': datetime.datetime(2023, 7, 15, 1, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1264831506, 'comment_body': '> I think the slack variables are needed when working with unbound (or not nonnegative) values for variables.\r\n\r\nI just tested thousands of randomly generated problems and everything seems to be working. The random numbers for the tableau  can be positive or negative or zero.\r\n\r\n> I also like the idea of immediately getting rid of equalities by substitution rather than creating another inequality to solve.\r\n\r\nWhat advantage would this have?\r\n', 'comment_created': datetime.datetime(2023, 7, 17, 4, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1264979392, 'comment_body': ""> I think the slack variables are needed when working with unbound (or not nonnegative) values for variables.\r\n\r\noh I think I misunderstood what you meant. LP problems in standard form have a non-negativity constraint on all variables but currently the function doesn't impose such a constraint. "", 'comment_created': datetime.datetime(2023, 7, 17, 7, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1265584185, 'comment_body': '```suggestion\r\n    def make_random_problem(num_variables=2, num_constraints=2, sparsity=.1):\r\n        def rand():\r\n            if random() < sparsity:\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 16, 2, 43, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265585885, 'comment_body': ""```suggestion\r\n            int1, int2 = [randprime(0, 200) for _ in range(2)]\r\n            return Rational(int1, int2)*choice([-1, 1])\r\n        variables = symbols('x1:%s' % (num_variables + 1))\r\n```"", 'comment_created': datetime.datetime(2023, 7, 17, 16, 4, 15, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265587228, 'comment_body': 'You\'ve got a hybrid spelling here of ""scarcity"" and ""sparsity"".', 'comment_created': datetime.datetime(2023, 7, 17, 16, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265610893, 'comment_body': ""Currently this doesn't actually solve a standard maximization problem because there's currently no non-negativity constraint on the variables. \r\n\r\nEdit: I was wrong about the non-negativity constraint thing"", 'comment_created': datetime.datetime(2023, 7, 17, 16, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1265778946, 'comment_body': '```suggestion\r\n    Finds values for variables that maximizes the linear objective\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 18, 56, 27, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265779434, 'comment_body': ""You removed `find_feasible`, didn't you?"", 'comment_created': datetime.datetime(2023, 7, 17, 18, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265796891, 'comment_body': '```suggestion\r\n    >>> A, B, C, D, constraints = _linear_programming_to_matrix(x + y + 5*z - 11, [r1, r2, r3], [x, y, z])\r\n    >>> A\r\n    Matrix([\r\n    [ 0, 1,  2],\r\n    [-1, 0, -3],\r\n    [ 2, 1,  7]])\r\n    >>> B\r\n    Matrix([\r\n    [ 3],\r\n    [-2],\r\n    [ 5]])\r\n    >>> C\r\n    Matrix([[1, 1, 5]])\r\n    >>> D\r\n    Matrix([[11]])\r\n```\r\n```suggestion\r\n    >>> A, B, C, D, constraints = _linear_programming_to_matrix(x + y + 5*z, [r1, r2, r3], [x, y, z])\r\n    >>> A\r\n    Matrix([\r\n    [ 0, 1,  2],\r\n    [-1, 0, -3],\r\n    [ 2, 1,  7]])\r\n    >>> B\r\n    Matrix([\r\n    [ 3],\r\n    [-2],\r\n    [ 5]])\r\n    >>> C\r\n    Matrix([[1, 1, 5]])\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 19, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265799426, 'comment_body': '```suggestion\r\n    f : a linear objective function to maximize\r\n```', 'comment_created': datetime.datetime(2023, 7, 17, 19, 16, 2, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265814687, 'comment_body': '```suggestion\r\n        Minimizing y^{T}B constrained to y^{T}A >= C and y >= 0.\r\n```\r\nBut I think it would be better to stick to the conventions of the reference/Ferguson and let C be the transpose of what you have now.', 'comment_created': datetime.datetime(2023, 7, 17, 19, 34, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265815556, 'comment_body': 'But see note above for wheither this should be returning `C` or `C.T`.', 'comment_created': datetime.datetime(2023, 7, 17, 19, 35, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265816847, 'comment_body': 'yeah. I plan to add it in a separate PR, but this should probably be removed from this PR for now.', 'comment_created': datetime.datetime(2023, 7, 17, 19, 36, 36, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1265928405, 'comment_body': '> What advantage would this have?\r\n\r\nGiven c constraints, m of which are written as equalities, instead of creating c + m constraints to solve you will have c - m to solve after solving for m of the symbols in the equalities. So if there were 10 contraints and 5 involved equalities, you would end up with 5 contraints instead of 15. Maybe the time resolving the contraints is comparable to the time needed to find the optimum. I am not sure.', 'comment_created': datetime.datetime(2023, 7, 17, 21, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265929114, 'comment_body': '> have a non-negativity constraint\r\n\r\nSo is *that* the reason for the slack variables: making sure the quantity is not negative?', 'comment_created': datetime.datetime(2023, 7, 17, 21, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1265950346, 'comment_body': 'But the user could specify this constraint by adding `x_i>=0` as constraints? Do you have an example where this routine returns a negative value?', 'comment_created': datetime.datetime(2023, 7, 17, 22, 10, 28, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1266197860, 'comment_body': ""> Maybe the time resolving the contraints is comparable to the time needed to find the optimum. I am not sure.\r\n\r\nI suspect the time would be similar, though I'm not sure either. It would also change the number dual variables which might matter.\r\n\r\n>  have a non-negativity constraint\r\n\r\nI was wrong about this. They do have a non-negativity constraint. I'm not sure why I believed this, but it sure did make me lose a lot of time."", 'comment_created': datetime.datetime(2023, 7, 18, 4, 22, 28, tzinfo=datetime.timezone.utc), 'commenter': 'TiloRC', 'type': 'User'}, {'comment_id': 1272841546, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 23, 7, 13, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272842250, 'comment_body': '```suggestion\r\n    optimum, argmax = lp(objective, constraints, [])\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 23, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272843777, 'comment_body': '```suggestion\r\ndef lp(min_max, f, constr, unbound=None):\r\n    """"""Return the optimization (min or max) of f with the given\r\n    constraints; if any variables are unbound, pass them as a list for\r\n    `unbound`.\r\n\r\n    If `how=max` then the results corresponding to the maximization\r\n    of f will be returned.\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 23, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272917514, 'comment_body': '```suggestion\r\n            from sympy.solvers.inequalities import _np\r\n            nonpos, rep, xx = _np(constraints, [])\r\n            assert not rep  # only testing nonneg variables\r\n            C, _D = linear_eq_to_matrix(objective, *variables)\r\n            A, B = linear_eq_to_matrix(nonpos, *variables)\r\n            assert _D[0] == 0  # scipy only deals with D = 0\r\n            \r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 2, 1, 16, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272917636, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 2, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272952959, 'comment_body': '```suggestion\r\n\r\n\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 3, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272956710, 'comment_body': '```suggestion\r\nfrom sympy.core.relational import Relational, Lt, Ge, Eq, Le\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 3, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272957213, 'comment_body': '```suggestion\r\nfrom sympy.solvers.solveset import linear_eq_to_matrix\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 3, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272962874, 'comment_body': '```suggestion\r\n    >>> from sympy import symbols, Eq\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 3, 39, 53, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272964806, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 3, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1272965709, 'comment_body': ""```suggestion\r\n            assert None, 'only Le, Ge, Eq'\r\n        assert not any(_.is_infinite for _ in i.args)  # XXX should x < oo indicate unbound?\r\n```"", 'comment_created': datetime.datetime(2023, 7, 25, 3, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1274154910, 'comment_body': '```suggestion\r\n    The negated max shows that the max of ``F`` and the min of ``f`` are the same. The dual\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 21, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1274155110, 'comment_body': '```suggestion\r\n    the values for ``x`` and ``y`` were the same when the dual representation was solved. This\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 21, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1274155915, 'comment_body': '```suggestion\r\n        _o, d, p = _simplex(-A.T, C.T, B.T, -D)\r\n        return -_o, d, p\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 21, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1275193694, 'comment_body': '```suggestion\r\nfrom sympy.core.containers import Dict\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 16, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1275194944, 'comment_body': '```suggestion\r\n    >>> _np([x >= 1])  # XXX I think this is not necessary since x >= 0\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 16, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1275319973, 'comment_body': '```suggestion\r\n            C_sci = C\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 18, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1275333006, 'comment_body': '```suggestion\r\n    >>> _np([x >= 1])\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 18, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1275335210, 'comment_body': 'This is necessary, otherwise if a less nonnegative value might be chosen, e.g.\r\n\r\n```\r\n>>> lp(min, x+y, [y<=x-1,x>=2]) -> x=2 but is x=1 if this aux variable is not introduced\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 18, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1275368696, 'comment_body': '```suggestion\r\n    if A and B:\r\n        M = Matrix([[A, B], [C, D]])\r\n    else:\r\n        assert not A and not B  # no constraints\r\n        M = Matrix([[C, D]])\r\n```', 'comment_created': datetime.datetime(2023, 7, 26, 18, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1275749215, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1275751524, 'comment_body': '```suggestion\r\n    If the equivalent (but canonical) inequalities are\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 5, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1276237811, 'comment_body': '```suggestion\r\n    (28/3, {x1: 2/3, x2: 5/3})\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 12, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1276612304, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2023, 7, 27, 17, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}, {'comment_id': 1277273173, 'comment_body': 'It would be better just to have two separate functions `lpmin(f, constraints)` and `lpmax(f, constraints)` rather than `lp(max, f, constraints)`.', 'comment_created': datetime.datetime(2023, 7, 28, 8, 37, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1277284993, 'comment_body': ""I don't think that this should use free symbols. For one thing it won't work with expressions like `f(x)` e.g.:\r\n```python\r\nlinprog(f(x) + f(x).diff(x), [f(x) >= 0, f(x).diff(x) >= 0, f(x) <= 2*f(x).diff(x)])\r\n```\r\nThe user should be expected to provide an ordered list of symbols if the input is not in the form of matrices. Mathematica's `LinearOptimisation` function has the signature `LinearOptimisation(objective, constraints, vars)` but can alternatively accept matrices like `LinearOptimisation(f_vec, (c_mat, b_vec))`."", 'comment_created': datetime.datetime(2023, 7, 28, 8, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1277746903, 'comment_body': ""I don't think anything but symbols should be accepted since we are assuming a linear, not arbitrary, function."", 'comment_created': datetime.datetime(2023, 7, 28, 16, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'smichr', 'type': 'User'}]","[{'commit_sha': '5884e0435a1aa64b711e768c0dd368978f12b8d9', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7795a9c58698200c406ffd13eb7c87a4990d3588', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d412b04efea413d0e1e3311def92dbab59a8ef', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '577969cdfdff1ebf213fcaa6cb9555e3a6ecd8f3', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af405020e77fac7e84e222fc6005de99042160aa', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69480088a89eb0d28a49e97178f9d67552e74e7e', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9d3226e7b1a8c904605e44c5d284957ca0de07f', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05ac024f0c78519de865084f82c63ef7ecaf4856', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a39178aeeacc2daab361da9ab702be9d7bfe2997', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1541b7d2fc805a3011d6a3f4ef88f576925a7d57', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '713a476699ee811fe33135d0b32bad91376c1071', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd908618be9fbceb0209bc82f202347d4b0b5a896', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b81e39a8113d658d6a18830b3c3fb6eb3dc72984', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e26ea5083f604d5e176b1d38b75039a14aea880', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62dee9482908a20e0f65e154fde46341fc6cdb24', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03b9e28a457ce9c69660e16c91c8ea98a1215440', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1af7205ce1f000aef06c4f7b70610c46350491f', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '120b450ac1219ed2bb2f9fb7d28cc818e6f54dc0', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '291d53a448db38a7e4bfe20ec51093e479a9e9ca', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87e3bec7a1696a8dd66701cd4bdafaad0d40e1c9', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5af3e02df9cd7e963ed2e6c6873f0431bfeadd66', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b90eae990a5d4eed693ac3ec94868f65eeae7e6d', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '621130ee0f4de23419f13fa6e6e9e7824593bfca', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8e8f7271edf38fdb7adbbfb566a33831a2d03b9', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c6b1d3496d4ebc19aa98f9b693c842261d1318b', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2faf63e3e65cd4cf757ca63b01c34e2a74071ba6', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a31d9bef1cba955ac645fb13233c60d0214ab5d0', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '232ea1ee62998848966efb2e831a01ead28c1e9c', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01a983787c05f1d8e227fd274d3de1eed6bf5be8', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbcd3a9afbd2918695066186bd111ed8c86433c6', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18552bef5babf94c4d19c218c2e6268859cb81f6', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '850301000c80da129c01596341a8485091b527e5', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9687b63f7b347e466fd70e2bd9fca1a02e61708', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '127dc30174ad18f14833c8ee729957c5d8300ff9', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05dc9d54d2b279a607c332574b2273c254171de7', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '946c942b9bfd12f1f1b4188d885a159f0730e10e', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f7fb2492d7316d2eeb22ff03ade690d9975fe50', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87e9590a5c8166afd7503d92bf1689a6ece50f55', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc511ce5665f327184ccde21ceb003afc01664c1', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d7a4f90e7b2ad1faf584b8ed152354d4bf2883', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c45f2140a05a4c46cfb9d869c3df435e55e9b65', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5edf44bbce4dd088409d5e4f4dc1bd5f7342290f', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47eb4f926e25e44f3aa5b8ccb0e9022cc6a78904', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9edfc9868be1a94dd3c532274da40705ece9d7b5', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad929632fed43bdfed79d96832f3e03b86e99f9c', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97424770171056afbc0b62f01b18b2e7a1f7e286', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d699d8a3f334ea8f6225332bdc614c59efee453', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3df9fad315a12dd47a5e3a85c4f780e3242a1636', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22507e8572721f4505b1f55168269a5671a52095', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad9be63e9e6cf38b55d93d24678c51a5e7884bc0', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42cb62e4e513174ae0841a4aa0e682496d819084', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb22705aff11abd03b9df296e842a7ea975d67b1', 'committer_username': 'orielmalihi', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 12, 17, 35, 11, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f62f35174ab8d918086a0cd140115390cea5b26', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3c3b902753939962bd4226e280ed5973b4d4bbb', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1370069d15ed754a8387b432ffb9044bd6090ec', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '286d00bd5bd0fc3689822e01d9d7bfeb982e1796', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba30ab0f87a16e5d62ae945d2d48303d33cdc526', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74321cf4704ff5501854efa07c13998d66778339', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd66dca25236eeb75d95f6e8885c5ce8eefe66ca9', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '238d2031ab6c3b128f260e2f0160a84f70f58cf7', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a01ec396eb97c3532a022cbc5eccf1c2461eac0', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47660b56cb59a01d297f2b279d0c820da91a9a9f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fd990d4d3f477b14b912ef0d70f5547dedf9d41', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e8e6d0457fb30e10a2b5cfb988d9ba6234899b', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '303b3d1c1040356b1ab46dc8c3522fe69cda0407', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e9c6cf57bb1126939da384721f0f8e9e664bf2a', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffd60f414177866b06709c075f8ca15019344f35', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771c55377543ab22a599f62ac1f6a9c2a5288e5d', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4bbd3c3c1c93c2159a2b7c8fc2ee0c60eaf71a5', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2292161ab554144ff81c6a4dc3e891097ba871ce', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b45717ff87823069effedd87572990bc27db6d93', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '030aa6e816a68eb056ec0ab4cb2eec3209eec4ca', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fe4a2882a18c7e1e148ec4d81b683fd1578a946', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '172f33664f6f47aa2a8e34fbf760bf45fd441afd', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7274e9ef8afe99cab5dd74cedf7f1f9fe507e293', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c73971637fdc1bd6c2f339a19fea707e1ab68bdd', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b063fa6ba8cc2c05ece7c18abb175785bb4e07', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5d19ce2f2c69d9cce0dc4236ccc3e23e08c3d55', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b01c76714bbe9cfc847777a64510a06582141c0', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2722e120c8db7681b15ed733c64074610d3aa8af', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f082fc5dc9033e84050da94adf1b0adac2ff81f3', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56142d1a791b2c74269b95731e72f1edd1a6347', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eaf568ee655f77e86af026eb0d917f3e33a191c', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '911deea777ec810571814fb3740a03397abdd1e7', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ba7df3f0a042120d5371bc3743db5471d4bded4', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81d5c3e95ae59722f5e1fd12b899d05a13969891', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22043770f99e3e8fd9aa283165a999155c47f420', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a7f92af21eee145df3145a321750a0d5770e98', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72ebfd233216c83e5ccd97881b23ff7e2eff8dbd', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4aa178fb91baa234ee16e2926782198715b4675', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0617661424b676f07d37f3f866b304be38f09dea', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abb09b8dc547da4babe7ec2123254b458c12ccfc', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a18e3d0c63b5974376dd775b205d8c2bbcaed61', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37c1569eaefe6870398c4c45315ffc0c5c0d37a6', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f0999277056875f74115f78878980ce427685b97', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304a9b41a9e457e4e484a47378fa3ba917150609', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8efd0c0ccd5f7082f6ddc2644e8a2fb5cf604e7f', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c4a2ba1c73055c11a348944c2a5bf2b86b8f2ff', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb41ad4f0c36d31308d6749e19905f669507d08', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '139b0fd4102b8a6de8cbddc507714738dca709dd', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d7a1941d7859f39811163e58eabec0a02112e9c', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10c2c68dcfa7594ccd60f1ecbaa1551f8b872041', 'committer_username': 'TiloRC', 'committer_name': 'Tilo Reneau-Cardoso', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 22, 0, 32, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec6977cce4d379b750677155809f4ef5a82e591', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a82172f77e8f693e1fff85065607e362ff78aa', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c502faddc1c450a5078f6e82b08d151e44383983', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2659b394932265328583cafa0f023eb91aa48826', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02fcab8f2fb63f51b6f27a07522d1810dd01d218', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a611054ed7a601b74796e1c98eae1ef603e42d1a', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9fda11c6f817df820eee8f0faa3dc66c4d1318e', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35a2a5256fe3db51717d340d8ff70e97985090d5', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee16d7c4e0fb8b7482ba06e349b18a51f407a1d0', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79080ba9ed24ca2e0e364aa516125db62b5fe84c', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec1baa193558e929dd73671aa41701fba56fc2e0', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf26ad549ded52271647127f1ca46ce8a828e10', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed7fa67171f0cee31f654d385e6667863f71a244', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6558363016aaf8f0ecb0e4ebf32a04f5722e3c60', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78a27caf71be09486b1772b59fcf07688f834d59', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d66ed613d2a075dd984bce3cb5b3feca19ee4d0', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a83eaf0c638007a0c4370cc5128be2d36487d59', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f14c1f95a594d68018d6cec2b202024c61b040', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '650d6efd406a00b1de7cd31510aac7058dbb082b', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5deacf45606736ba7d0809b8d4dd64278b128ad5', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53c591e1ba909533692077ac39448944a4b9e826', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97474bffc1bb9474e8c7dd74f304cf8af6236f18', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e353b9e161b2f457b61e73ec1b661117f577e11d', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de35a7e32353db35d4aa58f2998a78d1ed696ff6', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b87a945d272e80bcf34e627682284a35f4345c13', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c907b2eac45d993d6c7e69b76a05a97245b22f0', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aed3dfa5a417f61fde49dbff5c3facdd8bad58f5', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a9ac3d22dab6633f0c25b0efa4bc69daeaae12d', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cdf2abd6d8de472cb002cdd8d6b8c94de442efe', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2aa1c406e42f1153785498dbf5b1147310f6fe0', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2030237753940196f21f4b163caf314000b26a80', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27be199ba2296c8e660ddf672d7f70293857ee24', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6eea0f0259f9b745efc0b80530b8a7c6745d248', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f11b20fbb38f39933430356e98cc0dbe824bb15', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc50d2d03c0706f2b19f4db2e196f166b27d13dc', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e313f1d4ed4a7d2fe68cdb90bea2ad364ff0ac', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d56d080a37d06678f480ec65c4856ae1fd61027', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}, {'commit_sha': '038220fdb7f64e353fd50925a2d2023deb935536', 'committer_username': 'smichr', 'committer_name': 'Christopher Smith', 'committer_email': None, 'commit_date': datetime.datetime(2009, 6, 1, 15, 12, 34, tzinfo=datetime.timezone.utc)}]",Tilo Reneau-Cardoso,67246777,,User,,17,,21,15

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4366,12706,293,1320,58687,5124,14,718,"[{'id': 1763588542, 'number': 26330, 'closed': datetime.datetime(2024, 3, 14, 3, 25, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 8, 20, 14, 25, tzinfo=datetime.timezone.utc), 'time_taken': 457872.0, 'time_delta': '5 days, 7:11:12', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 1542831199, 'number': 25762, 'closed': None, 'created': datetime.datetime(2023, 10, 5, 3, 54, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 140, 'deletions': 49, 'state': 'open'}, {'id': 1491265064, 'number': 25600, 'closed': datetime.datetime(2023, 8, 28, 19, 12, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 2, 31, 33, tzinfo=datetime.timezone.utc), 'time_taken': 60069.0, 'time_delta': '16:41:09', 'additions': 9, 'deletions': 4, 'state': 'closed'}, {'id': 1479491024, 'number': 25544, 'closed': datetime.datetime(2023, 9, 29, 23, 54, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 17, 18, 22, 8, tzinfo=datetime.timezone.utc), 'time_taken': 3735158.0, 'time_delta': '43 days, 5:32:38', 'additions': 1914, 'deletions': 10, 'state': 'closed'}, {'id': 1476794029, 'number': 25524, 'closed': datetime.datetime(2023, 8, 28, 17, 13, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 16, 4, 2, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1084309.0, 'time_delta': '12 days, 13:11:49', 'additions': 31, 'deletions': 5, 'state': 'closed'}, {'id': 1452528938, 'number': 25436, 'closed': datetime.datetime(2023, 8, 31, 18, 6, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 18, 43, 13, tzinfo=datetime.timezone.utc), 'time_taken': 3021794.0, 'time_delta': '34 days, 23:23:14', 'additions': 138, 'deletions': 2, 'state': 'closed'}, {'id': 1433917852, 'number': 25363, 'closed': datetime.datetime(2023, 8, 20, 18, 38, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 13, 23, 44, 10, tzinfo=datetime.timezone.utc), 'time_taken': 3264851.0, 'time_delta': '37 days, 18:54:11', 'additions': 1029, 'deletions': 0, 'state': 'closed'}, {'id': 1430573441, 'number': 25357, 'closed': datetime.datetime(2023, 8, 26, 0, 39, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 5, 2, 28, tzinfo=datetime.timezone.utc), 'time_taken': 3872198.0, 'time_delta': '44 days, 19:36:38', 'additions': 91, 'deletions': 8, 'state': 'closed'}, {'id': 1428046642, 'number': 25350, 'closed': None, 'created': datetime.datetime(2023, 7, 10, 19, 12, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 5, 'deletions': 12, 'state': 'open'}, {'id': 1413776975, 'number': 25303, 'closed': datetime.datetime(2023, 8, 26, 0, 37, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 29, 18, 45, 7, tzinfo=datetime.timezone.utc), 'time_taken': 4945936.0, 'time_delta': '57 days, 5:52:16', 'additions': 70, 'deletions': 1, 'state': 'closed'}, {'id': 1400703906, 'number': 25277, 'closed': datetime.datetime(2023, 7, 28, 14, 30, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 21, 0, 50, 9, tzinfo=datetime.timezone.utc), 'time_taken': 3246017.0, 'time_delta': '37 days, 13:40:17', 'additions': 832, 'deletions': 16, 'state': 'closed'}, {'id': 1395279930, 'number': 25246, 'closed': datetime.datetime(2023, 6, 29, 19, 13, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 8, 7, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1163113.0, 'time_delta': '13 days, 11:05:13', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 1395147963, 'number': 25245, 'closed': datetime.datetime(2023, 7, 6, 19, 56, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 6, 24, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1776675.0, 'time_delta': '20 days, 13:31:15', 'additions': 59, 'deletions': 0, 'state': 'closed'}, {'id': 1395122339, 'number': 25244, 'closed': None, 'created': datetime.datetime(2023, 6, 16, 5, 56, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 104, 'deletions': 0, 'state': 'open'}, {'id': 1395072248, 'number': 25243, 'closed': datetime.datetime(2023, 6, 16, 5, 51, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 4, 44, 36, tzinfo=datetime.timezone.utc), 'time_taken': 4043.0, 'time_delta': '1:07:23', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1387982284, 'number': 25232, 'closed': datetime.datetime(2023, 6, 16, 6, 25, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 12, 5, 54, 28, tzinfo=datetime.timezone.utc), 'time_taken': 347478.0, 'time_delta': '4 days, 0:31:18', 'additions': 59, 'deletions': 0, 'state': 'closed'}, {'id': 1385313485, 'number': 25223, 'closed': datetime.datetime(2023, 6, 27, 4, 11, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 9, 1, 7, 3, tzinfo=datetime.timezone.utc), 'time_taken': 1566267.0, 'time_delta': '18 days, 3:04:27', 'additions': 209, 'deletions': 0, 'state': 'closed'}, {'id': 1286550734, 'number': 24960, 'closed': datetime.datetime(2023, 3, 23, 16, 57, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 22, 22, 3, 12, tzinfo=datetime.timezone.utc), 'time_taken': 68036.0, 'time_delta': '18:53:56', 'additions': 35, 'deletions': 14, 'state': 'closed'}]"
