pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
440716898,[WIP] Add ability to fuzz ipc input to qemu DSP,"This is being done as part of GSoC 2020. Currently work is still in progress.

- **Problem**:

  Fuzzing SOF IPC input to make the SOF Firmware more resilient.

    There are many open-source fuzzers like AFL, peach, OSS-fuzz available. The idea is to
  take the input generation from the open source fuzzers and integrate it with SOF fuzzer.
  Inputs of ipc messages format are generated by the fuzzer and sent to qemu DSP to see if
  DSP is able to parse them properly or not.

- **Approach**:

  - Currently with the help of my mentors  @ranj063  and @cujomalainey, i am working on
    integrating input generation mechanism of [AFL](https://github.com/google/AFL) the SOF fuzzer. AFL is a brute-force
    fuzzer coupled with an exceedingly simple but rock-solid instrumentation-guided
    genetic algorithm. It uses a modified form of edge coverage to effortlessly pick up
    subtle, local-changes to program control flow. More information about it can be found
    [here.](https://github.com/google/AFL)

  - Our current idea is to have a bridge program, which takes the input generated from the
    fuzzer and sends it to the DSP. Few cases arise:

    - If the DSP crashes for an input, then for the next input generated by the fuzzer,
      bridge program should restart the DSP (in order to send an ipc message).

      To explain this a bit more, we consider DSP as crashed, when we send an ipc input
      message and don't get a reply in a specified time.

- **Work done**:
    
  - Bridge program has been written (tools/afl-fuzzer/main.c) between DSP qemu and AFL.
  - It takes two arguments, a dsp_file and ipc_input file.

    - ipc_input file is the input generated from AFL fuzzer.

    - dsp_file contains a single char ('y' or 'n'), which helps the bridge program to
      decide whether it should restart the qemu DSP.

      To explain a bit further. Say for an input generated by AFL, DSP crashes, 'y' char
      is written into dsp_file by bridge program. When the bridge program is run for
      next generated input, it sees the 'y' char from dsp_file and restarts the qemu
      DSP before sending it an ipc message input. Now, if DSP doesn't crash, we write
      'n' to dsp_file.

* **Problems facing**:

  - Establishing connections to the DSP for each bridge run.

    Once we run the bridge program, it opens message queues, shm regions etc to establish
    connection between fuzzer and qemu DSP (same like that of tools/fuzzer/main.c).

    Everything works fine if for each bridge program run, we restart the DSP. Problems arise
    if we want the DSP to persist between bridge runs. When we free the memory created at the
    end of a bridge run [Link](https://github.com/ymdatta/sof/blob/fuzz_qemu/tools/afl-fuzzer/main.c#L466), it makes us unable to connect to already running qemu DSP in the
    next run. We are currently debugging on finding the cause of this and to mitigate this
    problem.

* **How to run**:

  - First build the bridge program using 

    

      >     ./scripts/build-tools.sh -a


  - Now, run the bridge program

      >     ./tools/build_tools/build_afl_fuzzer/sof-afl-fuzzer \
      >      -m ./tools/afl-fuzzer/inputs/input1_ipc \
      >      -d ./tools/afl-fuzzer/dsp_input.txt

     When running for first time, if you don't start DSP manually, then you need
     to change the character in dsp_input from 'n' -> 'y'. So that the brige
     program can start the DSP for you.

**Update 1:** https://github.com/thesofproject/sof/pull/3100#issuecomment-653042313",False,3100,https://api.github.com/repos/thesofproject/sof/pulls/3100,https://github.com/thesofproject/sof/pull/3100,closed,518,0,2,7,4,62,0,0,[],2020-06-26 18:01:57+00:00,2020-09-21 18:16:18+00:00,7517661.0,"87 days, 0:14:21","[{'comment_id': 447198495, 'comment_body': 'What is this file for ?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447199414, 'comment_body': 'we should print the help here so users know the cmd line options and usage.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447199640, 'comment_body': 'newline not needed here', 'comment_created': datetime.datetime(2020, 6, 29, 19, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447200050, 'comment_body': 'Can you comment each code block here otherwise its difficult to follow what each stage is doing.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447200983, 'comment_body': 'It probably makse sense to include the FW version of these headers', 'comment_created': datetime.datetime(2020, 6, 29, 19, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447201270, 'comment_body': 'cmd line option.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447202513, 'comment_body': 'Is this file duplicated ?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447203261, 'comment_body': 'needs some more inline comments here for each block', 'comment_created': datetime.datetime(2020, 6, 29, 19, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447203931, 'comment_body': 'Are these text and binary input files needed ?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447204161, 'comment_body': 'C style comments please.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447204459, 'comment_body': 'Can we read this from ready message ?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447214857, 'comment_body': 'alignment is a bit off here.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447215280, 'comment_body': 'I think your editor might have had the incorrect settings for this file, are you using tabs or spaces?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447216158, 'comment_body': 'does this placeholder have to be part of the source tree?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447216407, 'comment_body': 'we should be including these from SOF headers no?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447217879, 'comment_body': 'can we log the error value as well using errno?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447220293, 'comment_body': 'please explain the significance of ""y"". What is it? What does it represent?', 'comment_created': datetime.datetime(2020, 6, 29, 20, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447220703, 'comment_body': 'is this path in your system or inside the the docker container? Also this appears to be hard coded to baytrail, can we add a TODO to make it multi platform?', 'comment_created': datetime.datetime(2020, 6, 29, 20, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447222296, 'comment_body': 'we can fail for more reasons that just timeout (eg ENOMEM) best to check if ret < 0 then log error', 'comment_created': datetime.datetime(2020, 6, 29, 20, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447222488, 'comment_body': 'log error with errno please.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447223116, 'comment_body': 'I am not sure we want to put this restriction on the fuzzer, this might be something we want to let it fuzz.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447223779, 'comment_body': 'i wonder if maybe we should restructure this so that both fuzzers can access a common platform library to avoid duplicating code.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447224132, 'comment_body': 'I think we should be including this from the core project', 'comment_created': datetime.datetime(2020, 6, 29, 20, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447658750, 'comment_body': 'I have removed this file in the latest commit [d066e0b](https://github.com/thesofproject/sof/pull/3100/commits/d066e0b589ab36d2da690967684cb3056cce9c6d).', 'comment_created': datetime.datetime(2020, 6, 30, 12, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447659790, 'comment_body': ""I didn't understand what you were trying to say. Can you give some more context. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 30, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447665004, 'comment_body': 'Not really. I just wanted to provide a sample files to let users know of the format of input files. I think i can include it in the main file itself as comments i.e the format.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447675905, 'comment_body': ""No.\r\n\r\nIt goes something like this: We start the DSP, DSP sends an FW ready message. The first platform which tries to connect to the DSP gets the FW ready message and initializes offsets. We do some work and we the free the platform. Now, when we try to connect second platform to the DSP, it doesn't get the FW ready message because we didn't start/restart the DSP. So, we need some mechanism to set the mailbox offsets and this logic here helps in doing that."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447680035, 'comment_body': 'Yes. That would be a better thing to do. I will change the code.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447684440, 'comment_body': ""Yeah. You are right here. Let's do that."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447844736, 'comment_body': 'I think Liam wants this field to be able to be set through a command line argument rather than programatically\r\n', 'comment_created': datetime.datetime(2020, 6, 30, 17, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447846157, 'comment_body': 'Anything dynamically generated should be left out in my opinion unless it is extremely hard to generate (for example initial IPC captures that are used to seed the fuzzer)', 'comment_created': datetime.datetime(2020, 6, 30, 17, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447847068, 'comment_body': '@lgirdwood this comes straight from the sof-fuzzer code, i think we can build a platform library for linking into the fuzzers to avoid code duplication.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447878176, 'comment_body': 'you hard coded the selected platform here, I think you mean to use the one passed in by the fuzzer struct', 'comment_created': datetime.datetime(2020, 6, 30, 18, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447914918, 'comment_body': ""@ymdatta I am a bit confused. If we're reusing most of the includes and the qemu-bridge and platform code, cant we simply create a new main.c for the afl-fuzzer and just add that executable to the cmakelists.txt in tools/fuzzer? It seems a bit of an overkill to duplicate everything there, no?"", 'comment_created': datetime.datetime(2020, 6, 30, 19, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 447915878, 'comment_body': 'I think we should dump the output into a separate output file', 'comment_created': datetime.datetime(2020, 6, 30, 19, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 447918242, 'comment_body': 'what about the reply? Arent we checking the reply?', 'comment_created': datetime.datetime(2020, 6, 30, 19, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 448824881, 'comment_body': ""Or, we can have a static debug variable. Only when it's set to 1, these statements are printed to stdout (as we are using these statements to see what the ipc message contains, it'll come under debug right?)."", 'comment_created': datetime.datetime(2020, 7, 2, 8, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449033024, 'comment_body': 'Updated to check for return in the current version.', 'comment_created': datetime.datetime(2020, 7, 2, 14, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449033575, 'comment_body': ""Yes. It's an over kill. I updated to create a new executable for sof-afl-fuzzer."", 'comment_created': datetime.datetime(2020, 7, 2, 14, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449034561, 'comment_body': ""Right now, working on adding support for platform byt. Instead of hard coding the selected platform, i updated the code so that the user gives the platform as input. (but the available platform for now is 'byt')"", 'comment_created': datetime.datetime(2020, 7, 2, 14, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449034984, 'comment_body': 'Yes. Updated the code accordingly.', 'comment_created': datetime.datetime(2020, 7, 2, 14, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449035157, 'comment_body': 'Yes. Updated the code accordingly.', 'comment_created': datetime.datetime(2020, 7, 2, 14, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449035405, 'comment_body': 'This file has been removed. ', 'comment_created': datetime.datetime(2020, 7, 2, 14, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449035693, 'comment_body': ""Current version doesn't contain this code."", 'comment_created': datetime.datetime(2020, 7, 2, 14, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 450302627, 'comment_body': 'whats the effort to add cavs-host.c here ?', 'comment_created': datetime.datetime(2020, 7, 6, 15, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 450304015, 'comment_body': 'Can we pass the path in here, same with the machine name in the args.', 'comment_created': datetime.datetime(2020, 7, 6, 15, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 450305278, 'comment_body': 'We should probably tell the user here we are waiting N secs for qemu to start, again, I would pass the sleep tim in cmd line and make 5 secs the default.', 'comment_created': datetime.datetime(2020, 7, 6, 15, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 450411052, 'comment_body': '@ranj063 lets add that to our list of milestones to figure out the effort here', 'comment_created': datetime.datetime(2020, 7, 6, 18, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451158062, 'comment_body': '@lgirdwood @cujomalainey in terms of effort I think the mail missing items is the IRQ handlers. We have added this as a deliverable for the next phase of the project', 'comment_created': datetime.datetime(2020, 7, 7, 21, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 451159145, 'comment_body': 'IPC timeout not really a send failure here no? ', 'comment_created': datetime.datetime(2020, 7, 7, 21, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 451160340, 'comment_body': 'Can we just do this instead?\r\n```\r\n/* kill the DSP process created above */\r\nif (kill(fid, SIGKILL))\r\n\tfprintf(stderr, ""killing child process failed\\n"");\r\n\r\nif (ret == -EINVAL) {\r\n\tfprintf(stderr, ""error: failed to receive reply from DSP\\n"");\r\n\r\n\t/* raise SIGABRT so that fuzzer sees this as a crash */\r\n\tabort();\r\n}\r\n\r\nreturn -errno;\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 21, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 451285661, 'comment_body': 'Yes. Updated in the latest version.', 'comment_created': datetime.datetime(2020, 7, 8, 5, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 451291805, 'comment_body': 'Yes. This looks more readable and easy to follow. Updated in the latest version. (815e5aa308fc56d3cb1264c4035370a45e135901)', 'comment_created': datetime.datetime(2020, 7, 8, 5, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 451337178, 'comment_body': 'This is a good idea. I updated to code to take wait time as an optional argument. This can be found here. (dc53ddb71a535e6282d7a13cf78cd9b1845023f4).', 'comment_created': datetime.datetime(2020, 7, 8, 7, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 451732471, 'comment_body': '@ranj063 should another stretch goal be to also add the other non-cavs platforms?', 'comment_created': datetime.datetime(2020, 7, 8, 18, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451738083, 'comment_body': 'where does 32 come from? give it a name please in case its used other places', 'comment_created': datetime.datetime(2020, 7, 8, 18, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451739328, 'comment_body': 'this should be ret < 0 to catch ENOMEM as well', 'comment_created': datetime.datetime(2020, 7, 8, 18, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451739996, 'comment_body': ""I don't think we should be overwriting this"", 'comment_created': datetime.datetime(2020, 7, 8, 18, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451740675, 'comment_body': ""isn't errno hardcoded to 0 here? we should just return 0"", 'comment_created': datetime.datetime(2020, 7, 8, 18, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 452182381, 'comment_body': ""There is a possibility that kill() system call may fail above. If it fails errno is set appropriately. This explains the use of errno. If it doesn't fail we want to return 0. so the errno was overwritten to 0 above."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 452182816, 'comment_body': 'Explained [here](https://github.com/thesofproject/sof/pull/3100#discussion_r452182381)', 'comment_created': datetime.datetime(2020, 7, 9, 12, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 452183129, 'comment_body': 'Yes. I missed this, will update accordingly.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}]","[{'commit_sha': '669e97bd246027df1b4ed8e6359f4bbdcf3a4e28', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51bc01371bb81157b75c8c37baa720b4d33dce0f', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278159e0dd8bc22fa5aec397762b6cb10ba73d7f', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e8a4af0fdac03482127fa2ec90a0a6a223cfd61', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '815e5aa308fc56d3cb1264c4035370a45e135901', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc53ddb71a535e6282d7a13cf78cd9b1845023f4', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7679cb51eaefd7ad6fb290e17faa5dde4f22fe3a', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}]",,29383017,,User,,43,,11,8
440716898,[WIP] Add ability to fuzz ipc input to qemu DSP,"This is being done as part of GSoC 2020. Currently work is still in progress.

- **Problem**:

  Fuzzing SOF IPC input to make the SOF Firmware more resilient.

    There are many open-source fuzzers like AFL, peach, OSS-fuzz available. The idea is to
  take the input generation from the open source fuzzers and integrate it with SOF fuzzer.
  Inputs of ipc messages format are generated by the fuzzer and sent to qemu DSP to see if
  DSP is able to parse them properly or not.

- **Approach**:

  - Currently with the help of my mentors  @ranj063  and @cujomalainey, i am working on
    integrating input generation mechanism of [AFL](https://github.com/google/AFL) the SOF fuzzer. AFL is a brute-force
    fuzzer coupled with an exceedingly simple but rock-solid instrumentation-guided
    genetic algorithm. It uses a modified form of edge coverage to effortlessly pick up
    subtle, local-changes to program control flow. More information about it can be found
    [here.](https://github.com/google/AFL)

  - Our current idea is to have a bridge program, which takes the input generated from the
    fuzzer and sends it to the DSP. Few cases arise:

    - If the DSP crashes for an input, then for the next input generated by the fuzzer,
      bridge program should restart the DSP (in order to send an ipc message).

      To explain this a bit more, we consider DSP as crashed, when we send an ipc input
      message and don't get a reply in a specified time.

- **Work done**:
    
  - Bridge program has been written (tools/afl-fuzzer/main.c) between DSP qemu and AFL.
  - It takes two arguments, a dsp_file and ipc_input file.

    - ipc_input file is the input generated from AFL fuzzer.

    - dsp_file contains a single char ('y' or 'n'), which helps the bridge program to
      decide whether it should restart the qemu DSP.

      To explain a bit further. Say for an input generated by AFL, DSP crashes, 'y' char
      is written into dsp_file by bridge program. When the bridge program is run for
      next generated input, it sees the 'y' char from dsp_file and restarts the qemu
      DSP before sending it an ipc message input. Now, if DSP doesn't crash, we write
      'n' to dsp_file.

* **Problems facing**:

  - Establishing connections to the DSP for each bridge run.

    Once we run the bridge program, it opens message queues, shm regions etc to establish
    connection between fuzzer and qemu DSP (same like that of tools/fuzzer/main.c).

    Everything works fine if for each bridge program run, we restart the DSP. Problems arise
    if we want the DSP to persist between bridge runs. When we free the memory created at the
    end of a bridge run [Link](https://github.com/ymdatta/sof/blob/fuzz_qemu/tools/afl-fuzzer/main.c#L466), it makes us unable to connect to already running qemu DSP in the
    next run. We are currently debugging on finding the cause of this and to mitigate this
    problem.

* **How to run**:

  - First build the bridge program using 

    

      >     ./scripts/build-tools.sh -a


  - Now, run the bridge program

      >     ./tools/build_tools/build_afl_fuzzer/sof-afl-fuzzer \
      >      -m ./tools/afl-fuzzer/inputs/input1_ipc \
      >      -d ./tools/afl-fuzzer/dsp_input.txt

     When running for first time, if you don't start DSP manually, then you need
     to change the character in dsp_input from 'n' -> 'y'. So that the brige
     program can start the DSP for you.

**Update 1:** https://github.com/thesofproject/sof/pull/3100#issuecomment-653042313",False,3100,https://api.github.com/repos/thesofproject/sof/pulls/3100,https://github.com/thesofproject/sof/pull/3100,closed,518,0,2,7,4,62,0,0,[],2020-06-26 18:01:57+00:00,2020-09-21 18:16:18+00:00,7517661.0,"87 days, 0:14:21","[{'comment_id': 447198495, 'comment_body': 'What is this file for ?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447199414, 'comment_body': 'we should print the help here so users know the cmd line options and usage.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447199640, 'comment_body': 'newline not needed here', 'comment_created': datetime.datetime(2020, 6, 29, 19, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447200050, 'comment_body': 'Can you comment each code block here otherwise its difficult to follow what each stage is doing.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447200983, 'comment_body': 'It probably makse sense to include the FW version of these headers', 'comment_created': datetime.datetime(2020, 6, 29, 19, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447201270, 'comment_body': 'cmd line option.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447202513, 'comment_body': 'Is this file duplicated ?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447203261, 'comment_body': 'needs some more inline comments here for each block', 'comment_created': datetime.datetime(2020, 6, 29, 19, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447203931, 'comment_body': 'Are these text and binary input files needed ?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447204161, 'comment_body': 'C style comments please.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447204459, 'comment_body': 'Can we read this from ready message ?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 447214857, 'comment_body': 'alignment is a bit off here.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447215280, 'comment_body': 'I think your editor might have had the incorrect settings for this file, are you using tabs or spaces?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447216158, 'comment_body': 'does this placeholder have to be part of the source tree?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447216407, 'comment_body': 'we should be including these from SOF headers no?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447217879, 'comment_body': 'can we log the error value as well using errno?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447220293, 'comment_body': 'please explain the significance of ""y"". What is it? What does it represent?', 'comment_created': datetime.datetime(2020, 6, 29, 20, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447220703, 'comment_body': 'is this path in your system or inside the the docker container? Also this appears to be hard coded to baytrail, can we add a TODO to make it multi platform?', 'comment_created': datetime.datetime(2020, 6, 29, 20, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447222296, 'comment_body': 'we can fail for more reasons that just timeout (eg ENOMEM) best to check if ret < 0 then log error', 'comment_created': datetime.datetime(2020, 6, 29, 20, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447222488, 'comment_body': 'log error with errno please.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447223116, 'comment_body': 'I am not sure we want to put this restriction on the fuzzer, this might be something we want to let it fuzz.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 7, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447223779, 'comment_body': 'i wonder if maybe we should restructure this so that both fuzzers can access a common platform library to avoid duplicating code.', 'comment_created': datetime.datetime(2020, 6, 29, 20, 9, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447224132, 'comment_body': 'I think we should be including this from the core project', 'comment_created': datetime.datetime(2020, 6, 29, 20, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447658750, 'comment_body': 'I have removed this file in the latest commit [d066e0b](https://github.com/thesofproject/sof/pull/3100/commits/d066e0b589ab36d2da690967684cb3056cce9c6d).', 'comment_created': datetime.datetime(2020, 6, 30, 12, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447659790, 'comment_body': ""I didn't understand what you were trying to say. Can you give some more context. Thanks!"", 'comment_created': datetime.datetime(2020, 6, 30, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447665004, 'comment_body': 'Not really. I just wanted to provide a sample files to let users know of the format of input files. I think i can include it in the main file itself as comments i.e the format.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447675905, 'comment_body': ""No.\r\n\r\nIt goes something like this: We start the DSP, DSP sends an FW ready message. The first platform which tries to connect to the DSP gets the FW ready message and initializes offsets. We do some work and we the free the platform. Now, when we try to connect second platform to the DSP, it doesn't get the FW ready message because we didn't start/restart the DSP. So, we need some mechanism to set the mailbox offsets and this logic here helps in doing that."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447680035, 'comment_body': 'Yes. That would be a better thing to do. I will change the code.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 26, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447684440, 'comment_body': ""Yeah. You are right here. Let's do that."", 'comment_created': datetime.datetime(2020, 6, 30, 13, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 447844736, 'comment_body': 'I think Liam wants this field to be able to be set through a command line argument rather than programatically\r\n', 'comment_created': datetime.datetime(2020, 6, 30, 17, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447846157, 'comment_body': 'Anything dynamically generated should be left out in my opinion unless it is extremely hard to generate (for example initial IPC captures that are used to seed the fuzzer)', 'comment_created': datetime.datetime(2020, 6, 30, 17, 9, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447847068, 'comment_body': '@lgirdwood this comes straight from the sof-fuzzer code, i think we can build a platform library for linking into the fuzzers to avoid code duplication.', 'comment_created': datetime.datetime(2020, 6, 30, 17, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447878176, 'comment_body': 'you hard coded the selected platform here, I think you mean to use the one passed in by the fuzzer struct', 'comment_created': datetime.datetime(2020, 6, 30, 18, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 447914918, 'comment_body': ""@ymdatta I am a bit confused. If we're reusing most of the includes and the qemu-bridge and platform code, cant we simply create a new main.c for the afl-fuzzer and just add that executable to the cmakelists.txt in tools/fuzzer? It seems a bit of an overkill to duplicate everything there, no?"", 'comment_created': datetime.datetime(2020, 6, 30, 19, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 447915878, 'comment_body': 'I think we should dump the output into a separate output file', 'comment_created': datetime.datetime(2020, 6, 30, 19, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 447918242, 'comment_body': 'what about the reply? Arent we checking the reply?', 'comment_created': datetime.datetime(2020, 6, 30, 19, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 448824881, 'comment_body': ""Or, we can have a static debug variable. Only when it's set to 1, these statements are printed to stdout (as we are using these statements to see what the ipc message contains, it'll come under debug right?)."", 'comment_created': datetime.datetime(2020, 7, 2, 8, 10, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449033024, 'comment_body': 'Updated to check for return in the current version.', 'comment_created': datetime.datetime(2020, 7, 2, 14, 14, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449033575, 'comment_body': ""Yes. It's an over kill. I updated to create a new executable for sof-afl-fuzzer."", 'comment_created': datetime.datetime(2020, 7, 2, 14, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449034561, 'comment_body': ""Right now, working on adding support for platform byt. Instead of hard coding the selected platform, i updated the code so that the user gives the platform as input. (but the available platform for now is 'byt')"", 'comment_created': datetime.datetime(2020, 7, 2, 14, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449034984, 'comment_body': 'Yes. Updated the code accordingly.', 'comment_created': datetime.datetime(2020, 7, 2, 14, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449035157, 'comment_body': 'Yes. Updated the code accordingly.', 'comment_created': datetime.datetime(2020, 7, 2, 14, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449035405, 'comment_body': 'This file has been removed. ', 'comment_created': datetime.datetime(2020, 7, 2, 14, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 449035693, 'comment_body': ""Current version doesn't contain this code."", 'comment_created': datetime.datetime(2020, 7, 2, 14, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 450302627, 'comment_body': 'whats the effort to add cavs-host.c here ?', 'comment_created': datetime.datetime(2020, 7, 6, 15, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 450304015, 'comment_body': 'Can we pass the path in here, same with the machine name in the args.', 'comment_created': datetime.datetime(2020, 7, 6, 15, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 450305278, 'comment_body': 'We should probably tell the user here we are waiting N secs for qemu to start, again, I would pass the sleep tim in cmd line and make 5 secs the default.', 'comment_created': datetime.datetime(2020, 7, 6, 15, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lgirdwood', 'type': 'User'}, {'comment_id': 450411052, 'comment_body': '@ranj063 lets add that to our list of milestones to figure out the effort here', 'comment_created': datetime.datetime(2020, 7, 6, 18, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451158062, 'comment_body': '@lgirdwood @cujomalainey in terms of effort I think the mail missing items is the IRQ handlers. We have added this as a deliverable for the next phase of the project', 'comment_created': datetime.datetime(2020, 7, 7, 21, 36, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 451159145, 'comment_body': 'IPC timeout not really a send failure here no? ', 'comment_created': datetime.datetime(2020, 7, 7, 21, 39, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 451160340, 'comment_body': 'Can we just do this instead?\r\n```\r\n/* kill the DSP process created above */\r\nif (kill(fid, SIGKILL))\r\n\tfprintf(stderr, ""killing child process failed\\n"");\r\n\r\nif (ret == -EINVAL) {\r\n\tfprintf(stderr, ""error: failed to receive reply from DSP\\n"");\r\n\r\n\t/* raise SIGABRT so that fuzzer sees this as a crash */\r\n\tabort();\r\n}\r\n\r\nreturn -errno;\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 21, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ranj063', 'type': 'User'}, {'comment_id': 451285661, 'comment_body': 'Yes. Updated in the latest version.', 'comment_created': datetime.datetime(2020, 7, 8, 5, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 451291805, 'comment_body': 'Yes. This looks more readable and easy to follow. Updated in the latest version. (815e5aa308fc56d3cb1264c4035370a45e135901)', 'comment_created': datetime.datetime(2020, 7, 8, 5, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 451337178, 'comment_body': 'This is a good idea. I updated to code to take wait time as an optional argument. This can be found here. (dc53ddb71a535e6282d7a13cf78cd9b1845023f4).', 'comment_created': datetime.datetime(2020, 7, 8, 7, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 451732471, 'comment_body': '@ranj063 should another stretch goal be to also add the other non-cavs platforms?', 'comment_created': datetime.datetime(2020, 7, 8, 18, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451738083, 'comment_body': 'where does 32 come from? give it a name please in case its used other places', 'comment_created': datetime.datetime(2020, 7, 8, 18, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451739328, 'comment_body': 'this should be ret < 0 to catch ENOMEM as well', 'comment_created': datetime.datetime(2020, 7, 8, 18, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451739996, 'comment_body': ""I don't think we should be overwriting this"", 'comment_created': datetime.datetime(2020, 7, 8, 18, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 451740675, 'comment_body': ""isn't errno hardcoded to 0 here? we should just return 0"", 'comment_created': datetime.datetime(2020, 7, 8, 18, 21, 24, tzinfo=datetime.timezone.utc), 'commenter': 'cujomalainey', 'type': 'User'}, {'comment_id': 452182381, 'comment_body': ""There is a possibility that kill() system call may fail above. If it fails errno is set appropriately. This explains the use of errno. If it doesn't fail we want to return 0. so the errno was overwritten to 0 above."", 'comment_created': datetime.datetime(2020, 7, 9, 12, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 452182816, 'comment_body': 'Explained [here](https://github.com/thesofproject/sof/pull/3100#discussion_r452182381)', 'comment_created': datetime.datetime(2020, 7, 9, 12, 33, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}, {'comment_id': 452183129, 'comment_body': 'Yes. I missed this, will update accordingly.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ymdatta', 'type': 'User'}]","[{'commit_sha': '669e97bd246027df1b4ed8e6359f4bbdcf3a4e28', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51bc01371bb81157b75c8c37baa720b4d33dce0f', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '278159e0dd8bc22fa5aec397762b6cb10ba73d7f', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e8a4af0fdac03482127fa2ec90a0a6a223cfd61', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '815e5aa308fc56d3cb1264c4035370a45e135901', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc53ddb71a535e6282d7a13cf78cd9b1845023f4', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7679cb51eaefd7ad6fb290e17faa5dde4f22fe3a', 'committer_username': 'ymdatta', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2017, 6, 12, 18, 4, 55, tzinfo=datetime.timezone.utc)}]",,29383017,,User,,43,,11,8

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
135623245,sof,thesofproject/sof,C,305,524,72,194,12304,369,187,112,"[{'id': 473736025, 'number': 3349, 'closed': datetime.datetime(2021, 1, 12, 20, 21, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 8, 14, 59, tzinfo=datetime.timezone.utc), 'time_taken': 12053163.0, 'time_delta': '139 days, 12:06:03', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 472128191, 'number': 3333, 'closed': datetime.datetime(2020, 8, 25, 12, 13, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 14, 1, tzinfo=datetime.timezone.utc), 'time_taken': 166352.0, 'time_delta': '1 day, 22:12:32', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 469434475, 'number': 3320, 'closed': datetime.datetime(2020, 8, 21, 9, 50, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 11, 26, 37, tzinfo=datetime.timezone.utc), 'time_taken': 253427.0, 'time_delta': '2 days, 22:23:47', 'additions': 28, 'deletions': 24, 'state': 'closed'}, {'id': 468076401, 'number': 3311, 'closed': datetime.datetime(2020, 8, 18, 9, 36, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 16, 33, 16, tzinfo=datetime.timezone.utc), 'time_taken': 320606.0, 'time_delta': '3 days, 17:03:26', 'additions': 75, 'deletions': 5, 'state': 'closed'}, {'id': 466363132, 'number': 3303, 'closed': datetime.datetime(2020, 8, 14, 14, 13, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 21, 24, 16, tzinfo=datetime.timezone.utc), 'time_taken': 233338.0, 'time_delta': '2 days, 16:48:58', 'additions': 42, 'deletions': 0, 'state': 'closed'}, {'id': 465038621, 'number': 3283, 'closed': datetime.datetime(2020, 8, 28, 12, 38, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 8, 14, 43, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1720499.0, 'time_delta': '19 days, 21:54:59', 'additions': 58, 'deletions': 0, 'state': 'closed'}, {'id': 459441589, 'number': 3262, 'closed': datetime.datetime(2020, 8, 4, 20, 41, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 17, 43, 32, tzinfo=datetime.timezone.utc), 'time_taken': 442655.0, 'time_delta': '5 days, 2:57:35', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 459431787, 'number': 3261, 'closed': datetime.datetime(2020, 8, 10, 10, 10, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 17, 33, 8, tzinfo=datetime.timezone.utc), 'time_taken': 923833.0, 'time_delta': '10 days, 16:37:13', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 455778188, 'number': 3228, 'closed': datetime.datetime(2020, 8, 4, 10, 10, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 15, 7, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1018964.0, 'time_delta': '11 days, 19:02:44', 'additions': 48, 'deletions': 17, 'state': 'closed'}, {'id': 455081465, 'number': 3213, 'closed': datetime.datetime(2020, 7, 23, 13, 28, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 12, 16, 49, tzinfo=datetime.timezone.utc), 'time_taken': 90698.0, 'time_delta': '1 day, 1:11:38', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 440716898, 'number': 3100, 'closed': datetime.datetime(2020, 9, 21, 18, 16, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 18, 1, 57, tzinfo=datetime.timezone.utc), 'time_taken': 7517661.0, 'time_delta': '87 days, 0:14:21', 'additions': 518, 'deletions': 0, 'state': 'closed'}, {'id': 431690262, 'number': 3036, 'closed': datetime.datetime(2020, 6, 9, 17, 25, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 10, 21, 58, tzinfo=datetime.timezone.utc), 'time_taken': 25409.0, 'time_delta': '7:03:29', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 403924801, 'number': 2771, 'closed': datetime.datetime(2020, 4, 16, 7, 11, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 15, 18, 39, 53, tzinfo=datetime.timezone.utc), 'time_taken': 45083.0, 'time_delta': '12:31:23', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 377177542, 'number': 2409, 'closed': datetime.datetime(2020, 2, 19, 19, 18, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 19, 13, 43, 16, tzinfo=datetime.timezone.utc), 'time_taken': 20088.0, 'time_delta': '5:34:48', 'additions': 4, 'deletions': 1, 'state': 'closed'}]"
