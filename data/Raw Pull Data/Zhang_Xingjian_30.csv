pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1414497605,drivers/arm-cca: Add libukrsi to support Arm CCA,"<!--

Thank you for opening a new PR to the Unikraft Open Source Project!  We welcome
new changes, features, fixes, and more!  Please fill in this form to indicate
the status of your PR.  Please ensure you have read the contribution guidelines
before opening a new PR as this will cover the PR process:

  https://unikraft.org/docs/contributing/

-->

### Prerequisite checklist

<!--
Please mark items appropriately:
-->

 - [x] Read the [contribution guidelines](https://unikraft.org/docs/contributing/) regarding submitting new changes to the project;
 - [x] Tested your changes against relevant architectures and platforms;
 - [x] Ran the [`checkpatch.uk`](https://github.com/unikraft/unikraft/blob/staging/support/scripts/checkpatch.uk) on your commit series before opening this PR;
 - [x] Updated relevant documentation.


### Base target

 - Architecture(s): `arm64`
 - Platform(s): `kvm`
 - Application(s): `app-helloworld`


### Additional configuration

<!--
Please specify any additional configuration which is needed for this feature to
work or any new configuration parameters which are introduced by this PR.  This
will help during the review process.  For example:

 - `CONFIG_LIBUKDEBUG=y`

-->

This PR adds a new config `CONFIG_ARM64_FEAT_RME`. Enabling this config is required to run an application in the CCA platform.

### Description of changes

<!--
Please provide a detailed description of the changes made in this new PR.
-->
The changes include:

- The page table in `unikraft/plat/kvm/arm/bpt64.S` maps memory regions according to the memory layout of kvmtool.
  The device region is marked as unprotected.
- Kvmtool supports the ns16550 serial console, so it replaces the default pl011 in Unikraft.
  Besides, the ns16550 serial console in kvmtool uses byte-width registers.
- Kvmtool puts the device tree at the end of the memory region and passes its address in the `x0` register.
  So `_init_dtb_mem` excludes the dtb regions from the stack and heap area.
- `ukplat_rsi_init` function is called to initialize relevant features of the CCA platform.
  A `ukplat_rsi_setup_memory` function is added to the end of `_init_dtb_mem`, which marks the memory area as `RSI_RAM`.
- RSI commands required during the boot process are added. ",False,964,https://api.github.com/repos/unikraft/unikraft/pulls/964,https://github.com/unikraft/unikraft/pull/964,open,1312,43,22,8,1,63,11,1,"[{'name': 'kind/enhancement'}, {'name': 'area/arch'}, {'name': 'area/plat'}, {'name': 'area/lib'}, {'name': 'plat/kvm'}, {'name': 'lang/c'}, {'name': 'arch/arm'}, {'name': 'arch/arm64'}, {'name': 'plat/common'}, {'name': 'area/include'}, {'name': 'plat/driver'}]",2023-06-30 08:38:29+00:00,,0.0,,"[{'comment_id': 1313764191, 'comment_body': '`default n` is redundant, as `no` is the default option in Kconfig, so this can be removed.', 'comment_created': datetime.datetime(2023, 9, 2, 7, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313764505, 'comment_body': 'Please provide a more elaborate description here, eg:\r\n```\r\nRealm Services Interface (RSI) support. Enable if you are planning to run Unikraft as a CCA Realm.\r\n```', 'comment_created': datetime.datetime(2023, 9, 2, 7, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313765189, 'comment_body': ""Please add `depends on ARM64_FEAT_RME` here. Although the entire menu is wrapped around the same condition (see below), it's still a good practice to have this dependency on the library configuration."", 'comment_created': datetime.datetime(2023, 9, 2, 7, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313767152, 'comment_body': '`ARM64_FEAT_RME` essentially means ""the platform I am running on is Armv9 that supports RME"", and as such it may enable other functionality in the future, such as `RMI`. Because of that `select RSI` needs to be removed from here. Instead we need it to ""unlock"" the CCA features. See the next comment on how to do that.\r\n\r\nAlso `select PAGING` must also be moved to `ukrsi/Config.uk`, as it\'s a library dependency not a feature (ie `RME`) dependency. However, as part of the functionality provided by `librsi` also works witout paging, you can omit it altogether, and wrap around the calling code that depends on paging with `#if CONFIG_PAGING`.', 'comment_created': datetime.datetime(2023, 9, 2, 7, 26, 53, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313771521, 'comment_body': 'This library needs to be moved into `drivers/arm-cca/`.\r\n\r\nAt the top of `drivers/Config.uk`:\r\n```\r\n+if ARM64_FEAT_RME\r\n+menu ""Arm CCA""\r\n+source ""$(shell,$(UK_BASE)/support/build/config-submenu.sh -q -o \'$(KCONFIG_DIR)/drivers-arm-cca.uk\' -r \'$(KCONFIG_DRIV_BASE)/arm-cca\' -l \'$(KCONFIG_DRIV_BASE)/arm-cca\')""\r\n+endmenu\r\n+endif\r\n+\r\n```\r\nalso while you\'re there please remove the spaces between the `menu`/`endmenu` directives and the `source` in other subsystems to make them more compact.\r\n\r\nIn `drivers/Makefile.uk`:\r\n```\r\n+$(eval $(call _import_lib,$(UK_DRIV_BASE)/arm-cca))\r\n```', 'comment_created': datetime.datetime(2023, 9, 2, 7, 41, 42, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313783356, 'comment_body': 'Please align as:\r\n```\r\nCINCLUDES-$(CONFIG_LIBUKRSI)   += -I$(LIBUKRSI_BASE)/arch/$(CONFIG_UK_ARCH)/include\r\nCXXINCLUDES-$(CONFIG_LIBUKRSI) += -I$(LIBUKRSI_BASE)/arch/$(CONFIG_UK_ARCH)/include\r\n```', 'comment_created': datetime.datetime(2023, 9, 2, 8, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313783633, 'comment_body': 'All new files must use the following copyright:\r\n```\r\n/* SPDX-License-Identifier: BSD-3-Clause */\r\n/* Copyright (c) 2023, Unikraft GmbH and The Unikraft Authors.\r\n * Licensed under the BSD-3-Clause License (the ""License"").\r\n * You may not use this file except in compliance with the License.\r\n */\r\n```', 'comment_created': datetime.datetime(2023, 9, 2, 8, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313783751, 'comment_body': 'Please update the copyright here too.', 'comment_created': datetime.datetime(2023, 9, 2, 8, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313783802, 'comment_body': 'Update copyright.', 'comment_created': datetime.datetime(2023, 9, 2, 8, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313784308, 'comment_body': 'Since `ukrsi` is by definition exclusive to `arm64`, the header needs to be moved to `ukrsi/include/uk/rsi.h`', 'comment_created': datetime.datetime(2023, 9, 2, 8, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313784348, 'comment_body': 'Update these to `__UK_RSI_H__`', 'comment_created': datetime.datetime(2023, 9, 2, 8, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313784496, 'comment_body': 'All values provided by the spec need to live under `arch/`. Please move all `#defines` to `arch/arm64/include/uk/asm/rsi.h`.', 'comment_created': datetime.datetime(2023, 9, 2, 8, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313784665, 'comment_body': 'Since you (correctly) export this header via `CXXINCLUDES` you need to add guards for C++ linkage:\r\n```\r\n#ifdef __cplusplus__\r\nexport ""C""\r\n{\r\n#endif\r\n...\r\n#ifdef __cplusplus__\r\n}\r\n#endif\r\n```', 'comment_created': datetime.datetime(2023, 9, 2, 9, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313784772, 'comment_body': 'The current guidelines for guarding libraries are to use `#if` instead of `#ifdef` and comment as:\r\n```\r\n#if CONFIG_LIBXYZ\r\n\r\n#endif /* CONFIG_XYZ */\r\n```\r\nand\r\n```\r\n#if CONFIG_LIBXYZ\r\n\r\n#else /* !CONFIG_XYZ */ <--- same as ""elif !CONFIG_XYZ""\r\n\r\n#endif /* !CONFIG_XYZ */\r\n```\r\nThe reverse applies for negation, ie:\r\n```\r\n#if !CONFIG_LIBXYZ\r\n\r\n#endif /* !CONFIG_XYZ */\r\n```\r\nand\r\n```\r\n#if !CONFIG_LIBXYZ\r\n\r\n#else /* CONFIG_XYZ */ <--- same as ""elif CONFIG_LIBXYZ""\r\n\r\n#endif /* CONFIG_XYZ */\r\n```\r\n\r\nPlease update these everywhere in this series.', 'comment_created': datetime.datetime(2023, 9, 2, 9, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313814358, 'comment_body': 'Here and everwhere else, make these conditional to `CONFIG_LIBUKRSI` instead.', 'comment_created': datetime.datetime(2023, 9, 2, 11, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313814563, 'comment_body': 'Please add a comment to explain why we defer console initialization when we are running as a realm.\r\n', 'comment_created': datetime.datetime(2023, 9, 2, 11, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313814917, 'comment_body': 'Why is this commented out?', 'comment_created': datetime.datetime(2023, 9, 2, 11, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313816147, 'comment_body': 'This should not be hardcoded here. `plat/kvm/include/kvm-arm64/kvm-image.h` provides this value, you should take it from there. Also because this is conditional to `CONFIG_PAGING` the build fails if you disable paging.\r\n\r\nUntil `plat` is cleaned up you can do it as follows.\r\n\r\nIn `ukrsi/Makefile.uk` add:\r\n```\r\nLIBUKRSI_CINCLUDES-y += -I$(LIBKVMPLAT_BASE)/include\r\n```\r\n\r\nand in this file:\r\n```\r\n#include <kvm-arm64/image.h>\r\n```', 'comment_created': datetime.datetime(2023, 9, 2, 12, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1313819641, 'comment_body': 'This is a hack. You need to get this information from bootinfo in `libukrsi`. You can update its prototype to:\r\n```\r\nvoid uk_rsi_init(struct uk_bootinfo *bi)\r\n```\r\nWe follow this pattern in other drivers too.', 'comment_created': datetime.datetime(2023, 9, 2, 12, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314303968, 'comment_body': 'Please move this to the top of this file so that driver subsystems are alphabetically shown in menuconfig.', 'comment_created': datetime.datetime(2023, 9, 3, 19, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314304027, 'comment_body': 'Here too, before ukbus.', 'comment_created': datetime.datetime(2023, 9, 3, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314305394, 'comment_body': 'Regarding the dependency to `PAGING`: I was envisioning that we could also provide CCA capabilities even to platforms that for one reason or another choose to build Unikraft without paging. Such platforms would need to set up all protections at their boot page-tables (incl. devices). In that case, `select PAGING` can go away from here, and functions that use paging - along with callers of these functions - can be made conditional to `CONFIG_PAGING`.', 'comment_created': datetime.datetime(2023, 9, 3, 19, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314305832, 'comment_body': ""Sorry perhaps I didn't phrase it clearly here. What I meant was to move this to the top-level arch, ie `unikraft/arch/arm/arm64/include/uk/asm/rsi.h`. The plan of re-arch is to keep anything architecture-defined (in the loose sense) there, and anything implementation defined in libraries. Also once that header is moved, this directive is no longer needed, as all headers under `arch/` are available to all libraries."", 'comment_created': datetime.datetime(2023, 9, 3, 19, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314306080, 'comment_body': ""Once you move this header to `arch/` it should only contain things defined by the spec. This means that `struct rsi_realm_config` needs to move to `drivers/arm-cca/ukrsi/uk/include/rsi.h` and `struct rsi_host_call_data` can be moved to `drivers/arm-cca/ukrsi/tests/test_rsi.c` as it's only used there.\r\n\r\nAlso the C++ linkage guards, should be in `drivers/arm-cca/ukrsi/uk/include/rsi.h` instead, as that's the header that is exported via `CXXINCLUDES`."", 'comment_created': datetime.datetime(2023, 9, 3, 19, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314306419, 'comment_body': 'The naming can be improved a bit if these are namespaced like `RSI_CMD_...`.\r\n\r\nAlso please add a couple of tabs to align the values of `#define`s, similarly for the others in this file.', 'comment_created': datetime.datetime(2023, 9, 3, 19, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314306481, 'comment_body': 'As stated in the other comment, please add the C++ linkage guards here.', 'comment_created': datetime.datetime(2023, 9, 3, 19, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314306638, 'comment_body': 'Since this is a global it should be prefixed like the rest of public symbols, ie `uk_rsi_unprotected_mask`.', 'comment_created': datetime.datetime(2023, 9, 3, 19, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314306725, 'comment_body': '`uk_rsi_generate_attestation_token`', 'comment_created': datetime.datetime(2023, 9, 3, 19, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314306767, 'comment_body': '`uk_rsi_set_memory_protected` ', 'comment_created': datetime.datetime(2023, 9, 3, 19, 34, 42, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314306818, 'comment_body': 'Please add an `exportsyms.uk` file in `ukrsi/` with all the public symbols (incl. globals).', 'comment_created': datetime.datetime(2023, 9, 3, 19, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314306882, 'comment_body': '`uk_rsi_set_memory_shared` ', 'comment_created': datetime.datetime(2023, 9, 3, 19, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314307378, 'comment_body': 'Since the parameters and return value are not meant to be portable, and their size is defined by the spec, you can use fixed type variables like:\r\n```\r\n__u64 uk_rsi_attestation_token_continue(__u64 addr, __sz size)\r\n```\r\n\r\nSimilarly for the other functions, where needed, both for parameters and local variables. Please notice the ""where needed"" part, there are cases where this is not required, eg when a function returns an errno value of course we use `int`. A good rule of thumb is whether a fixed size is defined by the spec.', 'comment_created': datetime.datetime(2023, 9, 3, 19, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314309844, 'comment_body': ""Due to the nature of CCA it's important that `uk_rsi` functions return an error value, so that the handler can take a decision whether to proceed or not. In fact, I would even use `__check_result` here to force the caller to take action if `uk_rsi_init` fails. So this can be changed to:\r\n```\r\nint __check_result uk_rsi_init(struct ukplat_bootinfo *bi)\r\n```\r\nFor the return values you can use somethning from `errno.h`, eg `-ENOTSUP`."", 'comment_created': datetime.datetime(2023, 9, 3, 20, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314310061, 'comment_body': 'Here and everywhere else, you can instead use `__aligned(PAGE_SIZE)` from `essentials.h`.', 'comment_created': datetime.datetime(2023, 9, 3, 20, 3, 49, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314310368, 'comment_body': 'Maybe instead of magic numbers you can define in `arch/arm/arm64/include/uk/asm/rsi.h`:\r\n```\r\n+#define RSI_VERSION_MAJOR_SHIFT        16\r\n+#define RSI_VERSION_MAJOR_MASK         0x7fff\r\n+\r\n+#define RSI_VERSION_MINOR_SHIFT        0\r\n+#define RSI_VERSION_MINOR_MASK         0xffff\r\n\r\n```', 'comment_created': datetime.datetime(2023, 9, 3, 20, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314310447, 'comment_body': 'These relate a bit to #1060. We can discuss about it tomorrow.', 'comment_created': datetime.datetime(2023, 9, 3, 20, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314310638, 'comment_body': 'Here also you can improve the naming of the RIPAS values a bit, ie `RSI_RIPAS_EMPTY` etc.', 'comment_created': datetime.datetime(2023, 9, 3, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314312319, 'comment_body': 'This function makes a very strong assumption about the platform, i.e. that the device memory is 1x page at the beginning of the RAM. To remove this dependency you can update the prototype to:\r\n```\r\nint uk_rsi_setup_device(__u64 base, __sz size)\r\n```\r\nand also add assertions that the base and size are page-aligned.\r\n\r\nThen you can define the device regions in `plat/kvm/include/kvm-arm64/image.h`:\r\n```\r\ndiff --git a/plat/kvm/include/kvm-arm64/image.h b/plat/kvm/include/kvm-arm64/image.h\r\nindex 8464601b..99f7b17a 100644\r\n--- a/plat/kvm/include/kvm-arm64/image.h\r\n+++ b/plat/kvm/include/kvm-arm64/image.h\r\n@@ -7,11 +7,15 @@\r\n #define __KVM_ARM64_IMAGE_H__\r\n \r\n #if CONFIG_KVM_VMM_QEMU\r\n-#define RAM_BASE_ADDR 0x40000000\r\n+#define RAM_BASE_ADDR          0x40000000\r\n+#define DEVICE_BASE_ADDR       0x08000000\r\n+#define DEVICE_LENGTH          0x38000000\r\n #elif CONFIG_KVM_VMM_FIRECRACKER\r\n-#define RAM_BASE_ADDR 0x80000000\r\n+#define RAM_BASE_ADDR          0x80000000\r\n+#define DEVICE_BASE_ADDR       0x00000000\r\n+#define DEVICE_LENGTH          0x80000000\r\n #endif /* CONFIG_KVM_VMM_FIRECRACKER  */\r\n \r\n-#define DTB_RESERVED_SIZE 0x100000\r\n+#define DTB_RESERVED_SIZE      0x100000\r\n \r\n #endif /*  __KVM_ARM64_IMAGE_H__ */\r\n```\r\nAnd finally update `plat/common/memory.h` as:\r\n```\r\ndiff --git a/plat/common/memory.c b/plat/common/memory.c\r\nindex 0960cdc7..384bb31f 100644\r\n--- a/plat/common/memory.c\r\n+++ b/plat/common/memory.c\r\n@@ -33,6 +33,7 @@\r\n  */\r\n #include <stdbool.h>\r\n #include <stddef.h>\r\n+#include <kvm-arm64/image.h>\r\n #include <uk/plat/common/sections.h>\r\n #include <uk/plat/common/bootinfo.h>\r\n #include <uk/asm/limits.h>\r\n@@ -425,7 +426,7 @@ int ukplat_mem_init(void)\r\n        ukplat_memregion_list_delete(&bi->mrds, 0);\r\n \r\n #if CONFIG_LIBUKRSI\r\n-       uk_rsi_setup_device();\r\n+       uk_rsi_setup_device(DEVICE_BASE_ADDR, DEVICE_LENGTH);\r\n #endif /* CONFIG_LIBUKRSI */\r\n \r\n        return 0;\r\n```\r\n\r\n**Important:** Is marking all device memory as shared a hard requirement of CCA (ie so that the device can access that memory), or is it only required for devices emulated by the host? How do devices fit into the security model of the CCA? Is it guaranteed that device memory is always visible by the host?\r\n\r\nEither way, I expect that this function will be deprecated later when we introduce `ioremap`, as we will be able to set all device attributes (inc. `PAGE_NS_SHARED`) from there.', 'comment_created': datetime.datetime(2023, 9, 3, 20, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314313019, 'comment_body': ""You need a cast here otherwise you'll get a GCC warning:\r\n```\r\n-       phys_addr = ukplat_virt_to_phys(addr);\r\n+       phys_addr = ukplat_virt_to_phys((void *)addr);\r\n```"", 'comment_created': datetime.datetime(2023, 9, 3, 20, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314313035, 'comment_body': 'cast here too', 'comment_created': datetime.datetime(2023, 9, 3, 20, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314313102, 'comment_body': ""I have reservations on setting `PAGE_ATTR_PROT_RW` on `uk_rsi_set_memory_protected()` and `uk_rsi_set_memory_shared()` because we don't know the intentions of the user. Mapping shared memory `RO` is a very legitimate use-case. Moreover, before setting memory to protected / shared the caller will most likely update the protections anyway or perform some other action, like map the region even.\r\n\r\nGiven the above, I propose _one_ of the following:\r\n* Remove the call to `ukplat_page_set_attr()` altogether, and expect (_and document_) that the user calls sets `PAGE_NS_SHARED` manually either via `ukplat_page_set_attr()` or via `ukplat_page_map()`. That reduces `uk_rsi_set_memory_protected()` and `uk_rsi_set_memory_shared()` to wrappers to `uk_rsi_setup_memory()`. The advantage is that it saves a call to `ukplat_page_set_attr()`.\r\n*  We add an optional parameter `unsigned long attr` that allows the user to pass additional attributes. The downside is that we potentially make an additional call to `ukplat_page_set_attr()`, (which with the current direct-mapped based implementation is not too expensive anyway) but the interface remains simple."", 'comment_created': datetime.datetime(2023, 9, 3, 20, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314313386, 'comment_body': 'Except from `FID_INVALID`, all other `#define`s are already provided by `smccc.h`.', 'comment_created': datetime.datetime(2023, 9, 3, 20, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314313507, 'comment_body': 'Please remember to add the comment here, as stated in the previous feedback round.', 'comment_created': datetime.datetime(2023, 9, 3, 20, 37, 45, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1314313557, 'comment_body': 's/`#ifdef`/`#if` /', 'comment_created': datetime.datetime(2023, 9, 3, 20, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1315432579, 'comment_body': 'Unlike `uk/arch/paging.h`, `uk/plat/paging.h` needs to be included conditionally to `CONFIG_PAGING`.', 'comment_created': datetime.datetime(2023, 9, 5, 6, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1315433088, 'comment_body': 'This causes a warning, `hash_algo` has to be `%u`', 'comment_created': datetime.datetime(2023, 9, 5, 6, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1315438639, 'comment_body': '`numpages` cannot be negative so this should not be `int`, but `unsigned long` as defined in the prototype of `ukplat_page_set_attr()`, unless you prefer to use `__sz`, depending on how you like your interface to look like.', 'comment_created': datetime.datetime(2023, 9, 5, 6, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1315439962, 'comment_body': '`unsigned long numpages` or `__sz numpages`.', 'comment_created': datetime.datetime(2023, 9, 5, 6, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1315982512, 'comment_body': ""There's an extra line here"", 'comment_created': datetime.datetime(2023, 9, 5, 14, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1315984047, 'comment_body': 'Please remove this leading whitespace', 'comment_created': datetime.datetime(2023, 9, 5, 14, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1316006428, 'comment_body': ""Perhaps we should be using our own name for this. Since the purpose of this `#define` is to be used as a PTE bit, I propose to rename it to `PTE_RME_UNPROTECTED_BIT` to be consistent with the rest of the PTE definitions in `arch/arm/arm64/include/uk/asm/arch.h`. Notice that if `PAGE_NS_SHARED` had a fixed value it would be required to be in a header under `arch/arm/arm64/include/uk/asm/`, but headers under `arch/` must not depend on libraries, so we can't move it there.\r\n\r\nMoreover, the right way to define an additional attribute in the paging API is to update `arch/arm/arm64/include/uk/asm/paging.h` as shown below (please double check whether that value is not used by another attribute, in case I missed something):\r\n```diff\r\ndiff --git a/arch/arm/arm64/include/uk/asm/paging.h b/arch/arm/arm64/include/uk/asm/paging.h\r\nindex c13e8e9c..73108627 100644\r\n--- a/arch/arm/arm64/include/uk/asm/paging.h\r\n+++ b/arch/arm/arm64/include/uk/asm/paging.h\r\n@@ -86,6 +86,8 @@ struct ukarch_pagetable {\r\n #define PAGE_ATTR_PROT_WRITE           0x02\r\n #define PAGE_ATTR_PROT_EXEC            0x04\r\n \r\n+#define PAGE_ATTR_RME_UNPROTECTED      0x05\r\n+\r\n #define PAGE_ATTR_TYPE_MASK            0x07\r\n #define PAGE_ATTR_TYPE_SHIFT           5\r\n ```\r\n\r\nand then in `plat/common/include/arm/arm64/paging.h`:\r\n```diff\r\ndiff --git a/plat/common/include/arm/arm64/paging.h b/plat/common/include/arm/arm64/paging.h\r\nindex fa904641..5f22a720 100644\r\n--- a/plat/common/include/arm/arm64/paging.h\r\n+++ b/plat/common/include/arm/arm64/paging.h\r\n@@ -123,11 +123,13 @@ pgarch_pte_create(__paddr_t paddr, unsigned long attr, unsigned int level,\r\n                pte |= PTE_ATTR_XN;\r\n \r\n #if CONFIG_LIBUKRSI\r\n-       if (attr & PAGE_NS_SHARED)\r\n-               pte |= PAGE_NS_SHARED;\r\n+       if (attr & PAGE_ATTR_RME_UNPROTECTED)\r\n+               pte |= PTE_RME_UNPROTECTED_BIT;\r\n        else\r\n-               pte &= (~PAGE_NS_SHARED);\r\n-#endif /* CONFIG_LIBUKRSI */\r\n+               pte &= (~PTE_RME_UNPROTECTED_BIT);\r\n+#else /* !CONFIG_LIBUKRSI */\r\n+       UK_ASSERT(!(attr & PAGE_ATTR_RME_UNPROTECTED));\r\n+#endif /* !CONFIG_LIBUKRSI */\r\n \r\n        switch (attr & (PAGE_ATTR_SHAREABLE_MASK <<\r\n                PAGE_ATTR_SHAREABLE_SHIFT)) {\r\n```"", 'comment_created': datetime.datetime(2023, 9, 5, 14, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1316163807, 'comment_body': 'This comment as is does not add any value as it describes what is exactly below, similarly to:\r\n```c\r\n/* Print hello */ <---- not useful\r\nprintf(""Hello\\n"");\r\n```\r\nUseful comments explain why we do a behavior that is not immediately obvious to the reader of that code. Please update.', 'comment_created': datetime.datetime(2023, 9, 5, 17, 4, 34, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1316169393, 'comment_body': 'Please fix the indentation of the values. Use tabs and align all values to those of `RSI_CMD_*`', 'comment_created': datetime.datetime(2023, 9, 5, 17, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1316170807, 'comment_body': 'This causes a warning, `hash_algo` has to be `%u`\r\n', 'comment_created': datetime.datetime(2023, 9, 5, 17, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1321275976, 'comment_body': 'This function is generally reusable for setting up early devices so it must be part of lib-ukrsi. Please update the parameters to the following and move it there.\r\n```\r\n__u64 uk_rsi_set_early_unprotected(__u64 base, __sz len)\r\n```\r\n\r\nThe caller must provide their regular address (eg for early UART in kvmtool that would be `0x01000000`), and the function will return the unprotected IPA alias.\r\n\r\nRegarding bootinfo, you can get a pointer within the function by calling `ukplat_bootinfo_get()`.\r\n\r\nOnce you have done that you need to update **both** the `ns16550` and `pl011` drivers to call that function to retrieve the unprotected IPA alias if `CONFIG_EARLY_UART && CONFIG_LIBUKRSI` are enabled. You can do that as follows:\r\n1. Define two states for the `initialzied` global. `INITIALIZED` and `MAP_UNPROTECTED`.\r\n2. Set the default to `MAP_UNPROTECTED` if `CONFIG_EARLY_UART && CONFIG_LIBUKRSI` \r\n3. Change all checks against `initialized` in the driver to calls to a new function `initialized()` that will do:\r\n```c\r\nstatic uint8_t initialized(void)\r\n{\r\n#if CONFIG_LIBUKRSI\r\n    if (unlikely(initialized == MAP_UNPROTECTED)) {\r\n        base = uk_rsi_map_early_unprotected();\r\n        initialized = INITIALIZED;\r\n    }\r\n#endif\r\n    return initialized;\r\n}\r\n```\r\n\r\nThis will allow you to derive the unprotected alias on the first call to UART without changing any of the existing semantics.', 'comment_created': datetime.datetime(2023, 9, 11, 9, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1321300552, 'comment_body': 'As we discussed (many times) before, the user cannot provide the aliased IPA because that depends on the maximum address bits of the hardware, and therefore we can only derive the aliased IPA at runtime. Because of that, here you need to use `uk_rsi_unprotected_mask` and apply it to the user provided address.\r\n\r\nMoreover, because you can\'t guarantee that no call to this function happens happen before `uk_rsi_init()`, you need to check if `uk_rsi_unprotected_mask` is has been initialized here, and if it hasn\'t to derived it at this moment. But also you use the early UART in `uk_rsi_init()` so it\'s best if you move the call to the top of that function:\r\n``` diff\r\ndiff --git a/drivers/arm-cca/ukrsi/rsi.c b/drivers/arm-cca/ukrsi/rsi.c\r\nindex 02b7e48f..ff4869d3 100644\r\n--- a/drivers/arm-cca/ukrsi/rsi.c\r\n+++ b/drivers/arm-cca/ukrsi/rsi.c\r\n@@ -199,12 +199,19 @@ int __check_result uk_rsi_init(struct ukplat_bootinfo *bi)\r\n        __u64 version, ret;\r\n        __u32 i;\r\n \r\n+       /* call before early UART access */\r\n+       ret = uk_rsi_realm_config((__u64)&config);\r\n+       if (ret != RSI_SUCCESS)\r\n+               return -ENOTSUP;\r\n+\r\n        version = uk_rsi_version();\r\n        uk_pr_info(\r\n            ""RSI version %lu.%lu\\n"",\r\n            (version >> RSI_VERSION_MAJOR_SHIFT) & RSI_VERSION_MAJOR_MASK,\r\n            (version >> RSI_VERSION_MINOR_SHIFT) & RSI_VERSION_MINOR_MASK);\r\n \r\n+       uk_pr_info(""RSI realm config ipa_width %lu\\n"", config.ipa_width);\r\n+\r\n        for (i = 0; i < bi->mrds.count; i++) {\r\n                mrd = &bi->mrds.mrds[i];\r\n \r\n@@ -217,12 +224,6 @@ int __check_result uk_rsi_init(struct ukplat_bootinfo *bi)\r\n                        return -ENOTSUP;\r\n        }\r\n \r\n-       ret = uk_rsi_realm_config((__u64)&config);\r\n-       if (ret != RSI_SUCCESS)\r\n-               return -ENOTSUP;\r\n-\r\n-       uk_pr_info(""RSI realm config ipa_width %lu\\n"", config.ipa_width);\r\n-\r\n        /* set the mask of the unprotected bit */\r\n        uk_rsi_unprotected_mask = (1UL) << (config.ipa_width - 1);\r\n \r\n```', 'comment_created': datetime.datetime(2023, 9, 11, 9, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1321301393, 'comment_body': ""Here you should pass the user provided length. Also it's a good idea if you put some assertions at the top of the file to check whether the user-supplied base and len are page-aligned."", 'comment_created': datetime.datetime(2023, 9, 11, 9, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1321302332, 'comment_body': 'Please remove mentions to early uart from this comment, as this function will be generic.', 'comment_created': datetime.datetime(2023, 9, 11, 9, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1321304019, 'comment_body': ""It's not a good idea to ignore error code of `ukplat_memregion_list_coalesce()`. You can have this function return that."", 'comment_created': datetime.datetime(2023, 9, 11, 10, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}]","[{'commit_sha': 'abf54e1e667b5bb0ace3329c305fbf9edb5a9802', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4066f4d9ad4cf1ef585a0992e2cfbde1d38bf2ba', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '636cd2e12eab8c7389916a57e8aefe9b5d652003', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e527354b726f045bedf0adc11745e20fa37a5306', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9cc20868e3a23031b5a75a041e2b3b4c0dd2521', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04b41d7f692756980ffe7565ccc447eac3007738', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fde7f415e61fee8ff252c8c8dddf7d74709d0a18', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc1eb6f89b77b9f21953624c9140f95efc358b10', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}]",Xingjian Zhang,31160949,zhxj9823@qq.com,User,,5,,0,0
1420393269,plat/drivers/virtio: Fix virtio read write,"Add support for variable length of virtio read and write.

<!--

Thank you for opening a new PR to the Unikraft Open Source Project!  We welcome
new changes, features, fixes, and more!  Please fill in this form to indicate
the status of your PR.  Please ensure you have read the contribution guidelines
before opening a new PR as this will cover the PR process:

  https://unikraft.org/docs/contributing/

-->

### Prerequisite checklist

<!--
Please mark items appropriately:
-->

 - [x] Read the [contribution guidelines](https://unikraft.org/docs/contributing/) regarding submitting new changes to the project;
 - [x] Tested your changes against relevant architectures and platforms;
 - [x] Ran the [`checkpatch.uk`](https://github.com/unikraft/unikraft/blob/staging/support/scripts/checkpatch.uk) on your commit series before opening this PR;
 - [ ] Updated relevant documentation.


### Base target

 - Architecture(s): N/A
 - Platform(s): `kvm`
 - Application(s): N/A


### Description of changes

<!--
Please provide a detailed description of the changes made in this new PR.
-->

The `vm_get` and `vm_set` in `virtio_mmio` can only handle reading/writing 1/2/4/8 bytes. However, there are several cases, such as in [virtio_net](https://github.com/unikraft/unikraft/blob/5eb820bdbd1dee81c48b1f98bb588edb16b252fa/plat/drivers/virtio/virtio_net.c#L938) and [virtio_9p](https://github.com/unikraft/unikraft/blob/5eb820bdbd1dee81c48b1f98bb588edb16b252fa/plat/drivers/virtio/virtio_9p.c#L360), that the length of bytes to read is not supported by this function. This PR adds support to this case by using `_virtio_cread_bytes` and `_virtio_cwrite_bytes` functions in the default case of  `vm_set` and `vm_get` functions correspondingly. This approach turns an `n`-byte read/write operation into `n` 1-byte read/write operations.
",False,970,https://api.github.com/repos/unikraft/unikraft/pulls/970,https://github.com/unikraft/unikraft/pull/970,closed,9,5,3,1,8,0,8,1,"[{'name': 'kind/bug'}, {'name': 'area/plat'}, {'name': 'kind/quick-fix'}, {'name': 'plat/driver/virtio'}, {'name': 'lang/c'}, {'name': 'ci/merged'}, {'name': 'bug/fix'}, {'name': 'plat/driver'}]",2023-07-05 04:50:45+00:00,2023-08-11 06:05:27+00:00,3201282.0,"37 days, 1:14:42",[],"[{'commit_sha': '33eb9bde7d8af4d6eec3307ac78a7fbaaeb6cf14', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}]",Xingjian Zhang,31160949,zhxj9823@qq.com,User,,5,,0,0
1445629236,plat/drivers: Add two configurations to ns16550,"<!--

Thank you for opening a new PR to the Unikraft Open Source Project!  We welcome
new changes, features, fixes, and more!  Please fill in this form to indicate
the status of your PR.  Please ensure you have read the contribution guidelines
before opening a new PR as this will cover the PR process:

  https://unikraft.org/docs/contributing/

-->

### Prerequisite checklist

<!--
Please mark items appropriately:
-->

 - [x] Read the [contribution guidelines](https://unikraft.org/docs/contributing/) regarding submitting new changes to the project;
 - [x] Tested your changes against relevant architectures and platforms;
 - [x] Ran the [`checkpatch.uk`](https://github.com/unikraft/unikraft/blob/staging/support/scripts/checkpatch.uk) on your commit series before opening this PR;
 - [ ] Updated relevant documentation.


### Base target

 - Architecture(s): `ARM64`
 - Platform(s): `kvm`
 - Application(s): N/A


### Additional configuration

<!--
Please specify any additional configuration which is needed for this feature to
work or any new configuration parameters which are introduced by this PR.  This
will help during the review process.  For example:

 - `CONFIG_LIBUKDEBUG=y`

-->

### Description of changes

<!--
Please provide a detailed description of the changes made in this new PR.
-->

The register shift of ns16550 is hard-coded in the driver, but it does not match the hardware on some platforms. The device-tree specification has a property ""reg-shift"" to describe the register shift of a device.
To match the specification, the register shift of ns16550 is retrieved from the device tree instead. If no such property is found, the default value 0 is used.

The register width of ns16550 varies on different platforms. u-boot uses a reg-io-width property in the device tree to determine it. If no such property is found, the default value 1 is used. The read and write macros are replaced by functions with the same name.

These two configurations break the compatibility of the driver. To keep the compatibility, the device tree should contain these properties.
",False,985,https://api.github.com/repos/unikraft/unikraft/pulls/985,https://github.com/unikraft/unikraft/pull/985,closed,81,19,2,1,7,11,6,1,"[{'name': 'area/plat'}, {'name': 'plat/kvm'}, {'name': 'lang/c'}, {'name': 'arch/arm64'}, {'name': 'ci/merged'}, {'name': 'plat/driver'}]",2023-07-23 14:51:46+00:00,2023-08-16 06:46:42+00:00,2044496.0,"23 days, 15:54:56","[{'comment_id': 1271676361, 'comment_body': 'Here, besides reg shift, you also change the reg width. How is that change justified? Is it backwards compatible? Should it also be configurable? In any case this change should also be described in the commit message.', 'comment_created': datetime.datetime(2023, 7, 24, 2, 58, 11, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1271677234, 'comment_body': 'Please add a comment that the default value of zero is specified by the device-tree spec along with the relevant section, eg\r\n```\r\nstatic uint32_t ns16550_reg_shift; /* device-tree spec v0.4 Sect. 4.2.2 */\r\n```', 'comment_created': datetime.datetime(2023, 7, 24, 2, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1271728025, 'comment_body': 'Regarding the register width of ns16550, I find that [this document](https://www.ele.uva.es/~jesus/UltimatePutchar.pdf) mentions that \r\n\r\n> The UART registers are all 8-bit wide and only the 8 least significant bits of variables are actually read or written.\r\n\r\nBut I have not found a specification explicitly saying so. \r\n\r\nOn the other side, u-boot uses a [`reg-io-width` property](https://elixir.bootlin.com/u-boot/latest/source/drivers/serial/ns16550.c#L556) to determine the register width, but this does not appear in the [device tree specification](https://github.com/devicetree-org/devicetree-specification/releases/tag/v0.4). If this property is used in the real device trees, we can use this property to determine the register width as well. ', 'comment_created': datetime.datetime(2023, 7, 24, 4, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'zhxj9823', 'type': 'User'}, {'comment_id': 1272227763, 'comment_body': ""Yes I think it's a good idea to support this nevertheless, just in case some device deviates. That way we minimize the risk of breaking existing implementations that use 16-bit accesses (CC: @kubanrob). Worst case everyone uses the default."", 'comment_created': datetime.datetime(2023, 7, 24, 12, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273060212, 'comment_body': 'Please check the changes I made later. One thing to be noted is that [reg-io-width property](https://elixir.bootlin.com/u-boot/latest/source/drivers/serial/ns16550.c#L556) is only used in a case. So I am not sure if this change suits the use cases in the platforms Unikraft supprts.', 'comment_created': datetime.datetime(2023, 7, 25, 6, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'zhxj9823', 'type': 'User'}, {'comment_id': 1274144504, 'comment_body': 'These variables are missing for the early uart (see the lines above). It would make sense to introduce the corresponding config options (default values matching the device tree ones).', 'comment_created': datetime.datetime(2023, 7, 25, 21, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'kubanrob', 'type': 'User'}, {'comment_id': 1275684002, 'comment_body': 'Good point, thanks! 👍🏼 @zhxj9823 will you please update to add these?', 'comment_created': datetime.datetime(2023, 7, 27, 3, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1275804478, 'comment_body': 'I have added the config options. Please check if these options work fine.\r\n\r\nIt also raises the question of how to switch between `pl011` and `ns16550` as the early debug console.', 'comment_created': datetime.datetime(2023, 7, 27, 6, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'zhxj9823', 'type': 'User'}, {'comment_id': 1277400180, 'comment_body': '> I have added the config options. Please check if these options work fine.\r\n\r\nI think these two options should not be limited to `EARLY_UART`, but should be overriding the defaults when set, unconditionally. That would allow the driver to work correctly in any future platforms that do not use dts.\r\n\r\nThe priority should therefore be:\r\n1. dts (overrides everything)\r\n2. Kconfig (if set override defaults)\r\n3. Defaults (according to the spec)\r\n\r\n> It also raises the question of how to switch between pl011 and ns16550 as the early debug console.\r\n\r\nFor that we should merge the options of the different drivers into a single one, and most likely also consider an option in the command line, but this is outside the scope of this PR.', 'comment_created': datetime.datetime(2023, 7, 28, 10, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1277702060, 'comment_body': '> I think these two options should not be limited to `EARLY_UART`, but should be overriding the defaults when set, unconditionally. That would allow the driver to work correctly in any future platforms that do not use dts.\r\n> \r\n> The priority should therefore be:\r\n> \r\n> 1. dts (overrides everything)\r\n> 2. Kconfig (if set override defaults)\r\n> 3. Defaults (according to the spec)\r\n\r\nI update the patch. But I think it would be better if the two configs depend on something like `uart_ns16550`.', 'comment_created': datetime.datetime(2023, 7, 28, 15, 30, 50, tzinfo=datetime.timezone.utc), 'commenter': 'zhxj9823', 'type': 'User'}, {'comment_id': 1280105333, 'comment_body': ""I had a brief look on how the reg-shift and width for the `earlycon` are specified on linux. There these are not compiled in, but rather derived from the command-line options:\r\n* https://www.kernel.org/doc/html/v4.14/admin-guide/kernel-parameters.html\r\n* https://elixir.bootlin.com/linux/latest/source/drivers/tty/serial/earlycon.c#L93\r\n\r\nThe latter derives the regshift from the mmio width, ie 0 by default, 1 for MMIO16, and 2 for MMIO32 access. Right now we use 16-bit access and a regshift of 2 which doesn't make sense. @kubanrob should that be 32-bit access instead? Also would the command line be a valid option for earlycon in your case, assuming we implemented that? I imagine that since it's used on linux, it should be no problem for Unikraft.\r\n\r\n**Edit:** Actually nevermind, as right now `libukparam` only supports paramters in the the form of `<libname>.<paramname>=`, so parameters without a scope like `earlycon=` or `console=` won't work."", 'comment_created': datetime.datetime(2023, 8, 1, 4, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}]","[{'commit_sha': 'cee85ffc81e1d5e356a8e021970ff2aba2dbc5f2', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}]",Xingjian Zhang,31160949,zhxj9823@qq.com,User,,5,,0,0
1478658941,plat/drivers/virtio: Fix virtio_9p tag read,"<!--

Thank you for opening a new PR to the Unikraft Open Source Project!  We welcome
new changes, features, fixes, and more!  Please fill in this form to indicate
the status of your PR.  Please ensure you have read the contribution guidelines
before opening a new PR as this will cover the PR process:

  https://unikraft.org/docs/contributing/

-->

### Prerequisite checklist

<!--
Please mark items appropriately:
-->

 - [x] Read the [contribution guidelines](https://unikraft.org/docs/contributing/) regarding submitting new changes to the project;
 - [x] Tested your changes against relevant architectures and platforms;
 - [x] Ran the [`checkpatch.uk`](https://github.com/unikraft/unikraft/blob/staging/support/scripts/checkpatch.uk) on your commit series before opening this PR;
 - [ ] Updated relevant documentation.


### Base target

 - Architecture(s): N/A
 - Platform(s): `kvm`
 - Application(s): `app-sqlite`

### Description of changes

<!--
Please provide a detailed description of the changes made in this new PR.
-->

Swap the last two arguments of `virtio_9p_feature_negotiate`'s first call to `virtio_config_get`. As per the function definition, the last argument needs to actually be the length of the type.
",False,1059,https://api.github.com/repos/unikraft/unikraft/pulls/1059,https://github.com/unikraft/unikraft/pull/1059,closed,1,1,1,1,6,0,5,1,"[{'name': 'area/plat'}, {'name': 'plat/driver/virtio'}, {'name': 'lang/c'}, {'name': 'ci/merged'}, {'name': 'plat/driver'}]",2023-08-17 09:03:28+00:00,2023-08-17 14:36:47+00:00,19999.0,5:33:19,[],"[{'commit_sha': 'aa0e8c6e2353e9ed16858768846f56c94bd835dc', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}]",Xingjian Zhang,31160949,zhxj9823@qq.com,User,,5,,0,0
1445630303,plat/drivers: Provide a single API for UART drivers,"<!--

Thank you for opening a new PR to the Unikraft Open Source Project!  We welcome
new changes, features, fixes, and more!  Please fill in this form to indicate
the status of your PR.  Please ensure you have read the contribution guidelines
before opening a new PR as this will cover the PR process:

  https://unikraft.org/docs/contributing/

-->

### Prerequisite checklist

<!--
Please mark items appropriately:
-->

 - [x] Read the [contribution guidelines](https://unikraft.org/docs/contributing/) regarding submitting new changes to the project;
 - [x] Tested your changes against relevant architectures and platforms;
 - [x] Ran the [`checkpatch.uk`](https://github.com/unikraft/unikraft/blob/staging/support/scripts/checkpatch.uk) on your commit series before opening this PR;
 - [ ] Updated relevant documentation.


### Base target

 - Architecture(s): `x86_64` and `ARM64`
 - Platform(s): `kvm`
 - Application(s): N/A


### Additional configuration

<!--
Please specify any additional configuration which is needed for this feature to
work or any new configuration parameters which are introduced by this PR.  This
will help during the review process.  For example:

 - `CONFIG_LIBUKDEBUG=y`

-->

### Description of changes

<!--
Please provide a detailed description of the changes made in this new PR.
-->

This PR migrates the console API into a new `libukconsole`. Each console provides an ops structure that implements the console API. The APIs include `coutk`, `coutd`, `cink`, and `init`.

A unified `uk_console_init` function takes `bootinfo` as a parameter to initialize the available console in both x86 and ARM platforms. The implementation of `uk_console_init` is platform-specific.

The header for ANSI characters is moved into a separate one in `include/uk`.

GitHub-Depends-On: #989 ",False,986,https://api.github.com/repos/unikraft/unikraft/pulls/986,https://github.com/unikraft/unikraft/pull/986,closed,7009,2512,131,24,4,12,3,1,"[{'name': 'plat/kvm'}, {'name': 'lang/c'}, {'name': 'plat/driver'}]",2023-07-23 14:55:59+00:00,2024-08-01 02:13:14+00:00,32354235.0,"374 days, 11:17:15","[{'comment_id': 1272657308, 'comment_body': 'See comment from Codacy. Where is offset used?', 'comment_created': datetime.datetime(2023, 7, 24, 19, 19, 12, tzinfo=datetime.timezone.utc), 'commenter': 'razvand', 'type': 'User'}, {'comment_id': 1273099602, 'comment_body': ""KVM configuration should be in `plat/kvm/Config.uk`. The location of driver-specific configuraiton is a bit tricky right now because we don't have not moved drivers out of `plat` yet, so there is a gap on where these should go. Maybe you can move it back to `plat/kvm` for now, and I'll try to come back with an update."", 'comment_created': datetime.datetime(2023, 7, 25, 7, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273103859, 'comment_body': 'If you need per-architecture variants you need to place architecture-specific variants under `lib/ukconsole/arch/<arch>/<name>.c` and update your `Makefile.uk` accordingly.', 'comment_created': datetime.datetime(2023, 7, 25, 7, 16, 33, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273109221, 'comment_body': 'Here it looks like derived work from an existing file, which is not the case. Please introduce a new file. The copyright for new files should be:\r\n```\r\n/* SPDX-License-Identifier: BSD-3-Clause */\r\n/* Copyright (c) 2023, Unikraft GmbH and The Unikraft Authors.\r\n * Licensed under the BSD-3-Clause License (the ""License"").\r\n * You may not use this file except in compliance with the License.\r\n */\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 7, 21, 41, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273120425, 'comment_body': 'To avoid having different function prototypes per architecture, and to support in the future other discovery methods like ACPI, you can instead pass all instances a parameter to the bootinfo. In the case of the dtb you should get the address from there.\r\n\r\nAs discussed, that depends on #912, so please rebase and mark the dependency in the cover letter of your PR using `GitHub-Depends-On`. For reference you can see https://github.com/unikraft/unikraft/pull/988 and https://github.com/unikraft/unikraft/pull/989.', 'comment_created': datetime.datetime(2023, 7, 25, 7, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273121123, 'comment_body': 'To avoid having different function prototypes per architecture, and to support in the future other discovery methods like ACPI, you can instead pass all instances a parameter to the bootinfo. In the case of the dtb you should get the address from there.\r\n\r\nAs discussed, that depends on #912, so please rebase and mark the dependency in the cover letter of your PR using `GitHub-Depends-On`. For reference you can see https://github.com/unikraft/unikraft/pull/988 and https://github.com/unikraft/unikraft/pull/989.', 'comment_created': datetime.datetime(2023, 7, 25, 7, 32, 18, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273122678, 'comment_body': 'These should no longer be `ukplat_`  but `uk_console`', 'comment_created': datetime.datetime(2023, 7, 25, 7, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273148150, 'comment_body': 'Looks like this change does not belong to this commit.', 'comment_created': datetime.datetime(2023, 7, 25, 7, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273165678, 'comment_body': ""COMx devices are not KVM specific: https://en.wikipedia.org/wiki/COM_(hardware_interface), so the interface provided by this driver should come with appropriate names. Also shouldn't this driver also provide a set of ops like the rest?"", 'comment_created': datetime.datetime(2023, 7, 25, 8, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273167038, 'comment_body': 'These should be `static` now. In the rest of the drivers too.', 'comment_created': datetime.datetime(2023, 7, 25, 8, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'michpappas', 'type': 'User'}, {'comment_id': 1273309005, 'comment_body': 'This relates to the issue that `vga` console and `com` console are used concurrently in `unikraft/plat/kvm/x86/console.c`. In the current scheme, there can be an `ops` structure for this file. However, having a separate `ops` structure for `com` driver breaks the backward compatibility. Another choice is to enable multiple consoles instead of only using one.', 'comment_created': datetime.datetime(2023, 7, 25, 10, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'zhxj9823', 'type': 'User'}, {'comment_id': 1273738480, 'comment_body': 'In this case, would it make sense to divide the `.h` and `.c` files? For the `console.h` file, the ANSI characters and console APIs are used in different cases. For the `console.c` file, it can be divided into the arch-specific `console_init` function and the other three arch-independent functions.', 'comment_created': datetime.datetime(2023, 7, 25, 15, 35, 19, tzinfo=datetime.timezone.utc), 'commenter': 'zhxj9823', 'type': 'User'}]","[{'commit_sha': '2feb90fe4eb6f03f4ae7b2b8aaff9b70a816a17b', 'committer_username': 'mogasergiu', 'committer_name': 'Sergiu Moga', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 5, 16, 13, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c70e719ac93d5fbe0b981d576f37e2259a84cea', 'committer_username': 'mogasergiu', 'committer_name': 'Sergiu Moga', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 5, 16, 13, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3750f85c1f59f56bdc85cf490a9fc8e2e9f3c89', 'committer_username': 'mogasergiu', 'committer_name': 'Sergiu Moga', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 5, 16, 13, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3cc78b90f7effe7d29f5441e270fa2b67eeaf005', 'committer_username': 'mogasergiu', 'committer_name': 'Sergiu Moga', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 5, 16, 13, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14b82f9517dc807bdcefdcb7bb941bfd97db23af', 'committer_username': 'mogasergiu', 'committer_name': 'Sergiu Moga', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 5, 16, 13, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '914bd95707c0871626eafee411769c13afc1fc6b', 'committer_username': 'mogasergiu', 'committer_name': 'Sergiu Moga', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 5, 16, 13, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b9efae96f60cddf04580d9b1c2793ae4bb7b007', 'committer_username': 'mogasergiu', 'committer_name': 'Sergiu Moga', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 5, 16, 13, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd2f416e1c1da74f5a40cf3e7174462142b8a580', 'committer_username': 'mogasergiu', 'committer_name': 'Sergiu Moga', 'committer_email': None, 'commit_date': datetime.datetime(2018, 12, 5, 16, 13, 53, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ac93fd74dad1c2a62ba46b35dacd94efdfbb09e', 'committer_username': 'michpappas', 'committer_name': 'Michalis Pappas', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 15, 10, 42, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10cb315fa57ac837c485bea5a44b0e984bdc0bef', 'committer_username': 'michpappas', 'committer_name': 'Michalis Pappas', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 15, 10, 42, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72c063d2f931be63031064551268a3b9de44138e', 'committer_username': 'michpappas', 'committer_name': 'Michalis Pappas', 'committer_email': None, 'commit_date': datetime.datetime(2013, 10, 15, 10, 42, 2, tzinfo=datetime.timezone.utc)}, {'commit_sha': '609e7571ef5d4549f00a699895c42d3f070cab49', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6135ad4a532f26d574245f7324aca9de078c7965', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e2382bef30bb8c6e717e1283d7d81e948f41a83', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a910e9a95b672d1b23be46fae4c53bf17ca9376', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db3215cd3ea36c77c1c95c0ac61a5f78c3d02210', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63359b8939cce3e80ac64f3f621ac43cd16a9e29', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aecc69e0363e7616a2546e2f8d4b604d3e7f036', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26bf8bc998b5cd63afe62bfb858ed1e853d4cc5b', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff2b56000b5221abc8f22a2198ab4152f4291ef3', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4abe90c9da5f50d9cf3a722cdb8b613deae5583b', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'def725eea2fafbe038edf0179e9a9f2415ec1486', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04ac28e9261894004696e07848d50b6d0e28f993', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73178cb1f8a01f40b9d5c5cf2535554de5695c1f', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}]",Xingjian Zhang,31160949,zhxj9823@qq.com,User,,5,,0,0
1429036351,blog: Add blog post for Arm CCA GSoc project,,True,287,https://api.github.com/repos/unikraft/docs/pulls/287,https://github.com/unikraft/docs/pull/287,closed,46,0,1,1,0,0,0,1,[],2023-07-11 09:02:43+00:00,2024-03-02 15:21:30+00:00,20326727.0,"235 days, 6:18:47",[],"[{'commit_sha': 'bd1e1413e2d3c17327fc5ecfffc06470592790d9', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}]",Xingjian Zhang,31160949,zhxj9823@qq.com,User,,5,,0,0
1460755087,blog: Add blog post for Arm CCA project (Part 3),GitHub-Depends-On: #287 ,True,301,https://api.github.com/repos/unikraft/docs/pulls/301,https://github.com/unikraft/docs/pull/301,closed,101,0,2,2,0,0,1,1,[{'name': 'documentation'}],2023-08-03 04:51:04+00:00,2024-03-02 15:22:53+00:00,18354709.0,"212 days, 10:31:49",[],"[{'commit_sha': '792519a1ed65a1e2e9251cd5baadc63d453af33f', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3bf35e083794a77d7e681aafbf5471f0e6fbcd', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}]",Xingjian Zhang,31160949,zhxj9823@qq.com,User,,5,,0,0
1500946767,blog: Add blog post for Arm CCA project (Part 4),,True,310,https://api.github.com/repos/unikraft/docs/pulls/310,https://github.com/unikraft/docs/pull/310,closed,146,0,3,3,0,0,0,1,[],2023-09-04 09:31:34+00:00,2024-03-02 15:14:54+00:00,15572600.0,"180 days, 5:43:20",[],"[{'commit_sha': '792519a1ed65a1e2e9251cd5baadc63d453af33f', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3bf35e083794a77d7e681aafbf5471f0e6fbcd', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1392d1215a520d5a8c623458f737a81d592743da', 'committer_username': 'zhxj9823', 'committer_name': 'Xingjian Zhang', 'committer_email': 'zhxj9823@qq.com', 'commit_date': datetime.datetime(2017, 8, 19, 13, 42, 51, tzinfo=datetime.timezone.utc)}]",Xingjian Zhang,31160949,zhxj9823@qq.com,User,,5,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
181022316,unikraft,unikraft/unikraft,C,1533,2488,36,114,3286,283,7,111,"[{'id': 1478658941, 'number': 1059, 'closed': datetime.datetime(2023, 8, 17, 14, 36, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 17, 9, 3, 28, tzinfo=datetime.timezone.utc), 'time_taken': 19999.0, 'time_delta': '5:33:19', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1445630303, 'number': 986, 'closed': datetime.datetime(2024, 8, 1, 2, 13, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 23, 14, 55, 59, tzinfo=datetime.timezone.utc), 'time_taken': 32354235.0, 'time_delta': '374 days, 11:17:15', 'additions': 7009, 'deletions': 2512, 'state': 'closed'}, {'id': 1445629236, 'number': 985, 'closed': datetime.datetime(2023, 8, 16, 6, 46, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 23, 14, 51, 46, tzinfo=datetime.timezone.utc), 'time_taken': 2044496.0, 'time_delta': '23 days, 15:54:56', 'additions': 81, 'deletions': 19, 'state': 'closed'}, {'id': 1420393269, 'number': 970, 'closed': datetime.datetime(2023, 8, 11, 6, 5, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 4, 50, 45, tzinfo=datetime.timezone.utc), 'time_taken': 3201282.0, 'time_delta': '37 days, 1:14:42', 'additions': 9, 'deletions': 5, 'state': 'closed'}, {'id': 1414497605, 'number': 964, 'closed': None, 'created': datetime.datetime(2023, 6, 30, 8, 38, 29, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1312, 'deletions': 43, 'state': 'open'}]"
446313962,docs,unikraft/docs,MDX,81,32,10,64,643,63,14,28,"[{'id': 1500946767, 'number': 310, 'closed': datetime.datetime(2024, 3, 2, 15, 14, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 4, 9, 31, 34, tzinfo=datetime.timezone.utc), 'time_taken': 15572600.0, 'time_delta': '180 days, 5:43:20', 'additions': 146, 'deletions': 0, 'state': 'closed'}, {'id': 1460755087, 'number': 301, 'closed': datetime.datetime(2024, 3, 2, 15, 22, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 4, 51, 4, tzinfo=datetime.timezone.utc), 'time_taken': 18354709.0, 'time_delta': '212 days, 10:31:49', 'additions': 101, 'deletions': 0, 'state': 'closed'}, {'id': 1429036351, 'number': 287, 'closed': datetime.datetime(2024, 3, 2, 15, 21, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 11, 9, 2, 43, tzinfo=datetime.timezone.utc), 'time_taken': 20326727.0, 'time_delta': '235 days, 6:18:47', 'additions': 46, 'deletions': 0, 'state': 'closed'}, {'id': 1398084762, 'number': 264, 'closed': datetime.datetime(2023, 7, 10, 14, 45, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 19, 11, 51, 1, tzinfo=datetime.timezone.utc), 'time_taken': 1824870.0, 'time_delta': '21 days, 2:54:30', 'additions': 82, 'deletions': 0, 'state': 'closed'}, {'id': 1297172526, 'number': 224, 'closed': datetime.datetime(2023, 6, 19, 11, 48, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 31, 5, 23, 17, tzinfo=datetime.timezone.utc), 'time_taken': 6935098.0, 'time_delta': '80 days, 6:24:58', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
