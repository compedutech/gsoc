pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
384705879,spirv-fuzz: Add fuzzer pass to permute function parameters,Resolves #3194,True,3212,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3212,https://github.com/KhronosGroup/SPIRV-Tools/pull/3212,closed,945,2,19,14,5,56,0,0,[],2020-03-06 08:58:32+00:00,2020-03-08 14:27:05+00:00,192513.0,"2 days, 5:28:33","[{'comment_id': 388843655, 'comment_body': 'Please make these be in alphabetical order.', 'comment_created': datetime.datetime(2020, 3, 6, 11, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388843748, 'comment_body': 'Please make these be in alphabetical order.', 'comment_created': datetime.datetime(2020, 3, 6, 11, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388844837, 'comment_body': ""I don't think these are needed as part of the transformation message.\r\n\r\nIf the function with id |function_id| exists, and if the permutation of function parameters is usable, then we can go ahead and find all of the calls to the function and permute their arguments.  We should not have to know about them in advance."", 'comment_created': datetime.datetime(2020, 3, 6, 11, 9, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388846092, 'comment_body': 'Would it make things simpler to think of the permutation being on the set [0, n-1], since argument indexing starts from 0?', 'comment_created': datetime.datetime(2020, 3, 6, 11, 12, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388846486, 'comment_body': 'Can you explain this a little more in the comment?  I suppose there are expected to be n elements, such that i maps to permutation[i]?  (And again I think this fits better with a [0, n-1] model.)', 'comment_created': datetime.datetime(2020, 3, 6, 11, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 388892682, 'comment_body': 'Fixed in 55f73bd', 'comment_created': datetime.datetime(2020, 3, 6, 13, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 388892767, 'comment_body': 'Fixed in 55f73bd', 'comment_created': datetime.datetime(2020, 3, 6, 13, 9, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 388893136, 'comment_body': 'Fixed in d7f8687', 'comment_created': datetime.datetime(2020, 3, 6, 13, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 388894474, 'comment_body': ""Yes, I think so. As a matter of fact, I've been using function's return type id as a first element in the permutation to get rid of `+1` in transformation class everywhere (thus, `permutation[0] == 0` always). Fixed that in 19a2a10."", 'comment_created': datetime.datetime(2020, 3, 6, 13, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 388894729, 'comment_body': 'Fixed in 19a2a10', 'comment_created': datetime.datetime(2020, 3, 6, 13, 13, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389031454, 'comment_body': 'A comment on these lines to say that they fill the permutation with the values 0 ... arg_size - 1 and then shuffle them would be great.  (I had to look up iota to understand the code - nice function!)', 'comment_created': datetime.datetime(2020, 3, 6, 17, 11, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389031788, 'comment_body': 'Nit: I would inline this so that ""GetFuzzerContext()->GetFreshId()"" is one of the parameters.', 'comment_created': datetime.datetime(2020, 3, 6, 17, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389032228, 'comment_body': 'Please update to say [0, n-1]', 'comment_created': datetime.datetime(2020, 3, 6, 17, 13, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389033294, 'comment_body': ""Please do this check first (in line with most other transformations, and becuase it's also a really cheap check), and prepend it with a comment saying that the new type's id must be fresh."", 'comment_created': datetime.datetime(2020, 3, 6, 17, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389034289, 'comment_body': 'A name like ""already_seen"" would be more descriptive.', 'comment_created': datetime.datetime(2020, 3, 6, 17, 17, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389034635, 'comment_body': ""I don't get this comment in context."", 'comment_created': datetime.datetime(2020, 3, 6, 17, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389034853, 'comment_body': 'A comment to note that this ensures the permutation does not go beyond the number of arguments the function has would be good.', 'comment_created': datetime.datetime(2020, 3, 6, 17, 18, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389035990, 'comment_body': 'I suggest changing this to an assertion.  The reason is that the fuzzer pass should never construct a ""permutation"" with duplicated values, and the shrinker part of the tool won\'t mess with these, so it\'s a scenario that should never occur; hence assert would be more appropriate.', 'comment_created': datetime.datetime(2020, 3, 6, 17, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389037932, 'comment_body': 'Instead of having the function type be added by the transformation, could you have the transformation require that a suitable function type is present, and have the fuzzer pass apply a transformation to add the type if it is not already present?', 'comment_created': datetime.datetime(2020, 3, 6, 17, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389038506, 'comment_body': 'Please change ""swap"" to ""std::swap"" and get rid of the ""using"".  In general we avoid ""using"" in this project.', 'comment_created': datetime.datetime(2020, 3, 6, 17, 25, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389044272, 'comment_body': ""I'm just checking that all indices are valid. Thus, the full check is `index < 0 || index >= arg_size`.\r\nBut, since `index` is `uint32_t`, compiler complains that we needlessly compare unsigned integer with 0."", 'comment_created': datetime.datetime(2020, 3, 6, 17, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389050864, 'comment_body': ""No problem ;) Although, I thought it's a good practice from [this post](http://ericniebler.com/2014/10/21/customization-point-design-in-c11-and-beyond/)"", 'comment_created': datetime.datetime(2020, 3, 6, 17, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389079686, 'comment_body': 'Oh I see; in that case I would change it to say that the value is non-negative by definition, or just remove the comment, as you prefer.', 'comment_created': datetime.datetime(2020, 3, 6, 18, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389080514, 'comment_body': 'Thatâ€™s interesting: by all means keep it in that case, with a short comment stating that it caters for a swap other than std::swap being used.', 'comment_created': datetime.datetime(2020, 3, 6, 18, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389133651, 'comment_body': 'Fixed in eb526e4', 'comment_created': datetime.datetime(2020, 3, 6, 20, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389133748, 'comment_body': 'Fixed in eb526e4', 'comment_created': datetime.datetime(2020, 3, 6, 20, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389133835, 'comment_body': 'Fixed in eb526e4', 'comment_created': datetime.datetime(2020, 3, 6, 20, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389133911, 'comment_body': 'Fixed in eb526e4', 'comment_created': datetime.datetime(2020, 3, 6, 20, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389134037, 'comment_body': 'Fixed in eb526e4', 'comment_created': datetime.datetime(2020, 3, 6, 20, 43, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389134421, 'comment_body': 'Fixed in fa6532d', 'comment_created': datetime.datetime(2020, 3, 6, 20, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389134590, 'comment_body': 'Fixed in fa6532d', 'comment_created': datetime.datetime(2020, 3, 6, 20, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389134859, 'comment_body': 'Fixed in eb526e4', 'comment_created': datetime.datetime(2020, 3, 6, 20, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389135676, 'comment_body': 'Fixed in fa6532d.', 'comment_created': datetime.datetime(2020, 3, 6, 20, 46, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389135945, 'comment_body': 'Fixed in fa6532d.', 'comment_created': datetime.datetime(2020, 3, 6, 20, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389238738, 'comment_body': 'For this, and any other new files you contributed, the copyright header should bear your name, not Google.  Can you please address this and update the script that checks copyright headers so that it accepts your name as a valid copyright?', 'comment_created': datetime.datetime(2020, 3, 7, 8, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389240403, 'comment_body': 'Fixed in e1f23b3', 'comment_created': datetime.datetime(2020, 3, 7, 9, 10, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389341741, 'comment_body': 'Nit: I would get rid of this comment, because the memory usage is negligible here and only affects the lifetime of this function.  I think it would be worth instead remarking that since fuzzerutil::FindFunctionType requires the result type id followed by all argument ids to be presented as a single sequence, some reorganization is required.', 'comment_created': datetime.datetime(2020, 3, 8, 7, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389341784, 'comment_body': 'Nits:\r\n\r\n- end comment with period.\r\n- ""such instruction"" -> ""such an instruction""\r\n- "", transformation is applied"" -> "", a transformation is applied""\r\n', 'comment_created': datetime.datetime(2020, 3, 8, 7, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389341849, 'comment_body': ""Nit: I would avoid the 'type_id' temporary, and make the call to FindOrCreateFunctionType one of the arguments to ApplyTransformation, but up to you."", 'comment_created': datetime.datetime(2020, 3, 8, 7, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389341988, 'comment_body': ""Please open a GitHub issue regarding the fact that TransformationAddFunctionCall also has this functionality (mentioning in that issue that it is being added again by this PR, which you can reference from the issue), and change TODO: to TODO(full url of GitHub issue) - look for other occurrences of TODO in spirv-fuzz and you'll see they do this; we try to avoid a plain old TODO: wherever possible as we just lose track of those."", 'comment_created': datetime.datetime(2020, 3, 8, 7, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389342010, 'comment_body': 'Nit: end function comment with period.', 'comment_created': datetime.datetime(2020, 3, 8, 7, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389342022, 'comment_body': 'Nice catch!', 'comment_created': datetime.datetime(2020, 3, 8, 7, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389342188, 'comment_body': ""A rule of the SPIRV-Tools project is that we don't allow blanket captures.  Please enumerate the things you need to capture and capture them (with 'this' first, if needed, and then others in alphabetical order - I guess it is param_id and param_type here)."", 'comment_created': datetime.datetime(2020, 3, 8, 7, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389342322, 'comment_body': 'Same comment about [&]', 'comment_created': datetime.datetime(2020, 3, 8, 7, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389342438, 'comment_body': 'The fact that you had to use a lambda here makes me wish there was a way to index function parameters using a uint32_t index.  I checked and there is not.', 'comment_created': datetime.datetime(2020, 3, 8, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389342691, 'comment_body': 'At the end of Apply, do:\r\n\r\n  context->InvalidateAnalysesExceptFor(opt::IRContext::Analysis::kAnalysisNone);\r\n\r\nThis ensures that any analysis results that were computed before we applied this transformation will be recomputed last time they are requested.  For example, def-use analysis will be messed up by this transformation because uses of ids as function call arguments will now be in different places.  I prefer to be conservative about this and invalidate everything, and in due course plan to conduct profiling to work out when we are paying a price for redundant invalidation of certain analyses.', 'comment_created': datetime.datetime(2020, 3, 8, 7, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 389352251, 'comment_body': 'Fixed in 2a20e6e', 'comment_created': datetime.datetime(2020, 3, 8, 9, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389352275, 'comment_body': 'Fixed in 2a20e6e', 'comment_created': datetime.datetime(2020, 3, 8, 9, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389352292, 'comment_body': ""> The fact that you had to use a lambda here makes me wish there was a way to index function parameters using a uint32_t index. I checked and there is not.\r\n\r\nI'll add an issue."", 'comment_created': datetime.datetime(2020, 3, 8, 9, 39, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389352298, 'comment_body': 'Fixed in 2a20e6e', 'comment_created': datetime.datetime(2020, 3, 8, 9, 39, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389352380, 'comment_body': ""Well, I'm sure I made more mistakes than fixed. Those will be for someone else to catch ;)"", 'comment_created': datetime.datetime(2020, 3, 8, 9, 40, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389352386, 'comment_body': 'Fixed in 2a20e6e', 'comment_created': datetime.datetime(2020, 3, 8, 9, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389352396, 'comment_body': 'Fixed in 2a20e6e', 'comment_created': datetime.datetime(2020, 3, 8, 9, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389352422, 'comment_body': 'Fixed in 2a20e6e', 'comment_created': datetime.datetime(2020, 3, 8, 9, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389352437, 'comment_body': 'Fixed in 2a20e6e', 'comment_created': datetime.datetime(2020, 3, 8, 9, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 389352614, 'comment_body': 'Added a new issue #3218.', 'comment_created': datetime.datetime(2020, 3, 8, 9, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '4949dcde5346bb0352499d025e40ee6da78ecd62', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc10f461f43ffe48ca39a71be46858308342fde', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac5797dadfd73414ef336f2c0e92d6f0bf0ac231', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7007b928f0206e15c4ed3a7327357981fa86e068', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55f73bd377cdff08f56ef1c233f977309c73723f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7f86877341d0669d7c3e6ebdcb3290fc16efdf6', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a2a10c57b72b6ca3e96b90952fd861c5db2d6b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb526e4c68a9704e0a357d6af7726be1fe6a8988', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4793fc6584ba30384136c4a9425de1c60c5f442', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa6532dac463be643544ddb14ff85c7ffd1a2ada', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1f23b3458e0f653ffac2dac83ff4f41274681bf', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75b038682eea9ed7f2a8ed20eabd68beff15856c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd945cb4b8e00a7bd61860b30727275a9507bef5d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a20e6e9dac83da7721d072b933f194c5ec21cdd', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
426633878,spirv-fuzz: Add FuzzerPassAddCopyMemoryInstructions,Fixes #3382.,True,3391,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3391,https://github.com/KhronosGroup/SPIRV-Tools/pull/3391,closed,817,0,12,14,0,32,1,0,[{'name': 'kokoro:run'}],2020-06-02 14:45:30+00:00,2020-06-30 20:13:07+00:00,2438857.0,"28 days, 5:27:37","[{'comment_id': 433944040, 'comment_body': 'I think ""Skip"" is more accurate than ""Omit"".', 'comment_created': datetime.datetime(2020, 6, 2, 15, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 433945050, 'comment_body': 'Since instr.type_id was not zero, type_instr cannot be 0.  I would thus prefer you to assert that before the if, rather than have it as an if condition.', 'comment_created': datetime.datetime(2020, 6, 2, 15, 1, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 433945596, 'comment_body': ""Hmm - not sure I see how we could do that.  If the id doesn't have pointer type then it seems like OpCopyMemory is out of scope."", 'comment_created': datetime.datetime(2020, 6, 2, 15, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 433953226, 'comment_body': 'Instead of doing this here, you should make it part of the ""Apply"" method of the transformation.\r\n\r\nAnd there\'s no need to initialize the local variable since we\'re going to copy into it straight away.', 'comment_created': datetime.datetime(2020, 6, 2, 15, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 433954213, 'comment_body': ""It's a bit painful, but we should probably walk through the pointee type and check that it does not use OpTypeRuntimeArray anywhere in its structure - the SPIR-V spec says that OpTypeRuntimeArray is not compatible with this instruction."", 'comment_created': datetime.datetime(2020, 6, 2, 15, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 433957600, 'comment_body': 'I was thinking smth like creating a dummy variable, inserting `OpStore` and then `OpCopyMemory` into a different variable.', 'comment_created': datetime.datetime(2020, 6, 2, 15, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 433959362, 'comment_body': 'Are there any other types similar to `OpTypeRuntimeArray` (i.e. their size is unknown at compile-time)?\r\n', 'comment_created': datetime.datetime(2020, 6, 2, 15, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434013232, 'comment_body': ""@afd I'm not sure what operand type I should be using here. There is also an `SPV_OPERAND_TYPE_ID`."", 'comment_created': datetime.datetime(2020, 6, 2, 16, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434469371, 'comment_body': 'Figured this out. `SPV_OPERAND_TYPE_ID` is the right way to go.', 'comment_created': datetime.datetime(2020, 6, 3, 10, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434470648, 'comment_body': 'Although this variable creation part looks like a separate transformation.', 'comment_created': datetime.datetime(2020, 6, 3, 10, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434549652, 'comment_body': 'Fixed in 2938026.', 'comment_created': datetime.datetime(2020, 6, 3, 13, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434549844, 'comment_body': 'Fixed in 2938026.', 'comment_created': datetime.datetime(2020, 6, 3, 13, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434550304, 'comment_body': 'Fixed in 5342d07.', 'comment_created': datetime.datetime(2020, 6, 3, 13, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434550819, 'comment_body': 'Fixed in 2938026.', 'comment_created': datetime.datetime(2020, 6, 3, 13, 5, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434551456, 'comment_body': 'Fixed in 6eaf8fa.', 'comment_created': datetime.datetime(2020, 6, 3, 13, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 437540645, 'comment_body': 'Un-indent by 2 to match the rest of the file.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437541410, 'comment_body': 'Assuming that this needs to be fresh, I suggest naming it ""fresh_id"", and change the comment to ""A fresh target id to .."".', 'comment_created': datetime.datetime(2020, 6, 9, 15, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437544509, 'comment_body': 'Does the target have to be global?\r\n\r\nHow about you add a StorageClass field to the transformation that can either be Function or Private?\r\n\r\nThen, depending on that storage class, you add a variable to the function or a global variable (taking account of entry point interfaces in the latter case)?', 'comment_created': datetime.datetime(2020, 6, 9, 16, 0, 1, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437981035, 'comment_body': 'Fixed in a2e3493.', 'comment_created': datetime.datetime(2020, 6, 10, 9, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 437981323, 'comment_body': 'Fixed in a2e3493.', 'comment_created': datetime.datetime(2020, 6, 10, 9, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 443133929, 'comment_body': 'Fixed in 821685d.', 'comment_created': datetime.datetime(2020, 6, 20, 14, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 444204176, 'comment_body': ""I don't quite understand what this TODO is about."", 'comment_created': datetime.datetime(2020, 6, 23, 13, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 444205960, 'comment_body': ""I guess we don't need an initializer if we are just going to copy into this variable, but it might be nice to have one.\r\n\r\nIn the flavour of SPIR-V we are supporting, it's safe to assume, I think, that we can create a zero for the pointee type.  The only thing I can see possibly being complex here is if the pointee type uses OpTypeRuntimeArray."", 'comment_created': datetime.datetime(2020, 6, 23, 13, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 444790944, 'comment_body': ""Fixed in c1afd97. As per SPIR-V spec `OpCopyMemory` doesn't support `OpTypeRuntimeArray`."", 'comment_created': datetime.datetime(2020, 6, 24, 10, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 445640838, 'comment_body': ""I think you could replace all of this with a call to fuzzerutil::IdIsAvailableBeforeInstruction, which also captures the case where you are copying a function parameter (which I don't think you capture here)."", 'comment_created': datetime.datetime(2020, 6, 25, 15, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 445642291, 'comment_body': 'I think it would be good to have a brief comment before this, along the lines of:\r\n\r\n""Even though the copy memory instruction will - at least temporarily - lead to the destination and source pointers referring to identical values, this fact is not guaranteed to hold throughout execution of the SPIR-V code since the source pointer could be over-written.  We thus assume nothing about the destination pointer, and record this fact so that the destination pointer can be used freely by other fuzzer passes.""', 'comment_created': datetime.datetime(2020, 6, 25, 15, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 445642554, 'comment_body': 'Nice!', 'comment_created': datetime.datetime(2020, 6, 25, 15, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 446136431, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 6, 26, 11, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 446136497, 'comment_body': 'Fixed in d32f2fd.', 'comment_created': datetime.datetime(2020, 6, 26, 11, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 446136579, 'comment_body': 'Fixed in d32f2fd.', 'comment_created': datetime.datetime(2020, 6, 26, 11, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 446533368, 'comment_body': '@afd, should I handle `OpUndef` here?', 'comment_created': datetime.datetime(2020, 6, 27, 14, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 446656056, 'comment_body': 'Fixed in 548c8ab.', 'comment_created': datetime.datetime(2020, 6, 28, 14, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '1810c41120276b326f5c2f3f88b9dfe8c70ce3d7', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '574d3c0d74857af23a58a09a37749403b2fd0ac5', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23ac40b65142e1e6eff4e30f553a8c6a9e472cbd', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97e910f01b814826569b1548c3e0c27124a4941f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4af8e6511def530a5c07117c4fe88a16d0341b75', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dadd65c79843996db55f3312a83456df06e5d7d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7222cb10628206585d120afef8c6229bf4411069', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb4afb097229c78cb05483426b95670657561a5a', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ea0a88e7d0d410b99c69377ae60a90c1be04e05', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd468aa8d6dca28f88766a4bec5b71756824eab2d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '299a6930fb80bb8fdeac8aeedd82c7fce8e6390b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec314b30063d788f0dc68a11a58c894103ce641d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaff715fb9535f98fca4c030c22d8914feea7e54', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60ceb6c2c084a4827bfe7ec984595c0e81d356f9', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
427948684,spirv-fuzz: Implement FuzzerPassAddParameters,Fixes #3384.,True,3399,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3399,https://github.com/KhronosGroup/SPIRV-Tools/pull/3399,closed,699,1,13,9,2,25,0,0,[],2020-06-04 16:18:29+00:00,2020-06-23 16:40:45+00:00,1642936.0,"19 days, 0:22:16","[{'comment_id': 435983437, 'comment_body': 'Seems reasonable.  At some point we should do some empirical work to make these guesses more informed.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 6, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 435984216, 'comment_body': 'We try to avoid adding generic functions, instead preferring to add many named functions specific to what is being requested.  The idea is that this might allow for finer-grained control in the future when we want to bias how values are chosen for specific purposes.\r\n\r\nIt thus might be better to leave this as private, and introduce a public method named according to its specific use case even if that public method just calls this private method.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 435985365, 'comment_body': 'We typically comment pretty heavily - ""Consider every function in the module."" ... ""We must not add parameters to entry points.""  etc.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 9, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 435985734, 'comment_body': 'I think it would indeed be good to give the fuzzer context a named method for choosing a number of new parameters.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 435987788, 'comment_body': ""I would prefer you to split this into multiple declarations.  The Google C++ style does not forbit multiple declarations on a single line (but does note that it's slightly unusual: https://google.github.io/styleguide/cppguide.html) - but I find multiple separate declarations more readable."", 'comment_created': datetime.datetime(2020, 6, 5, 15, 13, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 435991322, 'comment_body': ""It's a bit of a shame that the parameters have to be limited to types for which we can create zero - this rules out pointer parameters.\r\n\r\nFine for this PR, but worth an issue to make it work for pointers in the future.  We could, for example, create new irrelevant variables to pass, or randomly choose from existing global pointers."", 'comment_created': datetime.datetime(2020, 6, 5, 15, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 435996315, 'comment_body': 'I think the fact a type candidate is a provider, and that this invokes the provider which may apply a transformation, should be spelled out in comments.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 435998654, 'comment_body': 'This function took me quite a while to understand.  The implementation is clever, but maybe more fun to write than to read :)\r\n\r\nIt would seems simpler to me to just return a vector of all the relevant types that are declared in the module.  If this vector is empty then the fuzzer pass has to give up.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 436002308, 'comment_body': 'It would be good to add a TODO(url) for this issue:\r\n\r\nhttps://github.com/KhronosGroup/SPIRV-Tools/issues/3177\r\n\r\nThese constants are good in allowing us to make the function call, but it would be nice to tell other passes that they could replace their uses with something else.', 'comment_created': datetime.datetime(2020, 6, 5, 15, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 436052981, 'comment_body': 'Removed comment in 167cc6e.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 436053079, 'comment_body': 'Fixed in 167cc6e.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 436053166, 'comment_body': 'Fixed in 167cc6e.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 436053254, 'comment_body': 'Fixed in 167cc6e.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 436053584, 'comment_body': 'Added a TODO comment in `ComputeTypeCandidates` in 167cc6e.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 436053869, 'comment_body': 'Simplified `ComputeTypeCandidates` in 167cc6e.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 436053993, 'comment_body': 'Fixed in 167cc6e.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 436054397, 'comment_body': 'Fixed in 167cc6e.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 436054507, 'comment_body': 'Fixed in 167cc6e.', 'comment_created': datetime.datetime(2020, 6, 5, 17, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 437518441, 'comment_body': ""I recommend putting a `break` even though this is the default.  `default` doesn't have to be the last thing in a switch statement, so it's good to force a break just in case some bad programmer comes along and puts a case after your default."", 'comment_created': datetime.datetime(2020, 6, 9, 15, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 437523314, 'comment_body': 'Fixed in 9f3603f.', 'comment_created': datetime.datetime(2020, 6, 9, 15, 30, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 440169049, 'comment_body': 'The added parameter might not have an `OpTypePointer` type. Is it ok to add the fact in this case? @afd', 'comment_created': datetime.datetime(2020, 6, 15, 13, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 442117570, 'comment_body': 'Actually no - we should only add this fact for pointer ids.\r\n\r\nWould you be able to change things so that the fact is only added conditionally?', 'comment_created': datetime.datetime(2020, 6, 18, 10, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 443122435, 'comment_body': 'Fixed in 5eed6c7.', 'comment_created': datetime.datetime(2020, 6, 20, 11, 6, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 444197600, 'comment_body': ""Looking at the rest of this PR, it seems that we are not set up to add pointer parameters.  For one thing, the transformation takes a sequence of constants - one per parameter - to use when calling the function, and we don't have constants for pointers.\r\n\r\nI recommend opening an issue to explain that we do not currently have a way to pass pointer parameters and doing a TODO(issue) somewhere in the PR (perhaps where we compute candidate types) to reference this issue.  Then get rid of this check/fact addition, which is not currently relevant.\r\n\r\n(For the future, we could add pointer parameters for any type where we have an irrelevant pointer in scope at the point of the call.)"", 'comment_created': datetime.datetime(2020, 6, 23, 12, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 444230316, 'comment_body': 'Fixed in 9f75c77. There is already a comment in `GetTypeCandidates` and an opened issue.', 'comment_created': datetime.datetime(2020, 6, 23, 13, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '4c36d7e8a03d43ea11bb55670b43d6976adc839c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29ce20ae56960f54f61fb35cbbfe27c05eecc172', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a819846fadf192d691e275f5f076f51f4fe2234', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66262a824e8294e676600179f0602cd6dcced616', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee60f7a7fde8da049e12d7f0def0c5136714b62c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f9a0e5b7edca7dc3db245bb2d8afd49196b8db7', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22dc0c4df021319cb272107bcfc45acdfc8d555', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e7440fba02733d1ebf559ad49801059146a49f0', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb148204c51237041eee8d35b150da648d1c2944', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
432940771,spirv-fuzz: Permute OpPhi instruction operands,Fixes #3415.,True,3421,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3421,https://github.com/KhronosGroup/SPIRV-Tools/pull/3421,closed,496,16,16,4,0,6,0,0,[],2020-06-11 09:05:00+00:00,2020-06-23 14:00:29+00:00,1054529.0,"12 days, 4:55:29","[{'comment_id': 439474304, 'comment_body': '""to apply transformation to"" -> ""to apply the transformation to""', 'comment_created': datetime.datetime(2020, 6, 12, 15, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439476385, 'comment_body': 'Can you factor out the common code from here and transformation_permute_function_parameters into a common helper (I guess in fuzzerutil)?', 'comment_created': datetime.datetime(2020, 6, 12, 15, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439477379, 'comment_body': ""You at least need to invalidate def-use analysis, since you've changed the operand indices at which certain ids are used.\r\n\r\nI recommend invalidating all analyses to be on the safe side.  My thinking is that when we eventually do some profiling of spirv-fuzz we can be less conservative about invalidation when we identify certain analysis recomputations as botttlenecks."", 'comment_created': datetime.datetime(2020, 6, 12, 15, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439719579, 'comment_body': 'Fixed in 0d782ae.', 'comment_created': datetime.datetime(2020, 6, 13, 8, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 439719596, 'comment_body': 'Fixed in 0d782ae.', 'comment_created': datetime.datetime(2020, 6, 13, 8, 2, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 439719615, 'comment_body': 'Fixed in c08fe9a.', 'comment_created': datetime.datetime(2020, 6, 13, 8, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '64b76dd96b63976b7f24860bc42fa6dce9bcc380', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fb2b54964e390dbe2f885714462a1d5b647f30', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9daf4c8a6d414b0cb9026fd81b487414b17df3d9', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3362a5dfafc8ed41e0079538a994a2fd83336d3', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
433054032,spirv-fuzz: Swap operands in OpBranchConditional,Fixes #3416.,True,3423,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3423,https://github.com/KhronosGroup/SPIRV-Tools/pull/3423,closed,444,0,12,2,0,10,0,0,[],2020-06-11 12:50:13+00:00,2020-06-19 15:38:53+00:00,701320.0,"8 days, 2:48:40","[{'comment_id': 439469503, 'comment_body': 'add that it inverts the guard too (and maybe also mention branch weights).', 'comment_created': datetime.datetime(2020, 6, 12, 14, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439469784, 'comment_body': '""... instruction used to invert the guard.""', 'comment_created': datetime.datetime(2020, 6, 12, 14, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439470950, 'comment_body': 'I try to always have an \'&& ""Descriptive message""\' with an assertion.', 'comment_created': datetime.datetime(2020, 6, 12, 14, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439471238, 'comment_body': 'which -> whose', 'comment_created': datetime.datetime(2020, 6, 12, 14, 57, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439471482, 'comment_body': 'I would make the comment higher level - explain that since we are swapping the target labels we need to negate the condition, and we use OpLogicalNot for this purpose.', 'comment_created': datetime.datetime(2020, 6, 12, 14, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439715144, 'comment_body': 'Fixed in b08e5a3.', 'comment_created': datetime.datetime(2020, 6, 13, 6, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 439715208, 'comment_body': 'Fixed in b08e5a3.', 'comment_created': datetime.datetime(2020, 6, 13, 6, 45, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 439715215, 'comment_body': 'Fixed in b08e5a3.', 'comment_created': datetime.datetime(2020, 6, 13, 6, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 439715236, 'comment_body': 'Fixed in b08e5a3.', 'comment_created': datetime.datetime(2020, 6, 13, 6, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 439715244, 'comment_body': 'Fixed in b08e5a3.', 'comment_created': datetime.datetime(2020, 6, 13, 6, 46, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '865987c288fc2f6211770b9ff84ad510e87f64a7', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90fe2631dac1204dfed05a345228803defb7a8f1', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
435064821,spirv-fuzz: TransformationReplaceParameterWithGlobal,Fixes #3432.,True,3434,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3434,https://github.com/KhronosGroup/SPIRV-Tools/pull/3434,closed,683,7,17,15,0,26,0,0,[],2020-06-16 08:42:42+00:00,2020-07-09 10:03:50+00:00,1992068.0,"23 days, 1:21:08","[{'comment_id': 444347054, 'comment_body': 'If we change the name of the fuzzer pass (see below) we should change this name (and related names in these files) accordingly.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 444347578, 'comment_body': 'I think TransformationReplaceParameterWithGlobal would be a better name.  Or TransformationPromoteParameterToGlobal.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 444354228, 'comment_body': '@Vasniktel and @paulthomson I would love to discuss the following comment:\r\n\r\nRelated to this, I think it would be nicer to do this one parameter at a time, rather than to remove several parameters simultaneously.\r\n\r\nI suggest you have these fields:\r\n\r\n- `uint32 parameter_id` -- the id of the formal parameter to be promoted.  Because ids are unique in SPIR-V this suffices to identify the function and its parameter; there is no need to have the function id.  Furthermore, this eliminates the problem of needing to worry about counting which parameter is being manipulated.\r\n\r\n- `uint32 fresh_id`: for non-pointer parameters this is non-zero, and the new global variable has this id; the load from that variable gets the original parameter id.  For pointer parameters `fresh_id` is zero because the original parameter id can be used as the id for the global variable.\r\n\r\n- `uint32 initializer_id`: the id with which to initialize the global variable)\r\n\r\nI suggest we do *not* have the new function type as part of this transformation, and that the transformation adds the necessary function type on demand.', 'comment_created': datetime.datetime(2020, 6, 23, 16, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 445429711, 'comment_body': 'Partially fixed in cc488d5.\r\n> I suggest we do not have the new function type as part of this transformation, and that the transformation adds the \r\nnecessary function type on demand.\r\n\r\nneeds clarification.', 'comment_created': datetime.datetime(2020, 6, 25, 9, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 445469135, 'comment_body': 'Fixed in cc488d5.', 'comment_created': datetime.datetime(2020, 6, 25, 10, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 447890804, 'comment_body': 'Fixed in 7b31019.', 'comment_created': datetime.datetime(2020, 6, 30, 18, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 449656817, 'comment_body': '""This is"" -> ""This must be""', 'comment_created': datetime.datetime(2020, 7, 3, 16, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449657229, 'comment_body': 'Do you need the special case for ""empty"" here?  Wouldn\'t the ""none_of"" below do the trick?', 'comment_created': datetime.datetime(2020, 7, 3, 16, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449657545, 'comment_body': ""Best to do this check earlier.  No point doing work if we're then going to decide not to do a transformation.  (This might seem like premature optimization - but I see no disadvantage of doing this check earlier and if anything I think it makes the code clearer.)"", 'comment_created': datetime.datetime(2020, 7, 3, 16, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449658034, 'comment_body': ""A pattern I prefer to employ here is:\r\n\r\n- Make a vector of the things you're going to be searching\r\n- Repeatedly remove from the vector at a random index, and break if the thing that removed was suitable\r\n\r\nThis avoids the risk of getting stuck for a long time not finding a suitable item if the probability of picking a suitable item is low."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449658860, 'comment_body': ""This seems to be a nice improvement and I'm fine with it being part of this PR.  However, do feel free to do very small PRs that contribute these kinds of improvements in isolation - that's slightly preferable."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 450828545, 'comment_body': 'Will do!', 'comment_created': datetime.datetime(2020, 7, 7, 12, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450965151, 'comment_body': 'Fixed in fc12eab.', 'comment_created': datetime.datetime(2020, 7, 7, 15, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450965411, 'comment_body': 'Fixed in fc12eab.', 'comment_created': datetime.datetime(2020, 7, 7, 15, 47, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450965516, 'comment_body': 'Fixed in fc12eab.', 'comment_created': datetime.datetime(2020, 7, 7, 15, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450965624, 'comment_body': 'Fixed in fc12eab.', 'comment_created': datetime.datetime(2020, 7, 7, 15, 47, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451382918, 'comment_body': 'Can we cite #3177 here?  In due course we should change this so that we pass in a copy of zero and add an ""id is irrelevant"" fact.', 'comment_created': datetime.datetime(2020, 7, 8, 8, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451384374, 'comment_body': '-> Update all relevant OpFunctionCall instructions', 'comment_created': datetime.datetime(2020, 7, 8, 8, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451385379, 'comment_body': ""Matrices and vectors can only contain things that you'll definitely be able to replace, so I think you could include them in the first case when you return true.  E.g., you can't have a OpRuntimeArray in a vector."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451385975, 'comment_body': 'I would initialize these with nullptr, and then ...', 'comment_created': datetime.datetime(2020, 7, 8, 8, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451386152, 'comment_body': '... assert that they are not nullptr.', 'comment_created': datetime.datetime(2020, 7, 8, 8, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451451987, 'comment_body': 'Fixed in febf42e.', 'comment_created': datetime.datetime(2020, 7, 8, 10, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451452060, 'comment_body': 'Fixed in febf42e.', 'comment_created': datetime.datetime(2020, 7, 8, 10, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451452122, 'comment_body': 'Fixed in febf42e.', 'comment_created': datetime.datetime(2020, 7, 8, 10, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451452180, 'comment_body': 'Fixed in febf42e.', 'comment_created': datetime.datetime(2020, 7, 8, 10, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451452285, 'comment_body': 'Fixed in febf42e.', 'comment_created': datetime.datetime(2020, 7, 8, 10, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '5deae4b12bbdb05b1087246ca0e30d48b083a701', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f492e33d48c9cb6f03173e02c875a9a7964ba19', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ea69fbcb630f340bb516111c0b038db41be67be', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '747e51763bac3c33ff998daaa0f0e941624394f9', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc79c32e96890def141fe8ba1d72c9cd027f1819', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06850401fd8949f73cdd128db9bdf40d4422f664', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da8d6d48ec69371462d0d031804146ce8ce15376', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44f07b4866d555949bf032cd036e629c7e4ace29', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34ad49a303580fe4d9e18dc1264c05c1f55368f5', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30bb8ad700656e2a7ff850dc07436ccf9ca6f7f7', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a77801d48ce7b571ce2db537388fa89cd416267', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '267d60432879342d69775fec231fc46f8f534886', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b7c085f67e8ecd598ce20d94f82363968e48fb9', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbdd398aabf8e78b72192bd94f7f859588a1d03c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb752791ab3363102e6a1695539703151324648b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
436532672,spirv-fuzz: TransformationAddSynonyms,Part of #3440.,True,3447,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3447,https://github.com/KhronosGroup/SPIRV-Tools/pull/3447,closed,1260,0,17,16,0,26,0,0,[],2020-06-18 14:58:08+00:00,2020-07-12 08:59:09+00:00,2052061.0,"23 days, 18:01:01","[{'comment_id': 444644967, 'comment_body': ""I don't think that synonym_id is a good name, since the id is not a synonym in advance of applying this transformation.  integer_id might be better."", 'comment_created': datetime.datetime(2020, 6, 24, 5, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 444645306, 'comment_body': 'Do we need to pass this in to the transformation?\r\n\r\nI think instead that the type of what you currently call synonym_id dictates the required float type, thus there is no need to pass it in to the transformation.  The transformation can instead check that an appropriate type exists in the module, and IsApplicable can return false if the right type does not exist.', 'comment_created': datetime.datetime(2020, 6, 24, 5, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 444646258, 'comment_body': ""Again I don't feel that, by reading this in isolation, I understand what the transformation does.\r\n\r\nIs the idea that it replaces the comparison with a different operator, storing the result into a temporary with id `fresh_id`, and then computes the negation of that temporary into the original `operator_id`?"", 'comment_created': datetime.datetime(2020, 6, 24, 5, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 445435000, 'comment_body': ""Yes. For some instruction with result id `operator_id` that represents a binary operator (`<`, `>`, `<=`) this transformation will replace that instruction's result id with `fresh_id`, invert the opcode (`<` -> `>=`) and insert `OpLogicalNot` instruction with result id |operator_id| below."", 'comment_created': datetime.datetime(2020, 6, 25, 9, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 445436333, 'comment_body': 'There is no function to check that a floating type exists in the module (something similar to `fuzzerutil::MaybeGetPointerType`). This is related to #3428.', 'comment_created': datetime.datetime(2020, 6, 25, 9, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 445440619, 'comment_body': ""`synonym_id` might be a result id of instruction of vector or floating-point type. Thus, I think `integer_id` is not a good name either. I'll rename it to `result_id`."", 'comment_created': datetime.datetime(2020, 6, 25, 9, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 445444318, 'comment_body': 'Updated the comment in fa3db6d.', 'comment_created': datetime.datetime(2020, 6, 25, 9, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 445444698, 'comment_body': 'Fixed in fa3db6d.', 'comment_created': datetime.datetime(2020, 6, 25, 9, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 446642890, 'comment_body': 'Moved this transformation into a separate PR #3472.', 'comment_created': datetime.datetime(2020, 6, 28, 12, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 448324173, 'comment_body': ""The problem I see with this transformation is: just because the instruction has an argument of the right type, it doesn't follow that the transformation will be semantics-preserting.\r\n\r\nFor instance, for the case of addition we need to know that the thing being added is zero; for multiplication we need to know that the thing being used as a multiplicand is 1.\r\n\r\nIt doesn't seem that your transformation checks this, and it would be really cumbersome to make it do so."", 'comment_created': datetime.datetime(2020, 7, 1, 12, 20, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449160812, 'comment_body': 'Fixed in ecf877b.', 'comment_created': datetime.datetime(2020, 7, 2, 17, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451388519, 'comment_body': 'It would be good to open an issue regarding the fact that there are more things we could consider here, e.g.:\r\n\r\na -> a XOR 0\r\na -> min(a, a)\r\na -> max(a, a)\r\n...', 'comment_created': datetime.datetime(2020, 7, 8, 8, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451388634, 'comment_body': '... and reference the issue here.', 'comment_created': datetime.datetime(2020, 7, 8, 8, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451389629, 'comment_body': ""Why OpIAdd?  Is it just an example representative of the things we might need to add - i.e., we'll be able to add any of them if and only if we can add OpIAdd?  Good to make that clear."", 'comment_created': datetime.datetime(2020, 7, 8, 8, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451391165, 'comment_body': 'This looks good; a few comments to clarify what is going on would be welcome though.', 'comment_created': datetime.datetime(2020, 7, 8, 8, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451459933, 'comment_body': 'Fixed in d4f303c.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451460029, 'comment_body': 'Fixed in d4f303c.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451460214, 'comment_body': 'Fixed in d4f303c.', 'comment_created': datetime.datetime(2020, 7, 8, 11, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 452055707, 'comment_body': ""Depending on whether you've eliminated the fuzzer pass that copies objects in favour of this, we should revise whether we need kChanceOfCopyingObject.  (Haven't got to that point in your changes yet.)"", 'comment_created': datetime.datetime(2020, 7, 9, 8, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 452057773, 'comment_body': 'Please put the implementation of this method in the .cpp file - we only have the bodies of really simple getters inline.', 'comment_created': datetime.datetime(2020, 7, 9, 8, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 452058728, 'comment_body': 'representation -> representative', 'comment_created': datetime.datetime(2020, 7, 9, 8, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 452062269, 'comment_body': ""I suggest doing this check first.\r\n\r\nWhen the order doesn't really matter for readability, I suggest doing cheaper checks first - in particular do the dominance checks later if possible (because computing dominance is relatively expensive)."", 'comment_created': datetime.datetime(2020, 7, 9, 8, 47, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 452752598, 'comment_body': 'Created an issue #3509. Updated comments in 7d0576b.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 452752725, 'comment_body': 'Fixed in 7d0576b.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 9, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 452752839, 'comment_body': 'Fixed in 7d0576b.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 452752933, 'comment_body': 'Fixed in 7d0576b.', 'comment_created': datetime.datetime(2020, 7, 10, 10, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'f4ed8233ef34d6bc34cd023611ed4b456aac0d62', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2164aef727598a37d84447c17910af5e66383327', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1eb27428f8262a96061a7ee1297040250b99645', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ada698c8f27d3e01d856a53e10f163af592a8085', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3904b065cdc3c53ae582729fc1fcb63e5af2c7be', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc487bf683b92fb8a98e6d1acea038ea5179f94e', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '979f2d484b5f85d80023639ee1c2d4c6c214fc2a', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ebf3a6d0823233a5aa8c859a88ec98e2ec207d9f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf83de7383370c59e1ca2510915d82ae5c857919', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0fb5e024e2d49e61e390418a2e20df7f069964c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6b91c40b9bf5b3204ba3575ec31765405bc6025', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '905154bb992874e41a52d81f353e4a0fee3aaf7b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd47f2593128a2c86a81610eab8636dba26876000', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6d98c15af9c91ee7ed0c4675efccff678c856e9', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2f28c16f04b9d092194274a14b6cac299f19ced', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb492365556e36f6a7b363ab38b83a30901d1379', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
437551913,spirv-fuzz: TransformationReplaceParamsWithStruct,Fixes #3453.,True,3455,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3455,https://github.com/KhronosGroup/SPIRV-Tools/pull/3455,closed,1278,79,18,18,0,47,0,0,[],2020-06-21 14:21:17+00:00,2020-07-21 20:02:34+00:00,2612477.0,"30 days, 5:41:17","[{'comment_id': 452154694, 'comment_body': ""Make it be *at least* the number of callees - it doesn't matter if it is larger.  (Larger could happen for example if a previous transformation had added some dead calls to the function that then get removed during shrinking.)"", 'comment_created': datetime.datetime(2020, 7, 9, 11, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453168600, 'comment_body': '-> Check that a relevant OpTypeStruct exists in the module.', 'comment_created': datetime.datetime(2020, 7, 11, 7, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453168833, 'comment_body': ""In this constant in all related methods can you change the name to be clear that this is related to replacing parameters with structs?\r\n\r\nE.g., kGetDefaultMaxNumberOfParametersToReplaceWithStruct\r\n\r\nVerbose, I know - but when we have tons of these fields we'll be grateful that the names make it clear to what transformations they correspond."", 'comment_created': datetime.datetime(2020, 7, 11, 7, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453168898, 'comment_body': ""As per the comment in the protobuf, change != to >=, with a remark explaining that it's OK if there are surplus fresh ids."", 'comment_created': datetime.datetime(2020, 7, 11, 7, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453169848, 'comment_body': 'In fact, instead of having a repeated uint32, can you instead use a repeated Uint32Pair (or - see discussion on chat with Andre - a protobuf map if you think that would be sufficiently deterministic) that maps function call result id to fresh id?\r\n\r\nThat would mean that we always use the same fresh id for the same function call result, and this makes the transformation more robust.  For example, if during shrinking function calls get removed, or moved around, we will still use the same fresh id for a call site according to its return value id - not its current position in the module.', 'comment_created': datetime.datetime(2020, 7, 11, 8, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453169898, 'comment_body': ""And - just like I mentioned there could be more fresh ids than call sites, it's OK if some of the entries in this map are not used."", 'comment_created': datetime.datetime(2020, 7, 11, 8, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453174966, 'comment_body': 'This is relevant only for this transformation. `TransformationReplaceParameterWithGlobal` replaces one parameter at a time.', 'comment_created': datetime.datetime(2020, 7, 11, 9, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453182248, 'comment_body': 'Fixed in 9a5003e.', 'comment_created': datetime.datetime(2020, 7, 11, 10, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453182269, 'comment_body': 'Fixed in 9a5003e.', 'comment_created': datetime.datetime(2020, 7, 11, 10, 40, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453182271, 'comment_body': 'Fixed in 9a5003e.', 'comment_created': datetime.datetime(2020, 7, 11, 10, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453182277, 'comment_body': 'Fixed in 9a5003e.', 'comment_created': datetime.datetime(2020, 7, 11, 10, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453454865, 'comment_body': 'I would change to say: ""While maps are not fully deterministic, the way this map is used does not exhibit nondeterminism.  Change to repeated Uint32Pair if this changes.""', 'comment_created': datetime.datetime(2020, 7, 13, 6, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453456005, 'comment_body': ""Rename this to indicate that it contains parameter indices, not parameter ids (and change the code so that it doesn't later contain parameter ids - use a different vector for that)."", 'comment_created': datetime.datetime(2020, 7, 13, 6, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453456158, 'comment_body': '-> ""Remove the indices of unsupported parameters.""', 'comment_created': datetime.datetime(2020, 7, 13, 6, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453456444, 'comment_body': ""Is it legal for !type to hold?  Doesn't a parameter always have to have a type?  If you'r doing this just as a sanity check then change the check on `type` to be an assertion.  Otherwise - if the check is truly necessary - comment it."", 'comment_created': datetime.datetime(2020, 7, 13, 6, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453457273, 'comment_body': 'Add a short note that this is necessary because `remove_if` places the elements that do not satisfy the predicate at the end.', 'comment_created': datetime.datetime(2020, 7, 13, 6, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453458050, 'comment_body': 'This could do with a top-level explanatory comment: that we are going to get a random subset of |num_replaced_params| by randomizing the order of the parameter indices and then truncating the sequence.', 'comment_created': datetime.datetime(2020, 7, 13, 6, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453459872, 'comment_body': ""I find this hard to read.  I would be much more comfortable with:\r\n\r\n- making an empty vector, `component_type_ids`\r\n- iterating through `parameter_id` (but with the name indicating that it represents indices)\r\n- adding the relevant thing to `component_type_ids` on each iteration\r\n\r\nIn general I'm not keen on the:\r\n\r\nfor (auto& element_reference : collection) {\r\n  // update element_reference\r\n}\r\n\r\nas a way to update a collection, because when you just look at the line of code that updates the element reference you can't see immediately what collection is being updated.\r\n\r\nAlso I don't like patterns that involve adding the *wrong* thing to a collection and then making it right; I prefer to start with nothing and then add the right things.  Again, this comes down to clarity for readers, and reducing the possibility for others who work on the code later to introduce errors."", 'comment_created': datetime.datetime(2020, 7, 13, 6, 30, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453460295, 'comment_body': 'This, I really like!', 'comment_created': datetime.datetime(2020, 7, 13, 6, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 453672907, 'comment_body': 'Fixed in 97a33fa.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 2, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453673149, 'comment_body': 'Fixed in 97a33fa.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453673261, 'comment_body': 'Fixed in 97a33fa.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453673372, 'comment_body': 'Fixed in 97a33fa.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453673485, 'comment_body': 'Fixed in 97a33fa.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 3, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453673566, 'comment_body': 'Fixed in 97a33fa.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453673877, 'comment_body': 'Indeed, you are right! Fixed in 97a33fa.', 'comment_created': datetime.datetime(2020, 7, 13, 14, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453674041, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 7, 13, 14, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454601905, 'comment_body': 'This should be a separate bullet - i.e. start it with ""-"".', 'comment_created': datetime.datetime(2020, 7, 14, 19, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454602331, 'comment_body': 'I would write ""For each index i, |parameter_id|[i]"", or ""Each element of |parameter_id|""', 'comment_created': datetime.datetime(2020, 7, 14, 19, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454605073, 'comment_body': ""I would prefer collapsing this into a single loop:\r\n\r\n```\r\nfor (auto id : parameter_id) {\r\n  // Check that it belongs to the right function\r\n  // Check that it has the right type\r\n}\r\n```\r\n\r\nEven though that repeats work for parameter 0 I think it would be more readable.\r\n\r\nOn a separate note, I'm slightly nervous that if we end up with loads of functions in the module (e.g. due to lots of code donation and outlining), the overhead of invoking GetFunctionFromParameterId over and over again could be high.  However, given that the maximum number of parameters per struct is low I don't think it will be a problem.\r\n\r\nThe alternative with lower computational complexity would be - once we know what function we're dealing with - to chuck all of its parameter ids in a set and then, in this loop, check that each parameter id is in that set."", 'comment_created': datetime.datetime(2020, 7, 14, 19, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454607224, 'comment_body': 'Remember to use an \'&& ""message""\'', 'comment_created': datetime.datetime(2020, 7, 14, 19, 56, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454607753, 'comment_body': '""Create"" isn\'t right because nothing new gets created.', 'comment_created': datetime.datetime(2020, 7, 14, 19, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454608425, 'comment_body': 'Could you factor this into a method of this class, MaybeGetRequiredStructType() (or some such name)?\r\n\r\nThen here you could use it to compute struct_type_id, and in IsApplicable you could do:\r\n\r\n```\r\nif (!MaybeGetRequiredStructType()) {\r\n  return false;\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 14, 19, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454611166, 'comment_body': ""Not for this PR but perhaps for a follow-up one: I feel like you've written code similar to this for other transformations - where we want to do something to a function type in place if the type only has one user, or add another type otherwise.  Is there scope for factoring out that commonality?\r\n\r\nPerhaps not worth it, as I guess the thing that gets done to the type is different in each case (though passing a function could handle that)."", 'comment_created': datetime.datetime(2020, 7, 14, 20, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454612995, 'comment_body': 'This variable is super-important - it gets used loads from now on - so I suggest giving it a slightly more descriptive name, like: ""indices_of_removed_params"", and changing the comment to say that we compute indices of the parameters that will be removed, so that we can work out which actual parameters we need to use to populate a struct instance at every call site.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454823179, 'comment_body': 'Fixed in 877e4d4.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454823252, 'comment_body': 'Fixed in 877e4d4.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454826004, 'comment_body': 'Fixed in 877e4d4.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454826070, 'comment_body': 'Fixed in 877e4d4.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 41, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454826135, 'comment_body': 'Fixed in 877e4d4.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454826851, 'comment_body': 'Oops, fixed the wrong one.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454827017, 'comment_body': 'Fixed in e342267.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454827327, 'comment_body': 'Fixed in 877e4d4.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454828835, 'comment_body': ""That's indeed a lot of boilerplate. Although I'm worried about the readability if we were to replace all this code with the function call (from the `fuzzerutil`, say). The reason is that not only the part, where we update the old function type, changes, but also the part, where we compute a new one. Thus, we would have to use two lambdas instead."", 'comment_created': datetime.datetime(2020, 7, 15, 6, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454828950, 'comment_body': 'Fixed in 877e4d4.', 'comment_created': datetime.datetime(2020, 7, 15, 6, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454920132, 'comment_body': ""I've changed my opinion. It seems we don't need two lambdas so the readability should be ok. I'll add an issue."", 'comment_created': datetime.datetime(2020, 7, 15, 9, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454921355, 'comment_body': 'Added an issue #3534.', 'comment_created': datetime.datetime(2020, 7, 15, 9, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '9a0685bc2474b6c563a72766d549968304471a29', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27c19da3f26102253fbdbf5f1a15df41a3702a6b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56e2bdf1f1ea7621222514b7db13f3b45c473ac', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b49ef0d9a168abfec80f843335449165aefb8cc6', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff185866af16989317ade6b7c090b25ccdf20280', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead263a1d48af7090b15d413b222b94026fb325a', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc84b88f811a349592726e28c463a3dd7e96f07f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '726179eaf3ef1187cbefa8d28f0bdf3a73e4baa7', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9f1746836660fbc6b9939d60b2bc694bf61ad9b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cf7c9adc98d90960b53aafed8eacfb8e3e738e2', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66fd44b159687477aeed25d9ce00b5c4fae91f6', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ada995ad8b3e66b790ab7cca94bf143a530e6f10', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5e1c6fe7771a944cc59aac2b1cf14c0d53b56a4', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87a8c2e3504224682b5c1443f80c9a626d1d5631', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9b2d370e8f8272e3c0f140e802464ebb3d8721e', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7814fc8104d7c731dd2f5d3bea0343a83e37f749', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7346b2e2d70bfd68396a6842a072706e5814e134', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '388517a73ae66b625c1bbcba95a9139ce93d45ac', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
441058250,spirv-fuzz: TransformationInvertComparisonOperator,Part of #3440.,True,3475,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3475,https://github.com/KhronosGroup/SPIRV-Tools/pull/3475,closed,471,0,12,3,3,6,0,0,[],2020-06-28 13:38:37+00:00,2020-07-03 16:37:33+00:00,442736.0,"5 days, 2:58:56","[{'comment_id': 448317821, 'comment_body': 'Either give an exhaustive list or use e.g. to make it clear that these are just three examples.\r\n\r\nAlso: be more precise than ""a binary operator"", because +, -, etc., are binary operators.  I guess you mean a comparison operator specifically.', 'comment_created': datetime.datetime(2020, 7, 1, 12, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 448318281, 'comment_body': 'Typo: IsInversionSupported', 'comment_created': datetime.datetime(2020, 7, 1, 12, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 448319415, 'comment_body': 'I like to have an \' && ""message""\' with every assertion.', 'comment_created': datetime.datetime(2020, 7, 1, 12, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 448392714, 'comment_body': 'Fixed in 682be74.', 'comment_created': datetime.datetime(2020, 7, 1, 14, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 448392795, 'comment_body': 'Fixed in 682be74.', 'comment_created': datetime.datetime(2020, 7, 1, 14, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 448392886, 'comment_body': 'Fixed in 682be74.', 'comment_created': datetime.datetime(2020, 7, 1, 14, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '1bc0563d98f7084f4b909c0c280c1285688a4510', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '682be74fda5c3b64e33ce40d830330aed198f2ce', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e2309edff563c1b53702367e83c4c2e183e81ec', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
441998353,spirv-fuzz: TransformationMoveInstructionDown,Fixes #3457.,True,3477,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3477,https://github.com/KhronosGroup/SPIRV-Tools/pull/3477,closed,580,0,12,15,0,15,0,0,[],2020-06-30 12:36:24+00:00,2020-08-03 15:45:25+00:00,2948941.0,"34 days, 3:09:01","[{'comment_id': 454619191, 'comment_body': 'Add similar comment that |target| must be valid.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454619841, 'comment_body': 'Add "", thus it is OK to use it again below.""', 'comment_created': datetime.datetime(2020, 7, 14, 20, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454623135, 'comment_body': 'global instruction or function parameter', 'comment_created': datetime.datetime(2020, 7, 14, 20, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454624329, 'comment_body': 'or function parameter', 'comment_created': datetime.datetime(2020, 7, 14, 20, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454627227, 'comment_body': 'IsMemoryBarrier isn\'t the right name here, because CopyMemory and Store are not memory barriers.\r\n\r\nI think ""ModifiesOrOrdersMemory"" would be a better name.  This captures Store, CopyMemory, etc., which modify memory, and memory barrier instructions, which order memory.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454630487, 'comment_body': 'Hmm, I think it would be better to enumerate the bad instructions, rather than all of the ones that are OK.\r\n\r\nThat said, I guess it is safer to include all of the definitely OK instructions here,\r\n\r\nBut then again, is this list of instructions exhaustive enough?\r\n\r\nHow did you come up with the list?', 'comment_created': datetime.datetime(2020, 7, 14, 20, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 455236029, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236117, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236527, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236616, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236744, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236996, 'comment_body': 'I think we should discuss this at the meeting.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 461548945, 'comment_body': 'Resolved at the meeting.', 'comment_created': datetime.datetime(2020, 7, 28, 12, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462318460, 'comment_body': 'I suggest a comment here explaining why we need to do this.', 'comment_created': datetime.datetime(2020, 7, 29, 13, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462437164, 'comment_body': 'Fixed in 783f53a.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'fc7fa52aec70dacd5fe5bc94d347ca5cd1e4a3e8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e8a2820671e19cb97cf33a78d3ad07c8ce4710', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e189a86b55de632cd7a2003aeefb8d47df09e92', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bd821e5364ac4c99b90ef2d7756d251cd47d13', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b0aad495cf059963196b16b3e485c3665f202da', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ea026ffeeccfedcd199a53df90a7135c0508d69', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ff2bf1950b70b2639671d67c6bd2ae6cb5eabd', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f74a704a6b4f52f214fd5dd45ac77e7cdc0b2873', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c20001e1b99e70d521fbdac8ea4ff9c74e88e6b3', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a58f89e90a37ededeae9f01b5fc2a757b921a627', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a604e50ef345e75a5d46ef9e89276dfa5700ce4', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dabba72a41b5278d266de34fc48f4a0a2ab680f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd230be6ae08ee66876d7c07037302ac09be14fc2', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6782db2146bbfd5943a344e448af3b8d69550666', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf9eea4c80994db8d9098733d4da12d259c3c83', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
442130115,spirv-fuzz: FuzzerPassPropagateInstructionsUp,Part of #3458.,True,3478,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3478,https://github.com/KhronosGroup/SPIRV-Tools/pull/3478,closed,1440,0,12,18,0,59,0,0,[],2020-06-30 15:58:58+00:00,2020-08-11 09:24:33+00:00,3605135.0,"41 days, 17:25:35","[{'comment_id': 462319714, 'comment_body': ""I guess you'll want to use a repeated pair instead as per the recent nondeterminism issue you fixed."", 'comment_created': datetime.datetime(2020, 7, 29, 13, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462320782, 'comment_body': 'Can you be explicit that these are for the duplicate versions of the instruction that will appear in each predecessor?', 'comment_created': datetime.datetime(2020, 7, 29, 13, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462321246, 'comment_body': 'Can you be explicit that this will duplicate the instruction as many times as needed, and that OpPhi will be used to get the value the original instruction would have generated?', 'comment_created': datetime.datetime(2020, 7, 29, 14, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462322788, 'comment_body': ""This actually just checks that the block has predecessors.  It might still be unreachable (e.g., if none of its predecessors is reachable).\r\n\r\nThat's probably OK for your transformation, so just update the comment."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462323314, 'comment_body': ""Isn't this captured by the previous check?  I'm assuming the first block doesn't have any predecessors.  (Unless the cfg analysis includes some sort of placeholder predecessor.)"", 'comment_created': datetime.datetime(2020, 7, 29, 14, 3, 23, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462341115, 'comment_body': ""I notice from the transformation that it's not necessarily the very first instruction; e.g. you skip OpPhis and other instructions.\r\n\r\nI think it would be nice to say that it is the first non-OpPhi instruction (and to change the code so that it doesn't skip over other instructions; we can use your new MoveInstructionDown transformation in the fuzzer pass to push other incompatible instructions out of the way."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462342396, 'comment_body': ""How about we right away support operations that read memory - i.e., load instructions - and just skip over instructions that modify memory, as well as barriers?\r\n\r\nI don't see any problem moving loads up into the previous block, skipping over OpPhis."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462343281, 'comment_body': ""I suggest changing this so that it returns the first non-OpPhi instruction if its opcode is supported, and nullptr otherwise.\r\n\r\nI.e., don't have it skip over other instructions.\r\n\r\nInstead, make the fuzzer pass take responsibility for pushing those instructions down if they're in the way, so that there really is a first instruction to be moved up."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462345143, 'comment_body': ""I would change the name to `IsApplicableToBlock` - it's typical to drop articles when writing variable and function names (though there are no hard rules.)"", 'comment_created': datetime.datetime(2020, 7, 29, 14, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462347601, 'comment_body': 'You can get rid of all of this if you only deal with the first non-OpPhi, and you can have the fuzzer pass do this work and issue sufficient ""move down"" instructions if there are otherwise immovable instructions in the way.', 'comment_created': datetime.datetime(2020, 7, 29, 14, 34, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462348422, 'comment_body': 'I would add here: ""That\'s OK, because by looking at the OpPhi instruction we can tell which of its operands we should use instead when we propagate the instruction into each predecessor.""', 'comment_created': datetime.datetime(2020, 7, 29, 14, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462351027, 'comment_body': ""I would explain this in a bit more detail: it's possible that the instruction that has been propagated might have been the only user of an OpPhi instruction, in which case we can delete that instruction."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 38, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462352033, 'comment_body': 'I would be inclined to up the upper bound to 70 here.', 'comment_created': datetime.datetime(2020, 7, 29, 14, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462352874, 'comment_body': ""It's here that I suggest you invoke MoveInstructionDown if needed so that there is a top instruction that can be propagated."", 'comment_created': datetime.datetime(2020, 7, 29, 14, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462439914, 'comment_body': ""Yes, I'll fix this when #3608 is merged."", 'comment_created': datetime.datetime(2020, 7, 29, 16, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462441440, 'comment_body': 'Fixed in 62b2c95.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462456316, 'comment_body': ""Adding support for memory instructions (including those that read memory) can be tricky. The tricky part comes from memory barriers. Consider the following example.\r\n```\r\n   [1:]\r\n /      \\\r\n|    [2: OpMemoryBarrier]\r\n \\      /\r\n [3: OpLoad]\r\n```\r\nIf we try to move `OpLoad` into `1` block, then (as far as my understanding goes) we might violate the programme's semantics since `OpLoad` can be executed before `OpMemoryBarrier`. Thus, I would prefer to defer the implementation of memory instructions. I might be missing something here, though. @afd, what do you think?"", 'comment_created': datetime.datetime(2020, 7, 29, 17, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462459093, 'comment_body': 'Fixed in 3048770.', 'comment_created': datetime.datetime(2020, 7, 29, 17, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462889235, 'comment_body': ""I've removed this check in 51c3f43. I'm not sure if the first block can't have any predecessors (e.g. if it's a loop header)."", 'comment_created': datetime.datetime(2020, 7, 30, 10, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462907849, 'comment_body': ""We've decided to add support for memory instructions in a separate PR."", 'comment_created': datetime.datetime(2020, 7, 30, 10, 38, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462928369, 'comment_body': ""There is a case when we are still unable to propagate the first instruction even though we can't move any other instruction down. Consider the following.\r\n```\r\n%1 = OpLabel\r\n%2 = OpA ...\r\n%3 = OpB %2\r\n%4 = OpC ...\r\n...\r\n```\r\nIn the example, `TransformationMoveInstructionDown` supports `OpA` and `OpC` and doesn't support `OpB`; `TransformationPropagateInstructionUp` supports `OpB` and `OpC` and doesn't support `OpA`; `%3` depends on `%2`.\r\n\r\nWe are unable to propagate `%2` since it's not supported by the transformation, and `%3` since it depends on `%2`.\r\nWe are also unable to move `%2` down since `%3` depends on it, and `%3` since it's not supported by the transformation.\r\nWe can propagate `%4` up but we won't be able to do it if we only consider the first non-OpPhi (and non-OpVariable) supported instruction in the block.\r\n\r\n@afd, what do you think? Maybe I'm overthinking it or missing something (I couldn't find anything wrong with the current approach)."", 'comment_created': datetime.datetime(2020, 7, 30, 11, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462935362, 'comment_body': 'Fixed in c74f0e3.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 37, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462936031, 'comment_body': 'Fixed comments in c74f0e3. See https://github.com/KhronosGroup/SPIRV-Tools/pull/3478#discussion_r462343281 on the discussion of the application of `TransformationMoveInstructionDown`.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462936264, 'comment_body': 'Fixed in c74f0e3.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462936926, 'comment_body': 'See https://github.com/KhronosGroup/SPIRV-Tools/pull/3478#discussion_r462343281 on the discussion of the application of `TransformationMoveInstructionDown`.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462937050, 'comment_body': 'Fixed in c74f0e3.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 40, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462937233, 'comment_body': 'Fixed in c74f0e3.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462937330, 'comment_body': 'Fixed in c74f0e3.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462937624, 'comment_body': 'See https://github.com/KhronosGroup/SPIRV-Tools/pull/3478#discussion_r462343281 on the discussion of the application of `TransformationMoveInstructionDown`.', 'comment_created': datetime.datetime(2020, 7, 30, 11, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462947910, 'comment_body': 'Yep, from the section 2.16 of SPIR-V spec:\r\n\r\n> The first block in a function definition is the entry point of that function and cannot be the target of any branch. (Note this means it will have no OpPhi instructions.)\r\n', 'comment_created': datetime.datetime(2020, 7, 30, 12, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 463170112, 'comment_body': ""Thanks - that makes sense.  In that case I'm fine with the current approach."", 'comment_created': datetime.datetime(2020, 7, 30, 17, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 463172022, 'comment_body': ""OK, I'm fine with the current approach given your good defence of it.  Can you comment the above code a little bit more to give the high level intuition of what it's looking for?"", 'comment_created': datetime.datetime(2020, 7, 30, 17, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 463174259, 'comment_body': 'Consider commenting the body of this method a little.', 'comment_created': datetime.datetime(2020, 7, 30, 17, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 463577155, 'comment_body': 'If it is not too painful, maybe keep an iterator to the instruction (instead of a pointer to the instruction) and then instead use `->Erase()`. ', 'comment_created': datetime.datetime(2020, 7, 31, 12, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 463578370, 'comment_body': 'Actually, ignore this, as it seems like you have to use delete below anyway. ', 'comment_created': datetime.datetime(2020, 7, 31, 12, 22, 15, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 463651778, 'comment_body': 'Using `KillInst` in dfd7889.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464329493, 'comment_body': 'Fixed in 4e30a81.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464329704, 'comment_body': 'Fixed in 4e30a81.', 'comment_created': datetime.datetime(2020, 8, 3, 10, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464489001, 'comment_body': 'Maybe ignore this as I suggest something different in Apply.\r\n\r\nTechnically, this should probably be moved to the header file and should start with ""Computes..."". If you want to have an implementation comment, I think it is recommended to place it in the function body. E.g. `// We will compute ... by ...`', 'comment_created': datetime.datetime(2020, 8, 3, 15, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464504267, 'comment_body': 'Maybe ignore this as I suggest something different in Apply.\r\n\r\nNit: could you add a comment saying something like: we only consider operands that are ids (and not e.g. int literals). \r\n\r\nI ask for this because I always confuse ""TYPE_ID"" as meaning a type id. ', 'comment_created': datetime.datetime(2020, 8, 3, 15, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464524642, 'comment_body': 'Could you add a comment clarifying that we only need to consider operands that are ids (as opposed to int literals).\r\n\r\nJust because I often see ""TYPE_ID"" and think ""type id""! ', 'comment_created': datetime.datetime(2020, 8, 3, 16, 30, 19, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464528089, 'comment_body': 'I think it would be simpler if we avoid computing the map (and thus, avoid having the `ComputeMappingFromOpPhiToResultId` function, which is quite hard to explain on its own) and, instead, check right here whether the operand is an OpPhi in the same block; I know we will be checking this somewhat redundantly for each predecessor, but the check is fast (I guess constant time). Then I guess there is a bit of fiddling to get the correct id from the predecessor id (maybe we have (or should have) a function for that?). But I still think it might be simpler, as the code is easier to understand within the context of this function.', 'comment_created': datetime.datetime(2020, 8, 3, 16, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464529707, 'comment_body': 'Actually, I think we should stop using this comment. It is a bit misleading. It should be something more like: ""We have changed the module so most analyzes are now invalid."" (and it should always end with ""."")', 'comment_created': datetime.datetime(2020, 8, 3, 16, 39, 34, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464537663, 'comment_body': ""Optional: so far, we have been doing if(..) continue. It might be nice to do the same here, and have the `return &instr;` as the last statement of the loop. And/or it might be nice to put the above, small for loop into a function, just so that we avoid the `valid` variable. But I don't have strong feelings on any of this. "", 'comment_created': datetime.datetime(2020, 8, 3, 16, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464540574, 'comment_body': 'This is more than I would normally ask but I think it might be helpful here. I believe you can add comments in the shader assembly via `; this is a comment` and add extra new lines. I think it might be useful to separate the blocks (add a new line before each OpLabel) and maybe highlight some important instructions with comments (such as those that have ""moved"" since the last chunk of assembly text) throughout. ', 'comment_created': datetime.datetime(2020, 8, 3, 16, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464541013, 'comment_body': 'Very nice!', 'comment_created': datetime.datetime(2020, 8, 3, 17, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464960680, 'comment_body': 'Fixed in 451bb82.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 42, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464960888, 'comment_body': 'I always get confused too :) Fixed in 451bb82.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464961041, 'comment_body': 'Fixed in 451bb82.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464961225, 'comment_body': 'Fixed in 451bb82.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464961342, 'comment_body': 'Fixed in 451bb82.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464961438, 'comment_body': 'Fixed in 451bb82.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464961523, 'comment_body': 'Fixed in 451bb82.', 'comment_created': datetime.datetime(2020, 8, 4, 10, 43, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464961595, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 8, 4, 10, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465086095, 'comment_body': 'Actually, I think we need to check that |block_id| is really a block (for when this is called from IsApplicable) otherwise we might get an assertion error below. This is also already asserted in Apply. ', 'comment_created': datetime.datetime(2020, 8, 4, 14, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465188248, 'comment_body': ""You are right, thanks for spotting this! I've used `ir_context->cfg()->block()` here previously but it turns out that `block` function uses `std::map::at` which throws an exception when id is invalid. Thus I had to use def use manager.\r\n\r\nI would leave assertions about this as they are since they make clear our assumptions about the code."", 'comment_created': datetime.datetime(2020, 8, 4, 16, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465188388, 'comment_body': 'Fixed in 7da0364.', 'comment_created': datetime.datetime(2020, 8, 4, 16, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465850741, 'comment_body': 'Yes the assert is good! I just meant that I know this should be checked in IsApplicable because I saw it being asserted in Apply :-) ', 'comment_created': datetime.datetime(2020, 8, 5, 16, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465876765, 'comment_body': 'Yes, sorry for the confusion. This method is called from the `IsApplicable`.', 'comment_created': datetime.datetime(2020, 8, 5, 17, 8, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '6e9c728bd8cbd90558b86c47c9ad5ce7c531c606', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd37826efc674bcd213a60c1c9d61132080291b8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17fc433b6fac711bbc6402b75ec2a6d66b0b4998', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '671e1e8ee582b2fc317cd5ee77b716ac988da054', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbc38bd709e192a86803799f83ec4f87294d1b6a', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd5227bd383edff798258bff343084fff2f2e68', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '435f278fd188d142c314f83b7f41c6829cae6cc0', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e65949376df0cd1c30271bdc6ac4f9019f64553', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '270489f2d2e4c432dc373eac6f2c5c4dd6a2efc8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2b2128967652452ab7bfdc6c0420f851473a611', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16dbf5155b0d77c540067e07a46bb9687ae69a34', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8dfb99731b2ff8831bbd376e51677b416298a06', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a49fb701c2887cec2017c832bc118276156e1e2', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '067d0625051d93ca05187066d5518f9ac2929fea', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab5a99daeddb26e88f3471a16e240c0f0910c885', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bf43becf131d9b3b40ef7594ccb47d82a296f69', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e41fc79bacd093c8831c3202670af7927139419d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '108d66834555a2c09a703092923645794c5f4b3f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
465463111,spirv-fuzz: TransformationWrapRegionInSelection,Fixes #3675.,True,3674,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3674,https://github.com/KhronosGroup/SPIRV-Tools/pull/3674,closed,775,1,14,11,1,27,0,0,[],2020-08-10 12:14:35+00:00,2020-10-01 08:54:11+00:00,4480776.0,"51 days, 20:39:36","[{'comment_id': 467902122, 'comment_body': 'Not a big deal, but it is common to name the fuzzer passes in the plural.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 467903511, 'comment_body': 'I guess would be better to use `header_block_candidate->IsLoopHeader()` here.\r\nThe `BasicBlock` class has the `IsLoopHeader` function.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 467909298, 'comment_body': 'Also use `header_block_candidate->IsLoopHeader()` here.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 467925248, 'comment_body': ""In this case, `IsLoopHeader` won't be enough since it doesn't check for `OpSelectionMerge` instruction."", 'comment_created': datetime.datetime(2020, 8, 10, 14, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 467928070, 'comment_body': 'Fixed in b755a59.', 'comment_created': datetime.datetime(2020, 8, 10, 14, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 467928218, 'comment_body': 'Fixed in b755a59.', 'comment_created': datetime.datetime(2020, 8, 10, 14, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 467936055, 'comment_body': ""You're right."", 'comment_created': datetime.datetime(2020, 8, 10, 14, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 478285832, 'comment_body': 'Did you look at FuzzerPassOutlineFunction?  The way this looks for a single-entry-single-exit region is kind of similar.  Is there scope for unifying them?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478286518, 'comment_body': 'Typo in this string I think.  (And minor but I would write ""should have"" rather than ""should\'ve"".)', 'comment_created': datetime.datetime(2020, 8, 27, 9, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478287075, 'comment_body': 'For diversity it would be nice if the transformation could specify whether the condition needs to be true or false, with the branch targets being set up correspondingly.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478289430, 'comment_body': 'I don\'t think the description is clear enough.  From reading it, I don\'t know quite what the transformation does.\r\n\r\nI\'m also not sure about the transformation name.\r\n\r\nI suggest naming it ""TransformationWrapRegionInSelection"".\r\n\r\nI would call the fields ""region_entry_block_id"", ""region_exit_block_id"".  I would also add another bool field called ""branch_condition"", so that the fuzzer pass can randomly decide whether the branch condition should be true or false (and set up the branch targets accordingly).\r\n\r\nFor the description I would say something like:\r\n\r\n""Takes a single-entry-single-exit region R, and turns it into either:\r\n\r\nif(true) { R }\r\n\r\nor\r\n\r\nif(false) { } else { R }\r\n\r\nThe entry block for R becomes a selection header and the exit block a selection merge.\r\n""\r\n\r\nI would then comment the fields as being ""The entry block for the region R"", and ""The exit block for the region R"".\r\n', 'comment_created': datetime.datetime(2020, 8, 27, 9, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478289924, 'comment_body': 'That said, it might well be not worth it.  The conditions on the region that you require here are a bit different from the conditions required for outlining into functions.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489255389, 'comment_body': 'Indeed, conditions are a bit different between the two transformations. I left it as it is.', 'comment_created': datetime.datetime(2020, 9, 16, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 489272324, 'comment_body': 'Fixed in 44c64b8.', 'comment_created': datetime.datetime(2020, 9, 16, 8, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 489272446, 'comment_body': 'Fixed in 44c64b8.', 'comment_created': datetime.datetime(2020, 9, 16, 8, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 489272654, 'comment_body': 'Fixed in 44c64b8.', 'comment_created': datetime.datetime(2020, 9, 16, 8, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 489437336, 'comment_body': 'It would be good to point out explicitly that the region R is *not* duplicated.  Perhaps this diagram would be instructive to show in the comment:\r\n\r\n```\r\n               entry\r\n entry          / \\\r\n  |             \\ / \r\nBlocks   -->   Blocks\r\n  |              |\r\n exit           exit\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 13, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489515330, 'comment_body': ""My inclination is to make the upper probability a bit lower, e.g. 70.  This transformation is cool but a little bit strange so I don't think we want to apply it too aggressively."", 'comment_created': datetime.datetime(2020, 9, 16, 15, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489519492, 'comment_body': ""#3790 will introduce:\r\n\r\n```\r\n  // Returns the second block in the pair obtained by splitting |block_id| just\r\n  // after the last OpPhi or OpVariable instruction in it. Assumes that the\r\n  // block is not a loop header.\r\n  opt::BasicBlock* SplitBlockAfterOpPhiOrOpVariable(uint32_t block_id);\r\n```\r\n\r\nCould that be used here (once it's merged)?"", 'comment_created': datetime.datetime(2020, 9, 16, 15, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489520520, 'comment_body': 'I think this is especially important to clarify now that we have DuplicateRegionWithSelection, which is in some sense very similar to this transformation except that it duplicates blocks (making it very different in practice).', 'comment_created': datetime.datetime(2020, 9, 16, 15, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489523125, 'comment_body': ""I wonder how much this has in common with some of the code in TransformationOutlineFunction, which is already quite similar to code in TransformationDuplicateRegionWithSelection, and for which we have a refactoring issue (#3785).\r\n\r\nI'm fine with *not* factoring out common code here if we believe the transformations have somewhat different requirements, but it's worth considering.  Perhaps you could look at the refactoring I do when I get round to addressing #3785 and then see if you think this could make use of the functionality that I extract.  (But no need to delay this PR for that.)"", 'comment_created': datetime.datetime(2020, 9, 16, 15, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 490154283, 'comment_body': ""Yes, I'll fix it when it's merged."", 'comment_created': datetime.datetime(2020, 9, 17, 10, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 491375685, 'comment_body': ""I agree that we need to refactor some common code out of those three transformations (TransformationOutlineFunction, TransformationDuplicateRegionWithSelection and this one). However, I'd prefer doing it in a separate PR (maybe as a part of #3785)."", 'comment_created': datetime.datetime(2020, 9, 19, 10, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 491376071, 'comment_body': 'BTW, I think some refactoring needs to be done with fuzzer passes as well.', 'comment_created': datetime.datetime(2020, 9, 19, 10, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 491376718, 'comment_body': 'Fixed in 2613291.', 'comment_created': datetime.datetime(2020, 9, 19, 10, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 491376827, 'comment_body': 'Fixed in 2613291.', 'comment_created': datetime.datetime(2020, 9, 19, 10, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 494122738, 'comment_body': 'Fixed in f4d8d40.', 'comment_created': datetime.datetime(2020, 9, 24, 8, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'fc45abb1f2691e0ac1511e33ac2eb81464f2d605', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdecc7bab7ba4a89d69b74a160225a51a1396a3c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e94e5fe34bbe8652ae79f07484cabc4791d098', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8eda28e8745b81569b3d97d3439d4ec689e8cc', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb95d8190904f9760cbeeab75bfa54a88815703c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db532b611cdd5c6f3f5ccc5d687f101f24f25a06', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79af9abc895bc276b7a33693524320d6bbee88eb', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02f2a6a0a642859e73081153a29177127cf506a4', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48ba06d9a0171be3d5d8a579ee2123c55350ecf5', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69257d870b4bf39c7ba45df9b6cbd0b59a9e3125', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46faf619b4ffd08ea2699078e78d8752a686a89f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
467392489,spirv-fuzz: TransformationPropagateInstructionDown,Fixes #3691.,True,3692,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3692,https://github.com/KhronosGroup/SPIRV-Tools/pull/3692,closed,2070,13,16,14,0,41,0,0,[],2020-08-13 13:40:05+00:00,2020-10-06 12:38:19+00:00,4661894.0,"53 days, 22:58:14","[{'comment_id': 478292959, 'comment_body': 'Should ""predecessors"" be ""successors"" here?  And why only some of them?  Because it\'s only needed in the ones where it may be used?  In that case I\'d say ""into the necessary successors"".', 'comment_created': datetime.datetime(2020, 8, 27, 9, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478293411, 'comment_body': 'Can you comment on how the instruction to be propagated will be decided upon given this block?  I suppose it is the final instruction in the block for which propagation is possible?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478294612, 'comment_body': ""I would reiterate that this may not always be needed.  Or, rather, explain when it is needed: presumably when the instruction is propagated into divergent blocks, and where its original result id is used after those blocks converge?\r\n\r\n(BTW: if that is indeed the use case, couldn't the original result id be used for the OpPhi?  Is a fresh id really required?)"", 'comment_created': datetime.datetime(2020, 8, 27, 9, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478296795, 'comment_body': 'If overflow ids are available, they can be used to provide fresh ids for successors that are not present in the map.\r\n\r\nCould you remark on that here, make sure the transformation uses overflow ids if it runs out of ids, and include at least one test that requires them?  (See the test I did for TransformationOutlineFunctions as an example.)', 'comment_created': datetime.datetime(2020, 8, 27, 9, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478297532, 'comment_body': 'Not for this PR, but I wonder whether we want to add a helper somewhere that will yield the reachable blocks of a function - perhaps a method of |Function|?  If you agree then could you open an issue?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478298034, 'comment_body': 'This could do with a bit of commentary.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478298859, 'comment_body': 'Nit: I think elsewhere we start each bullet with a capital letter.\r\n\r\nAdd a note on overflow ids if you do indeed use them.\r\n\r\nAlso in the ""every acceptable successor"" comment there is a weird line break.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478299370, 'comment_body': 'Grammar: after ""returns true iff"", you should use ""is"" or ""has"" rather than ""must be"" or ""must have"", etc.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478300209, 'comment_body': 'I think these comments would be even more valuable if you could back them up by a couple of small examples to illustrate cases that are applicable/acceptable and cases that are not.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478300519, 'comment_body': 'And is it the last instruction in the block that satisfies these properties?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498159159, 'comment_body': 'Created an issue #3874.', 'comment_created': datetime.datetime(2020, 10, 1, 11, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498216014, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498216109, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498217330, 'comment_body': 'The fresh id is not required when OpPhi is created. However, I thought it would be more consistent to always use fresh ids since the original id might not always be preserved either (e.g. when OpPhi is not created).', 'comment_created': datetime.datetime(2020, 10, 1, 12, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498217419, 'comment_body': 'Fixed comments in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498217580, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498217947, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498218084, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498219399, 'comment_body': 'Fixed in c4faca9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498219635, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498219855, 'comment_body': 'Not necessarily. Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498683372, 'comment_body': '""OpPhi instruction"" -> either ""an OpPhi instruction"" (if just one) or ""OpPhi instructions"" (if multiple could be required).', 'comment_created': datetime.datetime(2020, 10, 2, 8, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498683824, 'comment_body': 'Reading on, I guess it\'s ""an OpPhi instruction"".', 'comment_created': datetime.datetime(2020, 10, 2, 8, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498684639, 'comment_body': '""map.  We use overflow ids ..."" -> ""map, unless overflow ids are available.""', 'comment_created': datetime.datetime(2020, 10, 2, 8, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498688090, 'comment_body': '""propagate"" -> ""propagated""', 'comment_created': datetime.datetime(2020, 10, 2, 8, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498690593, 'comment_body': 'This is an excellent example!  More like this would be really good.', 'comment_created': datetime.datetime(2020, 10, 2, 8, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498691120, 'comment_body': 'Would you be able to give a small example here of a basic block with some instructions, such that the last 2-3 are not suitable, and explain why?', 'comment_created': datetime.datetime(2020, 10, 2, 8, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498693103, 'comment_body': ""A small example would really help here, showing where this OpPhi instruction would go.\r\n\r\nAlso, I think this could be more general (but not sure it's worth making it more general).\r\n\r\nSuppose we had a loop of this form:\r\n\r\n```\r\n     \r\n     |\r\n   HEADER <---\r\n     |        \\\r\n    BLOCK      |\r\n    /   \\      |\r\n   A    B---CONTINUE\r\n    \\  /\r\n    MERGE\r\n\r\nthen presumably if we propagated instructions from BLOCK to A and B we could Phi them together again at MERGE?"", 'comment_created': datetime.datetime(2020, 10, 2, 8, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498802102, 'comment_body': 'Fixed in b6fe77b.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498802175, 'comment_body': 'Fixed in b6fe77b.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498802223, 'comment_body': 'Fixed in b6fe77b.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498802403, 'comment_body': ""Thanks, I've added some more in b6fe77b."", 'comment_created': datetime.datetime(2020, 10, 2, 12, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498802567, 'comment_body': 'Fixed in b6fe77b.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498803851, 'comment_body': ""Yes, I think it's worthwhile to make it more general. This would allow us, for example, to add OpPhis in certain cases when we propagate an instruction from a back-edge block into a header block and the merge block is a successor of the back-edge block. Although, I think it's a somewhat unrealistic example. Nevertheless, the change is not hard.\r\n\r\nFixed in b6fe77b."", 'comment_created': datetime.datetime(2020, 10, 2, 12, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498911769, 'comment_body': '""unittests"" -> ""unit tests""', 'comment_created': datetime.datetime(2020, 10, 2, 16, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498912020, 'comment_body': '-> ""We cannot propagate OpBranch nor OpStore""', 'comment_created': datetime.datetime(2020, 10, 2, 16, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498915451, 'comment_body': 'Fixed in fc05d2c.', 'comment_created': datetime.datetime(2020, 10, 2, 16, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498915500, 'comment_body': 'Fixed in fc05d2c.', 'comment_created': datetime.datetime(2020, 10, 2, 16, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'c75f8b3e375ec760556ad2a06a678ad8e038a20e', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f667298118ddc53dac6f337e694998beeec4797f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f61d65e73b5868e012afcca62d8b15320d68c43', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06386a4ff08c33b7948b71f97a77f05bdf095352', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f77f3070778ef16e5aee931299e28cb5d331068', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c334bffe5e5aeffb92ece0b2136186c85b0cda', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5efb5d57032ebc43d95a73564d660e7c010aeaf9', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e1be1065bd88add21806dff50e0b1de9e6c475d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f26168f48269b71647bda37d5e9ed7b0cbfce88', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c3a68c3dd7284207547f3e425b0d3c75e64a0c1', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9760ecbc8447699691fcf141108e8564dc0fc89a', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1da9232e84318919eaadc0452843f54aa2189a93', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4671a803c048df7b2d57f5f5d30f9d5e29726b83', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6930f8b316f65b470f1eb057e0bb1484b33ebb65', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
471966563,spirv-fuzz: TransformationMutatePointer,Fixes #3624.,True,3737,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3737,https://github.com/KhronosGroup/SPIRV-Tools/pull/3737,closed,746,60,21,3,0,11,0,0,[],2020-08-22 09:47:37+00:00,2020-09-01 11:45:13+00:00,871056.0,"10 days, 1:57:36","[{'comment_id': 475100024, 'comment_body': 'Not a big deal, but it can be in singular form: `kChanceOfMutatingPointers` -> `kChanceOfMutatingPointer`\r\nThe same for above related names.', 'comment_created': datetime.datetime(2020, 8, 22, 15, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 475109594, 'comment_body': 'Fixed in bda3067.', 'comment_created': datetime.datetime(2020, 8, 22, 17, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 476309186, 'comment_body': '""Back-ups"" -> ""Backs up""', 'comment_created': datetime.datetime(2020, 8, 25, 9, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 476309471, 'comment_body': '-> ""Insturction to insert backup, mutation and restoration code before.', 'comment_created': datetime.datetime(2020, 8, 25, 9, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 476312176, 'comment_body': ""In the case of an array, hadn't we better check that we can create a constant of the array's element type?  (E.g., if it's an array of structs, what if we can't create a constant of the struct type?)\n\nWe don't have this problem with veccotrs and matrices since their element types are restricted."", 'comment_created': datetime.datetime(2020, 8, 25, 9, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 476312538, 'comment_body': 'P.S. this was probably already an issue with the code that you moved, but worth fixing it here I guess.', 'comment_created': datetime.datetime(2020, 8, 25, 9, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 476594713, 'comment_body': 'I would add a remark that a later transformation can change this to something more interesting.', 'comment_created': datetime.datetime(2020, 8, 25, 16, 52, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 480945880, 'comment_body': 'Fixed in 80d0b78.', 'comment_created': datetime.datetime(2020, 9, 1, 8, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 480946003, 'comment_body': 'Fixed in 80d0b78.', 'comment_created': datetime.datetime(2020, 9, 1, 8, 0, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 480951580, 'comment_body': ""Good point. Fixed in 80d0b78.\r\n\r\nWasn't able to find an issue, though."", 'comment_created': datetime.datetime(2020, 9, 1, 8, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 480951662, 'comment_body': 'Fixed in 80d0b78.', 'comment_created': datetime.datetime(2020, 9, 1, 8, 8, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '95ced664d273100e4358fd9f0743e3c9a1e480db', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44c92378546586ca6f8715a1156eba90817d5d3b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80d0b78d2e2edd7cfe56be9688bdb68934f4ac6a', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
435197883,spirv-opt: Fix return type,Fixes #3397.,True,3435,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3435,https://github.com/KhronosGroup/SPIRV-Tools/pull/3435,closed,10,0,1,1,0,0,0,0,[],2020-06-16 13:00:42+00:00,2020-06-17 14:10:07+00:00,90565.0,"1 day, 1:09:25",[],"[{'commit_sha': 'f87989ee20f258c17682bb7be9635fe1039b6a09', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
435213476,spirv-opt: Add RemoveParameter method,Fixes #3436.,True,3437,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3437,https://github.com/KhronosGroup/SPIRV-Tools/pull/3437,closed,12,0,1,1,0,0,0,0,[],2020-06-16 13:27:32+00:00,2020-06-17 14:15:51+00:00,89299.0,"1 day, 0:48:19",[],"[{'commit_sha': '7f44a66d96c34ec02f09d873e3805227ffae4ac8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
447773704,spirv-opt: Add support for OpLabel to dominator analysis,Fixes #3515.,True,3516,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3516,https://github.com/KhronosGroup/SPIRV-Tools/pull/3516,closed,136,3,2,3,0,6,0,0,[],2020-07-11 14:17:35+00:00,2020-07-15 11:59:36+00:00,337321.0,"3 days, 21:42:01","[{'comment_id': 453666928, 'comment_body': 'Technically unnecessary since iterating will never find it.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alan-baker', 'type': 'User'}, {'comment_id': 453731061, 'comment_body': 'Fixed in d1c377e.', 'comment_created': datetime.datetime(2020, 7, 13, 15, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 453745504, 'comment_body': 'So it looks like post-dominators were broken for instructions in the same block.\r\n\r\nThis can be simplified to:\r\n```\r\nInstruction *current_inst = a;\r\nInstruction *other_inst = b;\r\nif (tree_.IsPostDominator())\r\n  std::swap(current_inst, other_inst);\r\n\r\nwhile ((current_inst = current_inst->NextNode()))) {\r\n  if (current_inst == other_inst)\r\n    return true;\r\n}\r\n\r\nreturn false;\r\n```', 'comment_created': datetime.datetime(2020, 7, 13, 15, 42, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alan-baker', 'type': 'User'}, {'comment_id': 453751776, 'comment_body': 'Indeed, fixed in a076b9d.', 'comment_created': datetime.datetime(2020, 7, 13, 15, 51, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455064464, 'comment_body': ""@s-perron I wonder if labels should be stored in the instruction list?  I don't recall why they're not included."", 'comment_created': datetime.datetime(2020, 7, 15, 13, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dnovillo', 'type': 'User'}, {'comment_id': 457607046, 'comment_body': 'We did not make that decision.  It was that way when we join this project, and we did not change it.  It think it is separate just to make it easier to make sure that we do not accidentally get multiple OpLabel instructions per block and that it is at the start of the block.', 'comment_created': datetime.datetime(2020, 7, 20, 18, 25, 28, tzinfo=datetime.timezone.utc), 'commenter': 's-perron', 'type': 'User'}]","[{'commit_sha': '01c5fbeaafb250889c58df4a13d7d3b11470b4ad', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c377e63154678ae325d3b01e9432c384b5d970', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a076b9d71a7ddd6e1f56e39244b3494f811e5650', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
466001554,spirv-opt: Fix off-by-1 error,Fixes #3631.,True,3680,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3680,https://github.com/KhronosGroup/SPIRV-Tools/pull/3680,closed,13,2,2,1,1,0,0,0,[],2020-08-11 10:00:40+00:00,2020-08-13 13:09:58+00:00,184158.0,"2 days, 3:09:18",[],"[{'commit_sha': '7e6c9344567e5c3439e981d69c20b659cbdacc0d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
466076452,spirv-opt: Add support for OpConstantNull to loop unroller,Fixes #3634.,True,3683,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3683,https://github.com/KhronosGroup/SPIRV-Tools/pull/3683,closed,162,17,2,1,1,0,0,0,[],2020-08-11 12:35:21+00:00,2020-08-12 17:00:42+00:00,102321.0,"1 day, 4:25:21",[],"[{'commit_sha': 'f3c15b87bc38d4256d58f027f29aa0a6c6f22382', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
386535765,spirv-fuzz: Support OpPhi when adding dead break and continue,Fixes #2856.,True,3225,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3225,https://github.com/KhronosGroup/SPIRV-Tools/pull/3225,closed,73,15,3,6,1,32,0,0,[],2020-03-11 07:55:13+00:00,2020-03-12 12:40:38+00:00,103525.0,"1 day, 4:45:25","[{'comment_id': 390798856, 'comment_body': 'I removed these since we have already checked for `nullptr` above.', 'comment_created': datetime.datetime(2020, 3, 11, 8, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 390799029, 'comment_body': 'I removed these since we have already checked for `nullptr` above.', 'comment_created': datetime.datetime(2020, 3, 11, 8, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391525629, 'comment_body': 'If maybe_merge_id is non-zero, there is guaranteed to be a merge block.\r\n\r\nSo either replace this with an assertion that merge_block is not null (with a comment via && ""...""), or just do: merge_blocks.push_back(fuzzerutil::MaybeFindBlock(...))', 'comment_created': datetime.datetime(2020, 3, 12, 10, 25, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391526679, 'comment_body': 'I would prefix this with a comment saying that this will be populated with ids available at the branch point that can be used to update OpPhi instructions at the branch target.', 'comment_created': datetime.datetime(2020, 3, 12, 10, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391527587, 'comment_body': ""It's great that you spotted the fact that there's nothing to do if the merge block is already a successor!  I think that's subtle and deserves a brief comment explaining that even if the merge block starts with OpPhi instructions, there must already exist operands to those instructions that cater for the current block."", 'comment_created': datetime.datetime(2020, 3, 12, 10, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391528575, 'comment_body': 'Please add a:\r\n\r\n// TODO(https://github.com/KhronosGroup/SPIRV-Tools/issues/3177) If we have a way to communicate to the fact manager that a specific id use is irrelevant and could be replaced with something else, we should add such a fact about the zero provided as an OpPhi operand', 'comment_created': datetime.datetime(2020, 3, 12, 10, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391528893, 'comment_body': '... but please include the full URL of the issue; GitHub seems to have collapsed it in my comment :)', 'comment_created': datetime.datetime(2020, 3, 12, 10, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391529985, 'comment_body': 'Nice - this is exactly what I was suggesting above :)', 'comment_created': datetime.datetime(2020, 3, 12, 10, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391531494, 'comment_body': ""Nit: I like to use up as much of the 80-char whitespace as possible with comments (unless there's a reason for a line break), so I would change this to:\r\n\r\n      // This transformation is not applicable if current block is not inside a\r\n      // loop.\r\n"", 'comment_created': datetime.datetime(2020, 3, 12, 10, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391531778, 'comment_body': 'Nit: can you make this a single-line comment?', 'comment_created': datetime.datetime(2020, 3, 12, 10, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391532560, 'comment_body': 'Nice; an analogous comment is what I was looking for in the case of break.', 'comment_created': datetime.datetime(2020, 3, 12, 10, 38, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391532961, 'comment_body': 'Please add the TODO comment referencing issue #3177 here as well.', 'comment_created': datetime.datetime(2020, 3, 12, 10, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391534612, 'comment_body': 'I suggest you put these back: an assertion should never fail, so once a piece of code is in good shape all assertions are in some sense redundant; but they are there to defend against mistakes being introduced when code changes.  E.g. what if someone accidentally removed the null check above?  It would be nice for these assertions to fail.', 'comment_created': datetime.datetime(2020, 3, 12, 10, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391538202, 'comment_body': ""We should keep this as a conditional.\r\n\r\nThe thing is that while the fuzzer is in control of which transformations get created, and will never create a transformation with invalid phi ids, the *shrinker* randomly removes transformations.\r\n\r\nConsider the situation where we had a merge block that started with an OpPhi, but then we applied a transformation to avoid this OpPhi by storing to and loading from a fresh variable - call this T1.  Then we apply a transformation to add a dead break to the loop.  It won't need any phi ids as the OpPhi is gone - call this T2.\r\n\r\nThen during shrinking we try removing transformation T1, so that we try to apply T2 without having applied T1.  In that case we want T2 to turn out to be *inapplicable* because it does not have phi ids, but we do not want the program to abort.\r\n\r\nDoes that make sense?"", 'comment_created': datetime.datetime(2020, 3, 12, 10, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391538574, 'comment_body': 'Again, I would keep these defensive assertions.', 'comment_created': datetime.datetime(2020, 3, 12, 10, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391538693, 'comment_body': 'Again, this needs  to be an if still.', 'comment_created': datetime.datetime(2020, 3, 12, 10, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391538893, 'comment_body': 'Good catch!', 'comment_created': datetime.datetime(2020, 3, 12, 10, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391539194, 'comment_body': ""Given my remarks above, can you change these back?\r\n\r\nI didn't know about EXPECT_DEATH though - very cool!"", 'comment_created': datetime.datetime(2020, 3, 12, 10, 50, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 391546178, 'comment_body': 'Yeah, I actually had to deal with this case ;) `PhiIdsOkForNewEdge` will return false if the vector of ids is not empty, which will cause an assertion to fail.\r\nhttps://github.com/KhronosGroup/SPIRV-Tools/blob/1af1df3b23cf7439ead64c95220c3616d81a3713/source/fuzz/fuzzer_util.cpp#L58', 'comment_created': datetime.datetime(2020, 3, 12, 11, 3, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391554346, 'comment_body': 'Makes perfect sense! Basically, we have to make sure that if some two transformations depend on each other (like T2 depends on T1) and if we remove one of them during the shrinking process, the module will remain in a valid state (either with the second transformation or not)', 'comment_created': datetime.datetime(2020, 3, 12, 11, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391559651, 'comment_body': 'Fixed in 2a0b8d1.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391559975, 'comment_body': 'Fixed in 2a0b8d1.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391560152, 'comment_body': 'Fixed in 2a0b8d1.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 32, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391560686, 'comment_body': 'Fixed in 2a0b8d1.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391560823, 'comment_body': 'Fixed in 2a0b8d1.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391561099, 'comment_body': 'Fixed in a04b185.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391561280, 'comment_body': 'Fixed in a04b185.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 34, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391561545, 'comment_body': 'Fixed in a04b185.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391561714, 'comment_body': 'Fixed in a04b185.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391561871, 'comment_body': 'Fixed in a04b185.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 36, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391561955, 'comment_body': 'Fixed in a04b185.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 391562074, 'comment_body': 'Fixed in a04b185.', 'comment_created': datetime.datetime(2020, 3, 12, 11, 36, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'c62780fbe0137e4b87d6d7cd05a7c4998c2f4e97', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '728edccdbfc60e334140926c49df4d37b2f5d200', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59f7f14fc9ddf77bf2590935512e940878dcaffd', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9554eb4731d4099f23c75c35cfcd814b9e76c050', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a0b8d1c361fd4a4e19059d49d89f12883c4cb53', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a04b1858ca8511aa9c2d5444e0b1898dd8716fd6', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
385289514,spirv-fuzz: Remove duplicated functionality,Fixes #3218.,True,3220,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3220,https://github.com/KhronosGroup/SPIRV-Tools/pull/3220,closed,3,19,4,1,0,0,0,0,[],2020-03-08 17:06:13+00:00,2020-03-09 16:17:44+00:00,83491.0,23:11:31,[],"[{'commit_sha': '047aa0547eaf9a84cbdd55615939a9edc4ebdf51', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
389992504,Add a test for issue #3237,Test for #3237.,True,3238,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3238,https://github.com/KhronosGroup/SPIRV-Tools/pull/3238,closed,125,1,1,4,11,6,0,0,[],2020-03-17 18:02:34+00:00,2020-06-10 13:13:41+00:00,7326667.0,"84 days, 19:11:07","[{'comment_id': 393873319, 'comment_body': ""This looks like undefined behaviour. `std::unique_ptr::get` returns a pointer to the data that `unique_ptr` manages. Then `unique_ptr` gets deallocated since it's an rvalue and we are left with a dangling pointer. Solution is to use `unique_ptr::release` or simply not to use `unique_ptr` at all ;)"", 'comment_created': datetime.datetime(2020, 3, 17, 18, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 424936874, 'comment_body': 'Apparently, issue #3237 has been fixed but this test still fails here.', 'comment_created': datetime.datetime(2020, 5, 14, 7, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 425047012, 'comment_body': 'Seems like the problem was with invalid SPIR-V environment version.', 'comment_created': datetime.datetime(2020, 5, 14, 10, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 425735889, 'comment_body': 'Please remove these comment lines from the SPIR-V.', 'comment_created': datetime.datetime(2020, 5, 15, 11, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425736105, 'comment_body': 'Good catch - thanks for fixing.', 'comment_created': datetime.datetime(2020, 5, 15, 11, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425803841, 'comment_body': 'Fixed in 29d7d77.', 'comment_created': datetime.datetime(2020, 5, 15, 13, 31, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '07db3f4b70af79dfb72a29fbbcfb35bdb4adb93e', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68c58743e16e1a0dc086ec3b2c2da1ced5543ebe', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52b1babafe1f8b0c88c5e260d9bcada0b3c9a958', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e842c9f4922834a200ad3555adc457814fd13f8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
417539354,spirv-fuzz: Remove FuzzerPassAddUsefulConstructs,Fixes #3318.,True,3341,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3341,https://github.com/KhronosGroup/SPIRV-Tools/pull/3341,closed,131,705,14,7,0,15,0,0,[],2020-05-13 18:34:25+00:00,2020-05-19 14:54:56+00:00,505231.0,"5 days, 20:20:31","[{'comment_id': 425198617, 'comment_body': 'Let\'s get rid of the ""else"" branch and have this code after the if statement.', 'comment_created': datetime.datetime(2020, 5, 14, 14, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425199777, 'comment_body': ""Rather than saying that the function returns 0 if |type_id| is not scalar or boolean, say that |type_id| is required to be scalar or boolean.  Saying that 0 will be returned otherwise suggests that it's OK to call this function with some other type id, but actually we have an assertion in the implementation that will fail if a different type is passed."", 'comment_created': datetime.datetime(2020, 5, 14, 14, 53, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425202164, 'comment_body': 'Add a brief comment to explain that we make sure the module has the required boolean constant, in case the transformation is later applied.', 'comment_created': datetime.datetime(2020, 5, 14, 14, 56, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425203132, 'comment_body': 'Again I could go for a ""Make sure the ..."" comment.', 'comment_created': datetime.datetime(2020, 5, 14, 14, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425733809, 'comment_body': ""I'm unsure about the motivation for adding a new method to fuzzerutil for this purpose.  It appears that this is the only place from which we call the new method.\r\n\r\nCan we discuss that a bit here?"", 'comment_created': datetime.datetime(2020, 5, 15, 11, 16, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425734572, 'comment_body': 'Typo: OpConstant', 'comment_created': datetime.datetime(2020, 5, 15, 11, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425734963, 'comment_body': ""As mentioned above, I'm not convinced by the need for this method in here (feel free to convince me)."", 'comment_created': datetime.datetime(2020, 5, 15, 11, 19, 46, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425812071, 'comment_body': 'Fixed in f7a3195.', 'comment_created': datetime.datetime(2020, 5, 15, 13, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 425812283, 'comment_body': 'Fixed in f7a3195.', 'comment_created': datetime.datetime(2020, 5, 15, 13, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 425812463, 'comment_body': 'Fixed in f7a3195.', 'comment_created': datetime.datetime(2020, 5, 15, 13, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 425812553, 'comment_body': 'Fixed in f7a3195.', 'comment_created': datetime.datetime(2020, 5, 15, 13, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 425812678, 'comment_body': 'Fixed in f7a3195.', 'comment_created': datetime.datetime(2020, 5, 15, 13, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 425814040, 'comment_body': ""I actually have no particular reason why I placed it in `fuzzerutil`. I've just thought that it may be useful to someone else. We can make it a private method in `FuzzerPassObfuscateConstants`."", 'comment_created': datetime.datetime(2020, 5, 15, 13, 48, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 425843936, 'comment_body': '@Vasniktel That sounds good to me - please go ahead and we can move it if we do later find another customer for it.', 'comment_created': datetime.datetime(2020, 5, 15, 14, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 425859206, 'comment_body': 'Fixed in 3a7f116.', 'comment_created': datetime.datetime(2020, 5, 15, 14, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '0b1c8374aa567be03714d7c24cffed66a8dc1731', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeb1644151d25f46627f9ddc1ca938257f36510d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51a19c4a1661f6c9f5ca52c837aee768e5390b37', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bd7983de9fb40d06150141ede8bec352c8940c8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2378ea5bf9e633d0fbad70d263543f1f09104514', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7a3195ecd33655bd63de6603f547a232fe96d7c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a7f1167ee7b4ccb296e2cb1ac7b68a9e0fa8c2d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
418593527,spirv-fuzz: Add support for StorageBuffer,Fixes #3347.,True,3348,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3348,https://github.com/KhronosGroup/SPIRV-Tools/pull/3348,closed,1,0,1,1,0,0,0,0,[],2020-05-15 13:28:58+00:00,2020-05-19 14:54:06+00:00,350708.0,"4 days, 1:25:08",[],"[{'commit_sha': '29ae0c41ca559b2777869a3fb355dc91458d3c0d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
421511377,spirv-fuzz: Add support for OpSpecConstant*,Fixes #3371.,True,3373,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3373,https://github.com/KhronosGroup/SPIRV-Tools/pull/3373,closed,300,2,7,7,2,13,0,0,[],2020-05-21 18:36:12+00:00,2020-06-10 00:01:16+00:00,1661104.0,"19 days, 5:25:04","[{'comment_id': 430300686, 'comment_body': 'I believe you should assign the result of this call to `new_result_id`, so that the OpSpecConstantOp gets remapped to the id of the zero constant.', 'comment_created': datetime.datetime(2020, 5, 26, 10, 6, 19, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 430639367, 'comment_body': 'Fixed in e31131c.', 'comment_created': datetime.datetime(2020, 5, 26, 19, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 430641689, 'comment_body': 'Not sure whether we should check operands here. They definitely should have a valid type since the module has passed the validation test. We could check that their values correspond to the ones from the donor module.', 'comment_created': datetime.datetime(2020, 5, 26, 19, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 430645299, 'comment_body': ""Not sure how we should check `OpSpecConstantOp`. Parser always fails when I try to include it to the donor module. It seems I'm missing something here."", 'comment_created': datetime.datetime(2020, 5, 26, 19, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 430869810, 'comment_body': 'Here is an example that uses OpConstantOp:\r\n\r\n```\r\n               OpCapability Shader\r\n          %1 = OpExtInstImport ""GLSL.std.450""\r\n               OpMemoryModel Logical GLSL450\r\n               OpEntryPoint Fragment %4 ""main""\r\n               OpExecutionMode %4 OriginUpperLeft\r\n               OpSource ESSL 320\r\n               OpName %4 ""main""\r\n        %100 = OpTypeInt 32 0\r\n        %101 = OpSpecConstant %100 1\r\n        %102 = OpSpecConstant %100 2\r\n        %103 = OpSpecConstantOp %102 IAdd %101 %102\r\n          %2 = OpTypeVoid\r\n          %3 = OpTypeFunction %2\r\n          %4 = OpFunction %2 None %3\r\n          %5 = OpLabel\r\n               OpReturn\r\n               OpFunctionEnd\r\n```\r\n\r\nIt turns out that you just put e.g. IAdd, not OpIAdd or 128, for the operand literal.  I figured this out by searching for OpSpecConsantOp in the code base and found something in assembly_builder_test.cpp that uses it.', 'comment_created': datetime.datetime(2020, 5, 27, 5, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 430870982, 'comment_body': ""I think it would be a bit simpler to use IsEqual to compare the transformed module with a string.  See lines 360 or 455 of the file.  It's easier to write such tests and more importantly they are easier to maintain when things change.  Although the approach you are going for is in some sense more thorough, maintaining this kind of test will require a lot of work."", 'comment_created': datetime.datetime(2020, 5, 27, 5, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 430871267, 'comment_body': 'See my comment in the main conversation on this.', 'comment_created': datetime.datetime(2020, 5, 27, 5, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 430872782, 'comment_body': ""I have done some reading about OpSpecConstantOp, and actually it is fine for an OpSpecConstantOp to consume id operands that are instances of an OpConstant*, not necessarily OpSpecConstant*.\r\n\r\nThat means that e.g. if we had:\r\n\r\n```\r\n%a = OpSpecConstantOp %t opcode %b %c\r\n```\r\n\r\nand if `original_id_to_donated_id` has mapped `%t' to `%t_', `%b' to `%b_' and `%c' to `%c_' already then we could turn the instruction into:\r\n\r\n```\r\n%fresh_id = OpSpecConstantOp %t_ opcode %b_ %c_\r\n```\r\n\r\nKeeping OpSpecConstantOp would actually be more interesting than using zero.\r\n\r\nWould you be able to implement this instead (and ensure that a test covers it)?"", 'comment_created': datetime.datetime(2020, 5, 27, 5, 54, 46, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 434442931, 'comment_body': 'Fixed in 4c15ee7.', 'comment_created': datetime.datetime(2020, 6, 3, 9, 44, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434443347, 'comment_body': 'Fixed in 1ab2f64.', 'comment_created': datetime.datetime(2020, 6, 3, 9, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 434443493, 'comment_body': 'Fixed in 1ab2f64.', 'comment_created': datetime.datetime(2020, 6, 3, 9, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 435975090, 'comment_body': 'I would do this as a ternary:\r\n\r\nauto data = operand.type == SPV_OPERAND_TYPE_ID ? ... : ...;\r\n\r\nUp to you, though.', 'comment_created': datetime.datetime(2020, 6, 5, 14, 52, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 436030010, 'comment_body': 'Fixed in d4ad88f.', 'comment_created': datetime.datetime(2020, 6, 5, 16, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'cdb1af2abf87a7a9414ff62d9d0f1bb0d4c3f84e', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20965e26052b4020d51fcd964c86ff8e718ef703', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '547e3882238d93816be7da9a9dda739a950b4de5', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60b74f16dbc4728de74e9c1e3fe7b073b1ac376', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e8ab2d2dcb51b18e4f550b853c36bb9f2ae5f6f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78eb3459b866ff98a4837e1287a2e9e35093958c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4ad88ffbf061af6a67ed9417d1782b0e701642f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
427144990,spirv-fuzz: Fix regression in shrinker test and replayer test,Fixes #3392.,True,3396,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3396,https://github.com/KhronosGroup/SPIRV-Tools/pull/3396,closed,50,38,6,1,0,0,0,0,[],2020-06-03 11:38:04+00:00,2020-06-05 11:28:08+00:00,172204.0,"1 day, 23:50:04",[],"[{'commit_sha': 'd7b5ea98c9420db0a75b27ef3152c2ed11c2dd1b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
428391638,spirv-fuzz: Fix replayer bug,Fixes #3395.,True,3401,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3401,https://github.com/KhronosGroup/SPIRV-Tools/pull/3401,closed,4,2,1,1,1,0,0,0,[],2020-06-05 11:25:28+00:00,2020-06-05 13:34:40+00:00,7752.0,2:09:12,[],"[{'commit_sha': '140aa7e7457a6ab111c1574b92f7afac900e59c2', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
432429059,spirv-fuzz: Refactor variable creation,Fixes #3413.,True,3414,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3414,https://github.com/KhronosGroup/SPIRV-Tools/pull/3414,closed,221,65,10,4,0,20,0,0,[],2020-06-10 12:42:51+00:00,2020-06-19 15:40:19+00:00,788248.0,"9 days, 2:57:28","[{'comment_id': 438120661, 'comment_body': 'If the parameter can be a const pointer then I would prefer to use a const reference.  Google style recommends passing input parameters as const-ref.  Would be curious about your opinion on that here, @Vasniktel - and could be done in a separate PR if we want to change it.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438120769, 'comment_body': 'Same remark here.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438123196, 'comment_body': 'Add a comment to say that this is to keep release-mode compilers happy.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438125562, 'comment_body': 'Similar.', 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438125862, 'comment_body': 'Const ref?', 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438125949, 'comment_body': 'Const ref?', 'comment_created': datetime.datetime(2020, 6, 10, 13, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 438151823, 'comment_body': ""Yes, definitely. I'll make a PR for that."", 'comment_created': datetime.datetime(2020, 6, 10, 14, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438152219, 'comment_body': 'See https://github.com/KhronosGroup/SPIRV-Tools/pull/3414#discussion_r438151823.', 'comment_created': datetime.datetime(2020, 6, 10, 14, 10, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438152507, 'comment_body': 'See https://github.com/KhronosGroup/SPIRV-Tools/pull/3414#discussion_r438151823.', 'comment_created': datetime.datetime(2020, 6, 10, 14, 10, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438152716, 'comment_body': 'See https://github.com/KhronosGroup/SPIRV-Tools/pull/3414#discussion_r438151823.', 'comment_created': datetime.datetime(2020, 6, 10, 14, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438156847, 'comment_body': 'The issue with unused variables started to pop out frequently. Maybe we can use some compiler magic like `__attribute__((unused))` with macros to handle it. @afd, what do you think?', 'comment_created': datetime.datetime(2020, 6, 10, 14, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438653362, 'comment_body': 'Fixed in f6a874b.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 18, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438653456, 'comment_body': 'Fixed in f6a874b.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438653645, 'comment_body': 'Fixed in f6a874b.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438653738, 'comment_body': 'Fixed in f6a874b.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 18, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438653820, 'comment_body': 'Fixed in f6a874b.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438653927, 'comment_body': 'Fixed in f6a874b.', 'comment_created': datetime.datetime(2020, 6, 11, 9, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 438669979, 'comment_body': ""I'd be interested to chat more about that - let's do so offline."", 'comment_created': datetime.datetime(2020, 6, 11, 9, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439674734, 'comment_body': ""MSVC says:\r\n\r\n```\r\nerror C2398: Element '1': conversion from 'SpvStorageClass' to 'uint32_t' requires a narrowing conversion\r\n```\r\n\r\nI guess you should do static_cast<uint32_t>(storage_class)."", 'comment_created': datetime.datetime(2020, 6, 12, 23, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 439715828, 'comment_body': 'Fixed in 03d34d4.', 'comment_created': datetime.datetime(2020, 6, 13, 6, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'e5fe574e316c58ba4c34f9f92356fd5ca6144df3', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14bb05d0035b36bb03ac28be9f57767869aed193', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03d34d4e44f50ff86f18450719d83461273b2a14', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8faa20009f4281e6a470877c64a2d5478b50375', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
433503996,spirv-fuzz: Fix memory operand access,Fixes #3426.,True,3427,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3427,https://github.com/KhronosGroup/SPIRV-Tools/pull/3427,closed,169,88,2,1,0,0,0,0,[],2020-06-12 07:05:04+00:00,2020-06-12 23:03:26+00:00,57502.0,15:58:22,[],"[{'commit_sha': 'f3c1669603dca7dc956e6b82864f0479e29489e8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
437550773,spirv-fuzz: Add GetParameters,Adds a `GetParameters` function to `fuzzerutil`.,True,3454,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3454,https://github.com/KhronosGroup/SPIRV-Tools/pull/3454,closed,17,0,2,2,0,2,0,0,[],2020-06-21 14:12:35+00:00,2020-06-23 15:41:46+00:00,178151.0,"2 days, 1:29:11","[{'comment_id': 444190403, 'comment_body': 'The comment suggests that this just returns a single instruction, when really it returns *all* such instructions - please update.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 444204583, 'comment_body': 'Yep, forgot an `s`. Fixed in d69e23d.', 'comment_created': datetime.datetime(2020, 6, 23, 13, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '9d18bae8188f84d0153c370e6b4e3cfa148cb5cf', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07804eca5987581b2e2014e941e0a5f12ea89b8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
440651265,spirv-fuzz: Add one parameter at a time,"Fixes #3467.
Fixes #3468.",True,3469,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3469,https://github.com/KhronosGroup/SPIRV-Tools/pull/3469,closed,481,634,18,6,0,17,0,0,[],2020-06-26 15:32:49+00:00,2020-06-30 14:20:28+00:00,341259.0,"3 days, 22:47:39","[{'comment_id': 447556755, 'comment_body': ""Ah - I see that you've changed the fuzzer pass to only add a single parameter.\r\n\r\nWhat I had meant was that the *transformation* should just add one parameter, but that the fuzzer pass would still add potentially many parameters by applying multiple transformations.\r\n\r\nCan you change the fuzzer pass back so that it still queries the fuzzer context to decide how many parameters to add, and then loops N times, each time deciding on the type of the parameter and applying a transformation?"", 'comment_created': datetime.datetime(2020, 6, 30, 9, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447583651, 'comment_body': 'Fixed in 858e2ce.', 'comment_created': datetime.datetime(2020, 6, 30, 10, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 447635189, 'comment_body': 'Please avoid very short variable names except in the case of loop variables.  I would prefer ""num_new_parameters"" here.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 13, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447636218, 'comment_body': 'The comment needs to be fixed to make it clear that many parameters are added - can revert to something similar to the old comment.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447636777, 'comment_body': 'Thanks for fixing this!', 'comment_created': datetime.datetime(2020, 6, 30, 12, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447637951, 'comment_body': 'Unless code is performance-critical I prefer to avoid the optimization of introducing an additional variable to capture the result of a function call.  ""Premature optimization is the root of all evil"" and all that.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 18, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447639515, 'comment_body': 'I presume this might not be used if the new function type already exists - worth commenting on.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447639694, 'comment_body': 'Elaborate briefly on why it might not be used (due to the new function type already existing).', 'comment_created': datetime.datetime(2020, 6, 30, 12, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447640518, 'comment_body': ""I don't see `max_element` declared anywhere; can you clarify this comment?"", 'comment_created': datetime.datetime(2020, 6, 30, 12, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447641089, 'comment_body': 'This is really nicely done!', 'comment_created': datetime.datetime(2020, 6, 30, 12, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447641522, 'comment_body': 'Good catch.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 447661805, 'comment_body': 'Fixed in 93b8e3a.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 447661937, 'comment_body': 'Fixed in 93b8e3a.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 447662193, 'comment_body': 'Fixed in 93b8e3a.', 'comment_created': datetime.datetime(2020, 6, 30, 12, 59, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 447662340, 'comment_body': 'Fixed in 93b8e3a.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 447662479, 'comment_body': 'Fixed in 93b8e3a.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 0, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 447662630, 'comment_body': 'This is an old comment. Fixed in 93b8e3a.', 'comment_created': datetime.datetime(2020, 6, 30, 13, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '84ec5bc144c34b4707236980aefd64ba209498cf', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b91566321fac7ab83c2beef7f270ad65167dc5c6', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61ec178c72fee47405f235b97af19b03ffb56a8b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '858e2ced81b6c3cbd0e8720fd8596717054ca0d3', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93b8e3a224ac08be8aa959da617981632b57c865', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '317abe0186fc309c21e8e37fd4980c71bd985e2c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
441026921,spirv-fuzz: Add support for OpConvert to TransformationEquationInstruction,Part of #3440.,True,3472,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3472,https://github.com/KhronosGroup/SPIRV-Tools/pull/3472,closed,616,38,9,13,4,35,0,0,[],2020-06-28 09:05:47+00:00,2020-07-16 10:59:06+00:00,1561999.0,"18 days, 1:53:19","[{'comment_id': 449650991, 'comment_body': 'I think you should revert the comment, since there is only one fresh id once more.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449651264, 'comment_body': 'Weird - did clang-format require this change?', 'comment_created': datetime.datetime(2020, 7, 3, 16, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449651353, 'comment_body': 'Revert back to singular as there is only one of them.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449652968, 'comment_body': ""I am not sure that the sign needs to correspond to the instruction, actually.\r\n\r\nSPIR-V is really relaxed about sign.\r\n\r\nPlease check whether it's in fact legal to apply OpConvertSToF to an unsigned scalar/vector.  If it is then it would be better to let the transformation (and fuzzer pass) be more relaxed here."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449653771, 'comment_body': ""Again, I think it's OK for ConvertFToU to have a signed return type.  Seems weird, I know, but the point is that the instruction converts to an unsigned bit pattern - but that can be stored in a signed or unsigned id.\r\n\r\nIf this is true, it would be better to be more liberal here and do MaybeGetIntegerType with the expected sign, and then with the other sign - and only give up if neither exists."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449653878, 'comment_body': 'Same remark.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 32, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449654125, 'comment_body': 'Again, it would be good if this could be more relaxed.', 'comment_created': datetime.datetime(2020, 7, 3, 16, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449654464, 'comment_body': ""I don't think it should create the type (and I don't think it does)"", 'comment_created': datetime.datetime(2020, 7, 3, 16, 34, 30, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 449654643, 'comment_body': ""I typically don't leave a new line because we're not including a header corresponding to the .cpp file, exactly (as this is a test.cpp file).  But I'm not sure what best practice is here."", 'comment_created': datetime.datetime(2020, 7, 3, 16, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 450752280, 'comment_body': 'No, I just noticed that `FactManager` argument had a wrong name (its name was `transformation_context`) so I decided to rename it.', 'comment_created': datetime.datetime(2020, 7, 7, 10, 3, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450816372, 'comment_body': 'Fixed in a6ad6b3.', 'comment_created': datetime.datetime(2020, 7, 7, 12, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450816606, 'comment_body': 'Fixed in a6ad6b3.', 'comment_created': datetime.datetime(2020, 7, 7, 12, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450816775, 'comment_body': 'Fixed in a6ad6b3.', 'comment_created': datetime.datetime(2020, 7, 7, 12, 11, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450816964, 'comment_body': 'Fixed in a6ad6b3.', 'comment_created': datetime.datetime(2020, 7, 7, 12, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450817044, 'comment_body': 'Fixed in a6ad6b3.', 'comment_created': datetime.datetime(2020, 7, 7, 12, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450817138, 'comment_body': 'Fixed in a6ad6b3.', 'comment_created': datetime.datetime(2020, 7, 7, 12, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450817237, 'comment_body': 'Fixed in a6ad6b3.', 'comment_created': datetime.datetime(2020, 7, 7, 12, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 450817333, 'comment_body': 'Fixed in a6ad6b3.', 'comment_created': datetime.datetime(2020, 7, 7, 12, 12, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451087357, 'comment_body': 'I would be inclined to put ""SpvOpConvertFToS || opcode == SpvOpConvertFToU"" in parentheses for readibility.', 'comment_created': datetime.datetime(2020, 7, 7, 19, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451088178, 'comment_body': ""Make the comment explicit that OpConvertFToS can convert to a result of either type.\r\n\r\n(Seems weird to me that there's this asymmetry - aside from this PR, are we sure that's deliberate?)"", 'comment_created': datetime.datetime(2020, 7, 7, 19, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451089368, 'comment_body': 'Ah good - thanks!', 'comment_created': datetime.datetime(2020, 7, 7, 19, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451091060, 'comment_body': 'I guess there should be an analogous pair of cases for when the opcode is OpCovert[S|U]ToF?', 'comment_created': datetime.datetime(2020, 7, 7, 19, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451117631, 'comment_body': 'Fixed in e4b2f8c.', 'comment_created': datetime.datetime(2020, 7, 7, 20, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451118875, 'comment_body': 'Yes, the spec puts this constraint only on the `OpConvertFToU` instruction. This behaviour is consistent with the validator too (module is invalid if the result type of `OpConvertFToU` is a signed integer).', 'comment_created': datetime.datetime(2020, 7, 7, 20, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451118962, 'comment_body': 'Fixed in e4b2f8c.', 'comment_created': datetime.datetime(2020, 7, 7, 20, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451119215, 'comment_body': 'Indeed, fixed in e4b2f8c.', 'comment_created': datetime.datetime(2020, 7, 7, 20, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451146448, 'comment_body': ""I don't get why this way round isn't symmetric to the code in your previous commit for SPvOpConvertFTo[S|U] - i.e., why do you have a pair of for loops here but just a single for loop below?  If they really need to be different then please explain with a comment."", 'comment_created': datetime.datetime(2020, 7, 7, 21, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451156135, 'comment_body': ""Sure ;). `GetEquations` method returns all equations for some particular id (i.e. given a descriptor of an object, it returns a set of opcodes and operands that define those equations - this method internally uses a map from the left-hand side of the equation to all known right-hand sides). \r\n\r\nThis works well in the initial case. That being said, if we know that `a = int(b)` (or more specifically `%a = OpConvertFTo[S|U] %b`) then we only need to find an equation `b = float(c)` (`%b = OpConvert[S|U]ToF %c`). The crucial thing to note here is that `b` appears on the left-hand side of the equation. Thus, we can easily use `GetEquations` method.\r\n\r\nHowever, if we know that `a = float(b)` (`%a = OpConvert[S|U]ToF %b`), we need to find an equation of the form `c = int(a)` (`%c = OpConvertFTo[S|U] %a`). We can't use `GetEquations` in this case since we search by `a` which appears on the right-hand side of the equation. The simplest solution is to iterate over all equations and check for each one that its right-hand side matches `a`. That's what we do.\r\n"", 'comment_created': datetime.datetime(2020, 7, 7, 21, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451352000, 'comment_body': 'Fixed in d6ecf7e.', 'comment_created': datetime.datetime(2020, 7, 8, 7, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 451353321, 'comment_body': 'I didn\'t look at your fix yet, but I would have done it like this:\r\n\r\n```\r\n    case SpvOpConvertFToS:\r\n    case SpvOpConvertFToU: {\r\n      // Equation form: ""a = int(b)""\r\n      for (const auto& equation : GetEquations(rhs_dds[0])) {\r\n        if (equation.opcode == SpvOpConvertSToF || equation.opcode == SpvOpConvertUToF) {\r\n          // Equation form: ""b = float(c)""\r\n          // We can thus infer ""a = c""\r\n          AddDataSynonymFactRecursive(lhs_dd, *equation.operands[0], context);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case SpvOpConvertSToF:\r\n    case SpvOpConvertUToF: {\r\n      // Equation form: ""a = float(b)""\r\n      for (const auto& equation : GetEquations(rhs_dds[0])) {\r\n        if (equation.opcode == SpvOpConvertFToS || equation.opcode == SpvOpConvertFToU) {\r\n          // Equation form: ""b = int(c)""\r\n          // We can thus infer ""a = c""\r\n          AddDataSynonymFactRecursive(lhs_dd, *equation.operands[0], context);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n```\r\n\r\nHowever, I\'ve just realised something bad: these convert instructions don\'t do a bitcast (I had gotten confused and thought that they did!) - so these equation facts are not valid.  We need to re-think this one; I\'ll message you.', 'comment_created': datetime.datetime(2020, 7, 8, 7, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 451353916, 'comment_body': ""Oh, I guess you already knew this and that's why you did it the asymmetric way - that makes sense I think, but let me think about it a bit more."", 'comment_created': datetime.datetime(2020, 7, 8, 7, 57, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454637710, 'comment_body': ""dd2 doesn't get used except in an assertion.\r\n\r\nThus please change this so that it takes a single data descriptor, `dd`.  It can then compute dd's representative and look for multiple conversions on members of that class."", 'comment_created': datetime.datetime(2020, 7, 14, 20, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454639207, 'comment_body': ""I would rather you changed `synonym_vector` to something like `synonyms`, or something else that doesn't include `vector`, to avoid possible confusion with the SPIR-V vector type (since the code above involves AsVector()).\r\n\r\nIf you think the fact that the data type is vector is important for readability then drop the use of `auto`."", 'comment_created': datetime.datetime(2020, 7, 14, 20, 54, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454984792, 'comment_body': 'Fixed in d7d0f49.', 'comment_created': datetime.datetime(2020, 7, 15, 11, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 454985042, 'comment_body': 'Fixed in d7d0f49.', 'comment_created': datetime.datetime(2020, 7, 15, 11, 35, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'c719904ea2d8304cd92b9b86025a0a1a3ec40118', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5516fd14b61d2b92d150345e5b584ee8fe3d5cc5', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98c40391e9a926dc76747b452a47366d187d3547', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fef6fbd63c01a93eaa0c93edb230a53d07920daf', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba27edfcd886794cee182b7714616d210f69d7d7', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f3e6b47997b80be070cbe2b20ad523210ce9edb', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4797f77a4e2573bb17da7b84b7290f328d65a2b3', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c231436c3e50b4e5d5fb1b72737ae1d575f36a3', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54d114ab4863a00ad70b128367dd25f30cb3e212', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4451127d6a2877f7a845985e7d62b571e97fdff2', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa332e2fb7fc489b92d265312651e0de2aeaf23', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3df9b21439dafb2ac75a73e5817d501cd3ed8669', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7d0f49350b3f15a5aed668802c79850f54b2610', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
442536544,spirv-fuzz: Add fuzzerutil::FindOrCreate*,Part of #3428.,True,3479,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3479,https://github.com/KhronosGroup/SPIRV-Tools/pull/3479,closed,256,43,9,2,0,0,0,0,[],2020-07-01 08:38:21+00:00,2020-07-02 09:46:49+00:00,90508.0,"1 day, 1:08:28",[],"[{'commit_sha': '543061b21f75bf32792a89cbf57493e261997d27', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2cb67a35dd017d6fc35c8a59007f13c74e1a73c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
448258434,spirv-fuzz: Add support for OpBitcast to TransformationEquationInstruction,Fixes #3514.,True,3523,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3523,https://github.com/KhronosGroup/SPIRV-Tools/pull/3523,closed,809,10,5,7,0,0,0,0,[],2020-07-13 13:31:52+00:00,2020-07-16 13:07:09+00:00,257717.0,"2 days, 23:35:17",[],"[{'commit_sha': '27d562b4fae4e08309b60ee987d5de70ebf34639', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9487a2f5b7fce0650e4e7bc2163acff692e244f8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd622d7e8ac2142f0fa065e6b886bcb3ec1649a6b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70464d893a9348cc3a520f827584ca9a6177b621', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17e8d23f3cdbe219fd607500c0c41ed03bf885d8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3499d0886e59f3620161c485f9cb993f95cc1a44', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd75b9d0fb869e0c952da9f54659220d35b57ef', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
449022504,spirv-fuzz: Remove TransformationCopyObject,Fixes #3509.,True,3531,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3531,https://github.com/KhronosGroup/SPIRV-Tools/pull/3531,closed,847,1049,11,2,1,0,0,0,[],2020-07-14 17:45:59+00:00,2020-07-15 16:37:19+00:00,82280.0,22:51:20,[],"[{'commit_sha': '8b8564d085962a0ab5c88ac215b24e7d22b029a6', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee9998273b53ff51f0228e1ab6d04669d54ed1da', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
449475053,spirv-fuzz: Compute corollary facts from OpBitcast,Splits #3523 in two parts. This part implements functionality to compute corollary facts from `OpBitcast` equation facts.,True,3538,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3538,https://github.com/KhronosGroup/SPIRV-Tools/pull/3538,closed,91,15,2,5,4,7,0,0,[],2020-07-15 13:17:50+00:00,2020-07-29 21:06:32+00:00,1237722.0,"14 days, 7:48:42","[{'comment_id': 455772962, 'comment_body': '""the graph"" is abrupt - can you write a few words to explain what we have a graph for?', 'comment_created': datetime.datetime(2020, 7, 16, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 456255899, 'comment_body': 'Fixed in f989f1e.', 'comment_created': datetime.datetime(2020, 7, 17, 7, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 460936236, 'comment_body': 'Is there any point in the conditional given that RegisterDataDescriptor is a no-op if the descriptor already exists?', 'comment_created': datetime.datetime(2020, 7, 27, 14, 34, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462359160, 'comment_body': 'https://www.cultofpedagogy.com/two-spaces-after-period/\r\n\r\n(Though I am not quite 40 yet!)', 'comment_created': datetime.datetime(2020, 7, 29, 14, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462359423, 'comment_body': 'Similar elsewhere.', 'comment_created': datetime.datetime(2020, 7, 29, 14, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462380229, 'comment_body': 'Nice :)', 'comment_created': datetime.datetime(2020, 7, 29, 15, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462435330, 'comment_body': 'Fixed in 24212b3.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '5a4fefa2869d6597e7544772c89b24e5e1b5a44c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e117307cc28fe9f571f48b813f42edfbaecb377', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63be21e77286f25e546e5ffcccfeace1f59d56da', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4450bc18a6383b610ded1c6a149194f3771ff3c3', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a61c88f247c6f22f089cbfe68fcf05ca9332480', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
453484350,spirv-fuzz: Add IdIsIrrelevant fact,"Part of #3177.
This PR adds a fact to the fact manager.",True,3561,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3561,https://github.com/KhronosGroup/SPIRV-Tools/pull/3561,closed,104,16,4,2,0,6,0,0,[],2020-07-20 14:04:50+00:00,2020-07-20 19:10:50+00:00,18360.0,5:06:00,"[{'comment_id': 457429403, 'comment_body': 'And |lhs_id| too I guess.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457431991, 'comment_body': 'Given that we have merged the sub-managers for these facts and the above facts, I think it would make sense to combine their ""Querying facts about ..."" comment blocks; I guess ""Querying facts about irrelevant values"" would be good.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457432781, 'comment_body': '""... some other id of the same type, or the definition of |result_id| can be changed so that it yields a different value.""', 'comment_created': datetime.datetime(2020, 7, 20, 14, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457452688, 'comment_body': 'Fixed in 9a66484.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 457452735, 'comment_body': 'Fixed in 9a66484.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 457453105, 'comment_body': 'Fixed in 9a66484.', 'comment_created': datetime.datetime(2020, 7, 20, 14, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '31ccf74c005c1574b4a195478d87caf3a6112660', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a66484c0f789de74bdf0f7a473add32c5c318a8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
453778188,spirv-fuzz: Create irrelevant constants,"Part of #3177. 
Adjusts functions to create constants.",True,3563,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3563,https://github.com/KhronosGroup/SPIRV-Tools/pull/3563,closed,426,354,19,1,1,2,0,0,[],2020-07-20 19:48:59+00:00,2020-07-21 07:59:14+00:00,43815.0,12:10:15,"[{'comment_id': 457737025, 'comment_body': '""a |bool_id|"" -> ""|bool_id|""', 'comment_created': datetime.datetime(2020, 7, 20, 22, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 459929593, 'comment_body': 'Fixed in #3565.', 'comment_created': datetime.datetime(2020, 7, 24, 8, 51, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'bf3cb5483d2aae7bbbeb0bf1991b2326f915d734', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
454295939,spirv-fuzz: Use irrelevant constants,Part of #3177.,True,3565,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3565,https://github.com/KhronosGroup/SPIRV-Tools/pull/3565,closed,108,170,9,4,0,12,0,0,[],2020-07-21 09:08:20+00:00,2020-07-21 12:30:29+00:00,12129.0,3:22:09,"[{'comment_id': 457953040, 'comment_body': ""I can't remember quite what you, I and @paulthomson discussed, but I think it was that we would leave this as is (which you've done), but add an issue to favour using irrelevant zeros at first, or something like that."", 'comment_created': datetime.datetime(2020, 7, 21, 9, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457955329, 'comment_body': ""Is this resolved by a no-op because we deal with it in the fuzzer pass - i.e., we provide irrelevant ids there, and there's thus nothing to do here?  (And indeed it wouldn't be safe here to assume that they are irrelevant?)"", 'comment_created': datetime.datetime(2020, 7, 21, 9, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457956385, 'comment_body': 'Do you have test in a forthcoming PR that will showcase this behaviour working?', 'comment_created': datetime.datetime(2020, 7, 21, 9, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457956827, 'comment_body': 'Do you have a test in a forthcoming PR that will showcase this functionality working?', 'comment_created': datetime.datetime(2020, 7, 21, 9, 19, 24, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457958833, 'comment_body': 'A possible solution here is to do an OpCopyObject of each selected parameter (without introducing a synonym fact), and mark the *copy* as being irrelevant.\r\n\r\nIt would be good if you could make a new issue to track what we do here and cite that issue instead of the old issue.', 'comment_created': datetime.datetime(2020, 7, 21, 9, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457967845, 'comment_body': ""I think this comment is resolved because:\r\n* we select all available ids (irrelevant and not) as argument candidates https://github.com/KhronosGroup/SPIRV-Tools/blob/9bebdd6cacf8d7715f359eab88bdd3bc3eabd6d0/source/fuzz/fuzzer_pass_add_function_calls.cpp#L149\r\n* if there is no suitable id in the module, we create an irrelevant zero https://github.com/KhronosGroup/SPIRV-Tools/blob/9bebdd6cacf8d7715f359eab88bdd3bc3eabd6d0/source/fuzz/fuzzer_pass_add_function_calls.cpp#L242\r\n\r\nI think this is what we've discussed at the meeting."", 'comment_created': datetime.datetime(2020, 7, 21, 9, 37, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 457968954, 'comment_body': 'Yes, this comment was created before we\'ve decided that ""irrelevant id"" is better than ""irrelevant use of id"".', 'comment_created': datetime.datetime(2020, 7, 21, 9, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 457969342, 'comment_body': ""Yes, we've decided to make a separate PR to adjust tests."", 'comment_created': datetime.datetime(2020, 7, 21, 9, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 457969416, 'comment_body': ""Yes, we've decided to make a separate PR to adjust tests."", 'comment_created': datetime.datetime(2020, 7, 21, 9, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 457987566, 'comment_body': 'Sorry if this contradicts what we discussed, but having thought about it more and discussed with @paulthomson I think we should do the following, in the fuzzer pass:\r\n\r\n- If the argument type is non-pointer, pass an irrelevant zero.\r\n- If the argument type is pointer, find all ""irrelevant pointee"" pointers of the right type and select one at random.  If there are none, add a new ""irrelevant pointee"" variable and use it.\r\n\r\nThis should allow getting rid of `GetAvailableInstructionsSuitableForActualParameters`, I believe.\r\n\r\nI don\'t mind whether you do this now, or open an issue for it it and address it directly after the current series of PRs for the ""id is irrelevant"" issue.\r\n\r\nLet me know either way.', 'comment_created': datetime.datetime(2020, 7, 21, 10, 12, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 457994843, 'comment_body': ""Ok, I'll add fix this in the current PR."", 'comment_created': datetime.datetime(2020, 7, 21, 10, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458007607, 'comment_body': 'Fixed in 4d17c32.', 'comment_created': datetime.datetime(2020, 7, 21, 10, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '9bebdd6cacf8d7715f359eab88bdd3bc3eabd6d0', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d17c323a6d510e3be62673e89d0410947d084bd', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b87cec488e365038c03fc4d96fb9b1650529c6c9', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9446e9f150ac1024ad2330bd093a481da4e6379e', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
454527277,spirv-fuzz: Fix usages of irrelevant constants,Part of #3177.,True,3566,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3566,https://github.com/KhronosGroup/SPIRV-Tools/pull/3566,closed,197,53,21,4,0,27,0,0,[],2020-07-21 14:03:19+00:00,2020-07-22 18:03:58+00:00,100839.0,"1 day, 4:00:39","[{'comment_id': 458136208, 'comment_body': 'Hmm, perhaps we *should* allow vector shuffles on irrelevant vectors, but just suppress the deduction of synonym facts in the transformation in cases where the vector involved is irrelevant?', 'comment_created': datetime.datetime(2020, 7, 21, 14, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458137794, 'comment_body': ""Elsewhere we always use the order result_id, type_id, so for neatness let's do the same here."", 'comment_created': datetime.datetime(2020, 7, 21, 14, 24, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458140989, 'comment_body': 'Perhaps we should check whether constant_id is irrelevant immediately after getting its result id and continue if so.\r\n\r\nThen we could have FindOrCreateToggledConstant assert that it only gets applied to a non-irrelevant id, and to be sure to only return a non-irrelevant constant.\r\n\r\nWould that be reasonable to do in this PR?', 'comment_created': datetime.datetime(2020, 7, 21, 14, 28, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458142121, 'comment_body': 'Can you update the comment to remark that - among other things - we cannot make a synonym of an id that participates in an irrelevant id fact?', 'comment_created': datetime.datetime(2020, 7, 21, 14, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458143513, 'comment_body': 'We *could* allow irrelevant ids, and change ""Apply"" to only add facts when the id is not irrelevant.', 'comment_created': datetime.datetime(2020, 7, 21, 14, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458144361, 'comment_body': ""Again, we *could* allow irrelevant ids and just not add facts when they wouldn't be valid."", 'comment_created': datetime.datetime(2020, 7, 21, 14, 32, 53, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458145505, 'comment_body': 'If we weakened this to allow any function that can be used as a component of construct composite then we *could* allow irrelevant ids.\r\n\r\nThen in the transformation we could only add synonym facts when ids are not irrelevant.', 'comment_created': datetime.datetime(2020, 7, 21, 14, 34, 22, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458152683, 'comment_body': ""I think so, I'll fix that"", 'comment_created': datetime.datetime(2020, 7, 21, 14, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458197077, 'comment_body': 'Fixed in 35f5730.', 'comment_created': datetime.datetime(2020, 7, 21, 15, 41, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458197759, 'comment_body': 'Fixed in 35f5730.', 'comment_created': datetime.datetime(2020, 7, 21, 15, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458197881, 'comment_body': 'Fixed in 35f5730.', 'comment_created': datetime.datetime(2020, 7, 21, 15, 42, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458197994, 'comment_body': 'Fixed in 35f5730.', 'comment_created': datetime.datetime(2020, 7, 21, 15, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458198152, 'comment_body': 'Fixed in 35f5730.', 'comment_created': datetime.datetime(2020, 7, 21, 15, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458198279, 'comment_body': 'Fixed in 35f5730.', 'comment_created': datetime.datetime(2020, 7, 21, 15, 43, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458198357, 'comment_body': 'Fixed in 35f5730.', 'comment_created': datetime.datetime(2020, 7, 21, 15, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458212650, 'comment_body': ""Can we have some commentary about this?\r\n\r\n- If the id is irrelevant we're find using it, because we will not make synonyms from it\r\n- Otherwise we will consider making a synonym from it, so it has to satisfy some relevant constraints"", 'comment_created': datetime.datetime(2020, 7, 21, 16, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458249379, 'comment_body': 'Again, I would comment a little more carefully here.', 'comment_created': datetime.datetime(2020, 7, 21, 16, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458253637, 'comment_body': 'How about being more fine-grained here and doing the ""is irrelevant"" checks for vector 1 and vector 2 here?  That way if vector 1 is irrelevant but vector 2 is relevant we can still get facts for the parts of vector 2 that get shuffled into the result.', 'comment_created': datetime.datetime(2020, 7, 21, 17, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458253997, 'comment_body': 'As per the following comment, these checks could be moved inside the loop so that we can still deduce facts when one vector is relevant and the other irrelevant.', 'comment_created': datetime.datetime(2020, 7, 21, 17, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458254321, 'comment_body': ""I guess this isn't true anymore."", 'comment_created': datetime.datetime(2020, 7, 21, 17, 6, 44, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458255158, 'comment_body': 'If you act on my suggestion above, we would add data synonym facts for whichever of the two vectors (possibly both, possibly neither) is relevant.', 'comment_created': datetime.datetime(2020, 7, 21, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458613962, 'comment_body': 'Fixed in 5bea7f6.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458614147, 'comment_body': 'Fixed in 5bea7f6.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458614249, 'comment_body': 'Fixed in 5bea7f6.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458614326, 'comment_body': 'Fixed in 5bea7f6.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458614444, 'comment_body': 'Fixed in 5bea7f6.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458614583, 'comment_body': 'Fixed in 5bea7f6.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'cf83febec17b49fddc109f857c989cec7b3c518c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bca0c6f79880907798b21ebdd46d1f4dacfe5820', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02aed3054d471358809697fcaceecc7d160c3d32', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bea7f6f4c8a17ceb68f5e6f7715ab97ac4e8014', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
455659677,spirv-fuzz: Test usages of IdIsIrrelevant fact,"Part of #3177.
Fixes #3579.",True,3578,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3578,https://github.com/KhronosGroup/SPIRV-Tools/pull/3578,closed,1218,120,17,4,0,2,0,0,[],2020-07-23 12:00:19+00:00,2020-07-23 16:19:14+00:00,15535.0,4:18:55,"[{'comment_id': 459477366, 'comment_body': 'I guess the comment needs an update?', 'comment_created': datetime.datetime(2020, 7, 23, 14, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 459481594, 'comment_body': 'Fixed in 5c615a9.', 'comment_created': datetime.datetime(2020, 7, 23, 14, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '53a01f9cfa998f515075f61f774560c0c3b5be1a', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16edf8eba7812cb139a33fee369e8019e4bcd8cc', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a59b4a813feed03ad8a65aaf8b594eb16a39bff', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c615a947f49b173ae3f296d5ce18f6edf89bce2', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
455844830,spirv-fuzz: Make is_irrelevant parameters non-default,Fixes #3177.,True,3583,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3583,https://github.com/KhronosGroup/SPIRV-Tools/pull/3583,closed,76,67,28,1,0,0,0,0,[],2020-07-23 17:06:54+00:00,2020-07-24 06:57:49+00:00,49855.0,13:50:55,[],"[{'commit_sha': 'f8a225e39a24494167b55bff70c089237cd4dde1', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
454986324,spirv-fuzz: Create a helper in fuzzerutil to reuse function type,Fixes #3534.,True,3572,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3572,https://github.com/KhronosGroup/SPIRV-Tools/pull/3572,closed,139,93,8,4,0,13,0,0,[],2020-07-22 09:12:02+00:00,2020-07-23 17:01:12+00:00,114550.0,"1 day, 7:49:10","[{'comment_id': 458733610, 'comment_body': 'I would appreciate a tad more commentary in this method body.  Not tons of comments, but a few high level ones to explain what is going on.', 'comment_created': datetime.datetime(2020, 7, 22, 11, 48, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458735434, 'comment_body': 'I think the name and comments could be clearer.\r\n\r\nHow about UpdateFunctionType as a name?\r\n\r\nAnd as a comment, something along the lines of:\r\n\r\n  Changes the type of function |function_id| so that its return type is |return_type_id| and its operand types are |operand_type_ids|.  If a suitable function type already exists in the module, it is used, otherwise |new_function_type_result_id| - which must be fresh - is used as the result id of a suitable new function type instruction. ', 'comment_created': datetime.datetime(2020, 7, 22, 11, 52, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458735918, 'comment_body': 'As implicit in my comment on the .h file, better to present the result type id and operand type ids separately.', 'comment_created': datetime.datetime(2020, 7, 22, 11, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458771343, 'comment_body': 'Fixed in e5fda6e.', 'comment_created': datetime.datetime(2020, 7, 22, 12, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458773610, 'comment_body': ""Fixed in e5fda6e. Although, I don't think `new_function_type_result_id` should be fresh. The reason I can think of is the same as for the other `fuzzerutil::AddConstant*` and `fuzzerutil::AddType*` functions - we might want to reuse the id (e.g. in one of the transformations I worked on, we reused the id for the global variable). @afd, what do you think about this?"", 'comment_created': datetime.datetime(2020, 7, 22, 13, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458773742, 'comment_body': 'Fixed in e5fda6e.', 'comment_created': datetime.datetime(2020, 7, 22, 13, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458779034, 'comment_body': '... should necessarily be fresh...', 'comment_created': datetime.datetime(2020, 7, 22, 13, 10, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458824185, 'comment_body': 'If you\'re gonna make other changes, could call this ""parametr_type_ids"" to be even clearer.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458824276, 'comment_body': 'Likewise.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458824382, 'comment_body': 'Likewise.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 458850243, 'comment_body': 'Fixed in 5bf3872.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 48, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458850342, 'comment_body': 'Fixed in 5bf3872.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 458850453, 'comment_body': 'Fixed in 5bf3872.', 'comment_created': datetime.datetime(2020, 7, 22, 14, 48, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'dd8f2fd94b2366d9c8b224fbffa562f9daee781c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5fda6e2b4bf7e3ff4dbf92bf3e497b3b183a950', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bf387247fdb56068c786e48fcb2d2a1f12ffd5c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29541d0485512c2ed4ee0e07a1aff510d3bfc40', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
457390921,spirv-fuzz: Relax type constraints in DataSynonym facts,Fixes #3595.,True,3602,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3602,https://github.com/KhronosGroup/SPIRV-Tools/pull/3602,closed,175,36,6,2,0,7,0,0,[],2020-07-27 20:40:47+00:00,2020-07-29 16:48:02+00:00,158835.0,"1 day, 20:07:15","[{'comment_id': 461171918, 'comment_body': 'I would rather be more cautious and require that the element counts are the same and that the bit counts per element are the same.', 'comment_created': datetime.datetime(2020, 7, 27, 21, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461175477, 'comment_body': ""I suggest you replace from here to the end of the function with:\r\n\r\n```\r\nauto get_bit_count_for_numeric_type = // your nice lambda function;\r\nif ((type_a->AsFloat() || type_a->AsInt()) && (type_b->AsFloat() || type_b->AsInt())) {\r\n  return get_bit_count_for_numeric_type(type_a) == get_bit_count_for_numeric_type(type_b);\r\n}\r\nif (type_a->AsVector() && type_b->AsVector()) {\r\n  if (either element type is bool) {\r\n    return false; // The case where both are bool is handled by the direct equality check earlier; you can't have multiple identical boolean vector types\r\n  }\r\n  return true if and only if element counts are equal and bit counts of element types are equal\r\n}\r\nreturn false;\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 7, 27, 21, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461175906, 'comment_body': 'Descriptors -> DataDescriptors', 'comment_created': datetime.datetime(2020, 7, 27, 21, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461176036, 'comment_body': '(Partly because ""descriptor"" is such an overloaded term.)', 'comment_created': datetime.datetime(2020, 7, 27, 21, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 461462967, 'comment_body': 'Fixed in 2955d7a.', 'comment_created': datetime.datetime(2020, 7, 28, 9, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 461463045, 'comment_body': 'Fixed in 2955d7a.', 'comment_created': datetime.datetime(2020, 7, 28, 9, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 461463112, 'comment_body': 'Fixed in 2955d7a.', 'comment_created': datetime.datetime(2020, 7, 28, 9, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'c12ffb2c9d30f3405ba85e530b10304e8c27bf37', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2955d7a879d48fd4ec96c11d367f475056f28e5f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
457999988,spirv-fuzz: Remove non-deterministic behaviour,Fixes #3607.,True,3608,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3608,https://github.com/KhronosGroup/SPIRV-Tools/pull/3608,closed,65,52,7,2,3,0,0,0,[],2020-07-28 19:16:34+00:00,2020-07-29 16:47:13+00:00,77439.0,21:30:39,[],"[{'commit_sha': 'a25b4686366482276f8c6f59f2746ea0f540f70b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a890cbbf3fdc774b63b22b928af8c6b6c6396329', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
459223997,spirv-fuzz: Fix memory bugs,Fixes #3620.,True,3622,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3622,https://github.com/KhronosGroup/SPIRV-Tools/pull/3622,closed,41,7,6,2,0,0,0,0,[],2020-07-30 14:14:43+00:00,2020-07-30 15:51:30+00:00,5807.0,1:36:47,[],"[{'commit_sha': 'f045fc30247f77170a1c6d9ac0251e78ae619859', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd00692c6d483f4692e8dfbb1a1ad6692b9b34350', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
461827194,spirv-fuzz: Handle OpPhi during constant obfuscation,Fixes #3639.,True,3640,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3640,https://github.com/KhronosGroup/SPIRV-Tools/pull/3640,closed,190,3,5,4,0,6,0,0,[],2020-08-02 16:14:50+00:00,2020-08-05 18:17:28+00:00,266558.0,"3 days, 2:02:38","[{'comment_id': 465240252, 'comment_body': 'Maybe:\r\n\r\nReturns the last instruction in |block_id| before which an instruction with opcode |opcode| can be inserted, or nullptr if there is no such instruction.', 'comment_created': datetime.datetime(2020, 8, 4, 18, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465247697, 'comment_body': ""I think this should say something like:\r\n\r\n\r\nThe use might be in an OpPhi instruction.\r\n\r\n\r\nThen, within the if body:\r\n\r\n\r\nOpPhi instructions must be the first instructions in a block. Thus, we can't insert above the OpPhi instruction. Given the predecessor block that corresponds to the id use, get the last instruction in that block above which we can insert OpAccessChain and OpLoad.\r\n"", 'comment_created': datetime.datetime(2020, 8, 4, 18, 30, 3, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465260610, 'comment_body': 'The only operand that has a boolean type?', 'comment_created': datetime.datetime(2020, 8, 4, 18, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465667797, 'comment_body': 'Fixed in bcb5394.', 'comment_created': datetime.datetime(2020, 8, 5, 11, 45, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465667909, 'comment_body': 'Fixed in bcb5394.', 'comment_created': datetime.datetime(2020, 8, 5, 11, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465668082, 'comment_body': 'Clarified the comment in bcb5394.', 'comment_created': datetime.datetime(2020, 8, 5, 11, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '6c08d92a06594f81f6c1f3ad03cc6321d48e38c0', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f8ad95b6618134cc86aa612e65c3f83b81a8cbb', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ff7766ecc63d2745519f076528149fcfe95dd53', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcb5394421d45e663a129e96b539960281edb6b7', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
461844717,spirv-fuzz: Handle OpPhis in livesafe functions,Fixes #3641.,True,3642,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3642,https://github.com/KhronosGroup/SPIRV-Tools/pull/3642,closed,321,31,5,6,1,30,0,0,[],2020-08-02 18:46:59+00:00,2020-08-05 18:21:38+00:00,257679.0,"2 days, 23:34:39","[{'comment_id': 464110622, 'comment_body': '@paulthomson, would be good to know your opinion in this regard.', 'comment_created': datetime.datetime(2020, 8, 2, 18, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464295167, 'comment_body': ""As a possible solution, I think we can add a branch not from the back-edge block, but from the block that already has a branch to the merge block. If there are no branches from the loop to the merge block, then the merge block must be unreachable (if I understood the structured control flow correctly), so it may not have any OpPhis. Otherwise, we don't create any new branches but simply adjusting the condition on an existing one."", 'comment_created': datetime.datetime(2020, 8, 3, 9, 21, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464300333, 'comment_body': ""As I think more about it, I realize that even with the approach proposed above, we might end up having values that can potentially cause some problems. For example, consider the loop that introduces an integer id that is being used in the `OpSDiv` instruction in the merge block. We might accidentally break from the loop in the very moment when the id has 0 value which will cause a division by 0 in the merge block. \r\n\r\nThus, it seems completely safe to break only from the infinite loop (the merge block doesn't necessarily have to be unreachable)."", 'comment_created': datetime.datetime(2020, 8, 3, 9, 30, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464348444, 'comment_body': 'Yes, this is a very good point. However, I think we might still introduce such issues with live code donation anyway, so this change is probably only an improvement. Also, most things like ""divide by zero"" I _think_ don\'t actually stop execution, like in C. So we might be fine. The big issue to watch out for is out of bound memory accesses, which we should be protected from due to the fact that we clamp indices. \r\n\r\nYour possible solution is something that I already suggested to Ally; essentially, we shouldn\'t need to add an edge. I can\'t remember why the current approach was more appealing; I think it might be a bit trick if the loop header already ends with an OpBranchConditional and neither of the targets are the merge block, although I guess this might be quite rare.', 'comment_created': datetime.datetime(2020, 8, 3, 11, 14, 8, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464349145, 'comment_body': 'We -> We are', 'comment_created': datetime.datetime(2020, 8, 3, 11, 15, 49, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464349392, 'comment_body': 'You mean: ""the loop might already have an edge from the back-edge block to the merge block""', 'comment_created': datetime.datetime(2020, 8, 3, 11, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464352293, 'comment_body': 'Consider changing the above `if (block.IsLoopHeader()) {` to \r\n\r\n```\r\nif (!block.IsLoopHeader()) {\r\n  continue;\r\n}\r\n```\r\n\r\nto reduce indentation. ', 'comment_created': datetime.datetime(2020, 8, 3, 11, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464353917, 'comment_body': 'We generally avoid adding functions that just have one use, but given the amount of nested control flow here, it might be a good idea to put this new code into a function. Oh but there is an early return...I guess the new function can return false if it failed to create or find a required phi operand id. ', 'comment_created': datetime.datetime(2020, 8, 3, 11, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464355390, 'comment_body': 'Use `IdIsAvailableAtUse`. Maybe review `IdIsAvailableAtUse` while you are there (do we need to have a special-case for function parameters?). ', 'comment_created': datetime.datetime(2020, 8, 3, 11, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 464591976, 'comment_body': 'Otherwise, or if -> Otherwise, if', 'comment_created': datetime.datetime(2020, 8, 3, 18, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 464853981, 'comment_body': ""Ok, I'll leave it as it is then."", 'comment_created': datetime.datetime(2020, 8, 4, 7, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464856102, 'comment_body': 'Fixed in bdc10e9.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464856826, 'comment_body': ""No, that `if` statement handles the case when the back-edge block is unreachable in the CFG. Thus, the loop can't iterate and we don't need to adjust anything. The comment needs a refactoring, though. Fixed in bdc10e9."", 'comment_created': datetime.datetime(2020, 8, 4, 7, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464857274, 'comment_body': 'The case when loop already has an edge from the back-edge block to the merge block is handled below.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464857891, 'comment_body': ""I've refactored the code into a separate function in d4d7640, thus decreasing the indentation. Hence, I left this block as it is."", 'comment_created': datetime.datetime(2020, 8, 4, 7, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464858151, 'comment_body': 'Fixed in d4d7640.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 37, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464860925, 'comment_body': ""I've used `IdIsAvailableBeforeInstruction` in bdc10e9. `IdIsAvailableAtUse` won't work here since we need to check that an operand of the OpPhi instruction is available in the merge block when control-flow comes from a back-edge block. If we use `IdIsAvailableAtUse`, we'll be checking the same thing but for the case when the control flow comes from the block, that's already a part of the OpPhi instruction.\r\n\r\nExample:\r\n```\r\n%1 = OpPhi %type_id %2 %3 ...\r\n```\r\n\r\nIn this example, we need to check that `%2` is available when the control flow comes from the back-edge (say `%4`). Whereas, if we use `IdIsAvailableAtUse`, we'll be checking that `%2` is available when the control flow comes from `%3`."", 'comment_created': datetime.datetime(2020, 8, 4, 7, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464861202, 'comment_body': 'It appears that `IdIsAvailableAtUse` already has a case for function parameters.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464862195, 'comment_body': 'The comment was correct here. I meant\r\n> Otherwise (if |make_livesafe| is false), or if ...\r\n\r\nIt needed some clarification, though. Fixed in bdc10e9.', 'comment_created': datetime.datetime(2020, 8, 4, 7, 44, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 464996047, 'comment_body': ""You're right, @Vasniktel.\r\nSorry for the confusion!"", 'comment_created': datetime.datetime(2020, 8, 4, 11, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 465105339, 'comment_body': 'I would much prefer an early `return true` here (although it is bit ugly because we will have to set `out` as well).', 'comment_created': datetime.datetime(2020, 8, 4, 14, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465105612, 'comment_body': 'Same here; an early return will simplify how this code reads, even though we will have to set `out`.', 'comment_created': datetime.datetime(2020, 8, 4, 14, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465107041, 'comment_body': 'Ah I see. I like the revised comment.', 'comment_created': datetime.datetime(2020, 8, 4, 14, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465107970, 'comment_body': 'Ah yes I see. IdIsAvailableBeforeInstruction makes more sense.', 'comment_created': datetime.datetime(2020, 8, 4, 14, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465110516, 'comment_body': 'Ah I was wondering _why_ there is a special case for function parameters, but I now see that function parameters are not part of a block, so it makes sense that we need a special case.', 'comment_created': datetime.datetime(2020, 8, 4, 14, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465112776, 'comment_body': 'So actually, it especially good that we used `IdIsAvailableBeforeInstruction` here, instead of relying just on dominance. Excellent. ', 'comment_created': datetime.datetime(2020, 8, 4, 14, 54, 57, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465115580, 'comment_body': 'Very nice!', 'comment_created': datetime.datetime(2020, 8, 4, 14, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'paulthomson', 'type': 'User'}, {'comment_id': 465656056, 'comment_body': 'Fixed in c89d2e6.', 'comment_created': datetime.datetime(2020, 8, 5, 11, 21, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465656131, 'comment_body': 'Fixed in c89d2e6.', 'comment_created': datetime.datetime(2020, 8, 5, 11, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 465656493, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2020, 8, 5, 11, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'b5b3f5fedd4905ffde2348d05662cc9234dc8975', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51440e482fc850fe6127b60e7a03f679edf9e1ca', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f28b18c93cf9e6c7a125dcba98eba6d29aa81ddc', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f049cec2035a671c5956857489b37735cf258914', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d3ca1f5edb4b98ca582cc784e26fdac9896fd60', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89d2e68883d19d617cd802e67c0efa650d13c60', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
462725357,spirv-fuzz: Handle capabilities during module donation,Fixes #3648.,True,3651,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3651,https://github.com/KhronosGroup/SPIRV-Tools/pull/3651,closed,137,1,2,3,0,0,1,0,[{'name': 'kokoro:run'}],2020-08-04 12:09:49+00:00,2020-08-04 16:11:30+00:00,14501.0,4:01:41,[],"[{'commit_sha': 'b4b6cdb45ad0feac9f7dc1e739927bb21387fa74', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4e4492a0e1da562156af971b692cda8d908e94d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b05510f832326518f6b422830091dc8152661f88', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
466240012,spirv-fuzz: Fix width in FuzzerPassAddEquationInstructions,Fixes #3669.,True,3685,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3685,https://github.com/KhronosGroup/SPIRV-Tools/pull/3685,closed,77,16,2,3,1,3,0,0,[],2020-08-11 17:12:44+00:00,2020-08-12 15:39:24+00:00,80800.0,22:26:40,"[{'comment_id': 469264330, 'comment_body': 'I guess you could add the 8-bit integer type case.\r\n```\r\ncase 8:\r\n  return ir_context->get_feature_mgr()->HasCapability(SpvCapabilityInt8);\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 13, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 469285432, 'comment_body': ""We don't have `Float8` capability so it seems we can't create floats of 8 bits. Thus, I think we can't support it."", 'comment_created': datetime.datetime(2020, 8, 12, 14, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 469288417, 'comment_body': ""You're right."", 'comment_created': datetime.datetime(2020, 8, 12, 14, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}]","[{'commit_sha': '3ffacc75772707766a8c40cfa7b2f30e8e81a588', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5c3f8bac44d0dea369bee255d41c2b85baef583', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6ec47551deb02847e7bd28d1354115059203cdf', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
466847745,spirv-fuzz: Support identical predecessors in TransformationPropagateInstructionUp,"A basic block may have multiple identical predecessors as follows:
```
%1 = OpLabel
OpSelectionMerge %2 None
OpBranchConditional %true %2 %2
%2 = OpLabel
...
```
This case wasn't supported before.",True,3689,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3689,https://github.com/KhronosGroup/SPIRV-Tools/pull/3689,closed,95,3,3,1,0,0,0,0,[],2020-08-12 15:29:33+00:00,2020-08-14 11:29:36+00:00,158403.0,"1 day, 20:00:03",[],"[{'commit_sha': 'f737e792591b96b961914a05a5e7c96fbdd30bad', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
467939698,spirv-fuzz: Split the fact manager into multiple files,"Part of #3698.

This splits various components of the fact manager into multiple files.",True,3699,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3699,https://github.com/KhronosGroup/SPIRV-Tools/pull/3699,closed,1068,862,19,5,0,7,0,0,[],2020-08-14 11:47:20+00:00,2020-08-25 17:11:38+00:00,969858.0,"11 days, 5:24:18","[{'comment_id': 473074623, 'comment_body': ""I don't really like that these structs end up becoming public, in the sense that any file that #includes fact_manager.h can access them.  Previously they were declared in fact_manager.cpp, making them hidden from the rest of the code base.\r\n\r\nCould we move them to the private part of the DataSynonymAndIdEquationFacts class?"", 'comment_created': datetime.datetime(2020, 8, 19, 14, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 473075969, 'comment_body': 'I wonder about requiring these to be kept in alphabetical order, like we do for things in fuzzer_context?', 'comment_created': datetime.datetime(2020, 8, 19, 14, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 473078182, 'comment_body': 'In due course it might be good to split the tests up into one test file per different sub-manager.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 473092452, 'comment_body': '@afd, should I make a separate PR for it? Or is it fine to do it here?', 'comment_created': datetime.datetime(2020, 8, 19, 14, 54, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 473094938, 'comment_body': 'Fixed in 0060804.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 473095197, 'comment_body': 'Fixed in 0060804.', 'comment_created': datetime.datetime(2020, 8, 19, 14, 58, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 473966278, 'comment_body': ""I'll do it in a separate PR."", 'comment_created': datetime.datetime(2020, 8, 20, 13, 22, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'f80cc7210c4b4b4f2ecbbe0e14d4f774abe5801a', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7e6a53ae6af1e87b694dec72038b92bd7d0e1fa', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c6c9064b5ae1b9edb78e7555928cbfd8496bb90', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccdc3779f8ea62585ed95c740b554ca65f9816f2', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '006080424f787bc273fa3219a5e0597cf92388a0', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
472442190,spirv-fuzz: Fix MaybeGetZeroConstant,Fixes #3739.,True,3740,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3740,https://github.com/KhronosGroup/SPIRV-Tools/pull/3740,closed,22,41,2,1,0,0,0,0,[],2020-08-24 11:08:31+00:00,2020-08-25 08:50:01+00:00,78090.0,21:41:30,[],"[{'commit_sha': '9a266506784c9540ad348bf3bc50ce0ec3ff842e', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
468029249,spirv-fuzz: Support memory instructions MoveInstructionDown,Part of #3605.,True,3700,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3700,https://github.com/KhronosGroup/SPIRV-Tools/pull/3700,closed,1112,18,3,14,2,28,0,0,[],2020-08-14 14:54:07+00:00,2020-09-15 14:04:40+00:00,2761833.0,"31 days, 23:10:33","[{'comment_id': 478256715, 'comment_body': 'I don\'t like the name and description of this method in relation to ""Maybe"" and ""might not be memory instructions"".  It suggests that the instructions are allowed to be memory instructions but also don\'t have to be, so it sounds like any instruction fits the bill :)', 'comment_created': datetime.datetime(2020, 8, 27, 8, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478258209, 'comment_body': ""This comment is not clear to me.  For example, we shouldn't swap two stores if they could store to the same location, or a load and a store if they could access the same location.  Perhaps this is handled by the condition you check here, but the way the comment is written it sounds like it's always OK to swap memory instructions, and reading the condition, the names of the functions you are calling don't make it clear that you're accounting for the possibility of conflicting memory instructions."", 'comment_created': datetime.datetime(2020, 8, 27, 8, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478259392, 'comment_body': 'Use kExtensionSetName here.', 'comment_created': datetime.datetime(2020, 8, 27, 8, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478259629, 'comment_body': 'What about instructions that load from images?', 'comment_created': datetime.datetime(2020, 8, 27, 8, 49, 46, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478260280, 'comment_body': ""Is this an acknowledgement of the implementation being incomplete?  That's fine, but ideally we'd have a TODO(issue) somewhere."", 'comment_created': datetime.datetime(2020, 8, 27, 8, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478261347, 'comment_body': '""if read target"" -> ""if the read target""', 'comment_created': datetime.datetime(2020, 8, 27, 8, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478263865, 'comment_body': ""It might be good to use symbols other than A and B since you're also using a and b for the instructions.  Perhaps SAME and DIFF, or S and D?"", 'comment_created': datetime.datetime(2020, 8, 27, 8, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478264281, 'comment_body': ""It's all possible combinations according to the tables above, but conservatively assuming that memory regions are the same."", 'comment_created': datetime.datetime(2020, 8, 27, 8, 57, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478264835, 'comment_body': 'I guess thanks to this PR the TODO comment should go :)', 'comment_created': datetime.datetime(2020, 8, 27, 8, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478266884, 'comment_body': 'I suggest renaming this to ""CanSafelySwapInstructions"", and saying ""Returns true if it is possible to swap |a| and |b| without changing the module\'s semantics.  |a| and |b| are required to be supported instructions (see IsInstructionSupported).""\n\nTo reassure the reader you might also add: ""In particular, if either |a| or |b| are memory or barrier instructions, conservative checks are used to only say that they can be swapped if the swap is definitely semantics-preserving."" ', 'comment_created': datetime.datetime(2020, 8, 27, 9, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478267883, 'comment_body': 'Now that I have read the code more carefully I get it, and all is well.  I think that with my proposed name change this is good; I suggest changing the comment to ""It must be safe to swap the instructions without changing the semantics of the module.""  If you want to mention memory, you could add: ""Note that this check accounts for the case where the instructions are potentially conflicting memory instructions, and disallows such cases.""  But I think perhaps that would be overkill.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478269397, 'comment_body': ""If you think these are relevant feel free to use a TODO(issue) if you don't want to handle them right now.\r\n\r\nAnd the same goes for write instructions I guess: I think there are various instructions that write to images, though I'm not too sure."", 'comment_created': datetime.datetime(2020, 8, 27, 9, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 481029382, 'comment_body': 'Fixed in 1cfd91a.', 'comment_created': datetime.datetime(2020, 9, 1, 10, 12, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481029675, 'comment_body': 'Fixed in 1cfd91a.', 'comment_created': datetime.datetime(2020, 9, 1, 10, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481029767, 'comment_body': 'Fixed in 1cfd91a.', 'comment_created': datetime.datetime(2020, 9, 1, 10, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481039172, 'comment_body': ""No, I've added this comment to make sure that the assertion fails if some of the memory read instructions are not handled in this method. That is, we can add new opcodes to `IsMemoryWriteInstruction` but forget to add them to `GetMemoryWriteTarget`.\r\n\r\nClarified the purpose of the assertion in 1cfd91a."", 'comment_created': datetime.datetime(2020, 9, 1, 10, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481039290, 'comment_body': 'Fixed in 1cfd91a.', 'comment_created': datetime.datetime(2020, 9, 1, 10, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481039393, 'comment_body': 'Fixed in 1cfd91a.', 'comment_created': datetime.datetime(2020, 9, 1, 10, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481039518, 'comment_body': 'Fixed in 1cfd91a.', 'comment_created': datetime.datetime(2020, 9, 1, 10, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481039959, 'comment_body': ""I've made this issue more generic since there are possibly many more instructions we could add support for."", 'comment_created': datetime.datetime(2020, 9, 1, 10, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481042022, 'comment_body': ""I'm not very familiar with image-related instructions. What are the most common of them?"", 'comment_created': datetime.datetime(2020, 9, 1, 10, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481073453, 'comment_body': 'I am not too familiar with them either, but, from section 3.14 of the spec:\r\n\r\n**Instructions that write to images**\r\n\r\n- OpImageWrite\r\n\r\n**Instructions that read from images:**\r\n\r\n- OpImageSampleImplicitLod\r\n- OpImageSampleExplicitLod\r\n- OpImageSampleDrefImplicitLod\r\n- OpImageSampleDrefExplicitLod\r\n- OpImageSampleProjImplicitLod\r\n- OpImageSampleProjExplicitLod\r\n- OpImageSampleProjDrefImplicitLod\r\n- OpImageSampleProjDrefExplicitLod\r\n- OpImageFetch\r\n- OpImageGather\r\n- OpImageDrefGather\r\n- OpImageRead\r\n- OpImageSparseSampleImplicitLod\r\n- OpImageSparseSampleExplicitLod\r\n- OpImageSparseSampleDrefImplicitLod\r\n- OpImageSparseSampleDrefExplicitLod\r\n- OpImageSparseSampleProjImplicitLod\r\n- OpImageSparseSampleProjExplicitLod\r\n- OpImageSparseSampleProjDrefImplicitLod\r\n- OpImageSparseSampleProjDrefExplicitLod\r\n- OpImageSparseFetch\r\n- OpImageSparseGather\r\n- OpImageSparseDrefGather\r\n- OpImageSparseRead', 'comment_created': datetime.datetime(2020, 9, 1, 11, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 481074646, 'comment_body': '@Vasniktel should the comment associated with the TODO be updated as well?  Because now we do handle some instructions that work with memory.  The comment looks like this is stale, since the reader of the code can see that there is a whole lot of stuff to do with instructions that do access memory.', 'comment_created': datetime.datetime(2020, 9, 1, 11, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 481953334, 'comment_body': 'Some of these instructions are reserved (e.g. `OpImageSparseSampleProjImplicitLod`). Should I add them too?', 'comment_created': datetime.datetime(2020, 9, 2, 10, 4, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481969104, 'comment_body': 'Should we add support for atomic instructions as well?', 'comment_created': datetime.datetime(2020, 9, 2, 10, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 483091230, 'comment_body': 'Added support for image instructions in 940cb79.', 'comment_created': datetime.datetime(2020, 9, 3, 16, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 488583702, 'comment_body': ""@Vasniktel Thanks - I see you added the ones that are reserved and I think that's fine.\r\n\r\nWould it be easy to add the atomic ones too?  If so then I recommend doing it now, so that we don't forget."", 'comment_created': datetime.datetime(2020, 9, 15, 11, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 488617479, 'comment_body': 'Added atomics in b4a76f2.', 'comment_created': datetime.datetime(2020, 9, 15, 12, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '03ad154c5404b4c237d08244c6cf260683da0a07', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b84ef1c0155f0fca876b0458b9e8a27cbdbb6f8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a49007b3e07fc9d1cbad60d5ff46c2dd35c7b3d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4be7f0989c966d0195c171c9fd52869936df990f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856bfb3210e44a31d30a337b7614f01110129c28', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '580ce7de4de03f5027509a047de58e4eaa1c9360', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c88016c6adebe0ce95e77fc5dad0a2d38b5f864b', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50aa0852dcb7e98038995c1cb6c1fb3969a064bf', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5a4642ab8b26d14f307db21343da481b9200000', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '617aa4326f3cf577647e50637e3f610e09a761c0', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eae4ca584e13995f3d367be4acef1fc769ce4175', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43fedb482dfe525c9827825763bd94ef121918bd', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '375b7941d471e2990fe47dea47d63309132e7442', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4a76f2100c12b8345f99890a9eb65f75c4d68ac', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
470884604,spirv-fuzz: Skip unreachable blocks,"Fixes #3722, fixes #3713, fixes #3714.",True,3729,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3729,https://github.com/KhronosGroup/SPIRV-Tools/pull/3729,closed,144,22,9,5,0,8,0,0,[],2020-08-20 12:47:31+00:00,2020-09-15 22:35:43+00:00,2281692.0,"26 days, 9:48:12","[{'comment_id': 482088588, 'comment_body': 'I\'m not sure what the significance of ""*"" is in ""auto*"" (lack of C++ expertise on my part).', 'comment_created': datetime.datetime(2020, 9, 2, 13, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 482090591, 'comment_body': '-> ""|instruction| must be in a basic block"" (as ""local instruction"" isn\'t a widely-used SPIR-V term, I think.)', 'comment_created': datetime.datetime(2020, 9, 2, 13, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 482090782, 'comment_body': 'Same comment as above.', 'comment_created': datetime.datetime(2020, 9, 2, 13, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 482090869, 'comment_body': 'Same.', 'comment_created': datetime.datetime(2020, 9, 2, 13, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 488541081, 'comment_body': ""I don't think there is any visible difference. I prefer it to `auto`, though, since it makes it clear that no copy constructors are called."", 'comment_created': datetime.datetime(2020, 9, 15, 9, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 488596777, 'comment_body': 'Fixed in faf64b5.', 'comment_created': datetime.datetime(2020, 9, 15, 11, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 488596884, 'comment_body': 'Fixed in faf64b5.', 'comment_created': datetime.datetime(2020, 9, 15, 11, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 488596947, 'comment_body': 'Fixed in faf64b5.', 'comment_created': datetime.datetime(2020, 9, 15, 11, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '25756bdad9081f6a36d08b442c613b0cec8c6f62', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ae1b510b75ca31a61d8b4c727b160850c453aae', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e36fa60571519c59243c803fc3c505335dfa55c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a04443ece04810568a1e9985e4571f985da5b893', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62abf2363f6e79a4c8a375bf3563936780fc8e7f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
471734788,spirv-fuzz: Add support for BuiltIn decoration,Fixes #3676.,True,3736,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3736,https://github.com/KhronosGroup/SPIRV-Tools/pull/3736,closed,104,2,6,3,0,9,0,0,[],2020-08-21 16:40:41+00:00,2020-09-02 13:14:59+00:00,1024458.0,"11 days, 20:34:18","[{'comment_id': 476288494, 'comment_body': 'You could replace this with a single assertion checking that the opcode of struct_type_id when looked up in the def use manager is OpTypeStruct.  That would avoid the need for the ""keep compilers happy"" cast.  I don\'t feel strongly either way here.', 'comment_created': datetime.datetime(2020, 8, 25, 8, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 476290640, 'comment_body': ""These options don't seem mutually exclusive.  The opposite of all members being decorated with BuiltIn is not that *none* are decorated with BuiltIn; it's that *at least one* is *not* decorated with BuiltIn.\r\n\r\nFrom the way you have used this function it sounds like it should return true if and only if *at least one* member has BuiltIn.\r\n\r\nIf we are assuming the module is valid in the first place then as an integrity check we might want to assert that if any member has BuiltIn then all of them do.\r\n\r\nI suppose the options are mutually exclusive in the context of a valid module - is that what you intended with the current comment?"", 'comment_created': datetime.datetime(2020, 8, 25, 8, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 480964010, 'comment_body': '> I suppose the options are mutually exclusive in the context of a valid module - is that what you intended with the current comment?\r\n\r\nYes. According to the spec, if any struct member is builtin, all of its members should be builtin.', 'comment_created': datetime.datetime(2020, 9, 1, 8, 28, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 480971190, 'comment_body': 'Fixed in fdc3b5d.', 'comment_created': datetime.datetime(2020, 9, 1, 8, 40, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 480971281, 'comment_body': 'Fixed in fdc3b5d.', 'comment_created': datetime.datetime(2020, 9, 1, 8, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481068444, 'comment_body': '""either one"" -> ""either all"", I think.  And perhaps make it ""none or all"" rather than ""all or none"" to match the order of the operands to ""||"" in the assertion.', 'comment_created': datetime.datetime(2020, 9, 1, 11, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 481070107, 'comment_body': 'Can you please:\r\n\r\n- change the name to ""MembersHaveBuiltInDecoration""\r\n\r\n- change the comment to (something like): ""Requires that |struct_type_id| is the id of a struct type, and (as per the SPIR-V spec) that either all or none of the members of |struct_type_id| have the BuiltIn decoration.  Returns true if and only if all members have the BuiltIn decoration.""', 'comment_created': datetime.datetime(2020, 9, 1, 11, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 481924407, 'comment_body': 'Fixed in 9868ff3.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 15, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 481924522, 'comment_body': 'Fixed in 9868ff3.', 'comment_created': datetime.datetime(2020, 9, 2, 9, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': '6a21d6637e0a49fca082d14055040b606d0dc844', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1e5f22a74c24536aa361a629473e3b2aea30faf', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9868ff329d22434884dd018c2e7d6feb937ab2f7', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
472482921,spirv-fuzz: Handle invalid ids in fact manager,"Fixes #3741.

This PR fixes two bugs:
1. Segfault in https://github.com/KhronosGroup/SPIRV-Tools/blob/4c239bd81bf79337e4a0cfe1c9da9caf1b25108a/source/fuzz/fuzzer_util.cpp#L574-L576 when `result_id` doesn't exist in the module. The bug is triggered in https://github.com/KhronosGroup/SPIRV-Tools/blob/4c239bd81bf79337e4a0cfe1c9da9caf1b25108a/source/fuzz/fact_manager/data_synonym_and_id_equation_facts.cpp#L290 when `representative->object()` doesn't exist in the module. This can happen in certain cases if we apply `TransformationMergeBlocks` first.
2. Segfault in either https://github.com/KhronosGroup/SPIRV-Tools/blob/4c239bd81bf79337e4a0cfe1c9da9caf1b25108a/source/fuzz/fact_manager/data_synonym_and_id_equation_facts.cpp#L769 or https://github.com/KhronosGroup/SPIRV-Tools/blob/4c239bd81bf79337e4a0cfe1c9da9caf1b25108a/source/fuzz/fact_manager/data_synonym_and_id_equation_facts.cpp#L772 happens if either `dd1.object()` or `dd2.object()` doesn't exist in the module. This can happen when `AddDataSynonymFactRecursive` is called recursively from `ComputeConversionDataSynonymFacts`. This bug is described in #3741.",True,3742,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3742,https://github.com/KhronosGroup/SPIRV-Tools/pull/3742,closed,105,21,3,2,1,3,0,0,[],2020-08-24 12:28:58+00:00,2020-09-15 16:03:10+00:00,1913652.0,"22 days, 3:34:12","[{'comment_id': 475571949, 'comment_body': ""This might be too extreme. We could mark two data descriptors as synonymous even if one of them doesn't exist in the module. We can do that if elements of equivalence classes of both data descriptors are guaranteed to have compatible types.\r\n\r\nThis can be useful since some of the elements of those equivalence classes might still exist in the module.\r\n\r\nA drawback of this approach, though, is that it might be harder to manually analyze a shader in this case.\r\n\r\nAnyway, we can't do this ATM since an assertion fails in\r\nhttps://github.com/KhronosGroup/SPIRV-Tools/blob/4dd122392f3ad757e70951a1198479bf233d4cd8/source/fuzz/fact_manager.cpp#L720-L723"", 'comment_created': datetime.datetime(2020, 8, 24, 12, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 475572334, 'comment_body': '@afd, @paulthomson, do you think we should add synonyms between non-existent data descriptors?', 'comment_created': datetime.datetime(2020, 8, 24, 12, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 488741958, 'comment_body': ""Resolved the situation in 3f086b8. Now, we don't create a synonym between two ids only if both equivalence classes have no valid members."", 'comment_created': datetime.datetime(2020, 9, 15, 15, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'ff7d2af6df5bc489620358ba007ba3591ea70ff4', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f086b8bee63b06dd10c31c8a4acdace8da6a26e', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
460177156,spirv-fuzz: Remove OpFunctionCall operands in correct order,Fixes #3629.,True,3630,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3630,https://github.com/KhronosGroup/SPIRV-Tools/pull/3630,closed,185,23,3,2,0,0,0,0,[],2020-07-31 14:04:36+00:00,2020-08-04 18:10:22+00:00,360346.0,"4 days, 4:05:46",[],"[{'commit_sha': 'c41850a3bc96698466bab6b13a08a06d44b93991', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d36173aa9480f721ecc58753c5cfd994e0c0247', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
441998353,spirv-fuzz: TransformationMoveInstructionDown,Fixes #3457.,True,3477,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3477,https://github.com/KhronosGroup/SPIRV-Tools/pull/3477,closed,580,0,12,15,0,15,0,0,[],2020-06-30 12:36:24+00:00,2020-08-03 15:45:25+00:00,2948941.0,"34 days, 3:09:01","[{'comment_id': 454619191, 'comment_body': 'Add similar comment that |target| must be valid.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 19, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454619841, 'comment_body': 'Add "", thus it is OK to use it again below.""', 'comment_created': datetime.datetime(2020, 7, 14, 20, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454623135, 'comment_body': 'global instruction or function parameter', 'comment_created': datetime.datetime(2020, 7, 14, 20, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454624329, 'comment_body': 'or function parameter', 'comment_created': datetime.datetime(2020, 7, 14, 20, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454627227, 'comment_body': 'IsMemoryBarrier isn\'t the right name here, because CopyMemory and Store are not memory barriers.\r\n\r\nI think ""ModifiesOrOrdersMemory"" would be a better name.  This captures Store, CopyMemory, etc., which modify memory, and memory barrier instructions, which order memory.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 454630487, 'comment_body': 'Hmm, I think it would be better to enumerate the bad instructions, rather than all of the ones that are OK.\r\n\r\nThat said, I guess it is safer to include all of the definitely OK instructions here,\r\n\r\nBut then again, is this list of instructions exhaustive enough?\r\n\r\nHow did you come up with the list?', 'comment_created': datetime.datetime(2020, 7, 14, 20, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 455236029, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236117, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236527, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236616, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236744, 'comment_body': 'Fixed in 587c227.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 455236996, 'comment_body': 'I think we should discuss this at the meeting.', 'comment_created': datetime.datetime(2020, 7, 15, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 461548945, 'comment_body': 'Resolved at the meeting.', 'comment_created': datetime.datetime(2020, 7, 28, 12, 42, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 462318460, 'comment_body': 'I suggest a comment here explaining why we need to do this.', 'comment_created': datetime.datetime(2020, 7, 29, 13, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 462437164, 'comment_body': 'Fixed in 783f53a.', 'comment_created': datetime.datetime(2020, 7, 29, 16, 40, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'fc7fa52aec70dacd5fe5bc94d347ca5cd1e4a3e8', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '44e8a2820671e19cb97cf33a78d3ad07c8ce4710', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e189a86b55de632cd7a2003aeefb8d47df09e92', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79bd821e5364ac4c99b90ef2d7756d251cd47d13', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b0aad495cf059963196b16b3e485c3665f202da', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ea026ffeeccfedcd199a53df90a7135c0508d69', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ff2bf1950b70b2639671d67c6bd2ae6cb5eabd', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f74a704a6b4f52f214fd5dd45ac77e7cdc0b2873', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c20001e1b99e70d521fbdac8ea4ff9c74e88e6b3', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a58f89e90a37ededeae9f01b5fc2a757b921a627', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a604e50ef345e75a5d46ef9e89276dfa5700ce4', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dabba72a41b5278d266de34fc48f4a0a2ab680f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd230be6ae08ee66876d7c07037302ac09be14fc2', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6782db2146bbfd5943a344e448af3b8d69550666', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bf9eea4c80994db8d9098733d4da12d259c3c83', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
467392489,spirv-fuzz: TransformationPropagateInstructionDown,Fixes #3691.,True,3692,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3692,https://github.com/KhronosGroup/SPIRV-Tools/pull/3692,closed,2070,13,16,14,0,41,0,0,[],2020-08-13 13:40:05+00:00,2020-10-06 12:38:19+00:00,4661894.0,"53 days, 22:58:14","[{'comment_id': 478292959, 'comment_body': 'Should ""predecessors"" be ""successors"" here?  And why only some of them?  Because it\'s only needed in the ones where it may be used?  In that case I\'d say ""into the necessary successors"".', 'comment_created': datetime.datetime(2020, 8, 27, 9, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478293411, 'comment_body': 'Can you comment on how the instruction to be propagated will be decided upon given this block?  I suppose it is the final instruction in the block for which propagation is possible?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 46, 27, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478294612, 'comment_body': ""I would reiterate that this may not always be needed.  Or, rather, explain when it is needed: presumably when the instruction is propagated into divergent blocks, and where its original result id is used after those blocks converge?\r\n\r\n(BTW: if that is indeed the use case, couldn't the original result id be used for the OpPhi?  Is a fresh id really required?)"", 'comment_created': datetime.datetime(2020, 8, 27, 9, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478296795, 'comment_body': 'If overflow ids are available, they can be used to provide fresh ids for successors that are not present in the map.\r\n\r\nCould you remark on that here, make sure the transformation uses overflow ids if it runs out of ids, and include at least one test that requires them?  (See the test I did for TransformationOutlineFunctions as an example.)', 'comment_created': datetime.datetime(2020, 8, 27, 9, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478297532, 'comment_body': 'Not for this PR, but I wonder whether we want to add a helper somewhere that will yield the reachable blocks of a function - perhaps a method of |Function|?  If you agree then could you open an issue?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478298034, 'comment_body': 'This could do with a bit of commentary.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478298859, 'comment_body': 'Nit: I think elsewhere we start each bullet with a capital letter.\r\n\r\nAdd a note on overflow ids if you do indeed use them.\r\n\r\nAlso in the ""every acceptable successor"" comment there is a weird line break.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478299370, 'comment_body': 'Grammar: after ""returns true iff"", you should use ""is"" or ""has"" rather than ""must be"" or ""must have"", etc.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 56, 34, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478300209, 'comment_body': 'I think these comments would be even more valuable if you could back them up by a couple of small examples to illustrate cases that are applicable/acceptable and cases that are not.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478300519, 'comment_body': 'And is it the last instruction in the block that satisfies these properties?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498159159, 'comment_body': 'Created an issue #3874.', 'comment_created': datetime.datetime(2020, 10, 1, 11, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498216014, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498216109, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498217330, 'comment_body': 'The fresh id is not required when OpPhi is created. However, I thought it would be more consistent to always use fresh ids since the original id might not always be preserved either (e.g. when OpPhi is not created).', 'comment_created': datetime.datetime(2020, 10, 1, 12, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498217419, 'comment_body': 'Fixed comments in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498217580, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498217947, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498218084, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498219399, 'comment_body': 'Fixed in c4faca9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498219635, 'comment_body': 'Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498219855, 'comment_body': 'Not necessarily. Fixed in 69b41e9.', 'comment_created': datetime.datetime(2020, 10, 1, 12, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498683372, 'comment_body': '""OpPhi instruction"" -> either ""an OpPhi instruction"" (if just one) or ""OpPhi instructions"" (if multiple could be required).', 'comment_created': datetime.datetime(2020, 10, 2, 8, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498683824, 'comment_body': 'Reading on, I guess it\'s ""an OpPhi instruction"".', 'comment_created': datetime.datetime(2020, 10, 2, 8, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498684639, 'comment_body': '""map.  We use overflow ids ..."" -> ""map, unless overflow ids are available.""', 'comment_created': datetime.datetime(2020, 10, 2, 8, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498688090, 'comment_body': '""propagate"" -> ""propagated""', 'comment_created': datetime.datetime(2020, 10, 2, 8, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498690593, 'comment_body': 'This is an excellent example!  More like this would be really good.', 'comment_created': datetime.datetime(2020, 10, 2, 8, 41, 9, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498691120, 'comment_body': 'Would you be able to give a small example here of a basic block with some instructions, such that the last 2-3 are not suitable, and explain why?', 'comment_created': datetime.datetime(2020, 10, 2, 8, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498693103, 'comment_body': ""A small example would really help here, showing where this OpPhi instruction would go.\r\n\r\nAlso, I think this could be more general (but not sure it's worth making it more general).\r\n\r\nSuppose we had a loop of this form:\r\n\r\n```\r\n     \r\n     |\r\n   HEADER <---\r\n     |        \\\r\n    BLOCK      |\r\n    /   \\      |\r\n   A    B---CONTINUE\r\n    \\  /\r\n    MERGE\r\n\r\nthen presumably if we propagated instructions from BLOCK to A and B we could Phi them together again at MERGE?"", 'comment_created': datetime.datetime(2020, 10, 2, 8, 45, 47, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498802102, 'comment_body': 'Fixed in b6fe77b.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498802175, 'comment_body': 'Fixed in b6fe77b.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 53, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498802223, 'comment_body': 'Fixed in b6fe77b.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498802403, 'comment_body': ""Thanks, I've added some more in b6fe77b."", 'comment_created': datetime.datetime(2020, 10, 2, 12, 54, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498802567, 'comment_body': 'Fixed in b6fe77b.', 'comment_created': datetime.datetime(2020, 10, 2, 12, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498803851, 'comment_body': ""Yes, I think it's worthwhile to make it more general. This would allow us, for example, to add OpPhis in certain cases when we propagate an instruction from a back-edge block into a header block and the merge block is a successor of the back-edge block. Although, I think it's a somewhat unrealistic example. Nevertheless, the change is not hard.\r\n\r\nFixed in b6fe77b."", 'comment_created': datetime.datetime(2020, 10, 2, 12, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498911769, 'comment_body': '""unittests"" -> ""unit tests""', 'comment_created': datetime.datetime(2020, 10, 2, 16, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498912020, 'comment_body': '-> ""We cannot propagate OpBranch nor OpStore""', 'comment_created': datetime.datetime(2020, 10, 2, 16, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 498915451, 'comment_body': 'Fixed in fc05d2c.', 'comment_created': datetime.datetime(2020, 10, 2, 16, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 498915500, 'comment_body': 'Fixed in fc05d2c.', 'comment_created': datetime.datetime(2020, 10, 2, 16, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'c75f8b3e375ec760556ad2a06a678ad8e038a20e', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f667298118ddc53dac6f337e694998beeec4797f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f61d65e73b5868e012afcca62d8b15320d68c43', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06386a4ff08c33b7948b71f97a77f05bdf095352', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f77f3070778ef16e5aee931299e28cb5d331068', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64c334bffe5e5aeffb92ece0b2136186c85b0cda', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5efb5d57032ebc43d95a73564d660e7c010aeaf9', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e1be1065bd88add21806dff50e0b1de9e6c475d', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f26168f48269b71647bda37d5e9ed7b0cbfce88', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c3a68c3dd7284207547f3e425b0d3c75e64a0c1', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9760ecbc8447699691fcf141108e8564dc0fc89a', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1da9232e84318919eaadc0452843f54aa2189a93', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4671a803c048df7b2d57f5f5d30f9d5e29726b83', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6930f8b316f65b470f1eb057e0bb1484b33ebb65', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12
465463111,spirv-fuzz: TransformationWrapRegionInSelection,Fixes #3675.,True,3674,https://api.github.com/repos/KhronosGroup/SPIRV-Tools/pulls/3674,https://github.com/KhronosGroup/SPIRV-Tools/pull/3674,closed,775,1,14,11,1,27,0,0,[],2020-08-10 12:14:35+00:00,2020-10-01 08:54:11+00:00,4480776.0,"51 days, 20:39:36","[{'comment_id': 467902122, 'comment_body': 'Not a big deal, but it is common to name the fuzzer passes in the plural.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 467903511, 'comment_body': 'I guess would be better to use `header_block_candidate->IsLoopHeader()` here.\r\nThe `BasicBlock` class has the `IsLoopHeader` function.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 467909298, 'comment_body': 'Also use `header_block_candidate->IsLoopHeader()` here.', 'comment_created': datetime.datetime(2020, 8, 10, 13, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 467925248, 'comment_body': ""In this case, `IsLoopHeader` won't be enough since it doesn't check for `OpSelectionMerge` instruction."", 'comment_created': datetime.datetime(2020, 8, 10, 14, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 467928070, 'comment_body': 'Fixed in b755a59.', 'comment_created': datetime.datetime(2020, 8, 10, 14, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 467928218, 'comment_body': 'Fixed in b755a59.', 'comment_created': datetime.datetime(2020, 8, 10, 14, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 467936055, 'comment_body': ""You're right."", 'comment_created': datetime.datetime(2020, 8, 10, 14, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'andreperezmaselco', 'type': 'User'}, {'comment_id': 478285832, 'comment_body': 'Did you look at FuzzerPassOutlineFunction?  The way this looks for a single-entry-single-exit region is kind of similar.  Is there scope for unifying them?', 'comment_created': datetime.datetime(2020, 8, 27, 9, 33, 49, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478286518, 'comment_body': 'Typo in this string I think.  (And minor but I would write ""should have"" rather than ""should\'ve"".)', 'comment_created': datetime.datetime(2020, 8, 27, 9, 34, 57, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478287075, 'comment_body': 'For diversity it would be nice if the transformation could specify whether the condition needs to be true or false, with the branch targets being set up correspondingly.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478289430, 'comment_body': 'I don\'t think the description is clear enough.  From reading it, I don\'t know quite what the transformation does.\r\n\r\nI\'m also not sure about the transformation name.\r\n\r\nI suggest naming it ""TransformationWrapRegionInSelection"".\r\n\r\nI would call the fields ""region_entry_block_id"", ""region_exit_block_id"".  I would also add another bool field called ""branch_condition"", so that the fuzzer pass can randomly decide whether the branch condition should be true or false (and set up the branch targets accordingly).\r\n\r\nFor the description I would say something like:\r\n\r\n""Takes a single-entry-single-exit region R, and turns it into either:\r\n\r\nif(true) { R }\r\n\r\nor\r\n\r\nif(false) { } else { R }\r\n\r\nThe entry block for R becomes a selection header and the exit block a selection merge.\r\n""\r\n\r\nI would then comment the fields as being ""The entry block for the region R"", and ""The exit block for the region R"".\r\n', 'comment_created': datetime.datetime(2020, 8, 27, 9, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 478289924, 'comment_body': 'That said, it might well be not worth it.  The conditions on the region that you require here are a bit different from the conditions required for outlining into functions.', 'comment_created': datetime.datetime(2020, 8, 27, 9, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489255389, 'comment_body': 'Indeed, conditions are a bit different between the two transformations. I left it as it is.', 'comment_created': datetime.datetime(2020, 9, 16, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 489272324, 'comment_body': 'Fixed in 44c64b8.', 'comment_created': datetime.datetime(2020, 9, 16, 8, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 489272446, 'comment_body': 'Fixed in 44c64b8.', 'comment_created': datetime.datetime(2020, 9, 16, 8, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 489272654, 'comment_body': 'Fixed in 44c64b8.', 'comment_created': datetime.datetime(2020, 9, 16, 8, 50, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 489437336, 'comment_body': 'It would be good to point out explicitly that the region R is *not* duplicated.  Perhaps this diagram would be instructive to show in the comment:\r\n\r\n```\r\n               entry\r\n entry          / \\\r\n  |             \\ / \r\nBlocks   -->   Blocks\r\n  |              |\r\n exit           exit\r\n```', 'comment_created': datetime.datetime(2020, 9, 16, 13, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489515330, 'comment_body': ""My inclination is to make the upper probability a bit lower, e.g. 70.  This transformation is cool but a little bit strange so I don't think we want to apply it too aggressively."", 'comment_created': datetime.datetime(2020, 9, 16, 15, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489519492, 'comment_body': ""#3790 will introduce:\r\n\r\n```\r\n  // Returns the second block in the pair obtained by splitting |block_id| just\r\n  // after the last OpPhi or OpVariable instruction in it. Assumes that the\r\n  // block is not a loop header.\r\n  opt::BasicBlock* SplitBlockAfterOpPhiOrOpVariable(uint32_t block_id);\r\n```\r\n\r\nCould that be used here (once it's merged)?"", 'comment_created': datetime.datetime(2020, 9, 16, 15, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489520520, 'comment_body': 'I think this is especially important to clarify now that we have DuplicateRegionWithSelection, which is in some sense very similar to this transformation except that it duplicates blocks (making it very different in practice).', 'comment_created': datetime.datetime(2020, 9, 16, 15, 18, 8, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 489523125, 'comment_body': ""I wonder how much this has in common with some of the code in TransformationOutlineFunction, which is already quite similar to code in TransformationDuplicateRegionWithSelection, and for which we have a refactoring issue (#3785).\r\n\r\nI'm fine with *not* factoring out common code here if we believe the transformations have somewhat different requirements, but it's worth considering.  Perhaps you could look at the refactoring I do when I get round to addressing #3785 and then see if you think this could make use of the functionality that I extract.  (But no need to delay this PR for that.)"", 'comment_created': datetime.datetime(2020, 9, 16, 15, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'afd', 'type': 'User'}, {'comment_id': 490154283, 'comment_body': ""Yes, I'll fix it when it's merged."", 'comment_created': datetime.datetime(2020, 9, 17, 10, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 491375685, 'comment_body': ""I agree that we need to refactor some common code out of those three transformations (TransformationOutlineFunction, TransformationDuplicateRegionWithSelection and this one). However, I'd prefer doing it in a separate PR (maybe as a part of #3785)."", 'comment_created': datetime.datetime(2020, 9, 19, 10, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 491376071, 'comment_body': 'BTW, I think some refactoring needs to be done with fuzzer passes as well.', 'comment_created': datetime.datetime(2020, 9, 19, 10, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 491376718, 'comment_body': 'Fixed in 2613291.', 'comment_created': datetime.datetime(2020, 9, 19, 10, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 491376827, 'comment_body': 'Fixed in 2613291.', 'comment_created': datetime.datetime(2020, 9, 19, 10, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}, {'comment_id': 494122738, 'comment_body': 'Fixed in f4d8d40.', 'comment_created': datetime.datetime(2020, 9, 24, 8, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Vasniktel', 'type': 'User'}]","[{'commit_sha': 'fc45abb1f2691e0ac1511e33ac2eb81464f2d605', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fdecc7bab7ba4a89d69b74a160225a51a1396a3c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4e94e5fe34bbe8652ae79f07484cabc4791d098', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b8eda28e8745b81569b3d97d3439d4ec689e8cc', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb95d8190904f9760cbeeab75bfa54a88815703c', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db532b611cdd5c6f3f5ccc5d687f101f24f25a06', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79af9abc895bc276b7a33693524320d6bbee88eb', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02f2a6a0a642859e73081153a29177127cf506a4', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48ba06d9a0171be3d5d8a579ee2123c55350ecf5', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69257d870b4bf39c7ba45df9b6cbd0b59a9e3125', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46faf619b4ffd08ea2699078e78d8752a686a89f', 'committer_username': 'Vasniktel', 'committer_name': 'Vasyl Teliman', 'committer_email': 'vasniktel@gmail.com', 'commit_date': datetime.datetime(2016, 11, 18, 20, 16, 8, tzinfo=datetime.timezone.utc)}]",Vasyl Teliman,23561899,vasniktel@gmail.com,User,,44,,32,12

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
45981801,SPIRV-Tools,KhronosGroup/SPIRV-Tools,C++,545,1041,85,243,4016,397,22,18,"[{'id': 694682623, 'number': 4397, 'closed': datetime.datetime(2021, 7, 23, 9, 9, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 20, 20, 34, tzinfo=datetime.timezone.utc), 'time_taken': 132558.0, 'time_delta': '1 day, 12:49:18', 'additions': 6, 'deletions': 2, 'state': 'closed'}, {'id': 628427346, 'number': 4260, 'closed': datetime.datetime(2021, 5, 14, 14, 0, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 1, 12, 50, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1127449.0, 'time_delta': '13 days, 1:10:49', 'additions': 18, 'deletions': 12, 'state': 'closed'}, {'id': 627271285, 'number': 4258, 'closed': datetime.datetime(2021, 5, 25, 23, 39, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 30, 11, 14, 31, tzinfo=datetime.timezone.utc), 'time_taken': 2204720.0, 'time_delta': '25 days, 12:25:20', 'additions': 31, 'deletions': 27, 'state': 'closed'}, {'id': 625572476, 'number': 4255, 'closed': datetime.datetime(2021, 4, 29, 8, 44, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 28, 20, 34, 21, tzinfo=datetime.timezone.utc), 'time_taken': 43838.0, 'time_delta': '12:10:38', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 599706365, 'number': 4215, 'closed': datetime.datetime(2021, 3, 25, 17, 20, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 13, 47, 20, tzinfo=datetime.timezone.utc), 'time_taken': 99205.0, 'time_delta': '1 day, 3:33:25', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 595392961, 'number': 4193, 'closed': datetime.datetime(2021, 3, 21, 9, 10, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 18, 10, 13, 36, tzinfo=datetime.timezone.utc), 'time_taken': 255399.0, 'time_delta': '2 days, 22:56:39', 'additions': 118, 'deletions': 47, 'state': 'closed'}, {'id': 591794833, 'number': 4180, 'closed': datetime.datetime(2021, 3, 14, 1, 52, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 12, 16, 1, 58, tzinfo=datetime.timezone.utc), 'time_taken': 121807.0, 'time_delta': '1 day, 9:50:07', 'additions': 82, 'deletions': 0, 'state': 'closed'}, {'id': 585480261, 'number': 4159, 'closed': datetime.datetime(2021, 3, 5, 11, 13, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 10, 8, 31, tzinfo=datetime.timezone.utc), 'time_taken': 3897.0, 'time_delta': '1:04:57', 'additions': 23, 'deletions': 13, 'state': 'closed'}, {'id': 568792018, 'number': 4140, 'closed': datetime.datetime(2021, 3, 5, 14, 27, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 6, 13, 45, 53, tzinfo=datetime.timezone.utc), 'time_taken': 2335304.0, 'time_delta': '27 days, 0:41:44', 'additions': 501, 'deletions': 94, 'state': 'closed'}, {'id': 568668327, 'number': 4137, 'closed': datetime.datetime(2021, 3, 3, 15, 34, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 5, 23, 37, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2217460.0, 'time_delta': '25 days, 15:57:40', 'additions': 512, 'deletions': 429, 'state': 'closed'}, {'id': 514354322, 'number': 4009, 'closed': datetime.datetime(2020, 11, 3, 15, 6, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 2, 21, 59, 28, tzinfo=datetime.timezone.utc), 'time_taken': 61648.0, 'time_delta': '17:07:28', 'additions': 0, 'deletions': 6, 'state': 'closed'}, {'id': 513681215, 'number': 4006, 'closed': datetime.datetime(2020, 11, 3, 15, 3, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 1, 19, 49, 43, tzinfo=datetime.timezone.utc), 'time_taken': 155606.0, 'time_delta': '1 day, 19:13:26', 'additions': 197, 'deletions': 72, 'state': 'closed'}, {'id': 510795133, 'number': 3995, 'closed': datetime.datetime(2020, 11, 3, 15, 9, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 27, 14, 25, 33, tzinfo=datetime.timezone.utc), 'time_taken': 607444.0, 'time_delta': '7 days, 0:44:04', 'additions': 34, 'deletions': 29, 'state': 'closed'}, {'id': 508934013, 'number': 3988, 'closed': datetime.datetime(2020, 10, 23, 13, 52, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 23, 12, 30, 14, tzinfo=datetime.timezone.utc), 'time_taken': 4929.0, 'time_delta': '1:22:09', 'additions': 68, 'deletions': 9, 'state': 'closed'}, {'id': 500942410, 'number': 3904, 'closed': datetime.datetime(2020, 10, 23, 13, 49, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 10, 9, 8, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1140076.0, 'time_delta': '13 days, 4:41:16', 'additions': 270, 'deletions': 25, 'state': 'closed'}, {'id': 498341481, 'number': 3883, 'closed': datetime.datetime(2020, 10, 6, 11, 6, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 6, 7, 48, 31, tzinfo=datetime.timezone.utc), 'time_taken': 11903.0, 'time_delta': '3:18:23', 'additions': 24, 'deletions': 28, 'state': 'closed'}, {'id': 496410698, 'number': 3879, 'closed': datetime.datetime(2020, 10, 2, 7, 51, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 1, 17, 5, 15, tzinfo=datetime.timezone.utc), 'time_taken': 53200.0, 'time_delta': '14:46:40', 'additions': 1671, 'deletions': 1596, 'state': 'closed'}, {'id': 495490710, 'number': 3868, 'closed': datetime.datetime(2020, 9, 30, 16, 5, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 30, 12, 58, 4, tzinfo=datetime.timezone.utc), 'time_taken': 11227.0, 'time_delta': '3:07:07', 'additions': 12, 'deletions': 14, 'state': 'closed'}, {'id': 495487716, 'number': 3867, 'closed': datetime.datetime(2020, 10, 1, 10, 48, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 30, 12, 53, 3, tzinfo=datetime.timezone.utc), 'time_taken': 78945.0, 'time_delta': '21:55:45', 'additions': 361, 'deletions': 236, 'state': 'closed'}, {'id': 495436964, 'number': 3865, 'closed': datetime.datetime(2020, 10, 1, 8, 6, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 30, 11, 20, 13, tzinfo=datetime.timezone.utc), 'time_taken': 74748.0, 'time_delta': '20:45:48', 'additions': 64, 'deletions': 62, 'state': 'closed'}, {'id': 491714979, 'number': 3837, 'closed': datetime.datetime(2020, 9, 24, 11, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 23, 11, 42, 42, tzinfo=datetime.timezone.utc), 'time_taken': 85518.0, 'time_delta': '23:45:18', 'additions': 1265, 'deletions': 1325, 'state': 'closed'}, {'id': 491023591, 'number': 3833, 'closed': datetime.datetime(2020, 9, 22, 20, 35, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 22, 15, 29, 17, tzinfo=datetime.timezone.utc), 'time_taken': 18400.0, 'time_delta': '5:06:40', 'additions': 114, 'deletions': 23, 'state': 'closed'}, {'id': 491001225, 'number': 3832, 'closed': datetime.datetime(2020, 9, 24, 13, 18, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 22, 14, 56, 32, tzinfo=datetime.timezone.utc), 'time_taken': 166896.0, 'time_delta': '1 day, 22:21:36', 'additions': 76, 'deletions': 2, 'state': 'closed'}, {'id': 487818525, 'number': 3807, 'closed': datetime.datetime(2020, 9, 16, 13, 22, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 16, 8, 22, 26, tzinfo=datetime.timezone.utc), 'time_taken': 17997.0, 'time_delta': '4:59:57', 'additions': 1, 'deletions': 24, 'state': 'closed'}, {'id': 472482921, 'number': 3742, 'closed': datetime.datetime(2020, 9, 15, 16, 3, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 12, 28, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1913652.0, 'time_delta': '22 days, 3:34:12', 'additions': 105, 'deletions': 21, 'state': 'closed'}, {'id': 472442190, 'number': 3740, 'closed': datetime.datetime(2020, 8, 25, 8, 50, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 24, 11, 8, 31, tzinfo=datetime.timezone.utc), 'time_taken': 78090.0, 'time_delta': '21:41:30', 'additions': 22, 'deletions': 41, 'state': 'closed'}, {'id': 471966563, 'number': 3737, 'closed': datetime.datetime(2020, 9, 1, 11, 45, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 9, 47, 37, tzinfo=datetime.timezone.utc), 'time_taken': 871056.0, 'time_delta': '10 days, 1:57:36', 'additions': 746, 'deletions': 60, 'state': 'closed'}, {'id': 471734788, 'number': 3736, 'closed': datetime.datetime(2020, 9, 2, 13, 14, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 16, 40, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1024458.0, 'time_delta': '11 days, 20:34:18', 'additions': 104, 'deletions': 2, 'state': 'closed'}, {'id': 470884604, 'number': 3729, 'closed': datetime.datetime(2020, 9, 15, 22, 35, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 12, 47, 31, tzinfo=datetime.timezone.utc), 'time_taken': 2281692.0, 'time_delta': '26 days, 9:48:12', 'additions': 144, 'deletions': 22, 'state': 'closed'}, {'id': 468029249, 'number': 3700, 'closed': datetime.datetime(2020, 9, 15, 14, 4, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 14, 54, 7, tzinfo=datetime.timezone.utc), 'time_taken': 2761833.0, 'time_delta': '31 days, 23:10:33', 'additions': 1112, 'deletions': 18, 'state': 'closed'}, {'id': 467939698, 'number': 3699, 'closed': datetime.datetime(2020, 8, 25, 17, 11, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 14, 11, 47, 20, tzinfo=datetime.timezone.utc), 'time_taken': 969858.0, 'time_delta': '11 days, 5:24:18', 'additions': 1068, 'deletions': 862, 'state': 'closed'}, {'id': 467392489, 'number': 3692, 'closed': datetime.datetime(2020, 10, 6, 12, 38, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 13, 40, 5, tzinfo=datetime.timezone.utc), 'time_taken': 4661894.0, 'time_delta': '53 days, 22:58:14', 'additions': 2070, 'deletions': 13, 'state': 'closed'}, {'id': 466847745, 'number': 3689, 'closed': datetime.datetime(2020, 8, 14, 11, 29, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 15, 29, 33, tzinfo=datetime.timezone.utc), 'time_taken': 158403.0, 'time_delta': '1 day, 20:00:03', 'additions': 95, 'deletions': 3, 'state': 'closed'}, {'id': 466240012, 'number': 3685, 'closed': datetime.datetime(2020, 8, 12, 15, 39, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 17, 12, 44, tzinfo=datetime.timezone.utc), 'time_taken': 80800.0, 'time_delta': '22:26:40', 'additions': 77, 'deletions': 16, 'state': 'closed'}, {'id': 466076452, 'number': 3683, 'closed': datetime.datetime(2020, 8, 12, 17, 0, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 12, 35, 21, tzinfo=datetime.timezone.utc), 'time_taken': 102321.0, 'time_delta': '1 day, 4:25:21', 'additions': 162, 'deletions': 17, 'state': 'closed'}, {'id': 466001554, 'number': 3680, 'closed': datetime.datetime(2020, 8, 13, 13, 9, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 10, 0, 40, tzinfo=datetime.timezone.utc), 'time_taken': 184158.0, 'time_delta': '2 days, 3:09:18', 'additions': 13, 'deletions': 2, 'state': 'closed'}, {'id': 465463111, 'number': 3674, 'closed': datetime.datetime(2020, 10, 1, 8, 54, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 12, 14, 35, tzinfo=datetime.timezone.utc), 'time_taken': 4480776.0, 'time_delta': '51 days, 20:39:36', 'additions': 775, 'deletions': 1, 'state': 'closed'}, {'id': 462725357, 'number': 3651, 'closed': datetime.datetime(2020, 8, 4, 16, 11, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 4, 12, 9, 49, tzinfo=datetime.timezone.utc), 'time_taken': 14501.0, 'time_delta': '4:01:41', 'additions': 137, 'deletions': 1, 'state': 'closed'}, {'id': 461844717, 'number': 3642, 'closed': datetime.datetime(2020, 8, 5, 18, 21, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 18, 46, 59, tzinfo=datetime.timezone.utc), 'time_taken': 257679.0, 'time_delta': '2 days, 23:34:39', 'additions': 321, 'deletions': 31, 'state': 'closed'}, {'id': 461827194, 'number': 3640, 'closed': datetime.datetime(2020, 8, 5, 18, 17, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 16, 14, 50, tzinfo=datetime.timezone.utc), 'time_taken': 266558.0, 'time_delta': '3 days, 2:02:38', 'additions': 190, 'deletions': 3, 'state': 'closed'}, {'id': 461795055, 'number': 3638, 'closed': datetime.datetime(2020, 8, 5, 10, 54, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 2, 11, 35, 1, tzinfo=datetime.timezone.utc), 'time_taken': 256751.0, 'time_delta': '2 days, 23:19:11', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 460177156, 'number': 3630, 'closed': datetime.datetime(2020, 8, 4, 18, 10, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 14, 4, 36, tzinfo=datetime.timezone.utc), 'time_taken': 360346.0, 'time_delta': '4 days, 4:05:46', 'additions': 185, 'deletions': 23, 'state': 'closed'}, {'id': 459534314, 'number': 3625, 'closed': datetime.datetime(2020, 8, 4, 14, 4, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 19, 35, 44, tzinfo=datetime.timezone.utc), 'time_taken': 412114.0, 'time_delta': '4 days, 18:28:34', 'additions': 179, 'deletions': 64, 'state': 'closed'}, {'id': 459234457, 'number': 3623, 'closed': datetime.datetime(2020, 7, 31, 12, 53, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 14, 24, 16, tzinfo=datetime.timezone.utc), 'time_taken': 80965.0, 'time_delta': '22:29:25', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 459223997, 'number': 3622, 'closed': datetime.datetime(2020, 7, 30, 15, 51, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 30, 14, 14, 43, tzinfo=datetime.timezone.utc), 'time_taken': 5807.0, 'time_delta': '1:36:47', 'additions': 41, 'deletions': 7, 'state': 'closed'}, {'id': 457999988, 'number': 3608, 'closed': datetime.datetime(2020, 7, 29, 16, 47, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 19, 16, 34, tzinfo=datetime.timezone.utc), 'time_taken': 77439.0, 'time_delta': '21:30:39', 'additions': 65, 'deletions': 52, 'state': 'closed'}, {'id': 457390921, 'number': 3602, 'closed': datetime.datetime(2020, 7, 29, 16, 48, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 27, 20, 40, 47, tzinfo=datetime.timezone.utc), 'time_taken': 158835.0, 'time_delta': '1 day, 20:07:15', 'additions': 175, 'deletions': 36, 'state': 'closed'}, {'id': 455844830, 'number': 3583, 'closed': datetime.datetime(2020, 7, 24, 6, 57, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 17, 6, 54, tzinfo=datetime.timezone.utc), 'time_taken': 49855.0, 'time_delta': '13:50:55', 'additions': 76, 'deletions': 67, 'state': 'closed'}, {'id': 455659677, 'number': 3578, 'closed': datetime.datetime(2020, 7, 23, 16, 19, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 23, 12, 0, 19, tzinfo=datetime.timezone.utc), 'time_taken': 15535.0, 'time_delta': '4:18:55', 'additions': 1218, 'deletions': 120, 'state': 'closed'}, {'id': 454986324, 'number': 3572, 'closed': datetime.datetime(2020, 7, 23, 17, 1, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 9, 12, 2, tzinfo=datetime.timezone.utc), 'time_taken': 114550.0, 'time_delta': '1 day, 7:49:10', 'additions': 139, 'deletions': 93, 'state': 'closed'}, {'id': 454527277, 'number': 3566, 'closed': datetime.datetime(2020, 7, 22, 18, 3, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 14, 3, 19, tzinfo=datetime.timezone.utc), 'time_taken': 100839.0, 'time_delta': '1 day, 4:00:39', 'additions': 197, 'deletions': 53, 'state': 'closed'}, {'id': 454295939, 'number': 3565, 'closed': datetime.datetime(2020, 7, 21, 12, 30, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 9, 8, 20, tzinfo=datetime.timezone.utc), 'time_taken': 12129.0, 'time_delta': '3:22:09', 'additions': 108, 'deletions': 170, 'state': 'closed'}, {'id': 453778188, 'number': 3563, 'closed': datetime.datetime(2020, 7, 21, 7, 59, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 19, 48, 59, tzinfo=datetime.timezone.utc), 'time_taken': 43815.0, 'time_delta': '12:10:15', 'additions': 426, 'deletions': 354, 'state': 'closed'}, {'id': 453484350, 'number': 3561, 'closed': datetime.datetime(2020, 7, 20, 19, 10, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 20, 14, 4, 50, tzinfo=datetime.timezone.utc), 'time_taken': 18360.0, 'time_delta': '5:06:00', 'additions': 104, 'deletions': 16, 'state': 'closed'}, {'id': 449475053, 'number': 3538, 'closed': datetime.datetime(2020, 7, 29, 21, 6, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 15, 13, 17, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1237722.0, 'time_delta': '14 days, 7:48:42', 'additions': 91, 'deletions': 15, 'state': 'closed'}, {'id': 449022504, 'number': 3531, 'closed': datetime.datetime(2020, 7, 15, 16, 37, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 14, 17, 45, 59, tzinfo=datetime.timezone.utc), 'time_taken': 82280.0, 'time_delta': '22:51:20', 'additions': 847, 'deletions': 1049, 'state': 'closed'}, {'id': 448258434, 'number': 3523, 'closed': datetime.datetime(2020, 7, 16, 13, 7, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 13, 31, 52, tzinfo=datetime.timezone.utc), 'time_taken': 257717.0, 'time_delta': '2 days, 23:35:17', 'additions': 809, 'deletions': 10, 'state': 'closed'}, {'id': 447773704, 'number': 3516, 'closed': datetime.datetime(2020, 7, 15, 11, 59, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 11, 14, 17, 35, tzinfo=datetime.timezone.utc), 'time_taken': 337321.0, 'time_delta': '3 days, 21:42:01', 'additions': 136, 'deletions': 3, 'state': 'closed'}, {'id': 447447679, 'number': 3510, 'closed': datetime.datetime(2020, 7, 11, 7, 57, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 13, 41, 29, tzinfo=datetime.timezone.utc), 'time_taken': 65739.0, 'time_delta': '18:15:39', 'additions': 0, 'deletions': 72, 'state': 'closed'}, {'id': 446922583, 'number': 3507, 'closed': datetime.datetime(2020, 7, 11, 6, 43, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 15, 8, 55, tzinfo=datetime.timezone.utc), 'time_taken': 142452.0, 'time_delta': '1 day, 15:34:12', 'additions': 52, 'deletions': 45, 'state': 'closed'}, {'id': 446862374, 'number': 3506, 'closed': datetime.datetime(2020, 7, 20, 14, 6, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 13, 30, 49, tzinfo=datetime.timezone.utc), 'time_taken': 952530.0, 'time_delta': '11 days, 0:35:30', 'additions': 1475, 'deletions': 568, 'state': 'closed'}, {'id': 444007267, 'number': 3487, 'closed': datetime.datetime(2020, 7, 7, 9, 46, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 3, 11, 24, 29, tzinfo=datetime.timezone.utc), 'time_taken': 339695.0, 'time_delta': '3 days, 22:21:35', 'additions': 244, 'deletions': 26, 'state': 'closed'}, {'id': 442598374, 'number': 3481, 'closed': datetime.datetime(2020, 7, 2, 9, 51, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 10, 16, 50, tzinfo=datetime.timezone.utc), 'time_taken': 84861.0, 'time_delta': '23:34:21', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 442536544, 'number': 3479, 'closed': datetime.datetime(2020, 7, 2, 9, 46, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 8, 38, 21, tzinfo=datetime.timezone.utc), 'time_taken': 90508.0, 'time_delta': '1 day, 1:08:28', 'additions': 256, 'deletions': 43, 'state': 'closed'}, {'id': 442130115, 'number': 3478, 'closed': datetime.datetime(2020, 8, 11, 9, 24, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 15, 58, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3605135.0, 'time_delta': '41 days, 17:25:35', 'additions': 1440, 'deletions': 0, 'state': 'closed'}, {'id': 441998353, 'number': 3477, 'closed': datetime.datetime(2020, 8, 3, 15, 45, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 30, 12, 36, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2948941.0, 'time_delta': '34 days, 3:09:01', 'additions': 580, 'deletions': 0, 'state': 'closed'}, {'id': 441058250, 'number': 3475, 'closed': datetime.datetime(2020, 7, 3, 16, 37, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 13, 38, 37, tzinfo=datetime.timezone.utc), 'time_taken': 442736.0, 'time_delta': '5 days, 2:58:56', 'additions': 471, 'deletions': 0, 'state': 'closed'}, {'id': 441026921, 'number': 3472, 'closed': datetime.datetime(2020, 7, 16, 10, 59, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 9, 5, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1561999.0, 'time_delta': '18 days, 1:53:19', 'additions': 616, 'deletions': 38, 'state': 'closed'}, {'id': 440651265, 'number': 3469, 'closed': datetime.datetime(2020, 6, 30, 14, 20, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 15, 32, 49, tzinfo=datetime.timezone.utc), 'time_taken': 341259.0, 'time_delta': '3 days, 22:47:39', 'additions': 481, 'deletions': 634, 'state': 'closed'}, {'id': 437551913, 'number': 3455, 'closed': datetime.datetime(2020, 7, 21, 20, 2, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 14, 21, 17, tzinfo=datetime.timezone.utc), 'time_taken': 2612477.0, 'time_delta': '30 days, 5:41:17', 'additions': 1278, 'deletions': 79, 'state': 'closed'}, {'id': 437550773, 'number': 3454, 'closed': datetime.datetime(2020, 6, 23, 15, 41, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 21, 14, 12, 35, tzinfo=datetime.timezone.utc), 'time_taken': 178151.0, 'time_delta': '2 days, 1:29:11', 'additions': 17, 'deletions': 0, 'state': 'closed'}, {'id': 437416318, 'number': 3452, 'closed': datetime.datetime(2020, 6, 28, 14, 14, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 20, 14, 6, 34, tzinfo=datetime.timezone.utc), 'time_taken': 691685.0, 'time_delta': '8 days, 0:08:05', 'additions': 66, 'deletions': 0, 'state': 'closed'}, {'id': 436532672, 'number': 3447, 'closed': datetime.datetime(2020, 7, 12, 8, 59, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 14, 58, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2052061.0, 'time_delta': '23 days, 18:01:01', 'additions': 1260, 'deletions': 0, 'state': 'closed'}, {'id': 435213476, 'number': 3437, 'closed': datetime.datetime(2020, 6, 17, 14, 15, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 13, 27, 32, tzinfo=datetime.timezone.utc), 'time_taken': 89299.0, 'time_delta': '1 day, 0:48:19', 'additions': 12, 'deletions': 0, 'state': 'closed'}, {'id': 435197883, 'number': 3435, 'closed': datetime.datetime(2020, 6, 17, 14, 10, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 13, 0, 42, tzinfo=datetime.timezone.utc), 'time_taken': 90565.0, 'time_delta': '1 day, 1:09:25', 'additions': 10, 'deletions': 0, 'state': 'closed'}, {'id': 435064821, 'number': 3434, 'closed': datetime.datetime(2020, 7, 9, 10, 3, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 16, 8, 42, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1992068.0, 'time_delta': '23 days, 1:21:08', 'additions': 683, 'deletions': 7, 'state': 'closed'}, {'id': 433503996, 'number': 3427, 'closed': datetime.datetime(2020, 6, 12, 23, 3, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 7, 5, 4, tzinfo=datetime.timezone.utc), 'time_taken': 57502.0, 'time_delta': '15:58:22', 'additions': 169, 'deletions': 88, 'state': 'closed'}, {'id': 433054032, 'number': 3423, 'closed': datetime.datetime(2020, 6, 19, 15, 38, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 12, 50, 13, tzinfo=datetime.timezone.utc), 'time_taken': 701320.0, 'time_delta': '8 days, 2:48:40', 'additions': 444, 'deletions': 0, 'state': 'closed'}, {'id': 432940771, 'number': 3421, 'closed': datetime.datetime(2020, 6, 23, 14, 0, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 9, 5, tzinfo=datetime.timezone.utc), 'time_taken': 1054529.0, 'time_delta': '12 days, 4:55:29', 'additions': 496, 'deletions': 16, 'state': 'closed'}, {'id': 432429059, 'number': 3414, 'closed': datetime.datetime(2020, 6, 19, 15, 40, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 12, 42, 51, tzinfo=datetime.timezone.utc), 'time_taken': 788248.0, 'time_delta': '9 days, 2:57:28', 'additions': 221, 'deletions': 65, 'state': 'closed'}, {'id': 428391638, 'number': 3401, 'closed': datetime.datetime(2020, 6, 5, 13, 34, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 11, 25, 28, tzinfo=datetime.timezone.utc), 'time_taken': 7752.0, 'time_delta': '2:09:12', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 427948684, 'number': 3399, 'closed': datetime.datetime(2020, 6, 23, 16, 40, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 16, 18, 29, tzinfo=datetime.timezone.utc), 'time_taken': 1642936.0, 'time_delta': '19 days, 0:22:16', 'additions': 699, 'deletions': 1, 'state': 'closed'}, {'id': 427144990, 'number': 3396, 'closed': datetime.datetime(2020, 6, 5, 11, 28, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 11, 38, 4, tzinfo=datetime.timezone.utc), 'time_taken': 172204.0, 'time_delta': '1 day, 23:50:04', 'additions': 50, 'deletions': 38, 'state': 'closed'}, {'id': 426633878, 'number': 3391, 'closed': datetime.datetime(2020, 6, 30, 20, 13, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 2, 14, 45, 30, tzinfo=datetime.timezone.utc), 'time_taken': 2438857.0, 'time_delta': '28 days, 5:27:37', 'additions': 817, 'deletions': 0, 'state': 'closed'}, {'id': 421511377, 'number': 3373, 'closed': datetime.datetime(2020, 6, 10, 0, 1, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 18, 36, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1661104.0, 'time_delta': '19 days, 5:25:04', 'additions': 300, 'deletions': 2, 'state': 'closed'}, {'id': 418593527, 'number': 3348, 'closed': datetime.datetime(2020, 5, 19, 14, 54, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 15, 13, 28, 58, tzinfo=datetime.timezone.utc), 'time_taken': 350708.0, 'time_delta': '4 days, 1:25:08', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 417539354, 'number': 3341, 'closed': datetime.datetime(2020, 5, 19, 14, 54, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 18, 34, 25, tzinfo=datetime.timezone.utc), 'time_taken': 505231.0, 'time_delta': '5 days, 20:20:31', 'additions': 131, 'deletions': 705, 'state': 'closed'}, {'id': 389992504, 'number': 3238, 'closed': datetime.datetime(2020, 6, 10, 13, 13, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 17, 18, 2, 34, tzinfo=datetime.timezone.utc), 'time_taken': 7326667.0, 'time_delta': '84 days, 19:11:07', 'additions': 125, 'deletions': 1, 'state': 'closed'}, {'id': 387795487, 'number': 3228, 'closed': datetime.datetime(2020, 3, 13, 20, 23, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 13, 14, 7, 2, tzinfo=datetime.timezone.utc), 'time_taken': 22560.0, 'time_delta': '6:16:00', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 386535765, 'number': 3225, 'closed': datetime.datetime(2020, 3, 12, 12, 40, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 11, 7, 55, 13, tzinfo=datetime.timezone.utc), 'time_taken': 103525.0, 'time_delta': '1 day, 4:45:25', 'additions': 73, 'deletions': 15, 'state': 'closed'}, {'id': 385289514, 'number': 3220, 'closed': datetime.datetime(2020, 3, 9, 16, 17, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 8, 17, 6, 13, tzinfo=datetime.timezone.utc), 'time_taken': 83491.0, 'time_delta': '23:11:31', 'additions': 3, 'deletions': 19, 'state': 'closed'}, {'id': 384705879, 'number': 3212, 'closed': datetime.datetime(2020, 3, 8, 14, 27, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 8, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 192513.0, 'time_delta': '2 days, 5:28:33', 'additions': 945, 'deletions': 2, 'state': 'closed'}]"
