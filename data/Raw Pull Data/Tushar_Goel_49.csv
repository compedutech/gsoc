pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
416841030,Add support for downloading http and ftp urls,"I have modified the existing API according to issue #20 and #21, test cases are pending I will try to update them by tommorow. 
Signed-off-by: TG1999 <tushar.goel.dav@gmail.com>",True,22,https://api.github.com/repos/aboutcode-org/fetchcode/pulls/22,https://github.com/aboutcode-org/fetchcode/pull/22,closed,205,101,6,1,2,67,0,0,[],2020-05-12 16:37:58+00:00,2020-07-22 13:36:13+00:00,6123495.0,"70 days, 20:58:15","[{'comment_id': 424714673, 'comment_body': 'What is the purpose of `filename`? ', 'comment_created': datetime.datetime(2020, 5, 13, 20, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 424888184, 'comment_body': 'If user wants to save the file at a customised location, then can specify the location here.', 'comment_created': datetime.datetime(2020, 5, 14, 6, 0, 27, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 425177605, 'comment_body': 'Ok, I would change this variable name to something more descriptive, like `location` or `download_path` or something similar. ', 'comment_created': datetime.datetime(2020, 5, 14, 14, 24, 14, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 425179707, 'comment_body': 'Agreed, changing the name', 'comment_created': datetime.datetime(2020, 5, 14, 14, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 425226794, 'comment_body': '@majurg , I have changed the name', 'comment_created': datetime.datetime(2020, 5, 14, 15, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 430552758, 'comment_body': '@majurg can you please also tell what is left in this PR :D', 'comment_created': datetime.datetime(2020, 5, 26, 16, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 433403520, 'comment_body': 'Can you except the exact Exception here? This way we know if some other unknown exception is raised, instead of catching everything. ', 'comment_created': datetime.datetime(2020, 6, 1, 18, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 433404140, 'comment_body': ""Couldnt these be replaced with something like `content_type = info.get('Content-Type')` instead of using if statements."", 'comment_created': datetime.datetime(2020, 6, 1, 18, 14, 9, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 433405889, 'comment_body': 'Okay got this', 'comment_created': datetime.datetime(2020, 6, 1, 18, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 433405949, 'comment_body': 'Got this one', 'comment_created': datetime.datetime(2020, 6, 1, 18, 17, 45, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 433861218, 'comment_body': ""I have added another if for handling type of size, it will be None if its not found else it's needed to be converted into int"", 'comment_created': datetime.datetime(2020, 6, 2, 13, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 433862022, 'comment_body': '@majurg review it please :D  ', 'comment_created': datetime.datetime(2020, 6, 2, 13, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440682372, 'comment_body': 'Are you really dropping using requests?', 'comment_created': datetime.datetime(2020, 6, 16, 8, 37, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440682627, 'comment_body': 'Why return the scheme too?', 'comment_created': datetime.datetime(2020, 6, 16, 8, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440683363, 'comment_body': 'What is location about?', 'comment_created': datetime.datetime(2020, 6, 16, 8, 38, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440686167, 'comment_body': 'Yes, I thought I should use urllib since it can support both http and ftp urls', 'comment_created': datetime.datetime(2020, 6, 16, 8, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440687627, 'comment_body': ""What I thought thay since earlier our code was only for http based URLs, since we are also supporting ftp based URLs, so I should also save the scheme, so what's your thoughts over it? Should we save it or not :)"", 'comment_created': datetime.datetime(2020, 6, 16, 8, 45, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440688614, 'comment_body': 'If user wants to give a customised location of its own choice, while using this library, they can use this location parameter. ', 'comment_created': datetime.datetime(2020, 6, 16, 8, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440861326, 'comment_body': 'It is already in the URL, so what will you do with the returned value?', 'comment_created': datetime.datetime(2020, 6, 16, 13, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440862397, 'comment_body': 'Okay got this, making changes for this :D', 'comment_created': datetime.datetime(2020, 6, 16, 13, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440863934, 'comment_body': 'hum... I am not sure that the convenience is worth the possible trouble. ""requests"" is a tad more robust than the plain urllib AFAIK. Also have you considered https://pypi.org/project/ftputil/ also for FTP?', 'comment_created': datetime.datetime(2020, 6, 16, 13, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440864332, 'comment_body': 'OK, then explain that in the function docstring', 'comment_created': datetime.datetime(2020, 6, 16, 13, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440865457, 'comment_body': 'Why the blank line? Does it help with readability here?', 'comment_created': datetime.datetime(2020, 6, 16, 13, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440867517, 'comment_body': 'Please tiny test files that are just a few bytes. https://github.com/nexB/fetchcode/blob/4ad6ca4384e789e4b3cff5e1daf28a927f07be7f/tests/data/img.png is  way too big we like to try to avoid polluting the version control history with big test files when possible.\r\n\r\nFurthermore it may a copyrighted image? ', 'comment_created': datetime.datetime(2020, 6, 16, 13, 52, 56, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440868040, 'comment_body': 'Do we really need an ""api"" module?', 'comment_created': datetime.datetime(2020, 6, 16, 13, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440869410, 'comment_body': 'Okay got this one,', 'comment_created': datetime.datetime(2020, 6, 16, 13, 55, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440869821, 'comment_body': 'Okay got this one ', 'comment_created': datetime.datetime(2020, 6, 16, 13, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440870000, 'comment_body': 'Got this one', 'comment_created': datetime.datetime(2020, 6, 16, 13, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440870294, 'comment_body': 'Can you elaborate a little :sweat_smile: ', 'comment_created': datetime.datetime(2020, 6, 16, 13, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440908380, 'comment_body': 'may be you could use a flatter namespace and have your api functions attached directly under fetchcode.__init__.py?', 'comment_created': datetime.datetime(2020, 6, 16, 14, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 440945231, 'comment_body': 'what about we use ftplib ?', 'comment_created': datetime.datetime(2020, 6, 16, 15, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443139433, 'comment_body': 'Indent by 4 spaces ... but you likely would want these to be in the __init__ docstring', 'comment_created': datetime.datetime(2020, 6, 20, 15, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443139526, 'comment_body': 'What is the most salient attribute of a Response? IMHO you should order the attributes as: url, size, content_type, location', 'comment_created': datetime.datetime(2020, 6, 20, 15, 34, 47, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443139648, 'comment_body': 'For ""at the `location` location string""\r\nwhat about instead:\r\n""saving the content in a file at `location`""\r\n? ', 'comment_created': datetime.datetime(2020, 6, 20, 15, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443139703, 'comment_body': 'What if no content_type is returned?', 'comment_created': datetime.datetime(2020, 6, 20, 15, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443139848, 'comment_body': ' else use tempfile. --> `otherwise create and return a temporary file` may be better?\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 20, 15, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443139934, 'comment_body': 'Use instead `if not location:`\r\nBut is it really a worthy convenience to have that optional feature? ', 'comment_created': datetime.datetime(2020, 6, 20, 15, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443140000, 'comment_body': 'What if `fetcher.get(scheme)` returns None? ', 'comment_created': datetime.datetime(2020, 6, 20, 15, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443140045, 'comment_body': 'Did you keep the tests somehow?', 'comment_created': datetime.datetime(2020, 6, 20, 15, 43, 28, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443140077, 'comment_body': 'Note that rather than only checking the presence of an attribute, check its value', 'comment_created': datetime.datetime(2020, 6, 20, 15, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443140262, 'comment_body': 'These all are deleted :p', 'comment_created': datetime.datetime(2020, 6, 20, 15, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443140269, 'comment_body': 'This is also deleted ', 'comment_created': datetime.datetime(2020, 6, 20, 15, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443140377, 'comment_body': 'test_fetch is the new file now where tests reside regarding this code', 'comment_created': datetime.datetime(2020, 6, 20, 15, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443140406, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2020, 6, 20, 15, 49, 28, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443140411, 'comment_body': 'Got it', 'comment_created': datetime.datetime(2020, 6, 20, 15, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443140422, 'comment_body': 'Makes sense to me too ', 'comment_created': datetime.datetime(2020, 6, 20, 15, 49, 49, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443140442, 'comment_body': 'Got this', 'comment_created': datetime.datetime(2020, 6, 20, 15, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443140449, 'comment_body': 'Makes sense to me too', 'comment_created': datetime.datetime(2020, 6, 20, 15, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443140478, 'comment_body': 'Got this', 'comment_created': datetime.datetime(2020, 6, 20, 15, 50, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443140517, 'comment_body': 'I need your suggestion over this, what are your thoughts over this', 'comment_created': datetime.datetime(2020, 6, 20, 15, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443886416, 'comment_body': 'This is not very readable.', 'comment_created': datetime.datetime(2020, 6, 22, 23, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 443886589, 'comment_body': 'Lets remove the `via` string from all these methods.', 'comment_created': datetime.datetime(2020, 6, 22, 23, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 443886698, 'comment_body': 'This is redundant.', 'comment_created': datetime.datetime(2020, 6, 22, 23, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 444158099, 'comment_body': 'Okay got this !!', 'comment_created': datetime.datetime(2020, 6, 23, 11, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 444158225, 'comment_body': 'Got this one', 'comment_created': datetime.datetime(2020, 6, 23, 11, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 444158462, 'comment_body': 'Oops, making it right, Thanks :)', 'comment_created': datetime.datetime(2020, 6, 23, 11, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 444266231, 'comment_body': 'What does the response class from `requests` look like? We may want to support a few more fields on our `Response` object and this may have some insights that we have overlooked.', 'comment_created': datetime.datetime(2020, 6, 23, 14, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 444281951, 'comment_body': ""```['__attrs__', '__bool__', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__enter__', '__eq__', '__exit__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__nonzero__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_content', '_content_consumed', '_next', 'apparent_encoding', 'close', 'connection', 'content', 'cookies', 'elapsed', 'encoding', 'headers', 'history', 'is_permanent_redirect', 'is_redirect', 'iter_content', 'iter_lines', 'json', 'links', 'next', 'ok', 'raise_for_status', 'raw', 'reason', 'request', 'status_code', 'text', 'url']``` it looks like this"", 'comment_created': datetime.datetime(2020, 6, 23, 14, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 445554349, 'comment_body': '@majurg ping, can you tell on which parameters we should start working :)', 'comment_created': datetime.datetime(2020, 6, 25, 13, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 447209832, 'comment_body': '@TG1999 We probably want to store `headers, status_code, encoding, content` and maybe others. \r\n\r\nWe may want to subclass the `requests` Response object and just add on our own fields. @pombredanne Thoughts?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 448256462, 'comment_body': 'Please RestructuredText (.rst) rather than Markdown for docs.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448257737, 'comment_body': 'IMHO this should raise an exception when there is an unsupported/unknown scheme.', 'comment_created': datetime.datetime(2020, 7, 1, 10, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448258461, 'comment_body': ""that's a collection, so the variable name should be plural"", 'comment_created': datetime.datetime(2020, 7, 1, 10, 6, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 448259246, 'comment_body': 'When the scheme is not there we should have an exception and not return None.\r\n', 'comment_created': datetime.datetime(2020, 7, 1, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 450560770, 'comment_body': 'Right now this `Response` class does not contain the actual data/content after fetching a uri. I am almost certain we want fetchcode utility to actually ""fetch"" whatever is at the uri.', 'comment_created': datetime.datetime(2020, 7, 7, 1, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 458209107, 'comment_body': '@TG1999 Are you always storing on disk at `location`? If so then we may not need the content... but in general the API of a response-like object has some method or attribute t get the content (see the Python requests package API)', 'comment_created': datetime.datetime(2020, 7, 21, 15, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458221290, 'comment_body': 'For now, the data is on disk at `location`. This is a detail I missed, so this should be resovled for now. We can think about adding this field/functionality in the future if needed. ', 'comment_created': datetime.datetime(2020, 7, 21, 16, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}]","[{'commit_sha': '1a7ee55ec3de5bb6928eff7e183e01646f9cae89', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}]",Tushar Goel,34160672,,User,,84,,6,39
444760835,Add VCS Support,Signed-off-by: TG1999 <tushar.goel.dav@gmail.com>,True,30,https://api.github.com/repos/aboutcode-org/fetchcode/pulls/30,https://github.com/aboutcode-org/fetchcode/pull/30,closed,120560,0,419,2,2,3,0,0,[],2020-07-06 13:03:20+00:00,2020-07-21 15:47:05+00:00,1305825.0,"15 days, 2:43:45","[{'comment_id': 452171835, 'comment_body': 'This should be a doctring for the module.', 'comment_created': datetime.datetime(2020, 7, 9, 12, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 455226115, 'comment_body': 'Just for my knowledge, what does this function do?', 'comment_created': datetime.datetime(2020, 7, 15, 17, 38, 49, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 455228564, 'comment_body': ""It installs the given VCS Url's content at Destination."", 'comment_created': datetime.datetime(2020, 7, 15, 17, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}]","[{'commit_sha': '804621525d04a562f040c95d180251873aa5777a', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '215930d7d26515c7ecf75d7a3072559c6f5e4057', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}]",Tushar Goel,34160672,,User,,84,,6,39
457647357,Add package registry support,"

Signed-off-by: TG1999 <tushar.goel.dav@gmail.com>",True,31,https://api.github.com/repos/aboutcode-org/fetchcode/pulls/31,https://github.com/aboutcode-org/fetchcode/pull/31,closed,1814,2,20,2,0,72,0,0,[],2020-07-28 08:30:35+00:00,2020-09-03 15:40:07+00:00,3222572.0,"37 days, 7:09:32","[{'comment_id': 462370168, 'comment_body': 'Can you consider using `attr` or a dataclass for this? Ask @sbs2001 if you need help too.\r\n', 'comment_created': datetime.datetime(2020, 7, 29, 15, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 462579671, 'comment_body': 'What happens if there is an error? or what if there is no JSON object?', 'comment_created': datetime.datetime(2020, 7, 29, 20, 49, 30, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 462581043, 'comment_body': 'I agree. @TG1999 see: https://docs.python.org/3/library/dataclasses.html\r\n\r\n', 'comment_created': datetime.datetime(2020, 7, 29, 20, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 463061129, 'comment_body': 'Btw if you are using dataclasses as @majurg  mentioned, you do need to consider that python3.7+ should be used.', 'comment_created': datetime.datetime(2020, 7, 30, 15, 0, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 463106757, 'comment_body': 'Yes then it might fail, tests for python 3.5 and python 3.6, should we use `attr` then what say ? ', 'comment_created': datetime.datetime(2020, 7, 30, 16, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 463121173, 'comment_body': 'attrs is probably fine then. We would need to backport dataclasses for python versions < 3.7, so attrs is more straight forward', 'comment_created': datetime.datetime(2020, 7, 30, 16, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 463121648, 'comment_body': 'Cool @majurg , pushing the code for same :)', 'comment_created': datetime.datetime(2020, 7, 30, 16, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 463532591, 'comment_body': ""And what's the approach you will use then?\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 10, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463532834, 'comment_body': 'Data is not a super happy name... what is this Data about? Also you cannot use a class this way... you need to create an object... @sbs2001 can you show how to use dataclass and or attr to Tushar?', 'comment_created': datetime.datetime(2020, 7, 31, 10, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463557862, 'comment_body': 'Okay, got you, quite silly of me using class this way :p', 'comment_created': datetime.datetime(2020, 7, 31, 11, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 463557982, 'comment_body': 'We will be using class attributes :)', 'comment_created': datetime.datetime(2020, 7, 31, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 463575790, 'comment_body': '@pombredanne  re\r\n>can you show how to use dataclass and or attr to Tushar?\r\n\r\nThere is probably some misunderstanding happening here on what  attr meant :) . \r\n@TG1999   `attr` was https://github.com/python-attrs/attrs. Your case will look like : \r\n\r\n```\r\n from attr import attrs, attrib \r\n @attrs\r\n class Data:\r\n   homepage_url = attrib()\r\n   api_url = attrib()\r\n  .....\r\n  ....\r\n```\r\nYou would then simply create a object like : \r\n```\r\nmy_data = Data(api_url=api_url,homepage_url=homepage_url .....)\r\n```\r\n\r\n@pombredanne  btw do tell which `attr` conventions you prefer :\r\n\r\nFor instance  you can do the same thing by \r\n```\r\nimport attr\r\n@attr.s\r\nclass Data:\r\n  api_url = attr.ib()\r\n.......\r\n```\r\n\r\nNote the shorthand', 'comment_created': datetime.datetime(2020, 7, 31, 12, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sbs2001', 'type': 'User'}, {'comment_id': 463617466, 'comment_body': 'Thanks @sbs2001 😄 ', 'comment_created': datetime.datetime(2020, 7, 31, 13, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 463632580, 'comment_body': ""You cannot use class attributes.... that does not work. You can use descriptors with attrs.org or dataclasses  but definitely not class attributes. A class __is__ a global... meaning its attributes are global too. There is only one class!\r\nHere is the issue:\r\n```\r\n>>> class Foo:\r\n...   name=None\r\n...   version=None\r\n... \r\n>>> def get_foo(name, version=None):\r\n...   if name:\r\n...     Foo.name = name\r\n...   if version:\r\n...     Foo.version = version\r\n...   return Foo\r\n... \r\n>>> a = get_foo(name='bar', version=12)\r\n>>> a.name, a.version\r\n('bar', 12)\r\n>>> b = get_foo(name='BAZ')\r\n>>> b.name, b.version\r\n('BAZ', 12)\r\n>>> a is b\r\nTrue\r\n>>> a==b\r\nTrue\r\n```\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 7, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 463633811, 'comment_body': 'Gotcha!!! Making changes for it.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 9, 39, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 464628973, 'comment_body': 'In the fetchcode context, we may want to subclass this URLData object. For instance, an ftp url would not necessarily have all these fields (like `homepage_url`, `readme_url` etc). Some of these would be better off in a PackageURLData or similar and leaving the `URLData` object to be more of a generic object. ', 'comment_created': datetime.datetime(2020, 8, 3, 19, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 464629408, 'comment_body': 'Do we really need to declare these at the top if they are set to `None`? Shouldnt the attrs class take care of this?', 'comment_created': datetime.datetime(2020, 8, 3, 19, 55, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 464637443, 'comment_body': 'Every api will not give every type of url data, like every cargo may or may not contain codeview url, but in most of cases API returns codeview url, so it can be none or can be found, but like none of them gives bugtracking or VCS url, so we are not finding for it and it is handled by attributes in that case. If there is anything I am missing, I will like to have some suggestions.:)', 'comment_created': datetime.datetime(2020, 8, 3, 20, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 464644503, 'comment_body': 'I guess my objection to this is lines 101-105 are just wasted variable initializations. Even if we set these values later, we do not need to initialize them to None', 'comment_created': datetime.datetime(2020, 8, 3, 20, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 464647618, 'comment_body': 'I will adjust the code accordingly, and will write test cases for it and then begin working with npm from.now', 'comment_created': datetime.datetime(2020, 8, 3, 20, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 464652177, 'comment_body': ""We can check inverse of line 107, then we can directly acess all of the URLs inside crate, what say, by this way we don't need to initialize 101-105, what say :)"", 'comment_created': datetime.datetime(2020, 8, 3, 20, 44, 26, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 464655030, 'comment_body': 'Agreed 💯 ', 'comment_created': datetime.datetime(2020, 8, 3, 20, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 465616080, 'comment_body': ""I tried the above thing, I was getting this when I ran tests when the crate was not in response `UnboundLocalError: local variable 'reverse_dependencies_url' referenced before assignment`, so I thought to initialize them to None only when crate will be None. suggestions on this :)"", 'comment_created': datetime.datetime(2020, 8, 5, 10, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 466464967, 'comment_body': 'Are these `/download` and `/readme` urls always present for every package? ', 'comment_created': datetime.datetime(2020, 8, 6, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 466467386, 'comment_body': 'I wonder if we want to make an http request every single time. It may be better to add an optional arg. This would also make testing easier as you wouldnt have to mock everything. ', 'comment_created': datetime.datetime(2020, 8, 6, 14, 47, 21, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 466468167, 'comment_body': 'I would prefer a more descriptive name for this function. `cargo_data` does not really tell me what it does.', 'comment_created': datetime.datetime(2020, 8, 6, 14, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 466469184, 'comment_body': 'I am a little confused by this. What is an example of a `reverse_depedencies_url`? ', 'comment_created': datetime.datetime(2020, 8, 6, 14, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 466507112, 'comment_body': 'I am a little bit confused, which lines are we talking about 99,100,101', 'comment_created': datetime.datetime(2020, 8, 6, 15, 43, 40, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 466508385, 'comment_body': 'Agreed 💯 , please can you suggest some too :)', 'comment_created': datetime.datetime(2020, 8, 6, 15, 45, 26, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 466509190, 'comment_body': ""Like it's give PURLData when we feed a cargo purl to this, so `get_cargo_PURLData`?"", 'comment_created': datetime.datetime(2020, 8, 6, 15, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 466509239, 'comment_body': '99 is where the http request is made, and 100 and 101 use this data. \r\n\r\nMy main point is that someone might want to craft data from a purl without having to make an http request.', 'comment_created': datetime.datetime(2020, 8, 6, 15, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 466510051, 'comment_body': '`get_cargo_data_from_purl`', 'comment_created': datetime.datetime(2020, 8, 6, 15, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 466512521, 'comment_body': 'Ohhkay, I am getting your point, but all data is not presented inside PURL like it only gives version and name for that package, we can only form readme and download URL from that info,  but info like tags or codeview_url is in the API, so we need to extract it from there, I am open to suggestions or approach on this.', 'comment_created': datetime.datetime(2020, 8, 6, 15, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 466512932, 'comment_body': 'Cool, thanks :)', 'comment_created': datetime.datetime(2020, 8, 6, 15, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 466522921, 'comment_body': 'We manually form them, with the name and version inside PURL, They are not present inside API, but they may or may not point to a valid URL address, depending on the info that PURL is valid or not, so what say should we keep them or not?    ', 'comment_created': datetime.datetime(2020, 8, 6, 16, 7, 9, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 466527358, 'comment_body': ""https://crates.io/api/v1/crates/libc/reverse_dependencies, It point's to the URL which contains, for whom package (`libc` here) is a dependency for which packages"", 'comment_created': datetime.datetime(2020, 8, 6, 16, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 466527941, 'comment_body': 'For example this https://crates.io/api/v1/crates/libc/reverse_dependencies', 'comment_created': datetime.datetime(2020, 8, 6, 16, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 471659905, 'comment_body': 'Do we use everything here, or just a few objects?', 'comment_created': datetime.datetime(2020, 8, 17, 17, 51, 3, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 471673339, 'comment_body': 'The logic here is confusing. We probably want seperate functions for these if there are multiple steps needed to construct these urls.', 'comment_created': datetime.datetime(2020, 8, 17, 18, 15, 11, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 471673740, 'comment_body': 'What is this line supposed to do?', 'comment_created': datetime.datetime(2020, 8, 17, 18, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 471674033, 'comment_body': 'What does `vpurl` mean?', 'comment_created': datetime.datetime(2020, 8, 17, 18, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 472040444, 'comment_body': 'This File is used by packagecode models. So I think we are using most part of it', 'comment_created': datetime.datetime(2020, 8, 18, 9, 22, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 472041072, 'comment_body': 'These are not multiple steps, Pypi does not have consistent keys, so I check for every name that the key can have.', 'comment_created': datetime.datetime(2020, 8, 18, 9, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 472041184, 'comment_body': 'Version PURL', 'comment_created': datetime.datetime(2020, 8, 18, 9, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 472042123, 'comment_body': 'It gives an array with one element, so I check if `licenses` exists or not else I return an array with None so in line 305, if `licenses` key does not exist, I can handle that case with a None.', 'comment_created': datetime.datetime(2020, 8, 18, 9, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 472388407, 'comment_body': 'I am saying that logic should be in a separate function', 'comment_created': datetime.datetime(2020, 8, 18, 18, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 472389198, 'comment_body': ""We should probably make the varible names more descriptive:\r\n```\r\nfor release in releases:\r\n    release_name = release.get('name')\r\n    release_purl = PackageURL...\r\n```"", 'comment_created': datetime.datetime(2020, 8, 18, 18, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 472389889, 'comment_body': 'Why not just use an empty list:\r\n```\r\ndeclared_license = response.get(""licenses"", [])\r\n```\r\nA list with a single None element does not make sense.', 'comment_created': datetime.datetime(2020, 8, 18, 18, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 472402411, 'comment_body': 'If I will pass an empty list in line 305, it will give me an error since I am trying to acess 0 element of that array, any suggestions on that', 'comment_created': datetime.datetime(2020, 8, 18, 18, 37, 4, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 472402582, 'comment_body': 'You are right, makes sense to me too', 'comment_created': datetime.datetime(2020, 8, 18, 18, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 472402795, 'comment_body': 'Yeah thanks for this : 💯', 'comment_created': datetime.datetime(2020, 8, 18, 18, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 473649852, 'comment_body': 'I have used `version_purl` for consistency for every package manager, Is it good to go or should I rename it to `release_purl` ?', 'comment_created': datetime.datetime(2020, 8, 20, 6, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 473649973, 'comment_body': 'Done :)', 'comment_created': datetime.datetime(2020, 8, 20, 6, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 474190220, 'comment_body': 'This whole transformation of data could be much simplified to this:\r\n`data = [p.to_dict() for p in packages]`\r\nand this can then simply checked directly against the results of the json.load below\r\n\r\nSee also how things can be regenerated easily with a function used as a test help such as there https://github.com/gemfileparser/gemfileparser/pull/14/files#diff-245d8f4be70a2ec133e0c173d78ea046R49', 'comment_created': datetime.datetime(2020, 8, 20, 18, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 474192480, 'comment_body': 'Okay just need some help here :sweat_smile: what should be done here to get rid of None values ? After this I can proceed with all the tests :)', 'comment_created': datetime.datetime(2020, 8, 20, 18, 37, 6, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 474193521, 'comment_body': '`data = {\r\n        str(idx): packages[idx].to_dict()\r\n            for idx in range(0,len(packages))\r\n    }\r\n`', 'comment_created': datetime.datetime(2020, 8, 20, 18, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 474203504, 'comment_body': ""re: https://github.com/nexB/fetchcode/pull/31#discussion_r474192480\r\n\r\n> Okay just need some help here sweat_smile what should be done here to get rid of None values ? After this I can proceed with all the tests :)\r\n\r\nYou keep the None alright. That's not a problem"", 'comment_created': datetime.datetime(2020, 8, 20, 18, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 474204694, 'comment_body': '> `data = { str(idx): packages[idx].to_dict() for idx in range(0,len(packages)) } `\r\n\r\nwhy do you need an index idx?  you do not need index in Python... and in the rare you want one, use `enumerate` with `for idx, package in enumerate(packages)` but here I cannot fathom why you would need one. A simple list comprehension I suggested before is likely all you need.', 'comment_created': datetime.datetime(2020, 8, 20, 18, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 474212646, 'comment_body': 'I thought to use list comprehension here, but I saw that we were generating lift of objects, but we needed dictionary of objects so I used indexes of list as key and package.to_dict() as value for that key. ', 'comment_created': datetime.datetime(2020, 8, 20, 19, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 474254541, 'comment_body': 'The list is perfectly fine and you are just doing an assert foo == bar so there is no need for more', 'comment_created': datetime.datetime(2020, 8, 20, 20, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 474452599, 'comment_body': 'Thanks @pombredanne :smile: I have made the changes if they are good to go I can do same for others too ', 'comment_created': datetime.datetime(2020, 8, 21, 7, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 474542099, 'comment_body': ""Excellent: go for it. And create a helper function to keep things DRY https://en.wikipedia.org/wiki/Don't_repeat_yourself ;)"", 'comment_created': datetime.datetime(2020, 8, 21, 8, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 474678604, 'comment_body': '@pombredanne,  Done please have a look :)', 'comment_created': datetime.datetime(2020, 8, 21, 12, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 474854803, 'comment_body': 'There may be some list operators that will work with empty lists to get first element. Otherwise a simple `len()` check would work. ', 'comment_created': datetime.datetime(2020, 8, 21, 18, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 474855151, 'comment_body': 'What is this?', 'comment_created': datetime.datetime(2020, 8, 21, 18, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 474859180, 'comment_body': 'I have used `side_effect` instead of `return_value` since in some functions I have to make more than one network call, so side_effect iterates value of mock function for every call', 'comment_created': datetime.datetime(2020, 8, 21, 18, 28, 11, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 474859707, 'comment_body': 'Cool I will do the change :)', 'comment_created': datetime.datetime(2020, 8, 21, 18, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 474869257, 'comment_body': 'After taking a second look at this, I would prefer if each package repo had its own test function. So instead of iterating over all these dicts in a loop, just make a test function for each package manager. It it much more readable and better testing style.', 'comment_created': datetime.datetime(2020, 8, 21, 18, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 474875481, 'comment_body': 'Okay sure :)', 'comment_created': datetime.datetime(2020, 8, 21, 19, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 482915472, 'comment_body': 'Did you handle this? See my point below too. You should not take [0] the first element only', 'comment_created': datetime.datetime(2020, 9, 3, 11, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 482915693, 'comment_body': 'You cannot ignore other licenses. Return a list.\r\nFor instance:\r\nhttps://rubygems.org/api/v1/gems/cairo.json', 'comment_created': datetime.datetime(2020, 9, 3, 11, 45, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 482916816, 'comment_body': 'Okay got it :+1: :)', 'comment_created': datetime.datetime(2020, 9, 3, 11, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}]","[{'commit_sha': '6e25dc93938c470706c8dcd0520a37dad8fc2b23', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd1b309a499d321f494be6f28040b8c12a6fab47', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}]",Tushar Goel,34160672,,User,,84,,6,39
462140356,Add support for git URLs,"solves issue #38 
Signed-off-by: TG1999 <tushar.goel.dav@gmail.com>",True,39,https://api.github.com/repos/aboutcode-org/fetchcode/pulls/39,https://github.com/aboutcode-org/fetchcode/pull/39,closed,130,0,2,1,0,0,0,0,[],2020-08-03 12:10:09+00:00,2020-08-20 13:20:35+00:00,1473026.0,"17 days, 1:10:26",[],"[{'commit_sha': '87765f797a15db146171747216029816bb853951', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}]",Tushar Goel,34160672,,User,,84,,6,39
442773457,Add support converting PURLs to URLs,Signed-off-by: TG1999 <tushar.goel.dav@gmail.com>,True,39,https://api.github.com/repos/package-url/packageurl-python/pulls/39,https://github.com/package-url/packageurl-python/pull/39,closed,225,0,2,1,1,8,0,0,[],2020-07-01 15:24:47+00:00,2020-07-26 14:27:43+00:00,2156576.0,"24 days, 23:02:56","[{'comment_id': 452439506, 'comment_body': 'Is this newline a characteristic of `black`?', 'comment_created': datetime.datetime(2020, 7, 9, 19, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 452439852, 'comment_body': 'Please add `_url` to all these functions, as they are building urls specifically.', 'comment_created': datetime.datetime(2020, 7, 9, 19, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 452440273, 'comment_body': 'Can we change this to \r\n```\r\nif not type in converter:\r\n    return\r\n** rest of code**\r\n```\r\n\r\nThis way we do not have an extra line of indentation.', 'comment_created': datetime.datetime(2020, 7, 9, 19, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 458090511, 'comment_body': 'Can you clarify what is the URL you are returning?\r\nThe one to fetch a package archive? A VCS URL? A home URL?', 'comment_created': datetime.datetime(2020, 7, 21, 13, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460503248, 'comment_body': ""What's the benefit of keyword expansion (**) here?\r\n"", 'comment_created': datetime.datetime(2020, 7, 26, 9, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460503382, 'comment_body': 'Can you consider using a `route` instead for this multi dispatch?', 'comment_created': datetime.datetime(2020, 7, 26, 9, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460503535, 'comment_body': 'Related to my comments above for the converter funtions, since you are passing concret arg names... why using **data in each of the signatures?\r\nYou should instead use proper arg names in each of you functions (e.g. name, namespace, version, etc...) ', 'comment_created': datetime.datetime(2020, 7, 26, 9, 29, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460503650, 'comment_body': 'You should use real argument names there instead, possibly with default. Using **data and get() does not make sense IMHO since this is always called with named kwargs. ', 'comment_created': datetime.datetime(2020, 7, 26, 9, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': '97fb5413dc40216d2fe0a72197fecc5aaec5196e', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}]",Tushar Goel,34160672,,User,,84,,6,39
420717824,Add support for github and BitBucket URLs,"Solves issue #20 and #31 
Signed-off-by: TG1999 <tushar.goel.dav@gmail.com>",True,34,https://api.github.com/repos/package-url/packageurl-python/pulls/34,https://github.com/package-url/packageurl-python/pull/34,closed,294,10,4,1,4,111,0,0,[],2020-05-20 12:26:55+00:00,2020-07-26 09:37:12+00:00,5778617.0,"66 days, 21:10:17","[{'comment_id': 428243118, 'comment_body': 'What about the `www.` that sometimes appears for these github urls?', 'comment_created': datetime.datetime(2020, 5, 20, 19, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 428243358, 'comment_body': 'What is `unquote_plus` do?', 'comment_created': datetime.datetime(2020, 5, 20, 19, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 428245741, 'comment_body': 'This is slightly confusing to read. I think if we should keep the len comparisons on the same indentation level to stay consistent. \r\n\r\nAlso, what happens if `len(segments) < 2`? This should be a test case, if it is not already. ', 'comment_created': datetime.datetime(2020, 5, 20, 19, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 428248591, 'comment_body': ""I refered it from purl-spec, it's given that https://github.com is the default repository for GitHub, so what say ?"", 'comment_created': datetime.datetime(2020, 5, 20, 19, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 428249187, 'comment_body': 'In above npm packages this have been used, so I thought it was a standard practice to unquote the URLs before parsing them', 'comment_created': datetime.datetime(2020, 5, 20, 19, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 428257341, 'comment_body': 'Yeah you might be right, it looks like www.github.com gets redirected to github.com', 'comment_created': datetime.datetime(2020, 5, 20, 19, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 428257927, 'comment_body': 'Yes ok this is fine.', 'comment_created': datetime.datetime(2020, 5, 20, 19, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 428260043, 'comment_body': 'I have made changes for it :D', 'comment_created': datetime.datetime(2020, 5, 20, 19, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 428260406, 'comment_body': 'If they look good I will squash them :)', 'comment_created': datetime.datetime(2020, 5, 20, 19, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 428691405, 'comment_body': 'What happens if `len(segments) == 1` or `len(segments) == 3`?', 'comment_created': datetime.datetime(2020, 5, 21, 14, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 428693212, 'comment_body': ""I have covered a test case for it when it will be 1, it will be null, and for a valid GitHub URL, it'll be having more than three elements the third element should be tree, and the fourth needs to be branch., For example https://github.com/TG1999/fetchcode/tree or https://github.com/TG1999/fetchcode/fetchcode or https://github.com/TG1999/fetchcode/master is invalid, https://github.com/TG1999/fetchcode/tree/master/fetchcode is valid. So they can't have 3, it will be 2 or 4 or more than 4"", 'comment_created': datetime.datetime(2020, 5, 21, 14, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 428694963, 'comment_body': ""If it will be having only one in segment then it's only the namespace, and namespace won't be pointing towards a repo, I will be helpful if you can provide me with some test cases that I should include"", 'comment_created': datetime.datetime(2020, 5, 21, 14, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 429165483, 'comment_body': 'Hi @majurg, I have added test cases where segment length is 3, so how does it look now :D, Please suggest me if any other changes are required.', 'comment_created': datetime.datetime(2020, 5, 22, 10, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 429287277, 'comment_body': 'The test cases cover it fine and that is the expected behavior. However, I would want that reflected in the code for clarity:\r\n```\r\nif len(segments) == 1 or len(segments) == 3:\r\n    # These are not valid GitHub URLs to a specific package, so return null\r\n    return None\r\n```', 'comment_created': datetime.datetime(2020, 5, 22, 14, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 429289755, 'comment_body': 'Sure, got you mate :grinning: , making the following changes', 'comment_created': datetime.datetime(2020, 5, 22, 14, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 429314726, 'comment_body': 'Done @majurg , thanks for your guidance :D', 'comment_created': datetime.datetime(2020, 5, 22, 15, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 429974577, 'comment_body': ""Are there more changes to be done ? If it's looking good I can start working for BitBucket URLs in the same manner"", 'comment_created': datetime.datetime(2020, 5, 25, 14, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 430406451, 'comment_body': '@TG1999 yes you can add bitbucket to this same PR, just so I dont have to search around too much xD', 'comment_created': datetime.datetime(2020, 5, 26, 13, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 430407986, 'comment_body': 'Cool !! Should I make a new commit for it in this PR or squash the BitBucket work in this commit ?', 'comment_created': datetime.datetime(2020, 5, 26, 13, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 430415293, 'comment_body': 'I think have 2 seperate commits is the way to go:\r\n1): GitHub commit\r\n2): BitBucket commit\r\n\r\nAnd then just rebase of your BitBucket commit any changes for either.', 'comment_created': datetime.datetime(2020, 5, 26, 13, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 430417197, 'comment_body': 'Sure I will be sending my first draft in a while', 'comment_created': datetime.datetime(2020, 5, 26, 13, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 430524677, 'comment_body': '@majurg , I have added commit for bitbucket URLs it was almost similar to th GitHub one, so it did not take too much time. Please review it so we can then move on the last one i.e GitLab ', 'comment_created': datetime.datetime(2020, 5, 26, 15, 57, 17, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 430536946, 'comment_body': ""In this case, if len(segments) == 3 won't return None everytime, if segments[2] == 'src' then the given URL will be valid, for example https://bitbucket.org/TG1999/first_repo/src/"", 'comment_created': datetime.datetime(2020, 5, 26, 16, 14, 43, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 433404846, 'comment_body': '@TG1999 We should have separate functions for both github and bitbucket, since they are a little different (as you state above)', 'comment_created': datetime.datetime(2020, 6, 1, 18, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 433405529, 'comment_body': 'Okay, got this one', 'comment_created': datetime.datetime(2020, 6, 1, 18, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 433866136, 'comment_body': '@majurg done, please review this :D ', 'comment_created': datetime.datetime(2020, 6, 2, 13, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 437059907, 'comment_body': 'Why is this `github.com.*/` instead of `github.com/`?', 'comment_created': datetime.datetime(2020, 6, 8, 23, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 437060218, 'comment_body': 'Perhaps this is a dumb question, but do bitbucket urls always have `src`?', 'comment_created': datetime.datetime(2020, 6, 8, 23, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 437312277, 'comment_body': 'Got this one :D ', 'comment_created': datetime.datetime(2020, 6, 9, 10, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 437320628, 'comment_body': ""If the length of segments need to be 3 or greater than 3, the third element needs to be 'src', like this URL https://bitbucket.org/TG1999/first_repo/master/new_folder/ doesn't point anywhere(subpath), https://bitbucket.org/TG1999/first_repo/qa this also doesn't point anywhere too (version), but if src is there at third element, then https://bitbucket.org/TG1999/first_repo/src/qa, https://bitbucket.org/TG1999/first_repo/src/master/new_folder and https://bitbucket.org/TG1999/first_repo/src/ these all points to their respective contents."", 'comment_created': datetime.datetime(2020, 6, 9, 10, 55, 53, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 440684558, 'comment_body': 'What is the meaning of this comment?', 'comment_created': datetime.datetime(2020, 6, 16, 8, 40, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441024791, 'comment_body': 'Just return, do not `return None`', 'comment_created': datetime.datetime(2020, 6, 16, 17, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441075343, 'comment_body': 'This is a minor nit, but it is may be better to use keyword args all the way, and sort them in the most logical order?\r\n`type, namespace, name, version`', 'comment_created': datetime.datetime(2020, 6, 16, 18, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441075855, 'comment_body': 'Can you give examples of these URLs as you go?', 'comment_created': datetime.datetime(2020, 6, 16, 18, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441076202, 'comment_body': 'Put that example in the docstring ', 'comment_created': datetime.datetime(2020, 6, 16, 19, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441077119, 'comment_body': 'This is alss true above, so why repeat it here?', 'comment_created': datetime.datetime(2020, 6, 16, 19, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441077251, 'comment_body': 'Same nit for args as for the github type', 'comment_created': datetime.datetime(2020, 6, 16, 19, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441078053, 'comment_body': 'Why repeat all this code in each of the github, bitbcket and gilab? you should have a function that does a base common parsing and returned some mini object or named tuple where each parts have a proper name. ', 'comment_created': datetime.datetime(2020, 6, 16, 19, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441078686, 'comment_body': 'We need more variety on the case (lower/upper) and mixed case of the segments ', 'comment_created': datetime.datetime(2020, 6, 16, 19, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441079616, 'comment_body': 'please use consistently no space before and one space after the colon (including fixing other entries above as needed. ', 'comment_created': datetime.datetime(2020, 6, 16, 19, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441080007, 'comment_body': 'Why would  all these be null? No null except for ""https://github.com/TG1999"":null,', 'comment_created': datetime.datetime(2020, 6, 16, 19, 7, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441080187, 'comment_body': 'None of these should be null', 'comment_created': datetime.datetime(2020, 6, 16, 19, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441080380, 'comment_body': 'No null here, except for  ""https://bitbucket.org/TG1999/"":null,', 'comment_created': datetime.datetime(2020, 6, 16, 19, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 441084242, 'comment_body': ""These URLs doesn't point anywhere, they all return 404, that's why I return null, so what say :D"", 'comment_created': datetime.datetime(2020, 6, 16, 19, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 441084457, 'comment_body': ""These URLs doesn't point anywhere, they all return 404, that's why I return null, so what say :D"", 'comment_created': datetime.datetime(2020, 6, 16, 19, 15, 26, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 441097482, 'comment_body': ""These URLs doesn't point anywhere, they all return 404, that's why I return null, so what say :D"", 'comment_created': datetime.datetime(2020, 6, 16, 19, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 441706267, 'comment_body': 'OK, they may be 404, but there is still a valid purl we can get from these. We should get it IMHO, not a null... I would be interested to get someone else take too.', 'comment_created': datetime.datetime(2020, 6, 17, 17, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443122576, 'comment_body': ""I agree with @majurg .. we want to accept inputs in a flexible way. In fact this is the whole purpose there: take possibly messy URLs and turn them in a clean purl.\r\nalso there could be many other cases beyond www prefix?\r\nWhat about `https://raw.githubusercontent.com/volatilityfoundation/dwarf2json/master/LICENSE.txt` or API URLs or  `https://codeload.github.com/nexB/scancode.io/tar.gz/1.0` \r\n\r\nSo for clarity we should have multiple patterns here.\r\n\r\n Also even the current form may not be correct. Why `.*` right after `.com`? and the dot in `.com`?\r\nThis looks better imho (but we still ned to accommodate more  as stated above)\r\n`@purl_router.route('https?://github\\.com/.*')`\r\n"", 'comment_created': datetime.datetime(2020, 6, 20, 11, 8, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443122599, 'comment_body': 'Do you have a test for that?', 'comment_created': datetime.datetime(2020, 6, 20, 11, 9, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443122747, 'comment_body': 'Could you add a docstring? why call this base_parsing? and why `uri` vs `url`?', 'comment_created': datetime.datetime(2020, 6, 20, 11, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443122869, 'comment_body': 'Do not return None. Just return', 'comment_created': datetime.datetime(2020, 6, 20, 11, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443122873, 'comment_body': 'nit: missing spaces: `len(segments) == 1:` ', 'comment_created': datetime.datetime(2020, 6, 20, 11, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443122952, 'comment_body': 'Do you still need all the segments since you parsed ns and name?\r\n', 'comment_created': datetime.datetime(2020, 6, 20, 11, 14, 21, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443123039, 'comment_body': 'What do you gain from returning a mapping vs. a plain tuple> Also why not a named tuple or mini object of sorts vs. a mapping?', 'comment_created': datetime.datetime(2020, 6, 20, 11, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443123440, 'comment_body': 'Test case for which function ?', 'comment_created': datetime.datetime(2020, 6, 20, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 443123933, 'comment_body': 'What about other URLs such https://www.npmjs.com/package/foo-utils ? or https://yarnpkg.com/package/foo ?', 'comment_created': datetime.datetime(2020, 6, 20, 11, 31, 53, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443124280, 'comment_body': ""Repasting here for context:\r\n\r\nI agree with @majurg .. we want to accept inputs in a flexible way. In fact this is the whole purpose there: take possibly messy URLs and turn them in a clean purl.\r\nalso there could be many other cases beyond www prefix?\r\nWhat about `https://raw.githubusercontent.com/volatilityfoundation/dwarf2json/master/LICENSE.txt` or API URLs or  `https://codeload.github.com/nexB/scancode.io/tar.gz/1.0` \r\n\r\nSo for clarity we should have multiple patterns here.\r\n\r\n Also even the current form may not be correct. Why `.*` right after `.com`? and the dot in `.com`?\r\nThis looks better imho (but we still ned to accommodate more  as stated above)\r\n`@purl_router.route('https?://github\\.com/.*')`\r\n"", 'comment_created': datetime.datetime(2020, 6, 20, 11, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443124312, 'comment_body': 'What happens if you remove this `else: return`? \r\nIMHO use instead above:\r\n```\r\nif not data:\r\n    return\r\n```', 'comment_created': datetime.datetime(2020, 6, 20, 11, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443124320, 'comment_body': 'Same comments as for github urls', 'comment_created': datetime.datetime(2020, 6, 20, 11, 39, 14, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443124356, 'comment_body': 'What does this function do and return? Tell that in the doctrsing :)', 'comment_created': datetime.datetime(2020, 6, 20, 11, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443124368, 'comment_body': 'What does this function do and return? Tell that in the doctrsing :)', 'comment_created': datetime.datetime(2020, 6, 20, 11, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443124453, 'comment_body': 'IMHO a tuple or object might be a better returned value from your function above', 'comment_created': datetime.datetime(2020, 6, 20, 11, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443124691, 'comment_body': 'If possible try to find a better name than `data`? that a little bit bland as a name', 'comment_created': datetime.datetime(2020, 6, 20, 11, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443124716, 'comment_body': 'Same comments as for github URLs ', 'comment_created': datetime.datetime(2020, 6, 20, 11, 45, 55, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443124756, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2020, 6, 20, 11, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 443888482, 'comment_body': 'These multiple list element references are very hard to read. Can we give these some proper variable names? ', 'comment_created': datetime.datetime(2020, 6, 23, 0, 2, 54, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 444285865, 'comment_body': 'Yeah sure, how does `seperator` sounds, for segments[2]', 'comment_created': datetime.datetime(2020, 6, 23, 14, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 445342252, 'comment_body': 'Hi, can you provide me some more example URLs for codeload and API ones, I have understood the raw.githubusercontent, but need some sample URLs for codeload and API ones :)', 'comment_created': datetime.datetime(2020, 6, 25, 6, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 445556779, 'comment_body': '- https://api.github.com/repos/nexB/scancode-toolkit/commits/40593af0df6c8378d2b180324b97cb439fa11d66\r\n- https://api.github.com/repos/nexB/scancode-toolkit/\r\n\r\n- for codeload when you fetch https://github.com/nexB/scancode-toolkit/archive/v3.1.1.zip (which is another url) or https://github.com/nexB/scancode-toolkit/archive/v3.1.1.tar.gz  the url is redirected to https://codeload.github.com/nexB/scancode-toolkit/zip/v3.1.1 or https://codeload.github.com/nexB/scancode-toolkit/zip/v3.1.1 or https://codeload.github.com/nexB/scancode-toolkit/tar.gz/v3.1.1\r\n\r\nThese codeload URL are 404 after a while, but they could still exists so we should try to craft a pulr\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 25, 13, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 445577246, 'comment_body': 'Thanks :D', 'comment_created': datetime.datetime(2020, 6, 25, 13, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 446384371, 'comment_body': 'A test for both quoted and unquoted URLs', 'comment_created': datetime.datetime(2020, 6, 26, 20, 2, 23, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 446385179, 'comment_body': 'That is fine if that is what `segments[2]` represents. \r\n\r\nThe point here is that an outside user of this code should be able to read the code and understand what is going on without having to parse out what each element of an list is.', 'comment_created': datetime.datetime(2020, 6, 26, 20, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447055823, 'comment_body': 'Since every URL needs different kind of parsing I think we can\'t return a standardize tuple, We can surely save time by not doing the base parsing every time like this.\r\n```path = unquote_plus(urlparse(uri).path)\r\n    segments = [seg for seg in path.split(""/"") if seg]\r\n\r\n    if len(segments) <= 1:\r\n        return\r\n\r\n    return segments```', 'comment_created': datetime.datetime(2020, 6, 29, 15, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 447201443, 'comment_body': '@TG1999 any updates here?', 'comment_created': datetime.datetime(2020, 6, 29, 19, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447203692, 'comment_body': '@TG1999 The docstring should be more descriptive (see @pombredanne comment above)', 'comment_created': datetime.datetime(2020, 6, 29, 19, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447203818, 'comment_body': 'Same as above', 'comment_created': datetime.datetime(2020, 6, 29, 19, 31, 28, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447203955, 'comment_body': 'Again, we want docstrings to be more descriptive.', 'comment_created': datetime.datetime(2020, 6, 29, 19, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 447210527, 'comment_body': 'I have not changed logic for npm url parsing, I have just ran black for code formatting so it changed the formatting only', 'comment_created': datetime.datetime(2020, 6, 29, 19, 44, 5, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 447210716, 'comment_body': 'Yeah sure, sorry for this mistake', 'comment_created': datetime.datetime(2020, 6, 29, 19, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 447210981, 'comment_body': 'Sure, :)', 'comment_created': datetime.datetime(2020, 6, 29, 19, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 447211076, 'comment_body': 'Sure :)', 'comment_created': datetime.datetime(2020, 6, 29, 19, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 447329124, 'comment_body': 'Heh you are right. I have opened a ticket here as we will leave this out of scope for now: https://github.com/package-url/packageurl-python/issues/38', 'comment_created': datetime.datetime(2020, 6, 30, 0, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 449246112, 'comment_body': 'Why is this on separate lines? it looks weird. ', 'comment_created': datetime.datetime(2020, 7, 2, 20, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 449247623, 'comment_body': 'It happened due to code formatting I will change it back', 'comment_created': datetime.datetime(2020, 7, 2, 20, 21, 34, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 450559175, 'comment_body': 'I am not sure we want this to be the same function name? We probably want them to be context specific, but maybe I am wrong. \r\n\r\nWhat do you think @pombredanne?', 'comment_created': datetime.datetime(2020, 7, 7, 1, 19, 15, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 450559379, 'comment_body': '@TG1999 See above ^', 'comment_created': datetime.datetime(2020, 7, 7, 1, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 450559915, 'comment_body': 'I think we should have more test cases here, especially if its the basis of our parsing.', 'comment_created': datetime.datetime(2020, 7, 7, 1, 21, 54, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 450664824, 'comment_body': 'Hi @majurg , It was comment for previous code, where I refered namespace two times, this has been resolved earlier by adding a base parsing function', 'comment_created': datetime.datetime(2020, 7, 7, 7, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 450665349, 'comment_body': 'Yeah please give me some suggestions on it, I will change it as per suggestions :)', 'comment_created': datetime.datetime(2020, 7, 7, 7, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 450665478, 'comment_body': 'Sure on it :)', 'comment_created': datetime.datetime(2020, 7, 7, 7, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 450904759, 'comment_body': '`build_github_api_purl` for this specific case. Adapt this pattern to any other cases we have.', 'comment_created': datetime.datetime(2020, 7, 7, 14, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 450907453, 'comment_body': 'Cool, it sounds good', 'comment_created': datetime.datetime(2020, 7, 7, 14, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 452877182, 'comment_body': 'Please switch the logic here so the majority of the code is not indented:\r\n```\r\nif not segments:\r\n    return\r\n\r\n# rest of code here\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 14, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 452877931, 'comment_body': 'Please switch the logic here so the majority of the code is not indented:\r\n```\r\nif not segments:\r\n    return\r\n\r\n# rest of code here\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 14, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 452878014, 'comment_body': 'Please switch the logic here so the majority of the code is not indented:\r\n```\r\nif not segments:\r\n    return\r\n\r\n# rest of code here\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 14, 26, 31, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 452878461, 'comment_body': 'Please switch the logic here so the majority of the code is not indented:\r\n```\r\nif len(segments) < 3:\r\n    return\r\n\r\n# rest of code here\r\n```', 'comment_created': datetime.datetime(2020, 7, 10, 14, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 453755084, 'comment_body': 'Echoing the discussion about Package URLs during our GSoC status call, I would prefer the `namespace` value come before `name` in any locations in the code. You seem to do it in most other places, so this might be the only instance right now.', 'comment_created': datetime.datetime(2020, 7, 13, 15, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 453755757, 'comment_body': 'I would prefer the `namespace` value come before `name` here.', 'comment_created': datetime.datetime(2020, 7, 13, 15, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 453755873, 'comment_body': 'I would prefer the `namespace` value come before `name`', 'comment_created': datetime.datetime(2020, 7, 13, 15, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 456885216, 'comment_body': 'You do not need to explain how things are done internally. Instead Start with what you return an explain tersely the processing, for instabce:\r\n```Return a list of path segments from a `url` string. This list may be empty.```', 'comment_created': datetime.datetime(2020, 7, 19, 9, 30, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 456885279, 'comment_body': 'Can you find a better name? you return path segments, what about naming `get_path_segments`?', 'comment_created': datetime.datetime(2020, 7, 19, 9, 31, 4, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 456885366, 'comment_body': 'Why not always returning an empty list instead?', 'comment_created': datetime.datetime(2020, 7, 19, 9, 31, 57, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458082594, 'comment_body': 'Make this a docstring such as:\r\n```\r\n@purl_router.route(cargo_pattern)\r\ndef build_cargo_purl(uri):\r\n    """"""\r\n    Return a PackageURL from a crates.io URL.\r\n    For example: https://crates.io/api/v1/crates/rand/0.7.2/download\r\n    """"""\r\n...\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 13, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458084080, 'comment_body': 'See example above, IMHO:\r\n```\r\n""""""\r\nReturn a PackageURL object from GitHub `url`.\r\nFor example:\r\nhttps://raw.githubusercontent.com/volatilityfoundation/dwarf2json/master/LICENSE.txt\r\n""""""\r\n```\r\nAlso please use url consistently and not sometimes url and sometimes uri', 'comment_created': datetime.datetime(2020, 7, 21, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458084569, 'comment_body': 'Please keywords arguments rather than position arguments, it is much easier to read.', 'comment_created': datetime.datetime(2020, 7, 21, 13, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458085655, 'comment_body': 'what would be an example for this?', 'comment_created': datetime.datetime(2020, 7, 21, 13, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 458085822, 'comment_body': 'Why three empty lines?', 'comment_created': datetime.datetime(2020, 7, 21, 13, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460502694, 'comment_body': 'is the a possibility here that  `if len(segments) <= 1:` and that the list is not empty?\r\nI do not think so, so I would replace directly:\r\n`segments = [seg for seg in path.split(""/"") if seg]`\r\nby:\r\n`return [seg for seg in path.split(""/"") if seg]`\r\n', 'comment_created': datetime.datetime(2020, 7, 26, 9, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}, {'comment_id': 460503020, 'comment_body': 'It can be, if it just have a namespace then length will be 1, and it will be of no use for example https://gthub.com/TG1999', 'comment_created': datetime.datetime(2020, 7, 26, 9, 24, 36, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 460503111, 'comment_body': 'So I have tried to eliminate both the cases when segments are empty or just one.', 'comment_created': datetime.datetime(2020, 7, 26, 9, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 460503878, 'comment_body': ':+1: \r\n', 'comment_created': datetime.datetime(2020, 7, 26, 9, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'pombredanne', 'type': 'User'}]","[{'commit_sha': 'f61bea4a5deb5e347a35e3b252890ec180f57d71', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}]",Tushar Goel,34160672,,User,,84,,6,39
388764256,Add support for rust packages,Signed-off-by: TG1999 <tushar.goel.dav@gmail.com>,True,24,https://api.github.com/repos/package-url/packageurl-python/pulls/24,https://github.com/package-url/packageurl-python/pull/24,closed,19,2,2,1,7,3,0,0,[],2020-03-15 16:52:27+00:00,2020-03-31 13:28:16+00:00,1370149.0,"15 days, 20:35:49","[{'comment_id': 396724364, 'comment_body': 'I am not sure we want to rely on regex for constructing/deconstructing purls', 'comment_created': datetime.datetime(2020, 3, 23, 20, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}, {'comment_id': 396726397, 'comment_body': 'Hi, regex has been used above for Ruby, nugget , pypi and sourceforge so I think it is good to go', 'comment_created': datetime.datetime(2020, 3, 23, 20, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'TG1999', 'type': 'User'}, {'comment_id': 397135643, 'comment_body': 'fair enough.', 'comment_created': datetime.datetime(2020, 3, 24, 13, 5, 2, tzinfo=datetime.timezone.utc), 'commenter': 'steven-esser', 'type': 'User'}]","[{'commit_sha': '274e768e01516ea32f97c0ae8d3ac4d98b7b0318', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}]",Tushar Goel,34160672,,User,,84,,6,39
458549999,Adds support for hackage PURLS,Signed-off-by: TG1999 <tushar.goel.dav@gmail.com>,True,41,https://api.github.com/repos/package-url/packageurl-python/pulls/41,https://github.com/package-url/packageurl-python/pull/41,closed,23,1,2,1,1,0,0,0,[],2020-07-29 16:30:58+00:00,2020-07-29 17:32:26+00:00,3688.0,1:01:28,[],"[{'commit_sha': '334900ed16809e93ea9f2412dcacb8fce12249b7', 'committer_username': 'TG1999', 'committer_name': 'Tushar Goel', 'committer_email': None, 'commit_date': datetime.datetime(2017, 12, 1, 11, 59, 13, tzinfo=datetime.timezone.utc)}]",Tushar Goel,34160672,,User,,84,,6,39

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
212758597,fetchcode,aboutcode-org/fetchcode,HTML,18,9,10,19,355,55,10,16,"[{'id': 1055988200, 'number': 80, 'closed': datetime.datetime(2022, 9, 14, 12, 49, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 14, 12, 41, 3, tzinfo=datetime.timezone.utc), 'time_taken': 496.0, 'time_delta': '0:08:16', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 1021582016, 'number': 78, 'closed': datetime.datetime(2022, 9, 6, 15, 19, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 14, 17, 1, tzinfo=datetime.timezone.utc), 'time_taken': 2422966.0, 'time_delta': '28 days, 1:02:46', 'additions': 16, 'deletions': 9, 'state': 'closed'}, {'id': 843949654, 'number': 73, 'closed': datetime.datetime(2022, 2, 16, 18, 33, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 9, 14, 6, 54, tzinfo=datetime.timezone.utc), 'time_taken': 620819.0, 'time_delta': '7 days, 4:26:59', 'additions': 11, 'deletions': 2, 'state': 'closed'}, {'id': 511010097, 'number': 46, 'closed': datetime.datetime(2021, 3, 30, 13, 34, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 27, 19, 40, 28, tzinfo=datetime.timezone.utc), 'time_taken': 13283656.0, 'time_delta': '153 days, 17:54:16', 'additions': 366, 'deletions': 46, 'state': 'closed'}, {'id': 511000300, 'number': 45, 'closed': datetime.datetime(2020, 10, 27, 19, 40, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 27, 19, 25, 9, tzinfo=datetime.timezone.utc), 'time_taken': 932.0, 'time_delta': '0:15:32', 'additions': 230, 'deletions': 0, 'state': 'closed'}, {'id': 462140356, 'number': 39, 'closed': datetime.datetime(2020, 8, 20, 13, 20, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 3, 12, 10, 9, tzinfo=datetime.timezone.utc), 'time_taken': 1473026.0, 'time_delta': '17 days, 1:10:26', 'additions': 130, 'deletions': 0, 'state': 'closed'}, {'id': 457647357, 'number': 31, 'closed': datetime.datetime(2020, 9, 3, 15, 40, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 8, 30, 35, tzinfo=datetime.timezone.utc), 'time_taken': 3222572.0, 'time_delta': '37 days, 7:09:32', 'additions': 1814, 'deletions': 2, 'state': 'closed'}, {'id': 444760835, 'number': 30, 'closed': datetime.datetime(2020, 7, 21, 15, 47, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 6, 13, 3, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1305825.0, 'time_delta': '15 days, 2:43:45', 'additions': 120560, 'deletions': 0, 'state': 'closed'}, {'id': 438568248, 'number': 27, 'closed': datetime.datetime(2020, 7, 28, 8, 40, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 13, 22, 52, tzinfo=datetime.timezone.utc), 'time_taken': 3007054.0, 'time_delta': '34 days, 19:17:34', 'additions': 222, 'deletions': 0, 'state': 'closed'}, {'id': 416841030, 'number': 22, 'closed': datetime.datetime(2020, 7, 22, 13, 36, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 12, 16, 37, 58, tzinfo=datetime.timezone.utc), 'time_taken': 6123495.0, 'time_delta': '70 days, 20:58:15', 'additions': 205, 'deletions': 101, 'state': 'closed'}, {'id': 390226480, 'number': 17, 'closed': datetime.datetime(2020, 7, 9, 8, 14, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 18, 5, 29, 18, tzinfo=datetime.timezone.utc), 'time_taken': 9773133.0, 'time_delta': '113 days, 2:45:33', 'additions': 85, 'deletions': 1, 'state': 'closed'}, {'id': 389982318, 'number': 16, 'closed': datetime.datetime(2020, 8, 20, 13, 21, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 17, 17, 41, 54, tzinfo=datetime.timezone.utc), 'time_taken': 13462764.0, 'time_delta': '155 days, 19:39:24', 'additions': 107, 'deletions': 0, 'state': 'closed'}, {'id': 385546147, 'number': 12, 'closed': datetime.datetime(2020, 8, 20, 13, 19, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 9, 12, 10, 21, tzinfo=datetime.timezone.utc), 'time_taken': 14173723.0, 'time_delta': '164 days, 1:08:43', 'additions': 404, 'deletions': 1, 'state': 'closed'}, {'id': 383722568, 'number': 9, 'closed': datetime.datetime(2020, 3, 5, 0, 25, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 4, 17, 24, 22, tzinfo=datetime.timezone.utc), 'time_taken': 25251.0, 'time_delta': '7:00:51', 'additions': 165, 'deletions': 3, 'state': 'closed'}, {'id': 344925696, 'number': 5, 'closed': datetime.datetime(2020, 7, 28, 8, 41, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 24, 16, 44, 28, tzinfo=datetime.timezone.utc), 'time_taken': 21311824.0, 'time_delta': '246 days, 15:57:04', 'additions': 160, 'deletions': 0, 'state': 'closed'}, {'id': 325637434, 'number': 4, 'closed': datetime.datetime(2019, 11, 11, 14, 30, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 8, 7, 27, 4, tzinfo=datetime.timezone.utc), 'time_taken': 2962984.0, 'time_delta': '34 days, 7:03:04', 'additions': 90, 'deletions': 0, 'state': 'closed'}]"
110709667,packageurl-python,package-url/packageurl-python,Python,42,65,9,17,277,30,1,3,"[{'id': 1768312390, 'number': 150, 'closed': datetime.datetime(2024, 3, 12, 16, 0, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 12, 15, 57, 33, tzinfo=datetime.timezone.utc), 'time_taken': 157.0, 'time_delta': '0:02:37', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1761127797, 'number': 148, 'closed': datetime.datetime(2024, 3, 12, 15, 47, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 7, 14, 12, 53, tzinfo=datetime.timezone.utc), 'time_taken': 437690.0, 'time_delta': '5 days, 1:34:50', 'additions': 29, 'deletions': 2, 'state': 'closed'}, {'id': 1749422496, 'number': 145, 'closed': datetime.datetime(2024, 2, 29, 11, 31, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 29, 10, 4, 14, tzinfo=datetime.timezone.utc), 'time_taken': 5246.0, 'time_delta': '1:27:26', 'additions': 20, 'deletions': 17, 'state': 'closed'}, {'id': 1672473877, 'number': 142, 'closed': datetime.datetime(2024, 2, 20, 10, 41, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 10, 13, 48, 20, tzinfo=datetime.timezone.utc), 'time_taken': 3531186.0, 'time_delta': '40 days, 20:53:06', 'additions': 54, 'deletions': 0, 'state': 'closed'}, {'id': 1641353389, 'number': 138, 'closed': datetime.datetime(2023, 12, 13, 3, 57, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 12, 20, 18, 18, tzinfo=datetime.timezone.utc), 'time_taken': 27563.0, 'time_delta': '7:39:23', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 1636325134, 'number': 136, 'closed': datetime.datetime(2023, 12, 11, 4, 52, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 8, 15, 2, 13, tzinfo=datetime.timezone.utc), 'time_taken': 222618.0, 'time_delta': '2 days, 13:50:18', 'additions': 17, 'deletions': 13, 'state': 'closed'}, {'id': 1448401729, 'number': 126, 'closed': datetime.datetime(2023, 7, 25, 14, 0, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 25, 13, 2, 5, tzinfo=datetime.timezone.utc), 'time_taken': 3502.0, 'time_delta': '0:58:22', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 1448269813, 'number': 125, 'closed': datetime.datetime(2023, 7, 25, 12, 57, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 25, 11, 45, 53, tzinfo=datetime.timezone.utc), 'time_taken': 4268.0, 'time_delta': '1:11:08', 'additions': 45, 'deletions': 7, 'state': 'closed'}, {'id': 1291543620, 'number': 115, 'closed': datetime.datetime(2023, 12, 8, 5, 54, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 27, 15, 13, 6, tzinfo=datetime.timezone.utc), 'time_taken': 22084889.0, 'time_delta': '255 days, 14:41:29', 'additions': 41, 'deletions': 8, 'state': 'closed'}, {'id': 1179605651, 'number': 110, 'closed': datetime.datetime(2022, 12, 28, 18, 31, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 28, 17, 22, 58, tzinfo=datetime.timezone.utc), 'time_taken': 4127.0, 'time_delta': '1:08:47', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1179349584, 'number': 109, 'closed': datetime.datetime(2022, 12, 28, 12, 15, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 28, 11, 51, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1440.0, 'time_delta': '0:24:00', 'additions': 83, 'deletions': 0, 'state': 'closed'}, {'id': 1136168101, 'number': 106, 'closed': datetime.datetime(2022, 12, 28, 11, 10, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 25, 17, 7, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2829788.0, 'time_delta': '32 days, 18:03:08', 'additions': 65, 'deletions': 3, 'state': 'closed'}, {'id': 1057651221, 'number': 98, 'closed': datetime.datetime(2022, 9, 15, 21, 56, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 15, 16, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 18541.0, 'time_delta': '5:09:01', 'additions': 15, 'deletions': 8, 'state': 'closed'}, {'id': 1053195652, 'number': 95, 'closed': datetime.datetime(2022, 9, 15, 16, 11, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 12, 11, 47, 6, tzinfo=datetime.timezone.utc), 'time_taken': 275062.0, 'time_delta': '3 days, 4:24:22', 'additions': 145, 'deletions': 28, 'state': 'closed'}, {'id': 560800183, 'number': 58, 'closed': datetime.datetime(2021, 10, 5, 9, 30, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 25, 5, 48, 2, tzinfo=datetime.timezone.utc), 'time_taken': 21872526.0, 'time_delta': '253 days, 3:42:06', 'additions': 20, 'deletions': 1, 'state': 'closed'}, {'id': 499693309, 'number': 51, 'closed': datetime.datetime(2020, 11, 3, 14, 28, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 8, 6, 31, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2275012.0, 'time_delta': '26 days, 7:56:52', 'additions': 65, 'deletions': 5, 'state': 'closed'}, {'id': 458549999, 'number': 41, 'closed': datetime.datetime(2020, 7, 29, 17, 32, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 16, 30, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3688.0, 'time_delta': '1:01:28', 'additions': 23, 'deletions': 1, 'state': 'closed'}, {'id': 442773457, 'number': 39, 'closed': datetime.datetime(2020, 7, 26, 14, 27, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 1, 15, 24, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2156576.0, 'time_delta': '24 days, 23:02:56', 'additions': 225, 'deletions': 0, 'state': 'closed'}, {'id': 420717824, 'number': 34, 'closed': datetime.datetime(2020, 7, 26, 9, 37, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 12, 26, 55, tzinfo=datetime.timezone.utc), 'time_taken': 5778617.0, 'time_delta': '66 days, 21:10:17', 'additions': 294, 'deletions': 10, 'state': 'closed'}, {'id': 397157996, 'number': 26, 'closed': datetime.datetime(2020, 7, 29, 16, 29, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 1, 18, 22, 21, tzinfo=datetime.timezone.utc), 'time_taken': 10274855.0, 'time_delta': '118 days, 22:07:35', 'additions': 19, 'deletions': 1, 'state': 'closed'}, {'id': 388764256, 'number': 24, 'closed': datetime.datetime(2020, 3, 31, 13, 28, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 15, 16, 52, 27, tzinfo=datetime.timezone.utc), 'time_taken': 1370149.0, 'time_delta': '15 days, 20:35:49', 'additions': 19, 'deletions': 2, 'state': 'closed'}]"
