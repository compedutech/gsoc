pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
950030120,"Initial setup: adds codegen, ci/cd, tests, docs","- [x] Basic project setup with Pkg.jl
- [x] Codegen setup with Clang.jl",True,1,https://api.github.com/repos/JuliaImages/ExifViewer.jl/pulls/1,https://github.com/JuliaImages/ExifViewer.jl/pull/1,closed,1207,0,19,5,0,7,0,0,[],2022-05-28 10:48:43+00:00,2022-06-21 03:31:45+00:00,2047382.0,"23 days, 16:43:02","[{'comment_id': 884129593, 'comment_body': 'I believe CompatHelper and TagBot now needs an update due to how GitHub handles default permission, see also https://github.com/invenia/PkgTemplates.jl/pull/347', 'comment_created': datetime.datetime(2022, 5, 28, 12, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 884129674, 'comment_body': ""Is this needed currently? Maybe we'll just delete or comment them out."", 'comment_created': datetime.datetime(2022, 5, 28, 12, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 884129827, 'comment_body': ""It's better to commit the `lib/Manifest.toml` file and thus lock the Clang version, because we probably don't want to change how wrapper codes are generated for most of the time."", 'comment_created': datetime.datetime(2022, 5, 28, 12, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 884130855, 'comment_body': ""Actually that's one issue I faced rn, which made me to restructure(had to bring them on top) some struct defs and consts in the wrapper. \r\n"", 'comment_created': datetime.datetime(2022, 5, 28, 12, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 884131227, 'comment_body': 'Not yet atleast afaik, but I remember @Gnimuc pointing and being concerned about threading safety so we might want to keep it here.\r\nhttps://libexif.github.io/api/index.html#thread_safety', 'comment_created': datetime.datetime(2022, 5, 28, 12, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 884132719, 'comment_body': ""CompatHelper needs write content permission upate, although I don't see changes in TagBot.yml in PkgTemplates.jl"", 'comment_created': datetime.datetime(2022, 5, 28, 13, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 884135018, 'comment_body': ""Ohhh! I believe I made some mistakes here -- the write content permission is required only if we're using GITHUB_TOKEN.\r\n\r\nThus here as long as we set up ssh key `DOCUMENTER_KEY`, we're good.\r\n\r\n> https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs\r\n> You can use permissions to modify the default permissions granted to the GITHUB_TOKEN, adding or removing access as required, so that you only allow the minimum required access"", 'comment_created': datetime.datetime(2022, 5, 28, 13, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}]","[{'commit_sha': 'fc570e57db2fac05a4fd26a44382e0e13ee9707b', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd46f0ae397cd7110769de2b221e45daa63a38ac1', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b8f6c95b740ec87063ee3b19506efda251ba5be', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b8b8303ec4c568ba84be021cd4a17ba056ccdc0', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '320eec93e1a31078088bcb876ba917ddb2e2d71c', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
977501654,Read Operations,"This will include read operations on tags like:
- readmetadata() : read all tags
- readtags() : reads single or multiple tags

Focus:
- Filepath, IO, data support is to be provided
- benchmark still to be done properly, with docs and tests proper
- improvement in code in general is also required
- no memory related issues after processing.
- Improvement in generalizability of these functions

tags.jl need to export all tags which it doesn't yet and need to decide on the names(IMAGE-WIDTH still looks long and maybe there is a better way to do it), there are some issue with clang.jl wrapper generation that needs a fix so I use a old version from here: https://github.com/ashwani-rathee/io-project/blob/main/exifviewer/gen/LibExif.jl
Also need to check if we have some image availabe in testimages.jl for testing purpose or do I need to include it?

Able to do:
```
julia> read_metadata(""test/test_images/test.jpg"")
Dict{Any, Any} with 12 entries:
  ""EXIF_TAG_DOCUMENT_NAME""     => ""Test_Image""
  ""EXIF_TAG_ORIENTATION""       => ""Bottom-right""
  ⋮                            => ⋮

julia> read_tags(""test/test_images/test.jpg"", tags=[ARTIST, Y_RESOLUTION, X_RESOLUTION])
Dict{Any, Any} with 3 entries:
  ""EXIF_TAG_Y_RESOLUTION"" => ""72""
  ""EXIF_TAG_ARTIST""       => ""Ashwani""
  ""EXIF_TAG_X_RESOLUTION"" => ""72""

```
",True,3,https://api.github.com/repos/JuliaImages/ExifViewer.jl/pulls/3,https://github.com/JuliaImages/ExifViewer.jl/pull/3,closed,687,327,12,13,6,45,0,0,[],2022-06-23 18:31:57+00:00,2022-07-23 03:49:55+00:00,2539078.0,"29 days, 9:17:58","[{'comment_id': 905659742, 'comment_body': ""There's no need to show the performance benchmark in the docstring. If the performance is an issue, open an github issue for it and leave a comment in the source code should be sufficient."", 'comment_created': datetime.datetime(2022, 6, 24, 2, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 905660375, 'comment_body': '```suggestion\r\n        return error(""Unable to read EXIF data: invalid pointer"")\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 2, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 905660846, 'comment_body': 'Can we assume this dict to be `Dict{String,String}()` or `Dict{String,Any}()`?', 'comment_created': datetime.datetime(2022, 6, 24, 2, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 905662161, 'comment_body': 'This buffer can be reused.', 'comment_created': datetime.datetime(2022, 6, 24, 2, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 905662848, 'comment_body': '```suggestion\r\nconst INTEROPERABILITY_INDEX = LibExif.EXIF_TAG_INTEROPERABILITY_INDEX\r\n```', 'comment_created': datetime.datetime(2022, 6, 24, 2, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 906615284, 'comment_body': 'We can go and look for appropriate types of each tag but rn the way it is written, Dict will always be Dict{String,String}()', 'comment_created': datetime.datetime(2022, 6, 25, 1, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 906615930, 'comment_body': 'Okay, great. With this assumption we can use `result = Dict{String,String}()` to make it faster to use (concrete type is faster)', 'comment_created': datetime.datetime(2022, 6, 25, 1, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 906748470, 'comment_body': 'Ah, I see. Maybe we can use `StringView` here to tweak the allocation a bit? This is because both `copy` and getindex `[1:findfirst(iszero, str)-1]` has a copy(allocation) semantic.\r\n\r\n```julia\r\njulia> A = UInt8[\'h\', \'e\', \'l\', \'l\', \'o\', \'\\0\']\r\n6-element Vector{UInt8}:\r\n 0x68\r\n 0x65\r\n 0x6c\r\n 0x6c\r\n 0x6f\r\n 0x00\r\n\r\njulia> B = StringView(A)[1:length(A)-1]\r\n""hello""\r\n\r\njulia> A\r\n6-element Vector{UInt8}:\r\n 0x68\r\n 0x65\r\n 0x6c\r\n 0x6c\r\n 0x6f\r\n 0x00\r\n```', 'comment_created': datetime.datetime(2022, 6, 26, 3, 8, 43, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 906748592, 'comment_body': 'For safety, this should be wrapped as ""try... finally"" block. Otherwise the pointer is released only when every step between succeeds (which is not a good assumption).\r\n\r\nSee https://github.com/JuliaIO/JpegTurbo.jl/blob/33d53e772cb3c11c0f49082d6493b06bec6cbaea/src/decode.jl#L105-L107 for an example', 'comment_created': datetime.datetime(2022, 6, 26, 3, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 906748754, 'comment_body': ""Curiously, what's the `eltype` of this thumbnail_data, `UInt8`?"", 'comment_created': datetime.datetime(2022, 6, 26, 3, 12, 44, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 906749289, 'comment_body': 'I would try to avoid this many symbols to the outside world, so maybe we can wrap this as a module:\r\n\r\n```julia\r\nmodule Tags\r\n\r\nexport ...\r\nconst ..\r\nend\r\n```\r\n\r\nSo that users can do `using ExifViewer.Tags` to manually load all symbols into the workspace. What do you think?', 'comment_created': datetime.datetime(2022, 6, 26, 3, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 906754404, 'comment_body': 'I mean this is a bit of hassle either way:\r\n- So many symbols/tags\r\n- How to best name them?Writing them in tags keyword is quite irritating for me who did just 2 of them\r\n- Make it easier for user to easily access them\r\n  - We can do it either way tbf cause both ways are irritaing enough for the user, automatic load does ease it up slightly but I agree that we are loading a lot of symbols. Does reduction of symbols loaded has any effect on `perfomance/compilation time`? I can see the `design` perspective(parts of it atleast)\r\n  \r\n  ', 'comment_created': datetime.datetime(2022, 6, 26, 4, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 906754585, 'comment_body': 'Yes, its a `UInt8` array of `JPEG compressed data` which is another problem. We should just return this `UInt8` array only right? ', 'comment_created': datetime.datetime(2022, 6, 26, 4, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 906757457, 'comment_body': ""I see... How about defining a normalization method for it:\r\n\r\n```julia\r\nnormalize_exif_flag(flags::Union{AbstractVector, Tuple}) = map(normalize_exif_flag, flags)\r\nnormalize_exif_flag(flag::AbstractString) = normalize_exif_flag(Symbol(flag))\r\nnormalize_exif_flag(flag::Symbol) = getfield(LibExif, flag)\r\nnormalize_exif_flag(flag::LibExif.ExifTag) = flag\r\nnormalize_exif_flag(flag::Int) = LibExif.ExifTag(flag) # Is this the current semantics on Int?\r\n```\r\n\r\nThis way we use libexif's naming rules, and we can leave the heavy explanation of each flag to libexif's documentation."", 'comment_created': datetime.datetime(2022, 6, 26, 5, 19, 32, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 906758165, 'comment_body': 'Quite tempted to use it(looks lot cleaner) but its 1 extra package for a single line of code, given read_metadata and read_tags are likely to be merged:). I am interested in the memory allocations happening quite a lot so will see if this works better for us.', 'comment_created': datetime.datetime(2022, 6, 26, 5, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 906758222, 'comment_body': ""Ideally, this should be decoded into `Array{RGB}` or `Array{Gray}` by JpegTurbo and TiffImages, I'll look into it."", 'comment_created': datetime.datetime(2022, 6, 26, 5, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913371476, 'comment_body': 'This behavior or stringviews.jl is interesting frankly:\r\n```\r\nfunction read_tags(\r\n    data::Vector{UInt8};\r\n    ifds::Union{Int,NTuple,UnitRange} = 1:5,\r\n    read_all = false,\r\n    tags::Vector{LibExif.ExifTag} = Vector{LibExif.ExifTag}([]),\r\n    extract_thumbnail = false,\r\n)\r\n    ed_ptr = LibExif.exif_data_new_from_data(data, length(data))\r\n    if (ed_ptr == C_NULL)\r\n        return error(""Unable to read EXIF data: invalid pointer"")\r\n    end\r\n\r\n    ed = unsafe_load(ed_ptr)\r\n\r\n    ifds = collect(ifds)\r\n    checkbounds(Bool, collect(1:numifds(ed)), ifds) || throw(BoundsError(collect(1:numifds(ed)), ifds))\r\n\r\n    tags = read_all ? tags : Set(tags)\r\n    result = Dict{String,Any}()\r\n    str = Vector{Cuchar}(undef, 1024)\r\n\r\n    for i in ifds\r\n        content_ptr = ed.ifd[i] # ques: do we need to unref these too?\r\n        if (content_ptr == C_NULL)\r\n            return error(""Unable to read IFD:"", i)\r\n        end\r\n        data = unsafe_load(content_ptr)\r\n        if data.count == 0\r\n            continue\r\n        end\r\n        res = unsafe_wrap(Array, data.entries, data.count)\r\n        for i = 1:data.count\r\n            entry = unsafe_load(res[i])\r\n            condition = read_all ? read_all : entry.tag in tags\r\n            if condition\r\n                # println(""Now:"",StringView(str[1:50]))\r\n                LibExif.exif_entry_get_value(Ref(entry), str, length(str))\r\n                # println(""After:"",StringView(str[1:50]))\r\n                # tag = String(copy(str))[1:findfirst(iszero, str)-1]\r\n                # tag = StringView(str)[1:findfirst(iszero, str)-1]\r\n                # tag = StringView(str)[1:length(str)-1]\r\n                tag = StringView(str)[1:findfirst(iszero, str)-1]\r\n                # print(tag)\r\n                # print(str)\r\n                tag = fixformat(tag, entry.format)\r\n                # println(tag)\r\n                if string(entry.tag) ∉ keys(result)\r\n                    println(""Tag:"", string(entry.tag),"", Value:"", tag)\r\n                    println(typeof(tag))\r\n                    result[string(entry.tag)] = tag\r\n                end\r\n\r\n                println(result,""\\n\\n"")\r\n            end\r\n            if read_all == false\r\n                delete!(tags, entry.tag)\r\n                if tags == Set() break end\r\n            end\r\n        end\r\n    end\r\n\r\n    # not sure we should include this\r\n    # if isempty(tags) != true\r\n    #     @info ""Non-Existent Tags:"" tags\r\n    # end\r\n\r\n    if (extract_thumbnail == true)\r\n        thumbnail_size = Int(ed.size)\r\n        thumbnail_data = unsafe_wrap(Array, ed.data, thumbnail_size)\r\n        result[""EXIF_TAG_THUMBNAIL_DATA""] = thumbnail_data\r\n    end\r\n\r\n    LibExif.exif_data_unref(ed_ptr)\r\n    return result\r\nend\r\n```\r\n\r\nResult:\r\n```\r\njulia> @time read_metadata(filepath)\r\nTag:EXIF_TAG_ORIENTATION, Value:Top-left\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_ORIENTATION"" => ""Top-left"")\r\n\r\n\r\nTag:EXIF_TAG_X_RESOLUTION, Value:300\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_ORIENTATION"" => ""300\\0\\0\\0\\0\\0"", ""EXIF_TAG_X_RESOLUTION"" => ""300"")\r\n\r\n\r\nTag:EXIF_TAG_Y_RESOLUTION, Value:300\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_Y_RESOLUTION"" => ""300"", ""EXIF_TAG_ORIENTATION"" => ""300\\0\\0\\0\\0\\0"", ""EXIF_TAG_X_RESOLUTION"" => ""300"")\r\n\r\n\r\nTag:EXIF_TAG_RESOLUTION_UNIT, Value:Inch\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_Y_RESOLUTION"" => ""Inc"", ""EXIF_TAG_ORIENTATION"" => ""Inch\\0\\0\\0\\0"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""Inch"", ""EXIF_TAG_X_RESOLUTION"" => ""Inc"")\r\n\r\n\r\nTag:EXIF_TAG_SOFTWARE, Value:Adobe Photoshop CS Windows\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_SOFTWARE"" => ""Adobe Photoshop CS Windows"", ""EXIF_TAG_Y_RESOLUTION"" => ""Ado"", ""EXIF_TAG_ORIENTATION"" => ""Adobe Ph"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""Adob"", ""EXIF_TAG_X_RESOLUTION"" => ""Ado"")\r\n\r\n\r\nTag:EXIF_TAG_DATE_TIME, Value:2005:05:13 13:09:04\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_SOFTWARE"" => ""2005:05:13 13:09:04\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""200"", ""EXIF_TAG_ORIENTATION"" => ""2005:05:"", ""EXIF_TAG_DATE_TIME"" => ""2005:05:13 13:09:04"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""2005"", ""EXIF_TAG_X_RESOLUTION"" => ""200"")\r\n\r\n\r\nTag:EXIF_TAG_COMPRESSION, Value:JPEG compression\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_SOFTWARE"" => ""JPEG compression\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""JPE"", ""EXIF_TAG_ORIENTATION"" => ""JPEG com"", ""EXIF_TAG_DATE_TIME"" => ""JPEG compression\\0\\0\\0"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""JPEG"", ""EXIF_TAG_COMPRESSION"" => ""JPEG compression"", ""EXIF_TAG_X_RESOLUTION"" => ""JPE"")\r\n\r\n\r\nDict{String, Any}(""EXIF_TAG_SOFTWARE"" => ""72\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""72\\0"", ""EXIF_TAG_ORIENTATION"" => ""72\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_DATE_TIME"" => ""72\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""72\\0\\0"", ""EXIF_TAG_COMPRESSION"" => ""72\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_X_RESOLUTION"" => ""72\\0"")\r\n\r\n\r\nDict{String, Any}(""EXIF_TAG_SOFTWARE"" => ""72\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""72\\0"", ""EXIF_TAG_ORIENTATION"" => ""72\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_DATE_TIME"" => ""72\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""72\\0\\0"", ""EXIF_TAG_COMPRESSION"" => ""72\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_X_RESOLUTION"" => ""72\\0"")\r\n\r\n\r\nDict{String, Any}(""EXIF_TAG_SOFTWARE"" => ""Inch\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""Inc"", ""EXIF_TAG_ORIENTATION"" => ""Inch\\0\\0\\0\\0"", ""EXIF_TAG_DATE_TIME"" => ""Inch\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""Inch"", ""EXIF_TAG_COMPRESSION"" => ""Inch\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_X_RESOLUTION"" => ""Inc"")\r\n\r\n\r\nTag:EXIF_TAG_COLOR_SPACE, Value:sRGB\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_COLOR_SPACE"" => ""sRGB"", ""EXIF_TAG_SOFTWARE"" => ""sRGB\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""sRG"", ""EXIF_TAG_ORIENTATION"" => ""sRGB\\0\\0\\0\\0"", ""EXIF_TAG_DATE_TIME"" => ""sRGB\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""sRGB"", ""EXIF_TAG_COMPRESSION"" => ""sRGB\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_X_RESOLUTION"" => ""sRG"")\r\n\r\n\r\nTag:EXIF_TAG_PIXEL_X_DIMENSION, Value:3000\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_COLOR_SPACE"" => ""3000"", ""EXIF_TAG_SOFTWARE"" => ""3000\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""300"", ""EXIF_TAG_ORIENTATION"" => ""3000\\0\\0\\0\\0"", ""EXIF_TAG_DATE_TIME"" => ""3000\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""3000"", ""EXIF_TAG_COMPRESSION"" => ""3000\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_X_RESOLUTION"" => ""300"", ""EXIF_TAG_PIXEL_X_DIMENSION"" => ""3000"")\r\n\r\n\r\nTag:EXIF_TAG_PIXEL_Y_DIMENSION, Value:3002\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_COLOR_SPACE"" => ""3002"", ""EXIF_TAG_SOFTWARE"" => ""3002\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""300"", ""EXIF_TAG_ORIENTATION"" => ""3002\\0\\0\\0\\0"", ""EXIF_TAG_DATE_TIME"" => ""3002\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_PIXEL_Y_DIMENSION"" => ""3002"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""3002"", ""EXIF_TAG_COMPRESSION"" => ""3002\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_X_RESOLUTION"" => ""300"", ""EXIF_TAG_PIXEL_X_DIMENSION"" => ""3002"")\r\n\r\n\r\nTag:EXIF_TAG_EXIF_VERSION, Value:Exif Version 2.1\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_ORIENTATION"" => ""Exif Ver"", ""EXIF_TAG_EXIF_VERSION"" => ""Exif Version 2.1"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""Exif"", ""EXIF_TAG_COMPRESSION"" => ""Exif Version 2.1"", ""EXIF_TAG_PIXEL_X_DIMENSION"" => ""Exif"", ""EXIF_TAG_COLOR_SPACE"" => ""Exif"", ""EXIF_TAG_SOFTWARE"" => ""Exif Version 2.1\\0ion\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""Exi"", ""EXIF_TAG_PIXEL_Y_DIMENSION"" => ""Exif"", ""EXIF_TAG_DATE_TIME"" => ""Exif Version 2.1\\0io"", ""EXIF_TAG_X_RESOLUTION"" => ""Exi"")\r\n\r\n\r\nTag:EXIF_TAG_FLASH_PIX_VERSION, Value:FlashPix Version 1.0\r\nStringViews.StringView{SubArray{UInt8, 1, Vector{UInt8}, Tuple{UnitRange{Int64}}, true}}\r\nDict{String, Any}(""EXIF_TAG_FLASH_PIX_VERSION"" => ""FlashPix Version 1.0"", ""EXIF_TAG_ORIENTATION"" => ""FlashPix"", ""EXIF_TAG_EXIF_VERSION"" => ""FlashPix Version"", ""EXIF_TAG_RESOLUTION_UNIT"" => ""Flas"", ""EXIF_TAG_COMPRESSION"" => ""FlashPix Version"", ""EXIF_TAG_PIXEL_X_DIMENSION"" => ""Flas"", ""EXIF_TAG_COLOR_SPACE"" => ""Flas"", ""EXIF_TAG_SOFTWARE"" => ""FlashPix Version 1.0\\0\\0\\0\\0\\0\\0"", ""EXIF_TAG_Y_RESOLUTION"" => ""Fla"", ""EXIF_TAG_PIXEL_Y_DIMENSION"" => ""Flas"", ""EXIF_TAG_DATE_TIME"" => ""FlashPix Version 1."", ""EXIF_TAG_X_RESOLUTION"" => ""Fla"")\r\n\r\n\r\n  0.841485 seconds (726.09 k allocations: 45.952 MiB, 1.18% gc time, 85.92% compilation time)\r\nDict{String, Any} with 12 entries:\r\n  ""EXIF_TAG_FLASH_PIX_VERSION"" => ""FlashPix Version 1.0""\r\n  ""EXIF_TAG_ORIENTATION""       => ""FlashPix""\r\n  ""EXIF_TAG_EXIF_VERSION""      => ""FlashPix Version""\r\n  ""EXIF_TAG_RESOLUTION_UNIT""   => ""Flas""\r\n  ""EXIF_TAG_COMPRESSION""       => ""FlashPix Version""\r\n  ""EXIF_TAG_PIXEL_X_DIMENSION"" => ""Flas""\r\n  ""EXIF_TAG_COLOR_SPACE""       => ""Flas""\r\n  ""EXIF_TAG_SOFTWARE""          => ""FlashPix Version 1.0\\0\\0\\0\\0\\0\\0""\r\n  ""EXIF_TAG_Y_RESOLUTION""      => ""Fla""\r\n  ""EXIF_TAG_PIXEL_Y_DIMENSION"" => ""Flas""\r\n  ""EXIF_TAG_DATE_TIME""         => ""FlashPix Version 1.""\r\n  ""EXIF_TAG_X_RESOLUTION""      => ""Fla""\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 5, 4, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 913372883, 'comment_body': 'Allocations does decrease, but not sure if it adds a lot of value\r\n```\r\njulia> @time read_metadata(filepath) # with current\r\n  0.003571 seconds (209 allocations: 6.252 MiB)\r\nDict{String, Any} with 12 entries:\r\n  ""EXIF_TAG_FLASH_PIX_VERSION"" => ""FlashPix Version 1.0""\r\n  ""EXIF_TAG_ORIENTATION""       => ""Top-left""\r\n  ""EXIF_TAG_EXIF_VERSION""      => ""Exif Version 2.1""\r\n  ""EXIF_TAG_RESOLUTION_UNIT""   => ""Inch""\r\n  ""EXIF_TAG_COMPRESSION""       => ""JPEG compression""\r\n\r\njulia> @time read_metadata(filepath) # with stringview version\r\n  0.003398 seconds (191 allocations: 6.221 MiB)\r\nDict{String, Any} with 12 entries:\r\n  ""EXIF_TAG_FLASH_PIX_VERSION"" => ""FlashPix Version 1.0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\…\r\n  ""EXIF_TAG_ORIENTATION""       => ""FlashPix Version 1.0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\…\r\n  ""EXIF_TAG_EXIF_VERSION""      => ""FlashPix Version 1.0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\…\r\n  ""EXIF_TAG_RESOLUTION_UNIT""   => ""FlashPix Version 1.0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\…\r\n  ""EXIF_TAG_COMPRESSION""       => ""FlashPix Version 1.0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\…\r\n```', 'comment_created': datetime.datetime(2022, 7, 5, 4, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 913657962, 'comment_body': 'missing `[compat]` section', 'comment_created': datetime.datetime(2022, 7, 5, 10, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913659317, 'comment_body': '```suggestion\r\n    read_tags(data::Vector{UInt8}; tags::Vector{LibExif.ExifTag})\r\n```', 'comment_created': datetime.datetime(2022, 7, 5, 10, 50, 12, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913663482, 'comment_body': ""How about\r\n\r\n```suggestion\r\nRead EXIF tags from the input source data. Return an empty dictionary if the source data doesn't contain EXIF tags.\r\n\r\nThe input source can be either an `IO` object, a byte sequence `Vector{UInt8}`, or a file path `String`.\r\n\r\nKeywords to control the behavior:\r\n\r\n- `ifds`: ...\r\n- `read_all`: ...\r\n- `tags`: ...\r\n- `extract_thumbnail`: ...\r\n```\r\n\r\n> Return an empty dictionary if the source data doesn't contain EXIF tags.\r\n\r\nMake sure that this is tested. Throw some garbage data into `read_tags` and make sure Julia doesn't crash."", 'comment_created': datetime.datetime(2022, 7, 5, 10, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913665537, 'comment_body': 'Be informative:\r\n\r\n```suggestion\r\n        error(""Unknown format: $format"")\r\n```', 'comment_created': datetime.datetime(2022, 7, 5, 10, 57, 53, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913666568, 'comment_body': "":+1: it's always a good idea to test some negative cases."", 'comment_created': datetime.datetime(2022, 7, 5, 10, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913669820, 'comment_body': 'Make sure if you request a resource (e.g., open a file), you release it when unused. This would be particularly problematic especially open with write mode on Windows. (See our lengthy discussion in TiffImages https://github.com/tlnagy/TiffImages.jl/pull/79#discussion_r880478304)\r\n\r\n```suggestion\r\nfunction read_tags(filepath::AbstractString; kwargs...)\r\n    open(filepath, ""r"") do io\r\n        read_tags(io; kwargs...)\r\n    end\r\nend\r\n```\r\n    \r\n\r\nCRef: https://en.cppreference.com/w/cpp/language/raii', 'comment_created': datetime.datetime(2022, 7, 5, 11, 3, 12, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913673469, 'comment_body': ""What's the meaning of `1:5` for `ifds`? Experimental default, or is it documented somewhere?\r\n\r\nIt looks like this is sufficient already?\r\n\r\n```suggestion\r\nread_metadata(args...; kwargs...) = read_tags(args...; read_all = true, kwargs...)\r\n```"", 'comment_created': datetime.datetime(2022, 7, 5, 11, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913674531, 'comment_body': 'Also test `IOBuffer`:\r\n\r\n```julia\r\nio = IOBuffer()\r\nwrite(io, read(filepath))\r\n```', 'comment_created': datetime.datetime(2022, 7, 5, 11, 9, 20, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913675679, 'comment_body': ""This is just a side comment (nothing needs to fix): it's okay to leave this as it is now. But in the future, we'll make this more useful by building `Array{RGB}` for it."", 'comment_created': datetime.datetime(2022, 7, 5, 11, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913678922, 'comment_body': ""But TBH I don't know if `read_metadata` is necessary here.\r\n\r\nI mean, we can safely make `read_tags(; read_all=true)` by default, and if someone cares about performance, he add `read_all = false`?"", 'comment_created': datetime.datetime(2022, 7, 5, 11, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913721944, 'comment_body': 'Do you do test driven developement? like write tests first and then achieve those functionality', 'comment_created': datetime.datetime(2022, 7, 5, 12, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 913728307, 'comment_body': 'Yeah, this we could do..`read_metadata` seems redundant now. I do wanna know how do you decide if something is too concise or not concise enough?', 'comment_created': datetime.datetime(2022, 7, 5, 12, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 913743701, 'comment_body': 'And ifds number is a experimental number right now. For which I was assuming, that 1:5 reads all but I have changed that now to be more flexible.', 'comment_created': datetime.datetime(2022, 7, 5, 12, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 913759099, 'comment_body': ""API-driven or test-driven development are good workflows, but I won't say it's a pick-one-and-ignore-all-others choice.\r\n\r\nBasically, I'll\r\n\r\n1. first have a few concrete cases in mind to play with (e.g., the earth jpeg image in your case)\r\n2. then I'll play with the API to find out a design that satisfies me most (e.g., deduplicating the `read_tags` and `read_metadata` stuff)\r\n3. then add more test cases to try to cover most of the common usages\r\n4. usually, writing test helps catch more bugs, fix them\r\n5. when everything gets stable, finish the documentation\r\n\r\nI know there are many people stopping at step 1 and saying it's finished, but a reliable functionality usually gets all involved."", 'comment_created': datetime.datetime(2022, 7, 5, 12, 49, 7, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913762653, 'comment_body': ""> I do wanna know how do you decide if something is too concise or not concise enough?\r\n\r\nI'm not sure if I understand this. But for code duplication, I code every single line most of the time and avoid the copy & paste workflow.\r\nBy doing this I'll be very sensitive to code duplication when I have to write the same code logic repeatedly.\r\n\r\nLuckily, Julia has awesome features to allow us to deduplicate the codes without messing everything up.\r\n\r\nIs this what you're asking for?"", 'comment_created': datetime.datetime(2022, 7, 5, 12, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 913781300, 'comment_body': ""> Is this what you're asking for?\r\n\r\nYes, but yeah being conscious of every time copy paste situation arise is a opportunity to refactor and avoid copying\r\n\r\n> I code every single line most of the time and avoid the copy & paste workflow. \r\n\r\nThis is the trick actually, just being conscious of copying to avoid it.\r\n"", 'comment_created': datetime.datetime(2022, 7, 5, 13, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 917721824, 'comment_body': '`unsafe_string`?', 'comment_created': datetime.datetime(2022, 7, 11, 9, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 917969329, 'comment_body': 'Yes this was exactly what I was looking for, they were null terminated but their sizes were not known', 'comment_created': datetime.datetime(2022, 7, 11, 14, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 925183766, 'comment_body': ""discussion in TiffImages https://github.com/tlnagy/TiffImages.jl/pull/79#discussion_r880478304) seems very interesting which will be a work in progress in understanding, I think I'll just finish this for now"", 'comment_created': datetime.datetime(2022, 7, 20, 5, 21, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 925184528, 'comment_body': 'should I do this for io too?ensuring that `IO` is closed too', 'comment_created': datetime.datetime(2022, 7, 20, 5, 23, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 926207126, 'comment_body': ""> should I do this for io too? Ensuring that IO is closed too\r\n\r\nEnsuring the resource is properly closed when not used anymore is a basic requirement unless you have special reasons to not do so. IO, memory, windows are such kind of resources. That is, we should always use `open(file) do ... end` syntax unless there are special reasons.\r\n\r\nThe issue tim and I discussed there is because `mmap` is a special usage -- I'm not very convinced that it's a good design, but it doesn't hurt much (since mmap is an advanced feature and most developers who know `mmap` have the skill to identify the resource issue)"", 'comment_created': datetime.datetime(2022, 7, 21, 2, 53, 28, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 926208024, 'comment_body': '```suggestion\r\ntake input in form of Filepath, IO, and bytes sequence(`Vector{UInt8}`)\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 2, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 926209352, 'comment_body': 'I assume you want to illustrate `data = read(filepath)`? Ask this because this `file` example is the same as the `io` example above.', 'comment_created': datetime.datetime(2022, 7, 21, 2, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 926210074, 'comment_body': ""Nitpicking: let's make a `const IFDS_ALL_FIELDS = 1:5` and use it. Generally, we'd better avoid magical numbers."", 'comment_created': datetime.datetime(2022, 7, 21, 3, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 926212914, 'comment_body': 'Also nitpicking: use `open(filepath, ""r"") do io ... end` syntax here and below -- any explicit `close` gives a smell of bad practice.\r\n\r\nLet me try to re-explain this a bit:\r\n\r\n```julia\r\nio = open(...)\r\ndo_something(io)\r\nclose(io)\r\n```\r\n\r\nif `do_something` fails and errors, then `close(io)` will not be called at all, which means you\'ll never release the resource unless you restart Julia. This is why we need\r\n\r\n```julia\r\nio = open(...)\r\ntry\r\n    do_something(io)\r\nfinally\r\n    close(io)\r\nend\r\n```\r\n\r\nand the above is simplified to\r\n\r\n```julia\r\nopen(...) do io\r\n    do_something(io)\r\nend\r\n```\r\n\r\nwhich is backed by:\r\n\r\n```julia\r\nfunction open(f::Function, args...)\r\n    io = open(args...)\r\n    try\r\n        f(io)\r\n    finally\r\n        close(io)\r\n    end\r\nend\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 3, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 926292417, 'comment_body': 'Yeah I wanted to show example for all input types, should we just show 1 type?', 'comment_created': datetime.datetime(2022, 7, 21, 6, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 926296719, 'comment_body': ""It's perfectly fine to have examples for all input types but we'll need to use `read(filepath)` here."", 'comment_created': datetime.datetime(2022, 7, 21, 6, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}]","[{'commit_sha': '98ea15efaa618804db5bdd8d40e82d1c56177c74', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed393018e544f4bc8714bb06eb1e0aa7074c9568', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4d6bb1733211b451906c685588f52df8d48fca0', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b1977f32bf85a4c267338bae8a74bc0815ff2f0', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca2057eea21de1fb50ff21799ea5a66e11ff9b9a', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0ff80ca279bbada0baf4fc914686a3dcdb062b8', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb99c6a23ec02112e123d3dd7ef6682c8c491d54', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2602809c2d62849ab7fc72977e7b4e1f688b27bf', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dd0a126ec44810f585e4ed9eac6c8fa44ef37d3', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfa8ea6035de3057659fac19e2b90add9a5b7033', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b5bee1edefbf37ecb92a8cf388f7d248e4e7bf0', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc9d15e5cff34c678f04397a66a10f54df6b286', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b3f14d8ae8b105977031bd432b003ed36cbb2c2', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
1006433648,EXIF Write Operations,"- [ ] will provide write operations for EXIF
- Important here is consistency in encoding n decoding results n also ensure results are indentical to libexif created exif files directly. This PR is going to take some time.
MWE: 
```
using Pkg
Pkg.activate(""."")
using ExifViewer
using ColorTypes
img = Gray.(rand(100, 100))
tags=Dict{String, Any}(
              ""EXIF_TAG_FLASH_PIX_VERSION""           => ""FlashPix Version 1.01"",
              ""EXIF_TAG_COMPRESSION""                 => ""JPEG compression"",
              ""EXIF_TAG_PIXEL_Y_DIMENSION""           => ""480"",
              ""EXIF_TAG_PIXEL_X_DIMENSION""           => ""480"",
              ""EXIF_TAG_Y_RESOLUTION""                => ""50"",
              ""EXIF_TAG_X_RESOLUTION""                => ""50"",
              ""EXIF_TAG_FOCAL_LENGTH""                => ""5.8 mm"")
write_tags(""test.jpg""; img=img, tags=tags)
read_tags(""test.jpg"")

```",True,6,https://api.github.com/repos/JuliaImages/ExifViewer.jl/pulls/6,https://github.com/JuliaImages/ExifViewer.jl/pull/6,closed,512,6,9,3,1,0,0,0,[],2022-07-23 23:08:41+00:00,2022-10-01 08:47:22+00:00,5996321.0,"69 days, 9:38:41",[],"[{'commit_sha': 'da2388e1b74a6eef290152d2f10c5c67012d4a18', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ced7e56cd687216b8deb46bb45558c4ab02568cc', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9e61d1e7fee4307050e740ceb4b6eadfa2f7f2c', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
950076366,"Initial setup: adds codegen, ci/cd, tests, docs","- [x] Basic project setup with Pkg.jl
- [x] Codegen setup with Clang.jl
",True,1,https://api.github.com/repos/JuliaIO/GIFImages.jl/pulls/1,https://github.com/JuliaIO/GIFImages.jl/pull/1,closed,775,0,16,2,0,0,0,0,[],2022-05-28 14:37:38+00:00,2022-05-29 02:07:19+00:00,41381.0,11:29:41,[],"[{'commit_sha': 'f5e63ba799d4e490508171aea064bc18d60b48cd', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79f999e72480666569a99c3c200ecb86e96cb288', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
999759169,Decode Operation,- [x] Adds decode operation for GIFs,True,4,https://api.github.com/repos/JuliaIO/GIFImages.jl/pulls/4,https://github.com/JuliaIO/GIFImages.jl/pull/4,closed,263,5,15,9,4,16,0,0,[],2022-07-18 18:38:40+00:00,2022-08-22 12:40:41+00:00,3002521.0,"34 days, 18:02:01","[{'comment_id': 924161194, 'comment_body': 'hmmm, why would you test `sz[1] == 33` instead of `sz == (33, ...)`?', 'comment_created': datetime.datetime(2022, 7, 19, 7, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 924163140, 'comment_body': 'If this opens a file handler, then it should be properly closed inside this function. Use\r\n\r\n```julia\r\ntry\r\n    gif = LibGif.DGifOpenFileName(path, Ref(Error))\r\n    ...\r\nfinally\r\n    LibGif.EGifCloseFile(gif, Ref(Error));\r\nend\r\n```\r\n\r\nThis is for the same reason to https://github.com/ashwani-rathee/ExifViewer.jl/pull/3#discussion_r913669820', 'comment_created': datetime.datetime(2022, 7, 19, 7, 38, 42, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 924165395, 'comment_body': 'Instead of returning a `false` value, it should just error.\r\n\r\n```julia\r\n    gif == C_NULL && error(""failed to open the gif file: null pointer"")\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 7, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 924170298, 'comment_body': ""Maybe we'd keep consistent to ImageMagick and make it an `AbstractArray{<:Colorant}` instead of vector of array `Vector{<:AbstractArray}`."", 'comment_created': datetime.datetime(2022, 7, 19, 7, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 924171474, 'comment_body': ""Unless there's a valid reason, use `Int` instead of `Int64`. Otherwise, this function on 32-bit system can go wildly wrong, especially for `ccall`-related stuff."", 'comment_created': datetime.datetime(2022, 7, 19, 7, 47, 36, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 924173525, 'comment_body': 'always remember to add compat section', 'comment_created': datetime.datetime(2022, 7, 19, 7, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 924176257, 'comment_body': 'Hmmm, I think we can safely keep both `libgifextra_jll` and `Giflib_jll` in the same `gen/Project.toml` __and `gen/Manifest.toml`__ file and use one single `generater.jl` to generate both wrapped modules.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 946362983, 'comment_body': 'Actually I wanted to know about the number of images in the gif here', 'comment_created': datetime.datetime(2022, 8, 16, 5, 55, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 951089790, 'comment_body': 'Do you happen to know the `@debug` usage? For instance,\r\n\r\n```\r\nJULIA_DEBUG=GIFImages julia --project\r\n```\r\n\r\nwill print all `@debug` message in GIFImages to the stderr.\r\n\r\nSee also JuliaLogging: https://julialogging.github.io/how-to/enable-debug/', 'comment_created': datetime.datetime(2022, 8, 22, 7, 16, 18, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 951091456, 'comment_body': 'Can we unconditionally assume the input bytes are `RGB{N0f8}`, will it be, e.g., `ARGB{N0f8}` or `RGBA{N0f8}`, or if possible, `Gray{N0f8}`?', 'comment_created': datetime.datetime(2022, 8, 22, 7, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 951113653, 'comment_body': ""We can unconditionally assume the input bytes are RGB{N0f8} as the GifColorType can hold only RGB:\r\nhttps://github.com/ashwani-rathee/GIFImages.jl/blob/194c01c50ff928dc97c290a13d01e2bb16187680/lib/LibGif.jl#L18\r\nas we know Gif's are palette based(max `256 Colors`)and uses colormap which can only contains colors of type GifColorType."", 'comment_created': datetime.datetime(2022, 8, 22, 7, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 951137901, 'comment_body': 'This is quite useful for debugging purposes, using it now 👍🏻 ', 'comment_created': datetime.datetime(2022, 8, 22, 8, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 951168800, 'comment_body': 'I kept separate generators, but they are in same folder and use same toml files. I want to keep them separate(doubtful tho, should I?) as there are likely to be changes in giflibextra which is highly unlikely for giflib. ', 'comment_created': datetime.datetime(2022, 8, 22, 8, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 951196263, 'comment_body': 'actually the four space version is ""correct"" 😆 ', 'comment_created': datetime.datetime(2022, 8, 22, 9, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 951201426, 'comment_body': 'Actually, it\'s unclear to me what ""local""/""global"" color map means at the first glance. But I figure there\'s a (global) colormap for the GIF file, and a (local) colormap for each slice of the GIF file?', 'comment_created': datetime.datetime(2022, 8, 22, 9, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 951333291, 'comment_body': 'Yes, there is a global(common for all) and local color map(some slices) which tell what color palettes to use. I will update it to make it more clearer.', 'comment_created': datetime.datetime(2022, 8, 22, 11, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}]","[{'commit_sha': '236d2ea7b7052b324384eb83f38f608d4a1b9347', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4bc9ecf3c4c71f0db38d094ff6960e8456f43e9', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81a84a73ba90c69a8424672d12a3b60f00b229a5', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbbb17c6e8972a422e50c8617b1e621b161deb54', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd71e29f3da64a76e55dcc2d8855805c0dfa3d5c7', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da5dba7641277a3702a791578e4fefd0a504540c', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a78c9a1236127e4947ab48cbdb78857695e8603e', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c3905286782e34726917d3fb5e45fa5734f3ba5', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e155a074799576a73d7b6a1b758be29608471ad5', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
1033601560,Encode Operation,"This intends to solve the encoding operation for the gif file in Julia
- [ ] Need to benchmark it
- [ ] Memory usage and time taken is concerning 
- [ ] Ensure the file gets closed properly and it's safe against segmentation faults(so many different types occured while learning about this encoding part)
- [ ] Local colormaps usage
- [x] Optimize the quantization process, right now using Noise.jl
- [x] Lots of tests

---

After first commit, it's no good for us
```
julia> @btime gif_encode(""test1.gif"", img) # from gifimages
  23.328 ms (181010 allocations: 8.33 MiB)

julia> @btime save(""test.gif"", img) # from imagemagick
  9.790 ms (52 allocations: 524.83 KiB)
```

Quantization, Unique functions are slow, might need to write quantization algorithm that return quantized image and colormap used. or something useful can be found in ImageSegmentation.jl. Makes sense to use staticarrays.

Some improvements in allocations after 2, use of inplace methods and removal of redundant functions helps :
```
julia> @btime gif_encode(""test1.gif"", img)
  17.782 ms (3218 allocations: 343.05 KiB)
```
But quantization and unique alone contribute 11 ms to gif_encode. ",True,6,https://api.github.com/repos/JuliaIO/GIFImages.jl/pulls/6,https://github.com/JuliaIO/GIFImages.jl/pull/6,closed,597,11,10,8,2,20,0,0,[],2022-08-23 03:41:16+00:00,2022-10-02 07:00:12+00:00,3467936.0,"40 days, 3:18:56","[{'comment_id': 952151353, 'comment_body': 'This seems like what DitherPunk does. Maybe it\'s worth a try.\r\n\r\nBut DitherPunk might not be very performant speaking of ""finding the optimal colormap""', 'comment_created': datetime.datetime(2022, 8, 23, 4, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 952166310, 'comment_body': ""Yes, it has color quantization but it's extremely slow due to use of K-means for larger colormaps like 256 colors that I am testing on.\r\n```\r\njulia> @btime get_colorscheme(img, 256)\r\n  594.995 ms (13873 allocations: 10.10 MiB)\r\n256-element Array{Lab,1} with eltype Lab:\r\n Lab{Float32}(0.0030800242f0,0.013884343f0,-0.0012285172f0)\r\n Lab{Float32}(55.85164f0,6.267978f0,42.197575f0)\r\n Lab{Float32}(14.842407f0,16.811573f0,21.251535f0)\r\n ⋮\r\n Lab{Float32}(37.92864f0,9.700211f0,33.112446f0)\r\n Lab{Float32}(42.646324f0,9.169061f0,40.786533f0)\r\n Lab{Float32}(22.497734f0,7.0694623f0,19.340601f0)\r\n \r\n julia> @btime get_colorscheme(img, 16) # for smaller color maps it does fine\r\n  2.830 ms (1799 allocations: 939.92 KiB)\r\n ```\r\nMethod: https://github.com/JuliaImages/DitherPunk.jl/blob/master/src/clustering.jl\r\nResource on this topic: https://stackoverflow.com/questions/49710006/fast-color-quantization-in-opencv"", 'comment_created': datetime.datetime(2022, 8, 23, 5, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 952172742, 'comment_body': 'I think what @roflmaostc is doing in Noise.jl is uniform quantization, which is a very simple method too', 'comment_created': datetime.datetime(2022, 8, 23, 5, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 952218858, 'comment_body': 'We might be interested in having method similiar to minimum variance quantization which is said to be much better than above two methods. ', 'comment_created': datetime.datetime(2022, 8, 23, 6, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 967833461, 'comment_body': 'Now we have 2 more quantizers: median cut algorithm and octree color quantisation algorithm. Now that I am doing it, I will get Kd-tree quantisation method also in next few commits but testing them properly is going to be a task.', 'comment_created': datetime.datetime(2022, 9, 11, 13, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 969257324, 'comment_body': 'This seems perfectly a case that can be implemented in a separate standalone package so that other packages (e.g., DitherPunk) can benefit from it.\r\n\r\ncc: @adrhill\r\n\r\n', 'comment_created': datetime.datetime(2022, 9, 13, 7, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 969531988, 'comment_body': ""Yes, this would be very useful and I'd be very interested in contributing to (or writing) such a package. :)"", 'comment_created': datetime.datetime(2022, 9, 13, 12, 0, 41, tzinfo=datetime.timezone.utc), 'commenter': 'adrhill', 'type': 'User'}, {'comment_id': 970199784, 'comment_body': ""A small discussion on slack: because this package along with the other two https://github.com/ashwani-rathee/ExifViewer.jl and https://github.com/ashwani-rathee/JPEG2000.jl are part of GSoC 22', we'll quickly get this PR merged and then task switch to JPEG2000. So these quantization methods will be temporarily kept private to GIFImages.\r\n\r\nJust opened an issue so that we don't forget this https://github.com/ashwani-rathee/GIFImages.jl/issues/7"", 'comment_created': datetime.datetime(2022, 9, 14, 0, 56, 24, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 971835458, 'comment_body': ""We have KDtree color quantisation method too now(covering base for all standard color quantiser methods) but now we need to thoroughly test them and ensure they don't break. Number of memory allocations is an issue and also benchmark time still concerning. "", 'comment_created': datetime.datetime(2022, 9, 15, 10, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 980540162, 'comment_body': 'We should ensure this file is closed even if an error happens during the call. Or is the following pattern already done somewhere?\r\n\r\n```julia\r\n    gif_file = LibGif.EGifOpenFileName(filepath, 0, Ref(error))\r\n    try\r\n         ....\r\n    finally\r\n        if gif_file != C_NULL\r\n            LibGif.EGifCloseFile(gif_file, 0)\r\n        end\r\n    end\r\n', 'comment_created': datetime.datetime(2022, 9, 26, 22, 2, 31, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 980542942, 'comment_body': ""Unfortunately, I don't have x86 machines either.\r\n\r\nFor x86 debug purposes, maybe we can insert some `@info` message here and see if it crashes at the first iteration, or crashes in later calls?"", 'comment_created': datetime.datetime(2022, 9, 26, 22, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 980543987, 'comment_body': 'For `RGB{N0f8}`, `colors * 255` is `RGB{Float32}` type. Will this be an issue?', 'comment_created': datetime.datetime(2022, 9, 26, 22, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 980544574, 'comment_body': 'Does `@view(data[1:medind])` help the performance here?', 'comment_created': datetime.datetime(2022, 9, 26, 22, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 980546834, 'comment_body': 'some of the performance overhead comes from the fact that this is a zipped object (`enumerate(vec(img))`).\r\n\r\nHow about using `sortperm!` instead to separate the indices from the image data?', 'comment_created': datetime.datetime(2022, 9, 26, 22, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 980553783, 'comment_body': ""To save one allocation:\r\n\r\n```suggestion\r\n        img1 = vec(collect(@view(img[:, :, i])'))\r\n```"", 'comment_created': datetime.datetime(2022, 9, 26, 22, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 985075508, 'comment_body': 'Allocations do reduce with @views\r\n```\r\njulia> img = gif_decode(get_example(""fire.gif""));\r\njulia> @time mediancutquantisation(img; numcolors=32) == 16 # with @view\r\n  0.008306 seconds (165 allocations: 3.698 MiB)\r\njulia> @time mediancutquantisation(img; numcolors=32) == 16 # without view\r\n  0.008978 seconds (289 allocations: 8.234 MiB)\r\n```', 'comment_created': datetime.datetime(2022, 10, 1, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 985075922, 'comment_body': ""I don't think so as it converts them to basically `UInt8` in `LibGif.GifColorType(x.r, x.g, x.b)` after that."", 'comment_created': datetime.datetime(2022, 10, 1, 9, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 985078589, 'comment_body': 'Lot less memory allocations, yes but we lose on time taken but manageable.\r\n```\r\njulia> img = gif_decode(get_example(""fire.gif"")); # cuz this has less number of colors\r\n\r\n@time mediancutquantisation(img; numcolors=32); # current method\r\n  0.010385 seconds (289 allocations: 8.234 MiB)\r\n  \r\njulia> @time mediancutquantisation(img; numcolors=32); # with sortperm!\r\n  0.054108 seconds (282 allocations: 828.938 KiB)\r\n  ```\r\n  ', 'comment_created': datetime.datetime(2022, 10, 1, 9, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 985116584, 'comment_body': 'I have seen EGifCloseFile causing unusual errors but LibGif.EGifSpew(gif_file) works really well and close the file too, but its right of you to point that we should close the file in case a error happens n have a try and catch\r\n', 'comment_created': datetime.datetime(2022, 10, 1, 16, 8, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 985188052, 'comment_body': 'much improved now\r\n```\r\njulia> @time p = mediancutquantisation(img; numcolors = 32);\r\n  0.009737 seconds (260 allocations: 825.438 KiB)\r\n```', 'comment_created': datetime.datetime(2022, 10, 2, 6, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}]","[{'commit_sha': 'a2ff7de37b6a53e79a31a53860b9230642d55bc0', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a1ccfdde7e07e1686da5a150d2774f9a275972', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c58245de04be98d9d7f2cc75ce340cb3da3acd09', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '113f45b17f90a6d9770e327a8e57e873dc4717cf', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95bf32b2e84b14342ac45b2ff7c64a538c9ae59a', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46dad04f9ed255396c062ca7104d09f9e26e3c5d', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90b9ee873c8d9bac47ed2e0f02c95f55631bc683', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '405637e4d77c02ce09a9d15e055f7912dc3b4639', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
950063526,"Initial setup: adds codegen, ci/cd, tests, docs","- [x] Basic project setup with Pkg.jl
- [x] Codegen setup with Clang.jl

Notes: 
- Makes sense to keep manifest file in gen/ to use specific version of Clang.jl
- Note down issues that come while wrapper gen process runs like CLcursor, header locating issue
- Might remove multithreading workflow in UnitTest.yml but still keeping it here because there are examples of decoding these images in multithreads https://stackoverflow.com/questions/32357867/ffmpeg-decode-jpeg-2000-in-multithread",True,1,https://api.github.com/repos/ashwani-rathee/JPEG2000.jl/pulls/1,https://github.com/ashwani-rathee/JPEG2000.jl/pull/1,closed,1245,0,17,2,0,0,0,0,[],2022-05-28 13:22:52+00:00,2022-05-29 02:08:02+00:00,45910.0,12:45:10,[],"[{'commit_sha': 'e0f919624c1597e50e74a61d65d26ed1ac5be609', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0750d3365da7a337da7f44444fafbc0f1d76243', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
1032420588,LibOpenJpegExtra generator,"- [x] Adds the generator for LibOpenJpegExtra in the repository
- [x] Common folder for both generators",True,3,https://api.github.com/repos/ashwani-rathee/JPEG2000.jl/pulls/3,https://github.com/ashwani-rathee/JPEG2000.jl/pull/3,closed,67,0,8,2,0,0,0,0,[],2022-08-22 07:21:09+00:00,2022-08-22 12:34:29+00:00,18800.0,5:13:20,[],"[{'commit_sha': '6da238db084f8b911ea6f7a75d5967b187c13f4a', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3917edd3fea04883bd194b9d3a4706bd277ad0bc', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
1034449502,[WIP] Decode operation,"This will take a while but it needs to be here to continue on this work. Provides decode operation of JPEG2000 and no current solution for this exists in Julia rn.

Notes:
- [ ] Fix the issues related libopenjpegextra.so and libgifextra 
- [ ] Use the test-data provided in openjpeg-data to optimally 
- [ ] Generation of wrapper modules has type issues that needs to be fixed
- [ ] Lots of keywords are available in opj_decompress
- [ ] Supports for the different colorspaces
- [ ] Proper file handling in C
- [ ] Lots of tests",False,4,https://api.github.com/repos/ashwani-rathee/JPEG2000.jl/pulls/4,https://github.com/ashwani-rathee/JPEG2000.jl/pull/4,open,480,4,7,1,0,0,0,0,[],2022-08-23 16:56:20+00:00,,0.0,,[],"[{'commit_sha': '214f7228d2b5ead2fd8a656ce847112f1325c0bb', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
930228205,GifLib extra initial recipe,"This adds recipe for tarball build of Giflib programs and additional apis that are not provided in libgif already provided here.
",True,4882,https://api.github.com/repos/JuliaPackaging/Yggdrasil/pulls/4882,https://github.com/JuliaPackaging/Yggdrasil/pull/4882,closed,35,0,1,9,3,13,0,0,[],2022-05-07 07:22:58+00:00,2022-07-18 15:04:14+00:00,6248476.0,"72 days, 7:41:16","[{'comment_id': 867322027, 'comment_body': 'We need to make this a standalone git repository first; the `io-project` repository is only for experimental purposes.', 'comment_created': datetime.datetime(2022, 5, 7, 8, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 867361119, 'comment_body': 'This name _**must**_ match the name of the directory where the file is in', 'comment_created': datetime.datetime(2022, 5, 7, 14, 55, 46, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 867361224, 'comment_body': ""Yes, a standalone repository would be nicer.  Also, _**never**_ reference a branch name, like `main`, in the URL: it's a moving target, if you push another commit to the repository this recipe won't work anymore, which isn't acceptable."", 'comment_created': datetime.datetime(2022, 5, 7, 14, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 867361291, 'comment_body': '```suggestion\r\ncd $WORKSPACE/srcdir/libgifextra/\r\nmake -j${nproc}\r\nmake install\r\n```', 'comment_created': datetime.datetime(2022, 5, 7, 14, 57, 37, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 867361361, 'comment_body': 'Any particular reasons for not building on non-Linux platforms?\r\n```suggestion\r\nplatforms = supported_platforms(; exclude=!Sys.islinux)\r\n```', 'comment_created': datetime.datetime(2022, 5, 7, 14, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 868138244, 'comment_body': 'https://github.com/ashwani-rathee/GifLibExtra I think with this git repo(initial base lib PR which is WIP https://github.com/ashwani-rathee/GifLibExtra/pull/1 ), current name in build_tarballs.jl will work right?', 'comment_created': datetime.datetime(2022, 5, 9, 15, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 868140641, 'comment_body': 'I actually want to build for all platforms which have Julia Tier-1 support atleast but I had issues with MacOS artifacts downloads while binary builder run wizard building section ran.', 'comment_created': datetime.datetime(2022, 5, 9, 15, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 868149877, 'comment_body': '> current name in build_tarballs.jl will work right?\r\n\r\nI\'m not sure if I understand this; do you mean the case differences ""Giflibextra"" vs ""GifLibExtra""? I believe BB doesn\'t differentiate this but it\'s better to be consitent.\r\n\r\n---\r\n\r\nWhen GifLibExtra is ready (with valid licenses), you can tag a release v0.0.1. Then I believe it should properly pass Yggdrasil build, assuming the build script works.', 'comment_created': datetime.datetime(2022, 5, 9, 15, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'johnnychen94', 'type': 'User'}, {'comment_id': 879921498, 'comment_body': '```suggestion\r\ncd $WORKSPACE/srcdir/GifLibExtra/lib\r\nmake -j${nproc}\r\nmake install\r\n```', 'comment_created': datetime.datetime(2022, 5, 23, 22, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 879921865, 'comment_body': ""This name must match exactly the name of the directory, so either change this name or rename the directory.  I'd probably suggest to rename the directory."", 'comment_created': datetime.datetime(2022, 5, 23, 22, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 918472600, 'comment_body': 'But the name of the git directory is https://github.com/ashwani-rathee/GifLibExtra , is `GifLibExtra` which is same as name here. I am sure I am missing something sorry, can you tell? I think I need to change the Git directory name to libgifextra only?and everything else too with GifLibExtra', 'comment_created': datetime.datetime(2022, 7, 12, 1, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}, {'comment_id': 918487223, 'comment_body': 'Quoting (again) from https://github.com/JuliaPackaging/Yggdrasil/pull/4882#discussion_r867361119\r\n\r\n> This name _**must**_ match the name of the directory where the file is in\r\n\r\nThe directory of https://github.com/JuliaPackaging/Yggdrasil/blob/bf459f5b2f86641e0f48f027c37189da61ff96d6/L/libgifextra/build_tarballs.jl is called `L/libgifextra`', 'comment_created': datetime.datetime(2022, 7, 12, 2, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'giordano', 'type': 'User'}, {'comment_id': 918494112, 'comment_body': 'Okay, parts of the problem solved. Thanks!!!', 'comment_created': datetime.datetime(2022, 7, 12, 2, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ashwani-rathee', 'type': 'User'}]","[{'commit_sha': '72fbca23e43420bbbd2134ec7ecd4ab01da0e6d4', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bd0009c7046038794df58383cf9de4c65833eec', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ef39518faf61dc5f3f900a2a4802d053f4f113', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': '085a00ddf7f65cb323b42d60f525941e080a165e', 'committer_username': 'giordano', 'committer_name': 'Mosè Giordano', 'committer_email': None, 'commit_date': datetime.datetime(2011, 5, 3, 14, 5, 32, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de519fd5e46f8f04a55affd60e3c5833ec838b5', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b39b8278df01f12b5b3358ada0981625064d9327', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf459f5b2f86641e0f48f027c37189da61ff96d6', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b95c05c1b5bdeb17fda3cbbf6b25dfb6e2c6b544', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e787bb86966a3412caf30a22cde6d38f401a7332', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
999705061,LibOpenJpegExtra basic library,"- [x] Adds basic LibOpenJpegExtra version

This one adds extra apis from openjpeg
The repository is at: https://github.com/ashwani-rathee/libopenjpegextra",True,5173,https://api.github.com/repos/JuliaPackaging/Yggdrasil/pulls/5173,https://github.com/JuliaPackaging/Yggdrasil/pull/5173,closed,35,0,1,2,3,0,0,0,[],2022-07-18 17:42:05+00:00,2022-07-18 19:11:48+00:00,5383.0,1:29:43,[],"[{'commit_sha': '7eb69379229a85feef4f597f796ed924046751f9', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb07718c8ba9f18bd28a3c1466ed61b109073a74', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131
1081334268,Version 0.0.2 of libopenjpegextra,- Improved and more flexifble decode and encode methods,True,5643,https://api.github.com/repos/JuliaPackaging/Yggdrasil/pulls/5643,https://github.com/JuliaPackaging/Yggdrasil/pull/5643,closed,2,2,1,1,0,0,0,0,[],2022-10-09 18:25:57+00:00,2022-10-09 18:36:55+00:00,658.0,0:10:58,[],"[{'commit_sha': '889b5a536a14f37ce2d526cce3e358dba32a6cd3', 'committer_username': 'ashwani-rathee', 'committer_name': 'Ashwani Rathee', 'committer_email': None, 'commit_date': datetime.datetime(2019, 9, 3, 15, 35, 7, tzinfo=datetime.timezone.utc)}]",Ashwani Rathee,54855463,,User,,208,,2,131

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
497219970,ExifViewer.jl,JuliaImages/ExifViewer.jl,Julia,1,28,3,2,64,9,5,1,"[{'id': 1426031991, 'number': 28, 'closed': datetime.datetime(2023, 7, 8, 18, 59, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 8, 18, 48, 47, tzinfo=datetime.timezone.utc), 'time_taken': 620.0, 'time_delta': '0:10:20', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1275462431, 'number': 21, 'closed': datetime.datetime(2023, 4, 19, 15, 38, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 14, 17, 11, 49, tzinfo=datetime.timezone.utc), 'time_taken': 3104797.0, 'time_delta': '35 days, 22:26:37', 'additions': 155, 'deletions': 112, 'state': 'closed'}, {'id': 1252279920, 'number': 19, 'closed': datetime.datetime(2023, 2, 24, 4, 25, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 23, 21, 4, 33, tzinfo=datetime.timezone.utc), 'time_taken': 26461.0, 'time_delta': '7:21:01', 'additions': 56, 'deletions': 2, 'state': 'closed'}, {'id': 1249129190, 'number': 18, 'closed': datetime.datetime(2023, 2, 22, 17, 4, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 21, 18, 40, 35, tzinfo=datetime.timezone.utc), 'time_taken': 80642.0, 'time_delta': '22:24:02', 'additions': 392, 'deletions': 456, 'state': 'closed'}, {'id': 1169731926, 'number': 16, 'closed': datetime.datetime(2022, 12, 18, 6, 39, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 18, 6, 26, tzinfo=datetime.timezone.utc), 'time_taken': 797.0, 'time_delta': '0:13:17', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1130478651, 'number': 13, 'closed': datetime.datetime(2022, 12, 18, 6, 16, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 21, 18, 54, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2287336.0, 'time_delta': '26 days, 11:22:16', 'additions': 6, 'deletions': 19, 'state': 'closed'}, {'id': 1085504224, 'number': 8, 'closed': datetime.datetime(2022, 10, 13, 5, 46, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 13, 4, 38, 27, tzinfo=datetime.timezone.utc), 'time_taken': 4065.0, 'time_delta': '1:07:45', 'additions': 146, 'deletions': 46, 'state': 'closed'}, {'id': 1006433648, 'number': 6, 'closed': datetime.datetime(2022, 10, 1, 8, 47, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 23, 23, 8, 41, tzinfo=datetime.timezone.utc), 'time_taken': 5996321.0, 'time_delta': '69 days, 9:38:41', 'additions': 512, 'deletions': 6, 'state': 'closed'}, {'id': 977501654, 'number': 3, 'closed': datetime.datetime(2022, 7, 23, 3, 49, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 23, 18, 31, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2539078.0, 'time_delta': '29 days, 9:17:58', 'additions': 687, 'deletions': 327, 'state': 'closed'}, {'id': 950030120, 'number': 1, 'closed': datetime.datetime(2022, 6, 21, 3, 31, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 28, 10, 48, 43, tzinfo=datetime.timezone.utc), 'time_taken': 2047382.0, 'time_delta': '23 days, 16:43:02', 'additions': 1207, 'deletions': 0, 'state': 'closed'}]"
497333418,GIFImages.jl,JuliaIO/GIFImages.jl,Julia,1,12,3,1,29,7,15,2,"[{'id': 1177288395, 'number': 17, 'closed': datetime.datetime(2023, 1, 1, 4, 17, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 25, 16, 52, 33, tzinfo=datetime.timezone.utc), 'time_taken': 559505.0, 'time_delta': '6 days, 11:25:05', 'additions': 33, 'deletions': 0, 'state': 'closed'}, {'id': 1086610852, 'number': 14, 'closed': datetime.datetime(2022, 10, 13, 20, 47, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 13, 20, 29, 11, tzinfo=datetime.timezone.utc), 'time_taken': 1104.0, 'time_delta': '0:18:24', 'additions': 113, 'deletions': 48, 'state': 'closed'}, {'id': 1033601560, 'number': 6, 'closed': datetime.datetime(2022, 10, 2, 7, 0, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 3, 41, 16, tzinfo=datetime.timezone.utc), 'time_taken': 3467936.0, 'time_delta': '40 days, 3:18:56', 'additions': 597, 'deletions': 11, 'state': 'closed'}, {'id': 999759169, 'number': 4, 'closed': datetime.datetime(2022, 8, 22, 12, 40, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 18, 38, 40, tzinfo=datetime.timezone.utc), 'time_taken': 3002521.0, 'time_delta': '34 days, 18:02:01', 'additions': 263, 'deletions': 5, 'state': 'closed'}, {'id': 950076366, 'number': 1, 'closed': datetime.datetime(2022, 5, 29, 2, 7, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 28, 14, 37, 38, tzinfo=datetime.timezone.utc), 'time_taken': 41381.0, 'time_delta': '11:29:41', 'additions': 775, 'deletions': 0, 'state': 'closed'}]"
497317407,JPEG2000.jl,ashwani-rathee/JPEG2000.jl,Julia,0,3,3,1,7,2,5,2,"[{'id': 1034449502, 'number': 4, 'closed': None, 'created': datetime.datetime(2022, 8, 23, 16, 56, 20, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 480, 'deletions': 4, 'state': 'open'}, {'id': 1032420588, 'number': 3, 'closed': datetime.datetime(2022, 8, 22, 12, 34, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 22, 7, 21, 9, tzinfo=datetime.timezone.utc), 'time_taken': 18800.0, 'time_delta': '5:13:20', 'additions': 67, 'deletions': 0, 'state': 'closed'}, {'id': 950063526, 'number': 1, 'closed': datetime.datetime(2022, 5, 29, 2, 8, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 28, 13, 22, 52, tzinfo=datetime.timezone.utc), 'time_taken': 45910.0, 'time_delta': '12:45:10', 'additions': 1245, 'deletions': 0, 'state': 'closed'}]"
148698815,Yggdrasil,JuliaPackaging/Yggdrasil,Fortran,525,294,13,490,8987,278,52,155,"[{'id': 1247701756, 'number': 6294, 'closed': datetime.datetime(2023, 2, 21, 11, 11, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 20, 18, 45, 11, tzinfo=datetime.timezone.utc), 'time_taken': 59166.0, 'time_delta': '16:26:06', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 1081334268, 'number': 5643, 'closed': datetime.datetime(2022, 10, 9, 18, 36, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 9, 18, 25, 57, tzinfo=datetime.timezone.utc), 'time_taken': 658.0, 'time_delta': '0:10:58', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 999705061, 'number': 5173, 'closed': datetime.datetime(2022, 7, 18, 19, 11, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 18, 17, 42, 5, tzinfo=datetime.timezone.utc), 'time_taken': 5383.0, 'time_delta': '1:29:43', 'additions': 35, 'deletions': 0, 'state': 'closed'}, {'id': 930228205, 'number': 4882, 'closed': datetime.datetime(2022, 7, 18, 15, 4, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 7, 7, 22, 58, tzinfo=datetime.timezone.utc), 'time_taken': 6248476.0, 'time_delta': '72 days, 7:41:16', 'additions': 35, 'deletions': 0, 'state': 'closed'}]"
