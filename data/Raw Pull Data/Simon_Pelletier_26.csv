pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
428755288,[Core] Add (string) cast for API electrophysiology endpoints ,"The results from the function `getCandID()` are casted as a string. The same thing was done to fix similar bugs for other endpoints of the API ( #5910 ). Without the cast, the candidate's ID was empty  in the JSON returned when accessing any of the pages in the testing instructions bellow. Some of them were sometimes displaying the correct information on a few pages, depending on which browser I was using, but this PR should solve the problems on both Firefox and Chrome.

#### Testing instructions 

1. Go to `https://<VM-url>.loris.ca/api/v0.0.3/candidates/300166/V1/recordings` Response should be {""Meta"":{""CandID"":""300166"",""Visit"":""V1""}, ...

2. Go to `https://<VM-url>.loris.ca/api/v0.0.3/candidates/300166/V1/recordings/sub-OTT166_ses-V1_task-faceO_eeg.edf/channels`. Response should be {""Meta"":{""CandID"": ""300166"",""Visit"":""V1 ...

3. Go to `https://<VM-url>.loris.ca/api/v0.0.3/candidates/300166/V1/recordings/sub-OTT166_ses-V1_task-faceO_eeg.edf/events`. Response should be {""Meta"":{""CandID"": ""300166"",""Visit"":""V1 ...

4. Go to`https://<VM-url>.loris.ca/api/v0.0.3/candidates/300166/V1/recordings/sub-OTT166_ses-V1_task-faceO_eeg.edf/electrodes`. Response should be {""Meta"":{""CandID"": ""300166"",""Visit"":""V1 ...

#### Link to related issue

* Resolve #6571  
",True,6672,https://api.github.com/repos/aces/Loris/pulls/6672,https://github.com/aces/Loris/pull/6672,closed,31,17,17,3,2,0,3,0,"[{'name': 'API'}, {'name': 'Needs Work'}, {'name': 'Critical to release'}]",2020-06-05 20:58:31+00:00,2020-06-09 14:26:23+00:00,322072.0,"3 days, 17:27:52",[],"[{'commit_sha': '0f88b51f8135128a748dc82d17c4c7d74c952825', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51657dc23cf9af066a0276e489272afa75d44629', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b81f2f43f62d2725f1a21d2e018426443abbb25', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
428755288,[Core] Add (string) cast for API electrophysiology endpoints ,"The results from the function `getCandID()` are casted as a string. The same thing was done to fix similar bugs for other endpoints of the API ( #5910 ). Without the cast, the candidate's ID was empty  in the JSON returned when accessing any of the pages in the testing instructions bellow. Some of them were sometimes displaying the correct information on a few pages, depending on which browser I was using, but this PR should solve the problems on both Firefox and Chrome.

#### Testing instructions 

1. Go to `https://<VM-url>.loris.ca/api/v0.0.3/candidates/300166/V1/recordings` Response should be {""Meta"":{""CandID"":""300166"",""Visit"":""V1""}, ...

2. Go to `https://<VM-url>.loris.ca/api/v0.0.3/candidates/300166/V1/recordings/sub-OTT166_ses-V1_task-faceO_eeg.edf/channels`. Response should be {""Meta"":{""CandID"": ""300166"",""Visit"":""V1 ...

3. Go to `https://<VM-url>.loris.ca/api/v0.0.3/candidates/300166/V1/recordings/sub-OTT166_ses-V1_task-faceO_eeg.edf/events`. Response should be {""Meta"":{""CandID"": ""300166"",""Visit"":""V1 ...

4. Go to`https://<VM-url>.loris.ca/api/v0.0.3/candidates/300166/V1/recordings/sub-OTT166_ses-V1_task-faceO_eeg.edf/electrodes`. Response should be {""Meta"":{""CandID"": ""300166"",""Visit"":""V1 ...

#### Link to related issue

* Resolve #6571  
",True,6672,https://api.github.com/repos/aces/Loris/pulls/6672,https://github.com/aces/Loris/pull/6672,closed,31,17,17,3,2,0,3,0,"[{'name': 'API'}, {'name': 'Needs Work'}, {'name': 'Critical to release'}]",2020-06-05 20:58:31+00:00,2020-06-09 14:26:23+00:00,322072.0,"3 days, 17:27:52",[],"[{'commit_sha': '0f88b51f8135128a748dc82d17c4c7d74c952825', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51657dc23cf9af066a0276e489272afa75d44629', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b81f2f43f62d2725f1a21d2e018426443abbb25', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
447064049,Empty string when MINCToolsPath not configured,"## Brief summary of changes
`\NDB_Factory::singleton()->config()->getSetting('MINCToolsPath')` returns null, which creates an error when trying to execute `new \SPLFileInfo($mincpath)`. 

Setting `$mincpath` to an empty string when null solves the problem.

#### Testing instructions

1. Go to <hostname>/api/v0.0.3/candidates//587630/V1/images/demo_587630_V1_t1_001.mnc/format/raw.
2. The message `{""error"":""Invalid MINCToolsPath configuration setting.""}` should be displayed.

#### Link(s) to related issue(s)

* Resolves #6827
",True,6828,https://api.github.com/repos/aces/Loris/pulls/6828,https://github.com/aces/Loris/pull/6828,closed,7,0,1,3,1,2,0,0,[],2020-07-09 19:58:32+00:00,2020-08-25 18:50:56+00:00,4056744.0,"46 days, 22:52:24","[{'comment_id': 453711432, 'comment_body': ""I wouldn't depend on the behaviour of SPLFileInfo with an empty string since I can't find any documentation of what the behaviour is. You should explicitly throw an exception if null or empty."", 'comment_created': datetime.datetime(2020, 7, 13, 14, 56, 43, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 453887334, 'comment_body': ""```suggestion\r\n                'Invalid MINCToolsPath configuration setting: ' .\r\n```"", 'comment_created': datetime.datetime(2020, 7, 13, 19, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}]","[{'commit_sha': '7de0340401565da09045a6cab53469f5ef17ad4d', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2fb4df78f2cf012c5d2a9e3e69d87a8677dfa07', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f91aa0ff030a4cc372d50e747d1371ff622261cf', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
428142841,[API] New branch for adding the testsuite for the API + addressed comments,Creation of a test suite for the API.,True,6671,https://api.github.com/repos/aces/Loris/pulls/6671,https://github.com/aces/Loris/pull/6671,closed,3257,6,11,97,27,161,4,1,"[{'name': 'Testing'}, {'name': 'API'}, {'name': 'Passed Manual Tests'}, {'name': 'Blocking'}]",2020-06-04 23:34:47+00:00,2020-08-27 13:04:13+00:00,7219766.0,"83 days, 13:29:26","[{'comment_id': 435950097, 'comment_body': 'This is handled by phpunit. It can be removed.', 'comment_created': datetime.datetime(2020, 6, 5, 14, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 435950625, 'comment_body': 'This is testing more than just Login. Integration would be adequate. ', 'comment_created': datetime.datetime(2020, 6, 5, 14, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 435951200, 'comment_body': ""UnitTester should be surrounded by `'`. Otherwise PHP will expect a constant of that name."", 'comment_created': datetime.datetime(2020, 6, 5, 14, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 435958499, 'comment_body': 'You could add a test after this line to check if $token is null.\r\nphpunit provides assertions, it could be used here.', 'comment_created': datetime.datetime(2020, 6, 5, 14, 26, 30, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449000061, 'comment_body': ""Since base_uri is set in the client, you can change this to `'login'`.\r\nIt will be concatenated with the provided base_uri."", 'comment_created': datetime.datetime(2020, 7, 2, 13, 26, 12, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449003964, 'comment_body': 'Unless there are specific headers to check, there is no need to check is the response contains headers and that they are not empty; It effectively test if the guzzle client works properly. ', 'comment_created': datetime.datetime(2020, 7, 2, 13, 32, 10, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449006349, 'comment_body': ""This is a good first test. Maybe in a second PR, add assertions for the body content shape (e.g.: 1) it has a 'candidates' property 2) the candidate property is an array 3) each element on the array is a valid CandID) "", 'comment_created': datetime.datetime(2020, 7, 2, 13, 35, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449006931, 'comment_body': ""```suggestion\r\n            'candidates',\r\n```"", 'comment_created': datetime.datetime(2020, 7, 2, 13, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449009041, 'comment_body': 'It is enough to test only one candid. Pick one in the raisinbread dataset.\r\nThe get request to candidates and the foreach loop can be removed.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449009415, 'comment_body': '```suggestion\r\n                ""candidates/$id"",\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 40, 27, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449011517, 'comment_body': 'I am confused about those variable names. Are they testing different use cases?', 'comment_created': datetime.datetime(2020, 7, 2, 13, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449013974, 'comment_body': 'This is a good place to test if the Content-Location header exists.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449014903, 'comment_body': ""In a second PR, this should test that the body shape is right and that the CandID is the same than the one provided in the 'Content-Location' header."", 'comment_created': datetime.datetime(2020, 7, 2, 13, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449017928, 'comment_body': ""```suggestion\r\n                'candidates',\r\n```"", 'comment_created': datetime.datetime(2020, 7, 2, 13, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449020116, 'comment_body': 'Instead of the 2 foreach loop, pick one session of one candidate in raisinbread that have dicoms.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449020461, 'comment_body': '```suggestion\r\n                    ""candidates/$id/$v/dicoms"",\r\n```', 'comment_created': datetime.datetime(2020, 7, 2, 13, 56, 11, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449021544, 'comment_body': '`$v` is a bit short, $visit_label or $visitLabel would be more descriptive of the content of the variable.', 'comment_created': datetime.datetime(2020, 7, 2, 13, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449022044, 'comment_body': 'is this right?', 'comment_created': datetime.datetime(2020, 7, 2, 13, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 449023099, 'comment_body': 'It can test that the response is 405 Method not allowed.', 'comment_created': datetime.datetime(2020, 7, 2, 14, 0, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 450446287, 'comment_body': ""Simon - based on Xavier's comment above : \r\nCan you create +  link here an issue - let's call it  phase 2 of your test suite, to ensure: \r\n- response fits the schema description\r\n- specific expected headers are populated \r\n\r\ncc @xlecours "", 'comment_created': datetime.datetime(2020, 7, 6, 19, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 451552859, 'comment_body': 'Please rename to `login`. We might use a different client (not guzzle) at some point. ', 'comment_created': datetime.datetime(2020, 7, 8, 13, 41, 25, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 451553380, 'comment_body': 'It is not really an Authentication test. More like Authenticated test. Please rename.', 'comment_created': datetime.datetime(2020, 7, 8, 13, 42, 13, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 451554754, 'comment_body': '```suggestion\r\n        if ($token === null) {\r\n            throw new \\LorisException(""Login failed"");\r\n        }\r\n        $headers        = [\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 13, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 451555115, 'comment_body': '```suggestion\r\n        )->token ?? null;\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 13, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 451560751, 'comment_body': 'This is a little to verbose.\r\nThere is assertIsArray()\r\n\r\nAlso, this check should be done before checking for assertArrayHasKey', 'comment_created': datetime.datetime(2020, 7, 8, 13, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 451567531, 'comment_body': 'What do you mean by already exists?', 'comment_created': datetime.datetime(2020, 7, 8, 14, 0, 31, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 451568720, 'comment_body': ""I think the expected response status code is 400 Bad Request.\r\n\r\nI think we could avoid the Exception throwing to simply look at the error.\r\n```\r\n$res = $client->request('GET', '/status/500', ['http_errors' => false]);\r\necho $res->getStatusCode();\r\n```\r\nsee: http://docs.guzzlephp.org/en/stable/request-options.html#http-errors"", 'comment_created': datetime.datetime(2020, 7, 8, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 451707326, 'comment_body': ""that's right, it's not 201. I'll try this way"", 'comment_created': datetime.datetime(2020, 7, 8, 17, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 451709083, 'comment_body': ""I made a mistake, I meant to try creating a candidate that already exist, so actually I would not have to create `$json_exist` and just reuse `$json_new`. Now that I think about it, I'm not sure it is pertinent to test adding the same candidate twice?"", 'comment_created': datetime.datetime(2020, 7, 8, 17, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 451732454, 'comment_body': 'I tried assertIsArray() before changing to do it this way, but the method is not found. Same thing for assertIsString().', 'comment_created': datetime.datetime(2020, 7, 8, 18, 6, 11, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 451737019, 'comment_body': ""I don't really get it, `LorisApiAuthenticatedTest` sounds like it is testing if the authentication was successful, but there is no test in the class. What I meant was Authentication for Testing. "", 'comment_created': datetime.datetime(2020, 7, 8, 18, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 451738108, 'comment_body': '```suggestion\r\n     */\r\n    public function login()\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 18, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 454587228, 'comment_body': ""no, it's a mistake, it should be corrected now"", 'comment_created': datetime.datetime(2020, 7, 14, 19, 19, 10, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 454588176, 'comment_body': 'it is not implemented yet, so I tested for 404 not found', 'comment_created': datetime.datetime(2020, 7, 14, 19, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457350185, 'comment_body': 'You can remove this second POST request. The unique identifier of a candidate is the candid and it is not passed in the POST body.', 'comment_created': datetime.datetime(2020, 7, 20, 12, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457352068, 'comment_body': 'variable name should start with a lowercase character', 'comment_created': datetime.datetime(2020, 7, 20, 12, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457364238, 'comment_body': 'If the endpoint do not exists, remove the test. We will add it when we add the endpoint.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 5, 32, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457365168, 'comment_body': 'The endpoint should exist. No?', 'comment_created': datetime.datetime(2020, 7, 20, 13, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457367755, 'comment_body': ""Shouldn't it be testing the size of `$stream` ?"", 'comment_created': datetime.datetime(2020, 7, 20, 13, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457369193, 'comment_body': 'If the endpoints do not exists, remove the tests.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457369898, 'comment_body': 'It should exists', 'comment_created': datetime.datetime(2020, 7, 20, 13, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457371528, 'comment_body': 'Why is there a second GET request?', 'comment_created': datetime.datetime(2020, 7, 20, 13, 15, 20, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457378313, 'comment_body': ""```suggestion\r\n        $this->markTestSkipped('minc2raw not installed.');\r\n\r\n```"", 'comment_created': datetime.datetime(2020, 7, 20, 13, 23, 32, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457379656, 'comment_body': 'The endpoint must exist', 'comment_created': datetime.datetime(2020, 7, 20, 13, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457382532, 'comment_body': 'first letter of variable name in lowercase', 'comment_created': datetime.datetime(2020, 7, 20, 13, 28, 22, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457383463, 'comment_body': 'The endpoint must exists.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 29, 20, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457383933, 'comment_body': 'It should be be skipped. If a 405 is returned then the test must fail.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457386237, 'comment_body': 'The test should fail in this case.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457386617, 'comment_body': 'The test should fail in this case.\r\nIt will be handled by the assettEquals(204 ...', 'comment_created': datetime.datetime(2020, 7, 20, 13, 32, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457386764, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457387144, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457387210, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 33, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457387331, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 33, 40, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457387412, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457387550, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 33, 55, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457387631, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457388805, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 35, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457388880, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 35, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457388986, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457389086, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457389550, 'comment_body': ""it's the project name not its id"", 'comment_created': datetime.datetime(2020, 7, 20, 13, 36, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457389785, 'comment_body': 'the test should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457390164, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457390230, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457390398, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457390687, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 20, 13, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457392012, 'comment_body': ""Test test should be univocal. Is it `'string'` or else?"", 'comment_created': datetime.datetime(2020, 7, 20, 13, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457392333, 'comment_body': ""Test test should be univocal. Is it 'string' or else?"", 'comment_created': datetime.datetime(2020, 7, 20, 13, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457392574, 'comment_body': 'this should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457392815, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457393134, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457393419, 'comment_body': 'this is all commented?', 'comment_created': datetime.datetime(2020, 7, 20, 13, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457393853, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457394138, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457394253, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457394655, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 41, 29, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457395444, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457395584, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457395765, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 42, 46, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457396260, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457398870, 'comment_body': 'should fail', 'comment_created': datetime.datetime(2020, 7, 20, 13, 46, 19, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457399567, 'comment_body': '```suggestion\r\n\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 13, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 457795540, 'comment_body': 'It exists when the file actually exists. We need to skip to avoid an error, because it is not in the Docker environment. Thus, not skipping causes Travis to fail', 'comment_created': datetime.datetime(2020, 7, 21, 2, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457795770, 'comment_body': 'ok', 'comment_created': datetime.datetime(2020, 7, 21, 2, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457796228, 'comment_body': 'It exists when the file actually exists. We need to skip to avoid an error, because it is not in the Docker environment. Thus, not skipping causes Travis to fail ', 'comment_created': datetime.datetime(2020, 7, 21, 2, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457796373, 'comment_body': 'not sure, I will remove it', 'comment_created': datetime.datetime(2020, 7, 21, 2, 19, 47, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457797116, 'comment_body': ""it was not necessary, I'm removing it"", 'comment_created': datetime.datetime(2020, 7, 21, 2, 22, 22, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457797308, 'comment_body': 'again it was not necessary, removing', 'comment_created': datetime.datetime(2020, 7, 21, 2, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457797517, 'comment_body': 'removed the test skip', 'comment_created': datetime.datetime(2020, 7, 21, 2, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457797713, 'comment_body': 'removed, not failing', 'comment_created': datetime.datetime(2020, 7, 21, 2, 24, 30, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457797865, 'comment_body': 'It exists when the file actually exists. We need to skip to avoid an error, because it is not in the Docker environment. Thus, not skipping causes Travis to fail', 'comment_created': datetime.datetime(2020, 7, 21, 2, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457797920, 'comment_body': 'It exists when the file actually exists. We need to skip to avoid an error, because it is not in the Docker environment. Thus, not skipping causes Travis to fail', 'comment_created': datetime.datetime(2020, 7, 21, 2, 25, 9, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457798040, 'comment_body': 'not failing, I will remove', 'comment_created': datetime.datetime(2020, 7, 21, 2, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457798138, 'comment_body': 'it does, removing this too', 'comment_created': datetime.datetime(2020, 7, 21, 2, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457798502, 'comment_body': 'right', 'comment_created': datetime.datetime(2020, 7, 21, 2, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457798724, 'comment_body': 'It exists when the file actually exists. We need to skip to avoid an error, because it is not in the Docker environment. Thus, not skipping causes Travis to fail', 'comment_created': datetime.datetime(2020, 7, 21, 2, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457799439, 'comment_body': ""I'm removing it for now, not implemented"", 'comment_created': datetime.datetime(2020, 7, 21, 2, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457799581, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 21, 2, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457799620, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 21, 2, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457799647, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 21, 2, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457799717, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 21, 2, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457799862, 'comment_body': ""I'm removing this, it works "", 'comment_created': datetime.datetime(2020, 7, 21, 2, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457799951, 'comment_body': 'not implementing, removing', 'comment_created': datetime.datetime(2020, 7, 21, 2, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457799986, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 21, 2, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457800026, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 21, 2, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 457800069, 'comment_body': 'same', 'comment_created': datetime.datetime(2020, 7, 21, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 458172342, 'comment_body': 'Remove it', 'comment_created': datetime.datetime(2020, 7, 21, 15, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 458174162, 'comment_body': 'Remove it', 'comment_created': datetime.datetime(2020, 7, 21, 15, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 458179430, 'comment_body': ""```suggestion\r\n        $this->markTestSkipped('Missing data in docker image');\r\n```"", 'comment_created': datetime.datetime(2020, 7, 21, 15, 18, 29, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 458292932, 'comment_body': 'looking at https://github.com/aces/Loris/blob/main/raisinbread/RB_files/RB_session.sql#L937 , I think only V3 has medical_history for that candidate.', 'comment_created': datetime.datetime(2020, 7, 21, 18, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 458297588, 'comment_body': '```suggestion\r\n        // the response body should be empty unless there is an error message.\r\n        $body = (string) $response->getBody();\r\n        $this->assertEquals(201, $response->getStatusCode(), $body);\r\n```', 'comment_created': datetime.datetime(2020, 7, 21, 18, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459544770, 'comment_body': 'Why is this in a try catch?', 'comment_created': datetime.datetime(2020, 7, 23, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459547055, 'comment_body': ""Replace this function's code by markTestSkipped"", 'comment_created': datetime.datetime(2020, 7, 23, 15, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459550895, 'comment_body': ""I can't remember why, it doesn't look to do anything. I'm removing it."", 'comment_created': datetime.datetime(2020, 7, 23, 15, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 459708806, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459708938, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459709157, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459709237, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 28, 55, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459709271, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459709331, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459709351, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459709416, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459709464, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 29, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459709605, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 459709664, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 7, 23, 20, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 463331504, 'comment_body': 'I changed the version of babel/core because I was trying to get rid of the following error message during Travis checks with PHP: 7.4 and TEST_SUITE=integration. The problem is gone after the update.\r\n\r\n```\r\nnpm WARN deprecated chokidar@2.1.8: Chokidar 2 will break on node v14+. Upgrade to chokidar 3 with 15x less dependencies.\r\n\r\nnpm WARN deprecated fsevents@1.2.13: fsevents 1 will break on node v14+ and could be using insecure binaries. Upgrade to fsevents 2.\r\n\r\nnpm WARN deprecated core-js@1.2.7: core-js@<3 is no longer maintained and not recommended for usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.\r\n\r\nnpm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\r\n\r\nnpm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\r\n\r\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.2.7 (node_modules/chokidar/node_modules/fsevents):\r\n\r\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.13: wanted {""os"":""darwin"",""arch"":""any""} (current: {""os"":""linux"",""arch"":""x64""})\r\n\r\nnpm ERR! code ETARGET\r\n\r\nnpm ERR! notarget No matching version found for @babel/helper-module-transforms@^7.11.0\r\n\r\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\r\n\r\nnpm ERR! notarget a package version that doesn\'t exist.\r\n\r\nnpm ERR! notarget \r\n\r\nnpm ERR! notarget It was specified as a dependency of \'@babel/core\'\r\n\r\nnpm ERR! notarget \r\n\r\nnpm ERR! A complete log of this run can be found in:\r\n\r\nnpm ERR!     /home/travis/.npm/_logs/2020-07-30T21_27_39_641Z-debug.log\r\n\r\nMakefile:14: recipe for target \'javascript\' failed\r\n\r\nmake: *** [javascript] Error 1\r\n\r\nThe command ""make dev"" failed and exited with 2 during .\r\n\r\n```', 'comment_created': datetime.datetime(2020, 7, 30, 23, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 463667958, 'comment_body': '@kongtiaowang I tried changing babel/core version because I had the error message above during Travis checks with PHP: 7.4 and TEST_SUITE=integration. The problem did not show up with php7.3. Is this solution correct or there is another solution I am not seeing?', 'comment_created': datetime.datetime(2020, 7, 31, 15, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 464437854, 'comment_body': 'Please remove this commented line', 'comment_created': datetime.datetime(2020, 8, 3, 14, 9, 43, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464439152, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 8, 3, 14, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464439209, 'comment_body': 'This still need to be taken care of.', 'comment_created': datetime.datetime(2020, 8, 3, 14, 11, 53, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466710455, 'comment_body': 'There lines will copy the files into loris_db container. It will not work for loris.\r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 22, 3, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kongtiaowang', 'type': 'User'}, {'comment_id': 468600933, 'comment_body': ""It looks like it's identical to PR #6877.. this should be rebased."", 'comment_created': datetime.datetime(2020, 8, 11, 13, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 469539203, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 20, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 469562320, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 12, 21, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 471511708, 'comment_body': ""This should be set in the test setUp function (preferrably to a random string and not a hardcoded one) and restored to the original value in the tearDown, not hardcoded in the Dockerfile, since it's supposed to be a secret key."", 'comment_created': datetime.datetime(2020, 8, 17, 14, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 471512051, 'comment_body': 'endpoints is misspelt in every class comment in this PR.', 'comment_created': datetime.datetime(2020, 8, 17, 14, 20, 19, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 471512212, 'comment_body': 'of is also misspelt in every comment.', 'comment_created': datetime.datetime(2020, 8, 17, 14, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 471512762, 'comment_body': ""I don't see any reason a method should be overridden to just call its parent, just don't override it. (This is also the case for the setup/teardown of many of the other classes in this PR."", 'comment_created': datetime.datetime(2020, 8, 17, 14, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 473210136, 'comment_body': ""You'll need to select the original value first so that you can store it somewhere that you can restore it in the teardown. You should also be doing this by config name, not by a hardcoded config id"", 'comment_created': datetime.datetime(2020, 8, 19, 17, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 474135026, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 20, 16, 52, 47, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 474135497, 'comment_body': ""```suggestion\r\n\r\n        $database = $this->config->getSetting('database');\r\n```"", 'comment_created': datetime.datetime(2020, 8, 20, 16, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 474145147, 'comment_body': '@driusan @kongtiaowang Should we create a new test suite for raisinbread?', 'comment_created': datetime.datetime(2020, 8, 20, 17, 10, 54, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 474145834, 'comment_body': 'Why is this line deleted?', 'comment_created': datetime.datetime(2020, 8, 20, 17, 12, 2, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 474145866, 'comment_body': 'Why is this line deleted?', 'comment_created': datetime.datetime(2020, 8, 20, 17, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 474146272, 'comment_body': ""```suggestion\r\n\r\n        $set = [\r\n            'Value' => $this->originalJwtKey\r\n        ];\r\n        \r\n        $where = [\r\n            'ConfigID' => $this->configIdJwt\r\n        ];\r\n        \r\n        $this->DB->update('Config', $set, $where);\r\n```"", 'comment_created': datetime.datetime(2020, 8, 20, 17, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 474146879, 'comment_body': 'Those 2 queries can be combined.', 'comment_created': datetime.datetime(2020, 8, 20, 17, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 474147741, 'comment_body': ""It doesn't have to be compact."", 'comment_created': datetime.datetime(2020, 8, 20, 17, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 474214557, 'comment_body': ""makes sense to make one to me, but I don't mind if it's just under IntegrationTests for this PR.."", 'comment_created': datetime.datetime(2020, 8, 20, 19, 18, 55, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 475637581, 'comment_body': 'indentation is wrong and variable name should start with a lower case ', 'comment_created': datetime.datetime(2020, 8, 24, 14, 5, 15, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 475640455, 'comment_body': '```suggestion\r\n        )[0] ?? null;\r\n        \r\n        if ($JwtConfig === null) {\r\n            throw new \\LorisException(\'There is no Config for ""JWTKey""\');\r\n        }\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 14, 9, 38, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 475642455, 'comment_body': '```suggestion\r\n        parent::setUp();\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 14, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 475642648, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 24, 14, 12, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 475661364, 'comment_body': ""That doesn't work. The JWT key has to be changed before `parent::setUp();` (or inside `LorisIntegrationTest.class.inc` setUp(), it but that's what was already done before ). If the key is changed after `parent::setUp()`, all test fail with `Unacceptable JWT key`, so this block is necessary. "", 'comment_created': datetime.datetime(2020, 8, 24, 14, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 475669369, 'comment_body': 'That is because the login function is overriden in AuthenticatedTest. You should rename your login function for something like apiLogin.\r\nThe original login function: https://github.com/aces/Loris/blob/main/test/integrationtests/LorisIntegrationTest.class.inc#L139  ', 'comment_created': datetime.datetime(2020, 8, 24, 14, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 475698004, 'comment_body': 'indentation is still not right', 'comment_created': datetime.datetime(2020, 8, 24, 15, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476504641, 'comment_body': 'What do you mean by `and call to LorisApiAuthenticationTest::setUp()` ?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476504862, 'comment_body': 'What do you mean by and call to LorisApiAuthenticationTest::setUp() ?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476646220, 'comment_body': ""I guess you mean LorisApiAuthenticationTest::tearDown() and that's also a mistake, I meant `call to LorisIntegrationTest::tearDown()`, but I'm wondering if it's necessary? it's  announcing the last line `parent::tearDown();`"", 'comment_created': datetime.datetime(2020, 8, 25, 18, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 476646394, 'comment_body': ""that's a mistake, I meant `call to LorisIntegrationTest::setUp()`, but I'm wondering if it's necessary? it's just announcing the first line `parent::setUp();`"", 'comment_created': datetime.datetime(2020, 8, 25, 18, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 476710799, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2020, 8, 25, 20, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476711643, 'comment_body': '```suggestion\r\n     * Overrides LorisIntegrationTest::tearDown() to set the original key back.\r\n```', 'comment_created': datetime.datetime(2020, 8, 25, 20, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}]","[{'commit_sha': 'cc98eefddbc4d59c6f9112da98b2f0a2a2706dec', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f1b70989e3e5eccb2449f29c26a711db1cd3ebe', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '882deb377fbffced7d83df3ec39e268a2e2781ed', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c73bd3a1ca0b8c9058ed0381385dec67bb99565c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9331197a033bfd61e4f7628d8db540de5c4180b', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5cf58593e961d14878055bdbf5fd4532bccd924', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '215b3fab2b860fe0dee055a6b281f0eb7fd8cdd1', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb7bb3e9a9dd4a22c275c5e967b996f56f3366c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd52f24e04a743b543fc4387af167358eca8a3461', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a1a74eb3e8a11473da93fc57e0c5a26bf493a11', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '517b80b3d91da3d78bc28239bc54fe6a7619a3ff', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e72f7d5811f053d59afd4a3718d2c24b18a5d91', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '127d80d859ddb78f5cc912c12930345eff1ec25b', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4184346ebb927d0eee6baf38927c1297c2967f57', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3bcf473d28930cb4c692a380724009f8eb01419', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bae9da9e3f16ed7b61ecf1d983aa4c0911de20fb', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5782a5a9032278248701f53743884d1f9e1af115', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '503c38bcf1f83062d9edc07235c9ba3c22b1a83c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a6b40ced66fa25c69a008e0d3fde633d3d7b85', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '560c1abe89ee58761788998cbbb21313e4eeb90c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0cdef0b7f55ade75359f230dc5ab286e827df1f', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c875a4127fbe05624bcbde7147611098b26ee46', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c67095f564e1744ee263f43a3131d54d254d9ed', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64083cc79b10e43600d8858e12095ec78f217c76', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e2eedd9a23b1b82b68ef70e591e67c2227b3d4e', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbeb8cb6bef56042fc899fe972c3724cc84c7448', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1c20e2fafdf9c4fb44f09be6babc17ad1815cc2', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5709d1be836ffcc7f60d39f230bf081df014083', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ec181f1d0b28255a646ed21163ff504bbae2a86', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0306162e24807cb709e40fcfa278186b1017524b', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72e990e285133da0a4930f72169ad6a026fb09a6', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2e54d334aa0755a0c4dbb996aea266562b3e4dd', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2a0975a8d649a38cda970f2cc8c659ee5cb8a65', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '211bb11c4fe228ac581c099c88c3c42adaf40a87', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cff4d0561ce24f2c28f74b15e1832dfa964146d', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e78b2930f2832550f23efa38765490e30ee9ca4', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e424c8555f6fe88080fb1771e31766dfd01714e2', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dda2810a8d9f1a6e703a0e1bf8f0fe13622cac0', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bdb5b86ec9c09777e4d3cea703f62ea3e42d4ff', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3818b77f16ae17d129cc1a279ae3153d6e6b8126', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f8df6cc56403d1b131055e25027529df844efc0', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bfb577671c8a444607e147cd1f95105744c9701', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c16778ecdbaafe5e2dbcc8ddce2591b90230939', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d8e972455f9e0363b8c34d04bdb5233e2c4923', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a620d702f691ffd50d77cca67256de6843c6fab6', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4860731ae55f22880aa592ad14bae6e7162ee247', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e5675b4648010602cc6a5c75186b16169e64ff', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0db8b4219078558bbfc107ffec5e1b444dbc20e', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '425133a8cb77b5ef9b6e5b9cd9f3fc357d787777', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'feb19d6651ba48d98ee97fa60ff3f531d731befc', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd3bc8c927f79142960fa917fc3e9369cd33c97c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4ca6f4e115a8d97aac7508491c8f74f74b3ea07', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f724f1cc3e7c8c0bd68254ab3a8d68dc83b7505b', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f51732322f884ace2fc1c2babb2860c6a30c8e98', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f66b1b7ae3621c6e34b95b6d23fe787a8d6b5948', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8b58be4d9e27fe0aa7f1462396ed8d38aa273ba', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f3851e022bba17cd6694ec47a40c5d0086d0220', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5629cc1646c704cdb8a0a86f94c85909c3f19bb0', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db213635872690d9dab6a899b4b5eedf118d16ff', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7f9b74f0ae5ef325b0f05094f23b1a772e1c862', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'becb72f88afe22067a6a4ab73a693b348e12e2f6', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30bd840af0fbb16a72016ea962d81ddc48246040', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58bbe30daa293aa98a0a0f131be3cdaf917fdb5c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0759ce2f1b3182ac6a7ced1c4ed62c4cf587f09', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b491a6ebd89532e6adee74a726d197824ea7ed16', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b5be2010de3192834768e03d47df3276d9cdb39', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '951f1a55c5bf4acd6050408713565c9be43c8bd4', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b784f8c7edb5faa64acd9d7201f6dad522388d46', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07444adad719b7b828f7b38c3546905083295a2c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e5ef327579698c303f865824f0b239ef7415cff', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47db56a6accc23450a4c68a90180fb5a2cc926ba', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6b73cb4cc99b39a7871672b0c5478f0d229db3c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4465fecd723246130dbbb619c798eb7ea23ee15e', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6f530be7aba7240d11b469af73755c14c3695d3', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c8a3e07b55fff6750fbb6c7c46950ddabe7f23', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a75623e878b747d2a4334db8ca927c3556c74b0', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd6ae3cea83a0f8e0b5cc047369129aeb7c4970f', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b192eb10d1c014869d86346ff9abee534eb16dc', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a19b64e0f4d2b26c3d75ed3febeca90bade653fe', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e496f669ae5a15d92be2823bdc9d83fb9c65e58', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc04f08b94e7796332ae05e1c0182105e62ee980', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2997658ad2fdaa920192d4e934e566abc890381', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3083a53838c8a2124be6c9792cee10c4c93f9b64', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb49b465350c6fd3a9a200082d96500a4f0ae816', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a16fd2c4e4d96e827ffe3a72f3fafc33563b3574', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8402e9029806ee4621d0b86a0f9d24781f8852c1', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a03e607ff841405c65d39e4e361371b40de65f98', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de488072b17e68a76e485d6fd80e8adbfb7993d1', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88d699d47b98b3ef8eb8c5be542df354a24b7eae', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ce75cd8326bc9669ba6e25aa46273c3f3a8bb11', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4e246057431d3f70bcb0c63549203d5ea0f3247', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6510ddab17948a16ac05026577f1550ee0f5b2b2', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e29f3901c2c6f706a3f47d3cf8c1a21f9013e8b', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fd8394425ff0459dd6953794a120db598ed0242', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a3f7f1efe56447e54ab16e661c17836c10d6f25', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f19c41f71ebdd24b5cd3c5d59dbfbba6ba92ef68', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff8d144fa0742de481fc8f490819e6628f9f2b73', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
422828628,[API] Valid POST request of a candidate added to the API TestPlan,"## Brief summary of changes

In the API TestPlan, the example of a POST request to create a new candidate does not create a candidate. The new command line example creates a new candidate successfully. 

#### Testing instructions
Follow all the instructions in the API's _TestPlan.md_

#### Link(s) to related issue(s)

* Resolves #6590",True,6601,https://api.github.com/repos/aces/Loris/pulls/6601,https://github.com/aces/Loris/pull/6601,closed,5,3,1,10,4,16,2,1,"[{'name': 'Documentation'}, {'name': 'Passed Manual Tests'}]",2020-05-25 16:41:15+00:00,2020-06-12 15:33:48+00:00,1551153.0,"17 days, 22:52:33","[{'comment_id': 430017809, 'comment_body': ""```suggestion\r\nThis is done by sending a POST request to /candidates with the required data. Note the usage of the Authorization header. For a candidate to be created, the candidate's information must also be included. The following command contains the minimal information necessary for the request to create a new candidate:\r\n```"", 'comment_created': datetime.datetime(2020, 5, 25, 16, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 430017871, 'comment_body': '```suggestion\r\nIf the candidate is successfully created, the candidate\'s data are returned. For example, the previous example returns: `{""CandID"":""872451"",""Project"":""Rye"",""PSCID"":""MTL185"",""Site"":""Montreal"",""EDC"":null,""DoB"":""2019-01-31"",""Sex"":""Female""}`\r\n```', 'comment_created': datetime.datetime(2020, 5, 25, 16, 52, 50, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 430018127, 'comment_body': 'add a note saying - also see Specs for format instructions\r\n```suggestion\r\n~$ curl -H ""Authorization: Bearer $token"" https://<your-hostname>/api/v0.0.3/candidates -d \'{""Candidate"":{""Project"":""Rye"",""Site"":""Montreal"",""DoB"":""2019, ""Sex"":""Female""}}\' \r\n```\r\n```suggestion\r\n~$ curl -H ""Authorization: Bearer $token"" https://<your-hostname>/api/v0.0.3/candidates -d \'{""Candidate"":{""Project"":""Rye"",""Site"":""Montreal"",""DoB"":""2019"", ""Sex"":""Female""}}\' \r\n```\r\ni think you were missing a ""', 'comment_created': datetime.datetime(2020, 5, 25, 16, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 433298670, 'comment_body': ""```suggestion\r\nCandidate creation is done by sending a POST request to /candidates with the required data. Note the usage of the Authorization header. For a candidate to be created, the candidate's information must also be included. The following command contains the minimal information necessary for the request to create a new candidate:\r\n```"", 'comment_created': datetime.datetime(2020, 6, 1, 15, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 433299011, 'comment_body': 'Specify what ""this"" is referring to', 'comment_created': datetime.datetime(2020, 6, 1, 15, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 433299241, 'comment_body': ""What if it's not?"", 'comment_created': datetime.datetime(2020, 6, 1, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 433299604, 'comment_body': '```suggestion\r\nIf the candidate is successfully created, the candidate\'s data is returned. For example, the previous example returns: `{""CandID"":""872451"",""Project"":""Rye"",""PSCID"":""MTL185"",""Site"":""Montreal"",""EDC"":null,""DoB"":""2019-01-31"",""Sex"":""Female""}`\r\n```', 'comment_created': datetime.datetime(2020, 6, 1, 15, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 433309733, 'comment_body': 'Agreed. While data is plural and ""are"" is correct here, I\'d prefer our documentation to have a more natural tone', 'comment_created': datetime.datetime(2020, 6, 1, 15, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'johnsaigle', 'type': 'User'}, {'comment_id': 434199808, 'comment_body': '```suggestion\r\nIf the candidate is successfully created, the candidate\'s data are returned. For example, the previous example returns: `{""CandID"":""872451"",""Project"":""Rye"",""PSCID"":""MTL185"",""Site"":""Montreal"",""EDC"":null,""DoB"":""2019-01-31"",""Sex"":""Female""}`\r\nOtherwise, an error message is returned. For example, the command `curl -H ""Authorization: Bearer $token"" https://<your-hostname>/api/v0.0.3/candidates -d \'\'` returns `{""error"":""You are not affiliated with the candidate`s site""}`\r\n```', 'comment_created': datetime.datetime(2020, 6, 2, 22, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 437484694, 'comment_body': ""Could you add a hyperlink on this to the doc/section you're referring to ?"", 'comment_created': datetime.datetime(2020, 6, 9, 14, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 437485700, 'comment_body': '```suggestion\r\nOtherwise, an error message is returned. For example, the command `curl -H ""Authorization: Bearer $token"" https://<your-hostname>/api/v0.0.3/candidates -d \'\'` returns `{""error"":""You are not affiliated with the candidate\'s site""}`\r\n```\r\nMarkdown formatting was broken -- switching the backtick to an apostrophe here helps. ', 'comment_created': datetime.datetime(2020, 6, 9, 14, 52, 7, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 439001529, 'comment_body': ""```suggestion\r\nCandidate creation is done by sending a POST request to /candidates with the required data. Note the usage of the Authorization header. For a candidate to be created, the candidate's information must also be included. The following command contains the minimal information necessary for the request to create a new candidate (see [docs](https://github.com/aces/Loris/blob/23.0-release/docs/API/LorisRESTAPI_v0.0.3.md#30-candidate-api) for format instructions):\r\n```"", 'comment_created': datetime.datetime(2020, 6, 11, 18, 53, 5, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 439395913, 'comment_body': 'This should be a relative URL, not an absolute URL.', 'comment_created': datetime.datetime(2020, 6, 12, 12, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 439397674, 'comment_body': ""@laemtl  - a good note for the documentation guide? :) \r\np.s. could you help review Simon's last change on this today? merci "", 'comment_created': datetime.datetime(2020, 6, 12, 12, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 439421359, 'comment_body': ""```suggestion\r\nCandidate creation is done by sending a POST request to /candidates with the required data. Note the usage of the Authorization header. For a candidate to be created, the candidate's information must also be included. The following command contains the minimal information necessary for the request to create a new candidate (see [docs](../../../../docs/API/LorisRESTAPI_v0.0.3.md#30-candidate-api) for format instructions):\r\n```"", 'comment_created': datetime.datetime(2020, 6, 12, 13, 34, 33, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 439423431, 'comment_body': ""```suggestion\r\nCandidate creation is done by sending a POST request to /candidates with the required data. Note the usage of the Authorization header. For a candidate to be created, the candidate's information must also be included. The following command contains the minimal information necessary for the request to create a new candidate (see [docs](../../../docs/API/LorisRESTAPI_v0.0.3.md#30-candidate-api) for format instructions):\r\n```"", 'comment_created': datetime.datetime(2020, 6, 12, 13, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}]","[{'commit_sha': '85ed624371a24681e47783f15c8fa8d42680b468', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6b8ae3dd17d5e3b98aadb207c7bfd1f2f24c213', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0664dacc1fdca712508e14caadfa3f775e5ecf39', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50816568ec2323e67cf917dc82cddebcd259dad3', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ec6ae0c1d34e8b7196391e39d231fb3ef71b69d', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdcdad106fab34daa404d2d9db1571312ef983eb', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786653f1b637156d27bc5ba363ece1c3de0a4461', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dbc62a20b7db4405d5dbb37b69cfeccf43d4123', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a41566bd3deae627e165d1b0a045923963a30d26', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a8fe615597aa8210ed240e21bf73bacde60db6d', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
440833126,"[API] Add Project endpoint ""Dicoms""","## Brief summary of changes
This Pull Request adds an endpoint at /projects/\<project\>/dicoms. It returns a complete list of DICOM files contained in a project (and other pertinent informations)

#### Testing instructions
Go to https://\<hostname\>/api/v0.0.3/projects/rye/dicoms in a browser. The page should return a JSON in a string with information on all DICOM contained in the project

#### Link(s) to related issue(s)

* Resolves #6774",False,6775,https://api.github.com/repos/aces/Loris/pulls/6775,https://github.com/aces/Loris/pull/6775,closed,500,0,6,1,19,43,3,1,"[{'name': 'Feature'}, {'name': 'API'}, {'name': 'Needs Work'}]",2020-06-27 00:20:21+00:00,2024-07-04 14:31:44+00:00,126886283.0,"1468 days, 14:11:23","[{'comment_id': 464601558, 'comment_body': 'Why is this line changed?', 'comment_created': datetime.datetime(2020, 8, 3, 18, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464601864, 'comment_body': 'indentation inconsistency', 'comment_created': datetime.datetime(2020, 8, 3, 18, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464601987, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2020, 8, 3, 18, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464602034, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2020, 8, 3, 18, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464602804, 'comment_body': '```suggestion\r\n<?php declare(strict_types=1);\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 18, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464603329, 'comment_body': 'instead of `\\\'Y\\\'`, `""Y""` can be used ', 'comment_created': datetime.datetime(2020, 8, 3, 18, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464603808, 'comment_body': 'I suggest this extends DBObjectRowProvisioner', 'comment_created': datetime.datetime(2020, 8, 3, 18, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464604072, 'comment_body': 'Why is this file changed?', 'comment_created': datetime.datetime(2020, 8, 3, 18, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464621211, 'comment_body': ""I would simplify the query for this endpoint. I guess the goal of the endpoint is to have a DICOMs project endpoint that lists all the tarchive files in the database. In that case, there is no need to join to the files table or the tarchive_series table. Below is the simplification I was thinking about.\r\n\r\n```suggestion\r\n             SELECT\r\n               s.CandID as Candidate,\r\n               c.PSCID as PSCID,\r\n               c.Entity_type as Entity_type,\r\n               s.Visit_label as Visit,\r\n               s.Date_visit as Visit_date,\r\n               s.CenterID as CenterID,\r\n               p.Name as Site,\r\n               t.DateAcquired as date_acquired,\r\n               t.DateFirstArchived as date_first_archived,\r\n               t.DateLastArchived as date_last_archived,\r\n               t.TarchiveID as tarchiveid,\r\n               t.DicomArchiveID as DicomArchiveID,\r\n               t.ArchiveLocation as Archive,\r\n\t           t.SourceLocation as Source,\r\n             FROM\r\n               tarchive t\r\n             LEFT JOIN  session s\r\n               ON (t.SessionID = s.ID)\r\n             LEFT JOIN candidate c\r\n               ON (s.CandID = c.CandID)\r\n             LEFT JOIN psc p\r\n               ON (s.CenterID = p.CenterID)\r\n             LEFT JOIN Project project\r\n               ON (c.RegistrationProjectID = project.ProjectID)\r\n             WHERE\r\n               c.Active = \\'Y\\' AND\r\n               s.Active = \\'Y\\' AND\r\n               project.Name = :v_projectname AND\r\n               t.DateLastArchived > :v_time\r\n             ORDER BY t.DateLastArchived ASC\r\n```"", 'comment_created': datetime.datetime(2020, 8, 3, 19, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}, {'comment_id': 465097316, 'comment_body': ""yes, that is the idea. I'll have a look at this, thank you for the suggestion!"", 'comment_created': datetime.datetime(2020, 8, 4, 14, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 465103245, 'comment_body': ""I was told it was not necessary to declare strict_types like this in Loris anymore. Even if this is the case, I'm putting it back for consistency within that module (it is declared in other php files)"", 'comment_created': datetime.datetime(2020, 8, 4, 14, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 465899015, 'comment_body': 'there are NULL values in the table `tarchive` in raisinbread, is this normal?', 'comment_created': datetime.datetime(2020, 8, 5, 17, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 465905492, 'comment_body': '```suggestion\r\nclass ProjectDicomsObjectProvisioner extends DBObjectProvisioner\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 17, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 465905780, 'comment_body': ""```suggestion\r\n        string $classname='ProjectDicomsObjectProvisioner'\r\n```"", 'comment_created': datetime.datetime(2020, 8, 5, 17, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 466467469, 'comment_body': ""That would be `\\LORIS\\api\\Models\\ProjectDicomsRow.class.inc`\r\nBut do not set in as a default value. Add it a a parameter when you do `new ProjectDicomsObjectProvisioner($project, $since, '\\LORIS\\api\\Models\\ProjectDicomsRow.class.inc')`"", 'comment_created': datetime.datetime(2020, 8, 6, 14, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466470297, 'comment_body': 'DBObjectPRovisioners do not need a getInstance function. ', 'comment_created': datetime.datetime(2020, 8, 6, 14, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466471441, 'comment_body': 'That constructor is never called.\r\nPDO:statement fetchall instanciate the objects and set their values using `__set`.', 'comment_created': datetime.datetime(2020, 8, 6, 14, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466474252, 'comment_body': ""```suggestion\r\n        $provisioner = new \\LORIS\\api\\Provisioners\\ProjectDicomsObjectProvisioner(\r\n            $this->_project,\r\n            $since,\r\n            '\\LORIS\\api\\Models\\ProjectDicomsRow'\r\n        );\r\n```"", 'comment_created': datetime.datetime(2020, 8, 6, 14, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466475169, 'comment_body': 'YOu will need to change the filename as well.', 'comment_created': datetime.datetime(2020, 8, 6, 14, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466673236, 'comment_body': ""which columns?  \r\n@spell00 can you pinpoint the rows you think might be problematic and we'll take a look? \r\nplease link to the sql lines in raisinbread on aces/loris for common reference. "", 'comment_created': datetime.datetime(2020, 8, 6, 20, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 468089790, 'comment_body': 'Yes, my guess is these are the few that I had to add in the raisinbread where the PSCID and CandID in the PatientName did not refer to an existing candidate (hence, no MINC images inserted into the files table).\r\n\r\nBasically, because of the bad PatientName present in the DICOMs, the pipeline cannot associate them to a given candidate/session and therefore their SessionID is NULL. I am not worried about those cases as typically, projects would end up removing those entries, relabelling the DICOMs correctly and reupload them with the correct PatientName.\r\n\r\nHope that makes sense. @spell00 let me know if that is not clear.', 'comment_created': datetime.datetime(2020, 8, 10, 18, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}, {'comment_id': 476486942, 'comment_body': '`$all` ?? all what?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476493358, 'comment_body': 'I think you could skip the foreach loop by using iterator_to_array', 'comment_created': datetime.datetime(2020, 8, 25, 14, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476495551, 'comment_body': 'Make sure that _hasAccess is called\r\nThe dicom_archives module requires `dicom_archive_view_allsites` to access it. \r\n@cmadjar The same applies here right?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476686816, 'comment_body': ""I added it, but I did like for the `project/recordings` [endpoint](https://github.com/aces/Loris/blob/main/modules/api/php/endpoints/project/recordings.class.inc#L97), which calls `_hasAccess` in `handle`. It would not matter here since I don't think the endpoints in `\\projects` will ever have any other handles than handleGET, but I think it's better in `handle` for consistency "", 'comment_created': datetime.datetime(2020, 8, 25, 19, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 476692083, 'comment_body': ""now that I'm using `iterator_to_array` as you suggested, I don't think this variable is necessary anymore, I did `$dicoms = iterator_to_array($provisioner->getAllInstances());`, which is consistent with the others endpoints (e.g. for [images](https://github.com/aces/Loris/blob/a87ead08684d8f4be4e10a982339eae440b075e7/modules/api/php/endpoints/project/images.class.inc#L131), the final array containing all info to display about images in a project is called `$images` )"", 'comment_created': datetime.datetime(2020, 8, 25, 19, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 476714089, 'comment_body': 'This condition is not right. \r\n\r\n`A or ( B and A)` => simplifies as `A`\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 25, 20, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 481234626, 'comment_body': ""```suggestion\r\n        return $user->hasPermission('dicom_archive_view_allsites');\r\n```"", 'comment_created': datetime.datetime(2020, 9, 1, 15, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 514354129, 'comment_body': ""I tried to remove this change but I can't. They seem to be exactly the same, I did not add a newline... same for the other similar changes in this PR"", 'comment_created': datetime.datetime(2020, 10, 29, 15, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 516149558, 'comment_body': 'Why is this removed? It is used in https://github.com/aces/Loris/pull/6775/files#diff-e8883d6dbf607c4d208c6405a42a0f5b9d044d9e2e705ec5cfaca41703943627R91', 'comment_created': datetime.datetime(2020, 11, 2, 17, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 516188279, 'comment_body': 'I think this should be `ProjectDicomsObject`\r\nAnd ProjectDicoms would be a good class name since they are object.', 'comment_created': datetime.datetime(2020, 11, 2, 18, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 518307043, 'comment_body': ""I don't think this file can be changed since the endpoint is available fro 0.0.4-dev only."", 'comment_created': datetime.datetime(2020, 11, 5, 19, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 518308336, 'comment_body': 'classname is `LORIS\\api\\Models\\ProjectDicoms`', 'comment_created': datetime.datetime(2020, 11, 5, 19, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 518896076, 'comment_body': ""I updated it to:  `string $classname='ProjectDicoms'`, but did you want it to be  `string $classname='LORIS\\api\\Models\\ProjectDicoms'` ?"", 'comment_created': datetime.datetime(2020, 11, 6, 17, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 519004681, 'comment_body': 'There should be a mention about the since parameter.', 'comment_created': datetime.datetime(2020, 11, 6, 21, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 519007972, 'comment_body': 'what is the since parameter?', 'comment_created': datetime.datetime(2020, 11, 6, 21, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 519929578, 'comment_body': 'https://github.com/aces/Loris/pull/6775/files#diff-abcc8bdf59aa52372d7e9df59277bafe7a4479d355250919912ff4a087939113R135', 'comment_created': datetime.datetime(2020, 11, 9, 16, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 521569374, 'comment_body': ""I'm confused by this thread.. it seems to be mentioned?"", 'comment_created': datetime.datetime(2020, 11, 11, 18, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 522254936, 'comment_body': 'I added something about the since parameter after xlecours comment', 'comment_created': datetime.datetime(2020, 11, 12, 16, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 522269678, 'comment_body': 'thanks @spell00  - @xlecours could you take a look when you have a moment? this feels close to success :) ', 'comment_created': datetime.datetime(2020, 11, 12, 17, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 664790028, 'comment_body': 'is there any reason why the following fields are not returned?\r\n```\r\nAcquisitionCount\r\nDicomFileCount\r\nScannerManufacturer\r\nScannerModel\r\nScannerSoftware\r\nScannerSerialNumber\r\n```\r\n\r\nThose are fields I could see as being informative to the user accessing the DICOM archives.', 'comment_created': datetime.datetime(2021, 7, 6, 18, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}, {'comment_id': 664790367, 'comment_body': '```suggestion\r\n\t             t.SourceLocation as Source\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 18, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}, {'comment_id': 664792640, 'comment_body': 'Also, I notice that in the JSON response, keys have all kinds of different convention. I would tend to make them consistent (either stick to CamelCase, or _ separated values, consistent casing etc...). \r\n\r\nSorry, my brain gets easily distracted with inconsistencies ;).', 'comment_created': datetime.datetime(2021, 7, 6, 18, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}]","[{'commit_sha': '8a68dfad49b3def898a641babe40a7eb87146f69', 'committer_username': 'ridz1208', 'committer_name': 'Rida Abou-Haidar', 'committer_email': None, 'commit_date': datetime.datetime(2015, 10, 23, 17, 53, 5, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
440833126,"[API] Add Project endpoint ""Dicoms""","## Brief summary of changes
This Pull Request adds an endpoint at /projects/\<project\>/dicoms. It returns a complete list of DICOM files contained in a project (and other pertinent informations)

#### Testing instructions
Go to https://\<hostname\>/api/v0.0.3/projects/rye/dicoms in a browser. The page should return a JSON in a string with information on all DICOM contained in the project

#### Link(s) to related issue(s)

* Resolves #6774",False,6775,https://api.github.com/repos/aces/Loris/pulls/6775,https://github.com/aces/Loris/pull/6775,closed,500,0,6,1,19,43,3,1,"[{'name': 'Feature'}, {'name': 'API'}, {'name': 'Needs Work'}]",2020-06-27 00:20:21+00:00,2024-07-04 14:31:44+00:00,126886283.0,"1468 days, 14:11:23","[{'comment_id': 464601558, 'comment_body': 'Why is this line changed?', 'comment_created': datetime.datetime(2020, 8, 3, 18, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464601864, 'comment_body': 'indentation inconsistency', 'comment_created': datetime.datetime(2020, 8, 3, 18, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464601987, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2020, 8, 3, 18, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464602034, 'comment_body': 'indentation', 'comment_created': datetime.datetime(2020, 8, 3, 18, 55, 42, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464602804, 'comment_body': '```suggestion\r\n<?php declare(strict_types=1);\r\n```', 'comment_created': datetime.datetime(2020, 8, 3, 18, 57, 15, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464603329, 'comment_body': 'instead of `\\\'Y\\\'`, `""Y""` can be used ', 'comment_created': datetime.datetime(2020, 8, 3, 18, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464603808, 'comment_body': 'I suggest this extends DBObjectRowProvisioner', 'comment_created': datetime.datetime(2020, 8, 3, 18, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464604072, 'comment_body': 'Why is this file changed?', 'comment_created': datetime.datetime(2020, 8, 3, 18, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 464621211, 'comment_body': ""I would simplify the query for this endpoint. I guess the goal of the endpoint is to have a DICOMs project endpoint that lists all the tarchive files in the database. In that case, there is no need to join to the files table or the tarchive_series table. Below is the simplification I was thinking about.\r\n\r\n```suggestion\r\n             SELECT\r\n               s.CandID as Candidate,\r\n               c.PSCID as PSCID,\r\n               c.Entity_type as Entity_type,\r\n               s.Visit_label as Visit,\r\n               s.Date_visit as Visit_date,\r\n               s.CenterID as CenterID,\r\n               p.Name as Site,\r\n               t.DateAcquired as date_acquired,\r\n               t.DateFirstArchived as date_first_archived,\r\n               t.DateLastArchived as date_last_archived,\r\n               t.TarchiveID as tarchiveid,\r\n               t.DicomArchiveID as DicomArchiveID,\r\n               t.ArchiveLocation as Archive,\r\n\t           t.SourceLocation as Source,\r\n             FROM\r\n               tarchive t\r\n             LEFT JOIN  session s\r\n               ON (t.SessionID = s.ID)\r\n             LEFT JOIN candidate c\r\n               ON (s.CandID = c.CandID)\r\n             LEFT JOIN psc p\r\n               ON (s.CenterID = p.CenterID)\r\n             LEFT JOIN Project project\r\n               ON (c.RegistrationProjectID = project.ProjectID)\r\n             WHERE\r\n               c.Active = \\'Y\\' AND\r\n               s.Active = \\'Y\\' AND\r\n               project.Name = :v_projectname AND\r\n               t.DateLastArchived > :v_time\r\n             ORDER BY t.DateLastArchived ASC\r\n```"", 'comment_created': datetime.datetime(2020, 8, 3, 19, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}, {'comment_id': 465097316, 'comment_body': ""yes, that is the idea. I'll have a look at this, thank you for the suggestion!"", 'comment_created': datetime.datetime(2020, 8, 4, 14, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 465103245, 'comment_body': ""I was told it was not necessary to declare strict_types like this in Loris anymore. Even if this is the case, I'm putting it back for consistency within that module (it is declared in other php files)"", 'comment_created': datetime.datetime(2020, 8, 4, 14, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 465899015, 'comment_body': 'there are NULL values in the table `tarchive` in raisinbread, is this normal?', 'comment_created': datetime.datetime(2020, 8, 5, 17, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 465905492, 'comment_body': '```suggestion\r\nclass ProjectDicomsObjectProvisioner extends DBObjectProvisioner\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 17, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 465905780, 'comment_body': ""```suggestion\r\n        string $classname='ProjectDicomsObjectProvisioner'\r\n```"", 'comment_created': datetime.datetime(2020, 8, 5, 17, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 466467469, 'comment_body': ""That would be `\\LORIS\\api\\Models\\ProjectDicomsRow.class.inc`\r\nBut do not set in as a default value. Add it a a parameter when you do `new ProjectDicomsObjectProvisioner($project, $since, '\\LORIS\\api\\Models\\ProjectDicomsRow.class.inc')`"", 'comment_created': datetime.datetime(2020, 8, 6, 14, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466470297, 'comment_body': 'DBObjectPRovisioners do not need a getInstance function. ', 'comment_created': datetime.datetime(2020, 8, 6, 14, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466471441, 'comment_body': 'That constructor is never called.\r\nPDO:statement fetchall instanciate the objects and set their values using `__set`.', 'comment_created': datetime.datetime(2020, 8, 6, 14, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466474252, 'comment_body': ""```suggestion\r\n        $provisioner = new \\LORIS\\api\\Provisioners\\ProjectDicomsObjectProvisioner(\r\n            $this->_project,\r\n            $since,\r\n            '\\LORIS\\api\\Models\\ProjectDicomsRow'\r\n        );\r\n```"", 'comment_created': datetime.datetime(2020, 8, 6, 14, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466475169, 'comment_body': 'YOu will need to change the filename as well.', 'comment_created': datetime.datetime(2020, 8, 6, 14, 58, 12, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 466673236, 'comment_body': ""which columns?  \r\n@spell00 can you pinpoint the rows you think might be problematic and we'll take a look? \r\nplease link to the sql lines in raisinbread on aces/loris for common reference. "", 'comment_created': datetime.datetime(2020, 8, 6, 20, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 468089790, 'comment_body': 'Yes, my guess is these are the few that I had to add in the raisinbread where the PSCID and CandID in the PatientName did not refer to an existing candidate (hence, no MINC images inserted into the files table).\r\n\r\nBasically, because of the bad PatientName present in the DICOMs, the pipeline cannot associate them to a given candidate/session and therefore their SessionID is NULL. I am not worried about those cases as typically, projects would end up removing those entries, relabelling the DICOMs correctly and reupload them with the correct PatientName.\r\n\r\nHope that makes sense. @spell00 let me know if that is not clear.', 'comment_created': datetime.datetime(2020, 8, 10, 18, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}, {'comment_id': 476486942, 'comment_body': '`$all` ?? all what?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476493358, 'comment_body': 'I think you could skip the foreach loop by using iterator_to_array', 'comment_created': datetime.datetime(2020, 8, 25, 14, 28, 40, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476495551, 'comment_body': 'Make sure that _hasAccess is called\r\nThe dicom_archives module requires `dicom_archive_view_allsites` to access it. \r\n@cmadjar The same applies here right?', 'comment_created': datetime.datetime(2020, 8, 25, 14, 31, 33, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 476686816, 'comment_body': ""I added it, but I did like for the `project/recordings` [endpoint](https://github.com/aces/Loris/blob/main/modules/api/php/endpoints/project/recordings.class.inc#L97), which calls `_hasAccess` in `handle`. It would not matter here since I don't think the endpoints in `\\projects` will ever have any other handles than handleGET, but I think it's better in `handle` for consistency "", 'comment_created': datetime.datetime(2020, 8, 25, 19, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 476692083, 'comment_body': ""now that I'm using `iterator_to_array` as you suggested, I don't think this variable is necessary anymore, I did `$dicoms = iterator_to_array($provisioner->getAllInstances());`, which is consistent with the others endpoints (e.g. for [images](https://github.com/aces/Loris/blob/a87ead08684d8f4be4e10a982339eae440b075e7/modules/api/php/endpoints/project/images.class.inc#L131), the final array containing all info to display about images in a project is called `$images` )"", 'comment_created': datetime.datetime(2020, 8, 25, 19, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 476714089, 'comment_body': 'This condition is not right. \r\n\r\n`A or ( B and A)` => simplifies as `A`\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 25, 20, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 481234626, 'comment_body': ""```suggestion\r\n        return $user->hasPermission('dicom_archive_view_allsites');\r\n```"", 'comment_created': datetime.datetime(2020, 9, 1, 15, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 514354129, 'comment_body': ""I tried to remove this change but I can't. They seem to be exactly the same, I did not add a newline... same for the other similar changes in this PR"", 'comment_created': datetime.datetime(2020, 10, 29, 15, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 516149558, 'comment_body': 'Why is this removed? It is used in https://github.com/aces/Loris/pull/6775/files#diff-e8883d6dbf607c4d208c6405a42a0f5b9d044d9e2e705ec5cfaca41703943627R91', 'comment_created': datetime.datetime(2020, 11, 2, 17, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 516188279, 'comment_body': 'I think this should be `ProjectDicomsObject`\r\nAnd ProjectDicoms would be a good class name since they are object.', 'comment_created': datetime.datetime(2020, 11, 2, 18, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 518307043, 'comment_body': ""I don't think this file can be changed since the endpoint is available fro 0.0.4-dev only."", 'comment_created': datetime.datetime(2020, 11, 5, 19, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 518308336, 'comment_body': 'classname is `LORIS\\api\\Models\\ProjectDicoms`', 'comment_created': datetime.datetime(2020, 11, 5, 19, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 518896076, 'comment_body': ""I updated it to:  `string $classname='ProjectDicoms'`, but did you want it to be  `string $classname='LORIS\\api\\Models\\ProjectDicoms'` ?"", 'comment_created': datetime.datetime(2020, 11, 6, 17, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 519004681, 'comment_body': 'There should be a mention about the since parameter.', 'comment_created': datetime.datetime(2020, 11, 6, 21, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 519007972, 'comment_body': 'what is the since parameter?', 'comment_created': datetime.datetime(2020, 11, 6, 21, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 519929578, 'comment_body': 'https://github.com/aces/Loris/pull/6775/files#diff-abcc8bdf59aa52372d7e9df59277bafe7a4479d355250919912ff4a087939113R135', 'comment_created': datetime.datetime(2020, 11, 9, 16, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 521569374, 'comment_body': ""I'm confused by this thread.. it seems to be mentioned?"", 'comment_created': datetime.datetime(2020, 11, 11, 18, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 522254936, 'comment_body': 'I added something about the since parameter after xlecours comment', 'comment_created': datetime.datetime(2020, 11, 12, 16, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 522269678, 'comment_body': 'thanks @spell00  - @xlecours could you take a look when you have a moment? this feels close to success :) ', 'comment_created': datetime.datetime(2020, 11, 12, 17, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 664790028, 'comment_body': 'is there any reason why the following fields are not returned?\r\n```\r\nAcquisitionCount\r\nDicomFileCount\r\nScannerManufacturer\r\nScannerModel\r\nScannerSoftware\r\nScannerSerialNumber\r\n```\r\n\r\nThose are fields I could see as being informative to the user accessing the DICOM archives.', 'comment_created': datetime.datetime(2021, 7, 6, 18, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}, {'comment_id': 664790367, 'comment_body': '```suggestion\r\n\t             t.SourceLocation as Source\r\n```', 'comment_created': datetime.datetime(2021, 7, 6, 18, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}, {'comment_id': 664792640, 'comment_body': 'Also, I notice that in the JSON response, keys have all kinds of different convention. I would tend to make them consistent (either stick to CamelCase, or _ separated values, consistent casing etc...). \r\n\r\nSorry, my brain gets easily distracted with inconsistencies ;).', 'comment_created': datetime.datetime(2021, 7, 6, 18, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'cmadjar', 'type': 'User'}]","[{'commit_sha': '8a68dfad49b3def898a641babe40a7eb87146f69', 'committer_username': 'ridz1208', 'committer_name': 'Rida Abou-Haidar', 'committer_email': None, 'commit_date': datetime.datetime(2015, 10, 23, 17, 53, 5, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
467020793,[API] correct file name in /projects/{project}/recordings and /projects/{project}/images endpoints,"## Brief summary of changes

1. The variable `_filename` is changed to `_filepath`
2. The attribute named `File` in the classes `ProjectImagesRowProvisioner` and `ProjectRecordingsRowProvisioner` is changed to FilePath
3. The attribute File is displayed for all images in the endpoint `/projects/{project}/images`
4. The attribute File is the actual file and not the path in the endpoint `/projects/{project}/recordings`

#### Testing instructions (if applicable)

1. Go to `<hostname>/api/v0.0.3/projects/pumpernickel/recordings`. 
The attribute `File` of the first item of the list should read `sub-OTT167_ses-V1_task-faceO_eeg.edf`, like:

![recordings_project_correct_filename](https://user-images.githubusercontent.com/32504294/90069557-7734c500-dcc0-11ea-8f88-2b6ebaadacce.png)

2. The attribute `File` should be present and read `demo_587630_V1_t1_001.mnc`, like:

![image_correct_file](https://user-images.githubusercontent.com/32504294/90069969-16f25300-dcc1-11ea-97fc-dad897dedb3a.png)


#### Link(s) to related issue(s)

* Resolves #6904
",False,6905,https://api.github.com/repos/aces/Loris/pulls/6905,https://github.com/aces/Loris/pull/6905,closed,11,10,4,5,13,5,1,0,[{'name': 'Caveat for Existing Projects'}],2020-08-12 21:36:23+00:00,2020-10-23 15:35:12+00:00,6199129.0,"71 days, 17:58:49","[{'comment_id': 477437786, 'comment_body': ""This was specifically removed in #6516 and should not be added without a new version of the spec. (In fact, it shouldn't be added at all.. it's just leaking internal details and the file is available to API users through the link field)"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 477454062, 'comment_body': ""In this case, adding the filename doesn't leak any additional details, the filename in https://demo.loris.ca/api/v0.0.3/projects/pumpernickel/images  is already available in the `Link` , so it is still leaking the file's name. I thought it might be redundant, but I tried to make it consistent with https://demo.loris.ca/api/v0.0.3/projects/pumpernickel/recordings , where the field `File` was actually the path (I changed them both not to be the Path, as the user doesn't need to know where the file actually exists). "", 'comment_created': datetime.datetime(2020, 8, 26, 17, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 477461686, 'comment_body': ""I don't mean it's leaking sensitive information, I mean it's leaking implementation details. The path on the filesystem is irrelevant for users of the REST API and unusable without access to the backend (in which case there's no reason to be using the REST API in the first place.) There is already a mechanism in the API to get the data for the file through the API -- the `Link` attribute, which doesn't require a leaky abstraction."", 'comment_created': datetime.datetime(2020, 8, 26, 17, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 477476270, 'comment_body': ""I know that the path is irrelevant to the user, that is actually what I am trying to change in  `modules/api/php/models/projectrecordingsrow.class.inc` . In my case, `File` doesn't mean the file's path, but the file's name. I can change it for `Filename` to be more precise. In the code, `File` keeps being referred to as the file's name (e.g. `$this->_filename   = $row['File'] ?? null;`), but it's actually the file's path, as you can see in https://demo.loris.ca/api/v0.0.3/projects/pumpernickel/recordings (which is the same thing on my VM on the `aces/main` branch). "", 'comment_created': datetime.datetime(2020, 8, 26, 17, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 477481505, 'comment_body': 'I know very little about the EEG part of the API, Cecile would need to provide feedback on that, but if you\'re changing it to something other than what the spec currently says you\'d need to create a new version/update the spec for that new version.\r\n\r\nFrom what I can see on the demo link that you provided, it looks like the ""sub-OTT167/ses-V1/eeg/"" part may be relevant for the BIDS standard and isn\'t in the Link. It might make sense to remove the `File` and add something like `BIDSName` with a value like `sub-OTT167/ses-V1/eeg/sub-OTT167_ses-V1_task-faceO_eeg.edf` with a new version, but @cmadjar would need to need to weigh in on that.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}]","[{'commit_sha': 'aa459201e30857452ebbffc8f9afbd1800f13beb', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f28629757160f336af37e3c74d10daeca9f8ae3f', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c92101819f37b2c2fe53db701d5203d0c0f33b96', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce7c561093f66f2c4ecea63a1043cd713b5c754', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bdb025a6b2457d3b684fd3775cf0016fb63597e', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
466905888,[API] Added features for dicoms : PatientName and images: isPhantom,"## Brief summary of changes

`Patientname` is added to dicoms endpoint view and `IsPhantom` is added to images endpoint view

#### Testing instructions

1. Go to `<hostname>/api/v0.0.3/candidates/400162/V6/dicoms/`. Under the attribute `Tarname`, a new attribute should be there: `Patientname : ""ROM162_400162_V6""`


2. Go to `<hostname>/api/v0.0.3/candidates/400162/V6/images/`. Each file should have 4 attributes, the last one being the new attribute, `IsPhantom: false`
",True,6899,https://api.github.com/repos/aces/Loris/pulls/6899,https://github.com/aces/Loris/pull/6899,closed,239,13,11,43,16,3,1,0,[{'name': 'API'}],2020-08-12 17:22:20+00:00,2020-11-09 18:27:08+00:00,7693488.0,"89 days, 1:04:48","[{'comment_id': 518069701, 'comment_body': ""I was going to say this isn't valid js so it's going to be rendered as an error since it's in a JS block, but then I decided to check if it's valid js in my JS console..\r\n\r\n```\r\n>> $x = true / false\r\nInfinity\r\n```\r\n...."", 'comment_created': datetime.datetime(2020, 11, 5, 13, 57, 58, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 518070467, 'comment_body': 'This is changing the result for both 0.0.3 and 0.0.4-dev, it needs a version check.', 'comment_created': datetime.datetime(2020, 11, 5, 13, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 518070670, 'comment_body': 'Same ', 'comment_created': datetime.datetime(2020, 11, 5, 13, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}]","[{'commit_sha': 'd259d63e9652a63a18ca48f4ea673743d778e68c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a7a7927b5bd3066cfa43f10b2b59617c04272c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f06d25c511f502ccc07112c293f66cd106ed81d8', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0acacb81e318980bc744be8ba51aad2f5b85a35a', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f17dbc05dd0513475868cbb4475a3939f29494a', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39b849551009dc161d2d8772190a6fa2345a5611', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f425c11cbce15edb7c2161006c28ae42d9f05dc', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b27d62b109392f99eb5bc44f47bbd1d9fd259995', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f00cf47f7ac6d71fb1a318ee195b8537cc220f6', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19a522705bf714cd2283b618e8677f1699c49b39', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a74d354111630858ea9bbfa2b22b7add58906373', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2e859dda3750fdb3278d00f0994ea234952619d', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14881b383e65d9d3dc9af557f4abbef52c3c371f', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bae556f9f3aa49cc16e728796db68e922b3a7b0', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fd7b8bb09f49b82e5526ee325c7fba2d894376c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe8bd6f1ea8b035c4397ff58a5d32c0a08e7297b', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93f391d7ff443f5bca3a92c9b0eb255aa2325eea', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8f08ee72ba88d9bcdd51775d43303cca52ef33f', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04f966fe6c2ab3265b963566577ea22562899292', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e94e1de8695a11c425057ec677a43316fb90220b', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7e1cd680d5cb37b597f106e02cfe1b83bc57138', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdd60b792ac823f34327348ca45e8fc3cbfc2fec', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49c2479ad05855daf0f20758762bc4da282f40f1', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84c797dcd0cf2c600fe8b53284c53f0508ca9745', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '172ccae6b3fe3e3bc99f174c5b11afd019107de8', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d52c2cf0c85e8e2f8ddd1028a46887d989c7e20', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '332416d943d1b424313da72aab80dd671290d5c0', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '087bef6a027be755d1e9ebf1f87a59b07a8d2d6a', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '645bcb13b701cc9b4e082325ecaa951eb02d1994', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a2e3469f58f7931e46055c232d67211ec417f0e', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bcc17cd854b0b107c1c0101fd08fb7b57a6edd4', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc711e6585382ab3983bebebd70bd7f5c3711ff7', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92ffc45e3bb87a8a4ef903fef68d49e0366c205f', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b743a36bf7501126f1eed30ed4e0e7ae0e15257', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c4b3f4d1bd884f636e7471a595d08cff3a1d5f8', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '495a60d6878b9d10797af642a3d1f3842568ed06', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f125da78571e084250716d179ae5d936c4544102', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d3c890c268e5f2cfd473e51b6126dee029600a2', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f60443ddf8e3fd7c1999dd833cfe8f2823351d96', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1a1fbc4353202a5da978da85dd90df97e980885', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd202d334d1eb121299385fe8837c7f8dd9d85fa', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5321ee3ae92247ab7a103864a3d570b3a960b5', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9623b9bcbf3d5cb41d5c50b0c10a524a4d887d28', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
454103110,[API] New directory for jupyter notebooks,"## Brief summary of changes

New Jupyter notebooks to display how the api works.

",True,6854,https://api.github.com/repos/aces/Loris/pulls/6854,https://github.com/aces/Loris/pull/6854,closed,2397,0,2,48,8,18,2,0,"[{'name': 'Documentation'}, {'name': 'API'}]",2020-07-21 04:14:50+00:00,2020-11-05 14:14:36+00:00,9280786.0,"107 days, 9:59:46","[{'comment_id': 468125138, 'comment_body': 'This should link to the one in aces/Loris', 'comment_created': datetime.datetime(2020, 8, 10, 19, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 470697932, 'comment_body': '@spell00 could you update this today? ', 'comment_created': datetime.datetime(2020, 8, 14, 15, 29, 35, tzinfo=datetime.timezone.utc), 'commenter': 'christinerogers', 'type': 'User'}, {'comment_id': 512021337, 'comment_body': 'broken link', 'comment_created': datetime.datetime(2020, 10, 26, 14, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 512022753, 'comment_body': 'This is not accurate', 'comment_created': datetime.datetime(2020, 10, 26, 14, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 512022908, 'comment_body': 'broken link', 'comment_created': datetime.datetime(2020, 10, 26, 14, 53, 54, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 512027386, 'comment_body': 'Those functions are a nice addition but I think they should return the response instead of printing. There are information in those responses (body, headers) that would be useful to the users.', 'comment_created': datetime.datetime(2020, 10, 26, 14, 59, 16, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 512282120, 'comment_body': ""This block won't be necessary when PR #6775 will be merged. It will add an endpoint listing all Dicoms in a project. It will then be possible to get a complete list of candidates and for which visits there is a Dicom file for a given project. For the moment, it is the only way to get these informations without hardcoding them in the notebook, which is problematic when not executed with raisinbread..."", 'comment_created': datetime.datetime(2020, 10, 26, 21, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 512297195, 'comment_body': 'This link will be valid when the PR is merged to `aces/main`', 'comment_created': datetime.datetime(2020, 10, 26, 22, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 512313490, 'comment_body': 'It should work now', 'comment_created': datetime.datetime(2020, 10, 26, 22, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 512316751, 'comment_body': ""I changed it, but it looks like Github doesn't track Jupyter notebooks very well..."", 'comment_created': datetime.datetime(2020, 10, 26, 22, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 512317101, 'comment_body': 'I updated this to a link that will not be broken when the notebooks are merged (see my comment below)', 'comment_created': datetime.datetime(2020, 10, 26, 22, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 512317585, 'comment_body': 'I think you are right, it is more convenient to return the response. It is changed now', 'comment_created': datetime.datetime(2020, 10, 26, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 515205869, 'comment_body': '```suggestion\r\n    ""prettyPrint(project)""\r\n```', 'comment_created': datetime.datetime(2020, 10, 30, 16, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 515207502, 'comment_body': '```suggestion\r\n    ""        \\""Sex\\""  : \\""Male|Female\\"",\\n"",\r\n```', 'comment_created': datetime.datetime(2020, 10, 30, 16, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 515209204, 'comment_body': 'This variable is not used', 'comment_created': datetime.datetime(2020, 10, 30, 16, 5, 59, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 515210425, 'comment_body': 'This shows as `Type Markdown and LaTeX:  𝛼2`', 'comment_created': datetime.datetime(2020, 10, 30, 16, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'xlecours', 'type': 'User'}, {'comment_id': 517722044, 'comment_body': ""The link https://colab.research.google.com/github/aces/Loris/blob/main/docs/notebooks/LORIS-API_Part1-HTTP.ipynb won't work until the PR is merged. For now, for testing purposes, one has to use the notebook in this Pr on this branch : https://colab.research.google.com/github/spell00/Loris/blob/2020-07-20-jupyterApiPart2/docs/notebooks/LORIS-API_Part1-HTTP.ipynb"", 'comment_created': datetime.datetime(2020, 11, 5, 1, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 517722870, 'comment_body': ""the link https://colab.research.google.com/github/aces/Loris/blob/main/docs/notebooks/LORIS_API_Part2_Python-script.ipynb won't work until the PR is merged. For testing, use https://colab.research.google.com/github/spell00/Loris/blob/2020-07-20-jupyterApiPart2/docs/notebooks/LORIS_API_Part2_Python-script.ipynb"", 'comment_created': datetime.datetime(2020, 11, 5, 1, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}]","[{'commit_sha': 'b70f96209916043807272cb78a0ea57f80bc0000', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484a6cb7a776949784de12cdfa3370e1b11d07bb', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a85f5ebc90ad19ea7863b0461475b5a58bde782', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48c164df97a67b36fe6d1384a12526d675f038ea', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '053add1a074fb073a13ff81ae557521f4bf785b3', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef0ca531b15daef6a5f15e8e1b20c4a7c930b8fc', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6390275b5f9f2ca48c3ef254d7e031645055a2b', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54b945c7cf679e34cad435cb5f9a84a3aecd46f4', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa24722c79898faae237cc9e78311632fcb77a6b', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '268887ead59fabd34182979f9995350819c5d508', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': '700f3c0a565557ded4f54d268e254de0be7a6509', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0c3a06bbd08a2ad7b4afe4aafeb85fe9d8c9894', 'committer_username': 'kongtiaowang', 'committer_name': 'Shen ', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 21, 2, 16, 13, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5041369e57afd7d8a81a0a450cb46dd32c8764e', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '970b7bbeaf47a6acdbb3b90f4e6f708435924f83', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '574b45d72ce1b5c857090223c5f439cf919102c5', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61c9edea6135e345e23ea5fd7bea8d2c64e2bde1', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c92464141c96c64154617637c1dbc8218917ece', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82ade7da86782c9730767739eb221403f0dc4c62', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa6620b46622ee78247d9173e47290cedb3401cf', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bebd28e0de431cc3c5f238a23191b9b05680ce80', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52992fe4e572d7eaf180b693b31a2a3879de5df1', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '830c00e5739760e8d0cc28e5ccbd2eaa55450d56', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b061d26a90e5915de7fd4128598bb4bc238a80c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e77cce55f1aab42713b3a357d764f675b0fc1c26', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7d0f16680a25db04a5ece30292abe394223cdc9', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79ddfa79a61cf0bfe0cd3d817009be153c3f020a', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '994e40f9f69a5345ad484738d091b907cd907207', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4448ef044c96218298361c4d8b60514f8de4b546', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c75955ede030919fba29c70a60abeff30e38fa88', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '267ff08d3bd5262b971c392eae1690cfd521cf1b', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21bfab612bc5a99f1e57050b68f0a535fe8484e0', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '321c19bf126bb66b1c4be79e4bf01de94b3b4cac', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4ac704edcb25426e95d46f7ff342ef96fb675b1', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cf766c4c112759e41cfdee0b26e0bfdb52849a2', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5505a9a6b4b3f74c8cfac12c828b817630e5ba6', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '675e28ff5ac80b53c9f36894fe0b8a80452b28d6', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c76417d063b5b4c404ca227a9861b7915fd2db84', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b49918227fdf40a950ae46541a1f51101c360f73', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fe4135da6e096e448083984f3da174c6471014b', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9910675bff7dc756ed605c53851a2c5074f65c4c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb50d6dccececfed7d05d66328d4f50556efe3e8', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec0dd6215003804c49ca4f4809417cb993a1461c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8bc16d518cf7d40d36571d9c6352839d01213a7d', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eeea806ed10eb78b88e71572b7750a1eee69390', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad3c43b0d1923050130d7a50db93a1e68461ca73', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fa6843d016cd561de086ffb060b352d0dda7b38', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7190df5597ff6231be9dc9ddcd051991684385fe', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4abab7be55d429c4c2fcfbed014b54e01b0c01c', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1
467020793,[API] correct file name in /projects/{project}/recordings and /projects/{project}/images endpoints,"## Brief summary of changes

1. The variable `_filename` is changed to `_filepath`
2. The attribute named `File` in the classes `ProjectImagesRowProvisioner` and `ProjectRecordingsRowProvisioner` is changed to FilePath
3. The attribute File is displayed for all images in the endpoint `/projects/{project}/images`
4. The attribute File is the actual file and not the path in the endpoint `/projects/{project}/recordings`

#### Testing instructions (if applicable)

1. Go to `<hostname>/api/v0.0.3/projects/pumpernickel/recordings`. 
The attribute `File` of the first item of the list should read `sub-OTT167_ses-V1_task-faceO_eeg.edf`, like:

![recordings_project_correct_filename](https://user-images.githubusercontent.com/32504294/90069557-7734c500-dcc0-11ea-8f88-2b6ebaadacce.png)

2. The attribute `File` should be present and read `demo_587630_V1_t1_001.mnc`, like:

![image_correct_file](https://user-images.githubusercontent.com/32504294/90069969-16f25300-dcc1-11ea-97fc-dad897dedb3a.png)


#### Link(s) to related issue(s)

* Resolves #6904
",False,6905,https://api.github.com/repos/aces/Loris/pulls/6905,https://github.com/aces/Loris/pull/6905,closed,11,10,4,5,13,5,1,0,[{'name': 'Caveat for Existing Projects'}],2020-08-12 21:36:23+00:00,2020-10-23 15:35:12+00:00,6199129.0,"71 days, 17:58:49","[{'comment_id': 477437786, 'comment_body': ""This was specifically removed in #6516 and should not be added without a new version of the spec. (In fact, it shouldn't be added at all.. it's just leaking internal details and the file is available to API users through the link field)"", 'comment_created': datetime.datetime(2020, 8, 26, 16, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 477454062, 'comment_body': ""In this case, adding the filename doesn't leak any additional details, the filename in https://demo.loris.ca/api/v0.0.3/projects/pumpernickel/images  is already available in the `Link` , so it is still leaking the file's name. I thought it might be redundant, but I tried to make it consistent with https://demo.loris.ca/api/v0.0.3/projects/pumpernickel/recordings , where the field `File` was actually the path (I changed them both not to be the Path, as the user doesn't need to know where the file actually exists). "", 'comment_created': datetime.datetime(2020, 8, 26, 17, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 477461686, 'comment_body': ""I don't mean it's leaking sensitive information, I mean it's leaking implementation details. The path on the filesystem is irrelevant for users of the REST API and unusable without access to the backend (in which case there's no reason to be using the REST API in the first place.) There is already a mechanism in the API to get the data for the file through the API -- the `Link` attribute, which doesn't require a leaky abstraction."", 'comment_created': datetime.datetime(2020, 8, 26, 17, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}, {'comment_id': 477476270, 'comment_body': ""I know that the path is irrelevant to the user, that is actually what I am trying to change in  `modules/api/php/models/projectrecordingsrow.class.inc` . In my case, `File` doesn't mean the file's path, but the file's name. I can change it for `Filename` to be more precise. In the code, `File` keeps being referred to as the file's name (e.g. `$this->_filename   = $row['File'] ?? null;`), but it's actually the file's path, as you can see in https://demo.loris.ca/api/v0.0.3/projects/pumpernickel/recordings (which is the same thing on my VM on the `aces/main` branch). "", 'comment_created': datetime.datetime(2020, 8, 26, 17, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'spell00', 'type': 'User'}, {'comment_id': 477481505, 'comment_body': 'I know very little about the EEG part of the API, Cecile would need to provide feedback on that, but if you\'re changing it to something other than what the spec currently says you\'d need to create a new version/update the spec for that new version.\r\n\r\nFrom what I can see on the demo link that you provided, it looks like the ""sub-OTT167/ses-V1/eeg/"" part may be relevant for the BIDS standard and isn\'t in the Link. It might make sense to remove the `File` and add something like `BIDSName` with a value like `sub-OTT167/ses-V1/eeg/sub-OTT167_ses-V1_task-faceO_eeg.edf` with a new version, but @cmadjar would need to need to weigh in on that.', 'comment_created': datetime.datetime(2020, 8, 26, 17, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'driusan', 'type': 'User'}]","[{'commit_sha': 'aa459201e30857452ebbffc8f9afbd1800f13beb', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f28629757160f336af37e3c74d10daeca9f8ae3f', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c92101819f37b2c2fe53db701d5203d0c0f33b96', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ce7c561093f66f2c4ecea63a1043cd713b5c754', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bdb025a6b2457d3b684fd3775cf0016fb63597e', 'committer_username': 'spell00', 'committer_name': 'Simon Pelletier', 'committer_email': 'simonjpelletier@gmail.com', 'commit_date': datetime.datetime(2017, 10, 4, 4, 19, 16, tzinfo=datetime.timezone.utc)}]",Simon Pelletier,32504294,simonjpelletier@gmail.com,User,,25,,0,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1125630,Loris,aces/Loris,PHP,173,142,25,153,12675,450,20,51,"[{'id': 524290933, 'number': 7132, 'closed': datetime.datetime(2020, 12, 22, 18, 26, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 19, 23, 7, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2834354.0, 'time_delta': '32 days, 19:19:14', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 514439396, 'number': 7112, 'closed': datetime.datetime(2020, 11, 4, 6, 35, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 3, 2, 19, 55, tzinfo=datetime.timezone.utc), 'time_taken': 101728.0, 'time_delta': '1 day, 4:15:28', 'additions': 2386, 'deletions': 2110, 'state': 'closed'}, {'id': 506335613, 'number': 7097, 'closed': datetime.datetime(2020, 10, 23, 15, 28, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 19, 23, 14, 31, tzinfo=datetime.timezone.utc), 'time_taken': 317640.0, 'time_delta': '3 days, 16:14:00', 'additions': 57, 'deletions': 1, 'state': 'closed'}, {'id': 500159844, 'number': 7090, 'closed': datetime.datetime(2020, 10, 19, 20, 3, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 8, 20, 10, 12, tzinfo=datetime.timezone.utc), 'time_taken': 950018.0, 'time_delta': '10 days, 23:53:38', 'additions': 53, 'deletions': 0, 'state': 'closed'}, {'id': 499711484, 'number': 7088, 'closed': datetime.datetime(2020, 11, 9, 19, 0, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 8, 7, 9, 50, tzinfo=datetime.timezone.utc), 'time_taken': 2807440.0, 'time_delta': '32 days, 11:50:40', 'additions': 202, 'deletions': 2, 'state': 'closed'}, {'id': 497134758, 'number': 7081, 'closed': datetime.datetime(2020, 10, 22, 17, 56, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 2, 21, 4, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1716706.0, 'time_delta': '19 days, 20:51:46', 'additions': 197, 'deletions': 14, 'state': 'closed'}, {'id': 495113481, 'number': 7075, 'closed': datetime.datetime(2022, 11, 29, 15, 16, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 29, 21, 26, 9, tzinfo=datetime.timezone.utc), 'time_taken': 68320241.0, 'time_delta': '790 days, 17:50:41', 'additions': 435, 'deletions': 48, 'state': 'closed'}, {'id': 494304225, 'number': 7070, 'closed': datetime.datetime(2020, 11, 5, 13, 54, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 28, 17, 44, 12, tzinfo=datetime.timezone.utc), 'time_taken': 3269403.0, 'time_delta': '37 days, 20:10:03', 'additions': 216, 'deletions': 8, 'state': 'closed'}, {'id': 490547934, 'number': 7052, 'closed': datetime.datetime(2020, 9, 30, 15, 28, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 21, 20, 42, 3, tzinfo=datetime.timezone.utc), 'time_taken': 758797.0, 'time_delta': '8 days, 18:46:37', 'additions': 597, 'deletions': 57, 'state': 'closed'}, {'id': 477277343, 'number': 6944, 'closed': datetime.datetime(2020, 10, 28, 15, 52, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 1, 19, 10, 30, tzinfo=datetime.timezone.utc), 'time_taken': 4912919.0, 'time_delta': '56 days, 20:41:59', 'additions': 515, 'deletions': 85, 'state': 'closed'}, {'id': 477169325, 'number': 6942, 'closed': datetime.datetime(2020, 9, 4, 18, 30, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 1, 15, 41, 8, tzinfo=datetime.timezone.utc), 'time_taken': 269372.0, 'time_delta': '3 days, 2:49:32', 'additions': 27, 'deletions': 8, 'state': 'closed'}, {'id': 472016356, 'number': 6929, 'closed': datetime.datetime(2020, 10, 5, 15, 55, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 22, 17, 52, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3794548.0, 'time_delta': '43 days, 22:02:28', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 467020793, 'number': 6905, 'closed': datetime.datetime(2020, 10, 23, 15, 35, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 21, 36, 23, tzinfo=datetime.timezone.utc), 'time_taken': 6199129.0, 'time_delta': '71 days, 17:58:49', 'additions': 11, 'deletions': 10, 'state': 'closed'}, {'id': 466939759, 'number': 6901, 'closed': datetime.datetime(2020, 8, 12, 19, 20, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 18, 36, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2642.0, 'time_delta': '0:44:02', 'additions': 12, 'deletions': 5, 'state': 'closed'}, {'id': 466905888, 'number': 6899, 'closed': datetime.datetime(2020, 11, 9, 18, 27, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 17, 22, 20, tzinfo=datetime.timezone.utc), 'time_taken': 7693488.0, 'time_delta': '89 days, 1:04:48', 'additions': 239, 'deletions': 13, 'state': 'closed'}, {'id': 464362236, 'number': 6890, 'closed': datetime.datetime(2021, 6, 8, 15, 14, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 3, 5, 42, tzinfo=datetime.timezone.utc), 'time_taken': 26395699.0, 'time_delta': '305 days, 12:08:19', 'additions': 819, 'deletions': 0, 'state': 'closed'}, {'id': 454103110, 'number': 6854, 'closed': datetime.datetime(2020, 11, 5, 14, 14, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 21, 4, 14, 50, tzinfo=datetime.timezone.utc), 'time_taken': 9280786.0, 'time_delta': '107 days, 9:59:46', 'additions': 2397, 'deletions': 0, 'state': 'closed'}, {'id': 447064049, 'number': 6828, 'closed': datetime.datetime(2020, 8, 25, 18, 50, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 19, 58, 32, tzinfo=datetime.timezone.utc), 'time_taken': 4056744.0, 'time_delta': '46 days, 22:52:24', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 441624058, 'number': 6780, 'closed': datetime.datetime(2020, 11, 9, 18, 24, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 20, 11, 55, tzinfo=datetime.timezone.utc), 'time_taken': 11484729.0, 'time_delta': '132 days, 22:12:09', 'additions': 124, 'deletions': 6, 'state': 'closed'}, {'id': 440833126, 'number': 6775, 'closed': datetime.datetime(2024, 7, 4, 14, 31, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 27, 0, 20, 21, tzinfo=datetime.timezone.utc), 'time_taken': 126886283.0, 'time_delta': '1468 days, 14:11:23', 'additions': 500, 'deletions': 0, 'state': 'closed'}, {'id': 428755288, 'number': 6672, 'closed': datetime.datetime(2020, 6, 9, 14, 26, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 20, 58, 31, tzinfo=datetime.timezone.utc), 'time_taken': 322072.0, 'time_delta': '3 days, 17:27:52', 'additions': 31, 'deletions': 17, 'state': 'closed'}, {'id': 428142841, 'number': 6671, 'closed': datetime.datetime(2020, 8, 27, 13, 4, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 23, 34, 47, tzinfo=datetime.timezone.utc), 'time_taken': 7219766.0, 'time_delta': '83 days, 13:29:26', 'additions': 3257, 'deletions': 6, 'state': 'closed'}, {'id': 426940361, 'number': 6663, 'closed': datetime.datetime(2020, 6, 4, 22, 57, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 3, 30, 4, tzinfo=datetime.timezone.utc), 'time_taken': 156449.0, 'time_delta': '1 day, 19:27:29', 'additions': 520699, 'deletions': 0, 'state': 'closed'}, {'id': 422828628, 'number': 6601, 'closed': datetime.datetime(2020, 6, 12, 15, 33, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 16, 41, 15, tzinfo=datetime.timezone.utc), 'time_taken': 1551153.0, 'time_delta': '17 days, 22:52:33', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 415033666, 'number': 6508, 'closed': datetime.datetime(2020, 5, 11, 13, 36, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 8, 4, 7, tzinfo=datetime.timezone.utc), 'time_taken': 293350.0, 'time_delta': '3 days, 9:29:10', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
