pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1368851599,Add initial basic support for vectorized forward mode AD,"This PR adds initial support for vectorized forward mode for differentiating functions w.r.t all parameters in forward mode.

Minimal working example: 
```cpp
double f(double x, double y) {
  return x*y;
}

int main() {
  auto f_dx = clad::vector_forward_differentiate(f);
  double dx = 0, dy = 0;
  f_dx.execute(/*x=*/3, /*y=*/4, &dx, &dy);
  std::cout << ""dx: "" << dx << ' ' << ""dy: "" << dy << std::endl;
  
  // Dump the generated derivative code to standard output.
  f_dx.dump();
}
``` 

Corresponding output:
```bash
dx: 4 dy: 3
The code is: 
void f_d_all_args(double x, double y, double *_d_x, double *_d_y) {
    clad::array<double> _d_vector_x = {1., 0.};
    clad::array<double> _d_vector_y = {0., 1.};
    {
        clad::array<double> _d_vector_return = _d_vector_x * y + x * _d_vector_y;
        *_d_x = _d_vector_return[0];
        *_d_y = _d_vector_return[1];
        return;
    }
}
```",True,565,https://api.github.com/repos/vgvassilev/clad/pulls/565,https://github.com/vgvassilev/clad/pull/565,closed,583,38,12,1,10,50,0,0,[],2023-05-29 09:49:32+00:00,2023-06-15 11:28:07+00:00,1474715.0,"17 days, 1:38:35","[{'comment_id': 1216307776, 'comment_body': 'Can it be a `const` member function?', 'comment_created': datetime.datetime(2023, 6, 4, 7, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216308740, 'comment_body': 'Can we pass `arr` as a const reference instead? If yes, then please make changes in all such operator overloads.', 'comment_created': datetime.datetime(2023, 6, 4, 7, 2, 48, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216309554, 'comment_body': 'Why do you have overloads that differ in the parameters `array<T> &arr2` and `array<T> &&arr2`?', 'comment_created': datetime.datetime(2023, 6, 4, 7, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216310258, 'comment_body': 'Can you please explain why overloads for rvalue references are beneficial here? You are not moving any value\r\nwithin the function body.', 'comment_created': datetime.datetime(2023, 6, 4, 7, 5, 38, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216315525, 'comment_body': '`annotate(""D"")` is used to recognize the differentiation mode. We should have different differentiation mode for ordinary forward and vector forward mode.', 'comment_created': datetime.datetime(2023, 6, 4, 7, 13, 7, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216488491, 'comment_body': 'fixed üëçüèº ', 'comment_created': datetime.datetime(2023, 6, 4, 9, 58, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1216489575, 'comment_body': 'changed in all such operator overloads üëçüèº ', 'comment_created': datetime.datetime(2023, 6, 4, 9, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1216497657, 'comment_body': 'Yeah, my bad. I have fixed this by making changes in the rvalue reference itself.', 'comment_created': datetime.datetime(2023, 6, 4, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1216500048, 'comment_body': 'This is mainly used for cascaded operations. For ex. `clad::array<double> d = a+b+c`, where `a, b, c` are also clad arrays. ', 'comment_created': datetime.datetime(2023, 6, 4, 10, 9, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1216530166, 'comment_body': 'commented below about the reasoning for this.', 'comment_created': datetime.datetime(2023, 6, 4, 10, 36, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1216578968, 'comment_body': 'Minor: const auto&', 'comment_created': datetime.datetime(2023, 6, 4, 11, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216579444, 'comment_body': 'Add space between function definitions.', 'comment_created': datetime.datetime(2023, 6, 4, 11, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216580645, 'comment_body': ""This doesn't seem correct.\r\n\r\nWhy should `n + arr` have different behavior depending on reference qualifier of `arr`?"", 'comment_created': datetime.datetime(2023, 6, 4, 11, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216608061, 'comment_body': 'Instead of -2 here, can you please use the enum name?', 'comment_created': datetime.datetime(2023, 6, 4, 11, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216615570, 'comment_body': 'Why are we passing `m_Function->getLocation()` here? Can we pass an empty location object? If not, then can we use\r\n`clad::utils::GetValidSLoc`?', 'comment_created': datetime.datetime(2023, 6, 4, 11, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216617008, 'comment_body': 'Can you please briefly explain one-hot terminology used here?', 'comment_created': datetime.datetime(2023, 6, 4, 12, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216622517, 'comment_body': 'Can you please open an issue for supporting forward vector mode differentiation for some select parameters?', 'comment_created': datetime.datetime(2023, 6, 4, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216684974, 'comment_body': 'What if the original type is a reference type?', 'comment_created': datetime.datetime(2023, 6, 4, 13, 9, 54, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216698635, 'comment_body': 'Is there any use of `m_Variables` in vector forward mode?', 'comment_created': datetime.datetime(2023, 6, 4, 13, 23, 25, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1216854866, 'comment_body': 'Yes, please run `git-clang-format` to this patch.', 'comment_created': datetime.datetime(2023, 6, 4, 16, 4, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1217771234, 'comment_body': 'removed all rvalue reference functions for now to keep this simple, will add them later if required.', 'comment_created': datetime.datetime(2023, 6, 5, 9, 12, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1217771559, 'comment_body': 'removed rvalue reference function üëçüèº ', 'comment_created': datetime.datetime(2023, 6, 5, 9, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1217773182, 'comment_body': 'ran `git-clang-format` and added spaces between functions üëçüèº ', 'comment_created': datetime.datetime(2023, 6, 5, 9, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1217773414, 'comment_body': 'removed üëçüèº ', 'comment_created': datetime.datetime(2023, 6, 5, 9, 13, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1217773901, 'comment_body': 'explained in comments üëçüèº ', 'comment_created': datetime.datetime(2023, 6, 5, 9, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1217774300, 'comment_body': 'passed `noLoc` üëçüèº ', 'comment_created': datetime.datetime(2023, 6, 5, 9, 14, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1217774772, 'comment_body': ""wouldn't `utils::GetValueType` take care of that?"", 'comment_created': datetime.datetime(2023, 6, 5, 9, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1217775526, 'comment_body': ""yup, `m_Variables` is for storing the mapping from original function parameters to new parameters for derivatives. These new parameters won't be a vector, that's why kept them in a separate map."", 'comment_created': datetime.datetime(2023, 6, 5, 9, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1221661605, 'comment_body': 'created an issue: https://github.com/vgvassilev/clad/issues/566', 'comment_created': datetime.datetime(2023, 6, 7, 14, 5, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1222087429, 'comment_body': 'Oh, yes, It would. ', 'comment_created': datetime.datetime(2023, 6, 7, 19, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1222087638, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2023, 6, 7, 19, 52, 22, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1222092381, 'comment_body': 'Why do we need `{static_cast<T>(T())}` expression here?\r\nCannot we just use this:\r\n```cpp\r\nm_arr(new T[arr.size()]{})\r\n```', 'comment_created': datetime.datetime(2023, 6, 7, 19, 56, 39, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1222095914, 'comment_body': 'Why does it need to be a friend function? It does not seem to be accessing any private/protected members.\r\nAlso, what do you think about moving the operators outside the class?', 'comment_created': datetime.datetime(2023, 6, 7, 20, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1222111336, 'comment_body': 'Will it be correct if the return type is a `const` type?', 'comment_created': datetime.datetime(2023, 6, 7, 20, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1222680772, 'comment_body': 'I followed the convention as it is done for other constructors of this class.', 'comment_created': datetime.datetime(2023, 6, 8, 8, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1222683289, 'comment_body': ""ah, okay. Then it's fine."", 'comment_created': datetime.datetime(2023, 6, 8, 9, 1, 58, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1222845114, 'comment_body': 'shifted most of the overloaded operators outside the class.', 'comment_created': datetime.datetime(2023, 6, 8, 10, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1222846755, 'comment_body': 'yup, it works even if return type is `const double` for example', 'comment_created': datetime.datetime(2023, 6, 8, 10, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1225283587, 'comment_body': 'Could we extend the test cases? We should probably add a demo (in the demos folder). We should also document the new feature and interface in the documentation under `docs`.', 'comment_created': datetime.datetime(2023, 6, 10, 10, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1225284313, 'comment_body': 'Could we extend the test cases? We should probably add a demo (in the demos folder). We should also document the new feature and interface in the documentation under `docs`.', 'comment_created': datetime.datetime(2023, 6, 10, 10, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1225313314, 'comment_body': 'Sure, I will add it in follow-up PRs when the implementation is a little stable for some decently complex example programs.', 'comment_created': datetime.datetime(2023, 6, 10, 11, 51, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1225318812, 'comment_body': 'According to codecov this PR needs more tests to reach 100% coverage. I don‚Äôt think we need complex examples but examples good enough to test all new code that we have. ', 'comment_created': datetime.datetime(2023, 6, 10, 12, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1225799580, 'comment_body': 'added more test cases üëçüèº ', 'comment_created': datetime.datetime(2023, 6, 11, 12, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1226159096, 'comment_body': 'Do we need an extra allocation here? Can we use `array_ref`?', 'comment_created': datetime.datetime(2023, 6, 12, 6, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1226159215, 'comment_body': 'Likewise.', 'comment_created': datetime.datetime(2023, 6, 12, 6, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1226343088, 'comment_body': ""The objective of this function is to return a new array (with multiplied entries),  if we use array_ref, won't `arr`'s underlying array also get modified? \r\nAlso, if a new array is needed to be returned, won't it anyway require allocating a new array?"", 'comment_created': datetime.datetime(2023, 6, 12, 9, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1227981407, 'comment_body': ""Oh, okay, I see. In that case why do we need the `arr` parameter? Isn't the `m_arr`?"", 'comment_created': datetime.datetime(2023, 6, 13, 11, 37, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1228067330, 'comment_body': ""This overloaded operator is outside the class definition, so we can't use `m_arr` here. "", 'comment_created': datetime.datetime(2023, 6, 13, 12, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1230467679, 'comment_body': '@vgvassilev, can we mark this as resolved?', 'comment_created': datetime.datetime(2023, 6, 15, 5, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1230865365, 'comment_body': 'Yep, thanks for clarifying!', 'comment_created': datetime.datetime(2023, 6, 15, 11, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': '4781b58396ee3c7b1f2610ab6a3e422ab6657ae9', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}]",Vaibhav Thakkar,19686718,vaibhav.thakkar.22.12.99@gmail.com,User,,55,,24,83
1396024181,Split ForwardMode into separate classes,,True,572,https://api.github.com/repos/vgvassilev/clad/pulls/572,https://github.com/vgvassilev/clad/pull/572,closed,2524,2326,16,1,6,28,0,0,[],2023-06-16 16:38:10+00:00,2023-06-29 20:37:58+00:00,1137588.0,"13 days, 3:59:48","[{'comment_id': 1240855840, 'comment_body': '`BaseForwardModeVisitor::DifferentiateVarDecl` seems pretty much the same. Can we reuse that implementation?', 'comment_created': datetime.datetime(2023, 6, 24, 15, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1240867780, 'comment_body': 'Ah, it was in `ForwardModeVisitorBase` before. Nice catch!', 'comment_created': datetime.datetime(2023, 6, 24, 15, 50, 35, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1240883983, 'comment_body': 'Minor: Please sort the filenames here.', 'comment_created': datetime.datetime(2023, 6, 24, 16, 25, 52, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1241086152, 'comment_body': '~~the difference was in prefix assigned tot he derived variable, so created an extra overloaded function for this which takes a prefix as a parameter.~~', 'comment_created': datetime.datetime(2023, 6, 25, 8, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1241086234, 'comment_body': 'done üëçüèº ', 'comment_created': datetime.datetime(2023, 6, 25, 8, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1241096855, 'comment_body': 'Please ignore the previous comment, currently the difference is in just prefix and type of derived variable, but it will be more visible in [this PR](https://github.com/vgvassilev/clad/pull/570), where the initialisation style will also change for vector mode.\r\nSo, I think it is better to override this.', 'comment_created': datetime.datetime(2023, 6, 25, 8, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1241288165, 'comment_body': ""Don't we want to write a test for this branch?"", 'comment_created': datetime.datetime(2023, 6, 25, 21, 6, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1241288247, 'comment_body': 'That should be easy to test with having a `void f(double d) { return; }`?', 'comment_created': datetime.datetime(2023, 6, 25, 21, 7, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1241288437, 'comment_body': '@parth-07 do you have an idea how to test this case?', 'comment_created': datetime.datetime(2023, 6, 25, 21, 8, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1241288467, 'comment_body': '@parth-07 and here?', 'comment_created': datetime.datetime(2023, 6, 25, 21, 9, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1241288491, 'comment_body': '@parth-07 and probably here?', 'comment_created': datetime.datetime(2023, 6, 25, 21, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1241288739, 'comment_body': '@grimmmyshini do you have an idea how to test this branch?', 'comment_created': datetime.datetime(2023, 6, 25, 21, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1241289597, 'comment_body': '@parth-07 and here?', 'comment_created': datetime.datetime(2023, 6, 25, 21, 16, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1241289691, 'comment_body': 'Is that reachable at all?', 'comment_created': datetime.datetime(2023, 6, 25, 21, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1242685943, 'comment_body': 'Yes, we will reach this case when there are global objects in a function. Here\'s such a case:\r\n\r\n```cpp\r\n#include ""clad/Differentiator/Differentiator.h""\r\n\r\nstruct Complex {\r\n    Complex(double preal, double pim) : real(preal), im(pim) {}\r\n    double real = 0, im = 0;\r\n};\r\n\r\nComplex c(7, 9);\r\n\r\ndouble fn(double i, double j) {\r\n    return c.real * i + c.im * j;\r\n}\r\n\r\nint main() {\r\n    auto d_fn = clad::differentiate(fn, ""i"");\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 19, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1242716856, 'comment_body': 'It seems that this `if` block can be safely removed. We later added proper support for dereference operator, which made this special case redundant.', 'comment_created': datetime.datetime(2023, 6, 26, 20, 14, 52, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1242717310, 'comment_body': ""It's an assert. Hopefully, it's not reachable :). "", 'comment_created': datetime.datetime(2023, 6, 26, 20, 15, 23, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1242719520, 'comment_body': 'This example reaches this code:\r\n\r\n```cpp\r\n#include ""clad/Differentiator/Differentiator.h""\r\n\r\nstruct Array {\r\n    double data[5];\r\n};\r\n\r\nArray array;\r\n\r\ndouble fn(double i, double j) {\r\n    return array.data[0] * i + array.data[1] * j;\r\n}\r\n\r\nint main() {\r\n    auto d_fn = clad::differentiate(fn, ""i"");\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 26, 20, 17, 37, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1242724832, 'comment_body': 'I cannot think of a case for this right now. But it might be possible in some obscure cases.', 'comment_created': datetime.datetime(2023, 6, 26, 20, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1245141052, 'comment_body': ""I couldn't find any expression such that the original expression is not null, but it's derivative expression is null.\r\nCan this branch be removed ? cc: @parth-07 "", 'comment_created': datetime.datetime(2023, 6, 28, 12, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1245145723, 'comment_body': 'Thanks for the example, added this as a test.', 'comment_created': datetime.datetime(2023, 6, 28, 12, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1245145901, 'comment_body': 'added this as a test', 'comment_created': datetime.datetime(2023, 6, 28, 12, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1245146500, 'comment_body': 'removed this condition', 'comment_created': datetime.datetime(2023, 6, 28, 12, 38, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1246961384, 'comment_body': 'No, this cannot be removed. This example reaches this branch:\r\n\r\n```cpp\r\n#include ""clad/Differentiator/Differentiator.h""\r\n\r\nvoid increment(int &i) {\r\n    ++i;\r\n}\r\n\r\ndouble fn(double i, double j) {\r\n    double res = 0;\r\n    for (int i=0; i < 5; increment(i))\r\n        res += i*j;\r\n    return res;\r\n}\r\n\r\nint main() {\r\n    auto d_fn = clad::differentiate(fn, ""i"");\r\n}\r\n```', 'comment_created': datetime.datetime(2023, 6, 29, 18, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1246962322, 'comment_body': 'Okay, got it.', 'comment_created': datetime.datetime(2023, 6, 29, 18, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1246968913, 'comment_body': 'Perhaps also issue an unsupported diagnostics?', 'comment_created': datetime.datetime(2023, 6, 29, 18, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1247026055, 'comment_body': 'Oh, nice! I wrongly tried using return directly as it has a derivative expression as null.\r\nThanks for this üëçüèº , added.', 'comment_created': datetime.datetime(2023, 6, 29, 19, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1247026418, 'comment_body': ""This is inside a static function, so `diag` can't be used here."", 'comment_created': datetime.datetime(2023, 6, 29, 19, 32, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}]","[{'commit_sha': '99ab8d490bca83aadd82ea1bf1f64afc7a56145c', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}]",Vaibhav Thakkar,19686718,vaibhav.thakkar.22.12.99@gmail.com,User,,55,,24,83
1416696654,Ensure git-clang-format is run on PR,closes #537 ,True,576,https://api.github.com/repos/vgvassilev/clad/pulls/576,https://github.com/vgvassilev/clad/pull/576,closed,31,0,1,1,9,0,0,0,[],2023-07-02 11:22:02+00:00,2023-07-03 06:05:33+00:00,67411.0,18:43:31,[],"[{'commit_sha': '1306eee0ac740ef4fd19cd1f223cc275c04c6721', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}]",Vaibhav Thakkar,19686718,vaibhav.thakkar.22.12.99@gmail.com,User,,55,,24,83
1418248763,Enhance vector fwd mode to differentiate w.r.t selected params,"After this commit, the user can specify which params it wants to differentiate against.  

For ex: if the function is of the form: 
```cpp
double f(double x, double y, double z) {
  ...
}
```
Then `clad::vector_forward_differentiate(f, ""x,z"")` will produce:  
```cpp
void f_dvec_0_2(double x, double y, double z, double *_d_x, double *_d_z) {
  ...
  ...
  {
     *_d_x = ...;
     *_d_z = ...;
     return;
  }
} 
```

closes #566 ",True,577,https://api.github.com/repos/vgvassilev/clad/pulls/577,https://github.com/vgvassilev/clad/pull/577,closed,170,30,4,1,5,0,0,0,[],2023-07-03 14:48:37+00:00,2023-07-05 11:53:07+00:00,162270.0,"1 day, 21:04:30",[],"[{'commit_sha': 'ee70728a79f1742f035d3f79c1a2a27daf7c6f29', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}]",Vaibhav Thakkar,19686718,vaibhav.thakkar.22.12.99@gmail.com,User,,55,,24,83
1426263539,Run clang tidy check on PR,,True,579,https://api.github.com/repos/vgvassilev/clad/pulls/579,https://github.com/vgvassilev/clad/pull/579,closed,68,0,2,1,4,0,0,0,[],2023-07-09 10:59:46+00:00,2023-07-09 15:51:26+00:00,17500.0,4:51:40,[],"[{'commit_sha': '4540d7fc4a43cecaedf4ef6b411a90622af346b3', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}]",Vaibhav Thakkar,19686718,vaibhav.thakkar.22.12.99@gmail.com,User,,55,,24,83
1430994556,Improve AD function interfaces with bitmasked options,"This will extend existing functions to have support for options like vector mode.

A current working example is:
- `clad::differentiate <clad::opts::vector_mode> (fn)` - first-order differentiation of the function `fn` using vector forward mode

Another example which is not yet supported but may be helpful for the future:
- `clad::gradient <clad::opts::use_enzyme, clad::opts::vector_mode> (fn)` - first-order gradient computation (reverse mode AD) using enzyme's vector mode.
",True,583,https://api.github.com/repos/vgvassilev/clad/pulls/583,https://github.com/vgvassilev/clad/pull/583,closed,245,93,10,4,12,59,0,0,[],2023-07-12 10:19:55+00:00,2023-07-16 20:16:18+00:00,381383.0,"4 days, 9:56:23","[{'comment_id': 1260963876, 'comment_body': 'warning: parameter \'fn\' is unused [misc-unused-parameters]\n\n```suggestion\n  differentiate(F  /*fn*/, ArgSpec args = """",\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 10, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1260963885, 'comment_body': 'warning: parameter name \'fn\' is too short, expected at least 3 characters [readability-identifier-length]\n```cpp\n  differentiate(F fn, ArgSpec args = """",\n                  ^\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 10, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1260963889, 'comment_body': 'warning: parameter \'args\' is unused [misc-unused-parameters]\n\n```suggestion\n  differentiate(F fn, ArgSpec  /*args*/ = """",\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 10, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1260963894, 'comment_body': ""warning: variable 'derivativeOrder' of type 'unsigned int' can be declared 'const' [misc-const-correctness]\n\n```suggestion\n        unsigned const derivativeOrder = derivativeOrderAPSInt.getZExtValue();\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 10, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1260963904, 'comment_body': ""warning: variable 'bitmasked_opts_value' of type 'unsigned int' can be declared 'const' [misc-const-correctness]\n\n```suggestion\n        unsigned const bitmasked_opts_value = FD->getTemplateSpecializationArgs()\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 10, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1260963910, 'comment_body': ""warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]\n\n```suggestion\n        if ((bitmasked_opts_value & clad::opts::use_enzyme) != 0u) {\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 10, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1260963914, 'comment_body': ""warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]\n\n```suggestion\n        if ((bitmasked_opts_value & clad::opts::vector_mode) != 0u) {\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 10, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1260963917, 'comment_body': ""warning: variable 'bitmasked_opts_value' of type 'unsigned int' can be declared 'const' [misc-const-correctness]\n\n```suggestion\n        unsigned const bitmasked_opts_value = FD->getTemplateSpecializationArgs()\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 10, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1260963923, 'comment_body': ""warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]\n\n```suggestion\n        if ((bitmasked_opts_value & clad::opts::use_enzyme) != 0u) {\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 10, 26, 10, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1260970323, 'comment_body': 'Can we hide the bit operation behind an interface. Eg something like HasOption or IsEnabled‚Ä¶', 'comment_created': datetime.datetime(2023, 7, 12, 10, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1261567433, 'comment_body': 'added the option and corresponding helper in `CladConfig.h` so that it can be accessed from `Differentiator.h` as well as other files.', 'comment_created': datetime.datetime(2023, 7, 12, 18, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1261585339, 'comment_body': '```suggestion\r\n        if (clad::HasOption(bitmasked_opts_value, clad::opts::use_enzyme))\r\n          request.use_enzyme = true;\r\n```\r\n\r\nI believe we could configure clang-format or clang-tidy to find these.', 'comment_created': datetime.datetime(2023, 7, 12, 18, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1261587179, 'comment_body': ""That's a bit annoying. I am not sure if we could elide this if we provide something like: `clad::opts::default` as a default argument to `differentiate`..."", 'comment_created': datetime.datetime(2023, 7, 12, 18, 36, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1261589080, 'comment_body': ""warning: invalid case style for function 'HasOption' [readability-identifier-naming]\n\n```suggestion\nconstexpr bool hasOption(const unsigned bitmasked_opts, const unsigned opt) {\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 28, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261589085, 'comment_body': ""warning: invalid case style for parameter 'bitmasked_opts' [readability-identifier-naming]\n\n```suggestion\nconstexpr bool HasOption(const unsigned BitmaskedOpts, const unsigned opt) {\n  return (BitmaskedOpts & opt) == opt;\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261589088, 'comment_body': ""warning: invalid case style for parameter 'opt' [readability-identifier-naming]\n\n```suggestion\nconstexpr bool HasOption(const unsigned bitmasked_opts, const unsigned Opt) {\n  return (bitmasked_opts & Opt) == Opt;\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261589091, 'comment_body': 'warning: invalid case style for parameter \'fn\' [readability-identifier-naming]\n\n```suggestion\n  differentiate(F Fn, ArgSpec args = """",\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261589097, 'comment_body': 'warning: invalid case style for parameter \'args\' [readability-identifier-naming]\n\n```suggestion\n  differentiate(F fn, ArgSpec Args = """",\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 29, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261589100, 'comment_body': ""warning: invalid case style for parameter 'derivedFn' [readability-identifier-naming]\n\n```suggestion\n                DerivedFnType DerivedFn = static_cast<DerivedFnType>(nullptr),\n```\n\ninclude/clad/Differentiator/Differentiator.h:343:\n```diff\n-           derivedFn, code);\n+           DerivedFn, code);\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261589105, 'comment_body': 'warning: invalid case style for parameter \'code\' [readability-identifier-naming]\n\n```suggestion\n                const char* Code = """") {\n```\n\ninclude/clad/Differentiator/Differentiator.h:343:\n```diff\n-           derivedFn, code);\n+           derivedFn, Code);\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261589110, 'comment_body': ""warning: invalid case style for variable 'derivativeOrder' [readability-identifier-naming]\n\n```suggestion\n        unsigned const DerivativeOrder = FD->getTemplateSpecializationArgs()\n```\n\nlib/Differentiator/DiffPlanner.cpp:554:\n```diff\n-         request.RequestedDerivativeOrder = derivativeOrder;\n+         request.RequestedDerivativeOrder = DerivativeOrder;\n```\n\nlib/Differentiator/DiffPlanner.cpp:568:\n```diff\n-           if (derivativeOrder != 1) {\n+           if (DerivativeOrder != 1) {\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261589114, 'comment_body': ""warning: invalid case style for variable 'bitmasked_opts_value' [readability-identifier-naming]\n\n```suggestion\n        unsigned const BitmaskedOptsValue =\n```\n\nlib/Differentiator/DiffPlanner.cpp:561:\n```diff\n-         if (clad::HasOption(bitmasked_opts_value, clad::opts::use_enzyme)) {\n+         if (clad::HasOption(BitmaskedOptsValue, clad::opts::use_enzyme)) {\n```\n\nlib/Differentiator/DiffPlanner.cpp:564:\n```diff\n-         if (clad::HasOption(bitmasked_opts_value, clad::opts::vector_mode)) {\n+         if (clad::HasOption(BitmaskedOptsValue, clad::opts::vector_mode)) {\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 30, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261589117, 'comment_body': ""warning: invalid case style for variable 'bitmasked_opts_value' [readability-identifier-naming]\n\n```suggestion\n        unsigned const BitmaskedOptsValue =\n```\n\nlib/Differentiator/DiffPlanner.cpp:593:\n```diff\n-         if (clad::HasOption(bitmasked_opts_value, clad::opts::use_enzyme)) {\n+         if (clad::HasOption(BitmaskedOptsValue, clad::opts::use_enzyme)) {\n```\n\nlib/Differentiator/DiffPlanner.cpp:597:\n```diff\n-         if (clad::HasOption(bitmasked_opts_value, clad::opts::vector_mode)) {\n+         if (clad::HasOption(BitmaskedOptsValue, clad::opts::vector_mode)) {\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 18, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261617387, 'comment_body': 'clang tidy changes should not be part of this pull request.', 'comment_created': datetime.datetime(2023, 7, 12, 19, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1261618865, 'comment_body': 'warning: use a trailing return type for this function [modernize-use-trailing-return-type]\n\n```suggestion\nconstexpr auto HasOption(const unsigned bitmasked_opts, const unsigned opt) -> bool {\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 19, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261618867, 'comment_body': 'warning: use a trailing return type for this function [modernize-use-trailing-return-type]\n\ninclude/clad/Differentiator/Differentiator.h:336:\n```diff\n-   CladFunction<DerivedFnType, ExtractFunctorTraits_t<F>, true> __attribute__((\n+   auto __attribute__((\n```\n\ninclude/clad/Differentiator/Differentiator.h:340:\n```diff\n-                 const char* code = """") {\n+                 const char* code = """") -> CladFunction<DerivedFnType, ExtractFunctorTraits_t<F>, true> {\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 19, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261618870, 'comment_body': ""warning: invalid case style for parameter 'derivedFn' [readability-identifier-naming]\n\n```suggestion\n                DerivedFnType derived_fn = static_cast<DerivedFnType>(nullptr),\n```\n\ninclude/clad/Differentiator/Differentiator.h:343:\n```diff\n-           derivedFn, code);\n+           derived_fn, code);\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 19, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261618875, 'comment_body': ""warning: invalid case style for variable 'derivativeOrder' [readability-identifier-naming]\n\n```suggestion\n        unsigned const derivative_order = FD->getTemplateSpecializationArgs()\n```\n\nlib/Differentiator/DiffPlanner.cpp:554:\n```diff\n-         request.RequestedDerivativeOrder = derivativeOrder;\n+         request.RequestedDerivativeOrder = derivative_order;\n```\n\nlib/Differentiator/DiffPlanner.cpp:568:\n```diff\n-           if (derivativeOrder != 1) {\n+           if (derivative_order != 1) {\n```\n"", 'comment_created': datetime.datetime(2023, 7, 12, 19, 11, 7, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1261623702, 'comment_body': 'yeah, running those to get an idea of what constraints to add in clang tidy, will remove once this is finalised: https://github.com/vgvassilev/clad/pull/584/files', 'comment_created': datetime.datetime(2023, 7, 12, 19, 14, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1261625179, 'comment_body': ""Let's disable this one... we are not that modern :)"", 'comment_created': datetime.datetime(2023, 7, 12, 19, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1261627191, 'comment_body': ""Nope, I'd be in favor of CamelCase..."", 'comment_created': datetime.datetime(2023, 7, 12, 19, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1261644909, 'comment_body': 'removed üëçüèº ', 'comment_created': datetime.datetime(2023, 7, 12, 19, 35, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1261645880, 'comment_body': 'kept this as `aNy_Case` because there can be cases like taking function declaration as a parameter, which is many times `FD` or `F`. SImilarly for variable declaration identifiers.', 'comment_created': datetime.datetime(2023, 7, 12, 19, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1261651950, 'comment_body': 'Oh, okay. Sounds good.', 'comment_created': datetime.datetime(2023, 7, 12, 19, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1261652148, 'comment_body': ""`differentiate` has template `<unsigned N=1, unsigned BItMaskedOpts = 0 ....>`, if we want to give non-default value to the second template parameter. I don't see any other way without providing value to the first template parameter.\r\nI think C++-20 allows providing named values to template params, for ex.: `BitMaskedOpts = clad::opts::use_enzyme` but that can be added in the long future. "", 'comment_created': datetime.datetime(2023, 7, 12, 19, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1261654409, 'comment_body': ""Yes it is slightly annoying, but I don't think we can get away with this if we want to use the same interface, `clad::differentiate`, for both vector and non-vector forward mode."", 'comment_created': datetime.datetime(2023, 7, 12, 19, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1262118456, 'comment_body': ""Can we somehow mangle the value in the options? Like using the first 3 bits to store the value derivative order.. I don't expect a value greater than 3 to be honest.."", 'comment_created': datetime.datetime(2023, 7, 13, 7, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1262237697, 'comment_body': 'That is a good idea. Will try to make this work and simplify the interface. ', 'comment_created': datetime.datetime(2023, 7, 13, 8, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1263859295, 'comment_body': 'added the derivative order in the bitmask options üëçüèº ', 'comment_created': datetime.datetime(2023, 7, 14, 15, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1263861416, 'comment_body': ""warning: implicit conversion 'const clang::AnnotateAttr *' -> bool [readability-implicit-bool-conversion]\n\n```suggestion\n    if ((A != nullptr) &&\n```\n"", 'comment_created': datetime.datetime(2023, 7, 14, 15, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1263861420, 'comment_body': ""warning: implicit conversion 'clang::DeclRefExpr *' -> bool [readability-implicit-bool-conversion]\n\n```suggestion\n      if (DRE == nullptr)\n```\n"", 'comment_created': datetime.datetime(2023, 7, 14, 15, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1263863155, 'comment_body': 'Should we suppress this type of warning in clang-tidy?', 'comment_created': datetime.datetime(2023, 7, 14, 15, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1263863253, 'comment_body': 'same here?', 'comment_created': datetime.datetime(2023, 7, 14, 15, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1263978633, 'comment_body': 'Yes, there seems to be a way to ignore pointer conversions only?', 'comment_created': datetime.datetime(2023, 7, 14, 17, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1264036163, 'comment_body': ""~I don't think so, couldn't find anything here: https://clang.llvm.org/extra/clang-tidy/checks/list.html~\r\nIt does have a `AllowPointerConditions` option, let me try with that"", 'comment_created': datetime.datetime(2023, 7, 14, 18, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1264051981, 'comment_body': 'yup, it worked üëçüèº ', 'comment_created': datetime.datetime(2023, 7, 14, 18, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1264090800, 'comment_body': 'Why the double comments here?', 'comment_created': datetime.datetime(2023, 7, 14, 19, 42, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1264100944, 'comment_body': 'my bad, I was testing something earlier', 'comment_created': datetime.datetime(2023, 7, 14, 19, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1264325904, 'comment_body': 'Minor: this can be constexpr too.', 'comment_created': datetime.datetime(2023, 7, 15, 4, 51, 6, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1264326112, 'comment_body': 'Why do we need this overload?', 'comment_created': datetime.datetime(2023, 7, 15, 4, 52, 48, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1264341974, 'comment_body': 'This is needed because we unfold this recursively at compile time, as defined in the function below it:\r\n```cpp\r\ntemplate <typename... Opts>\r\nconstexpr unsigned GetBitmaskedOpts(unsigned const first, Opts... opts) {\r\n  return first | GetBitmaskedOpts(opts...);\r\n}\r\n```\r\nUseful for cases where user calls differentiate with comma-separated options as: \r\n`clad::differentiate(2, clad::opts::use_enzyme, clad::opts::vector_mode)`', 'comment_created': datetime.datetime(2023, 7, 15, 6, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1264381142, 'comment_body': 'I am wondering if we can provide some enum for these magic numbers like `1, 2 ...` to make the code more readable... Maybe up to 3rd order should be reasonable..', 'comment_created': datetime.datetime(2023, 7, 15, 10, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1264612375, 'comment_body': ""I think it won't be a good experience while using this function because it introduces too many characters into the interface, like `clad::differentiate<clad::opts::order_2>`.  \r\n\r\nWhereas, `clad::differentiate<2>` can simply be read as differentiate 2 times."", 'comment_created': datetime.datetime(2023, 7, 16, 5, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1264622901, 'comment_body': 'People would be still able to write it that assuming we get the enum values right. ', 'comment_created': datetime.datetime(2023, 7, 16, 7, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1264636781, 'comment_body': 'Sounds good then, I will add the enums, any preferences for the naming? Or, does `clad::opts::order_1/2/3` work?', 'comment_created': datetime.datetime(2023, 7, 16, 8, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1264638021, 'comment_body': 'Maybe: `clad::opts::order::{first, second, third}`?\r\n\r\nI realize as part of this PR we should update the documentation to show the new functionality...', 'comment_created': datetime.datetime(2023, 7, 16, 8, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1264640082, 'comment_body': 'Sure, will add it üëçüèº ', 'comment_created': datetime.datetime(2023, 7, 16, 8, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1264716709, 'comment_body': ""Let's change the identifier here instead of `foo` to something else. Eg. `sq_array`?"", 'comment_created': datetime.datetime(2023, 7, 16, 17, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1264716741, 'comment_body': 'Can you configure your editor to break at 80 columns and trim trailing whitespace?', 'comment_created': datetime.datetime(2023, 7, 16, 17, 12, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': '251b9f7c45e5cbb413e007a2ded063fc523c2760', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39908f7f3cd15b33a2a246181f84275c86cd3123', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1b410a961fee7c1526e2f30b56af692d9b48732', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c377536c9824a01d8b5290212573a543aae92c42', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}]",Vaibhav Thakkar,19686718,vaibhav.thakkar.22.12.99@gmail.com,User,,55,,24,83
1451391934,Fix LLVM assertion errors for vector mode,took me a reasonable amount of time to figure out that vector mode also requires creating an overloaded function similar to gradient computation.,True,607,https://api.github.com/repos/vgvassilev/clad/pulls/607,https://github.com/vgvassilev/clad/pull/607,closed,284,69,9,2,2,13,0,0,[],2023-07-27 06:12:53+00:00,2023-07-31 01:07:46+00:00,327293.0,"3 days, 18:54:53","[{'comment_id': 1276619886, 'comment_body': '`clad::one_hot_vector` and `clad::zero_vector` is a great addition. They have made the code\r\nmuch more readable.', 'comment_created': datetime.datetime(2023, 7, 27, 17, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1276654349, 'comment_body': 'What does `one_hot` mean?', 'comment_created': datetime.datetime(2023, 7, 27, 18, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1276685109, 'comment_body': 'added a comment for this üëçüèº ', 'comment_created': datetime.datetime(2023, 7, 27, 18, 37, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1276700801, 'comment_body': 'Why do we name it as a ""hot"" array?', 'comment_created': datetime.datetime(2023, 7, 27, 18, 54, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1276701947, 'comment_body': 'Can you configure your editor to not trim trailing whitespace and revert these changes?', 'comment_created': datetime.datetime(2023, 7, 27, 18, 55, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1276704028, 'comment_body': 'This is a standard term: https://en.wikipedia.org/wiki/One-hot', 'comment_created': datetime.datetime(2023, 7, 27, 18, 58, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1276757649, 'comment_body': ""reverted space changes from this file, a couple of minor changes remain in other files but I guess that shouldn't be an issue."", 'comment_created': datetime.datetime(2023, 7, 27, 19, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1276787142, 'comment_body': 'Ha, ok. There is always something new that I learn every day.', 'comment_created': datetime.datetime(2023, 7, 27, 20, 27, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1276789468, 'comment_body': 'We should probably extract these into some sort of a RAII object as it seems to be a common pattern throughout the code base. Perhaps we could do it in a separate PR.', 'comment_created': datetime.datetime(2023, 7, 27, 20, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1276790554, 'comment_body': 'We should probably add an example to clarify what we mean here.', 'comment_created': datetime.datetime(2023, 7, 27, 20, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1276791423, 'comment_body': ""```suggestion\r\n                                         const CXXScopeSpec* SS/*=nullptr*/) {\r\n```\r\n\r\nThat's something useful we have been doing in the codebase. I thought clang-tidy would suggest it.."", 'comment_created': datetime.datetime(2023, 7, 27, 20, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1276791871, 'comment_body': ""```suggestion\r\n    // FIXME: currently this doesn't print func<templates>(args...) while dumping\r\n```"", 'comment_created': datetime.datetime(2023, 7, 27, 20, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1277132442, 'comment_body': 'added example üëçüèº ', 'comment_created': datetime.datetime(2023, 7, 28, 6, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}]","[{'commit_sha': '35dc01126c0c3b06c689f185bffa9fc18500d116', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39814427d743646ab43cf1fa34dda63cef472e75', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}]",Vaibhav Thakkar,19686718,vaibhav.thakkar.22.12.99@gmail.com,User,,55,,24,83
1456178781,Add matrix class in clad,This class will be used for adding support for arrays in vector mode.,True,609,https://api.github.com/repos/vgvassilev/clad/pulls/609,https://github.com/vgvassilev/clad/pull/609,closed,725,94,7,3,11,23,0,0,[],2023-07-31 12:42:46+00:00,2023-08-04 13:00:50+00:00,346684.0,"4 days, 0:18:04","[{'comment_id': 1279280353, 'comment_body': 'I could not find where we use this branch and if we test it.', 'comment_created': datetime.datetime(2023, 7, 31, 13, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1279747706, 'comment_body': 'Added more tests in `Misc/CladArray.c` üëçüèº ', 'comment_created': datetime.datetime(2023, 7, 31, 18, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1279757703, 'comment_body': 'We should add `noexcept` to move constructor and move assign operator.', 'comment_created': datetime.datetime(2023, 7, 31, 19, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 1279771788, 'comment_body': 'added üëçüèº ', 'comment_created': datetime.datetime(2023, 7, 31, 19, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1280614883, 'comment_body': 'We probably want to run to something that is less (eg 256) since we are using this as part of the CI.', 'comment_created': datetime.datetime(2023, 8, 1, 13, 7, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1280616100, 'comment_body': 'I am wondering why clang-tidy did not detect this const-correctness issue...', 'comment_created': datetime.datetime(2023, 8, 1, 13, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1280619382, 'comment_body': 'Can you use doxygen-style comments (///) to appear in our documentation?', 'comment_created': datetime.datetime(2023, 8, 1, 13, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1280730354, 'comment_body': 'This function was added before the clang-tidy check was added to PR actions.\r\n\r\nAlso, the clang-tidy action that adds PR comments failed earlier; I added a fix for that here: https://github.com/vgvassilev/clad/pull/611.\r\nI will rebase this PR once that is merged, I need to discuss if we can ignore a couple of warnings from clang-tidy on this PR/', 'comment_created': datetime.datetime(2023, 8, 1, 14, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1281061175, 'comment_body': 'Marked whole clad array class for `NOLINT` üëçüèº ', 'comment_created': datetime.datetime(2023, 8, 1, 19, 27, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1281061404, 'comment_body': 'warning: header guard does not follow preferred style [llvm-header-guard]\n\n```suggestion\n#ifndef CLAD_DIFFERENTIATOR_MATRIX_H\n#define CLAD_DIFFERENTIATOR_MATRIX_H\n```\n\ninclude/clad/Differentiator/Matrix.h:280:\n```diff\n- #endif // CLAD_MATRIX_H\n+ #endif // CLAD_DIFFERENTIATOR_MATRIX_H\n```\n', 'comment_created': datetime.datetime(2023, 8, 1, 19, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1281061414, 'comment_body': ""warning: return type 'const clad::array<T>' is 'const'-qualified at the top level, which may reduce code readability without improving const correctness [readability-const-return-type]\n\n```suggestion\n  CUDA_HOST_DEVICE clad::array<T> operator[](size_t row_idx) const {\n```\n"", 'comment_created': datetime.datetime(2023, 8, 1, 19, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1281062971, 'comment_body': 'should we change this?', 'comment_created': datetime.datetime(2023, 8, 1, 19, 29, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1281071236, 'comment_body': 'should I change the function to return const reference instead?', 'comment_created': datetime.datetime(2023, 8, 1, 19, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1281092790, 'comment_body': 'That would make sense to me. ', 'comment_created': datetime.datetime(2023, 8, 1, 19, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1281093239, 'comment_body': 'Probably that‚Äôs a good idea‚Ä¶', 'comment_created': datetime.datetime(2023, 8, 1, 19, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1281679577, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n        m_arr[i] /= A[i];\n        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 2, 9, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1281679583, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n        m_arr[i] *= A[i];\n        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 2, 9, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1281679587, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n        m_arr[i] += A[i];\n        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 2, 9, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1281679592, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n        m_arr[i] -= A[i];\n        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 2, 9, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1281679594, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n        m_arr[i] /= a;\n        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 2, 9, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1281679596, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n        m_arr[i] *= a;\n        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 2, 9, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1281679600, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n        m_arr[i] += a;\n        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 2, 9, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1281679603, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n        m_arr[i] -= a;\n        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 2, 9, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}]","[{'commit_sha': '631a622e4ad732a9f801551a2c2173e302faff27', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ea339f04b2a830b023b4d5a28d1b48195eceddb', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8e7b4e77f4568a34cf8ec5c086ea261c96476ac', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}]",Vaibhav Thakkar,19686718,vaibhav.thakkar.22.12.99@gmail.com,User,,55,,24,83
1464101937,Add support for array arguments in vector mode,,True,614,https://api.github.com/repos/vgvassilev/clad/pulls/614,https://github.com/vgvassilev/clad/pull/614,closed,709,141,17,4,1,19,0,0,[],2023-08-06 09:56:54+00:00,2023-08-09 12:03:20+00:00,266786.0,"3 days, 2:06:26","[{'comment_id': 1285189304, 'comment_body': ""warning: pointer parameter 'arr' can be pointer to const [readability-non-const-parameter]\n\n```suggestion\ndouble weighted_sum(const double* arr, double* weights, int n) {\n```\n"", 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285189305, 'comment_body': ""warning: pointer parameter 'weights' can be pointer to const [readability-non-const-parameter]\n\n```suggestion\ndouble weighted_sum(double* arr, const double* weights, int n) {\n```\n"", 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285189306, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n    res += weights[i] * arr[i];\n           ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 21, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285189307, 'comment_body': 'warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]\n```cpp\n    res += weights[i] * arr[i];\n                        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285189310, 'comment_body': 'warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]\n```cpp\n  double arr[3] = {3.0, 4.0, 5.0};\n  ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285189311, 'comment_body': 'warning: 3.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]\n```cpp\n  double arr[3] = {3.0, 4.0, 5.0};\n                   ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285189312, 'comment_body': 'warning: 4.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]\n```cpp\n  double arr[3] = {3.0, 4.0, 5.0};\n                        ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285189313, 'comment_body': 'warning: 5.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]\n```cpp\n  double arr[3] = {3.0, 4.0, 5.0};\n                             ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285189314, 'comment_body': 'warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays]\n```cpp\n  double weights[3] = {0.5, 0.7, 0.9};\n  ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285189315, 'comment_body': 'warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers]\n```cpp\n  double weights[3] = {0.5, 0.7, 0.9};\n                       ^\n```\n', 'comment_created': datetime.datetime(2023, 8, 6, 10, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285192587, 'comment_body': 'Removed `demos` from clang-tidy.', 'comment_created': datetime.datetime(2023, 8, 6, 10, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1285194657, 'comment_body': ""warning: variable 'Result' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]\n```cpp\n    static TemplateDecl* Result = nullptr;\n                         ^\n```\n"", 'comment_created': datetime.datetime(2023, 8, 6, 10, 48, 27, tzinfo=datetime.timezone.utc), 'commenter': 'github-actions[bot]', 'type': 'Bot'}, {'comment_id': 1285876159, 'comment_body': 'We should omit the `{` and `}`. Did clang-format add them?', 'comment_created': datetime.datetime(2023, 8, 7, 13, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1285876619, 'comment_body': ""It seems we should fix clang-format's settings..."", 'comment_created': datetime.datetime(2023, 8, 7, 13, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1285877865, 'comment_body': 'I am not sure I understand that diagnostics. Does it mean to add a `const`?', 'comment_created': datetime.datetime(2023, 8, 7, 13, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1287504979, 'comment_body': 'added `RemoveBracesLLVM` flag in clang-format, but this is not very reliable as stated here: https://clang.llvm.org/docs/ClangFormatStyleOptions.html', 'comment_created': datetime.datetime(2023, 8, 8, 18, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1287505914, 'comment_body': ""Removed manually üëçüèº , clang-format wasn't able to fix this even after adding the `RemoveBracesLLVM` flag; maybe because it considers else if part as multi-line?"", 'comment_created': datetime.datetime(2023, 8, 8, 18, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}, {'comment_id': 1287512904, 'comment_body': ""Probably. It's just a lexer in the end."", 'comment_created': datetime.datetime(2023, 8, 8, 18, 37, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 1287519322, 'comment_body': ""Not sure about this, I don't get it either."", 'comment_created': datetime.datetime(2023, 8, 8, 18, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vaithak', 'type': 'User'}]","[{'commit_sha': 'e685e2bf477bb7eff87c1480046e1a32d37adfab', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a07e47a5be46786436ab010e0059c470da238333', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56fe2aea08dd8f69f1f7f9b058408638729624e9', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c921c07df297f967007832a7a9c966f621974cf8', 'committer_username': 'vaithak', 'committer_name': 'Vaibhav Thakkar', 'committer_email': 'vaibhav.thakkar.22.12.99@gmail.com', 'commit_date': datetime.datetime(2016, 6, 1, 11, 36, 6, tzinfo=datetime.timezone.utc)}]",Vaibhav Thakkar,19686718,vaibhav.thakkar.22.12.99@gmail.com,User,,55,,24,83

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
17050358,clad,vgvassilev/clad,C++,116,276,18,49,1177,162,10,29,"[{'id': 1983486473, 'number': 1002, 'closed': None, 'created': datetime.datetime(2024, 7, 23, 14, 32, 59, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 316, 'deletions': 0, 'state': 'open'}, {'id': 1981494388, 'number': 998, 'closed': None, 'created': datetime.datetime(2024, 7, 22, 15, 22, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 657, 'deletions': 648, 'state': 'open'}, {'id': 1977805064, 'number': 991, 'closed': datetime.datetime(2024, 7, 19, 11, 51, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 19, 11, 27, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1456.0, 'time_delta': '0:24:16', 'additions': 4, 'deletions': 11, 'state': 'closed'}, {'id': 1975215445, 'number': 986, 'closed': datetime.datetime(2024, 7, 18, 12, 15, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 18, 6, 24, 35, tzinfo=datetime.timezone.utc), 'time_taken': 21045.0, 'time_delta': '5:50:45', 'additions': 139, 'deletions': 44, 'state': 'closed'}, {'id': 1971604514, 'number': 982, 'closed': datetime.datetime(2024, 7, 16, 14, 39, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 16, 13, 41, 23, tzinfo=datetime.timezone.utc), 'time_taken': 3513.0, 'time_delta': '0:58:33', 'additions': 30, 'deletions': 8, 'state': 'closed'}, {'id': 1960279565, 'number': 975, 'closed': datetime.datetime(2024, 7, 11, 8, 45, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 7, 9, 14, 16, 14, tzinfo=datetime.timezone.utc), 'time_taken': 152960.0, 'time_delta': '1 day, 18:29:20', 'additions': 27, 'deletions': 5, 'state': 'closed'}, {'id': 1945591601, 'number': 962, 'closed': datetime.datetime(2024, 6, 29, 17, 24, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 29, 16, 16, 53, tzinfo=datetime.timezone.utc), 'time_taken': 4066.0, 'time_delta': '1:07:46', 'additions': 48, 'deletions': 0, 'state': 'closed'}, {'id': 1926509831, 'number': 950, 'closed': datetime.datetime(2024, 6, 22, 18, 24, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 18, 13, 28, 26, tzinfo=datetime.timezone.utc), 'time_taken': 363375.0, 'time_delta': '4 days, 4:56:15', 'additions': 222, 'deletions': 51, 'state': 'closed'}, {'id': 1922292010, 'number': 942, 'closed': datetime.datetime(2024, 6, 15, 20, 1, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 15, 19, 6, 3, tzinfo=datetime.timezone.utc), 'time_taken': 3325.0, 'time_delta': '0:55:25', 'additions': 1, 'deletions': 5, 'state': 'closed'}, {'id': 1914111885, 'number': 934, 'closed': datetime.datetime(2024, 6, 15, 18, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 11, 10, 10, 39, tzinfo=datetime.timezone.utc), 'time_taken': 375861.0, 'time_delta': '4 days, 8:24:21', 'additions': 468, 'deletions': 168, 'state': 'closed'}, {'id': 1911614180, 'number': 931, 'closed': datetime.datetime(2024, 6, 10, 12, 30, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 10, 8, 27, 49, tzinfo=datetime.timezone.utc), 'time_taken': 14588.0, 'time_delta': '4:03:08', 'additions': 58, 'deletions': 59, 'state': 'closed'}, {'id': 1909095266, 'number': 926, 'closed': datetime.datetime(2024, 6, 7, 18, 32, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 7, 12, 14, 1, tzinfo=datetime.timezone.utc), 'time_taken': 22685.0, 'time_delta': '6:18:05', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1902962379, 'number': 919, 'closed': datetime.datetime(2024, 6, 6, 4, 45, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 4, 13, 7, 45, tzinfo=datetime.timezone.utc), 'time_taken': 142672.0, 'time_delta': '1 day, 15:37:52', 'additions': 79, 'deletions': 28, 'state': 'closed'}, {'id': 1897844435, 'number': 918, 'closed': datetime.datetime(2024, 6, 2, 16, 0, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 31, 12, 16, 52, tzinfo=datetime.timezone.utc), 'time_taken': 186231.0, 'time_delta': '2 days, 3:43:51', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1890471102, 'number': 910, 'closed': datetime.datetime(2024, 5, 28, 13, 58, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 27, 16, 11, 29, tzinfo=datetime.timezone.utc), 'time_taken': 78424.0, 'time_delta': '21:47:04', 'additions': 16, 'deletions': 0, 'state': 'closed'}, {'id': 1881193390, 'number': 902, 'closed': datetime.datetime(2024, 5, 22, 4, 40, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 21, 21, 12, 5, tzinfo=datetime.timezone.utc), 'time_taken': 26881.0, 'time_delta': '7:28:01', 'additions': 26, 'deletions': 9, 'state': 'closed'}, {'id': 1876322931, 'number': 897, 'closed': datetime.datetime(2024, 5, 20, 16, 41, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 17, 21, 14, 25, tzinfo=datetime.timezone.utc), 'time_taken': 242851.0, 'time_delta': '2 days, 19:27:31', 'additions': 146, 'deletions': 14, 'state': 'closed'}, {'id': 1859896793, 'number': 887, 'closed': datetime.datetime(2024, 5, 8, 17, 1, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 8, 9, 51, 9, tzinfo=datetime.timezone.utc), 'time_taken': 25838.0, 'time_delta': '7:10:38', 'additions': 37, 'deletions': 20, 'state': 'closed'}, {'id': 1843148059, 'number': 873, 'closed': datetime.datetime(2024, 5, 3, 15, 24, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 26, 16, 16, 13, tzinfo=datetime.timezone.utc), 'time_taken': 601685.0, 'time_delta': '6 days, 23:08:05', 'additions': 480, 'deletions': 151, 'state': 'closed'}, {'id': 1840093788, 'number': 868, 'closed': datetime.datetime(2024, 4, 25, 13, 24, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 25, 5, 29, 30, tzinfo=datetime.timezone.utc), 'time_taken': 28478.0, 'time_delta': '7:54:38', 'additions': 262, 'deletions': 209, 'state': 'closed'}, {'id': 1820721595, 'number': 861, 'closed': datetime.datetime(2024, 4, 15, 15, 21, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 12, 18, 58, 34, tzinfo=datetime.timezone.utc), 'time_taken': 246187.0, 'time_delta': '2 days, 20:23:07', 'additions': 127, 'deletions': 36, 'state': 'closed'}, {'id': 1816747595, 'number': 856, 'closed': datetime.datetime(2024, 4, 11, 13, 50, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 10, 20, 7, 59, tzinfo=datetime.timezone.utc), 'time_taken': 63725.0, 'time_delta': '17:42:05', 'additions': 7, 'deletions': 11, 'state': 'closed'}, {'id': 1800343825, 'number': 848, 'closed': datetime.datetime(2024, 4, 12, 14, 44, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 1, 11, 54, 49, tzinfo=datetime.timezone.utc), 'time_taken': 960562.0, 'time_delta': '11 days, 2:49:22', 'additions': 2184, 'deletions': 1698, 'state': 'closed'}, {'id': 1777365670, 'number': 827, 'closed': datetime.datetime(2024, 3, 18, 14, 30, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 18, 13, 12, 14, tzinfo=datetime.timezone.utc), 'time_taken': 4694.0, 'time_delta': '1:18:14', 'additions': 1, 'deletions': 5, 'state': 'closed'}, {'id': 1763752385, 'number': 809, 'closed': datetime.datetime(2024, 3, 10, 15, 49, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 8, 22, 45, 6, tzinfo=datetime.timezone.utc), 'time_taken': 147886.0, 'time_delta': '1 day, 17:04:46', 'additions': 46, 'deletions': 0, 'state': 'closed'}, {'id': 1763133757, 'number': 808, 'closed': datetime.datetime(2024, 3, 13, 12, 13, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 8, 14, 54, 24, tzinfo=datetime.timezone.utc), 'time_taken': 422344.0, 'time_delta': '4 days, 21:19:04', 'additions': 142, 'deletions': 85, 'state': 'closed'}, {'id': 1756063016, 'number': 799, 'closed': datetime.datetime(2024, 3, 5, 5, 44, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 5, 5, 26, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1106.0, 'time_delta': '0:18:26', 'additions': 33, 'deletions': 0, 'state': 'closed'}, {'id': 1755004497, 'number': 797, 'closed': datetime.datetime(2024, 3, 5, 9, 7, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 3, 4, 15, 41, 24, tzinfo=datetime.timezone.utc), 'time_taken': 62754.0, 'time_delta': '17:25:54', 'additions': 28, 'deletions': 80, 'state': 'closed'}, {'id': 1740457829, 'number': 784, 'closed': datetime.datetime(2024, 2, 23, 12, 1, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 23, 10, 19, 28, tzinfo=datetime.timezone.utc), 'time_taken': 6149.0, 'time_delta': '1:42:29', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1733016931, 'number': 777, 'closed': datetime.datetime(2024, 2, 29, 16, 43, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 19, 14, 33, 17, tzinfo=datetime.timezone.utc), 'time_taken': 871786.0, 'time_delta': '10 days, 2:09:46', 'additions': 540, 'deletions': 5, 'state': 'closed'}, {'id': 1728139819, 'number': 764, 'closed': datetime.datetime(2024, 2, 15, 20, 32, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 15, 17, 18, 24, tzinfo=datetime.timezone.utc), 'time_taken': 11670.0, 'time_delta': '3:14:30', 'additions': 66, 'deletions': 2, 'state': 'closed'}, {'id': 1727329492, 'number': 763, 'closed': datetime.datetime(2024, 2, 15, 11, 44, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 15, 10, 31, 23, tzinfo=datetime.timezone.utc), 'time_taken': 4411.0, 'time_delta': '1:13:31', 'additions': 74, 'deletions': 14, 'state': 'closed'}, {'id': 1715326838, 'number': 749, 'closed': datetime.datetime(2024, 2, 11, 18, 32, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 7, 10, 2, 7, tzinfo=datetime.timezone.utc), 'time_taken': 376238.0, 'time_delta': '4 days, 8:30:38', 'additions': 124, 'deletions': 40, 'state': 'closed'}, {'id': 1709847375, 'number': 747, 'closed': datetime.datetime(2024, 2, 3, 15, 56, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 3, 12, 48, 38, tzinfo=datetime.timezone.utc), 'time_taken': 11289.0, 'time_delta': '3:08:09', 'additions': 2, 'deletions': 14, 'state': 'closed'}, {'id': 1690311571, 'number': 733, 'closed': datetime.datetime(2024, 1, 25, 16, 38, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 22, 17, 58, 7, tzinfo=datetime.timezone.utc), 'time_taken': 254402.0, 'time_delta': '2 days, 22:40:02', 'additions': 111, 'deletions': 101, 'state': 'closed'}, {'id': 1686499562, 'number': 719, 'closed': datetime.datetime(2024, 1, 19, 11, 41, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 19, 9, 46, 28, tzinfo=datetime.timezone.utc), 'time_taken': 6887.0, 'time_delta': '1:54:47', 'additions': 58, 'deletions': 22, 'state': 'closed'}, {'id': 1685032558, 'number': 718, 'closed': datetime.datetime(2024, 1, 18, 16, 43, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 18, 15, 8, 42, tzinfo=datetime.timezone.utc), 'time_taken': 5667.0, 'time_delta': '1:34:27', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 1684487897, 'number': 713, 'closed': datetime.datetime(2024, 1, 18, 14, 49, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 18, 9, 35, 3, tzinfo=datetime.timezone.utc), 'time_taken': 18860.0, 'time_delta': '5:14:20', 'additions': 119, 'deletions': 119, 'state': 'closed'}, {'id': 1679381475, 'number': 709, 'closed': datetime.datetime(2024, 1, 16, 9, 55, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 15, 14, 41, 42, tzinfo=datetime.timezone.utc), 'time_taken': 69220.0, 'time_delta': '19:13:40', 'additions': 65, 'deletions': 5, 'state': 'closed'}, {'id': 1674995750, 'number': 707, 'closed': datetime.datetime(2024, 1, 11, 18, 58, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 11, 17, 15, 7, tzinfo=datetime.timezone.utc), 'time_taken': 6205.0, 'time_delta': '1:43:25', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 1663289437, 'number': 695, 'closed': datetime.datetime(2024, 1, 3, 13, 51, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 3, 13, 38, 33, tzinfo=datetime.timezone.utc), 'time_taken': 801.0, 'time_delta': '0:13:21', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1650876748, 'number': 686, 'closed': datetime.datetime(2023, 12, 30, 14, 15, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 19, 18, 22, 30, tzinfo=datetime.timezone.utc), 'time_taken': 935565.0, 'time_delta': '10 days, 19:52:45', 'additions': 598, 'deletions': 99, 'state': 'closed'}, {'id': 1628929972, 'number': 670, 'closed': datetime.datetime(2023, 12, 4, 19, 34, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 4, 19, 23, tzinfo=datetime.timezone.utc), 'time_taken': 696.0, 'time_delta': '0:11:36', 'additions': 147, 'deletions': 28, 'state': 'closed'}, {'id': 1616664040, 'number': 661, 'closed': datetime.datetime(2023, 11, 26, 19, 34, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 25, 17, 56, 34, tzinfo=datetime.timezone.utc), 'time_taken': 92281.0, 'time_delta': '1 day, 1:38:01', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 1612526383, 'number': 656, 'closed': datetime.datetime(2023, 11, 22, 16, 9, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 22, 10, 28, 6, tzinfo=datetime.timezone.utc), 'time_taken': 20458.0, 'time_delta': '5:40:58', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1577918545, 'number': 649, 'closed': datetime.datetime(2023, 10, 29, 17, 26, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 29, 16, 34, 22, tzinfo=datetime.timezone.utc), 'time_taken': 3157.0, 'time_delta': '0:52:37', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 1574220115, 'number': 647, 'closed': datetime.datetime(2023, 10, 29, 15, 42, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 26, 7, 10, 44, tzinfo=datetime.timezone.utc), 'time_taken': 289886.0, 'time_delta': '3 days, 8:31:26', 'additions': 246, 'deletions': 11, 'state': 'closed'}, {'id': 1571742635, 'number': 645, 'closed': datetime.datetime(2023, 10, 25, 8, 48, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 24, 20, 57, 16, tzinfo=datetime.timezone.utc), 'time_taken': 42659.0, 'time_delta': '11:50:59', 'additions': 105, 'deletions': 7, 'state': 'closed'}, {'id': 1566284754, 'number': 644, 'closed': datetime.datetime(2023, 10, 20, 18, 23, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 20, 8, 48, 35, tzinfo=datetime.timezone.utc), 'time_taken': 34482.0, 'time_delta': '9:34:42', 'additions': 93, 'deletions': 22, 'state': 'closed'}, {'id': 1557138409, 'number': 640, 'closed': datetime.datetime(2023, 10, 14, 20, 57, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 14, 20, 25, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1918.0, 'time_delta': '0:31:58', 'additions': 82, 'deletions': 5, 'state': 'closed'}, {'id': 1546846225, 'number': 638, 'closed': datetime.datetime(2023, 12, 3, 6, 27, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 8, 17, 10, 6, tzinfo=datetime.timezone.utc), 'time_taken': 4799827.0, 'time_delta': '55 days, 13:17:07', 'additions': 548, 'deletions': 230, 'state': 'closed'}, {'id': 1539913550, 'number': 634, 'closed': datetime.datetime(2023, 10, 3, 18, 58, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 3, 12, 30, 38, tzinfo=datetime.timezone.utc), 'time_taken': 23250.0, 'time_delta': '6:27:30', 'additions': 237, 'deletions': 80, 'state': 'closed'}, {'id': 1537602728, 'number': 632, 'closed': datetime.datetime(2023, 10, 2, 9, 3, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 2, 8, 11, 29, tzinfo=datetime.timezone.utc), 'time_taken': 3138.0, 'time_delta': '0:52:18', 'additions': 15, 'deletions': 14, 'state': 'closed'}, {'id': 1524451498, 'number': 630, 'closed': datetime.datetime(2023, 9, 21, 9, 37, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 21, 9, 16, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1241.0, 'time_delta': '0:20:41', 'additions': 42, 'deletions': 3, 'state': 'closed'}, {'id': 1518863594, 'number': 628, 'closed': datetime.datetime(2023, 9, 26, 21, 29, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 18, 5, 54, 58, tzinfo=datetime.timezone.utc), 'time_taken': 747278.0, 'time_delta': '8 days, 15:34:38', 'additions': 288, 'deletions': 106, 'state': 'closed'}, {'id': 1513633646, 'number': 626, 'closed': datetime.datetime(2023, 9, 17, 6, 12, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 13, 10, 30, 9, tzinfo=datetime.timezone.utc), 'time_taken': 330125.0, 'time_delta': '3 days, 19:42:05', 'additions': 81, 'deletions': 26, 'state': 'closed'}, {'id': 1492314080, 'number': 623, 'closed': datetime.datetime(2023, 8, 30, 13, 6, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 28, 15, 47, 53, tzinfo=datetime.timezone.utc), 'time_taken': 163124.0, 'time_delta': '1 day, 21:18:44', 'additions': 131, 'deletions': 0, 'state': 'closed'}, {'id': 1488215089, 'number': 622, 'closed': datetime.datetime(2023, 8, 24, 16, 59, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 24, 14, 57, 52, tzinfo=datetime.timezone.utc), 'time_taken': 7314.0, 'time_delta': '2:01:54', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1486197463, 'number': 621, 'closed': datetime.datetime(2023, 8, 24, 6, 29, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 23, 10, 48, 26, tzinfo=datetime.timezone.utc), 'time_taken': 70876.0, 'time_delta': '19:41:16', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 1464101937, 'number': 614, 'closed': datetime.datetime(2023, 8, 9, 12, 3, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 6, 9, 56, 54, tzinfo=datetime.timezone.utc), 'time_taken': 266786.0, 'time_delta': '3 days, 2:06:26', 'additions': 709, 'deletions': 141, 'state': 'closed'}, {'id': 1458179385, 'number': 611, 'closed': datetime.datetime(2023, 8, 1, 19, 5, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 1, 14, 2, 57, tzinfo=datetime.timezone.utc), 'time_taken': 18155.0, 'time_delta': '5:02:35', 'additions': 51, 'deletions': 38, 'state': 'closed'}, {'id': 1456178781, 'number': 609, 'closed': datetime.datetime(2023, 8, 4, 13, 0, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 31, 12, 42, 46, tzinfo=datetime.timezone.utc), 'time_taken': 346684.0, 'time_delta': '4 days, 0:18:04', 'additions': 725, 'deletions': 94, 'state': 'closed'}, {'id': 1451391934, 'number': 607, 'closed': datetime.datetime(2023, 7, 31, 1, 7, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 6, 12, 53, tzinfo=datetime.timezone.utc), 'time_taken': 327293.0, 'time_delta': '3 days, 18:54:53', 'additions': 284, 'deletions': 69, 'state': 'closed'}, {'id': 1441744009, 'number': 600, 'closed': datetime.datetime(2023, 7, 19, 22, 43, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 21, 6, 48, tzinfo=datetime.timezone.utc), 'time_taken': 5791.0, 'time_delta': '1:36:31', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1441512772, 'number': 599, 'closed': datetime.datetime(2023, 7, 23, 11, 26, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 19, 18, 16, 4, tzinfo=datetime.timezone.utc), 'time_taken': 321047.0, 'time_delta': '3 days, 17:10:47', 'additions': 11, 'deletions': 9, 'state': 'closed'}, {'id': 1439118125, 'number': 598, 'closed': datetime.datetime(2023, 7, 18, 12, 31, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 18, 11, 59, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1953.0, 'time_delta': '0:32:33', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1431781056, 'number': 584, 'closed': datetime.datetime(2023, 7, 12, 21, 1, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 18, 18, 53, tzinfo=datetime.timezone.utc), 'time_taken': 9756.0, 'time_delta': '2:42:36', 'additions': 45, 'deletions': 1, 'state': 'closed'}, {'id': 1430994556, 'number': 583, 'closed': datetime.datetime(2023, 7, 16, 20, 16, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 12, 10, 19, 55, tzinfo=datetime.timezone.utc), 'time_taken': 381383.0, 'time_delta': '4 days, 9:56:23', 'additions': 245, 'deletions': 93, 'state': 'closed'}, {'id': 1427237802, 'number': 580, 'closed': datetime.datetime(2023, 7, 10, 12, 26, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 10, 10, 27, 38, tzinfo=datetime.timezone.utc), 'time_taken': 7144.0, 'time_delta': '1:59:04', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 1426263539, 'number': 579, 'closed': datetime.datetime(2023, 7, 9, 15, 51, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 9, 10, 59, 46, tzinfo=datetime.timezone.utc), 'time_taken': 17500.0, 'time_delta': '4:51:40', 'additions': 68, 'deletions': 0, 'state': 'closed'}, {'id': 1418248763, 'number': 577, 'closed': datetime.datetime(2023, 7, 5, 11, 53, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 3, 14, 48, 37, tzinfo=datetime.timezone.utc), 'time_taken': 162270.0, 'time_delta': '1 day, 21:04:30', 'additions': 170, 'deletions': 30, 'state': 'closed'}, {'id': 1416696654, 'number': 576, 'closed': datetime.datetime(2023, 7, 3, 6, 5, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 2, 11, 22, 2, tzinfo=datetime.timezone.utc), 'time_taken': 67411.0, 'time_delta': '18:43:31', 'additions': 31, 'deletions': 0, 'state': 'closed'}, {'id': 1397056852, 'number': 574, 'closed': datetime.datetime(2023, 6, 24, 17, 25, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 18, 9, 13, 23, tzinfo=datetime.timezone.utc), 'time_taken': 547907.0, 'time_delta': '6 days, 8:11:47', 'additions': 72, 'deletions': 6, 'state': 'closed'}, {'id': 1396024181, 'number': 572, 'closed': datetime.datetime(2023, 6, 29, 20, 37, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 16, 16, 38, 10, tzinfo=datetime.timezone.utc), 'time_taken': 1137588.0, 'time_delta': '13 days, 3:59:48', 'additions': 2524, 'deletions': 2326, 'state': 'closed'}, {'id': 1394204670, 'number': 571, 'closed': datetime.datetime(2023, 6, 16, 19, 15, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 15, 14, 0, 38, tzinfo=datetime.timezone.utc), 'time_taken': 105308.0, 'time_delta': '1 day, 5:15:08', 'additions': 31, 'deletions': 22, 'state': 'closed'}, {'id': 1394071909, 'number': 570, 'closed': datetime.datetime(2023, 7, 2, 6, 57, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 15, 12, 51, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1447545.0, 'time_delta': '16 days, 18:05:45', 'additions': 80, 'deletions': 5, 'state': 'closed'}, {'id': 1392319269, 'number': 569, 'closed': datetime.datetime(2023, 6, 15, 13, 45, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 14, 12, 31, 56, tzinfo=datetime.timezone.utc), 'time_taken': 90820.0, 'time_delta': '1 day, 1:13:40', 'additions': 43, 'deletions': 13, 'state': 'closed'}, {'id': 1368851599, 'number': 565, 'closed': datetime.datetime(2023, 6, 15, 11, 28, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 29, 9, 49, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1474715.0, 'time_delta': '17 days, 1:38:35', 'additions': 583, 'deletions': 38, 'state': 'closed'}, {'id': 1224851361, 'number': 524, 'closed': datetime.datetime(2023, 5, 14, 12, 4, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 1, 13, 5, 58, tzinfo=datetime.timezone.utc), 'time_taken': 8809101.0, 'time_delta': '101 days, 22:58:21', 'additions': 69, 'deletions': 19, 'state': 'closed'}, {'id': 1181665926, 'number': 518, 'closed': datetime.datetime(2023, 1, 2, 6, 53, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 1, 7, 28, 49, tzinfo=datetime.timezone.utc), 'time_taken': 84258.0, 'time_delta': '23:24:18', 'additions': 75, 'deletions': 1, 'state': 'closed'}]"
