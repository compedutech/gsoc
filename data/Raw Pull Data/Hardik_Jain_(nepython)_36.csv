pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
417529794,"[feature] Collect and display memory, CPU and flash usage of devices #43","* [x] Collect Device Info (will open a PR soon in `lua-monitoring`)
* [x] Create relevant charts and metrics:
* [x] Added threshold and a setting with the `default` as mentioned in the issue (I need to test it)
* [x] Update the tests

Closes #43",True,76,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/76,https://github.com/openwisp/openwisp-monitoring/pull/76,closed,330,28,9,17,5,86,0,0,[],2020-05-13 18:14:19+00:00,2020-06-08 23:31:32+00:00,2265433.0,"26 days, 5:17:13","[{'comment_id': 425633918, 'comment_body': ""Are you sure this is correct? if ifname is None, then `data['interfaces_dict'][ifname]['statistics'][stat]` will fail"", 'comment_created': datetime.datetime(2020, 5, 15, 8, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 425634493, 'comment_body': ""If memory is 0.95 and load is 0.90, shouldn't disk_usage be 0.8?"", 'comment_created': datetime.datetime(2020, 5, 15, 8, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 425636570, 'comment_body': ""This for loop looks weird.\r\nInstead of iterating over data.get('resources') IMHO it makes more sense to directly iterate over self.resources like\r\n\r\n```\r\nfor resource in self.resources:\r\n    value = data.get('resources', {}).get(resource)\r\n```\r\n\r\nor directly (even better):\r\n\r\n```\r\nif 'memory' in data.get('resources', {}):\r\n   ...\r\nif 'load' in data.get('resources', {}):\r\n   ...\r\nif 'disk_usage' in data.get('resources', {}):\r\n   ...\r\n```\r\n\r\nWhy are you using data.get('resources') instead of data['resources']? Is there any case when resources will not be available?\r\n"", 'comment_created': datetime.datetime(2020, 5, 15, 8, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 425637488, 'comment_body': 'You can use key=resource', 'comment_created': datetime.datetime(2020, 5, 15, 8, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 425642066, 'comment_body': 'It should be exact opposite, made some last minute changes yesterday. Now I get why those 3 tests where failing lately :sweat_smile:', 'comment_created': datetime.datetime(2020, 5, 15, 8, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 425642883, 'comment_body': 'Very well, the format in which I was passing value to the metric was like this. I will change it, to be more consistent.', 'comment_created': datetime.datetime(2020, 5, 15, 8, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 425748986, 'comment_body': ""I used it for two reason one was to maintain consistency and the other was to avoid garbage clients or blank data from failing the API but better would be to use an `if` it doesn't make much sense to use a `for` as I had done so updated that :smile: "", 'comment_created': datetime.datetime(2020, 5, 15, 11, 50, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 426193740, 'comment_body': ""Sorry I wasn't clear enough. IMO it's better having the values as 0.95, 0.9, 0.8"", 'comment_created': datetime.datetime(2020, 5, 16, 21, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426193846, 'comment_body': ""Better do the full calculus in one line and then just `self.resources_metric_write(pk, ct, key='memory', value=used)`"", 'comment_created': datetime.datetime(2020, 5, 16, 21, 44, 22, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426194152, 'comment_body': ""We should save the three values in `data['resources']['load']` with keys `load_1`, `load_5` and `load_15`. There is no need to save 100 * value"", 'comment_created': datetime.datetime(2020, 5, 16, 21, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426194448, 'comment_body': ""@nemesisdesign What do you think about this? Should we save the value aggregated or one value for each filesystem?\r\n\r\nIn any case, saving the sum of `disk['percent_used']` doesn't make much sense, at least `disk['percent_used'] / num_elements`"", 'comment_created': datetime.datetime(2020, 5, 16, 21, 53, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426194517, 'comment_body': '@nemesisdesign Same here, what value do you think we should save?', 'comment_created': datetime.datetime(2020, 5, 16, 21, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426209237, 'comment_body': ""It can't be, they need to be integers as I realized a bit late that threshold can only be an integer."", 'comment_created': datetime.datetime(2020, 5, 17, 2, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 426209461, 'comment_body': '@PabloCastellano, I need to save 3 metrics with different keys and values what I think would be best to avoid redundancy is store the keys and values in a dictionary and then use a loop for metric_write. Let me know, if this seems fine.', 'comment_created': datetime.datetime(2020, 5, 17, 2, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 426209739, 'comment_body': ""There is a need as I mentioned above threshold value can only be an integer, hence `*100`. @PabloCastellano , saving the three values doesn't matter I think (I might be wrong) since the device status gets updated every 5 mins and hence I had used that value only specifically. My attempt was to store only necessary info on influxdb."", 'comment_created': datetime.datetime(2020, 5, 17, 2, 28, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 426238837, 'comment_body': ""It doesn't matter if the data is collected every 5min. You may want to check the history of cpu load. Don't be afraid of saving useful data :-)"", 'comment_created': datetime.datetime(2020, 5, 17, 9, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426240847, 'comment_body': 'I see now, then OK, leave it like that and we can discuss about changing it later', 'comment_created': datetime.datetime(2020, 5, 17, 9, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426240907, 'comment_body': ""Not sure if influxdb allows it... can you try saving `data['resources']['load']` (the full list, without accessing the indexes)?"", 'comment_created': datetime.datetime(2020, 5, 17, 9, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426277824, 'comment_body': ""`InfluxDB` doesn't allow it, I tried it."", 'comment_created': datetime.datetime(2020, 5, 17, 16, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 426555600, 'comment_body': 'Please use more descriptive parameter names for pk and ct', 'comment_created': datetime.datetime(2020, 5, 18, 11, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426557041, 'comment_body': ""I think that by doing this we are wasting the data sent by the monitoring script here.\r\n\r\nImagine you are an operator wanting to know the same information that you would get by ssh'ing into the device and just get an average. Some mount points are full and you don't even notice (!)\r\n\r\nPlease just save all the data sent from the monitoring script and don't early optimize that much. We can change it later. I propose storing load_1, load_5 and load_15 and just enable by now automatically the load_5 graph. WDYT?"", 'comment_created': datetime.datetime(2020, 5, 18, 11, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426557407, 'comment_body': 'Using field_name=key=key is not very useful when storing the disk usage data. Here is my proposal, let me know what you think:\r\n\r\n* name: ""mountpoint /"" (using key ""mounted_on"")\r\n* field_name: ""used_space"" and  ""size"" (save these 2 metrics)\r\n* key ""/dev/sda1"" (using key ""name"")\r\n\r\n', 'comment_created': datetime.datetime(2020, 5, 18, 11, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426560140, 'comment_body': 'Why multiplying by 100? This would be confusing for the enduser and Influxdb allows float values.', 'comment_created': datetime.datetime(2020, 5, 18, 11, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426580857, 'comment_body': ""Let's add `if resource not in monitoring_settings.AUTO_GRAPHS` similarly to `_create_clients_graph()`"", 'comment_created': datetime.datetime(2020, 5, 18, 12, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426600014, 'comment_body': ""Threshold value can only be an integer. From what I know, load is a value less than 1 (in case it's not the case please correct me), hence had to do it"", 'comment_created': datetime.datetime(2020, 5, 18, 12, 48, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 426644320, 'comment_body': 'Good idea for `disk_usage`, I can use the `field_name` say `used_memory` (and similarly `shared` and `buffered` when adding them) for `memory`. Any suggestions, what can I name the `field_name` for the `metric` saving `load` data.', 'comment_created': datetime.datetime(2020, 5, 18, 13, 55, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 426747068, 'comment_body': 'Yeah, load_1, load_5 and load_15 look good to me', 'comment_created': datetime.datetime(2020, 5, 18, 16, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426748171, 'comment_body': 'If the reason of multiplying the value * 100 is that Threshold only allows integers then I think it makes more sense to change the Threshold model.\r\n\r\nFor the moment we can just create the Metric and skip the Threshold for this case.', 'comment_created': datetime.datetime(2020, 5, 18, 16, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 426798520, 'comment_body': 'Same here, save all data, and then we can calculate averages and so on from the influxdb query', 'comment_created': datetime.datetime(2020, 5, 18, 17, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 427245687, 'comment_body': ""@PabloCastellano, regarding warning the `operator` I had a suggestion. How's this, if disk_usage of a `mounted_space` exceeds a `threshold` say `80%` we notify the user displaying the `mounted_space` name and `used` percentage. In my opinion it won't be a good idea to display all the `mounted points` on the `graph` because they might just be too many. It's 7 in my case and will vary as per device (also `charts` don't support dynamic values currently, if I am not wrong)."", 'comment_created': datetime.datetime(2020, 5, 19, 11, 59, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 427638131, 'comment_body': ""@PabloCastellano reminded me that we need to know the number of processors in order to calculate the CPU usage, read here: https://blog.appsignal.com/2018/03/28/understanding-system-load-and-load-averages.html\r\n\r\nCan you add this information to the payload that it's sent?\r\n\r\nOn OpenWRT you can get the number of processors with:\r\n\r\n```\r\ncat /proc/cpuinfo | grep -c processor\r\n```\r\n\r\n(@PabloCastellano `numprocs` is not available by default on OpenWRT)\r\n\r\n"", 'comment_created': datetime.datetime(2020, 5, 19, 22, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 427638793, 'comment_body': ""I would say let's save the raw data but for the moment focus on displaying only the total like you're doing now.\r\n\r\nIn the future when we want to start displaying more data, we'll have the data already.\r\n\r\n> also charts don't support dynamic values currently, if I am not wrong\r\n\r\nYes it's supported with the usage of `top_fields`, if you specify `top_fields` and set it to 10, it will do a query to get the 10 keys with most results and will then build the final query to use those fields."", 'comment_created': datetime.datetime(2020, 5, 19, 22, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 428132526, 'comment_body': ""Remember to change the key names: https://github.com/openwisp/lua-monitoring/pull/11/files#r425648187 and save **all** received raw data.\r\n\r\nAlso notice that you will be receiving `data['resources']['disk']['used_percent']` so you don't need to divide used_space by total_size. Also don't modify the value *100, just save the raw data at the moment."", 'comment_created': datetime.datetime(2020, 5, 20, 16, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 428136828, 'comment_body': ""Can you do `if 'resources' not in data: return` here? So we avoid one extra level of indentation"", 'comment_created': datetime.datetime(2020, 5, 20, 16, 13, 10, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 428137094, 'comment_body': 'Please do the following changes:\r\n\r\nSave the key as load_1, and for extra values use load_5 and load_15. Remember to not multiply *100. We will have float Thresholds soon :+1: ', 'comment_created': datetime.datetime(2020, 5, 20, 16, 13, 33, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 428140440, 'comment_body': ""This function is becoming a monster :grin:. I propose removing it and `_get_field_name` too because they are complicating the readability too much only trying to make the code less repetitive.\r\n\r\nOnce removed, duplicate the code that gets_or_create the metric, write it and create the graph if needed.\r\n\r\nE.g.\r\n\r\n```\r\n\r\nif 'resources' in data:\r\n\t if 'load' in data['resources']:\r\n\t\t...calculate value and extra_values...\r\n\t\t... Metric.get_or_create() ...\r\n\t\t... metric.write ...\r\n\t\t... if created: create graphs and thresholds ...\r\n\tif 'disk_usage' in data['resources']:\r\n                ... same ...\r\n\tif 'memory' in data['resources']:\r\n                ... same ...\r\n```\r\n\r\nThen we can refactor once we find similarities in the algorithm"", 'comment_created': datetime.datetime(2020, 5, 20, 16, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 428142346, 'comment_body': ""Let's use these as default thresholds: `free_memory`, `load_1` and `free_space` keys."", 'comment_created': datetime.datetime(2020, 5, 20, 16, 21, 30, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 428143738, 'comment_body': 'Also update the names here', 'comment_created': datetime.datetime(2020, 5, 20, 16, 23, 43, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 428174937, 'comment_body': ""A threshold value needs to be a percentage here, if I am not wrong. The reason being `free_memory` and `free_space` will vary from device to device we can't set a default threshold as per one device, right? I can use `load_1` as a threshold because it's value will lie between 0 and 1 always."", 'comment_created': datetime.datetime(2020, 5, 20, 17, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 428201084, 'comment_body': ""are you sure it's comprised between 0 and 1 only? I knew it can be more than 1, especially on multi core devices. A load of 2 with 2 cores is the same of 1 with 1 core.\r\nBut couldn't also happen to have a load of 1.1 with 1 core @PabloCastellano? If I'm not wrong this can happen and indicates an overload."", 'comment_created': datetime.datetime(2020, 5, 20, 17, 54, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 428221538, 'comment_body': 'I never observed it as my device (VM) is single core :sweat_smile:.\r\nShould I use ```load = load_5/(no.of cores)```, that should be consistent, I guess.\r\n\r\n**PS**: Also, store it the same way in `influxdb`', 'comment_created': datetime.datetime(2020, 5, 20, 18, 30, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 428732637, 'comment_body': ""Don't worry about the percentage. Just save the raw data and we will make the transformations later for the user.\r\n\r\nJust write `data['resources']['load'][0]`"", 'comment_created': datetime.datetime(2020, 5, 21, 15, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 428737274, 'comment_body': ""```\r\nused_percent = 0\r\nfor disk in data['resources']['disk']:\r\n    used_percent += disk['used_percent']\r\nused_percent = used_percent / len(data['resources']['disk']) / 100\r\n```"", 'comment_created': datetime.datetime(2020, 5, 21, 15, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 428738060, 'comment_body': 'field_name should be `used_disk`', 'comment_created': datetime.datetime(2020, 5, 21, 15, 43, 34, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 428785681, 'comment_body': ""Saving the number of cores, isn't helpful I guess since it's a constant.\r\n**PS**: So, should I just save the loads for now?"", 'comment_created': datetime.datetime(2020, 5, 21, 16, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 428803626, 'comment_body': '@PabloCastellano, the `df` command currently outputs this on my **VM**\r\n```\r\nFilesystem           1K-blocks      Used Available Use% Mounted on\r\n/dev/root               258016     18792    233984   7% /\r\ntmpfs                   121960        76    121884   0% /tmp\r\n/dev/sda1                16112      3872     11916  25% /boot\r\ntmpfs                      512         0       512   0% /dev\r\n```\r\nNow if you observe the used percent represents percentage usage of that individual filesystem and does not represent the `used_percent` of the whole system, am I missing something here?', 'comment_created': datetime.datetime(2020, 5, 21, 17, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 428917608, 'comment_body': 'You are right, that approach is better. Nevermind!', 'comment_created': datetime.datetime(2020, 5, 21, 21, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 432218190, 'comment_body': ""ok, this method is becoming huge, let's improve this part (later on we'll likely improve the part above too).\r\n\r\nI would do something like the following:\r\n\r\n```python\r\nif 'resources' not in data:\r\n    return\r\nself._write_cpu(data)\r\nself._write_disk(data)\r\nself._write_memory(data)\r\n```\r\n\r\nand move the relevant logic to each of those methods."", 'comment_created': datetime.datetime(2020, 5, 29, 2, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432218526, 'comment_body': ""ok, I think we need a way to specify the default value passed to `seconds`.\r\n\r\nI realize now that `seconds` is not a good name because it may not convey what it does, that field indicates the sensitivity of the threshold and is used to avoid constantly sending alerts.\r\n\r\nWhile I was writing this I thought that rather than spending time on this, we'd better investigate in a general solution which I tried to describe in #106.\r\n\r\nSo nothing to do here now, I just added this comment to explain how and why #106 appeared. "", 'comment_created': datetime.datetime(2020, 5, 29, 2, 8, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432800685, 'comment_body': 'why this change? I think we should have only 1 line in the chart as it was before.', 'comment_created': datetime.datetime(2020, 5, 30, 2, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432801361, 'comment_body': ""let's avoid performing this division each time, we don't need to store the number of CPUs in the timeseries, because as you noted @nepython, this never changes.\r\nI'm not sure if @PabloCastellano told you to do this, but I advise against doing this because it has no value, it only adds operational costs."", 'comment_created': datetime.datetime(2020, 5, 30, 2, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432801425, 'comment_body': 'I think this was also better before, I advise avoiding this division.', 'comment_created': datetime.datetime(2020, 5, 30, 2, 18, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432819029, 'comment_body': '@nemesisdesign, the division was taking previously too. `used_bytes/size_bytes` was getting stored in the `influxdb measurement` earlier (As, we need a percentage for the threshold). Now `size_bytes` and `used_bytes` both are getting stored as individual fields. This might be useful in case we need the usage in `bytes` and not `percentage` in the future but on more thoughts, I think in can be easily changed when the need arises (for now it will just consume space in influxdb :sweat_smile:). Hence, changing it back to how it was before.', 'comment_created': datetime.datetime(2020, 5, 30, 7, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 432826627, 'comment_body': ""@nemesisdesign Yes, that was my idea because IMO influxdb should always have ther raw values but if you prefer to do it otherwise I'm fine with that "", 'comment_created': datetime.datetime(2020, 5, 30, 9, 32, 42, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 432992356, 'comment_body': ""@nepython @PabloCastellano if there's a way to simplify this query, I would do it as well, with the goal of removing load on influxdb when retrieving the value from the DB."", 'comment_created': datetime.datetime(2020, 5, 31, 22, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 433049633, 'comment_body': 'It can be done by doing storing the percentage itself in influxdb and retrieving it like I had been doing previously. Also, in that case, only one value will get stored in influxdb. @nemesisdesign @PabloCastellano, should I do it that way then?', 'comment_created': datetime.datetime(2020, 6, 1, 5, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 433053451, 'comment_body': 'What about returning `available_memory` instead?', 'comment_created': datetime.datetime(2020, 6, 1, 5, 53, 59, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 433059773, 'comment_body': ""That might be better as the data stored might be usable somewhere else too later on (percentage might not be usable) but this reminds me did we resolve the threshold default value? I can't recall :sweat_smile:. The threshold would compare with the field `available_memory` which will vary from device to device so we can use a default threshold value only with percentage I think. The other work around might be setting some percentage of total memory as the threshold value to compare with."", 'comment_created': datetime.datetime(2020, 6, 1, 6, 17, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 433395351, 'comment_body': ""correct, for the problem of the threshold, we need to keep it in percentage.\r\nLet's keep the raw data, but also go back to store the processed data, which will be faster.\r\n\r\nFurther optimizations can be done only after trying it in the real world, but storage issues can be dealt with more easily than RAM/CPU usage to do the calculations."", 'comment_created': datetime.datetime(2020, 6, 1, 17, 57, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 433785018, 'comment_body': ""Improvement: In these internal methods we don't need to full `data` so we can just pass `data['resources']` as `resources`"", 'comment_created': datetime.datetime(2020, 6, 2, 10, 45, 57, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 433785741, 'comment_body': ""Improvement: same logic as we did already:\r\n\r\n```\r\nif 'load' not in data['resources']\r\n    return\r\n...\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 6, 2, 10, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 433789351, 'comment_body': 'Last time I checked thresholds worked fine with percentages (0-1).\r\n\r\nWe are already storing the percentage as the *primary* value:\r\n\r\n```\r\n            metric.write(used_bytes / size_bytes)\r\n```', 'comment_created': datetime.datetime(2020, 6, 2, 10, 55, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 433866114, 'comment_body': ""@PabloCastellano , that's for `Disk` and it's correct. We were talking about `Memory` though. Also, I had one change to recommend, shall we store,\r\n```python\r\nthreshold = cpus*DEVICE_RESOURCES_THRESHOLDS['load']\r\n```\r\nSince, currently it's correct threshold only for single core devices. This might be needed as we are **not** storing metric value for load as `load_0 / cpus`\r\n\r\n**PS**: Went ahead with the above since it seemed an appropriate change, check `_create_resources_threshold` for the small change."", 'comment_created': datetime.datetime(2020, 6, 2, 13, 16, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 433905852, 'comment_body': 'An extra test was required after this change to maintain the coverage.', 'comment_created': datetime.datetime(2020, 6, 2, 14, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 433954476, 'comment_body': ""Well, tbh I think it's safe to assume that if 'resources' is present, then 'load', 'memory' and 'disk' are too. WDYT?"", 'comment_created': datetime.datetime(2020, 6, 2, 15, 14, 29, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 433961953, 'comment_body': ""You are right but same applies for memory:\r\n\r\n```\r\nused_memory = 1 - (memory['free'] + memory['buffered']) / memory['total']\r\nmetric.write(used_memory, extra_values=extra_values)\r\n```\r\n\r\nused_memory is a float between 0 and 1\r\n\r\n> threshold = cpus*DEVICE_RESOURCES_THRESHOLDS['load']\r\n\r\nInstead of doing this, I would save the percentage in the *primary* key of the load Metric. It could be named `cpu_usage` (load_1 / cpus) and we can keep `load_1` among the rest of extra values. IMO this way it is clearer because you understand that the threshold is 90% of the usage (0.9). Seeing instead a threshold of 1,8 because it's a 2-cores device is confusing."", 'comment_created': datetime.datetime(2020, 6, 2, 15, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 434038345, 'comment_body': ""Yes, it's safe unless the user modifies the `lua` script (unlikely, I think). So, shall I remove the lines verifying that `load`, `memory`, `disk` are present in `resources`?"", 'comment_created': datetime.datetime(2020, 6, 2, 17, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 434177826, 'comment_body': ""Yes please, let's take the opportunity to reduce the complexity :+1: "", 'comment_created': datetime.datetime(2020, 6, 2, 21, 11, 27, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 434264006, 'comment_body': 'add these two properties to the schema', 'comment_created': datetime.datetime(2020, 6, 3, 1, 44, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 434264160, 'comment_body': 'we need a schema for this as well', 'comment_created': datetime.datetime(2020, 6, 3, 1, 45, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 434264517, 'comment_body': 'deepcopy is not needed here because:\r\n\r\n```python\r\ndef _data(self):\r\n        return {\r\n```\r\n\r\n`return` always creates a new data structure.', 'comment_created': datetime.datetime(2020, 6, 3, 1, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 434264543, 'comment_body': 'remove this ', 'comment_created': datetime.datetime(2020, 6, 3, 1, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 434270697, 'comment_body': 'what do you guys think of renaming this and other occurrences of load (when using internally as metric name, chart name, metric key) to `cpu`? since we have `memory` and `disk`, `load` feels a bit out of place.\r\n\r\nI just had to rename the data from influxdb and while looking for it I couldn\'t find it:\r\n\r\n```\r\n> show measurements\r\nname: measurements\r\nname\r\n----\r\nbr_lan\r\nbr_wan\r\ndevice_data\r\ndisk\r\neth0\r\neth0_1\r\neth0_2\r\nload\r\nmemory\r\nping\r\ntap0\r\nwlan0\r\nwlan1\r\n```\r\nAfter a while I realized I was looking for `cpu` but it\'s named `load` from load aveage, but I believe the value we\'re storing and showing in the ""CPU Load"" chart doesn\'t have much to do with load averages anymore and it would be better to refer to it as `cpu`.\r\n\r\n@PabloCastellano @nepython ', 'comment_created': datetime.datetime(2020, 6, 3, 2, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 434380229, 'comment_body': 'I agree that cpu is a better name than load. Indeed I opened an issue to review measurements names. We can do it in this PR or in https://github.com/openwisp/openwisp-monitoring/issues/111', 'comment_created': datetime.datetime(2020, 6, 3, 7, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436117041, 'comment_body': 'this schema is wrong. Please see the definition of other arrays and check the jsonschema spec.\r\n\r\nPlease flag the fields required to do the calculation of the value we store as required.\r\n\r\nPlease also write a test which sends bogus disk data to ensure the API rejects it. ', 'comment_created': datetime.datetime(2020, 6, 5, 19, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436141931, 'comment_body': ""> Please flag the fields required to do the calculation of the value we store as required.\r\n\r\nI didn't get this."", 'comment_created': datetime.datetime(2020, 6, 5, 20, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 436158556, 'comment_body': ""> > Please flag the fields required to do the calculation of the value we store as required.\r\n> \r\n> I didn't get this.\r\n\r\nTo flag as required all the fields that are needed for the calculation of the used disk percentage which we graph, otherwise we would be allowing to send data which will not work or may even cause exceptions.\r\n\r\nI see that you flagged them all required so that's ok for me."", 'comment_created': datetime.datetime(2020, 6, 5, 20, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436193695, 'comment_body': 'Define the fields of the disk section that you use to do the calculations as required, you did it.', 'comment_created': datetime.datetime(2020, 6, 5, 22, 34, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436194278, 'comment_body': 'pay attention: you are taking for granted that all the keys of `memory` that you are accessing are present, but this is not reflected in the schema, you should define that these keys are required (except `available`, which on some systems is not present).\r\n\r\nWrite a test with bogus data for this as well please.', 'comment_created': datetime.datetime(2020, 6, 5, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436195902, 'comment_body': ""could you write another test with the following:\r\n\r\n```python\r\ndel data['resources']['disk']\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 6, 5, 22, 43, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436196143, 'comment_body': ""here, I think you're not taking into account the case in which the `disk` key in `resources` is not present.\r\nIt may happen. If it does happen, it looks to me that the code will fail and the metric collection will fail.\r\nI think you did check this before, was it @PabloCastellano that suggested you to not do it?"", 'comment_created': datetime.datetime(2020, 6, 5, 22, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436197141, 'comment_body': ""same here, we're assuming `load` is present, but `load` is not flagged as required in the schema.\r\nSo if the monitoring data doesn't include `load`, this will generate an exception and no metric will be collected.\r\n\r\nWe could make `load` mandatory, but I think not making it mandatory gives us flexibility."", 'comment_created': datetime.datetime(2020, 6, 5, 22, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436197674, 'comment_body': ""here: define the required keys. Ensure that the key which are not required are accessed using `memory.get('<key>')` (which does not raise `KeyError`) rather than `memory['<key>']`"", 'comment_created': datetime.datetime(2020, 6, 5, 22, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436198094, 'comment_body': ""as we discussed, here we need is to:\r\n\r\n- consider `available` optional (we need a test for this, which tests the metric collection without available, because some systems don't have it and older openwrt versions don't have it)\r\n- if `available` is present, use it instead of `free`, but only if it's greater than `free`\r\n"", 'comment_created': datetime.datetime(2020, 6, 5, 22, 52, 58, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436254434, 'comment_body': 'Yes sometime back https://github.com/openwisp/openwisp-monitoring/pull/76#discussion_r433954476, but I agree with his arguement. @nemesisdesign, the only case in which disk key might not be present is if some other `lua` script is used but then that holds for `memory` and `load` too, right? Shall I change the schema to make these 3 required always or simply revert back to checking if these keys are present and then proceed with the code.\r\n\r\n**PS**: Read your below comment, agreed then reverting back for more flexibilty', 'comment_created': datetime.datetime(2020, 6, 6, 9, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 436254666, 'comment_body': ""That's already done. I have made all fields required taking into account that all shall be needed for #116"", 'comment_created': datetime.datetime(2020, 6, 6, 9, 39, 56, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}]","[{'commit_sha': 'a369bd153b88f43fc8d58a26d2760c18bd8bf94e', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '755755ed58b12ee494df0574f0f310c5ea5cfb89', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6766c0a7c923194b34decf92dc8b017c15a28f95', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2c25c441f75cf827eee50115302611956118214', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aad4e742373e36685f2d225ea184fc05719add44', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99796816a19d8c2e51f569591b93370694ffa024', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47bc93dc271eb00b9d1e7c4fb32e71f958de4006', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '689922abe48b44bf922e58d0a8955e172aa7539d', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55815bf3a6be52c0d3e4e41f71af6f648e1afd7d', 'committer_username': 'PabloCastellano', 'committer_name': 'Pablo Castellano', 'committer_email': None, 'commit_date': datetime.datetime(2009, 4, 13, 13, 20, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91d493ac4016a76e2772485328a7b7dd3d8eef09', 'committer_username': 'PabloCastellano', 'committer_name': 'Pablo Castellano', 'committer_email': None, 'commit_date': datetime.datetime(2009, 4, 13, 13, 20, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b2baf1415cbcb35ff0b8cc960da5342bbb6566c', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76bb011a4add074731950eede00aefb953fd8d5f', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79538e9be1554bc119603abdb55d17a857b88fa7', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '018aea7474881cf6dbbfc5e0675d7c74b92976fd', 'committer_username': 'PabloCastellano', 'committer_name': 'Pablo Castellano', 'committer_email': None, 'commit_date': datetime.datetime(2009, 4, 13, 13, 20, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f4845f9355f4c146dcd9623cbc5baf7b3082b0', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4cf34a1890ff0ee5e276261873c3981b18e8df7', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ecf22c11dc4697a9959a4ad624cfe178e7f8ce7a', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22
423595143,[feature] Swappable models (GSOC20),"I'll be noting here the improvements to make on the work done in PR #50.

I'm merging your PR plus my improvements on a branch, let's keep working on that branch.

### ``sample_device_monitoring.DetailsModel``

This is not very useful. We're testing that it is possible to add additional models?
That's not the point, the point is to extend the behavior of the existing ones.

I would add a ""details""  field on `DeviceMonitoring`, have it provide a default value and override the __str__ method to include it the content of this field in its output, and update the tests accordingly.

### ``sample_check.monitoring`` DetailsModel misunderstanding 

It should not be a concrete model, it should be a base abstract model used as a base for the other models, see here:

https://github.com/openwisp/openwisp-firmware-upgrader/blob/master/tests/openwisp2/sample_firmware_upgrader/models.py#L12-L46

The point is to test extending the base app, adding fields, testing the differences, please do that, otherwise all this work is dead code, useless, we do not want to work on useless code right?

### ``sample_check.check`` missing details field

As above, the Check model of the sample app should have an additional field which is used somehow in the code.

### README

Update README regarding sample_device_monitoring and any other change that I introduced.
Look for my `TODO` notes in the README.

### Management commands

These shall be implemented in the sample apps too, see openwisp-network-topology/django-netjsongraph for an example, ask @atb00ker if you need help.

I leave the failing tests for you to fix.

Do not skip tests like you've been doing in #50, that's called taking shortcuts and it's bad.

### run-qa-checks

This must do the checks for the sample app as well, see openwisp-firmware-upgrader for reference.

### Clean up commit history

- Rebase on the current master
- Fix conflicts
- squash your commits from PR #50, keep my commit intact, add your changes afterwards",True,102,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/102,https://github.com/openwisp/openwisp-monitoring/pull/102,closed,2273,1069,66,4,3,9,1,1,[{'name': 'enhancement'}],2020-05-27 04:12:30+00:00,2020-05-28 19:27:33+00:00,141303.0,"1 day, 15:15:03","[{'comment_id': 432050998, 'comment_body': ""nice :+1: \r\n\r\nI noticed that in the non sample app tests we're not doing this.\r\nCan you add it please?\r\n\r\nIt's good to run these integration tests to spot possible future issues.\r\n@pandafy FYI :point_up: "", 'comment_created': datetime.datetime(2020, 5, 28, 18, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432052460, 'comment_body': 'a mention to the fact this has to be done needs to be added to the README ', 'comment_created': datetime.datetime(2020, 5, 28, 18, 56, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432052765, 'comment_body': 'good :+1: ', 'comment_created': datetime.datetime(2020, 5, 28, 18, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432053804, 'comment_body': ""I'd replace the docstring with an explanation that this method is added only for testing purposes"", 'comment_created': datetime.datetime(2020, 5, 28, 18, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432053959, 'comment_body': 'add a comment explaining this is here only for testing purposes', 'comment_created': datetime.datetime(2020, 5, 28, 18, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432054722, 'comment_body': 'I think this last line can be replaced by:\r\n\r\n```python\r\nreturn super().perform_check(store=store)\r\n```\r\n\r\nWhich is more future proof.', 'comment_created': datetime.datetime(2020, 5, 28, 19, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432061536, 'comment_body': 'good, but please make this field do something and add a test for each model', 'comment_created': datetime.datetime(2020, 5, 28, 19, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 433343981, 'comment_body': '@nemesisdesign, can you please explain as to how exactly is it `Future Proof` so I can take note :smiley: ', 'comment_created': datetime.datetime(2020, 6, 1, 16, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 434272469, 'comment_body': ""Found you.\r\n\r\nI meant calling `super()` instead of duplicating `self.check_instance.check(store=True)` , because so if the parent method is refactored or changed this method here won't need to be changed."", 'comment_created': datetime.datetime(2020, 6, 3, 2, 21, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': '056a7b355ba41db2ff68ee09e5dc4f95598f883d', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79e5ce74fc0f91a8a4530f12c7e21cfd9d49e20f', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39545995e7b08da5c17a01a3a3a53269fce32a9b', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '348f9905f9f72dfad2708cf80f782627ace398ff', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}]",Federico Capoano,841044,f.capoano@openwisp.io,User,,56,,65,260
415614446,[tests] Pushing up coverage #71,Closes #71,True,75,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/75,https://github.com/openwisp/openwisp-monitoring/pull/75,closed,141,27,6,2,0,9,0,0,[],2020-05-09 18:41:54+00:00,2020-05-13 17:02:05+00:00,339611.0,"3 days, 22:20:11","[{'comment_id': 422761677, 'comment_body': 'use `ipdb` to inspect the code and brute force it until you find out what is happening', 'comment_created': datetime.datetime(2020, 5, 11, 3, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 423278140, 'comment_body': ""> Use the brute-force, young padawan.\r\n\r\nLearning from the great Jedi :blush: \r\n\r\nI used `ipdb` to inspect and found out the code was raising the error `ImproperlyConfigured` but `ipdb` did't show that any line of `settings.py` got executed while running the test.\r\n\r\nAfter some thoughts I realized `settings.py` was read as a string and then being executed line by line by **exec()** in my previous commit, so `settings.py` was never imported or executed :sweat_smile:. After that, I tried with other options like `os.system()`, `subprocess()` but neither worked so finally did a bad workaround (I don't think it's a nice way of doing it but lines are getting covered), please check it out"", 'comment_created': datetime.datetime(2020, 5, 11, 19, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 424401131, 'comment_body': ""Name it just `get_critical_device_metrics`, you can also remove the comment in the following line because it doesn't provide much value"", 'comment_created': datetime.datetime(2020, 5, 13, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 424401960, 'comment_body': 'Same: `get_health_status_labels`', 'comment_created': datetime.datetime(2020, 5, 13, 12, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 424402461, 'comment_body': 'Can you use the `assert` approach as it was used before for `OPENWISP_MONITORING_HEALTH_STATUS_LABELS`?', 'comment_created': datetime.datetime(2020, 5, 13, 12, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 424403050, 'comment_body': '""OPENWISP_MONITORING_CRITICAL_DEVICE_METRICS must contain the following keys: key, field_name"" sounds better', 'comment_created': datetime.datetime(2020, 5, 13, 12, 38, 22, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 424404379, 'comment_body': 'available and shared are not expected in the current schema. Same for general->hostname, can you update them in one different PR?', 'comment_created': datetime.datetime(2020, 5, 13, 12, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 424481138, 'comment_body': ""I copied the actual device data, funny that schema doesn't have `shared` because that is being displayed in `Device Status` :sweat_smile:"", 'comment_created': datetime.datetime(2020, 5, 13, 14, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 424521374, 'comment_body': ""Yeah the current schema is somewhat flexible and remember e.g. that we were not forcing format checking but as it gets more stable and we are confident with it, IMO we should get stricter and reject metrics that don't follow the schema"", 'comment_created': datetime.datetime(2020, 5, 13, 15, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}]","[{'commit_sha': '9afd01f855f8711b30345fd5b684af94db473f64', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '046c373b57f3b8c4192bdd3e41e9889ed9def377', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22
434754450,[tests] Optimize unit test runtime speed #69,Closes #69,True,134,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/134,https://github.com/openwisp/openwisp-monitoring/pull/134,closed,197,199,16,2,4,16,0,0,[],2020-06-15 20:05:39+00:00,2020-06-21 19:29:57+00:00,516258.0,"5 days, 23:24:18","[{'comment_id': 440447044, 'comment_body': 'I have a doubt regarding the naming of this parameter, what does `double` mean?', 'comment_created': datetime.datetime(2020, 6, 15, 21, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440447651, 'comment_body': ""rename this file to `tests.py` for clarity (even if it's temporary, is good to use standard file names)."", 'comment_created': datetime.datetime(2020, 6, 15, 21, 7, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440449928, 'comment_body': ""This works, but is quite unreadable. Which will not be good for future maintainers.\r\n\r\nWhy don't you make a function for outputting colored text?\r\n\r\nPseudo code example:\r\n\r\n```python\r\ndef colored_text(text, color):\r\n    colors = {\r\n       'green': '<color-code>'\r\n    }\r\n    assert color in colors\r\n    color_code = colors[color]\r\n    return f'<begin-code><text><end-code>'\r\n```\r\n\r\nYour future you (and future maintainers) will thank you for this."", 'comment_created': datetime.datetime(2020, 6, 15, 21, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440450826, 'comment_body': 'why is it only enabled in this part of the if and not in the other?\r\n\r\nBTW, maybe we can put this in the settings.py of the test project, it should be easier to find it, here is kind of hidden and can generate confusion.', 'comment_created': datetime.datetime(2020, 6, 15, 21, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 442122558, 'comment_body': 'Any reason for not moving `_FPING_UNREACHABLE` to `__init__.py` as well?', 'comment_created': datetime.datetime(2020, 6, 18, 10, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 442124786, 'comment_body': ""Can you remove the `' '` in the middle and leave only one string?\r\n\r\n`'10.40.0.1 : xmt/rcv/%loss = 5/5/0%, min/avg/max = 0.04/0.08/0.15'`\r\n\r\nAlso, since you added `_FPING_UNREACHABLE`, it would be nice to rename this one to `_FPING_REACHABLE`"", 'comment_created': datetime.datetime(2020, 6, 18, 10, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 442125752, 'comment_body': 'I think we can now remove this comment `# will hopefully ping an unexisting private address`', 'comment_created': datetime.datetime(2020, 6, 18, 10, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 442130181, 'comment_body': 'Why is it needed to delete these 2 fields?', 'comment_created': datetime.datetime(2020, 6, 18, 10, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 442141237, 'comment_body': ""Why did you change the params argument? It didn't hurt"", 'comment_created': datetime.datetime(2020, 6, 18, 10, 55, 4, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 442147555, 'comment_body': 'It would be better to have this kind of refactors in a different PR to make the reviewing process easier', 'comment_created': datetime.datetime(2020, 6, 18, 11, 7, 51, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 442155395, 'comment_body': ""I had moved `_FPING_OUTPUT` to `__init__.py` since it was required by three Test classes. This need didn't arose in the case of `_FPING_UNREACHABLE`, hence I hadn't moved it but I can move it."", 'comment_created': datetime.datetime(2020, 6, 18, 11, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 442163751, 'comment_body': 'The test is supposed to test whether device recovery task is being triggered spontaneously. In that case, we could save the requests being made to create `clients`, `traffic`, `resources` metric, charts, alertsettings. It speeds up the tests as we are testing only what we want to test, specifically. Nothing less, nothing more :)', 'comment_created': datetime.datetime(2020, 6, 18, 11, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 442164289, 'comment_body': 'Yes, you are correct.', 'comment_created': datetime.datetime(2020, 6, 18, 11, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 442173006, 'comment_body': ""If it wouldn't had increased the speed, I would have desisted from making the change. I have compared the speeds previously with and without `resources` `metrics`, `charts`, `alertsettings` being created.\r\nIncrease in individual test's speed was slightly more than 0.1s. If `0.3s` is the threshold then `0.1s` counts according to me. Anyways, for the record, the fastest travis build when there was no changes in `device` tests was slightly less than **29s**. So, I think reducing requests is increasing speed by atleast **5s**.\r\nAlso, this parameter is only being used when there is no need for resources metrics at all in the test. For example, `test_200_traffic_counter_incremented`, `test_200_traffic_counter_reset`, etc.\r\n\r\nIf you want to compare the speed increase in slow tests:~\r\nSpeed log before changes : [travis-build](https://travis-ci.com/github/nepython/openwisp-monitoring/jobs/348784253#L1072)\r\nSpeed log after changes : [travis-build](https://travis-ci.org/github/openwisp/openwisp-monitoring/jobs/699070313#L1071)"", 'comment_created': datetime.datetime(2020, 6, 18, 12, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 443097207, 'comment_body': 'add a brief comment to let maintainers know why those `del` statements are there please', 'comment_created': datetime.datetime(2020, 6, 20, 3, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 443097229, 'comment_body': 'you can now import this from openwisp-utils master', 'comment_created': datetime.datetime(2020, 6, 20, 3, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': '191f45a6f6945104e6c35ee0569990e7bf489614', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '405d0aa56beb5df09e215d336943c1e9220c3298', 'committer_username': 'nemesifier', 'committer_name': 'Federico Capoano', 'committer_email': 'f.capoano@openwisp.io', 'commit_date': datetime.datetime(2011, 6, 9, 22, 30, 31, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22
424541915,[enhancement] Abstract code communicating with the time series DB #65,"* I have added few **TODO** comments as reminder notes when adding support for another timeseries db
* Updated the docs on how to select / declare a timeseries database in `settings.py`
* Introduced Deprecation warning to shift to the latest format of defining the timeseries db

Closes #65",True,103,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/103,https://github.com/openwisp/openwisp-monitoring/pull/103,closed,741,545,22,6,4,67,0,0,[],2020-05-28 14:50:49+00:00,2020-06-23 00:42:25+00:00,2195496.0,"25 days, 9:51:36","[{'comment_id': 431964834, 'comment_body': ""Why is it necessary to change the name of the db twice if previously it wasn't?\r\n\r\nCan you keep and adapt `@patch('openwisp_monitoring.monitoring.settings.INFLUXDB_DATABASE', 'test_db')` instead?"", 'comment_created': datetime.datetime(2020, 5, 28, 16, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 431966264, 'comment_body': ""Please use CamelCase for the exception name and let's keep it less generic. What about TimeseriesDbClientError?"", 'comment_created': datetime.datetime(2020, 5, 28, 16, 25, 42, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 431967419, 'comment_body': 'This is not the way to define Exceptions in python. This is just a string.', 'comment_created': datetime.datetime(2020, 5, 28, 16, 27, 28, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 431969680, 'comment_body': ""I think it's better if we have a generic TimeseriesDB class with a `db_type` attribute. This way you don't need to check `TIMESERIES_DB['DATABASE']` every time and you can just call `TimeseriesDB.method()`, which will check the database type and send the request"", 'comment_created': datetime.datetime(2020, 5, 28, 16, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 431970120, 'comment_body': 'Why is this file inside tests/openwisp2?', 'comment_created': datetime.datetime(2020, 5, 28, 16, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 431971376, 'comment_body': 'As the above comment says, this is used ofr automated testing purposes. If we support different DBs we need to test them all, keep this is mind.', 'comment_created': datetime.datetime(2020, 5, 28, 16, 33, 54, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 432031576, 'comment_body': ""@PabloCastellano, I have changed it and I think it's better now but can you please enlighten me on why it's a string (I am not aware)."", 'comment_created': datetime.datetime(2020, 5, 28, 18, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 432074917, 'comment_body': 'I think this should be a path to a class, which will have to be imported dinamically.\r\nThat way we allow contributors to write their customized backends more easily.\r\n(please document how to do this, with a short section that mentions this).\r\n\r\nI also think the dictionary key should be named `BACKEND`', 'comment_created': datetime.datetime(2020, 5, 28, 19, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432075975, 'comment_body': ""I would name it `TIMESERIES_DATABASE` because as per the zen of python, explicit is better than implicit, you may shorten it to `TIMESERIES_DB` when importing, eg: `from ... import TIMESERIES_DATABASE as TIMESERIES_DB`, although unless it's used a lot in the code the explicit form will help readability"", 'comment_created': datetime.datetime(2020, 5, 28, 19, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432076415, 'comment_body': 'we need to have one class for each database backend', 'comment_created': datetime.datetime(2020, 5, 28, 19, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432076751, 'comment_body': ""I don't think moving this information in a separate file is useful at all"", 'comment_created': datetime.datetime(2020, 5, 28, 19, 43, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432077230, 'comment_body': ""@PabloCastellano you're right, one of the measurable outcomes is to run the test with both timeseries DB"", 'comment_created': datetime.datetime(2020, 5, 28, 19, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432077704, 'comment_body': ""What's the advantage of storing the queries for the default charts in a separate file?\r\nI think these changes are not useful, if I'm missing something let me know."", 'comment_created': datetime.datetime(2020, 5, 28, 19, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432082407, 'comment_body': ""the model doesn't have to know anything about influxdb or prometheus, it just have to call a method on the timeseries db backend to do what it needs to do, the differences for each timeseries DB are handled in its respective backend, which for the moment for us will be influxdb only. "", 'comment_created': datetime.datetime(2020, 5, 28, 19, 50, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 432419435, 'comment_body': ""OH you are right, I didn't pay enough attention. It's not a string :+1:"", 'comment_created': datetime.datetime(2020, 5, 29, 11, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 432424089, 'comment_body': '@nemesisdesign Makes sense.\r\n\r\n@nepython forget my previous comment about having a db_type attribute in the class', 'comment_created': datetime.datetime(2020, 5, 29, 11, 32, 5, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436149216, 'comment_body': 'test code should not be mixed with the actual implementation', 'comment_created': datetime.datetime(2020, 6, 5, 20, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436151411, 'comment_body': 'what about SUM?', 'comment_created': datetime.datetime(2020, 6, 5, 20, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436152560, 'comment_body': ""for backward compatibility, please make sure the application works also if this is not defined, supply the default values somewhere, but only if they're not defined (and log a warning using the logger, urging to migrate).\r\nWe'll then remove this once all instances are upgraded."", 'comment_created': datetime.datetime(2020, 6, 5, 20, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436153245, 'comment_body': ""I don't think we should be doing this.\r\nIn this section, some custom queries used in the tests are defined (we'll have to change this code to use register()), I think the definition of the test queries must stay here.\r\n"", 'comment_created': datetime.datetime(2020, 6, 5, 20, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436153707, 'comment_body': ""I don't like that `TimeseriesDB` is being instantiated each time.\r\n\r\nEither it needs to be instantiated once and used as a singleton or we should switch to using class methods only.\r\n\r\nI think the best path would be to instantiate it only once, and perform some basic checks during instantiation (eg: does the DB exist and can we connect to it? If not fail)."", 'comment_created': datetime.datetime(2020, 6, 5, 20, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 436167527, 'comment_body': ""What happens if we just create the database and it exists? Will it raise an exception? In this case I always prefer to “ask forgiveness not permission” and capture the exception. I feel it's also more pythonic"", 'comment_created': datetime.datetime(2020, 6, 5, 21, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436167886, 'comment_body': 'Same - forgiveness, not permission', 'comment_created': datetime.datetime(2020, 6, 5, 21, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436168820, 'comment_body': 'This will return a new instance everytime we write(), read() or query(). Use the singleton pattern, or at least something like:\r\n\r\n```\r\nif not self._db:\r\n    self._db = client.InfluxDBClient(...)\r\nreturn self._db\r\n```', 'comment_created': datetime.datetime(2020, 6, 5, 21, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436169491, 'comment_body': 'Not sure about this class. Have you taken inspiration from somewhere else?', 'comment_created': datetime.datetime(2020, 6, 5, 21, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436170580, 'comment_body': '+1 to instantiating it only once', 'comment_created': datetime.datetime(2020, 6, 5, 21, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436170876, 'comment_body': ""This function can be shortened like:\r\n\r\n```\r\nreturn self.config_dict['query'] or self._default_query\r\n```"", 'comment_created': datetime.datetime(2020, 6, 5, 21, 24, 48, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436171222, 'comment_body': ""This doesn't look like enough abstraction and it's very tied to the influxdb query yet"", 'comment_created': datetime.datetime(2020, 6, 5, 21, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436173002, 'comment_body': 'Please instantiate TimeseriesDB() only once and reuse it. Creating a new connection to the DB every time is costly', 'comment_created': datetime.datetime(2020, 6, 5, 21, 30, 49, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436173418, 'comment_body': 'I would leave the test queries in this file', 'comment_created': datetime.datetime(2020, 6, 5, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436278383, 'comment_body': 'This data structure needs to be retained but since queries of `influxdb` and other Timeseries db shall be different. I am unsure what might be the best place to store it so will put it in openwisp2/settings file currently.', 'comment_created': datetime.datetime(2020, 6, 6, 15, 43, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 436278409, 'comment_body': ""I checked few Timeseries dB query languages to realize that many things such as the basic operators, functions (includes sum) are common. Hence, didn't make any changes. Let me know if I should."", 'comment_created': datetime.datetime(2020, 6, 6, 15, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 436278417, 'comment_body': ""Simply put, don't verify whether the database exists. In case influxdb raises an exception complaining db exists, capture and hide the exception, right? If so, I am not sure how does it help, does it speed up things significantly (unsure here). I will make the changes @PabloCastellano but it would be great if you can explain what's the clear advantage."", 'comment_created': datetime.datetime(2020, 6, 6, 15, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 436278431, 'comment_body': 'From how Django does it https://github.com/django/django/blob/master/django/db/backends/sqlite3/creation.py', 'comment_created': datetime.datetime(2020, 6, 6, 15, 44, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 436278437, 'comment_body': 'Any suggestions :smiley:', 'comment_created': datetime.datetime(2020, 6, 6, 15, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 436351970, 'comment_body': '[This is a common Python coding style](https://docs.python.org/3.4/glossary.html#:~:text=Easier%20to%20ask%20for%20forgiveness,many%20try%20and%20except%20statements.).\r\n\r\nIn terms of speed, well, it will save one query (SHOW DATABASES) when the database does not exist and will remain the same when the database exists. The code is also much shorter and hence less prone to errors', 'comment_created': datetime.datetime(2020, 6, 7, 11, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436352127, 'comment_body': 'You can just move the test_query dictionary back to the settings file since that is the place where it will be useful', 'comment_created': datetime.datetime(2020, 6, 7, 11, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436352601, 'comment_body': 'FYI, there exists: [client.get_list_database()](https://influxdb-python.readthedocs.io/en/latest/api-documentation.html#influxdb.InfluxDBClient.get_list_database)', 'comment_created': datetime.datetime(2020, 6, 7, 11, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436352718, 'comment_body': 'If you want to follow the same pattern, you have to subclass `django.db.backends.base.creation.BaseDatabaseCreation` and reimplement the specific methods for influxdb as sqlite3 does\r\n', 'comment_created': datetime.datetime(2020, 6, 7, 11, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436353018, 'comment_body': ""I'm not convinced about this line. I think [this approach](https://github.com/django/django/blob/master/django/db/backends/sqlite3/creation.py#L24) is much better, it's clearer and doesn't modify settings without the user noticing"", 'comment_created': datetime.datetime(2020, 6, 7, 11, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436353040, 'comment_body': 'This method does many different things instead of just ""dropping the test database""\r\n\r\nWhy don\'t we just keep drop_database with db_name as parameter?', 'comment_created': datetime.datetime(2020, 6, 7, 11, 29, 28, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436353140, 'comment_body': 'Why did you merge both tearDownClass and tearDown?', 'comment_created': datetime.datetime(2020, 6, 7, 11, 30, 31, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 436881303, 'comment_body': 'from [influxdb-docs](https://docs.influxdata.com/influxdb/v1.8/query_language/manage-database/#create-database)\r\n>A successful CREATE DATABASE query returns an empty result. If you attempt to create a database that already exists, InfluxDB does nothing and does not return an error.\r\n\r\nSo, I can safely create database without using either (`look before you leap`, `ask for forgiveness not permission`) coding styles :smile:\r\n\r\n**PS**: Verified the same.', 'comment_created': datetime.datetime(2020, 6, 8, 17, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 436889644, 'comment_body': 'Same as above :smile: ', 'comment_created': datetime.datetime(2020, 6, 8, 17, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 436899157, 'comment_body': 'I think for now it is best to retain the original structure in openwisp2/settings since things shall change after `register/unregister chart` feature is added', 'comment_created': datetime.datetime(2020, 6, 8, 18, 11, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 439318128, 'comment_body': ""DatabaseClient subclassing a DatabaseException looks really weird, like if any of DatabaseClient and DatabaseException were an exception. I don't have a better name to suggest you, but will think about it"", 'comment_created': datetime.datetime(2020, 6, 12, 9, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 439320794, 'comment_body': 'Why do you check `or self._db._database != self.db_name`? When does it happen?\r\n\r\nAs I can see the only place where both self._db and self.db_name are instantiated is in this method', 'comment_created': datetime.datetime(2020, 6, 12, 9, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 439321652, 'comment_body': 'Please capitalize all the occurrences of influxdb as they use it originally: InfluxDB', 'comment_created': datetime.datetime(2020, 6, 12, 9, 50, 49, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 439322188, 'comment_body': ""I'm thinking that in the most common use of this class, the user always wants to use the same database (as opposed to instantiating DatabaseClient  and using the instance to create, delete, read and write from different databases.\r\n\r\nWhat do you think about allowing a `db_name` parameter optionally when instantiating this class?\r\n\r\ne.g.\r\n\r\n\r\n```\r\ndef __init__(self, db_name=None):\r\n    self._db = None\r\n    self.db_name = db_name or TIMESERIES_DB['NAME']\r\n```\r\n\r\nDoes it make sense?"", 'comment_created': datetime.datetime(2020, 6, 12, 9, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 439326541, 'comment_body': ""I see it too redundant, I like allowing the database parameter kwargs but `or self.db_name or TIMESERIES_DB['NAME']` seems excessive to me.\r\n\r\nI think it's safe to remove the last `or TIMESERIES_DB['NAME']`, since self.db_name will always be defined at that point, right?\r\n\r\n"", 'comment_created': datetime.datetime(2020, 6, 12, 10, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 439326979, 'comment_body': ""Can you explain what's up with the threading module?"", 'comment_created': datetime.datetime(2020, 6, 12, 10, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 439514550, 'comment_body': ""`self._db` was introduced to store InfluxDBClient as it's costly to make connection to InfluxDB every time as you correctly pointed it out. We might sometimes need a different InfluxDBClient instance (if we need to connect to a different db), thus we need to ignore existing instance and create a new connection in those cases.\r\n\r\nUse case `self._db` is stored with name `openwisp2` when apps are being loaded but during tests we need might need a different InfluxDB client (different database) thus ignore existing instance and make a new connection."", 'comment_created': datetime.datetime(2020, 6, 12, 16, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 440425443, 'comment_body': ""please let's keep backward compatibility with the settings used before, this will facilitate the upgrade.\r\n\r\nEg:\r\n\r\n```python\r\n{\r\n# ...\r\n    'USER': getattr(settings, 'INFLUXDB_USER', 'openwisp')\r\n# ...\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 6, 15, 20, 23, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440425734, 'comment_body': 'I think it should be `Please refer to the docs:\\n`', 'comment_created': datetime.datetime(2020, 6, 15, 20, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440427091, 'comment_body': ""This is almost surely wrong, I've never seen an exception being subclassed to implement features.\r\n\r\nSubclass `object` if there isn't anything better to subclass. Keep exceptions for errors and exceptional cases."", 'comment_created': datetime.datetime(2020, 6, 15, 20, 26, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440427708, 'comment_body': 'I think the `debug` level should be used here.', 'comment_created': datetime.datetime(2020, 6, 15, 20, 27, 59, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440427797, 'comment_body': 'I think the `debug` level should be used here.', 'comment_created': datetime.datetime(2020, 6, 15, 20, 28, 8, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440431592, 'comment_body': '`TimeseriesDB` should not be camel case because the convention is that camel case is used for classes.\r\n\r\nThis should be `timeseries_db`.', 'comment_created': datetime.datetime(2020, 6, 15, 20, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440431934, 'comment_body': ""Why isn't this just a property of `timeseries_db`, eg: `timeseries_db.queries`?"", 'comment_created': datetime.datetime(2020, 6, 15, 20, 36, 24, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440432758, 'comment_body': ""`epoch='s').get_points()` it's influxdb specific.\r\n\r\nget_points is a method of the influxdb client library, and is being called from models, hence models is still aware of inflxudb specific code, so the abstraction is not there yet. Abstraction means that `models.py` must not know anything about influxdb It must only call one method of the timeseries DB class, it's this class that will know what to do with the call.\r\n\r\nEg:\r\n\r\n```python\r\ntimeseries_db.get(q)\r\n```\r\n\r\nApplies to all other occurrences, please fix this."", 'comment_created': datetime.datetime(2020, 6, 15, 20, 38, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 440435023, 'comment_body': ""same logic applies, it's timeseries DB related code which must be delegated to the timeseries DB backend entirely, it should not be left lying around in here.\r\n\r\nLet's find a way to do that."", 'comment_created': datetime.datetime(2020, 6, 15, 20, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 443589805, 'comment_body': '@nepython can you use `cached_property` here? https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.functional.cached_property', 'comment_created': datetime.datetime(2020, 6, 22, 14, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 443592676, 'comment_body': 'move all the influxdb specific tests to a new test file in `/openwisp_monitoring/db/backends/influxdb/tests.py`', 'comment_created': datetime.datetime(2020, 6, 22, 14, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 443593203, 'comment_body': ""wait a moment, this is not influxdb specific, I think it shouldn't me moved out"", 'comment_created': datetime.datetime(2020, 6, 22, 14, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 443593827, 'comment_body': 'looks better now', 'comment_created': datetime.datetime(2020, 6, 22, 14, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 443595666, 'comment_body': ""let's change this so that if both `key` and `tags` are `None` this part is executed, passing `'all_metrics'` is weird."", 'comment_created': datetime.datetime(2020, 6, 22, 14, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 443597336, 'comment_body': 'improve how? If you can improve it further do so or remove the comment unless we can leave a more specific TODO comment that will be useful in the future.', 'comment_created': datetime.datetime(2020, 6, 22, 14, 25, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': '10b2ef9514583f443c91aaa9c0b21ab4ffa7d0ab', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd52cda94194a80907a73c4cb5ca132f7aad2386b', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0be2bf527783a9fbbe6fa48cc94cd77005e31a5d', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbc6db2afb5796d2110e867d6d77d69cb3ca3ee8', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '484bac4d2d8024b3d53b3265b3a25f4a3eecb6c5', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2e30adffa9db92825d1b15c182286dbf7715ec3', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22
441333083,[feature] Add an Alert Settings section in device admin #52,"### Blocked by #162
Closes #52, #67
This is how it looks, right now:
![Screenshot from 2020-07-07 22-01-16](https://user-images.githubusercontent.com/54471024/86813286-91fe9300-c09d-11ea-9d9a-9ca838504d26.png)",True,150,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/150,https://github.com/openwisp/openwisp-monitoring/pull/150,closed,147,22,12,1,4,13,1,0,[{'name': 'enhancement'}],2020-06-29 11:19:58+00:00,2020-07-25 01:48:00+00:00,2212082.0,"25 days, 14:28:02","[{'comment_id': 450397010, 'comment_body': 'By looking at the documentation, it looks like the obj parameter is not used. Can you double check it?\r\n\r\nhttps://docs.djangoproject.com/en/3.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.has_add_permission', 'comment_created': datetime.datetime(2020, 7, 6, 18, 12, 8, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 450579260, 'comment_body': 'is there a better way to have this test? The whitespace may be changed in django-netsted-admin and the test may fail because of that', 'comment_created': datetime.datetime(2020, 7, 7, 2, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 450579292, 'comment_body': ':point_up: ', 'comment_created': datetime.datetime(2020, 7, 7, 2, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 450581808, 'comment_body': 'I don\'t understand your reasoning: we renamed Threshold to Alert Settings exactly because we wanted to highlight that the alert settings are concentrated there and now we add a `send_alert` field on `Metric`, which is used for the purpose of mapping timeseries DB metrics to the data in django?\r\n\r\nIt doesn\'t make any sense to me.\r\n\r\nI think this should be moved to `AlertSettings` and should be simply called `is_active`.\r\nUse ""Alerts enabled"" as the field label, add an help_text like ""Whether alerts are enabled for this metric, uncheck to disable the alert without deleting the alert settings."".\r\n\r\nMake sure this field is show as first thing in the alert settings, when disabled the other fields should become readonly (readonly attribute and there\'s also a readonly css class to use) to improve UX.', 'comment_created': datetime.datetime(2020, 7, 7, 2, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 450582187, 'comment_body': ""use django.jQuery, it's more reliable, are you sure there's no other way to do this? Can't you just set extra=0?"", 'comment_created': datetime.datetime(2020, 7, 7, 2, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 450792743, 'comment_body': 'I am not sure, I guess we can simply test whether the response contains `AlertSettings` (might not be a full proof approach since if in future more tabs are added which also contain the term `AlertSettings` then this might be obsolete.)', 'comment_created': datetime.datetime(2020, 7, 7, 11, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 451284004, 'comment_body': 'are you sure this copies the list?\r\n\r\nthis is safer:\r\n\r\n```python\r\ninlines = list(super(DeviceAdmin, self).get_inlines(request, obj))\r\n```', 'comment_created': datetime.datetime(2020, 7, 8, 5, 1, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 451284384, 'comment_body': ""why are you using RunSQL?? I don't understand why we can't use a regular migration like all the other ones? Please explain."", 'comment_created': datetime.datetime(2020, 7, 8, 5, 2, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 451284451, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 7, 8, 5, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 451323890, 'comment_body': 'I stated it above https://github.com/openwisp/openwisp-monitoring/pull/150#issuecomment-654786288 (last para), maybe I should use inline comments :sweat_smile:', 'comment_created': datetime.datetime(2020, 7, 8, 6, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 451951211, 'comment_body': ""It's `inline` not `ModelAdmin`. Confirmed that `obj` parameter is passed.\r\nhttps://docs.djangoproject.com/en/3.0/ref/contrib/admin/#django.contrib.admin.InlineModelAdmin.has_add_permission"", 'comment_created': datetime.datetime(2020, 7, 9, 4, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 452572618, 'comment_body': ""I don't think we need `db_index=True` here, why did you add it?"", 'comment_created': datetime.datetime(2020, 7, 10, 1, 19, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 460348385, 'comment_body': 'keep in mind is always better to use CSS to do these kind of things', 'comment_created': datetime.datetime(2020, 7, 25, 1, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': 'ba485f994753d73f5d2d88fdb08f048f0032724c', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22
440045858,[feature] Add Monitoring Checks section in Device Admin #53,"Closes #53 
![Screenshot from 2020-06-25 19-07-10](https://user-images.githubusercontent.com/54471024/85734669-b5642e00-b6ec-11ea-86ba-2999cb8ad13e.png)

**PS** I have added check_inline.css as the default font-size of `Ping (Device: 08:00:27:04:8E:1C)` given by GenericTabularInline seems a bit small as can be seen in the pic above.",True,148,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/148,https://github.com/openwisp/openwisp-monitoring/pull/148,closed,82,1,2,1,2,2,0,0,[],2020-06-25 14:08:38+00:00,2020-07-07 03:06:30+00:00,997072.0,"11 days, 12:57:52","[{'comment_id': 449800518, 'comment_body': ""I would remove this because this will be in our way when we'll do a general redesign of the theme and use different font-sizes (we could use em instead of px for example)."", 'comment_created': datetime.datetime(2020, 7, 4, 19, 49, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 449869153, 'comment_body': ""It's displayed properly without this after using `GenericStackedInline`, so removed it :smiley: "", 'comment_created': datetime.datetime(2020, 7, 5, 11, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}]","[{'commit_sha': '90bf9c40948dad15040e617db05267172f8d7d7e', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22
463939567,[enhancement] Add way to specify global defaults,"<!--
Before submitting a Pull Request, please make sure you have read
the OpenWISP Contributing Guidelines:
http://openwisp.io/docs/developer/contributing.html#how-to-commit-your-changes-properly
-->

Checks:

- [x] I have manually tested the proposed changes
- [x] I have written new test cases to avoid regressions (if necessary)
- [x] I have updated the documentation (e.g. README.rst)

Closes #106
",True,185,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/185,https://github.com/openwisp/openwisp-monitoring/pull/185,closed,1334,526,30,1,5,39,1,0,[{'name': 'enhancement'}],2020-08-06 10:31:39+00:00,2020-08-18 01:07:07+00:00,1002928.0,"11 days, 14:35:28","[{'comment_id': 466627296, 'comment_body': '**Note**: This is a very small refactoring in `Readme`, not related to this PR. Same for below change.', 'comment_created': datetime.datetime(2020, 8, 6, 19, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 467337442, 'comment_body': 'what do you think about showing the ping metric as example sine it shows multiple charts?', 'comment_created': datetime.datetime(2020, 8, 8, 0, 31, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 467337806, 'comment_body': ""I don't see where these initial values are cleaned before saving if they are equal to the defaults, so that we avoid overwriting the NULL value unnecessarily, is it implemented? If yes, can you point it out to me (and point me to the test as well)?"", 'comment_created': datetime.datetime(2020, 8, 8, 0, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 467339382, 'comment_body': ""there's no real need of this line, it doesn't really provide any benefit, does it?\r\nYou should just do:\r\n\r\n```python\r\nfor alert_settings in AlertSettings.objects.all():\r\n```\r\n\r\nIt's readable and concise."", 'comment_created': datetime.datetime(2020, 8, 8, 0, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 467339809, 'comment_body': 'my first attempt died here:\r\n\r\n```\r\nmake_alertsettings_fields_null.py"", line 15, in make_fields_null\r\n    if alert_settings.threshold == alert_setting.config_dict[\'threshold\']:\r\nNameError: name \'alert_setting\' is not defined\r\n```\r\n\r\nYou\'re still not testing every line you write as I advised you many, many times. :-1:\r\nRemember: **untested code is broken by design**. \r\nThis is the 2nd very similar mistake in 2 different PRs in a very short time span, if you do this in a job interview, you would most likely have failed if the company is selective enough in their hiring process.\r\n\r\nPlease test your code :pray: :pray: :pray: !\r\n\r\nPS: now that I\'m correcting the issue in my own local copy in order to proceed to test the rest of the work, I noticed `flake8` highlights the mistake in my editor very evidently, it\'s time for you to enable a similar functionality in your editor.\r\n\r\n![Screenshot from 2020-08-07 19-53-16](https://user-images.githubusercontent.com/841044/89698658-02d8db00-d8e8-11ea-88ac-a39ea7e56e1f.png)\r\n', 'comment_created': datetime.datetime(2020, 8, 8, 0, 49, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 467342398, 'comment_body': 'please also write a backward migration which will help us to test this again at each iteration and will also allow us to switch branches more easily without headaches', 'comment_created': datetime.datetime(2020, 8, 8, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 467342609, 'comment_body': ""loading the reconstructed/simulated model from the migration framework won't work if you try to access methods defined in the concrete model"", 'comment_created': datetime.datetime(2020, 8, 8, 1, 10, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 467344124, 'comment_body': 'do you remember I mentioned this was a great chance to change this from using seconds to minutes? Since metrics are collected every X minutes, it makes more sense and is also more convenient when changing this value.', 'comment_created': datetime.datetime(2020, 8, 8, 1, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 467349407, 'comment_body': 'Watch out, the markdown link has been removed and only the square brackets have remained:\r\n\r\n![Screenshot from 2020-08-07 21-11-40](https://user-images.githubusercontent.com/841044/89700362-2d7c6100-d8f3-11ea-94e8-a41d1c6ee62f.png)\r\n\r\nThe device should be linked as the word ""default"" in the other sample notifications.\r\nApplies to the other alerts as well.\r\n\r\nIf in doubt, ask @pandafy.', 'comment_created': datetime.datetime(2020, 8, 8, 2, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 467475187, 'comment_body': 'This has been fixed now.\r\n\r\n**PS**: \r\n<p align=""center"">\r\n  <img width=""490"" height=""380"" src=""https://user-images.githubusercontent.com/54471024/89717039-2e36f500-d9d0-11ea-8614-7f347cc6e23e.png"">\r\n</p>\r\n', 'comment_created': datetime.datetime(2020, 8, 8, 15, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 467475401, 'comment_body': ""Thanks, the migration functions now won't make use of `AlertSettings`'s methods."", 'comment_created': datetime.datetime(2020, 8, 8, 15, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 467476275, 'comment_body': 'Yes, I too noticed this yesterday night and was working on `full_clean`. Added a regression test for the same,\r\nhttps://github.com/openwisp/openwisp-monitoring/blob/3f8215fc982161344eea40b390bb17934188595d/openwisp_monitoring/monitoring/tests/test_models.py#L254-L272\r\n', 'comment_created': datetime.datetime(2020, 8, 8, 15, 35, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 467628556, 'comment_body': 'I have added backward migrations but please note that there is a conversion of `seconds` --> `minutes` (for **tolerance** field) which will show a minor change. So, say if you had `seconds=61` for one `AlertSettings`  before migrating. After migrating and then running reverse migrations you will have `seconds=60`.', 'comment_created': datetime.datetime(2020, 8, 9, 21, 3, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 468041421, 'comment_body': ""methods named `get_` should not be decorated with `@property`.\r\n\r\nI see mainly two possibilities:\r\n\r\n- either leave these methods undecorated and call them like `instance.get_threshold()`\r\n- rename the model fields as `custom_<field_name>` and rename these decorated methods to remove `get_` \r\n\r\neg:\r\n\r\n```python\r\n@property\r\ndef tolerance(self):\r\n    return self.custom_tolerance or self.config_dict['tolerance']\r\n```"", 'comment_created': datetime.datetime(2020, 8, 10, 16, 48, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469594365, 'comment_body': 'I would just keep `threshold value`, which will be clear to most users', 'comment_created': datetime.datetime(2020, 8, 12, 23, 3, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469594738, 'comment_body': ""let's change this to something more explicit and useful:\r\n\r\n```\r\nfor how many minutes should the threshold value be crossed before an alert is sent? A value of zero means the alert is sent immediately\r\n```"", 'comment_created': datetime.datetime(2020, 8, 12, 23, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469595596, 'comment_body': 'Please summarize what the following example does.', 'comment_created': datetime.datetime(2020, 8, 12, 23, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469596814, 'comment_body': 'please remove ` anymore by our ping messages`', 'comment_created': datetime.datetime(2020, 8, 12, 23, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469596988, 'comment_body': ""let's change this to `is reachable again`"", 'comment_created': datetime.datetime(2020, 8, 12, 23, 11, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469597169, 'comment_body': 'here you can use the verb instead of duplicating ""is reachable again""', 'comment_created': datetime.datetime(2020, 8, 12, 23, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469597250, 'comment_body': ""let's remove ` again by our ping messages`"", 'comment_created': datetime.datetime(2020, 8, 12, 23, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469597982, 'comment_body': '`is not reachable`', 'comment_created': datetime.datetime(2020, 8, 12, 23, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469598177, 'comment_body': '`[{site.name}] PROBLEM: {notification.target} {notification.verb}`', 'comment_created': datetime.datetime(2020, 8, 12, 23, 15, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469599274, 'comment_body': ""what's this key used for? Is this shown to the user?"", 'comment_created': datetime.datetime(2020, 8, 12, 23, 18, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469599327, 'comment_body': 'make string translatable', 'comment_created': datetime.datetime(2020, 8, 12, 23, 18, 37, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469599386, 'comment_body': 'make string translatable', 'comment_created': datetime.datetime(2020, 8, 12, 23, 18, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469600025, 'comment_body': 'missing PROBLEM\r\n\r\nit should say something like: \r\n\r\nPROBLEM device X configuration status issue', 'comment_created': datetime.datetime(2020, 8, 12, 23, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469600594, 'comment_body': 'The configuration **of** device X ......... has not been applied in a timely manner.', 'comment_created': datetime.datetime(2020, 8, 12, 23, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469600765, 'comment_body': 'has been applied again successfully', 'comment_created': datetime.datetime(2020, 8, 12, 23, 23, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 469948166, 'comment_body': ""I am not sure how it is used internally, I didn't observe it via the admin. @pandafy might be able to confirm / correct me."", 'comment_created': datetime.datetime(2020, 8, 13, 13, 24, 50, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 470314114, 'comment_body': ""@nepython according to the [openwisp-notifications README](https://github.com/openwisp/openwisp-notifications/tree/dev#register-notification-type), this key is not required.\r\nPlease double check and remove it if it's not needed.\r\n@pandafy anything to add?"", 'comment_created': datetime.datetime(2020, 8, 14, 0, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 470572317, 'comment_body': '@nepython this is what is shown to the user. Please rename it to `verbose_name`. It was set incorrectly earlier. :sweat_smile: \r\nI fixed it in [#189](https://github.com/openwisp/openwisp-monitoring/pull/189/files#diff-583ce6230e4e945550ab510f1b8be8d8R154), but please make such changes here also. It will be used while [displaying notification settings](https://user-images.githubusercontent.com/32094433/89739293-2b560600-da9d-11ea-9bdb-ce92c89dc3be.gif). ', 'comment_created': datetime.datetime(2020, 8, 14, 11, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'pandafy', 'type': 'User'}, {'comment_id': 470726983, 'comment_body': 'should be `verbose_name`, right?', 'comment_created': datetime.datetime(2020, 8, 14, 16, 25, 7, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 470727009, 'comment_body': 'should be `verbose_name`, right?', 'comment_created': datetime.datetime(2020, 8, 14, 16, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 470727669, 'comment_body': 'should be `verbose_name`, right?', 'comment_created': datetime.datetime(2020, 8, 14, 16, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 470727704, 'comment_body': 'should be `verbose_name`, right?', 'comment_created': datetime.datetime(2020, 8, 14, 16, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 470728154, 'comment_body': 'does it have any effect changing `verbose_name` here? If it does, please include it in the example, eg: ""PING problem changed name"" or something like that.', 'comment_created': datetime.datetime(2020, 8, 14, 16, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 470728213, 'comment_body': 'same here', 'comment_created': datetime.datetime(2020, 8, 14, 16, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 470737460, 'comment_body': ""Yes, it will have. Earlier I wasn't very sure how helpful it might be earlier. It should be after `Notification Settings`, I think. Added the `verbose_name` as `Configuration PROBLEM` (default is `Configuration Applied PROBLEM` so just shortened it)."", 'comment_created': datetime.datetime(2020, 8, 14, 16, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}]","[{'commit_sha': 'fccba184e95f59e32ff27dd159b13a59d45973ab', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22
449683851,[timeseries] Add initial support for elasticsearch #99,"<!--
Before submitting a Pull Request, please make sure you have read
the OpenWISP Contributing Guidelines:
http://openwisp.io/docs/developer/contributing.html#how-to-commit-your-changes-properly
-->
Checks:

- [x] I have manually tested the proposed changes
- [x] I have written new test cases to avoid regressions (if necessary)
- [x] I have updated the documentation (e.g. README.rst)

Closes #99, #68

**Need Help**
There is one test (test_get_device_metrics_csv) failing on travis  (it's probably caused by `cardinality aggregation` counting `None` from `date_histogram` as a value). I am unable to find a solution to this. In real case this should be rare as can be confirmed by the passing of `test_wifi_hostapd`.

**PS**: Query posted on https://discuss.elastic.co/t/cardinality-aggregation-always-returning-one-extra-count/243462",False,164,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/164,https://github.com/openwisp/openwisp-monitoring/pull/164,open,1356,155,26,1,4,24,2,0,"[{'name': 'enhancement'}, {'name': 'timeseries'}]",2020-07-15 19:23:35+00:00,,0.0,,"[{'comment_id': 460354517, 'comment_body': ""why don't you change the code so that calling this functon from the configuration is not necessary?\r\nYou can loop over the data structure and call it when it's initialized, this way we make things easy for users and we avoid them come to complain to us in the support channels :joy: "", 'comment_created': datetime.datetime(2020, 7, 25, 2, 44, 10, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 460354677, 'comment_body': '`add_doc`?', 'comment_created': datetime.datetime(2020, 7, 25, 2, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 460354695, 'comment_body': '`obj`? ', 'comment_created': datetime.datetime(2020, 7, 25, 2, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 460354727, 'comment_body': ""why can't this be imported at the top of the file"", 'comment_created': datetime.datetime(2020, 7, 25, 2, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 460355144, 'comment_body': 'we should make both this and the influxdb client lib optional and move these to the extra_require in setup.py, see https://github.com/openwisp/openwisp-utils/blob/master/setup.py#L49-L60\r\nwe should have `inflxudb` and `elasticsearch`, is a cleaner solution.\r\nIn the build you can install everything with `pip install -e .[influxdb,elasticsearch]`', 'comment_created': datetime.datetime(2020, 7, 25, 2, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 460355315, 'comment_body': 'we should have an equivalent test for elasticsearch', 'comment_created': datetime.datetime(2020, 7, 25, 2, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 460355336, 'comment_body': ':eyes: ', 'comment_created': datetime.datetime(2020, 7, 25, 2, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 460826309, 'comment_body': ""This function is not actually required. I had added it initially to index all existing metrics in one go (right now this will happen whenever there's a metric write). I was not sure whether it is useful anymore or not, will remove it if it's having no use when the PR is ready :smiley: "", 'comment_created': datetime.datetime(2020, 7, 27, 11, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 460827219, 'comment_body': ""I was working on having a Test class which is easily switchable between `influxdb` and `elasticsearch`, didn't push the latest changes :sweat_smile: "", 'comment_created': datetime.datetime(2020, 7, 27, 11, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 460830416, 'comment_body': 'Yes. Suppose the `find_metric` function receives `device_data` metric with some tags. Then `device_data` would be an index whereas for every unique set of tags there shall be a new document created in the `device_data` index.\r\n\r\nThis function will check if index exists then add the document to it, else create the index and then add the document to it.\r\n\r\nLet me know if I am able to explain it clearly :sweat_smile:', 'comment_created': datetime.datetime(2020, 7, 27, 11, 40, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 461000940, 'comment_body': ""Basically it's a object of Document class, I can't think of a good name, `obj` is very generic name agreed (maybe that's why they used it in `elasticsearch-dsl docs` :sweat_smile:). Unsure should I name it `doc` or any better suggestion?"", 'comment_created': datetime.datetime(2020, 7, 27, 16, 5, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 461009757, 'comment_body': ""Yes that can be done and I have done the same for built-in charts. `_make_query` is just a utility function which will update the aggregation for a `default_chart_query` defined in **openwisp_monitoring.db.backends.elasticsearch.queries**. So queries returned via `_make_query` will always retain the structure of `default_chart_query`.\r\n\r\nI wanted to leave the option of directly using a dsl query with `timeseries_db.query`, exactly like how we can query InfluxDB directly using the same function.\r\n\r\nA full **dsl** query will look like this,\r\n```python\r\n{'query': {'nested': {'path': 'tags',\r\n   'query': {'bool': {'must': [{'match': {'tags.object_id': {'query': '9a39a5ae-146b-4a50-b113-f9381b8c1721'}}},\r\n      {'match': {'tags.content_type': {'query': 'config.device'}}}]}}}},\r\n '_source': False,\r\n 'size': 0,\r\n 'aggs': {'GroupByTime': {'nested': {'path': 'points',\r\n    'aggs': {'set_range': {'filter': {'range': {'points.time': {'from': 'now-1d/d',\r\n         'to': 'now/d'}}},\r\n      'aggs': {'time': {'date_histogram': {'field': 'points.time',\r\n         'fixed_interval': '10m',\r\n         'format': 'date_time_no_millis',\r\n         'order': {'_key': 'desc'},\r\n         'time_zone': 'Asia/Kolkata'},\r\n        'aggs': {'nest': {'nested': {'path': 'points.fields',\r\n           'aggs': {'CPU_load': {'avg': {'field': 'points.fields.cpu_usage'}}}}}}}}}}}}}}\r\n```\r\n\r\nSo, if we make `_make_query` as a compulsion, we might be cutting down a user's freedom to query via **DSL**. Personally, I would like to give user this freedom (this would enable him to just put a query like above in chart configuration and it will work) :smile:."", 'comment_created': datetime.datetime(2020, 7, 27, 16, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 461218010, 'comment_body': 'ok :+1: ', 'comment_created': datetime.datetime(2020, 7, 27, 22, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 461218626, 'comment_body': ""it's the name of the function that troubles me, why is it named `add_doc`?"", 'comment_created': datetime.datetime(2020, 7, 27, 23, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 461219565, 'comment_body': 'does `MetricIndex()` generate a new document? A new index? According to the answer to this question, rename the var accordingly', 'comment_created': datetime.datetime(2020, 7, 27, 23, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 461219673, 'comment_body': 'use `key, value`, make your code more readable', 'comment_created': datetime.datetime(2020, 7, 27, 23, 4, 21, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 461219916, 'comment_body': 'why is this called `INFLUXDB_SETTINGS`?', 'comment_created': datetime.datetime(2020, 7, 27, 23, 5, 4, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 461219974, 'comment_body': 'why is this called `ELASTICSEARCH_SETTINGS`?', 'comment_created': datetime.datetime(2020, 7, 27, 23, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 461492864, 'comment_body': ""We don't need to run Elasticsearch in a High Available environment. Testing HA capabilities is ElasticSearch's job :smiley: . We can simply make sure that setting up a multi-nodes cluster works but IMHO it is enough for us to run tests in only one instance.\r\n\r\nWDYT?"", 'comment_created': datetime.datetime(2020, 7, 28, 10, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'PabloCastellano', 'type': 'User'}, {'comment_id': 461536344, 'comment_body': ""Ok, answering for this one and below question too. I thought it might be better to have two data structure named `INFLUXDB_SETTINGS` and `ELASTICSEARCH_SETTINGS`. `TIMESERIES_DATABASE` would be one of the two (defaulting to `INFLUXDB`) depending on whether the environment variable `elasticsearch` is set or not. This would help to run tests for both the databases at the same time. Check `.travis.yml` and you will get a better idea of how it's working. This has been added purely for testing purposes, the users do not need to define it.\r\n\r\nIf you have a better idea of how this can be done then let me know, thanks!"", 'comment_created': datetime.datetime(2020, 7, 28, 12, 21, 29, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 461538482, 'comment_body': 'Since the primary task of the function is to **add a document to elasticsearch**. I am not sure if the name is creating confusion since I am unable to think how :sweat_smile:. I can add a docstring to avoid any confusions.', 'comment_created': datetime.datetime(2020, 7, 28, 12, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 461541594, 'comment_body': ""I agree though there are some problems that I was facing with elasticsearch docker due to which too I am using two nodes :sweat_smile:. Can you please check out if it's possible to run elasticsearch on a single port (I am not sure about this as I could not :/ ) and then I can adapt. Thanks!"", 'comment_created': datetime.datetime(2020, 7, 28, 12, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 462664822, 'comment_body': ""this is called INFLUXDB_SETTINGS but it loads elasticsearch, why? Doesn't make sense to me"", 'comment_created': datetime.datetime(2020, 7, 30, 0, 29, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 462664896, 'comment_body': 'same concept here', 'comment_created': datetime.datetime(2020, 7, 30, 0, 29, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}]","[{'commit_sha': '044a29f6535483358b6d334355157d77dddb2b5b', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22
471725397,[docs] Update Readme #70,"<!--
Before submitting a Pull Request, please make sure you have read
the OpenWISP Contributing Guidelines:
http://openwisp.io/docs/developer/contributing.html#how-to-commit-your-changes-properly
-->

Checks:

- ~~[ ] I have manually tested the proposed changes~~
- ~~[ ] I have written new test cases to avoid regressions (if necessary)~~
- [x] I have updated the documentation (e.g. README.rst)

* [x] Badges as other OpenWISP modules
* [x] `run_checks` command (maybe something similar to https://github.com/openwisp/django-freeradius/blob/master/docs/source/general/management_commands.rst)
* [x] Signals Missing:
 * pre_metric_write
 * post_metric_write
 * health_status_changed
* [ ] Images (`AlertSettings Inline`, `Checks Inline`, `Metric Health`) and GIF need to be updated as per latest changes.
* [x] Reference to `OPENWISP_MONITORING_DEVICE_CONFIG_CHECK_MAX_TIME` setting needs to be removed from https://github.com/openwisp/openwisp-monitoring/tree/dev#configuration-applied (somehow missed to notice it until now :/).

Closes #70",True,209,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/209,https://github.com/openwisp/openwisp-monitoring/pull/209,closed,176,16,6,1,4,17,1,0,[{'name': 'documentation'}],2020-08-21 16:19:28+00:00,2020-08-28 02:37:44+00:00,555496.0,"6 days, 10:18:16","[{'comment_id': 476137198, 'comment_body': 'this is not a code sample, remove the double slant quotes please', 'comment_created': datetime.datetime(2020, 8, 25, 4, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476137247, 'comment_body': 'this is not a code sample, remove the double slant quotes please', 'comment_created': datetime.datetime(2020, 8, 25, 4, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476157012, 'comment_body': 'I have also removed for the one below it, **List of endpoints**', 'comment_created': datetime.datetime(2020, 8, 25, 4, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 476998971, 'comment_body': ""isn't the key parameter necessary to access this?"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999010, 'comment_body': ""isn't the key parameter necessary to post data?"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999214, 'comment_body': 'I would also specify calling without `?status=true` will only return the chart data.', 'comment_created': datetime.datetime(2020, 8, 26, 2, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999336, 'comment_body': 'Retrieve device charts and device status data', 'comment_created': datetime.datetime(2020, 8, 26, 2, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999428, 'comment_body': 'Collect device metrics and status', 'comment_created': datetime.datetime(2020, 8, 26, 2, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999851, 'comment_body': 'before the write operation is sent to the timeseries database', 'comment_created': datetime.datetime(2020, 8, 26, 2, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477001154, 'comment_body': 'after the write operation is sent to the timeseries database. Since the write operation is run in the background and may be retried on failures, using the ``post_metric_write`` signal does not guarantee the receiver function will be called after the data has been written, only after the request to write it has been sent.', 'comment_created': datetime.datetime(2020, 8, 26, 2, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477245901, 'comment_body': 'The second line seems a bit confusing to me (the part starting from *only).', 'comment_created': datetime.datetime(2020, 8, 26, 12, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 477891706, 'comment_body': ""feel free to improve it if you find it confusing, you can also seek feedback from other people in the community, my english is not so great after all so it's very good to seek counsel from others"", 'comment_created': datetime.datetime(2020, 8, 27, 1, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477894652, 'comment_body': ""this is the most important signal, let's move it up to the first signal listed, pre metric and post metric write should go last."", 'comment_created': datetime.datetime(2020, 8, 27, 1, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477898987, 'comment_body': 'We should mention that the status used is inspired by **NetJSON DeviceMonitoring** and link to http://netjson.org/docs/what.html#devicemonitoring', 'comment_created': datetime.datetime(2020, 8, 27, 1, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477899121, 'comment_body': 'We should mention that the status used is inspired by **NetJSON DeviceMonitoring** and link to http://netjson.org/docs/what.html#devicemonitoring', 'comment_created': datetime.datetime(2020, 8, 27, 1, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477899753, 'comment_body': ""let's mention **NetJSON DeviceMonitoring** and link to http://netjson.org/docs/what.html#devicemonitoring here as well please"", 'comment_created': datetime.datetime(2020, 8, 27, 1, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 478528550, 'comment_body': 'How about below one, we simply break the sentence\r\nSince the write operation is run in the background and may be retried on failures, using the post_metric_write signal does not guarantee the receiver function will be called after the data has been written. It only indicates that the request to write data has been sent.', 'comment_created': datetime.datetime(2020, 8, 27, 16, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}]","[{'commit_sha': '55af5dea52e2ad821244cf85f9c8a43a1a86c806', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22
471725397,[docs] Update Readme #70,"<!--
Before submitting a Pull Request, please make sure you have read
the OpenWISP Contributing Guidelines:
http://openwisp.io/docs/developer/contributing.html#how-to-commit-your-changes-properly
-->

Checks:

- ~~[ ] I have manually tested the proposed changes~~
- ~~[ ] I have written new test cases to avoid regressions (if necessary)~~
- [x] I have updated the documentation (e.g. README.rst)

* [x] Badges as other OpenWISP modules
* [x] `run_checks` command (maybe something similar to https://github.com/openwisp/django-freeradius/blob/master/docs/source/general/management_commands.rst)
* [x] Signals Missing:
 * pre_metric_write
 * post_metric_write
 * health_status_changed
* [ ] Images (`AlertSettings Inline`, `Checks Inline`, `Metric Health`) and GIF need to be updated as per latest changes.
* [x] Reference to `OPENWISP_MONITORING_DEVICE_CONFIG_CHECK_MAX_TIME` setting needs to be removed from https://github.com/openwisp/openwisp-monitoring/tree/dev#configuration-applied (somehow missed to notice it until now :/).

Closes #70",True,209,https://api.github.com/repos/openwisp/openwisp-monitoring/pulls/209,https://github.com/openwisp/openwisp-monitoring/pull/209,closed,176,16,6,1,4,17,1,0,[{'name': 'documentation'}],2020-08-21 16:19:28+00:00,2020-08-28 02:37:44+00:00,555496.0,"6 days, 10:18:16","[{'comment_id': 476137198, 'comment_body': 'this is not a code sample, remove the double slant quotes please', 'comment_created': datetime.datetime(2020, 8, 25, 4, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476137247, 'comment_body': 'this is not a code sample, remove the double slant quotes please', 'comment_created': datetime.datetime(2020, 8, 25, 4, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476157012, 'comment_body': 'I have also removed for the one below it, **List of endpoints**', 'comment_created': datetime.datetime(2020, 8, 25, 4, 29, 16, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 476998971, 'comment_body': ""isn't the key parameter necessary to access this?"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999010, 'comment_body': ""isn't the key parameter necessary to post data?"", 'comment_created': datetime.datetime(2020, 8, 26, 2, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999214, 'comment_body': 'I would also specify calling without `?status=true` will only return the chart data.', 'comment_created': datetime.datetime(2020, 8, 26, 2, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999336, 'comment_body': 'Retrieve device charts and device status data', 'comment_created': datetime.datetime(2020, 8, 26, 2, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999428, 'comment_body': 'Collect device metrics and status', 'comment_created': datetime.datetime(2020, 8, 26, 2, 44, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 476999851, 'comment_body': 'before the write operation is sent to the timeseries database', 'comment_created': datetime.datetime(2020, 8, 26, 2, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477001154, 'comment_body': 'after the write operation is sent to the timeseries database. Since the write operation is run in the background and may be retried on failures, using the ``post_metric_write`` signal does not guarantee the receiver function will be called after the data has been written, only after the request to write it has been sent.', 'comment_created': datetime.datetime(2020, 8, 26, 2, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477245901, 'comment_body': 'The second line seems a bit confusing to me (the part starting from *only).', 'comment_created': datetime.datetime(2020, 8, 26, 12, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}, {'comment_id': 477891706, 'comment_body': ""feel free to improve it if you find it confusing, you can also seek feedback from other people in the community, my english is not so great after all so it's very good to seek counsel from others"", 'comment_created': datetime.datetime(2020, 8, 27, 1, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477894652, 'comment_body': ""this is the most important signal, let's move it up to the first signal listed, pre metric and post metric write should go last."", 'comment_created': datetime.datetime(2020, 8, 27, 1, 46, 38, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477898987, 'comment_body': 'We should mention that the status used is inspired by **NetJSON DeviceMonitoring** and link to http://netjson.org/docs/what.html#devicemonitoring', 'comment_created': datetime.datetime(2020, 8, 27, 1, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477899121, 'comment_body': 'We should mention that the status used is inspired by **NetJSON DeviceMonitoring** and link to http://netjson.org/docs/what.html#devicemonitoring', 'comment_created': datetime.datetime(2020, 8, 27, 1, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 477899753, 'comment_body': ""let's mention **NetJSON DeviceMonitoring** and link to http://netjson.org/docs/what.html#devicemonitoring here as well please"", 'comment_created': datetime.datetime(2020, 8, 27, 1, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'nemesifier', 'type': 'User'}, {'comment_id': 478528550, 'comment_body': 'How about below one, we simply break the sentence\r\nSince the write operation is run in the background and may be retried on failures, using the post_metric_write signal does not guarantee the receiver function will be called after the data has been written. It only indicates that the request to write data has been sent.', 'comment_created': datetime.datetime(2020, 8, 27, 16, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'nepython', 'type': 'User'}]","[{'commit_sha': '55af5dea52e2ad821244cf85f9c8a43a1a86c806', 'committer_username': 'nepython', 'committer_name': 'Hardik Jain', 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 24, 10, 14, 59, tzinfo=datetime.timezone.utc)}]",Hardik Jain,54471024,,User,,42,,7,22

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
248636968,openwisp-monitoring,openwisp/openwisp-monitoring,Python,107,160,12,21,573,42,19,9,"[{'id': 544953344, 'number': 259, 'closed': datetime.datetime(2020, 12, 23, 18, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 23, 17, 33, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1750.0, 'time_delta': '0:29:10', 'additions': 11, 'deletions': 11, 'state': 'closed'}, {'id': 543039781, 'number': 258, 'closed': datetime.datetime(2021, 1, 31, 18, 58, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 20, 9, 7, 55, tzinfo=datetime.timezone.utc), 'time_taken': 3664256.0, 'time_delta': '42 days, 9:50:56', 'additions': 129, 'deletions': 0, 'state': 'closed'}, {'id': 523196728, 'number': 253, 'closed': datetime.datetime(2020, 12, 2, 17, 37, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 18, 13, 45, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1223528.0, 'time_delta': '14 days, 3:52:08', 'additions': 489, 'deletions': 0, 'state': 'closed'}, {'id': 509430118, 'number': 246, 'closed': datetime.datetime(2020, 11, 10, 15, 9, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 24, 13, 13, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1475742.0, 'time_delta': '17 days, 1:55:42', 'additions': 82, 'deletions': 12, 'state': 'closed'}, {'id': 493495793, 'number': 237, 'closed': datetime.datetime(2020, 10, 6, 2, 49, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 26, 6, 1, 46, tzinfo=datetime.timezone.utc), 'time_taken': 852481.0, 'time_delta': '9 days, 20:48:01', 'additions': 41, 'deletions': 34, 'state': 'closed'}, {'id': 491772696, 'number': 235, 'closed': datetime.datetime(2020, 9, 30, 3, 25, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 23, 13, 13, 31, tzinfo=datetime.timezone.utc), 'time_taken': 569532.0, 'time_delta': '6 days, 14:12:12', 'additions': 48, 'deletions': 8, 'state': 'closed'}, {'id': 477827754, 'number': 230, 'closed': datetime.datetime(2020, 9, 6, 22, 26, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 2, 13, 39, 14, tzinfo=datetime.timezone.utc), 'time_taken': 377216.0, 'time_delta': '4 days, 8:46:56', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 477146697, 'number': 228, 'closed': datetime.datetime(2020, 9, 8, 4, 31, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 1, 15, 5, 9, tzinfo=datetime.timezone.utc), 'time_taken': 566762.0, 'time_delta': '6 days, 13:26:02', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 477126959, 'number': 227, 'closed': datetime.datetime(2020, 9, 9, 22, 26, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 1, 14, 37, 30, tzinfo=datetime.timezone.utc), 'time_taken': 719328.0, 'time_delta': '8 days, 7:48:48', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 475303170, 'number': 222, 'closed': datetime.datetime(2020, 8, 28, 23, 33, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 9, 45, 49, tzinfo=datetime.timezone.utc), 'time_taken': 49647.0, 'time_delta': '13:47:27', 'additions': 34, 'deletions': 3, 'state': 'closed'}, {'id': 475279604, 'number': 221, 'closed': datetime.datetime(2020, 8, 31, 1, 21, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 8, 58, 18, tzinfo=datetime.timezone.utc), 'time_taken': 231788.0, 'time_delta': '2 days, 16:23:08', 'additions': 2142, 'deletions': 733, 'state': 'closed'}, {'id': 474418036, 'number': 220, 'closed': datetime.datetime(2020, 8, 29, 19, 3, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 27, 3, 13, 58, tzinfo=datetime.timezone.utc), 'time_taken': 229789.0, 'time_delta': '2 days, 15:49:49', 'additions': 16, 'deletions': 5, 'state': 'closed'}, {'id': 474055240, 'number': 217, 'closed': datetime.datetime(2020, 8, 29, 19, 6, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 17, 37, 9, tzinfo=datetime.timezone.utc), 'time_taken': 264536.0, 'time_delta': '3 days, 1:28:56', 'additions': 76, 'deletions': 53, 'state': 'closed'}, {'id': 473278479, 'number': 216, 'closed': datetime.datetime(2020, 8, 27, 2, 17, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 15, 16, 11, tzinfo=datetime.timezone.utc), 'time_taken': 126086.0, 'time_delta': '1 day, 11:01:26', 'additions': 32, 'deletions': 10, 'state': 'closed'}, {'id': 473263676, 'number': 215, 'closed': datetime.datetime(2020, 8, 26, 3, 0, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 25, 14, 53, 45, tzinfo=datetime.timezone.utc), 'time_taken': 43589.0, 'time_delta': '12:06:29', 'additions': 16, 'deletions': 1, 'state': 'closed'}, {'id': 472087462, 'number': 213, 'closed': datetime.datetime(2020, 8, 24, 0, 4, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 23, 7, 30, 58, tzinfo=datetime.timezone.utc), 'time_taken': 59624.0, 'time_delta': '16:33:44', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 471725397, 'number': 209, 'closed': datetime.datetime(2020, 8, 28, 2, 37, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 16, 19, 28, tzinfo=datetime.timezone.utc), 'time_taken': 555496.0, 'time_delta': '6 days, 10:18:16', 'additions': 176, 'deletions': 16, 'state': 'closed'}, {'id': 470238069, 'number': 201, 'closed': datetime.datetime(2020, 8, 21, 2, 49, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 19, 15, 20, 58, tzinfo=datetime.timezone.utc), 'time_taken': 127705.0, 'time_delta': '1 day, 11:28:25', 'additions': 62, 'deletions': 0, 'state': 'closed'}, {'id': 469433653, 'number': 200, 'closed': datetime.datetime(2020, 8, 20, 0, 8, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 11, 24, 57, tzinfo=datetime.timezone.utc), 'time_taken': 132198.0, 'time_delta': '1 day, 12:43:18', 'additions': 15, 'deletions': 30, 'state': 'closed'}, {'id': 469308268, 'number': 199, 'closed': datetime.datetime(2020, 8, 21, 20, 44, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 8, 53, 38, tzinfo=datetime.timezone.utc), 'time_taken': 301840.0, 'time_delta': '3 days, 11:50:40', 'additions': 92, 'deletions': 17, 'state': 'closed'}, {'id': 469283650, 'number': 198, 'closed': datetime.datetime(2020, 8, 20, 0, 9, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 18, 8, 10, 12, tzinfo=datetime.timezone.utc), 'time_taken': 143959.0, 'time_delta': '1 day, 15:59:19', 'additions': 19, 'deletions': 21, 'state': 'closed'}, {'id': 466334472, 'number': 192, 'closed': datetime.datetime(2020, 8, 13, 1, 46, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 11, 20, 20, 23, tzinfo=datetime.timezone.utc), 'time_taken': 105974.0, 'time_delta': '1 day, 5:26:14', 'additions': 36, 'deletions': 2, 'state': 'closed'}, {'id': 465555268, 'number': 190, 'closed': datetime.datetime(2020, 8, 14, 20, 39, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 10, 14, 59, 39, tzinfo=datetime.timezone.utc), 'time_taken': 366014.0, 'time_delta': '4 days, 5:40:14', 'additions': 161, 'deletions': 37, 'state': 'closed'}, {'id': 464468488, 'number': 188, 'closed': datetime.datetime(2020, 8, 7, 23, 31, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 8, 25, 46, tzinfo=datetime.timezone.utc), 'time_taken': 54372.0, 'time_delta': '15:06:12', 'additions': 1909, 'deletions': 450, 'state': 'closed'}, {'id': 463939567, 'number': 185, 'closed': datetime.datetime(2020, 8, 18, 1, 7, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 10, 31, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1002928.0, 'time_delta': '11 days, 14:35:28', 'additions': 1334, 'deletions': 526, 'state': 'closed'}, {'id': 458701871, 'number': 180, 'closed': datetime.datetime(2020, 7, 31, 16, 53, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 21, 11, 33, tzinfo=datetime.timezone.utc), 'time_taken': 157329.0, 'time_delta': '1 day, 19:42:09', 'additions': 71, 'deletions': 18, 'state': 'closed'}, {'id': 458306954, 'number': 176, 'closed': datetime.datetime(2020, 7, 29, 14, 21, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 29, 9, 19, 13, tzinfo=datetime.timezone.utc), 'time_taken': 18156.0, 'time_delta': '5:02:36', 'additions': 3, 'deletions': 5, 'state': 'closed'}, {'id': 449683851, 'number': 164, 'closed': None, 'created': datetime.datetime(2020, 7, 15, 19, 23, 35, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1356, 'deletions': 155, 'state': 'open'}, {'id': 447367775, 'number': 162, 'closed': datetime.datetime(2020, 7, 24, 17, 52, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 10, 44, 59, tzinfo=datetime.timezone.utc), 'time_taken': 1235256.0, 'time_delta': '14 days, 7:07:36', 'additions': 211, 'deletions': 129, 'state': 'closed'}, {'id': 444382937, 'number': 154, 'closed': datetime.datetime(2020, 7, 7, 2, 3, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 5, 9, 39, 45, tzinfo=datetime.timezone.utc), 'time_taken': 145419.0, 'time_delta': '1 day, 16:23:39', 'additions': 64, 'deletions': 32, 'state': 'closed'}, {'id': 443603945, 'number': 152, 'closed': datetime.datetime(2020, 7, 4, 19, 34, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 15, 47, 53, tzinfo=datetime.timezone.utc), 'time_taken': 186412.0, 'time_delta': '2 days, 3:46:52', 'additions': 92, 'deletions': 51, 'state': 'closed'}, {'id': 441333083, 'number': 150, 'closed': datetime.datetime(2020, 7, 25, 1, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 11, 19, 58, tzinfo=datetime.timezone.utc), 'time_taken': 2212082.0, 'time_delta': '25 days, 14:28:02', 'additions': 147, 'deletions': 22, 'state': 'closed'}, {'id': 440045858, 'number': 148, 'closed': datetime.datetime(2020, 7, 7, 3, 6, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 25, 14, 8, 38, tzinfo=datetime.timezone.utc), 'time_taken': 997072.0, 'time_delta': '11 days, 12:57:52', 'additions': 82, 'deletions': 1, 'state': 'closed'}, {'id': 439370742, 'number': 147, 'closed': datetime.datetime(2020, 7, 4, 19, 30, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 18, 10, 22, tzinfo=datetime.timezone.utc), 'time_taken': 868798.0, 'time_delta': '10 days, 1:19:58', 'additions': 7, 'deletions': 2, 'state': 'closed'}, {'id': 439173979, 'number': 146, 'closed': datetime.datetime(2020, 6, 25, 16, 43, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 12, 25, 56, tzinfo=datetime.timezone.utc), 'time_taken': 101872.0, 'time_delta': '1 day, 4:17:52', 'additions': 42, 'deletions': 15, 'state': 'closed'}, {'id': 439111827, 'number': 145, 'closed': datetime.datetime(2020, 7, 4, 19, 28, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 24, 10, 23, 57, tzinfo=datetime.timezone.utc), 'time_taken': 896698.0, 'time_delta': '10 days, 9:04:58', 'additions': 79, 'deletions': 7, 'state': 'closed'}, {'id': 438816308, 'number': 144, 'closed': datetime.datetime(2020, 6, 24, 0, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 20, 54, 51, tzinfo=datetime.timezone.utc), 'time_taken': 11589.0, 'time_delta': '3:13:09', 'additions': 116, 'deletions': 70, 'state': 'closed'}, {'id': 438094484, 'number': 142, 'closed': datetime.datetime(2020, 7, 4, 20, 55, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 17, 56, 24, tzinfo=datetime.timezone.utc), 'time_taken': 1047531.0, 'time_delta': '12 days, 2:58:51', 'additions': 78, 'deletions': 61, 'state': 'closed'}, {'id': 437847520, 'number': 141, 'closed': datetime.datetime(2020, 6, 22, 14, 8, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 22, 10, 35, 59, tzinfo=datetime.timezone.utc), 'time_taken': 12743.0, 'time_delta': '3:32:23', 'additions': 6, 'deletions': 8, 'state': 'closed'}, {'id': 436345152, 'number': 137, 'closed': datetime.datetime(2020, 6, 20, 3, 17, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 18, 9, 25, 35, tzinfo=datetime.timezone.utc), 'time_taken': 150719.0, 'time_delta': '1 day, 17:51:59', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 434754450, 'number': 134, 'closed': datetime.datetime(2020, 6, 21, 19, 29, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 20, 5, 39, tzinfo=datetime.timezone.utc), 'time_taken': 516258.0, 'time_delta': '5 days, 23:24:18', 'additions': 197, 'deletions': 199, 'state': 'closed'}, {'id': 434619175, 'number': 132, 'closed': datetime.datetime(2020, 6, 15, 21, 5, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 15, 15, 36, 23, tzinfo=datetime.timezone.utc), 'time_taken': 19743.0, 'time_delta': '5:29:03', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 434045956, 'number': 130, 'closed': datetime.datetime(2020, 6, 13, 19, 25, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 13, 19, 24, 46, tzinfo=datetime.timezone.utc), 'time_taken': 35.0, 'time_delta': '0:00:35', 'additions': 55, 'deletions': 1, 'state': 'closed'}, {'id': 433004585, 'number': 126, 'closed': datetime.datetime(2020, 6, 22, 14, 51, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 11, 8, 13, tzinfo=datetime.timezone.utc), 'time_taken': 963820.0, 'time_delta': '11 days, 3:43:40', 'additions': 69, 'deletions': 14, 'state': 'closed'}, {'id': 432678204, 'number': 123, 'closed': datetime.datetime(2020, 8, 1, 0, 15, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 20, 19, 33, tzinfo=datetime.timezone.utc), 'time_taken': 4420564.0, 'time_delta': '51 days, 3:56:04', 'additions': 432, 'deletions': 46, 'state': 'closed'}, {'id': 432334234, 'number': 121, 'closed': datetime.datetime(2020, 6, 22, 14, 49, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 10, 9, 38, 31, tzinfo=datetime.timezone.utc), 'time_taken': 1055443.0, 'time_delta': '12 days, 5:10:43', 'additions': 57, 'deletions': 6, 'state': 'closed'}, {'id': 428586605, 'number': 117, 'closed': datetime.datetime(2020, 7, 7, 2, 1, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 17, 1, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2710793.0, 'time_delta': '31 days, 8:59:53', 'additions': 294, 'deletions': 135, 'state': 'closed'}, {'id': 427989918, 'number': 116, 'closed': datetime.datetime(2020, 6, 9, 0, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 17, 42, 47, tzinfo=datetime.timezone.utc), 'time_taken': 371113.0, 'time_delta': '4 days, 7:05:13', 'additions': 60, 'deletions': 19, 'state': 'closed'}, {'id': 427267403, 'number': 114, 'closed': datetime.datetime(2020, 6, 4, 21, 27, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 3, 15, 8, 51, tzinfo=datetime.timezone.utc), 'time_taken': 109110.0, 'time_delta': '1 day, 6:18:30', 'additions': 3, 'deletions': 5, 'state': 'closed'}, {'id': 426149246, 'number': 113, 'closed': datetime.datetime(2020, 6, 5, 19, 28, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 18, 41, 32, tzinfo=datetime.timezone.utc), 'time_taken': 348433.0, 'time_delta': '4 days, 0:47:13', 'additions': 42, 'deletions': 8, 'state': 'closed'}, {'id': 426052392, 'number': 112, 'closed': datetime.datetime(2020, 6, 12, 3, 15, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 15, 21, 39, tzinfo=datetime.timezone.utc), 'time_taken': 906825.0, 'time_delta': '10 days, 11:53:45', 'additions': 696, 'deletions': 504, 'state': 'closed'}, {'id': 424541915, 'number': 103, 'closed': datetime.datetime(2020, 6, 23, 0, 42, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 14, 50, 49, tzinfo=datetime.timezone.utc), 'time_taken': 2195496.0, 'time_delta': '25 days, 9:51:36', 'additions': 741, 'deletions': 545, 'state': 'closed'}, {'id': 422661234, 'number': 95, 'closed': datetime.datetime(2020, 7, 4, 20, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 9, 59, 17, tzinfo=datetime.timezone.utc), 'time_taken': 3493123.0, 'time_delta': '40 days, 10:18:43', 'additions': 191, 'deletions': 1, 'state': 'closed'}, {'id': 421568390, 'number': 92, 'closed': datetime.datetime(2020, 7, 24, 22, 46, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 20, 26, 39, tzinfo=datetime.timezone.utc), 'time_taken': 5537967.0, 'time_delta': '64 days, 2:19:27', 'additions': 181, 'deletions': 22, 'state': 'closed'}, {'id': 421485235, 'number': 91, 'closed': datetime.datetime(2020, 7, 4, 17, 39, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 21, 17, 39, 5, tzinfo=datetime.timezone.utc), 'time_taken': 3801636.0, 'time_delta': '44 days, 0:00:36', 'additions': 304, 'deletions': 58, 'state': 'closed'}, {'id': 420978952, 'number': 90, 'closed': datetime.datetime(2020, 5, 20, 21, 33, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 20, 19, 38, tzinfo=datetime.timezone.utc), 'time_taken': 6919.0, 'time_delta': '1:55:19', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 420224345, 'number': 85, 'closed': datetime.datetime(2020, 5, 21, 3, 23, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 19, 16, 19, 23, tzinfo=datetime.timezone.utc), 'time_taken': 126264.0, 'time_delta': '1 day, 11:04:24', 'additions': 21, 'deletions': 1, 'state': 'closed'}, {'id': 417529794, 'number': 76, 'closed': datetime.datetime(2020, 6, 8, 23, 31, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 13, 18, 14, 19, tzinfo=datetime.timezone.utc), 'time_taken': 2265433.0, 'time_delta': '26 days, 5:17:13', 'additions': 330, 'deletions': 28, 'state': 'closed'}, {'id': 415614446, 'number': 75, 'closed': datetime.datetime(2020, 5, 13, 17, 2, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 9, 18, 41, 54, tzinfo=datetime.timezone.utc), 'time_taken': 339611.0, 'time_delta': '3 days, 22:20:11', 'additions': 141, 'deletions': 27, 'state': 'closed'}, {'id': 412213337, 'number': 64, 'closed': datetime.datetime(2020, 5, 14, 21, 19, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 1, 17, 5, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1138441.0, 'time_delta': '13 days, 4:14:01', 'additions': 95, 'deletions': 3, 'state': 'closed'}, {'id': 409083716, 'number': 51, 'closed': datetime.datetime(2020, 5, 1, 1, 49, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 26, 13, 27, 31, tzinfo=datetime.timezone.utc), 'time_taken': 390134.0, 'time_delta': '4 days, 12:22:14', 'additions': 82, 'deletions': 1, 'state': 'closed'}, {'id': 408576589, 'number': 50, 'closed': datetime.datetime(2020, 5, 27, 4, 14, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 24, 14, 14, 45, tzinfo=datetime.timezone.utc), 'time_taken': 2815182.0, 'time_delta': '32 days, 13:59:42', 'additions': 1899, 'deletions': 762, 'state': 'closed'}, {'id': 402738717, 'number': 23, 'closed': datetime.datetime(2020, 4, 21, 2, 35, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 13, 17, 5, 44, tzinfo=datetime.timezone.utc), 'time_taken': 639012.0, 'time_delta': '7 days, 9:30:12', 'additions': 61, 'deletions': 4, 'state': 'closed'}, {'id': 402533301, 'number': 22, 'closed': datetime.datetime(2020, 4, 23, 23, 2, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 13, 8, 24, 48, tzinfo=datetime.timezone.utc), 'time_taken': 916673.0, 'time_delta': '10 days, 14:37:53', 'additions': 338, 'deletions': 122, 'state': 'closed'}, {'id': 402045548, 'number': 20, 'closed': datetime.datetime(2020, 5, 14, 2, 10, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 10, 19, 54, 44, tzinfo=datetime.timezone.utc), 'time_taken': 2873759.0, 'time_delta': '33 days, 6:15:59', 'additions': 134, 'deletions': 32, 'state': 'closed'}, {'id': 399742714, 'number': 19, 'closed': datetime.datetime(2020, 4, 8, 18, 28, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 6, 15, 55, 26, tzinfo=datetime.timezone.utc), 'time_taken': 182001.0, 'time_delta': '2 days, 2:33:21', 'additions': 5, 'deletions': 14, 'state': 'closed'}, {'id': 397044972, 'number': 11, 'closed': datetime.datetime(2020, 4, 8, 15, 50, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 1, 14, 49, 45, tzinfo=datetime.timezone.utc), 'time_taken': 608434.0, 'time_delta': '7 days, 1:00:34', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 396832592, 'number': 10, 'closed': datetime.datetime(2020, 4, 4, 15, 48, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 1, 8, 17, 26, tzinfo=datetime.timezone.utc), 'time_taken': 286250.0, 'time_delta': '3 days, 7:30:50', 'additions': 28, 'deletions': 15, 'state': 'closed'}, {'id': 396505147, 'number': 9, 'closed': datetime.datetime(2020, 4, 15, 21, 43, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 31, 18, 9, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1308826.0, 'time_delta': '15 days, 3:33:46', 'additions': 45, 'deletions': 25, 'state': 'closed'}, {'id': 395766201, 'number': 8, 'closed': datetime.datetime(2020, 5, 15, 12, 1, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 30, 16, 35, 46, tzinfo=datetime.timezone.utc), 'time_taken': 3957934.0, 'time_delta': '45 days, 19:25:34', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 392062287, 'number': 6, 'closed': datetime.datetime(2020, 3, 24, 22, 55, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 22, 20, 3, 10, tzinfo=datetime.timezone.utc), 'time_taken': 183153.0, 'time_delta': '2 days, 2:52:33', 'additions': 12, 'deletions': 10, 'state': 'closed'}]"
