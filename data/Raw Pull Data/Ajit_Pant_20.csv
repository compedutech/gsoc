pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
418236224,WIP [GSoC 2020] Macbeth Chart detection,"Merge with extra: opencv/opencv_extra#767

This is the pull request for the GSoC project ""Macbeth Charts and AprilTags"". 

Currently it contains the port of the code from the [ColorChecker Detection](https://github.com/pedrodiamel/colorchecker-detection).


Link to trained model: https://drive.google.com/drive/folders/1JNWlmyfZKxiYQoYk6f0RzcGtHuiZq1Pz

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [X] I agree to contribute to the project under OpenCV (BSD) License.
- [X] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [x] The PR is proposed to proper branch
- [x] There is reference to original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake
",True,2532,https://api.github.com/repos/opencv/opencv_contrib/pulls/2532,https://github.com/opencv/opencv_contrib/pull/2532,closed,5828,0,33,22,14,51,2,1,"[{'name': 'GSoC'}, {'name': 'category: mcc'}]",2020-05-14 20:42:59+00:00,2020-08-03 08:32:47+00:00,6954588.0,"80 days, 11:49:48","[{'comment_id': 443068625, 'comment_body': '`i` and `j` are `size_t` and you are automatically casting to int. This will generate failing warning in the CI', 'comment_created': datetime.datetime(2020, 6, 19, 22, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'bhack', 'type': 'User'}, {'comment_id': 443123912, 'comment_body': ""Thanks a lot! I was trying to fix it but couldn't pinpoint what was causing this warning."", 'comment_created': datetime.datetime(2020, 6, 20, 11, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 445395220, 'comment_body': '> opencv_highgui\r\n\r\nhighgui should not be used as depependency of regular modules.', 'comment_created': datetime.datetime(2020, 6, 25, 8, 31, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445395620, 'comment_body': 'Please use short license header: https://github.com/opencv/opencv/wiki/Coding_Style_Guide#file-structure', 'comment_created': datetime.datetime(2020, 6, 25, 8, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445396122, 'comment_body': 'Indentation is 4 spaces.\r\nNo tabs.', 'comment_created': datetime.datetime(2020, 6, 25, 8, 33, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445396288, 'comment_body': '`using namespace` is not allowed in public headers', 'comment_created': datetime.datetime(2020, 6, 25, 8, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445396449, 'comment_body': 'Missing the short license header', 'comment_created': datetime.datetime(2020, 6, 25, 8, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445397762, 'comment_body': 'Avoid using of `cv::` namespace prefix. Just `Mat` (or better is `InputArray`)', 'comment_created': datetime.datetime(2020, 6, 25, 8, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445398256, 'comment_body': '""const reference"" for `std::vector`', 'comment_created': datetime.datetime(2020, 6, 25, 8, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445398761, 'comment_body': 'Bindings requires `CV_OUT` for proper usage of ""out"" parameters.\r\n\r\nWhy is not just return value?', 'comment_created': datetime.datetime(2020, 6, 25, 8, 38, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445400100, 'comment_body': '> modules/mcc/misc/python/pyopencv_CChecker.hpp\r\n\r\nlowercase filenames ', 'comment_created': datetime.datetime(2020, 6, 25, 8, 40, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445401077, 'comment_body': 'Internal implementation details should not be exposed in public headers.\r\n\r\nPublic API should contain interfaces, with several ""get""/""set"" virtual methods.', 'comment_created': datetime.datetime(2020, 6, 25, 8, 42, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445401271, 'comment_body': '`InputArray`', 'comment_created': datetime.datetime(2020, 6, 25, 8, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445402254, 'comment_body': '`opencv2/core.hpp` should be here instead.', 'comment_created': datetime.datetime(2020, 6, 25, 8, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445403038, 'comment_body': '> parser.get<int>(""t"")\r\n> parser.get<int>(""t"")\r\n> parser.get<int>(""t"")\r\n\r\nFetch result once and store value in local variable.', 'comment_created': datetime.datetime(2020, 6, 25, 8, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445404214, 'comment_body': 'No license headers in samples.', 'comment_created': datetime.datetime(2020, 6, 25, 8, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445404957, 'comment_body': 'Should be configurable.', 'comment_created': datetime.datetime(2020, 6, 25, 8, 48, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445405529, 'comment_body': 'If body should be on a separate line (for code coverage)', 'comment_created': datetime.datetime(2020, 6, 25, 8, 49, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445405648, 'comment_body': 'single line', 'comment_created': datetime.datetime(2020, 6, 25, 8, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445406512, 'comment_body': '`for` body on dedicated line', 'comment_created': datetime.datetime(2020, 6, 25, 8, 51, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445406994, 'comment_body': ""Don't mess vars declaration of different types on a single line."", 'comment_created': datetime.datetime(2020, 6, 25, 8, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445407745, 'comment_body': ""`precomp.hpp` can't be used from .hpp files.\r\nIt must be a first include in `src/*.cpp` files only."", 'comment_created': datetime.datetime(2020, 6, 25, 8, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445408089, 'comment_body': 'No C-assertions', 'comment_created': datetime.datetime(2020, 6, 25, 8, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445408477, 'comment_body': 'const reference?', 'comment_created': datetime.datetime(2020, 6, 25, 8, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445409744, 'comment_body': 'Reuse existed OpenCV utilities for that instead.', 'comment_created': datetime.datetime(2020, 6, 25, 8, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 445411363, 'comment_body': '> `std::vector<std::vector<float>>`\r\n\r\nAvoid such global constructors.\r\nGlobal vars should store only RAW arrays.\r\n\r\nIf you need complex structures then you should use on-demand lazy initializers.', 'comment_created': datetime.datetime(2020, 6, 25, 8, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 455149342, 'comment_body': ""where is the file taken from? What's the license?"", 'comment_created': datetime.datetime(2020, 7, 15, 15, 41, 5, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 461855407, 'comment_body': ""Fixed. Replace with shorter license + original repo's license"", 'comment_created': datetime.datetime(2020, 7, 28, 20, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461855508, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 28, 20, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461860825, 'comment_body': ""Highgui was being used to display some images, when code was compiled with debug flags. I have removed highgui from dependency and put all the debug code inside ifdef's, including the highgui includes. This code is not needed normally, but can be helpful for someone who is trying to adjust hyperparameters for their use case. But even after removing the opencv_highui from CMakeLists, imshow can still be used. Is it normal?"", 'comment_created': datetime.datetime(2020, 7, 28, 20, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461912107, 'comment_body': 'dnn is used for Net. If I replaced using namespace by dnn::Net, python wrapper was giving the error that dnn_Net was not declared. I have added a typedef in misc/pyopencv_cchecker.hpp, but I am not sure if its the best way to solve it?', 'comment_created': datetime.datetime(2020, 7, 28, 22, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461917824, 'comment_body': 'I have replaced the vectors by arrays. Should I also replace Poin2f by float? ', 'comment_created': datetime.datetime(2020, 7, 28, 22, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461917918, 'comment_body': 'Removed.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461918986, 'comment_body': 'Replaced by InputArray.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461920209, 'comment_body': ""Earlier I was adding an element corresponding to full image if the original vector was emtpy, so couldn't use const. Now I have replaced it by two overloaded functions, with const reference."", 'comment_created': datetime.datetime(2020, 7, 28, 22, 11, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461920312, 'comment_body': 'Fixed', 'comment_created': datetime.datetime(2020, 7, 28, 22, 11, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461920685, 'comment_body': 'Switched to returning the output.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461920800, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461921003, 'comment_body': 'Fixed. Should I do the same for DetectorParameters also?', 'comment_created': datetime.datetime(2020, 7, 28, 22, 12, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461921137, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 12, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461921374, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461921469, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 12, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461921662, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461921719, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 13, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461921995, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 13, 38, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 461922090, 'comment_body': 'Fixed.', 'comment_created': datetime.datetime(2020, 7, 28, 22, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}, {'comment_id': 462433913, 'comment_body': 'We not sure what the right way to do this? Is this correct @alalek ?', 'comment_created': datetime.datetime(2020, 7, 29, 16, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'garybradski', 'type': 'User'}, {'comment_id': 462443026, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 7, 29, 16, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'garybradski', 'type': 'User'}, {'comment_id': 462445003, 'comment_body': '@alalek  Is over loading a good solution to this?', 'comment_created': datetime.datetime(2020, 7, 29, 16, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'garybradski', 'type': 'User'}, {'comment_id': 462449106, 'comment_body': '@alalek  This is fixed, but is the DetectorParameters correct also (no functions are in this, just variables) ... so this is resolved, correct?', 'comment_created': datetime.datetime(2020, 7, 29, 17, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'garybradski', 'type': 'User'}, {'comment_id': 462449840, 'comment_body': 'Should be fixed', 'comment_created': datetime.datetime(2020, 7, 29, 17, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'garybradski', 'type': 'User'}]","[{'commit_sha': '5b04e38a083572fc50022bf49c112d497ee7223a', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f3626b901dbefbdeb6048f346bb0c38aed4999', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8526e7572cd7f80240bbb694999bd22ef0b5b1bb', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed30d5a66f8957ec0801b62bfbdc77d71d1f29fa', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0d2d42112b7294070c9592bd4af1302a3dd4788', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5550b91065ff2b81f5a0a6a94a8e04a2ee747a17', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7056e67c84b34339ef2cc238e39fd3b2c3c716e8', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b06a35c8520bb704ea573555f560d3650d4128e', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e2cf0532cb452ca186623791d1525d4fd7fa74a', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6bede1f2a838c168bbc58522781ff5fe0047d22', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afeabd2dfa41067141259e329b67f53d9a124ea8', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f09764723cc7403cb2d99311e59156afe0d68229', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0aef66e422ae490f171b987825702ff6a3fd9fcb', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad8904662e7a29f38bf725b50eb4561165a42f77', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68ca28abc1af67426c7f54f2471edfe0e4378427', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3d427f5cd219336cd54022294f209b1778b6967', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46efd1453fc355eb757cae74ad245ba5a7f6804b', 'committer_username': 'garybradski', 'committer_name': 'Gary Bradski', 'committer_email': None, 'commit_date': datetime.datetime(2011, 5, 26, 0, 18, 26, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b01abeec82c441fad23da408053b5b68c09c3d98', 'committer_username': 'vpisarev', 'committer_name': 'Vadim Pisarevsky', 'committer_email': None, 'commit_date': datetime.datetime(2012, 8, 7, 15, 30, 9, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd6e665a8a3ba9fda4607cc8b8848a407e56e96b', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f58aa0b31bd0fca4fae53a3890e5570055d78bc1', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a47a3e4b116885a8314fae1fe0b61f4c0abf6599', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953f7c456f760ea0d120a08470e39d1078c51d5f', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}]",Ajit Pant,43715439,,User,,16,,14,37
470253373,Added some helper function in 'mcc',"Earlier the CChecker class only stores the four corners of the chart, others were to be calculated by the user using perspective transform. Now the centers of each squares in the chart, along with a crop of their center is stored, also the loss per patch is also stored, which can be used by user. Also removed some code duplication in transform_points_forward.
### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [ X ] I agree to contribute to the project under OpenCV (BSD) License.
- [ X ] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [x] The PR is proposed to proper branch
- [ ] There is reference to original bug report and related work
- [ ] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [ ] The feature is well documented and sample code can be built with the project CMake
",False,2644,https://api.github.com/repos/opencv/opencv_contrib/pulls/2644,https://github.com/opencv/opencv_contrib/pull/2644,open,495,113,13,5,0,2,1,0,[{'name': 'GSoC'}],2020-08-19 15:41:13+00:00,,0.0,,"[{'comment_id': 483885897, 'comment_body': ""I don't really know the context, but is this function then only meant to be used internally. Why allow a function that can make the state fo the program contradictory? Make it private instead?"", 'comment_created': datetime.datetime(2020, 9, 5, 0, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'garybradski', 'type': 'User'}, {'comment_id': 483970467, 'comment_body': 'Currently, all the geometric details about the chart are calculated entirely from the position of corners (calculate() function does this). But sometimes giving the users the ability to correct some of the details might be better. Like if the user does not want to extract the colour from the centre but from some corner part or maybe if some prediction is wrong, they can change the location of bounding boxes to fit their need. Also perhaps in future, finding corners using centre positions of each patch can be added, not sure if it will be useful though.', 'comment_created': datetime.datetime(2020, 9, 5, 17, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AjitPant', 'type': 'User'}]","[{'commit_sha': '7892a5bd4c9f54ff5ae73afb209d0bc5bb183e21', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84e877aaf02fa482de3024febf22448914384a0a', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9ccdc67c3081daf4403b9898ce5cd13c81af863', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f1caeaaa7abd9a537770e337b64d96d404987ff', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a4753799ec0e17615b85339d7facedcdfd6e8ce', 'committer_username': 'AjitPant', 'committer_name': 'Ajit Pant', 'committer_email': None, 'commit_date': datetime.datetime(2018, 9, 30, 4, 8, 19, tzinfo=datetime.timezone.utc)}]",Ajit Pant,43715439,,User,,16,,14,37

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
12756992,opencv_contrib,opencv/opencv_contrib,C++,5741,9287,384,488,4453,588,5,76,"[{'id': 470253373, 'number': 2644, 'closed': None, 'created': datetime.datetime(2020, 8, 19, 15, 41, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 495, 'deletions': 113, 'state': 'open'}, {'id': 418236224, 'number': 2532, 'closed': datetime.datetime(2020, 8, 3, 8, 32, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 14, 20, 42, 59, tzinfo=datetime.timezone.utc), 'time_taken': 6954588.0, 'time_delta': '80 days, 11:49:48', 'additions': 5828, 'deletions': 0, 'state': 'closed'}, {'id': 408574171, 'number': 2509, 'closed': datetime.datetime(2020, 4, 24, 17, 20, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 24, 14, 10, 23, tzinfo=datetime.timezone.utc), 'time_taken': 11429.0, 'time_delta': '3:10:29', 'additions': 11, 'deletions': 11, 'state': 'closed'}, {'id': 378573175, 'number': 2434, 'closed': datetime.datetime(2020, 2, 29, 4, 36, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 22, 9, 54, 10, tzinfo=datetime.timezone.utc), 'time_taken': 585729.0, 'time_delta': '6 days, 18:42:09', 'additions': 524, 'deletions': 0, 'state': 'closed'}]"
