pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
609027134,added TableDataset,"Added TableDataset, getobs and nobs which works with Tables.jl interface implementations. Closes https://github.com/FluxML/FastAI.jl/issues/23",True,26,https://api.github.com/repos/FluxML/FastAI.jl/pulls/26,https://github.com/FluxML/FastAI.jl/pull/26,closed,112,3,6,24,14,39,0,0,[],2021-04-05 15:43:50+00:00,2021-06-15 11:56:25+00:00,6120755.0,"70 days, 20:12:35","[{'comment_id': 607940894, 'comment_body': ""Reflecting Ari's comment from Zulip, maybe we can just use `CSV.File` here."", 'comment_created': datetime.datetime(2021, 4, 6, 15, 12, 47, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 607942374, 'comment_body': 'Iterating all the rows seems like a really unfortunate consequence of the Tables.jl interface. CSV.jl support ""jumping ahead"" to a certain row in the file. Does Tables.jl not have a similar interface?', 'comment_created': datetime.datetime(2021, 4, 6, 15, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 607942832, 'comment_body': '```suggestion\r\n        for i in 1:length(Tables.columnnames(dataset.table))\r\n```', 'comment_created': datetime.datetime(2021, 4, 6, 15, 15, 5, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 607943118, 'comment_body': 'Should this be `push!` or `append!`?', 'comment_created': datetime.datetime(2021, 4, 6, 15, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 607959906, 'comment_body': 'Yeah it should be `push!` only, considering single item is being added.', 'comment_created': datetime.datetime(2021, 4, 6, 15, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 607981200, 'comment_body': ""I saw a couple of implementations (e.g. JDBC) where `length` is not defined on the result of `rows`. The question is whether or not we care about that. There's also the question of whether this might end up materializing more data than we want as a side effect of calling `rows` or `getcolumn`. Unfortunately AFAICT there's no API in Tables.jl for querying the size of a source (if it has one)."", 'comment_created': datetime.datetime(2021, 4, 6, 16, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 607990209, 'comment_body': 'I don\'t think Tables.jl requires to support ""jumping ahead"" to a certain row, unless it is possible to do so for all objects implementing iteration interface.\r\n\r\nIf the table is row access, the only required method is `Tables.rows` which just needs to return an iterable of objects satisfying the `AbstractRow` interface. `AbstractRow` only requires methods for getting column values and names.\r\n\r\nIf the table is column access, the only required method is `Tables.columns` which needs to return an object implementing the `AbstractColumns` interface and having methods for getting a column object and column names.', 'comment_created': datetime.datetime(2021, 4, 6, 16, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 608521639, 'comment_body': ""Then is the only option to iterate through the rows for the size, incase the table doesn't support column access? If it is, then should I make the required changes?"", 'comment_created': datetime.datetime(2021, 4, 7, 10, 11, 35, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 608524676, 'comment_body': ""Okay I can change it so that the default behaviour on getting a path is to use `CSV.File` object. It's just that I thought having a familiar API like DataFrames might be easier to work with, specially for people coming from Python fastai."", 'comment_created': datetime.datetime(2021, 4, 7, 10, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 608612606, 'comment_body': ""That's true, but I think in the this case it is more important to be performant reading from disk. Most people won't be directly interacting with the underlying table."", 'comment_created': datetime.datetime(2021, 4, 7, 12, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 637031651, 'comment_body': '```suggestion\r\nLearnBase.nobs(dataset::TableDataset{<:CSV.File}) = length(dataset.table)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 5, 21, 15, 56, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 637031848, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 5, 21, 15, 56, 56, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 642274080, 'comment_body': '```suggestion\r\n        return length(Tables.rows(dataset.table)) # length might not be defined, but has to be for this to work.\r\n```', 'comment_created': datetime.datetime(2021, 5, 31, 7, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 642915871, 'comment_body': ""Shouldn't `getobs` return an object that is indexable by the columns? So in this case just `dataset.table[idx, :]` would be fine because you can then index it by column name like `row.col1`/`row[:col1]`. And you would then pass the column names to `TabularTransforms` instead of integer indices which could quickly lead to hard to spot errors, if some columns are reordered or change. Also this would avoid needing to copy the data in the row as this currently does."", 'comment_created': datetime.datetime(2021, 6, 1, 8, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 642953484, 'comment_body': 'Yeah for `DataFrame` this would make more sense. But is it fine to keep this return behaviour for `getobs(dataset::TableDataset{<:CSV.File}, idx)` and the general `getobs(dataset::TableDataset{T}, idx)` methods considering that the types could be immutable, and they may not not have `setindex!` defined (as in the case of `CSV.Row`) which might make transformations difficult if we use a copy of the input directly?', 'comment_created': datetime.datetime(2021, 6, 1, 9, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 643191453, 'comment_body': ""I think any transforms shouldn't be calling `setindex!` anyhow without a defensive copy first, so we should stick with `dataset.table[idx, :]` everywhere."", 'comment_created': datetime.datetime(2021, 6, 1, 15, 3, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 643193774, 'comment_body': 'Similar comment here about keeping the row object instead of converting it.', 'comment_created': datetime.datetime(2021, 6, 1, 15, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 643200261, 'comment_body': ""It's not faster, but instead of a loop + index check you could write something like `first(Iterators.drop(Tables.rows(...), idx - 1))` (skip up until the index and return the next element, which will be the element at the index)."", 'comment_created': datetime.datetime(2021, 6, 1, 15, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 643456136, 'comment_body': ""So the main concern I have is that, if we use an object returned by `getobs` for transformation, and let's say normalization is defined as\r\n```julia\r\nstruct NormalizeRow <: DataAugmentation.Transform\r\n\tnormstats\r\n\tnormidxs\r\nend\r\n\r\nfunction DataAugmentation.apply(tfm::NormalizeRow, item::TabularItem; randstate=nothing)\r\n\tx = copy(item.data)\r\n\tfor idx in tfm.normidxs\r\n\t\tcolmean, colstd = tfm.normstats[idx]\r\n\t\tx[idx] = (x[idx] - colmean)/colstd\r\n\tend\r\n\tTabularItem(x)\r\nend\r\n```\r\nThere's a possibility that functions like `copy` or `setindex` won't be defined for the object returned (example being `CSV.Row` as I mentioned before). Maybe we can extract the data from the returned object and put it in a vector in the transformation step itself, but then the indexes won't really work with it. Is there a way to retain the original type from `getobs` and still make these kinds of transformation work?"", 'comment_created': datetime.datetime(2021, 6, 1, 20, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 643456405, 'comment_body': ""Agreeing with Brian that the transforms shouldn't mutate the arguments by default; we have `encode!`/`run!` for the inplace versions."", 'comment_created': datetime.datetime(2021, 6, 1, 20, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 643460427, 'comment_body': 'Yeah, I can do that.', 'comment_created': datetime.datetime(2021, 6, 1, 20, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 645031205, 'comment_body': 'What are you trying to test here? Maybe this should be\r\n```julia\r\n@test TableDataset(testtable) isa TableDataset{<:DataFrame}\r\n```', 'comment_created': datetime.datetime(2021, 6, 3, 18, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 645031358, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2021, 6, 3, 18, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 645031914, 'comment_body': 'Is this necessary because of the inner constructor?', 'comment_created': datetime.datetime(2021, 6, 3, 18, 24, 3, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 645032733, 'comment_body': ""Let's solve this within the transforms portion of the pipeline instead of forcing a vector here."", 'comment_created': datetime.datetime(2021, 6, 3, 18, 25, 20, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 645032921, 'comment_body': '```suggestion\r\n    else\r\n      error(""The Tables.jl implementation used should have either rowaccess or columnaccess."")\r\n```', 'comment_created': datetime.datetime(2021, 6, 3, 18, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 645033045, 'comment_body': '```suggestion\r\nfunction LearnBase.nobs(dataset::TableDataset)\r\n```', 'comment_created': datetime.datetime(2021, 6, 3, 18, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 645033183, 'comment_body': '```suggestion\r\nfunction LearnBase.getobs(dataset::FastAI.Datasets.TableDataset, idx)\r\n```', 'comment_created': datetime.datetime(2021, 6, 3, 18, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 645034000, 'comment_body': '+1 for the existing suggestions', 'comment_created': datetime.datetime(2021, 6, 3, 18, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 645034333, 'comment_body': 'Same here as the comment on `getobs(::TableDataset{<:DataFrame}, idx)`.', 'comment_created': datetime.datetime(2021, 6, 3, 18, 27, 47, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 646028706, 'comment_body': 'Yeah this makes more sense. I have updated the tests accordingly.', 'comment_created': datetime.datetime(2021, 6, 5, 19, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 646510509, 'comment_body': 'These seem orthogonal, maybe @lorenzoh can double-check?', 'comment_created': datetime.datetime(2021, 6, 7, 11, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 646511876, 'comment_body': '```suggestion\n        @test nobs(td) == 3\n\n        @test getobs(td, 1) isa NamedTuple\n```', 'comment_created': datetime.datetime(2021, 6, 7, 11, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 646513157, 'comment_body': 'Not sure if broadcasting works here:\n```suggestion\n        @test all(getobs(td, 1) .== [1, 4.0, ""7""])\n```\n', 'comment_created': datetime.datetime(2021, 6, 7, 11, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 646513761, 'comment_body': '```suggestion\n        td = TableDataset(testtable)\n        @test td isa TableDataset{<:DataFrame}\n```\n', 'comment_created': datetime.datetime(2021, 6, 7, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 646514257, 'comment_body': '```suggestion\n        td = TableDataset(testtable)\n        @test td isa TableDataset{<:CSV.File}\n```\n', 'comment_created': datetime.datetime(2021, 6, 7, 11, 47, 51, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 646515866, 'comment_body': '```suggestion\n        @test [data for data in getobs(td, 2)] == [44,\n                                                   "" Private"",\n                                                   236746,\n                                                   "" Masters"",\n                                                   14.0,\n                                                   "" Divorced"",\n                                                   "" Exec-managerial"",\n                                                   "" Not-in-family"",\n                                                   "" White"",\n                                                   "" Male"",\n                                                   10520,\n                                                   0,\n                                                   45,\n                                                   "" United-States"",\n                                                   "">=50k""]\n```\n', 'comment_created': datetime.datetime(2021, 6, 7, 11, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 648109079, 'comment_body': 'It should work for `MatrixRow` objects.', 'comment_created': datetime.datetime(2021, 6, 9, 9, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 651515584, 'comment_body': ""JLD2, Makie and ShowCases are already in the master branch, not sure why they're shown here. Might just be that the list was sorted on a ]pkg command."", 'comment_created': datetime.datetime(2021, 6, 15, 7, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}]","[{'commit_sha': '19a77acfbaf3bf16d6c56bd672300c2d1c30de26', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81369e8ed44243683a59f701ab54865f48e03a6e', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8eaa656a92a0e8275b0a5829a398fbdb73509a76', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9c65eba2873b3bf5067f0de0bee59213c964e88', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8585fc7ab0e0a2e3930896c13497de7b18d02687', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc4b0079a236dfb1391d0cb266de6a5378fe21ac', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd483b6d4660d4cd9b01beb60ea75a5def3e4c3ba', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a456dcc6052317ae596e2595f1cd9baf164c9b', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d524560689e3af6cfe1c15c4d8bf72da17ab8eb', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '134f1bc0389477b64a2506cd4a1137ac660a57a0', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f6261cee8d3373d21f9651032ad23be423008e', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd30c7f82c1fc6f9f96ffadbb86ed06fe0b869a19', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81b36dd17e1f26ba7ffce1ce3a3260c490343539', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b36af17c703f97585a99f60be29e35624fc0c6f', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77d9d2b5aabf4e9bdfa550b061ae6e22b923a17b', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '519a3a76d765bed9e620be2287ba0cd19253df16', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f00d250b990a24a87ad47dbac5907951f952653', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2462546d6f08510bf275c958224098d8b4aa259b', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd40c1f88535b57cd2479bed680a72b0865d29804', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77459fad2ba7545cbe30c73692cd3ed3f68a5cc8', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0f3fccd489ab4b1c4ed430d57e315f11f895600', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd92e32b77257e37827c88b36861fe692aab00149', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6161b0a75392ba775c6f31a8748af3ffb07e561f', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa9f9af1028008edfd1b49b9756e9be715d85c48', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}]",Manikya Bardhan,40057565,manikyabard@gmail.com,User,,31,,39,34
664590441,adds table transforms,Adds `TabularItem` for holding table row values and some transformations for it.,True,45,https://api.github.com/repos/FluxML/DataAugmentation.jl/pulls/45,https://github.com/FluxML/DataAugmentation.jl/pull/45,closed,194,2,6,18,3,56,0,0,[],2021-06-08 09:38:32+00:00,2021-08-10 13:42:00+00:00,5457808.0,"63 days, 4:03:28","[{'comment_id': 654565387, 'comment_body': 'Is there a better sentinel value we can use than the literal string ""missing""? Maybe `missing`, `nothing`, or a symbol `:missing`?', 'comment_created': datetime.datetime(2021, 6, 18, 16, 48, 15, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 654566667, 'comment_body': 'Instead of iterating the columns twice and having setfield repeatedly construct a namedtuple, perhaps look into a helper function that does the normalization given the `tfm`, column name and value? The function could check if the column is in `normcols` and transform it with `normstats` if it is.', 'comment_created': datetime.datetime(2021, 6, 18, 16, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 654566748, 'comment_body': ""Yeah we discussed during the call how we can use `missing` here. I'll add a review that includes that discussion."", 'comment_created': datetime.datetime(2021, 6, 18, 16, 51, 4, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654566873, 'comment_body': 'Same comment here about double iteration of the columns. I suppose it applies to `FillMissing` as well :)', 'comment_created': datetime.datetime(2021, 6, 18, 16, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 654567324, 'comment_body': '```suggestion\r\nfunction DataAugmentation.apply(tfm::FillMissing, item::TabularItem; randstate=nothing)\r\n\tx = (; zip(item.columns, [data for data in item.data])...)\r\n\tfor col in tfm.contcols\r\n\t\tif ismissing(x[col])\r\n\t\t\tSetfield.@set! x[col] = tfm.fmvals[col]\r\n\t\tend\r\n\tend\r\n\tTabularItem(x, item.columns)\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 16, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654567654, 'comment_body': 'Unless we want to allow the catergorical `missing`s to be filled too', 'comment_created': datetime.datetime(2021, 6, 18, 16, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654569918, 'comment_body': '```suggestion\r\n\t\tif ismissing(x[col])\r\n\t\t    Setfield.@set! x[col] = 0\r\n\t\telse\r\n\t\t    Setfield.@set! x[col] = findfirst(tfm.categories .== col)\r\n\t\tend\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 16, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654570133, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 16, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654571282, 'comment_body': ""```suggestion\r\nstruct Categorify{T, S} <: DataAugmentation.Transform\r\n\tcategories::T\r\n\tcategorycols::S\r\nend\r\n```\r\nTwo changes: swap to `categories` to just be a vector of the categories. I don't think we need the complexity of categorical arrays when the mapping is just the index in a list of categories passed by the user."", 'comment_created': datetime.datetime(2021, 6, 18, 17, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654571516, 'comment_body': '```suggestion\r\nstruct NormalizeRow{T, S} <: DataAugmentation.Transform\r\n\tnormstats::T\r\n\tnormcols::S\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 17, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654571750, 'comment_body': '```suggestion\r\nstruct FillMissing{T, S} <: DataAugmentation.Transform\r\n\tfmvals::T\r\n\tcontcols::S\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 17, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654574324, 'comment_body': ""Yeah do we even need Setfield anymore if we're standardizing on a `NamedTuple`? We could just build the transformed data as a vector or something then construct a `NamedTuple` at the end."", 'comment_created': datetime.datetime(2021, 6, 18, 17, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654787276, 'comment_body': ""```suggestion\r\nstruct TabularItem{T} <: Item\r\n```\r\n\r\nThese don't need to be qualified when they're part of the library itself."", 'comment_created': datetime.datetime(2021, 6, 19, 11, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 655187019, 'comment_body': ""Wouldn't this give the same value for a column?"", 'comment_created': datetime.datetime(2021, 6, 21, 8, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 655190893, 'comment_body': 'To reduce the complexity, we could just use the `catdict` used in `getcategorypool` directly for `Categorify`. A vector of vectors (or a `NamedTuple`) with the classes for each categorical column could work as well.', 'comment_created': datetime.datetime(2021, 6, 21, 8, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 655196512, 'comment_body': ""I'm not sure this will work if `categories` is just a vector of categorical column names as we'll have to replace the class for a categorical column with an integer, and for doing this we'll need information about all the classes which are present in a particular column."", 'comment_created': datetime.datetime(2021, 6, 21, 8, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 655210520, 'comment_body': ""Also seeing that the `Embedding` layers won't work with 0 indexing, we should probably try to avoid it."", 'comment_created': datetime.datetime(2021, 6, 21, 9, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 655313721, 'comment_body': ""Made a typo, it should be `x[col]`.\n\nThen let's make `missing == 1` and do `+ 1` for the other columns"", 'comment_created': datetime.datetime(2021, 6, 21, 11, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 655315775, 'comment_body': 'Yeah, sorry it should be a `NamedTuple`/`Dict`.', 'comment_created': datetime.datetime(2021, 6, 21, 12, 2, 24, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 656203326, 'comment_body': 'Yeah we should be able to build it at the end.', 'comment_created': datetime.datetime(2021, 6, 22, 13, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 657047021, 'comment_body': 'Did you mean something like this?\r\n```julia\r\nfunction tfmrowvals(tfm::NormalizeRow, col, val)\r\n    if col in tfm.cols\r\n        colmean, colstd = tfm.dict[col]\r\n        val = (val - colmean)/colstd\r\n    end\r\n    (col, val)\r\nend\r\n\r\nfunction apply(tfm::NormalizeRow, item; randstate=nothing)\r\n    TabularItem((; \r\n            tfmrowvals.(\r\n                [tfm for _ in 1:length(item.columns)],\r\n                item.columns,\r\n                [val for val in item.data])...\r\n            ), \r\n        item.columns\r\n    )\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 6, 23, 12, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 657055936, 'comment_body': ""```suggestion\n```\n\nDon't need these constructors. They are included by default."", 'comment_created': datetime.datetime(2021, 6, 23, 12, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 657056055, 'comment_body': '```suggestion\n```\n', 'comment_created': datetime.datetime(2021, 6, 23, 12, 41, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 657056207, 'comment_body': '```suggestion\n```\n', 'comment_created': datetime.datetime(2021, 6, 23, 12, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 657059677, 'comment_body': ""```suggestion\n        x[idx] = ismissing(x[idx]) ? 1 : findfirst(x[idx] .== tfm.catdict[col]) + 1\n```\n\nNo need for `skipmissing` here, right? `x[idx]` is a value and `tfm.catdict[col]` is a vector of categorical values (which doesn't contain `missing`). `findfirst` is just assigning an index based on which symbol in `tfm.catdict[col]` matches `x[idx]`."", 'comment_created': datetime.datetime(2021, 6, 23, 12, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 657060303, 'comment_body': 'Does `collect(item.data)` not work?', 'comment_created': datetime.datetime(2021, 6, 23, 12, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 657100836, 'comment_body': 'Initially I was thinking if someone creates `catdict` using `unique` or something, and if somehow `missing` is a part of this vector then an error could be thrown, but yeah it might just be better to remove it.', 'comment_created': datetime.datetime(2021, 6, 23, 13, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 657121181, 'comment_body': 'Probably better to `map(v -> filter!(!ismissing, v), values(catdict))` when constructing the transform. We could throw a warning when that happens too.', 'comment_created': datetime.datetime(2021, 6, 23, 13, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 657257119, 'comment_body': 'We should be able to use that.', 'comment_created': datetime.datetime(2021, 6, 23, 16, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 657894542, 'comment_body': 'If this is better than the current implementation, we can even have a single `apply` which works on `Union` of all the transforms, and different methods for `tfmrowvals`.', 'comment_created': datetime.datetime(2021, 6, 24, 12, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 657926538, 'comment_body': 'Probably still need to dispatch on each type separately in order to know which `tfmrowvals` function to call, right?', 'comment_created': datetime.datetime(2021, 6, 24, 13, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 658088020, 'comment_body': 'Yeah there will probably be 3 `tfmrowvals` methods.', 'comment_created': datetime.datetime(2021, 6, 24, 16, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 658856121, 'comment_body': '```julia\r\nfunction apply(tfm::NormalizeRow, item; randstate=nothing)\r\n    x = NamedTuple(Iterators.map(item.cols, item.data) do col, val\r\n        if col in tfm.cols\r\n            colmean, colstd = tfm.dict[col]\r\n            val = (val - colmean)/colstd\r\n        end\r\n        (col, val)\r\n    end)\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 6, 25, 15, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 660112846, 'comment_body': ""I think here you want to do [`SortedSet` from DataStructures.jl](https://juliahub.com/docs/DataStructures/xKiwJ/0.18.9/sorted_containers/#SortedSets-constructors-1). And you don't need `skipmissing` first, cause pushing `missing` onto a set that already contains it is a no-op (`AbstractSet`s can't contain duplicates). Since it is sorted, `missing` will always map to the same index too (addressing @ToucheSir's concern from the call)."", 'comment_created': datetime.datetime(2021, 6, 28, 20, 59, 10, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 660113490, 'comment_body': '```suggestion\r\n    end)\r\n    \r\n    return TabularItem(x, item.columns)\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 21, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 660113595, 'comment_body': 'And all the other transforms too', 'comment_created': datetime.datetime(2021, 6, 28, 21, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 660113917, 'comment_body': 'This can just be `findfirst` if we use `SortedSet`.', 'comment_created': datetime.datetime(2021, 6, 28, 21, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 660114458, 'comment_body': 'Is `randstate` an artifact from Python? Or is it part of the DataAugmentation interface? What is its role here?', 'comment_created': datetime.datetime(2021, 6, 28, 21, 2, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 660665831, 'comment_body': ""Yeah, I can't see which of these transforms requires an RNG."", 'comment_created': datetime.datetime(2021, 6, 29, 14, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 661554225, 'comment_body': ""Yeah, even though `randstate` isn't required for the tabular transformations, I put it there because it was a part of the transformation interface. I think internally for compositions, `apply` is called along with `randstate` args so everything might not work without it."", 'comment_created': datetime.datetime(2021, 6, 30, 14, 54, 8, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 661572329, 'comment_body': ""Yeah, it's because of how the dispatch is set up. "", 'comment_created': datetime.datetime(2021, 6, 30, 15, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 661720213, 'comment_body': 'Would `findfirst` work when the input function involves comparing with `missing`?', 'comment_created': datetime.datetime(2021, 6, 30, 18, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 661772232, 'comment_body': 'Yes, because `tfm.dict[col]` always contains `missing`, and `missing` is treated as any other element in the set.', 'comment_created': datetime.datetime(2021, 6, 30, 19, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 661778967, 'comment_body': 'Ah I see what you mean. An equality comparison with `missing` is `missing`.', 'comment_created': datetime.datetime(2021, 6, 30, 20, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 661781071, 'comment_body': ""I think as a result of this, the whole storing missing in the `tfm.dict[col]` is not going to work. We'll have to revert to the old filtering way + the conditional shown here."", 'comment_created': datetime.datetime(2021, 6, 30, 20, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 661785353, 'comment_body': ""In that case, there's no need to store `missing` in the dict values either then right? The conditional is required either way."", 'comment_created': datetime.datetime(2021, 6, 30, 20, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 661801035, 'comment_body': ""Yeah that's what I meant. Filter the `missing` out of the dict, and don't add it if it isn't there."", 'comment_created': datetime.datetime(2021, 6, 30, 20, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 662043496, 'comment_body': 'Alright, I have updated the constructor to use `skipmissing` and `collect` for the values containing `missing`.', 'comment_created': datetime.datetime(2021, 7, 1, 7, 22, 20, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 663086256, 'comment_body': '```suggestion\r\n            if any(ismissing, vals)\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 15, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 663087246, 'comment_body': '```suggestion\r\n                dict[col] = filter(!ismissing, vals)\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 15, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 663200420, 'comment_body': '```suggestion\r\nstruct TabularItem{T} <: Item\r\n    data::T\r\n    columns\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 671711905, 'comment_body': '```suggestion\r\n    @test titem.data[:col1] == coalesce(item.data[:col1], col1_fmval)\r\n```\r\nSame for all the similar tests below.', 'comment_created': datetime.datetime(2021, 7, 17, 15, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 671711914, 'comment_body': '```suggestion\r\n    @test !any(ismissing, tfm.dict[:col4])\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 15, 42, 41, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 671712129, 'comment_body': 'Note to delete dangling comment before submission', 'comment_created': datetime.datetime(2021, 7, 17, 15, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 671712317, 'comment_body': 'Why not collapse this into one line like you have above?\r\n```suggestion\r\n    fmdict = Dict(:col1 => col1_fmval, :col3 => col3_fmval)\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 15, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 671712482, 'comment_body': 'You can save on the splatting by using the NamedTuple constructor:\r\n```suggestion\r\n    item = TabularItem(NamedTuple(zip(cols, [1, ""a"", 10])), cols)\r\n```', 'comment_created': datetime.datetime(2021, 7, 17, 15, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}]","[{'commit_sha': '2fa8f760da075405e0b846edf1eeb2a4d174d435', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1767c579b7891ac4c00e7551fc01adb20c3050e', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e0b87cde818243070820d3e31ae460ff9fa7e29', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a5768476c9bb1d2aef421225fe5616b7dff02cd', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f8db5b5a4bf53d87162a4ad10cd16af1a745050', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfaec10f7f62b2c5e1c6649b7d5c2c5a058cb564', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '90c3baeac14fefaeb7b80e59c5205c49a179f03e', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eef71ecaf6cc93c8451d4f0821ff06c361c7bb12', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd42f1d4c4e34e84559a0dd620544792309f4aa1', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '38f35a0eb4c3d13040cc7d3fb5e2f28d1da4abe3', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a033d1d42ae997afecb6c9f4a5af35ed870ed0df', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a40475ae7cb698fb1e65972b7dc958754f879c8', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0de742b9a0fb90d38522073e7ee1be78193786dc', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128cf97574fa9990d08c14e9eb88f286c729f297', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be5dbff72b7eddd7899ce8762e4817a72cd6d3f3', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e90dc4b9725e7f7dd25c2be1963cd1e0e6f7a50e', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a227916be083631595b903ade9973c7e8ad9541', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a03bc723c8870641a27444289067954ecb9da402', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}]",Manikya Bardhan,40057565,manikyabard@gmail.com,User,,31,,39,34
669090187,Add tabular model,Adds a tabular model based on the python fastai implementation.,True,124,https://api.github.com/repos/FluxML/FastAI.jl/pulls/124,https://github.com/FluxML/FastAI.jl/pull/124,closed,209,3,6,24,5,94,0,0,[],2021-06-13 17:43:57+00:00,2021-08-22 17:10:45+00:00,6046008.0,"69 days, 23:26:48","[{'comment_id': 651519937, 'comment_body': 'Equivalent to `if tm.bn_cont == true` which is equivalent to `if tm.bn_cont`.\r\n```suggestion\r\n\t\tif tm.bn_cont\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 7, 26, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 651988334, 'comment_body': ""This doesn't need to be wrapped in a Chain. Also, is the sigmoid range meant to replace the activation of the last linear layer or to run after it?"", 'comment_created': datetime.datetime(2021, 6, 15, 17, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 651991336, 'comment_body': ""I wonder if there's a way to use `Parallel` for `tm.embeds` instead of writing all this out manually?"", 'comment_created': datetime.datetime(2021, 6, 15, 17, 11, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 651992591, 'comment_body': 'this could benefit from splitting into a few lines. Also, do you recall why the `Int64` cast was added?', 'comment_created': datetime.datetime(2021, 6, 15, 17, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 652036310, 'comment_body': 'You could do `Parallel(vcat, [Embedding(ni, nf) for (ni, nf) in emb_szs])`. In the `Chain`, before the embedding layers, you would need `x -> ntuple(i -> x[i, :], length(emb_szs))` to split a single `x` into multiple arguments.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 10, 8, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 652040120, 'comment_body': 'I think splatting `eachslice(x, dims=1)` would work too.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 13, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 652045049, 'comment_body': 'I would echo this suggestion. In particular, instead of having complicated `use_bn` logic, just use two lines. First, iterate over the `1:(n - 1)` elements, then just do `push!(_layers, # last element version)`.\r\n\r\nAlso, I think this will be cleaner as a standard `for`-loop instead of a generator. Instead of pre-computing `sizes`, could we use `Flux.outputsize` inside the loop?', 'comment_created': datetime.datetime(2021, 6, 15, 18, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 652049566, 'comment_body': 'I would recommend pushing the `isnothing` etc. logic to `linbndrop` (it already handles the 0 case). It can be extended to handle `nothing` and `false` too.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 652050694, 'comment_body': 'In addition to the comment about `isnothing(p)` being part of `linbndrop`, this can also be deleted by doing `Iterators.cycle(ps)` when building `_layers`.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 652052063, 'comment_body': 'Could make this `bn_cont = bn_cont ? BatchNorm(n_cont) : identity` then avoid the if/else logic in the forward pass.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 30, 41, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 652056563, 'comment_body': 'In the case of `y_range == nothing`, should it be `sigmoid`? Right no there is no activation at all.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 37, 35, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 652057064, 'comment_body': 'This can be avoided if you split the final layer into a separate line.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 38, 21, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 652065444, 'comment_body': 'I would suggest making the whole categorical branch/continuous branch portion of the model into a `Parallel`. Something like `Parallel(vcat, embeds, bn_cont)`. It should gracefully handle the cases when either the categorical or continuous vectors are empty.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 50, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 652068767, 'comment_body': 'If it should be `sigmoid`, then I think it makes more sense to force `y_range::Tuple` and make the default as `(0, 1)`. Just avoid `nothing` entirely.', 'comment_created': datetime.datetime(2021, 6, 15, 18, 55, 34, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 653223138, 'comment_body': ""Okay. I'm even considering removing `nothing` as it won't work directly with `Iterators.cycle` if we do use that for `ps`."", 'comment_created': datetime.datetime(2021, 6, 17, 4, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 653223414, 'comment_body': ""Yeah I'll try doing this."", 'comment_created': datetime.datetime(2021, 6, 17, 4, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 653225295, 'comment_body': ""I think the `Int64` cast was added because `BatchNorm` and `Dense` don't seem to work with floats. I could maybe restrict the types to `Int64` only though."", 'comment_created': datetime.datetime(2021, 6, 17, 4, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 653226797, 'comment_body': ""Yeah, I can create the last `linbndrop` outside the loop. Although I'm not sure how the sizes for `Flux.outputsize` would work with the `Parallel` layer before it. Would it be better than using `sizes`?"", 'comment_created': datetime.datetime(2021, 6, 17, 5, 2, 20, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 653231212, 'comment_body': ""No, I don't think there is an activation if `y_range == nothing` according to the [python implementation](https://github.com/fastai/fastai/blob/01a4363580215440771df4d273ce34c9dd7e46a7/fastai/tabular/model.py#L41). "", 'comment_created': datetime.datetime(2021, 6, 17, 5, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 653231917, 'comment_body': ""Yeah I considered using `Parallel` first but just wasn't sure how to handle the input for that. This should simplify things a lot."", 'comment_created': datetime.datetime(2021, 6, 17, 5, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 654521293, 'comment_body': '```suggestion\r\n\t\tlayer = linbndrop(Int64(sizes[i]), Int64(sizes[i+1]), use_bn=use_bn, p=p, act=act_cls, lin_first=lin_first)\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 15, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654521427, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 15, 29, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654553767, 'comment_body': '```suggestion\r\n        n_emb = first(Flux.outputsize(embeds, (length(emb_szs), 1)))\r\n\tclassifiers = [\r\n\t    linbndrop(n_cat, first(layers); use_bn=use_bn, p=first(ps), act=act_cls, lin_first=lin_first),\r\n\t    [linbndrop(isize, osize; use_bn=use_bn, p=p, act=act_cls, lin_first=lin_first)\r\n\t      for (isize, osize, p) in zip(layers[1:(end - 2)], layers[2:(end - 1)], Iterators.cycle(Base.tail(ps)))]...,\r\n\t    linbndrop(last(layers)), out_sz; use_bn=bn_final, lin_first=lin_first)\r\n\t]\r\n```', 'comment_created': datetime.datetime(2021, 6, 18, 16, 25, 26, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654557048, 'comment_body': 'Can delete `sizes`.', 'comment_created': datetime.datetime(2021, 6, 18, 16, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654564720, 'comment_body': 'I would go so far as to convert the comprehension into a plain for loop with `push!`. Not any less efficient than the splat and would help with line lengths. ', 'comment_created': datetime.datetime(2021, 6, 18, 16, 46, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 654566115, 'comment_body': ""Yeah maybe that's better here since we are using so many iterables in the comprehension"", 'comment_created': datetime.datetime(2021, 6, 18, 16, 49, 43, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654787516, 'comment_body': 'Can we add a comment with a link to where this is taken from?', 'comment_created': datetime.datetime(2021, 6, 19, 11, 55, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 654836710, 'comment_body': 'Sure I can add [this link](https://github.com/fastai/fastai/blob/2742fe844573d06e700f869839fb9ec5f3a9bca9/fastai/tabular/model.py#L12). I believe they got this formula experimentally.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 25, 54, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 654837157, 'comment_body': ""Seeing that `Flux.outputsize` isn't working with `Embedding` layers, I was thinking of keeping the current way of calculating `n_emb` for now."", 'comment_created': datetime.datetime(2021, 6, 19, 20, 30, 43, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 654851195, 'comment_body': 'This would be clearer with `Flux.outputsize`', 'comment_created': datetime.datetime(2021, 6, 19, 23, 13, 8, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654851355, 'comment_body': ""```suggestion\n    for (isize, osize, p) in zip(layers[1:(end-2)], layers[2:(end-1)], ps)\n```\nShouldn't this be not including the last element in `layers`?\n"", 'comment_created': datetime.datetime(2021, 6, 19, 23, 15, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654851460, 'comment_body': ""Let's switch this to something like `final_activation = identity` as a kwarg."", 'comment_created': datetime.datetime(2021, 6, 19, 23, 16, 23, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654878728, 'comment_body': ""I'm not completely sure that this will work because the last special case only goes from last element in `layers` to `out_sz`, and the layer for doing second last element to last element in `layers` would not be there. So if for eg. we had only 2 elements in `layers`, the loop probably won't be entered at all."", 'comment_created': datetime.datetime(2021, 6, 20, 5, 22, 5, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 654880778, 'comment_body': 'Okay, then I can make a `sigmoidrange` function and remove the `y_range` part. If users want to use this then something like `x -> sigmoidrange(x, 4, 6)` (for getting values between 4 and 6) should work.', 'comment_created': datetime.datetime(2021, 6, 20, 5, 47, 30, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 654928743, 'comment_body': ""Never mind, yes you're right!"", 'comment_created': datetime.datetime(2021, 6, 20, 12, 33, 12, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654928819, 'comment_body': ""Yup, that's what I was thinking too"", 'comment_created': datetime.datetime(2021, 6, 20, 12, 33, 41, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 654998146, 'comment_body': '@manikyabard can you paste the error you got with `Embedding` and `outputsize`?', 'comment_created': datetime.datetime(2021, 6, 20, 22, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 655291585, 'comment_body': 'Sure, so if I do something like this\r\n```julia\r\nFlux.outputsize(Embedding(2, 3), (2,1))\r\n```\r\nthe error I get is\r\n```\r\nArgumentError: unable to check bounds for indices of type Flux.NilNumber.Nil\r\n\r\nStacktrace:\r\n  [1] checkindex(#unused#::Type{Bool}, inds::Base.OneTo{Int64}, i::Flux.NilNumber.Nil)\r\n    @ Base ./abstractarray.jl:671\r\n  [2] checkindex\r\n    @ ./abstractarray.jl:686 [inlined]\r\n  [3] checkbounds_indices (repeats 2 times)\r\n    @ ./abstractarray.jl:642 [inlined]\r\n  [4] checkbounds\r\n    @ ./abstractarray.jl:595 [inlined]\r\n  [5] checkbounds\r\n    @ ./abstractarray.jl:616 [inlined]\r\n  [6] _getindex\r\n    @ ./multidimensional.jl:831 [inlined]\r\n  [7] getindex\r\n    @ ./abstractarray.jl:1170 [inlined]\r\n  [8] Embedding\r\n    @ ~/.julia/packages/Flux/wii6E/src/layers/basic.jl:421 [inlined]\r\n  [9] (::Embedding{Matrix{Float32}})(x::Matrix{Flux.NilNumber.Nil})\r\n    @ Flux ~/.julia/packages/Flux/wii6E/src/layers/basic.jl:422\r\n [10] #outputsize#279\r\n    @ ~/.julia/packages/Flux/wii6E/src/outputsize.jl:93 [inlined]\r\n [11] outputsize(m::Embedding{Matrix{Float32}}, inputsizes::Tuple{Int64, Int64})\r\n    @ Flux ~/.julia/packages/Flux/wii6E/src/outputsize.jl:92\r\n [12] top-level scope\r\n    @ In[213]:1\r\n [13] eval\r\n    @ ./boot.jl:360 [inlined]\r\n [14] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String)\r\n    @ Base ./loading.jl:1094\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 21, 11, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 663093239, 'comment_body': '```suggestion\r\n        x -> tuple(eachrow(x)...),\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 15, 26, 43, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 663113589, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 16, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 663113802, 'comment_body': 'Move the `unsqueeze` to the encode method', 'comment_created': datetime.datetime(2021, 7, 2, 16, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 687883231, 'comment_body': ""I wasn't thinking that the linear chain should be customizable. I think this loop should get pushed into `TabularModel`. My suggestion was that `bn_final` and `final_activation` be lumped into a single `classifier` argument to `TabularModel` which is positional and defaults to `Dense(in, out)`."", 'comment_created': datetime.datetime(2021, 8, 12, 16, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 687885426, 'comment_body': ""I don't know how useful it is to have this function."", 'comment_created': datetime.datetime(2021, 8, 12, 16, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 687888546, 'comment_body': 'I have some questions about understanding `catdict` that we can discuss during the call.', 'comment_created': datetime.datetime(2021, 8, 12, 16, 14, 35, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689096970, 'comment_body': 'Can you add it?', 'comment_created': datetime.datetime(2021, 8, 15, 14, 20, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689097084, 'comment_body': '```suggestion\r\n    TabularModel(catcols, n_cont::Number, outsz::Number; kwargs...])\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 14, 21, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689109003, 'comment_body': 'Couldn\'t this be a vector of the cardinalities directly? Instead of having `catcols` be column names and `cardinalitydict` be a map from name => cardinality, just make `catcols` a vector of cardinalities.\n\nI also think that cardinality can be confusing lingo for non-ML oriented users. Something like ""vector of sizes (number of labels) for each categorical column.""', 'comment_created': datetime.datetime(2021, 8, 15, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689109071, 'comment_body': '```suggestion\n        layersizes=[200, 100],\n```\n', 'comment_created': datetime.datetime(2021, 8, 15, 15, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689109114, 'comment_body': '```suggestion\n        outsize,\n```\n', 'comment_created': datetime.datetime(2021, 8, 15, 15, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689109144, 'comment_body': '```suggestion\n        dropout_rates=0.,\n```\n', 'comment_created': datetime.datetime(2021, 8, 15, 15, 54, 3, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689109197, 'comment_body': '```suggestion\n        batchnorm=true,\n```\n', 'comment_created': datetime.datetime(2021, 8, 15, 15, 54, 28, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689109238, 'comment_body': '```suggestion\n        activation=Flux.relu,\n```\n', 'comment_created': datetime.datetime(2021, 8, 15, 15, 54, 43, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689109261, 'comment_body': ""Could also be `dense_first` to match Flux's naming.\n\n```suggestion\n        linear_first=true)\n```\n"", 'comment_created': datetime.datetime(2021, 8, 15, 15, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689109508, 'comment_body': '```suggestion\n    classifierin = mapreduce(layer -> size(layer.weight)[1], +, catbackbone[2].layers;\n                             init = contbackbone.chs)\n```\n', 'comment_created': datetime.datetime(2021, 8, 15, 15, 57, 6, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689109617, 'comment_body': 'Use a tuple ', 'comment_created': datetime.datetime(2021, 8, 15, 15, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689109669, 'comment_body': ""This can be changed to just accept cardinalities directly too. Maybe `szdict` can also be a `size_overrides` that's a vector of integers and `nothing`. Same shape as the vector of cardinalities but override when not nothing."", 'comment_created': datetime.datetime(2021, 8, 15, 15, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689111819, 'comment_body': 'Is that final `]` necessary either? Never seen that syntax for optional args before.', 'comment_created': datetime.datetime(2021, 8, 15, 16, 16, 35, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 689274244, 'comment_body': 'Sure we can do this. Just to make it simpler for users, maybe another method which takes in a `Dict` to override easily would be helpful here.', 'comment_created': datetime.datetime(2021, 8, 16, 6, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 689496881, 'comment_body': 'Yeah actually that makes more sense. One method with no size overrides that takes the cardinality vector as input. Another that takes `Dict`s like you have now.', 'comment_created': datetime.datetime(2021, 8, 16, 12, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689619299, 'comment_body': 'This docstring is better off split into two separate docstrings for each method. Both will show up automatically in the docs, but you will be able to tailor the explanation of `size_overrides` to each method (instead of explaining both in one paragraph).', 'comment_created': datetime.datetime(2021, 8, 16, 15, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689620032, 'comment_body': '```suggestion\r\nget_emb_sz(cardinalities::AbstractVector{<:Integer}, size_overrides=fill(nothing, length(cardinalities))) =\r\n    map(zip(cardinalities, size_overrides)) do (cardinality, override)\r\n        emb_dim = isnothing(override) ? emb_sz_rule(cardinality + 1) : Int64(override)\r\n        return (cardinality + 1, emb_dim)\r\n    end\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689621955, 'comment_body': '```suggestion\r\nsigmoidrange(x, low, high) = @. Flux.sigmoid(x) * (high - low) + low\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689622808, 'comment_body': '```suggestion\r\nnumber of classes in categorical columns present in `cardinalities` and adjusting for NaNs. \r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 9, 44, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689623433, 'comment_body': '```suggestion\r\n    TabularModel(n_cont, outsize [; kwargs...])\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 10, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689625657, 'comment_body': ""This is another case where two separate docstrings would help. `catbackbone`, etc. don't have default values except implicitly in second method."", 'comment_created': datetime.datetime(2021, 8, 16, 15, 13, 18, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689626161, 'comment_body': '```suggestion\r\n        layersizes=(200, 100),\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689626879, 'comment_body': '```suggestion\r\n    push!(classifiers, linbndrop(classifierin, first(layersizes);\r\n                                 use_bn=batchnorm, p=first_ps, lin_first=linear_first, act=activation))\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689627703, 'comment_body': '```suggestion\r\n        layersizes=(200, 100);\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 15, 41, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689628402, 'comment_body': '```suggestion\r\nemb_sz_rule(n_cat) = min(600, round(Int, 1.6 * n_cat^0.56))\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689631108, 'comment_body': '```suggestion\r\nfunction tabular_embedding_backbone(embedding_sizes, dropout_rates=0.)\r\n    embedslist = [Flux.Embedding(ni, nf) for (ni, nf) in embedding_sizes]\r\n    emb_drop = iszero(dropout_rates) ? identity : Dropout(dropout_rates)\r\n    Chain(\r\n        x -> tuple(eachrow(x)...), \r\n        Parallel(vcat, embedslist), \r\n        emb_drop\r\n    )\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689631378, 'comment_body': '```suggestion\r\ntabular_continuous_backbone(n_cont) = BatchNorm(n_cont)\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689675438, 'comment_body': '`emb_drop` could even be further inlined if desired. If preserving model structure is more important than a bit of lost performance, then passing `active=iszero(dropout_rates)` instead of using a ternary is also a valid option.', 'comment_created': datetime.datetime(2021, 8, 16, 16, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 689976977, 'comment_body': 'Is `active` an argument to something? How would that work?', 'comment_created': datetime.datetime(2021, 8, 17, 1, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 689983693, 'comment_body': ""`active` is the third arg to `BatchNorm`, yes. I wouldn't worry about that now though, it's a minor tweak we can always revisit later."", 'comment_created': datetime.datetime(2021, 8, 17, 2, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 692081450, 'comment_body': '```suggestion\r\nCompute an embedding size corresponding to the number of classes for a \r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 12, 53, 8, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692085131, 'comment_body': '```suggestion\r\nGiven a vector of `cardinalities` of each categorical column\r\n(i.e. each element of `cardinalities` is the number of classes in that categorical column),\r\ncompute the output embedding size according to [`emb_sz_rule`](#).\r\nReturn a vector of tuples where each element is `(in_size, out_size)` for an embedding layer.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 12, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692086272, 'comment_body': '```suggestion\r\n- `size_overrides`: A collection of integers (or `nothing` to skip override) where the value present at any index \r\n    will be used to as the output embedding size for that column.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 12, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692093690, 'comment_body': ""I don't think being able to override with a dictionary is as useful when `cardinalities` is still a vector.\r\n\r\n```suggestion\r\nfunction get_emb_sz(cardinalities::Dict{<:Any, <:Integer}, size_overrides=Dict())\r\n    values_and_overrides = map(pairs(cardinalities)) do (col, cardinality)\r\n        cardinality, get(size_overrides, col, nothing)\r\n    end\r\n    get_emb_sz(first.(values_and_overrides), last.(values_and_overrides))\r\nend\r\n```"", 'comment_created': datetime.datetime(2021, 8, 19, 13, 8, 47, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692094320, 'comment_body': '```suggestion\r\n    get_emb_sz(cardinalities::AbstractVector, [size_overrides::AbstractVector])\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692094536, 'comment_body': '```suggestion\r\n    get_emb_sz(cardinalities::Dict, [size_overrides::Dict])\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692095948, 'comment_body': '```suggestion\r\nGiven a map from columns to `cardinalities`, compute the output embedding size according to [`emb_sz_rule`](#).\r\nReturn a vector of tuples where each element is `(in_size, out_size)` for an embedding layer.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 11, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692097215, 'comment_body': '```suggestion\r\n- `size_overrides`: An map of output embedding size overrides\r\n                    (i.e. `size_overrides[col]` is the output embedding size for `col`).\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692097323, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692097426, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 13, 19, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692100738, 'comment_body': '```suggestion\r\nCreate a tabular model which operates on a tuple of categorical values \r\n(label or one-hot encoded) and continuous values.\r\nThe categorical backbones (`catbackbone`) and continuous backbone (`contbackbone`) operate on each element of the input tuple.\r\nThe output from these backbones is then passed through a series of linear-batch norm-dropout layers before a `finalclassifier` block.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692101422, 'comment_body': '```suggestion\r\n- `outsize`: The output size of the final classifier block. For single classification tasks, \r\n    this would be the number of classes, and for regression tasks, this would be the\r\n    number of target continuous variables.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692102747, 'comment_body': '```suggestion\r\n- `layersizes`: A vector of sizes for each hidden layer in the sequence of linear layers.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692104432, 'comment_body': '```suggestion\r\n- `dropout_rates`: Dropout probabilities for the linear-batch norm-dropout layers.\r\n    This could either be a single number which would be used for for all the layers,\r\n    or a collection of numbers which are cycled through for each layer.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 21, 35, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692105411, 'comment_body': '```suggestion\r\n- `batchnorm`: Set to `false` to skip each batch norm in the linear-batch norm-dropout sequence.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692105753, 'comment_body': '```suggestion\r\n- `linear_first`: Controls if the linear layer comes before or after batch norm and dropout.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 23, 6, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692105979, 'comment_body': '```suggestion\r\n        layersizes=(200, 100),\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692106077, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692108703, 'comment_body': '```suggestion\r\nCreate a tabular model which operates on a tuple of categorical values \r\n(label or one-hot encoded) and continuous values. The default categorical backbone (`catbackbone`) is\r\na [`Flux.Parallel`](https://fluxml.ai/Flux.jl/stable/models/layers/#Flux.Parallel) set of `Flux.Embedding` layers corresponding to each categorical variable.\r\nThe default continuous backbone (`contbackbone`) is a single [`Flux.BatchNorm`](https://fluxml.ai/Flux.jl/stable/models/layers/#Flux.BatchNorm).\r\nThe output from these backbones is concatenated then passed through a series of linear-batch norm-dropout layers before a `finalclassifier` block.\r\n\r\n## Arguments\r\n\r\n- `n_cont`: The number of continuous columns.\r\n- `outsize`: The output size of the model.\r\n- `layersizes`: A vector of sizes for each hidden layer in the sequence of linear layers.\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 26, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 692109121, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 19, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}]","[{'commit_sha': '2c85ed49928633ef9cfbedb23951f6d54d34b932', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97546c7ddc6c7608f0e8b669c8daf07ec527ed3c', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1bd73bfcb944b4bf53c1dd7834371e745d3e6ae', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2551fbb8072b447dd288ef47782d6ade935a1265', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef11450e35309a98f083dcd280648eb0d52bfab5', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0b2922f27996763f03b3360e83354a4aaa39c85', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2c95d54987206533108525219b4757494606ab7', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a081616f8bd36d89b3a060f0bfcb7c5b05093074', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f565675f73b5d812a20733ef8d50138d21319ffd', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04d27d41a5d0b84739af55c7917f799fa2d9586a', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1c22631b78057f81c547b6fedd9e730745a40eb', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4d7149fa2c9ea57bf67667f0ae780f362e93060', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc250a1c5a0d706eac9aea4185bea5099c5f1011', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '506f889653cbb90d618076911f3338649816f2c7', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '725c6ddb4d159cfd459a313ddcdc4a4a407adfac', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59eb66ae0da0d984b934f0b6e57010c2d2ab1b80', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4fded075325b0d200af6f37d5d163b40a435ec6', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96564f03cdd6ae4f4229d9c09fdc45fe4cbcb540', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ddb4d620d71867e26008f306612624d968ebd81c', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '825d146759704a2f8b2666d5f4c13c5e054e45d6', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '979c9ba3f18d4b517f904e2588abcacf6546b4e7', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f8c65a37bc5a31e42cb8d36f39fa34daeb15c79', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2042a4dd2b4cddeeffbd55198979b7387ea0da6', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '928509bf847367227b36e5a9a84d62e7cb28a2d5', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}]",Manikya Bardhan,40057565,manikyabard@gmail.com,User,,31,,39,34
686750931,update Embedding layer,Updates the Embedding layer to use `gather` for `AbstractVector` which earlier had an issue with repeated indices. Also adds special case for `outputsize`.,False,1656,https://api.github.com/repos/FluxML/Flux.jl/pulls/1656,https://github.com/FluxML/Flux.jl/pull/1656,open,48,32,7,9,21,55,1,0,[{'name': 'enhancement'}],2021-07-09 12:27:48+00:00,,0.0,,"[{'comment_id': 666912801, 'comment_body': 'These methods should not be here.', 'comment_created': datetime.datetime(2021, 7, 9, 12, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'DhairyaLGandhi', 'type': 'User'}, {'comment_id': 666920676, 'comment_body': 'This is exactly where they should be (see the other code in the file).', 'comment_created': datetime.datetime(2021, 7, 9, 12, 44, 7, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 666925112, 'comment_body': ""This will hit all the fast paths. You'll need to define the following at L48 of `onehot.jl`.\r\n```julia\r\nconst OneHotLikeVector{T, L} = OneHotLike{T, L, 0, 1, T}\r\nconst OneHotLikeMatrix{T, L, I} = OneHotLike{T, L, 1, 2, I}\r\n```\r\n\r\n```suggestion\r\n(m::Embedding)(x::Union{OneHotLikeVector, OneHotLikeMatrix}) = m.weight * x # equivalent to m.weight[:,onecold(x)]\r\n```"", 'comment_created': datetime.datetime(2021, 7, 9, 12, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 666925399, 'comment_body': 'I mean, these methods should not be defined at all since this is what we would expect output size to already know how to do. If output size cannot find the expected size, then it should be fixed there. ', 'comment_created': datetime.datetime(2021, 7, 9, 12, 51, 42, tzinfo=datetime.timezone.utc), 'commenter': 'DhairyaLGandhi', 'type': 'User'}, {'comment_id': 666927070, 'comment_body': 'Why not use `::OneHotLike` ? Is there reason to constrain it to the two cases?', 'comment_created': datetime.datetime(2021, 7, 9, 12, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'DhairyaLGandhi', 'type': 'User'}, {'comment_id': 666927319, 'comment_body': ""`outputsize`'s underlying mechanism was designed for numerical array operations which hits ~95% case even with custom layers. There will always be some layers that we might need to special case. A layer that uses indexing as the underlying operation is non-sensical with `outputsize`. How would you know the result of indexing an array with `Nil`?"", 'comment_created': datetime.datetime(2021, 7, 9, 12, 54, 45, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 666930134, 'comment_body': 'You only need the size, so maybe outputsize should know what to do with getindex.', 'comment_created': datetime.datetime(2021, 7, 9, 12, 59, 21, tzinfo=datetime.timezone.utc), 'commenter': 'DhairyaLGandhi', 'type': 'User'}, {'comment_id': 666930639, 'comment_body': 'I think the one hot fast path is for vectors and matrices only? So we want to reshape (code a couple lines below) before this.', 'comment_created': datetime.datetime(2021, 7, 9, 13, 0, 3, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 666931504, 'comment_body': 'But the output of `getindex` depends on how many items you pull out. What is `x[I]` when `I isa Vector{Nil}`?', 'comment_created': datetime.datetime(2021, 7, 9, 13, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 666931930, 'comment_body': 'If we have a good answer for what the behavior should be, then I absolutely agree the proper fix is defining `getindex` for `outputsize`.', 'comment_created': datetime.datetime(2021, 7, 9, 13, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 666937662, 'comment_body': 'Well `Vector{Nil}` sounds like the wrong kind of thing to have here, but the size would be size of the indices plus handling any colons in the getindex call', 'comment_created': datetime.datetime(2021, 7, 9, 13, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'DhairyaLGandhi', 'type': 'User'}, {'comment_id': 666956396, 'comment_body': ""That's correct, but also just not how `outputsize` works."", 'comment_created': datetime.datetime(2021, 7, 9, 13, 38, 54, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 667029987, 'comment_body': 'In any case, the first method is redundant I think', 'comment_created': datetime.datetime(2021, 7, 9, 15, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 667241201, 'comment_body': 'Yeah actually I think the first should be `AbstractVecOrMat` and the second gets deleted.', 'comment_created': datetime.datetime(2021, 7, 9, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 667245188, 'comment_body': ""I don't know whether it's useful, but the ordinary function above accepts any array. They should surely match. "", 'comment_created': datetime.datetime(2021, 7, 9, 22, 51, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 667245517, 'comment_body': 'I think this only makes sense for matrices? If so I think it should be restricted -- to document this, to give earlier errors, etc. If not it should be tested on other things. \r\n```suggestion\r\nstruct Embedding{W <: AbstractMatrix}\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 22, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 667245543, 'comment_body': 'Doing this would mean you get errors sooner, not sure though that you get more readable errors.\r\n```suggestion\r\n(m::Embedding)(x::Integer) = m.weight[:, x]\r\n(m::Embedding)(x::AbstractVector{<:Integer}) = NNlib.gather(m.weight, x)\r\n(m::Embedding)(x::AbstractArray{<:Integer}) = reshape(m(vec(x)), :, size(x)...)\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 22, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 667245550, 'comment_body': 'Since this is new code, perhaps we should consider standardising on `=>` like `Conv` for channel-like dimensions? It\'s always just a little confusing that they are backwards compared to the size of matrices. \r\n\r\n```suggestion\r\nfunction Base.show(io::IO, m::Embedding)\r\n  print(io, ""Embedding($(size(m.weight, 2)) => $(size(m.weight, 1)))"")\r\n```\r\n(Change obviously needs constructor to change too.)', 'comment_created': datetime.datetime(2021, 7, 9, 22, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 667249851, 'comment_body': 'Maybe an example without random numbers, so that it can be a doctest:\r\n````suggestion\r\n```jldoctest\r\njulia> m = Embedding(reshape(-6:45, 2, 26) .+ 0.01f0)\r\nEmbedding(26 => 2)\r\n\r\njulia> m(5)  # embedding vector for 5th element\r\n2-element Vector{Float32}:\r\n 2.01\r\n 3.01\r\n\r\njulia> m([6, 15, 15])  # applied to a batch\r\n2×3 Matrix{Float32}:\r\n 4.01  22.01  22.01\r\n 5.01  23.01  23.01\r\n\r\njulia> ans == m(Flux.OneHotMatrix([6, 15, 15], 26))\r\ntrue\r\n```\r\n````', 'comment_created': datetime.datetime(2021, 7, 9, 23, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 667251170, 'comment_body': ""Good to specialise on OneHot, but what happens if by some chance you collect it? Best case is that this gives you the same result, it's just an optimisation. (Indexing things often treat an array of Bools differently to other integers.) \r\n\r\nSecond best is for it to be an error, which is what I get now, but is this guaranteed? (Perhaps it is without offset arrays?)\r\n```\r\njulia> m(Flux.OneHotMatrix([6, 15, 15], 26))\r\n2×3 Matrix{Float32}:\r\n 4.01  22.01  22.01\r\n 5.01  23.01  23.01\r\n\r\njulia> m(collect(Flux.OneHotMatrix([6, 15, 15], 26)))\r\nERROR: BoundsError: attempt to access 2×26 Matrix{Float32} at index [1:2, 78-element Vector{Bool}]\r\n```"", 'comment_created': datetime.datetime(2021, 7, 9, 23, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 667364548, 'comment_body': ""> I don't know whether it's useful, but the ordinary function above accepts any array. They should surely match.\r\n\r\nYeah, but my intent was the >2D hits the reshape route in the embedding layer source. We only need to specify the `Nil` path for what finally gets called which is `AbstractVecOrMat`.\r\n\r\n> Good to specialise on OneHot, but what happens if by some chance you collect it?\r\n\r\nThis looks related to your other suggestions. We should constraint on `AbstractVector{<:Integer}` and `AbstractVecOrMat{<:Bool}` separately? In the latter case, it should be a matmul (mathematically) or `m.weight[:, idx]`?"", 'comment_created': datetime.datetime(2021, 7, 10, 17, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 667364593, 'comment_body': 'Yeah we probably should just restrict it to matrices.', 'comment_created': datetime.datetime(2021, 7, 10, 17, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 667366219, 'comment_body': 'Yeah this makes sense.', 'comment_created': datetime.datetime(2021, 7, 10, 17, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 667366309, 'comment_body': 'Sure, we can do that.', 'comment_created': datetime.datetime(2021, 7, 10, 17, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 668081785, 'comment_body': 'Would something like this make more sense for `AbstractArray`?\r\n```julia\r\n(m::Embedding)(x::AbstractArray{<:Nil}) = fill(nil, size(m.weight, 1), size(x)...)\r\n``` \r\n', 'comment_created': datetime.datetime(2021, 7, 12, 16, 29, 39, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 669612039, 'comment_body': 'This is where I think treating `collect(onehot(...))` the same as `onehot()` would be nice. They are both arrays of booleans, so something like this may work:\r\n```suggestion\r\n(m::Embedding)(x::AbstractVecOrMat{Bool}) = m.weight * x  # handles OneHotVector, OneHotMatrix\r\n```\r\n(Or it may require a bit more thought which is more specific.)', 'comment_created': datetime.datetime(2021, 7, 14, 13, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 669612409, 'comment_body': 'I would also restrict these to integers\r\n```suggestion\r\n(m::Embedding)(x::AbstractVector{<:Integer}) = NNlib.gather(m.weight, x)\r\n(m::Embedding)(x::AbstractArray{<:Integer}) = reshape(m(vec(x)), :, size(x)...)\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 13, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 669618590, 'comment_body': 'I think collecting the OneHot thing would ideally never change the answer. Maybe the test is like this:\r\n```suggestion\r\n    @test m(x2) isa Matrix{Float32}\r\n    @test m(x2) ≈ y\r\n    @test m(collect(x2)) ≈ y\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 13, 32, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 669621607, 'comment_body': 'My fault, but I think the public function here is the lower-case onehotbatch. This could be\r\n```suggestion\r\njulia> ans == m(Flux.onehotbatch([6, 15, 15], 1:26))\r\n```\r\nor else, according to taste,\r\n```suggestion\r\njulia> ans == m(Flux.onehotbatch(""foo"", \'a\':\'z\'))\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 13, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 669624174, 'comment_body': ""Good to test, I'd suggest much larger numbers here, like `x = rand(1:50, 10^6);`, to ensure there's enough work that it's very likely to be parallelised. "", 'comment_created': datetime.datetime(2021, 7, 14, 13, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 669928209, 'comment_body': 'I guess it comes down to whether the `Vector{Bool}` case should be a matmul or index operation.', 'comment_created': datetime.datetime(2021, 7, 14, 20, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 669929335, 'comment_body': 'Personally, I would keep the `Nil` overrides to a minimum and only do the vector case. Let the rest go through the normal routing for all arrays.', 'comment_created': datetime.datetime(2021, 7, 14, 20, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 669929706, 'comment_body': 'Maybe only for `AbstractVector` so that `Nil`-arrays can go through the reshape?', 'comment_created': datetime.datetime(2021, 7, 14, 20, 27, 1, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 669973103, 'comment_body': ""Those should agree when it's actually one-hot (if not OneHot) up to a dropdims:\r\n```\r\njulia> [1 2 3; 4 5 6] * [false, true, false]\r\n2-element Vector{Int64}:\r\n 2\r\n 5\r\n\r\njulia> [1 2 3; 4 5 6][:, [false, true, false]]\r\n2×1 Matrix{Int64}:\r\n 2\r\n 5\r\n```\r\nBut not when it's not:\r\n```\r\njulia> [1 2 3; 4 5 6] * [false, true, true]\r\n2-element Vector{Int64}:\r\n  5\r\n 11\r\n\r\njulia> [1 2 3; 4 5 6][:, [false, true, true]]\r\n2×2 Matrix{Int64}:\r\n 2  3\r\n 5  6\r\n```\r\nShould the latter case be an error? \r\n\r\nMaybe indexing would be faster although I'm not sure we care about optimising this. Logical indexing can't give you aliasing problems, if I'm thinking correctly. \r\n\r\nAnother possible strategy would just be to it an error on `AbstractArray{Bool}`. Only permit OneHot, or counting numbers. "", 'comment_created': datetime.datetime(2021, 7, 14, 21, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 669974937, 'comment_body': ""Oh I wasn't thinking about Nil, good point. Do you want Array{Nil} to behave like Array{Int} or like Array{Bool}? \r\n\r\nOne other weird feature is that if you make a OneHotTensor, like a boolean 3-array, this will reshape it to a vector. Maybe that's too weird to worry about. Or maybe it should reshape `AbstractArray{Bool}` not with vec but with `m(reshape(size(x,1), :))`"", 'comment_created': datetime.datetime(2021, 7, 14, 21, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 669994854, 'comment_body': ""I was mostly speaking from an optimization stand point. If we don't care about this case being fast (it is rare), then the suggested code works for me."", 'comment_created': datetime.datetime(2021, 7, 14, 22, 25, 37, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 669995969, 'comment_body': 'Yes, I think you are correct. Reshaping should be different when the first dimension encodes one-hot information. This definitely presents a problem for `Nil`, because the `Nil`-array is agnostic of whether the original input is one-hot or indices. In other words, the output size is input type dependent for this layer.', 'comment_created': datetime.datetime(2021, 7, 14, 22, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 670071207, 'comment_body': 'Would it be better to change the current onehot paths from \r\n```julia\r\nfunction (m::Embedding)(x::Union{OneHotLikeVector{T,L}, OneHotLikeMatrix{T,L,I}}) where {T,L,I}\r\n    size(m.weight, 2) == L || throw(DimensionMismatch(""Matrix column must correspond with OneHot size: $(size(m.weight, 2)) != $L""))\r\n  return m(onecold(x))\r\nend\r\n``` \r\nback to a matmul? ', 'comment_created': datetime.datetime(2021, 7, 15, 2, 6, 32, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 670073759, 'comment_body': 'Yes definitely, the current implementation is just code duplication.', 'comment_created': datetime.datetime(2021, 7, 15, 2, 14, 5, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 670100382, 'comment_body': 'In that case, is the only way for getting the correct output from `outputsize` just to ignore the first dimension of the one-hot input while passing in the `inputsizes` argument?', 'comment_created': datetime.datetime(2021, 7, 15, 3, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 805391217, 'comment_body': 'the old constructor should be deprecated', 'comment_created': datetime.datetime(2022, 2, 13, 17, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'CarloLucibello', 'type': 'User'}, {'comment_id': 805391401, 'comment_body': 'The old example was much clearer. \r\nThis constructor (`Embed(weight)`) is not even part of the docstring, we should add it', 'comment_created': datetime.datetime(2022, 2, 13, 17, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'CarloLucibello', 'type': 'User'}, {'comment_id': 805391771, 'comment_body': 'no need to test such large arrays, CI takes already a lot of time, previous test was fine', 'comment_created': datetime.datetime(2022, 2, 13, 17, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'CarloLucibello', 'type': 'User'}, {'comment_id': 805391818, 'comment_body': 'same as above', 'comment_created': datetime.datetime(2022, 2, 13, 17, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'CarloLucibello', 'type': 'User'}, {'comment_id': 806433728, 'comment_body': '+1 for the notation.\r\n\r\nDoes this need a deprecation?', 'comment_created': datetime.datetime(2022, 2, 15, 4, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 806436078, 'comment_body': ""To understand what's going on, this is using Nil to stand in as an index, right? Maybe that warrants a comment. This is not otherwise handled:\r\n```\r\njulia> rand(3)[Flux.nil]\r\nERROR: ArgumentError: invalid index: Flux.NilNumber.Nil() of type Flux.NilNumber.Nil\r\nStacktrace:\r\n [1] to_index(i::Flux.NilNumber.Nil)\r\n   @ Base ./indices.jl:300\r\n [2] to_index(A::Vector{Float64}, i::Flux.NilNumber.Nil)\r\n```\r\n\r\nAlso, is the fact that this doesn't mutate `dst` and returns something else going to bite us someday?"", 'comment_created': datetime.datetime(2022, 2, 15, 4, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 806438080, 'comment_body': ""Was going to suggest, mostly as documentation that these are indices (and won't accept CartesianIndices, etc):\r\n```suggestion\r\n(m::Embedding)(x::AbstractVector{<:Integer}) = NNlib.gather(m.weight, x)\r\n(m::Embedding)(x::AbstractArray{<:Integer}) = reshape(m(vec(x)), :, size(x)...)\r\n```\r\nBut this will break Nil.\r\n\r\nThe Nil handling does seem a bit weird. Sorry if you went over this a dozen times, but might it be less weird just to be really explicit, right here, and not overload `gather!`:\r\n```\r\n(m::Embedding)(x::Nil) = fill(nil, size(m.weight,1))\r\n(m::Embedding)(x::AbstractArray{Nil}) = fill(nil, size(m.weight,1), size(x)[2:end])  # regard Nil as an index, not a boolean\r\n```\r\n\r\n(Also, why isn't the `x::AbstractVector` method ambiguous with the `x::AbstractVecOrMat{Bool}` one? But it seems not to be, so it's fine as long as it's tested.)"", 'comment_created': datetime.datetime(2022, 2, 15, 4, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 806447741, 'comment_body': '```suggestion\r\n    Embedding(in => out; init=randn32)\r\n    Embedding(weight::AbstractMatrix)\r\n```', 'comment_created': datetime.datetime(2022, 2, 15, 5, 0, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 806448309, 'comment_body': 'Indeed on the constructor. \r\n\r\nThe virtue of this example is that it doesn\'t have random numbers, so it can be a doctest. My hope is that `onehotbatch(""foo"", \'a\':\'z\')` might connect with `26` well enough to be easy to follow. Maybe it can be made clearer somehow?', 'comment_created': datetime.datetime(2022, 2, 15, 5, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 806449068, 'comment_body': ""Ninja'd."", 'comment_created': datetime.datetime(2022, 2, 15, 5, 4, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 806449633, 'comment_body': ""10^6 seems quite big, but maybe there's a some value to bigger than 3, in case e.g. 3 is never parallelised. No idea if there's a particular cutoff. "", 'comment_created': datetime.datetime(2022, 2, 15, 5, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mcabbott', 'type': 'User'}, {'comment_id': 808241234, 'comment_body': 'Probably, we can modify the non-mutating variation: `NNlib.gather` which is what Flux layers will end up calling.', 'comment_created': datetime.datetime(2022, 2, 16, 17, 1, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 808273180, 'comment_body': 'This is what we had before (and we can still have it). The idea behind overriding `gather` instead is that anywhere we have indexing, we recommend using `gather` to be GPU-compatible. So, overriding `gather` will allow more custom layers with indexing to work with `outputsize`.', 'comment_created': datetime.datetime(2022, 2, 16, 17, 28, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 816966767, 'comment_body': 'I have updated `gather` to work with Nil as of now. We can however not go this route, and just make this work only for Embedding layer.', 'comment_created': datetime.datetime(2022, 3, 1, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 816967877, 'comment_body': 'I have updated it to be `10^3`. Would this also add a lot of time to CI?', 'comment_created': datetime.datetime(2022, 3, 1, 17, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}]","[{'commit_sha': 'cb3a4ca7d63816e641609555c26defb42a3196c3', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb489c3b21eb69d54e1742b787630476b8daeae2', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f702260781279fbff3ff121ca70c887c2719c1ac', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ff828093e1f13e176f769b04b1ff282c2fa33a5', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73d7281266ad62e05e20438ab07ef1cfc03b7f7e', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1e66d79c38dcfab4c77938ec699074d55ce974', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d80696f6911914037756d175dc13020ce16ad56', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2f096143d77b961dae64dccb45b24808ed5ed50', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef13026be74addce13ebbfe1670a1d0250c0c151', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}]",Manikya Bardhan,40057565,manikyabard@gmail.com,User,,31,,39,34
691460937,Add tabular learning methods,Adds the implementation of DLPipelines.jl `LearningMethod` interface for tabular regression and tabular classification tasks. ,True,141,https://api.github.com/repos/FluxML/FastAI.jl/pulls/141,https://github.com/FluxML/FastAI.jl/pull/141,closed,1118,24,17,28,8,28,0,0,[],2021-07-16 12:43:17+00:00,2021-08-22 19:02:09+00:00,3219532.0,"37 days, 6:18:52","[{'comment_id': 671341792, 'comment_body': 'Move this into `TabularTransforms` so it can be reused', 'comment_created': datetime.datetime(2021, 7, 16, 15, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 687506379, 'comment_body': 'This will error when a column is missing.', 'comment_created': datetime.datetime(2021, 8, 12, 8, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 687507937, 'comment_body': 'This should be concretely typed:\r\n```suggestion\r\n    size::Int\r\n```', 'comment_created': datetime.datetime(2021, 8, 12, 8, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 687525969, 'comment_body': 'Should be fixed now.', 'comment_created': datetime.datetime(2021, 8, 12, 9, 2, 2, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 689097476, 'comment_body': '```suggestion\r\n    catcols::NTuple{M}\r\n    contcols::NTuple{N}\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 14, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689097597, 'comment_body': 'Why is this changed?', 'comment_created': datetime.datetime(2021, 8, 15, 14, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689097962, 'comment_body': 'Can we make it clear that `backbone` is an optional argument and what the default is?', 'comment_created': datetime.datetime(2021, 8, 15, 14, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689098147, 'comment_body': '```suggestion\r\n    catcols::NTuple{M}\r\n    contcols::NTuple{N}\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 14, 29, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689098244, 'comment_body': 'Maybe we should restrain `x` to be a 2-tuple. Unless there is a reason not to?', 'comment_created': datetime.datetime(2021, 8, 15, 14, 29, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689098280, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 14, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689098390, 'comment_body': '```suggestion\r\nEncodes a `TableRow` by applying the following preprocessing steps:\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 14, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689098633, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 14, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689098795, 'comment_body': 'Can we use this in a constructor for `TabularTransform` so you can call it like `TabularTransform(TableDataset(...))`?', 'comment_created': datetime.datetime(2021, 8, 15, 14, 34, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689098833, 'comment_body': '```suggestion\r\n    return fm |> normalize |> categorify\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 14, 34, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689098958, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 15, 14, 35, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lorenzoh', 'type': 'User'}, {'comment_id': 689110303, 'comment_body': '```suggestion\n    (all(col -> col ∈ columns, (block.catcols..., block.contcols...)) &&\n```\n', 'comment_created': datetime.datetime(2021, 8, 15, 16, 3, 46, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689110411, 'comment_body': 'Prefer to use a `NamedTuple` over a `Dict`.', 'comment_created': datetime.datetime(2021, 8, 15, 16, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689111096, 'comment_body': 'Could simplify this:\n```julia\n    default￼￼￼_backbones = (categorical = ...,\n                         continuous = ...,\n                         classifier = ...)\n    backbones = [haskey(backbone, k) ? backbone[k] : default_backbones[k]\n                 for k in (:categorical, :continuous, :classifier)]\n    TabularModel(backbones...)\n```\n', 'comment_created': datetime.datetime(2021, 8, 15, 16, 10, 39, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689111340, 'comment_body': '`gettransformdict` to be shorter?', 'comment_created': datetime.datetime(2021, 8, 15, 16, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689231235, 'comment_body': ""For the encodings for which decoding isn't supported yet, like `TabularTransforms` (I'll rename this to TabularPreprocessing), it will give incorrect results I think. \r\nThe encoded block after applying `TabularTransforms` on a `TableRow` is `EncodedTableRow`, and if decoding was supported, then the decoded block should be a `TableRow` again. But as it isn't supported, using the fill option would make it so that `EncodedTableRow` is returned again (instead of `nothing` through the fallback method) which wouldn't be correct. \r\nThe tests after this could fail because `inblock` (which would be the encoded block in this situation), doesn't have to be the same as the original block. Also I'm not sure if the `if` condition would ever be `false` as of now. "", 'comment_created': datetime.datetime(2021, 8, 16, 4, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 689232685, 'comment_body': ""Sure I'll do that for `blockmodel`. I was wondering if there is way for `backbone` to still be optional if someone is using `methodmodel` or maybe even `methodlearner`."", 'comment_created': datetime.datetime(2021, 8, 16, 4, 32, 8, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 689234159, 'comment_body': 'Yeah, I think we can do that.', 'comment_created': datetime.datetime(2021, 8, 16, 4, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 689236445, 'comment_body': 'Sure, so something like this?\r\n```julia\r\nTabularTransform(td::TableDataset) = TabularTransform(gettransforms(td))\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 4, 48, 52, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 689633488, 'comment_body': 'Not sure if FastAI.jl prefers to not use concrete fields @lorenzoh \r\n\r\n```suggestion\r\nstruct TableRow{M, N, T} <: Block\r\n    catcols::NTuple{M}\r\n    contcols::NTuple{N}\r\n    categorydict::T\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689635207, 'comment_body': 'Turn this into docstrings (preferred) or a comment?', 'comment_created': datetime.datetime(2021, 8, 16, 15, 24, 42, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689635788, 'comment_body': 'Same as before.\r\n\r\n```suggestion\r\nstruct TabularTransform{T} <: Encoding\r\n\ttfms::T\r\nend\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 15, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689636067, 'comment_body': 'Same comment about concrete field types', 'comment_created': datetime.datetime(2021, 8, 16, 15, 25, 47, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}, {'comment_id': 689637285, 'comment_body': 'Could even have a helper `default_tabular_backbones()` that makes the default `NamedTuple` in [this suggestion](https://github.com/FluxML/FastAI.jl/pull/141/files#r689111096)', 'comment_created': datetime.datetime(2021, 8, 16, 15, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'darsnack', 'type': 'User'}]","[{'commit_sha': 'c15984a37873cd38e0b76986df59b79f122bc4e1', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd03cc5c175628e91932096f869e4550e3dd38591', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f75bdeb57162cd133c01b7727a763cb0ef2694', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d1d07dfdc5de0081cdc4bef983d9f4002696045', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91314cc3f20601dcafdaf7e8f288b2d24ea8f999', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4973e98a3e80c6d06b9dd6885ead5a8472e0c73', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '157233deddeab799999f189227dd76a853cddd93', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db243d1ff32177b2b74f36eca2c8f030061a467c', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd58d138d30900bd2cfc63238482508bee79a693e', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c21f80d978918e97eaf25d03f6717d1b824e83d', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d06b6a70122fb415f91919b0f55488677010271', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76ae61f07a231e2b32714becbabbbd903d36d88d', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4fb2f48a04244b770c5a1236e6e14323653d5547', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5704dfea39fc71d27e1ae0a0845a1a58da62799d', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04218a6d5f3c55480cf8cdf5b98f1ee9864ecc0d', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63cc460b0773b251b51026b988a0e24d8b60cf07', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb77d720b3c6d45c222d3b5ea41e1a2256d33f6', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '590f6b5230d1de1911c3708ea10c7a729a38c3fd', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28e0d5fff4cd39552e1461e0d950e6cf61deb756', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de868603d7efd64f4f6b52dab1b2ff0e2a39bbeb', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1434dd1eab4aa53451371483cc7d6bb9f8c69a05', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e23e9053db8c92319901d0329b444c28906fb0ba', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e47a0f8decdb68890b2612ddeadb4859a818f7', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77251c81a8c40014145e77d83fde462a608118ea', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1bbdb7450b0b6378494a55a7d632a6c96a8fdce', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73b1ac3577f597ee6157b6718c7b2a18d13fec9a', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d184407494a71cbf5dd44b2bb374f8c6e5a6498', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4abcc1066428ab08acc47e06ba64ba4b54029e8', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}]",Manikya Bardhan,40057565,manikyabard@gmail.com,User,,31,,39,34
686816798,add blog about working with tabular data using FastAI.jl,"The post explores some of the work done for FastAI.jl Development as a part of GSoC'21 ([container pr](https://github.com/FluxML/FastAI.jl/pull/26), [transformation pr](https://github.com/lorenzoh/DataAugmentation.jl/pull/45)) under the mentorship of @darsnack, @ToucheSir and @lorenzoh, and shows how to get started with working on tabular data by creating a container, and performing various transformations on it. ",False,94,https://api.github.com/repos/FluxML/fluxml.github.io/pulls/94,https://github.com/FluxML/fluxml.github.io/pull/94,open,207,0,1,2,3,14,0,0,[],2021-07-09 14:06:32+00:00,,0.0,,"[{'comment_id': 688926581, 'comment_body': '```suggestion\r\n[FastAI.jl](https://github.com/FluxML/FastAI.jl) is a package inspired by [fastai](https://github.com/fastai/fastai), and its goal is to easily enable creating state-of-the-art deep learning models.\r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 12, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'logankilpatrick', 'type': 'User'}, {'comment_id': 688926734, 'comment_body': ""```suggestion\r\nTo start, we'll have to take our tabular data and load it in such that it supports the interface defined by [Tables.jl](https://tables.juliadata.org/stable/#Implementing-the-Interface-(i.e.-becoming-a-Tables.jl-source)-1). Most of the popular packages for loading in data from different formats do so already, so you probably won't have to worry about this.\r\n```\r\nMaybe I am just missing something but this does not make that much sense. Can you try to simplify this? "", 'comment_created': datetime.datetime(2021, 8, 14, 12, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'logankilpatrick', 'type': 'User'}, {'comment_id': 688926866, 'comment_body': ""```suggestion\r\nBelow, we have the `path` to a CSV file, which we'll load in using the [CSV.jl](https://github.com/JuliaData/CSV.jl) package and then insert the data into a DataFrame using [DataFrames.jl](https://github.com/JuliaData/DataFrames.jl).  \r\n```"", 'comment_created': datetime.datetime(2021, 8, 14, 12, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'logankilpatrick', 'type': 'User'}, {'comment_id': 688926928, 'comment_body': 'What is this required interface? Can you link it? Or is this a general comment?', 'comment_created': datetime.datetime(2021, 8, 14, 12, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'logankilpatrick', 'type': 'User'}, {'comment_id': 688927038, 'comment_body': 'Ah, seems like you are referring to the Tables.jl Interface, maybe explicitly note that? ', 'comment_created': datetime.datetime(2021, 8, 14, 12, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'logankilpatrick', 'type': 'User'}, {'comment_id': 688927131, 'comment_body': '```suggestion\r\nThe tabular transformations are defined as a part of the `[DataAugmentation.jl](https://github.com/lorenzoh/DataAugmentation.jl)` package, and the currently available ones are: \r\n```', 'comment_created': datetime.datetime(2021, 8, 14, 12, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'logankilpatrick', 'type': 'User'}, {'comment_id': 688927187, 'comment_body': ""```suggestion\r\nThe `Normalization` transformation involves normalizing a row of data using the mean and standard deviation of the columns. To start, we'll have to create a `Dict` which contains the required information for all rows to be normalized.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 14, 12, 50, 7, tzinfo=datetime.timezone.utc), 'commenter': 'logankilpatrick', 'type': 'User'}, {'comment_id': 688927422, 'comment_body': 'I think you should not undersell your work here, I am truthfully unfamiliar with the deep technical detail but saying something like ""Before my GSoC project, we could only do x and y. Now we can do XY & Z together with this unified interface"". This will make it very clear why someone should read this post. ', 'comment_created': datetime.datetime(2021, 8, 14, 12, 52, 18, tzinfo=datetime.timezone.utc), 'commenter': 'logankilpatrick', 'type': 'User'}, {'comment_id': 688957151, 'comment_body': ""Agreed, this project was no small feat. Just look at how long it's taken other frameworks to (not) add support for new modalities!"", 'comment_created': datetime.datetime(2021, 8, 14, 16, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ToucheSir', 'type': 'User'}, {'comment_id': 688986562, 'comment_body': ""Yes, this was referring to the Tables.jl interface. Sure I'll do that."", 'comment_created': datetime.datetime(2021, 8, 14, 20, 6, 17, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 688988065, 'comment_body': ""Thanks for the comments! I'll add this in as well."", 'comment_created': datetime.datetime(2021, 8, 14, 20, 22, 10, tzinfo=datetime.timezone.utc), 'commenter': 'manikyabard', 'type': 'User'}, {'comment_id': 708301216, 'comment_body': '```suggestion\r\njulia> df = DataFrames.DataFrame(CSV.File(path))\r\n\r\njulia> first(df, 5)\r\n```', 'comment_created': datetime.datetime(2021, 9, 14, 14, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'DhairyaLGandhi', 'type': 'User'}, {'comment_id': 708302931, 'comment_body': 'Maybe add in a line about why this is cool, and how it generalises the usual `getindex` based approach for arrays to data frames?', 'comment_created': datetime.datetime(2021, 9, 14, 14, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'DhairyaLGandhi', 'type': 'User'}, {'comment_id': 708305037, 'comment_body': 'Show the `TablularItem` here to clarify what is written in the next sentence? We never see the `TabularItem` post normalisation.', 'comment_created': datetime.datetime(2021, 9, 14, 14, 4, 36, tzinfo=datetime.timezone.utc), 'commenter': 'DhairyaLGandhi', 'type': 'User'}]","[{'commit_sha': '05e066190462df7fa7f6786582c433bc46f75928', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb77ba0043e24401cca34a0b575e9f5760f494bf', 'committer_username': 'manikyabard', 'committer_name': 'Manikya Bardhan', 'committer_email': 'manikyabard@gmail.com', 'commit_date': datetime.datetime(2018, 6, 8, 9, 2, 50, tzinfo=datetime.timezone.utc)}]",Manikya Bardhan,40057565,manikyabard@gmail.com,User,,31,,39,34

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
265704822,FastAI.jl,FluxML/FastAI.jl,Julia,52,585,25,24,341,27,22,8,"[{'id': 727057809, 'number': 167, 'closed': datetime.datetime(2021, 9, 7, 12, 33, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 3, 19, 58, 27, tzinfo=datetime.timezone.utc), 'time_taken': 318904.0, 'time_delta': '3 days, 16:35:04', 'additions': 68, 'deletions': 74, 'state': 'closed'}, {'id': 691460937, 'number': 141, 'closed': datetime.datetime(2021, 8, 22, 19, 2, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 12, 43, 17, tzinfo=datetime.timezone.utc), 'time_taken': 3219532.0, 'time_delta': '37 days, 6:18:52', 'additions': 1118, 'deletions': 24, 'state': 'closed'}, {'id': 669090187, 'number': 124, 'closed': datetime.datetime(2021, 8, 22, 17, 10, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 13, 17, 43, 57, tzinfo=datetime.timezone.utc), 'time_taken': 6046008.0, 'time_delta': '69 days, 23:26:48', 'additions': 209, 'deletions': 3, 'state': 'closed'}, {'id': 609027134, 'number': 26, 'closed': datetime.datetime(2021, 6, 15, 11, 56, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 5, 15, 43, 50, tzinfo=datetime.timezone.utc), 'time_taken': 6120755.0, 'time_delta': '70 days, 20:12:35', 'additions': 112, 'deletions': 3, 'state': 'closed'}]"
250545316,DataAugmentation.jl,FluxML/DataAugmentation.jl,Julia,17,41,6,16,310,12,60,2,"[{'id': 664590441, 'number': 45, 'closed': datetime.datetime(2021, 8, 10, 13, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 9, 38, 32, tzinfo=datetime.timezone.utc), 'time_taken': 5457808.0, 'time_delta': '63 days, 4:03:28', 'additions': 194, 'deletions': 2, 'state': 'closed'}]"
55262614,Flux.jl,FluxML/Flux.jl,Julia,603,4450,91,242,4921,298,46,70,"[{'id': 686750931, 'number': 1656, 'closed': None, 'created': datetime.datetime(2021, 7, 9, 12, 27, 48, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 48, 'deletions': 32, 'state': 'open'}]"
106007826,fluxml.github.io,FluxML/fluxml.github.io,HTML,45,20,9,50,537,16,4,5,"[{'id': 686816798, 'number': 94, 'closed': None, 'created': datetime.datetime(2021, 7, 9, 14, 6, 32, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 207, 'deletions': 0, 'state': 'open'}]"
