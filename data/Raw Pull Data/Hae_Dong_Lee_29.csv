pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
710448369,[NEMO-483] Record Metrics associated with stream processing,"JIRA: [NEMO-483: Record Metrics associated with stream processing](https://issues.apache.org/jira/projects/NEMO/issues/NEMO-483)

**Major changes:**
-

Two types of metric were added. It can degrade performance, So It is recommended to use only for debugging purpose. 

Task periodically record how many data has received
- Record the following metric:
1. the number of processed tuples
2. the size of read serialized bytes 
- The recording period can be adjusted through ""stream_metric_period"" argument. the unit is milli second.
- If stream_metric_period is not set, it is disabled. 

For each task, record traversal time from source vertex. 
Source vertex sends latencymark from source vertex 
- The latencymark has the following data:
1. Timestamp when it was create. 
2. Task id where it created.
3. Task id where it delivered from. task id of upstream task. 
- When a latencymark is reached  at any task, It is recorded with the timestamp when it reached at task. 
- The period for creating latencymarks can be adjusted through ""latencymark_period"" argument. the unit is milli second. 
- If latencymark_period is not set, it is disabled.  

**Minor changes to note:**
-
**Tests for the changes:**
-
- Tested on ubuntu machine

**Other comments:**
-
- There is a gap between when the number of processed tuples increased and when the size of read serialized bytes is increased. Because the size of read serialized bytes is increased when the data are received, the number of processed tuples is increased just before it is processed, and data fetchers are working on the multithread environment. 
- When increasing the size of read serialized bytes, It is not possible to distinguish whether it is the data to be processed or the watermark, So When the number of processed tuples is 0, the size of read serialized bytes can be not 0. 
- If a task read data from local block, because upstream task is in the same node, the size of read serialized data does not increase because the data is not serialized. Instead, isReadNotSerializedData field of StreamMetric indicates whether the task read not serialized data or not.


Closes #317
",True,317,https://api.github.com/repos/apache/incubator-nemo/pulls/317,https://github.com/apache/incubator-nemo/pull/317,closed,911,136,39,39,19,98,0,0,[],2021-08-12 08:16:57+00:00,2021-10-18 12:15:14+00:00,5803097.0,"67 days, 3:58:17","[{'comment_id': 690014785, 'comment_body': 'Please add comments. ', 'comment_created': datetime.datetime(2021, 8, 17, 3, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690015208, 'comment_body': 'Why does it contain taskId? ', 'comment_created': datetime.datetime(2021, 8, 17, 3, 56, 40, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690015545, 'comment_body': '`task id of upstream task`? what does it mean? ', 'comment_created': datetime.datetime(2021, 8, 17, 3, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690015747, 'comment_body': '`String.valueOf` is unnecessary', 'comment_created': datetime.datetime(2021, 8, 17, 3, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690016081, 'comment_body': 'is it necessary? ', 'comment_created': datetime.datetime(2021, 8, 17, 3, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690016095, 'comment_body': 'is it necessary? ', 'comment_created': datetime.datetime(2021, 8, 17, 3, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690016263, 'comment_body': 'is it necessary?\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 4, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690016277, 'comment_body': 'is it necessary?\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 4, 0, 21, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690016451, 'comment_body': 'is it necessary?\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 4, 0, 53, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690016468, 'comment_body': 'is it necessary?\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 4, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690016972, 'comment_body': 'Lots of duplicate `onLatencyMark` code blocks. It would be good to refactor it. ', 'comment_created': datetime.datetime(2021, 8, 17, 4, 2, 25, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690017017, 'comment_body': 'Lots of duplicate onLatencyMark code blocks. It would be good to refactor it.\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 4, 2, 32, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690022597, 'comment_body': 'Perhaps we can create an abstract class that contains 61-68 code blocks and inherit the abstract class here ', 'comment_created': datetime.datetime(2021, 8, 17, 4, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690022752, 'comment_body': 'the -> The', 'comment_created': datetime.datetime(2021, 8, 17, 4, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690022787, 'comment_body': 'the -> The', 'comment_created': datetime.datetime(2021, 8, 17, 4, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690022851, 'comment_body': 'final', 'comment_created': datetime.datetime(2021, 8, 17, 4, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690023049, 'comment_body': 'What is the purpose of this class?', 'comment_created': datetime.datetime(2021, 8, 17, 4, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690023073, 'comment_body': 'final', 'comment_created': datetime.datetime(2021, 8, 17, 4, 23, 22, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690023145, 'comment_body': 'Metric -> Metrics. it -> It ', 'comment_created': datetime.datetime(2021, 8, 17, 4, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690023551, 'comment_body': 'What is the key of this map? ', 'comment_created': datetime.datetime(2021, 8, 17, 4, 24, 49, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690023936, 'comment_body': 'Why `ArrayList`? Not `LinkedList`? ', 'comment_created': datetime.datetime(2021, 8, 17, 4, 26, 14, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690024200, 'comment_body': ""Hard-coded strings doesn't look good. Maybe we need to refactor it in the future. "", 'comment_created': datetime.datetime(2021, 8, 17, 4, 27, 17, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690024653, 'comment_body': 'What is the difference between `getNumSerializedBytes` and `getCurrNumSerializedBytes`?  and why do we need this method? ', 'comment_created': datetime.datetime(2021, 8, 17, 4, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690024685, 'comment_body': 'What is the difference between getNumEncodedBytes and getCurrNumEncodedBytes?\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 17, 4, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690025285, 'comment_body': 'We need to change the variable name `isWatermark`', 'comment_created': datetime.datetime(2021, 8, 17, 4, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690025477, 'comment_body': ""Lot's of duplicate codes with emitWatermark. We need refactoring "", 'comment_created': datetime.datetime(2021, 8, 17, 4, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690026259, 'comment_body': 'Maybe we need to create Metrics class and add static variables, instead of using hard-coded strings. ', 'comment_created': datetime.datetime(2021, 8, 17, 4, 34, 12, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 690056256, 'comment_body': 'latency mark tracks path from source to sink, So It means where this mark from. In the path from source to sink, It indicates the task id of the previous task. ', 'comment_created': datetime.datetime(2021, 8, 17, 5, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 690056935, 'comment_body': 'I considered it is possible that there are multiple stage that has source vertex. So I added createdTaskId field.\r\nlatencymark does not record only latency between source to sink. It record latency between every task in the path. So I added lastTaskId field to track path.', 'comment_created': datetime.datetime(2021, 8, 17, 5, 56, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 690063094, 'comment_body': ""[getNumSerializedBytes](https://github.com/apache/incubator-nemo/blob/74d4a86b5c99418922317be41f0655d2dc48be6a/runtime/executor/src/main/java/org/apache/nemo/runtime/executor/data/DataUtil.java#L484) should be called after the actual data is taken out of iterator. and it is used to check whether this task is over or not. \r\n\r\nI don't want to make a side effect by modifying getNumSerializedBytes. \r\nSo I created a new method [getCurrNumSerializedBytes](https://github.com/apache/incubator-nemo/blob/74d4a86b5c99418922317be41f0655d2dc48be6a/runtime/executor/src/main/java/org/apache/nemo/runtime/executor/data/DataUtil.java#L494) to get serialized bytes before done. \r\n"", 'comment_created': datetime.datetime(2021, 8, 17, 6, 10, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 690063788, 'comment_body': 'It has same definition and reason with getCurrNumSerializedBytes', 'comment_created': datetime.datetime(2021, 8, 17, 6, 11, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 690067001, 'comment_body': ""I had a habit of using `ArrayList`. I'll change to `LinkedList`"", 'comment_created': datetime.datetime(2021, 8, 17, 6, 19, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 690071971, 'comment_body': 'source vertex id of data fetcher. It means where is the data come from. \r\n\r\nI tried to use taskId instead. But there are no way to get previous task id in the task. ', 'comment_created': datetime.datetime(2021, 8, 17, 6, 28, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 690253204, 'comment_body': 'Does it means that we need to combine emitLatencymark and emitWatermark?', 'comment_created': datetime.datetime(2021, 8, 17, 10, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384100, 'comment_body': 'I tried to merge it with a method called emitWatermark. However, until the methods of writer and transform are divided, merging only methods of OutputCollector looks not good. emitLatencymark and emitWatermark looks similar but eventually watermark and latencymark have to be handled differently. So I suggest remaining both of methods, emitLatencymark and emitWatermark. ', 'comment_created': datetime.datetime(2021, 9, 5, 7, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384550, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 7, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384565, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 7, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384568, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 7, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384576, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 7, 59, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384581, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 7, 59, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384596, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 7, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384601, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384620, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384632, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384675, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384681, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384685, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384694, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384715, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384743, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384745, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384754, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702384759, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 5, 8, 1, 9, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 702388791, 'comment_body': ""Or it's also welcome to think about a better structure together."", 'comment_created': datetime.datetime(2021, 9, 5, 8, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 703956159, 'comment_body': 'Is this comment correct? ', 'comment_created': datetime.datetime(2021, 9, 8, 1, 24, 35, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703957301, 'comment_body': 'But, the comment says that `taskId` is the task where the event is created. It is not lastTaskId. Is this comment incorrect?  ', 'comment_created': datetime.datetime(2021, 9, 8, 1, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703958106, 'comment_body': 'This contains two task id: createdTaskId and lastTaskId. I would like to know why the two fields are required. ', 'comment_created': datetime.datetime(2021, 9, 8, 1, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703958564, 'comment_body': ""The field name `lastTaskId` is confusing to me. Isn't it sink? What is the last? Is it previousTask? or lastTask? "", 'comment_created': datetime.datetime(2021, 9, 8, 1, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703959364, 'comment_body': 'Unnecessary codes because AbstractDoFnTransform has the same code block? ', 'comment_created': datetime.datetime(2021, 9, 8, 1, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703959641, 'comment_body': 'Why not final?', 'comment_created': datetime.datetime(2021, 9, 8, 1, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703959686, 'comment_body': 'Why not final?', 'comment_created': datetime.datetime(2021, 9, 8, 1, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703959792, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 9, 8, 1, 35, 29, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703961279, 'comment_body': 'return streamMetrics', 'comment_created': datetime.datetime(2021, 9, 8, 1, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703961302, 'comment_body': 'remove this', 'comment_created': datetime.datetime(2021, 9, 8, 1, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703961323, 'comment_body': 'remove this', 'comment_created': datetime.datetime(2021, 9, 8, 1, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703962033, 'comment_body': 'Where is it used?', 'comment_created': datetime.datetime(2021, 9, 8, 1, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703962054, 'comment_body': 'Where is it used?', 'comment_created': datetime.datetime(2021, 9, 8, 1, 42, 29, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 703962121, 'comment_body': 'Is it currentTask? ', 'comment_created': datetime.datetime(2021, 9, 8, 1, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 704972749, 'comment_body': 'remove this ', 'comment_created': datetime.datetime(2021, 9, 9, 5, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 704979535, 'comment_body': ""Sending metrics in each task may lead to huge overheads if the number of tasks is large. Can't we use separate threads for sending metrics? Maybe we need another class for retrieving and sending task metrics.\r\n"", 'comment_created': datetime.datetime(2021, 9, 9, 5, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 705804055, 'comment_body': ""No, you are right. I'll correct this comment"", 'comment_created': datetime.datetime(2021, 9, 10, 0, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705809356, 'comment_body': 'First of all, Pair of createdTaskId and timestamp indicates the starting point. For examples,\r\n  &nbsp;    -----------B-----------\r\n    /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\    &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     A to E indicates tasks\r\n A ------------C-----------E    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    dash indicates edges\r\n  \\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/    &nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &nbsp;&nbsp;  A is a source, and E is a sink\r\n &nbsp;&nbsp;     ------------D----------     \r\nLatencymark is created from task A with timestamp and createdTaskId. \r\nAnd the lastTaskId needs to follow each path. \r\nWhen Latencymark reached at task E, there are totally three path, A-B-E, A-C-E, A-D-E. And I want to \r\nknow latency for each path. So I make it hold the previous task Id. So when Latencymark reached at task E, Task E received three latencymark. And the lastTaskId will be B, C, and E, respectively. Of course, The lastTaskId itself does not have a meaning, but I expected that we would know the latency for each path if we followed the lastTaskId. This part may be controversial and I think it will be okay to remove if it is deemed unnecessary.', 'comment_created': datetime.datetime(2021, 9, 10, 0, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705810807, 'comment_body': 'It is used to indicates the source task', 'comment_created': datetime.datetime(2021, 9, 10, 0, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705815340, 'comment_body': 'As I know, every getter is used when metrics are stored in json file. \r\nIf it is not exist, createdTaskId does not stored in json file', 'comment_created': datetime.datetime(2021, 9, 10, 0, 48, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705815645, 'comment_body': 'It is previousTask I explained previous comment. ', 'comment_created': datetime.datetime(2021, 9, 10, 0, 49, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705819061, 'comment_body': 'AbstractDoFnTransform has the onLatencymark method. \r\nIt is a method of GBKOutputCollector class', 'comment_created': datetime.datetime(2021, 9, 10, 0, 58, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705820876, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 10, 1, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705820959, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 10, 1, 1, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705821540, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 10, 1, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705822751, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 10, 1, 8, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705899838, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 10, 5, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705899859, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 10, 5, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705903886, 'comment_body': ""method is called only [here](https://github.com/apache/incubator-nemo/blob/60715bd1bcabea0ec9abac1bec57959116962324/runtime/executor/src/main/java/org/apache/nemo/runtime/executor/task/TaskExecutor.java#L155) and It is called at separated thread. I'll add a comment about this context. \r\nBut anyway It is too inefficient that creating an additional thread for every task. However If I want to separate this, I have to store the created taskExecutors in Executor, And It is implemented [not merged PR](https://github.com/apache/incubator-nemo/pull/314/files). Is It okay to implement same Map in this PR?\r\n"", 'comment_created': datetime.datetime(2021, 9, 10, 5, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 705909154, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 10, 5, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 706973929, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 9, 13, 3, 1, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 707880953, 'comment_body': 'I cannot find the usage of `getCreatedtaskId()`. ', 'comment_created': datetime.datetime(2021, 9, 14, 3, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 707881141, 'comment_body': ""Why don't you change the name? getPreviousTaskId ? "", 'comment_created': datetime.datetime(2021, 9, 14, 3, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 707882330, 'comment_body': 'What happen in the following situation?\r\n-----------B ------ C --------\r\n/ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\\\\r\nA -------- D ------   E -------- F\r\n\r\nThere are three paths: \r\n1) A->B->C->F \r\n2) A->B->C->E->F\r\n3) A->D->E->F\r\n\r\nHow can we distinguish 2) and 3) if we only hold the createdTaskId and the previousTaskId? ', 'comment_created': datetime.datetime(2021, 9, 14, 3, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 707900374, 'comment_body': 'This method is not explicitly used. In the process of storing metrics in the json format. It seems that the getter is automatically scanned and used, Because If I remove this method, createdTaskId field is not included in json file. ', 'comment_created': datetime.datetime(2021, 9, 14, 4, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 707911107, 'comment_body': 'traverse time from E to F will not significantly different. So if we want to distinguish 2) and 3) we can check the record of the previous task. Then we can find a difference between C to E and D to E. Rather than the metric itself is meaningful, It needs an effort to gather transmission times between nodes\r\n\r\nI think the departure time from the previous task will be important. But In the current structure, There seems little bit difficult to judge. because several Latencymark with the same source task id and created time can be sent. \r\n\r\nI will change to record the time when the latencymark departed from the previous task or modify to send only unique(with unique pair of createTaskid and createdTimestamp) Latencymark', 'comment_created': datetime.datetime(2021, 9, 14, 5, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 707986041, 'comment_body': 'Where is it used? ', 'comment_created': datetime.datetime(2021, 9, 14, 7, 24, 5, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 707986844, 'comment_body': 'Could you please let me know the code block? ', 'comment_created': datetime.datetime(2021, 9, 14, 7, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 708014142, 'comment_body': ""storing json file is start from [here](https://github.com/apache/incubator-nemo/blob/65440c1a9acc5fdc4b7705de61610499ed2f6b84/runtime/master/src/main/java/org/apache/nemo/runtime/master/metric/MetricStore.java#L217). But I don't know about the internal process"", 'comment_created': datetime.datetime(2021, 9, 14, 8, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 708015895, 'comment_body': ""It is needed to storing json file, too. If it doesn't exist, metrics are not recorded in json file.  "", 'comment_created': datetime.datetime(2021, 9, 14, 8, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Lemarais', 'type': 'User'}, {'comment_id': 709085159, 'comment_body': 'Sorry, I cannot find the usage of this field. After collecting latency marks in the master, where is this used? I found that your code uses only the previousTaskId.', 'comment_created': datetime.datetime(2021, 9, 15, 11, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 709085945, 'comment_body': 'Sorry, I cannot find the usage of this code. Only `getPreviousTaskId()` is called.', 'comment_created': datetime.datetime(2021, 9, 15, 11, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 709085987, 'comment_body': 'Sorry, I cannot find the usage of this code. Only `getPreviousTaskId()` is called.', 'comment_created': datetime.datetime(2021, 9, 15, 11, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}, {'comment_id': 709088199, 'comment_body': ""It doesn't look like this is used for storing json file. "", 'comment_created': datetime.datetime(2021, 9, 15, 11, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'taegeonum', 'type': 'User'}]","[{'commit_sha': 'e97635b58f5b32b4f302a4028b2be818c68de0ce', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '253eea8d33fb594e5990adbb051704aa289cad42', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95bcd00dd504fe527514dc52c3ab6dea174a3113', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cab665d71251de2876d27a11a457fef74e6c59c4', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '367d16686d3e8da1d1c9b519921c093b4da472f1', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '172bdd28eacb0aa287a2a2f50e947e2e646671c0', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd57ed5d7b60ae9f5ce0a9620cc02685a776f1af', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14703eb3959a468969abc654f85cab7f2e042dde', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c330fc97c1711b5e23d02fa2798657e28a90ab98', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8381dcca1e03e3d2b3b7de49e3867c2da7b0c3a7', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11cd5175a61ec42bb983507514ed8db3148f5a33', 'committer_username': 'taegeonum', 'committer_name': 'Taegeon Um', 'committer_email': 'taegeonum@gmail.com', 'commit_date': datetime.datetime(2012, 1, 23, 16, 28, 48, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd772d00cc9c9c075f100287b8d9b6cff4d14ade5', 'committer_username': 'wonook', 'committer_name': 'Won Wook SONG', 'committer_email': 'wonook@apache.org', 'commit_date': datetime.datetime(2014, 2, 15, 16, 53, 15, tzinfo=datetime.timezone.utc)}, {'commit_sha': '753462893455f370c90342b91607487ec7965340', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74d4a86b5c99418922317be41f0655d2dc48be6a', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37fa13e707eb4f221963935f68f25fec6b7c2a5a', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7826779ed109906b976d6469e295cd0c37e15205', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b99748724c8c02935a3a058cf11ffd0ef7309c5', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72de85b2b8d04e8fb66dd707b7148bc0e5c6b277', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a7a406f4124633204e4851fec97afb308953d5d', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '583f5f1872f1426fa4d1cb2a7d32be9870cb631b', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '460398e75330567ccc0867d086878948cb860404', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4c158427c32d60d14c15caea05998c8f2409866', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6802b4397d0d345e2aa627c7e61f7421c598c5f', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb9b59f638c6c0c3366c8dad0d10f2a8fdc67d8b', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9daef85a88b6b9ef0f6de0868dda375bf6b461e', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f8275159d7c3082b68071ef1ece135ce455d8f3', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60715bd1bcabea0ec9abac1bec57959116962324', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f5ae20039e8d126cc36ad1f45aa45e7c86557bd', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8aafc151aa91ea5596b2f11f2f6747e5c449c236', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f38033d5eed237591e5820ccdf69053e9ab66b12', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55bbc6cf9ef4724242a60ba1cdab17be73787d88', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd31f1c2a0bcfa48e17bed20405cb83d837f0f154', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff028ab486f42787495977b866798ad6580a620b', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '498b76db96e7ae21260758f9fd18ce5f491aed2b', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bc0c714ac520f087968e84580c1ef7576e74f58', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd74d3dd83a4a48fbcbc712db36aed2ae25d2fcf3', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '648e7f1d7eec535962c87a9b2e2e56adeb0da119', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '668c7c1150765eca584cd77bfd78e63e2607ffee', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a37f5291552ef6e2cfcf06600a9b963c76c2890', 'committer_username': 'Lemarais', 'committer_name': 'Lemarais', 'committer_email': 'goehd4551@naver.com', 'commit_date': datetime.datetime(2017, 3, 19, 8, 17, 25, tzinfo=datetime.timezone.utc)}]",Lemarais,26518231,goehd4551@naver.com,User,,10,,0,2

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
123152853,incubator-nemo,apache/incubator-nemo,Java,65,112,14,49,644,21,19,21,"[{'id': 722708420, 'number': 322, 'closed': None, 'created': datetime.datetime(2021, 8, 30, 18, 13, 32, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 2591, 'deletions': 375, 'state': 'open'}, {'id': 710448369, 'number': 317, 'closed': datetime.datetime(2021, 10, 18, 12, 15, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 8, 16, 57, tzinfo=datetime.timezone.utc), 'time_taken': 5803097.0, 'time_delta': '67 days, 3:58:17', 'additions': 911, 'deletions': 136, 'state': 'closed'}, {'id': 698402999, 'number': 313, 'closed': datetime.datetime(2021, 8, 8, 18, 41, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 6, 27, 11, tzinfo=datetime.timezone.utc), 'time_taken': 994450.0, 'time_delta': '11 days, 12:14:10', 'additions': 302, 'deletions': 8, 'state': 'closed'}, {'id': 603455162, 'number': 307, 'closed': datetime.datetime(2021, 4, 2, 10, 31, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 30, 7, 30, 42, tzinfo=datetime.timezone.utc), 'time_taken': 270068.0, 'time_delta': '3 days, 3:01:08', 'additions': 32, 'deletions': 4, 'state': 'closed'}, {'id': 599422433, 'number': 306, 'closed': datetime.datetime(2021, 3, 30, 6, 48, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 24, 6, 28, 36, tzinfo=datetime.timezone.utc), 'time_taken': 519576.0, 'time_delta': '6 days, 0:19:36', 'additions': 32, 'deletions': 4, 'state': 'closed'}]"
