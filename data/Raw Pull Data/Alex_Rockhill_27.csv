pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
994888612,[ENH] Add tutorial on time-frequency source estimation with STC viewer GUI,"Related to https://github.com/mne-tools/mne-python/issues/10721, GSoC.

So I realize there aren't really any tutorials on time-frequency source space resolution (there is DICS but that's just frequency in the tutorial) so I think this fills a very important gap in MNE functionality. Also, since it is the most complete use case (you can always average across time or trials) it covers a lot of other use cases so I'm pretty excited about adding this.

Basically, time-frequency resolved MEG data is filtered using an LCMV beamformer. This yields a list of lists of stcs where the outer layer is frequencies and the inner layer is trials. The above referenced issue is the discussion for why this is hard to keep track of and could use the introduction of a new object. There's a lot that could be done but the priorities in order are:

- [x] Make the user interface (in `pyvistaqt` first)
    - [ ] Once https://github.com/mne-tools/mne-python/pull/10913 is merged, use the abstraction
- [x] Make a `TFRVolSourceEstimate` class to hold the list of list stcs and be returned by `apply_lcmv_epochs_tfr`
- [x] Allow other functions to return corresponding TFR source objects as much as possible? This is a bit scope creep but it would be inconsistent to only have this functionality for `LCMV`. Making a new class for each existing source estimate class seems like a ton of overhead but potentially the more flexible source vertices+time+frequency+trials stc classes could supersede the source vertices+time source estimates and those could just be the flat case of the more general source estimates, that might be a huge refactoring though since it's so central to MNE.

Now is a great time to take five minutes to review the future direction if you have a minute. I will be out of town for the next few days so there won't be much movement.

cc @britta-wstnr @larsoner @drammock ",True,10920,https://api.github.com/repos/mne-tools/mne-python/pulls/10920,https://github.com/mne-tools/mne-python/pull/10920,closed,1369,70,12,42,117,127,0,1,[],2022-07-12 23:59:18+00:00,2022-12-02 01:32:16+00:00,12274378.0,"142 days, 1:32:58","[{'comment_id': 921159010, 'comment_body': 'this only makes sense if the epochs_tfr.data are complex valued right? if it contains only the power in TF domain this is for me wrong.', 'comment_created': datetime.datetime(2022, 7, 14, 13, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 921160027, 'comment_body': 'idem. What do you expect epochs_data to contain?\r\n', 'comment_created': datetime.datetime(2022, 7, 14, 13, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 921160405, 'comment_body': 'I would also return the frequencies  of each cov.', 'comment_created': datetime.datetime(2022, 7, 14, 13, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 922586416, 'comment_body': ""Why does this only work for complex-valued data and not power? I have not read up on the math but from seeing this presented and the name linearly-constrained minimum variance beamforming, I'm not sure why you couldn't use either..."", 'comment_created': datetime.datetime(2022, 7, 16, 0, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 922652412, 'comment_body': 'Because a spatial filter can only be applied on a linear time domain transform of the data eg Fourier. If you apply any non linearity to data eg to get power it is wrong ', 'comment_created': datetime.datetime(2022, 7, 16, 8, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 922693140, 'comment_body': 'Wow okay this is news to me! Can you also not do minimum norm estimation on power? And if you can, why is that different?', 'comment_created': datetime.datetime(2022, 7, 16, 15, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 927062125, 'comment_body': 'Both frequencies and method should be informed by the filter, as they should match.', 'comment_created': datetime.datetime(2022, 7, 21, 20, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 927067113, 'comment_body': ""If we follow `apply_` tradition, epochs and averaged data should be two different functions. I would concentrate on averaged data first, to keep it simple - that is also what you need for your visualization. If folks want to browse epochs, they'd usually do that in sensor space, I reckon. I would concentrate on averages first, and if there is time add the rest later."", 'comment_created': datetime.datetime(2022, 7, 21, 20, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 927067838, 'comment_body': ""Refresh my mind: is that the dimensions order we agreed on? Wasn't space first?"", 'comment_created': datetime.datetime(2022, 7, 21, 20, 17, 48, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 927070237, 'comment_body': 'I would not call this ""evoked TFR"", if this means the Hilbert beamformer. My mind goes automatically to Morlet and Wavelet. If this assumes bandpass-filtered or Hilbertized data, we should call it that.\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 21, 20, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 927071677, 'comment_body': 'What is an `evoked_tfr`? If it is just a bandpass-filtered or Hilbertized evoked, why do we need a new apply function for this?', 'comment_created': datetime.datetime(2022, 7, 21, 20, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 927072522, 'comment_body': ""Same as above: wouldn't call it that, and why do we need an extra function?"", 'comment_created': datetime.datetime(2022, 7, 21, 20, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 927074190, 'comment_body': 'If anything, I would go with a wrapper, that can use several LCMV filters, and apply them to several filtered evoked objects, and then make a multi-dimensional source object out of it. Or, maybe even better: have a function that can create such a source object from several source objects. i.e., you compute and apply your filters in a for loop, and then glue them together into one `stc`', 'comment_created': datetime.datetime(2022, 7, 21, 20, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 927076086, 'comment_body': 'They are reordered below, this is just for convenience/readability', 'comment_created': datetime.datetime(2022, 7, 21, 20, 28, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 927077656, 'comment_body': ""This is where the above discussion has consequences in the API; the bandpass-filter Hilbert-transformed data should really be stored in an object so that it's not a bunch of unruly lists. The object that makes sense already exists, it just hasn't been associated with this use yet."", 'comment_created': datetime.datetime(2022, 7, 21, 20, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 927078662, 'comment_body': 'I agree that that is easier but I took on this GSoC because I wanted to do single-trial resolution for my own data analysis purposes so it would be nice to allow for the more general case.', 'comment_created': datetime.datetime(2022, 7, 21, 20, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 927078946, 'comment_body': 'Good catch!', 'comment_created': datetime.datetime(2022, 7, 21, 20, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 927080778, 'comment_body': 'That was my original thought but this leverages existing MNE objects\r\n\r\n', 'comment_created': datetime.datetime(2022, 7, 21, 20, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 927082669, 'comment_body': ""Because you are passing the epochs that have a bandfiltered frequency so the filters need to be looped over, one for each frequency. It hacks the MNE structure and uses Epochs to feed into the `_apply_lcmv` as we do in other places in the codebase but that kind of stuff really can't be in examples."", 'comment_created': datetime.datetime(2022, 7, 21, 20, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 927414869, 'comment_body': '```suggestion\r\n- Add :func:`mne.beamformer.apply_lcmv_evoked_tfr`, :func:`mne.beamformer.apply_lcmv_epochs_tfr`, :func:`mne.beamformer.apply_dics_evoked_tfr`, :func:`mne.beamformer.apply_dics_epochs_tfr` and :func:`mne.minimum_norm.apply_inverse_evoked_tfr`, :func:`mne.minimum_norm.apply_inverse_epochs_tfr` to apply inverse methods to time-frequency resolved epochs (:gh:`10920` by `Alex Rockhill`_)\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 8, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 930269265, 'comment_body': 'not sure why this was marked ""resolved"" as it seems like the current code is still not returning the frequencies', 'comment_created': datetime.datetime(2022, 7, 26, 18, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 932762596, 'comment_body': 'Good catch, I changed this for the `apply_*` functions but missed this one.', 'comment_created': datetime.datetime(2022, 7, 28, 23, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 945664660, 'comment_body': 'Following `apply_inverse_tfr_epochs` (and e.g. `apply_inverse_psd_epochs`), this should be `apply_lcmv_tfr_epochs`.\r\n`apply_lcmv_evoked_tfr` should probably become `apply_lcmv_tfr`, given that `apply_lcmv` also assumes evoked objects.\r\n\r\nSame for DICS below.', 'comment_created': datetime.datetime(2022, 8, 15, 12, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 945665049, 'comment_body': 'Why does all of this show up here?', 'comment_created': datetime.datetime(2022, 8, 15, 12, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 945665280, 'comment_body': 'Is this on purpose? Looks dangerous to me.', 'comment_created': datetime.datetime(2022, 8, 15, 12, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 945666680, 'comment_body': 'Why is this needed for the tutorial? Should this not happen in #10980 instead?', 'comment_created': datetime.datetime(2022, 8, 15, 12, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 945667093, 'comment_body': 'Again, should this not be #10980 ?', 'comment_created': datetime.datetime(2022, 8, 15, 12, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 945671516, 'comment_body': ""I don't think you have `pick_ori` in the `apply` functions."", 'comment_created': datetime.datetime(2022, 8, 15, 12, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 945672135, 'comment_body': 'This looks like it needs an update.', 'comment_created': datetime.datetime(2022, 8, 15, 12, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 945672656, 'comment_body': 'I get a lot of ""imported but unused"" warnings from GitHub for the imports above.', 'comment_created': datetime.datetime(2022, 8, 15, 12, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 946013701, 'comment_body': ""This was just from rebasing and being the first entry and so I changed the latest template file and copied it over to latest.inc. It's just cruft now, I'll be sure it's not touched when the PR is ready to merge and not a work in progress"", 'comment_created': datetime.datetime(2022, 8, 15, 18, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 946017898, 'comment_body': ""This is a good question and point of discussion. It's also related to my suggesting focusing on epochs instead of evoked above. The reasoning behind this is that, as far as I know, it's best coding practice to solve for the most general case, that way you're sure you won't have to do a large rewrite to support a case that you didn't support originally. This would mean using a source estimate resolved by epochs, that is a vector solution and has frequencies as well as times so that you cover all possible use cases (that I can think of). If/when that PR merges, I will refactor it out of this PR but it's nice to have it in here for now so that the tutorial runs top to bottom and we can see the final product!"", 'comment_created': datetime.datetime(2022, 8, 15, 18, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 946018689, 'comment_body': ""Same as above, will refactor out once merged but otherwise, the tutorial won't run since it uses the most general case (epochs + vector + tfr)."", 'comment_created': datetime.datetime(2022, 8, 15, 18, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 946019334, 'comment_body': 'Yeah this was a bug in the implementation that got fixed in the other PR and needs to be ported over. This is probably causing many CI failures.', 'comment_created': datetime.datetime(2022, 8, 15, 18, 34, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 946020655, 'comment_body': ""This is the work in progress GUI, it's almost ready to push a version without all these errors just squashing a few bugs! It's much more extensive than this but only on my local branch. The GUI isn't ready for review yet (it will be very soon though!), when I said above that the PR could be reviewed, I meant just the source time course-generating part, sorry if that was unclear."", 'comment_created': datetime.datetime(2022, 8, 15, 18, 35, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 946023307, 'comment_body': ""Similar to previous, this was a much rougher GUI, very close to being pushed now and it won't have this cruft.\r\n\r\nRelated to your comment:\r\n\r\n> Not sure I understand why you added the GUI here - is it not better to have that in a separate PR and then rebase and update this once the GUI is merged?\r\n\r\nI'd like to have the full working tutorial all in one place to plan and see things at a high-level the way I'd like them to turn out all together. It doesn't all have to be merged in one giant PR, smaller PRs can be split off to make things easier for discussion. I prefer to work this way though so that I don't lose sight of the end goal/not have the pieces (separate PRs) fit together."", 'comment_created': datetime.datetime(2022, 8, 15, 18, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 946030338, 'comment_body': ""Also related to working style/preference, I implemented the `apply_*_tfr` functions to return the new STC object because I think my brain would explode if I tried to work with the list of lists of stcs. I plan on implementing the list-of-lists-of-stcs-viz.to-new-stc-class function but that's rather tricky as the actual class doesn't exist yet and it should really be done the right way if it's going to be in the public API without a warning that it's experimental like the warning in the `mne.viz.Brain` class. That would mean supporting different combinations/dimensions and testing them e.g. a list of lists where the outside list is epochs and the inside list is frequencies or the outside list is source vertices and the inside list is frequencies. There's quite a few combinations and I didn't want to distract too much from the main goal since it's just a stop-gap solution so I wanted to do it last to prioritize the GUI."", 'comment_created': datetime.datetime(2022, 8, 15, 18, 49, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 954544962, 'comment_body': 'say something that it should be the complex values', 'comment_created': datetime.datetime(2022, 8, 25, 6, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 954545330, 'comment_body': 'this versionadded is not necessary and same below', 'comment_created': datetime.datetime(2022, 8, 25, 6, 22, 3, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 954545637, 'comment_body': 'also apply_inverse_cov', 'comment_created': datetime.datetime(2022, 8, 25, 6, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 954547127, 'comment_body': ""I don't think this makes sense. I don't really see a use case where you would average the complex valued EpochsTFR. You would look all the interest for TFR to find induced activity. I would not expose such a method."", 'comment_created': datetime.datetime(2022, 8, 25, 6, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 954548858, 'comment_body': ""yes let's stick to MNE methods and keep beamforming outside of this for now"", 'comment_created': datetime.datetime(2022, 8, 25, 6, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 955230096, 'comment_body': 'Sounds good, I split that the beamformer code into another PR', 'comment_created': datetime.datetime(2022, 8, 25, 17, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 969075821, 'comment_body': 'Wrong docstring?', 'comment_created': datetime.datetime(2022, 9, 13, 2, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 969076658, 'comment_body': ""I thought the scope for this GSoC was specifically for viewing TFRs in a brain (somehow!) but now it seems much more general if you can pass `Epochs` or `Evoked`. Based on the naming and inputs it seems a lot like either one or both of:\r\n\r\n1. `stc.plot` / `Brain(...).add_data(...)`, which provides a 3D view.\r\n2. `vol_stc.plot` / `plot_volume_source_estimate`, which gives orthoview slices of 3D volumes\r\n\r\nThis makes me worry a bit about scope / vision / clarity of uses for end-users (who, up until now, should just work with some variant of `Brain`). Have you already had discussions on GH about this overlap and how to deal with it that I should read?\r\n\r\nIt's always easier and more fun to make something from scratch, but there is a lot of value in integrating with existing stuff where possible, so I want to make sure we have where we can.\r\n\r\nYou also say you support Epochs and Evoked but they are not used anywhere in an example/tutorial. This would help me see the utility of supporting these.\r\n\r\nTo me the quick fix is to keep this TFR-specific and adjust the naming (and input args) accordingly"", 'comment_created': datetime.datetime(2022, 9, 13, 2, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 969077364, 'comment_body': ""`stc` in MNE always means some variant of `*SourceEstimate`, so I don't think this name is quite appropriate. Maybe `source_data` or something"", 'comment_created': datetime.datetime(2022, 9, 13, 2, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 969078273, 'comment_body': 'New code should probably prefer `/` using Path syntax but I can live with `op.join` if needed', 'comment_created': datetime.datetime(2022, 9, 13, 2, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 969079272, 'comment_body': 'You should not need this `except Exception`, can you remove it? If not, it seems indicative of a problem. GUIs should always have a `.close` that works\r\n\r\nWhat might help you avoid segfaults here is to have a `app.process_events()` called once or twice after each close. And ensure that `_ALL_PLOTTERS` from `pyvista` is empty when you do this -- it should check to make sure your `plotter` is getting cleaned up properly by the `.close()` event.', 'comment_created': datetime.datetime(2022, 9, 13, 2, 22, 34, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 969142156, 'comment_body': ""That sounds fine. They can always be added later if needed. The thought was that in the proposal, topography was asked to be supported and I thought it would be nice to allow any topography. I'll just stick with the TFR objects for now."", 'comment_created': datetime.datetime(2022, 9, 13, 4, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 969142729, 'comment_body': 'This is copying from `mne.viz.Brain.add_data`. The thought was that a time-frequency source estimate would be added in the future by @drammock and so I thought that this naming scheme would be forward compatible with that.', 'comment_created': datetime.datetime(2022, 9, 13, 4, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 969144565, 'comment_body': '>This is copying from mne.viz.Brain.add_data\r\n\r\nThe first arg there appears to be named `array` not `stc`\r\n\r\nhttps://mne.tools/stable/generated/mne.viz.Brain.html#mne.viz.Brain.add_data\r\n\r\nIf you do `git grep ""stc : ""` you\'ll see what I mean\r\n```\r\n$ git grep ""stc : ""\r\nexamples/inverse/custom_inverse_solver.py:    stc : instance of SourceEstimate\r\nexamples/inverse/custom_inverse_solver.py:    stc : instance of SourceEstimate\r\nmne/beamformer/_dics.py:    stc : SourceEstimate | VolSourceEstimate | list\r\nmne/beamformer/_dics.py:    stc : SourceEstimate\r\nmne/beamformer/_lcmv.py:    stc : SourceEstimate | VolSourceEstimate | VectorSourceEstimate\r\nmne/beamformer/_lcmv.py:    stc : SourceEstimate | VolSourceEstimate\r\nmne/beamformer/_lcmv.py:    stc : SourceEstimate | VolSourceEstimate\r\nmne/forward/_make_forward.py:    stc : instance of VolSourceEstimate | list of VolSourceEstimate\r\nmne/forward/forward.py:    stc : SourceEstimate\r\nmne/forward/forward.py:    stc : SourceEstimate\r\nmne/forward/forward.py:    stc : instance of SourceEstimate\r\n...\r\n```', 'comment_created': datetime.datetime(2022, 9, 13, 4, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 969144979, 'comment_body': ""So another point--I thought it would be nice since the structure of the GUI is so similar to `stc.plot` to allow that to use this GUI in a future PR. IMO, it's a lot cleaner than having things in `mne.viz.Brain` and having all the events and everything run through the renderer. If that's not a direction you want to go in, I probably am not going to be making a lot of those PRs so we can just leave it be. I wrote the code in a way that I thought would make it easy to do that because I thought it was a good idea."", 'comment_created': datetime.datetime(2022, 9, 13, 4, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 969145310, 'comment_body': 'This is copied from the ieeg location GUI testing script. I probably should look there at the close event and that might fix things.', 'comment_created': datetime.datetime(2022, 9, 13, 4, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 969147793, 'comment_body': ""I'm not sure the best solution here. I just really don't want to end up with redundant code and ways of doing things. It's a recipe for cruft and poor maintenance internally, and confusion for end users.\r\n\r\n> I thought it would be nice since the structure of the GUI is so similar to stc.plot to allow that to use this GUI in a future PR\r\n\r\nAt one point in the last couple of/few years we changed from `stc.plot` routing through PySurfer to routing through our own internal `mne.viz.Brain` instance. It took many work-hours of effort (maybe 1 year FTE?) but brought a lot of benefits. This makes me worried about the possibility of redoing things yet again in terms of hours of coding and review required for what benefits it will bring.\r\n\r\nThe safest approach for now I think is to leave open the possibility internally of expanding in this direction, but not make API promises that we have to maintain and explain (Evoked, Epochs) "", 'comment_created': datetime.datetime(2022, 9, 13, 4, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 969153767, 'comment_body': ""That sounds reasonable. I already implemented most of what `stc.plot` does and it's a lot easier this way, there aren't weird hacks with resizing the render window like in `mne.viz.Brain`. IMO, it would be a good improvement not too much cost since most of the code is already there for this GUI. The time-frequency is the most general case so it's much easier to just include time. Not that it's no work or that I'm proposing doing it all, it just seems like `mne.viz.Brain` isn't really the framework for this kind of GUI stuff IMO. I'm not wedded to the idea, just giving my two cents."", 'comment_created': datetime.datetime(2022, 9, 13, 5, 4, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 969154082, 'comment_body': ""That's fine to name it `array`, I'll change it."", 'comment_created': datetime.datetime(2022, 9, 13, 5, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 969163023, 'comment_body': ""I hope that it was just a typo when I copy pasted the frequency slider to the time slider and forgot to change the name, we'll see maybe that will fix everything since `mne/gui/tests/test_core.py` and `mne/gui/tests/test_ieeg_locate.py` both work and they have the same close events. I think all the close events could do to be looked at, but maybe better all at once."", 'comment_created': datetime.datetime(2022, 9, 13, 5, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 990826561, 'comment_body': 'I think this one is not quite resolved yet. The `stc->array` change helped, as did `inst` only accepting `*TFR` objects. But the name is still `view_stc`, which still seems problematic.', 'comment_created': datetime.datetime(2022, 10, 9, 19, 3, 40, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 990826733, 'comment_body': 'Same here -- the name suggests generic-ness.\r\n\r\nMaybe `SourceEstimateViewer` -> `SourceTFRViewer` and `view_stc` -> `view_source_tfr` or something.', 'comment_created': datetime.datetime(2022, 10, 9, 19, 5, 10, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 990826786, 'comment_body': 'Is this still on open question?', 'comment_created': datetime.datetime(2022, 10, 9, 19, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 990920699, 'comment_body': ""I wrote it so that at a later date, the GUI-related stuff in `mne.viz.Brain` could be refactored over and all the source estimates would go through the GUI code. I think that would be much, much cleaner but if that's not the direction you want to go, I can change it to be more specific and less flexible. Right now, there's even not implemented errors for all the other kinds of source estimates."", 'comment_created': datetime.datetime(2022, 10, 10, 5, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 991495001, 'comment_body': ""Let's use more specific naming, otherwise users will be rightfully confused why there is a `view_stc` GUI that does not work with / accept STCs. And I don't think we've decided between routing everything through this new GUI sometime in the future vs refactoring Brain internally to be cleaner/easier to use and sticking with some variant of it instead."", 'comment_created': datetime.datetime(2022, 10, 10, 17, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 994943511, 'comment_body': ""Ok, it already supports non-TFR (time-series) volumetric data so I think using TFR is a bit of a misnomer. It just doesn't support surface source estimates yet. What would you name it @larsoner? I'm happy to go with that."", 'comment_created': datetime.datetime(2022, 10, 13, 17, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 994955693, 'comment_body': '> Ok, it already supports non-TFR (time-series) volumetric data so I think using TFR is a bit of a misnomer.\r\n\r\nBut the focus here is really on TFRs I think. For standard volumetric time (VolSourceEstimate), I think we should continue to promote/use `vol_stc.plot_3d` / `Brain`.\r\n\r\nI have not tried the code, but assuming this image is representative of the functionality:\r\n\r\n![image](https://user-images.githubusercontent.com/2365790/195669255-fc4cbd61-8b31-4466-884f-f94fbaa0cd0c.png)\r\n\r\nTo me it looks like an orthoview + 3D plot. So maybe some name incorporating ""volume slicer"" would make sense if you do want it to be more generic.', 'comment_created': datetime.datetime(2022, 10, 13, 17, 55, 54, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 994978763, 'comment_body': ""That's fine with me. The image is representative but if there's not a frequency axis (it's flat) then the bottom plot will just be a line for the time series."", 'comment_created': datetime.datetime(2022, 10, 13, 18, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 994996279, 'comment_body': 'So maybe VolumeSlicerGUI or something would be good?', 'comment_created': datetime.datetime(2022, 10, 13, 18, 40, 35, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 995036982, 'comment_body': ""Sure, we can change to that but one comment first:\r\n\r\nTo address the other point, I think `vol_stc.plot_3d` and `Brain` are great and definitely better for some things right now but I think the cost to support surface source estimates is very marginal; it's just removing the slice plots if there are no volume estimates (i.e. surface only and not mixed) and plotting the data on the surface of a 3D brain, maybe with the option to toggle it on and off for mixed source estimates. That's a pretty minor PR relative to this one.\r\n\r\nI really liked how `mne-qt-browser` was rolled out where first it was a beta and then it was the default and that seemed to cause much fewer issues with users. From looking around, there's a lot of code, especially this https://github.com/mne-tools/mne-python/blob/main/mne/viz/backends/_qt.py#L1427-L1470 and this https://github.com/mne-tools/mne-python/blob/main/mne/viz/_brain/callback.py#L12-L75 kind of thing that are trivially easy routing it through the a widget but are super complex routing through the renderer.\r\n\r\nSo, I think, although `plot_3d` and `Brain` work (for the most part and right now; there are some outstanding display issues), in my opinion, it's worth the small amount of overhead to support the redundancy until either the aforementioned code gets simplified and looks a lot more maintainable or the ground-up build in this PR is stable enough that `Brain` can just handle the 3D rendering stuff and not the GUI actions.\r\n\r\nI'm not proposing any major projects, I just thought it was worth documenting my thought process for why I made this PR extensible in the way I did, and suggesting that labeling it appropriately so as to be another option to `Brain`/`plot_3d` might be a nice way make the most use of this code."", 'comment_created': datetime.datetime(2022, 10, 13, 19, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 995222735, 'comment_body': '> or the ground-up build in this PR is stable enough that Brain can just handle the 3D rendering stuff and not the GUI actions.\r\n\r\nHistorically the GUI design components of Brain have actually been the focus of quite a lot of thought and effort -- I think it must total more than a year or two of FTE by now -- from multiple people spanning years (going all the way back to PySurfer about a decade ago). I think it\'s important to make sure we keep the existing `Brain` GUI layout, interactions, and programmability as much as possible. Brain and its GUI have a lot of features, and each was added because people had compelling use cases for them -- so we want to continue supporting them.\r\n\r\nJust a couple of examples of ""old lessons"" that we\'d need to re-learn for the new GUI based on the images I\'ve seen so far:\r\n\r\n1. You have some fmin/fmid/fmax sliders. For Brain, we had to deal with stuff like keyboard input handling; min going bigger than mid (and mid bigger than max) properly; dealing with min==mid and mid==max cases; adding ""increase all"" and ""decrease all"" functionality that worked well for people; and so forth.\r\n2. You have a time slider. Brain supports stuff like saving movies; ""playing"" the SourceEsitame (play/pause/reset); dealing with the case of single time points without breaking; etc.\r\n3. All Brain GUI stuff can be controlled from the command line (and be reflected in the GUI properly) -- it\'s fully programmatically controllable.\r\n\r\nBringing these to parity with Brain is no small task, and this is just for a few examples. And in terms of dealing with bugs, you worked through a hidden `ravel` fortran-order bug that I\'m pretty sure I had to work out for Brain previously.\r\n\r\n> I think the cost to support surface source estimates is very marginal; it\'s just removing the slice plots if there are no volume estimates (i.e. surface only and not mixed) and plotting the data on the surface of a 3D brain, maybe with the option to toggle it on and off for mixed source estimates.\r\n\r\nI agree adding some basic support for surfaces wouldn\'t be too much work. But I think that coming to parity with `Brain` would be a lot of work -- it supports multiple views of multiple hemispheres configurable in horizontal and vertical layouts of volume or surface or mixed source estimates, each configurable in terms of how they appear in multiple ways both (often) in the GUI and (always) from the command line / methods (and I\'m probably forgetting lots of other stuff).\r\n\r\nBy contrast, I would say adding the new stuff from this PR -- three orthoview slices, and a TFR plot in place of a time trace, along with interactions between them -- to `Brain` seems like it might be less work. I could be wrong, though!\r\n\r\n> until either the aforementioned code gets simplified and looks a lot more maintainable\r\n\r\nSo I think this is one place we could improve without losing the lessons, use cases, and work from Brain. `Brain`\'s user-facing API is at least acceptable -- the `time_viewer` and `show_traces` are not ideal but they get you a GUI like the new one here, *or* a more bare plotting window, so I don\'t think we need to rethink/deprecate/revamp the user-facing aspects of Brain (though there are always enhancements to be made).\r\n\r\nHowever, `Brain` *is* a bit ugly from a maintenance/internal implementation perspective (as you have pointed out) because the creation of the GUI elements and the creation of the 3D scene are intertwined. They\'re both routed through `pyvistaqt.BackgroundPlotter`, plus some hacks to re-layout the window and widgets. I assume this is what you mean about it being difficult to maintain and extend.\r\n\r\nI propose we try putting `Brain` through some strategic internal refactoring to address this:\r\n\r\n1. Use the new, cleaner GUI abstraction that you implemented to create and lay out the GUI elements (porting over all existing interaction logic, conditions, and command<->interactions from Brain). At the end of the day, the `Brain` class and GUI looks and acts the same to the user -- but internally it\'s easier to understand and extend.\r\n2. In this process, stop using the `BackgroundPlotter` from PyVistaQt and instead use the `QtInteractor`, which is just another Qt widget (plus whatever off-screen renderer is currently used for Notebooks anyway).\r\n\r\n(1) makes things easier to extend (adding orthoviews as options for `views`...?), and (2) would probably make it easier to put 3D brain plots in GUIs. I think at the end of the day this QtInteractor-based class would end up being what you\'re talking about in terms of a ""Brain that just displays stuff with no GUI elements"" -- it\'s really a plotting canvas/item/area where we put our 3D stuff. We wouldn\'t call it Brain (for backward compat since `mne.viz.Brain` should stay the same monolithic structure it is now), maybe `BrainPlotter` or something...', 'comment_created': datetime.datetime(2022, 10, 14, 0, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 995323379, 'comment_body': ""Thanks for engaging on this. That plan sounds much better, I wanted to add the GUI to `Brain` in this PR but I thought it would be easier to reimplement a few things than understand the workarounds from routing through the renderer. I think there's some useful refactoring from this PR that could be shared with the idea of making this code and `Brain` better and less complex while decreasing redundancy."", 'comment_created': datetime.datetime(2022, 10, 14, 4, 10, 2, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 995512105, 'comment_body': 'I would change this to something like `average_tfr.plot_joint()`, so we do not produce just a white plot. In any case, I would delete the comment - why would you plot something if you ""cannot see much""?', 'comment_created': datetime.datetime(2022, 10, 14, 8, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 995941640, 'comment_body': 'The comment was from a time recently when the plot worked, it only stopped working a month ago or so.', 'comment_created': datetime.datetime(2022, 10, 14, 16, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 996014464, 'comment_body': ""something is definitely wrong with `AverageTFR.plot_topo()`.  I'll open an issue about that. (#11247)"", 'comment_created': datetime.datetime(2022, 10, 14, 18, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 997942907, 'comment_body': ""@alexrockhill did you change all caps and the periods to be consistent with other tutorials? It's always not ideal to change things in a PR that are irrelevant as it's just noise for the reviewers."", 'comment_created': datetime.datetime(2022, 10, 18, 9, 15, 10, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 997945246, 'comment_body': 'this is more tutorial for inverse modeling and it will slow the doc build.\r\nCan we avoid it? Do we ship a vol fwd with the sample data to avoid these recomputations?', 'comment_created': datetime.datetime(2022, 10, 18, 9, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 997948526, 'comment_body': 'view_stc is too generic here. I agree with @larsoner that the name needs to say that it is for TFR source data.', 'comment_created': datetime.datetime(2022, 10, 18, 9, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 997950295, 'comment_body': 'and I would say the function should take a parameter called stcs as input so the list of stcs or a generator of stcs so the gymnastic with numpy above is not exposed in the public tutorials.', 'comment_created': datetime.datetime(2022, 10, 18, 9, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1007799684, 'comment_body': ""I am not sure why you change all this, it's way easier to read in full sentences."", 'comment_created': datetime.datetime(2022, 10, 28, 8, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007804683, 'comment_body': '```suggestion\r\n# Use volume source estimate with time-frequency resolution\r\n```\r\nor something more verbose like that', 'comment_created': datetime.datetime(2022, 10, 28, 8, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007805331, 'comment_body': '```suggestion\r\n# Compute source estimate using MNE solver\r\n```', 'comment_created': datetime.datetime(2022, 10, 28, 8, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007805709, 'comment_body': ""```suggestion\r\nmethod = 'MNE'  # use dSPM method\r\n```\r\nyou mention dSPM twice"", 'comment_created': datetime.datetime(2022, 10, 28, 8, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007806684, 'comment_body': 'for this step I would recommend a bit more explanation for the user.', 'comment_created': datetime.datetime(2022, 10, 28, 8, 37, 7, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007807524, 'comment_body': ""```suggestion\r\n# Note that here, frequencies are the outer list, opposite of the beamformer.\r\n# Here, we used pick_ori='vector' so we have an orientation dimension.\r\n\r\n# Compute power, take the average over epochs and cast to integers to save\r\n# memory.  The GUI can also handle complex data across epochs if your\r\n# computer has enough RAM but this really lowers the memory usage.\r\n```"", 'comment_created': datetime.datetime(2022, 10, 28, 8, 38, 3, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007808161, 'comment_body': 'Although I think this comment needs updating anyway since it talks a lot about beamforming specific things - so please double-check!', 'comment_created': datetime.datetime(2022, 10, 28, 8, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007808672, 'comment_body': 'Those steps need to be better explained, so the user can easily transfer it to their own data (which might have different dimensions etc)', 'comment_created': datetime.datetime(2022, 10, 28, 8, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007808865, 'comment_body': 'Explain ', 'comment_created': datetime.datetime(2022, 10, 28, 8, 39, 27, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007810643, 'comment_body': 'is this commented out on purpose? ', 'comment_created': datetime.datetime(2022, 10, 28, 8, 41, 23, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1007853897, 'comment_body': ""What's with this? Is this resolved ?"", 'comment_created': datetime.datetime(2022, 10, 28, 9, 26, 59, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1008731938, 'comment_body': 'and you actually use MNE not dSPM', 'comment_created': datetime.datetime(2022, 10, 29, 17, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1018261345, 'comment_body': 'I just changed things to be consistent within this tutorial with proper capitalization for rendered sections and lower case for inline comments. I hear you but the style inconsistencies are not good and make it hard to contribute new prose when the style is jumping around and you have no idea which one to use.', 'comment_created': datetime.datetime(2022, 11, 9, 18, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1018263799, 'comment_body': ""I like full sentences too, but the other inline comments in this tutorial/example are not full sentences. In the rest of MNE, it seems like the most consistent style is inline comments being lower case and sections being proper sentences. I'm not sure high-level where MNE wants to head as far as this style, but to me it should at least be consistent within an example."", 'comment_created': datetime.datetime(2022, 11, 9, 18, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1018267482, 'comment_body': ""This was @agramfort 's idea that it should not recenter your view when you click like `nipy`, I was just testing and needed to actually delete."", 'comment_created': datetime.datetime(2022, 11, 9, 18, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1018269791, 'comment_body': 'This is still an open question, I remember continuing discussion elsewhere but since it involves three different GUIs we should not add this complexity to this PR and instead follow-up in another.', 'comment_created': datetime.datetime(2022, 11, 9, 18, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1018274478, 'comment_body': ""I'm happy to change the name but it already supports time data only and has tests for it so I think adding TFR to the name doesn't make sense. This is the same conversation as @larsoner and I had for `SourceEstimateViewer` -> `VolSourceEstimateViewer`.\r\n\r\nThe array is not ideal but we need a new time-frequency source estimate class to handle this data type. I'm a strong -1 for having the list of lists because of the complexity of describing the parameter. It also makes it incompatible for the beamformer since the lists are in opposite order."", 'comment_created': datetime.datetime(2022, 11, 9, 18, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1018275728, 'comment_body': 'Yeah, I will just remove the parts about the beamformer.', 'comment_created': datetime.datetime(2022, 11, 9, 18, 21, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1018313990, 'comment_body': ""This uses the somato dataset so we'd have to change that. The original tutorial used the sample dataset but the results were not as clean. I'm not sure there's a better solution to this."", 'comment_created': datetime.datetime(2022, 11, 9, 19, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1018402615, 'comment_body': ""> I'm happy to change the name\r\n\r\nyes, please do.\r\n\r\n> but it already supports time data only so I think adding TFR to the name doesn't make sense.\r\n\r\nit's OK to have things be *more functional* than they're documented to be, esp. when under heavy development.\r\n\r\n> The array is not ideal but we need a new time-frequency source estimate class to handle this data type.\r\n\r\nYep, we do, as we've discussed many times. When that happens, we'll make whatever changes are necessary here.  In the meantime, list-or-generator-of-stcs is what several of us have suggested / requested, multiple times.\r\n"", 'comment_created': datetime.datetime(2022, 11, 9, 20, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 1018473955, 'comment_body': 'The name was changed to `view_vol_stc` to match.', 'comment_created': datetime.datetime(2022, 11, 9, 22, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1018519073, 'comment_body': '```suggestion\r\n        The source estimates.\r\n```', 'comment_created': datetime.datetime(2022, 11, 9, 23, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 1020418756, 'comment_body': ""```suggestion\r\n# The DICS beamformer currently only supports a single sensor type.\r\n# We'll use the gradiometers in this example.\r\n```\r\nI briefly checked in with @drammock et al. on this and there is no standard to comments in MNE-Python. The consensus seems to be that if comments are full sentences, they should have proper punctuation etc. If comments become large chunks, they should be move to the Markdown parts.\r\nSo here, I would not change what the example did before. \r\nI also agree with the comment above that this also adds a lot of clutter to the PR. "", 'comment_created': datetime.datetime(2022, 11, 11, 17, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 1020879063, 'comment_body': '```suggestion\r\n- Add to :ref:`ex-source-loc-methods` how to apply inverse methods to time-frequency resolved epochs and use :func:`mne.gui.view_vol_stc` to view the output (:gh:`10920` by `Alex Rockhill`_)\r\n```', 'comment_created': datetime.datetime(2022, 11, 13, 10, 33, 39, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1020879317, 'comment_body': ""@alexrockhill it's a trade off. The bottleneck is often the review time so anything you can do to reduce it will help. Basically step in my shoes. If I have 15 mins to review your code any minute counts and things that are not critical should be avoided."", 'comment_created': datetime.datetime(2022, 11, 13, 10, 35, 41, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1020879703, 'comment_body': 'one reason I would rather use `csd_ers` rather than `ers_csd` is that when I type I prefer to autocomplete based on the type of object. Basically all variables that are of type csd start with csd_ so csd_<TAB> gives me what I want.', 'comment_created': datetime.datetime(2022, 11, 13, 10, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1020880364, 'comment_body': 'it should say that it is for volume src and tfrs only', 'comment_created': datetime.datetime(2022, 11, 13, 10, 43, 50, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1020880531, 'comment_body': 'where is this 1e16 coming from?', 'comment_created': datetime.datetime(2022, 11, 13, 10, 45, 16, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1020880580, 'comment_body': 'if the 1e16 is needed can you use a variable for this ?', 'comment_created': datetime.datetime(2022, 11, 13, 10, 45, 46, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1020880923, 'comment_body': 'this GUI is not for all STCs. I would not call this file test_stc.py but rather test_vol_tfr_stc.py. This applies also the the _stc.py file that should be renamed.', 'comment_created': datetime.datetime(2022, 11, 13, 10, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1022010777, 'comment_body': ""Sounds good, no problem, again, I was just changing it to be consistent, there was `csd_baseline` and `active_cov` etc. it would just be nice if the one that was first was consistent. Again, not trying to change all of MNE but just to be consistent in this tutorial would be nice. I will change those to the type first and the descriptor second like you're asking."", 'comment_created': datetime.datetime(2022, 11, 14, 20, 8, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1022017790, 'comment_body': 'It works just fine for time-only volume data but we can say volume here.', 'comment_created': datetime.datetime(2022, 11, 14, 20, 14, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1022028964, 'comment_body': 'If you cast to integers without rescaling, you mostly get zeros so this is just so that you can see your data but use integers for speed like is often done for MRIs.', 'comment_created': datetime.datetime(2022, 11, 14, 20, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1027248919, 'comment_body': 'ok fair enough', 'comment_created': datetime.datetime(2022, 11, 20, 8, 40, 46, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027249739, 'comment_body': 'this is duplicated in _vol_stc.py file', 'comment_created': datetime.datetime(2022, 11, 20, 8, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027249977, 'comment_body': 'can you add a docstring here? What I am wondering is if you require that dtype of data is int16', 'comment_created': datetime.datetime(2022, 11, 20, 8, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027250166, 'comment_body': 'in the header docstring above you say\r\n\r\n`""""""View a volume time and/or frequency source time course estimate.`\r\n\r\nI therefore wondering if it should not be a `and` only.\r\nDo you have a example of usage without frequency?', 'comment_created': datetime.datetime(2022, 11, 20, 8, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027250244, 'comment_body': ""why don't you use isinstance(Epochs, BaseEpochs) ?"", 'comment_created': datetime.datetime(2022, 11, 20, 8, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027250616, 'comment_body': 'do we have an example or some doc with this? I am just asking to see how usable this is.', 'comment_created': datetime.datetime(2022, 11, 20, 8, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027251074, 'comment_body': 'np.int16 should use the CONSTANT above no?', 'comment_created': datetime.datetime(2022, 11, 20, 8, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027251117, 'comment_body': 'np.int16 should use the CONSTANT above no?', 'comment_created': datetime.datetime(2022, 11, 20, 8, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027251284, 'comment_body': 'i would add a constant\r\n\r\nCOMPLEX_BASE_DTYPE = np.int16\r\n\r\nand reuse this constant everywhere below when you use np.int16', 'comment_created': datetime.datetime(2022, 11, 20, 8, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027251645, 'comment_body': 'would there be a way to avoid having some method logic in the GUI? basically we could have other stuff than ITC, or average_power (think real part of the coherence etc.) and I am a bit worried to see this implemented in a GUI code\r\n\r\njust tell me what you think', 'comment_created': datetime.datetime(2022, 11, 20, 9, 1, 6, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1027251939, 'comment_body': 'same remark we have some shared functions to compute baseline in different ways. I would try to rely on these has much as possible', 'comment_created': datetime.datetime(2022, 11, 20, 9, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 1037486533, 'comment_body': 'Yes, it works just fine without frequency', 'comment_created': datetime.datetime(2022, 12, 1, 19, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1037487601, 'comment_body': ""I don't think so, it's just copied and modified from `mne.viz.Brain`"", 'comment_created': datetime.datetime(2022, 12, 1, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1037490620, 'comment_body': ""The reason to implement it here is that it's really slow using float and it's relatively easy and much faster to use integers. There's not a cleanly abstracted function for ITC in `tfr.py` anyway so that would need to be refactored. We could make `_itc` and `_itc_int` functions in `tfr.py` if you want, I just was trying to keep the number of files touched low."", 'comment_created': datetime.datetime(2022, 12, 1, 19, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1037492028, 'comment_body': ""I looked into these, they require a time range and I just hadn't implemented it yet. I should just add a tmin and tmax for the baseline"", 'comment_created': datetime.datetime(2022, 12, 1, 19, 33, 37, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1037499566, 'comment_body': 'There is an example in the tests, do you want to add it to a tutorial or example?', 'comment_created': datetime.datetime(2022, 12, 1, 19, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1037500792, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2022, 12, 1, 19, 45, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 1037514316, 'comment_body': ""It doesn't look like the most straightforward abstraction/refactor from here since it's looped\r\n\r\n```\r\n# Inter-trial phase locking is apparently computed per taper...\r\nif 'itc' in output:\r\n    plf = np.zeros((n_freqs, n_times), dtype=np.complex128)\r\n\r\n# Loop across epochs\r\nfor epoch_idx, tfr in enumerate(coefs):\r\n    # Transform complex values\r\n    if output in ['power', 'avg_power']:\r\n        tfr = (tfr * tfr.conj()).real  # power\r\n    elif output == 'phase':\r\n        tfr = np.angle(tfr)\r\n    elif output == 'avg_power_itc':\r\n        tfr_abs = np.abs(tfr)\r\n        plf += tfr / tfr_abs  # phase\r\n        tfr = tfr_abs ** 2  # power\r\n    elif output == 'itc':\r\n        plf += tfr / np.abs(tfr)  # phase\r\n        continue  # not need to stack anything else than plf\r\n\r\n    # Stack or add\r\n    if ('avg_' in output) or ('itc' in output):\r\n        tfrs += tfr\r\n    elif output in ['complex', 'phase'] and method == 'multitaper':\r\n        tfrs[taper_idx, epoch_idx] += tfr\r\n    else:\r\n        tfrs[epoch_idx] += tfr\r\n```"", 'comment_created': datetime.datetime(2022, 12, 1, 20, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}]","[{'commit_sha': 'fd5102d035871b64599c51e125ff7d2c5d9ff3c7', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4984b3cfde49991b808a7dc3f565b790ee8b8855', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95e2cb9ac47fb5f5a491f254865c45b4d7879447', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b468dfa6fc937aa2e1c633a861524ecc9d876381', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56f8b57cb33aec70e939f638a8466a551f56b759', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd75ab0722961d0e8ab3969218290da7359ff4417', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b068dc822053a386f83de44df9c0560e709192a5', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdbecf1bf6c7211bd879c210172a7d587c97c271', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f79f75b79d3c57f000c94c04908c24475416c87f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30210eb9e192b2e16fc1c6a4699e7584f06841fb', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4b84e4e322ccbc476a9312dc34e1e1c41ef96be', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '856f2380a2fab7303ca5fcab508f861251754902', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dcec3e901d8b2d242e42678d127304389a41cbf3', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a67cfc42075e58cb78c8de1b2a0224ea4bba66d', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df371771a31541ad06096a3d7b085b5ff1617538', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eaa70309a0e60301fe2b7ea79fa313e83498fdfa', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '057a65b22f69d93bfdf5d896ac2b4cdc229f9730', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1377ef3f5b5497c73d0bddf9dd2468f52f0888e', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a450bbc2bae2f6b593006469cb29a52f3ed87e8', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '194461121286e2d9c4f8867dd57b6cf044d1d5bc', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '772f22c84ef2952f7d5b107d5cac70d5b16c60cb', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3e24993ec47574fe85aab5e28dc5c1288ca9eda', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3ecf4d0278b11bc649db4221b2689d5dd02e6ea', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b110aca2c2957631a7df80bd541b127bf18a80f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e6c861a4eff1d8b177a5f8290414f547f33100', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abd2b08236a0ff9d3824dba052caa4a87a266b29', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c94a58ad8d8b4a6ae3391dadd716886a757eca10', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fff3c71ee2473705c422ef628f0e32435dbe9027', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3c31cadf2b998e51fe8c230e7a7016e23c1408', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc5af55ce3b3eacbed78271e19f8d6622791122f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f9a273b74843e71be3420053f083078662ea179', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31713026c5330b0f407cc2913e97b9db3edfb29d', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41bc5a7cbd96d8bc5e5043745a64ad67f5417065', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50fbae810a9768cb980cddac0170dddd5988d6a', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3762961c3d054aac5bb04a3320443a2614e5cc69', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f9798cd1cc5430d3caba24a0dff2134a75064b7', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce414d2d996db7fdef57a7ff85d36a9acfaef0a', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '592387f703dd75cd62da4b0d3f95708e4ea6df00', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c1cc1195870ad39cb31484637add2084c06073dd', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1aaa779e856f73ed90c16b69bfd6c567775290f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cac078fb43f5873d44cd05e5951afcc11fed9fd0', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '840c66ea5ec96e0fd78e82a75ec7503b5a6eb47c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
992068757,"[ENH, MRG] Add object-oriented widget abstraction","Fixes https://github.com/mne-tools/mne-python/issues/10779
Superceeds https://github.com/mne-tools/mne-python/pull/10803

Follows @larsoner 's advice to split the abstraction up into a first PR and per conversation @drammock and @hoechenberger 's adds onto existing backend without replacing for now.",True,10913,https://api.github.com/repos/mne-tools/mne-python/pulls/10913,https://github.com/mne-tools/mne-python/pull/10913,closed,2043,68,11,29,28,24,0,0,[],2022-07-08 22:05:18+00:00,2022-08-04 17:39:58+00:00,2316880.0,"26 days, 19:34:40","[{'comment_id': 920241774, 'comment_body': 'Why this instead of the public `mne.viz.get_3d_backend`?', 'comment_created': datetime.datetime(2022, 7, 13, 15, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 920241962, 'comment_body': 'Why add this?', 'comment_created': datetime.datetime(2022, 7, 13, 15, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 920270225, 'comment_body': ""That just returned a string I thought, maybe I was using the private function instead though and didn't see the public one."", 'comment_created': datetime.datetime(2022, 7, 13, 16, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 920406234, 'comment_body': 'Confirmed, this just returns a string, you need the module. The name space is a bit confusing...', 'comment_created': datetime.datetime(2022, 7, 13, 18, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 920406937, 'comment_body': 'It actually returns the backend that has access to private functions like `_Renderer`', 'comment_created': datetime.datetime(2022, 7, 13, 18, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 923912472, 'comment_body': 'The only thing I can think of is that adding this dependency could have caused some compatibility issues', 'comment_created': datetime.datetime(2022, 7, 18, 22, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 923977410, 'comment_body': 'Could be, want to try it in a separate PR?', 'comment_created': datetime.datetime(2022, 7, 19, 1, 17, 7, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 924956991, 'comment_body': 'Ok so my analysis is that this is indeed the issue but I think since the documentation is not being built on `Windows` that we should just skip it. The only difference was installing `ipympl` and `ipyevents` with pip in this PR and the test PR and not doing that in your ""Fix CI"" PR that just merged and passed all the tests. I think `ipympl` is doing something odd. Maybe we could have the documentation also built on `Windows` without `noplot` but maybe until we actually build it with the plots we should punt this.', 'comment_created': datetime.datetime(2022, 7, 19, 21, 5, 56, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 932553558, 'comment_body': ""Yikes, it's all of these? I thought it was just `notebook` stuff that was broken"", 'comment_created': datetime.datetime(2022, 7, 28, 18, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 932581993, 'comment_body': 'Yeah it was 22 failed tests, I think about 12 were unique to parameterization. I have no idea why they are failing, I raised the issue in `ipympl` above because it seemed so odd. They work on Linux/MacOS so it seems like there is an underlying `ipympl` settings issue that causes odd things to happen. I can get on a `Windows` computer and have a look in 3 hours (in use right now).', 'comment_created': datetime.datetime(2022, 7, 28, 19, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 932585536, 'comment_body': ""Yeah I assumed the `ipympl` stuff just meant that we would skip a couple of isolated `notebook` tests, but these are core viz tests. If `ipympl` installation breaks this many tests on Windows, we might be better off *uninstalling* `ipympl` from windows for now so we don't have to skip these tests."", 'comment_created': datetime.datetime(2022, 7, 28, 19, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 932587899, 'comment_body': ""Hmm, okay, then `notebook` won't render `matplotlib` plots on `Windows` I think. I'll take a quick look at `ipympl` CIs and see if they test this kind of thing or what."", 'comment_created': datetime.datetime(2022, 7, 28, 19, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 932591987, 'comment_body': ""Well that was quick, they don't have any CIs that run on `Windows` so I think that would be the issue. That really creates a headache for `notebook` support... as in, probably a bad idea to support the `notebook` backend on `Windows` when `ipympl` doesn't. I think beyond just uninstalling `ipympl` on `Windows`, there should be some documentation about this lack of support."", 'comment_created': datetime.datetime(2022, 7, 28, 19, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 932594007, 'comment_body': ""> Hmm, okay, then notebook won't render matplotlib plots on Windows I think.\r\n\r\nThat's the case on `main` and I think we need to fix it separately. Let's just not install `ipympl` on Windows for now so we can move forward with this hopefully!"", 'comment_created': datetime.datetime(2022, 7, 28, 19, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 932600923, 'comment_body': ""I think the tests will pass without `ipympl` on `Windows` for this PR but I'm pretty sure the GUIs won't render properly. If we just do that in the CIs then the GUIs will work if someone installs via the `requirements.txt` file but these core viz tests fill fail and there could be more trouble. If we remove it from the `requirements.txt`, then maybe we should officially remove support for GUIs on `Windows` so that people know that it's not supposed to work. It's really bad that if someone just installs `ipympl` on `Windows`, the basic functionality of their MNE installation might break... That might be worth mentioning somewhere as well."", 'comment_created': datetime.datetime(2022, 7, 28, 19, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 932610338, 'comment_body': ""> I think the tests will pass without ipympl on Windows for this PR \r\n\r\nGood!\r\n\r\n> but I'm pretty sure the GUIs won't render properly...\r\n\r\nThis is all the case on `main`, correct?\r\n\r\nLet me iterate again -- if it's the case on main, then please let's deal with it in different PR where we figure out how to fix things properly. Adopting the new abstraction framework -- which this PR moves us toward -- is separable from how things work on windows, *at least to the extent that things on windows are in the same state/probably broken with our current framework on main as well*.\r\n\r\nIf we try to tackle these two problems simultaneously, then it creates a review nightmare, and prevents any new progress with a new framework (that you advocated for so strongly!). We could tackle the ipympl-and-testing-on-windows first and then come back to this PR if you really want, but then this PR is stuck and you can't use your new framework."", 'comment_created': datetime.datetime(2022, 7, 28, 19, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 932613375, 'comment_body': ""Yeah, this should all be broken on `main`, it's just coming up because to get things to work properly for the abstraction, you need `ipympl`. I just pushed a commit that hopefully should pass, is that what you were thinking?"", 'comment_created': datetime.datetime(2022, 7, 28, 19, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 932614644, 'comment_body': ""Yes that's more or less the idea, but don't forget to remove all the `skipif`s since we don't need them now"", 'comment_created': datetime.datetime(2022, 7, 28, 19, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 932619058, 'comment_body': ""They're all gone in the diff.\r\n\r\nI left the one on brain scraper because it seems like it's actually a separate issue; here's the CI where it alone failed (https://dev.azure.com/mne-tools/mne-python/_build/results?buildId=20714&view=logs&j=dded70eb-633c-5c42-e995-a7f8d1f99d91&t=8394206f-a00b-5cb7-44ca-464c9d5f9e25)."", 'comment_created': datetime.datetime(2022, 7, 28, 19, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 932653025, 'comment_body': ""Nitpick, but can you move these all to one long line? It keeps `requirements.txt` more readable I think (and we don't care about 80 char limit in this file)"", 'comment_created': datetime.datetime(2022, 7, 28, 20, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 938076432, 'comment_body': 'pyvista 0.36.1 is latest release, do we still need this?', 'comment_created': datetime.datetime(2022, 8, 4, 17, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 938077023, 'comment_body': '```suggestion\r\n# dict values are icon names from https://fontawesome.com/icons\r\n```', 'comment_created': datetime.datetime(2022, 8, 4, 17, 38, 18, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 938082596, 'comment_body': ""just curious where these position values come from, are they arbitrary? tailored to a specific kind of inset plot (i.e. the traces from clicked verts in a Brain GUI)?  Wondering if we'll regret hard-coding this later, if some other plot type gets inserted here (e.g., I can easily imagine a time-freq image plot making sense in a Brain GUI, but potentially any others?)"", 'comment_created': datetime.datetime(2022, 8, 4, 17, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 940378919, 'comment_body': ""It's just to give more room on the edges so things don't get cut off. Tight layout doesn't play nicely with all the Qt stuff... Otherwise all the coordinate transforms should be handled by the axis and should be unaffected."", 'comment_created': datetime.datetime(2022, 8, 8, 15, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}]","[{'commit_sha': '7607789df7561837abfb1bec8e4bf90cf1060c1b', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6cd1ba74e5e7880f9e4798845ffb27f35560dc6', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '321d36e6fb6b74b086dcb6b5e19c6b90aaffaf2c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e610bff85075b433b6574d24e0a85e6fa18c8378', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec794627985b1a6bea2f6951f45f17efaa6ee2d8', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fefc541ff4a5959c4d21d97c596aa564f75b21ee', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b22bfcb06013bdf0bb10cdf5bf583eb016504994', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc5b82b31dfcd315e7e815cbbe1b622c6cf5369', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bb2c8163fb76ad428e50a6964143710873c8b6f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a681195e4a83035a8153417bff8498671d396cd0', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d681b4ee4b95eb1129d7a2192284656f6ac4a60', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf9d500e09623ba3d0aa90c3ee5691659e76e87', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e4fd63235b7738b37cbcaaae6a5b6a9db2119bc', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb6be0c46b18c6b86ffdec5694d6c265e6d51826', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c3560e74bbb574eb9e6993dfa3bbd5f76e1f92f', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f6686548b2a5e634c2dd700e0f86f23261ef651', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f112ca1c90d339c8f80b107529830022b05a152c', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b4202802326ea9870f6e9f9805a44cbb7d36d19', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afe01085fb5571fd2f6c49ea6a06629b0e07ca6a', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3d4f273869769f2be529e288994bc8905e0fe2fa', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fae518ac9b2229e28dfec7879d81366884784f6', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f38d0801fac41fa51daa2f2b9e7ba341bc41fdba', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fa2c0d8d6a45abf2a8b8260be9ba2b9ce51b683', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '609d348863eb5f113da116313dc544df9e31db2c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1c6e5de88a089450418f74f5a04b721c1e6bd5', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0b2485b893330f3b30be9108c09e2ecaffe67f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db7a90ae0ddc9a2a6292f69c7a3f6da3fe3a30c3', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c229ea38ed9b0182da24cc291620c522d3dee07', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e830122763da3ff9ce477767b20367576eb036c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1012570971,"[ENH, MRG] Make orphan of unused API entries","Fixes https://github.com/sphinx-gallery/sphinx-gallery/issues/974.

I just made a bulleted list of unused API entries and the percentage used so far and then a bulleted with sub-bullets for used API entries and where they are used. As discussed with @larsoner and @drammock, it would be nice to make them into graphs with `graphviz` but we would also have to handle lacking this dependency gracefully which I'm not as sure how to do. Pretty good start I think though!

[Unused API Entries — Python documentation.pdf](https://github.com/sphinx-gallery/sphinx-gallery/files/9225664/Unused.API.Entries.Python.documentation.pdf)
 ",True,983,https://api.github.com/repos/sphinx-gallery/sphinx-gallery/pulls/983,https://github.com/sphinx-gallery/sphinx-gallery/pull/983,closed,356,10,10,76,58,48,1,0,[{'name': 'enhancement'}],2022-07-30 08:03:35+00:00,2022-08-26 04:05:39+00:00,2318524.0,"26 days, 20:02:04","[{'comment_id': 936706746, 'comment_body': ""I think this is much more readable, but YMMV. If you go with my suggestion please double-check I captured the logic correctly:\r\n```suggestion\r\n\r\n    def func(fname):\r\n        is_new = fname.endswith('.examples.new')\r\n        is_old = os.path.isfile(fname + '.new')\r\n        is_ex = fname.endswith('.examples')\r\n        is_builtin = '__' in fname\r\n        return not is_builtin and is_new or (is_ex and not is_old)\r\n\r\n    example_files = list(filter(func, os.listdir(backreferences_dir)))\r\n```"", 'comment_created': datetime.datetime(2022, 8, 3, 14, 3, 22, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 936711226, 'comment_body': 'not sure `get_entry` is very descriptive of what this function actually does (you give it an fname and it removes file extensions from it)', 'comment_created': datetime.datetime(2022, 8, 3, 14, 7, 15, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 936715227, 'comment_body': ""this seems brittle and maybe even wrong. `numpy.ndarray` is a class that is all lowercase, and has methods. won't this remove `ndarray`?  Is there no other way to get entry type other than inferring from capitalization?"", 'comment_created': datetime.datetime(2022, 8, 3, 14, 10, 41, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 936717569, 'comment_body': ""```suggestion\r\n        logger.info('`graphviz` required for graphical visualization')\r\n```"", 'comment_created': datetime.datetime(2022, 8, 3, 14, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 936721935, 'comment_body': 'this could be a little more DRY, does much of the same stuff as the `unused_api_entries` conditional', 'comment_created': datetime.datetime(2022, 8, 3, 14, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 936722203, 'comment_body': ""```suggestion\r\n        dg = graphviz.Digraph('api_usage', filename=unused_dot_fname,\r\n                              node_attr={'color': 'lightblue2',\r\n                                         'style': 'filled'})\r\n```"", 'comment_created': datetime.datetime(2022, 8, 3, 14, 16, 27, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 936752936, 'comment_body': ""It does look like there is functionality to infer classes but I think it would involve fairly major refactoring of the `sphinx_gallery.backreferences.identify_names` code which is quite complex. Maybe this information could be stored in the example file though so that it doesn't have to be found twice. Either way, all you get is the string without refactoring more of the codebase and I agree that this is not great but it's part of the code I'm wary to touch because of its complexity."", 'comment_created': datetime.datetime(2022, 8, 3, 14, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 937257516, 'comment_body': ""I think maybe best just to remove this... I'll go ahead and add that with a to do"", 'comment_created': datetime.datetime(2022, 8, 4, 0, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 947188133, 'comment_body': ""Even in MNE-Python we might want to know if things like `__call__` are used. It might be better to expose this as a regex for entries to ignore like `missing_doc_ignore='__.*__'`.\r\n\r\nThis can also be a way to allow people to disable this -- if people use `'.*'` then all entries will match, and you can special case that `if len(used_api_entries) == 0` then don't write anything."", 'comment_created': datetime.datetime(2022, 8, 16, 19, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 947190573, 'comment_body': ""The graph only exists if `sphinx.ext.graphviz` is installed and working, right? You probably need to make this part of the test conditional on that being the case. If it's not installed then you should assert this is *not* in the content"", 'comment_created': datetime.datetime(2022, 8, 16, 19, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 947228805, 'comment_body': 'Ah, that makes sense.', 'comment_created': datetime.datetime(2022, 8, 16, 20, 37, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 947229072, 'comment_body': 'Could we save this for a follow-up?', 'comment_created': datetime.datetime(2022, 8, 16, 20, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 947239821, 'comment_body': 'I think we want to make it optional *somehow* in this PR before merge. And however it works needs to be documented. So actually the `re.match(pattern, entry) is not None` change on this line is not much to add on top of those requirements', 'comment_created': datetime.datetime(2022, 8, 16, 20, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 947272895, 'comment_body': 'Ok, done', 'comment_created': datetime.datetime(2022, 8, 16, 21, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 948360536, 'comment_body': ""> Ok, done\r\n\r\nNot quite, reading a bit more closely above you'll see\r\n\r\n>> And however it works needs to be documented.\r\n\r\ni.e., you need to add to `doc/configuration.rst`\r\n\r\n"", 'comment_created': datetime.datetime(2022, 8, 17, 19, 59, 22, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 948369223, 'comment_body': 'Ok, sorry I missed that.', 'comment_created': datetime.datetime(2022, 8, 17, 20, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 950598729, 'comment_body': 'It says this here, should it say something else?', 'comment_created': datetime.datetime(2022, 8, 19, 22, 57, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 950601597, 'comment_body': '```suggestion\r\n    except ImportError as exc:\r\n```', 'comment_created': datetime.datetime(2022, 8, 19, 23, 9, 1, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 950602832, 'comment_body': ""The `f'` and `{exc}` in my comment were intended as hints toward this more fleshed out version\r\n```suggestion\r\n        logger.info('`graphviz` required for graphical visualization '\r\n                    f'but could not be imported, got: {exc}')\r\n```"", 'comment_created': datetime.datetime(2022, 8, 19, 23, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 950620648, 'comment_body': 'Sorry, you said where the import was but then the error said could not create graph so I assumed it was when the graph was being made', 'comment_created': datetime.datetime(2022, 8, 20, 0, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 953171749, 'comment_body': ""I don't think you should only look at the method name (i.e., operate on `split('.')[-1])`. People can split on the last `.` in regex if they really want to, e.g., something like `\\.__[^.]*__$` does this (or is close to it) for `__.*__` method names."", 'comment_created': datetime.datetime(2022, 8, 23, 22, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 953173115, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2022, 8, 23, 22, 55, 25, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 954471702, 'comment_body': 'nitpick:\r\n```suggestion\r\nOptionally, graphs can be made of the usage of each API entry in examples,\r\n```', 'comment_created': datetime.datetime(2022, 8, 25, 3, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954472160, 'comment_body': 'maybe?\r\n```suggestion\r\nwill make one graph per module showing all of the API entries connected to\r\n```', 'comment_created': datetime.datetime(2022, 8, 25, 3, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954472518, 'comment_body': '```suggestion\r\nof which examples to look at if you want to learn about a particular\r\n```', 'comment_created': datetime.datetime(2022, 8, 25, 3, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954473053, 'comment_body': ""```suggestion\r\nBy default, ``missing_doc_ignore='.*__.*__'``, which ignores files that match this\r\n```"", 'comment_created': datetime.datetime(2022, 8, 25, 3, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954473230, 'comment_body': '```suggestion\r\nregular expression when graphing the usage of API entries within the\r\n```', 'comment_created': datetime.datetime(2022, 8, 25, 3, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954473777, 'comment_body': ""Maybe this section could be put after the 'Showing API usage', users may not read this in sequence but it may make more sense to introduce the API graphs first, then talk about this config?"", 'comment_created': datetime.datetime(2022, 8, 25, 3, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954474008, 'comment_body': 'Maybe add a note saying that this config is ignored (I assume) if `show_api_usage` is False?', 'comment_created': datetime.datetime(2022, 8, 25, 3, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954474646, 'comment_body': 'Maybe add that the graphviz package is required if you want the graphs?', 'comment_created': datetime.datetime(2022, 8, 25, 3, 48, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954476098, 'comment_body': ""nitpick: docstring would be nice, as it's a larger function"", 'comment_created': datetime.datetime(2022, 8, 25, 3, 52, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954477741, 'comment_body': 'Also maybe adding an image of an example graph (e.g., of a sphinx gallery module) would be nice?', 'comment_created': datetime.datetime(2022, 8, 25, 3, 56, 51, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954477793, 'comment_body': 'Question: what does `lut` mean/stand for?', 'comment_created': datetime.datetime(2022, 8, 25, 3, 56, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954480265, 'comment_body': 'nitpick: docstring?', 'comment_created': datetime.datetime(2022, 8, 25, 4, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 954482401, 'comment_body': ""nitpick, I wonder if something like 'api_usage_ignore' might be a better config name as it makes it clearer that it is related to the `show_api_usage` config. I feel 'missing_doc_ignore' may be a little ambiguous."", 'comment_created': datetime.datetime(2022, 8, 25, 4, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 955149098, 'comment_body': 'Sounds reasonable to me!', 'comment_created': datetime.datetime(2022, 8, 25, 15, 55, 58, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 955153445, 'comment_body': ""There are two reports that are generated, one of the API usage (which API entries are used in which examples) and one of which API entries are not used at all. So if `show_api_usage` is `False`, it only skips the second part. Maps of API entries that are used can get quite large because it also connects in examples so we decided to turn it off for MNE. There isn't an option to turn off the unused API entries though. I'll add a comment to clarify."", 'comment_created': datetime.datetime(2022, 8, 25, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 955158770, 'comment_body': ""Look up table, I'll add a comment"", 'comment_created': datetime.datetime(2022, 8, 25, 16, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 955168658, 'comment_body': 'I added the link to the `sg_api_usage.html` in the `sphinx_gallery` documentation, I think that might be a good way to show what it looks like!', 'comment_created': datetime.datetime(2022, 8, 25, 16, 10, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 955505467, 'comment_body': ""Looks good, just this nitpick, from the code:\r\n```python\r\n                    if leaf_count > 10:\r\n                        color = 'red'\r\n                    elif leaf_count > 5:\r\n                        color = 'orange'\r\n                    else:\r\n                        color = 'yellow'\r\n```\r\nit looks like the colours are different than described above?"", 'comment_created': datetime.datetime(2022, 8, 25, 23, 46, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 955522897, 'comment_body': 'Ah, I just missed orange.', 'comment_created': datetime.datetime(2022, 8, 26, 0, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 955523552, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2022, 8, 26, 0, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 955523800, 'comment_body': ""I might have missed it but i didn't see anything being green?"", 'comment_created': datetime.datetime(2022, 8, 26, 0, 31, 15, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 955524249, 'comment_body': 'Is it yellow is anything =<5?', 'comment_created': datetime.datetime(2022, 8, 26, 0, 31, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 955536195, 'comment_body': ""Yes yellow is less than 5. Shoot they're actually blue for no unused, that's the default color."", 'comment_created': datetime.datetime(2022, 8, 26, 0, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 955546777, 'comment_body': ""Nitpick (just because I don't think we include this page in any toc in our docs, so it's 'hidden'):\r\n```suggestion\r\nentry graphs. See the `Sphinx-Gallery API usage graph <sg_api_usage.html>`_ for\r\n```\r\n"", 'comment_created': datetime.datetime(2022, 8, 26, 1, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 955547380, 'comment_body': 'Last thing, can we mention what the name of the file generated is and where in the build doc folders the user can find it?', 'comment_created': datetime.datetime(2022, 8, 26, 1, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}, {'comment_id': 955577209, 'comment_body': '```suggestion\r\nfor example. This report can be found in the sphinx output directory under\r\n``sg_api_usage.html``.\r\n```', 'comment_created': datetime.datetime(2022, 8, 26, 1, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lucyleeow', 'type': 'User'}]","[{'commit_sha': 'ab30be075921886c0239b5c06e3f68213400387b', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b18d201f0e9a58b437b3c528225252a4eca1f607', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7478c81df313e3f7ef83a099462f024b0b935d0', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e307caeeec64d75ede72229b156f7cfe4e0f0a', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59eaeebc8bb2fda1ada946aecc79331ceb833643', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f19381a5e62fd8529cbe25f52f784a9d04db0b7', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74214efdfdf771105ba90efe455bce93c22d91b8', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a00f988c1ec3c3cf9cbee81df0a1551bc4acb7fe', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8064f097fc7169533fdc3aecbc7992d94610ba33', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41fc0fdccd9ed001d8f8fdcfb6a5929f175334a0', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '082d165f7c586938099a35c9d0a2a5deab713001', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '358c50a9f9dc35dd5bd774be4979a8c7b52487a2', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbe8ebd51d46ae8619b4ee5bf3137f42d55f6c8e', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e12cdbb259280c5440896e9aa89f36996ed8263', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879255730503bc797ba3e4d2389a50b56fb836e5', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b219aecc655f16d182a58f5ef683aebb471709b', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cbf751fce426a0d85cd5e53606df7aeb79eea72', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80bc0950a616f0d24ca1195f757c44d3074aa973', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '449802075e19884c6654e322123ebc6548c79ef0', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61109b54b5dcf10abd563f475975e69fdb01efe0', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '379a0a4d9f311d062cab2040749b2c1b91e9272f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a2a6c449c1e04205423f7084c810d2d41c7e0ea', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb7fe3689f4f88d7ad60aab5151956cd45981ce2', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4b94199788421993453b7303024fe50ccf67199', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ac9e32fa7a0992d677edb3504af52350fb631ad', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '686e6b0c042b6ac50b29ef53db3566deeffdb816', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b6ad9a42dfe2fe4c15485d3edb96b8730b363c3', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5544d9a5072d13b955e51730af984e7321ade66b', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cdd1ef1fe3491ad9fa9f04e5943e0a5627c9e7cb', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1a3baa0186f290b5c6a0b365cdba2be1280f4da', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '978f8e0104504dadea0aba369c3c649350c0206a', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd92645ea5cdffec183ca60567c6e60cd33a00c2', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '477ddd43d68a6e40f809e95a2803c1394232af15', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df96aa51e8323e5ee2c1df99ba138b938de3880e', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87a5899d561575e1cefb4c173dcd0c0fc9c95fe9', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fc73f8a04a1050c27f07d01a3e643f3a5b4011c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bcf8c32ab6255132e61ea56ee2a8266e6264821', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81fb08147d7c66d7e5be88f942f8dc4bc3bcfae9', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a45554fe446012a416932f37dfd709f697e4d7c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '120e5e51a5f6092d937d6aa8f024aa84ac1add57', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4e80783deecb02e26f0c6a9cc3c9461a14316eb', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7498c0a5e1088ed39b9ccf6092b39b0874d1a3a9', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '285dc5f1bc00b557862f7c6b4a7048293c79cdd7', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0bbdc4f7b8124c7deefedb768dae3d12355c2453', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ab04fac859585d6201ad861ce840d65be58815', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ad4d921ebcdb50b77755fddfd565235c512bb4', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01e27effabd0139694cf302f46b16635e2781019', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f053b5e44aae17681b124c58ad85d7782fe8f70', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09f339b77920832107bdbda7bf4ebe00999adbe3', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1945420334ec406183beffa84b138c771b9bef6d', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aad065de87b190615323495883e8182b2559efd', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0849ad5f97ee273451b3fde995de8a01f0c134ce', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1eb6a6463d6c9c86c6de322a11337b09420dd3d2', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c19f4ccd0ef7c2da9e08ab30f626b68b9bbdd507', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cad9b36233f696d5b52cfc052986da5388f39861', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a59e5e658a0475267c8c2c8a729b0bbf99fb0740', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f3bb6062392e7de0668c1463197e1b99c884a3c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16d4a1b523b260bc9ba08ef84f1ed6beef82b3a8', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c89ed837d031306a77ef0b9564e192f58b913142', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f84d971b5db4e79de90343e2f6bb5b60a0bbbb7', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acd606d0a5e1f335b6825dce094a9511a9b07cca', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f45114d95ed045f24caec20820ac4169fe62fb30', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '096e2c083e607e2d9ab85dfc463ca87f9d4c65b0', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e68711d9bfa2932a51546d9b976062513c77858', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '789dd182fb21bb2ffa41a085b957cfdd8baa5c31', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8438550ed44f4a73184284f00ac3e5d76ed2644f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '345e38838afbfa0d2e8789ebea210c0b1b8a9fbd', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '479d2f861c2f0256cb23bc986759c38edda383f4', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30d6e9ea115a8cabd8ca826d70df95dd436e1812', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '441657acb220ef37fbf722cb8ee86a85ad4c549f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45fdb88663c5f5da60ebdd83026269c56022eab7', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cc9ec6532773153e2dbb851708b8ae2f2174f51', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ecd9c572aedca6d965615e5096294be3516d6f8', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31425795dc5f8455d384d9b1189d4ec8644b6eb2', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66014065668b2a26d6fb644e6212e67d69531704', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ebbeec23406c66aece9fadbdc58f361c2691f95', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1038339600,"[MAINT, MRG] A few small leftovers from API usage","I wrote a quick function to just basically grep the example files for matches with the functions/classes/methods. There was an issue with methods in particular not being found because they are called from a variable name e.g. (`brain = mne.viz.Brain(...)` `brain.add_skull(...)`) how the example matching is done currently. Searching for just the function/class/method e.g. `add_skull` could be a false-positive because other modules have the same functions/classes/methods. The ubiquitous `fit(...)` comes to mind as something that would cause the method in this PR real trouble with false-positives. However, if you've seen one `fit`, you've kind of seen them all so perhaps for `sg_api_usage`, we could take a less-conservative approach to match methods like in this PR. It actually gives a very rosy account of the MNE example coverage with only 176/644 API entries not in examples (relative to the 204/644 for the current method using a pretty extensive `api_usage_ignore` docstring which this method would not need). What do you think @larsoner?

[test_api_entries.pdf](https://github.com/sphinx-gallery/sphinx-gallery/files/9436151/test_api_entries.pdf)",True,997,https://api.github.com/repos/sphinx-gallery/sphinx-gallery/pulls/997,https://github.com/sphinx-gallery/sphinx-gallery/pull/997,closed,25,20,1,6,5,2,1,0,[{'name': 'enhancement'}],2022-08-26 20:19:21+00:00,2022-08-29 17:50:56+00:00,250295.0,"2 days, 21:31:35","[{'comment_id': 956576330, 'comment_body': "">  if you've seen one fit, you've kind of seen them all\r\n\r\nI'm not sure, even in `sklearn` the `kwargs` there can vary a bit. A more drastic example of where this is problematic is `inst.plot` in MNE-Python -- we have many of them (dozens?) and if make a new class with a `.plot` method and *don't* have an example for it, we'd want to know"", 'comment_created': datetime.datetime(2022, 8, 27, 12, 21, 40, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 957580122, 'comment_body': ""Yeah, I suppose it's better to wait for the right way to do this by following the variable types in code execution that is much harder to do. I will change this to just the fixes and then it can be merged."", 'comment_created': datetime.datetime(2022, 8, 29, 16, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}]","[{'commit_sha': 'fd6162c03edc387e4951c2094bf1b87b86d9e216', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df64bf11de7d9dd2e8a71ec37b096ee1b00a5c91', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8361f7b33002600f68bf20032869073880d32cd0', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1e7dac57956bdf66583b9d0c14c896f2e51cdf2', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc4b6d83666af95c72e74ca9913166b6762a82e8', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc427984fe9180c59d426674929a3dba4f4f1b89', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1047922277,"[MAINT, MRG] Add unused option for API usage, set as default","This allows turning off of the API usage altogether, hopefully fixing the last issue with this new feature https://github.com/mne-tools/mne-python/pull/11132.

I looked into the other point, about suppressing the warnings but it looks like from the Sphinx-Gallery documentation that that has to be in the `conf.py` file, specific to that project so as far as I know it can't be done in an extension, unfortunately I think it just has to be done per-project.

cc @larsoner",True,1001,https://api.github.com/repos/sphinx-gallery/sphinx-gallery/pulls/1001,https://github.com/sphinx-gallery/sphinx-gallery/pull/1001,closed,26,22,3,1,11,0,1,0,[{'name': 'bug'}],2022-09-06 19:01:23+00:00,2022-09-08 00:40:04+00:00,106721.0,"1 day, 5:38:41",[],"[{'commit_sha': 'e76076131234ac863a155f9ce526cbcd34724d01', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1037382673,Add time-frequency resolved DICS beamformer,The beamformer methods part of https://github.com/mne-tools/mne-python/pull/10920.,True,11096,https://api.github.com/repos/mne-tools/mne-python/pulls/11096,https://github.com/mne-tools/mne-python/pull/11096,closed,268,9,6,15,50,14,0,1,[],2022-08-26 01:00:23+00:00,2022-10-24 09:37:05+00:00,5128602.0,"59 days, 8:36:42","[{'comment_id': 959303898, 'comment_body': '```suggestion\r\n    # Also test here that no warnings are thrown - implemented to check whether\r\n```', 'comment_created': datetime.datetime(2022, 8, 31, 8, 26, 29, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 959305254, 'comment_body': '```suggestion\r\n    """"""Test DICS applied to time-frequency objects.""""""\r\n```', 'comment_created': datetime.datetime(2022, 8, 31, 8, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 959312394, 'comment_body': 'This whole test function could use some more comments on what you are testing where (i.e., real data, complex data etc). Will make it easier to trouble shoot in the future if necessary.', 'comment_created': datetime.datetime(2022, 8, 31, 8, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 959313951, 'comment_body': 'Why compatibility with Matlab?', 'comment_created': datetime.datetime(2022, 8, 31, 8, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 959317781, 'comment_body': 'This does not directly concern the DICS TFR, does it?', 'comment_created': datetime.datetime(2022, 8, 31, 8, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 960439928, 'comment_body': 'I acutally misunderstood your intentions here first - again, add comments further up to explain what this test will do ', 'comment_created': datetime.datetime(2022, 9, 1, 9, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 960440560, 'comment_body': '(EDIT: I had initially replied the last comment in the wrong thread.)', 'comment_created': datetime.datetime(2022, 9, 1, 9, 41, 45, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 961933206, 'comment_body': ""No, it does not directly concern the content of this (applying to a non-csd time-frequency object), it's just since the frequencies are taken as averages of high and low bounds (or in this case only one bound) I thought it was prudent to check."", 'comment_created': datetime.datetime(2022, 9, 2, 18, 52, 46, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 961934133, 'comment_body': ""This is copied verbatim from the csd code so that the same process and normalizations are followed. That's a good question which I might guess that the answer is that the original MNE implementation was a translation from Matlab."", 'comment_created': datetime.datetime(2022, 9, 2, 18, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 964520015, 'comment_body': 'Possibly to more closely reproduce what Fieldtrip does?', 'comment_created': datetime.datetime(2022, 9, 7, 8, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 970545295, 'comment_body': 'Can you commit this?', 'comment_created': datetime.datetime(2022, 9, 14, 9, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}, {'comment_id': 972353404, 'comment_body': ""I think this is actually amplitude, if I'm not mistaken power would be:\r\n\r\n```suggestion\r\n# At this point, the data is still complex. Convert to power.\r\nstc.data = (stc.data * stc.data.conj()).real\r\n```"", 'comment_created': datetime.datetime(2022, 9, 15, 19, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 972707320, 'comment_body': 'Agreed!', 'comment_created': datetime.datetime(2022, 9, 16, 7, 37, 40, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 999872701, 'comment_body': ""```suggestion\r\n# compute scalar DICS beamfomer\r\n```\r\n`'max-power'` is not a vector solution"", 'comment_created': datetime.datetime(2022, 10, 19, 19, 47, 31, tzinfo=datetime.timezone.utc), 'commenter': 'britta-wstnr', 'type': 'User'}]","[{'commit_sha': '24b16a2d4d30a30077d515f58d2b5dfb35839e04', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce4fb1d0bc931ee3e301ea4a7d8174b2b1f03b5', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd89c1225dda04feb6725361c0c34c09f684ce9b', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f53ecd61616ce819cead87c2abece1bad66aa0c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a6814cc42d2005ede7c51e284c38fb696eed042', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b4bd3d28c261b40961c106c7cf0b774ccaff9d3', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14fb10b9da97d17bf805e0619eb07d070d823f43', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c39779035cd3fe93d40b0b8e4b515e24f1cf0a76', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6cf8031d234735c81345630dca188e08afccf87', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd05d3bca1e95faaf695e6a372c5cab1b127084eb', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b85ff48e58910ded6d93c8bdf4e2ea32cc32c42', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '298eb6ad1651d29f64445f3115ce9339698daba9', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '369fbabd37f37a8b1d6c55910e04c54750b26d35', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '037331ca1f0bcecf856962e25af7c4b1a74b0d5d', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41be99224de74da2c5ce1120109b656f461b5280', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1037371841,"[ENH, MRG] Add time-frequency epoch source estimation",The MNE methods part of https://github.com/mne-tools/mne-python/pull/10920.,True,11095,https://api.github.com/repos/mne-tools/mne-python/pulls/11095,https://github.com/mne-tools/mne-python/pull/11095,closed,149,7,6,12,5,16,0,0,[],2022-08-26 00:38:32+00:00,2022-08-29 15:05:10+00:00,311198.0,"3 days, 14:26:38","[{'comment_id': 955860296, 'comment_body': '```suggestion\r\n    stcs : list of list of (SourceEstimate | VectorSourceEstimate | VolSourceEstimate)\r\n```', 'comment_created': datetime.datetime(2022, 8, 26, 9, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 955862910, 'comment_body': 'this does not seem to be used', 'comment_created': datetime.datetime(2022, 8, 26, 9, 39, 35, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 955863968, 'comment_body': 'can you check that if you average stcs in vector mode you get the same output as if you would apply_inverse on the average of EpochsTFR.data?', 'comment_created': datetime.datetime(2022, 8, 26, 9, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 956129323, 'comment_body': 'That was for the averageTFR, just cruft, good catch', 'comment_created': datetime.datetime(2022, 8, 26, 14, 52, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 956163739, 'comment_body': 'Sure, you have to average over the epochs and the frequency dimension since we did away with the `apply_inverse_tfr` to `AverageTFR` objects though but if you do that it works.', 'comment_created': datetime.datetime(2022, 8, 26, 15, 28, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 956190541, 'comment_body': 'can you add apply_inverse_cov here?', 'comment_created': datetime.datetime(2022, 8, 26, 16, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 956191359, 'comment_body': 'is this a known issue?', 'comment_created': datetime.datetime(2022, 8, 26, 16, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 956192313, 'comment_body': 'Not to my knowledge', 'comment_created': datetime.datetime(2022, 8, 26, 16, 2, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 956200500, 'comment_body': 'I went ahead and updated the `See Also` sections for all the other methods too', 'comment_created': datetime.datetime(2022, 8, 26, 16, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 956201856, 'comment_body': ""can you open an issue about this one? I don't know what going on"", 'comment_created': datetime.datetime(2022, 8, 26, 16, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 957376388, 'comment_body': '```suggestion\r\n    apply_inverse_tfr_epochs : Apply inverse operator to epochs tfr object.\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 14, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 957376515, 'comment_body': '```suggestion\r\n    apply_inverse_tfr_epochs : Apply inverse operator to epochs tfr object.\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 14, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 957376774, 'comment_body': '```suggestion\r\n    apply_inverse_tfr_epochs : Apply inverse operator to epochs tfr object.\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 14, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 957377129, 'comment_body': '```suggestion\r\n    apply_inverse_epochs : Apply inverse operator to epochs object.\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 14, 1, 12, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 957377403, 'comment_body': '```suggestion\r\n    apply_inverse_tfr_epochs : Apply inverse operator to epochs tfr object.\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 14, 1, 25, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 957379743, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 14, 3, 32, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}]","[{'commit_sha': 'cf3353d5b3b8a6e42ec46dc478e20741aadbe1dc', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd29bcfd0f0e31d38f067337b46535e34de3ad972', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87830346ee42da890d7dda42f8e2c1d93dc97399', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1525d22a0d32086bb25e9c205dfdf595b9943563', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc4875e4152f0a5272a1afc3aae53ba737befe4c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eea470105a01f17c8b36c23b3bc1fa8b73b4e14', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dffafec6b813493ad890009bae7acfb7126b7048', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c97cb6a946597a2762df2716d2c370e470972780', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67be628ec3d9675ae2d1be502b93e7fc0b5ad254', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4eb3da2b8852ca15864ed27e155ab31964099f4e', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27a71844ed64604a293b643fe3ea73e869baa4ff', 'committer_username': 'agramfort', 'committer_name': 'Alexandre Gramfort', 'committer_email': 'alexandre.gramfort@m4x.org', 'commit_date': datetime.datetime(2009, 12, 2, 20, 23, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e162192d88c44fec33c6a7e347d5dfb2f7626e6c', 'committer_username': 'agramfort', 'committer_name': 'Alexandre Gramfort', 'committer_email': 'alexandre.gramfort@m4x.org', 'commit_date': datetime.datetime(2009, 12, 2, 20, 23, 59, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1012466924,"[ENH, MRG] Add provenance to TFR baseline application",Part of https://github.com/mne-tools/mne-python/pull/10920.,True,10979,https://api.github.com/repos/mne-tools/mne-python/pulls/10979,https://github.com/mne-tools/mne-python/pull/10979,closed,12,2,3,5,6,3,0,0,[],2022-07-30 00:05:38+00:00,2022-08-02 19:37:44+00:00,329526.0,"3 days, 19:32:06","[{'comment_id': 935171773, 'comment_body': 'I would put this in the init\r\n\r\nand I would update a test ', 'comment_created': datetime.datetime(2022, 8, 2, 6, 42, 26, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 935898631, 'comment_body': 'none of the mixins have `__init__` methods (right?), so why is it necessary to call `super().__init__()` here? ', 'comment_created': datetime.datetime(2022, 8, 2, 18, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}, {'comment_id': 935914076, 'comment_body': ""Good point, it isn't."", 'comment_created': datetime.datetime(2022, 8, 2, 18, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}]","[{'commit_sha': '5e258d367011f58c0b420ccf91e0497e18e23440', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '582677d464153d8dcefff02524201382a6d89dd6', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f7e6611f6814740a06ad2dfc65348414979fb0a', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13f6ae1c9218c182c83f34fbf8bdb892440dbcce', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71afa9b113b7eb4b6b2f1e2a773e2e693dd970aa', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1003075867,"[ENH, MRG] Add decimate to EpochsTFR object","Fixes memory failures here https://github.com/mne-tools/mne-python/pull/10920. 

I just needed the decimate method but while I was changing that, it made sense to add in `tmin` and `tmax` and to mak `times` readonly as in `Epochs`.",True,10940,https://api.github.com/repos/mne-tools/mne-python/pulls/10940,https://github.com/mne-tools/mne-python/pull/10940,closed,117,91,6,5,3,1,0,0,[],2022-07-20 22:31:05+00:00,2022-07-21 14:26:12+00:00,57307.0,15:55:07,"[{'comment_id': 926743403, 'comment_body': '```suggestion\r\n        self._raw_times = self.times.copy()  # needed for decimate\r\n```', 'comment_created': datetime.datetime(2022, 7, 21, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}]","[{'commit_sha': '610a98c998e13ccdc1c5383d6c8d9b1b111f6ed2', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d157de07694edbe690766daa00a6d4f48a9fc77', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72d5508659e47ab493c69fe294ecec92e1c16257', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c53b85fcb6c756f2928c274424cf02c4389407', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6217f1b6ef00bc947a4ef7ab6292b4781742dba6', 'committer_username': 'drammock', 'committer_name': 'Daniel McCloy', 'committer_email': None, 'commit_date': datetime.datetime(2012, 6, 2, 19, 15, 18, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1014187995,"[ENH, MRG] Add compute_csd function","Part of https://github.com/mne-tools/mne-python/pull/10920.

This uses power to compute the cross-spectral density. It would be nice if this could be done on complex numbers but that's causing issues with positive semi-definite matrices. It might be nice to just go ahead with this version and then improve it later since it matches how other functions like `csd_morlet` do CSD and then modify all the functions to be consistent in a followup PR.",True,10986,https://api.github.com/repos/mne-tools/mne-python/pulls/10986,https://github.com/mne-tools/mne-python/pull/10986,closed,73,5,5,19,9,11,0,0,[],2022-08-01 18:14:43+00:00,2022-08-16 01:26:01+00:00,1235478.0,"14 days, 7:11:18","[{'comment_id': 943182723, 'comment_body': 'kwargs are not used in the function.', 'comment_created': datetime.datetime(2022, 8, 11, 7, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 943184446, 'comment_body': 'to avoid the for loop I would compute the full CSD matrix and use tri_indices to only store the upper part.', 'comment_created': datetime.datetime(2022, 8, 11, 7, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'agramfort', 'type': 'User'}, {'comment_id': 944805891, 'comment_body': ""I tried to refactor this but it's a tricky einsum because you need to preserve the frequency dimension but average across the time dimension so you could loop over frequencies to do that but it's pretty much just as inelegant. Maybe someone else could puzzle it out but I think this is a lot harder than it looks."", 'comment_created': datetime.datetime(2022, 8, 12, 20, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 945772139, 'comment_body': 'Done in 25e3c82be9', 'comment_created': datetime.datetime(2022, 8, 15, 14, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 945774753, 'comment_body': 'For consistency with `csd_fourier`, `csd_multitaper`, and `csd_morlet`, maybe `csd_tfr` would be better here?', 'comment_created': datetime.datetime(2022, 8, 15, 14, 3, 8, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 945776178, 'comment_body': ""Does `EpochsTFR` really not have a `.info` attribute? If it has it, then projs should be in `epochs_tfr.info['projs']` already"", 'comment_created': datetime.datetime(2022, 8, 15, 14, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 945778730, 'comment_body': ""I didn't like this `atol` as it's a bit high. 1e-6 data will have covariance values of 1e-12 (squaring), and for CSD it might be even lower (power within a band). Locally at least it worked with no `atol` param, which should then use the defaults of `atol=0, rtol=1e-7` which seems cleaner to me. Let's see if it comes back green...."", 'comment_created': datetime.datetime(2022, 8, 15, 14, 7, 2, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 945873590, 'comment_body': ""It does have an info, I thought when I checked there wasn't a projs key in info which I thought was odd... I'll double check "", 'comment_created': datetime.datetime(2022, 8, 15, 15, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 945875150, 'comment_body': ""You might need to do `info.get('projs', None)` because I think sometimes the key might just not exist. But if you compute on an instance like one from `sample` that *does* have projs and this ends up as `None` then it's a problem..."", 'comment_created': datetime.datetime(2022, 8, 15, 15, 28, 50, tzinfo=datetime.timezone.utc), 'commenter': 'larsoner', 'type': 'User'}, {'comment_id': 946007229, 'comment_body': ""I'm not too particular about it, sounds good."", 'comment_created': datetime.datetime(2022, 8, 15, 18, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 946008541, 'comment_body': ""That's probably what happened, it was I think made from scratch so that's probably why it didn't even have a `projs` field."", 'comment_created': datetime.datetime(2022, 8, 15, 18, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}]","[{'commit_sha': 'a1541f110b72497742dad494656e20cea4938166', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24352e7caf1a56d537965932ff2ce248aa745baa', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a6643115d7aa084cdf0785dd7d6ce4133e5fd7', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8779a2c7b04dddfd1a77eacf3a6672f8bcd0ad7b', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac160b6a36d35c2c3331e3b5f17515e49b8dd1dd', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0022d0c411243369b27c0d7a59a21714236fef5c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2fdbd0bef7a2648f64afd1e5191dd106780a18bf', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aec8078ac835c02c838e827510388c263070a428', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13e8c6989c806638af8d27fa4d605fb815edca83', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58c5ed0d7031875e21720e6aec1f96792c10aa51', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbf63f6af788ff4fcbb572b5445412a0f2831a41', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a397629e684d3d14cb24d13757b8b541f4bc05', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fcdb464724691407558e288b3e7f8e99d1e158b6', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25e3c82be94b15c53b548c477101d71a0143cf61', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bbab6c71f903339a694cf693a77d7ca59e44d13', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6238a79b71061d4db9ec542f843a17abf85e60e', 'committer_username': 'larsoner', 'committer_name': 'Eric Larson', 'committer_email': 'larson.eric.d@gmail.com', 'commit_date': datetime.datetime(2012, 9, 17, 22, 6, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '665f1426c299c6126699e236f874321f8bf568b4', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84182144c5dafbbfbb3b30360a78e8563cfba5db', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '39f73064f6e6eb73454d66716910e9a9815b2e4f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1012486480,[ENH] Allow vector DICS source estimates,Part of https://github.com/mne-tools/mne-python/pull/10920.,True,10980,https://api.github.com/repos/mne-tools/mne-python/pulls/10980,https://github.com/mne-tools/mne-python/pull/10980,closed,26,10,3,12,15,14,0,0,[],2022-07-30 01:48:34+00:00,2022-08-23 17:14:36+00:00,2129162.0,"24 days, 15:26:02","[{'comment_id': 933708408, 'comment_body': '```suggestion\n         len(csd.frequencies)))\n```\n', 'comment_created': datetime.datetime(2022, 7, 30, 2, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 933714322, 'comment_body': ""```suggestion\n        ((n_sources * 3) if filters['pick_ori'] == 'vector') else n_sources,\n```\n"", 'comment_created': datetime.datetime(2022, 7, 30, 2, 28, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 933717580, 'comment_body': ""```suggestion\n        ((n_sources * 3) if filters['pick_ori'] == 'vector' else n_sources,\n```\n"", 'comment_created': datetime.datetime(2022, 7, 30, 2, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 934819934, 'comment_body': ""```suggestion\r\n```\r\n\r\nYou don't use this parameter I think, as you can just grab the normals from the forward object."", 'comment_created': datetime.datetime(2022, 8, 1, 18, 51, 28, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 934821256, 'comment_body': ""```suggestion\r\n            logger.info('    computing DICS spatial filter at '\r\n```\r\nThis is the `make_dics` function, which only builds the filters, but does not apply them (that is done with the `apply_dics_*` functions)"", 'comment_created': datetime.datetime(2022, 8, 1, 18, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 934848194, 'comment_body': ""I think it has to be stored in the filter so that when you pass the object in `apply_*` you have this information. It's also consistent with how it's done for LCMV. (i.e. you don't pass the forward to `apply_dics` so I think you do need to store it)."", 'comment_created': datetime.datetime(2022, 8, 1, 19, 30, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 947747554, 'comment_body': ""This is not necessary. `apply_dics_csd` computes power, which has no orientation. The actual power computation happens below in the `_compute_power` function. If you feed a DICS beamformer object with `pick_ori='vector'` to this function, it just pools power across all orientations. Hence, the result is always just 1 scalar value per vertex."", 'comment_created': datetime.datetime(2022, 8, 17, 10, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 947748821, 'comment_body': ""Same here. `apply_dics_csd` will never return a `VectorSourceEstimate`, even with `pick_ori='vector'`."", 'comment_created': datetime.datetime(2022, 8, 17, 10, 19, 6, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 948132737, 'comment_body': ""Sounds reasonable and I'm not at all an expert in this but just for clarification, could you just return power in each (x, y, z) direction computed separately and independently? Not sure if that even makes sense as a question but that was my thought process in how one might use the vector source estimate. That might, instead of pooling across all orientations, separate them out. Does that make any sense?"", 'comment_created': datetime.datetime(2022, 8, 17, 15, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 948241181, 'comment_body': '```suggestion\r\n- Add :func:`mne.time_frequency.csd_tfr` to compute cross-spectral density from :class:`mne.time_frequency.EpochsTFR` (:gh:`10986` by `Alex Rockhill`_)\r\n```', 'comment_created': datetime.datetime(2022, 8, 17, 17, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 949517059, 'comment_body': 'You certainly could, but it would not be terribly useful. The xyz directions are mostly arbitrary. They could be the global xyz, or z can be aligned with the surface normal and x and y being arbitrary directions. What makes these directions useful is that they are perpendicular hence forming a coordinate system. Combine the activity in each direction and you have a vector pointing in the orientation of the source activity. This is what happens when you call `VectorSourceEstimate.plot()`: you get pretty arrows showing the directions of the vectors.\r\n\r\nUnfortunately, this doesn\'t work when you have power, the signal squared, in each direction. It\'s no longer linear, hence you can\'t combine the xyz directions into a vector anymore. One obvious way in which this fails is that squared values are always positive, hence the vector would be restricted to a 90 degree cone, regardless of the true source orientation, otherwise at least one of the directions would have to be negative.\r\n\r\nSo, simply combining the directions like we would with ""normal"" time course source activity doesn\'t work. There is a not-so-simple way to combine them though, namely by using the largest eigenvalue of the xyz source CSD matrix (applying the DICS filters to a CSD will actually give you a full source CSD, from which we now just take the diagonal to compute power, but you could do more with it). However, this would be a bigger project. This is something that is not typically done, so we would need to verify the method on some datasets to make sure we got it right, and at that point it\'s probably only worth it if we had some researchers that have an actual direct need to have this functionality.', 'comment_created': datetime.datetime(2022, 8, 18, 19, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 950422401, 'comment_body': ""Ah thanks for explaining, that makes sense! I can write a little note explaining that vector DICS filters will return scalar source estimates just so it's in the documentation."", 'comment_created': datetime.datetime(2022, 8, 19, 17, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alexrockhill', 'type': 'User'}, {'comment_id': 952371330, 'comment_body': 'Nice!', 'comment_created': datetime.datetime(2022, 8, 23, 9, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 952398010, 'comment_body': '""quadrent"" -> quadrant', 'comment_created': datetime.datetime(2022, 8, 23, 9, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'drammock', 'type': 'User'}]","[{'commit_sha': 'c8ae3d80eab956cf2815fdd661399aaf738bf4f8', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd18c53470e1bea0ff47703a8e2f5586e713210a8', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73fea5d9d54a3a4a25ca66e164df4ea9b8c3f0da', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0864ee47c388067db98e9fe6e9ada78060f1b39c', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bb07cf051007e605bd28792073fc4a53bf9a09b', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efc5ac1d17f65b0563c0d5fb5f9711d043fac69f', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b7bb67f0a61a2df6acdeb296d234a500d40d11b', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c587470934b110a18790e2e28f7f869c29cdfc16', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d6b7cc9788bdb13c649115599fbbd1adda7857a', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '841c4552f1dd944e7bc621c85f1f875e7b8aa815', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a5bf234aa3337a30e35ed7bd4685c649e74dfc30', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1888d0e0a558fe668729ea1a65b66b5ddc173f09', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
1040306907,"[ENH, MRG] Add Hilbert to TFR methods comparison","I think this is an important methods comparison as the Hilbert transform is a popular choice in some electrophysiology circles. I definitely have been asked about it and I think it's nice to compare in this example. Also, it's a good demonstration of how to coerce this kind of data to fit within the API since it doesn't fit naturally very well with the other time-frequency methods.",True,11116,https://api.github.com/repos/mne-tools/mne-python/pulls/11116,https://github.com/mne-tools/mne-python/pull/11116,closed,85,61,4,6,8,3,0,0,[],2022-08-29 23:55:45+00:00,2022-09-03 09:10:55+00:00,378910.0,"4 days, 9:15:10","[{'comment_id': 961571835, 'comment_body': '```suggestion\r\n- Add example of how to obtain time-frequency decomposition using narrow bandpass Hilbert transforms to :ref:`ex-tfr-comparison` (:gh:`11116` by `Alex Rockhill`_)\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 11, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 961573260, 'comment_body': '```suggestion\r\n        # Filter raw data and re-epoch to avoid the filter being longer than\r\n        # the epoch data for low frequencies and short epochs, such as here.\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 11, 22, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}, {'comment_id': 961574193, 'comment_body': '```suggestion\r\n        # NOTE: The bandwidths of the filters are changed from their defaults\r\n        # to exaggerate differences. With the default transition bandwidths,\r\n        # these are all very similar because the filters are almost the same.\r\n        # In practice, using the default is usually a wise choice.\r\n```', 'comment_created': datetime.datetime(2022, 9, 2, 11, 23, 16, tzinfo=datetime.timezone.utc), 'commenter': 'wmvanvliet', 'type': 'User'}]","[{'commit_sha': '930255d429a8d7197ee5fe9f1d9486da51e941ca', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb529a3905460feaa4e0790215c620849c8265fc', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4264dd781bd99ff6d513a1857877f111897795e', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de4deda9390fd4e019d31f359e29bfceee06ed76', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b918754aaa5e217789766f4fef4309b2e465d3d8', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e35184cf91238a84d67a70d1c19fb6e2d24777df', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29
975953010,"[ENH, MAINT] Refactor pyvistaqt/notebook widgets abstraction","Fixes part of https://github.com/mne-tools/mne-python/issues/10779, implemented in the hierarchical method described there, in short:

- The renderer has inherited from window implying its standalone application, to preserve this, we can still allow this although can also be a subunit within a GUI (e.g. `coreg`, `brain` timeviewer and `ieeg_locate`)
- We should allow windows to be instantiated without a renderer so that non-3D GUIs can use this framework as well and it works a lot better for inheritance (e.g. slice browser inheritance)",False,10803,https://api.github.com/repos/mne-tools/mne-python/pulls/10803,https://github.com/mne-tools/mne-python/pull/10803,closed,1940,2113,10,3,14,0,0,0,[],2022-06-22 22:22:50+00:00,2022-07-08 18:38:09+00:00,1368919.0,"15 days, 20:15:19",[],"[{'commit_sha': 'fee623b796fde6e6d987a9ccf42fecc3b221bb97', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b94ca7de53f6fe32907812f747162e472f83705', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03fb5d77f6f95177c547bfb17828f62675a4cd0a', 'committer_username': 'alexrockhill', 'committer_name': 'Alex Rockhill', 'committer_email': 'aprockhill@mailbox.org', 'commit_date': datetime.datetime(2015, 7, 23, 19, 47, 6, tzinfo=datetime.timezone.utc)}]",Alex Rockhill,13473576,aprockhill@mailbox.org,User,,61,,39,29

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1301584,mne-python,mne-tools/mne-python,Python,1306,2657,81,378,18094,527,31,61,"[{'id': 1849845168, 'number': 12593, 'closed': datetime.datetime(2024, 5, 2, 0, 1, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 1, 15, 0, 54, tzinfo=datetime.timezone.utc), 'time_taken': 32419.0, 'time_delta': '9:00:19', 'additions': 101, 'deletions': 25, 'state': 'closed'}, {'id': 1841460962, 'number': 12576, 'closed': datetime.datetime(2024, 4, 27, 9, 40, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 25, 18, 13, 41, tzinfo=datetime.timezone.utc), 'time_taken': 142019.0, 'time_delta': '1 day, 15:26:59', 'additions': 25, 'deletions': 37, 'state': 'closed'}, {'id': 1832629912, 'number': 12555, 'closed': None, 'created': datetime.datetime(2024, 4, 19, 23, 21, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 330, 'deletions': 2, 'state': 'open'}, {'id': 1730411312, 'number': 12448, 'closed': datetime.datetime(2024, 2, 16, 23, 38, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 16, 22, 47, 27, tzinfo=datetime.timezone.utc), 'time_taken': 3088.0, 'time_delta': '0:51:28', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 1720993960, 'number': 12436, 'closed': datetime.datetime(2024, 2, 12, 16, 50, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 11, 15, 53, 15, tzinfo=datetime.timezone.utc), 'time_taken': 89823.0, 'time_delta': '1 day, 0:57:03', 'additions': 15, 'deletions': 5, 'state': 'closed'}, {'id': 1692519677, 'number': 12382, 'closed': datetime.datetime(2024, 2, 8, 17, 43, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 23, 20, 32, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1372256.0, 'time_delta': '15 days, 21:10:56', 'additions': 23, 'deletions': 5, 'state': 'closed'}, {'id': 1665275945, 'number': 12336, 'closed': datetime.datetime(2024, 1, 10, 13, 19, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 4, 20, 44, 44, tzinfo=datetime.timezone.utc), 'time_taken': 491659.0, 'time_delta': '5 days, 16:34:19', 'additions': 197, 'deletions': 38, 'state': 'closed'}, {'id': 1663953717, 'number': 12334, 'closed': datetime.datetime(2024, 1, 4, 17, 12, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 1, 4, 0, 8, 36, tzinfo=datetime.timezone.utc), 'time_taken': 61441.0, 'time_delta': '17:04:01', 'additions': 185, 'deletions': 27, 'state': 'closed'}, {'id': 1649983173, 'number': 12315, 'closed': None, 'created': datetime.datetime(2023, 12, 19, 9, 7, 52, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 464, 'deletions': 691, 'state': 'open'}, {'id': 1649824565, 'number': 12311, 'closed': datetime.datetime(2023, 12, 31, 2, 35, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 19, 7, 2, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1020774.0, 'time_delta': '11 days, 19:32:54', 'additions': 109, 'deletions': 55, 'state': 'closed'}, {'id': 1624687541, 'number': 12252, 'closed': datetime.datetime(2023, 12, 1, 18, 15, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 12, 1, 0, 12, 37, tzinfo=datetime.timezone.utc), 'time_taken': 65000.0, 'time_delta': '18:03:20', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1508594387, 'number': 11974, 'closed': datetime.datetime(2023, 9, 8, 23, 19, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 8, 22, 52, 22, tzinfo=datetime.timezone.utc), 'time_taken': 1623.0, 'time_delta': '0:27:03', 'additions': 13, 'deletions': 0, 'state': 'closed'}, {'id': 1476603959, 'number': 11889, 'closed': datetime.datetime(2023, 8, 22, 15, 49, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 15, 22, 50, 10, tzinfo=datetime.timezone.utc), 'time_taken': 579552.0, 'time_delta': '6 days, 16:59:12', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 1453072188, 'number': 11839, 'closed': datetime.datetime(2023, 8, 1, 22, 48, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 2, 3, 50, tzinfo=datetime.timezone.utc), 'time_taken': 420280.0, 'time_delta': '4 days, 20:44:40', 'additions': 445, 'deletions': 420, 'state': 'closed'}, {'id': 1440084368, 'number': 11812, 'closed': datetime.datetime(2023, 12, 1, 18, 14, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 18, 23, 55, 40, tzinfo=datetime.timezone.utc), 'time_taken': 11729923.0, 'time_delta': '135 days, 18:18:43', 'additions': 549, 'deletions': 3, 'state': 'closed'}, {'id': 1433881961, 'number': 11803, 'closed': datetime.datetime(2023, 9, 2, 17, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 13, 22, 52, 49, tzinfo=datetime.timezone.utc), 'time_taken': 4386491.0, 'time_delta': '50 days, 18:28:11', 'additions': 277, 'deletions': 98, 'state': 'closed'}, {'id': 1389119976, 'number': 11730, 'closed': datetime.datetime(2023, 6, 14, 17, 3, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 12, 17, 26, 26, tzinfo=datetime.timezone.utc), 'time_taken': 171407.0, 'time_delta': '1 day, 23:36:47', 'additions': 16, 'deletions': 12, 'state': 'closed'}, {'id': 1359665197, 'number': 11698, 'closed': datetime.datetime(2023, 5, 23, 19, 3, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 22, 17, 52, 54, tzinfo=datetime.timezone.utc), 'time_taken': 90652.0, 'time_delta': '1 day, 1:10:52', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 1324458807, 'number': 11646, 'closed': datetime.datetime(2023, 4, 27, 19, 47, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 23, 19, 9, 22, tzinfo=datetime.timezone.utc), 'time_taken': 347909.0, 'time_delta': '4 days, 0:38:29', 'additions': 78, 'deletions': 641, 'state': 'closed'}, {'id': 1300572582, 'number': 11616, 'closed': datetime.datetime(2023, 4, 13, 14, 11, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 3, 19, 24, 19, tzinfo=datetime.timezone.utc), 'time_taken': 845255.0, 'time_delta': '9 days, 18:47:35', 'additions': 88, 'deletions': 52, 'state': 'closed'}, {'id': 1295357035, 'number': 11612, 'closed': datetime.datetime(2023, 3, 30, 6, 27, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 29, 22, 15, 57, tzinfo=datetime.timezone.utc), 'time_taken': 29511.0, 'time_delta': '8:11:51', 'additions': 4, 'deletions': 2, 'state': 'closed'}, {'id': 1293322510, 'number': 11607, 'closed': datetime.datetime(2023, 3, 28, 22, 3, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 28, 16, 35, 57, tzinfo=datetime.timezone.utc), 'time_taken': 19679.0, 'time_delta': '5:27:59', 'additions': 45, 'deletions': 4, 'state': 'closed'}, {'id': 1280824218, 'number': 11572, 'closed': datetime.datetime(2023, 3, 22, 15, 15, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 17, 23, 0, 13, tzinfo=datetime.timezone.utc), 'time_taken': 404129.0, 'time_delta': '4 days, 16:15:29', 'additions': 371, 'deletions': 48, 'state': 'closed'}, {'id': 1279359481, 'number': 11567, 'closed': datetime.datetime(2023, 3, 20, 18, 53, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 16, 21, 43, 4, tzinfo=datetime.timezone.utc), 'time_taken': 335447.0, 'time_delta': '3 days, 21:10:47', 'additions': 437, 'deletions': 153, 'state': 'closed'}, {'id': 1268466655, 'number': 11547, 'closed': datetime.datetime(2023, 3, 9, 6, 12, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 8, 21, 11, 15, tzinfo=datetime.timezone.utc), 'time_taken': 32448.0, 'time_delta': '9:00:48', 'additions': 5, 'deletions': 4, 'state': 'closed'}, {'id': 1260976674, 'number': 11525, 'closed': datetime.datetime(2023, 4, 3, 18, 34, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 2, 19, 48, 2, tzinfo=datetime.timezone.utc), 'time_taken': 2760367.0, 'time_delta': '31 days, 22:46:07', 'additions': 1759, 'deletions': 44, 'state': 'closed'}, {'id': 1260965293, 'number': 11524, 'closed': datetime.datetime(2023, 4, 3, 18, 33, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 2, 19, 36, 13, tzinfo=datetime.timezone.utc), 'time_taken': 2761058.0, 'time_delta': '31 days, 22:57:38', 'additions': 1685, 'deletions': 43, 'state': 'closed'}, {'id': 1244090217, 'number': 11489, 'closed': datetime.datetime(2023, 2, 16, 23, 14, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 16, 17, 50, 19, tzinfo=datetime.timezone.utc), 'time_taken': 19458.0, 'time_delta': '5:24:18', 'additions': 15, 'deletions': 9, 'state': 'closed'}, {'id': 1237402605, 'number': 11467, 'closed': datetime.datetime(2023, 2, 11, 0, 38, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 10, 23, 27, 7, tzinfo=datetime.timezone.utc), 'time_taken': 4278.0, 'time_delta': '1:11:18', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1232594132, 'number': 11459, 'closed': datetime.datetime(2023, 2, 8, 13, 42, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 7, 21, 11, 3, tzinfo=datetime.timezone.utc), 'time_taken': 59504.0, 'time_delta': '16:31:44', 'additions': 7, 'deletions': 15, 'state': 'closed'}, {'id': 1227378270, 'number': 11446, 'closed': datetime.datetime(2023, 2, 6, 17, 54, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 2, 23, 51, 45, tzinfo=datetime.timezone.utc), 'time_taken': 324188.0, 'time_delta': '3 days, 18:03:08', 'additions': 218, 'deletions': 8, 'state': 'closed'}, {'id': 1223693284, 'number': 11440, 'closed': datetime.datetime(2023, 2, 1, 6, 53, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 31, 17, 55, 55, tzinfo=datetime.timezone.utc), 'time_taken': 46659.0, 'time_delta': '12:57:39', 'additions': 15, 'deletions': 2, 'state': 'closed'}, {'id': 1222258751, 'number': 11437, 'closed': datetime.datetime(2023, 2, 7, 3, 28, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 30, 20, 20, 52, tzinfo=datetime.timezone.utc), 'time_taken': 630439.0, 'time_delta': '7 days, 7:07:19', 'additions': 272, 'deletions': 8, 'state': 'closed'}, {'id': 1222074754, 'number': 11436, 'closed': datetime.datetime(2023, 1, 30, 22, 30, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 30, 18, 12, 31, tzinfo=datetime.timezone.utc), 'time_taken': 15470.0, 'time_delta': '4:17:50', 'additions': 16, 'deletions': 5, 'state': 'closed'}, {'id': 1200648297, 'number': 11421, 'closed': datetime.datetime(2023, 1, 18, 17, 0, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 17, 18, 0, 38, tzinfo=datetime.timezone.utc), 'time_taken': 82797.0, 'time_delta': '22:59:57', 'additions': 38, 'deletions': 9, 'state': 'closed'}, {'id': 1182956219, 'number': 11402, 'closed': datetime.datetime(2023, 1, 5, 19, 7, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 2, 23, 17, 16, tzinfo=datetime.timezone.utc), 'time_taken': 244201.0, 'time_delta': '2 days, 19:50:01', 'additions': 71, 'deletions': 2, 'state': 'closed'}, {'id': 1182866338, 'number': 11401, 'closed': datetime.datetime(2023, 1, 3, 15, 45, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 2, 20, 8, 37, tzinfo=datetime.timezone.utc), 'time_taken': 70609.0, 'time_delta': '19:36:49', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 1154977670, 'number': 11361, 'closed': datetime.datetime(2022, 12, 21, 20, 55, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 8, 23, 29, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1113965.0, 'time_delta': '12 days, 21:26:05', 'additions': 9, 'deletions': 3, 'state': 'closed'}, {'id': 1143575884, 'number': 11352, 'closed': datetime.datetime(2023, 4, 3, 18, 33, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 2, 18, 5, 17, tzinfo=datetime.timezone.utc), 'time_taken': 10542493.0, 'time_delta': '122 days, 0:28:13', 'additions': 1662, 'deletions': 43, 'state': 'closed'}, {'id': 1142795153, 'number': 11350, 'closed': datetime.datetime(2022, 12, 2, 12, 20, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 2, 6, 14, 29, tzinfo=datetime.timezone.utc), 'time_taken': 21988.0, 'time_delta': '6:06:28', 'additions': 70, 'deletions': 1369, 'state': 'closed'}, {'id': 1116593987, 'number': 11313, 'closed': datetime.datetime(2022, 11, 15, 5, 24, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 9, 19, 49, 30, tzinfo=datetime.timezone.utc), 'time_taken': 466479.0, 'time_delta': '5 days, 9:34:39', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1088201789, 'number': 11251, 'closed': datetime.datetime(2022, 10, 15, 18, 25, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 15, 17, 11, tzinfo=datetime.timezone.utc), 'time_taken': 4443.0, 'time_delta': '1:14:03', 'additions': 11, 'deletions': 10, 'state': 'closed'}, {'id': 1064636095, 'number': 11197, 'closed': datetime.datetime(2022, 9, 23, 4, 37, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 22, 20, 43, 20, tzinfo=datetime.timezone.utc), 'time_taken': 28439.0, 'time_delta': '7:53:59', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 1040306907, 'number': 11116, 'closed': datetime.datetime(2022, 9, 3, 9, 10, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 23, 55, 45, tzinfo=datetime.timezone.utc), 'time_taken': 378910.0, 'time_delta': '4 days, 9:15:10', 'additions': 85, 'deletions': 61, 'state': 'closed'}, {'id': 1037382673, 'number': 11096, 'closed': datetime.datetime(2022, 10, 24, 9, 37, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 1, 0, 23, tzinfo=datetime.timezone.utc), 'time_taken': 5128602.0, 'time_delta': '59 days, 8:36:42', 'additions': 268, 'deletions': 9, 'state': 'closed'}, {'id': 1037371841, 'number': 11095, 'closed': datetime.datetime(2022, 8, 29, 15, 5, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 0, 38, 32, tzinfo=datetime.timezone.utc), 'time_taken': 311198.0, 'time_delta': '3 days, 14:26:38', 'additions': 149, 'deletions': 7, 'state': 'closed'}, {'id': 1027898255, 'number': 11038, 'closed': datetime.datetime(2022, 8, 17, 20, 55, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 16, 17, 32, 59, tzinfo=datetime.timezone.utc), 'time_taken': 98534.0, 'time_delta': '1 day, 3:22:14', 'additions': 28, 'deletions': 8, 'state': 'closed'}, {'id': 1021962558, 'number': 11020, 'closed': datetime.datetime(2022, 8, 15, 16, 24, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 9, 20, 43, 17, tzinfo=datetime.timezone.utc), 'time_taken': 502847.0, 'time_delta': '5 days, 19:40:47', 'additions': 20, 'deletions': 14, 'state': 'closed'}, {'id': 1020452027, 'number': 11016, 'closed': datetime.datetime(2022, 8, 8, 19, 0, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 8, 15, 37, 8, tzinfo=datetime.timezone.utc), 'time_taken': 12209.0, 'time_delta': '3:23:29', 'additions': 3, 'deletions': 19, 'state': 'closed'}, {'id': 1015664611, 'number': 10999, 'closed': datetime.datetime(2022, 8, 29, 17, 13, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 22, 39, 59, tzinfo=datetime.timezone.utc), 'time_taken': 2313235.0, 'time_delta': '26 days, 18:33:55', 'additions': 32, 'deletions': 0, 'state': 'closed'}, {'id': 1014187995, 'number': 10986, 'closed': datetime.datetime(2022, 8, 16, 1, 26, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 1, 18, 14, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1235478.0, 'time_delta': '14 days, 7:11:18', 'additions': 73, 'deletions': 5, 'state': 'closed'}, {'id': 1012486480, 'number': 10980, 'closed': datetime.datetime(2022, 8, 23, 17, 14, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 1, 48, 34, tzinfo=datetime.timezone.utc), 'time_taken': 2129162.0, 'time_delta': '24 days, 15:26:02', 'additions': 26, 'deletions': 10, 'state': 'closed'}, {'id': 1012466924, 'number': 10979, 'closed': datetime.datetime(2022, 8, 2, 19, 37, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 0, 5, 38, tzinfo=datetime.timezone.utc), 'time_taken': 329526.0, 'time_delta': '3 days, 19:32:06', 'additions': 12, 'deletions': 2, 'state': 'closed'}, {'id': 1012461909, 'number': 10978, 'closed': datetime.datetime(2022, 8, 2, 14, 28, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 29, 23, 45, 42, tzinfo=datetime.timezone.utc), 'time_taken': 312173.0, 'time_delta': '3 days, 14:42:53', 'additions': 29, 'deletions': 1, 'state': 'closed'}, {'id': 1011135552, 'number': 10972, 'closed': datetime.datetime(2022, 7, 28, 19, 2, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 28, 18, 0, 18, tzinfo=datetime.timezone.utc), 'time_taken': 3707.0, 'time_delta': '1:01:47', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 1004545938, 'number': 10945, 'closed': datetime.datetime(2022, 7, 27, 15, 9, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 21, 18, 35, 13, tzinfo=datetime.timezone.utc), 'time_taken': 506055.0, 'time_delta': '5 days, 20:34:15', 'additions': 250, 'deletions': 330, 'state': 'closed'}, {'id': 1003075867, 'number': 10940, 'closed': datetime.datetime(2022, 7, 21, 14, 26, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 20, 22, 31, 5, tzinfo=datetime.timezone.utc), 'time_taken': 57307.0, 'time_delta': '15:55:07', 'additions': 117, 'deletions': 91, 'state': 'closed'}, {'id': 1001007866, 'number': 10935, 'closed': datetime.datetime(2022, 7, 19, 21, 12, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 16, 33, 37, tzinfo=datetime.timezone.utc), 'time_taken': 16750.0, 'time_delta': '4:39:10', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 994888612, 'number': 10920, 'closed': datetime.datetime(2022, 12, 2, 1, 32, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 23, 59, 18, tzinfo=datetime.timezone.utc), 'time_taken': 12274378.0, 'time_delta': '142 days, 1:32:58', 'additions': 1369, 'deletions': 70, 'state': 'closed'}, {'id': 994853521, 'number': 10917, 'closed': datetime.datetime(2022, 7, 13, 12, 52, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 12, 22, 43, 25, tzinfo=datetime.timezone.utc), 'time_taken': 50930.0, 'time_delta': '14:08:50', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 993683872, 'number': 10915, 'closed': datetime.datetime(2022, 7, 12, 15, 23, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 11, 23, 59, 11, tzinfo=datetime.timezone.utc), 'time_taken': 55445.0, 'time_delta': '15:24:05', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 992068757, 'number': 10913, 'closed': datetime.datetime(2022, 8, 4, 17, 39, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 22, 5, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2316880.0, 'time_delta': '26 days, 19:34:40', 'additions': 2043, 'deletions': 68, 'state': 'closed'}, {'id': 978739063, 'number': 10826, 'closed': datetime.datetime(2022, 7, 8, 17, 55, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 24, 21, 26, 8, tzinfo=datetime.timezone.utc), 'time_taken': 1196952.0, 'time_delta': '13 days, 20:29:12', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 978622259, 'number': 10825, 'closed': datetime.datetime(2022, 6, 24, 21, 59, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 24, 18, 49, 55, tzinfo=datetime.timezone.utc), 'time_taken': 11391.0, 'time_delta': '3:09:51', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 978602446, 'number': 10824, 'closed': datetime.datetime(2022, 6, 24, 21, 54, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 24, 18, 23, 17, tzinfo=datetime.timezone.utc), 'time_taken': 12691.0, 'time_delta': '3:31:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 975953010, 'number': 10803, 'closed': datetime.datetime(2022, 7, 8, 18, 38, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 22, 22, 50, tzinfo=datetime.timezone.utc), 'time_taken': 1368919.0, 'time_delta': '15 days, 20:15:19', 'additions': 1940, 'deletions': 2113, 'state': 'closed'}, {'id': 975495238, 'number': 10802, 'closed': datetime.datetime(2022, 6, 24, 14, 8, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 22, 17, 13, 38, tzinfo=datetime.timezone.utc), 'time_taken': 161711.0, 'time_delta': '1 day, 20:55:11', 'additions': 119, 'deletions': 66, 'state': 'closed'}, {'id': 974167199, 'number': 10800, 'closed': datetime.datetime(2022, 6, 22, 14, 38, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 21, 21, 17, 38, tzinfo=datetime.timezone.utc), 'time_taken': 62477.0, 'time_delta': '17:21:17', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 970857600, 'number': 10778, 'closed': datetime.datetime(2022, 6, 17, 19, 12, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 17, 17, 33, 12, tzinfo=datetime.timezone.utc), 'time_taken': 5955.0, 'time_delta': '1:39:15', 'additions': 9, 'deletions': 0, 'state': 'closed'}, {'id': 968733844, 'number': 10777, 'closed': datetime.datetime(2022, 6, 24, 22, 21, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 15, 23, 47, 34, tzinfo=datetime.timezone.utc), 'time_taken': 772458.0, 'time_delta': '8 days, 22:34:18', 'additions': 647, 'deletions': 473, 'state': 'closed'}, {'id': 967501908, 'number': 10765, 'closed': datetime.datetime(2022, 6, 15, 18, 32, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 23, 25, 5, tzinfo=datetime.timezone.utc), 'time_taken': 68816.0, 'time_delta': '19:06:56', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 952524351, 'number': 10692, 'closed': datetime.datetime(2022, 6, 1, 15, 19, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 31, 23, 34, 20, tzinfo=datetime.timezone.utc), 'time_taken': 56683.0, 'time_delta': '15:44:43', 'additions': 21, 'deletions': 48, 'state': 'closed'}, {'id': 944744214, 'number': 10667, 'closed': datetime.datetime(2022, 5, 23, 19, 57, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 23, 17, 46, 8, tzinfo=datetime.timezone.utc), 'time_taken': 7868.0, 'time_delta': '2:11:08', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 943317505, 'number': 10661, 'closed': datetime.datetime(2022, 5, 23, 10, 4, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 21, 1, 25, 40, tzinfo=datetime.timezone.utc), 'time_taken': 203927.0, 'time_delta': '2 days, 8:38:47', 'additions': 66, 'deletions': 9, 'state': 'closed'}, {'id': 934131511, 'number': 10626, 'closed': datetime.datetime(2022, 5, 12, 13, 30, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 11, 20, 44, 39, tzinfo=datetime.timezone.utc), 'time_taken': 60372.0, 'time_delta': '16:46:12', 'additions': 4, 'deletions': 3, 'state': 'closed'}, {'id': 931744873, 'number': 10617, 'closed': datetime.datetime(2022, 5, 11, 20, 2, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 9, 23, 12, 18, tzinfo=datetime.timezone.utc), 'time_taken': 161393.0, 'time_delta': '1 day, 20:49:53', 'additions': 151, 'deletions': 86, 'state': 'closed'}, {'id': 931609959, 'number': 10616, 'closed': datetime.datetime(2022, 5, 10, 6, 26, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 9, 20, 22, 54, tzinfo=datetime.timezone.utc), 'time_taken': 36213.0, 'time_delta': '10:03:33', 'additions': 18, 'deletions': 0, 'state': 'closed'}, {'id': 926030980, 'number': 10587, 'closed': datetime.datetime(2022, 5, 4, 8, 7, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 2, 22, 33, 45, tzinfo=datetime.timezone.utc), 'time_taken': 120854.0, 'time_delta': '1 day, 9:34:14', 'additions': 206, 'deletions': 12, 'state': 'closed'}, {'id': 925785634, 'number': 10586, 'closed': datetime.datetime(2022, 5, 3, 12, 13, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 2, 17, 36, 39, tzinfo=datetime.timezone.utc), 'time_taken': 66987.0, 'time_delta': '18:36:27', 'additions': 19, 'deletions': 3, 'state': 'closed'}, {'id': 925749697, 'number': 10584, 'closed': datetime.datetime(2022, 5, 3, 16, 41, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 2, 16, 51, 57, tzinfo=datetime.timezone.utc), 'time_taken': 85766.0, 'time_delta': '23:49:26', 'additions': 7, 'deletions': 6, 'state': 'closed'}, {'id': 919983220, 'number': 10571, 'closed': datetime.datetime(2022, 4, 30, 9, 2, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 26, 23, 31, 28, tzinfo=datetime.timezone.utc), 'time_taken': 293460.0, 'time_delta': '3 days, 9:31:00', 'additions': 620, 'deletions': 21, 'state': 'closed'}, {'id': 916601652, 'number': 10558, 'closed': datetime.datetime(2022, 4, 23, 12, 18, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 22, 16, 3, 46, tzinfo=datetime.timezone.utc), 'time_taken': 72900.0, 'time_delta': '20:15:00', 'additions': 6, 'deletions': 18, 'state': 'closed'}, {'id': 915911205, 'number': 10557, 'closed': datetime.datetime(2022, 4, 22, 14, 44, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 22, 1, 4, 14, tzinfo=datetime.timezone.utc), 'time_taken': 49225.0, 'time_delta': '13:40:25', 'additions': 105, 'deletions': 33, 'state': 'closed'}, {'id': 915849685, 'number': 10556, 'closed': datetime.datetime(2022, 4, 22, 4, 18, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 21, 22, 52, 29, tzinfo=datetime.timezone.utc), 'time_taken': 19566.0, 'time_delta': '5:26:06', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 911138885, 'number': 10534, 'closed': datetime.datetime(2022, 4, 21, 16, 27, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 15, 22, 36, 35, tzinfo=datetime.timezone.utc), 'time_taken': 496230.0, 'time_delta': '5 days, 17:50:30', 'additions': 263, 'deletions': 9, 'state': 'closed'}, {'id': 909456208, 'number': 10525, 'closed': datetime.datetime(2022, 4, 14, 13, 49, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 14, 0, 14, 26, tzinfo=datetime.timezone.utc), 'time_taken': 48903.0, 'time_delta': '13:35:03', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 899486473, 'number': 10493, 'closed': datetime.datetime(2022, 4, 5, 6, 18, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 21, 5, 27, tzinfo=datetime.timezone.utc), 'time_taken': 33195.0, 'time_delta': '9:13:15', 'additions': 14, 'deletions': 20, 'state': 'closed'}, {'id': 882736340, 'number': 10443, 'closed': datetime.datetime(2022, 3, 17, 21, 22, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 17, 18, 19, 19, tzinfo=datetime.timezone.utc), 'time_taken': 10978.0, 'time_delta': '3:02:58', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 882657693, 'number': 10441, 'closed': datetime.datetime(2022, 3, 17, 17, 21, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 17, 17, 0, 38, tzinfo=datetime.timezone.utc), 'time_taken': 1254.0, 'time_delta': '0:20:54', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 881724797, 'number': 10439, 'closed': datetime.datetime(2022, 3, 16, 22, 16, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 19, 27, 19, tzinfo=datetime.timezone.utc), 'time_taken': 10141.0, 'time_delta': '2:49:01', 'additions': 38, 'deletions': 36, 'state': 'closed'}, {'id': 877709142, 'number': 10432, 'closed': datetime.datetime(2022, 3, 11, 21, 17, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 11, 18, 31, 53, tzinfo=datetime.timezone.utc), 'time_taken': 9908.0, 'time_delta': '2:45:08', 'additions': 141, 'deletions': 134, 'state': 'closed'}, {'id': 870889129, 'number': 10409, 'closed': datetime.datetime(2022, 3, 3, 18, 56, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 3, 18, 21, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2096.0, 'time_delta': '0:34:56', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 868530365, 'number': 10407, 'closed': datetime.datetime(2022, 3, 2, 21, 56, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 1, 3, 4, tzinfo=datetime.timezone.utc), 'time_taken': 75201.0, 'time_delta': '20:53:21', 'additions': 3363, 'deletions': 2953, 'state': 'closed'}, {'id': 865338712, 'number': 10401, 'closed': datetime.datetime(2022, 3, 1, 16, 30, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 26, 23, 50, 21, tzinfo=datetime.timezone.utc), 'time_taken': 232819.0, 'time_delta': '2 days, 16:40:19', 'additions': 254, 'deletions': 92, 'state': 'closed'}, {'id': 863065484, 'number': 10395, 'closed': datetime.datetime(2022, 2, 28, 16, 10, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 25, 3, 46, 22, tzinfo=datetime.timezone.utc), 'time_taken': 303841.0, 'time_delta': '3 days, 12:24:01', 'additions': 373, 'deletions': 37, 'state': 'closed'}, {'id': 862926221, 'number': 10393, 'closed': datetime.datetime(2022, 2, 25, 17, 0, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 24, 22, 42, 34, tzinfo=datetime.timezone.utc), 'time_taken': 65886.0, 'time_delta': '18:18:06', 'additions': 33, 'deletions': 21, 'state': 'closed'}, {'id': 860956686, 'number': 10384, 'closed': datetime.datetime(2022, 2, 23, 14, 24, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 23, 1, 2, 39, tzinfo=datetime.timezone.utc), 'time_taken': 48137.0, 'time_delta': '13:22:17', 'additions': 7, 'deletions': 4, 'state': 'closed'}, {'id': 860674876, 'number': 10381, 'closed': datetime.datetime(2022, 2, 22, 20, 43, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 22, 17, 40, 41, tzinfo=datetime.timezone.utc), 'time_taken': 10971.0, 'time_delta': '3:02:51', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 860026125, 'number': 10375, 'closed': datetime.datetime(2022, 2, 22, 15, 16, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 22, 4, 32, 56, tzinfo=datetime.timezone.utc), 'time_taken': 38628.0, 'time_delta': '10:43:48', 'additions': 43, 'deletions': 57, 'state': 'closed'}, {'id': 859786268, 'number': 10373, 'closed': datetime.datetime(2022, 2, 22, 15, 44, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 21, 19, 32, 26, tzinfo=datetime.timezone.utc), 'time_taken': 72734.0, 'time_delta': '20:12:14', 'additions': 214, 'deletions': 58, 'state': 'closed'}, {'id': 859692801, 'number': 10370, 'closed': datetime.datetime(2022, 2, 21, 23, 45, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 21, 17, 14, 8, tzinfo=datetime.timezone.utc), 'time_taken': 23459.0, 'time_delta': '6:30:59', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 852397980, 'number': 10341, 'closed': datetime.datetime(2022, 2, 14, 18, 48, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 14, 18, 46, 53, tzinfo=datetime.timezone.utc), 'time_taken': 114.0, 'time_delta': '0:01:54', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 852393592, 'number': 10340, 'closed': datetime.datetime(2022, 2, 14, 18, 41, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 14, 18, 41, 12, tzinfo=datetime.timezone.utc), 'time_taken': 32.0, 'time_delta': '0:00:32', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 852369776, 'number': 10338, 'closed': datetime.datetime(2022, 2, 14, 18, 18, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 14, 18, 14, 54, tzinfo=datetime.timezone.utc), 'time_taken': 194.0, 'time_delta': '0:03:14', 'additions': 3, 'deletions': 1, 'state': 'closed'}, {'id': 852368662, 'number': 10337, 'closed': datetime.datetime(2022, 2, 14, 18, 14, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 14, 18, 13, 54, tzinfo=datetime.timezone.utc), 'time_taken': 22.0, 'time_delta': '0:00:22', 'additions': 259, 'deletions': 1, 'state': 'closed'}, {'id': 852249952, 'number': 10335, 'closed': datetime.datetime(2022, 2, 14, 17, 49, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 14, 16, 17, 21, tzinfo=datetime.timezone.utc), 'time_taken': 5547.0, 'time_delta': '1:32:27', 'additions': 19, 'deletions': 7, 'state': 'closed'}, {'id': 849151975, 'number': 10328, 'closed': datetime.datetime(2022, 2, 12, 16, 18, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 12, 16, 12, 3, tzinfo=datetime.timezone.utc), 'time_taken': 390.0, 'time_delta': '0:06:30', 'additions': 7, 'deletions': 7, 'state': 'closed'}, {'id': 848306983, 'number': 10326, 'closed': datetime.datetime(2022, 2, 12, 0, 18, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 12, 0, 1, 42, tzinfo=datetime.timezone.utc), 'time_taken': 997.0, 'time_delta': '0:16:37', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 846645290, 'number': 10322, 'closed': datetime.datetime(2022, 2, 11, 2, 55, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 11, 2, 53, 18, tzinfo=datetime.timezone.utc), 'time_taken': 142.0, 'time_delta': '0:02:22', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 843290597, 'number': 10313, 'closed': datetime.datetime(2022, 2, 9, 0, 47, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 8, 22, 13, 42, tzinfo=datetime.timezone.utc), 'time_taken': 9221.0, 'time_delta': '2:33:41', 'additions': 10, 'deletions': 5, 'state': 'closed'}, {'id': 839887765, 'number': 10298, 'closed': datetime.datetime(2022, 2, 9, 0, 37, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 4, 3, 22, 46, tzinfo=datetime.timezone.utc), 'time_taken': 422074.0, 'time_delta': '4 days, 21:14:34', 'additions': 103, 'deletions': 23, 'state': 'closed'}, {'id': 826836058, 'number': 10226, 'closed': datetime.datetime(2022, 1, 20, 15, 9, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 19, 19, 36, 16, tzinfo=datetime.timezone.utc), 'time_taken': 70397.0, 'time_delta': '19:33:17', 'additions': 20, 'deletions': 12, 'state': 'closed'}, {'id': 824118667, 'number': 10212, 'closed': datetime.datetime(2022, 1, 19, 16, 20, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 17, 3, 6, 32, tzinfo=datetime.timezone.utc), 'time_taken': 220443.0, 'time_delta': '2 days, 13:14:03', 'additions': 127, 'deletions': 42, 'state': 'closed'}, {'id': 822234358, 'number': 10202, 'closed': datetime.datetime(2022, 1, 15, 13, 37, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 14, 7, 27, 58, tzinfo=datetime.timezone.utc), 'time_taken': 108551.0, 'time_delta': '1 day, 6:09:11', 'additions': 33, 'deletions': 9, 'state': 'closed'}, {'id': 816090886, 'number': 10185, 'closed': datetime.datetime(2022, 1, 8, 12, 29, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 7, 4, 53, 36, tzinfo=datetime.timezone.utc), 'time_taken': 113768.0, 'time_delta': '1 day, 7:36:08', 'additions': 30, 'deletions': 1, 'state': 'closed'}, {'id': 814400535, 'number': 10179, 'closed': datetime.datetime(2022, 1, 5, 7, 40, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 5, 5, 15, 9, tzinfo=datetime.timezone.utc), 'time_taken': 8733.0, 'time_delta': '2:25:33', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 806855213, 'number': 10159, 'closed': datetime.datetime(2021, 12, 20, 18, 55, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 20, 17, 32, 20, tzinfo=datetime.timezone.utc), 'time_taken': 5002.0, 'time_delta': '1:23:22', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 806320691, 'number': 10155, 'closed': datetime.datetime(2021, 12, 20, 22, 45, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 20, 6, 31, 24, tzinfo=datetime.timezone.utc), 'time_taken': 58474.0, 'time_delta': '16:14:34', 'additions': 55, 'deletions': 29, 'state': 'closed'}, {'id': 806300140, 'number': 10154, 'closed': datetime.datetime(2021, 12, 20, 23, 56, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 20, 5, 57, 48, tzinfo=datetime.timezone.utc), 'time_taken': 64717.0, 'time_delta': '17:58:37', 'additions': 68, 'deletions': 10, 'state': 'closed'}, {'id': 785282801, 'number': 10024, 'closed': datetime.datetime(2021, 11, 24, 21, 37, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 20, 21, 55, 30, tzinfo=datetime.timezone.utc), 'time_taken': 344549.0, 'time_delta': '3 days, 23:42:29', 'additions': 40, 'deletions': 9, 'state': 'closed'}, {'id': 785111138, 'number': 10021, 'closed': datetime.datetime(2021, 11, 23, 16, 14, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 20, 0, 36, 16, tzinfo=datetime.timezone.utc), 'time_taken': 315489.0, 'time_delta': '3 days, 15:38:09', 'additions': 8, 'deletions': 1, 'state': 'closed'}, {'id': 777780652, 'number': 9991, 'closed': datetime.datetime(2021, 11, 11, 17, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 10, 16, 26, 57, tzinfo=datetime.timezone.utc), 'time_taken': 91083.0, 'time_delta': '1 day, 1:18:03', 'additions': 27, 'deletions': 36, 'state': 'closed'}, {'id': 777000346, 'number': 9987, 'closed': datetime.datetime(2021, 11, 10, 17, 21, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 9, 21, 21, 18, tzinfo=datetime.timezone.utc), 'time_taken': 72011.0, 'time_delta': '20:00:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 776994507, 'number': 9986, 'closed': datetime.datetime(2021, 11, 10, 17, 25, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 9, 21, 12, 12, tzinfo=datetime.timezone.utc), 'time_taken': 72790.0, 'time_delta': '20:13:10', 'additions': 7, 'deletions': 5, 'state': 'closed'}, {'id': 775934949, 'number': 9981, 'closed': datetime.datetime(2021, 11, 9, 12, 57, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 8, 20, 30, 39, tzinfo=datetime.timezone.utc), 'time_taken': 59226.0, 'time_delta': '16:27:06', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 775888204, 'number': 9980, 'closed': datetime.datetime(2021, 11, 9, 12, 56, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 8, 19, 25, 41, tzinfo=datetime.timezone.utc), 'time_taken': 63075.0, 'time_delta': '17:31:15', 'additions': 39, 'deletions': 24, 'state': 'closed'}, {'id': 775870165, 'number': 9978, 'closed': datetime.datetime(2021, 11, 8, 21, 44, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 8, 19, 2, 40, tzinfo=datetime.timezone.utc), 'time_taken': 9690.0, 'time_delta': '2:41:30', 'additions': 29, 'deletions': 2, 'state': 'closed'}, {'id': 772950235, 'number': 9952, 'closed': datetime.datetime(2021, 11, 5, 14, 15, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 4, 1, 26, 16, tzinfo=datetime.timezone.utc), 'time_taken': 132566.0, 'time_delta': '1 day, 12:49:26', 'additions': 59, 'deletions': 4, 'state': 'closed'}, {'id': 772884263, 'number': 9950, 'closed': datetime.datetime(2021, 11, 5, 13, 36, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 3, 22, 49, 29, tzinfo=datetime.timezone.utc), 'time_taken': 139628.0, 'time_delta': '1 day, 14:47:08', 'additions': 6, 'deletions': 6, 'state': 'closed'}, {'id': 771121053, 'number': 9940, 'closed': datetime.datetime(2021, 11, 2, 14, 41, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 2, 6, 25, 11, tzinfo=datetime.timezone.utc), 'time_taken': 29791.0, 'time_delta': '8:16:31', 'additions': 9, 'deletions': 5, 'state': 'closed'}, {'id': 767768541, 'number': 9911, 'closed': datetime.datetime(2021, 10, 28, 12, 31, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 27, 20, 34, 22, tzinfo=datetime.timezone.utc), 'time_taken': 57408.0, 'time_delta': '15:56:48', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 766931669, 'number': 9907, 'closed': datetime.datetime(2021, 11, 1, 20, 2, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 27, 0, 8, 45, tzinfo=datetime.timezone.utc), 'time_taken': 503607.0, 'time_delta': '5 days, 19:53:27', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 763475469, 'number': 9884, 'closed': datetime.datetime(2021, 10, 21, 17, 17, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 21, 17, 5, 30, tzinfo=datetime.timezone.utc), 'time_taken': 737.0, 'time_delta': '0:12:17', 'additions': 197, 'deletions': 1, 'state': 'closed'}, {'id': 762732595, 'number': 9882, 'closed': datetime.datetime(2021, 10, 21, 16, 21, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 20, 21, 43, 8, tzinfo=datetime.timezone.utc), 'time_taken': 67120.0, 'time_delta': '18:38:40', 'additions': 226, 'deletions': 1, 'state': 'closed'}, {'id': 747836967, 'number': 9800, 'closed': datetime.datetime(2021, 10, 5, 14, 22, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 1, 18, 4, 43, tzinfo=datetime.timezone.utc), 'time_taken': 332290.0, 'time_delta': '3 days, 20:18:10', 'additions': 227, 'deletions': 3, 'state': 'closed'}, {'id': 743805109, 'number': 9785, 'closed': datetime.datetime(2021, 10, 7, 21, 36, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 27, 20, 25, 44, tzinfo=datetime.timezone.utc), 'time_taken': 868275.0, 'time_delta': '10 days, 1:11:15', 'additions': 210, 'deletions': 1, 'state': 'closed'}, {'id': 743741946, 'number': 9784, 'closed': datetime.datetime(2021, 9, 29, 2, 40, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 27, 19, 4, 38, tzinfo=datetime.timezone.utc), 'time_taken': 113776.0, 'time_delta': '1 day, 7:36:16', 'additions': 403, 'deletions': 118, 'state': 'closed'}, {'id': 740577890, 'number': 9770, 'closed': datetime.datetime(2021, 9, 22, 16, 52, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 22, 15, 22, 47, tzinfo=datetime.timezone.utc), 'time_taken': 5364.0, 'time_delta': '1:29:24', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 733223176, 'number': 9732, 'closed': datetime.datetime(2021, 9, 14, 14, 46, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 14, 0, 44, 47, tzinfo=datetime.timezone.utc), 'time_taken': 50477.0, 'time_delta': '14:01:17', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 725100598, 'number': 9711, 'closed': datetime.datetime(2021, 9, 2, 13, 45, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 1, 23, 40, 59, tzinfo=datetime.timezone.utc), 'time_taken': 50678.0, 'time_delta': '14:04:38', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 720804643, 'number': 9702, 'closed': datetime.datetime(2021, 8, 30, 23, 11, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 26, 20, 1, 25, tzinfo=datetime.timezone.utc), 'time_taken': 356992.0, 'time_delta': '4 days, 3:09:52', 'additions': 209, 'deletions': 19, 'state': 'closed'}, {'id': 717499164, 'number': 9688, 'closed': datetime.datetime(2021, 8, 24, 20, 7, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 23, 5, 0, 20, tzinfo=datetime.timezone.utc), 'time_taken': 140848.0, 'time_delta': '1 day, 15:07:28', 'additions': 187, 'deletions': 41, 'state': 'closed'}, {'id': 717051755, 'number': 9684, 'closed': datetime.datetime(2021, 8, 21, 9, 47, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 23, 53, 26, tzinfo=datetime.timezone.utc), 'time_taken': 35656.0, 'time_delta': '9:54:16', 'additions': 34, 'deletions': 2, 'state': 'closed'}, {'id': 716916195, 'number': 9682, 'closed': datetime.datetime(2021, 8, 20, 20, 25, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 18, 14, 7, tzinfo=datetime.timezone.utc), 'time_taken': 7876.0, 'time_delta': '2:11:16', 'additions': 189, 'deletions': 75, 'state': 'closed'}, {'id': 703731611, 'number': 9644, 'closed': datetime.datetime(2021, 8, 4, 21, 35, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 16, 59, 52, tzinfo=datetime.timezone.utc), 'time_taken': 16527.0, 'time_delta': '4:35:27', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 701755309, 'number': 9636, 'closed': datetime.datetime(2021, 8, 2, 21, 52, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 20, 18, 52, tzinfo=datetime.timezone.utc), 'time_taken': 5638.0, 'time_delta': '1:33:58', 'additions': 19, 'deletions': 3, 'state': 'closed'}, {'id': 700556673, 'number': 9630, 'closed': datetime.datetime(2021, 7, 31, 15, 25, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 20, 55, 51, tzinfo=datetime.timezone.utc), 'time_taken': 66566.0, 'time_delta': '18:29:26', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 699045909, 'number': 9626, 'closed': datetime.datetime(2021, 9, 16, 7, 9, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 22, 8, 17, tzinfo=datetime.timezone.utc), 'time_taken': 4266099.0, 'time_delta': '49 days, 9:01:39', 'additions': 113, 'deletions': 0, 'state': 'closed'}, {'id': 698969243, 'number': 9625, 'closed': datetime.datetime(2021, 7, 29, 12, 34, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 19, 47, 5, tzinfo=datetime.timezone.utc), 'time_taken': 60421.0, 'time_delta': '16:47:01', 'additions': 97, 'deletions': 86, 'state': 'closed'}, {'id': 698874959, 'number': 9622, 'closed': datetime.datetime(2021, 7, 28, 20, 53, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 28, 17, 21, 55, tzinfo=datetime.timezone.utc), 'time_taken': 12686.0, 'time_delta': '3:31:26', 'additions': 33, 'deletions': 30, 'state': 'closed'}, {'id': 698183946, 'number': 9618, 'closed': datetime.datetime(2021, 7, 29, 23, 10, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 20, 58, 22, tzinfo=datetime.timezone.utc), 'time_taken': 180757.0, 'time_delta': '2 days, 2:12:37', 'additions': 132, 'deletions': 69, 'state': 'closed'}, {'id': 698126964, 'number': 9617, 'closed': datetime.datetime(2021, 7, 27, 20, 23, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 19, 18, 23, tzinfo=datetime.timezone.utc), 'time_taken': 3935.0, 'time_delta': '1:05:35', 'additions': 17, 'deletions': 19, 'state': 'closed'}, {'id': 694717864, 'number': 9601, 'closed': datetime.datetime(2021, 7, 22, 17, 40, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 21, 22, 6, tzinfo=datetime.timezone.utc), 'time_taken': 73093.0, 'time_delta': '20:18:13', 'additions': 78, 'deletions': 95, 'state': 'closed'}, {'id': 694589041, 'number': 9599, 'closed': datetime.datetime(2021, 7, 21, 19, 8, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 18, 9, 35, tzinfo=datetime.timezone.utc), 'time_taken': 3528.0, 'time_delta': '0:58:48', 'additions': 24, 'deletions': 19, 'state': 'closed'}, {'id': 693686151, 'number': 9598, 'closed': datetime.datetime(2021, 7, 21, 14, 46, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 18, 13, 51, tzinfo=datetime.timezone.utc), 'time_taken': 73988.0, 'time_delta': '20:33:08', 'additions': 141, 'deletions': 83, 'state': 'closed'}, {'id': 692211177, 'number': 9586, 'closed': datetime.datetime(2021, 9, 17, 16, 52, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 2, 14, 22, tzinfo=datetime.timezone.utc), 'time_taken': 5236675.0, 'time_delta': '60 days, 14:37:55', 'additions': 1273, 'deletions': 91, 'state': 'closed'}, {'id': 692144818, 'number': 9585, 'closed': datetime.datetime(2021, 8, 19, 21, 9, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 18, 20, 27, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2767264.0, 'time_delta': '32 days, 0:41:04', 'additions': 896, 'deletions': 655, 'state': 'closed'}, {'id': 691699308, 'number': 9579, 'closed': datetime.datetime(2021, 7, 19, 15, 48, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 19, 26, 40, tzinfo=datetime.timezone.utc), 'time_taken': 246112.0, 'time_delta': '2 days, 20:21:52', 'additions': 90, 'deletions': 93, 'state': 'closed'}, {'id': 691118248, 'number': 9574, 'closed': datetime.datetime(2021, 7, 16, 22, 7, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 0, 47, 47, tzinfo=datetime.timezone.utc), 'time_taken': 76800.0, 'time_delta': '21:20:00', 'additions': 185, 'deletions': 243, 'state': 'closed'}, {'id': 686453633, 'number': 9545, 'closed': datetime.datetime(2021, 7, 19, 13, 43, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 3, 6, 19, tzinfo=datetime.timezone.utc), 'time_taken': 902247.0, 'time_delta': '10 days, 10:37:27', 'additions': 356, 'deletions': 85, 'state': 'closed'}, {'id': 686435649, 'number': 9544, 'closed': datetime.datetime(2021, 7, 16, 22, 16, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 2, 8, 27, tzinfo=datetime.timezone.utc), 'time_taken': 677257.0, 'time_delta': '7 days, 20:07:37', 'additions': 394, 'deletions': 110, 'state': 'closed'}, {'id': 686174140, 'number': 9543, 'closed': datetime.datetime(2021, 7, 12, 13, 2, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 16, 46, 13, tzinfo=datetime.timezone.utc), 'time_taken': 332195.0, 'time_delta': '3 days, 20:16:35', 'additions': 710, 'deletions': 664, 'state': 'closed'}, {'id': 686050137, 'number': 9540, 'closed': datetime.datetime(2021, 7, 19, 22, 48, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 14, 7, 48, tzinfo=datetime.timezone.utc), 'time_taken': 981669.0, 'time_delta': '11 days, 8:41:09', 'additions': 248, 'deletions': 55, 'state': 'closed'}, {'id': 681297903, 'number': 9515, 'closed': datetime.datetime(2021, 7, 2, 16, 47, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 23, 23, 31, tzinfo=datetime.timezone.utc), 'time_taken': 149063.0, 'time_delta': '1 day, 17:24:23', 'additions': 490, 'deletions': 281, 'state': 'closed'}, {'id': 677385543, 'number': 9504, 'closed': datetime.datetime(2021, 6, 25, 9, 36, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 19, 33, 19, tzinfo=datetime.timezone.utc), 'time_taken': 50596.0, 'time_delta': '14:03:16', 'additions': 4, 'deletions': 1, 'state': 'closed'}, {'id': 671737971, 'number': 9484, 'closed': datetime.datetime(2021, 6, 24, 15, 0, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 17, 54, 26, tzinfo=datetime.timezone.utc), 'time_taken': 680741.0, 'time_delta': '7 days, 21:05:41', 'additions': 641, 'deletions': 13, 'state': 'closed'}, {'id': 670835920, 'number': 9480, 'closed': datetime.datetime(2021, 6, 17, 18, 2, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 23, 34, 31, tzinfo=datetime.timezone.utc), 'time_taken': 152892.0, 'time_delta': '1 day, 18:28:12', 'additions': 34, 'deletions': 34, 'state': 'closed'}, {'id': 670675533, 'number': 9478, 'closed': datetime.datetime(2021, 6, 16, 19, 2, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 15, 19, 11, 32, tzinfo=datetime.timezone.utc), 'time_taken': 85867.0, 'time_delta': '23:51:07', 'additions': 46, 'deletions': 13, 'state': 'closed'}, {'id': 618503637, 'number': 9320, 'closed': datetime.datetime(2021, 4, 20, 13, 38, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 19, 20, 49, 14, tzinfo=datetime.timezone.utc), 'time_taken': 60533.0, 'time_delta': '16:48:53', 'additions': 1, 'deletions': 5, 'state': 'closed'}, {'id': 601902945, 'number': 9201, 'closed': datetime.datetime(2021, 3, 28, 20, 56, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 26, 21, 6, 42, tzinfo=datetime.timezone.utc), 'time_taken': 172160.0, 'time_delta': '1 day, 23:49:20', 'additions': 20, 'deletions': 0, 'state': 'closed'}, {'id': 596716327, 'number': 9163, 'closed': datetime.datetime(2021, 3, 19, 18, 44, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 19, 16, 21, 15, tzinfo=datetime.timezone.utc), 'time_taken': 8604.0, 'time_delta': '2:23:24', 'additions': 16, 'deletions': 8, 'state': 'closed'}, {'id': 593397084, 'number': 9087, 'closed': datetime.datetime(2021, 3, 23, 13, 41, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 21, 14, 15, tzinfo=datetime.timezone.utc), 'time_taken': 664034.0, 'time_delta': '7 days, 16:27:14', 'additions': 182, 'deletions': 140, 'state': 'closed'}, {'id': 593221303, 'number': 9066, 'closed': datetime.datetime(2021, 3, 15, 20, 46, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 16, 33, 32, tzinfo=datetime.timezone.utc), 'time_taken': 15197.0, 'time_delta': '4:13:17', 'additions': 5, 'deletions': 9, 'state': 'closed'}, {'id': 542153510, 'number': 8670, 'closed': datetime.datetime(2020, 12, 18, 21, 20, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 12, 17, 21, 55, 6, tzinfo=datetime.timezone.utc), 'time_taken': 84308.0, 'time_delta': '23:25:08', 'additions': 227, 'deletions': 0, 'state': 'closed'}, {'id': 427599331, 'number': 7863, 'closed': datetime.datetime(2020, 6, 5, 18, 13, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 5, 32, 25, tzinfo=datetime.timezone.utc), 'time_taken': 132085.0, 'time_delta': '1 day, 12:41:25', 'additions': 158, 'deletions': 163, 'state': 'closed'}, {'id': 342870057, 'number': 7087, 'closed': datetime.datetime(2020, 9, 3, 21, 45, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 19, 20, 14, 40, tzinfo=datetime.timezone.utc), 'time_taken': 24975025.0, 'time_delta': '289 days, 1:30:25', 'additions': 184, 'deletions': 64, 'state': 'closed'}, {'id': 341822660, 'number': 7072, 'closed': datetime.datetime(2019, 11, 17, 16, 18, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 17, 5, 36, 14, tzinfo=datetime.timezone.utc), 'time_taken': 38539.0, 'time_delta': '10:42:19', 'additions': 145, 'deletions': 0, 'state': 'closed'}, {'id': 338727826, 'number': 7039, 'closed': datetime.datetime(2019, 11, 11, 18, 0, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 8, 15, 27, 50, tzinfo=datetime.timezone.utc), 'time_taken': 268365.0, 'time_delta': '3 days, 2:32:45', 'additions': 23, 'deletions': 3, 'state': 'closed'}, {'id': 338461222, 'number': 7036, 'closed': datetime.datetime(2019, 11, 9, 14, 17, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 11, 8, 5, 9, 31, tzinfo=datetime.timezone.utc), 'time_taken': 119271.0, 'time_delta': '1 day, 9:07:51', 'additions': 13, 'deletions': 2, 'state': 'closed'}, {'id': 324473534, 'number': 6910, 'closed': datetime.datetime(2019, 11, 13, 7, 19, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 10, 4, 1, 34, 27, tzinfo=datetime.timezone.utc), 'time_taken': 3476711.0, 'time_delta': '40 days, 5:45:11', 'additions': 594, 'deletions': 55, 'state': 'closed'}, {'id': 284688576, 'number': 6402, 'closed': datetime.datetime(2019, 9, 9, 7, 46, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 6, 3, 19, 0, 6, tzinfo=datetime.timezone.utc), 'time_taken': 8426783.0, 'time_delta': '97 days, 12:46:23', 'additions': 1789, 'deletions': 0, 'state': 'closed'}, {'id': 223371177, 'number': 5617, 'closed': datetime.datetime(2019, 9, 30, 21, 4, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 10, 16, 19, 37, 17, tzinfo=datetime.timezone.utc), 'time_taken': 30158859.0, 'time_delta': '349 days, 1:27:39', 'additions': 1922, 'deletions': 5, 'state': 'closed'}, {'id': 223368972, 'number': 5616, 'closed': datetime.datetime(2018, 10, 16, 19, 38, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 10, 16, 19, 29, 12, tzinfo=datetime.timezone.utc), 'time_taken': 572.0, 'time_delta': '0:09:32', 'additions': 516, 'deletions': 264, 'state': 'closed'}, {'id': 202662265, 'number': 5355, 'closed': datetime.datetime(2018, 8, 7, 20, 57, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2018, 7, 19, 19, 36, 25, tzinfo=datetime.timezone.utc), 'time_taken': 1646493.0, 'time_delta': '19 days, 1:21:33', 'additions': 515, 'deletions': 262, 'state': 'closed'}]"
25860190,sphinx-gallery,sphinx-gallery/sphinx-gallery,Python,200,413,16,112,1544,113,3,11,"[{'id': 1086435338, 'number': 1033, 'closed': datetime.datetime(2022, 10, 14, 20, 9, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 13, 17, 39, 24, tzinfo=datetime.timezone.utc), 'time_taken': 95418.0, 'time_delta': '1 day, 2:30:18', 'additions': 4, 'deletions': 5, 'state': 'closed'}, {'id': 1047922277, 'number': 1001, 'closed': datetime.datetime(2022, 9, 8, 0, 40, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 19, 1, 23, tzinfo=datetime.timezone.utc), 'time_taken': 106721.0, 'time_delta': '1 day, 5:38:41', 'additions': 26, 'deletions': 22, 'state': 'closed'}, {'id': 1038339600, 'number': 997, 'closed': datetime.datetime(2022, 8, 29, 17, 50, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 20, 19, 21, tzinfo=datetime.timezone.utc), 'time_taken': 250295.0, 'time_delta': '2 days, 21:31:35', 'additions': 25, 'deletions': 20, 'state': 'closed'}, {'id': 1012570971, 'number': 983, 'closed': datetime.datetime(2022, 8, 26, 4, 5, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 30, 8, 3, 35, tzinfo=datetime.timezone.utc), 'time_taken': 2318524.0, 'time_delta': '26 days, 20:02:04', 'additions': 356, 'deletions': 10, 'state': 'closed'}]"
