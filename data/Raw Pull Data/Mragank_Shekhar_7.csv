pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
433172380,"Added rast2(W,SW)","This pull request adds 2 methods: First method builds `W` object and second method builds `sparse W matrix` from `xarray.DataArray`. Along with this both methods also return `pandas.series` object containing data values of raster aligned with the weight object.

Still remaining:
- [ ] Tests
- [ ] Docstring examples",False,1,https://api.github.com/repos/MgeeeeK/libpysal/pulls/1,https://github.com/MgeeeeK/libpysal/pull/1,closed,90,18,1,1,3,24,0,0,[],2020-06-11 15:41:48+00:00,2020-06-29 22:41:56+00:00,1580408.0,"18 days, 7:00:08","[{'comment_id': 439399254, 'comment_body': 'Hi @MgeeeeK, I think we need to be a bit more specific here. Which file formats are supported and how does the `DataArray` have to look like? Currently you have only tested GeoTIFFs, correct? Do you know if `.open_rasterio` always returns the same Xarray.DataArray structure independent on the metadata structure of the input? Might be worth collecting this point in a discussion issue. Which are common Raster file formats? What metadata is required? How doe sour xarray.DataArray have to look like?', 'comment_created': datetime.datetime(2020, 6, 12, 12, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439399572, 'comment_body': 'I would recommend adding a couple usage examples under:\r\n```\r\nExamples\r\n---------\r\n```', 'comment_created': datetime.datetime(2020, 6, 12, 12, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439399959, 'comment_body': 'missing line here', 'comment_created': datetime.datetime(2020, 6, 12, 12, 52, 51, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439400196, 'comment_body': 'parameter names should ideally be consistent, choose `raster` or `rasterf`', 'comment_created': datetime.datetime(2020, 6, 12, 12, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439400249, 'comment_body': 'Examples', 'comment_created': datetime.datetime(2020, 6, 12, 12, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439400672, 'comment_body': 'discussion point whether we want to include pandas and xarray as dependencies in libpysal @darribas?', 'comment_created': datetime.datetime(2020, 6, 12, 12, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439401781, 'comment_body': 'It would be nice to simultaneously work on a notebook file that showcases your new functionality. :)', 'comment_created': datetime.datetime(2020, 6, 12, 12, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439402199, 'comment_body': 'Cool, next up would be to add tests for your new functionality', 'comment_created': datetime.datetime(2020, 6, 12, 12, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439402889, 'comment_body': ""your parameters do not match up here. Generally I think it's a better idea to not allow for` rook=True`, but to give an option as seen here, that allows us to add other functionality later on."", 'comment_created': datetime.datetime(2020, 6, 12, 12, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439403455, 'comment_body': 'Also keep in mind, we are trying to keep our API as consistent as possible, so that it is easy to switch form one functionality to the next, without language or parameter orders changing.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439528977, 'comment_body': 'We talked about name changes, i.e. `from_xarray`', 'comment_created': datetime.datetime(2020, 6, 12, 16, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439529961, 'comment_body': 'Idea to implement a separate function i.e. `xarray_checker()` called within function,\r\n* checking for xarray.DataArray\r\n* checking for metadata of array', 'comment_created': datetime.datetime(2020, 6, 12, 16, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439533814, 'comment_body': 'Merge functions and make `spare=False` default parameter', 'comment_created': datetime.datetime(2020, 6, 12, 16, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439541380, 'comment_body': ""example visualisation function:\r\n```\r\nimport matplotlib.pyplot as plt\r\nfrom libpysal.weights import lat2W\r\nfrom splot.libpysal import plot_spatial_weights\r\nimport geopandas as gpd\r\nimport numpy as np\r\nfrom shapely.geometry import Polygon\r\n%matplotlib inline \r\ndef plot_lattice(col = 3, row = 4):\r\n    wide = 1\r\n    length = 1\r\n    cols = list(range(int(np.floor(0)), int(np.ceil(col)), wide))\r\n    rows = list(range(int(np.floor(0)), int(np.ceil(row)), length))\r\n    rows.reverse()\r\n    polygons = []\r\n    for x in cols:\r\n        for y in rows:\r\n            polygons.append( Polygon([(x,y), (x+wide, y), (x+wide, y-length), (x, y-length)]) )\r\n    grid = gpd.GeoDataFrame({'geometry':polygons})\r\n    w = lat2W(col, row)\r\n    fig, ax = plot_spatial_weights(w, grid)\r\n    return fig, ax, w, gdp\r\nplot_lattice()\r\nplt.show()\r\n```"", 'comment_created': datetime.datetime(2020, 6, 12, 17, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 439542018, 'comment_body': ""I'd replace `rasterf` for `da`, which is the convention I've seen in xarray.\r\n\r\nAlso, @slumnitz suggested to stick to the same API for the `rook` as in `lat2W`"", 'comment_created': datetime.datetime(2020, 6, 12, 17, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 439542142, 'comment_body': 'Same as above: replace `raster` for `da`', 'comment_created': datetime.datetime(2020, 6, 12, 17, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 439543227, 'comment_body': 'Just to note here, we\'ve discussed to move this out and into a separate ""checker"" function that performs this and, possible (but maybe also more):\r\n\r\n- Check if it has several bandas (a third dimension of `da`)\r\n- Raise a warning if so\r\n- Select the first one to identify location of NAs', 'comment_created': datetime.datetime(2020, 6, 12, 17, 10, 59, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 439543719, 'comment_body': ""It'd be great to at least explore the option of performing this slicing within the sparse format. Ideally, we want to avoid having to go from sparse to dense to sparse again. For performance reasons but, particularly, for memory efficiency."", 'comment_created': datetime.datetime(2020, 6, 12, 17, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 439545080, 'comment_body': ""This is a good point that we should probably pick up in the group discussion. Two thoughts:\r\n\r\n1. We might not _need_ the imports if all we do is operate with objects from those classes but we don't instantiate any `pd.` or `xr.` object\r\n1. If we definitely need to, we can make them optional imports, so it's only attempted when this functionality is required and, if the user doesn't need this, they can install `libpysal` without those requirements."", 'comment_created': datetime.datetime(2020, 6, 12, 17, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 439812880, 'comment_body': '@MgeeeeK the example code is here. Also note it might not work for larger files. If you have an additional idea feel free to change however you want, I am happy to help with an integration into splot for raster images.', 'comment_created': datetime.datetime(2020, 6, 14, 10, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 441738272, 'comment_body': ""> your parameters do not match up here. Generally I think it's a better idea to not allow for` rook=True`, but to give an option as seen here, that allows us to add other functionality later on.\r\n\r\nThis is because one function followed [`lat2W`](https://github.com/pysal/libpysal/blob/16a7f585bb95012bdd3dc9267bf48065f2afd1fa/libpysal/weights/util.py#L128) and other followed [`lat2SW`](https://github.com/pysal/libpysal/blob/16a7f585bb95012bdd3dc9267bf48065f2afd1fa/libpysal/weights/util.py#L1137). \r\nNow that we are using `contiguity.from_xarray`, so contiguity argument is not needed anymore... anyways I will try to keep the structure of the code consistent :) "", 'comment_created': datetime.datetime(2020, 6, 17, 18, 16, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 441762727, 'comment_body': '> It would be nice to simultaneously work on a notebook file that showcases your new functionality. :)\r\n\r\non it !!!\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 17, 18, 54, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 441766824, 'comment_body': ""it follows same API which exist in [`lat2W`](https://github.com/pysal/libpysal/blob/16a7f585bb95012bdd3dc9267bf48065f2afd1fa/libpysal/weights/util.py#L128)... \r\nsince we've shifted to different method we don't need to pass `rook` argument anymore "", 'comment_created': datetime.datetime(2020, 6, 17, 18, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 441769124, 'comment_body': 'sure, i think i got it... will push the changes soon', 'comment_created': datetime.datetime(2020, 6, 17, 19, 1, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}]","[{'commit_sha': '4f1de028449384f941cd0b1f8d64019090668a80', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}]",Mragank Shekhar,40512095,,User,,13,,13,13
437161924,Rast w v2,new API implementation,False,3,https://api.github.com/repos/MgeeeeK/libpysal/pulls/3,https://github.com/MgeeeeK/libpysal/pull/3,closed,165,4,2,3,0,3,0,0,[],2020-06-19 15:25:28+00:00,2020-06-29 22:41:33+00:00,890165.0,"10 days, 7:16:05","[{'comment_id': 442908419, 'comment_body': ""contiguity classes are built mainly from vector based data or data containing polygons... therefore the way its constructor works is very different and it cannot build weight object from xarray_dataarray... I managed to get from_xarray working but i still doubt that its final form of the interface's API"", 'comment_created': datetime.datetime(2020, 6, 19, 15, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 442909217, 'comment_body': 'i cannot touch or change id_order so had to assign data index to `ids` ', 'comment_created': datetime.datetime(2020, 6, 19, 15, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 442910034, 'comment_body': 'in case of WSP object I had to assign data index to `id_order`...\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 19, 15, 36, 51, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}]","[{'commit_sha': 'cb4c98dd3cf8edfd9456d67d7c985a343807fd8b', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fe191dbe78a2fdcc0681cfcbf5530c8dd4d2bc3', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2645042dd96f03ae7918830c2c9dac843d601c2', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}]",Mragank Shekhar,40512095,,User,,13,,13,13
440660960,Raster v3,"Raster Interface API V3
added example Notebook

WIP - 
- [ ] Unit-tests
- [ ] Docstring Examples
",True,4,https://api.github.com/repos/MgeeeeK/libpysal/pulls/4,https://github.com/MgeeeeK/libpysal/pull/4,closed,986,1,5,2,0,0,0,0,[],2020-06-26 15:53:02+00:00,2020-06-28 13:52:38+00:00,165576.0,"1 day, 21:59:36",[],"[{'commit_sha': '09eea20bf3123ddd9aa4e9a84cec86a0d5e6bd2c', 'committer_username': 'jGaboardi', 'committer_name': 'James Gaboardi', 'committer_email': None, 'commit_date': datetime.datetime(2014, 8, 29, 13, 8, 19, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e27c958926b476eb4ac8415720826f115a087d9', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}]",Mragank Shekhar,40512095,,User,,13,,13,13
447981633,[WIP] : Base Raster Interface,"### Raster Interface

This pull request adds the base raster interface with finalized API. Newly added transformation methods are stored in a new file raster.py. Overview of finalized API for the interface is listed below:
- Using direct functions e.g. `da2W`, `da2WSP`, `w2da`, `wsp2da`
- Using class methods e.g. `Rook.from_xarray`...

**The interface can only work with 2D`(height, width)` and 3D`(layer, height, width)` DataArray.**

Short outline of the interface:

```python
# Creating test DataArray
>>> da = testDataArray(shape=(10, 56, 49), time=False, rand=False, missing_vals=True)
>>> da.dims
('band', 'y', 'x')
# In this case our dataarray is layered using multiple bands
# Method 1
>>> wsp = da2WSP(da, criterion=""queen"", layer=5, dims=None)
# Method 2
>>> wsp = Queen.from_xarray(da, layer=5, dims=None, sparse=True)
# Accessing data from da using index attribute
>>> data = da.to_series()[wsp.index]
>>> data.head()
band  y     x   
5     71.6  92.4    146
            92.5    121
            92.7    249
            93.0     12
            93.3    210
dtype: int64
# Converting back to the DataArray
>>> da_back = wsp2da(data, wsp)
<xarray.DataArray (band: 1, y: 56, x: 49)>
-1 211 -1 -1 -1 41 37 -1 62 -1 ... -1 171 118 135 28 151 -1 -1 -1 146
Coordinates:
  * band     (band) int64 5
  * y        (y) float64 66.1 66.2 66.3 66.4 66.5 ... 71.2 71.3 71.4 71.5 71.6
  * x        (x) float64 92.1 92.2 92.3 92.4 92.5 ... 96.5 96.6 96.7 96.8 96.9
Attributes:
    nodatavals:  (-1,)
```
_You can checkout example [notebook](https://github.com/MgeeeeK/libpysal/blob/rast_interface/notebooks/Raster%20Interface.ipynb) for more in-depth overview of the interface_

This is work in progress and mainly focuses on introducing the API. Any suggestions/feedback are most welcome. Once the `W` attributes are finalized, I'll:
- [x] Add tests
- [x] Add example on the docstring",True,318,https://api.github.com/repos/pysal/libpysal/pulls/318,https://github.com/pysal/libpysal/pull/318,closed,2142,38,14,7,7,99,0,0,[],2020-07-13 00:52:29+00:00,2020-08-28 08:24:57+00:00,4001548.0,"46 days, 7:32:28","[{'comment_id': 453710730, 'comment_body': 'Hi @MgeeeeK, this looks really great already! Thank you for putting a lot of thought and hard work into making this nice API! Going through the current state I would like to see a couple minor things changed, to follow conventions.\r\n\r\nDiffering between optional and needed parameters is usually done this way:\r\n```\r\ndef fn (a, b, c = 1):          # a/b required, no default; c has default\r\n    return a * b + c\r\n```\r\nsince the criterion has a default here, I would encourage to add the default in the function call like `criterion=""rook""` (?). Personally I\'d also be confused whether to use `""rook""` or `{""rook""}` how about you add a clarification here i.e. `, str`. Also note that the default currently seems to be rook=False not rook=True, meaning the actual default is queen?', 'comment_created': datetime.datetime(2020, 7, 13, 14, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 453712603, 'comment_body': 'NumPy convention would be:\r\n\r\n```\r\nparam[one space]:[one space]dtype\r\n[four spaces]description\r\n```', 'comment_created': datetime.datetime(2020, 7, 13, 14, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 453713053, 'comment_body': 'see NumPy convention comment', 'comment_created': datetime.datetime(2020, 7, 13, 14, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 453713807, 'comment_body': 'see NumPy conventions comment', 'comment_created': datetime.datetime(2020, 7, 13, 15, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455671402, 'comment_body': '`*args` description missing', 'comment_created': datetime.datetime(2020, 7, 16, 10, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455672222, 'comment_body': 'Apply Numpy-docs convention:\r\n\r\nparam[one space]:[one space]dtype\r\n[four spaces]description', 'comment_created': datetime.datetime(2020, 7, 16, 10, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455673498, 'comment_body': 'Default is None with automatically takes first band. Maybe worth being explicit and writing 1?', 'comment_created': datetime.datetime(2020, 7, 16, 10, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455674360, 'comment_body': 'why is this a boolean? could be potentially make this a str with sparse or dense? What do you think? :)', 'comment_created': datetime.datetime(2020, 7, 16, 10, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455674703, 'comment_body': ""I'd recommend to add that this is only working for dense weights objects, or alternatively make it work for sparse objects too?"", 'comment_created': datetime.datetime(2020, 7, 16, 10, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455675948, 'comment_body': 'Same comments for documentation and API as above', 'comment_created': datetime.datetime(2020, 7, 16, 10, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455676596, 'comment_body': 'Same formatting comments for docs throughout the document.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455678087, 'comment_body': '**kwargs description missing', 'comment_created': datetime.datetime(2020, 7, 16, 10, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455679244, 'comment_body': 'specify what `calculated results` are in description', 'comment_created': datetime.datetime(2020, 7, 16, 10, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455679650, 'comment_body': 'Maybe rephrase like original data values stored in 1d array used to calculate xyz? I think I would not be sure on first glance what data is meant here.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455680534, 'comment_body': 'libpysal.weights.W', 'comment_created': datetime.datetime(2020, 7, 16, 10, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455680693, 'comment_body': 'or similar to your W description, data aligned with weights?', 'comment_created': datetime.datetime(2020, 7, 16, 10, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455681435, 'comment_body': ""does DataArray point toward data? I'd recommend to use a consistent naming scheme for all variables, so that the user can connect them in your description"", 'comment_created': datetime.datetime(2020, 7, 16, 10, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455681669, 'comment_body': 'space here', 'comment_created': datetime.datetime(2020, 7, 16, 10, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455681737, 'comment_body': 'no space', 'comment_created': datetime.datetime(2020, 7, 16, 10, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455682386, 'comment_body': 'Ok I see why None is used, ignore my previous comment :)', 'comment_created': datetime.datetime(2020, 7, 16, 10, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455682982, 'comment_body': 'Is there a way to call this dict with Xarray? if yes maybe add the code in our description?', 'comment_created': datetime.datetime(2020, 7, 16, 10, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 456489076, 'comment_body': 'i followed layout of other methods for sparse argument, they all use sparse as boolean dtype.  ', 'comment_created': datetime.datetime(2020, 7, 17, 14, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456558055, 'comment_body': ""i've corrected the default argument now, idk why i missed that :?"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456558757, 'comment_body': 'Would this work if band is not numeric? E.g. `band=""red""`', 'comment_created': datetime.datetime(2020, 7, 17, 16, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456559069, 'comment_body': 'Similarly, would this work if XY dimensions are not `x` or `y` (e.g. `lon`/`lat`)', 'comment_created': datetime.datetime(2020, 7, 17, 16, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456559626, 'comment_body': 'These two lines will be very expensive. Have you considered building a `WSP` object first and then convert? It might actually be faster than remapping.', 'comment_created': datetime.datetime(2020, 7, 17, 16, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456559919, 'comment_body': ""Shouldn't this need to be `ser.index.tolist()`?"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456560729, 'comment_body': ""It'd be great to add a `from_xarray` method to `DistanceBand`, can you please add a separate issue? I don't think it needs to go into this PR, but we wanna keep track of it for the next phase of GSOC"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456561748, 'comment_body': ""I like this approach of building a `W` through a `WSP`, it's very much in line with what we discussed for the rest of the library going forward. This way you don't write any new code that relies on `W`"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456562031, 'comment_body': 'Same commend as above, does this work with non-numeric bands?', 'comment_created': datetime.datetime(2020, 7, 17, 16, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456562781, 'comment_body': ""You're building a dense array of the `WSP` being built, this will not scale. We need to think of ways to get around this (this is a blocker for merging the PR I'd say)\r\n\r\nKeep in mind that `sw` is of dimension `NxN`, where `N` is `da[0].shape[0] * da[0].shape[1]`."", 'comment_created': datetime.datetime(2020, 7, 17, 16, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456562935, 'comment_body': ""thnx, i was looking at other methods and then decided to follow this syntax. I've corrected all the docstrings now"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456565796, 'comment_body': ""We need to think whether this is strictly required or not. My sense is that it's not so we could do `attrs=None` and, in that case, build a `DataArray` from `w.index` by:\r\n\r\n- Selecting the units `u` by looking at the minimum difference between two consecutive dimension labels\r\n- Selecting the width `w` by picking the longest row and using its length\r\n- Selecting the height `h` by picking the longest column and using its length\r\n- Building the full array by creating a mesh of `w` by `h` expressed in `u`\r\n\r\nThis should be a separate method outside `w2da` and it's called when the user passess `attrs=None`.\r\n\r\nAlso, this method could probably benefit from `numba` for heavy loops."", 'comment_created': datetime.datetime(2020, 7, 17, 17, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456566125, 'comment_body': ""That's great as optional. If not passed, we build them based on what we derive from the `attrs` comment above"", 'comment_created': datetime.datetime(2020, 7, 17, 17, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456566723, 'comment_body': ""i've temporarily added index parameter here, "", 'comment_created': datetime.datetime(2020, 7, 17, 17, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456566817, 'comment_body': ""I'd permit this to be a `pandas.Series` too, ideally indexed on `w` and we could check for alignment if it's a series."", 'comment_created': datetime.datetime(2020, 7, 17, 17, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456567508, 'comment_body': 'This will eventually be like this but, for now, we might want to import only for the `xarray`-related parts of the module', 'comment_created': datetime.datetime(2020, 7, 17, 17, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456568431, 'comment_body': ""This seems repetitive code from `w2da`? I'd not have heavy-lifting code in `weights.py` only dispatchers to `raster.py`"", 'comment_created': datetime.datetime(2020, 7, 17, 17, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456568523, 'comment_body': 'Very cool!', 'comment_created': datetime.datetime(2020, 7, 17, 17, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456569678, 'comment_body': ""I'd `import pandas as pd` here probably, at least for now."", 'comment_created': datetime.datetime(2020, 7, 17, 17, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456584387, 'comment_body': 'this is for indexing the array (to remove the x-y coords of missing values)', 'comment_created': datetime.datetime(2020, 7, 17, 17, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456585890, 'comment_body': 'once the `W` class is refactored, i will not assign `index` attribute explicitly', 'comment_created': datetime.datetime(2020, 7, 17, 17, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456587560, 'comment_body': 'sure! will test and correct the description', 'comment_created': datetime.datetime(2020, 7, 17, 17, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456589300, 'comment_body': 'my bad, will do as you suggested below', 'comment_created': datetime.datetime(2020, 7, 17, 17, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456593693, 'comment_body': ""okay i'll add a separate issue for distance band, will also give a heads up on 293"", 'comment_created': datetime.datetime(2020, 7, 17, 18, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456594460, 'comment_body': ""right now this method is using boolean masking/indexing to remove rows and cols related to missing from csr matrix, i'm working on revamping this method by building the sparse matrix from scratch from only non-missing values."", 'comment_created': datetime.datetime(2020, 7, 17, 18, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456785027, 'comment_body': ""if user passes non-numeric value? i've already specified on docstring that the band should be an integer"", 'comment_created': datetime.datetime(2020, 7, 18, 12, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456785565, 'comment_body': 'ohk, right now the interface assumes that user will use `xarray.open_rasterio` method to access raster data and convert it to `DataArray`.\r\n`open_rasterio` method will add fixed dimensions (`band`, `x` and `y`) to the `DataArray`', 'comment_created': datetime.datetime(2020, 7, 18, 12, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456785769, 'comment_body': ""this [link](https://github.com/pydata/xarray/blob/1be777fe725a85b8cc0f65a2bc41f4bc2ba18043/xarray/backends/rasterio_.py#L348) points to the specific code of the `open_rasterio` i'm talking about. "", 'comment_created': datetime.datetime(2020, 7, 18, 12, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456785911, 'comment_body': 'value of the `band` argument will always be an integer ', 'comment_created': datetime.datetime(2020, 7, 18, 12, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 458114342, 'comment_body': 'only problem with this method was that it will trim down the rows and columns with missing values, e.g. lets say the initial 500x3 part out of 500x500 raster contains missing values, the resultant `DataArray` will be of shape 500x497 which wont contain the initial 500x3 part (though this is not usefull).\r\nthats why i was storing the original shape of the `DataArray`.', 'comment_created': datetime.datetime(2020, 7, 21, 13, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 458117643, 'comment_body': 'Also, if this is acceptable then we can use `from_series` method inside xarray which can build the missing coordinates using tensor product of the available coordinates and it will fill the missing data with `np.nan`', 'comment_created': datetime.datetime(2020, 7, 21, 13, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 458610937, 'comment_body': 'What is the rationale for forcing it to be numeric? If possible, I\'d generalise it to any type of value. I can imagine users having `(""red"", ""green"", ""blue"")` for example or other strings and it\'d be very inconvenient to have to rename.\r\n\r\nI might be missing something obvious so feel free to push back if there\'s a better reason :-)', 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458612548, 'comment_body': ""I see your point now. My sense is that it'd be preferable not to assume this and stick to the more general structure of a standard `DataArray`. Two reasons:\r\n\r\n1. This widens the set of use cases your code will be useful for (e.g. anything coming from a NetCDF such as temperature, pollution, etc.)\r\n1. `open_rasterio` _might_ change that convention in the future and then we'd have to change this to align it further\r\n\r\nA more general solution would get around these two cases and would not affect the functionality already provided."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458613742, 'comment_body': 'When that is open, please link it here so we can trace back its origin.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458616865, 'comment_body': 'Yep, that\'s correct. If the original array has missing values that are fully ""trimmable"" (as you describe in your 500x500 --> 500x497), the method will not be able to recover. I think this is fine for a ""best-guess"" approach _as long as_ we document exactly what it does. If the user has the case above, they\'ll just need to pass their own `attrs` to specify it and that\'s fine. But my sense is that the use case where the array is not trimmable (ie. missing values do not crop full rows or columns) is relevant enough that a convenience method would be very handy.\r\n\r\nI\'m not aware of the `from_series` method, but it sounds exactly right so I\'d be all in to use it in this case :-)', 'comment_created': datetime.datetime(2020, 7, 22, 8, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458617727, 'comment_body': ""No worries. When `index` is officially built-in on any `W`, `pandas` will be much more widespread on `libpysal`. It's just until then, it might be good to keep its use confined to where we strictly need it :-)"", 'comment_created': datetime.datetime(2020, 7, 22, 8, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458650408, 'comment_body': 'No worries, I had to dig into `from_series` method and documentation for `pandas.MultiIndex`... now the method can completely build `DataArray` without altering original shape and requiring other information ', 'comment_created': datetime.datetime(2020, 7, 22, 9, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459151117, 'comment_body': 'This is similar to the case you pointed below, since `xarray.open_rasterio()` store the bands as int that is why I had to force it to be an integer. \r\n\r\nWill push an update which will make the band argument accept strings/floats/ints as long as the passed band belongs to the `DataArray`. I can add a method to check if the passed band is valid or not inside `da_checker`.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459161260, 'comment_body': ""Sure, will have to think about more generalized solution... mostly I've seen that the norm is to use either `lon`/`lat` or `x`/`y` to represent cell's position in terms of coordinates.\r\n\r\nHere KNN is a special case where I needed these dimensions to build the KDTree, this will be also used in `Distance band` functionality for raster."", 'comment_created': datetime.datetime(2020, 7, 23, 0, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459173847, 'comment_body': '[Distance Band functionality for Raster Interface #328](https://github.com/pysal/libpysal/issues/328)', 'comment_created': datetime.datetime(2020, 7, 23, 1, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459375333, 'comment_body': 'double check formatting here :)', 'comment_created': datetime.datetime(2020, 7, 23, 11, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459375510, 'comment_body': 'and Parameters instead of Arguments here.', 'comment_created': datetime.datetime(2020, 7, 23, 11, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459375717, 'comment_body': 'Parameters here', 'comment_created': datetime.datetime(2020, 7, 23, 11, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459378591, 'comment_body': 'Returns missing', 'comment_created': datetime.datetime(2020, 7, 23, 11, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459378964, 'comment_body': 'Returns are missing', 'comment_created': datetime.datetime(2020, 7, 23, 11, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459398396, 'comment_body': 'Hi all, to chip in, I think as @MgeeeeK explained, loading a tiff via `rasterio` into an `xarray.DataArray` there is no choice in naming the band `(""red"", ""green"", ""blue"")`, `rasterio` requires the [Band to be an int](https://rasterio.readthedocs.io/en/latest/api/rasterio.html#rasterio.band). At least that is how I understand it. \r\n\r\nThere is a [`band_description()`](https://rasterio.readthedocs.io/en/latest/api/rasterio.io.html#rasterio.io.BufferedDatasetWriter.set_band_description) that could potentially be used to load bands via str, though I do not know if this is accessible in an `xarray.DataArray`. Maybe one could use this or a similar definition, if accessible in xarray (?), to print out what  band 1 represents, additionally to that band 1 is taken?\r\n\r\nI would recommend against hard coding band1, 2, 3 in ""red"", ""green"", ""blue"", as many different satellites have different band numbers and values for their spectral bands. I think this could lead to a lot of confusion and errors on the users side. Users should be aware of which band they feed in and what this band represents in their data.\r\n\r\nThough maybe someone will have added a new dimension that is not called band, and that is not an integer but something else? See additional comments in next thread. :)', 'comment_created': datetime.datetime(2020, 7, 23, 12, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459404110, 'comment_body': 'I see @darribas point now, currently we are requiring that our `xarray.DataArray()` has `band, x, y` as a dimension? Maybe we could add an option for the user to choose the dimensions used? I.e. if someone is not using airborne or satellite imagery rasters, but interpolated temperate measurements, that do not have a `band` dimension but a `time` dimension? Like sensible defaults and, i.e. a dict parameter that defines the names for customization?', 'comment_created': datetime.datetime(2020, 7, 23, 12, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459864642, 'comment_body': 'I gave it a thought... mainly following names are being used `band, x, y, lon, lat, time` to define the dimensions in the netCDF dataset, I can modify `da_checker` to look for these specific dimensions and then proceed with the weight creation and if these dims does not exist then it\'ll show an error. I\'ll also add an optional argument for users to pass custom dimensions if the default ones does not exist?\r\n\r\nSo the modified function will look like this:\r\n```python\r\n\r\nKNN.from_xarray(da, criterion=""rook"", band=None, time=None, x=None, y=None, *args, **kwargs):\r\n    band, time = da_checker(da, band, time, x, y)\r\n\r\n```\r\nThrough `x` and `y` users can pass the custom names of the dimensions if they are different from default (`x/y` or `lon/lat`).', 'comment_created': datetime.datetime(2020, 7, 24, 5, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459973364, 'comment_body': 'yes, I think it\'s a good idea to check for defaults and let the user alter these if necessary. Though, I don\'t like the looks of 4 extra parameters (band, time, x, y) that basically just clarify naming. Maybe there is another way of letting the user choose these, i.e. through a dict like structure dims={""band"":None, ""time"":time, ""lat"":x, ""Lon"":y} or something along these lines? Maybe we can discuss different solutions in the call later?', 'comment_created': datetime.datetime(2020, 7, 24, 10, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 460051731, 'comment_body': ""I've added tests for `raster.py`, do you guys approve of this? I don't wanted to pollute `contiguity`, `distance` and `weights` by hardcoding the `DataArray` but anyways i can add tests to those as well if necessary. "", 'comment_created': datetime.datetime(2020, 7, 24, 13, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 463623835, 'comment_body': ""Is this really only working for 2D or 3D data? what if someone has an `Xarray.DataArray` with i.e. (band, lat, Lon, time)? They would not be able to feed this array in and define dimensions to use? \r\n\r\nI'd recommend using the notation shape=(layer, Lon, lat)? Double check if it's lat, Lon or Lon lat. Just to make sure we have consistent names.\r\n\r\n "", 'comment_created': datetime.datetime(2020, 7, 31, 13, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463626037, 'comment_body': 'Maybe add an example of usage of dims in the below documentation, I think it will make it a lot easier to understand, i.e.\r\n\r\n```\r\nExamples\r\n----------\r\n>>> w_band2 = \r\n>>> w_time = ...\r\n```\r\n\r\nor something similar that makes more sense to you.\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 13, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463628037, 'comment_body': 'I think this might be a bit confusing, how about\r\n\r\n```Select the layer/ band of da to calculate weights for.\r\n     Default=None, will automatically process da layer at shape (0, Lon, Lat)```\r\nMaybe double check if this is correct', 'comment_created': datetime.datetime(2020, 7, 31, 13, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463629782, 'comment_body': 'Very cool!! @darribas are outputs rendered in libpysal documentation, I think we might need to remove everything without a ```>>>```?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463632075, 'comment_body': ""I'd recommend adding a `Default=` for all arguments looking like `param=`\r\nWhat is the default of `attrs` just an empty dict?"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463632236, 'comment_body': 'I would also recommend adding an Example here.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463632517, 'comment_body': 'Great description! :)', 'comment_created': datetime.datetime(2020, 7, 31, 14, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463633054, 'comment_body': 'to wsp?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463634544, 'comment_body': ""I'd add `xarray.DataArray` object everywhere. PySAL users have not seen xarray used in PySAL before and might not know at first glance which DataArray object we are talking about.\r\n\r\nVery cool though! :)"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463635107, 'comment_body': ""I think we called it `shape=(layer, height, width)/(layer,lat,lon)` before? let's try to keep it consistent. "", 'comment_created': datetime.datetime(2020, 7, 31, 14, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463636321, 'comment_body': 'whoops :)', 'comment_created': datetime.datetime(2020, 7, 31, 14, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463638045, 'comment_body': ""I'd suggest to add a couple lines that test if dims and layer parameters are working as expected. What do you think @darribas?"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463683116, 'comment_body': ""> Is this really only working for 2D or 3D data? \r\n\r\nYes this method will only work with 2D and 3D DataArray (1 layer dimension and 2 coordinates dimension), last time dani said that this will satisfy majority of cases... I can look into this if it's required\r\n\r\nSure! i'll change dimensions names... i forgot to change it there "", 'comment_created': datetime.datetime(2020, 7, 31, 15, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 463684535, 'comment_body': ""No problem, I'll mention the defaults in the docstrings.\r\n\r\n > What is the default of attrs just an empty dict?\r\n\r\nyes"", 'comment_created': datetime.datetime(2020, 7, 31, 15, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 463685255, 'comment_body': 'sure! will do', 'comment_created': datetime.datetime(2020, 7, 31, 15, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 463685996, 'comment_body': 'ohk', 'comment_created': datetime.datetime(2020, 7, 31, 15, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 466226693, 'comment_body': ""So this is *always* filled with `lat`, `lon`, and `layer`? I think this needs to be generalized to `row`,`col`,`layer`, and I'd use them as separate arguments, not in this dict-style input.\r\n\r\nAlso... how does this play with `layer`, if `layer` is also specified in `dims`? I think the API can be simpler here, even if you need that later in `da2W`... "", 'comment_created': datetime.datetime(2020, 8, 6, 8, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 466228308, 'comment_body': ""I don't think there are any mandatory arguments for `knn` beyond the input data you derive from `da`. I don't think `*args` is necessary? "", 'comment_created': datetime.datetime(2020, 8, 6, 8, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 466231381, 'comment_body': 'This is still adding an `.index` attribute to a `W` that makes this incompatible with other `W`, and will not round-trip through something like\r\n\r\n`W.from_adjlist(w.to_adjlist())`\r\n\r\nI think we need to make an issue for ""refactoring the Weights class"" and add this addition to that, to make sure we hold to our new ideas from the call on 21 July', 'comment_created': datetime.datetime(2020, 8, 6, 8, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 466733463, 'comment_body': 'Sure I can look into making this more generalized. \r\n\r\njust to be clear `layer` argument only takes the value of single layer id e.g. if `DataArray` consists of multiple bands then user will pass the single band id using `layer` argument (same for time series DataArray, user can pass specific time value using `layer` argument). and the `dims` dictionary accepts the name of the corresponding dimensions.', 'comment_created': datetime.datetime(2020, 8, 6, 23, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 472102643, 'comment_body': ""Little update from last project call, mainly these 3 solutions sprung up :\r\n  - First was that we can simply fix the names of the arguments and the dictionary keys. Naming of these 2 arguments `layer` and `dims` will be corrected to ~layer~ -> `z` and ~dims~ -> `coords_label`. dictionary keys will be named as  `x_label`, `y_label`, `z_label`. This style of passing data through dictionary is common with `xarray` users.\r\n  - As you pointed out, we can add 3 label arguments straight to the function and remove the dictionary argument. This is definitely simpler and intuitive for user than other 2.\r\n  - Another suggestion was (@slumnitz @darribas please correct me if I'm wrong) that we can remove label arguments and assume that user will pass the data in a specific structure (`z`, `y`, `x`) and if the data does not follow this shape then user should restructure and map the data to following order of dimensions.\r\n\r\nWhich one do you all think will be better suited for pysal?"", 'comment_created': datetime.datetime(2020, 8, 18, 11, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 472359445, 'comment_body': '@ljwolf, @darribas and @MgeeeeK to add on a couple thoughts here:\r\n* Building a `Xarray.DataArray` (see [short explanations](http://xarray.pydata.org/en/stable/data-structures.html#dataarray)) the user needs to passes `data_vars`, and define `coords` (coordinates) with according `dims` (dimensions) using a dictionary. Working with `xarray` I think one get\'s used to the packages style of working with dims and coords with dictionaries when\'d defining input data. I think what happens here and is demonstrated quite nicely in cell 13 in @Mgeeeek \'s [example notebook](https://github.com/MgeeeeK/libpysal/blob/rast_interface/notebooks/Raster_awareness_API.ipynb), is that in order for us to process the passed `xarray.DataArray` properly, we need to pass the correct ""wording"" for the previously defined `coords` (i.e. the user needs to pass coords namings) which currently happens in the parameter called dims. I would here follow `xarray.DataArray` conventions defining coords, keep the dictionary style.\r\n* we then require a Parameter to select which slice of the z or layer-coordinate to work with, here the `layer` parameter.\r\n\r\nI generally think the way we are passing coordinate values (dims) if necessary and the actual slice that should be used (layer) is the way to go. As most people would only have to select a slice, and not touch the dims. If they do have to touch dims, they will be familiar with assigning coords similar to how you would assign coords in xarray. I think making separate Parameters for the currently named `dims` argument may add confusion. I certainly would find it easier to just stick to the way xarray is laying out their parameters. \r\n\r\n*Hence I would suggest to keep the given structure, but definitely change the naming.*\r\n\r\nHowever, maybe there is a flaw in my logic right now and after all (please double check) and different people prefer different ways of doing things ;P! Generally I\'d highly recommend having a look at the notebook, as it showcases how to work with arrays nicely!\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 17, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 474421624, 'comment_body': 'I agree as much alignment as possible with `xarray` idioms is the way to go. +1 on this from my end!', 'comment_created': datetime.datetime(2020, 8, 21, 5, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 474422752, 'comment_body': 'Has this been acted upon (ie. issue open)? Irrespective, I thins PR can go ahead? Or @ljwolf do you think we should add `id_order` for completion now, even if in reality we\'re relying on `index` anyway? Another alternative is to have legacy attributes built on-demand if they\'re queried (a bit like we do with other properties in `W` objects)? That\'d ""past-proof"" it while keeping them slim and efficient?', 'comment_created': datetime.datetime(2020, 8, 21, 5, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 474546569, 'comment_body': '> has this been acted upon? \r\n\r\n[Yes](https://github.com/pysal/libpysal/projects/4), albeit only currently in the ""exploration"" phase to suss out which backend to pick. \r\n\r\n> Irrespective, I think this PR can go ahead? \r\n\r\nI\'m fine with that! We\'ll need to circle back here anyway once we hone the weights + ids in the project linked above. \r\n\r\n> legacy attributes built on demand if they\'re queried\r\n\r\nI think they already are, since the object is itself a `W`. What I was referring to was the `index`, which *does not* survive the round trip since it does not get constructed in the `W.__init__` nor exist as a property. ', 'comment_created': datetime.datetime(2020, 8, 21, 8, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 474553327, 'comment_body': ""OK, I see the `dims` dict is idiomatic in the `xarray` style. That's fine. \r\n\r\nI'm still a little fuzzy as to how the `layer` argument differs from the `layer` key in `dims`, but that's probably my issue! "", 'comment_created': datetime.datetime(2020, 8, 21, 9, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 474642188, 'comment_body': '> Naming of these 2 arguments (`layer` and `dims`) will be corrected to ~`layer`~ -> `z_value` and ~`dims`~ -> `coords_label`, dictionary keys will be named as `x_label`, `y_label`, `z_label`.\r\n\r\nbasically `layer` (will be renamed to `z_value`) was needed to select the proper indices of a multi-(band/layer) raster, since user will only need data from single band for further analysis, where as `layer` key is used to pass the label of the z dimension of the `xarray.DataArray`. \r\nUsing same name was a mistake form my side but the naming scheme will be more generalized now. ', 'comment_created': datetime.datetime(2020, 8, 21, 11, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 474649559, 'comment_body': 'Just to point out, I\'ve temporarily added `index` argument to WSP constructor. I\'ve provided the snippet of code below (u can also look [here](https://github.com/MgeeeeK/libpysal/blob/94ec4f4bc9746a235cbaa3486d06b33d76350249/libpysal/weights/weights.py#L1356)):\r\n \r\n```python\r\n        import pandas as pd  # will be removed after refactoring is done\r\n        if index is not None:\r\n            if not isinstance(index, (pd.Index, pd.MultiIndex, pd.RangeIndex)):\r\n                raise TypeError(""index must be an instance of pandas.Index dtype"")\r\n            if len(index) != self.n:\r\n                raise ValueError(\r\n                    ""Number of values in index must match shape of sparse matrix""\r\n                )\r\n        else:\r\n            index = pd.RangeIndex(self.n)\r\n        self.index = index\r\n```\r\n\r\nI was reluctant to add the same to `W` object due to ongoing refactoring. Though just like `WSP` object I can temporarily add this to `W` object, along with `wsp.to_W` method.', 'comment_created': datetime.datetime(2020, 8, 21, 11, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}]","[{'commit_sha': '9eb8311605bba5f942678d7694edcc746b7ce6ee', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6565dd0f84768203a1c5f5cd2833cf91d6f30af3', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5cd4e69cbc840fb9eb229e31f126068efd476af', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7058fa12561205ec004f4a4ccfa61ab3894c2644', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b36bd0a33363082a687ca48d66f7518b9a1223d', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94ec4f4bc9746a235cbaa3486d06b33d76350249', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9542aa5a2f6d08700ea294aa8ef0afff8638ed', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}]",Mragank Shekhar,40512095,,User,,13,,13,13
447981633,[WIP] : Base Raster Interface,"### Raster Interface

This pull request adds the base raster interface with finalized API. Newly added transformation methods are stored in a new file raster.py. Overview of finalized API for the interface is listed below:
- Using direct functions e.g. `da2W`, `da2WSP`, `w2da`, `wsp2da`
- Using class methods e.g. `Rook.from_xarray`...

**The interface can only work with 2D`(height, width)` and 3D`(layer, height, width)` DataArray.**

Short outline of the interface:

```python
# Creating test DataArray
>>> da = testDataArray(shape=(10, 56, 49), time=False, rand=False, missing_vals=True)
>>> da.dims
('band', 'y', 'x')
# In this case our dataarray is layered using multiple bands
# Method 1
>>> wsp = da2WSP(da, criterion=""queen"", layer=5, dims=None)
# Method 2
>>> wsp = Queen.from_xarray(da, layer=5, dims=None, sparse=True)
# Accessing data from da using index attribute
>>> data = da.to_series()[wsp.index]
>>> data.head()
band  y     x   
5     71.6  92.4    146
            92.5    121
            92.7    249
            93.0     12
            93.3    210
dtype: int64
# Converting back to the DataArray
>>> da_back = wsp2da(data, wsp)
<xarray.DataArray (band: 1, y: 56, x: 49)>
-1 211 -1 -1 -1 41 37 -1 62 -1 ... -1 171 118 135 28 151 -1 -1 -1 146
Coordinates:
  * band     (band) int64 5
  * y        (y) float64 66.1 66.2 66.3 66.4 66.5 ... 71.2 71.3 71.4 71.5 71.6
  * x        (x) float64 92.1 92.2 92.3 92.4 92.5 ... 96.5 96.6 96.7 96.8 96.9
Attributes:
    nodatavals:  (-1,)
```
_You can checkout example [notebook](https://github.com/MgeeeeK/libpysal/blob/rast_interface/notebooks/Raster%20Interface.ipynb) for more in-depth overview of the interface_

This is work in progress and mainly focuses on introducing the API. Any suggestions/feedback are most welcome. Once the `W` attributes are finalized, I'll:
- [x] Add tests
- [x] Add example on the docstring",True,318,https://api.github.com/repos/pysal/libpysal/pulls/318,https://github.com/pysal/libpysal/pull/318,closed,2142,38,14,7,7,99,0,0,[],2020-07-13 00:52:29+00:00,2020-08-28 08:24:57+00:00,4001548.0,"46 days, 7:32:28","[{'comment_id': 453710730, 'comment_body': 'Hi @MgeeeeK, this looks really great already! Thank you for putting a lot of thought and hard work into making this nice API! Going through the current state I would like to see a couple minor things changed, to follow conventions.\r\n\r\nDiffering between optional and needed parameters is usually done this way:\r\n```\r\ndef fn (a, b, c = 1):          # a/b required, no default; c has default\r\n    return a * b + c\r\n```\r\nsince the criterion has a default here, I would encourage to add the default in the function call like `criterion=""rook""` (?). Personally I\'d also be confused whether to use `""rook""` or `{""rook""}` how about you add a clarification here i.e. `, str`. Also note that the default currently seems to be rook=False not rook=True, meaning the actual default is queen?', 'comment_created': datetime.datetime(2020, 7, 13, 14, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 453712603, 'comment_body': 'NumPy convention would be:\r\n\r\n```\r\nparam[one space]:[one space]dtype\r\n[four spaces]description\r\n```', 'comment_created': datetime.datetime(2020, 7, 13, 14, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 453713053, 'comment_body': 'see NumPy convention comment', 'comment_created': datetime.datetime(2020, 7, 13, 14, 58, 59, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 453713807, 'comment_body': 'see NumPy conventions comment', 'comment_created': datetime.datetime(2020, 7, 13, 15, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455671402, 'comment_body': '`*args` description missing', 'comment_created': datetime.datetime(2020, 7, 16, 10, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455672222, 'comment_body': 'Apply Numpy-docs convention:\r\n\r\nparam[one space]:[one space]dtype\r\n[four spaces]description', 'comment_created': datetime.datetime(2020, 7, 16, 10, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455673498, 'comment_body': 'Default is None with automatically takes first band. Maybe worth being explicit and writing 1?', 'comment_created': datetime.datetime(2020, 7, 16, 10, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455674360, 'comment_body': 'why is this a boolean? could be potentially make this a str with sparse or dense? What do you think? :)', 'comment_created': datetime.datetime(2020, 7, 16, 10, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455674703, 'comment_body': ""I'd recommend to add that this is only working for dense weights objects, or alternatively make it work for sparse objects too?"", 'comment_created': datetime.datetime(2020, 7, 16, 10, 6, 35, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455675948, 'comment_body': 'Same comments for documentation and API as above', 'comment_created': datetime.datetime(2020, 7, 16, 10, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455676596, 'comment_body': 'Same formatting comments for docs throughout the document.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455678087, 'comment_body': '**kwargs description missing', 'comment_created': datetime.datetime(2020, 7, 16, 10, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455679244, 'comment_body': 'specify what `calculated results` are in description', 'comment_created': datetime.datetime(2020, 7, 16, 10, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455679650, 'comment_body': 'Maybe rephrase like original data values stored in 1d array used to calculate xyz? I think I would not be sure on first glance what data is meant here.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455680534, 'comment_body': 'libpysal.weights.W', 'comment_created': datetime.datetime(2020, 7, 16, 10, 17, 27, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455680693, 'comment_body': 'or similar to your W description, data aligned with weights?', 'comment_created': datetime.datetime(2020, 7, 16, 10, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455681435, 'comment_body': ""does DataArray point toward data? I'd recommend to use a consistent naming scheme for all variables, so that the user can connect them in your description"", 'comment_created': datetime.datetime(2020, 7, 16, 10, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455681669, 'comment_body': 'space here', 'comment_created': datetime.datetime(2020, 7, 16, 10, 19, 25, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455681737, 'comment_body': 'no space', 'comment_created': datetime.datetime(2020, 7, 16, 10, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455682386, 'comment_body': 'Ok I see why None is used, ignore my previous comment :)', 'comment_created': datetime.datetime(2020, 7, 16, 10, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 455682982, 'comment_body': 'Is there a way to call this dict with Xarray? if yes maybe add the code in our description?', 'comment_created': datetime.datetime(2020, 7, 16, 10, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 456489076, 'comment_body': 'i followed layout of other methods for sparse argument, they all use sparse as boolean dtype.  ', 'comment_created': datetime.datetime(2020, 7, 17, 14, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456558055, 'comment_body': ""i've corrected the default argument now, idk why i missed that :?"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456558757, 'comment_body': 'Would this work if band is not numeric? E.g. `band=""red""`', 'comment_created': datetime.datetime(2020, 7, 17, 16, 51, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456559069, 'comment_body': 'Similarly, would this work if XY dimensions are not `x` or `y` (e.g. `lon`/`lat`)', 'comment_created': datetime.datetime(2020, 7, 17, 16, 52, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456559626, 'comment_body': 'These two lines will be very expensive. Have you considered building a `WSP` object first and then convert? It might actually be faster than remapping.', 'comment_created': datetime.datetime(2020, 7, 17, 16, 53, 20, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456559919, 'comment_body': ""Shouldn't this need to be `ser.index.tolist()`?"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456560729, 'comment_body': ""It'd be great to add a `from_xarray` method to `DistanceBand`, can you please add a separate issue? I don't think it needs to go into this PR, but we wanna keep track of it for the next phase of GSOC"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456561748, 'comment_body': ""I like this approach of building a `W` through a `WSP`, it's very much in line with what we discussed for the rest of the library going forward. This way you don't write any new code that relies on `W`"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456562031, 'comment_body': 'Same commend as above, does this work with non-numeric bands?', 'comment_created': datetime.datetime(2020, 7, 17, 16, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456562781, 'comment_body': ""You're building a dense array of the `WSP` being built, this will not scale. We need to think of ways to get around this (this is a blocker for merging the PR I'd say)\r\n\r\nKeep in mind that `sw` is of dimension `NxN`, where `N` is `da[0].shape[0] * da[0].shape[1]`."", 'comment_created': datetime.datetime(2020, 7, 17, 16, 59, 34, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456562935, 'comment_body': ""thnx, i was looking at other methods and then decided to follow this syntax. I've corrected all the docstrings now"", 'comment_created': datetime.datetime(2020, 7, 17, 16, 59, 53, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456565796, 'comment_body': ""We need to think whether this is strictly required or not. My sense is that it's not so we could do `attrs=None` and, in that case, build a `DataArray` from `w.index` by:\r\n\r\n- Selecting the units `u` by looking at the minimum difference between two consecutive dimension labels\r\n- Selecting the width `w` by picking the longest row and using its length\r\n- Selecting the height `h` by picking the longest column and using its length\r\n- Building the full array by creating a mesh of `w` by `h` expressed in `u`\r\n\r\nThis should be a separate method outside `w2da` and it's called when the user passess `attrs=None`.\r\n\r\nAlso, this method could probably benefit from `numba` for heavy loops."", 'comment_created': datetime.datetime(2020, 7, 17, 17, 5, 42, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456566125, 'comment_body': ""That's great as optional. If not passed, we build them based on what we derive from the `attrs` comment above"", 'comment_created': datetime.datetime(2020, 7, 17, 17, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456566723, 'comment_body': ""i've temporarily added index parameter here, "", 'comment_created': datetime.datetime(2020, 7, 17, 17, 7, 32, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456566817, 'comment_body': ""I'd permit this to be a `pandas.Series` too, ideally indexed on `w` and we could check for alignment if it's a series."", 'comment_created': datetime.datetime(2020, 7, 17, 17, 7, 44, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456567508, 'comment_body': 'This will eventually be like this but, for now, we might want to import only for the `xarray`-related parts of the module', 'comment_created': datetime.datetime(2020, 7, 17, 17, 9, 16, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456568431, 'comment_body': ""This seems repetitive code from `w2da`? I'd not have heavy-lifting code in `weights.py` only dispatchers to `raster.py`"", 'comment_created': datetime.datetime(2020, 7, 17, 17, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456568523, 'comment_body': 'Very cool!', 'comment_created': datetime.datetime(2020, 7, 17, 17, 11, 19, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456569678, 'comment_body': ""I'd `import pandas as pd` here probably, at least for now."", 'comment_created': datetime.datetime(2020, 7, 17, 17, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 456584387, 'comment_body': 'this is for indexing the array (to remove the x-y coords of missing values)', 'comment_created': datetime.datetime(2020, 7, 17, 17, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456585890, 'comment_body': 'once the `W` class is refactored, i will not assign `index` attribute explicitly', 'comment_created': datetime.datetime(2020, 7, 17, 17, 46, 26, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456587560, 'comment_body': 'sure! will test and correct the description', 'comment_created': datetime.datetime(2020, 7, 17, 17, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456589300, 'comment_body': 'my bad, will do as you suggested below', 'comment_created': datetime.datetime(2020, 7, 17, 17, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456593693, 'comment_body': ""okay i'll add a separate issue for distance band, will also give a heads up on 293"", 'comment_created': datetime.datetime(2020, 7, 17, 18, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456594460, 'comment_body': ""right now this method is using boolean masking/indexing to remove rows and cols related to missing from csr matrix, i'm working on revamping this method by building the sparse matrix from scratch from only non-missing values."", 'comment_created': datetime.datetime(2020, 7, 17, 18, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456785027, 'comment_body': ""if user passes non-numeric value? i've already specified on docstring that the band should be an integer"", 'comment_created': datetime.datetime(2020, 7, 18, 12, 24, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456785565, 'comment_body': 'ohk, right now the interface assumes that user will use `xarray.open_rasterio` method to access raster data and convert it to `DataArray`.\r\n`open_rasterio` method will add fixed dimensions (`band`, `x` and `y`) to the `DataArray`', 'comment_created': datetime.datetime(2020, 7, 18, 12, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456785769, 'comment_body': ""this [link](https://github.com/pydata/xarray/blob/1be777fe725a85b8cc0f65a2bc41f4bc2ba18043/xarray/backends/rasterio_.py#L348) points to the specific code of the `open_rasterio` i'm talking about. "", 'comment_created': datetime.datetime(2020, 7, 18, 12, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 456785911, 'comment_body': 'value of the `band` argument will always be an integer ', 'comment_created': datetime.datetime(2020, 7, 18, 12, 35, 49, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 458114342, 'comment_body': 'only problem with this method was that it will trim down the rows and columns with missing values, e.g. lets say the initial 500x3 part out of 500x500 raster contains missing values, the resultant `DataArray` will be of shape 500x497 which wont contain the initial 500x3 part (though this is not usefull).\r\nthats why i was storing the original shape of the `DataArray`.', 'comment_created': datetime.datetime(2020, 7, 21, 13, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 458117643, 'comment_body': 'Also, if this is acceptable then we can use `from_series` method inside xarray which can build the missing coordinates using tensor product of the available coordinates and it will fill the missing data with `np.nan`', 'comment_created': datetime.datetime(2020, 7, 21, 13, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 458610937, 'comment_body': 'What is the rationale for forcing it to be numeric? If possible, I\'d generalise it to any type of value. I can imagine users having `(""red"", ""green"", ""blue"")` for example or other strings and it\'d be very inconvenient to have to rename.\r\n\r\nI might be missing something obvious so feel free to push back if there\'s a better reason :-)', 'comment_created': datetime.datetime(2020, 7, 22, 8, 5, 37, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458612548, 'comment_body': ""I see your point now. My sense is that it'd be preferable not to assume this and stick to the more general structure of a standard `DataArray`. Two reasons:\r\n\r\n1. This widens the set of use cases your code will be useful for (e.g. anything coming from a NetCDF such as temperature, pollution, etc.)\r\n1. `open_rasterio` _might_ change that convention in the future and then we'd have to change this to align it further\r\n\r\nA more general solution would get around these two cases and would not affect the functionality already provided."", 'comment_created': datetime.datetime(2020, 7, 22, 8, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458613742, 'comment_body': 'When that is open, please link it here so we can trace back its origin.', 'comment_created': datetime.datetime(2020, 7, 22, 8, 10, 35, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458616865, 'comment_body': 'Yep, that\'s correct. If the original array has missing values that are fully ""trimmable"" (as you describe in your 500x500 --> 500x497), the method will not be able to recover. I think this is fine for a ""best-guess"" approach _as long as_ we document exactly what it does. If the user has the case above, they\'ll just need to pass their own `attrs` to specify it and that\'s fine. But my sense is that the use case where the array is not trimmable (ie. missing values do not crop full rows or columns) is relevant enough that a convenience method would be very handy.\r\n\r\nI\'m not aware of the `from_series` method, but it sounds exactly right so I\'d be all in to use it in this case :-)', 'comment_created': datetime.datetime(2020, 7, 22, 8, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458617727, 'comment_body': ""No worries. When `index` is officially built-in on any `W`, `pandas` will be much more widespread on `libpysal`. It's just until then, it might be good to keep its use confined to where we strictly need it :-)"", 'comment_created': datetime.datetime(2020, 7, 22, 8, 17, 20, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 458650408, 'comment_body': 'No worries, I had to dig into `from_series` method and documentation for `pandas.MultiIndex`... now the method can completely build `DataArray` without altering original shape and requiring other information ', 'comment_created': datetime.datetime(2020, 7, 22, 9, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459151117, 'comment_body': 'This is similar to the case you pointed below, since `xarray.open_rasterio()` store the bands as int that is why I had to force it to be an integer. \r\n\r\nWill push an update which will make the band argument accept strings/floats/ints as long as the passed band belongs to the `DataArray`. I can add a method to check if the passed band is valid or not inside `da_checker`.', 'comment_created': datetime.datetime(2020, 7, 23, 0, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459161260, 'comment_body': ""Sure, will have to think about more generalized solution... mostly I've seen that the norm is to use either `lon`/`lat` or `x`/`y` to represent cell's position in terms of coordinates.\r\n\r\nHere KNN is a special case where I needed these dimensions to build the KDTree, this will be also used in `Distance band` functionality for raster."", 'comment_created': datetime.datetime(2020, 7, 23, 0, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459173847, 'comment_body': '[Distance Band functionality for Raster Interface #328](https://github.com/pysal/libpysal/issues/328)', 'comment_created': datetime.datetime(2020, 7, 23, 1, 40, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459375333, 'comment_body': 'double check formatting here :)', 'comment_created': datetime.datetime(2020, 7, 23, 11, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459375510, 'comment_body': 'and Parameters instead of Arguments here.', 'comment_created': datetime.datetime(2020, 7, 23, 11, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459375717, 'comment_body': 'Parameters here', 'comment_created': datetime.datetime(2020, 7, 23, 11, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459378591, 'comment_body': 'Returns missing', 'comment_created': datetime.datetime(2020, 7, 23, 11, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459378964, 'comment_body': 'Returns are missing', 'comment_created': datetime.datetime(2020, 7, 23, 11, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459398396, 'comment_body': 'Hi all, to chip in, I think as @MgeeeeK explained, loading a tiff via `rasterio` into an `xarray.DataArray` there is no choice in naming the band `(""red"", ""green"", ""blue"")`, `rasterio` requires the [Band to be an int](https://rasterio.readthedocs.io/en/latest/api/rasterio.html#rasterio.band). At least that is how I understand it. \r\n\r\nThere is a [`band_description()`](https://rasterio.readthedocs.io/en/latest/api/rasterio.io.html#rasterio.io.BufferedDatasetWriter.set_band_description) that could potentially be used to load bands via str, though I do not know if this is accessible in an `xarray.DataArray`. Maybe one could use this or a similar definition, if accessible in xarray (?), to print out what  band 1 represents, additionally to that band 1 is taken?\r\n\r\nI would recommend against hard coding band1, 2, 3 in ""red"", ""green"", ""blue"", as many different satellites have different band numbers and values for their spectral bands. I think this could lead to a lot of confusion and errors on the users side. Users should be aware of which band they feed in and what this band represents in their data.\r\n\r\nThough maybe someone will have added a new dimension that is not called band, and that is not an integer but something else? See additional comments in next thread. :)', 'comment_created': datetime.datetime(2020, 7, 23, 12, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459404110, 'comment_body': 'I see @darribas point now, currently we are requiring that our `xarray.DataArray()` has `band, x, y` as a dimension? Maybe we could add an option for the user to choose the dimensions used? I.e. if someone is not using airborne or satellite imagery rasters, but interpolated temperate measurements, that do not have a `band` dimension but a `time` dimension? Like sensible defaults and, i.e. a dict parameter that defines the names for customization?', 'comment_created': datetime.datetime(2020, 7, 23, 12, 15, 14, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 459864642, 'comment_body': 'I gave it a thought... mainly following names are being used `band, x, y, lon, lat, time` to define the dimensions in the netCDF dataset, I can modify `da_checker` to look for these specific dimensions and then proceed with the weight creation and if these dims does not exist then it\'ll show an error. I\'ll also add an optional argument for users to pass custom dimensions if the default ones does not exist?\r\n\r\nSo the modified function will look like this:\r\n```python\r\n\r\nKNN.from_xarray(da, criterion=""rook"", band=None, time=None, x=None, y=None, *args, **kwargs):\r\n    band, time = da_checker(da, band, time, x, y)\r\n\r\n```\r\nThrough `x` and `y` users can pass the custom names of the dimensions if they are different from default (`x/y` or `lon/lat`).', 'comment_created': datetime.datetime(2020, 7, 24, 5, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 459973364, 'comment_body': 'yes, I think it\'s a good idea to check for defaults and let the user alter these if necessary. Though, I don\'t like the looks of 4 extra parameters (band, time, x, y) that basically just clarify naming. Maybe there is another way of letting the user choose these, i.e. through a dict like structure dims={""band"":None, ""time"":time, ""lat"":x, ""Lon"":y} or something along these lines? Maybe we can discuss different solutions in the call later?', 'comment_created': datetime.datetime(2020, 7, 24, 10, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 460051731, 'comment_body': ""I've added tests for `raster.py`, do you guys approve of this? I don't wanted to pollute `contiguity`, `distance` and `weights` by hardcoding the `DataArray` but anyways i can add tests to those as well if necessary. "", 'comment_created': datetime.datetime(2020, 7, 24, 13, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 463623835, 'comment_body': ""Is this really only working for 2D or 3D data? what if someone has an `Xarray.DataArray` with i.e. (band, lat, Lon, time)? They would not be able to feed this array in and define dimensions to use? \r\n\r\nI'd recommend using the notation shape=(layer, Lon, lat)? Double check if it's lat, Lon or Lon lat. Just to make sure we have consistent names.\r\n\r\n "", 'comment_created': datetime.datetime(2020, 7, 31, 13, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463626037, 'comment_body': 'Maybe add an example of usage of dims in the below documentation, I think it will make it a lot easier to understand, i.e.\r\n\r\n```\r\nExamples\r\n----------\r\n>>> w_band2 = \r\n>>> w_time = ...\r\n```\r\n\r\nor something similar that makes more sense to you.\r\n', 'comment_created': datetime.datetime(2020, 7, 31, 13, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463628037, 'comment_body': 'I think this might be a bit confusing, how about\r\n\r\n```Select the layer/ band of da to calculate weights for.\r\n     Default=None, will automatically process da layer at shape (0, Lon, Lat)```\r\nMaybe double check if this is correct', 'comment_created': datetime.datetime(2020, 7, 31, 13, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463629782, 'comment_body': 'Very cool!! @darribas are outputs rendered in libpysal documentation, I think we might need to remove everything without a ```>>>```?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 2, 18, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463632075, 'comment_body': ""I'd recommend adding a `Default=` for all arguments looking like `param=`\r\nWhat is the default of `attrs` just an empty dict?"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463632236, 'comment_body': 'I would also recommend adding an Example here.', 'comment_created': datetime.datetime(2020, 7, 31, 14, 6, 49, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463632517, 'comment_body': 'Great description! :)', 'comment_created': datetime.datetime(2020, 7, 31, 14, 7, 18, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463633054, 'comment_body': 'to wsp?', 'comment_created': datetime.datetime(2020, 7, 31, 14, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463634544, 'comment_body': ""I'd add `xarray.DataArray` object everywhere. PySAL users have not seen xarray used in PySAL before and might not know at first glance which DataArray object we are talking about.\r\n\r\nVery cool though! :)"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463635107, 'comment_body': ""I think we called it `shape=(layer, height, width)/(layer,lat,lon)` before? let's try to keep it consistent. "", 'comment_created': datetime.datetime(2020, 7, 31, 14, 11, 50, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463636321, 'comment_body': 'whoops :)', 'comment_created': datetime.datetime(2020, 7, 31, 14, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463638045, 'comment_body': ""I'd suggest to add a couple lines that test if dims and layer parameters are working as expected. What do you think @darribas?"", 'comment_created': datetime.datetime(2020, 7, 31, 14, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 463683116, 'comment_body': ""> Is this really only working for 2D or 3D data? \r\n\r\nYes this method will only work with 2D and 3D DataArray (1 layer dimension and 2 coordinates dimension), last time dani said that this will satisfy majority of cases... I can look into this if it's required\r\n\r\nSure! i'll change dimensions names... i forgot to change it there "", 'comment_created': datetime.datetime(2020, 7, 31, 15, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 463684535, 'comment_body': ""No problem, I'll mention the defaults in the docstrings.\r\n\r\n > What is the default of attrs just an empty dict?\r\n\r\nyes"", 'comment_created': datetime.datetime(2020, 7, 31, 15, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 463685255, 'comment_body': 'sure! will do', 'comment_created': datetime.datetime(2020, 7, 31, 15, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 463685996, 'comment_body': 'ohk', 'comment_created': datetime.datetime(2020, 7, 31, 15, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 466226693, 'comment_body': ""So this is *always* filled with `lat`, `lon`, and `layer`? I think this needs to be generalized to `row`,`col`,`layer`, and I'd use them as separate arguments, not in this dict-style input.\r\n\r\nAlso... how does this play with `layer`, if `layer` is also specified in `dims`? I think the API can be simpler here, even if you need that later in `da2W`... "", 'comment_created': datetime.datetime(2020, 8, 6, 8, 14, 25, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 466228308, 'comment_body': ""I don't think there are any mandatory arguments for `knn` beyond the input data you derive from `da`. I don't think `*args` is necessary? "", 'comment_created': datetime.datetime(2020, 8, 6, 8, 17, 19, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 466231381, 'comment_body': 'This is still adding an `.index` attribute to a `W` that makes this incompatible with other `W`, and will not round-trip through something like\r\n\r\n`W.from_adjlist(w.to_adjlist())`\r\n\r\nI think we need to make an issue for ""refactoring the Weights class"" and add this addition to that, to make sure we hold to our new ideas from the call on 21 July', 'comment_created': datetime.datetime(2020, 8, 6, 8, 22, 33, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 466733463, 'comment_body': 'Sure I can look into making this more generalized. \r\n\r\njust to be clear `layer` argument only takes the value of single layer id e.g. if `DataArray` consists of multiple bands then user will pass the single band id using `layer` argument (same for time series DataArray, user can pass specific time value using `layer` argument). and the `dims` dictionary accepts the name of the corresponding dimensions.', 'comment_created': datetime.datetime(2020, 8, 6, 23, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 472102643, 'comment_body': ""Little update from last project call, mainly these 3 solutions sprung up :\r\n  - First was that we can simply fix the names of the arguments and the dictionary keys. Naming of these 2 arguments `layer` and `dims` will be corrected to ~layer~ -> `z` and ~dims~ -> `coords_label`. dictionary keys will be named as  `x_label`, `y_label`, `z_label`. This style of passing data through dictionary is common with `xarray` users.\r\n  - As you pointed out, we can add 3 label arguments straight to the function and remove the dictionary argument. This is definitely simpler and intuitive for user than other 2.\r\n  - Another suggestion was (@slumnitz @darribas please correct me if I'm wrong) that we can remove label arguments and assume that user will pass the data in a specific structure (`z`, `y`, `x`) and if the data does not follow this shape then user should restructure and map the data to following order of dimensions.\r\n\r\nWhich one do you all think will be better suited for pysal?"", 'comment_created': datetime.datetime(2020, 8, 18, 11, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 472359445, 'comment_body': '@ljwolf, @darribas and @MgeeeeK to add on a couple thoughts here:\r\n* Building a `Xarray.DataArray` (see [short explanations](http://xarray.pydata.org/en/stable/data-structures.html#dataarray)) the user needs to passes `data_vars`, and define `coords` (coordinates) with according `dims` (dimensions) using a dictionary. Working with `xarray` I think one get\'s used to the packages style of working with dims and coords with dictionaries when\'d defining input data. I think what happens here and is demonstrated quite nicely in cell 13 in @Mgeeeek \'s [example notebook](https://github.com/MgeeeeK/libpysal/blob/rast_interface/notebooks/Raster_awareness_API.ipynb), is that in order for us to process the passed `xarray.DataArray` properly, we need to pass the correct ""wording"" for the previously defined `coords` (i.e. the user needs to pass coords namings) which currently happens in the parameter called dims. I would here follow `xarray.DataArray` conventions defining coords, keep the dictionary style.\r\n* we then require a Parameter to select which slice of the z or layer-coordinate to work with, here the `layer` parameter.\r\n\r\nI generally think the way we are passing coordinate values (dims) if necessary and the actual slice that should be used (layer) is the way to go. As most people would only have to select a slice, and not touch the dims. If they do have to touch dims, they will be familiar with assigning coords similar to how you would assign coords in xarray. I think making separate Parameters for the currently named `dims` argument may add confusion. I certainly would find it easier to just stick to the way xarray is laying out their parameters. \r\n\r\n*Hence I would suggest to keep the given structure, but definitely change the naming.*\r\n\r\nHowever, maybe there is a flaw in my logic right now and after all (please double check) and different people prefer different ways of doing things ;P! Generally I\'d highly recommend having a look at the notebook, as it showcases how to work with arrays nicely!\r\n', 'comment_created': datetime.datetime(2020, 8, 18, 17, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 474421624, 'comment_body': 'I agree as much alignment as possible with `xarray` idioms is the way to go. +1 on this from my end!', 'comment_created': datetime.datetime(2020, 8, 21, 5, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 474422752, 'comment_body': 'Has this been acted upon (ie. issue open)? Irrespective, I thins PR can go ahead? Or @ljwolf do you think we should add `id_order` for completion now, even if in reality we\'re relying on `index` anyway? Another alternative is to have legacy attributes built on-demand if they\'re queried (a bit like we do with other properties in `W` objects)? That\'d ""past-proof"" it while keeping them slim and efficient?', 'comment_created': datetime.datetime(2020, 8, 21, 5, 52, 4, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 474546569, 'comment_body': '> has this been acted upon? \r\n\r\n[Yes](https://github.com/pysal/libpysal/projects/4), albeit only currently in the ""exploration"" phase to suss out which backend to pick. \r\n\r\n> Irrespective, I think this PR can go ahead? \r\n\r\nI\'m fine with that! We\'ll need to circle back here anyway once we hone the weights + ids in the project linked above. \r\n\r\n> legacy attributes built on demand if they\'re queried\r\n\r\nI think they already are, since the object is itself a `W`. What I was referring to was the `index`, which *does not* survive the round trip since it does not get constructed in the `W.__init__` nor exist as a property. ', 'comment_created': datetime.datetime(2020, 8, 21, 8, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 474553327, 'comment_body': ""OK, I see the `dims` dict is idiomatic in the `xarray` style. That's fine. \r\n\r\nI'm still a little fuzzy as to how the `layer` argument differs from the `layer` key in `dims`, but that's probably my issue! "", 'comment_created': datetime.datetime(2020, 8, 21, 9, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ljwolf', 'type': 'User'}, {'comment_id': 474642188, 'comment_body': '> Naming of these 2 arguments (`layer` and `dims`) will be corrected to ~`layer`~ -> `z_value` and ~`dims`~ -> `coords_label`, dictionary keys will be named as `x_label`, `y_label`, `z_label`.\r\n\r\nbasically `layer` (will be renamed to `z_value`) was needed to select the proper indices of a multi-(band/layer) raster, since user will only need data from single band for further analysis, where as `layer` key is used to pass the label of the z dimension of the `xarray.DataArray`. \r\nUsing same name was a mistake form my side but the naming scheme will be more generalized now. ', 'comment_created': datetime.datetime(2020, 8, 21, 11, 36, 38, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 474649559, 'comment_body': 'Just to point out, I\'ve temporarily added `index` argument to WSP constructor. I\'ve provided the snippet of code below (u can also look [here](https://github.com/MgeeeeK/libpysal/blob/94ec4f4bc9746a235cbaa3486d06b33d76350249/libpysal/weights/weights.py#L1356)):\r\n \r\n```python\r\n        import pandas as pd  # will be removed after refactoring is done\r\n        if index is not None:\r\n            if not isinstance(index, (pd.Index, pd.MultiIndex, pd.RangeIndex)):\r\n                raise TypeError(""index must be an instance of pandas.Index dtype"")\r\n            if len(index) != self.n:\r\n                raise ValueError(\r\n                    ""Number of values in index must match shape of sparse matrix""\r\n                )\r\n        else:\r\n            index = pd.RangeIndex(self.n)\r\n        self.index = index\r\n```\r\n\r\nI was reluctant to add the same to `W` object due to ongoing refactoring. Though just like `WSP` object I can temporarily add this to `W` object, along with `wsp.to_W` method.', 'comment_created': datetime.datetime(2020, 8, 21, 11, 53, 23, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}]","[{'commit_sha': '9eb8311605bba5f942678d7694edcc746b7ce6ee', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6565dd0f84768203a1c5f5cd2833cf91d6f30af3', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5cd4e69cbc840fb9eb229e31f126068efd476af', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7058fa12561205ec004f4a4ccfa61ab3894c2644', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b36bd0a33363082a687ca48d66f7518b9a1223d', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94ec4f4bc9746a235cbaa3486d06b33d76350249', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9542aa5a2f6d08700ea294aa8ef0afff8638ed', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}]",Mragank Shekhar,40512095,,User,,13,,13,13
475599760,[WIP]: Optimized raster-based weights builder,"This pull request adds a new optimized weight builder for the raster interface.

Main takeaway:
- Sparse matrix is build using rows and cols values which are generated iteratively. 
- The parallel implementation is based on the crand engine from [esda/#116](https://github.com/pysal/esda/pull/116), though this work uses `threading` backend.
- This pr also adds functionality to add `higher_order` neighbors, this is done using 2 ways:
  - Firstly, 2 arguments are added to the builder method (`k=int` and `include_nas=boolean`). `k` is used for specifying the kth order and `include_nas=True` is used for including higher-order neighbors even if lower-order neighbors are missing.
  - `higher_order` functionality is based on the suggestion provided by Martin in this issue [libpysal/#issue313](https://github.com/pysal/libpysal/issues/313). This also adds diagonal elements that are first converted to zero and then these zero elements are removed in the last step. But this changes the sparsity of the matrix!.
  - If `include_nas` is `True` then the method simply uses modular arithmetic to add higher-order neighbors. (with one caveat explained earlier and in this thread [libpysal/#328](https://github.com/pysal/libpysal/issues/328#issuecomment-664948667))

Here is the plot showing difference between two approaches.
![Fig. 1](https://user-images.githubusercontent.com/40512095/91660290-1ba56c80-eaf3-11ea-9f64-8604c7df15a6.png)
![Fig. 2](https://user-images.githubusercontent.com/40512095/91660292-1e07c680-eaf3-11ea-90df-a696075a4f0f.png)",True,343,https://api.github.com/repos/pysal/libpysal/pulls/343,https://github.com/pysal/libpysal/pull/343,closed,743,974,7,11,5,23,0,0,[],2020-08-28 19:20:19+00:00,2021-01-25 09:12:27+00:00,12923528.0,"149 days, 13:52:08","[{'comment_id': 548049079, 'comment_body': 'After discussion, maybe better to user `include_nodata` and amend description accordingly', 'comment_created': datetime.datetime(2020, 12, 23, 16, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548049194, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 12, 23, 16, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548050388, 'comment_body': ""It'd be good here to add documentation on the index the resulting `WSP`/`W` returned has. My preference on this would be that the index is a list version of the `pandas.Multi/Index` that you get in `da.to_series()`"", 'comment_created': datetime.datetime(2020, 12, 23, 16, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548055599, 'comment_body': 'I _think_ this file misses testing building a rook matrix on multi-core? Check, it might be an easy one to add to increase coverage.', 'comment_created': datetime.datetime(2020, 12, 23, 17, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548058107, 'comment_body': ""Same as above, make sure it's replaced throughout"", 'comment_created': datetime.datetime(2020, 12, 23, 17, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548058325, 'comment_body': ""Add what's the default"", 'comment_created': datetime.datetime(2020, 12, 23, 17, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548058766, 'comment_body': 'Here it might be good also to add more information about the index built', 'comment_created': datetime.datetime(2020, 12, 23, 17, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548059049, 'comment_body': 'Make sure this is tested', 'comment_created': datetime.datetime(2020, 12, 23, 17, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548059425, 'comment_body': 'Maybe replace ""inefficient method"" by ""slower version""', 'comment_created': datetime.datetime(2020, 12, 23, 17, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548069247, 'comment_body': ""I'd replace the message by on that is more informative about what is required. Maybe something like:\r\n\r\n```\r\n`w` requires to include a `index` attribute that is built as a `pandas.MultiIndex` object. This will be used to build the coords in the resulting `da`\r\n```\r\n\r\nSomething like that, you might have to tweak the message a bit with some of the information you include in the description of the index built by `da2WSP`\r\n\r\nThe future structure of weights object is still a bit in flux, so I'd not give the impression that is clear and the current one will be phased out.\r\n\r\nReplace in all instance (it's on a couple other places)"", 'comment_created': datetime.datetime(2020, 12, 23, 17, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548074064, 'comment_body': 'This should be another easy one to test to increase coverage', 'comment_created': datetime.datetime(2020, 12, 23, 17, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548079738, 'comment_body': ""I'd vote here to use `sw.index.tolist()` as the values for `id_order`. It's repetition but it's better for consistency and allows us to be more backwards compatible with the traditional model, but also to support the idea of an `index` approach to weights"", 'comment_created': datetime.datetime(2020, 12, 23, 17, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 551205774, 'comment_body': 'Please add a short description about the `index` attribute that `wsp` is returned with, since this will not be the same across the library. Something like: ""instance of spatial weights class WSP with an `index` attribute that includes a MultiIndex object from the DataArray""', 'comment_created': datetime.datetime(2021, 1, 4, 9, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 551206783, 'comment_body': 'Has this been added?', 'comment_created': datetime.datetime(2021, 1, 4, 9, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 554153287, 'comment_body': '@MgeeeeK this is one of the last follow ups, I still detect.', 'comment_created': datetime.datetime(2021, 1, 8, 19, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554156914, 'comment_body': 'This still seems outstanding @MgeeeeK ', 'comment_created': datetime.datetime(2021, 1, 8, 19, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554158303, 'comment_body': '@MgeeeeK you can test if a ValueError is raised here, this is the only line not covered, the rest seems good to go now. ', 'comment_created': datetime.datetime(2021, 1, 8, 19, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554158589, 'comment_body': 'Codecov indicates that it is currently not tested. ', 'comment_created': datetime.datetime(2021, 1, 8, 19, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554159348, 'comment_body': 'Looks good to me, what do you think @darribas?', 'comment_created': datetime.datetime(2021, 1, 8, 19, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554160731, 'comment_body': 'Documentation looks great! This is resolved? What do you think @darribas?', 'comment_created': datetime.datetime(2021, 1, 8, 19, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554522113, 'comment_body': 'oops my bad...', 'comment_created': datetime.datetime(2021, 1, 10, 6, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 554566756, 'comment_body': 'This looks good to go, resolved', 'comment_created': datetime.datetime(2021, 1, 10, 13, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 554575571, 'comment_body': 'Test for single and multi-threaded results, this also compares `include_nodata = True` and `include_nodata = False` for `k=2` (Since there is no missing value, output in both the case will be same)', 'comment_created': datetime.datetime(2021, 1, 10, 14, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}]","[{'commit_sha': '4fce04bba6e1f9f6b3e2312e9510882be726f346', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d0cfc4b8e52cad51963342c5e567c2f3b42811e', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd422dee1e1277a9d1e7ed9d033fb6f794c2f30cc', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc51627b204438aea842cef89c9cf129710bc15f', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18049605b61e85c5db65148e1ce8d8dd2670aae1', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69353f8453c61ef2afaac9ca16706b777ae3357e', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be84cf8882d6616fab1a1fe45df11c509dd6747', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36edb9a8ac9a1a0e8edc629966a9af767518fc6e', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1130b0af9fd1e759fccca74f06294df03e9dc3d3', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c1730c0494cb79c36e23177010210ce5f25f8a', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8b7b9360cc8cb5a2acf80ecc551f14e492bcd5', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}]",Mragank Shekhar,40512095,,User,,13,,13,13
471677554,[WIP]: Added raster weights plotting functionality,"This pull request adds the functionality to plot raster-based (`xarray.DataArray`) weights objects. The implementation is aligned with the future weight object design and therefore only uses `scipy.sparse` matrix and newly added `index` attribute. 

Few points to consider:
- New `da` parameter has been introduced in the function.
- User can pass both `W` and `WSP` object using `w` parameter in raster case.
- Raster plotting currently uses `polygons` to plot each pixel.
- Properties like `non_planar_joins` will not currently work with the new implementation, since it does not exist right now.  

_You can checkout example [notebook](https://github.com/MgeeeeK/GSoC2020/blob/master/raster_interface_splot.ipynb)_

Any suggestions/feedback are most welcome. Tasks remaining to be finished:
- [x] Tests
- [ ] Example NoteBook",False,113,https://api.github.com/repos/pysal/splot/pulls/113,https://github.com/pysal/splot/pull/113,closed,141,56,2,9,2,0,0,0,[],2020-08-21 14:46:28+00:00,2021-09-12 14:06:48+00:00,33434420.0,"386 days, 23:20:20",[],"[{'commit_sha': 'afbbfeadce42c479216a156193040399821e5c61', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29055d6cbab263393328cbc564106c9ce75862d1', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7519c6fbb615ce90edd02a39a2af751aceb9af4a', 'committer_username': 'slumnitz', 'committer_name': 'Stefanie Lumnitz', 'committer_email': 'stefanie.lumnitz@gmail.com', 'commit_date': datetime.datetime(2018, 1, 5, 17, 54, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '902cfce5ee0938b277f53a52adb2e221af81ae62', 'committer_username': 'slumnitz', 'committer_name': 'Stefanie Lumnitz', 'committer_email': 'stefanie.lumnitz@gmail.com', 'commit_date': datetime.datetime(2018, 1, 5, 17, 54, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28f5da1313888b49225ee83c931d8842409f6059', 'committer_username': 'slumnitz', 'committer_name': 'Stefanie Lumnitz', 'committer_email': 'stefanie.lumnitz@gmail.com', 'commit_date': datetime.datetime(2018, 1, 5, 17, 54, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32518d5fa8552c5455de6a08e0bc12d5f13186a6', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac7018edee65b444c02cde86199840b57c792275', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fdbf47d045081ae265d01cbb1d393bd12ac37fe', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37abd25a1cc34b4e1af2b1b6f4639242a5610a10', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}]",Mragank Shekhar,40512095,,User,,13,,13,13
475599760,[WIP]: Optimized raster-based weights builder,"This pull request adds a new optimized weight builder for the raster interface.

Main takeaway:
- Sparse matrix is build using rows and cols values which are generated iteratively. 
- The parallel implementation is based on the crand engine from [esda/#116](https://github.com/pysal/esda/pull/116), though this work uses `threading` backend.
- This pr also adds functionality to add `higher_order` neighbors, this is done using 2 ways:
  - Firstly, 2 arguments are added to the builder method (`k=int` and `include_nas=boolean`). `k` is used for specifying the kth order and `include_nas=True` is used for including higher-order neighbors even if lower-order neighbors are missing.
  - `higher_order` functionality is based on the suggestion provided by Martin in this issue [libpysal/#issue313](https://github.com/pysal/libpysal/issues/313). This also adds diagonal elements that are first converted to zero and then these zero elements are removed in the last step. But this changes the sparsity of the matrix!.
  - If `include_nas` is `True` then the method simply uses modular arithmetic to add higher-order neighbors. (with one caveat explained earlier and in this thread [libpysal/#328](https://github.com/pysal/libpysal/issues/328#issuecomment-664948667))

Here is the plot showing difference between two approaches.
![Fig. 1](https://user-images.githubusercontent.com/40512095/91660290-1ba56c80-eaf3-11ea-9f64-8604c7df15a6.png)
![Fig. 2](https://user-images.githubusercontent.com/40512095/91660292-1e07c680-eaf3-11ea-90df-a696075a4f0f.png)",True,343,https://api.github.com/repos/pysal/libpysal/pulls/343,https://github.com/pysal/libpysal/pull/343,closed,743,974,7,11,5,23,0,0,[],2020-08-28 19:20:19+00:00,2021-01-25 09:12:27+00:00,12923528.0,"149 days, 13:52:08","[{'comment_id': 548049079, 'comment_body': 'After discussion, maybe better to user `include_nodata` and amend description accordingly', 'comment_created': datetime.datetime(2020, 12, 23, 16, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548049194, 'comment_body': 'Same here', 'comment_created': datetime.datetime(2020, 12, 23, 16, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548050388, 'comment_body': ""It'd be good here to add documentation on the index the resulting `WSP`/`W` returned has. My preference on this would be that the index is a list version of the `pandas.Multi/Index` that you get in `da.to_series()`"", 'comment_created': datetime.datetime(2020, 12, 23, 16, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548055599, 'comment_body': 'I _think_ this file misses testing building a rook matrix on multi-core? Check, it might be an easy one to add to increase coverage.', 'comment_created': datetime.datetime(2020, 12, 23, 17, 3, 27, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548058107, 'comment_body': ""Same as above, make sure it's replaced throughout"", 'comment_created': datetime.datetime(2020, 12, 23, 17, 9, 42, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548058325, 'comment_body': ""Add what's the default"", 'comment_created': datetime.datetime(2020, 12, 23, 17, 10, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548058766, 'comment_body': 'Here it might be good also to add more information about the index built', 'comment_created': datetime.datetime(2020, 12, 23, 17, 11, 15, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548059049, 'comment_body': 'Make sure this is tested', 'comment_created': datetime.datetime(2020, 12, 23, 17, 11, 54, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548059425, 'comment_body': 'Maybe replace ""inefficient method"" by ""slower version""', 'comment_created': datetime.datetime(2020, 12, 23, 17, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548069247, 'comment_body': ""I'd replace the message by on that is more informative about what is required. Maybe something like:\r\n\r\n```\r\n`w` requires to include a `index` attribute that is built as a `pandas.MultiIndex` object. This will be used to build the coords in the resulting `da`\r\n```\r\n\r\nSomething like that, you might have to tweak the message a bit with some of the information you include in the description of the index built by `da2WSP`\r\n\r\nThe future structure of weights object is still a bit in flux, so I'd not give the impression that is clear and the current one will be phased out.\r\n\r\nReplace in all instance (it's on a couple other places)"", 'comment_created': datetime.datetime(2020, 12, 23, 17, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548074064, 'comment_body': 'This should be another easy one to test to increase coverage', 'comment_created': datetime.datetime(2020, 12, 23, 17, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 548079738, 'comment_body': ""I'd vote here to use `sw.index.tolist()` as the values for `id_order`. It's repetition but it's better for consistency and allows us to be more backwards compatible with the traditional model, but also to support the idea of an `index` approach to weights"", 'comment_created': datetime.datetime(2020, 12, 23, 17, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 551205774, 'comment_body': 'Please add a short description about the `index` attribute that `wsp` is returned with, since this will not be the same across the library. Something like: ""instance of spatial weights class WSP with an `index` attribute that includes a MultiIndex object from the DataArray""', 'comment_created': datetime.datetime(2021, 1, 4, 9, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 551206783, 'comment_body': 'Has this been added?', 'comment_created': datetime.datetime(2021, 1, 4, 9, 39, 32, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 554153287, 'comment_body': '@MgeeeeK this is one of the last follow ups, I still detect.', 'comment_created': datetime.datetime(2021, 1, 8, 19, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554156914, 'comment_body': 'This still seems outstanding @MgeeeeK ', 'comment_created': datetime.datetime(2021, 1, 8, 19, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554158303, 'comment_body': '@MgeeeeK you can test if a ValueError is raised here, this is the only line not covered, the rest seems good to go now. ', 'comment_created': datetime.datetime(2021, 1, 8, 19, 53, 22, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554158589, 'comment_body': 'Codecov indicates that it is currently not tested. ', 'comment_created': datetime.datetime(2021, 1, 8, 19, 53, 57, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554159348, 'comment_body': 'Looks good to me, what do you think @darribas?', 'comment_created': datetime.datetime(2021, 1, 8, 19, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554160731, 'comment_body': 'Documentation looks great! This is resolved? What do you think @darribas?', 'comment_created': datetime.datetime(2021, 1, 8, 19, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'slumnitz', 'type': 'User'}, {'comment_id': 554522113, 'comment_body': 'oops my bad...', 'comment_created': datetime.datetime(2021, 1, 10, 6, 59, 5, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}, {'comment_id': 554566756, 'comment_body': 'This looks good to go, resolved', 'comment_created': datetime.datetime(2021, 1, 10, 13, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'darribas', 'type': 'User'}, {'comment_id': 554575571, 'comment_body': 'Test for single and multi-threaded results, this also compares `include_nodata = True` and `include_nodata = False` for `k=2` (Since there is no missing value, output in both the case will be same)', 'comment_created': datetime.datetime(2021, 1, 10, 14, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'MgeeeeK', 'type': 'User'}]","[{'commit_sha': '4fce04bba6e1f9f6b3e2312e9510882be726f346', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6d0cfc4b8e52cad51963342c5e567c2f3b42811e', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd422dee1e1277a9d1e7ed9d033fb6f794c2f30cc', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc51627b204438aea842cef89c9cf129710bc15f', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18049605b61e85c5db65148e1ce8d8dd2670aae1', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69353f8453c61ef2afaac9ca16706b777ae3357e', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1be84cf8882d6616fab1a1fe45df11c509dd6747', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36edb9a8ac9a1a0e8edc629966a9af767518fc6e', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1130b0af9fd1e759fccca74f06294df03e9dc3d3', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71c1730c0494cb79c36e23177010210ce5f25f8a', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8b7b9360cc8cb5a2acf80ecc551f14e492bcd5', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}]",Mragank Shekhar,40512095,,User,,13,,13,13
471677554,[WIP]: Added raster weights plotting functionality,"This pull request adds the functionality to plot raster-based (`xarray.DataArray`) weights objects. The implementation is aligned with the future weight object design and therefore only uses `scipy.sparse` matrix and newly added `index` attribute. 

Few points to consider:
- New `da` parameter has been introduced in the function.
- User can pass both `W` and `WSP` object using `w` parameter in raster case.
- Raster plotting currently uses `polygons` to plot each pixel.
- Properties like `non_planar_joins` will not currently work with the new implementation, since it does not exist right now.  

_You can checkout example [notebook](https://github.com/MgeeeeK/GSoC2020/blob/master/raster_interface_splot.ipynb)_

Any suggestions/feedback are most welcome. Tasks remaining to be finished:
- [x] Tests
- [ ] Example NoteBook",False,113,https://api.github.com/repos/pysal/splot/pulls/113,https://github.com/pysal/splot/pull/113,closed,141,56,2,9,2,0,0,0,[],2020-08-21 14:46:28+00:00,2021-09-12 14:06:48+00:00,33434420.0,"386 days, 23:20:20",[],"[{'commit_sha': 'afbbfeadce42c479216a156193040399821e5c61', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29055d6cbab263393328cbc564106c9ce75862d1', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7519c6fbb615ce90edd02a39a2af751aceb9af4a', 'committer_username': 'slumnitz', 'committer_name': 'Stefanie Lumnitz', 'committer_email': 'stefanie.lumnitz@gmail.com', 'commit_date': datetime.datetime(2018, 1, 5, 17, 54, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '902cfce5ee0938b277f53a52adb2e221af81ae62', 'committer_username': 'slumnitz', 'committer_name': 'Stefanie Lumnitz', 'committer_email': 'stefanie.lumnitz@gmail.com', 'commit_date': datetime.datetime(2018, 1, 5, 17, 54, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28f5da1313888b49225ee83c931d8842409f6059', 'committer_username': 'slumnitz', 'committer_name': 'Stefanie Lumnitz', 'committer_email': 'stefanie.lumnitz@gmail.com', 'commit_date': datetime.datetime(2018, 1, 5, 17, 54, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32518d5fa8552c5455de6a08e0bc12d5f13186a6', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac7018edee65b444c02cde86199840b57c792275', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fdbf47d045081ae265d01cbb1d393bd12ac37fe', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37abd25a1cc34b4e1af2b1b6f4639242a5610a10', 'committer_username': 'MgeeeeK', 'committer_name': 'Mragank Shekhar', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 23, 4, 44, 50, tzinfo=datetime.timezone.utc)}]",Mragank Shekhar,40512095,,User,,13,,13,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
240247375,libpysal,MgeeeeK/libpysal,Jupyter Notebook,0,0,1,61,4447,5,19,5,"[{'id': 467042747, 'number': 10, 'closed': datetime.datetime(2020, 8, 28, 18, 35, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 22, 37, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1367874.0, 'time_delta': '15 days, 19:57:54', 'additions': 687, 'deletions': 202, 'state': 'closed'}, {'id': 451207171, 'number': 7, 'closed': datetime.datetime(2020, 8, 6, 23, 47, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 17, 15, 33, 19, tzinfo=datetime.timezone.utc), 'time_taken': 1757676.0, 'time_delta': '20 days, 8:14:36', 'additions': 132, 'deletions': 1, 'state': 'closed'}, {'id': 447501699, 'number': 6, 'closed': datetime.datetime(2020, 8, 6, 23, 47, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 15, 24, 9, tzinfo=datetime.timezone.utc), 'time_taken': 2363016.0, 'time_delta': '27 days, 8:23:36', 'additions': 836, 'deletions': 37, 'state': 'closed'}, {'id': 443777384, 'number': 5, 'closed': datetime.datetime(2020, 8, 6, 23, 48, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 2, 23, 5, 53, tzinfo=datetime.timezone.utc), 'time_taken': 3026538.0, 'time_delta': '35 days, 0:42:18', 'additions': 2216, 'deletions': 38, 'state': 'closed'}, {'id': 440660960, 'number': 4, 'closed': datetime.datetime(2020, 6, 28, 13, 52, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 26, 15, 53, 2, tzinfo=datetime.timezone.utc), 'time_taken': 165576.0, 'time_delta': '1 day, 21:59:36', 'additions': 986, 'deletions': 1, 'state': 'closed'}, {'id': 437161924, 'number': 3, 'closed': datetime.datetime(2020, 6, 29, 22, 41, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 19, 15, 25, 28, tzinfo=datetime.timezone.utc), 'time_taken': 890165.0, 'time_delta': '10 days, 7:16:05', 'additions': 165, 'deletions': 4, 'state': 'closed'}, {'id': 433750446, 'number': 2, 'closed': datetime.datetime(2020, 6, 29, 22, 41, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 15, 34, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1494408.0, 'time_delta': '17 days, 7:06:48', 'additions': 34, 'deletions': 1, 'state': 'closed'}, {'id': 433172380, 'number': 1, 'closed': datetime.datetime(2020, 6, 29, 22, 41, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 11, 15, 41, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1580408.0, 'time_delta': '18 days, 7:00:08', 'additions': 90, 'deletions': 18, 'state': 'closed'}]"
81501824,libpysal,pysal/libpysal,Python,78,255,29,72,5465,94,14,10,"[{'id': 614198645, 'number': 400, 'closed': datetime.datetime(2021, 6, 13, 16, 12, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 13, 7, 13, 3, tzinfo=datetime.timezone.utc), 'time_taken': 5302770.0, 'time_delta': '61 days, 8:59:30', 'additions': 31, 'deletions': 9, 'state': 'closed'}, {'id': 564268964, 'number': 384, 'closed': datetime.datetime(2021, 1, 31, 16, 37, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 29, 21, 35, 21, tzinfo=datetime.timezone.utc), 'time_taken': 154905.0, 'time_delta': '1 day, 19:01:45', 'additions': 75, 'deletions': 37, 'state': 'closed'}, {'id': 561307664, 'number': 383, 'closed': datetime.datetime(2021, 1, 26, 18, 27, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 25, 19, 19, 48, tzinfo=datetime.timezone.utc), 'time_taken': 83289.0, 'time_delta': '23:08:09', 'additions': 81, 'deletions': 75, 'state': 'closed'}, {'id': 475599760, 'number': 343, 'closed': datetime.datetime(2021, 1, 25, 9, 12, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 28, 19, 20, 19, tzinfo=datetime.timezone.utc), 'time_taken': 12923528.0, 'time_delta': '149 days, 13:52:08', 'additions': 743, 'deletions': 974, 'state': 'closed'}, {'id': 447981633, 'number': 318, 'closed': datetime.datetime(2020, 8, 28, 8, 24, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 13, 0, 52, 29, tzinfo=datetime.timezone.utc), 'time_taken': 4001548.0, 'time_delta': '46 days, 7:32:28', 'additions': 2142, 'deletions': 38, 'state': 'closed'}, {'id': 447500033, 'number': 317, 'closed': datetime.datetime(2020, 7, 10, 15, 21, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 10, 15, 21, 3, tzinfo=datetime.timezone.utc), 'time_taken': 14.0, 'time_delta': '0:00:14', 'additions': 836, 'deletions': 37, 'state': 'closed'}, {'id': 376784985, 'number': 256, 'closed': datetime.datetime(2020, 3, 28, 0, 15, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 18, 19, 6, 7, tzinfo=datetime.timezone.utc), 'time_taken': 3301782.0, 'time_delta': '38 days, 5:09:42', 'additions': 46, 'deletions': 65, 'state': 'closed'}, {'id': 374844683, 'number': 245, 'closed': None, 'created': datetime.datetime(2020, 2, 13, 12, 36, 58, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 109, 'deletions': 16, 'state': 'open'}]"
88917730,splot,pysal/splot,Jupyter Notebook,27,98,23,59,4056,32,3,0,"[{'id': 471677554, 'number': 113, 'closed': datetime.datetime(2021, 9, 12, 14, 6, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 21, 14, 46, 28, tzinfo=datetime.timezone.utc), 'time_taken': 33434420.0, 'time_delta': '386 days, 23:20:20', 'additions': 141, 'deletions': 56, 'state': 'closed'}]"
