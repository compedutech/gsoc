pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
438443149,in-toto-run implementation,"**The following PR is part of the Google Summer of Code 2020 program**

**Fixes issue #54**:
This PR intents to fix Issue #54 

**Description of pull request**:
The goal of this PR is the in-toto-run implementation similar to our reference implementation in python.

**Please verify and check that the pull request fulfills the following
requirements**:

- [X] Tests have been added for the bug fix or new feature
- [X] Docs have been added for the bug fix or new feature

",True,56,https://api.github.com/repos/in-toto/in-toto-golang/pulls/56,https://github.com/in-toto/in-toto-golang/pull/56,closed,1766,582,21,86,77,164,0,0,[],2020-06-23 09:30:22+00:00,2020-08-20 12:41:57+00:00,5022695.0,"58 days, 3:11:35","[{'comment_id': 450809722, 'comment_body': 'Might be worth mentioning that we generate the keyid exactly as we do in securesystemslib for interoperability.', 'comment_created': datetime.datetime(2020, 7, 7, 11, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 450810272, 'comment_body': '```suggestion\r\nIf no RSA Private key can be parsed, the first return value is nil and the\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 11, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 450810895, 'comment_body': 'Oh looks like you copy-pasted that typo from my `ParseRSAPublicKeyFromPEM` docstring. Could you fix it there as well?', 'comment_created': datetime.datetime(2020, 7, 7, 12, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 450811623, 'comment_body': 'Minor nit:\r\n```suggestion\r\nformatted file, and instantiates and returns the corresponding RSA private key.\r\nIf the no RSA private key can be parsed, the first return value is nil and the\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 12, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452007366, 'comment_body': 'And if not successful?', 'comment_created': datetime.datetime(2020, 7, 9, 7, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452007819, 'comment_body': 'Please document the return value (nil on success, error otherwise) here and generally in your new function docstrings.', 'comment_created': datetime.datetime(2020, 7, 9, 7, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452044619, 'comment_body': ""It's pretty convenient to fall back to PKCS1 here, but it also feels quite brittle to rely on the error message for case handling.\r\n\r\nMoreover, looking at the sources of `x5009.ParsePKCS8PrivateKey` and `asn1.Unmarshal`, the suggestion in the error message seems more like a wild than an educated guess.\r\n\r\nI'm fine with trying different parse functions, but I would just base it on the error and not on the error message. Btw. you could also try ParseECPrivateKey. :) What do you think?\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 9, 8, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452050342, 'comment_body': 'Note that this will format the public key in PKCS8, even if the private key was loaded as PKCS1 and is stored as such in `k.KeyVal.Private`. From a quick look at sslib, we also do it over there. I think this should at least be documented here and ideally in sslib. Would you mind adding a note to https://github.com/secure-systems-lab/securesystemslib/issues/251?\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 8, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452203443, 'comment_body': ""The common used `errors.Is(err, ErrPKCS1PrivKey)` does not work, because the library provides no such error. Therefore the only way to differ the error is via an error message. Is this correct and what you are asking for?\r\n\r\n> I'm fine with trying different parse functions, but I would just base it on the error and not on the error message. Btw. you could also try ParseECPrivateKey. :) What do you think?\r\n\r\nis EC == ECDSA? Isn't this covered with PKCS8?"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452203674, 'comment_body': 'oh dear this definitely needs some documentation! good catch', 'comment_created': datetime.datetime(2020, 7, 9, 13, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452207007, 'comment_body': 'the doc strings definitely need some love. That was a little bit in a hurry yesterday :D ', 'comment_created': datetime.datetime(2020, 7, 9, 13, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452281624, 'comment_body': ""I think I got what you mean now. I just test on err != nil right now. This has made the whole section more readable, however I think I should make an own function out of this and maybe use a dispatch table for calling of these parsing functions in a row?\r\n\r\nWhat do you think? If we keep adding parsing functions like ParseECPrivateKey we will have more and more nesting with the current approach, it looks horrible, but it's easy to read. A dispatch table would be more complex to read but it looks nicer? Not sure about this. What do you think @lukpueh?"", 'comment_created': datetime.datetime(2020, 7, 9, 14, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452281989, 'comment_body': 'I have added a comment in the Go implementation. I will also note this in the securesystemslib issue.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452373688, 'comment_body': 'nevermind.. moved the part to a separate function.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456665023, 'comment_body': ""so this is removing the PEM header/footer, and thus will change the resulting keyid no? I know there's conversation around it, but I just wanted to make sure I'm not misunderstanding what this change does."", 'comment_created': datetime.datetime(2020, 7, 17, 20, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456709559, 'comment_body': 'is the edgecase on the rsa case the reason for this repetition? could we probably try to increase code reuse? (e.g., by setting a function pointer to treat the private key bytes and then do the rest on a catch-all behavior for both cases.', 'comment_created': datetime.datetime(2020, 7, 17, 23, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456709998, 'comment_body': 'same here, could we set the parameters and then call ""set key components"" afterwards? It\'d be easier to grok what the difference between these cases are.', 'comment_created': datetime.datetime(2020, 7, 17, 23, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456710994, 'comment_body': 'what type of ""key data"" are we talking about? could we add at least an example in the comments? It\'d help anybody who wants to work this in the future to scope what they are getting into.', 'comment_created': datetime.datetime(2020, 7, 17, 23, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456713489, 'comment_body': ""I see this code is repeated. I'm also curious to know if ed25519 would work with pem.Decode?"", 'comment_created': datetime.datetime(2020, 7, 17, 23, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456713722, 'comment_body': ""I'm starting to think this module could be split in keytype modules + an overarching module to plug the right submodule after key detection...."", 'comment_created': datetime.datetime(2020, 7, 17, 23, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456713852, 'comment_body': 'what are these commented tests about?', 'comment_created': datetime.datetime(2020, 7, 17, 23, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456714002, 'comment_body': ""Isn't this note outdated when this PR is in? :)"", 'comment_created': datetime.datetime(2020, 7, 17, 23, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456714260, 'comment_body': 'ah, I see now. This is an ed25519 pem? ', 'comment_created': datetime.datetime(2020, 7, 17, 23, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456777867, 'comment_body': 'Yep this note will be outdated and should be removed :D', 'comment_created': datetime.datetime(2020, 7, 18, 10, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456777956, 'comment_body': 'Yes correct, generated via: ` openssl genpkey -algorithm ed25519 -outform PEM -out carol`', 'comment_created': datetime.datetime(2020, 7, 18, 10, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456778028, 'comment_body': ""Currently, this test doesn't work. I need to rewrite it from scratch or have a second look on it."", 'comment_created': datetime.datetime(2020, 7, 18, 10, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456778362, 'comment_body': ""Actually it is not removing the PEM header/footer. If `k.KeyType` is `RSA` then the header and footer will be still in it.\r\nThat's the state of the current master and that's also how our layout file looks like. The whole RSA key is in the keyval object with footer and header, do we only remove footer and header for keyID generation? :eyes: I should have a second look on the securesystemslib implementation for generating the keyID"", 'comment_created': datetime.datetime(2020, 7, 18, 11, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456779033, 'comment_body': ""This is correct. The RSA key object has the whole pem block inside of the Public and Private attributes,  while the ed25519 key only has an hex encoded key string.. No idea about code re-usage. Most of this code is filling a struct. The strings.Trimspace function stays the same for all keys, but in case of RSA for example we need to generate a public pem block if we deal with a private key. That's why I meant it would make much more sense to either store everything as hex encoded string or use the pem format for everything :D But I will have another look on this, maybe I can shrink the code size a little bit more."", 'comment_created': datetime.datetime(2020, 7, 18, 11, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456779441, 'comment_body': 'Actually i tried to make it this way, but due to Go\'s type system it\'s rather difficult.\r\nI tried something like this:\r\n```\r\ncase ed25519.PublicKey:\r\n    key = key.(ed25519.PublicKey)\r\n```\r\n\r\nand then just setting the struct on the end with the set parameters, but Go\'s type system says ""no no"" :> because I would change the type of key from interface to ed25519.PublicKey. At the same time, functions like x509.MarshalPKIXPublicKey need a specific key type and can\'t work on an interface, except we specify the type.', 'comment_created': datetime.datetime(2020, 7, 18, 11, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456779944, 'comment_body': ""According to the  pem [documentation](https://golang.org/pkg/encoding/pem/#Decode), we are dropping the rest of the key data here. The rest is everything that couldn't be parsed as pem block."", 'comment_created': datetime.datetime(2020, 7, 18, 11, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456780322, 'comment_body': ""Yep, this code is repeated, but still slightly different. It's again because of our RSA key handling.\r\nWe need to decode the pem block for RSA, because we store RSA keys as PEM blocks in our key objects.\r\nFor ed25519 we can't use the pem.Decode() method because we are not dealing with pem blocks here, we are dealing with hex encoded key byte strings. Not sure what you mean with modules, but I could put the part in functions, but i have no idea if this would make sense if we call this function only at one place."", 'comment_created': datetime.datetime(2020, 7, 18, 11, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 458269178, 'comment_body': 'I just had another look on the `_get_keyid` function in the securesystemslib and the corresponding ` format_keyval_to_metadata` function. They definitely does not modify the elements in `public`. So our in-toto-golang implementation works the same  as the securesystemslib and in-toto python implementation. Resolving this convo for now. If you have more questions, feel free to ask :)', 'comment_created': datetime.datetime(2020, 7, 21, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 458272158, 'comment_body': 'I have added more documentation for this and removed the ""TODO"".', 'comment_created': datetime.datetime(2020, 7, 21, 17, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 458273455, 'comment_body': 'removed via dedicated commit', 'comment_created': datetime.datetime(2020, 7, 21, 17, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 459576485, 'comment_body': 'This can just be \r\n\r\n``` go\r\ndata, _ := pem.Decode([]byte(key.KeyVal.Public))\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 16, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'icholy', 'type': 'User'}, {'comment_id': 461941406, 'comment_body': 'Thanks a lot! @icholy I have applied your patch :100: ', 'comment_created': datetime.datetime(2020, 7, 28, 23, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466291915, 'comment_body': 'Do we still need frank.ec?', 'comment_created': datetime.datetime(2020, 8, 6, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466293007, 'comment_body': 'Feel free to remove in this PR.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466302995, 'comment_body': 'It would be nice to better distinguish if someone does not want to sign, or passes a badly formatted key  and thus should receive a helpful error message.\r\n\r\nMaybe `key != Key{}` would make it a little less ambiguous? \r\n\r\n ', 'comment_created': datetime.datetime(2020, 8, 6, 9, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466304252, 'comment_body': 'Looks like `GenerateSignature` now does the case handling and we can get rid of the switch here. :)', 'comment_created': datetime.datetime(2020, 8, 6, 10, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466305067, 'comment_body': 'I think this needs to be reverted.', 'comment_created': datetime.datetime(2020, 8, 6, 10, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466356831, 'comment_body': ""Thanks for making this consistent with json loading/dumping, and adapting the change in tests and the return-value check in `RunInspections`. ❤️ \r\n\r\nSo far this was not a problem, because we didn't do anything with stdout/stderr, and the only place where we checked the return-value was in `RunInspections`, where we knew that it was an int and came from `WaitErrToExitCode`.\r\n\r\nOn a related side-note, I do remember go unmarshaling json numbers as floats being a problem in the canonicalization function, see https://github.com/in-toto/in-toto-golang/commit/814100d385dabf507399ff183eba16e3071db142.\r\n\r\nAt any rate, I prefer that we keep not defining ByProducts as anything else than an `map[string]interface{}`, to conform with the opaque dictionary aspect in the specification.\r\n\r\nBut the way you did it now, it should not be a problem, right? Can you confirm that dumping a `float64` number with only zeros after the comma  to json, will omit the comma and zeros? I think that should be the case, otherwise `TestMetablockLoadDumpLoad` wouldn't work.\r\n\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 11, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466364540, 'comment_body': ""Not sure, actually we don't need it. I just needed it for generating the PEM key. I though it's a nice addition to have, but if you want I can remove it :)"", 'comment_created': datetime.datetime(2020, 8, 6, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466364804, 'comment_body': 'carol-invalid? or are you talking about the whole readme.md?', 'comment_created': datetime.datetime(2020, 8, 6, 12, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466366427, 'comment_body': ""I tried `key != Key{}` actually, it doesn't work with Go. See also: https://stackoverflow.com/questions/28447297/how-to-check-for-an-empty-struct\r\n\r\nKey is a struct with another custom type in it, therefore even `if key != Key` will not work properly, because not all fields in it are comparable.\r\n\r\nWe could add an additional field, as proposed in one of the answers in StackOverflow, or we add an additional function, that manually checks all values for their zero value.\r\n\r\nAny other suggestion?"", 'comment_created': datetime.datetime(2020, 8, 6, 12, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466367106, 'comment_body': 'Oh yes, this is indeed wrong. I really have to double check all documentation, before this gets merged', 'comment_created': datetime.datetime(2020, 8, 6, 12, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466367593, 'comment_body': 'Oh yep, this is true. I think we can completely remove the switch case and just call GenerateSignature directly', 'comment_created': datetime.datetime(2020, 8, 6, 12, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466373129, 'comment_body': 'I am not sure about this, but I think if you would manually insert a real floatnumber into this, we would end up with a float number in JSON, too. So Something like ""0.0000""\r\n\r\nThis only works, because we convert the return value to a float, as long as we always get an integer return value, this should be fine. I have checked Linux and Windows, they both return only integer values as return codes. I assume MacOS is doing the same (UNIX system).\r\n\r\nRight now I can\'t see another solution for this. I tried a different approach in an older commit: https://github.com/in-toto/in-toto-golang/pull/56/commits/e43522d1d932712b6198dc87c221ce1e54bfab7c\r\n\r\nBut this commit changed the produced signature  + it\'s using a struct with fixed fields instead of our opaque dictionary.\r\n\r\nIs there even a possible way to fill that Byproducts dictionary manually? I thought the only way to fill it, is calling the function and that returns integers as return codes for the subprocess calls.', 'comment_created': datetime.datetime(2020, 8, 6, 12, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466548840, 'comment_body': 'removed', 'comment_created': datetime.datetime(2020, 8, 6, 16, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466550827, 'comment_body': 'removed switch block.. calling GenerateSIgnature now directly.', 'comment_created': datetime.datetime(2020, 8, 6, 16, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466551747, 'comment_body': 'removed carol-invalid', 'comment_created': datetime.datetime(2020, 8, 6, 16, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466557285, 'comment_body': 'added more documentation + fixed this issue here', 'comment_created': datetime.datetime(2020, 8, 6, 17, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466565265, 'comment_body': ""Ok I have two other suggestions. We could either do:\r\n\r\n`if reflect.DeepEqual(key, Key{})` (this can be very resource wasting)\r\n\r\nor we use a new feature from Go 1.13:\r\n\r\n`if !reflect.ValueOf(key).IsZero()` this will check if key hasn't been initialized. I guess, this will be better in terms of performance, because we don't need to compare to structs"", 'comment_created': datetime.datetime(2020, 8, 6, 17, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466567848, 'comment_body': 'I have just pushed a patch, that uses `IsZero()` if we are unhappy with it, we can look for another solution.\r\nI will leave this comment open, so you can verify it :)', 'comment_created': datetime.datetime(2020, 8, 6, 17, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466569948, 'comment_body': 'Here is another idea I had.. we could add a line like: `float64(int(retVal))` just prior dumping/loading. That way we would make sure to always have a float64, without the parts behind the decimal point.. I am just not sure if this efficient or safe.', 'comment_created': datetime.datetime(2020, 8, 6, 17, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466913214, 'comment_body': ""Oh, I see now (just read the `openssl` manpage). I guess it's fine either way. But let's keep it removed. Less files, less clutter. :) "", 'comment_created': datetime.datetime(2020, 8, 7, 8, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466914455, 'comment_body': ""Yeah, I just meant that line and the key file. Please leave test/data/README.md, it's a really good idea to describe the test data a bit. As a matter of fact, I think the parts about how to create the different keys with `openssl` should even go into the general documentation for in-toto-golang. But we can do that in a different PR."", 'comment_created': datetime.datetime(2020, 8, 7, 8, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466916684, 'comment_body': 'Thanks for looking into it. I do like it better than just checking the keyid. What do you think?', 'comment_created': datetime.datetime(2020, 8, 7, 9, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466926832, 'comment_body': '>  Can you confirm that dumping a float64 number with only zeros after the comma to json, will omit the comma and zeros?\r\n\r\nLooks like I did remember this correctly. Here\'s a quick POC. So we should be good here.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""encoding/json""\r\n\t""fmt""\r\n)\r\n\r\nfunc main() {\r\n        // A float64\'s zeroes after the decimal point are omitted when dumped to JSON\r\n\tvar number float64 = 0.00\r\n\tjson_bytes, _ := json.Marshal(number)\r\n\tfmt.Println(string(json_bytes))\r\n\t\r\n        /// ... but non-zero values are shown indeed\r\n        number = 0.42\r\n\tjson_bytes, _ = json.Marshal(number)\r\n\tfmt.Println(string(json_bytes)) \r\n}\r\n```\r\nOutput:\r\n```\r\n0\r\n0.42\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 9, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466929318, 'comment_body': '> Here is another idea I had.. we could add a line like: float64(int(retVal)) just prior dumping/loading. That way we would make sure to always have a float64, without the parts behind the decimal point.. I am just not sure if this efficient or safe.\r\n\r\nI am against special handling of retVal in generic dumping/loading functions, because, as discussed above, we should be able to dump/load in-toto metadata whose byproducts dictionary has not retVal field.\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 9, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466932614, 'comment_body': 'Nit:\r\nWhat do you think about ""invalid key type for this key""?', 'comment_created': datetime.datetime(2020, 8, 7, 9, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466936080, 'comment_body': 'Nit: The comment probably dates from before you added ecdsa support, right? I suggest to just add a short comment at the top of the function body, saying that we treat different keys differently for interoperability reasons with securesystemslib and python-in-toto. What do you think?', 'comment_created': datetime.datetime(2020, 8, 7, 9, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466943151, 'comment_body': 'Nit:\r\n```suggestion\r\nParseKey tries to parse a PEM []byte slice using the following standards in the\r\ngiven order:```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466944326, 'comment_body': '```suggestion\r\n\t// pem.Decode returns the parsed pem block and a rest.\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466944574, 'comment_body': 'PEM decoding does not happen in ReadAll, right? \r\n\r\n```suggestion\r\n\t// Read key bytes\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466946348, 'comment_body': 'Can we check if we support the passed keyIdHashAlgorithms and scheme inputs?\r\n\r\nScheme we could actually check twice, once her if it is any supported scheme, and once below after the key type has been assessed, to check if the scheme is supported for the given type.\r\n\r\nWe should use module global constants for these values.\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 10, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466948058, 'comment_body': ""It would be nice to not hardcode the key type strings here but use constants instead, that are e.g. defined on top of this module. I'm also fine with just a `TODO/FIXME` comment here. :)"", 'comment_created': datetime.datetime(2020, 8, 7, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466948216, 'comment_body': '```suggestion\r\n\t\t// Note: We store the public key as PKCS8 key here, although the private key gets stored as PKCS1 key\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466949044, 'comment_body': 'This is actually not fully correct, please see my apologetic note in https://github.com/secure-systems-lab/securesystemslib/issues/251#issuecomment-669135196 about PKCS8.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466950573, 'comment_body': '```suggestion\r\nreturn a not initialized signature and an error. Possible errors are:\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466950928, 'comment_body': '```suggestion\r\n\t\t// pem.Decode returns the parsed pem block and a rest.\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466953354, 'comment_body': 'cliffhanger comment? :P', 'comment_created': datetime.datetime(2020, 8, 7, 10, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466955666, 'comment_body': 'It might enhance readability, if you create a small helper function for the 8 lines above, remove the inner switch, and just call that helper (and sha256.Sum256(signable)) twice.  What do you think? \r\n\r\nBtw. you could also use that helper in load key, where you have the same 8 lines. ', 'comment_created': datetime.datetime(2020, 8, 7, 10, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956312, 'comment_body': ""And ecdsa! (don't be modest :P)"", 'comment_created': datetime.datetime(2020, 8, 7, 10, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956406, 'comment_body': '```suggestion\r\nWhen encountering an RSA key, VerifySignature will decode the PEM block in the key\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956521, 'comment_body': '```suggestion\r\nWhen encountering an ed25519 key, VerifySignature will decode the hex string encoded\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956722, 'comment_body': 'And what will it do when encountering an ecdsa key?', 'comment_created': datetime.datetime(2020, 8, 7, 10, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956810, 'comment_body': '```suggestion\r\n\t\t// pem.Decode returns the parsed pem block and a rest.\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 10, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466957906, 'comment_body': 'See comment above in GenerateSignature about removing the inner switch and using a helper instead.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466958449, 'comment_body': 'We should also use those constants in {Generate, Verify}Signature once we have them.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466959731, 'comment_body': 'Right now it looks like we only support one scheme per key type.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466960147, 'comment_body': 'Can you add a note that we currently only support one scheme?', 'comment_created': datetime.datetime(2020, 8, 7, 10, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466960432, 'comment_body': 'Even though we only support one default signature scheme, we should check if the scheme on the key matches it.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466961499, 'comment_body': 'We should also take a look at the signature scheme of the key and fail if it is not one we support for verifying signatures.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466975128, 'comment_body': 'Cool, if we are fine with the current approach I can resolve this, right? :+1: ', 'comment_created': datetime.datetime(2020, 8, 7, 11, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466989974, 'comment_body': 'Yep, looks fine for me, too :+1: ', 'comment_created': datetime.datetime(2020, 8, 7, 11, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466994016, 'comment_body': 'fixed.', 'comment_created': datetime.datetime(2020, 8, 7, 11, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466994083, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 8, 7, 11, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 467031360, 'comment_body': '@lukpueh is this ok? Or shall I export them? I am also not sure about the name for them yet. \r\nI have replaced all strings for these constants now, except the ones in the tests. If you want I can touch the tests, too.', 'comment_created': datetime.datetime(2020, 8, 7, 13, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 467032314, 'comment_body': 'done, see newest comment for discussing the exact naming + exporting them or not exporting them.', 'comment_created': datetime.datetime(2020, 8, 7, 13, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 467128731, 'comment_body': 'I have added scheme and key type checking.. right now I am only calling this while setting the key components (only on loading.. we may want to call this while signing or validating, too.. right?).', 'comment_created': datetime.datetime(2020, 8, 7, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 467328584, 'comment_body': 'The latest commit should contain a first draft of this. The problem I see here:\r\n\r\n1. We don\'t use iotuil.ReadAll in the other functions, so we can\'t get this into the helper function. Therefore the lines get reduced on 5, instead of 8.\r\n2. I still see a need for the inner switch, because the inner switch makes sure that we use the right key for the right key operations. Right now it is possible to load a key with keyType ""rsa""  with a PKCS8-ECDSA key. In the current state, the inner switch will make sure, that we use the correct operation for the key. If we remove this inner type switch, we could run into a panic, if somebody creates a keyobject with non-matching keytype and key.\r\n\r\nI am not sure yet, if we should add such keyType/key checking to our functions in model, or if we should keep it this way and let the functions be as defensive as possible. What I could think of is: We add a check for this in our validateKey function in model.go and call this function in the first line of GenerateSignature and ValidateSignature. This way we would make sure, that we always operate on a valid object. What do you think?', 'comment_created': datetime.datetime(2020, 8, 7, 23, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469224915, 'comment_body': 'This looks good to me as is. Would you also add constants for the schemes?', 'comment_created': datetime.datetime(2020, 8, 12, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 469242614, 'comment_body': ""constants for the schemes are there, as a function. Because Go can't have slice or array constants :( "", 'comment_created': datetime.datetime(2020, 8, 12, 13, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469243648, 'comment_body': 'The constant schemes happened here: https://github.com/in-toto/in-toto-golang/pull/56/commits/b3da4964c48f7418004608a26c7258410fd70aa3', 'comment_created': datetime.datetime(2020, 8, 12, 13, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469244173, 'comment_body': 'I thought I use for the Schemes a slice instead of just a string, because we might want to have different schemes to choose from in the future..', 'comment_created': datetime.datetime(2020, 8, 12, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469244508, 'comment_body': 'This should be done in the latest commit.', 'comment_created': datetime.datetime(2020, 8, 12, 13, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469244976, 'comment_body': 'done in the latest commits', 'comment_created': datetime.datetime(2020, 8, 12, 13, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469245072, 'comment_body': 'done in the latest commit', 'comment_created': datetime.datetime(2020, 8, 12, 13, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469245301, 'comment_body': 'Type/Scheme-checking everything done in the latest commit :D ', 'comment_created': datetime.datetime(2020, 8, 12, 13, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470555984, 'comment_body': 'IIUC, this code branch will also never be reached, because you do a scheme check in validateKey. Why not use panic here but below for unreached keytype default case.', 'comment_created': datetime.datetime(2020, 8, 14, 10, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470556413, 'comment_body': 'See comment above about scheme default case never being reached. ', 'comment_created': datetime.datetime(2020, 8, 14, 10, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470556466, 'comment_body': 'See comment above about scheme default case never being reached. ', 'comment_created': datetime.datetime(2020, 8, 14, 10, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470556511, 'comment_body': 'See comment above about scheme default case never being reached. ', 'comment_created': datetime.datetime(2020, 8, 14, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470558527, 'comment_body': ""Validating the key feels a bit random. If at all I'd validate the key before you operate on it, but even that I wouldn't do in an internal function where you control the inputs."", 'comment_created': datetime.datetime(2020, 8, 14, 11, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470570723, 'comment_body': 'Minor nit: Could you maybe mention here that:\r\n- these key types are also automatically assigned to the KeyType field (""RSA"" should be lower case), and\r\n- which scheme string may be passed for which type\r\n?', 'comment_created': datetime.datetime(2020, 8, 14, 11, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470577075, 'comment_body': ""I still think it's better to check these two arguments directly here. Otherwise, as a developer, I have to go down the call stack until `generateKeyID` (also see inline comment there) and then further down the call stack of `validateKey` to know that the two arguments are indeed checked.\r\n"", 'comment_created': datetime.datetime(2020, 8, 14, 11, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470578131, 'comment_body': 'Just to make sure, do you mean that we cover all key types that are available in Go above?', 'comment_created': datetime.datetime(2020, 8, 14, 11, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470579472, 'comment_body': ""In [securesystemslib the hash algorithm matches the key size](https://github.com/secure-systems-lab/securesystemslib/blob/1682f553ca00b73bdee5a2f3ce961888dbd9bffa/securesystemslib/ecdsa_keys.py#L61-L64), which seems to be recommended. For the sake of interoperability we should do the same here and in VerifySignature.\r\n\r\nBut I'm also fine with only adding support for `ecdsaSha2nistp256` in this PR and adding `ecdsaSha2nistp384` (+ tests!) in a separate PR. "", 'comment_created': datetime.datetime(2020, 8, 14, 11, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470581195, 'comment_body': 'Nit: Ed25519 is one of multiple EdDSA signature schemes which uses SHA512 and Curve25519.', 'comment_created': datetime.datetime(2020, 8, 14, 11, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470582505, 'comment_body': 'See comment in GenerateSignature about ecdsa key size vs. hashing algorithm.', 'comment_created': datetime.datetime(2020, 8, 14, 12, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470582757, 'comment_body': 'See comment in GenerateSignature about this code comment. :)', 'comment_created': datetime.datetime(2020, 8, 14, 12, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470583214, 'comment_body': '```suggestion\r\n// This error will be thrown if a field in our Key struct is empty.\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 8, 14, 12, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470585394, 'comment_body': 'Nit: I don\'t think you can use vice-versa as noun. Maybe something like\r\n```suggestion\r\nvar ErrSchemeKeyTypeMismatch = errors.New(""the scheme and key type are not supported together"")\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 12, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470587185, 'comment_body': 'I think we still want to have a validatePubKey function to allow the user to check that e.g. a layout does not include private keys, etc.\r\n\r\nBut I suggest that we just ticketize this along with other concerns raised in https://github.com/in-toto/in-toto-golang/pull/56#issuecomment-672920535 and https://github.com/in-toto/in-toto-golang/pull/56#issuecomment-673358698. What do you think?', 'comment_created': datetime.datetime(2020, 8, 14, 12, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470591138, 'comment_body': '> ... everything, except the KeyVal struct\r\n\r\nYou do check `if key.KeyVal.Public == """"`.\r\nSome other related observations:\r\n- We still have the `validateKeyVal` function, but don\'t use it anymore in `validateKey` or anywhere else.\r\n- None of the validation functions is public, and thus if not used by our code, not usable.\r\n- We perform the same checks for public and private keys.\r\n\r\nAs mentioned above, I suggest we discuss how to further enhance the (key) validation functions in a separate ticket. Would you mind creating one?\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 14, 12, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470591550, 'comment_body': ""In the long run, I'd say we want a `validatePubkey` call here."", 'comment_created': datetime.datetime(2020, 8, 14, 12, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470600542, 'comment_body': ""Wouldn't this be a better fit for our set interface? :) Not saying you should do this now, but maybe worth a TODO note?\r\n"", 'comment_created': datetime.datetime(2020, 8, 14, 12, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470602966, 'comment_body': 'Nit: \r\n```suggestion\r\nfunc TestSetKeyComponentsErrors(t *testing.T) {\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 8, 14, 12, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470606508, 'comment_body': '```suggestion\r\n//  * ErrFailedPEMParsing (for example if we pass an EC key, instead a key in PKCS8 format)\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 12, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470607348, 'comment_body': ""shouldn't this be a `ErrKeyKeyTypeMismatch`?"", 'comment_created': datetime.datetime(2020, 8, 14, 12, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470610008, 'comment_body': '```suggestion\r\n\t\t\tt.Errorf(""Metablock.VerifySignature returned \'%s\', expected \'%s\'"",\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 13, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470610092, 'comment_body': '```suggestion\r\n\t\tt.Errorf(""Metablock.VerifySignature returned \'%s\', expected nil"", err)\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 13, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470612273, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 8, 14, 13, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470614824, 'comment_body': 'This one fails because the missing `KeyIdHashAlgorithms`, right? ', 'comment_created': datetime.datetime(2020, 8, 14, 13, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470615582, 'comment_body': 'I think this one also fails because of the missing `KeyIdHashAlgorithms` field, and not because of the ""invalid"" private key, right?', 'comment_created': datetime.datetime(2020, 8, 14, 13, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470616754, 'comment_body': 'There seems to be more of that below...', 'comment_created': datetime.datetime(2020, 8, 14, 13, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470860067, 'comment_body': 'Yes, this is correct. Right now we are covering all key types that are available in the Go x509 implementation.', 'comment_created': datetime.datetime(2020, 8, 14, 20, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470901489, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/075e168dd98cff2b41281e19b16773daaa937e9c', 'comment_created': datetime.datetime(2020, 8, 14, 23, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470901509, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/075e168dd98cff2b41281e19b16773daaa937e9c', 'comment_created': datetime.datetime(2020, 8, 14, 23, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470901532, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/075e168dd98cff2b41281e19b16773daaa937e9c', 'comment_created': datetime.datetime(2020, 8, 14, 23, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470901563, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/075e168dd98cff2b41281e19b16773daaa937e9c', 'comment_created': datetime.datetime(2020, 8, 14, 23, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905676, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905705, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905737, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905804, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905826, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905858, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905932, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905997, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470906555, 'comment_body': 'mh this one is interesting... it will fail only with `deabeef` instead of `deadbeef`, because then the map key and value keyID match. No idea, what we actually want to test here.', 'comment_created': datetime.datetime(2020, 8, 14, 23, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470907729, 'comment_body': 'This is being tracked here: https://github.com/in-toto/in-toto-golang/pull/56/commits/111dd2fd8b845f0778390118bdd70b710abb1ffc and here: https://github.com/in-toto/in-toto-golang/issues/66\r\n\r\nI will might have a look on this later, if I have time :)', 'comment_created': datetime.datetime(2020, 8, 14, 23, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470908413, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/5d51843c9d6282d730ed00d347d8d8851f385141', 'comment_created': datetime.datetime(2020, 8, 14, 23, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470908642, 'comment_body': 'Yep, I have to admit, that I only placed it there to satisfy the test coverage.\r\nWe should probably place it, at the end of the LoadKey function instead.', 'comment_created': datetime.datetime(2020, 8, 14, 23, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470914367, 'comment_body': 'Should be fixed in: https://github.com/in-toto/in-toto-golang/pull/56/commits/d1bf3c1906c25b9e7853bc82e253f58bef365cdc\r\n\r\nSee comment in GenerateSignature for discussion.', 'comment_created': datetime.datetime(2020, 8, 15, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470914870, 'comment_body': ""I removed the misleading support for ecdsa-sha2-nistp384. I think we are better with it, if I add this in a separate PR.\r\nShouldn't be that complicated, it's just modifying the switch a bit and choosing the correct hash algorithm depending on the key.Scheme. If we want to be paranoid, we should also combine this PR with the curve sanity checks, we have mentioned earlier."", 'comment_created': datetime.datetime(2020, 8, 15, 0, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470915403, 'comment_body': 'Yes, this is correct. Do we want this behavior? Or is the `keyIdHashAlgorithms` field optional? I remember, that we had another discussion around it, that all information is in the `scheme` field already..', 'comment_created': datetime.datetime(2020, 8, 15, 0, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470915607, 'comment_body': 'This is also correct.. These tests were artifacts from older tests, looks like I just adopted them, without checking them more carefully :S \r\n\r\nWhat do we do with these now?', 'comment_created': datetime.datetime(2020, 8, 15, 0, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470917243, 'comment_body': ""No, because we have an `ec private key` here.. this key format is not supported, because it's not a valid PKCS8 key format and therefore we fail earlier. We fail already during parsing the key, instead of checking if key and key type matches.\r\n\r\nWith an `ecdsa PKCS8` key instead, this would have been an ErrKeyKeyTypeMismatch."", 'comment_created': datetime.datetime(2020, 8, 15, 0, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471175221, 'comment_body': 'I wrote a small validatePublicKey function, that is basically just a wrapper around validateKey. Let me know what you think about it:\r\n\r\nhttps://github.com/in-toto/in-toto-golang/pull/56/commits/64b532593199d7898e3266519875ded0ebe8a09b', 'comment_created': datetime.datetime(2020, 8, 16, 23, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471175945, 'comment_body': 'Ticket is being tracked as: https://github.com/in-toto/in-toto-golang/issues/68', 'comment_created': datetime.datetime(2020, 8, 16, 23, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471176052, 'comment_body': 'pushed a first small draft for it here: https://github.com/in-toto/in-toto-golang/pull/56/commits/64b532593199d7898e3266519875ded0ebe8a09b\r\n\r\nThis works right now, but we might want to discuss key validation in general. See also: https://github.com/in-toto/in-toto-golang/issues/68', 'comment_created': datetime.datetime(2020, 8, 16, 23, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471384827, 'comment_body': 'Ping. Do you you disagree? Or did you plan on fixing this with https://github.com/in-toto/in-toto-golang/issues/68? At any rate, could you add a comment here that mentions that scheme and keyIdHashAlgorithms are checked via validateKey in setKeyComponents, and optionally point to #68?', 'comment_created': datetime.datetime(2020, 8, 17, 10, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471385226, 'comment_body': 'Related to https://github.com/in-toto/in-toto-golang/pull/56#discussion_r470558527', 'comment_created': datetime.datetime(2020, 8, 17, 10, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471394601, 'comment_body': 'Oh I see. Before we expected it to error on the missing key fields in validatePubKey. Now it chokes before that in validateLayout because of the id mismatch. But we already test that secenario right before that test (see ""deadbeef"" vs. ""livebeef"").\r\n\r\n I suggest to re-add the `d` and update the expected error message to `""empty field in key`"".', 'comment_created': datetime.datetime(2020, 8, 17, 10, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471407899, 'comment_body': ""In in-toto/sslib it's optional. I'm fine either way (for the time being), with a preference towards making it optional. In the long run we want to get rid of the field anyway.\r\n\r\nThe corresponding discussion can be found i.a. in https://github.com/theupdateframework/tuf/issues/848, but it's not related to the scheme field. \r\n\r\n(The discussion who might think of is about whether it needs both the `keytype` and `scheme` fields, i.a. see https://github.com/secure-systems-lab/securesystemslib/issues/251) "", 'comment_created': datetime.datetime(2020, 8, 17, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471409065, 'comment_body': 'Ideally we test what was tested before. For `ErrEmptyKeyField` errors this would mean to also take a look at the error message, in order to see which field was empty', 'comment_created': datetime.datetime(2020, 8, 17, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471424963, 'comment_body': 'Makes sense. We could build error structs for this, like described here: https://blog.golang.org/go1.13-errors\r\nor we wrap the key field into the error. What would you prefer? I am not sure if we could still use `errors.Is` with such error structs. I need to test this, but structs would be the more native way, I guess.', 'comment_created': datetime.datetime(2020, 8, 17, 11, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471433232, 'comment_body': ""I think we should try to wrap up this PR. Let's just check for error type `&&` string for now, and think about more sophisticated error handling in a follow up PR. :)"", 'comment_created': datetime.datetime(2020, 8, 17, 12, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471459136, 'comment_body': 'I made the field now optional in: https://github.com/in-toto/in-toto-golang/pull/56/commits/fa94594c5d8a77fbd96d5839efe8d121065e81f8', 'comment_created': datetime.datetime(2020, 8, 17, 12, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471460248, 'comment_body': 'I checked out the code:\r\n```go\r\n\tif key.KeyType == """" {\r\n\t\treturn fmt.Errorf(""%w: keytype"", ErrEmptyKeyField)\r\n\t}\r\n\tif key.KeyVal.Public == """" {\r\n\t\treturn fmt.Errorf(""%w: keyval.public"", ErrEmptyKeyField)\r\n\t}\r\n\tif key.Scheme == """" {\r\n\t\treturn fmt.Errorf(""%w: scheme"", ErrEmptyKeyField)\r\n\t}\r\n```\r\nwe actually do wrap the error here, already. Do you still want to check if the field got cached correctly? If so, we would need to do string compares again :S ', 'comment_created': datetime.datetime(2020, 8, 17, 12, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471466519, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/c25b937d9e9d022e5ecb8e82c6b56fa892dba6c7', 'comment_created': datetime.datetime(2020, 8, 17, 13, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471467328, 'comment_body': 'What do we do with this one here? If I put the validateKey at the end of the LoadKey functon, I am afraid we will need to refactor a few tests or might miss test coverage or do you want to move this to the validateKey issue, I have opened?', 'comment_created': datetime.datetime(2020, 8, 17, 13, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 473934422, 'comment_body': 'We can take another look at these in #68.', 'comment_created': datetime.datetime(2020, 8, 20, 12, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}]","[{'commit_sha': '14a8de0c47e110daea86652a1ed1c78d5b401616', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4969540585698215c5cfa70124edf24cffe32a80', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a8e933ac965682582cde998c86006548f1bb9b', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f9f94fbf70eca124490f148cee13b0bbd26e52', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6cb9c07d93fe1c06e90d0ad0ab9cb7d5410a213', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae5e82dcd0791e82f6638b2d119574ed858a66dc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd868be75bc4c15bbdae08aed30050c23989418c8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f54d2e5bc42ea617d21b012955b5d63c43534156', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b5413f4e13a2f98a0a9c686072ad8ce749b5ee1', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e49b8a7f5e507ea5d8caf8e9d5f6c7163b1f68', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe86f294708c63862581c2273d72797ddcaf6385', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ced5b8aa80f38dfc727eb1f796be83e155532f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '825355621a8a90265ce1aaab422365c391596116', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed01d7bbf672e95b5068f2531ce1ff73b31036b0', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c679bfc4328845331f7586d28c0e23abb02b18', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74133910dee0aaa66160c55fb1bc061b501b42bd', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5b38f7261af291eb84e0eee8c456d23c23a1fd0', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17dc020d5263b7e13d954b363fe97f2bd4507af6', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ef081e4b774ecada6706998f014fe3d5c1c1ef', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f468800580d4fd97d50a2515166b65876a68b03', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1074afdafc44ee965e1ad6ab5a292077a76efc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd2bd384e2e8b6fc0b21eb0bf7e5ae93dc8f7a5f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '263383166f928ad9128d125e2be64a895b48429e', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8a5023b819c61c1c8bfcf831f755aac4be7759f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa002a241106aa30f32e9dd4e925f191b02c9d34', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e92423381b0c73a74da9eb5159d803f91d048659', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c2415eb2c8ded3053464c4e040cacc7bf182ca7', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65a734ff1460ed809c36032ffb925125d6360832', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ee4dcaa1fbcda9f5f1d455a8456b3692096f888', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2d7fa6e16be950ce5bb8b98172f3e1b8d462ee', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '885c74311721c2c4ead5a6ad0329344cc70e61ff', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec46fd02509f6288fd4fe10c2826e2a7db780217', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81f089465a09334cff0d74a899b15b1c52a8947d', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc2a58e74c46ace69e594a1eea97e01cfb5760cc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c31d709cd693d3c04b290d7b56de083628c26480', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac76f055b22d99037300b7153abfa8207ae0c32', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2825c57cd2bab8c1111c17b4e1d835ba6fdcd20', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a28c13d3a6cebe6af577da9b9394083d1fdef03', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0acd97f0f15d5f8ccb962f73828f052e9203fb16', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e601861751286f0aaa8923e136d1a90c5c0a3815', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4379ac51aea7c9c708eb9a3e3c443fbb3c43063d', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad07bd6550206479257a97585363a909634ee1fc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd71ce001ab6abb536c53d59b73232b28fc8ad57d', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01da883b36293be003f7d9c6e741cb75fbcc5d70', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e43522d1d932712b6198dc87c221ce1e54bfab7c', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adfdd99e855517a3a09ec688c393d48df52dedc8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '455f141a24b572df55f209b2946800aa35abe9b9', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4a40aede9b457b0c61f5301f58bd4fa01b1dea0', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84c9874b3db598e4040290bf187fe76c186d0677', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7c8f580b1cf1a6b2b623c457ee2c97172c06e2', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b8743dde651a999148c5a3b51ea1e87d946c9cc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a275a2592059d0f51c3cc2faca33341d0b9e39d5', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4910972a460256bf45d620c1ec1f1b928c9e5908', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79383c9002f2d9afd7dfa0daa5a769d8e4ed1169', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af0cf4cc8dec08df670d51c1a7ec62beab49bc6a', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd1a6b6f63749d40774b8d714c6aedaa10abe40b', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d7b3d257a5acec8b125dfea4aaf26706de30925', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a3d27475c252d68201965db2faec8da11c6d671', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '089dd4c849d16739c265dd1ae307bd92e6f77bd8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e22b3cd214cfbed23540151ac36bdc4b4d7c2580', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db25b733576b0b2d50458635675cd795414351f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4ee8aebe7cbf4dd452c639f1145d20915bef596', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9e328aad529346973d5dd43bae6bde1877a016f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a7e225729ce760f1bca7bdb2e69192549a1c618', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bce89f4acad06384b1ac24c891390dfd5108549', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a79ec008d036bde465220df2c90d2319149bf7', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3da4964c48f7418004608a26c7258410fd70aa3', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c426bcb22e8e8e05765a005b567dfbd34cde2cc4', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cb021ac8b83d71bb44274f346a1cf8297767472', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d191d12f81cecf25b9f7d8b2c0fc208e2e9bb9', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52fe163ffbe1c229f1fa5ec98f4ea5c8a8d48bd9', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce8e4c5bc03e815ed169fde2602668d165203d7', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ee80812247770837b8d546f8111d6cfdd2a830', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e33856836eb0a05bdc528e3ad9b78a2c092c64f1', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c4832c08b9a4cc41a1ba937bdcbcd562ea3e59c', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dddc66d36da7568ebcd4cd0f257dbf8832fe304', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '075e168dd98cff2b41281e19b16773daaa937e9c', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '236acb803e2318f44e0c7c32c717e63729c0dd42', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111dd2fd8b845f0778390118bdd70b710abb1ffc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d51843c9d6282d730ed00d347d8d8851f385141', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1bf3c1906c25b9e7853bc82e253f58bef365cdc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b532593199d7898e3266519875ded0ebe8a09b', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa94594c5d8a77fbd96d5839efe8d121065e81f8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac47be58ccf237d0b6ede4df2c06148306ecef6', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c25b937d9e9d022e5ecb8e82c6b56fa892dba6c7', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70fdec2c35fa0c35f3482bfdef52bc1f9c03ed0b', 'committer_username': 'lukpueh', 'committer_name': 'Lukas Pühringer', 'committer_email': None, 'commit_date': datetime.datetime(2011, 1, 29, 1, 30, 4, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
422496178,use tabs for code indentation in multi-line comments,"**Fixes issue #**:

https://github.com/in-toto/in-toto-golang/issues/18

**Description of pull request**:

As mentioned in https://github.com/in-toto/in-toto-golang/issues/18 we have used spaces instead of tabs for code indentation in multi-line comments.
With this commit we are going to use tabs instead of spaces.
This fixes bad formatting in our go documentation.

**Please verify and check that the pull request fulfills the following
requirements**:

- [ ] Tests have been added for the bug fix or new feature
- [ ] Docs have been added for the bug fix or new feature
- [x] Docs have been reformatted


",True,51,https://api.github.com/repos/in-toto/in-toto-golang/pulls/51,https://github.com/in-toto/in-toto-golang/pull/51,closed,104,86,5,1,2,0,0,0,[],2020-05-25 00:47:03+00:00,2020-05-27 11:20:33+00:00,210810.0,"2 days, 10:33:30",[],"[{'commit_sha': '4fa20c08b0110d67435824ed48efcbb4eadfef22', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
424580301,handle unhandled errors,"*Please fill in the fields below to submit a pull request.  The more
information that is provided, the better.*

**Fixes issue #**:

This is not yet related to an issue. Shall I open an issue for it?


**Description of pull request**:

This PR fixes a few golang linter warnings like unhandled errors.
It's work in progress.


**Please verify and check that the pull request fulfills the following
requirements**:

- [ ] Tests have been added for the bug fix or new feature
- [ ] Docs have been added for the bug fix or new feature

New tests shouldn't be necessary.

",True,52,https://api.github.com/repos/in-toto/in-toto-golang/pulls/52,https://github.com/in-toto/in-toto-golang/pull/52,closed,171,64,16,12,25,10,0,0,[],2020-05-28 15:54:54+00:00,2020-06-05 12:40:00+00:00,679506.0,"7 days, 20:45:06","[{'comment_id': 434431676, 'comment_body': 'I think I can remove the error handling in this area, according to the comment, right?', 'comment_created': datetime.datetime(2020, 6, 3, 9, 25, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 434433493, 'comment_body': ""My problem right now is in error handling like this. For me it makes sense to at least inform the  user about an error here, but we are unable to properly test error handling for it. At least I don't know how to provoke a keyFile.Close() error"", 'comment_created': datetime.datetime(2020, 6, 3, 9, 29, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 434433973, 'comment_body': ""I have increased go version to go 1.14, I hope that's okay."", 'comment_created': datetime.datetime(2020, 6, 3, 9, 29, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 434441898, 'comment_body': ""That's fine, we really don't have to emulate the error on close. If necessary you can reduce the required coverage in the test suite.\r\n\r\nAlso, is logging the error the right approach here? Wouldn't it be better to wrap the close error into the error returned by LoadPublicKey?"", 'comment_created': datetime.datetime(2020, 6, 3, 9, 42, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 434442114, 'comment_body': 'Absolutely! Thanks :)', 'comment_created': datetime.datetime(2020, 6, 3, 9, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 434444124, 'comment_body': 'Mh yes, makes sense. but how would I wrap this into the error returned by the LoadPublicKey() func? Is `defer` passing the error through? I mean If I would do `return err` inside of this anonymous function, would it get passed?', 'comment_created': datetime.datetime(2020, 6, 3, 9, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 434450222, 'comment_body': 'Looks like the `errors` package allows you to do such things. Check out [this article](https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-iii-36a1ab3d6ef1) and search for *""You can also use this package to wrap multiple errors""* ', 'comment_created': datetime.datetime(2020, 6, 3, 9, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 434452058, 'comment_body': 'removed in newest commit', 'comment_created': datetime.datetime(2020, 6, 3, 9, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 434457355, 'comment_body': 'Ok I can just assign to the err variable from the upper function, like this:\r\nhttps://play.golang.org/p/BeGOyTH7yPE\r\n\r\nI will do this :)', 'comment_created': datetime.datetime(2020, 6, 3, 10, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 434460191, 'comment_body': 'Done', 'comment_created': datetime.datetime(2020, 6, 3, 10, 14, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}]","[{'commit_sha': 'd85f78ba0f0ae15210a242d228e2b963a77a0ba8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33c7f9ac3fc8ce31b495a65c67ae35b79dbc271d', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e9bf427bf52e0c27c441b6bbc9af21cc08f7dde', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c26ce6282973d3ca095a0e63324ae82a4073155c', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10f75ee2a1f732f8ac7fdfb257e50bb25b8b32a9', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64397ae20181877710f1c9cae1039c3f9bc6918c', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f37e7b176317991611f6cd1894b60caeb0bd16e9', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3fc5d1a234e22bfafbb3c6119bbe1f228a3e54f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6609d8e9f8ecbde919d0de0f98d93db4c2dfe7b8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bb7e3517eb201ad59e0daf84b67bb60a2eadf66', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e71a260899e6f9e795f8f73f365b1463dc5a255e', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dc522436e28b632678d5720f23c386b9fd7851d', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
428668311,implement symlink functionality with filepath.EvalSymlinks(),"*Please fill in the fields below to submit a pull request.  The more
information that is provided, the better.*

**Fixes issue #**:
https://github.com/in-toto/in-toto-golang/issues/32
as well as PR https://github.com/in-toto/in-toto-golang/pull/37

**Description of pull request**:
We are using filepath.EvalSymlinks() here, because it will
give us the last element in a symlink chain.
Therefore we don't need to worry about stack size
or recursion cycles.

**Please verify and check that the pull request fulfills the following
requirements**:

- [x] Tests have been added for the bug fix or new feature
- [x] Docs have been added for the bug fix or new feature


",True,55,https://api.github.com/repos/in-toto/in-toto-golang/pulls/55,https://github.com/in-toto/in-toto-golang/pull/55,closed,248,7,4,13,18,32,0,0,[],2020-06-05 18:59:39+00:00,2020-06-23 09:08:27+00:00,1519728.0,"17 days, 14:08:48","[{'comment_id': 438644692, 'comment_body': 'Would you mind mentioning `depth` and the maximum you chose in the function docstring?', 'comment_created': datetime.datetime(2020, 6, 11, 9, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 438646212, 'comment_body': ""Please wrap lines at 80 characters here and elsewhere in your diff. \r\n\r\nFWIW, I think it's okay to exceed 80 in some cases, like in the signature of RecordArtifacts, where wrapping wouldn't increase readability, but generally I prefer if we stayed below 80. For comments this shouldn't be a problem."", 'comment_created': datetime.datetime(2020, 6, 11, 9, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 438656759, 'comment_body': 'According to golint the convention for custom errors is `ErrFoo`, maybe change to `ErrSymCycle`?', 'comment_created': datetime.datetime(2020, 6, 11, 9, 24, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 438667818, 'comment_body': 'Just wanted to ask you to add spaces around `&` to easily distinguish the bitwise AND from the address operator, but it looks like gofmt removes those spaces. :/\r\nWould you mind adding a comment along the lines of *""Check if it is a symlink using the file mode type bitmask""*?\r\n\r\nMinor suggestion: You could shorten the existing comment by mentioning `filepath.EvalSymlinks` only once. ;)', 'comment_created': datetime.datetime(2020, 6, 11, 9, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 438678516, 'comment_body': 'Is this comment still true? How does this it relate to your discovery in https://github.com/in-toto/in-toto-golang/pull/55#issuecomment-641152088?', 'comment_created': datetime.datetime(2020, 6, 11, 10, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 438679509, 'comment_body': 'Why 10?', 'comment_created': datetime.datetime(2020, 6, 11, 10, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 438687828, 'comment_body': 'Would you mind adding a test for an indirect circle? E.g.\r\n/bar/foo.sym --> /foo/ \r\n/foo/bar.sym --> /bar/\r\n\r\n', 'comment_created': datetime.datetime(2020, 6, 11, 10, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 439411862, 'comment_body': 'Oh yes, this makes sense. Totally forgot about this, thanks.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439411966, 'comment_body': 'Yep, will do', 'comment_created': datetime.datetime(2020, 6, 12, 13, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439414454, 'comment_body': ""It's strange that Golang provides a `filemode.isDir()` function, but no `filemode.isSymlink()` function. This is something I could try to add to Golang in the future ^^\r\n\r\nFor now I will add a comment + shorten the comment about filepath.EvalSymlinks"", 'comment_created': datetime.datetime(2020, 6, 12, 13, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439414862, 'comment_body': 'This will get updated, too', 'comment_created': datetime.datetime(2020, 6, 12, 13, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439415360, 'comment_body': '10 is just an artificial number I have inherit from the former PR. We should actually think about a better number here or at least a good description, why we choose 10 and not 9 or 11 or 9000.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439415572, 'comment_body': 'This makes sense', 'comment_created': datetime.datetime(2020, 6, 12, 13, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439428136, 'comment_body': 'This should be solved.. I just wonder if we can set a default value for parameters like in Python:\r\n`def RecordArtifacts(paths, depth=0):`\r\n\r\nI will google a bit and see if this is manageable, because otherwise I am afraid that always calling this function with depth=0 is very error prone. People really need to make sure to read the docs.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 46, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439428602, 'comment_body': 'This should be fixed.. I leave resolving the conversation to you, just in case you found something else or I misunderstood you.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439428650, 'comment_body': 'This should be fixed.. I leave resolving the conversation to you, just in case you found something else or I misunderstood you.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 47, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439428762, 'comment_body': 'This should be fixed.. I leave resolving the conversation to you, just in case you found something else or I misunderstood you.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439428836, 'comment_body': 'This should be fixed.. I leave resolving the conversation to you, just in case you found something else or I misunderstood you.', 'comment_created': datetime.datetime(2020, 6, 12, 13, 48, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439433910, 'comment_body': ""We could set the go runtime stack size here. Problem: It's different for the architecture. On Linux 64 bit it's usually 1GB.\r\n\r\nBut I have maybe a better solution, but this would need some more work for this PR.\r\nWhat about using a history of visited symlinks? We could just add a visited symlink to a slice (lookup time O(n)) or hashset (`map[string]struct{}` for lookup time of O(1)). If we encounter a symlink twice, we just ignore it. What do you think about this, @lukpueh?"", 'comment_created': datetime.datetime(2020, 6, 12, 13, 56, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439697677, 'comment_body': ""I've added another test for your indirect cycle."", 'comment_created': datetime.datetime(2020, 6, 13, 1, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439697799, 'comment_body': ""I had to try this. We are now using a symlink history via a global hashset variable. This has better performance, because we don't need to cycle n times, before detecting a symlink.\r\nInstead of we are checking if we have seen this symlink already, if so, we will break the recursion and error our Symlink Cycle error.\r\n\r\nFeel free to check it out."", 'comment_created': datetime.datetime(2020, 6, 13, 1, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 440012567, 'comment_body': ""I fear go does not have that feature. But I wouldn't worry too much about usage mistakes. If you pass a parameter to a function, you usually want to know what it is for, right? Also, although we export this function as public API, its mostly for internal use by `InTotoRun`."", 'comment_created': datetime.datetime(2020, 6, 15, 8, 30, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 440014430, 'comment_body': ' I was hoping you would implement something like this, because I think the depth parameter would have failed detecting some indirect circles. Thanks for putting more efforts into this, @shibumi! 🥇', 'comment_created': datetime.datetime(2020, 6, 15, 8, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 440030256, 'comment_body': '```suggestion\r\n\t\t\t\t// iterations. infoMode()&os.ModeSymlink uses the file\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 9, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 440030887, 'comment_body': '```suggestion\r\n\t\t\t\t// type bitmask to check for a symlink.\r\n```', 'comment_created': datetime.datetime(2020, 6, 15, 9, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 440033984, 'comment_body': 'FYI, we have a nice custom `Set` implementation with `Add` and `Has` methods in `util.go`. :) I suggest you use that.', 'comment_created': datetime.datetime(2020, 6, 15, 9, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 440196877, 'comment_body': 'Ah cool, yes this makes sense. Would increase the readability a lot.', 'comment_created': datetime.datetime(2020, 6, 15, 14, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 443087027, 'comment_body': ""I've implemented a wrapper around recordArtifacts + use the Set from utils."", 'comment_created': datetime.datetime(2020, 6, 20, 0, 55, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 443637317, 'comment_body': 'Do we want to support a use-case where the visitedSymlinks Set is initialized outside of this function? I feel like (re-)initializing it no matter what, or raising an error if it is already initialized come both more expected. ', 'comment_created': datetime.datetime(2020, 6, 22, 15, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 443666871, 'comment_body': ""We could allow passing the set to the function and if this set is nil we can initialize a global set, but do we still need a global variable and a wrapper if we allow this? And If we allow passing a set to the function, shouldn't the function return a set then?\r\n\r\nWe could also work with Go receivers (I have no idea if this is supported by our set. It's just a map with empty structs as values.. It seems to be possible according to: https://stackoverflow.com/questions/49176090/map-as-a-method-receiver):\r\n```go\r\nfunc (visitedSymlinks Set) RecordArtifacts(...)\r\n```\r\n"", 'comment_created': datetime.datetime(2020, 6, 22, 16, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 443669034, 'comment_body': ""Ah ok.. Now I understood your second sentence, sorry. Yes it makes sense to always initialize it no matter what. Checking for nil, is wrong here, because we want to make sure that the set is always fresh initialized. I think this is an artifact from renaming the methods.. this would have made sense if we call RecordArtifacts (the wrapper) recursively, but we don't."", 'comment_created': datetime.datetime(2020, 6, 22, 16, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 443669197, 'comment_body': 'I am going to fix this', 'comment_created': datetime.datetime(2020, 6, 22, 16, 6, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}]","[{'commit_sha': '6d2694f99a103e91b626393eeb5cdc0aa472260f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8ba5940b010d3bb471c4d6a9a017f2ac1e1f74e', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0549c85da744b85737739c1e592b1584d23fef92', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ea3a24b3877e4e094a187e1ee85278367a3325a', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a907865d1e32cee776e9e37a60050a06a05f42', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8c776093b525384dc70074628f933e2c3fbd65f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc2e14acb74ca27682a3ff636f45ae72ffc2bf32', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36bbce83c7cc2c934cfaba4cd462a0025477f3d8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42f8875392d76f6449ccff4ccf6a6ae4cdfc5882', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '304e8ea4f55cff33e7ea713c247f54b1968c11f5', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e877f711891f1108cdcc2921c92d2408bdbcc15', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4534178a701d2acbdf593a5c9420a261a21aeb4', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a845b1403550cb15bd9f3b4a81adc4519c692d2', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
438443149,in-toto-run implementation,"**The following PR is part of the Google Summer of Code 2020 program**

**Fixes issue #54**:
This PR intents to fix Issue #54 

**Description of pull request**:
The goal of this PR is the in-toto-run implementation similar to our reference implementation in python.

**Please verify and check that the pull request fulfills the following
requirements**:

- [X] Tests have been added for the bug fix or new feature
- [X] Docs have been added for the bug fix or new feature

",True,56,https://api.github.com/repos/in-toto/in-toto-golang/pulls/56,https://github.com/in-toto/in-toto-golang/pull/56,closed,1766,582,21,86,77,164,0,0,[],2020-06-23 09:30:22+00:00,2020-08-20 12:41:57+00:00,5022695.0,"58 days, 3:11:35","[{'comment_id': 450809722, 'comment_body': 'Might be worth mentioning that we generate the keyid exactly as we do in securesystemslib for interoperability.', 'comment_created': datetime.datetime(2020, 7, 7, 11, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 450810272, 'comment_body': '```suggestion\r\nIf no RSA Private key can be parsed, the first return value is nil and the\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 11, 59, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 450810895, 'comment_body': 'Oh looks like you copy-pasted that typo from my `ParseRSAPublicKeyFromPEM` docstring. Could you fix it there as well?', 'comment_created': datetime.datetime(2020, 7, 7, 12, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 450811623, 'comment_body': 'Minor nit:\r\n```suggestion\r\nformatted file, and instantiates and returns the corresponding RSA private key.\r\nIf the no RSA private key can be parsed, the first return value is nil and the\r\n```', 'comment_created': datetime.datetime(2020, 7, 7, 12, 1, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452007366, 'comment_body': 'And if not successful?', 'comment_created': datetime.datetime(2020, 7, 9, 7, 6, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452007819, 'comment_body': 'Please document the return value (nil on success, error otherwise) here and generally in your new function docstrings.', 'comment_created': datetime.datetime(2020, 7, 9, 7, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452044619, 'comment_body': ""It's pretty convenient to fall back to PKCS1 here, but it also feels quite brittle to rely on the error message for case handling.\r\n\r\nMoreover, looking at the sources of `x5009.ParsePKCS8PrivateKey` and `asn1.Unmarshal`, the suggestion in the error message seems more like a wild than an educated guess.\r\n\r\nI'm fine with trying different parse functions, but I would just base it on the error and not on the error message. Btw. you could also try ParseECPrivateKey. :) What do you think?\r\n\r\n"", 'comment_created': datetime.datetime(2020, 7, 9, 8, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452050342, 'comment_body': 'Note that this will format the public key in PKCS8, even if the private key was loaded as PKCS1 and is stored as such in `k.KeyVal.Private`. From a quick look at sslib, we also do it over there. I think this should at least be documented here and ideally in sslib. Would you mind adding a note to https://github.com/secure-systems-lab/securesystemslib/issues/251?\r\n', 'comment_created': datetime.datetime(2020, 7, 9, 8, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 452203443, 'comment_body': ""The common used `errors.Is(err, ErrPKCS1PrivKey)` does not work, because the library provides no such error. Therefore the only way to differ the error is via an error message. Is this correct and what you are asking for?\r\n\r\n> I'm fine with trying different parse functions, but I would just base it on the error and not on the error message. Btw. you could also try ParseECPrivateKey. :) What do you think?\r\n\r\nis EC == ECDSA? Isn't this covered with PKCS8?"", 'comment_created': datetime.datetime(2020, 7, 9, 13, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452203674, 'comment_body': 'oh dear this definitely needs some documentation! good catch', 'comment_created': datetime.datetime(2020, 7, 9, 13, 8, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452207007, 'comment_body': 'the doc strings definitely need some love. That was a little bit in a hurry yesterday :D ', 'comment_created': datetime.datetime(2020, 7, 9, 13, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452281624, 'comment_body': ""I think I got what you mean now. I just test on err != nil right now. This has made the whole section more readable, however I think I should make an own function out of this and maybe use a dispatch table for calling of these parsing functions in a row?\r\n\r\nWhat do you think? If we keep adding parsing functions like ParseECPrivateKey we will have more and more nesting with the current approach, it looks horrible, but it's easy to read. A dispatch table would be more complex to read but it looks nicer? Not sure about this. What do you think @lukpueh?"", 'comment_created': datetime.datetime(2020, 7, 9, 14, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452281989, 'comment_body': 'I have added a comment in the Go implementation. I will also note this in the securesystemslib issue.', 'comment_created': datetime.datetime(2020, 7, 9, 14, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 452373688, 'comment_body': 'nevermind.. moved the part to a separate function.', 'comment_created': datetime.datetime(2020, 7, 9, 17, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456665023, 'comment_body': ""so this is removing the PEM header/footer, and thus will change the resulting keyid no? I know there's conversation around it, but I just wanted to make sure I'm not misunderstanding what this change does."", 'comment_created': datetime.datetime(2020, 7, 17, 20, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456709559, 'comment_body': 'is the edgecase on the rsa case the reason for this repetition? could we probably try to increase code reuse? (e.g., by setting a function pointer to treat the private key bytes and then do the rest on a catch-all behavior for both cases.', 'comment_created': datetime.datetime(2020, 7, 17, 23, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456709998, 'comment_body': 'same here, could we set the parameters and then call ""set key components"" afterwards? It\'d be easier to grok what the difference between these cases are.', 'comment_created': datetime.datetime(2020, 7, 17, 23, 11, 2, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456710994, 'comment_body': 'what type of ""key data"" are we talking about? could we add at least an example in the comments? It\'d help anybody who wants to work this in the future to scope what they are getting into.', 'comment_created': datetime.datetime(2020, 7, 17, 23, 15, 42, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456713489, 'comment_body': ""I see this code is repeated. I'm also curious to know if ed25519 would work with pem.Decode?"", 'comment_created': datetime.datetime(2020, 7, 17, 23, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456713722, 'comment_body': ""I'm starting to think this module could be split in keytype modules + an overarching module to plug the right submodule after key detection...."", 'comment_created': datetime.datetime(2020, 7, 17, 23, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456713852, 'comment_body': 'what are these commented tests about?', 'comment_created': datetime.datetime(2020, 7, 17, 23, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456714002, 'comment_body': ""Isn't this note outdated when this PR is in? :)"", 'comment_created': datetime.datetime(2020, 7, 17, 23, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456714260, 'comment_body': 'ah, I see now. This is an ed25519 pem? ', 'comment_created': datetime.datetime(2020, 7, 17, 23, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'SantiagoTorres', 'type': 'User'}, {'comment_id': 456777867, 'comment_body': 'Yep this note will be outdated and should be removed :D', 'comment_created': datetime.datetime(2020, 7, 18, 10, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456777956, 'comment_body': 'Yes correct, generated via: ` openssl genpkey -algorithm ed25519 -outform PEM -out carol`', 'comment_created': datetime.datetime(2020, 7, 18, 10, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456778028, 'comment_body': ""Currently, this test doesn't work. I need to rewrite it from scratch or have a second look on it."", 'comment_created': datetime.datetime(2020, 7, 18, 10, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456778362, 'comment_body': ""Actually it is not removing the PEM header/footer. If `k.KeyType` is `RSA` then the header and footer will be still in it.\r\nThat's the state of the current master and that's also how our layout file looks like. The whole RSA key is in the keyval object with footer and header, do we only remove footer and header for keyID generation? :eyes: I should have a second look on the securesystemslib implementation for generating the keyID"", 'comment_created': datetime.datetime(2020, 7, 18, 11, 3, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456779033, 'comment_body': ""This is correct. The RSA key object has the whole pem block inside of the Public and Private attributes,  while the ed25519 key only has an hex encoded key string.. No idea about code re-usage. Most of this code is filling a struct. The strings.Trimspace function stays the same for all keys, but in case of RSA for example we need to generate a public pem block if we deal with a private key. That's why I meant it would make much more sense to either store everything as hex encoded string or use the pem format for everything :D But I will have another look on this, maybe I can shrink the code size a little bit more."", 'comment_created': datetime.datetime(2020, 7, 18, 11, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456779441, 'comment_body': 'Actually i tried to make it this way, but due to Go\'s type system it\'s rather difficult.\r\nI tried something like this:\r\n```\r\ncase ed25519.PublicKey:\r\n    key = key.(ed25519.PublicKey)\r\n```\r\n\r\nand then just setting the struct on the end with the set parameters, but Go\'s type system says ""no no"" :> because I would change the type of key from interface to ed25519.PublicKey. At the same time, functions like x509.MarshalPKIXPublicKey need a specific key type and can\'t work on an interface, except we specify the type.', 'comment_created': datetime.datetime(2020, 7, 18, 11, 16, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456779944, 'comment_body': ""According to the  pem [documentation](https://golang.org/pkg/encoding/pem/#Decode), we are dropping the rest of the key data here. The rest is everything that couldn't be parsed as pem block."", 'comment_created': datetime.datetime(2020, 7, 18, 11, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 456780322, 'comment_body': ""Yep, this code is repeated, but still slightly different. It's again because of our RSA key handling.\r\nWe need to decode the pem block for RSA, because we store RSA keys as PEM blocks in our key objects.\r\nFor ed25519 we can't use the pem.Decode() method because we are not dealing with pem blocks here, we are dealing with hex encoded key byte strings. Not sure what you mean with modules, but I could put the part in functions, but i have no idea if this would make sense if we call this function only at one place."", 'comment_created': datetime.datetime(2020, 7, 18, 11, 27, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 458269178, 'comment_body': 'I just had another look on the `_get_keyid` function in the securesystemslib and the corresponding ` format_keyval_to_metadata` function. They definitely does not modify the elements in `public`. So our in-toto-golang implementation works the same  as the securesystemslib and in-toto python implementation. Resolving this convo for now. If you have more questions, feel free to ask :)', 'comment_created': datetime.datetime(2020, 7, 21, 17, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 458272158, 'comment_body': 'I have added more documentation for this and removed the ""TODO"".', 'comment_created': datetime.datetime(2020, 7, 21, 17, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 458273455, 'comment_body': 'removed via dedicated commit', 'comment_created': datetime.datetime(2020, 7, 21, 17, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 459576485, 'comment_body': 'This can just be \r\n\r\n``` go\r\ndata, _ := pem.Decode([]byte(key.KeyVal.Public))\r\n```', 'comment_created': datetime.datetime(2020, 7, 23, 16, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'icholy', 'type': 'User'}, {'comment_id': 461941406, 'comment_body': 'Thanks a lot! @icholy I have applied your patch :100: ', 'comment_created': datetime.datetime(2020, 7, 28, 23, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466291915, 'comment_body': 'Do we still need frank.ec?', 'comment_created': datetime.datetime(2020, 8, 6, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466293007, 'comment_body': 'Feel free to remove in this PR.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466302995, 'comment_body': 'It would be nice to better distinguish if someone does not want to sign, or passes a badly formatted key  and thus should receive a helpful error message.\r\n\r\nMaybe `key != Key{}` would make it a little less ambiguous? \r\n\r\n ', 'comment_created': datetime.datetime(2020, 8, 6, 9, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466304252, 'comment_body': 'Looks like `GenerateSignature` now does the case handling and we can get rid of the switch here. :)', 'comment_created': datetime.datetime(2020, 8, 6, 10, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466305067, 'comment_body': 'I think this needs to be reverted.', 'comment_created': datetime.datetime(2020, 8, 6, 10, 3, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466356831, 'comment_body': ""Thanks for making this consistent with json loading/dumping, and adapting the change in tests and the return-value check in `RunInspections`. ❤️ \r\n\r\nSo far this was not a problem, because we didn't do anything with stdout/stderr, and the only place where we checked the return-value was in `RunInspections`, where we knew that it was an int and came from `WaitErrToExitCode`.\r\n\r\nOn a related side-note, I do remember go unmarshaling json numbers as floats being a problem in the canonicalization function, see https://github.com/in-toto/in-toto-golang/commit/814100d385dabf507399ff183eba16e3071db142.\r\n\r\nAt any rate, I prefer that we keep not defining ByProducts as anything else than an `map[string]interface{}`, to conform with the opaque dictionary aspect in the specification.\r\n\r\nBut the way you did it now, it should not be a problem, right? Can you confirm that dumping a `float64` number with only zeros after the comma  to json, will omit the comma and zeros? I think that should be the case, otherwise `TestMetablockLoadDumpLoad` wouldn't work.\r\n\r\n\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 11, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466364540, 'comment_body': ""Not sure, actually we don't need it. I just needed it for generating the PEM key. I though it's a nice addition to have, but if you want I can remove it :)"", 'comment_created': datetime.datetime(2020, 8, 6, 12, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466364804, 'comment_body': 'carol-invalid? or are you talking about the whole readme.md?', 'comment_created': datetime.datetime(2020, 8, 6, 12, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466366427, 'comment_body': ""I tried `key != Key{}` actually, it doesn't work with Go. See also: https://stackoverflow.com/questions/28447297/how-to-check-for-an-empty-struct\r\n\r\nKey is a struct with another custom type in it, therefore even `if key != Key` will not work properly, because not all fields in it are comparable.\r\n\r\nWe could add an additional field, as proposed in one of the answers in StackOverflow, or we add an additional function, that manually checks all values for their zero value.\r\n\r\nAny other suggestion?"", 'comment_created': datetime.datetime(2020, 8, 6, 12, 10, 22, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466367106, 'comment_body': 'Oh yes, this is indeed wrong. I really have to double check all documentation, before this gets merged', 'comment_created': datetime.datetime(2020, 8, 6, 12, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466367593, 'comment_body': 'Oh yep, this is true. I think we can completely remove the switch case and just call GenerateSignature directly', 'comment_created': datetime.datetime(2020, 8, 6, 12, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466373129, 'comment_body': 'I am not sure about this, but I think if you would manually insert a real floatnumber into this, we would end up with a float number in JSON, too. So Something like ""0.0000""\r\n\r\nThis only works, because we convert the return value to a float, as long as we always get an integer return value, this should be fine. I have checked Linux and Windows, they both return only integer values as return codes. I assume MacOS is doing the same (UNIX system).\r\n\r\nRight now I can\'t see another solution for this. I tried a different approach in an older commit: https://github.com/in-toto/in-toto-golang/pull/56/commits/e43522d1d932712b6198dc87c221ce1e54bfab7c\r\n\r\nBut this commit changed the produced signature  + it\'s using a struct with fixed fields instead of our opaque dictionary.\r\n\r\nIs there even a possible way to fill that Byproducts dictionary manually? I thought the only way to fill it, is calling the function and that returns integers as return codes for the subprocess calls.', 'comment_created': datetime.datetime(2020, 8, 6, 12, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466548840, 'comment_body': 'removed', 'comment_created': datetime.datetime(2020, 8, 6, 16, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466550827, 'comment_body': 'removed switch block.. calling GenerateSIgnature now directly.', 'comment_created': datetime.datetime(2020, 8, 6, 16, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466551747, 'comment_body': 'removed carol-invalid', 'comment_created': datetime.datetime(2020, 8, 6, 16, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466557285, 'comment_body': 'added more documentation + fixed this issue here', 'comment_created': datetime.datetime(2020, 8, 6, 17, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466565265, 'comment_body': ""Ok I have two other suggestions. We could either do:\r\n\r\n`if reflect.DeepEqual(key, Key{})` (this can be very resource wasting)\r\n\r\nor we use a new feature from Go 1.13:\r\n\r\n`if !reflect.ValueOf(key).IsZero()` this will check if key hasn't been initialized. I guess, this will be better in terms of performance, because we don't need to compare to structs"", 'comment_created': datetime.datetime(2020, 8, 6, 17, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466567848, 'comment_body': 'I have just pushed a patch, that uses `IsZero()` if we are unhappy with it, we can look for another solution.\r\nI will leave this comment open, so you can verify it :)', 'comment_created': datetime.datetime(2020, 8, 6, 17, 22, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466569948, 'comment_body': 'Here is another idea I had.. we could add a line like: `float64(int(retVal))` just prior dumping/loading. That way we would make sure to always have a float64, without the parts behind the decimal point.. I am just not sure if this efficient or safe.', 'comment_created': datetime.datetime(2020, 8, 6, 17, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466913214, 'comment_body': ""Oh, I see now (just read the `openssl` manpage). I guess it's fine either way. But let's keep it removed. Less files, less clutter. :) "", 'comment_created': datetime.datetime(2020, 8, 7, 8, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466914455, 'comment_body': ""Yeah, I just meant that line and the key file. Please leave test/data/README.md, it's a really good idea to describe the test data a bit. As a matter of fact, I think the parts about how to create the different keys with `openssl` should even go into the general documentation for in-toto-golang. But we can do that in a different PR."", 'comment_created': datetime.datetime(2020, 8, 7, 8, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466916684, 'comment_body': 'Thanks for looking into it. I do like it better than just checking the keyid. What do you think?', 'comment_created': datetime.datetime(2020, 8, 7, 9, 3, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466926832, 'comment_body': '>  Can you confirm that dumping a float64 number with only zeros after the comma to json, will omit the comma and zeros?\r\n\r\nLooks like I did remember this correctly. Here\'s a quick POC. So we should be good here.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t""encoding/json""\r\n\t""fmt""\r\n)\r\n\r\nfunc main() {\r\n        // A float64\'s zeroes after the decimal point are omitted when dumped to JSON\r\n\tvar number float64 = 0.00\r\n\tjson_bytes, _ := json.Marshal(number)\r\n\tfmt.Println(string(json_bytes))\r\n\t\r\n        /// ... but non-zero values are shown indeed\r\n        number = 0.42\r\n\tjson_bytes, _ = json.Marshal(number)\r\n\tfmt.Println(string(json_bytes)) \r\n}\r\n```\r\nOutput:\r\n```\r\n0\r\n0.42\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 9, 23, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466929318, 'comment_body': '> Here is another idea I had.. we could add a line like: float64(int(retVal)) just prior dumping/loading. That way we would make sure to always have a float64, without the parts behind the decimal point.. I am just not sure if this efficient or safe.\r\n\r\nI am against special handling of retVal in generic dumping/loading functions, because, as discussed above, we should be able to dump/load in-toto metadata whose byproducts dictionary has not retVal field.\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 9, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466932614, 'comment_body': 'Nit:\r\nWhat do you think about ""invalid key type for this key""?', 'comment_created': datetime.datetime(2020, 8, 7, 9, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466936080, 'comment_body': 'Nit: The comment probably dates from before you added ecdsa support, right? I suggest to just add a short comment at the top of the function body, saying that we treat different keys differently for interoperability reasons with securesystemslib and python-in-toto. What do you think?', 'comment_created': datetime.datetime(2020, 8, 7, 9, 42, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466943151, 'comment_body': 'Nit:\r\n```suggestion\r\nParseKey tries to parse a PEM []byte slice using the following standards in the\r\ngiven order:```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466944326, 'comment_body': '```suggestion\r\n\t// pem.Decode returns the parsed pem block and a rest.\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 9, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466944574, 'comment_body': 'PEM decoding does not happen in ReadAll, right? \r\n\r\n```suggestion\r\n\t// Read key bytes\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466946348, 'comment_body': 'Can we check if we support the passed keyIdHashAlgorithms and scheme inputs?\r\n\r\nScheme we could actually check twice, once her if it is any supported scheme, and once below after the key type has been assessed, to check if the scheme is supported for the given type.\r\n\r\nWe should use module global constants for these values.\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 10, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466948058, 'comment_body': ""It would be nice to not hardcode the key type strings here but use constants instead, that are e.g. defined on top of this module. I'm also fine with just a `TODO/FIXME` comment here. :)"", 'comment_created': datetime.datetime(2020, 8, 7, 10, 7, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466948216, 'comment_body': '```suggestion\r\n\t\t// Note: We store the public key as PKCS8 key here, although the private key gets stored as PKCS1 key\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 8, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466949044, 'comment_body': 'This is actually not fully correct, please see my apologetic note in https://github.com/secure-systems-lab/securesystemslib/issues/251#issuecomment-669135196 about PKCS8.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466950573, 'comment_body': '```suggestion\r\nreturn a not initialized signature and an error. Possible errors are:\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466950928, 'comment_body': '```suggestion\r\n\t\t// pem.Decode returns the parsed pem block and a rest.\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466953354, 'comment_body': 'cliffhanger comment? :P', 'comment_created': datetime.datetime(2020, 8, 7, 10, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466955666, 'comment_body': 'It might enhance readability, if you create a small helper function for the 8 lines above, remove the inner switch, and just call that helper (and sha256.Sum256(signable)) twice.  What do you think? \r\n\r\nBtw. you could also use that helper in load key, where you have the same 8 lines. ', 'comment_created': datetime.datetime(2020, 8, 7, 10, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956312, 'comment_body': ""And ecdsa! (don't be modest :P)"", 'comment_created': datetime.datetime(2020, 8, 7, 10, 26, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956406, 'comment_body': '```suggestion\r\nWhen encountering an RSA key, VerifySignature will decode the PEM block in the key\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956521, 'comment_body': '```suggestion\r\nWhen encountering an ed25519 key, VerifySignature will decode the hex string encoded\r\n```', 'comment_created': datetime.datetime(2020, 8, 7, 10, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956722, 'comment_body': 'And what will it do when encountering an ecdsa key?', 'comment_created': datetime.datetime(2020, 8, 7, 10, 27, 20, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466956810, 'comment_body': '```suggestion\r\n\t\t// pem.Decode returns the parsed pem block and a rest.\r\n```\r\n', 'comment_created': datetime.datetime(2020, 8, 7, 10, 27, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466957906, 'comment_body': 'See comment above in GenerateSignature about removing the inner switch and using a helper instead.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 30, 7, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466958449, 'comment_body': 'We should also use those constants in {Generate, Verify}Signature once we have them.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466959731, 'comment_body': 'Right now it looks like we only support one scheme per key type.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466960147, 'comment_body': 'Can you add a note that we currently only support one scheme?', 'comment_created': datetime.datetime(2020, 8, 7, 10, 35, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466960432, 'comment_body': 'Even though we only support one default signature scheme, we should check if the scheme on the key matches it.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 36, 22, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466961499, 'comment_body': 'We should also take a look at the signature scheme of the key and fail if it is not one we support for verifying signatures.', 'comment_created': datetime.datetime(2020, 8, 7, 10, 38, 55, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 466975128, 'comment_body': 'Cool, if we are fine with the current approach I can resolve this, right? :+1: ', 'comment_created': datetime.datetime(2020, 8, 7, 11, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466989974, 'comment_body': 'Yep, looks fine for me, too :+1: ', 'comment_created': datetime.datetime(2020, 8, 7, 11, 47, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466994016, 'comment_body': 'fixed.', 'comment_created': datetime.datetime(2020, 8, 7, 11, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 466994083, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 8, 7, 11, 57, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 467031360, 'comment_body': '@lukpueh is this ok? Or shall I export them? I am also not sure about the name for them yet. \r\nI have replaced all strings for these constants now, except the ones in the tests. If you want I can touch the tests, too.', 'comment_created': datetime.datetime(2020, 8, 7, 13, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 467032314, 'comment_body': 'done, see newest comment for discussing the exact naming + exporting them or not exporting them.', 'comment_created': datetime.datetime(2020, 8, 7, 13, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 467128731, 'comment_body': 'I have added scheme and key type checking.. right now I am only calling this while setting the key components (only on loading.. we may want to call this while signing or validating, too.. right?).', 'comment_created': datetime.datetime(2020, 8, 7, 15, 59, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 467328584, 'comment_body': 'The latest commit should contain a first draft of this. The problem I see here:\r\n\r\n1. We don\'t use iotuil.ReadAll in the other functions, so we can\'t get this into the helper function. Therefore the lines get reduced on 5, instead of 8.\r\n2. I still see a need for the inner switch, because the inner switch makes sure that we use the right key for the right key operations. Right now it is possible to load a key with keyType ""rsa""  with a PKCS8-ECDSA key. In the current state, the inner switch will make sure, that we use the correct operation for the key. If we remove this inner type switch, we could run into a panic, if somebody creates a keyobject with non-matching keytype and key.\r\n\r\nI am not sure yet, if we should add such keyType/key checking to our functions in model, or if we should keep it this way and let the functions be as defensive as possible. What I could think of is: We add a check for this in our validateKey function in model.go and call this function in the first line of GenerateSignature and ValidateSignature. This way we would make sure, that we always operate on a valid object. What do you think?', 'comment_created': datetime.datetime(2020, 8, 7, 23, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469224915, 'comment_body': 'This looks good to me as is. Would you also add constants for the schemes?', 'comment_created': datetime.datetime(2020, 8, 12, 12, 33, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 469242614, 'comment_body': ""constants for the schemes are there, as a function. Because Go can't have slice or array constants :( "", 'comment_created': datetime.datetime(2020, 8, 12, 13, 3, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469243648, 'comment_body': 'The constant schemes happened here: https://github.com/in-toto/in-toto-golang/pull/56/commits/b3da4964c48f7418004608a26c7258410fd70aa3', 'comment_created': datetime.datetime(2020, 8, 12, 13, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469244173, 'comment_body': 'I thought I use for the Schemes a slice instead of just a string, because we might want to have different schemes to choose from in the future..', 'comment_created': datetime.datetime(2020, 8, 12, 13, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469244508, 'comment_body': 'This should be done in the latest commit.', 'comment_created': datetime.datetime(2020, 8, 12, 13, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469244976, 'comment_body': 'done in the latest commits', 'comment_created': datetime.datetime(2020, 8, 12, 13, 7, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469245072, 'comment_body': 'done in the latest commit', 'comment_created': datetime.datetime(2020, 8, 12, 13, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 469245301, 'comment_body': 'Type/Scheme-checking everything done in the latest commit :D ', 'comment_created': datetime.datetime(2020, 8, 12, 13, 7, 47, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470555984, 'comment_body': 'IIUC, this code branch will also never be reached, because you do a scheme check in validateKey. Why not use panic here but below for unreached keytype default case.', 'comment_created': datetime.datetime(2020, 8, 14, 10, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470556413, 'comment_body': 'See comment above about scheme default case never being reached. ', 'comment_created': datetime.datetime(2020, 8, 14, 10, 57, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470556466, 'comment_body': 'See comment above about scheme default case never being reached. ', 'comment_created': datetime.datetime(2020, 8, 14, 10, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470556511, 'comment_body': 'See comment above about scheme default case never being reached. ', 'comment_created': datetime.datetime(2020, 8, 14, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470558527, 'comment_body': ""Validating the key feels a bit random. If at all I'd validate the key before you operate on it, but even that I wouldn't do in an internal function where you control the inputs."", 'comment_created': datetime.datetime(2020, 8, 14, 11, 3, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470570723, 'comment_body': 'Minor nit: Could you maybe mention here that:\r\n- these key types are also automatically assigned to the KeyType field (""RSA"" should be lower case), and\r\n- which scheme string may be passed for which type\r\n?', 'comment_created': datetime.datetime(2020, 8, 14, 11, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470577075, 'comment_body': ""I still think it's better to check these two arguments directly here. Otherwise, as a developer, I have to go down the call stack until `generateKeyID` (also see inline comment there) and then further down the call stack of `validateKey` to know that the two arguments are indeed checked.\r\n"", 'comment_created': datetime.datetime(2020, 8, 14, 11, 49, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470578131, 'comment_body': 'Just to make sure, do you mean that we cover all key types that are available in Go above?', 'comment_created': datetime.datetime(2020, 8, 14, 11, 51, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470579472, 'comment_body': ""In [securesystemslib the hash algorithm matches the key size](https://github.com/secure-systems-lab/securesystemslib/blob/1682f553ca00b73bdee5a2f3ce961888dbd9bffa/securesystemslib/ecdsa_keys.py#L61-L64), which seems to be recommended. For the sake of interoperability we should do the same here and in VerifySignature.\r\n\r\nBut I'm also fine with only adding support for `ecdsaSha2nistp256` in this PR and adding `ecdsaSha2nistp384` (+ tests!) in a separate PR. "", 'comment_created': datetime.datetime(2020, 8, 14, 11, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470581195, 'comment_body': 'Nit: Ed25519 is one of multiple EdDSA signature schemes which uses SHA512 and Curve25519.', 'comment_created': datetime.datetime(2020, 8, 14, 11, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470582505, 'comment_body': 'See comment in GenerateSignature about ecdsa key size vs. hashing algorithm.', 'comment_created': datetime.datetime(2020, 8, 14, 12, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470582757, 'comment_body': 'See comment in GenerateSignature about this code comment. :)', 'comment_created': datetime.datetime(2020, 8, 14, 12, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470583214, 'comment_body': '```suggestion\r\n// This error will be thrown if a field in our Key struct is empty.\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 8, 14, 12, 4, 38, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470585394, 'comment_body': 'Nit: I don\'t think you can use vice-versa as noun. Maybe something like\r\n```suggestion\r\nvar ErrSchemeKeyTypeMismatch = errors.New(""the scheme and key type are not supported together"")\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 12, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470587185, 'comment_body': 'I think we still want to have a validatePubKey function to allow the user to check that e.g. a layout does not include private keys, etc.\r\n\r\nBut I suggest that we just ticketize this along with other concerns raised in https://github.com/in-toto/in-toto-golang/pull/56#issuecomment-672920535 and https://github.com/in-toto/in-toto-golang/pull/56#issuecomment-673358698. What do you think?', 'comment_created': datetime.datetime(2020, 8, 14, 12, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470591138, 'comment_body': '> ... everything, except the KeyVal struct\r\n\r\nYou do check `if key.KeyVal.Public == """"`.\r\nSome other related observations:\r\n- We still have the `validateKeyVal` function, but don\'t use it anymore in `validateKey` or anywhere else.\r\n- None of the validation functions is public, and thus if not used by our code, not usable.\r\n- We perform the same checks for public and private keys.\r\n\r\nAs mentioned above, I suggest we discuss how to further enhance the (key) validation functions in a separate ticket. Would you mind creating one?\r\n\r\n', 'comment_created': datetime.datetime(2020, 8, 14, 12, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470591550, 'comment_body': ""In the long run, I'd say we want a `validatePubkey` call here."", 'comment_created': datetime.datetime(2020, 8, 14, 12, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470600542, 'comment_body': ""Wouldn't this be a better fit for our set interface? :) Not saying you should do this now, but maybe worth a TODO note?\r\n"", 'comment_created': datetime.datetime(2020, 8, 14, 12, 43, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470602966, 'comment_body': 'Nit: \r\n```suggestion\r\nfunc TestSetKeyComponentsErrors(t *testing.T) {\r\n```\r\n?', 'comment_created': datetime.datetime(2020, 8, 14, 12, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470606508, 'comment_body': '```suggestion\r\n//  * ErrFailedPEMParsing (for example if we pass an EC key, instead a key in PKCS8 format)\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 12, 56, 25, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470607348, 'comment_body': ""shouldn't this be a `ErrKeyKeyTypeMismatch`?"", 'comment_created': datetime.datetime(2020, 8, 14, 12, 58, 3, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470610008, 'comment_body': '```suggestion\r\n\t\t\tt.Errorf(""Metablock.VerifySignature returned \'%s\', expected \'%s\'"",\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 13, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470610092, 'comment_body': '```suggestion\r\n\t\tt.Errorf(""Metablock.VerifySignature returned \'%s\', expected nil"", err)\r\n```', 'comment_created': datetime.datetime(2020, 8, 14, 13, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470612273, 'comment_body': '?', 'comment_created': datetime.datetime(2020, 8, 14, 13, 7, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470614824, 'comment_body': 'This one fails because the missing `KeyIdHashAlgorithms`, right? ', 'comment_created': datetime.datetime(2020, 8, 14, 13, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470615582, 'comment_body': 'I think this one also fails because of the missing `KeyIdHashAlgorithms` field, and not because of the ""invalid"" private key, right?', 'comment_created': datetime.datetime(2020, 8, 14, 13, 13, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470616754, 'comment_body': 'There seems to be more of that below...', 'comment_created': datetime.datetime(2020, 8, 14, 13, 16, 4, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 470860067, 'comment_body': 'Yes, this is correct. Right now we are covering all key types that are available in the Go x509 implementation.', 'comment_created': datetime.datetime(2020, 8, 14, 20, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470901489, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/075e168dd98cff2b41281e19b16773daaa937e9c', 'comment_created': datetime.datetime(2020, 8, 14, 23, 16, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470901509, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/075e168dd98cff2b41281e19b16773daaa937e9c', 'comment_created': datetime.datetime(2020, 8, 14, 23, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470901532, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/075e168dd98cff2b41281e19b16773daaa937e9c', 'comment_created': datetime.datetime(2020, 8, 14, 23, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470901563, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/075e168dd98cff2b41281e19b16773daaa937e9c', 'comment_created': datetime.datetime(2020, 8, 14, 23, 16, 57, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905676, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 38, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905705, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 38, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905737, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905804, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905826, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905858, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905932, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470905997, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/236acb803e2318f44e0c7c32c717e63729c0dd42', 'comment_created': datetime.datetime(2020, 8, 14, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470906555, 'comment_body': 'mh this one is interesting... it will fail only with `deabeef` instead of `deadbeef`, because then the map key and value keyID match. No idea, what we actually want to test here.', 'comment_created': datetime.datetime(2020, 8, 14, 23, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470907729, 'comment_body': 'This is being tracked here: https://github.com/in-toto/in-toto-golang/pull/56/commits/111dd2fd8b845f0778390118bdd70b710abb1ffc and here: https://github.com/in-toto/in-toto-golang/issues/66\r\n\r\nI will might have a look on this later, if I have time :)', 'comment_created': datetime.datetime(2020, 8, 14, 23, 48, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470908413, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/5d51843c9d6282d730ed00d347d8d8851f385141', 'comment_created': datetime.datetime(2020, 8, 14, 23, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470908642, 'comment_body': 'Yep, I have to admit, that I only placed it there to satisfy the test coverage.\r\nWe should probably place it, at the end of the LoadKey function instead.', 'comment_created': datetime.datetime(2020, 8, 14, 23, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470914367, 'comment_body': 'Should be fixed in: https://github.com/in-toto/in-toto-golang/pull/56/commits/d1bf3c1906c25b9e7853bc82e253f58bef365cdc\r\n\r\nSee comment in GenerateSignature for discussion.', 'comment_created': datetime.datetime(2020, 8, 15, 0, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470914870, 'comment_body': ""I removed the misleading support for ecdsa-sha2-nistp384. I think we are better with it, if I add this in a separate PR.\r\nShouldn't be that complicated, it's just modifying the switch a bit and choosing the correct hash algorithm depending on the key.Scheme. If we want to be paranoid, we should also combine this PR with the curve sanity checks, we have mentioned earlier."", 'comment_created': datetime.datetime(2020, 8, 15, 0, 33, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470915403, 'comment_body': 'Yes, this is correct. Do we want this behavior? Or is the `keyIdHashAlgorithms` field optional? I remember, that we had another discussion around it, that all information is in the `scheme` field already..', 'comment_created': datetime.datetime(2020, 8, 15, 0, 37, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470915607, 'comment_body': 'This is also correct.. These tests were artifacts from older tests, looks like I just adopted them, without checking them more carefully :S \r\n\r\nWhat do we do with these now?', 'comment_created': datetime.datetime(2020, 8, 15, 0, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 470917243, 'comment_body': ""No, because we have an `ec private key` here.. this key format is not supported, because it's not a valid PKCS8 key format and therefore we fail earlier. We fail already during parsing the key, instead of checking if key and key type matches.\r\n\r\nWith an `ecdsa PKCS8` key instead, this would have been an ErrKeyKeyTypeMismatch."", 'comment_created': datetime.datetime(2020, 8, 15, 0, 53, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471175221, 'comment_body': 'I wrote a small validatePublicKey function, that is basically just a wrapper around validateKey. Let me know what you think about it:\r\n\r\nhttps://github.com/in-toto/in-toto-golang/pull/56/commits/64b532593199d7898e3266519875ded0ebe8a09b', 'comment_created': datetime.datetime(2020, 8, 16, 23, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471175945, 'comment_body': 'Ticket is being tracked as: https://github.com/in-toto/in-toto-golang/issues/68', 'comment_created': datetime.datetime(2020, 8, 16, 23, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471176052, 'comment_body': 'pushed a first small draft for it here: https://github.com/in-toto/in-toto-golang/pull/56/commits/64b532593199d7898e3266519875ded0ebe8a09b\r\n\r\nThis works right now, but we might want to discuss key validation in general. See also: https://github.com/in-toto/in-toto-golang/issues/68', 'comment_created': datetime.datetime(2020, 8, 16, 23, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471384827, 'comment_body': 'Ping. Do you you disagree? Or did you plan on fixing this with https://github.com/in-toto/in-toto-golang/issues/68? At any rate, could you add a comment here that mentions that scheme and keyIdHashAlgorithms are checked via validateKey in setKeyComponents, and optionally point to #68?', 'comment_created': datetime.datetime(2020, 8, 17, 10, 24, 23, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471385226, 'comment_body': 'Related to https://github.com/in-toto/in-toto-golang/pull/56#discussion_r470558527', 'comment_created': datetime.datetime(2020, 8, 17, 10, 25, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471394601, 'comment_body': 'Oh I see. Before we expected it to error on the missing key fields in validatePubKey. Now it chokes before that in validateLayout because of the id mismatch. But we already test that secenario right before that test (see ""deadbeef"" vs. ""livebeef"").\r\n\r\n I suggest to re-add the `d` and update the expected error message to `""empty field in key`"".', 'comment_created': datetime.datetime(2020, 8, 17, 10, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471407899, 'comment_body': ""In in-toto/sslib it's optional. I'm fine either way (for the time being), with a preference towards making it optional. In the long run we want to get rid of the field anyway.\r\n\r\nThe corresponding discussion can be found i.a. in https://github.com/theupdateframework/tuf/issues/848, but it's not related to the scheme field. \r\n\r\n(The discussion who might think of is about whether it needs both the `keytype` and `scheme` fields, i.a. see https://github.com/secure-systems-lab/securesystemslib/issues/251) "", 'comment_created': datetime.datetime(2020, 8, 17, 11, 12, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471409065, 'comment_body': 'Ideally we test what was tested before. For `ErrEmptyKeyField` errors this would mean to also take a look at the error message, in order to see which field was empty', 'comment_created': datetime.datetime(2020, 8, 17, 11, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471424963, 'comment_body': 'Makes sense. We could build error structs for this, like described here: https://blog.golang.org/go1.13-errors\r\nor we wrap the key field into the error. What would you prefer? I am not sure if we could still use `errors.Is` with such error structs. I need to test this, but structs would be the more native way, I guess.', 'comment_created': datetime.datetime(2020, 8, 17, 11, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471433232, 'comment_body': ""I think we should try to wrap up this PR. Let's just check for error type `&&` string for now, and think about more sophisticated error handling in a follow up PR. :)"", 'comment_created': datetime.datetime(2020, 8, 17, 12, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 471459136, 'comment_body': 'I made the field now optional in: https://github.com/in-toto/in-toto-golang/pull/56/commits/fa94594c5d8a77fbd96d5839efe8d121065e81f8', 'comment_created': datetime.datetime(2020, 8, 17, 12, 56, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471460248, 'comment_body': 'I checked out the code:\r\n```go\r\n\tif key.KeyType == """" {\r\n\t\treturn fmt.Errorf(""%w: keytype"", ErrEmptyKeyField)\r\n\t}\r\n\tif key.KeyVal.Public == """" {\r\n\t\treturn fmt.Errorf(""%w: keyval.public"", ErrEmptyKeyField)\r\n\t}\r\n\tif key.Scheme == """" {\r\n\t\treturn fmt.Errorf(""%w: scheme"", ErrEmptyKeyField)\r\n\t}\r\n```\r\nwe actually do wrap the error here, already. Do you still want to check if the field got cached correctly? If so, we would need to do string compares again :S ', 'comment_created': datetime.datetime(2020, 8, 17, 12, 58, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471466519, 'comment_body': 'Fixed in https://github.com/in-toto/in-toto-golang/pull/56/commits/c25b937d9e9d022e5ecb8e82c6b56fa892dba6c7', 'comment_created': datetime.datetime(2020, 8, 17, 13, 9, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 471467328, 'comment_body': 'What do we do with this one here? If I put the validateKey at the end of the LoadKey functon, I am afraid we will need to refactor a few tests or might miss test coverage or do you want to move this to the validateKey issue, I have opened?', 'comment_created': datetime.datetime(2020, 8, 17, 13, 10, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 473934422, 'comment_body': 'We can take another look at these in #68.', 'comment_created': datetime.datetime(2020, 8, 20, 12, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}]","[{'commit_sha': '14a8de0c47e110daea86652a1ed1c78d5b401616', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4969540585698215c5cfa70124edf24cffe32a80', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45a8e933ac965682582cde998c86006548f1bb9b', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f9f94fbf70eca124490f148cee13b0bbd26e52', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6cb9c07d93fe1c06e90d0ad0ab9cb7d5410a213', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae5e82dcd0791e82f6638b2d119574ed858a66dc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd868be75bc4c15bbdae08aed30050c23989418c8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f54d2e5bc42ea617d21b012955b5d63c43534156', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b5413f4e13a2f98a0a9c686072ad8ce749b5ee1', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e49b8a7f5e507ea5d8caf8e9d5f6c7163b1f68', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe86f294708c63862581c2273d72797ddcaf6385', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ced5b8aa80f38dfc727eb1f796be83e155532f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '825355621a8a90265ce1aaab422365c391596116', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed01d7bbf672e95b5068f2531ce1ff73b31036b0', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17c679bfc4328845331f7586d28c0e23abb02b18', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74133910dee0aaa66160c55fb1bc061b501b42bd', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5b38f7261af291eb84e0eee8c456d23c23a1fd0', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17dc020d5263b7e13d954b363fe97f2bd4507af6', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ef081e4b774ecada6706998f014fe3d5c1c1ef', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f468800580d4fd97d50a2515166b65876a68b03', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c1074afdafc44ee965e1ad6ab5a292077a76efc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd2bd384e2e8b6fc0b21eb0bf7e5ae93dc8f7a5f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '263383166f928ad9128d125e2be64a895b48429e', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8a5023b819c61c1c8bfcf831f755aac4be7759f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa002a241106aa30f32e9dd4e925f191b02c9d34', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e92423381b0c73a74da9eb5159d803f91d048659', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c2415eb2c8ded3053464c4e040cacc7bf182ca7', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65a734ff1460ed809c36032ffb925125d6360832', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ee4dcaa1fbcda9f5f1d455a8456b3692096f888', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b2d7fa6e16be950ce5bb8b98172f3e1b8d462ee', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '885c74311721c2c4ead5a6ad0329344cc70e61ff', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec46fd02509f6288fd4fe10c2826e2a7db780217', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81f089465a09334cff0d74a899b15b1c52a8947d', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc2a58e74c46ace69e594a1eea97e01cfb5760cc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c31d709cd693d3c04b290d7b56de083628c26480', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac76f055b22d99037300b7153abfa8207ae0c32', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2825c57cd2bab8c1111c17b4e1d835ba6fdcd20', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a28c13d3a6cebe6af577da9b9394083d1fdef03', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0acd97f0f15d5f8ccb962f73828f052e9203fb16', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e601861751286f0aaa8923e136d1a90c5c0a3815', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4379ac51aea7c9c708eb9a3e3c443fbb3c43063d', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad07bd6550206479257a97585363a909634ee1fc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd71ce001ab6abb536c53d59b73232b28fc8ad57d', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01da883b36293be003f7d9c6e741cb75fbcc5d70', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e43522d1d932712b6198dc87c221ce1e54bfab7c', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'adfdd99e855517a3a09ec688c393d48df52dedc8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '455f141a24b572df55f209b2946800aa35abe9b9', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4a40aede9b457b0c61f5301f58bd4fa01b1dea0', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84c9874b3db598e4040290bf187fe76c186d0677', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7c8f580b1cf1a6b2b623c457ee2c97172c06e2', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b8743dde651a999148c5a3b51ea1e87d946c9cc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a275a2592059d0f51c3cc2faca33341d0b9e39d5', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4910972a460256bf45d620c1ec1f1b928c9e5908', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79383c9002f2d9afd7dfa0daa5a769d8e4ed1169', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af0cf4cc8dec08df670d51c1a7ec62beab49bc6a', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd1a6b6f63749d40774b8d714c6aedaa10abe40b', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d7b3d257a5acec8b125dfea4aaf26706de30925', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a3d27475c252d68201965db2faec8da11c6d671', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '089dd4c849d16739c265dd1ae307bd92e6f77bd8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e22b3cd214cfbed23540151ac36bdc4b4d7c2580', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db25b733576b0b2d50458635675cd795414351f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4ee8aebe7cbf4dd452c639f1145d20915bef596', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9e328aad529346973d5dd43bae6bde1877a016f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a7e225729ce760f1bca7bdb2e69192549a1c618', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5bce89f4acad06384b1ac24c891390dfd5108549', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16a79ec008d036bde465220df2c90d2319149bf7', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3da4964c48f7418004608a26c7258410fd70aa3', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c426bcb22e8e8e05765a005b567dfbd34cde2cc4', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cb021ac8b83d71bb44274f346a1cf8297767472', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d191d12f81cecf25b9f7d8b2c0fc208e2e9bb9', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52fe163ffbe1c229f1fa5ec98f4ea5c8a8d48bd9', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ce8e4c5bc03e815ed169fde2602668d165203d7', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '49ee80812247770837b8d546f8111d6cfdd2a830', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e33856836eb0a05bdc528e3ad9b78a2c092c64f1', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c4832c08b9a4cc41a1ba937bdcbcd562ea3e59c', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dddc66d36da7568ebcd4cd0f257dbf8832fe304', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '075e168dd98cff2b41281e19b16773daaa937e9c', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '236acb803e2318f44e0c7c32c717e63729c0dd42', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '111dd2fd8b845f0778390118bdd70b710abb1ffc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d51843c9d6282d730ed00d347d8d8851f385141', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1bf3c1906c25b9e7853bc82e253f58bef365cdc', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '64b532593199d7898e3266519875ded0ebe8a09b', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa94594c5d8a77fbd96d5839efe8d121065e81f8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ac47be58ccf237d0b6ede4df2c06148306ecef6', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c25b937d9e9d022e5ecb8e82c6b56fa892dba6c7', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70fdec2c35fa0c35f3482bfdef52bc1f9c03ed0b', 'committer_username': 'lukpueh', 'committer_name': 'Lukas Pühringer', 'committer_email': None, 'commit_date': datetime.datetime(2011, 1, 29, 1, 30, 4, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
473589098,Never use pemBytes directly,"**Fixes issue #**:

https://github.com/in-toto/in-toto-golang/issues/75

**Description of pull request**:

We cannot use the pemBytes directly, because there might be different
line separators on different operating systems (CRLF vs LF).
Therefore we are always decoding the pemBytes now and we are only
working with decoded key bytes. These formats are operating system independent.

**Please verify and check that the pull request fulfills the following
requirements**:

- [X] Tests have been added for the bug fix or new feature
- [X] Docs have been added for the bug fix or new feature


",True,76,https://api.github.com/repos/in-toto/in-toto-golang/pulls/76,https://github.com/in-toto/in-toto-golang/pull/76,closed,61,30,2,3,6,0,0,0,[],2020-08-26 01:28:49+00:00,2020-08-26 12:29:26+00:00,39637.0,11:00:37,[],"[{'commit_sha': 'f2cca63dff056c104257899b492db9a520e2d0e1', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea11d3997edaf9dae797a77ac69e2501687c8801', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07a74ff87087419250207df55f6fd40282335c8a', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
457894388,Fix issue 378: duplicate imports,"We had a few unnecessary duplicate imports.
This commit removes the additional ""from-import"" lines,
and just uses the full path for the import.

Please fill in the fields below to submit a pull request.  The more information
that is provided, the better.

**Fixes issue #**:

Fixes issue #378 

**Description of the changes being introduced by the pull request**:

Use imports and not `from .. import ..`-lines. I also realized that the latter is against our Code Style Guidelines.. ^^

**Please verify and check that the pull request fulfills the following
requirements**:

- [x] The code follows the [Code Style Guidelines](https://github.com/secure-systems-lab/code-style-guidelines#code-style-guidelines)
- [x] Tests have been added for the bug fix or new feature
- [x] Docs have been added for the bug fix or new feature


",True,379,https://api.github.com/repos/in-toto/in-toto/pulls/379,https://github.com/in-toto/in-toto/pull/379,closed,12,11,2,1,13,10,0,0,[],2020-07-28 15:42:21+00:00,2020-08-05 13:33:49+00:00,683488.0,"7 days, 21:51:28","[{'comment_id': 464963365, 'comment_body': '[ping](https://github.com/in-toto/in-toto/pull/379#pullrequestreview-459873487)', 'comment_created': datetime.datetime(2020, 8, 4, 10, 47, 52, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 465688735, 'comment_body': 'oops, looks like I missed one', 'comment_created': datetime.datetime(2020, 8, 5, 12, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 465699929, 'comment_body': '```suggestion\r\n          filepath)\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 12, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 465699965, 'comment_body': 'This is what i mean.. I am not sure if `sub_link_dir` is okay as variable name... However we only use it in the next line. What do you think?', 'comment_created': datetime.datetime(2020, 8, 5, 12, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 465700008, 'comment_body': '```suggestion\r\n        filepath, password)\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 12, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 465700095, 'comment_body': '```suggestion\r\n      filepath, password)\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 12, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 465700588, 'comment_body': '```suggestion\r\n        filename = in_toto.models.link.FILENAME_FORMAT.format(\r\n            step_name=step.name, keyid=keyid)\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 12, 47, 34, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 465700673, 'comment_body': '```suggestion\r\n        step_name=inspection.name)\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 12, 47, 43, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 465700926, 'comment_body': '```suggestion\r\n            name=step_name, keyid=keyid)\r\n```', 'comment_created': datetime.datetime(2020, 8, 5, 12, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 465703867, 'comment_body': '👍  works for me. ', 'comment_created': datetime.datetime(2020, 8, 5, 12, 52, 53, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}]","[{'commit_sha': '3489e4b7e9f8b1303d2ee54ec173e0fbec478f0f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
415562904,fix inconsistencies,"This commit fixes a few inconsistencies in the specification:

* When referring to JSON property names, we are now writing:
`""property""`. For example: `""_name""` or `""expected_products""`
* When referring to JSON property values, we are now writing the
property value in uppercase only. For example EXPIRES, when we are
referring to `""expires"": ""<EXPIRES>"",`
* This commit also fixes a few minor bugs, like a wrong placed dot.


I am not sure if I am thinking too academic here, but I think we should be consistent throughout the specification and use the right format for the right thing and don't mix them.",True,29,https://api.github.com/repos/in-toto/specification/pulls/29,https://github.com/in-toto/specification/pull/29,closed,42,42,1,1,19,11,0,0,[],2020-05-09 11:40:03+00:00,2020-05-13 00:57:14+00:00,307031.0,"3 days, 13:17:11","[{'comment_id': 423167500, 'comment_body': 'I believe American English _always_ puts the period within the quotes. @jhdalek55 could I trouble you for an opinion? :)', 'comment_created': datetime.datetime(2020, 5, 11, 16, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'adityasaky', 'type': 'User'}, {'comment_id': 423173051, 'comment_body': 'Yes. Inside the quotes. Another way we differ from British English.', 'comment_created': datetime.datetime(2020, 5, 11, 16, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jhdalek55', 'type': 'User'}, {'comment_id': 423173960, 'comment_body': 'Thank you!', 'comment_created': datetime.datetime(2020, 5, 11, 16, 43, 53, tzinfo=datetime.timezone.utc), 'commenter': 'adityasaky', 'type': 'User'}, {'comment_id': 423219491, 'comment_body': '```suggestion\r\nin-toto does not use to verify supply chain integrity as ""target files."" Target\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 17, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'trishankatdatadog', 'type': 'User'}, {'comment_id': 423220085, 'comment_body': '```suggestion\r\nThe `""threshold""` field must contain a positive integer indicating how many pieces\r\n```', 'comment_created': datetime.datetime(2020, 5, 11, 18, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'trishankatdatadog', 'type': 'User'}, {'comment_id': 423257080, 'comment_body': 'Oh ok, but then we should be at least consistent through out the specification right? Because I observed both cases sometimes ""foobar"". and ""foobar.""', 'comment_created': datetime.datetime(2020, 5, 11, 19, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 423258536, 'comment_body': 'I think those would belong in this PR. Thoughts?', 'comment_created': datetime.datetime(2020, 5, 11, 19, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'adityasaky', 'type': 'User'}, {'comment_id': 423359705, 'comment_body': 'Mhh I thought about this for a while, don\'t we want to emphasize the word with the double quotes? I agree that in American English you would write: ""Hello, I am fine.""\r\n\r\nBut we want to emphasize specific words, we don\'t have written speech here.\r\nLet\'s have a look on this sentence here:\r\n\r\n`An example date-time string is 1985-10-21T01:21:00Z.`\r\n\r\nWhen we emphasize the date-time string we will get the following sentence with ""American Quotation"":\r\n\r\n`An example date-time string is ""1985-10-21T01:21:00Z.""`\r\n\r\nFor me as an European this looks odd and looks like the ""dot"" at the end of the date-time string would be part of the date-time string. What do you guys think? Maybe it\'s just my European brain.\r\n\r\nI had a look on RFCs and they do the ""European Quotation"". For example (https://tools.ietf.org/html/rfc2822):\r\n\r\n```\r\n   For brevity, this document sometimes\r\n   refers to this range of characters as simply ""US-ASCII characters"".\r\n```\r\n\r\nFor whole sentences I would agree with the ""American Quotation"", but for just emphasizing words, I think we should stick with the variant with the dot outside.', 'comment_created': datetime.datetime(2020, 5, 11, 22, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 430955890, 'comment_body': 'Now that we mark this up as verbatim text, the escape character `\\` becomes visible, so we should remove it.', 'comment_created': datetime.datetime(2020, 5, 27, 8, 46, 8, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 430962580, 'comment_body': 'As a fellow European I support the period outside the quotes. :)', 'comment_created': datetime.datetime(2020, 5, 27, 8, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 431489170, 'comment_body': ""Oops, you are right. I didn't see this. I will make a PR ready that removes the backslash"", 'comment_created': datetime.datetime(2020, 5, 27, 22, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}]","[{'commit_sha': 'ca528dcf2437277a0c2ec4fd2f95475eb9f6fe21', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
456254032,encode return value as integer instead of string,"The in-toto python reference implementation encodes the return-value
field of our link files as integer. Our specification specified this
field as string value. This commit fixes this inconsistency and
assigns the right data type to the return-value field.

CC: @SantiagoTorres @lukpueh @trishankatdatadog ",True,36,https://api.github.com/repos/in-toto/specification/pulls/36,https://github.com/in-toto/specification/pull/36,closed,16,16,1,1,5,3,0,0,[],2020-07-24 12:15:23+00:00,2021-01-27 14:44:48+00:00,16165765.0,"187 days, 2:29:25","[{'comment_id': 461508847, 'comment_body': 'This seems like a remainder from when `return-value` was a 1st level field of `signed`. I suggest to remove this.', 'comment_created': datetime.datetime(2020, 7, 28, 11, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 461511554, 'comment_body': 'Maybe we can make this a *should be stored*, given that we claim `byproducts` is an opaque dictionary.', 'comment_created': datetime.datetime(2020, 7, 28, 11, 32, 19, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 461652986, 'comment_body': ""ah good catch! I didn't even realize that there is a return-value outside of the actual byproducts object."", 'comment_created': datetime.datetime(2020, 7, 28, 15, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}]","[{'commit_sha': 'd622c8ed6741ad82624fe55ab58c5d71156b788d', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
471208994,Move subsetCheck to Set Interface,"**Fixes issue #**:
https://github.com/in-toto/in-toto-golang/issues/66

**Description of pull request**:
This Requests fulfils issue #66 and moves the subsetCheck function into our Set interface.

**Please verify and check that the pull request fulfills the following
requirements**:

- [X] Tests have been added for the bug fix or new feature
- [X] Docs have been added for the bug fix or new feature


",True,73,https://api.github.com/repos/in-toto/in-toto-golang/pulls/73,https://github.com/in-toto/in-toto-golang/pull/73,closed,20,26,4,1,3,3,0,0,[],2020-08-20 19:55:04+00:00,2020-08-26 07:24:24+00:00,473360.0,"5 days, 11:29:20","[{'comment_id': 476315604, 'comment_body': 'Minor nit: I think it\'s a tad more readable if you use e.g. `NewSet{""sha256"",  ""sha512""}`, etc.', 'comment_created': datetime.datetime(2020, 8, 25, 9, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 476317101, 'comment_body': ""Minor performance nit: You could do a quick len check to return early (subset can't be greater than superset)."", 'comment_created': datetime.datetime(2020, 8, 25, 9, 38, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 476318923, 'comment_body': 'Please update the docstring, also so that it is clear which one is expected to be the subset and which the superset.', 'comment_created': datetime.datetime(2020, 8, 25, 9, 41, 32, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}]","[{'commit_sha': '6c22fb188039b1758ed2af61c2a362d6c532fc98', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
470930503,use Go 1.15's ecdsa.Sign/VerifyASN1 methods,"With Go 1.15, crypto/ecdsa supports
ecdsa.SignASN1 and ecdsa.VerifyASN1
methods. These methods are easier to use,
because they return a signature encoded
in ASN1. In the past we did this we did
this manually. Using the stdlib
should be less toilsome and less error-prone.

*Please fill in the fields below to submit a pull request.  The more
information that is provided, the better.*

**Fixes issue #**:

https://github.com/in-toto/in-toto-golang/issues/64 and #60 

**Description of pull request**:

This is going to add the new ecdsa ASN1 methods + fixes the cleanup in our testMain method.

**Please verify and check that the pull request fulfills the following
requirements**:

- [X] Tests have been added for the bug fix or new feature
- [X] Docs have been added for the bug fix or new feature


",True,70,https://api.github.com/repos/in-toto/in-toto-golang/pulls/70,https://github.com/in-toto/in-toto-golang/pull/70,closed,6,38,6,3,7,0,0,0,[],2020-08-20 14:00:06+00:00,2021-01-05 17:22:10+00:00,11935324.0,"138 days, 3:22:04",[],"[{'commit_sha': '8a4ec280ce42e1e6247d87de0d2070881fb46617', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9ce0fa6b86428a9479b25503ce74cae296712b2', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfb4c894fe41055a7fd55daa9e62ea9a5d664b6a', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
473600678,Add Logo + Remove todo,"**Fixes issue #**:
none

**Description of pull request**:

add logo + remove todo (I think parameter layout substitution is already supported, right?)
See also: #29 and #38 

**Please verify and check that the pull request fulfills the following
requirements**:

- [X] Tests have been added for the bug fix or new feature
- [X] Docs have been added for the bug fix or new feature


",True,77,https://api.github.com/repos/in-toto/in-toto-golang/pulls/77,https://github.com/in-toto/in-toto-golang/pull/77,closed,2,3,1,1,5,0,0,0,[],2020-08-26 02:15:08+00:00,2020-08-26 12:27:57+00:00,36769.0,10:12:49,[],"[{'commit_sha': '3ab7b602213f75363c1d90405abefa77145c896e', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
471049945,Add Github Actions Support,"**Fixes issue #**:
https://github.com/in-toto/in-toto-golang/issues/62

**Description of pull request**:
This PR intents to remove travis and appveyor as CI and use Github Actions for everything, what we need.

**Please verify and check that the pull request fulfills the following
requirements**:

- [ ] Tests have been added for the bug fix or new feature
- [ ] Docs have been added for the bug fix or new feature


",True,72,https://api.github.com/repos/in-toto/in-toto-golang/pulls/72,https://github.com/in-toto/in-toto-golang/pull/72,closed,35,25,5,3,12,8,0,0,[],2020-08-20 16:27:55+00:00,2020-09-03 11:34:02+00:00,1191967.0,"13 days, 19:06:07","[{'comment_id': 480016364, 'comment_body': 'What do you think about ...?\r\n```suggestion\r\nvalue is the error.\r\nNOTE: For cross-platform consistency Windows-style line separators (CRLF) are\r\nnormalized to Unix-style line separators (LF) before hashing file contents.\r\n```', 'comment_created': datetime.datetime(2020, 8, 31, 9, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 480107841, 'comment_body': 'sounds good. I will make the necessary changes.', 'comment_created': datetime.datetime(2020, 8, 31, 12, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 482813874, 'comment_body': 'Can you make the first badge a link to the GitHub build page?', 'comment_created': datetime.datetime(2020, 9, 3, 8, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 482886795, 'comment_body': 'Ah yes, sure.. wait a second', 'comment_created': datetime.datetime(2020, 9, 3, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 482889655, 'comment_body': '@lukpueh solved, but we can only link to the build workflow overview page. A link to the latest build is not possible (Github is working on this)', 'comment_created': datetime.datetime(2020, 9, 3, 10, 55, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 482908366, 'comment_body': 'Thanks for the fix and headsup!', 'comment_created': datetime.datetime(2020, 9, 3, 11, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 482909081, 'comment_body': 'I suppose we have to first activate something for this to work on the upstream repo?', 'comment_created': datetime.datetime(2020, 9, 3, 11, 33, 27, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 482909273, 'comment_body': ""Let's merge and see. :)"", 'comment_created': datetime.datetime(2020, 9, 3, 11, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}]","[{'commit_sha': '18a41161e0169864df78806bf4cad8bc86850d45', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5cb51327037b0b5fe2d7f7ae7efc33d959d24ba', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acb2a482b53dae98c12dd0431145588830a589bd', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
475710788,implement multi hash support,"**Fixes issue #**:

This PR is intended to fix: https://github.com/in-toto/in-toto-golang/issues/31 and https://github.com/in-toto/in-toto-golang/issues/67 and https://github.com/in-toto/in-toto-golang/issues/65

It will maybe also provide different rsassa-pss schemes like: rsassa-pss-sha512

**Description of pull request**:
In this PR we remove our old hash implementation and use Go's hash.Hash interface instead.
The goal is to use the new hashlib for all hash related tasks. We should be able to use this in RecordArtifact
and in the keylib for generating hashes  for example for rsassa-pss-sha256 or ecdsa-sha2-nistp384.


**Please verify and check that the pull request fulfills the following
requirements**:

- [X] Tests have been added for the bug fix or new feature
- [X] Docs have been added for the bug fix or new feature


",True,78,https://api.github.com/repos/in-toto/in-toto-golang/pulls/78,https://github.com/in-toto/in-toto-golang/pull/78,closed,302,217,17,13,18,20,1,0,[{'name': 'hacktoberfest-accepted'}],2020-08-29 03:07:36+00:00,2020-10-13 09:50:59+00:00,3912203.0,"45 days, 6:43:23","[{'comment_id': 501034459, 'comment_body': 'Minor nit: \r\n```suggestion\r\ngetHashMapping returns a mapping of hash algorithm name to Hash interface.\r\n```\r\nWDYT?', 'comment_created': datetime.datetime(2020, 10, 7, 13, 57, 50, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501120805, 'comment_body': '```suggestion\r\n\t// We need to use h.Sum(nil) here, because otherwise hash.Sum() appends\r\n```', 'comment_created': datetime.datetime(2020, 10, 7, 15, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501180077, 'comment_body': 'We know that `""sha256""` is in `hashMapping`, right? I think we should trust our own code.', 'comment_created': datetime.datetime(2020, 10, 7, 17, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501181568, 'comment_body': ""Do you think it's worth defining string constants for the algorithm names, given that we use them elsewhere in the code too."", 'comment_created': datetime.datetime(2020, 10, 7, 17, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501183351, 'comment_body': 'Same comment applies to the rest of the diff where you check if an expected value is actually in `hashMapping`.', 'comment_created': datetime.datetime(2020, 10, 7, 17, 22, 35, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501186135, 'comment_body': '💯 for matching scheme with curve size! But why not do it only once before the switch?', 'comment_created': datetime.datetime(2020, 10, 7, 17, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501188947, 'comment_body': 'Same goes for use of `matchEcdsaScheme` in `VerifySignature`.', 'comment_created': datetime.datetime(2020, 10, 7, 17, 31, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501190775, 'comment_body': 'Oh, that must have slipped through in https://github.com/in-toto/in-toto-golang/pull/56. Thanks for fixing!', 'comment_created': datetime.datetime(2020, 10, 7, 17, 34, 41, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501201765, 'comment_body': ""No that `hashed` is no longer an array you don't have to convert it to a slice below in `rsa.VerifyPSS` and `ecdsa.Verify`, i.e. you can do `s/hashed[:]/hashed`."", 'comment_created': datetime.datetime(2020, 10, 7, 17, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501620317, 'comment_body': '```suggestion\r\n\t\t{""ecdsa private key (P384)"", ""grace"", ""ecdsa-sha2-nistp384"", []string{""sha256"", ""sha512""}, ""a5522ebccd492f64e6ec0bbcb5eb782708f6e26709a3712e64fff108b98e5142""},\r\n\t\t{""ecdsa public key (P384)"", ""grace.pub"", ""ecdsa-sha2-nistp384"", []string{""sha256"", ""sha512""}, ""a5522ebccd492f64e6ec0bbcb5eb782708f6e26709a3712e64fff108b98e5142""},\r\n\t\t{""ecdsa private key (P224)"", ""heidi"", ""ecdsa-sha2-nistp224"", []string{""sha256"", ""sha512""}, ""fae849ef9247cc7d19ebd33ab63b5d18a31357508fd82d8ad2aad6fdcc584bd7""},\r\n\t\t{""ecdsa public key (P224)"", ""heidi.pub"", ""ecdsa-sha2-nistp224"", []string{""sha256"", ""sha512""}, ""fae849ef9247cc7d19ebd33ab63b5d18a31357508fd82d8ad2aad6fdcc584bd7""},\r\n```', 'comment_created': datetime.datetime(2020, 10, 8, 10, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501628377, 'comment_body': ""Why does this one fail with `ErrFailedPEMParsing`? Shouldn't `LoadKey` be able to parse an EC private key file? And why does it not fail with `ErrCurveSizeSchemeMismatch`? According to the `test/data/README.md` `erin` is `ecdsa-sha2-nistp256`."", 'comment_created': datetime.datetime(2020, 10, 8, 10, 53, 58, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501630185, 'comment_body': 'minor nit:\r\n```suggestion\r\ncurve size. We do not need a full regex match here, because\r\n```', 'comment_created': datetime.datetime(2020, 10, 8, 10, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501631464, 'comment_body': 'Out of curiosity, what made you add a new test here?', 'comment_created': datetime.datetime(2020, 10, 8, 10, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 501967971, 'comment_body': ""Erin is a pure EC key and not a ECDSA Key in PKCS8 format.. that's the difference. Such keys are just not supported by the go libraries parsing the PKCS8 keys."", 'comment_created': datetime.datetime(2020, 10, 8, 19, 39, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 501968464, 'comment_body': 'Test coverage, I think. Hard to say.. I should have commented it :S ', 'comment_created': datetime.datetime(2020, 10, 8, 19, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 501969318, 'comment_body': 'Yes, I agree with you that this part was very defensive. I just wanted to make sure that this will run in a graceful error if somebody has ever the brilliant idea to remove sha256 support. :D ', 'comment_created': datetime.datetime(2020, 10, 8, 19, 41, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 501969874, 'comment_body': 'Do you have a nice name for it? `sha256String` maybe?', 'comment_created': datetime.datetime(2020, 10, 8, 19, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 502280340, 'comment_body': 'Oh yeah right to cover...\r\nhttps://github.com/in-toto/in-toto-golang/blob/c4cc4d58b0dfebd29a58abea3d6361ab8a54b808/in_toto/util.go#L138-L140', 'comment_created': datetime.datetime(2020, 10, 9, 8, 45, 48, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 502282873, 'comment_body': ""Hm. I probably would have used `SHA256` but all-caps does not seem idiomatic for go consts. Let's just keep the strings. :)"", 'comment_created': datetime.datetime(2020, 10, 9, 8, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 502288594, 'comment_body': ""I'm not a big fan of that kind of defensive programming. I think tests are a way better strategy to defend against such brilliant ideas. :)\r\n\r\n\r\n"", 'comment_created': datetime.datetime(2020, 10, 9, 8, 59, 45, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}]","[{'commit_sha': 'bdc7e5ecd6d19c179b0ed333a1c964db3429935e', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5dcf38554215dc5abd54061bb5b1e9dca28dfa7', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b454496542534adb3f0c78ad88ef4e03c1080ed', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879479b916cc44e3164e47d9baaa70d713ca343b', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b469be87909ec9643cb5141acbf1eea4497b027', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e0819b9235c4968ecfa0c6c9da6f2f47a0faa96', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2348afdd6174977329e52a3dffdb798f87259a4f', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4cc4d58b0dfebd29a58abea3d6361ab8a54b808', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2af8c6d1aa8c5608042b072fe2a4513043651b30', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02f7f3915bb568bcce1d6aa1c80c9e18e537f41e', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3fc5ec491f4228a835a379be252fc1f112616857', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37135251c2c9b7724b3824e987a371b65c5cb8ad', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8531271d6c74e1a209b7ae552de65af064e0ba8', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331
425712728,shibumi/exclude pattern fix 41,"Note: This PR is based on PR #41, I couldn't work on the branch directly, because I am not a project maintainer, so I checkout out PR #41 and opened a new PR instead. With this approach we can still list @ayush159 as author for the code he wrote.

**EDIT: I rewrote everything from scratch**

I am right now working on:

* adding documentation (The Apply... func is missing documentation. The func is being exported, so we should definitely add some docs for it)
* Removing unnecessary things or improving error messages. For example: 

https://github.com/in-toto/in-toto-golang/pull/41/files#diff-73e399e3c84826b077d43cc4cbc98e7eR103


Original PR description is below:

**Fixes issue #33**:

**Description of pull request:**
Used go-git to implement gitignore style pattern parsing. Changed the signature of RecordArtifacts function in runlib.go . Added exclude pattern in method signature. If exclude patterns not available, pass nil.

Please verify and check that the pull request fulfills the following
requirements:

- [x] Tests have been added for the bug fix or new feature
- [x] Docs have been added for the bug fix or new feature",True,53,https://api.github.com/repos/in-toto/in-toto-golang/pulls/53,https://github.com/in-toto/in-toto-golang/pull/53,closed,112,22,5,3,31,15,0,0,[],2020-06-01 02:07:19+00:00,2020-11-17 21:39:10+00:00,14671911.0,"169 days, 19:31:51","[{'comment_id': 434570320, 'comment_body': ""@lukpueh do we want to include this temporary file checks? I don't really think they are necessary, but I wonder why they are commented.. problems with parallel testing?"", 'comment_created': datetime.datetime(2020, 6, 3, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 434571552, 'comment_body': 'Am I right with the thought that we are only testing for no excludePatterns right now? Shall I write another test, where we actually exclude something? ', 'comment_created': datetime.datetime(2020, 6, 3, 13, 36, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 435915795, 'comment_body': 'I had a look on this via `go test -cover`, this should be covered.', 'comment_created': datetime.datetime(2020, 6, 5, 13, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 435916392, 'comment_body': 'I removed the lines, because I think they are not necessary anymore.', 'comment_created': datetime.datetime(2020, 6, 5, 13, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 438704404, 'comment_body': ""Why do we need a `FileInfo` data structure here? Can't we just match on the string?"", 'comment_created': datetime.datetime(2020, 6, 11, 10, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 438705243, 'comment_body': 'Why do we care if the path is a dir?', 'comment_created': datetime.datetime(2020, 6, 11, 11, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 438707931, 'comment_body': ""I fear this won't be enough. We also need to apply the patterns on the paths resolved in `filepath.Walk` below.\r\n\r\nThe `paths` slice might only contain directories that are not matched by a pattern, whereas the files in those directories resolved by `Walk` could match.\r\n\r\nYou can take a look at the reference implementation, to see how it's done there. "", 'comment_created': datetime.datetime(2020, 6, 11, 11, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 439408586, 'comment_body': ""No, because we are dealing with a gitignore matcher here. This matcher needs to know if we are dealing with a directory or not: https://pkg.go.dev/gopkg.in/src-d/go-git.v4/plumbing/format/gitignore?tab=doc#Matcher\r\n\r\nThat's why we need FileInfo to retrieve information about the actual state of the file (directory or not)."", 'comment_created': datetime.datetime(2020, 6, 12, 13, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439409554, 'comment_body': 'Thanks for the clarification! This also answers my question below. Would you mind adding a comment?', 'comment_created': datetime.datetime(2020, 6, 12, 13, 12, 9, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 439410248, 'comment_body': 'This is just how the gitignore matcher works: https://pkg.go.dev/gopkg.in/src-d/go-git.v4/plumbing/format/gitignore?tab=doc#Matcher\r\n\r\nWith a normal regexp matcher we would not need `fileInfo.IsDir()`: https://pkg.go.dev/gopkg.in/src-d/go-git.v4/plumbing/format/gitignore?tab=doc#Matcher\r\n\r\nI guess the former dev chose the gitignore matcher, because it implements most of the filesystem path matching already (different platforms: Linux, Windows, Mac, easier path matching, etc)', 'comment_created': datetime.datetime(2020, 6, 12, 13, 13, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439411544, 'comment_body': ""Do you have a specific test case in mind which I could add? I will have a look on the python implementation. Would be a shame if we say we have regex support, but actually it doesn't work well :D"", 'comment_created': datetime.datetime(2020, 6, 12, 13, 16, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439436279, 'comment_body': 'yep', 'comment_created': datetime.datetime(2020, 6, 12, 13, 59, 33, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 439698110, 'comment_body': ""I think you are right. Wouldn't it make more sense if we would apply the patterns to each string instead? So instead of returning a []string slice we should just check if this path is excluded and if so we should return a true and just move to the next path? This would need some rework of the `ApplyExcludePatterns` func"", 'comment_created': datetime.datetime(2020, 6, 13, 1, 46, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}, {'comment_id': 440076280, 'comment_body': '> Do you have a specific test case in mind which I could add?\r\n\r\nOne test case I have in mind is a file on disk `""/foo/bar""`, an exclude pattern `""bar""` (which should exclude that file), and a path `""/foo""` in the `paths` slice passed to `RecordArtifacts` and walking over files like `/foo/bar`. \r\n\r\nBtw. I just saw that I described the desired behavior in the commit message of https://github.com/in-toto/in-toto/commit/decf211a492b3da3cf2635410bba4f04559bfd17.\r\n\r\nI suggest you also take a look at the tests in the reference implementation (see `tests/test_runlib.py`). and maybe coordinate with @itsbenwu, who is working on a related issue (https://github.com/in-toto/in-toto/issues/355).\r\n\r\n> Wouldn\'t it make more sense if we would apply the patterns to each string instead?\r\n\r\nMaybe. I think when when I first wrote this in https://github.com/in-toto/in-toto/commit/3ee8b67ea813830c4e228e82b6d85a10174c0752 I saw that the function I used, i.e. `fnmatch.filter` took multiple names as first argument and multiple names was what I had. :) Performance-wise it\'s many lightweight calls to the filter function vs. one probably more expensive call. Not sure which one performs better. Feel free to profile. To me either approach seems fine.', 'comment_created': datetime.datetime(2020, 6, 15, 10, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'lukpueh', 'type': 'User'}, {'comment_id': 525546396, 'comment_body': '@SantiagoTorres  oops.. we might want to fix this. No idea how that change got in my commit :D \r\nI will compile a PR for this tomorrow (too late in Germany already).\r\n\r\nSame for the go version', 'comment_created': datetime.datetime(2020, 11, 17, 21, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shibumi', 'type': 'User'}]","[{'commit_sha': '7e5d86b7544d678087e6ef7582ea8fb21a353490', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1cda26262e8084e5a9f5ef48d976f0356a8e057', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cbe55a6bc8a4b7f036c551ac19590333f00f68c', 'committer_username': 'shibumi', 'committer_name': 'Christian Rebischke', 'committer_email': 'chris@shibumi.dev', 'commit_date': datetime.datetime(2013, 3, 11, 16, 31, 14, tzinfo=datetime.timezone.utc)}]",Christian Rebischke,3833685,chris@shibumi.dev,User,,174,,101,331

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
153135863,in-toto-golang,in-toto/in-toto-golang,Go,51,126,13,39,954,32,3,5,"[{'id': 746193234, 'number': 135, 'closed': datetime.datetime(2021, 9, 29, 23, 52, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 29, 22, 51, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3628.0, 'time_delta': '1:00:28', 'additions': 52, 'deletions': 3, 'state': 'closed'}, {'id': 743898138, 'number': 131, 'closed': datetime.datetime(2021, 9, 27, 22, 38, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 27, 21, 57, 47, tzinfo=datetime.timezone.utc), 'time_taken': 2448.0, 'time_delta': '0:40:48', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 742924437, 'number': 128, 'closed': None, 'created': datetime.datetime(2021, 9, 26, 18, 23, 10, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 144, 'deletions': 28, 'state': 'open'}, {'id': 731945032, 'number': 126, 'closed': datetime.datetime(2022, 10, 19, 1, 41, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 11, 14, 58, 46, tzinfo=datetime.timezone.utc), 'time_taken': 34771386.0, 'time_delta': '402 days, 10:43:06', 'additions': 72, 'deletions': 4, 'state': 'closed'}, {'id': 731810088, 'number': 123, 'closed': datetime.datetime(2021, 9, 17, 15, 31, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 10, 23, 8, 57, tzinfo=datetime.timezone.utc), 'time_taken': 577337.0, 'time_delta': '6 days, 16:22:17', 'additions': 71, 'deletions': 18, 'state': 'closed'}, {'id': 731800479, 'number': 122, 'closed': datetime.datetime(2021, 10, 17, 19, 42, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 10, 22, 46, 37, tzinfo=datetime.timezone.utc), 'time_taken': 3185748.0, 'time_delta': '36 days, 20:55:48', 'additions': 19, 'deletions': 780, 'state': 'closed'}, {'id': 727152998, 'number': 121, 'closed': datetime.datetime(2021, 9, 4, 15, 54, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 4, 1, 3, 5, tzinfo=datetime.timezone.utc), 'time_taken': 53486.0, 'time_delta': '14:51:26', 'additions': 18, 'deletions': 18, 'state': 'closed'}, {'id': 722907601, 'number': 120, 'closed': datetime.datetime(2021, 8, 31, 15, 52, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 31, 0, 6, 29, tzinfo=datetime.timezone.utc), 'time_taken': 56756.0, 'time_delta': '15:45:56', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 673740697, 'number': 113, 'closed': datetime.datetime(2021, 6, 20, 23, 53, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 21, 23, 49, tzinfo=datetime.timezone.utc), 'time_taken': 181788.0, 'time_delta': '2 days, 2:29:48', 'additions': 27, 'deletions': 2, 'state': 'closed'}, {'id': 673701455, 'number': 112, 'closed': datetime.datetime(2021, 6, 18, 20, 52, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 20, 10, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2556.0, 'time_delta': '0:42:36', 'additions': 31, 'deletions': 3, 'state': 'closed'}, {'id': 645078691, 'number': 105, 'closed': datetime.datetime(2021, 5, 26, 23, 49, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 15, 4, 31, 37, tzinfo=datetime.timezone.utc), 'time_taken': 1019893.0, 'time_delta': '11 days, 19:18:13', 'additions': 258, 'deletions': 16, 'state': 'closed'}, {'id': 595941793, 'number': 99, 'closed': datetime.datetime(2021, 3, 18, 21, 5, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 18, 21, 1, 38, tzinfo=datetime.timezone.utc), 'time_taken': 211.0, 'time_delta': '0:03:31', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 522729543, 'number': 82, 'closed': datetime.datetime(2020, 11, 17, 21, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 11, 17, 21, 53, 30, tzinfo=datetime.timezone.utc), 'time_taken': 90.0, 'time_delta': '0:01:30', 'additions': 2, 'deletions': 2, 'state': 'closed'}, {'id': 482900607, 'number': 79, 'closed': datetime.datetime(2020, 9, 9, 17, 0, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 9, 14, 49, 42, tzinfo=datetime.timezone.utc), 'time_taken': 7852.0, 'time_delta': '2:10:52', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 475710788, 'number': 78, 'closed': datetime.datetime(2020, 10, 13, 9, 50, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 29, 3, 7, 36, tzinfo=datetime.timezone.utc), 'time_taken': 3912203.0, 'time_delta': '45 days, 6:43:23', 'additions': 302, 'deletions': 217, 'state': 'closed'}, {'id': 473600678, 'number': 77, 'closed': datetime.datetime(2020, 8, 26, 12, 27, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 2, 15, 8, tzinfo=datetime.timezone.utc), 'time_taken': 36769.0, 'time_delta': '10:12:49', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 473589098, 'number': 76, 'closed': datetime.datetime(2020, 8, 26, 12, 29, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 26, 1, 28, 49, tzinfo=datetime.timezone.utc), 'time_taken': 39637.0, 'time_delta': '11:00:37', 'additions': 61, 'deletions': 30, 'state': 'closed'}, {'id': 471208994, 'number': 73, 'closed': datetime.datetime(2020, 8, 26, 7, 24, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 19, 55, 4, tzinfo=datetime.timezone.utc), 'time_taken': 473360.0, 'time_delta': '5 days, 11:29:20', 'additions': 20, 'deletions': 26, 'state': 'closed'}, {'id': 471049945, 'number': 72, 'closed': datetime.datetime(2020, 9, 3, 11, 34, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 16, 27, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1191967.0, 'time_delta': '13 days, 19:06:07', 'additions': 35, 'deletions': 25, 'state': 'closed'}, {'id': 470930503, 'number': 70, 'closed': datetime.datetime(2021, 1, 5, 17, 22, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 14, 0, 6, tzinfo=datetime.timezone.utc), 'time_taken': 11935324.0, 'time_delta': '138 days, 3:22:04', 'additions': 6, 'deletions': 38, 'state': 'closed'}, {'id': 438443149, 'number': 56, 'closed': datetime.datetime(2020, 8, 20, 12, 41, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 23, 9, 30, 22, tzinfo=datetime.timezone.utc), 'time_taken': 5022695.0, 'time_delta': '58 days, 3:11:35', 'additions': 1766, 'deletions': 582, 'state': 'closed'}, {'id': 428668311, 'number': 55, 'closed': datetime.datetime(2020, 6, 23, 9, 8, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 5, 18, 59, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1519728.0, 'time_delta': '17 days, 14:08:48', 'additions': 248, 'deletions': 7, 'state': 'closed'}, {'id': 425712728, 'number': 53, 'closed': datetime.datetime(2020, 11, 17, 21, 39, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 1, 2, 7, 19, tzinfo=datetime.timezone.utc), 'time_taken': 14671911.0, 'time_delta': '169 days, 19:31:51', 'additions': 112, 'deletions': 22, 'state': 'closed'}, {'id': 424580301, 'number': 52, 'closed': datetime.datetime(2020, 6, 5, 12, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 15, 54, 54, tzinfo=datetime.timezone.utc), 'time_taken': 679506.0, 'time_delta': '7 days, 20:45:06', 'additions': 171, 'deletions': 64, 'state': 'closed'}, {'id': 422496178, 'number': 51, 'closed': datetime.datetime(2020, 5, 27, 11, 20, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 25, 0, 47, 3, tzinfo=datetime.timezone.utc), 'time_taken': 210810.0, 'time_delta': '2 days, 10:33:30', 'additions': 104, 'deletions': 86, 'state': 'closed'}]"
59531400,in-toto,in-toto/in-toto,Python,135,857,40,44,2228,48,15,7,"[{'id': 457894388, 'number': 379, 'closed': datetime.datetime(2020, 8, 5, 13, 33, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 28, 15, 42, 21, tzinfo=datetime.timezone.utc), 'time_taken': 683488.0, 'time_delta': '7 days, 21:51:28', 'additions': 12, 'deletions': 11, 'state': 'closed'}]"
87951491,specification,in-toto/specification,Python,26,37,11,17,172,11,13,2,"[{'id': 456254032, 'number': 36, 'closed': datetime.datetime(2021, 1, 27, 14, 44, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 12, 15, 23, tzinfo=datetime.timezone.utc), 'time_taken': 16165765.0, 'time_delta': '187 days, 2:29:25', 'additions': 16, 'deletions': 16, 'state': 'closed'}, {'id': 424548163, 'number': 31, 'closed': datetime.datetime(2020, 5, 28, 15, 6, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 28, 15, 0, 56, tzinfo=datetime.timezone.utc), 'time_taken': 352.0, 'time_delta': '0:05:52', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 415562904, 'number': 29, 'closed': datetime.datetime(2020, 5, 13, 0, 57, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 5, 9, 11, 40, 3, tzinfo=datetime.timezone.utc), 'time_taken': 307031.0, 'time_delta': '3 days, 13:17:11', 'additions': 42, 'deletions': 42, 'state': 'closed'}]"
