pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
672466631,Initial prototype for Dot Plots,"## Description
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

This is the initial prototype for `dot plots`. I have implemented Wilkinson's algorithm for the plot. 

The only argument which is necessary for this plot is a  `values` argument of type array. These are the values for which the dots will be plotted.

Function Call:

`az.plot_dots(values = values)`

Output:

![Screenshot from 2021-06-17 15-26-41](https://user-images.githubusercontent.com/40103387/122375145-98211300-cf80-11eb-9588-ac5551433cc0.png)

`az.plot_dots(values = values, point_interval = True)`

Output:

![Screenshot from 2021-06-17 15-26-49](https://user-images.githubusercontent.com/40103387/122375241-aa9b4c80-cf80-11eb-95b2-5e478f16d4b8.png)

`az.plot_dots(values = values , quantiles = 50, point_interval = True)`

Output:

![Screenshot from 2021-06-17 15-27-28](https://user-images.githubusercontent.com/40103387/122375290-b6870e80-cf80-11eb-8e64-07734572d09b.png)


## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [x] New features are properly documented (with an example if appropriate)?
- [x] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/main/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1728,https://api.github.com/repos/arviz-devs/arviz/pulls/1728,https://github.com/arviz-devs/arviz/pull/1728,closed,787,0,10,20,15,77,1,0,[{'name': 'GSOC'}],2021-06-17 10:02:50+00:00,2021-08-03 19:24:24+00:00,4094494.0,"47 days, 9:21:34","[{'comment_id': 653455786, 'comment_body': 'this reads a little bit more clear `math.sqrt((values[-1] - values[0]) ** 2 / (2 * quantiles * np.pi))`', 'comment_created': datetime.datetime(2021, 6, 17, 10, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653456782, 'comment_body': 'no need as `np.sort` will convert values to an array', 'comment_created': datetime.datetime(2021, 6, 17, 10, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653530534, 'comment_body': 'Not sure about the name. It should probably be singular ""plot_dot"", or maybe ""plot_quantile_dot"", is more descriptive but too long...', 'comment_created': datetime.datetime(2021, 6, 17, 12, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653531408, 'comment_body': 'A reference here or even better in the docstring would be nice', 'comment_created': datetime.datetime(2021, 6, 17, 12, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653535116, 'comment_body': 'this should be ""Cx"", I think ""C0"" is a good default.', 'comment_created': datetime.datetime(2021, 6, 17, 12, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653538170, 'comment_body': 'maybe this should be inside `plot_utils`. Are you planning to reuse this code for other plots?', 'comment_created': datetime.datetime(2021, 6, 17, 12, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653542293, 'comment_body': 'and if not?', 'comment_created': datetime.datetime(2021, 6, 17, 13, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653542579, 'comment_body': 'Plot distribution as quantile dot plot', 'comment_created': datetime.datetime(2021, 6, 17, 13, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653543292, 'comment_body': 'I think I am missing something. What is the alternative if quantiles is none? ', 'comment_created': datetime.datetime(2021, 6, 17, 13, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653543688, 'comment_body': 'could the default value be a small integer like 20?', 'comment_created': datetime.datetime(2021, 6, 17, 13, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653573278, 'comment_body': '""... as a dot plot or quantile dot plot"" I think would be best, plus as you commented above, references to both dotplot and quantile dotplot explanations.', 'comment_created': datetime.datetime(2021, 6, 17, 13, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 653573915, 'comment_body': 'I agree that it would probably be better to have a quantile dotplot as a default, especially if the dotplot with a lot of samples is slow.', 'comment_created': datetime.datetime(2021, 6, 17, 13, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 653615483, 'comment_body': 'Sure\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 14, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653615869, 'comment_body': ""I'll rename it to `plot_dot`\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 14, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653616063, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 6, 17, 14, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653617749, 'comment_body': 'As Oriol had mentioned that we could use it for `plot_posterior`, not sure though. I think it should be better to add it to plot_utils', 'comment_created': datetime.datetime(2021, 6, 17, 14, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653618773, 'comment_body': 'Then it will set quantiles as the total number of points in data and then plot.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653620776, 'comment_body': 'I also think ""Plot distribution as dot plot or quantile dot plot"" sounds better', 'comment_created': datetime.datetime(2021, 6, 17, 14, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653626104, 'comment_body': ""As I mentioned above it will set quantiles as the number of samples. Basically, it will use the actual data to plot. Otherwise, if quantiles were specified and were less than the total number of samples then it would generate quantile number of points and use them to plot. This is done because if we randomly sample quantile number of points from our values and plot them then it may be that it won't represent the actual distribution. [This](https://github.com/mjskay/when-ish-is-my-bus/blob/master/quantile-dotplots.md) explains it much better."", 'comment_created': datetime.datetime(2021, 6, 17, 14, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653628210, 'comment_body': 'Ok, I can make quantile dot plot as default. Should I keep the default value as 20? or a bit more ', 'comment_created': datetime.datetime(2021, 6, 17, 14, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653634972, 'comment_body': 'I think it would be more natural to use a linspace and np.quantiles here. ', 'comment_created': datetime.datetime(2021, 6, 17, 14, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 653644426, 'comment_body': ""I think we should already start to progressively move towards https://github.com/arviz-devs/arviz/wiki/Plot-hierarchy. This plot_point_interval could be the plot_atomic_box for example. Otherwise every plot needs to \r\n\r\n1) reimplement every single component in both backends (plot_posterior plots and labels the hdi interval, plot_violin has the exact same line/boxplot like formatting we have here yet we can't use that here, we need to reimplement it again for the dotplot; plot forest also does something very similar again completely reimplemented from scratch). \r\n2) when we make changes to facetting (with the skip dims PR for example or if we wanted to support what Tomas asked the other day on slack) we have to update every single plot, instead of updating the facet/grid level functions."", 'comment_created': datetime.datetime(2021, 6, 17, 14, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 654838289, 'comment_body': 'I agree quantile dotplot should be the default. I would check what [ggdist](https://mjskay.github.io/ggdist/) uses for the default number of dots and emulate that, since the author Matthew Kay does research in uncertainty visualizations.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654838553, 'comment_body': 'Should probably note that the minimum of this number and the number of data points is used for plotting.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654838687, 'comment_body': 'I think somewhere you should have a check to handle the case where the user lazily reads the docs and passes `quantiles=True`. That was me, and it hung indefinitely.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654838870, 'comment_body': 'Passing a single value (e.g. `values=[1]`) causes this function to hang, when it should probably plot a single point.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654839451, 'comment_body': 'Just wondering if you could share your reasoning for grey as the default color?', 'comment_created': datetime.datetime(2021, 6, 19, 20, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654839923, 'comment_body': 'For modularity, could you split this out into its own function?', 'comment_created': datetime.datetime(2021, 6, 19, 21, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654893922, 'comment_body': 'Yes, if quantile dot plot is set as default, so what should I set the default value of `quantiles` because 20 seems too little for me', 'comment_created': datetime.datetime(2021, 6, 20, 7, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 654893955, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 6, 20, 7, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 654894021, 'comment_body': 'Sure, Thanks', 'comment_created': datetime.datetime(2021, 6, 20, 7, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 654894110, 'comment_body': '`ggdist` uses gey as the default hence I went for that', 'comment_created': datetime.datetime(2021, 6, 20, 7, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 654894152, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 6, 20, 7, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 655225128, 'comment_body': 'My understanding is that dot-plots are useful (or at leas more common) for small dataset, otherwise an histogram or KDE would be a better choice. And that quantile dot plots are generally used with a small number of quantiles because you expect people to actually be able to count the dots. So a small number like 20 seems like a reasonable default. But of course I may be missing something and there are other reasons to pick other default values.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 655228788, 'comment_body': 'In ArviZ we use ""C0"" as the default color.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 655229859, 'comment_body': '`np.sort` already call `np.asarray`', 'comment_created': datetime.datetime(2021, 6, 21, 9, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 655232698, 'comment_body': 'In http://users.eecs.northwestern.edu/~jhullman/busUncertaintyVis.pdf, which introduced quantile dotplots, they found that users were more precise at estimating probabilities from quantile dotplots with 20 dots vs 100. On the other hand, in https://dl.acm.org/doi/10.1145/3173574.3173718 they found that when it came to decison making using quantile dotplots, users performed better with 50 dots vs 20 (they did not compare 100). Which would perhaps indicate that 50 is a reasonable default.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 655559518, 'comment_body': 'Yes, I have already removed the `np.asarray` line', 'comment_created': datetime.datetime(2021, 6, 21, 17, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 655561050, 'comment_body': 'Yes, I have set the default value as 50', 'comment_created': datetime.datetime(2021, 6, 21, 17, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 655563092, 'comment_body': 'Ok will change this to ""C0"", currently I have set it to ""C7"" which is grey itself', 'comment_created': datetime.datetime(2021, 6, 21, 17, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 667230479, 'comment_body': 'Something like this would allow for plotting variables from chains.\r\n```suggestion\r\n    values = values.flatten().sort()\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 21, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667230676, 'comment_body': '```suggestion\r\n            ""quantiles must be of integer type, refer to docs for further details""\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 21, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667230780, 'comment_body': '```suggestion\r\n    if quantiles > values.shape[0]:\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 21, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667231718, 'comment_body': 'Overwriting `values` here means that the point interval will always show the HDI of the quantiles, but it should probably show the HDI of the raw data instead.', 'comment_created': datetime.datetime(2021, 7, 9, 22, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667232164, 'comment_body': ""Do you need two implementations of Wilkinson's algorithm, or can they be unified? Also, wouldn't it be cleaner to have the unified Wilkinson's algorithm to just return stack locations and counts per stack, and then other backend-specific functions could handle the construction and rotation of the stack?"", 'comment_created': datetime.datetime(2021, 7, 9, 22, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667234105, 'comment_body': ""Can we add these as references with DOI's?"", 'comment_created': datetime.datetime(2021, 7, 9, 22, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667234426, 'comment_body': '`plot_kde` takes `quantiles` as a list of quantiles to plot. I wonder if we should use a different kwarg name than `quantiles` here for consistency. Perhaps `nquantiles` or `numquantiles`, which would also be more descriptive?\r\n', 'comment_created': datetime.datetime(2021, 7, 9, 22, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667235681, 'comment_body': 'Can the color be made a keyword argument, perhaps defaulting to one of the standard colors like `C0`? (for dark-background themes, defaulting to ""black"" is not ideal)', 'comment_created': datetime.datetime(2021, 7, 9, 22, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667236131, 'comment_body': 'Using `quantile` is a little easier to follow when the variables record quantiles:\r\n```suggestion\r\n    endpoint = (1 - hdi_prob) / 2\r\n    if quartiles:\r\n        qlist_interval = [endpoint, .25, .75, 1 - endpoint]\r\n    else:\r\n        qlist_interval = [endpoint, 1 - endpoint]\r\n    quantiles_interval = np.quantile(values, qlist_interval)\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 22, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667236517, 'comment_body': 'Likewise, can the marker be a keyword argument?', 'comment_created': datetime.datetime(2021, 7, 9, 22, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667517376, 'comment_body': ""This isn't working as .sort() works for lists and after applying flatten() values is still a numpy array\r\n"", 'comment_created': datetime.datetime(2021, 7, 11, 18, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 667772671, 'comment_body': 'Going with `nquantiles`', 'comment_created': datetime.datetime(2021, 7, 12, 9, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 668294566, 'comment_body': 'I would then try something like\r\n```suggestion\r\n    values = np.ravel(values)\r\n    values.sort()\r\n```', 'comment_created': datetime.datetime(2021, 7, 12, 22, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 668309555, 'comment_body': 'I was thinking a refactor something along the lines of this. Namely, separate the implementation of Wilkinson\'s algorithm from all layouting. \r\n\r\nIt really seems like these implementations should go somewhere else, since they\'re backend agnostic. Can they go in `arviz.plots.dotplot` and be accessed from here?\r\n\r\n```suggestion\r\ndef wilkinson_algorithm(values, binwidth):\r\n    """"""Uses wilkinson\'s algorithm to distribute dots into horizontal stacks""""""\r\n\r\n    ndots = len(values)\r\n    count = 0\r\n    stack_locs, stack_counts = [], []\r\n\r\n    while count < ndots:\r\n        stack_first_dot = values[count]\r\n        num_dots_stack = 0\r\n        while values[count] < (binwidth + stack_first_dot):\r\n            num_dots_stack += 1\r\n            count += 1\r\n            if count == nquantiles:\r\n                break\r\n        stack_locs.append((stack_first_dot + values[count - 1]) / 2)\r\n        stack_counts.append(num_dots_stack)\r\n\r\n    return stack_locs, stack_counts\r\n\r\ndef layout_stacks(stack_locs, stack_counts, binwidth, stackratio, rotated):\r\n    dotheight = stackratio * binwidth\r\n    binradius = binwidth / 2\r\n    x = np.repeat(stack_locs, stack_counts)\r\n    y = np.vstack([dotheight * np.arange(count) + binradius for count in stack_counts])\r\n    if rotated:\r\n        x, y = y, x\r\n    return x, y\r\n```', 'comment_created': datetime.datetime(2021, 7, 12, 22, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 669470727, 'comment_body': 'Thanks\r\n', 'comment_created': datetime.datetime(2021, 7, 14, 10, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 669485378, 'comment_body': 'Yeah, this looks good. Thanks', 'comment_created': datetime.datetime(2021, 7, 14, 10, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 670835526, 'comment_body': ""`np.quantile` uses interpolation. This particular interpolation mode ensures that the quantiles are sampled at actual data points, and that if `nquantiles==values.shape[0]`, then the quantile function returns the sorted data vector.\r\n\r\n```suggestion\r\n        values = np.quantile(values, qlist, interpolation='nearest')\r\n```"", 'comment_created': datetime.datetime(2021, 7, 15, 22, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 671760602, 'comment_body': 'Here and below:\r\n```suggestion\r\n        >>> az.plot_dot(values, nquantiles=100)\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 0, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 673010097, 'comment_body': 'yeah, my bad will change that\r\n ', 'comment_created': datetime.datetime(2021, 7, 20, 10, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 673443431, 'comment_body': '@sethaxen `wilkinson_algorithm` function is in the `dotplot.py` file in plots directory so in which test file should I include the test for it?', 'comment_created': datetime.datetime(2021, 7, 20, 20, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 673478965, 'comment_body': ""Hm, yeah there's not a great place for it. Maybe then in `test_plots_matplotlib.py`."", 'comment_created': datetime.datetime(2021, 7, 20, 20, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 673479198, 'comment_body': 'I think this can wait for a future PR though.', 'comment_created': datetime.datetime(2021, 7, 20, 20, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 675192461, 'comment_body': ""Maybe a test designed after Figure 4 of Wilkinson's paper.\r\n```suggestion\r\n    assert np.sum(stack_counts) == len(values)\r\n    stack_locs, stack_counts = wilkinson_algorithm(([0.0, 1.0, 1.8, 3.0, 5.0], 1.0)\r\n    @assert stack_locs == np.array([0.0, 1.4, 3.0, 5.0])\r\n    @assert stack_counts == np.array([1, 2, 1, 1])\r\n```"", 'comment_created': datetime.datetime(2021, 7, 22, 22, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 677149703, 'comment_body': ""How about using citation like references? \r\n\r\n```suggestion\r\n    This function uses the Wilkinson's Algorithm [1]_ to allot dots to bins.\r\n```\r\n\r\nplus the complete reference in the `References` section like in https://arviz-devs.github.io/arviz/_modules/arviz/plots/separationplot.html#plot_separation. Same for the paper below, maybe leaving the title and reference number in the text?"", 'comment_created': datetime.datetime(2021, 7, 27, 6, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677150224, 'comment_body': ""shouldn't values be a required argument instead of having a default of none and raise an error if it's none?"", 'comment_created': datetime.datetime(2021, 7, 27, 6, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677150551, 'comment_body': '```suggestion\r\n    binwidth : float, optional\r\n```\r\n\r\nand same with the rest of optional parameters', 'comment_created': datetime.datetime(2021, 7, 27, 6, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677151834, 'comment_body': ""```suggestion\r\n    point_estimate : str, optional\r\n```\r\n\r\nnot all the codebase follows the [numpydoc convention](https://arviz-devs.github.io/arviz/contributing/contributing_prs.html#docstring-formatting-and-type-hints) (the standard to be followed wasn't clear originally), but new code should stick to it now that we have. The `Optional[str]` syntax is for type hints, that go in the function definition, not in the docstring."", 'comment_created': datetime.datetime(2021, 7, 27, 6, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677155285, 'comment_body': 'This should indicate which values are valid (same applies to all kwargs below). I think the best way to do so is by indicating to which matplotlib and bokeh function this is eventually passed to and using intersphinx to link there. Alternatively, if using `to_hex` it can also be simply ""must be a valid matplotlib color"", because we use a matplotlib helper function to convert the color to hex so all matplotlib colors also work on bokeh. \r\n\r\nExample: https://arviz-devs.github.io/arviz/_modules/arviz/plots/hdiplot.html#plot_hdi (bokeh patch seems to have been deleted/moved and the link is no longer generated correctly)\r\n\r\nGuidance on intersphinx: https://arviz-devs.github.io/arviz/contributing/developer_guide.html#hyperlinks', 'comment_created': datetime.datetime(2021, 7, 27, 6, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677622927, 'comment_body': ""```suggestion\r\n    This function uses the Wilkinson's Algorithm [1]_ to allot dots to bins.\r\n    The quantile dot plots was inspired from the paper [2]_.\r\n```\r\n\r\nThe final underscore i necessary to make those clickable links."", 'comment_created': datetime.datetime(2021, 7, 27, 16, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677623603, 'comment_body': 'defaults to rcParams value', 'comment_created': datetime.datetime(2021, 7, 27, 16, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677624211, 'comment_body': 'Add to which functions these kwargs are passed. scatter for matplotlib? or plot?', 'comment_created': datetime.datetime(2021, 7, 27, 16, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677628023, 'comment_body': ""Same here, add where these kwargs are passed to. Ideally users won't need to read the source of this function to see where these are passed, then go to plot_utils to the right function and then go to the matplotlib/bokeh docs of the function/class used only to know what is valid here, the same docstring should have the links to matplotlib/bokeh docs directly to the right function. We can then comment on #1188 to have this docstring be an example of good practices\r\n\r\nside note, it says bool, I think it should be a dictionary."", 'comment_created': datetime.datetime(2021, 7, 27, 16, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677855986, 'comment_body': ""the `figure.Figure` structure is no longer used in bokeh so this isn't a valid reference, and I think backend kwargs are not passed to patch but to a figure generation function."", 'comment_created': datetime.datetime(2021, 7, 27, 22, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677856239, 'comment_body': '```suggestion\r\n    The quantile dot plots was inspired from the paper *When (ish) is My Bus?* [2]_.\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 22, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 679440189, 'comment_body': ""In matplotlib case, backend kwargs are passed to create_axes_grid, which passes it to pyplot.subplots. So, shouldn't it be :meth: mpl:matplotlib.pyplot.subplots"", 'comment_created': datetime.datetime(2021, 7, 29, 19, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh-maheshwari', 'type': 'User'}, {'comment_id': 680000831, 'comment_body': 'Yes, you are right. Thanks for pointing it out\r\n', 'comment_created': datetime.datetime(2021, 7, 30, 15, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 680276305, 'comment_body': 'Actually, I thinl subplots is a function not a method,  so it should be `:func:` instead of meth', 'comment_created': datetime.datetime(2021, 7, 31, 0, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': '5989812a9f91bc29aa54e5b0d0b08176ed0f696c', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b3c03decb5c2a59775302bc58168f9e2401d49', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '832b23a5e450213dbf3495dc6fbd1332e08d2976', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e383457a1450038aec3a902a9d1fad7e727711', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b437e69232b58ea1b49f0cf29c9dc7301a52644f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2009c5907c23edc3d0e9e13c457c0cfbcd38d874', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e00f7922aa2443291bdebd13844c85e7d21dd8c', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f4fc19885f19842bb03f72e00507b805f12606b', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1345177659c44f1a2846e4c861141ed59cee14', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bedc94fc6a4dc4619ccc529e02872bb198e52d3', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '886c495f23fbe2f43421c2fe5060ec4ffa22131a', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80db0a43086b9723e3463b7b4411c2e2bf834a7b', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ff8791547103193a3e9768f95887a25954ce1f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9425226b55afcb5230bf9acaf0d0fe8b7820135d', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d49f57909c9b001cd84dda04fab55b1b797feb1', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771e2dcb878d61393a26ae3cabbd0485c105d140', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf80ec7a9dd2b66708809b6350b71332d3b3a33b', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9362c8bbac7dc231746b2c0410f842a1ba4495d', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfcb426ea382f317b9d6fda76a3343fcec4cec0', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c223887b62d2b0db6ae3c0bdd71be95cf8b5cea9', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
700974252,Initial prototype of ecdf plot,"## Description

Fixes #1213, Fixes #1663

This is the initial prototype of ECDF and ECDF-Difference Plots with simultaneous confidence for samples as well as PIT of sample bands. So the `values` argument is necessary as it is the sample. If we need to compare this sample to a distribution or another sample then we provide the `distribution` argument or the `values2` argument. 

Function call:

```
import arviz as az
from scipy.stats import uniform, binom, norm

sample = norm(0,1).rvs(1000)
distribution = norm(0,1)

az.plot_ecdf(sample)
```
![Screenshot from 2021-08-02 01-24-51](https://user-images.githubusercontent.com/40103387/127783723-d8f8f703-3466-4b68-abb1-bda8ed4bc014.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True)`

![Screenshot from 2021-08-02 01-26-07](https://user-images.githubusercontent.com/40103387/127783734-8ecd0e6a-530f-4318-a950-ac9e5045071a.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = True)`

![Screenshot from 2021-08-02 01-26-35](https://user-images.githubusercontent.com/40103387/127783751-d1405675-5b1f-4d99-ab7f-7495ee76152c.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = False, pit = True)`

![Screenshot from 2021-08-02 01-27-16](https://user-images.githubusercontent.com/40103387/127783755-e13c91b4-03c1-4b95-abc1-ce8e5e598487.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = True, pit = True)`

![Screenshot from 2021-08-02 01-26-54](https://user-images.githubusercontent.com/40103387/127783772-172e2616-6f81-4ff6-98af-542a969d3200.png)

Similarly, graphs when comparing to `values2` instead of a `distribution`. Also, we can provide `distribution` or `values2` from a different distribution then the plots depict that the sample does not belong to that distribution.

For eg:

```
sample = norm(0,1).rvs(1000)
distribution = norm(0,2)

az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = True)
```
![Screenshot from 2021-08-02 01-33-46](https://user-images.githubusercontent.com/40103387/127783916-576095a2-bb90-4b61-9af0-6b9dd284860f.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = True, pit = True)`

![Screenshot from 2021-08-02 01-34-07](https://user-images.githubusercontent.com/40103387/127783926-2cc42992-089e-4b89-9653-016c7ce39bd6.png)


<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [ ] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [ ] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [ ] New features are properly documented (with an example if appropriate)?
- [ ] Includes new or updated tests to cover the new feature
- [ ] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/main/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1753,https://api.github.com/repos/arviz-devs/arviz/pulls/1753,https://github.com/arviz-devs/arviz/pull/1753,closed,508,1,7,35,12,72,0,0,[],2021-08-01 20:06:35+00:00,2022-03-23 12:03:15+00:00,20188600.0,"233 days, 15:56:40","[{'comment_id': 687237431, 'comment_body': '```suggestion\r\n            if distribution:\r\n                values = distribution(values)\r\n            else:\r\n                values = compute_ecdf(values2, values) / len(values2)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 22, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687239245, 'comment_body': 'I think it would also be clearer to not overwrite `values`. The y-axis are probabilities, so maybe name them `probs`?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687240104, 'comment_body': 'Can you add a comment explaining what this block is doing?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687240771, 'comment_body': 'How are they compared? doing `plot_ecdf(x, y)` shows just a single ECDF instead of two.', 'comment_created': datetime.datetime(2021, 8, 11, 22, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687241225, 'comment_body': ""It can be discrete; that's fine. It's just that confidence bands only work for either continuous or discrete uniform."", 'comment_created': datetime.datetime(2021, 8, 11, 22, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687241361, 'comment_body': '```suggestion\r\n    """"""Plot ECDF or ECDF-Difference Plot with Confidence bands.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 22, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687242739, 'comment_body': 'Perhaps something like this to distinguish it from the `alpha` kwarg matplotlib uses (and that we use, e.g. for `plot_ppc`)?\r\n```suggestion\r\n    fpr : float, optional\r\n```\r\nI\'m not thrilled with the name though, but it\'s also more likely to be understood by the user than ""type I error rate""', 'comment_created': datetime.datetime(2021, 8, 11, 22, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687242814, 'comment_body': '```suggestion\r\n    num_trials : int, optional\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 22, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687242913, 'comment_body': '""out plot""?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687243230, 'comment_body': '```suggestion\r\n        Cumulative distribution function of the distribution to compare the original sample to\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 22, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687243581, 'comment_body': ""Is there a reason this can't just be `fill`? Or something like `fill_band` or `band_fill`?"", 'comment_created': datetime.datetime(2021, 8, 11, 22, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687243821, 'comment_body': 'It only plots a single band, right? So should it be `confidence_band`?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687244193, 'comment_body': 'What does ""granularity size"" mean?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687244959, 'comment_body': 'Given how you have defined `alpha`, did you mean to default to `alpha=0.05` instead? Might be worth it to default to a 94% confidence level instead (we do that with `hdi_prob` to raise awareness to the arbitrariness of the 0.95 cutoff)', 'comment_created': datetime.datetime(2021, 8, 11, 22, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687245404, 'comment_body': 'I think this needs a more thorough description. The reader of the docstring doesn\'t know what gamma is. Perhaps, ""the number of random ECDFs to generate to construct simultaneous confidence bands""?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687255904, 'comment_body': 'Can you rewrite in 2nd person?', 'comment_created': datetime.datetime(2021, 8, 11, 23, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687256387, 'comment_body': 'It seems like it would be worthwhile to have an argument like `simultaneous=True` or `pointwise=False` that computes the pointwise (ie. marginal) confidence bands.', 'comment_created': datetime.datetime(2021, 8, 11, 23, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687261713, 'comment_body': 'Since this is expected to be a CDF, what about naming this something like `cdf` or `cdf_compare`?', 'comment_created': datetime.datetime(2021, 8, 11, 23, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687262808, 'comment_body': ""`compute_gamma` is more descriptive, since we're not merely getting it.\r\n```suggestion\r\n        gamma = compute_gamma(n, z, granularity, num_trials, alpha)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 11, 23, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687264766, 'comment_body': 'When plotting a non-difference ECDF where the first point is the minimum of the sample points, you want to add an additional point to the beginning so that the ECDF plot hits the y-axis. ', 'comment_created': datetime.datetime(2021, 8, 11, 23, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687265551, 'comment_body': 'Can the color and alpha be set from the `plot_ecdf` function somehow?', 'comment_created': datetime.datetime(2021, 8, 11, 23, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687267540, 'comment_body': 'It would be preferable if the logic of the loop that incrementally computes the ECDF could be its own function. Then this complicated expression and the code below could be much simpler.', 'comment_created': datetime.datetime(2021, 8, 11, 23, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687269604, 'comment_body': ""Technically this is not computing the ECDF; it's computing the rank of `z` in `sample` (because it doesn't divide by the denominator). Should the name reflect that?"", 'comment_created': datetime.datetime(2021, 8, 11, 23, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687929357, 'comment_body': '@sethaxen even if we change this line and keep x as `values` still our main concern is the `get_gamma` function due to which the plot is slow apart from that the plot does not take even 0.2s. But that function would not be affected even if we set x as `values` rather than equally spaced points between values[0] and values[-1]. In get_gamma we need to get the ecdf values for the uniform sample w.r.t `z`. Please take a look into this and tell me if I am correct or not. So I think what @OriolAbril was saying would speed up some parts of the code apart from get_gamma but they are already fast so we wont achieve anything.', 'comment_created': datetime.datetime(2021, 8, 12, 17, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688030420, 'comment_body': 'I will add plot_kwargs, fill_kwargs so that the plots can be customized\r\n', 'comment_created': datetime.datetime(2021, 8, 12, 19, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688030572, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 8, 12, 19, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688031021, 'comment_body': 'Ok will do', 'comment_created': datetime.datetime(2021, 8, 12, 19, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688032178, 'comment_body': 'Do you mean the `if confidence_bands` block?', 'comment_created': datetime.datetime(2021, 8, 12, 19, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688033597, 'comment_body': 'Just to be sure, here you mean that I can add a point before the minimum so that the ecdf at that point is 0?', 'comment_created': datetime.datetime(2021, 8, 12, 19, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688034840, 'comment_body': 'Do you mean the for loop on 74th line? Here I am finding the difference in ecdf and ecdf of uniform distribution', 'comment_created': datetime.datetime(2021, 8, 12, 19, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688035471, 'comment_body': 'Changed, I have added the it in the denominator rather than explicitly doing it outside', 'comment_created': datetime.datetime(2021, 8, 12, 19, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688036320, 'comment_body': 'I think plot_ecdf is good as we are using the ecdf values to compare, not sure though. ', 'comment_created': datetime.datetime(2021, 8, 12, 19, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688036689, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 12, 19, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688037082, 'comment_body': 'Thanks will change', 'comment_created': datetime.datetime(2021, 8, 12, 19, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688038205, 'comment_body': 'So by default the `confidence_bands` argument is false so that when you are doing just plot_ecdf(x,y) it plots the normal ecdf plot of x rather than comparing it with y and plotting the confidence intervals. So should I set the default value of `confidence_bands` to true?', 'comment_created': datetime.datetime(2021, 8, 12, 19, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688039007, 'comment_body': 'The paper writes it as `Simultaneous confidence bands` and also we are finding the band for each evaluation point so I think bands is better', 'comment_created': datetime.datetime(2021, 8, 12, 19, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688039551, 'comment_body': '*our plot, granularity size is the number of evaluation points for our ecdf or ecdf difference plot', 'comment_created': datetime.datetime(2021, 8, 12, 19, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688039613, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 12, 19, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688041703, 'comment_body': 'So `plot_loo_pit` had ecdf_fill as an argument so to maintain consistency I kept it as ecdf_fill but fill also seems good ', 'comment_created': datetime.datetime(2021, 8, 12, 19, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688041854, 'comment_body': 'Will need to look into how to define `alpha` not sure till now. In the paper, it is defined as this \r\n![Screenshot from 2021-08-13 01-22-31](https://user-images.githubusercontent.com/40103387/129260703-9c31d8a4-10c5-4796-9aab-13e23f134d68.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 12, 19, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688041921, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 12, 19, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688045024, 'comment_body': ""> the plot does not take even 0.2s\r\n\r\nBut this is only one plot, imagine a user wants to plot the ecdf of 20 variables, also not sure how many samples you used for benchmarking, but we could easily have >1e6 samples together with 20, 40 or more variables to plot. In those cases the waiting time will be more than noticeable and it probably doesn't need to be. We want ArviZ to provide tools for direct exploratory analysis but also to provide building blocks for custom plots and workflows, which could even be online diagnostics during mcmc sampling or interactive tools for model checking or prior elicitation. \r\n\r\n> But that function would not be affected even if we set x as values rather than equally spaced points between values[0] and values[-1]. In get_gamma we need to get the ecdf values for the uniform sample w.r.t z\r\n\r\nI don't have the algorithm in my mind, so I don't really know if `get_gamma` needs to evaluate the uniform samples on the same `z` as the ecdf of the provided samples, in which case we'd have 1 ecdf computed with the fast sorting algorithm for num_trials computed with the while algorithm, and the difference in computation time would be completely negligible, but I think this misses the point and the goal I was commenting above. In many cases we'll want an ecdf without bands (we already do that in plot_ppc for example) and again we can have many ecdfs to plot with potentially many samples. "", 'comment_created': datetime.datetime(2021, 8, 12, 20, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 688716633, 'comment_body': 'So @OriolAbril  I did an analysis of the plot_ecdf with and without computing the bands with a sample size of 1000, granularity(number of evaluation points): 100, num_trials:500. \r\nNow without confidence bands(no compute_gamma) the entire plot takes around `0.0117s` for plotting ecdf of the sample or the PIT. \r\nNow when `confidence_bands=True` then the entire plot takes `7.7878s` and the compute_gamma in itself takes `7.7758s`. Now we were talking about using evaluation points s.t we could  compute ecdfs as suggested in `plot_ppc`, but after analysing I found that the `compute_ecdf` which is used inside the `compute_gamma` takes just `0.0812s`(note: this is sum of time of compute_ecdfs over all iterations) which is negligible as compared to the time taken by entire compute_gamma, so rather than thinking to optimize the `compute_ecdf` we should think of optimizing the part of `compute_gamma` apart from `compute_ecdf`.\r\n ', 'comment_created': datetime.datetime(2021, 8, 13, 18, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688718331, 'comment_body': 'Also I will use `np.empty` rather than initializing the list as empty and then filling it during the loop. Thanks for this', 'comment_created': datetime.datetime(2021, 8, 13, 18, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 689447960, 'comment_body': 'No, the `if pit` block.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689449173, 'comment_body': ""Ah, so you're saying that when `confidence_bands` is `True`, the confidence band is determined by comparing `values` and `values2`? What does this correspond to in the paper?"", 'comment_created': datetime.datetime(2021, 8, 16, 11, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689450309, 'comment_body': 'Yeah, in general, I think terms like ""type I error rate"" are technically correct but not descriptive, and for docstrings we want to be descriptive (while perhaps also technical). So I would recommend `fpr`.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689450632, 'comment_body': 'Ah, okay, why not something like `npoints` to be more descriptive?', 'comment_created': datetime.datetime(2021, 8, 16, 11, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689451672, 'comment_body': 'Okay, makes sense.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689452252, 'comment_body': 'I mean the highlighted line, not the function name. Should we rename `distribution` to `cdf`?', 'comment_created': datetime.datetime(2021, 8, 16, 11, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689453201, 'comment_body': ""That's right, yes. Usually this is done by either adding `x=-Inf`, `y=0` (some step function implementations will just draw a vertical line to the `y`-axis in that case), or just duplicating the lowest `x` value and prepending `y=0`. "", 'comment_created': datetime.datetime(2021, 8, 16, 11, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689454239, 'comment_body': 'Yes, but you can do that by 1. constructing the ECDFs and then 2. computing their difference. And all of the blocks that construct an ECDF by looping could be replaced with a single function call that does that, which would simplify the code. Also, that function is then a target for future efficiency improvements.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689496145, 'comment_body': 'yeah that makes sense, thanks', 'comment_created': datetime.datetime(2021, 8, 16, 12, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 691255637, 'comment_body': 'So in the paper, they had only plotted ecdf for PIT of the sample, so for calculation of PIT they have used either the distribution or the comparison sample which I have also done. But in my case I am also plotting ecdf for the sample, so for finding the evaluation points for the uniform distribution while calculating gamma I have used the cdf(x) where x is equally spaced points between min and max. So basically if we are provided the sample and cdf or the sample and comparision sample then if `confidence_bands` is false then there is no use of cdf or comparison sample and a normal ecdf plot is plotted for the sample.', 'comment_created': datetime.datetime(2021, 8, 18, 13, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 717055244, 'comment_body': 'Currently `plot_ecdf(x)` fails because `confidence_bands` defaults to `True`. Perhaps it should default to `None` and then the function sets it to `True` if `cdf` or `values2` is not `None`.', 'comment_created': datetime.datetime(2021, 9, 27, 21, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717055962, 'comment_body': ""I'm sorry, I wasn't able to follow that. Perhaps you could show some example code and plots using this PR that demonstrate what you mean?"", 'comment_created': datetime.datetime(2021, 9, 27, 21, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717060958, 'comment_body': 'This makes the confidence bands have the same stepped pattern as the ecdf itself\r\n```suggestion\r\n        fill_kwargs.setdefault(""step"", ""post"")\r\n        fill_kwargs.setdefault(""color"", to_hex(""C0""))\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717061396, 'comment_body': '```suggestion\r\n        plot_outline_kwargs.setdefault(""where"", ""post"")\r\n        plot_outline_kwargs.setdefault(""color"", to_hex(""C0""))\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717062494, 'comment_body': 'This is called by both branches, so we can move it out.\r\n```suggestion\r\n    plt.step(x_coord, y_coord, **plot_kwargs)\r\n        \r\n    if confidence_bands:\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717062629, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717068713, 'comment_body': 'This way the user can specify both fill and borders\r\n\r\n```suggestion\r\n\r\n        plt.plot(x_bands, lower, x_bands, higher, **plot_outline_kwargs)\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717126731, 'comment_body': 'This vectorized version should be much faster\r\n```suggestion\r\n        f_z = compute_ecdf(unif_samples, z)\r\n        gamma_m = 2 * min(np.amin(binom.cdf(n * f_z, n, z)), np.amin(1 - binom.cdf(n * f_z - 1, n, z)))\r\n```', 'comment_created': datetime.datetime(2021, 9, 28, 0, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717127288, 'comment_body': ""I believe this is computing the same thing as `searchsorted`, so we can avoid the Python for loop:\r\n```suggestion\r\n    return np.searchsorted(sample, z, side='right') / len(sample)\r\n```"", 'comment_created': datetime.datetime(2021, 9, 28, 0, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717127596, 'comment_body': 'What about something like this for simplicity?\r\n\r\n```suggestion\r\n    y = compute_ecdf(probs, x)\r\n\r\n    if not difference:\r\n        x = np.insert(x, 0, x[0])\r\n        y = np.insert(y, 0, 0)\r\n    return x, y\r\n```', 'comment_created': datetime.datetime(2021, 9, 28, 0, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717127999, 'comment_body': ""Loops like this will not be as fast as just computing the reference array and then subtracting it, because NumPy's vectorized functions will be much faster than Python for loops."", 'comment_created': datetime.datetime(2021, 9, 28, 0, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 725698868, 'comment_body': 'ok, got it', 'comment_created': datetime.datetime(2021, 10, 10, 21, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699062, 'comment_body': ""which part weren't you able to follow?"", 'comment_created': datetime.datetime(2021, 10, 10, 21, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699093, 'comment_body': 'ok', 'comment_created': datetime.datetime(2021, 10, 10, 21, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699214, 'comment_body': 'ohh, nice. Thanks', 'comment_created': datetime.datetime(2021, 10, 10, 21, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699263, 'comment_body': 'yeah, will make these changes', 'comment_created': datetime.datetime(2021, 10, 10, 21, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699453, 'comment_body': 'ok, got it', 'comment_created': datetime.datetime(2021, 10, 10, 21, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 833156594, 'comment_body': 'This is something we can make faster in future PR if needed', 'comment_created': datetime.datetime(2022, 3, 23, 11, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}]","[{'commit_sha': '9a62f08ec5ba33fa153509a7a916bf9f037f0e1f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c37427992b953adda77301ffaf4c432d5ea909e', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50b1afd7c1c2128439ef3bfa82d03959235d28ef', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de5fdd121aea4abae3e3e1399daa9d7ca50ff212', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527c295a72863b109d8cccd4c06c06a7a07aa38a', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43b61e6d6f078ef36ae67bb3bea0de4e3271092c', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0354c4999301e0d0b7189c653ab93dd5c097011c', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '335f71a98806382efc798c2d2438f40509fa1ee2', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '054af709801c3a1ae1301627c34a0d17152670e7', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3aac3534fc2f03012e5aea7d06cbaca07edf7d6', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198d4cad2c70eb6f916b86ef2ed98c625cc29bae', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a2d21c7c8472d6664d4403549a0df6409b5148', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '210f7e6d311487375a4559dda1fe044e4585c8cb', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1edc360b9e16011a2fc4c6a44861a673e46ccb', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcee80e0e4ed6a90e21799f7b39ea1b7a97ecf17', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a404dbe6488b915a7283804850ec72f4244840e6', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1103a0cd94fd70f36620a372672631891d5b80f', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60acc253dddf618aa83ff902fa1cb72af6c97840', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb613e1efc89fc9f79b857edbd3659392154e24', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4960565d9243b6827ef878869b82b94df01f51eb', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '460022828daf9a24de508cb044acac43e2737dd6', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2f2ded33fe78e8e233f4f189d8251da6de7a193', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61fa98f3367d4bba894c59529d6726c403c1e7a7', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b64455103f605d7916d56eb65b89f64097612c61', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8381fbce555c41fe30789888d90e069ec9f507ec', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fa376f549e62afb7b9e966de75562dbb3e9829', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54ecb0350b0df3920571dc24005693c57e3b1184', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c5fb45de96feeb4ba2310bca9a6697351833c3', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73707fc16a5105c34e6d5bedf88a270efb3a9a49', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '855e88d50fe1b64b85595bede717e486762d5688', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b9e8438ec6a9c1c267f0d267b1d9c3c49f136c6', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '266d11fbf16c46d1437f8a3621ff49db8ecf7d2f', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01eeced58a5ab6364345499a1a86738df88cd3d9', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bc0a41e75ddb945d07e7e98b5ea9de65af4f6c', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1082be91a64ecc23df248a570bd5dfb7d158391', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
672466631,Initial prototype for Dot Plots,"## Description
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

This is the initial prototype for `dot plots`. I have implemented Wilkinson's algorithm for the plot. 

The only argument which is necessary for this plot is a  `values` argument of type array. These are the values for which the dots will be plotted.

Function Call:

`az.plot_dots(values = values)`

Output:

![Screenshot from 2021-06-17 15-26-41](https://user-images.githubusercontent.com/40103387/122375145-98211300-cf80-11eb-9588-ac5551433cc0.png)

`az.plot_dots(values = values, point_interval = True)`

Output:

![Screenshot from 2021-06-17 15-26-49](https://user-images.githubusercontent.com/40103387/122375241-aa9b4c80-cf80-11eb-95b2-5e478f16d4b8.png)

`az.plot_dots(values = values , quantiles = 50, point_interval = True)`

Output:

![Screenshot from 2021-06-17 15-27-28](https://user-images.githubusercontent.com/40103387/122375290-b6870e80-cf80-11eb-8e64-07734572d09b.png)


## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [x] New features are properly documented (with an example if appropriate)?
- [x] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/main/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1728,https://api.github.com/repos/arviz-devs/arviz/pulls/1728,https://github.com/arviz-devs/arviz/pull/1728,closed,787,0,10,20,15,77,1,0,[{'name': 'GSOC'}],2021-06-17 10:02:50+00:00,2021-08-03 19:24:24+00:00,4094494.0,"47 days, 9:21:34","[{'comment_id': 653455786, 'comment_body': 'this reads a little bit more clear `math.sqrt((values[-1] - values[0]) ** 2 / (2 * quantiles * np.pi))`', 'comment_created': datetime.datetime(2021, 6, 17, 10, 57, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653456782, 'comment_body': 'no need as `np.sort` will convert values to an array', 'comment_created': datetime.datetime(2021, 6, 17, 10, 59, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653530534, 'comment_body': 'Not sure about the name. It should probably be singular ""plot_dot"", or maybe ""plot_quantile_dot"", is more descriptive but too long...', 'comment_created': datetime.datetime(2021, 6, 17, 12, 46, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653531408, 'comment_body': 'A reference here or even better in the docstring would be nice', 'comment_created': datetime.datetime(2021, 6, 17, 12, 47, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653535116, 'comment_body': 'this should be ""Cx"", I think ""C0"" is a good default.', 'comment_created': datetime.datetime(2021, 6, 17, 12, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653538170, 'comment_body': 'maybe this should be inside `plot_utils`. Are you planning to reuse this code for other plots?', 'comment_created': datetime.datetime(2021, 6, 17, 12, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653542293, 'comment_body': 'and if not?', 'comment_created': datetime.datetime(2021, 6, 17, 13, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653542579, 'comment_body': 'Plot distribution as quantile dot plot', 'comment_created': datetime.datetime(2021, 6, 17, 13, 1, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653543292, 'comment_body': 'I think I am missing something. What is the alternative if quantiles is none? ', 'comment_created': datetime.datetime(2021, 6, 17, 13, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653543688, 'comment_body': 'could the default value be a small integer like 20?', 'comment_created': datetime.datetime(2021, 6, 17, 13, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 653573278, 'comment_body': '""... as a dot plot or quantile dot plot"" I think would be best, plus as you commented above, references to both dotplot and quantile dotplot explanations.', 'comment_created': datetime.datetime(2021, 6, 17, 13, 38, 16, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 653573915, 'comment_body': 'I agree that it would probably be better to have a quantile dotplot as a default, especially if the dotplot with a lot of samples is slow.', 'comment_created': datetime.datetime(2021, 6, 17, 13, 39, 1, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 653615483, 'comment_body': 'Sure\r\n', 'comment_created': datetime.datetime(2021, 6, 17, 14, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653615869, 'comment_body': ""I'll rename it to `plot_dot`\r\n"", 'comment_created': datetime.datetime(2021, 6, 17, 14, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653616063, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 6, 17, 14, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653617749, 'comment_body': 'As Oriol had mentioned that we could use it for `plot_posterior`, not sure though. I think it should be better to add it to plot_utils', 'comment_created': datetime.datetime(2021, 6, 17, 14, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653618773, 'comment_body': 'Then it will set quantiles as the total number of points in data and then plot.', 'comment_created': datetime.datetime(2021, 6, 17, 14, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653620776, 'comment_body': 'I also think ""Plot distribution as dot plot or quantile dot plot"" sounds better', 'comment_created': datetime.datetime(2021, 6, 17, 14, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653626104, 'comment_body': ""As I mentioned above it will set quantiles as the number of samples. Basically, it will use the actual data to plot. Otherwise, if quantiles were specified and were less than the total number of samples then it would generate quantile number of points and use them to plot. This is done because if we randomly sample quantile number of points from our values and plot them then it may be that it won't represent the actual distribution. [This](https://github.com/mjskay/when-ish-is-my-bus/blob/master/quantile-dotplots.md) explains it much better."", 'comment_created': datetime.datetime(2021, 6, 17, 14, 35, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653628210, 'comment_body': 'Ok, I can make quantile dot plot as default. Should I keep the default value as 20? or a bit more ', 'comment_created': datetime.datetime(2021, 6, 17, 14, 37, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 653634972, 'comment_body': 'I think it would be more natural to use a linspace and np.quantiles here. ', 'comment_created': datetime.datetime(2021, 6, 17, 14, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 653644426, 'comment_body': ""I think we should already start to progressively move towards https://github.com/arviz-devs/arviz/wiki/Plot-hierarchy. This plot_point_interval could be the plot_atomic_box for example. Otherwise every plot needs to \r\n\r\n1) reimplement every single component in both backends (plot_posterior plots and labels the hdi interval, plot_violin has the exact same line/boxplot like formatting we have here yet we can't use that here, we need to reimplement it again for the dotplot; plot forest also does something very similar again completely reimplemented from scratch). \r\n2) when we make changes to facetting (with the skip dims PR for example or if we wanted to support what Tomas asked the other day on slack) we have to update every single plot, instead of updating the facet/grid level functions."", 'comment_created': datetime.datetime(2021, 6, 17, 14, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 654838289, 'comment_body': 'I agree quantile dotplot should be the default. I would check what [ggdist](https://mjskay.github.io/ggdist/) uses for the default number of dots and emulate that, since the author Matthew Kay does research in uncertainty visualizations.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 44, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654838553, 'comment_body': 'Should probably note that the minimum of this number and the number of data points is used for plotting.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 47, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654838687, 'comment_body': 'I think somewhere you should have a check to handle the case where the user lazily reads the docs and passes `quantiles=True`. That was me, and it hung indefinitely.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654838870, 'comment_body': 'Passing a single value (e.g. `values=[1]`) causes this function to hang, when it should probably plot a single point.', 'comment_created': datetime.datetime(2021, 6, 19, 20, 50, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654839451, 'comment_body': 'Just wondering if you could share your reasoning for grey as the default color?', 'comment_created': datetime.datetime(2021, 6, 19, 20, 58, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654839923, 'comment_body': 'For modularity, could you split this out into its own function?', 'comment_created': datetime.datetime(2021, 6, 19, 21, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 654893922, 'comment_body': 'Yes, if quantile dot plot is set as default, so what should I set the default value of `quantiles` because 20 seems too little for me', 'comment_created': datetime.datetime(2021, 6, 20, 7, 51, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 654893955, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 6, 20, 7, 51, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 654894021, 'comment_body': 'Sure, Thanks', 'comment_created': datetime.datetime(2021, 6, 20, 7, 52, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 654894110, 'comment_body': '`ggdist` uses gey as the default hence I went for that', 'comment_created': datetime.datetime(2021, 6, 20, 7, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 654894152, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 6, 20, 7, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 655225128, 'comment_body': 'My understanding is that dot-plots are useful (or at leas more common) for small dataset, otherwise an histogram or KDE would be a better choice. And that quantile dot plots are generally used with a small number of quantiles because you expect people to actually be able to count the dots. So a small number like 20 seems like a reasonable default. But of course I may be missing something and there are other reasons to pick other default values.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 655228788, 'comment_body': 'In ArviZ we use ""C0"" as the default color.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 655229859, 'comment_body': '`np.sort` already call `np.asarray`', 'comment_created': datetime.datetime(2021, 6, 21, 9, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aloctavodia', 'type': 'User'}, {'comment_id': 655232698, 'comment_body': 'In http://users.eecs.northwestern.edu/~jhullman/busUncertaintyVis.pdf, which introduced quantile dotplots, they found that users were more precise at estimating probabilities from quantile dotplots with 20 dots vs 100. On the other hand, in https://dl.acm.org/doi/10.1145/3173574.3173718 they found that when it came to decison making using quantile dotplots, users performed better with 50 dots vs 20 (they did not compare 100). Which would perhaps indicate that 50 is a reasonable default.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 655559518, 'comment_body': 'Yes, I have already removed the `np.asarray` line', 'comment_created': datetime.datetime(2021, 6, 21, 17, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 655561050, 'comment_body': 'Yes, I have set the default value as 50', 'comment_created': datetime.datetime(2021, 6, 21, 17, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 655563092, 'comment_body': 'Ok will change this to ""C0"", currently I have set it to ""C7"" which is grey itself', 'comment_created': datetime.datetime(2021, 6, 21, 17, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 667230479, 'comment_body': 'Something like this would allow for plotting variables from chains.\r\n```suggestion\r\n    values = values.flatten().sort()\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 21, 58, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667230676, 'comment_body': '```suggestion\r\n            ""quantiles must be of integer type, refer to docs for further details""\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 21, 59, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667230780, 'comment_body': '```suggestion\r\n    if quantiles > values.shape[0]:\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 21, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667231718, 'comment_body': 'Overwriting `values` here means that the point interval will always show the HDI of the quantiles, but it should probably show the HDI of the raw data instead.', 'comment_created': datetime.datetime(2021, 7, 9, 22, 2, 49, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667232164, 'comment_body': ""Do you need two implementations of Wilkinson's algorithm, or can they be unified? Also, wouldn't it be cleaner to have the unified Wilkinson's algorithm to just return stack locations and counts per stack, and then other backend-specific functions could handle the construction and rotation of the stack?"", 'comment_created': datetime.datetime(2021, 7, 9, 22, 4, 18, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667234105, 'comment_body': ""Can we add these as references with DOI's?"", 'comment_created': datetime.datetime(2021, 7, 9, 22, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667234426, 'comment_body': '`plot_kde` takes `quantiles` as a list of quantiles to plot. I wonder if we should use a different kwarg name than `quantiles` here for consistency. Perhaps `nquantiles` or `numquantiles`, which would also be more descriptive?\r\n', 'comment_created': datetime.datetime(2021, 7, 9, 22, 11, 11, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667235681, 'comment_body': 'Can the color be made a keyword argument, perhaps defaulting to one of the standard colors like `C0`? (for dark-background themes, defaulting to ""black"" is not ideal)', 'comment_created': datetime.datetime(2021, 7, 9, 22, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667236131, 'comment_body': 'Using `quantile` is a little easier to follow when the variables record quantiles:\r\n```suggestion\r\n    endpoint = (1 - hdi_prob) / 2\r\n    if quartiles:\r\n        qlist_interval = [endpoint, .25, .75, 1 - endpoint]\r\n    else:\r\n        qlist_interval = [endpoint, 1 - endpoint]\r\n    quantiles_interval = np.quantile(values, qlist_interval)\r\n```', 'comment_created': datetime.datetime(2021, 7, 9, 22, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667236517, 'comment_body': 'Likewise, can the marker be a keyword argument?', 'comment_created': datetime.datetime(2021, 7, 9, 22, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 667517376, 'comment_body': ""This isn't working as .sort() works for lists and after applying flatten() values is still a numpy array\r\n"", 'comment_created': datetime.datetime(2021, 7, 11, 18, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 667772671, 'comment_body': 'Going with `nquantiles`', 'comment_created': datetime.datetime(2021, 7, 12, 9, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 668294566, 'comment_body': 'I would then try something like\r\n```suggestion\r\n    values = np.ravel(values)\r\n    values.sort()\r\n```', 'comment_created': datetime.datetime(2021, 7, 12, 22, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 668309555, 'comment_body': 'I was thinking a refactor something along the lines of this. Namely, separate the implementation of Wilkinson\'s algorithm from all layouting. \r\n\r\nIt really seems like these implementations should go somewhere else, since they\'re backend agnostic. Can they go in `arviz.plots.dotplot` and be accessed from here?\r\n\r\n```suggestion\r\ndef wilkinson_algorithm(values, binwidth):\r\n    """"""Uses wilkinson\'s algorithm to distribute dots into horizontal stacks""""""\r\n\r\n    ndots = len(values)\r\n    count = 0\r\n    stack_locs, stack_counts = [], []\r\n\r\n    while count < ndots:\r\n        stack_first_dot = values[count]\r\n        num_dots_stack = 0\r\n        while values[count] < (binwidth + stack_first_dot):\r\n            num_dots_stack += 1\r\n            count += 1\r\n            if count == nquantiles:\r\n                break\r\n        stack_locs.append((stack_first_dot + values[count - 1]) / 2)\r\n        stack_counts.append(num_dots_stack)\r\n\r\n    return stack_locs, stack_counts\r\n\r\ndef layout_stacks(stack_locs, stack_counts, binwidth, stackratio, rotated):\r\n    dotheight = stackratio * binwidth\r\n    binradius = binwidth / 2\r\n    x = np.repeat(stack_locs, stack_counts)\r\n    y = np.vstack([dotheight * np.arange(count) + binradius for count in stack_counts])\r\n    if rotated:\r\n        x, y = y, x\r\n    return x, y\r\n```', 'comment_created': datetime.datetime(2021, 7, 12, 22, 56, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 669470727, 'comment_body': 'Thanks\r\n', 'comment_created': datetime.datetime(2021, 7, 14, 10, 1, 34, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 669485378, 'comment_body': 'Yeah, this looks good. Thanks', 'comment_created': datetime.datetime(2021, 7, 14, 10, 23, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 670835526, 'comment_body': ""`np.quantile` uses interpolation. This particular interpolation mode ensures that the quantiles are sampled at actual data points, and that if `nquantiles==values.shape[0]`, then the quantile function returns the sorted data vector.\r\n\r\n```suggestion\r\n        values = np.quantile(values, qlist, interpolation='nearest')\r\n```"", 'comment_created': datetime.datetime(2021, 7, 15, 22, 5, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 671760602, 'comment_body': 'Here and below:\r\n```suggestion\r\n        >>> az.plot_dot(values, nquantiles=100)\r\n```', 'comment_created': datetime.datetime(2021, 7, 18, 0, 31, 10, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 673010097, 'comment_body': 'yeah, my bad will change that\r\n ', 'comment_created': datetime.datetime(2021, 7, 20, 10, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 673443431, 'comment_body': '@sethaxen `wilkinson_algorithm` function is in the `dotplot.py` file in plots directory so in which test file should I include the test for it?', 'comment_created': datetime.datetime(2021, 7, 20, 20, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 673478965, 'comment_body': ""Hm, yeah there's not a great place for it. Maybe then in `test_plots_matplotlib.py`."", 'comment_created': datetime.datetime(2021, 7, 20, 20, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 673479198, 'comment_body': 'I think this can wait for a future PR though.', 'comment_created': datetime.datetime(2021, 7, 20, 20, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 675192461, 'comment_body': ""Maybe a test designed after Figure 4 of Wilkinson's paper.\r\n```suggestion\r\n    assert np.sum(stack_counts) == len(values)\r\n    stack_locs, stack_counts = wilkinson_algorithm(([0.0, 1.0, 1.8, 3.0, 5.0], 1.0)\r\n    @assert stack_locs == np.array([0.0, 1.4, 3.0, 5.0])\r\n    @assert stack_counts == np.array([1, 2, 1, 1])\r\n```"", 'comment_created': datetime.datetime(2021, 7, 22, 22, 4, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 677149703, 'comment_body': ""How about using citation like references? \r\n\r\n```suggestion\r\n    This function uses the Wilkinson's Algorithm [1]_ to allot dots to bins.\r\n```\r\n\r\nplus the complete reference in the `References` section like in https://arviz-devs.github.io/arviz/_modules/arviz/plots/separationplot.html#plot_separation. Same for the paper below, maybe leaving the title and reference number in the text?"", 'comment_created': datetime.datetime(2021, 7, 27, 6, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677150224, 'comment_body': ""shouldn't values be a required argument instead of having a default of none and raise an error if it's none?"", 'comment_created': datetime.datetime(2021, 7, 27, 6, 19, 9, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677150551, 'comment_body': '```suggestion\r\n    binwidth : float, optional\r\n```\r\n\r\nand same with the rest of optional parameters', 'comment_created': datetime.datetime(2021, 7, 27, 6, 19, 41, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677151834, 'comment_body': ""```suggestion\r\n    point_estimate : str, optional\r\n```\r\n\r\nnot all the codebase follows the [numpydoc convention](https://arviz-devs.github.io/arviz/contributing/contributing_prs.html#docstring-formatting-and-type-hints) (the standard to be followed wasn't clear originally), but new code should stick to it now that we have. The `Optional[str]` syntax is for type hints, that go in the function definition, not in the docstring."", 'comment_created': datetime.datetime(2021, 7, 27, 6, 22, 14, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677155285, 'comment_body': 'This should indicate which values are valid (same applies to all kwargs below). I think the best way to do so is by indicating to which matplotlib and bokeh function this is eventually passed to and using intersphinx to link there. Alternatively, if using `to_hex` it can also be simply ""must be a valid matplotlib color"", because we use a matplotlib helper function to convert the color to hex so all matplotlib colors also work on bokeh. \r\n\r\nExample: https://arviz-devs.github.io/arviz/_modules/arviz/plots/hdiplot.html#plot_hdi (bokeh patch seems to have been deleted/moved and the link is no longer generated correctly)\r\n\r\nGuidance on intersphinx: https://arviz-devs.github.io/arviz/contributing/developer_guide.html#hyperlinks', 'comment_created': datetime.datetime(2021, 7, 27, 6, 28, 47, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677622927, 'comment_body': ""```suggestion\r\n    This function uses the Wilkinson's Algorithm [1]_ to allot dots to bins.\r\n    The quantile dot plots was inspired from the paper [2]_.\r\n```\r\n\r\nThe final underscore i necessary to make those clickable links."", 'comment_created': datetime.datetime(2021, 7, 27, 16, 40, 23, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677623603, 'comment_body': 'defaults to rcParams value', 'comment_created': datetime.datetime(2021, 7, 27, 16, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677624211, 'comment_body': 'Add to which functions these kwargs are passed. scatter for matplotlib? or plot?', 'comment_created': datetime.datetime(2021, 7, 27, 16, 42, 5, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677628023, 'comment_body': ""Same here, add where these kwargs are passed to. Ideally users won't need to read the source of this function to see where these are passed, then go to plot_utils to the right function and then go to the matplotlib/bokeh docs of the function/class used only to know what is valid here, the same docstring should have the links to matplotlib/bokeh docs directly to the right function. We can then comment on #1188 to have this docstring be an example of good practices\r\n\r\nside note, it says bool, I think it should be a dictionary."", 'comment_created': datetime.datetime(2021, 7, 27, 16, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677855986, 'comment_body': ""the `figure.Figure` structure is no longer used in bokeh so this isn't a valid reference, and I think backend kwargs are not passed to patch but to a figure generation function."", 'comment_created': datetime.datetime(2021, 7, 27, 22, 57, 57, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 677856239, 'comment_body': '```suggestion\r\n    The quantile dot plots was inspired from the paper *When (ish) is My Bus?* [2]_.\r\n```', 'comment_created': datetime.datetime(2021, 7, 27, 22, 58, 36, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 679440189, 'comment_body': ""In matplotlib case, backend kwargs are passed to create_axes_grid, which passes it to pyplot.subplots. So, shouldn't it be :meth: mpl:matplotlib.pyplot.subplots"", 'comment_created': datetime.datetime(2021, 7, 29, 19, 47, 5, tzinfo=datetime.timezone.utc), 'commenter': 'utkarsh-maheshwari', 'type': 'User'}, {'comment_id': 680000831, 'comment_body': 'Yes, you are right. Thanks for pointing it out\r\n', 'comment_created': datetime.datetime(2021, 7, 30, 15, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 680276305, 'comment_body': 'Actually, I thinl subplots is a function not a method,  so it should be `:func:` instead of meth', 'comment_created': datetime.datetime(2021, 7, 31, 0, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': '5989812a9f91bc29aa54e5b0d0b08176ed0f696c', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b3c03decb5c2a59775302bc58168f9e2401d49', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '832b23a5e450213dbf3495dc6fbd1332e08d2976', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f5e383457a1450038aec3a902a9d1fad7e727711', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b437e69232b58ea1b49f0cf29c9dc7301a52644f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2009c5907c23edc3d0e9e13c457c0cfbcd38d874', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e00f7922aa2443291bdebd13844c85e7d21dd8c', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f4fc19885f19842bb03f72e00507b805f12606b', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c1345177659c44f1a2846e4c861141ed59cee14', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bedc94fc6a4dc4619ccc529e02872bb198e52d3', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '886c495f23fbe2f43421c2fe5060ec4ffa22131a', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '80db0a43086b9723e3463b7b4411c2e2bf834a7b', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07ff8791547103193a3e9768f95887a25954ce1f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9425226b55afcb5230bf9acaf0d0fe8b7820135d', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d49f57909c9b001cd84dda04fab55b1b797feb1', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '771e2dcb878d61393a26ae3cabbd0485c105d140', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf80ec7a9dd2b66708809b6350b71332d3b3a33b', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9362c8bbac7dc231746b2c0410f842a1ba4495d', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cfcb426ea382f317b9d6fda76a3343fcec4cec0', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c223887b62d2b0db6ae3c0bdd71be95cf8b5cea9', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
700974252,Initial prototype of ecdf plot,"## Description

Fixes #1213, Fixes #1663

This is the initial prototype of ECDF and ECDF-Difference Plots with simultaneous confidence for samples as well as PIT of sample bands. So the `values` argument is necessary as it is the sample. If we need to compare this sample to a distribution or another sample then we provide the `distribution` argument or the `values2` argument. 

Function call:

```
import arviz as az
from scipy.stats import uniform, binom, norm

sample = norm(0,1).rvs(1000)
distribution = norm(0,1)

az.plot_ecdf(sample)
```
![Screenshot from 2021-08-02 01-24-51](https://user-images.githubusercontent.com/40103387/127783723-d8f8f703-3466-4b68-abb1-bda8ed4bc014.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True)`

![Screenshot from 2021-08-02 01-26-07](https://user-images.githubusercontent.com/40103387/127783734-8ecd0e6a-530f-4318-a950-ac9e5045071a.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = True)`

![Screenshot from 2021-08-02 01-26-35](https://user-images.githubusercontent.com/40103387/127783751-d1405675-5b1f-4d99-ab7f-7495ee76152c.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = False, pit = True)`

![Screenshot from 2021-08-02 01-27-16](https://user-images.githubusercontent.com/40103387/127783755-e13c91b4-03c1-4b95-abc1-ce8e5e598487.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = True, pit = True)`

![Screenshot from 2021-08-02 01-26-54](https://user-images.githubusercontent.com/40103387/127783772-172e2616-6f81-4ff6-98af-542a969d3200.png)

Similarly, graphs when comparing to `values2` instead of a `distribution`. Also, we can provide `distribution` or `values2` from a different distribution then the plots depict that the sample does not belong to that distribution.

For eg:

```
sample = norm(0,1).rvs(1000)
distribution = norm(0,2)

az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = True)
```
![Screenshot from 2021-08-02 01-33-46](https://user-images.githubusercontent.com/40103387/127783916-576095a2-bb90-4b61-9af0-6b9dd284860f.png)

`az.plot_ecdf(sample, distribution = distribution.cdf, confidence_bands = True, difference = True, pit = True)`

![Screenshot from 2021-08-02 01-34-07](https://user-images.githubusercontent.com/40103387/127783926-2cc42992-089e-4b89-9653-016c7ce39bd6.png)


<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [ ] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [ ] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [ ] New features are properly documented (with an example if appropriate)?
- [ ] Includes new or updated tests to cover the new feature
- [ ] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/main/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1753,https://api.github.com/repos/arviz-devs/arviz/pulls/1753,https://github.com/arviz-devs/arviz/pull/1753,closed,508,1,7,35,12,72,0,0,[],2021-08-01 20:06:35+00:00,2022-03-23 12:03:15+00:00,20188600.0,"233 days, 15:56:40","[{'comment_id': 687237431, 'comment_body': '```suggestion\r\n            if distribution:\r\n                values = distribution(values)\r\n            else:\r\n                values = compute_ecdf(values2, values) / len(values2)\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 22, 28, 6, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687239245, 'comment_body': 'I think it would also be clearer to not overwrite `values`. The y-axis are probabilities, so maybe name them `probs`?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 32, 23, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687240104, 'comment_body': 'Can you add a comment explaining what this block is doing?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687240771, 'comment_body': 'How are they compared? doing `plot_ecdf(x, y)` shows just a single ECDF instead of two.', 'comment_created': datetime.datetime(2021, 8, 11, 22, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687241225, 'comment_body': ""It can be discrete; that's fine. It's just that confidence bands only work for either continuous or discrete uniform."", 'comment_created': datetime.datetime(2021, 8, 11, 22, 37, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687241361, 'comment_body': '```suggestion\r\n    """"""Plot ECDF or ECDF-Difference Plot with Confidence bands.\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 22, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687242739, 'comment_body': 'Perhaps something like this to distinguish it from the `alpha` kwarg matplotlib uses (and that we use, e.g. for `plot_ppc`)?\r\n```suggestion\r\n    fpr : float, optional\r\n```\r\nI\'m not thrilled with the name though, but it\'s also more likely to be understood by the user than ""type I error rate""', 'comment_created': datetime.datetime(2021, 8, 11, 22, 41, 14, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687242814, 'comment_body': '```suggestion\r\n    num_trials : int, optional\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 22, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687242913, 'comment_body': '""out plot""?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 41, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687243230, 'comment_body': '```suggestion\r\n        Cumulative distribution function of the distribution to compare the original sample to\r\n```', 'comment_created': datetime.datetime(2021, 8, 11, 22, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687243581, 'comment_body': ""Is there a reason this can't just be `fill`? Or something like `fill_band` or `band_fill`?"", 'comment_created': datetime.datetime(2021, 8, 11, 22, 43, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687243821, 'comment_body': 'It only plots a single band, right? So should it be `confidence_band`?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 43, 59, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687244193, 'comment_body': 'What does ""granularity size"" mean?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687244959, 'comment_body': 'Given how you have defined `alpha`, did you mean to default to `alpha=0.05` instead? Might be worth it to default to a 94% confidence level instead (we do that with `hdi_prob` to raise awareness to the arbitrariness of the 0.95 cutoff)', 'comment_created': datetime.datetime(2021, 8, 11, 22, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687245404, 'comment_body': 'I think this needs a more thorough description. The reader of the docstring doesn\'t know what gamma is. Perhaps, ""the number of random ECDFs to generate to construct simultaneous confidence bands""?', 'comment_created': datetime.datetime(2021, 8, 11, 22, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687255904, 'comment_body': 'Can you rewrite in 2nd person?', 'comment_created': datetime.datetime(2021, 8, 11, 23, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687256387, 'comment_body': 'It seems like it would be worthwhile to have an argument like `simultaneous=True` or `pointwise=False` that computes the pointwise (ie. marginal) confidence bands.', 'comment_created': datetime.datetime(2021, 8, 11, 23, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687261713, 'comment_body': 'Since this is expected to be a CDF, what about naming this something like `cdf` or `cdf_compare`?', 'comment_created': datetime.datetime(2021, 8, 11, 23, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687262808, 'comment_body': ""`compute_gamma` is more descriptive, since we're not merely getting it.\r\n```suggestion\r\n        gamma = compute_gamma(n, z, granularity, num_trials, alpha)\r\n```"", 'comment_created': datetime.datetime(2021, 8, 11, 23, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687264766, 'comment_body': 'When plotting a non-difference ECDF where the first point is the minimum of the sample points, you want to add an additional point to the beginning so that the ECDF plot hits the y-axis. ', 'comment_created': datetime.datetime(2021, 8, 11, 23, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687265551, 'comment_body': 'Can the color and alpha be set from the `plot_ecdf` function somehow?', 'comment_created': datetime.datetime(2021, 8, 11, 23, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687267540, 'comment_body': 'It would be preferable if the logic of the loop that incrementally computes the ECDF could be its own function. Then this complicated expression and the code below could be much simpler.', 'comment_created': datetime.datetime(2021, 8, 11, 23, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687269604, 'comment_body': ""Technically this is not computing the ECDF; it's computing the rank of `z` in `sample` (because it doesn't divide by the denominator). Should the name reflect that?"", 'comment_created': datetime.datetime(2021, 8, 11, 23, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 687929357, 'comment_body': '@sethaxen even if we change this line and keep x as `values` still our main concern is the `get_gamma` function due to which the plot is slow apart from that the plot does not take even 0.2s. But that function would not be affected even if we set x as `values` rather than equally spaced points between values[0] and values[-1]. In get_gamma we need to get the ecdf values for the uniform sample w.r.t `z`. Please take a look into this and tell me if I am correct or not. So I think what @OriolAbril was saying would speed up some parts of the code apart from get_gamma but they are already fast so we wont achieve anything.', 'comment_created': datetime.datetime(2021, 8, 12, 17, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688030420, 'comment_body': 'I will add plot_kwargs, fill_kwargs so that the plots can be customized\r\n', 'comment_created': datetime.datetime(2021, 8, 12, 19, 36, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688030572, 'comment_body': 'Sure', 'comment_created': datetime.datetime(2021, 8, 12, 19, 36, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688031021, 'comment_body': 'Ok will do', 'comment_created': datetime.datetime(2021, 8, 12, 19, 37, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688032178, 'comment_body': 'Do you mean the `if confidence_bands` block?', 'comment_created': datetime.datetime(2021, 8, 12, 19, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688033597, 'comment_body': 'Just to be sure, here you mean that I can add a point before the minimum so that the ecdf at that point is 0?', 'comment_created': datetime.datetime(2021, 8, 12, 19, 41, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688034840, 'comment_body': 'Do you mean the for loop on 74th line? Here I am finding the difference in ecdf and ecdf of uniform distribution', 'comment_created': datetime.datetime(2021, 8, 12, 19, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688035471, 'comment_body': 'Changed, I have added the it in the denominator rather than explicitly doing it outside', 'comment_created': datetime.datetime(2021, 8, 12, 19, 44, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688036320, 'comment_body': 'I think plot_ecdf is good as we are using the ecdf values to compare, not sure though. ', 'comment_created': datetime.datetime(2021, 8, 12, 19, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688036689, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 12, 19, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688037082, 'comment_body': 'Thanks will change', 'comment_created': datetime.datetime(2021, 8, 12, 19, 47, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688038205, 'comment_body': 'So by default the `confidence_bands` argument is false so that when you are doing just plot_ecdf(x,y) it plots the normal ecdf plot of x rather than comparing it with y and plotting the confidence intervals. So should I set the default value of `confidence_bands` to true?', 'comment_created': datetime.datetime(2021, 8, 12, 19, 49, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688039007, 'comment_body': 'The paper writes it as `Simultaneous confidence bands` and also we are finding the band for each evaluation point so I think bands is better', 'comment_created': datetime.datetime(2021, 8, 12, 19, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688039551, 'comment_body': '*our plot, granularity size is the number of evaluation points for our ecdf or ecdf difference plot', 'comment_created': datetime.datetime(2021, 8, 12, 19, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688039613, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 12, 19, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688041703, 'comment_body': 'So `plot_loo_pit` had ecdf_fill as an argument so to maintain consistency I kept it as ecdf_fill but fill also seems good ', 'comment_created': datetime.datetime(2021, 8, 12, 19, 54, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688041854, 'comment_body': 'Will need to look into how to define `alpha` not sure till now. In the paper, it is defined as this \r\n![Screenshot from 2021-08-13 01-22-31](https://user-images.githubusercontent.com/40103387/129260703-9c31d8a4-10c5-4796-9aab-13e23f134d68.png)\r\n', 'comment_created': datetime.datetime(2021, 8, 12, 19, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688041921, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 8, 12, 19, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688045024, 'comment_body': ""> the plot does not take even 0.2s\r\n\r\nBut this is only one plot, imagine a user wants to plot the ecdf of 20 variables, also not sure how many samples you used for benchmarking, but we could easily have >1e6 samples together with 20, 40 or more variables to plot. In those cases the waiting time will be more than noticeable and it probably doesn't need to be. We want ArviZ to provide tools for direct exploratory analysis but also to provide building blocks for custom plots and workflows, which could even be online diagnostics during mcmc sampling or interactive tools for model checking or prior elicitation. \r\n\r\n> But that function would not be affected even if we set x as values rather than equally spaced points between values[0] and values[-1]. In get_gamma we need to get the ecdf values for the uniform sample w.r.t z\r\n\r\nI don't have the algorithm in my mind, so I don't really know if `get_gamma` needs to evaluate the uniform samples on the same `z` as the ecdf of the provided samples, in which case we'd have 1 ecdf computed with the fast sorting algorithm for num_trials computed with the while algorithm, and the difference in computation time would be completely negligible, but I think this misses the point and the goal I was commenting above. In many cases we'll want an ecdf without bands (we already do that in plot_ppc for example) and again we can have many ecdfs to plot with potentially many samples. "", 'comment_created': datetime.datetime(2021, 8, 12, 20, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 688716633, 'comment_body': 'So @OriolAbril  I did an analysis of the plot_ecdf with and without computing the bands with a sample size of 1000, granularity(number of evaluation points): 100, num_trials:500. \r\nNow without confidence bands(no compute_gamma) the entire plot takes around `0.0117s` for plotting ecdf of the sample or the PIT. \r\nNow when `confidence_bands=True` then the entire plot takes `7.7878s` and the compute_gamma in itself takes `7.7758s`. Now we were talking about using evaluation points s.t we could  compute ecdfs as suggested in `plot_ppc`, but after analysing I found that the `compute_ecdf` which is used inside the `compute_gamma` takes just `0.0812s`(note: this is sum of time of compute_ecdfs over all iterations) which is negligible as compared to the time taken by entire compute_gamma, so rather than thinking to optimize the `compute_ecdf` we should think of optimizing the part of `compute_gamma` apart from `compute_ecdf`.\r\n ', 'comment_created': datetime.datetime(2021, 8, 13, 18, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 688718331, 'comment_body': 'Also I will use `np.empty` rather than initializing the list as empty and then filling it during the loop. Thanks for this', 'comment_created': datetime.datetime(2021, 8, 13, 18, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 689447960, 'comment_body': 'No, the `if pit` block.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689449173, 'comment_body': ""Ah, so you're saying that when `confidence_bands` is `True`, the confidence band is determined by comparing `values` and `values2`? What does this correspond to in the paper?"", 'comment_created': datetime.datetime(2021, 8, 16, 11, 19, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689450309, 'comment_body': 'Yeah, in general, I think terms like ""type I error rate"" are technically correct but not descriptive, and for docstrings we want to be descriptive (while perhaps also technical). So I would recommend `fpr`.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 21, 22, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689450632, 'comment_body': 'Ah, okay, why not something like `npoints` to be more descriptive?', 'comment_created': datetime.datetime(2021, 8, 16, 11, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689451672, 'comment_body': 'Okay, makes sense.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689452252, 'comment_body': 'I mean the highlighted line, not the function name. Should we rename `distribution` to `cdf`?', 'comment_created': datetime.datetime(2021, 8, 16, 11, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689453201, 'comment_body': ""That's right, yes. Usually this is done by either adding `x=-Inf`, `y=0` (some step function implementations will just draw a vertical line to the `y`-axis in that case), or just duplicating the lowest `x` value and prepending `y=0`. "", 'comment_created': datetime.datetime(2021, 8, 16, 11, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689454239, 'comment_body': 'Yes, but you can do that by 1. constructing the ECDFs and then 2. computing their difference. And all of the blocks that construct an ECDF by looping could be replaced with a single function call that does that, which would simplify the code. Also, that function is then a target for future efficiency improvements.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 689496145, 'comment_body': 'yeah that makes sense, thanks', 'comment_created': datetime.datetime(2021, 8, 16, 12, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 691255637, 'comment_body': 'So in the paper, they had only plotted ecdf for PIT of the sample, so for calculation of PIT they have used either the distribution or the comparison sample which I have also done. But in my case I am also plotting ecdf for the sample, so for finding the evaluation points for the uniform distribution while calculating gamma I have used the cdf(x) where x is equally spaced points between min and max. So basically if we are provided the sample and cdf or the sample and comparision sample then if `confidence_bands` is false then there is no use of cdf or comparison sample and a normal ecdf plot is plotted for the sample.', 'comment_created': datetime.datetime(2021, 8, 18, 13, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 717055244, 'comment_body': 'Currently `plot_ecdf(x)` fails because `confidence_bands` defaults to `True`. Perhaps it should default to `None` and then the function sets it to `True` if `cdf` or `values2` is not `None`.', 'comment_created': datetime.datetime(2021, 9, 27, 21, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717055962, 'comment_body': ""I'm sorry, I wasn't able to follow that. Perhaps you could show some example code and plots using this PR that demonstrate what you mean?"", 'comment_created': datetime.datetime(2021, 9, 27, 21, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717060958, 'comment_body': 'This makes the confidence bands have the same stepped pattern as the ecdf itself\r\n```suggestion\r\n        fill_kwargs.setdefault(""step"", ""post"")\r\n        fill_kwargs.setdefault(""color"", to_hex(""C0""))\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717061396, 'comment_body': '```suggestion\r\n        plot_outline_kwargs.setdefault(""where"", ""post"")\r\n        plot_outline_kwargs.setdefault(""color"", to_hex(""C0""))\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717062494, 'comment_body': 'This is called by both branches, so we can move it out.\r\n```suggestion\r\n    plt.step(x_coord, y_coord, **plot_kwargs)\r\n        \r\n    if confidence_bands:\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717062629, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717068713, 'comment_body': 'This way the user can specify both fill and borders\r\n\r\n```suggestion\r\n\r\n        plt.plot(x_bands, lower, x_bands, higher, **plot_outline_kwargs)\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 21, 45, 42, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717126731, 'comment_body': 'This vectorized version should be much faster\r\n```suggestion\r\n        f_z = compute_ecdf(unif_samples, z)\r\n        gamma_m = 2 * min(np.amin(binom.cdf(n * f_z, n, z)), np.amin(1 - binom.cdf(n * f_z - 1, n, z)))\r\n```', 'comment_created': datetime.datetime(2021, 9, 28, 0, 4, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717127288, 'comment_body': ""I believe this is computing the same thing as `searchsorted`, so we can avoid the Python for loop:\r\n```suggestion\r\n    return np.searchsorted(sample, z, side='right') / len(sample)\r\n```"", 'comment_created': datetime.datetime(2021, 9, 28, 0, 6, 3, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717127596, 'comment_body': 'What about something like this for simplicity?\r\n\r\n```suggestion\r\n    y = compute_ecdf(probs, x)\r\n\r\n    if not difference:\r\n        x = np.insert(x, 0, x[0])\r\n        y = np.insert(y, 0, 0)\r\n    return x, y\r\n```', 'comment_created': datetime.datetime(2021, 9, 28, 0, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 717127999, 'comment_body': ""Loops like this will not be as fast as just computing the reference array and then subtracting it, because NumPy's vectorized functions will be much faster than Python for loops."", 'comment_created': datetime.datetime(2021, 9, 28, 0, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'sethaxen', 'type': 'User'}, {'comment_id': 725698868, 'comment_body': 'ok, got it', 'comment_created': datetime.datetime(2021, 10, 10, 21, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699062, 'comment_body': ""which part weren't you able to follow?"", 'comment_created': datetime.datetime(2021, 10, 10, 21, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699093, 'comment_body': 'ok', 'comment_created': datetime.datetime(2021, 10, 10, 21, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699214, 'comment_body': 'ohh, nice. Thanks', 'comment_created': datetime.datetime(2021, 10, 10, 21, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699263, 'comment_body': 'yeah, will make these changes', 'comment_created': datetime.datetime(2021, 10, 10, 21, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 725699453, 'comment_body': 'ok, got it', 'comment_created': datetime.datetime(2021, 10, 10, 21, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 833156594, 'comment_body': 'This is something we can make faster in future PR if needed', 'comment_created': datetime.datetime(2022, 3, 23, 11, 35, 58, tzinfo=datetime.timezone.utc), 'commenter': 'ahartikainen', 'type': 'User'}]","[{'commit_sha': '9a62f08ec5ba33fa153509a7a916bf9f037f0e1f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c37427992b953adda77301ffaf4c432d5ea909e', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50b1afd7c1c2128439ef3bfa82d03959235d28ef', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de5fdd121aea4abae3e3e1399daa9d7ca50ff212', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '527c295a72863b109d8cccd4c06c06a7a07aa38a', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43b61e6d6f078ef36ae67bb3bea0de4e3271092c', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0354c4999301e0d0b7189c653ab93dd5c097011c', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '335f71a98806382efc798c2d2438f40509fa1ee2', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '054af709801c3a1ae1301627c34a0d17152670e7', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3aac3534fc2f03012e5aea7d06cbaca07edf7d6', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '198d4cad2c70eb6f916b86ef2ed98c625cc29bae', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83a2d21c7c8472d6664d4403549a0df6409b5148', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '210f7e6d311487375a4559dda1fe044e4585c8cb', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d1edc360b9e16011a2fc4c6a44861a673e46ccb', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcee80e0e4ed6a90e21799f7b39ea1b7a97ecf17', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a404dbe6488b915a7283804850ec72f4244840e6', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1103a0cd94fd70f36620a372672631891d5b80f', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60acc253dddf618aa83ff902fa1cb72af6c97840', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fb613e1efc89fc9f79b857edbd3659392154e24', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4960565d9243b6827ef878869b82b94df01f51eb', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '460022828daf9a24de508cb044acac43e2737dd6', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2f2ded33fe78e8e233f4f189d8251da6de7a193', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61fa98f3367d4bba894c59529d6726c403c1e7a7', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b64455103f605d7916d56eb65b89f64097612c61', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8381fbce555c41fe30789888d90e069ec9f507ec', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b0fa376f549e62afb7b9e966de75562dbb3e9829', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54ecb0350b0df3920571dc24005693c57e3b1184', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06c5fb45de96feeb4ba2310bca9a6697351833c3', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73707fc16a5105c34e6d5bedf88a270efb3a9a49', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '855e88d50fe1b64b85595bede717e486762d5688', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b9e8438ec6a9c1c267f0d267b1d9c3c49f136c6', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '266d11fbf16c46d1437f8a3621ff49db8ecf7d2f', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '01eeced58a5ab6364345499a1a86738df88cd3d9', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16bc0a41e75ddb945d07e7e98b5ea9de65af4f6c', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1082be91a64ecc23df248a570bd5dfb7d158391', 'committer_username': 'ahartikainen', 'committer_name': 'Ari Hartikainen', 'committer_email': None, 'commit_date': datetime.datetime(2015, 7, 3, 6, 50, 38, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
696505262,Fix credible interval  percentage in plot loo pit legend,"## Description

Fix credible interval percentage in `plot_loo_pit` legend

Before:
![Screenshot from 2021-07-25 19-19-17](https://user-images.githubusercontent.com/40103387/126901516-e511c29f-9cfb-4f3a-9037-989195270939.png)

After:
![Screenshot from 2021-07-25 19-17-53](https://user-images.githubusercontent.com/40103387/126901525-d0b0b6f3-62e5-4d5f-8ef3-6b3aade37aa1.png)


<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [x] Code style  correct (follows pylint and black guidelines)
- [x] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/main/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1745,https://api.github.com/repos/arviz-devs/arviz/pulls/1745,https://github.com/arviz-devs/arviz/pull/1745,closed,6,3,3,2,4,0,0,0,[],2021-07-25 13:51:08+00:00,2021-07-26 12:43:21+00:00,82333.0,22:52:13,[],"[{'commit_sha': 'ec5ef565203cea0fd40dc1eb97de060beaba55a3', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4353e8402b1a549062ad7957291fa00d5a0780f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
716546002,Added multiple data example to plot_forest,"## Description

Fixed #1706 
<!--
Thank you so much for your PR! To help us review your contribution, please consider the following points:

- The PR title should summarize the changes, for example ""Add new group argument for the pair plot"".
  Avoid non-descriptive titles such as ""Addresses issue #348"".

- The description should provide at least 1-2 sentences describing the pull request in detail and
  link to any relevant issues.

- Please prefix the title of incomplete contributions with [WIP] (to indicate a work in
  progress). WIPs may be useful to (1) indicate you are working on something to avoid
  duplicated work, (2) request broad review of functionality or API, or (3) seek collaborators. -->

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [ ] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [ ] Code style  correct (follows pylint and black guidelines)
- [ ] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)

<!--
Also, please consider reading the contributing guidelines and code of conduct carefully before submitting the PR. They are available at
- https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md
- https://github.com/arviz-devs/arviz/blob/main/CODE_OF_CONDUCT.md

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in. Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",True,1761,https://api.github.com/repos/arviz-devs/arviz/pulls/1761,https://github.com/arviz-devs/arviz/pull/1761,closed,15,0,1,1,1,0,0,0,[],2021-08-20 08:29:29+00:00,2021-08-26 06:14:49+00:00,510320.0,"5 days, 21:45:20",[],"[{'commit_sha': '4fc068bbb2cf89b35efc653c506979139300d27f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
593178403,Added example to plot_hdi using Inference data,"## Description

To fix #1479 

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Code style  correct (follows pylint and black guidelines)
- [x] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)


",True,1615,https://api.github.com/repos/arviz-devs/arviz/pulls/1615,https://github.com/arviz-devs/arviz/pull/1615,closed,14,0,2,9,1,5,0,0,[],2021-03-15 15:37:44+00:00,2021-03-30 14:39:19+00:00,1292495.0,"14 days, 23:01:35","[{'comment_id': 594587938, 'comment_body': ""not sure if you have looked at how the plot looks like, but `obs_id` are integer indexes that don't really have any meaning, they should not be used as x values. They are also not continuous, so plotting a continuous hdi band over all observations is not a good idea either. \r\n\r\nI think this should be done with the regression1d example better, but it looks like the InferenceData does not have the x values used as predictiors. Going down this path would require solving https://github.com/arviz-devs/arviz/issues/1291 and extending the code to get the x data into the inferencedata, which will probably take some time.\r\n\r\nAs a more immediate solution, I would use simulated data (maybe even the same as above) to create a new inferencedata instead of loading a preexisting one and then use this one to plot the hdi"", 'comment_created': datetime.datetime(2021, 3, 15, 18, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 594607389, 'comment_body': 'Yeah, that makes sense, I too was confused about this bit. I was also thinking of creating a new Inference Object and using that to plot the HDI but as the issue suggested to use pre-computed data so went on with that approach to see if it was possible. So as of now, it is not possible as there are no x values in the posterior predictive or the posterior. Will make the necessary changes. Thanks', 'comment_created': datetime.datetime(2021, 3, 15, 19, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 594611843, 'comment_body': 'Minor note, the x values would be in the `constant_data` group', 'comment_created': datetime.datetime(2021, 3, 15, 19, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 602920857, 'comment_body': 'Done!, could you check @OriolAbril? Thanks', 'comment_created': datetime.datetime(2021, 3, 28, 19, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 602940744, 'comment_body': '```suggestion\r\n        >>> idata = az.from_dict(posterior_predictive={""y"" : Y}, constant_data = {""x"" : X})\r\n```\r\n\r\nI\'d recommend using this names instead. `y` is generally used for observed data, and its values will generally be stored in the posterior predictive group instead of the posterior, and I would avoid `dataset` as a name because the object it represents is an `InferenceData` as opposed to an `xr.Dataset` which could be confusing, due to this double meaning of dataset.', 'comment_created': datetime.datetime(2021, 3, 28, 22, 16, 20, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': '16cf91d065b2c684cb20afe27a3ce06d49b1af79', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '086b00179cc01b1a5f16c90fc0caa9ba1da95368', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '888d3ad51b0d101e2f9f52ecb760ff68b285d98e', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd40cd9d951293a3e150cebe0fcaddd80d728c3e1', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d6e1a5f4240a36a3a0ed379b6ec340f97007d4d', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c1a0ca27670aa31034e63c72095567475890dd', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e32eb87827b77df0fa2093a52bbb92c093fb8f12', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '740ce3f73c03198d423cdb787d58a07f8b322e94', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42afbcc5dcfbcaeec7164e3b5e2ee1d21268733a', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
587071600,Fix ess/rhat plot in plot_forest,"## Description
To fix #1596 
As it was seen in #1591 that for the `NoModel` labeller the `ess/rhat` dots were plotted for only one model for both `matplotlib` and `bokeh`. 

After modifying the code:
**Matplotlib** with `NoModel` labeller:
![Screenshot from 2021-03-09 01-39-45](https://user-images.githubusercontent.com/40103387/110376089-cab19a80-8078-11eb-8771-74b4098a8808.png)

**Bokeh**:
![Screenshot from 2021-03-09 01-39-17](https://user-images.githubusercontent.com/40103387/110376119-d309d580-8078-11eb-8994-81140ed6c0ef.png)

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [ ] New features are properly documented (with an example if appropriate)?
- [ ] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [x] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)


",True,1606,https://api.github.com/repos/arviz-devs/arviz/pulls/1606,https://github.com/arviz-devs/arviz/pull/1606,closed,45,28,3,4,6,1,0,0,[],2021-03-08 20:16:24+00:00,2021-03-19 20:48:07+00:00,952303.0,"11 days, 0:31:43","[{'comment_id': 591911302, 'comment_body': 'can this go above? I think the ymax definition does not depend on anything in between and can also be moved before the loop above. There already is a loop over axes, now that we loop here for the yaxis lims I think we can use the same loop that starts in line 175, mostly for clarity', 'comment_created': datetime.datetime(2021, 3, 10, 22, 14, 41, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': '5a432fe2a45a89c931fb7c2592cf97a77d4e23ee', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f83028e0580df2e0d3eaed24d9d23c0f0f9ee8f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d957333af0772da400d936e97e6e54e98b962d9', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e6c8b1284043f3a7706ca9caeba36d6ac9e4835', 'committer_username': 'OriolAbril', 'committer_name': 'Oriol Abril-Pla', 'committer_email': None, 'commit_date': datetime.datetime(2016, 11, 25, 10, 47, 47, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
585841132,Added Interactive legend to ppc_plot bokeh,"## Description
To fix #1563 
I have added an interactive legend to `ppc_plot` in bokeh.
Is the position of the legend is good enough?
![Screenshot from 2021-03-06 01-10-25](https://user-images.githubusercontent.com/40103387/110166788-dbfd6b80-7e1a-11eb-8de2-fb20a4c8f9f4.png)

![Screenshot from 2021-03-06 01-10-35](https://user-images.githubusercontent.com/40103387/110166976-15ce7200-7e1b-11eb-9b17-1c7decdfb058.png)


## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [ ] New features are properly documented (with an example if appropriate)?
- [x] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [x] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)

",True,1602,https://api.github.com/repos/arviz-devs/arviz/pulls/1602,https://github.com/arviz-devs/arviz/pull/1602,closed,64,12,3,4,5,4,0,0,[],2021-03-05 19:58:09+00:00,2021-03-10 08:11:42+00:00,389613.0,"4 days, 12:13:33","[{'comment_id': 588780473, 'comment_body': 'given that the legend is fixed, I would place it on the top left, which will generally be en empty corner for both kde and cdf plots. https://arviz-devs.github.io/arviz/examples/plot_ppc_cumulative.html https://arviz-devs.github.io/arviz/examples/plot_ppc.html', 'comment_created': datetime.datetime(2021, 3, 5, 23, 23, 51, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 588862256, 'comment_body': 'Done!\r\n![Screenshot from 2021-03-06 15-18-12](https://user-images.githubusercontent.com/40103387/110202799-04c04800-7e91-11eb-9be7-47c38b7b18e2.png)\r\n', 'comment_created': datetime.datetime(2021, 3, 6, 10, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 589498234, 'comment_body': 'I would use an f-string here instead of adding strings', 'comment_created': datetime.datetime(2021, 3, 8, 15, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 590647708, 'comment_body': '@OriolAbril  Done!\r\n', 'comment_created': datetime.datetime(2021, 3, 9, 19, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}]","[{'commit_sha': '9b890caea0f908dd688bd3dda79eea0e69715054', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ba3885b10eaf2c835b392a43712bb4b185b05e7', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a587794ea3687a26c322a5fc936908787ef0700', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f19b925d841b913b2d4034bd59afe513c4deeed7', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
582940628,Added Interactive Legend to forestplot Bokeh,"## Description

To fix #1572 

Added the Legend to forest plot in with backend Bokeh. I have also made it interactive but wasn't able to control the different axes with a single legend so had to provide a legend for each axes. See the below image

![legend_bokeh](https://user-images.githubusercontent.com/40103387/109639185-e4cd1380-7b74-11eb-9e62-244ef6768206.png)

![legend_bokeh_interactive](https://user-images.githubusercontent.com/40103387/109639192-e7c80400-7b74-11eb-88c3-7b12262ff1eb.png)

One more problem I am facing is that I am unable to hide the `y_ticks` corresponding to the model when the model plot is hidden. It seems that Bokeh supports interactivity with only glyphs.


- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [ ] New features are properly documented (with an example if appropriate)?
- [ ] Includes new or updated tests to cover the new feature
- [x] Code style  correct (follows pylint and black guidelines)
- [x] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)

",True,1591,https://api.github.com/repos/arviz-devs/arviz/pulls/1591,https://github.com/arviz-devs/arviz/pull/1591,closed,155,95,2,15,10,6,0,0,[],2021-03-02 11:06:21+00:00,2021-03-04 17:57:05+00:00,197444.0,"2 days, 6:50:44","[{'comment_id': 585520600, 'comment_body': 'I think all this should only happen if `legend=True`. Same below', 'comment_created': datetime.datetime(2021, 3, 2, 12, 25, 57, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 585527045, 'comment_body': 'This is for the code above, not for here, but you need to update the label generation to use the labeller: https://github.com/arviz-devs/arviz/blob/main/arviz/plots/backends/matplotlib/forestplot.py#L555', 'comment_created': datetime.datetime(2021, 3, 2, 12, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 585596942, 'comment_body': 'By this, you just mean that I need to generate the row labels as done In matplotib?', 'comment_created': datetime.datetime(2021, 3, 2, 14, 12, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}, {'comment_id': 585610708, 'comment_body': ""Both row labels and model labels used in legend should be processed by the labeller, you'll see that in matplotlib there are two labeller methods called"", 'comment_created': datetime.datetime(2021, 3, 2, 14, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 587445383, 'comment_body': 'undo this change to have pyling keep ignoring this warning', 'comment_created': datetime.datetime(2021, 3, 4, 12, 52, 38, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 587574520, 'comment_body': 'Did this, still checks are failing:-C\r\nUpdate: Got the error, docstring missing in a public method', 'comment_created': datetime.datetime(2021, 3, 4, 15, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rishabh261998', 'type': 'User'}]","[{'commit_sha': '29580ac7b686bb7956b0ca5ceadc7b57d5f09f95', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d36d4e4f4e47e1c7ad19c86f1b9cee32592792', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54634d5a088e52df48e9c78ca1e0b8973cd49594', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0556c5d87aa91cec834fdef493bfda53dacd3ee9', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16ca92270aeb4557effe28da3c38b4c8557df82c', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55f353eb9412ced43d625b681654d81c1828f826', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4e8fb7c48a6db4d759173bf97de7ba499b1b433', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97f2ffe4d6022df957cb5a6c50f324ad665aa7ae', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e1bd56e97d44ed5248ca4926b45693ca5fa3ffa', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cb55815a60d45f39fde7369fa2bb726bc406417', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15a988a485d3953936f8396f63c736f426d4312d', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaeb3f495b899ec88bec3762573f715ca8e97370', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7582b5a9b3a88a527e2baf867880628411002fe', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc8c495c94a071c5fed481bf6409251892f36a0f', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd650344fb381ce23b760ffb10bb69617d13ff90d', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
574946273,Included estimate of probability within ROPE,"## Description
Included the estimate of probability within ROPE. To fix #1567 
## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [x] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format
- [x] Includes a sample plot to visually illustrate the changes (only for plot-related functions)
- [x] Code style  correct (follows pylint and black guidelines)
- [x] Changes are listed in [changelog](https://github.com/arviz-devs/arviz/blob/main/CHANGELOG.md#v0xx-unreleased)

",True,1570,https://api.github.com/repos/arviz-devs/arviz/pulls/1570,https://github.com/arviz-devs/arviz/pull/1570,closed,78,13,4,7,20,4,0,0,[],2021-02-17 14:11:07+00:00,2021-02-22 23:16:47+00:00,464740.0,"5 days, 9:05:40","[{'comment_id': 578043818, 'comment_body': ""```suggestion\r\n        probability_within_rope = ((values > vals[0]) & (values <= vals[1])).mean()\r\n```\r\n\r\nI think this will perform better in terms of memory usage, values are not generally too large arrays but I think it's better to be cautious. It should return the same value."", 'comment_created': datetime.datetime(2021, 2, 18, 0, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 578044144, 'comment_body': 'Can you try other values and see if you can get the rope text to be between the ref_val and hdi text? ', 'comment_created': datetime.datetime(2021, 2, 18, 0, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 580389922, 'comment_body': 'you can pass `color` as a kwarg directly to `axvline` no need to create the dict, as it is only one kwarg it does not make a difference (also see other comments on removing the if else)', 'comment_created': datetime.datetime(2021, 2, 22, 16, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 580394355, 'comment_body': ""I would set the default to `C1` and `C2` respectively, so you can use `vectorized_to_hex` directly down the line. You'll see that there are other string values as defaults. What should not be set as defaults are mutable objects such as dicts or lists which is why you'll not see a dict used as default, always none and the if none initialize the empty dict.\r\n\r\nThis is a common python gotcha, here is some more info in case you wanted to learn more about that: https://docs.python-guide.org/writing/gotchas/"", 'comment_created': datetime.datetime(2021, 2, 22, 16, 31, 51, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': '29580ac7b686bb7956b0ca5ceadc7b57d5f09f95', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d36d4e4f4e47e1c7ad19c86f1b9cee32592792', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54634d5a088e52df48e9c78ca1e0b8973cd49594', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0556c5d87aa91cec834fdef493bfda53dacd3ee9', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '16ca92270aeb4557effe28da3c38b4c8557df82c', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55f353eb9412ced43d625b681654d81c1828f826', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4e8fb7c48a6db4d759173bf97de7ba499b1b433', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
573699978,Adding example for coords argument in documentation,"## Description

This PR is created to fix #1436 

## Checklist
<!-- Feel free to remove check-list items aren't relevant to your change -->

- [ ] Follows [official](https://github.com/arviz-devs/arviz/blob/main/CONTRIBUTING.md#pull-request-checklist) PR format


",True,1566,https://api.github.com/repos/arviz-devs/arviz/pulls/1566,https://github.com/arviz-devs/arviz/pull/1566,closed,10,2,3,3,5,2,0,0,[],2021-02-15 17:17:06+00:00,2021-02-15 22:23:05+00:00,18359.0,5:05:59,"[{'comment_id': 576363990, 'comment_body': 'I would remove the rope to focus on `coords` usage.', 'comment_created': datetime.datetime(2021, 2, 15, 18, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}, {'comment_id': 576364293, 'comment_body': 'How about ``Using `coords` argument to plot only a subset of data``?', 'comment_created': datetime.datetime(2021, 2, 15, 18, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'OriolAbril', 'type': 'User'}]","[{'commit_sha': 'a1a6914b88770ebeb957408a7050b8ec603a63ab', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '957ec337f7607fb4bbe91e3f2c8998003ece701b', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07351de8608c73b525554817f2fe4b4f305151db', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5
572737388,[WIP] Add Dataframe to Inference Data Example to cookbook,"## Description
closes #1490

This is an update on the issue ""Add dataframe to InfData examples to cookbook"" #1490  I have added the example but there seems to be a problem i.e the created inference object does not have any attributes(eg: created_at, arviz_version). Could you help me tackle this and also provide your feedback. Thanks",True,1556,https://api.github.com/repos/arviz-devs/arviz/pulls/1556,https://github.com/arviz-devs/arviz/pull/1556,closed,1281,1001,2,3,10,0,0,0,[],2021-02-12 19:35:53+00:00,2021-02-14 18:50:26+00:00,170073.0,"1 day, 23:14:33",[],"[{'commit_sha': '142cf380fd34f5e4f73a645e6071ff034a02f4b4', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b55b4fea5de0ad5c5fa80159824a9677ff5584d7', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23975d3004f45e26d83503e9ae87a44e08bef482', 'committer_username': 'Rishabh261998', 'committer_name': 'Rishabh Sanjay', 'committer_email': None, 'commit_date': datetime.datetime(2018, 6, 9, 9, 5, 4, tzinfo=datetime.timezone.utc)}]",Rishabh Sanjay,40103387,,User,,14,,6,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
39890704,arviz,arviz-devs/arviz,Python,392,1573,47,160,1556,176,6,7,"[{'id': 724240167, 'number': 1781, 'closed': datetime.datetime(2021, 9, 2, 9, 57, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 1, 8, 14, 43, tzinfo=datetime.timezone.utc), 'time_taken': 92581.0, 'time_delta': '1 day, 1:43:01', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 716546002, 'number': 1761, 'closed': datetime.datetime(2021, 8, 26, 6, 14, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 8, 29, 29, tzinfo=datetime.timezone.utc), 'time_taken': 510320.0, 'time_delta': '5 days, 21:45:20', 'additions': 15, 'deletions': 0, 'state': 'closed'}, {'id': 700974252, 'number': 1753, 'closed': datetime.datetime(2022, 3, 23, 12, 3, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 1, 20, 6, 35, tzinfo=datetime.timezone.utc), 'time_taken': 20188600.0, 'time_delta': '233 days, 15:56:40', 'additions': 508, 'deletions': 1, 'state': 'closed'}, {'id': 696505262, 'number': 1745, 'closed': datetime.datetime(2021, 7, 26, 12, 43, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 13, 51, 8, tzinfo=datetime.timezone.utc), 'time_taken': 82333.0, 'time_delta': '22:52:13', 'additions': 6, 'deletions': 3, 'state': 'closed'}, {'id': 672466631, 'number': 1728, 'closed': datetime.datetime(2021, 8, 3, 19, 24, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 10, 2, 50, tzinfo=datetime.timezone.utc), 'time_taken': 4094494.0, 'time_delta': '47 days, 9:21:34', 'additions': 787, 'deletions': 0, 'state': 'closed'}, {'id': 593178403, 'number': 1615, 'closed': datetime.datetime(2021, 3, 30, 14, 39, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 15, 15, 37, 44, tzinfo=datetime.timezone.utc), 'time_taken': 1292495.0, 'time_delta': '14 days, 23:01:35', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 587071600, 'number': 1606, 'closed': datetime.datetime(2021, 3, 19, 20, 48, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 8, 20, 16, 24, tzinfo=datetime.timezone.utc), 'time_taken': 952303.0, 'time_delta': '11 days, 0:31:43', 'additions': 45, 'deletions': 28, 'state': 'closed'}, {'id': 585841132, 'number': 1602, 'closed': datetime.datetime(2021, 3, 10, 8, 11, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 5, 19, 58, 9, tzinfo=datetime.timezone.utc), 'time_taken': 389613.0, 'time_delta': '4 days, 12:13:33', 'additions': 64, 'deletions': 12, 'state': 'closed'}, {'id': 582940628, 'number': 1591, 'closed': datetime.datetime(2021, 3, 4, 17, 57, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 2, 11, 6, 21, tzinfo=datetime.timezone.utc), 'time_taken': 197444.0, 'time_delta': '2 days, 6:50:44', 'additions': 155, 'deletions': 95, 'state': 'closed'}, {'id': 574946273, 'number': 1570, 'closed': datetime.datetime(2021, 2, 22, 23, 16, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 17, 14, 11, 7, tzinfo=datetime.timezone.utc), 'time_taken': 464740.0, 'time_delta': '5 days, 9:05:40', 'additions': 78, 'deletions': 13, 'state': 'closed'}, {'id': 573699978, 'number': 1566, 'closed': datetime.datetime(2021, 2, 15, 22, 23, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 15, 17, 17, 6, tzinfo=datetime.timezone.utc), 'time_taken': 18359.0, 'time_delta': '5:05:59', 'additions': 10, 'deletions': 2, 'state': 'closed'}, {'id': 572737388, 'number': 1556, 'closed': datetime.datetime(2021, 2, 14, 18, 50, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 12, 19, 35, 53, tzinfo=datetime.timezone.utc), 'time_taken': 170073.0, 'time_delta': '1 day, 23:14:33', 'additions': 1281, 'deletions': 1001, 'state': 'closed'}]"
