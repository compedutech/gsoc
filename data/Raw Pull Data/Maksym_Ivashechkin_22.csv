pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
441029991,[GSoC] New RANSAC. Homography part,"<cut/>

### Pull Request Readiness Checklist

See details at https://github.com/opencv/opencv/wiki/How_to_contribute#making-a-good-pull-request

- [x] I agree to contribute to the project under OpenCV (Apache 2.0) License.
- [x] To the best of my knowledge, the proposed patch is not based on a code under GPL or other license that is incompatible with OpenCV
- [x] The PR is proposed to proper branch
- [x] There is reference to original bug report and related work
- [x] There is accuracy test, performance test and test data in opencv_extra repository, if applicable
      Patch to opencv_extra has the same branch name.
- [x] The feature is well documented and sample code can be built with the project CMake

```
build_image:Custom=centos:7
buildworker:Custom=linux-1
```",True,17683,https://api.github.com/repos/opencv/opencv/pulls/17683,https://github.com/opencv/opencv/pull/17683,closed,9460,3,29,10,16,72,3,2,"[{'name': 'feature'}, {'name': 'category: calib3d'}, {'name': 'GSoC'}]",2020-06-28 09:33:00+00:00,2020-08-14 22:42:27+00:00,4108167.0,"47 days, 13:09:27","[{'comment_id': 453516089, 'comment_body': '`bool isBetter()`, like `isInlier()` below.', 'comment_created': datetime.datetime(2020, 7, 13, 9, 26, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453520566, 'comment_body': 'width/height => Size?', 'comment_created': datetime.datetime(2020, 7, 13, 9, 33, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453524055, 'comment_body': 'License headers including external references should be placed in the file header (before any code)', 'comment_created': datetime.datetime(2020, 7, 13, 9, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453525248, 'comment_body': 'This comment look unrelated to the code near it.', 'comment_created': datetime.datetime(2020, 7, 13, 9, 41, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453528705, 'comment_body': 'IMHO, we should not introduce such time-based limits as part of OpenCV.\r\n- no way to provide reliable testing of algorithms with such criteria (running tests in parallel on heavy load machine, mobile phones or embedded devices can get different results, etc)\r\n- use number of iterations instead\r\n- provide to API to configure this in User application.\r\n- time measuring/querying on each iteration can introduce unnecessary overhead', 'comment_created': datetime.datetime(2020, 7, 13, 9, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453529568, 'comment_body': 'What is about `cv::randShuffle()`?', 'comment_created': datetime.datetime(2020, 7, 13, 9, 48, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453530925, 'comment_body': '`MatCommaInitializer` has poor performance and bloats binary code.\r\n\r\nConsider using of `Mat33d` directly.', 'comment_created': datetime.datetime(2020, 7, 13, 9, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453532026, 'comment_body': 'C asserts are forbidden in OpenCV. Use `CV_Assert()` instead (or better CV_Check* macros).', 'comment_created': datetime.datetime(2020, 7, 13, 9, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453532702, 'comment_body': 'Use check from Google Tests instead.', 'comment_created': datetime.datetime(2020, 7, 13, 9, 53, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453533152, 'comment_body': 'avoid indentation in namespaces', 'comment_created': datetime.datetime(2020, 7, 13, 9, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453534922, 'comment_body': 'Use seed from OpenCV test suite (or `cv::theRNG()`).\r\n\r\nTotally random numbers must be avoided in OpenCV test - tests must be reproducible.\r\nWe must avoid expanding set of tests with sporadic failures.', 'comment_created': datetime.datetime(2020, 7, 13, 9, 57, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453535331, 'comment_body': 'Are `inliers` doubles? Why?', 'comment_created': datetime.datetime(2020, 7, 13, 9, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 453653499, 'comment_body': '@ivashmak, please, rename the method for better consistency', 'comment_created': datetime.datetime(2020, 7, 13, 13, 35, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 453654592, 'comment_body': 'agree. @ivashmak, please, replace each pair of methods width/height with one ""getImage1Size"", ""getImage2Size"".', 'comment_created': datetime.datetime(2020, 7, 13, 13, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 453655630, 'comment_body': ""agree. @ivashmak, it would be better to move full-scale copyright notices into the header files. In .cpp files it's up to you. You can just reference the header files."", 'comment_created': datetime.datetime(2020, 7, 13, 13, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 453656909, 'comment_body': ""agree. @ivashmak, in some cases it's difficult to control it, e.g. when the computations are done in a cloud. Please, use the maximum number of iterations as hard limit."", 'comment_created': datetime.datetime(2020, 7, 13, 13, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 453657426, 'comment_body': 'use EXPECT_GT or ASSERT_GT', 'comment_created': datetime.datetime(2020, 7, 13, 13, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 453659629, 'comment_body': '@alalek, in this case the default constructor is used, so the test is deterministic.\r\n\r\nBut I forgot that before each test OpenCV test system resets ""theRNG()"" to some fixed state. @ivashmak, if so, please, just put ""cv::RNG& rng = cv::theRNG();"" and then the rest of the test will remain the same', 'comment_created': datetime.datetime(2020, 7, 13, 13, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 453928307, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 7, 13, 20, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 453928539, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 7, 13, 20, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 453928778, 'comment_body': 'moved this license to usac.hpp', 'comment_created': datetime.datetime(2020, 7, 13, 20, 58, 24, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 453928925, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 7, 13, 20, 58, 39, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 453929401, 'comment_body': 'fixed. Now, RANSAC terminates when maximum number iterations exceed', 'comment_created': datetime.datetime(2020, 7, 13, 20, 59, 38, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 453929442, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 7, 13, 20, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 453930035, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 7, 13, 21, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 453930095, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 7, 13, 21, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 453930275, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 7, 13, 21, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 453932143, 'comment_body': 'Because I use doubles for ground truth rotation and calibration otherwise I would have error in matrix multiplication. Since it is just test files I want to have higher precision. My RANSAC is using float points. Also in new commit (in test file) I save indices of ground truth inliers as integers.', 'comment_created': datetime.datetime(2020, 7, 13, 21, 4, 55, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466223263, 'comment_body': 'Wondering if it is planned to improve the whole `solvePnPRansac` logic or if you know a good logic that could be used?\r\n\r\nI am referring to this topic: #8782\r\n\r\n---\r\n\r\nFrom memory and from reading quickly what I wrote:\r\n\r\n- default behavior uses EPnP to compute the solution for the Minimal Sample Sets (MSS) using 5 points\r\n- I thought that the point of RANSAC is to use the minimal number of points so 4 points for pose estimation\r\n- but probably it was done like this because EPnP works well with good number of points, wondering if it is starting from 6 points EPnP works well?\r\n- good luck to understand the behavior of the function if you change the PnP method\r\n\r\nAlso:\r\n\r\n- intuitively, I think P3P methods should be used for MSS step since they can produce at most 4 possible solutions with 3 points\r\n- so what about using AP3P for MSS? Gao P3P will give bad results due to not handling all [degenerate cases](https://github.com/opencv/opencv/blob/dbab8d8c3897040f134af7195e130dbfcdc2c065/modules/calib3d/src/p3p.cpp#L221)\r\n- in general, I would add explicitly the PnP method for MSS and for the final pose computation\r\n- because in the present case it gives something like this:\r\n\r\n![image](https://user-images.githubusercontent.com/8229425/89507204-7d143d00-d7cc-11ea-938b-bab8beb32a4a.png)', 'comment_created': datetime.datetime(2020, 8, 6, 8, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'catree', 'type': 'User'}, {'comment_id': 466230416, 'comment_body': 'Wondering if it is planned to use this DLS implementation for `solvePnP`and related functions?\r\n\r\nBecause currently, when using `SOLVEPNP_DLS` flags, the OpenCV code will silently use EPnP instead:\r\n- [Ignoring the flags of solvePnP and silently executing EPNP #5065](https://github.com/opencv/opencv/issues/5065)\r\n- [see also](https://github.com/opencv/opencv/pull/6864#issuecomment-473450679)\r\n- unfortunately, printing an error message seems to not be an option, so adding a LOG entry?\r\n\r\nMore than 5 years later, there are less than 5 complaints I think. Somehow.\r\n\r\nI would still update the doc to explicitly mention that you cannot use `SOLVEPNP_UPNP` and `SOLVEPNP_DLS`.\r\nBecause for now, there is just a small note in the doc. Since nobody will carefully read the doc, I would update the doc:\r\n\r\n![image](https://user-images.githubusercontent.com/8229425/89508355-1b54d280-d7ce-11ea-9532-c6c5e4bf95f6.png)\r\n\r\nto add a bold mention that you cannot use `SOLVEPNP_UPNP` and `SOLVEPNP_DLS`. Or better remove these entries to not advertise these methods.\r\n\r\nSimilarly:\r\n\r\n![image](https://user-images.githubusercontent.com/8229425/89508511-4ccd9e00-d7ce-11ea-9d2f-931a9045ba1b.png)\r\n\r\nAdd a bold mention that you cannot use `SOLVEPNP_UPNP` and `SOLVEPNP_DLS`.', 'comment_created': datetime.datetime(2020, 8, 6, 8, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'catree', 'type': 'User'}, {'comment_id': 466231014, 'comment_body': 'Small typo :)', 'comment_created': datetime.datetime(2020, 8, 6, 8, 21, 57, tzinfo=datetime.timezone.utc), 'commenter': 'catree', 'type': 'User'}, {'comment_id': 466232532, 'comment_body': 'Wondering if [`decomposeProjectionMatrix()`](https://docs.opencv.org/4.4.0/d9/d0c/group__calib3d.html#gaaae5a7899faa1ffdf268cd9088940248) could be used instead?\r\n\r\nBecause if `decomposeProjection` is better, `decomposeProjectionMatrix()` could be updated maybe?', 'comment_created': datetime.datetime(2020, 8, 6, 8, 24, 38, tzinfo=datetime.timezone.utc), 'commenter': 'catree', 'type': 'User'}, {'comment_id': 466238292, 'comment_body': 'Also, wondering if it is the [""improved"" DLS version](http://heschian.io/index.php?page=software) that is implemented? \r\n\r\n> 05/17/12 - Added ""robust"" dls_pnp version which avoids the singular configuration of the Cayley paremeters by solving the system 3 times (with the original system centered, and rotated about the x/y/z axes, respectively). ', 'comment_created': datetime.datetime(2020, 8, 6, 8, 34, 50, tzinfo=datetime.timezone.utc), 'commenter': 'catree', 'type': 'User'}, {'comment_id': 466239790, 'comment_body': 'This is what it should look like in practice: [AP3P vs P3P](https://www.youtube.com/watch?v=X5h_4okDzyI)', 'comment_created': datetime.datetime(2020, 8, 6, 8, 37, 33, tzinfo=datetime.timezone.utc), 'commenter': 'catree', 'type': 'User'}, {'comment_id': 466244564, 'comment_body': '@vpisarev @ivashmak Please add some clarification about license of images (add link on original sources)', 'comment_created': datetime.datetime(2020, 8, 6, 8, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466245105, 'comment_body': 'relative path from where?\r\n\r\nThis file and images are in the same folder.', 'comment_created': datetime.datetime(2020, 8, 6, 8, 46, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466246198, 'comment_body': 'Absolute ""home"" paths are not allowed.\r\n`samples::findFile()` must be used instead (refer to other OpenCV samples)', 'comment_created': datetime.datetime(2020, 8, 6, 8, 48, 38, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466249235, 'comment_body': 'OpenCV samples are without license headers.', 'comment_created': datetime.datetime(2020, 8, 6, 8, 54, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466250539, 'comment_body': '> pdb\r\n\r\nWhy we need Python debugger in sample?', 'comment_created': datetime.datetime(2020, 8, 6, 8, 56, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466251557, 'comment_body': '> cv2.\r\n\r\nWe are moving from using `cv2.` in OpenCV samples (refer to other code).', 'comment_created': datetime.datetime(2020, 8, 6, 8, 58, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466256604, 'comment_body': 'Why disable test body only? (exclude whole test)\r\n\r\nWhat is the problem with Eigen/ Lapack? (add a note thorough comment)', 'comment_created': datetime.datetime(2020, 8, 6, 9, 7, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466258316, 'comment_body': '> 1\r\n\r\nWhat is 1?\r\n\r\nPrefer to use GoogleTest for errors reporting in test code:\r\n```\r\nFAIL() << msg;\r\n```', 'comment_created': datetime.datetime(2020, 8, 6, 9, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466258822, 'comment_body': 'Please remove `@` symbols (they are not necessary here)', 'comment_created': datetime.datetime(2020, 8, 6, 9, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466272512, 'comment_body': ""I haven't planned to change a whole logic of solvePnP. My goal is about improving RANSAC which will solve PnP too. I added classical P3P solver which seems a bit different from the one in OpenCV. I am not very familiar with whole family of PnP solvers but I think in case of P3P even if solution is not precise enough (e.g., comparing to AP3P) then it will be polished in local optimization step of RANSAC by some DLS or DLT solver. My new idea that I proposed to Vadim is adding P6P solver which does not assume knowledge of intrinsic matrix which is often the case."", 'comment_created': datetime.datetime(2020, 8, 6, 9, 23, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466277926, 'comment_body': 'I would say that I planned to use this DLS solver (Joel A. Hesch and Stergios I. Roumeliotis) inside my RANSAC. This solver will update so-far-the-best model by non-minimal sample.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 28, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466280690, 'comment_body': ""Sorry, I don't really see a typo. Where is it? However, thanks for point it out, I will get rid of cnt++ and use pointer++ instead."", 'comment_created': datetime.datetime(2020, 8, 6, 9, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466287897, 'comment_body': 'the current OpenCV version of decomposeProjectionMatrix() assumes non-zero k_12. However, in most cases and solvePnP assume k_12 = 0. So, as I wrote before if we use P6P RANSAC (without prior knowledge of calibration) we can find projection matrix which will be decomposed into unknown intrinsic, rotation and translation. Also, decomposeProjectionMatrix() returns K, rotation and center C: for example, if I want to know translation I have to normalize C (which is 4D) and then multiply it by rotation, but my function already outputs translation.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 36, 30, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466288897, 'comment_body': 'These are my images. I took them using my phone and resized them.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 37, 23, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466290925, 'comment_body': 'I forgot to remove this path from testing on my computer. Will fix it.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466291414, 'comment_body': 'Okay, will remove it.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 39, 31, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466291751, 'comment_body': ""we don't need, I will remove it as well\r\n"", 'comment_created': datetime.datetime(2020, 8, 6, 9, 39, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466292134, 'comment_body': 'Okay, I will fix it\r\n', 'comment_created': datetime.datetime(2020, 8, 6, 9, 40, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466293506, 'comment_body': 'On Windows there is no Eigen and Lapack, however my essential solver assumes one of them - otherwise, it returns 0 solution every time. So, if I do not disable the test - it will fail.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 41, 53, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466294195, 'comment_body': 'okay\r\n', 'comment_created': datetime.datetime(2020, 8, 6, 9, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466294783, 'comment_body': 'I meant 1 to be something like EXIT_FAILURE. I will use GoogleTest error reporting then.', 'comment_created': datetime.datetime(2020, 8, 6, 9, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466323676, 'comment_body': 'Please use Error with `StsNotImplemented` instead of 0 solution.\r\n(you may catch that in tests)', 'comment_created': datetime.datetime(2020, 8, 6, 10, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 466357815, 'comment_body': 'Triangluar -> Triangular', 'comment_created': datetime.datetime(2020, 8, 6, 11, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'peters', 'type': 'User'}, {'comment_id': 466364345, 'comment_body': 'Oh, I see, thanks!', 'comment_created': datetime.datetime(2020, 8, 6, 12, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 466602223, 'comment_body': ""Indeed, there should be no need to have a super precise P3P for the the Minimal Sample Sets step since the final pose will be refined using all the data in the best consensus set (assuming USAC works similarly to the classical RANSAC).\r\n\r\nJust curious to know if you are using P3P with 4 points to have a unique solution or if you are using 3 points (that can produce up to 4 solutions, probably some can be eliminated using positive t_z)?\r\n\r\n---\r\n\r\n> I haven't planned to change a whole logic of solvePnP.\r\n\r\nYes, my comment was actually more general and I realise it is not really related to this GSoC work.\r\n\r\nProbably the answer I would have is that now that there is USAC method that should work better than RANSAC, there is no need to fix the logic inside `solvePnpRansac`. I personnally disagree with this."", 'comment_created': datetime.datetime(2020, 8, 6, 18, 21, 42, tzinfo=datetime.timezone.utc), 'commenter': 'catree', 'type': 'User'}, {'comment_id': 466606323, 'comment_body': 'Thanks for the explanation.', 'comment_created': datetime.datetime(2020, 8, 6, 18, 29, 10, tzinfo=datetime.timezone.utc), 'commenter': 'catree', 'type': 'User'}, {'comment_id': 467978202, 'comment_body': 'please, use ""all-capitals"" notation; also, Uniform (and GC, SIGMA, Flann, Grid below) are too generic names;\r\nplease, use `SAMPLING_UNIFORM, SAMPLING_PROGRESSIVE_NAPSAC, ...`,\r\n`LOCAL_OPTIM_NULL, LOCAL_OPTIM_GC, ...`\r\netc. that is, use some prefix in each enumeration.', 'comment_created': datetime.datetime(2020, 8, 10, 15, 18, 21, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 467978655, 'comment_body': 'for public structures we use mixed case notation, `is_parallel` => `isParallel` etc.', 'comment_created': datetime.datetime(2020, 8, 10, 15, 19, 2, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 467979169, 'comment_body': 'I do not see where those present-related constants are used', 'comment_created': datetime.datetime(2020, 8, 10, 15, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 468012826, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 16, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 468012898, 'comment_body': 'done', 'comment_created': datetime.datetime(2020, 8, 10, 16, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 468014048, 'comment_body': 'I use it to check for USAC flag, for example in fundam.cpp in findHomographyMat() I have condition: if (method >= 32 && method <= 37) then I will run my method', 'comment_created': datetime.datetime(2020, 8, 10, 16, 3, 2, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 468041448, 'comment_body': 'I use the one which produces up to 4 solutions. However, solving 4-degrees polynomial can give you 0, 2 or 4 real roots. So, I experimented a bit and found that mostly it has only 2 real roots and average number of models after applying different verifications is around 1.38', 'comment_created': datetime.datetime(2020, 8, 10, 16, 48, 49, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 468877269, 'comment_body': ""instead of adding prototype for each function, just make all the functions, except 'main', static"", 'comment_created': datetime.datetime(2020, 8, 11, 21, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vpisarev', 'type': 'User'}, {'comment_id': 469060644, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 8, 12, 7, 29, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}, {'comment_id': 498313683, 'comment_body': 'Magic numbers must be avoided.\r\n\r\n(multiple places)', 'comment_created': datetime.datetime(2020, 10, 1, 15, 1, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 498331721, 'comment_body': ""This method may be called on **empty** `graph` in `usac_Homography.accuracy` test and others (see #18454)\r\nImplementation of the method doesn't expect that.\r\n\r\nAdded checks: #18482"", 'comment_created': datetime.datetime(2020, 10, 1, 15, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alalek', 'type': 'User'}, {'comment_id': 498461045, 'comment_body': 'There was another problem in this file which caused exception for me. I prepared a pull request https://github.com/opencv/opencv/pull/18483 with the fix.', 'comment_created': datetime.datetime(2020, 10, 1, 19, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'ivashmak', 'type': 'User'}]","[{'commit_sha': '3eb4a332fae9a4322975c4a8f4a1c4e07629455e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '4edbcb6842739a9c250a485e377c81c6de70e47a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '32bbd2ca786009a505f0b1f3fb870a0d78e681ca', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '3e3ececbf5158b9239d7bc1ae34c5a7ad0a27e42', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a39d5444f526b05126be4b3b41b331464274fff5', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd70311e2a631e64e4f0e5cb8339f07dcd1229558', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8685e9f95b777a390a31f7ede223f0d11173e31a', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': '8ca39de7a01e67e1341ced1fd28d9068eda8da2e', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'a6ebf7b5d224fe6e81d8e87c1b26f17aa5879a54', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}, {'commit_sha': 'd5896719f21158aebfe2216e3ca71c5ea9afb746', 'committer_username': '', 'committer_name': '', 'committer_email': '', 'commit_date': ''}]",Maksym Ivashechkin,25746830,maksimivashechkin@gmail.com,User,,6,,0,11

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
5108051,opencv,opencv/opencv,C++,55710,77622,2656,2195,34493,2601,6,134,"[{'id': 1720777613, 'number': 24987, 'closed': datetime.datetime(2024, 2, 12, 7, 16, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 10, 23, 58, 30, tzinfo=datetime.timezone.utc), 'time_taken': 112669.0, 'time_delta': '1 day, 7:17:49', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 1587578230, 'number': 24499, 'closed': datetime.datetime(2023, 11, 20, 12, 47, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 11, 5, 21, 42, 36, tzinfo=datetime.timezone.utc), 'time_taken': 1263899.0, 'time_delta': '14 days, 15:04:59', 'additions': 28, 'deletions': 26, 'state': 'closed'}, {'id': 1577588828, 'number': 24465, 'closed': datetime.datetime(2023, 11, 8, 11, 1, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 28, 15, 54, 22, tzinfo=datetime.timezone.utc), 'time_taken': 932834.0, 'time_delta': '10 days, 19:07:14', 'additions': 121, 'deletions': 75, 'state': 'closed'}, {'id': 1445268806, 'number': 24047, 'closed': datetime.datetime(2023, 7, 23, 18, 12, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 22, 9, 45, 36, tzinfo=datetime.timezone.utc), 'time_taken': 116812.0, 'time_delta': '1 day, 8:26:52', 'additions': 2, 'deletions': 102, 'state': 'closed'}, {'id': 1437811548, 'number': 24005, 'closed': datetime.datetime(2023, 7, 27, 14, 51, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 17, 18, 10, 14, tzinfo=datetime.timezone.utc), 'time_taken': 852063.0, 'time_delta': '9 days, 20:41:03', 'additions': 4737, 'deletions': 2565, 'state': 'closed'}, {'id': 1182781423, 'number': 23078, 'closed': datetime.datetime(2023, 6, 16, 7, 59, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 2, 17, 21, 31, tzinfo=datetime.timezone.utc), 'time_taken': 14222263.0, 'time_delta': '164 days, 14:37:43', 'additions': 4470, 'deletions': 2291, 'state': 'closed'}, {'id': 1023300488, 'number': 22363, 'closed': datetime.datetime(2023, 3, 23, 12, 42, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 10, 23, 33, 43, tzinfo=datetime.timezone.utc), 'time_taken': 19400939.0, 'time_delta': '224 days, 13:08:59', 'additions': 3087, 'deletions': 2, 'state': 'closed'}, {'id': 626452503, 'number': 20012, 'closed': datetime.datetime(2021, 5, 19, 9, 9, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 29, 19, 47, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1689733.0, 'time_delta': '19 days, 13:22:13', 'additions': 34, 'deletions': 11, 'state': 'closed'}, {'id': 496486960, 'number': 18483, 'closed': datetime.datetime(2020, 10, 2, 15, 3, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 1, 19, 11, 18, tzinfo=datetime.timezone.utc), 'time_taken': 71520.0, 'time_delta': '19:52:00', 'additions': 11, 'deletions': 7, 'state': 'closed'}, {'id': 488799036, 'number': 18356, 'closed': datetime.datetime(2020, 10, 6, 20, 37, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 9, 17, 16, 42, 55, tzinfo=datetime.timezone.utc), 'time_taken': 1655695.0, 'time_delta': '19 days, 3:54:55', 'additions': 685, 'deletions': 821, 'state': 'closed'}, {'id': 469033905, 'number': 18121, 'closed': datetime.datetime(2020, 8, 20, 13, 23, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 19, 45, 52, tzinfo=datetime.timezone.utc), 'time_taken': 236249.0, 'time_delta': '2 days, 17:37:29', 'additions': 7, 'deletions': 6, 'state': 'closed'}, {'id': 441029991, 'number': 17683, 'closed': datetime.datetime(2020, 8, 14, 22, 42, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 28, 9, 33, tzinfo=datetime.timezone.utc), 'time_taken': 4108167.0, 'time_delta': '47 days, 13:09:27', 'additions': 9460, 'deletions': 3, 'state': 'closed'}]"
