pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1035232100,MCOL-4590 UNION Performance Improvement with the focus on the normalize functions.,"The Jira issue number for this PR is: [MCOL-4590](https://jira.mariadb.org/browse/MCOL-4590)

*NOTE: This project is for the Google Summer of Code 2022.*

# Task

- [x] Simple Approach: use separate functions instead of the huge switch
- [x] Code Review and correction in simple approach
",True,2528,https://api.github.com/repos/mariadb-corporation/mariadb-columnstore-engine/pulls/2528,https://github.com/mariadb-corporation/mariadb-columnstore-engine/pull/2528,closed,1260,760,2,1,3,35,0,0,[],2022-08-24 09:46:12+00:00,2022-09-14 16:46:22+00:00,1839610.0,"21 days, 7:00:10","[{'comment_id': 965193264, 'comment_body': 'Please change `infer_normalize_functions` to camelCase: `inferNormalizeFunctions`.', 'comment_created': datetime.datetime(2022, 9, 7, 19, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 965217286, 'comment_body': 'Can you replace `l_tmpRG.getRowCount()` call in the loop with a constant:\r\n```\r\nconst uint32_t tmpRGRowCount = l_tmpRG.getRowCount();\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 19, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 965221246, 'comment_body': ""I don't think this calculation of `fRowsReturned` is correct. What if `tmpOutputRowCount < l_outputRG.getRowCount()`?\r\n\r\nInstead, `fRowsReturned` should be moved inside the `if` statement above:\r\n\r\n```\r\nif (inserted.second)\r\n{\r\n  copyRow(tmpRow, &outRow);\r\n  const_cast<RowPosition&>(*(inserted.first)) =\r\n    RowPosition(rowMemory.size() - 1, tmpOutputRowCount);\r\n  memDiff += outRow.getRealSize();\r\n  addToOutput(&outRow, &l_outputRG, true, outRGData, tmpOutputRowCount);\r\n  fRowsReturned++;\r\n}\r\n```"", 'comment_created': datetime.datetime(2022, 9, 7, 19, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966225147, 'comment_body': ""The above `in.isNullValue(i)` check is incorrect. This check cannot be done at the inferring phase as we don't look at the actual column values during inferring but only the column type attributes. This should be removed."", 'comment_created': datetime.datetime(2022, 9, 8, 17, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966256241, 'comment_body': 'This should be `out->setUintField(in.getIntField(i), i);`', 'comment_created': datetime.datetime(2022, 9, 8, 17, 47, 13, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966278442, 'comment_body': 'The above two functions should be renamed to `normalizeIntToXDecimalInt128` and `normalizeIntToXDecimalInt64` as there is no usage of scale here.', 'comment_created': datetime.datetime(2022, 9, 8, 18, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966293129, 'comment_body': 'I think this should be `out->setIntField(val, i);`. This looks like an error in the original code. Function name should also be changed to `normalizeUntToIntWithScaleInt64`.', 'comment_created': datetime.datetime(2022, 9, 8, 18, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966310538, 'comment_body': 'The above two functions should be renamed to `normalizeUintToXDecimalInt128` and `normalizeUintToXDecimalInt64` respectively.', 'comment_created': datetime.datetime(2022, 9, 8, 18, 45, 22, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966312538, 'comment_body': 'This should be `out->setIntField(val, i);`.', 'comment_created': datetime.datetime(2022, 9, 8, 18, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966321082, 'comment_body': 'This case is incorrect. There can be no reference to `in.getUintField(i)` during inferring. You can merge the above two functions into one `normalizeDateToTimestamp` and have the if-else condition inside that function.', 'comment_created': datetime.datetime(2022, 9, 8, 18, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966328040, 'comment_body': 'Same as above. This case is incorrect. There can be no reference to `in.getUintField(i)` during inferring. You can merge the above two functions into one `normalizeDatetimeToTimestamp` and have the if-else condition inside that function.', 'comment_created': datetime.datetime(2022, 9, 8, 19, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966351136, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 19, 34, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966351214, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 19, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966351275, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 19, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966357779, 'comment_body': 'The following code is duplicated in the above four functions:\r\n\r\n```c++\r\n/* have to pick a scale to use for the double. using 5... */\r\n    uint32_t scale = 5;\r\n    uint64_t ival = (uint64_t)(double)(val * datatypes::scaleDivisor<double>(scale));\r\n    const int diff = out->getScale(i) - scale;\r\n    ival = datatypes::applySignedScale<uint64_t>(ival, diff);\r\n```\r\nCan you remove this duplication by creating a common inline function?', 'comment_created': datetime.datetime(2022, 9, 8, 19, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966358703, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 19, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966361814, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 19, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966361956, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 19, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966365578, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 19, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966365873, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 19, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966431798, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 21, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966431832, 'comment_body': 'This should be `if (in.getColTypes()[i] == CalpontSystemCatalog::FLOAT || in.getColTypes()[i] == CalpontSystemCatalog::UFLOAT)`', 'comment_created': datetime.datetime(2022, 9, 8, 21, 20, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966436730, 'comment_body': 'The following code is duplicated in the above four functions:\r\n```c++\r\n    /* have to pick a scale to use for the double. using 5... */\r\n    uint32_t scale = 5;\r\n    uint64_t ival = (uint64_t)(double)(val * datatypes::scaleDivisor<double>(scale));\r\n    const int diff = out->getScale(i) - scale;\r\n    ival = datatypes::applySignedScale<uint64_t>(ival, diff);\r\n```\r\n\r\nCan you please remove this duplication by creating an inline function? This is the same code that is also duplicated in four more functions above. See my comment at `normalizeXDoubleToIntWithScaleInt64`.', 'comment_created': datetime.datetime(2022, 9, 8, 21, 28, 39, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966439935, 'comment_body': 'Please rename the above two functions to `normalizeLongDoubleToXDecimalInt128` and `normalizeLongDoubleToXDecimalInt` respectively.', 'comment_created': datetime.datetime(2022, 9, 8, 21, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966443913, 'comment_body': 'Again, please remove the duplicated code in the above two functions. This is the same code as in the above comment for `normalizeXDoubleToXDecimal`.', 'comment_created': datetime.datetime(2022, 9, 8, 21, 40, 29, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966445788, 'comment_body': 'This should be `out->setLongDoubleField(val, i);`', 'comment_created': datetime.datetime(2022, 9, 8, 21, 43, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966446326, 'comment_body': 'Please remove code duplication from the above two functions.', 'comment_created': datetime.datetime(2022, 9, 8, 21, 44, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 966477002, 'comment_body': 'Can you create a typedef for this vector in the global namespace in this .h file and reuse it here as well as in the .cpp?\r\n```c++\r\nusing normalizeFunctionsT = std::vector<std::function<void(const rowgroup::Row& in, rowgroup::Row* out, uint32_t col)>>;\r\n```\r\n\r\nAlso, I think `normalizeFunctions` should be a const ref here:\r\n```c++\r\nvoid normalize(const rowgroup::Row& in, rowgroup::Row* out, const normalizeFunctionsT& normalizeFunctions);\r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 22, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 967328548, 'comment_body': 'The typecast to `int64_t` should be removed:\r\n```c++\r\nout->setLongDoubleField(val, i);\r\n```', 'comment_created': datetime.datetime(2022, 9, 9, 17, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 967335268, 'comment_body': 'Can you add a linebreak before the `for` statement?', 'comment_created': datetime.datetime(2022, 9, 9, 17, 53, 25, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 967335960, 'comment_body': 'There are two linebreaks before this function, please fix.', 'comment_created': datetime.datetime(2022, 9, 9, 17, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}, {'comment_id': 967336340, 'comment_body': 'There are two linebreaks before this function, please fix.', 'comment_created': datetime.datetime(2022, 9, 9, 17, 54, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tntnatbry', 'type': 'User'}]","[{'commit_sha': '7f97a6618464d4e1311d62f2f2424a4d0ee7df7f', 'committer_username': 'JigaoLuo', 'committer_name': 'Jigao Luo', 'committer_email': 'jigao.luo@dfki.de', 'commit_date': datetime.datetime(2017, 5, 7, 11, 42, 4, tzinfo=datetime.timezone.utc)}]",Jigao Luo,28505034,jigao.luo@dfki.de,User,,42,,217,105

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
59521862,mariadb-columnstore-engine,mariadb-corporation/mariadb-columnstore-engine,C++,64,106,37,97,6279,30,269,30,"[{'id': 1059103355, 'number': 2568, 'closed': datetime.datetime(2022, 12, 13, 15, 17, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 16, 21, 18, 5, tzinfo=datetime.timezone.utc), 'time_taken': 7581561.0, 'time_delta': '87 days, 17:59:21', 'additions': 109, 'deletions': 2, 'state': 'closed'}, {'id': 1035232100, 'number': 2528, 'closed': datetime.datetime(2022, 9, 14, 16, 46, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 24, 9, 46, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1839610.0, 'time_delta': '21 days, 7:00:10', 'additions': 1260, 'deletions': 760, 'state': 'closed'}, {'id': 1034131349, 'number': 2526, 'closed': datetime.datetime(2022, 9, 13, 22, 55, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 23, 12, 37, 40, tzinfo=datetime.timezone.utc), 'time_taken': 1851476.0, 'time_delta': '21 days, 10:17:56', 'additions': 1052, 'deletions': 45, 'state': 'closed'}]"
