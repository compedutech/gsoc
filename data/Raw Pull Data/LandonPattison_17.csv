pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
997050964,build: configure Ory Kratos,"### What
- Configure kratos by env variables
- Added redirects from OFF to kratos
- Fix users not being signed in after logging in/creating an account
- Added kratos_auth.pl to create new users after being created in kratos
- Added kratos_update_settings.pl to update a users settings after being updated in kratos
- Added kratos_import_users_file.pl and kratos_import_users_post.pl to import users into kratos
- Wrote documentation on how to develop with ory

",False,7071,https://api.github.com/repos/openfoodfacts/openfoodfacts-server/pulls/7071,https://github.com/openfoodfacts/openfoodfacts-server/pull/7071,closed,1215,374,18,49,2,28,5,1,"[{'name': '📚 Documentation'}, {'name': '💥 Merge Conflicts'}, {'name': '👥 Users'}, {'name': '🔐 external auth service'}, {'name': 'Stale'}]",2022-07-14 19:36:20+00:00,2024-03-25 16:43:36+00:00,53557636.0,"619 days, 21:07:16","[{'comment_id': 921907309, 'comment_body': 'See https://www.ory.sh/docs/kratos/guides/configuring-cookies#session-cookies you should not put the `http://` neither a final `/`:\r\n```suggestion\r\n    domain: openfoodfacts.localhost\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 7, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921907527, 'comment_body': '```suggestion\r\n  domain: openfoodfacts.localhost\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 7, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921908212, 'comment_body': ""Please keep as it was here, it's not linked and it's better for security to keep exposed only on localhost."", 'comment_created': datetime.datetime(2022, 7, 15, 7, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921908503, 'comment_body': ""Please keep as it was here (this line), it's not linked and it's better for security to keep exposed only on localhost.\r\n"", 'comment_created': datetime.datetime(2022, 7, 15, 7, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921913088, 'comment_body': '`$kratos_cookie"" might be a better name ;-)', 'comment_created': datetime.datetime(2022, 7, 15, 7, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921913358, 'comment_body': '```suggestion\r\n    my $url = ""http://kratos.openfoodfacts.localhost/cgi/kratos_auth.pl/session/whoami"";\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 7, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921920527, 'comment_body': ""No, you should not set the cookie as cookie (and note that this would be an invalid cookie specification).\r\nThe [documentation](https://www.ory.sh/docs/guides/session-management/check-session) tells you to use a header named `X-Session-Cookie`\r\n```suggestion\r\n    $req->header('X-Session-Cookie' => $myCookie);\r\n```"", 'comment_created': datetime.datetime(2022, 7, 15, 8, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 922479823, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 15, 19, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922479885, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 15, 19, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922575574, 'comment_body': 'fixed ', 'comment_created': datetime.datetime(2022, 7, 15, 23, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922575921, 'comment_body': 'I agree, fixed', 'comment_created': datetime.datetime(2022, 7, 15, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922576022, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 15, 23, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922576494, 'comment_body': 'Fixed, thought it could be either or', 'comment_created': datetime.datetime(2022, 7, 15, 23, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 923909947, 'comment_body': 'Made back to Cookie. [Here](https://www.ory.sh/docs/kratos/reference/api#operation/toSession) the docs say the `X-Session_Cookie` is for non browser clients, `Cookie` is for browser clients', 'comment_created': datetime.datetime(2022, 7, 18, 22, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 925563898, 'comment_body': 'Oh ok, fine :-)', 'comment_created': datetime.datetime(2022, 7, 20, 12, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925565099, 'comment_body': ""Hum that said @LandonPattison your perl code is not a browser ! So really I think X-Session_Cookie is cleaner here. But that's ok :-)"", 'comment_created': datetime.datetime(2022, 7, 20, 12, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925567714, 'comment_body': ""your names are a bit misleading.\r\n\r\n```suggest\r\n        my $content_ref = decode_json($json);\r\n        my %content = %$content_ref;\r\n```\r\nAlso you don't really need to do that. If you keep `$content_ref`, you can access data adding a `->`.\r\nLike `$content_ref->{identity}{traits}{UserID}` "", 'comment_created': datetime.datetime(2022, 7, 20, 12, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 927025188, 'comment_body': 'Fixed, did not know you could do this. Thanks!', 'comment_created': datetime.datetime(2022, 7, 21, 19, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 952287549, 'comment_body': 'Is this the last ""localhost"" hardcoded url ? Is it harder to configure through environment ?', 'comment_created': datetime.datetime(2022, 8, 23, 8, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952292958, 'comment_body': 'My long ""migrations"" experience, tells me it\'s better if we separate json generation and posting.\r\n\r\nI would rather dump all json in a file (eg. one json per line)\r\nand have a second script that read this file and post !\r\n\r\nThis has several advantage like being able to check before launching script, or splitting the json file, or just replaying failing lines, etc.\r\nWhen posting, Instead of just logging failure, you cloud create a file with failing json (one by line again), for check and replay.', 'comment_created': datetime.datetime(2022, 8, 23, 8, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952293473, 'comment_body': 'And kudos for your migration script in general :-)', 'comment_created': datetime.datetime(2022, 8, 23, 8, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952296327, 'comment_body': 'I think you should use: \r\n\r\n```perl\r\nredirect_to_url($request_ref, 302, $logout_url);\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 8, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952297166, 'comment_body': ""I think you should use: \r\n\r\n```perl\r\nredirect_to_url($request_ref, 302, 'http://world.openfoodfacts.localhost/');\r\n```\r\nBut of course the url should normally be built (but I imagine it was for testing)."", 'comment_created': datetime.datetime(2022, 8, 23, 8, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952297901, 'comment_body': 'it may be better to use redirect_to_url here also.', 'comment_created': datetime.datetime(2022, 8, 23, 8, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 957751577, 'comment_body': 'This does not matter as it is just the default, as long as they are configured through env in docker file all is good.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 957751840, 'comment_body': 'Thank you :)', 'comment_created': datetime.datetime(2022, 8, 29, 20, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 957765006, 'comment_body': 'fixed ', 'comment_created': datetime.datetime(2022, 8, 29, 20, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 963078882, 'comment_body': 'Created all users file [here](https://github.com/openfoodfacts/openfoodfacts-server/pull/7071/files#diff-b1f6f17300c7b56c6c26323639c01e12f3a6b30fd8b4d24a9d9a5e7a9fd3a9bf) and separated into two files users imported and not imported [here](https://github.com/openfoodfacts/openfoodfacts-server/pull/7071/files#diff-de5838131f059d46c356d13e429de2ba5877a032e59be0dc2bbd160504c2a57d)', 'comment_created': datetime.datetime(2022, 9, 5, 18, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}]","[{'commit_sha': '1c9b3785738b2384435973ab192f0852e7ae02a4', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2ba920a7a6215040fd320bdfc5b338ee1979b9', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b12034b718d9e0880e71af3c6f8c5bcdb8045a9', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953ca3fb7de984120965233e29079e1a89ce85e1', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fb905b1c5d99432875dfefb3c0666a8d5f7383', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9379e23daca5a6448ad0a461ab9e1f3ca619b39', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4791437c78cc06f10135a6ec30760186744cc395', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f5ac3c0799828402d4fae27d0d43c43c17fb6a6', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ccd21ae7dcfbac495869788d5890147ee57b30b', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1287bfbbf1267363017138b70950f0941852dc', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3167a9245d7dcbd0e7bcbed0cdf06ecb8d9605fd', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ce3eacc8f82df4c444b33f59059dfcdbb5325aa', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017e564adfbd7601c15681e9d4fd04315a62b6e0', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f02530a5821cbd4ec93b1ad02753d147a65cbc', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8957fb28777f090e20f124f90af24c214a623eb', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8588e80260e43e73e89896f57d426b184510635', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b1b9b2649ab7f859b3c5dd4b7f00445a3ab759', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8037970a0301a4c81b096c9633f38dc1b3088078', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc59a4471fa82258b1481ea50a6c09b728c02455', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4be1bad82b6dcbf8aa51a6c0922cd1b3b2bf3a7e', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae237670ea2753a67f976cb6a46d127857a75e9f', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b72e703b21539eaa95f53b8bcc4616fc38ba936a', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c712d10390801119e5aad1e400f308038a2b08d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61d37b8bd07cc60b76192fc965a01180f88cd2a8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0918b99bea5ad020435e7a41451a3fbe1c943cc', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919039308293d1f9dbb547d11edd8ad74355c303', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1a9df844437c49ea08298dbb43a9620ad440757', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69122065d7b54d4a8012166299991afe88f86fe8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5b425250ed83049410bf5d492ebac12e9985df4', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '251b433c6d6b57695ba8f62ca22a08314724ad4d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd113b299938aed1a6299fd9ac62f2b12276e6d2', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '720252096ccee1999df9dd5f412c2666cb805e05', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6e10a0f91dac541114c4c24890a17549774d2bb', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '477790d446c9ebe6ce12ce4edcb63112b0f57789', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bed308933fdcc1e0418f60b2532b9b8713520df1', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1d3fc2579dc6334e4707afd086558d0530239b', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e50ded04a10f3150307439802c42f2c75ef36ec', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '959b7ca968fd79dcb58745871eaa478abb8d4c5b', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12f9001103f39575a0036b50759a571c6c009a8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6dfb127dcf0ec5e5478f57340b1ef22a81ae2ec', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '832762edb64c5270d494b0d16ea691d5a7f37ffe', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b57824de7fc1817306a8e5110cda94d80c5a1c0', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3783252d28f83b4ca1ce79ad80d0386a2e0486d0', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b23b876182bb472a3346f5ee547f0f12ad4878a', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f657d905fb69d9839df1f8e4da78bd98d139c1da', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4874052cfaf10427aeb2f066a5592e698898e815', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ae8c011ee8bab705f10ba5554b161133e123ed2', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1491fc6109873761a052eec5ccd6993f17e0a721', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '607403f4f10aef8f5355ea958b6409afb985d26f', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}]",Landon Pattison,67596936,,User,,21,,5,1
985281282,build: implementing ory kratos and ory hydra (#6868),"### What
- Implement Ory kratos and Ory hydra",False,7001,https://api.github.com/repos/openfoodfacts/openfoodfacts-server/pulls/7001,https://github.com/openfoodfacts/openfoodfacts-server/pull/7001,closed,346,1,10,10,6,15,9,1,"[{'name': 'export'}, {'name': '📦 Packaging'}, {'name': '📸 Open Products Facts'}, {'name': '💥 Merge Conflicts'}, {'name': '👥 Users'}, {'name': '🔐 external auth service'}, {'name': 'config'}, {'name': '🔐 Password'}, {'name': 'Stale'}]",2022-07-01 19:30:11+00:00,2024-03-25 16:43:37+00:00,54681206.0,"632 days, 21:13:26","[{'comment_id': 919920971, 'comment_body': '```suggestion\r\nif($ORY_ENABLED){\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 10, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 919921129, 'comment_body': '```suggestion\r\nif($ORY_ENABLED){\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 10, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 919922121, 'comment_body': 'There is a case mismatch with what you export, so better keep it upper cased:\r\n\r\n```suggestion\r\nmy $ORY_ENABLED = int($ENV{ORY_ENABLED} || 0);\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 10, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920224348, 'comment_body': 'You should remove this as it should come from config.\r\n\r\nyou have it because of this line above.\r\n```perl\r\nuse ProductOpener::Config qw/:all/;\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 15, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920224893, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2022, 7, 13, 15, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920245498, 'comment_body': 'Move all those changes to Config_off.pm', 'comment_created': datetime.datetime(2022, 7, 13, 15, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920249959, 'comment_body': 'Use kratos.openfoodfacts.localhost', 'comment_created': datetime.datetime(2022, 7, 13, 15, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920254485, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 13, 16, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920283564, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 13, 16, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920283783, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 13, 16, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920289129, 'comment_body': 'moved to Config_off.pm', 'comment_created': datetime.datetime(2022, 7, 13, 16, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920289215, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 13, 16, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920289761, 'comment_body': 'did not remove, feature toggle is still not working', 'comment_created': datetime.datetime(2022, 7, 13, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922307103, 'comment_body': 'And now that you put it in `Config_off.pm` ?', 'comment_created': datetime.datetime(2022, 7, 15, 16, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 927127303, 'comment_body': 'no still not working ', 'comment_created': datetime.datetime(2022, 7, 21, 21, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}]","[{'commit_sha': 'e91180f5949f61bdaa2e111aaedb9981693bc822', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d6fa539cfe8a8a35c9ba4acb1d45add9ce7d19e', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70429c0a8e646b2807d7e871fc278ab587635ed9', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cce1da0480e9cc5b28dc542c2b30bce8a11748e', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c0cf552f6f25eacaea5613bb88f38647d343e4d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5527f10d479b3eb9c19faba186df8d9c06307b6f', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'affa9d1776acd3aab0adb2c334b6b826c45e854c', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac58b73c364b7af862346b027a374d4dab3499cf', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f181c92c228eb79e666e2821ea478b14be3e40d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc915b306d3b19eea44ce37f5126d7d10b9f804a', 'committer_username': 'hangy', 'committer_name': 'hangy', 'committer_email': 'hangy@hangy.de', 'commit_date': datetime.datetime(2009, 5, 21, 11, 28, 42, tzinfo=datetime.timezone.utc)}]",Landon Pattison,67596936,,User,,21,,5,1
1036249843,feat: allow importing scrypt hashing algorithm,"## Related issue(s)
#2422 

## Checklist
- [x]  I have read the [contributing guidelines](https://github.com/ory/kratos/blob/master/CONTRIBUTING.md).
- [x] I have referenced an issue containing the design document if my change introduces a new feature.
- [x] I am following the [contributing code guidelines](https://github.com/ory/kratos/blob/master/CONTRIBUTING.md#contributing-code).
- [x] I have read the [security policy](https://github.com/ory/kratos/security/policy).
- [x] I confirm that this pull request does not address a security vulnerability. 
        If this pull request addresses a security. vulnerability,
        I confirm that I got green light (please contact [security@ory.sh](mailto:security@ory.sh)) from the maintainers to push the changes.
- [x] I have added tests that prove my fix is effective or that my feature works.
- [x] I have added or changed the [the documentation](https://github.com/ory/docs)",True,2689,https://api.github.com/repos/ory/kratos/pulls/2689,https://github.com/ory/kratos/pull/2689,closed,114,1,6,12,10,10,0,0,[],2022-08-25 04:54:53+00:00,2022-09-08 08:43:54+00:00,1223341.0,"14 days, 3:49:01","[{'comment_id': 959475378, 'comment_body': 'I think you could force this error by supplying a cost that is not a power of 2, e.g. 5. Just so the codecov is happy. :)', 'comment_created': datetime.datetime(2022, 8, 31, 11, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jonas-jonas', 'type': 'User'}, {'comment_id': 959477941, 'comment_body': 'Here we do need a test to check what happens if a password is supplied that does not match its hash.', 'comment_created': datetime.datetime(2022, 8, 31, 11, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jonas-jonas', 'type': 'User'}, {'comment_id': 960169079, 'comment_body': 'Sounds good, Done [here](https://github.com/ory/kratos/pull/2689/files#diff-275881c2b9629b0999bee794700468eea536ffa1e5b2078beb854816435b4c30R242) ', 'comment_created': datetime.datetime(2022, 9, 1, 2, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 960169301, 'comment_body': 'Done [here](https://github.com/ory/kratos/pull/2689/files#diff-275881c2b9629b0999bee794700468eea536ffa1e5b2078beb854816435b4c30R243)', 'comment_created': datetime.datetime(2022, 9, 1, 2, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 961581550, 'comment_body': 'Are these parameters following a standard and if so where can I find it? :)', 'comment_created': datetime.datetime(2022, 9, 2, 11, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 962519474, 'comment_body': 'I have not found a standard... how I am using the hashing now([in perl](https://metacpan.org/pod/Crypt::ScryptKDF)) the format is SCRYPT:N:R:P:Salt:Hash, since I could not find a standard, I just went with similar to how the other algorithms are done. ', 'comment_created': datetime.datetime(2022, 9, 5, 6, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 962541364, 'comment_body': ""I have found a [python library](https://passlib.readthedocs.io/en/stable/lib/passlib.hash.scrypt.html) it is very similar to the format I suggested but different than the perl, I don't guess there is a standard"", 'comment_created': datetime.datetime(2022, 9, 5, 6, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 962903541, 'comment_body': 'Ah nice, passlib is definitely somewhat standard (more than the library used in Perl IMO). Shall we use the naming conventions established there?\r\n\r\nhttps://passlib.readthedocs.io/en/stable/lib/passlib.hash.scrypt.html#format-algorithm\r\n\r\nThat also seems to be implemented here with similar parameters:\r\n\r\nhttps://github.com/simonepri/phc-scrypt\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2022, 9, 5, 13, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 963080217, 'comment_body': 'Cool, I will change it to this way :)', 'comment_created': datetime.datetime(2022, 9, 5, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 964594547, 'comment_body': 'thank you!', 'comment_created': datetime.datetime(2022, 9, 7, 9, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}]","[{'commit_sha': 'c305a493f86881f20b997c593b041fbcb94ef4b5', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '494dde9b5d0a3ddb33b4ae59f4bdda310120b76d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b771ab49bcb8454adc7d13f4169e8ac6be199969', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02fda9385468857089f1bf327f3a42a8bf40d79f', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6850b19697c0cda1c6392dcac8060da2dca945da', 'committer_username': 'jonas-jonas', 'committer_name': 'Jonas Hungershausen', 'committer_email': 'jonas.hungershausen@gmail.com', 'commit_date': datetime.datetime(2013, 9, 25, 13, 47, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e809707f44a6df1cf207e0010c47576369bc6f29', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95f275be29824f22b31d3076b9a4ef26418944df', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c3bb242533a6d079867efe5e241fb9e65762d8b', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'badb4ceebe8f5e94acf2e40dadee6128c1156ecb', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50557178d8cd85a3e9e870c180813542933e88e8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3afc2dba3db622edde2d178f0b36f278b6f984', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4a1a58cbd54cd97e2b48206be9b2f6782a22958', 'committer_username': 'aeneasr', 'committer_name': 'hackerman', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 24, 17, 38, 20, tzinfo=datetime.timezone.utc)}]",Landon Pattison,67596936,,User,,21,,5,1
1076716521,feat: Allow for i18n,"## What

Allows for i18n in the Ory UI

## Additional Comments

Uses the [i18next framework](https://www.i18next.com/) integrating with handlebars, nodejs, and expressjs



",False,1,https://api.github.com/repos/openfoodfacts/kratos-selfservice-ui-node/pulls/1,https://github.com/openfoodfacts/kratos-selfservice-ui-node/pull/1,open,3036,4167,9,22,0,0,0,0,[],2022-10-05 02:06:13+00:00,,0.0,,[],"[{'commit_sha': 'fb29f52764c99cce70968d7eda360ee8cd5e5839', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88941738754254ed9d2a681cce847b8040b683d7', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2154c3c1392303db28f422ef53bb181f1640bd4c', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8bbee30d377ea463db3fd9e049ceb974e4110af', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07fdd1d6192f17bfe404c1ab3c0c76e7b659b56a', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dc9947a01fa020340ff099a19c3a55f5227c652', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1f08834d5777a0dd7319f65273ae68695cea530', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51a031ca225575dd3b06bedbb1d7396f2b6c3094', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a0737bcd2dc261df594417618b76c0f126a673e', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4bbaf5bda6617ccd36d2de6e32f6d8b18697de', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc4e1c1a4dee87fad6e8def76aa41157f8d56c8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d0d1f0a969cd9f798b861c3984b1b88b2b7d35a', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d073d01c6317e562384f3e5a47a665e4bc53929', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '398ed79417af396264b444dfb5841cdb3d0228c2', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ece589cba3b213d7aa3ab17bd41f62caaf7b49ad', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5547849e3c7538418cc3f957577fc904c10da5', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8515c859affef509cb989a2e14c7f954ac85be1', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '141105629665d45e0fc177501566284b247e557d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed90c17e491674bbf090049220d9aa048daefdf', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161dbb17a427b7597ed73ac14ca5f275da55ed04', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '901a3f675c10dd47c449686ac5e8fa7e1541a4f1', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62096a0523aeaeec1926610e4f9875a06a101942', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}]",Landon Pattison,67596936,,User,,21,,5,1
982000431,feat: integration with Hydra,"This PR adds the configuration option `selfservice.hydra_admin_url`. Setting this value to a Hydra admin endpoint URL turns Kratos into an OIDC identity provider. Resolves #273

## Related issue(s)

#273

<!--
If this pull request

1. is a fix for a known bug, link the issue where the bug was reported in the format of `#1234`;
2. is a fix for a previously unknown bug, explain the bug and how to reproduce it in this pull request;
2. implements a new feature, link the issue containing the design document in the format of `#1234`;
3. improves the documentation, no issue reference is required.

Pull requests introducing new features, which do not have a design document linked are more likely to be rejected and take on average 2-8 weeks longer to
get merged.

You can discuss changes with maintainers either in the Github Discusssions in this repository or
join the [Ory Chat](https://www.ory.sh/chat).
-->

## Checklist

<!--
Put an `x` in the boxes that apply. You can also fill these out after creating the PR.

Please be aware that pull requests must have all boxes ticked in order to be merged.

If you're unsure about any of them, don't hesitate to ask. We're here to help!
-->

- [ ] I have read the [contributing guidelines](../blob/master/CONTRIBUTING.md).
- [ ] I have referenced an issue containing the design document if my change introduces a new feature.
- [ ] I am following the [contributing code guidelines](../blob/master/CONTRIBUTING.md#contributing-code).
- [ ] I have read the [security policy](../security/policy).
- [ ] I confirm that this pull request does not address a security
      vulnerability. If this pull request addresses a security. vulnerability, I confirm that I got green light (please contact
      [security@ory.sh](mailto:security@ory.sh)) from the maintainers to push the changes.
- [ ] I have added tests that prove my fix is effective or that my feature works.
- [ ] I have added or changed [the documentation](docs/docs).

## Further Comments

<!--
If this is a relatively large or complex change, kick off the discussion by explaining why you chose the solution
you did and what alternatives you considered, etc...
-->
",False,2549,https://api.github.com/repos/ory/kratos/pulls/2549,https://github.com/ory/kratos/pull/2549,closed,9438,630,113,23,12,47,0,0,[],2022-06-29 00:31:49+00:00,2022-10-26 08:23:50+00:00,10309921.0,"119 days, 7:52:01","[{'comment_id': 970476825, 'comment_body': ""Shouldn't this be a `3caddfd5-9903-4bce-83ff-cae36f42dff7`?"", 'comment_created': datetime.datetime(2022, 9, 14, 8, 16, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970477198, 'comment_body': ""Shouldn't this be `3caddfd5-9903-4bce-83ff-cae36f42dff7`?"", 'comment_created': datetime.datetime(2022, 9, 14, 8, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970478108, 'comment_body': ""Wouldn't a `CHAR(36) NULL` not make more sense here?"", 'comment_created': datetime.datetime(2022, 9, 14, 8, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970479200, 'comment_body': 'If you use `uuid.NullUUID` you can use a NULLable UUID. And please add a code doc for this value :)\n', 'comment_created': datetime.datetime(2022, 9, 14, 8, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970485838, 'comment_body': 'Go code does not use underscores :) Please change all variable names that have underscores!', 'comment_created': datetime.datetime(2022, 9, 14, 8, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970497379, 'comment_body': ""Unless Ory Hydra tells us that it is ok to skip the login request:\n\n```\n\t\t\tlr, err := hydraclient.GetHydraLoginRequest(hydra_admin_url, hlc)\n\t\t\tif err != nil {\n\t\t\t    // ...\n\t\t\t}\n\t\t\tif lr.Skip {\n\t\t\t    // ...\n\t\t\t} else {\n\t\t\t    // ...\n\t\t\t}\n```\n\nwe should not auto-accept the login. Because it is possible that Ory Hydra is **demanding** us to show the login screen.\n\nSee this code here: https://github.com/ory/hydra-login-consent-node/blob/1496070c9bc5ddcefa327a7311d288c0ede60dcc/src/routes/login.ts#L26-L43\n\nAn important question here too is that the reference implementation uses the subject ( https://github.com/ory/hydra-login-consent-node/blob/1496070c9bc5ddcefa327a7311d288c0ede60dcc/src/routes/login.ts#L41 ) which is coming from Ory Hydra, not the own session store.\n\nI think that Ory Hydra has a protection in place which would prevent us from Ory Hydra expecting one subject, and Ory Kratos sending another. But we should double-check that!\n\nLong story short:\n\n1. You need to fetch the login request\n2. If skip is true, you can auto-accept it with the following requirements:\n    1. No session exists yet -> the `subject` value from Ory Hydra's login request response is used. See [example](https://github.com/ory/hydra-login-consent-node/blob/1496070c9bc5ddcefa327a7311d288c0ede60dcc/src/routes/login.ts#L41)\n   2. A session exists and `kratos.identity.id == hydra.subject` -> the identity id from the Ory Kratos session is used\n   3. A session exists and `kratos.identity.id != hydra.subject`:\n       * Either send `kratos.identity.id` to Ory Hydra, which most likely will end up in an error or;\n       * Invalidate the session and continue to the login form\n3. If skip is false you need to:\n    1. If a session exists, log the user out, and perform a fresh log in\n   2. If a session does not exist, continue to the login form"", 'comment_created': datetime.datetime(2022, 9, 14, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970499028, 'comment_body': 'Please follow code convention: `hydraAdminURL`', 'comment_created': datetime.datetime(2022, 9, 14, 8, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970499621, 'comment_body': 'Should be `ErrInternalServerError`', 'comment_created': datetime.datetime(2022, 9, 14, 8, 37, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970500580, 'comment_body': 'Add codedoc :) and make this `json:""oauth2_login_request,omitempty""`', 'comment_created': datetime.datetime(2022, 9, 14, 8, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970501075, 'comment_body': 'This code is used in both login and registration, can we DRY it up?', 'comment_created': datetime.datetime(2022, 9, 14, 8, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970502559, 'comment_body': 'Please use the global HTTPClient available in the driver/registry to follow our security requirements and resiliency!', 'comment_created': datetime.datetime(2022, 9, 14, 8, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970503169, 'comment_body': 'This code is duplicate in registration/handler, please dry it up.', 'comment_created': datetime.datetime(2022, 9, 14, 8, 40, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970503636, 'comment_body': 'DRY this up', 'comment_created': datetime.datetime(2022, 9, 14, 8, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970504444, 'comment_body': 'Make this `json:""oauth2_login_request,omitempty""`', 'comment_created': datetime.datetime(2022, 9, 14, 8, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970505399, 'comment_body': 'Please add a test for this functionality', 'comment_created': datetime.datetime(2022, 9, 14, 8, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970505734, 'comment_body': 'Please add tests for this new functionality in Go code.', 'comment_created': datetime.datetime(2022, 9, 14, 8, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970505816, 'comment_body': 'Please add tests for this new functionality in Go code.', 'comment_created': datetime.datetime(2022, 9, 14, 8, 42, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970505903, 'comment_body': 'Please add tests for this new functionality in Go code.', 'comment_created': datetime.datetime(2022, 9, 14, 8, 42, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970506110, 'comment_body': 'Please add tests for this new functionality in Go code.', 'comment_created': datetime.datetime(2022, 9, 14, 8, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970508858, 'comment_body': 'Good set up in the tests :)', 'comment_created': datetime.datetime(2022, 9, 14, 8, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 970517937, 'comment_body': '## Useless assignment to local variable\n\nThis definition of originalError is never used.\n\n[Show more details](https://github.com/ory/kratos/security/code-scanning/142)', 'comment_created': datetime.datetime(2022, 9, 14, 8, 54, 5, tzinfo=datetime.timezone.utc), 'commenter': 'github-advanced-security[bot]', 'type': 'Bot'}, {'comment_id': 984914967, 'comment_body': 'Thank you for your insightful review!\r\n\r\nRegarding the login logic, this is how I implemented it in the update that I just submitted:\r\n\r\n> 2. If skip is true, you can auto-accept it with the following requirements:\r\n>     i. No session exists yet -> the subject value from Ory Hydra\'s login request response is used. See example\r\n\r\nI don\'t think this is ever the case, because we handle the Hydra challenge either if AlreadyLoggedIn (session exists) or in the post-login hook (session exists; it has just been created).\r\n\r\n> 2.i and 2.ii\r\n\r\nI believe the implementation satisfies both scenarios by always using kratos.identity.id. I just need to add a test for the error when there\'s a mismatch (will do over the weekend).\r\n\r\n> 3. If skip is false you need to:\r\n>     i. If a session exists, log the user out, and perform a fresh log in\r\n\r\nI implemented this by adding a `refresh=true` to the login request initialization. This should have the added benefit that it won\'t ""sign the user out of github when they don\'t complete a circleci login"".\r\n\r\nRegarding registration, no changes were necessary because the user always enters a password during registration, and the login challenge is handled in the post-registration hook.\r\n\r\nPlease let me know what you think :)', 'comment_created': datetime.datetime(2022, 9, 30, 20, 6, 36, tzinfo=datetime.timezone.utc), 'commenter': 'grantzvolsky', 'type': 'User'}, {'comment_id': 985309368, 'comment_body': 'I used not null because it is one fewer special case to handle (zero UUID is not a valid value), but I changed it to nullable since you commented on it.', 'comment_created': datetime.datetime(2022, 10, 2, 22, 57, 4, tzinfo=datetime.timezone.utc), 'commenter': 'grantzvolsky', 'type': 'User'}, {'comment_id': 988491872, 'comment_body': '@aeneasr Please take a look at why this test passes in master without this configured.', 'comment_created': datetime.datetime(2022, 10, 6, 2, 15, 56, tzinfo=datetime.timezone.utc), 'commenter': 'grantzvolsky', 'type': 'User'}, {'comment_id': 989734587, 'comment_body': 'Maybe `GetLoginChallengeID`. And potentially add a small unit test for this?', 'comment_created': datetime.datetime(2022, 10, 7, 6, 46, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989735289, 'comment_body': 'Nice! Can you please add a test that checks for the client not being allowed to call private IPs when the private IP ban is enabled?', 'comment_created': datetime.datetime(2022, 10, 7, 6, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989736603, 'comment_body': ""If there's a bit of time left at the end it would be good to add tests for this that check that this actually works with Ory Hydra :) It's not critical because we have e2e tests that cover this functionality, but it would be nice (but not required) to have functional/integration tests for this."", 'comment_created': datetime.datetime(2022, 10, 7, 6, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989737032, 'comment_body': 'Missing `return`', 'comment_created': datetime.datetime(2022, 10, 7, 6, 49, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989737826, 'comment_body': ""Isn't this redundant? `hydra.GetLoginChallenge()` also checks `r.URL.Query`"", 'comment_created': datetime.datetime(2022, 10, 7, 6, 51, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989738481, 'comment_body': 'Can this case happen? I would expect an non-nil `err` if this value was nil', 'comment_created': datetime.datetime(2022, 10, 7, 6, 52, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989739088, 'comment_body': 'Redundant? `hlr` has the ID in it', 'comment_created': datetime.datetime(2022, 10, 7, 6, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989739638, 'comment_body': 'I suggest to simplify the logic and make it so this case can not happen due to code structure.', 'comment_created': datetime.datetime(2022, 10, 7, 6, 53, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989740938, 'comment_body': 'Simplify with\n\n```\n  }\nreturn errors.WithStack(err)\n```', 'comment_created': datetime.datetime(2022, 10, 7, 6, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989741845, 'comment_body': 'I think we can ignore this case as it should never happen :)', 'comment_created': datetime.datetime(2022, 10, 7, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989744088, 'comment_body': 'Missing return', 'comment_created': datetime.datetime(2022, 10, 7, 7, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989744170, 'comment_body': ""Please add tests for this in handler_test.go\n\nIf you don't want to boot hydra, you could also use a `gomock` implementation of the hydra client"", 'comment_created': datetime.datetime(2022, 10, 7, 7, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989744285, 'comment_body': ""Please add tests for this in handler_test.go\n\nIf you don't want to boot hydra, you could also use a `gomock` implementation of the hydra client"", 'comment_created': datetime.datetime(2022, 10, 7, 7, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989747048, 'comment_body': 'Maybe move this file to the hydra directory?', 'comment_created': datetime.datetime(2022, 10, 7, 7, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989772696, 'comment_body': 'This has the same port as the other app - maybe default to another port?', 'comment_created': datetime.datetime(2022, 10, 7, 7, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989797495, 'comment_body': 'Use `checkReq` instead', 'comment_created': datetime.datetime(2022, 10, 7, 7, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989881723, 'comment_body': 'This is copy pasted amongst the tests, can you DRY it up please?', 'comment_created': datetime.datetime(2022, 10, 7, 9, 22, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989882331, 'comment_body': 'This is copy pasted amongst the tests, can you DRY it up please?', 'comment_created': datetime.datetime(2022, 10, 7, 9, 22, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989891846, 'comment_body': 'Is this a duplicate of registration.spec.ts?', 'comment_created': datetime.datetime(2022, 10, 7, 9, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 989894093, 'comment_body': 'This test looks a bit bloatet, maybe we can improve it by using some common functions to handle the core oidc-provider tasks?\n\n1. Create a valid login URL\n2. Exchange the code for a token\n3. Accept consent with specific set of scopes\n\nI think that could greatly reduce code complexity and improve readability!', 'comment_created': datetime.datetime(2022, 10, 7, 9, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 991657495, 'comment_body': 'This distinguishes between\r\n* unset `login_challenge` -> no error, handle as non-OP flow; and\r\n* zero uuid challenge -> handle as OP flow error\r\n \r\nThe alternative is to have `hydra.GetLoginChallengeID` return an error when `login_challenge` is unset and then distinguish between this error and other errors. Would you prefer it to be implemented that way?', 'comment_created': datetime.datetime(2022, 10, 10, 21, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'grantzvolsky', 'type': 'User'}, {'comment_id': 991985369, 'comment_body': ""It can happen e.g. if some proxy accidentally returns an ok header response. This case is also handled in hydra.GetLoginRequest, so it shoulldn't happen here, but handling it both in the caller and in the callee is more future-proof"", 'comment_created': datetime.datetime(2022, 10, 11, 8, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'grantzvolsky', 'type': 'User'}, {'comment_id': 992002014, 'comment_body': 'We need `hlc` to retrieve `hlr` in the first place, and then it seems less complex to reuse it than parse `hlr.Challenge`, which is a string', 'comment_created': datetime.datetime(2022, 10, 11, 8, 27, 19, tzinfo=datetime.timezone.utc), 'commenter': 'grantzvolsky', 'type': 'User'}]","[{'commit_sha': 'dfcc0fd65300062a37d241b8e0afeab26cb4cc9a', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59ddec1afcae1ac6b2c6bc685ca709bb58f0603d', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76f4f472720ba6343310bc0a8c74f888533f8b6d', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '768e2631c876ef96a21604ef8290a53f93dce94b', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81c0aba0ccc2eccdc937cb62a7c00c0a67b4387', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c646d24d7f180c431c462cc373cd775487c09b4c', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0118bcb821d216f61eb82aead9bcb6c0003aa9c9', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f2f6503ae9680b49cb5ff5f67bd571f042b6d84', 'committer_username': 'aeneasr', 'committer_name': 'hackerman', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 24, 17, 38, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c259c9ca5e5e691a0b42aa430c08dcbcabd2f2c', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff0608d7a075ec71a5b43f6684c1e672e172d231', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd4dc54b832e9fecfc93e7f1c71754d7a44041a4', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3723f1ac112aa9b4fd90d8cac247ed946fa8d921', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05a4ce44c69882353f3dd503d17844ae7ccf6ca4', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2652846716248c29c68124a5f04fcbbb2f1f8fb', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fb38f80cb52f4a42a6a586f26b71146fa683185', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4804b9fdc710088924e67c51ffda2d9dbe4e8a24', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45785ed4a92e69faaacdb6ea3ab29cd2dd14162f', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78ddde8cb4300ac65f9d42e29fb1162f0d18f2a3', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb118cb57d8c6f48964ca1460c67db674141c5a8', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '325252934ad925a6ddd804ed56d11d0ff9506330', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f05d285e3aa53fa445ef167ebdb8f82ea4188d0', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c691127de26683b3b59b1fbba4a1419118076f8a', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd904106f6a8720964ecaffb1fa9d19964af8cf6b', 'committer_username': 'grantzvolsky', 'committer_name': 'Grant Zvolský', 'committer_email': None, 'commit_date': datetime.datetime(2010, 8, 21, 18, 37, 10, tzinfo=datetime.timezone.utc)}]",Grant Zvolský,371970,,User,,14,,49,18
997050964,build: configure Ory Kratos,"### What
- Configure kratos by env variables
- Added redirects from OFF to kratos
- Fix users not being signed in after logging in/creating an account
- Added kratos_auth.pl to create new users after being created in kratos
- Added kratos_update_settings.pl to update a users settings after being updated in kratos
- Added kratos_import_users_file.pl and kratos_import_users_post.pl to import users into kratos
- Wrote documentation on how to develop with ory

",False,7071,https://api.github.com/repos/openfoodfacts/openfoodfacts-server/pulls/7071,https://github.com/openfoodfacts/openfoodfacts-server/pull/7071,closed,1215,374,18,49,2,28,5,1,"[{'name': '📚 Documentation'}, {'name': '💥 Merge Conflicts'}, {'name': '👥 Users'}, {'name': '🔐 external auth service'}, {'name': 'Stale'}]",2022-07-14 19:36:20+00:00,2024-03-25 16:43:36+00:00,53557636.0,"619 days, 21:07:16","[{'comment_id': 921907309, 'comment_body': 'See https://www.ory.sh/docs/kratos/guides/configuring-cookies#session-cookies you should not put the `http://` neither a final `/`:\r\n```suggestion\r\n    domain: openfoodfacts.localhost\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 7, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921907527, 'comment_body': '```suggestion\r\n  domain: openfoodfacts.localhost\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 7, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921908212, 'comment_body': ""Please keep as it was here, it's not linked and it's better for security to keep exposed only on localhost."", 'comment_created': datetime.datetime(2022, 7, 15, 7, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921908503, 'comment_body': ""Please keep as it was here (this line), it's not linked and it's better for security to keep exposed only on localhost.\r\n"", 'comment_created': datetime.datetime(2022, 7, 15, 7, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921913088, 'comment_body': '`$kratos_cookie"" might be a better name ;-)', 'comment_created': datetime.datetime(2022, 7, 15, 7, 57, 23, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921913358, 'comment_body': '```suggestion\r\n    my $url = ""http://kratos.openfoodfacts.localhost/cgi/kratos_auth.pl/session/whoami"";\r\n```', 'comment_created': datetime.datetime(2022, 7, 15, 7, 57, 42, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 921920527, 'comment_body': ""No, you should not set the cookie as cookie (and note that this would be an invalid cookie specification).\r\nThe [documentation](https://www.ory.sh/docs/guides/session-management/check-session) tells you to use a header named `X-Session-Cookie`\r\n```suggestion\r\n    $req->header('X-Session-Cookie' => $myCookie);\r\n```"", 'comment_created': datetime.datetime(2022, 7, 15, 8, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 922479823, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 15, 19, 59, 7, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922479885, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 15, 19, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922575574, 'comment_body': 'fixed ', 'comment_created': datetime.datetime(2022, 7, 15, 23, 29, 36, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922575921, 'comment_body': 'I agree, fixed', 'comment_created': datetime.datetime(2022, 7, 15, 23, 31, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922576022, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 15, 23, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922576494, 'comment_body': 'Fixed, thought it could be either or', 'comment_created': datetime.datetime(2022, 7, 15, 23, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 923909947, 'comment_body': 'Made back to Cookie. [Here](https://www.ory.sh/docs/kratos/reference/api#operation/toSession) the docs say the `X-Session_Cookie` is for non browser clients, `Cookie` is for browser clients', 'comment_created': datetime.datetime(2022, 7, 18, 22, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 925563898, 'comment_body': 'Oh ok, fine :-)', 'comment_created': datetime.datetime(2022, 7, 20, 12, 47, 17, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925565099, 'comment_body': ""Hum that said @LandonPattison your perl code is not a browser ! So really I think X-Session_Cookie is cleaner here. But that's ok :-)"", 'comment_created': datetime.datetime(2022, 7, 20, 12, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 925567714, 'comment_body': ""your names are a bit misleading.\r\n\r\n```suggest\r\n        my $content_ref = decode_json($json);\r\n        my %content = %$content_ref;\r\n```\r\nAlso you don't really need to do that. If you keep `$content_ref`, you can access data adding a `->`.\r\nLike `$content_ref->{identity}{traits}{UserID}` "", 'comment_created': datetime.datetime(2022, 7, 20, 12, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 927025188, 'comment_body': 'Fixed, did not know you could do this. Thanks!', 'comment_created': datetime.datetime(2022, 7, 21, 19, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 952287549, 'comment_body': 'Is this the last ""localhost"" hardcoded url ? Is it harder to configure through environment ?', 'comment_created': datetime.datetime(2022, 8, 23, 8, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952292958, 'comment_body': 'My long ""migrations"" experience, tells me it\'s better if we separate json generation and posting.\r\n\r\nI would rather dump all json in a file (eg. one json per line)\r\nand have a second script that read this file and post !\r\n\r\nThis has several advantage like being able to check before launching script, or splitting the json file, or just replaying failing lines, etc.\r\nWhen posting, Instead of just logging failure, you cloud create a file with failing json (one by line again), for check and replay.', 'comment_created': datetime.datetime(2022, 8, 23, 8, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952293473, 'comment_body': 'And kudos for your migration script in general :-)', 'comment_created': datetime.datetime(2022, 8, 23, 8, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952296327, 'comment_body': 'I think you should use: \r\n\r\n```perl\r\nredirect_to_url($request_ref, 302, $logout_url);\r\n```', 'comment_created': datetime.datetime(2022, 8, 23, 8, 14, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952297166, 'comment_body': ""I think you should use: \r\n\r\n```perl\r\nredirect_to_url($request_ref, 302, 'http://world.openfoodfacts.localhost/');\r\n```\r\nBut of course the url should normally be built (but I imagine it was for testing)."", 'comment_created': datetime.datetime(2022, 8, 23, 8, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 952297901, 'comment_body': 'it may be better to use redirect_to_url here also.', 'comment_created': datetime.datetime(2022, 8, 23, 8, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 957751577, 'comment_body': 'This does not matter as it is just the default, as long as they are configured through env in docker file all is good.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 10, 15, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 957751840, 'comment_body': 'Thank you :)', 'comment_created': datetime.datetime(2022, 8, 29, 20, 10, 37, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 957765006, 'comment_body': 'fixed ', 'comment_created': datetime.datetime(2022, 8, 29, 20, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 963078882, 'comment_body': 'Created all users file [here](https://github.com/openfoodfacts/openfoodfacts-server/pull/7071/files#diff-b1f6f17300c7b56c6c26323639c01e12f3a6b30fd8b4d24a9d9a5e7a9fd3a9bf) and separated into two files users imported and not imported [here](https://github.com/openfoodfacts/openfoodfacts-server/pull/7071/files#diff-de5838131f059d46c356d13e429de2ba5877a032e59be0dc2bbd160504c2a57d)', 'comment_created': datetime.datetime(2022, 9, 5, 18, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}]","[{'commit_sha': '1c9b3785738b2384435973ab192f0852e7ae02a4', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e2ba920a7a6215040fd320bdfc5b338ee1979b9', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b12034b718d9e0880e71af3c6f8c5bcdb8045a9', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '953ca3fb7de984120965233e29079e1a89ce85e1', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3fb905b1c5d99432875dfefb3c0666a8d5f7383', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9379e23daca5a6448ad0a461ab9e1f3ca619b39', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4791437c78cc06f10135a6ec30760186744cc395', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f5ac3c0799828402d4fae27d0d43c43c17fb6a6', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ccd21ae7dcfbac495869788d5890147ee57b30b', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1287bfbbf1267363017138b70950f0941852dc', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3167a9245d7dcbd0e7bcbed0cdf06ecb8d9605fd', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ce3eacc8f82df4c444b33f59059dfcdbb5325aa', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '017e564adfbd7601c15681e9d4fd04315a62b6e0', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68f02530a5821cbd4ec93b1ad02753d147a65cbc', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a8957fb28777f090e20f124f90af24c214a623eb', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8588e80260e43e73e89896f57d426b184510635', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1b1b9b2649ab7f859b3c5dd4b7f00445a3ab759', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8037970a0301a4c81b096c9633f38dc1b3088078', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc59a4471fa82258b1481ea50a6c09b728c02455', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4be1bad82b6dcbf8aa51a6c0922cd1b3b2bf3a7e', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae237670ea2753a67f976cb6a46d127857a75e9f', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b72e703b21539eaa95f53b8bcc4616fc38ba936a', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c712d10390801119e5aad1e400f308038a2b08d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61d37b8bd07cc60b76192fc965a01180f88cd2a8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0918b99bea5ad020435e7a41451a3fbe1c943cc', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '919039308293d1f9dbb547d11edd8ad74355c303', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1a9df844437c49ea08298dbb43a9620ad440757', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69122065d7b54d4a8012166299991afe88f86fe8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5b425250ed83049410bf5d492ebac12e9985df4', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '251b433c6d6b57695ba8f62ca22a08314724ad4d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd113b299938aed1a6299fd9ac62f2b12276e6d2', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '720252096ccee1999df9dd5f412c2666cb805e05', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6e10a0f91dac541114c4c24890a17549774d2bb', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '477790d446c9ebe6ce12ce4edcb63112b0f57789', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bed308933fdcc1e0418f60b2532b9b8713520df1', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1d3fc2579dc6334e4707afd086558d0530239b', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e50ded04a10f3150307439802c42f2c75ef36ec', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '959b7ca968fd79dcb58745871eaa478abb8d4c5b', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f12f9001103f39575a0036b50759a571c6c009a8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6dfb127dcf0ec5e5478f57340b1ef22a81ae2ec', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '832762edb64c5270d494b0d16ea691d5a7f37ffe', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b57824de7fc1817306a8e5110cda94d80c5a1c0', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3783252d28f83b4ca1ce79ad80d0386a2e0486d0', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b23b876182bb472a3346f5ee547f0f12ad4878a', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f657d905fb69d9839df1f8e4da78bd98d139c1da', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4874052cfaf10427aeb2f066a5592e698898e815', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ae8c011ee8bab705f10ba5554b161133e123ed2', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1491fc6109873761a052eec5ccd6993f17e0a721', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '607403f4f10aef8f5355ea958b6409afb985d26f', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}]",Landon Pattison,67596936,,User,,21,,5,1
985281282,build: implementing ory kratos and ory hydra (#6868),"### What
- Implement Ory kratos and Ory hydra",False,7001,https://api.github.com/repos/openfoodfacts/openfoodfacts-server/pulls/7001,https://github.com/openfoodfacts/openfoodfacts-server/pull/7001,closed,346,1,10,10,6,15,9,1,"[{'name': 'export'}, {'name': '📦 Packaging'}, {'name': '📸 Open Products Facts'}, {'name': '💥 Merge Conflicts'}, {'name': '👥 Users'}, {'name': '🔐 external auth service'}, {'name': 'config'}, {'name': '🔐 Password'}, {'name': 'Stale'}]",2022-07-01 19:30:11+00:00,2024-03-25 16:43:37+00:00,54681206.0,"632 days, 21:13:26","[{'comment_id': 919920971, 'comment_body': '```suggestion\r\nif($ORY_ENABLED){\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 10, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 919921129, 'comment_body': '```suggestion\r\nif($ORY_ENABLED){\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 10, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 919922121, 'comment_body': 'There is a case mismatch with what you export, so better keep it upper cased:\r\n\r\n```suggestion\r\nmy $ORY_ENABLED = int($ENV{ORY_ENABLED} || 0);\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 10, 31, 24, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920224348, 'comment_body': 'You should remove this as it should come from config.\r\n\r\nyou have it because of this line above.\r\n```perl\r\nuse ProductOpener::Config qw/:all/;\r\n```', 'comment_created': datetime.datetime(2022, 7, 13, 15, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920224893, 'comment_body': 'Same as above.', 'comment_created': datetime.datetime(2022, 7, 13, 15, 33, 59, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920245498, 'comment_body': 'Move all those changes to Config_off.pm', 'comment_created': datetime.datetime(2022, 7, 13, 15, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920249959, 'comment_body': 'Use kratos.openfoodfacts.localhost', 'comment_created': datetime.datetime(2022, 7, 13, 15, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 920254485, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 13, 16, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920283564, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 13, 16, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920283783, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 13, 16, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920289129, 'comment_body': 'moved to Config_off.pm', 'comment_created': datetime.datetime(2022, 7, 13, 16, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920289215, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2022, 7, 13, 16, 36, 26, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 920289761, 'comment_body': 'did not remove, feature toggle is still not working', 'comment_created': datetime.datetime(2022, 7, 13, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 922307103, 'comment_body': 'And now that you put it in `Config_off.pm` ?', 'comment_created': datetime.datetime(2022, 7, 15, 16, 3, 48, tzinfo=datetime.timezone.utc), 'commenter': 'alexgarel', 'type': 'User'}, {'comment_id': 927127303, 'comment_body': 'no still not working ', 'comment_created': datetime.datetime(2022, 7, 21, 21, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}]","[{'commit_sha': 'e91180f5949f61bdaa2e111aaedb9981693bc822', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d6fa539cfe8a8a35c9ba4acb1d45add9ce7d19e', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70429c0a8e646b2807d7e871fc278ab587635ed9', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cce1da0480e9cc5b28dc542c2b30bce8a11748e', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c0cf552f6f25eacaea5613bb88f38647d343e4d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5527f10d479b3eb9c19faba186df8d9c06307b6f', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'affa9d1776acd3aab0adb2c334b6b826c45e854c', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac58b73c364b7af862346b027a374d4dab3499cf', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f181c92c228eb79e666e2821ea478b14be3e40d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cc915b306d3b19eea44ce37f5126d7d10b9f804a', 'committer_username': 'hangy', 'committer_name': 'hangy', 'committer_email': 'hangy@hangy.de', 'commit_date': datetime.datetime(2009, 5, 21, 11, 28, 42, tzinfo=datetime.timezone.utc)}]",Landon Pattison,67596936,,User,,21,,5,1
1076716521,feat: Allow for i18n,"## What

Allows for i18n in the Ory UI

## Additional Comments

Uses the [i18next framework](https://www.i18next.com/) integrating with handlebars, nodejs, and expressjs



",False,1,https://api.github.com/repos/openfoodfacts/kratos-selfservice-ui-node/pulls/1,https://github.com/openfoodfacts/kratos-selfservice-ui-node/pull/1,open,3036,4167,9,22,0,0,0,0,[],2022-10-05 02:06:13+00:00,,0.0,,[],"[{'commit_sha': 'fb29f52764c99cce70968d7eda360ee8cd5e5839', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88941738754254ed9d2a681cce847b8040b683d7', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2154c3c1392303db28f422ef53bb181f1640bd4c', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8bbee30d377ea463db3fd9e049ceb974e4110af', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07fdd1d6192f17bfe404c1ab3c0c76e7b659b56a', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dc9947a01fa020340ff099a19c3a55f5227c652', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1f08834d5777a0dd7319f65273ae68695cea530', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51a031ca225575dd3b06bedbb1d7396f2b6c3094', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a0737bcd2dc261df594417618b76c0f126a673e', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e4bbaf5bda6617ccd36d2de6e32f6d8b18697de', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfc4e1c1a4dee87fad6e8def76aa41157f8d56c8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d0d1f0a969cd9f798b861c3984b1b88b2b7d35a', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d073d01c6317e562384f3e5a47a665e4bc53929', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '398ed79417af396264b444dfb5841cdb3d0228c2', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ece589cba3b213d7aa3ab17bd41f62caaf7b49ad', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec5547849e3c7538418cc3f957577fc904c10da5', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8515c859affef509cb989a2e14c7f954ac85be1', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '141105629665d45e0fc177501566284b247e557d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ed90c17e491674bbf090049220d9aa048daefdf', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161dbb17a427b7597ed73ac14ca5f275da55ed04', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '901a3f675c10dd47c449686ac5e8fa7e1541a4f1', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62096a0523aeaeec1926610e4f9875a06a101942', 'committer_username': 'alexgarel', 'committer_name': 'Alex Garel', 'committer_email': None, 'commit_date': datetime.datetime(2009, 10, 26, 13, 49, 59, tzinfo=datetime.timezone.utc)}]",Landon Pattison,67596936,,User,,21,,5,1
1036249843,feat: allow importing scrypt hashing algorithm,"## Related issue(s)
#2422 

## Checklist
- [x]  I have read the [contributing guidelines](https://github.com/ory/kratos/blob/master/CONTRIBUTING.md).
- [x] I have referenced an issue containing the design document if my change introduces a new feature.
- [x] I am following the [contributing code guidelines](https://github.com/ory/kratos/blob/master/CONTRIBUTING.md#contributing-code).
- [x] I have read the [security policy](https://github.com/ory/kratos/security/policy).
- [x] I confirm that this pull request does not address a security vulnerability. 
        If this pull request addresses a security. vulnerability,
        I confirm that I got green light (please contact [security@ory.sh](mailto:security@ory.sh)) from the maintainers to push the changes.
- [x] I have added tests that prove my fix is effective or that my feature works.
- [x] I have added or changed the [the documentation](https://github.com/ory/docs)",True,2689,https://api.github.com/repos/ory/kratos/pulls/2689,https://github.com/ory/kratos/pull/2689,closed,114,1,6,12,10,10,0,0,[],2022-08-25 04:54:53+00:00,2022-09-08 08:43:54+00:00,1223341.0,"14 days, 3:49:01","[{'comment_id': 959475378, 'comment_body': 'I think you could force this error by supplying a cost that is not a power of 2, e.g. 5. Just so the codecov is happy. :)', 'comment_created': datetime.datetime(2022, 8, 31, 11, 33, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jonas-jonas', 'type': 'User'}, {'comment_id': 959477941, 'comment_body': 'Here we do need a test to check what happens if a password is supplied that does not match its hash.', 'comment_created': datetime.datetime(2022, 8, 31, 11, 36, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jonas-jonas', 'type': 'User'}, {'comment_id': 960169079, 'comment_body': 'Sounds good, Done [here](https://github.com/ory/kratos/pull/2689/files#diff-275881c2b9629b0999bee794700468eea536ffa1e5b2078beb854816435b4c30R242) ', 'comment_created': datetime.datetime(2022, 9, 1, 2, 38, 48, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 960169301, 'comment_body': 'Done [here](https://github.com/ory/kratos/pull/2689/files#diff-275881c2b9629b0999bee794700468eea536ffa1e5b2078beb854816435b4c30R243)', 'comment_created': datetime.datetime(2022, 9, 1, 2, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 961581550, 'comment_body': 'Are these parameters following a standard and if so where can I find it? :)', 'comment_created': datetime.datetime(2022, 9, 2, 11, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 962519474, 'comment_body': 'I have not found a standard... how I am using the hashing now([in perl](https://metacpan.org/pod/Crypt::ScryptKDF)) the format is SCRYPT:N:R:P:Salt:Hash, since I could not find a standard, I just went with similar to how the other algorithms are done. ', 'comment_created': datetime.datetime(2022, 9, 5, 6, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 962541364, 'comment_body': ""I have found a [python library](https://passlib.readthedocs.io/en/stable/lib/passlib.hash.scrypt.html) it is very similar to the format I suggested but different than the perl, I don't guess there is a standard"", 'comment_created': datetime.datetime(2022, 9, 5, 6, 50, 52, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 962903541, 'comment_body': 'Ah nice, passlib is definitely somewhat standard (more than the library used in Perl IMO). Shall we use the naming conventions established there?\r\n\r\nhttps://passlib.readthedocs.io/en/stable/lib/passlib.hash.scrypt.html#format-algorithm\r\n\r\nThat also seems to be implemented here with similar parameters:\r\n\r\nhttps://github.com/simonepri/phc-scrypt\r\n\r\nWDYT?', 'comment_created': datetime.datetime(2022, 9, 5, 13, 21, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}, {'comment_id': 963080217, 'comment_body': 'Cool, I will change it to this way :)', 'comment_created': datetime.datetime(2022, 9, 5, 18, 13, tzinfo=datetime.timezone.utc), 'commenter': 'LandonPattison', 'type': 'User'}, {'comment_id': 964594547, 'comment_body': 'thank you!', 'comment_created': datetime.datetime(2022, 9, 7, 9, 15, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aeneasr', 'type': 'User'}]","[{'commit_sha': 'c305a493f86881f20b997c593b041fbcb94ef4b5', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '494dde9b5d0a3ddb33b4ae59f4bdda310120b76d', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b771ab49bcb8454adc7d13f4169e8ac6be199969', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '02fda9385468857089f1bf327f3a42a8bf40d79f', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6850b19697c0cda1c6392dcac8060da2dca945da', 'committer_username': 'jonas-jonas', 'committer_name': 'Jonas Hungershausen', 'committer_email': 'jonas.hungershausen@gmail.com', 'commit_date': datetime.datetime(2013, 9, 25, 13, 47, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e809707f44a6df1cf207e0010c47576369bc6f29', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95f275be29824f22b31d3076b9a4ef26418944df', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c3bb242533a6d079867efe5e241fb9e65762d8b', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'badb4ceebe8f5e94acf2e40dadee6128c1156ecb', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50557178d8cd85a3e9e870c180813542933e88e8', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf3afc2dba3db622edde2d178f0b36f278b6f984', 'committer_username': 'LandonPattison', 'committer_name': 'Landon Pattison', 'committer_email': None, 'commit_date': datetime.datetime(2020, 6, 29, 15, 45, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4a1a58cbd54cd97e2b48206be9b2f6782a22958', 'committer_username': 'aeneasr', 'committer_name': 'hackerman', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 24, 17, 38, 20, tzinfo=datetime.timezone.utc)}]",Landon Pattison,67596936,,User,,21,,5,1

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
14111770,openfoodfacts-server,openfoodfacts/openfoodfacts-server,HTML,366,627,34,228,33902,1592,284,94,"[{'id': 1076560171, 'number': 7442, 'closed': datetime.datetime(2022, 10, 5, 10, 12, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 4, 22, 10, 21, tzinfo=datetime.timezone.utc), 'time_taken': 43308.0, 'time_delta': '12:01:48', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 997050964, 'number': 7071, 'closed': datetime.datetime(2024, 3, 25, 16, 43, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 14, 19, 36, 20, tzinfo=datetime.timezone.utc), 'time_taken': 53557636.0, 'time_delta': '619 days, 21:07:16', 'additions': 1215, 'deletions': 374, 'state': 'closed'}, {'id': 985281282, 'number': 7001, 'closed': datetime.datetime(2024, 3, 25, 16, 43, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 1, 19, 30, 11, tzinfo=datetime.timezone.utc), 'time_taken': 54681206.0, 'time_delta': '632 days, 21:13:26', 'additions': 346, 'deletions': 1, 'state': 'closed'}, {'id': 961228976, 'number': 6868, 'closed': datetime.datetime(2022, 7, 1, 16, 9, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 8, 6, 18, 10, tzinfo=datetime.timezone.utc), 'time_taken': 2022702.0, 'time_delta': '23 days, 9:51:42', 'additions': 274, 'deletions': 1, 'state': 'closed'}, {'id': 959856532, 'number': 6865, 'closed': datetime.datetime(2022, 6, 8, 6, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 7, 3, 58, 19, tzinfo=datetime.timezone.utc), 'time_taken': 94661.0, 'time_delta': '1 day, 2:17:41', 'additions': 198, 'deletions': 1, 'state': 'closed'}, {'id': 910669267, 'number': 6620, 'closed': datetime.datetime(2022, 4, 19, 3, 24, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 15, 8, 5, 29, tzinfo=datetime.timezone.utc), 'time_taken': 328760.0, 'time_delta': '3 days, 19:19:20', 'additions': 1, 'deletions': 0, 'state': 'closed'}, {'id': 908236723, 'number': 6597, 'closed': datetime.datetime(2022, 4, 13, 14, 36, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 12, 22, 39, 39, tzinfo=datetime.timezone.utc), 'time_taken': 57437.0, 'time_delta': '15:57:17', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
135321861,kratos,ory/kratos,Go,949,10986,114,225,4339,242,142,53,"[{'id': 1036249843, 'number': 2689, 'closed': datetime.datetime(2022, 9, 8, 8, 43, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 25, 4, 54, 53, tzinfo=datetime.timezone.utc), 'time_taken': 1223341.0, 'time_delta': '14 days, 3:49:01', 'additions': 114, 'deletions': 1, 'state': 'closed'}]"
536014822,kratos-selfservice-ui-node,openfoodfacts/kratos-selfservice-ui-node,TypeScript,0,2,2,21,297,10,94,10,"[{'id': 1076716521, 'number': 1, 'closed': None, 'created': datetime.datetime(2022, 10, 5, 2, 6, 13, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 3036, 'deletions': 4167, 'state': 'open'}]"
