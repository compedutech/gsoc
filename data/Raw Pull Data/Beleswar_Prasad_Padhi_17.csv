pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1370567127,GSoC'23 Project: Implement an Interactive GUI for presenting Network-Based Indicators summary,"# Idea
Currently, FakeNet-NG displays its output by either printing it to the console or writing it to a log file. However, Malware with a lot of activity can generate long FakeNet logs. To save analysts from having to read or grep long FakeNet logs, this project aims in providing a user-friendly interface for viewing the output of FakeNet-NG in a more organized and detailed manner. 

# Implementation
We started by identifying the potential attributes contributing to network-based indicators from each listener. We collected NBIs from each listener in a dictionary and passed it to the diverter component through a callback method (`collect_nbi`). The diverter component then assembled NBIs from all listeners into a central dictionary structure, along with additional details such as process information, protocol, destination IP, port, etc. We developed a `template.html` file containing placeholders for NBIs, CSS, and JS code for the UI. After each FakeNet session termination, this template file is read, and actual NBI values from the session are inserted into the placeholders. The resulting report is saved with a timestamp in the main working directory of FakeNet. Users can open this HTML file in any browser to review the NBI summary.

# Features
* We've introduced an interactive and responsive UI that presents NBIs in a user-friendly format. This UI is equipped with various functionalities such as filtering, selection, and copying, making it significantly easier for analysts to comprehend malware behavior. Fun fact: The copied format of NBIs aligns seamlessly with Flare Malware reports, simplifying the process even further!
* The UI incorporates NBIs from every listener, supporting both single-host and multi-host operations.
* Our codebase now enhances modularity, enabling future contributors to effortlessly support the representation of NBIs from new listeners within the UI. All that's required is a simple method call (collect_nbi) in the listener to the diverter. This avoids any concerns about integrating new NBIs directly into the UI itself.
* To enhance data abstraction, we've introduced the `DiverterWrapper` class. This class facilitates controlled access of the diverter to listeners, aligning with object-oriented programming practices. It offers specific methods from the diverter that listeners require access to, without exposing the entire diverter for improved coding practices.

# Steps to verify

- [ ] Install FakeNet-NG on your system.
- [ ] Start a FakeNet session.
- [ ] Execute a benign script or malware to generate traffic against the FakeNet session.
- [ ] Stop the FakeNet session by pressing `CTRL+C`.
- [ ] Open the generated HTML report in a browser and explore the available options.",True,163,https://api.github.com/repos/mandiant/flare-fakenet-ng/pulls/163,https://github.com/mandiant/flare-fakenet-ng/pull/163,closed,1338,13,14,42,4,44,0,0,[],2023-05-30 14:20:41+00:00,2024-03-29 16:22:09+00:00,26272888.0,"304 days, 2:01:28","[{'comment_id': 1214630022, 'comment_body': 'consider using [str.partition](https://docs.python.org/3/library/stdtypes.html#str.partition) when you want to split something once', 'comment_created': datetime.datetime(2023, 6, 2, 17, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1220420855, 'comment_body': 'Thanks for the suggestion! Worked upon that :)', 'comment_created': datetime.datetime(2023, 6, 6, 21, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1230078006, 'comment_body': ""let's return immediately if no session is found. Something like this:\r\n```\r\nsession = self.diverter.sessions.get(self.pkt.sport)\r\nif session is None:\r\n    return True\r\nelse:\r\n    return not (session[:2] == (self.pkt.dst_ip, self.pkt.dport))\r\n```"", 'comment_created': datetime.datetime(2023, 6, 14, 19, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1230176847, 'comment_body': 'Use snake case instead of camelCase or rename it to just self.nbis.', 'comment_created': datetime.datetime(2023, 6, 14, 21, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1230183854, 'comment_body': ""I know there are few inconsistencies with naming conventions used in the code but let's stick to camelCase for methods"", 'comment_created': datetime.datetime(2023, 6, 14, 21, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1230188078, 'comment_body': ""you don't need to specify .keys() when using the `in` operator."", 'comment_created': datetime.datetime(2023, 6, 14, 21, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1230201379, 'comment_body': 'Appending header values from different requests to same header key is not ideal as it will be difficult to keep track of which header belonged to which request later on when we display individual requests in the UI. Refer to the project plan document for more notes.', 'comment_created': datetime.datetime(2023, 6, 14, 21, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244605536, 'comment_body': 'do we need a separate dictionary for storing is_ssl_encrypted?', 'comment_created': datetime.datetime(2023, 6, 28, 2, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244633018, 'comment_body': 'listener_port is a bit confusing, better to use `sport`. Thinking along the same lines, `application_layer_proto` would be more readable', 'comment_created': datetime.datetime(2023, 6, 28, 3, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244633950, 'comment_body': 'a traditional if else block would make the code more readable here', 'comment_created': datetime.datetime(2023, 6, 28, 3, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244641164, 'comment_body': ""don't need the parenthesis here"", 'comment_created': datetime.datetime(2023, 6, 28, 4, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244647497, 'comment_body': ""the `UseSSL` config doesn't use boolean but either 'Yes' or 'No'. We need to be consistent here"", 'comment_created': datetime.datetime(2023, 6, 28, 4, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244654586, 'comment_body': 'you could also move this up to the above `if proxied_nbi:` block', 'comment_created': datetime.datetime(2023, 6, 28, 4, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1245672908, 'comment_body': 'The thought behind a separate dictionary was for better readability. But we could put the `is_ssl_encrypted` and `orig_sport` as a tuple as the dictionary value. Is this a better way?\r\n\r\n`self.proxy_orig_sports[proxy_sport] = (orig_sport, is_ssl_encrypted)`', 'comment_created': datetime.datetime(2023, 6, 28, 19, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1245676522, 'comment_body': '> you could also move this up to the above `if proxied_nbi:` block\r\n\r\nSorry, not clear which code you are pointing to, could you mention the lines please?', 'comment_created': datetime.datetime(2023, 6, 28, 19, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1246536698, 'comment_body': 'Got the point now!', 'comment_created': datetime.datetime(2023, 6, 29, 12, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1273994547, 'comment_body': ""let's use (proto, proxy_sport) as key here."", 'comment_created': datetime.datetime(2023, 7, 25, 19, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274067096, 'comment_body': 'indent this line. We try to maintain a max line length of 80 characters (a little over 80 characters is fine if you can indent the line better).\r\n```\r\nis_ssl_encrypted = self.is_proxied_pkt_ssl_encrypted.get((orig_sport,\r\n                                                         sport))', 'comment_created': datetime.datetime(2023, 7, 25, 20, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274067529, 'comment_body': '```suggestion\r\n        _, _, pid, comm, orig_dport, transport_layer_proto = self.sessions.get(orig_sport)\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 20, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274074752, 'comment_body': '`is` operator is preferred for checking if something is `None`', 'comment_created': datetime.datetime(2023, 7, 25, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274076330, 'comment_body': '```suggestion\r\n            self.remote_pid_counter += 1\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 20, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274091363, 'comment_body': ""```suggestion\r\n        nbi_entry = {\r\n            'transport_layer_proto': transport_layer_proto,\r\n            'sport': orig_sport,\r\n            'dport': orig_dport,\r\n            'is_ssl_encrypted': is_ssl_encrypted,\r\n            'nbi': nbi\r\n            }\r\n```"", 'comment_created': datetime.datetime(2023, 7, 25, 20, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274117954, 'comment_body': 'this line can be indented better\r\n```\r\nself.nbi.setdefault((pid, comm), {}).setdefault(application_layer_proto,\r\n                                                []).append(nbi_entry)', 'comment_created': datetime.datetime(2023, 7, 25, 21, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274120941, 'comment_body': ""keeping the UI in mind, it will be useful to store fakenet's mode of operation - singlehost or multihost in self.nbi."", 'comment_created': datetime.datetime(2023, 7, 25, 21, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274197153, 'comment_body': 'instead of making these changes to SocketWithHexdumpRecv class, we could do `hexdump_table(data)` and `collect_nbi` right after self.request.recv(1024) in the `handle` method.', 'comment_created': datetime.datetime(2023, 7, 25, 22, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274198323, 'comment_body': ""I would leave application layer protocol empty here instead of using 'Raw'. We will need to make the necessary changes in `logNbi()` to use the transport layer protocol as key in `self.nbi` dictionary when application layer protocol is empty. "", 'comment_created': datetime.datetime(2023, 7, 25, 23, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274200432, 'comment_body': 'nitpicking here but self.nbi**s** maybe more suitable', 'comment_created': datetime.datetime(2023, 7, 25, 23, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305087250, 'comment_body': 'this line should come before line 188. We need the filename before we do os.path.join()', 'comment_created': datetime.datetime(2023, 8, 25, 3, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305091814, 'comment_body': 'this line should come before line 206', 'comment_created': datetime.datetime(2023, 8, 25, 3, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305094153, 'comment_body': 'We are interested in the virtual file path used by AbstractedFS class. In order to get the actual path seen by FakeNet, we need something like `AbstractedFS.fs2ftp(self, path)` (need to remove the forward slash as well from the filename returned)', 'comment_created': datetime.datetime(2023, 8, 25, 3, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305094749, 'comment_body': 'same as `DELETE` command, need to get the actual directory name and not the virtual path.', 'comment_created': datetime.datetime(2023, 8, 25, 3, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305149421, 'comment_body': 'not an error from your side, but move cmd.decode(""utf-8"").upper() to the line above so that line 135 and 136 would look like:\r\n```\r\ncmd = cmd.decode(""utf-8"").upper()\r\nhandler = getattr(self, \'pop_%s\' % (cmd), self.pop_DEFAULT)\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 5, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305157413, 'comment_body': ""let's use 'command' instead of 'cmd'"", 'comment_created': datetime.datetime(2023, 8, 25, 5, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1313521666, 'comment_body': 'indent this line', 'comment_created': datetime.datetime(2023, 9, 1, 21, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1313521860, 'comment_body': 'indent this line', 'comment_created': datetime.datetime(2023, 9, 1, 21, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319318666, 'comment_body': ""any reason to use all caps for this variable name? Seeing that we only use this variable within this function, I don't think we need all caps (like how we would use for a constant) but let me know."", 'comment_created': datetime.datetime(2023, 9, 8, 3, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319941867, 'comment_body': ""There's no data portion to an TFTP ACK packet. The packet is 4 bytes long - 2 bytes for opcode and 2 bytes for block number."", 'comment_created': datetime.datetime(2023, 9, 8, 14, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319965422, 'comment_body': 'To stop FakeNet-NG and save the generated PCAP file and HTML report to disk, press `CTRL-C`:', 'comment_created': datetime.datetime(2023, 9, 8, 14, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319972891, 'comment_body': 'With each session of FakeNet-NG, an HTML report containing the Network-Based Indicators (NBIs) captured throughout the session is generated. Upon termination of FakeNet by pressing `CTRL-C`, this HTML file will be saved to the root directory of FakeNet. A user can review the NBIs by viewing this HTML file in a browser such as Chrome or Firefox.', 'comment_created': datetime.datetime(2023, 9, 8, 14, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319997762, 'comment_body': 'I think we can change ""making malware report generation easier"" to ""making network analysis easier""', 'comment_created': datetime.datetime(2023, 9, 8, 15, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319998880, 'comment_body': 'categorizes them by the **application layer or transport layer protocol** they use', 'comment_created': datetime.datetime(2023, 9, 8, 15, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1320003014, 'comment_body': 'This cell provides extra information about each NBI request such as the transport layer protocol used, destination IP, port, and SSL encryption.', 'comment_created': datetime.datetime(2023, 9, 8, 15, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1320692851, 'comment_body': 'The thought was to keep TEMPLATE_FILE as constant so that it could be used in other methods like ones to generate the communication graph. But currently, it is used in just one method. So, we will use normal naming convention. Thanks for pointing out :)', 'comment_created': datetime.datetime(2023, 9, 10, 5, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1355440633, 'comment_body': 'I would like us to document (via comments) why there must exist both a run() and a connect() method.\r\n\r\nYour astute mentor reminded me that we documented this in our discussion notes:\r\n\r\n> The ThreadedTCPClientSocket (which is really a thread!) would implement a `connect()` method that the ThreadedTCPRequestHandler object could use to get the source port and then call a Diverter-supplied callback informing the diverter of the mapping between the old source port and the proxy source port.\r\n\r\nMaintainers would benefit from seeing this represented in the comments for connect() along with commentary on the run() method indicating the expectation that connect() has already been called.\r\n', 'comment_created': datetime.datetime(2023, 10, 11, 17, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'strictlymike', 'type': 'User'}]","[{'commit_sha': '2f5119a167d103243108c2eff384ec8f58ef5d5d', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81f9fe53772c57610ee68ee7fd475e8106f39401', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77205df33c0e9a66441a84a6e26d0d1e1daea87a', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dcad9dc9eb2c0789da0e1ce929d1f08bebeea02', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b22a799a61c36ef59d9e3b180c50e805d6e9d7', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1638d516298699264e9abb0a171b85d7bc398f25', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77945b9e630c7011acbcf8061f28d200791ce01b', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '770a6ee58e3d4219b1650f55c3cec28770220652', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24f1c542df6f0cd477d0d19f169b5bf6833a3cff', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3d63b1d238c35aff3903e24a6a290c7a5a2adac', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c72de646b7c80152f747cb6da8d068b8ba8a99', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd483c79fd87493e0cd38cbbca4032c39800d50', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4be3fb5cafdb54235be3edec6a5f410700a2c08', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb32fa272090b86562a27e10cd170bb76ec05e8', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d2b1870cb78837c9196593ccf00e903813e42a7', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9e6a8a9a693b461c1b9a633cbf44e4544d3c55', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca9f992d9c2bf228afbeb1bbd11d26ef2c47b7ad', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe24a6d98c507dbc2d42df4bc8fcf774ff491227', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a63b7d4d31d485ec73a15d75c3d48c975cc471e', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59964a8ccad085abe2cb291e683cd6995df79eef', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a55b1503e9d3a1a94bee8bb68bd801e07ec2c50', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fff6b3d74cde47a6b8f75f19de0ed7ec7cfde09', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f20c990e728627c483952853f50ca01b6468566a', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f42b25117ff710d6a65e414c64f7d5803ab58a2', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4f6348ea6318dbb15e5499c9bff6cac22c79448', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c9b6e472c4dfc419bbacfbba5fc1511c6c5c6f0', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5463dffe50da65736415c47dde6db745cf284ff', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7944a6b6f51ea4143346fe8c4712e68c3b9e71', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afda5c9e04a1570ce8590d2702602f5a43f0bc9', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ed2a7711df56ed68274d2a6f37905df0f5619e2', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22546734d0b4aee12e74aba9edd17fb8f484fae7', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5f1070d2a3f59c5d5fe5ce3bfb0d39559d6c925', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be1eae23fa7f033bfa4ff857df6c7fbcf75476db', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252e7ac9b7babea900782bcef53285a6ed0df404', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a60893eb79642fe4bf4fe1823600780b4e4c62ea', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82b3b69ada67baf9f4f5f9806bf749996e99409', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e401d3ff52c8d126e95ee0d85a2006b02b239f76', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730c5dc4d1644532dbd8867208a7fb84771f9cc0', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b9693a0f69dca5997bf9e749ed541d362c463e1', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc459367bb01b3c71eaa63829c5882c16749eb9c', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee0950959a843f69025a92fbc1b3d457fa79e23', 'committer_username': 'tinajohnson', 'committer_name': 'Tina Johnson', 'committer_email': 'tinajohnson.1234@gmail.com', 'commit_date': datetime.datetime(2013, 4, 28, 9, 46, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2c20e8bdbf1d4bcc86a5cc6703b3a0eca453df', 'committer_username': 'tinajohnson', 'committer_name': 'Tina Johnson', 'committer_email': 'tinajohnson.1234@gmail.com', 'commit_date': datetime.datetime(2013, 4, 28, 9, 46, 41, tzinfo=datetime.timezone.utc)}]",Beleswar Prasad Padhi,76038732,beleswarprasad@gmail.com,User,,29,,18,71
1291502767,Add support for WHOIS command on IRCListener,"This PR fixes #35 

**Cause of Bug**
The reason of this `unknown command` bug is because there is no specific function in `fakenet/listeners/IRCListener.py` that deals with the `WHOIS` command. Therefore, whenever the `WHOIS` command is executed, the current code executes the `irc_DEFAULT` function in `fakenet/listeners/IRCListener.py`, that displays the `unknown command` message as output.

**Fix**
I went ahead and defined a function with the name `irc_WHOIS` which deals with the `WHOIS` command. I analyzed the ideal output of `WHOIS` command (executed without fakenet running), and then added the respective fields in the `irc_WHOIS` function to replicate the same output.

![idealWHOISOutput](https://drive.google.com/uc?export=view&id=10QhN5keQs3Sql7ZJ--WK2QV4cz28qbnw)


**Before**
` 27/03/23 01:45:34 PM [         IRCServer] Client issued an unknown command WHOIS IEUser`

**After**
![AfterChanges](https://drive.google.com/uc?export=view&id=1d_DWs9rVVHB-_OkCCF06T5O9ZajDOMkN)

**Note**
While the output is working as expected, there is one side effect. The WHOIS command's output keeps on printing in a forever loop at the client side, even though it is executed once. While I am trying to work on this issue and fix it, I would love any help to proceed in the right direction. Thank you! :)",False,159,https://api.github.com/repos/mandiant/flare-fakenet-ng/pulls/159,https://github.com/mandiant/flare-fakenet-ng/pull/159,open,28,1,2,4,6,4,0,0,[],2023-03-27 14:48:50+00:00,,0.0,,"[{'comment_id': 1153993740, 'comment_body': 'what reference did you use for the reply format of WHOIS command?', 'comment_created': datetime.datetime(2023, 3, 31, 4, 16, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1155237498, 'comment_body': 'As of now, I have taken it from the original `WHOIS` command output from the `irssi` client. The output is attached above as an image(1st image in PR). The reply format has to be refined further to match the exact response.', 'comment_created': datetime.datetime(2023, 4, 2, 4, 29, 46, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1157524633, 'comment_body': 'We want the format to be the standard format used by WHOIS command replies. Refer https://www.ietf.org/rfc/rfc1459.txt.', 'comment_created': datetime.datetime(2023, 4, 4, 16, 53, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1157531822, 'comment_body': 'Got it, will follow up with the ideal standard', 'comment_created': datetime.datetime(2023, 4, 4, 17, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}]","[{'commit_sha': '6145d85fd21ee8839de7177ce0488e658f6fd548', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b690d45b3d2cf11538792fca7b07bf2f0305e0e4', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bde6148171f1c073266533e49cfa9683b6d04d5e', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2de78991e8dfd06609d12872f470d0bf75f5d6db', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}]",Beleswar Prasad Padhi,76038732,beleswarprasad@gmail.com,User,,29,,18,71
1370567127,GSoC'23 Project: Implement an Interactive GUI for presenting Network-Based Indicators summary,"# Idea
Currently, FakeNet-NG displays its output by either printing it to the console or writing it to a log file. However, Malware with a lot of activity can generate long FakeNet logs. To save analysts from having to read or grep long FakeNet logs, this project aims in providing a user-friendly interface for viewing the output of FakeNet-NG in a more organized and detailed manner. 

# Implementation
We started by identifying the potential attributes contributing to network-based indicators from each listener. We collected NBIs from each listener in a dictionary and passed it to the diverter component through a callback method (`collect_nbi`). The diverter component then assembled NBIs from all listeners into a central dictionary structure, along with additional details such as process information, protocol, destination IP, port, etc. We developed a `template.html` file containing placeholders for NBIs, CSS, and JS code for the UI. After each FakeNet session termination, this template file is read, and actual NBI values from the session are inserted into the placeholders. The resulting report is saved with a timestamp in the main working directory of FakeNet. Users can open this HTML file in any browser to review the NBI summary.

# Features
* We've introduced an interactive and responsive UI that presents NBIs in a user-friendly format. This UI is equipped with various functionalities such as filtering, selection, and copying, making it significantly easier for analysts to comprehend malware behavior. Fun fact: The copied format of NBIs aligns seamlessly with Flare Malware reports, simplifying the process even further!
* The UI incorporates NBIs from every listener, supporting both single-host and multi-host operations.
* Our codebase now enhances modularity, enabling future contributors to effortlessly support the representation of NBIs from new listeners within the UI. All that's required is a simple method call (collect_nbi) in the listener to the diverter. This avoids any concerns about integrating new NBIs directly into the UI itself.
* To enhance data abstraction, we've introduced the `DiverterWrapper` class. This class facilitates controlled access of the diverter to listeners, aligning with object-oriented programming practices. It offers specific methods from the diverter that listeners require access to, without exposing the entire diverter for improved coding practices.

# Steps to verify

- [ ] Install FakeNet-NG on your system.
- [ ] Start a FakeNet session.
- [ ] Execute a benign script or malware to generate traffic against the FakeNet session.
- [ ] Stop the FakeNet session by pressing `CTRL+C`.
- [ ] Open the generated HTML report in a browser and explore the available options.",True,163,https://api.github.com/repos/mandiant/flare-fakenet-ng/pulls/163,https://github.com/mandiant/flare-fakenet-ng/pull/163,closed,1338,13,14,42,4,44,0,0,[],2023-05-30 14:20:41+00:00,2024-03-29 16:22:09+00:00,26272888.0,"304 days, 2:01:28","[{'comment_id': 1214630022, 'comment_body': 'consider using [str.partition](https://docs.python.org/3/library/stdtypes.html#str.partition) when you want to split something once', 'comment_created': datetime.datetime(2023, 6, 2, 17, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'williballenthin', 'type': 'User'}, {'comment_id': 1220420855, 'comment_body': 'Thanks for the suggestion! Worked upon that :)', 'comment_created': datetime.datetime(2023, 6, 6, 21, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1230078006, 'comment_body': ""let's return immediately if no session is found. Something like this:\r\n```\r\nsession = self.diverter.sessions.get(self.pkt.sport)\r\nif session is None:\r\n    return True\r\nelse:\r\n    return not (session[:2] == (self.pkt.dst_ip, self.pkt.dport))\r\n```"", 'comment_created': datetime.datetime(2023, 6, 14, 19, 33, 4, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1230176847, 'comment_body': 'Use snake case instead of camelCase or rename it to just self.nbis.', 'comment_created': datetime.datetime(2023, 6, 14, 21, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1230183854, 'comment_body': ""I know there are few inconsistencies with naming conventions used in the code but let's stick to camelCase for methods"", 'comment_created': datetime.datetime(2023, 6, 14, 21, 22, 57, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1230188078, 'comment_body': ""you don't need to specify .keys() when using the `in` operator."", 'comment_created': datetime.datetime(2023, 6, 14, 21, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1230201379, 'comment_body': 'Appending header values from different requests to same header key is not ideal as it will be difficult to keep track of which header belonged to which request later on when we display individual requests in the UI. Refer to the project plan document for more notes.', 'comment_created': datetime.datetime(2023, 6, 14, 21, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244605536, 'comment_body': 'do we need a separate dictionary for storing is_ssl_encrypted?', 'comment_created': datetime.datetime(2023, 6, 28, 2, 59, 26, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244633018, 'comment_body': 'listener_port is a bit confusing, better to use `sport`. Thinking along the same lines, `application_layer_proto` would be more readable', 'comment_created': datetime.datetime(2023, 6, 28, 3, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244633950, 'comment_body': 'a traditional if else block would make the code more readable here', 'comment_created': datetime.datetime(2023, 6, 28, 3, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244641164, 'comment_body': ""don't need the parenthesis here"", 'comment_created': datetime.datetime(2023, 6, 28, 4, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244647497, 'comment_body': ""the `UseSSL` config doesn't use boolean but either 'Yes' or 'No'. We need to be consistent here"", 'comment_created': datetime.datetime(2023, 6, 28, 4, 17, 47, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1244654586, 'comment_body': 'you could also move this up to the above `if proxied_nbi:` block', 'comment_created': datetime.datetime(2023, 6, 28, 4, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tinajn', 'type': 'User'}, {'comment_id': 1245672908, 'comment_body': 'The thought behind a separate dictionary was for better readability. But we could put the `is_ssl_encrypted` and `orig_sport` as a tuple as the dictionary value. Is this a better way?\r\n\r\n`self.proxy_orig_sports[proxy_sport] = (orig_sport, is_ssl_encrypted)`', 'comment_created': datetime.datetime(2023, 6, 28, 19, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1245676522, 'comment_body': '> you could also move this up to the above `if proxied_nbi:` block\r\n\r\nSorry, not clear which code you are pointing to, could you mention the lines please?', 'comment_created': datetime.datetime(2023, 6, 28, 19, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1246536698, 'comment_body': 'Got the point now!', 'comment_created': datetime.datetime(2023, 6, 29, 12, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1273994547, 'comment_body': ""let's use (proto, proxy_sport) as key here."", 'comment_created': datetime.datetime(2023, 7, 25, 19, 31, 2, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274067096, 'comment_body': 'indent this line. We try to maintain a max line length of 80 characters (a little over 80 characters is fine if you can indent the line better).\r\n```\r\nis_ssl_encrypted = self.is_proxied_pkt_ssl_encrypted.get((orig_sport,\r\n                                                         sport))', 'comment_created': datetime.datetime(2023, 7, 25, 20, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274067529, 'comment_body': '```suggestion\r\n        _, _, pid, comm, orig_dport, transport_layer_proto = self.sessions.get(orig_sport)\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 20, 14, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274074752, 'comment_body': '`is` operator is preferred for checking if something is `None`', 'comment_created': datetime.datetime(2023, 7, 25, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274076330, 'comment_body': '```suggestion\r\n            self.remote_pid_counter += 1\r\n```', 'comment_created': datetime.datetime(2023, 7, 25, 20, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274091363, 'comment_body': ""```suggestion\r\n        nbi_entry = {\r\n            'transport_layer_proto': transport_layer_proto,\r\n            'sport': orig_sport,\r\n            'dport': orig_dport,\r\n            'is_ssl_encrypted': is_ssl_encrypted,\r\n            'nbi': nbi\r\n            }\r\n```"", 'comment_created': datetime.datetime(2023, 7, 25, 20, 32, 37, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274117954, 'comment_body': 'this line can be indented better\r\n```\r\nself.nbi.setdefault((pid, comm), {}).setdefault(application_layer_proto,\r\n                                                []).append(nbi_entry)', 'comment_created': datetime.datetime(2023, 7, 25, 21, 2, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274120941, 'comment_body': ""keeping the UI in mind, it will be useful to store fakenet's mode of operation - singlehost or multihost in self.nbi."", 'comment_created': datetime.datetime(2023, 7, 25, 21, 6, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274197153, 'comment_body': 'instead of making these changes to SocketWithHexdumpRecv class, we could do `hexdump_table(data)` and `collect_nbi` right after self.request.recv(1024) in the `handle` method.', 'comment_created': datetime.datetime(2023, 7, 25, 22, 57, 36, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274198323, 'comment_body': ""I would leave application layer protocol empty here instead of using 'Raw'. We will need to make the necessary changes in `logNbi()` to use the transport layer protocol as key in `self.nbi` dictionary when application layer protocol is empty. "", 'comment_created': datetime.datetime(2023, 7, 25, 23, 0, 5, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1274200432, 'comment_body': 'nitpicking here but self.nbi**s** maybe more suitable', 'comment_created': datetime.datetime(2023, 7, 25, 23, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305087250, 'comment_body': 'this line should come before line 188. We need the filename before we do os.path.join()', 'comment_created': datetime.datetime(2023, 8, 25, 3, 20, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305091814, 'comment_body': 'this line should come before line 206', 'comment_created': datetime.datetime(2023, 8, 25, 3, 32, 40, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305094153, 'comment_body': 'We are interested in the virtual file path used by AbstractedFS class. In order to get the actual path seen by FakeNet, we need something like `AbstractedFS.fs2ftp(self, path)` (need to remove the forward slash as well from the filename returned)', 'comment_created': datetime.datetime(2023, 8, 25, 3, 38, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305094749, 'comment_body': 'same as `DELETE` command, need to get the actual directory name and not the virtual path.', 'comment_created': datetime.datetime(2023, 8, 25, 3, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305149421, 'comment_body': 'not an error from your side, but move cmd.decode(""utf-8"").upper() to the line above so that line 135 and 136 would look like:\r\n```\r\ncmd = cmd.decode(""utf-8"").upper()\r\nhandler = getattr(self, \'pop_%s\' % (cmd), self.pop_DEFAULT)\r\n```', 'comment_created': datetime.datetime(2023, 8, 25, 5, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1305157413, 'comment_body': ""let's use 'command' instead of 'cmd'"", 'comment_created': datetime.datetime(2023, 8, 25, 5, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1313521666, 'comment_body': 'indent this line', 'comment_created': datetime.datetime(2023, 9, 1, 21, 3, 34, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1313521860, 'comment_body': 'indent this line', 'comment_created': datetime.datetime(2023, 9, 1, 21, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319318666, 'comment_body': ""any reason to use all caps for this variable name? Seeing that we only use this variable within this function, I don't think we need all caps (like how we would use for a constant) but let me know."", 'comment_created': datetime.datetime(2023, 9, 8, 3, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319941867, 'comment_body': ""There's no data portion to an TFTP ACK packet. The packet is 4 bytes long - 2 bytes for opcode and 2 bytes for block number."", 'comment_created': datetime.datetime(2023, 9, 8, 14, 24, 56, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319965422, 'comment_body': 'To stop FakeNet-NG and save the generated PCAP file and HTML report to disk, press `CTRL-C`:', 'comment_created': datetime.datetime(2023, 9, 8, 14, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319972891, 'comment_body': 'With each session of FakeNet-NG, an HTML report containing the Network-Based Indicators (NBIs) captured throughout the session is generated. Upon termination of FakeNet by pressing `CTRL-C`, this HTML file will be saved to the root directory of FakeNet. A user can review the NBIs by viewing this HTML file in a browser such as Chrome or Firefox.', 'comment_created': datetime.datetime(2023, 9, 8, 14, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319997762, 'comment_body': 'I think we can change ""making malware report generation easier"" to ""making network analysis easier""', 'comment_created': datetime.datetime(2023, 9, 8, 15, 11, 51, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1319998880, 'comment_body': 'categorizes them by the **application layer or transport layer protocol** they use', 'comment_created': datetime.datetime(2023, 9, 8, 15, 12, 58, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1320003014, 'comment_body': 'This cell provides extra information about each NBI request such as the transport layer protocol used, destination IP, port, and SSL encryption.', 'comment_created': datetime.datetime(2023, 9, 8, 15, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'tinajohnson', 'type': 'User'}, {'comment_id': 1320692851, 'comment_body': 'The thought was to keep TEMPLATE_FILE as constant so that it could be used in other methods like ones to generate the communication graph. But currently, it is used in just one method. So, we will use normal naming convention. Thanks for pointing out :)', 'comment_created': datetime.datetime(2023, 9, 10, 5, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': '3V3RYONE', 'type': 'User'}, {'comment_id': 1355440633, 'comment_body': 'I would like us to document (via comments) why there must exist both a run() and a connect() method.\r\n\r\nYour astute mentor reminded me that we documented this in our discussion notes:\r\n\r\n> The ThreadedTCPClientSocket (which is really a thread!) would implement a `connect()` method that the ThreadedTCPRequestHandler object could use to get the source port and then call a Diverter-supplied callback informing the diverter of the mapping between the old source port and the proxy source port.\r\n\r\nMaintainers would benefit from seeing this represented in the comments for connect() along with commentary on the run() method indicating the expectation that connect() has already been called.\r\n', 'comment_created': datetime.datetime(2023, 10, 11, 17, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'strictlymike', 'type': 'User'}]","[{'commit_sha': '2f5119a167d103243108c2eff384ec8f58ef5d5d', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81f9fe53772c57610ee68ee7fd475e8106f39401', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77205df33c0e9a66441a84a6e26d0d1e1daea87a', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dcad9dc9eb2c0789da0e1ce929d1f08bebeea02', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4b22a799a61c36ef59d9e3b180c50e805d6e9d7', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1638d516298699264e9abb0a171b85d7bc398f25', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77945b9e630c7011acbcf8061f28d200791ce01b', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '770a6ee58e3d4219b1650f55c3cec28770220652', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24f1c542df6f0cd477d0d19f169b5bf6833a3cff', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3d63b1d238c35aff3903e24a6a290c7a5a2adac', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73c72de646b7c80152f747cb6da8d068b8ba8a99', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cd483c79fd87493e0cd38cbbca4032c39800d50', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4be3fb5cafdb54235be3edec6a5f410700a2c08', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb32fa272090b86562a27e10cd170bb76ec05e8', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d2b1870cb78837c9196593ccf00e903813e42a7', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc9e6a8a9a693b461c1b9a633cbf44e4544d3c55', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca9f992d9c2bf228afbeb1bbd11d26ef2c47b7ad', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe24a6d98c507dbc2d42df4bc8fcf774ff491227', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a63b7d4d31d485ec73a15d75c3d48c975cc471e', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59964a8ccad085abe2cb291e683cd6995df79eef', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a55b1503e9d3a1a94bee8bb68bd801e07ec2c50', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fff6b3d74cde47a6b8f75f19de0ed7ec7cfde09', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f20c990e728627c483952853f50ca01b6468566a', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f42b25117ff710d6a65e414c64f7d5803ab58a2', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4f6348ea6318dbb15e5499c9bff6cac22c79448', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c9b6e472c4dfc419bbacfbba5fc1511c6c5c6f0', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5463dffe50da65736415c47dde6db745cf284ff', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b7944a6b6f51ea4143346fe8c4712e68c3b9e71', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afda5c9e04a1570ce8590d2702602f5a43f0bc9', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ed2a7711df56ed68274d2a6f37905df0f5619e2', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22546734d0b4aee12e74aba9edd17fb8f484fae7', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5f1070d2a3f59c5d5fe5ce3bfb0d39559d6c925', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be1eae23fa7f033bfa4ff857df6c7fbcf75476db', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '252e7ac9b7babea900782bcef53285a6ed0df404', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a60893eb79642fe4bf4fe1823600780b4e4c62ea', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c82b3b69ada67baf9f4f5f9806bf749996e99409', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e401d3ff52c8d126e95ee0d85a2006b02b239f76', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '730c5dc4d1644532dbd8867208a7fb84771f9cc0', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b9693a0f69dca5997bf9e749ed541d362c463e1', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc459367bb01b3c71eaa63829c5882c16749eb9c', 'committer_username': '3V3RYONE', 'committer_name': 'Beleswar Prasad Padhi', 'committer_email': 'beleswarprasad@gmail.com', 'commit_date': datetime.datetime(2020, 12, 15, 8, 54, 30, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ee0950959a843f69025a92fbc1b3d457fa79e23', 'committer_username': 'tinajohnson', 'committer_name': 'Tina Johnson', 'committer_email': 'tinajohnson.1234@gmail.com', 'commit_date': datetime.datetime(2013, 4, 28, 9, 46, 41, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a2c20e8bdbf1d4bcc86a5cc6703b3a0eca453df', 'committer_username': 'tinajohnson', 'committer_name': 'Tina Johnson', 'committer_email': 'tinajohnson.1234@gmail.com', 'commit_date': datetime.datetime(2013, 4, 28, 9, 46, 41, tzinfo=datetime.timezone.utc)}]",Beleswar Prasad Padhi,76038732,beleswarprasad@gmail.com,User,,29,,18,71

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
62087069,flare-fakenet-ng,mandiant/flare-fakenet-ng,Python,355,1752,112,14,304,79,39,21,"[{'id': 1370567127, 'number': 163, 'closed': datetime.datetime(2024, 3, 29, 16, 22, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 30, 14, 20, 41, tzinfo=datetime.timezone.utc), 'time_taken': 26272888.0, 'time_delta': '304 days, 2:01:28', 'additions': 1338, 'deletions': 13, 'state': 'closed'}, {'id': 1291502767, 'number': 159, 'closed': None, 'created': datetime.datetime(2023, 3, 27, 14, 48, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 28, 'deletions': 1, 'state': 'open'}]"
