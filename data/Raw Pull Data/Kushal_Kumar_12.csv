pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
677897026,fix: rewrite transformer(CiceroMarkToOOXML) logic to handle nesting - #397,"Signed-off-by: k-kumar-01 <kushalkumargupta4@gmail.com>

### Changes
<!--- More detailed and granular description of changes -->
<!--- These should likely be gathered from commit message summaries -->

- Remove old transformer
- Rules: EMPHASIS, TEXT, TEXT_STYLES, TEXT_WRAPPER, PARAGRAPH_WRAPPER, PARAGRAPH_PROPERTIES, STRONG, HEADING
- Tests: Check only for text-and-emphasis using if

### Author Checklist
- [x] Ensure you provide a [DCO sign-off](https://github.com/probot/dco#how-it-works) for your commits using the `--signoff` option of git commit.
- [x] Vital features and changes captured in unit and/or integration tests
- [x] Commits messages follow [AP format](https://github.com/accordproject/techdocs/blob/master/DEVELOPERS.md#commit-message-format)
- [ ] Extend the documentation, if necessary
- [ ] Merging to `master` from `fork:branchname`",True,418,https://api.github.com/repos/accordproject/markdown-transform/pulls/418,https://github.com/accordproject/markdown-transform/pull/418,closed,343,127,4,8,18,18,0,0,[],2021-06-25 13:02:01+00:00,2021-06-30 10:06:13+00:00,421452.0,"4 days, 21:04:12","[{'comment_id': 659186704, 'comment_body': 'Skip tests using [`xit`](https://stackoverflow.com/a/32724129/11751642). Or mocha also has `skip()` API. Just check it out.', 'comment_created': datetime.datetime(2021, 6, 26, 16, 14, 2, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659190245, 'comment_body': '@algomaster99 \r\nI have tested it for the current test(text-and-emphasis.json) which the earlier transformer does and it passed. \r\nAlso, for doing nesting, it would require addition of some more code so I will push the corresponding changes.\r\nThe changes will be as\r\n1. `heading transformer`\r\n2. `variable transformer`\r\n3. `softbreak transformer`\r\n\r\nThese changes will ensure that we have completed the rewriting of transformer.', 'comment_created': datetime.datetime(2021, 6, 26, 16, 35, 3, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 659190504, 'comment_body': 'You can do the rewriting in one PR. Just make sure the existing tests pass and add more as well. \n\nIf rewriting somehow is not able to pass the existing test, you may skip it and deal with it in other PR.', 'comment_created': datetime.datetime(2021, 6, 26, 16, 37, 38, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659191070, 'comment_body': 'Yeah I intend to do so.', 'comment_created': datetime.datetime(2021, 6, 26, 16, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 659340686, 'comment_body': 'Both these are constants. JS has special convention to declare them. `I_AM_CONSTANT`.', 'comment_created': datetime.datetime(2021, 6, 27, 15, 47, 55, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659341544, 'comment_body': ""Use spread operator. It's faster."", 'comment_created': datetime.datetime(2021, 6, 27, 15, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659342100, 'comment_body': ""Place this in the vicinity of the heading rule as it's only used there."", 'comment_created': datetime.datetime(2021, 6, 27, 15, 59, 36, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659342466, 'comment_body': ""This is supposed to be for heading, right? Let's follow CiceroMark conventions only as levels of a paragraph will be obscure for others."", 'comment_created': datetime.datetime(2021, 6, 27, 16, 2, 13, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659342628, 'comment_body': '`Declares the OOXML, counter, and tags variable.` Notice the comma after ""counter"".', 'comment_created': datetime.datetime(2021, 6, 27, 16, 3, 33, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659355592, 'comment_body': ""@algomaster99 Yes this is for heading. \r\n> Let's follow CiceroMark conventions only as levels of a paragraph will be obscure for others.\r\n\r\nI did not understand this part."", 'comment_created': datetime.datetime(2021, 6, 27, 17, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 659355977, 'comment_body': 'These are not paragraph properties per se. They are heading properties so `PARAGRAPH_PROPERTIES_RULE` is not a good name.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 0, 46, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659356237, 'comment_body': 'Will `Heading_Rule` be good? ', 'comment_created': datetime.datetime(2021, 6, 27, 18, 2, 47, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 659356485, 'comment_body': 'These are heading properties, right? You can add the properties too.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659358849, 'comment_body': '@algomaster99 \r\nJust saw a thing regarding these rules. The test coverage shows that they are not being used anywhere in the code. Despite this our document using ooxml is working fine. So should I remove it or fix it or let it remain as it is currently?', 'comment_created': datetime.datetime(2021, 6, 27, 18, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 659359166, 'comment_body': 'If you would have deleted the test for heading, then this would be possible.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659361025, 'comment_body': '@algomaster99 \r\nThe test for heading are not deleted.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 45, 30, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 659361200, 'comment_body': 'Look at it once then. This block of code must be executed as well test for all types of headings.', 'comment_created': datetime.datetime(2021, 6, 27, 18, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 659526536, 'comment_body': '@algomaster99 \r\nYeah it was being executed. I pointed out the wrong code. Apologies.', 'comment_created': datetime.datetime(2021, 6, 28, 6, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}]","[{'commit_sha': '7553715fe35d0b1f563210e8213117969ea17307', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c3224baa0aad67fb4dcac426e0c30daa481ede4', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23165807e86da7c6627ea8bb81eb0096217f6c1c', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad2b721a7b9f69d4101dab1a28b821564a8a6694', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41508739c518123dade86d71a73de8ab9742272d', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef9a7fc1ed84213163f30832a8d196cdf45b5685', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c76dc1019d2f3d874b4c1e856b0c5863faedd1a', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68bef07ee43b2f6ec33bf0cb14fadbca172563c6', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}]",Kushal Kumar,59891164,,User,,95,,41,68
680733047,fix: rewrite transformer(OOXML->CiceroMark),"Signed-off-by: K-Kumar-01 <kushalkumargupta4@gmail.com>

This PR deals with rewriting the current OOXML transformer so that it supports nesting.

### Changes 
Major changes will be as follows:
- Use DFS to traverse nodes
- Generate node using the properties stored.
- compare adjacent nodes for common properties(first n) and nest the second one into the common depth.

### Author Checklist
- [x] Ensure you provide a [DCO sign-off](https://github.com/probot/dco#how-it-works) for your commits using the `--signoff` option of git commit.
- [x] Vital features and changes captured in unit and/or integration tests
- [x] Commits messages follow [AP format](https://github.com/accordproject/techdocs/blob/master/DEVELOPERS.md#commit-message-format)
- [ ] Extend the documentation, if necessary
- [ ] Merging to `master` from `fork:branchname`",True,421,https://api.github.com/repos/accordproject/markdown-transform/pulls/421,https://github.com/accordproject/markdown-transform/pull/421,closed,203,156,7,15,14,48,0,0,[],2021-06-30 10:28:16+00:00,2021-07-05 14:45:24+00:00,447428.0,"5 days, 4:17:08","[{'comment_id': 663376287, 'comment_body': 'I can infer from the method name that you are constructing a CiceroMark node. You should rename this variable accordingly.', 'comment_created': datetime.datetime(2021, 7, 3, 15, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663376863, 'comment_body': 'What exactly `i` is? Could you rename it so that it makes more sense?', 'comment_created': datetime.datetime(2021, 7, 3, 15, 22, 2, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663376939, 'comment_body': 'I think a better name would be `nodePropertyIndex` instead of `i`.', 'comment_created': datetime.datetime(2021, 7, 3, 15, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663377286, 'comment_body': ""I am assuming you're getting `rootNode` directly from the OOXML (converted to JSON by `xml-js`). Don't modify it because we don't want any sideffects."", 'comment_created': datetime.datetime(2021, 7, 3, 15, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663377421, 'comment_body': 'Could you explain why are you calling this method twice in the same block? Just wanted to understand the functioning.', 'comment_created': datetime.datetime(2021, 7, 3, 15, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663377532, 'comment_body': '`commonPropertiesLength` would be more appropriate I think.', 'comment_created': datetime.datetime(2021, 7, 3, 15, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663378288, 'comment_body': ""The method's purpose is to get the properties of a node. A better name would be `fetchFormattingProperties`."", 'comment_created': datetime.datetime(2021, 7, 3, 15, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663379614, 'comment_body': '`construtCiceroMarkNodeJSON` and `constructNodes` purposes are not clear from just reading the names of the methods or even docstrings. You have even mentioned `or block CiceroMark Node` in docstrings of `constructNodes` so why was `construtCiceroMarkNodeJSON` necessary in the first place?\r\n\r\nPerusing your code made a little clearer that former creates atomic nodes like text, softbreak, etc. While the latter creates blocks for heading paragraph. So just write their method names properly **without** relying too much on the docstrings.', 'comment_created': datetime.datetime(2021, 7, 3, 15, 49, 27, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663379665, 'comment_body': 'The spelling of ""construct"" is wrong. I have suggested this before and I will suggest again using an IDE or a VSCode plugin for spell checkers.', 'comment_created': datetime.datetime(2021, 7, 3, 15, 50, 15, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663379910, 'comment_body': ""If the value of the variable is `''`, you transformer will return `'Not provided`. So I think you can omit the `or` condition.\r\n\r\nMoreover, I don't think so a variable entity would be without these attributes ever so you should omit all the `or` conditions. However, if this was possible `CiceroMark` should have defined a default _empty_ value for each of these attributes."", 'comment_created': datetime.datetime(2021, 7, 3, 15, 52, 28, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663381727, 'comment_body': 'The `rootNode` here is the argument passed and not the one we get from a document which is converted via `xml-js`. The rootNode here is for paragraph heading or any other block node \r\n', 'comment_created': datetime.datetime(2021, 7, 3, 16, 11, 20, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663381867, 'comment_body': '1. Call for the 1st element in `this.JSONXML`.\r\n2. Call for the remaining elements present in the above array using for loop', 'comment_created': datetime.datetime(2021, 7, 3, 16, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663382135, 'comment_body': '> `construtCiceroMarkNodeJSON` and `constructNodes` purposes are not clear from just reading the names of the methods or even docstrings. You have even mentioned `or block CiceroMark Node` in docstrings of `constructNodes` so why was `construtCiceroMarkNodeJSON` necessary in the first place?\r\n> \r\n> Perusing your code made a little clearer that former creates atomic nodes like text, softbreak, etc. While the latter creates blocks for heading paragraph. So just write their method names properly **without** relying too much on the docstrings.\r\n\r\n`construtCiceroMarkNodeJSON`: It creates a text, softbreak or any other inline node\r\n`constructNodes`:This creates all the nodes present in ap paragraph, or heading node.\r\n\r\nThis it the exact use of the above.', 'comment_created': datetime.datetime(2021, 7, 3, 16, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663382551, 'comment_body': ""This was done in the case that maybe a user uses sdt in word first and then tries to convert it in a `ciceroMark`. Although it won't be a variable and I agree here so I will remove this."", 'comment_created': datetime.datetime(2021, 7, 3, 16, 20, 30, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663393047, 'comment_body': 'Look at this comment too.', 'comment_created': datetime.datetime(2021, 7, 3, 18, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663393209, 'comment_body': ""I don't think so you need this check. There won't be any case where any of them is not there if a variable is present."", 'comment_created': datetime.datetime(2021, 7, 3, 18, 12, 34, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663393238, 'comment_body': 'Look at this comment. ', 'comment_created': datetime.datetime(2021, 7, 3, 18, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663393833, 'comment_body': 'Any reason why these are instance variables? Their content would be cleared after each block element is traversed so I think it would be better to pass such elements as parameters to functions where you need them.', 'comment_created': datetime.datetime(2021, 7, 3, 18, 19, 14, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663394696, 'comment_body': 'Could you be cleared what `j` means? Please spend some time naming your variables.', 'comment_created': datetime.datetime(2021, 7, 3, 18, 28, 29, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663395700, 'comment_body': 'There was a case present. This is the reason i used above.', 'comment_created': datetime.datetime(2021, 7, 3, 18, 39, 13, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663395782, 'comment_body': 'I was not able to properly use them in a function that is the solo reason i used them as above.', 'comment_created': datetime.datetime(2021, 7, 3, 18, 40, 28, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663396260, 'comment_body': 'Is this case handled in any test case? If not, please push it.', 'comment_created': datetime.datetime(2021, 7, 3, 18, 45, 39, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663397163, 'comment_body': 'Actually, the test case file is deleted. I will try to recreate a similar test', 'comment_created': datetime.datetime(2021, 7, 3, 18, 54, 55, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663467276, 'comment_body': '@algomaster99 \r\nI updated it to `constructCiceroMarkNode`. Is this also not appropriate?', 'comment_created': datetime.datetime(2021, 7, 4, 8, 24, 40, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663469285, 'comment_body': '@algomaster99 \r\nI have pushed a commit which involves the test for this.', 'comment_created': datetime.datetime(2021, 7, 4, 8, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663532870, 'comment_body': 'I have posted this comment under `let obj = {};`.', 'comment_created': datetime.datetime(2021, 7, 4, 17, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663533326, 'comment_body': '```json\r\n{\r\n  ""$class"": ""org.accordproject.commonmark.Document"",\r\n  ""xmlns"": ""http://commonmark.org/xml/1.0"",\r\n  ""nodes"": [\r\n    {\r\n      ""$class"": ""org.accordproject.commonmark.Heading"",\r\n      ""level"": ""2"",\r\n      ""nodes"": [\r\n        {\r\n          ""$class"": ""org.accordproject.commonmark.Text"",\r\n          ""text"": ""Try TemplateMark""\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      ""$class"": ""org.accordproject.commonmark.Paragraph"",\r\n      ""nodes"": [\r\n        {\r\n          ""$class"": ""org.accordproject.commonmark.Text"",\r\n          ""text"": ""Just trying ""\r\n        },\r\n        {\r\n          ""$class"": ""org.accordproject.commonmark.Strong"",\r\n          ""nodes"": [\r\n            {\r\n              ""$class"": ""org.accordproject.commonmark.Text"",\r\n              ""text"": ""few things ""\r\n            },\r\n            {\r\n              ""$class"": ""org.accordproject.commonmark.Emph"",\r\n              ""nodes"": [\r\n                {\r\n                  ""$class"": ""org.accordproject.commonmark.Text"",\r\n                  ""text"": ""here""\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          ""$class"": ""org.accordproject.commonmark.Softbreak""\r\n        },\r\n        {\r\n          ""$class"": ""org.accordproject.commonmark.Strong"",\r\n          ""nodes"": [\r\n            {\r\n              ""$class"": ""org.accordproject.commonmark.Text"",\r\n              ""text"": ""hello""\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          ""$class"": ""org.accordproject.commonmark.Text"",\r\n          ""text"": "" ""\r\n        },\r\n        {\r\n          ""$class"": ""org.accordproject.commonmark.Strong"",\r\n          ""nodes"": [\r\n            {\r\n              ""$class"": ""org.accordproject.commonmark.Text"",\r\n              ""text"": ""there""\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThis is the test case you pushed but I cannot see any variable entity. So your program shouldn\'t even enter this `if` branch.', 'comment_created': datetime.datetime(2021, 7, 4, 17, 21, 49, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663539907, 'comment_body': 'To further prove my point, check t[his step](https://github.com/accordproject/markdown-transform/pull/421/checks?check_run_id=2982693335#step:6:1122) out. The `else` branch is not being covered also.', 'comment_created': datetime.datetime(2021, 7, 4, 18, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663539984, 'comment_body': 'This is also not covered by the coverage tool. Either your tests are weak or this is unnecessary.', 'comment_created': datetime.datetime(2021, 7, 4, 18, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663540680, 'comment_body': '@algomaster99 \r\n`else` is not used currently since I am not having more inline elements which may cause this case to be called.', 'comment_created': datetime.datetime(2021, 7, 4, 18, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663542597, 'comment_body': ""Handle it later then. If, suppose, you don't require it later, this branch would dangle in the codebase without any purpose."", 'comment_created': datetime.datetime(2021, 7, 4, 18, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663542773, 'comment_body': 'Is this test doing something different than the test you proposed in #418 ?', 'comment_created': datetime.datetime(2021, 7, 4, 18, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663543483, 'comment_body': '@algomaster99 \r\nit can explain why ternary operator is used in `line 195`.', 'comment_created': datetime.datetime(2021, 7, 4, 18, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663543951, 'comment_body': ""Are you talking about [this line](https://github.com/accordproject/markdown-transform/pull/421/files#diff-f99161f5498dc7c658d94fdc1be57273146a954b6b0eb0359998d748d97cc9f1R195) (`} else if (runTimeProperties.name === 'w:b') {`)? This doesn't have a ternary operator."", 'comment_created': datetime.datetime(2021, 7, 4, 19, 2, 37, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663560939, 'comment_body': ""` nodeInformation.value = runTimeNodes.elements ? runTimeNodes.elements[0].text : ' ';`\r\nThis line. I think it got shifted a bit in the latest commit."", 'comment_created': datetime.datetime(2021, 7, 4, 21, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663568051, 'comment_body': 'Check [this step](https://github.com/accordproject/markdown-transform/runs/2979775064#step:6:1121) out. This is from the build of 00f483038c63756bf377d045a213364227dcfeeb - the commit just before you added this test case. The line which you are mentioning was already covered by the coverage tool so adding this test case is not useful for checking this line. Is it doing something else?', 'comment_created': datetime.datetime(2021, 7, 4, 23, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663569392, 'comment_body': '@algomaster99 \r\nUpdated the test case it now covers above.', 'comment_created': datetime.datetime(2021, 7, 4, 23, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663570324, 'comment_body': 'The test is a special case. It does not increase coverage,  but is there to tell why ternary operator is required and not simply write the expression `runTimeNodes.elements[0].text`', 'comment_created': datetime.datetime(2021, 7, 4, 23, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663801866, 'comment_body': 'Okay, now it makes sense. ', 'comment_created': datetime.datetime(2021, 7, 5, 9, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663847721, 'comment_body': 'Sometimes I wish JSON had comments but anyway, this sounds good.', 'comment_created': datetime.datetime(2021, 7, 5, 11, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663850062, 'comment_body': 'You aren\'t parsing the ""ternary operator in text"". You are parsing text nodes that only have a space. One question here - do you have an idea when MS Word interprets something as space and when as a softbreak? Shouldn\'t this space have been a softbreak instead? If no, could you send the markdown file you parsed this CiceroMark from?', 'comment_created': datetime.datetime(2021, 7, 5, 11, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663853221, 'comment_body': 'The markdown file is \r\n\r\n**strong** _italic_\r\n\r\n![Screenshot from 2021-07-05 16-52-39](https://user-images.githubusercontent.com/59891164/124464139-6f3ab380-ddb1-11eb-8d98-e1233d69ebc8.png)\r\n\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 5, 11, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663854718, 'comment_body': '> You aren\'t parsing the ""ternary operator in text"". You are parsing text nodes that only have a space. One question here - do you have an idea when MS Word interprets something as space and when as a softbreak? Shouldn\'t this space have been a softbreak instead? If no, could you send the markdown file you parsed this CiceroMark from?\r\n\r\nI am not sure but I think `xmljs` might not consider space string as elements. Otherwise, it won\'t throw `cannot read property 0 of undefined`(AFAIR).', 'comment_created': datetime.datetime(2021, 7, 5, 11, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663855978, 'comment_body': '> You aren\'t parsing the ""ternary operator in text"". You are parsing text nodes that only have a space.\r\n\r\nSaid this with respect to the file name of the test case.', 'comment_created': datetime.datetime(2021, 7, 5, 11, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663858630, 'comment_body': ""Yeah, I got that. I was just explaining the reason for the space thing which might be due to `xmljs`. I will rename the file.\r\nI mistakenly quoted the complete statement instead of the line\r\n>One question here - do you have an idea when MS Word interprets something as space and when as a softbreak? Shouldn't this space have been a softbreak instead? "", 'comment_created': datetime.datetime(2021, 7, 5, 11, 30, 44, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663859227, 'comment_body': ""> I am not sure but I think xmljs might not consider space string as elements. Otherwise, it won't throw cannot read property 0 of undefined(AFAIR).\r\n\r\nI don't think so XMLJS is screwing up here. It's the template mark dingus because it should have interpreted that space as softbreak.\r\n\r\nAnyway, if there are cases like this, then it makes sense to have that ternary operator."", 'comment_created': datetime.datetime(2021, 7, 5, 11, 31, 43, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663863564, 'comment_body': '@algomaster99 \r\nMade the push. Is the current name correct?', 'comment_created': datetime.datetime(2021, 7, 5, 11, 39, 20, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 663869763, 'comment_body': 'Sounds good.', 'comment_created': datetime.datetime(2021, 7, 5, 11, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}]","[{'commit_sha': 'e1bde01b113e97886ed5b749df9441a8153f7b3c', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b3c6a3fd813139bdd937ec0455f342376960c70', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3cf16d6549b10c52990f4c8bc02898860936588', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3fe1babdadfdd8b0d97f03a983239e6f6631da6', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56342b1d595b056c89d8b45fc6492facbdf3be6', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93ce48d9a1d2a61f11d2993b34eb4e911023802b', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb2b5c4926f7bc8fbe573ddc623498e65ed33e9a', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9d8f74b3ef56bd5b20353dbe768de4dfb7af9da', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '129eb838ea9ba22b9375a42257934935ee11297f', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00f483038c63756bf377d045a213364227dcfeeb', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31d25a9ae2d2710a52235f642e4acafaa14754b8', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e8b88f6c34f8a573fe7ff49848cd9cf63c4cc1a', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da9528d91c5f3e4d150fd2da3f54134445421ea3', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a712e45676ee909f822924b8d191aa19deb1317', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '660ee69f5daf8c61b17394794acdcbe20cf64b09', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}]",Kushal Kumar,59891164,,User,,95,,41,68
683155012,feat(markdown-transform): add transformation CiceroMark<->OOXML,"Signed-off-by: K-Kumar-01 <kushalkumargupta4@gmail.com>

<!--- Provide a formatted commit message describing this PR in the Title above -->
<!--- See our DEVELOPERS guide below: -->
<!--- https://github.com/accordproject/techdocs/blob/master/DEVELOPERS.md#commit-message-format -->

<!--- Provide an overall summary of the pull request -->
Adds the transformation `CiceroMark<->OOXML` in the transformation graph.

### Changes
<!--- More detailed and granular description of changes -->
<!--- These should likely be gathered from commit message summaries -->
-  Add the transformer to convert `OOXML->CiceroMark`
-  Add the transformer to convert `CiceroMark->OOXML`.

### Author Checklist
- [x] Ensure you provide a [DCO sign-off](https://github.com/probot/dco#how-it-works) for your commits using the `--signoff` option of git commit.
- [ ] Vital features and changes captured in unit and/or integration tests
- [x] Commits messages follow [AP format](https://github.com/accordproject/techdocs/blob/master/DEVELOPERS.md#commit-message-format)
- [ ] Extend the documentation, if necessary
- [ ] Merging to `master` from `fork:branchname`",True,424,https://api.github.com/repos/accordproject/markdown-transform/pulls/424,https://github.com/accordproject/markdown-transform/pull/424,closed,1482,7,16,10,17,36,0,0,[],2021-07-04 11:04:41+00:00,2021-07-30 10:01:49+00:00,2242628.0,"25 days, 22:57:08","[{'comment_id': 663535515, 'comment_body': ""It is not binary. It should be utf-8 only. If you read the output after executing `./packages/markdown-cli/index.js transform --from ciceromark_parsed --to ooxml --input input.json`, you will just get `<binary data>` in the console. Moreover, you can even read and understand what's written in the file so `binary` makes no sense here."", 'comment_created': datetime.datetime(2021, 7, 4, 17, 41, 21, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663538293, 'comment_body': 'This would throw an error because `toCiceroMark` is not a static method.', 'comment_created': datetime.datetime(2021, 7, 4, 18, 8, 42, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 663917239, 'comment_body': 'Please follow the same naming convention as the other transformers. The name of the class is the transformation, while the methods indicate what is being transformed.', 'comment_created': datetime.datetime(2021, 7, 5, 13, 5, 58, tzinfo=datetime.timezone.utc), 'commenter': 'dselman', 'type': 'User'}, {'comment_id': 668949396, 'comment_body': 'Do we need the `ooxml` child attribute here? The other transformations just return the output.', 'comment_created': datetime.datetime(2021, 7, 13, 16, 57, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dselman', 'type': 'User'}, {'comment_id': 668950030, 'comment_body': ""Don't you also need to register the ciceromark_parsed -> ooxml transform?"", 'comment_created': datetime.datetime(2021, 7, 13, 16, 58, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dselman', 'type': 'User'}, {'comment_id': 668953645, 'comment_body': '@dselman \r\nYes, actually `OOXMLTransfomer` returns `{ooxml, variableFrequency}`.', 'comment_created': datetime.datetime(2021, 7, 13, 17, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 668954659, 'comment_body': 'The transformer is converting  both `ooxml<->Ciceromark `', 'comment_created': datetime.datetime(2021, 7, 13, 17, 4, 49, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 668977797, 'comment_body': 'What is variable frequency and why does the caller need it?', 'comment_created': datetime.datetime(2021, 7, 13, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dselman', 'type': 'User'}, {'comment_id': 668978573, 'comment_body': 'My point is it looks like you only registered the ciceromark_parsed -> ooxml transformation. You will need to add a similar block to do the reverse, under a new `ooxml` block.', 'comment_created': datetime.datetime(2021, 7, 13, 17, 39, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dselman', 'type': 'User'}, {'comment_id': 668979134, 'comment_body': 'Please check that you can transform from a markdown file to ooxml and the reverse by running the CLI.', 'comment_created': datetime.datetime(2021, 7, 13, 17, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dselman', 'type': 'User'}, {'comment_id': 669129005, 'comment_body': 'It returns the count of different variables present in a template. \r\nWe need it because there is a requirement to provide a unique identifier to `rich text input` in MS-WORD which is generated using this. ', 'comment_created': datetime.datetime(2021, 7, 13, 21, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 669129815, 'comment_body': '@dselman \r\nAFAIR, I was able to convert both transformations `ooxml<->ciceromark_parsed` when I pushed the commit. However, I will recheck and let you know ASAP.', 'comment_created': datetime.datetime(2021, 7, 13, 21, 41, 2, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 670210708, 'comment_body': '@dselman \r\nApologies for the delay. I have checked and it converts `CiceroMark_parsed <-> OOXML`. So, this feature is as we expected.', 'comment_created': datetime.datetime(2021, 7, 15, 7, 35, 37, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 671387733, 'comment_body': 'You can probably check for roundtrip by passing the `roundtrip: true` option. [Check example](https://github.com/accordproject/markdown-transform/pull/424/files#diff-f157946de8148b534c64faaec27c403cfe2a77b108cb617830f91982c17b9fb0R133).', 'comment_created': datetime.datetime(2021, 7, 16, 16, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 671388356, 'comment_body': '> What is variable frequency and why does the caller need it?\r\n\r\nMS Word would require it for rendering all the variables.', 'comment_created': datetime.datetime(2021, 7, 16, 16, 37, 49, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 671389925, 'comment_body': 'Spaces before and after `->`.', 'comment_created': datetime.datetime(2021, 7, 16, 16, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 671391729, 'comment_body': 'What all have you removed from the original `acceptance-of-delivery`?', 'comment_created': datetime.datetime(2021, 7, 16, 16, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 671409312, 'comment_body': '@algomaster99 \r\nI have not removed the original `acceptance-of-delivery`. I just added one more named as `partial-acceptance`', 'comment_created': datetime.datetime(2021, 7, 16, 17, 14, 58, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 671410419, 'comment_body': 'I meant what all entities have you removed to create parital_acceptance.', 'comment_created': datetime.datetime(2021, 7, 16, 17, 16, 51, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 671411568, 'comment_body': '`CLuaseDefinition`. This was the only entity causing hinderance.', 'comment_created': datetime.datetime(2021, 7, 16, 17, 19, 3, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 672231649, 'comment_body': 'I think you would also need to check for going from cicero mark to OOXML. And for that, you would need to create a JSON file partial_acceptance.json.', 'comment_created': datetime.datetime(2021, 7, 19, 11, 55, 20, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 672238285, 'comment_body': '@algomaster99 Will update the filenames and tests ASAP.', 'comment_created': datetime.datetime(2021, 7, 19, 12, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 672304102, 'comment_body': 'Can you explain why, please? How does variable frequency help?', 'comment_created': datetime.datetime(2021, 7, 19, 13, 36, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dselman', 'type': 'User'}, {'comment_id': 672384188, 'comment_body': '> I think you would also need to check for going from cicero mark to OOXML. And for that, you would need to create a JSON file partial_acceptance.json.\r\n\r\n@algomaster99 \r\nRegarding this, we already check for the conversion test so why do we do this one. `roundtrip: true` also pass so I am not able to understand the need to add this.\r\nIn `transform.js`, we have already done the test for both.\r\n', 'comment_created': datetime.datetime(2021, 7, 19, 15, 6, 37, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 672488694, 'comment_body': 'Sure!\r\n\r\nIn MS Word, `org.accordproject.ciceromark.Variable` is converted to a `w:sdt` XML tag. This XML tag represents content controls in MS Word. A content control has many attributes but we use only two of them - `title` and `tag` (think of them as analogous to `id` and `class` in HTML, respectively).\r\n\r\nThe `title` attribute is compulsory and **has to be unique** but since there can be many instances of a variable in a clause, we cannot assign each of them the same title. For example, all four instances of `Shipper` in `acceptance-of-delivery` cannot have the same title `Shipper` so I decided to maintain a counter object which would keep a count of the occurrences of the variable and assign the title as - `Shipper1`, `Shipper2`, `Shipper3`, and `Shipper4`. We are also exporting the `counter` variable as MS Word will use it to attach listeners [here](https://github.com/accordproject/cicero-word-add-in/blob/master/src/components/TemplateLibrary/index.js#L146).\r\n\r\nIn retrospect, I think exporting counter variable _may not_ be required. I will try to look into it and discuss this with you and @K-Kumar-01 in the next meeting.\r\n\r\n@K-Kumar-01 , for now, maybe we can revert exporting of `counter` object and do it when we really find that necessary.\r\n\r\n', 'comment_created': datetime.datetime(2021, 7, 19, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 672492643, 'comment_body': '@algomaster99 I dont like the idea of not exporting the `counter`. Reason being i do believe that we would need it a later point, basically when we use it with add-in. On what basis so you think that we might not require the variable? Could you please explain that?', 'comment_created': datetime.datetime(2021, 7, 19, 17, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 672511310, 'comment_body': ""> Regarding this, we already check for the conversion test so why do we do this one. roundtrip: true also pass so I am not able to understand the need to add this.\r\n\r\nWe aren't checking for equality for ciceromark_parsed in between so that's why it's needed.\r\n\r\n> In transform.js, we have already done the test for both.\r\n\r\nYeah, I am aware. I even pointed this out in the meeting. With that logic, I think we can completely remove any testing related to this PR from `markdown-cli`."", 'comment_created': datetime.datetime(2021, 7, 19, 17, 55, 19, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 672514550, 'comment_body': 'Cicero Word add-in uses the counter variable to attach listeners. Instead of the for-loop, we can fetch all the content controls using [`body.contentControls`](https://docs.microsoft.com/en-us/javascript/api/word/word.body?view=word-js-preview#contentControls) and then attach the listener one-by-one. However, there are two questions to ponder over first:\r\n1. What happens if the event listener is attached again to a content control which already had an event listener attached?\r\n2. What happens when the content control with a non-unique title is inserted? ', 'comment_created': datetime.datetime(2021, 7, 19, 18, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 673265125, 'comment_body': ""It should be possible to generate a unique id for a variable based on its position in the tree. E..g using the path to the node. Alternatively we might be able to assign a UUID further up in the transformation stack. Let's discuss some ideas."", 'comment_created': datetime.datetime(2021, 7, 20, 16, 10, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dselman', 'type': 'User'}, {'comment_id': 673289208, 'comment_body': 'Generating a unique idea is not the problem but getting back to attach event listeners is. Moreover, we want to keep this ID as close as possible to the actual variable name as they are means to inform the client which variable they are interacting with.\r\n\r\n<img width=""87"" alt=""cc"" src=""https://user-images.githubusercontent.com/35191225/126362819-db308cdd-dc1b-4f47-b094-d8a40aff06b4.PNG"">\r\n\r\n`Shipper1` is the title and if someone edits, it would mean that they want to modify the shipper variable.', 'comment_created': datetime.datetime(2021, 7, 20, 16, 42, 17, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 673292349, 'comment_body': 'I am looking for ways to make us _not require_ to export the `counter` variable. But we shall use it for OOXML generation as we want to make the title of the content control unique.', 'comment_created': datetime.datetime(2021, 7, 20, 16, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 673341224, 'comment_body': '@K-Kumar-01 I think you can remove exporting of `counter`. I can demonstrate how we can do without it in the next meeting.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 34, 45, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 673350970, 'comment_body': '@algomaster99 \r\nThat would need refactoring first then. I will create a separate PR that will deal with the above.\r\nOnce that is done, I will merge it.\r\nSince, currently only windows are available on my pc it might take some time to close these PRs.\r\n\r\nPS: HDD corruption made Linux vanish 😢. Will reinstall it.', 'comment_created': datetime.datetime(2021, 7, 20, 17, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}, {'comment_id': 673354607, 'comment_body': 'Sure. No problem. ', 'comment_created': datetime.datetime(2021, 7, 20, 17, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 676686143, 'comment_body': 'If you have changed to `omitted` above, do those changes here as well.', 'comment_created': datetime.datetime(2021, 7, 26, 14, 59, 14, tzinfo=datetime.timezone.utc), 'commenter': 'algomaster99', 'type': 'User'}, {'comment_id': 676757460, 'comment_body': '@algomaster99 \r\nDone', 'comment_created': datetime.datetime(2021, 7, 26, 16, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'K-Kumar-01', 'type': 'User'}]","[{'commit_sha': 'a1b7f42ebe119d35a49df0ee3fa2c14ad3e4b1c2', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa48bff1d4a1f0c263ef4188ab246f5a0df00638', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a15508ffea4b7edf92a4295fee2fc1ba2e130ffd', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fed7036f34de9a679d923ec86584d65d88940d72', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9b3fc3beb2afb94d019c6863d02bee526ccf211', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f98a43e2bfdaa09df9d9bdac59a3882ec3e3709f', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dec9d1af80954acdc2c8cdcc5c56a08325d60bb', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bafffd43c7ecc33f5ea2b03d180361d6cd2f6223', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b2842489fe394354f64d7b00e2096ae526ab9d5', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25e308517eb2aea959fa3fdc41c27919776d5ac2', 'committer_username': 'K-Kumar-01', 'committer_name': 'Kushal Kumar', 'committer_email': None, 'commit_date': datetime.datetime(2020, 1, 14, 18, 55, 20, tzinfo=datetime.timezone.utc)}]",Kushal Kumar,59891164,,User,,95,,41,68

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
200077828,markdown-transform,accordproject/markdown-transform,JavaScript,49,70,12,30,843,41,12,5,"[{'id': 715376031, 'number': 454, 'closed': datetime.datetime(2021, 8, 23, 9, 12, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 19, 57, 46, tzinfo=datetime.timezone.utc), 'time_taken': 393295.0, 'time_delta': '4 days, 13:14:55', 'additions': 148, 'deletions': 49, 'state': 'closed'}, {'id': 714727656, 'number': 453, 'closed': datetime.datetime(2021, 8, 18, 15, 19, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 4, 12, 19, tzinfo=datetime.timezone.utc), 'time_taken': 40024.0, 'time_delta': '11:07:04', 'additions': 116, 'deletions': 11, 'state': 'closed'}, {'id': 707324692, 'number': 441, 'closed': datetime.datetime(2021, 8, 17, 13, 59, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 12, 50, 40, tzinfo=datetime.timezone.utc), 'time_taken': 608955.0, 'time_delta': '7 days, 1:09:15', 'additions': 1089, 'deletions': 114, 'state': 'closed'}, {'id': 704559438, 'number': 436, 'closed': datetime.datetime(2021, 8, 9, 11, 44, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 10, 1, 36, tzinfo=datetime.timezone.utc), 'time_taken': 351786.0, 'time_delta': '4 days, 1:43:06', 'additions': 196, 'deletions': 44, 'state': 'closed'}, {'id': 700205784, 'number': 432, 'closed': datetime.datetime(2021, 8, 4, 13, 9, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 11, 4, 44, tzinfo=datetime.timezone.utc), 'time_taken': 439458.0, 'time_delta': '5 days, 2:04:18', 'additions': 191, 'deletions': 15, 'state': 'closed'}, {'id': 696311016, 'number': 430, 'closed': datetime.datetime(2021, 8, 3, 10, 6, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 24, 7, 42, tzinfo=datetime.timezone.utc), 'time_taken': 872677.0, 'time_delta': '10 days, 2:24:37', 'additions': 116, 'deletions': 6, 'state': 'closed'}, {'id': 695863602, 'number': 429, 'closed': datetime.datetime(2021, 7, 23, 11, 22, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 11, 14, 20, tzinfo=datetime.timezone.utc), 'time_taken': 461.0, 'time_delta': '0:07:41', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 687339142, 'number': 428, 'closed': datetime.datetime(2021, 7, 18, 14, 25, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 13, 59, 52, tzinfo=datetime.timezone.utc), 'time_taken': 606350.0, 'time_delta': '7 days, 0:25:50', 'additions': 70, 'deletions': 4, 'state': 'closed'}, {'id': 686630689, 'number': 427, 'closed': datetime.datetime(2021, 7, 9, 20, 31, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 9, 17, 30, tzinfo=datetime.timezone.utc), 'time_taken': 40439.0, 'time_delta': '11:13:59', 'additions': 61, 'deletions': 48, 'state': 'closed'}, {'id': 685046834, 'number': 426, 'closed': datetime.datetime(2021, 7, 8, 21, 57, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 10, 0, 49, tzinfo=datetime.timezone.utc), 'time_taken': 129384.0, 'time_delta': '1 day, 11:56:24', 'additions': 55, 'deletions': 0, 'state': 'closed'}, {'id': 683854366, 'number': 425, 'closed': datetime.datetime(2021, 7, 6, 23, 50, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 5, 17, 34, 11, tzinfo=datetime.timezone.utc), 'time_taken': 108964.0, 'time_delta': '1 day, 6:16:04', 'additions': 339, 'deletions': 304, 'state': 'closed'}, {'id': 683155012, 'number': 424, 'closed': datetime.datetime(2021, 7, 30, 10, 1, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 11, 4, 41, tzinfo=datetime.timezone.utc), 'time_taken': 2242628.0, 'time_delta': '25 days, 22:57:08', 'additions': 1482, 'deletions': 7, 'state': 'closed'}, {'id': 682538843, 'number': 423, 'closed': datetime.datetime(2021, 7, 2, 11, 22, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 2, 11, 3, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1158.0, 'time_delta': '0:19:18', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 680733047, 'number': 421, 'closed': datetime.datetime(2021, 7, 5, 14, 45, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 30, 10, 28, 16, tzinfo=datetime.timezone.utc), 'time_taken': 447428.0, 'time_delta': '5 days, 4:17:08', 'additions': 203, 'deletions': 156, 'state': 'closed'}, {'id': 677897026, 'number': 418, 'closed': datetime.datetime(2021, 6, 30, 10, 6, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 13, 2, 1, tzinfo=datetime.timezone.utc), 'time_taken': 421452.0, 'time_delta': '4 days, 21:04:12', 'additions': 343, 'deletions': 127, 'state': 'closed'}, {'id': 676264725, 'number': 417, 'closed': datetime.datetime(2021, 6, 23, 14, 6, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 12, 59, 59, tzinfo=datetime.timezone.utc), 'time_taken': 3973.0, 'time_delta': '1:06:13', 'additions': 50, 'deletions': 3, 'state': 'closed'}, {'id': 673371174, 'number': 414, 'closed': datetime.datetime(2021, 6, 21, 10, 42, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 10, 49, 30, tzinfo=datetime.timezone.utc), 'time_taken': 258770.0, 'time_delta': '2 days, 23:52:50', 'additions': 18, 'deletions': 18, 'state': 'closed'}, {'id': 673241617, 'number': 413, 'closed': datetime.datetime(2021, 6, 18, 8, 58, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 18, 7, 37, 34, tzinfo=datetime.timezone.utc), 'time_taken': 4839.0, 'time_delta': '1:20:39', 'additions': 23, 'deletions': 9, 'state': 'closed'}, {'id': 672928461, 'number': 412, 'closed': datetime.datetime(2021, 6, 17, 19, 37, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 19, 34, 14, tzinfo=datetime.timezone.utc), 'time_taken': 205.0, 'time_delta': '0:03:25', 'additions': 1, 'deletions': 3, 'state': 'closed'}, {'id': 672575554, 'number': 411, 'closed': datetime.datetime(2021, 6, 17, 15, 52, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 12, 18, 19, tzinfo=datetime.timezone.utc), 'time_taken': 12860.0, 'time_delta': '3:34:20', 'additions': 24, 'deletions': 16, 'state': 'closed'}, {'id': 671566373, 'number': 410, 'closed': datetime.datetime(2021, 6, 17, 8, 47, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 14, 56, 17, tzinfo=datetime.timezone.utc), 'time_taken': 64298.0, 'time_delta': '17:51:38', 'additions': 70, 'deletions': 5, 'state': 'closed'}, {'id': 671312535, 'number': 409, 'closed': datetime.datetime(2021, 6, 16, 10, 53, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 16, 10, 32, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1211.0, 'time_delta': '0:20:11', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 669463517, 'number': 408, 'closed': datetime.datetime(2021, 6, 14, 20, 33, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 14, 10, 55, 44, tzinfo=datetime.timezone.utc), 'time_taken': 34658.0, 'time_delta': '9:37:38', 'additions': 54, 'deletions': 35, 'state': 'closed'}, {'id': 668930450, 'number': 406, 'closed': datetime.datetime(2021, 6, 13, 13, 50, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 18, 36, 26, tzinfo=datetime.timezone.utc), 'time_taken': 69233.0, 'time_delta': '19:13:53', 'additions': 10, 'deletions': 2863, 'state': 'closed'}, {'id': 668838716, 'number': 404, 'closed': datetime.datetime(2021, 6, 12, 13, 59, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 10, 48, 14, tzinfo=datetime.timezone.utc), 'time_taken': 11460.0, 'time_delta': '3:11:00', 'additions': 67, 'deletions': 5, 'state': 'closed'}, {'id': 668221966, 'number': 402, 'closed': datetime.datetime(2021, 6, 11, 17, 43, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 14, 38, 59, tzinfo=datetime.timezone.utc), 'time_taken': 11081.0, 'time_delta': '3:04:41', 'additions': 2, 'deletions': 18, 'state': 'closed'}, {'id': 667014533, 'number': 401, 'closed': datetime.datetime(2021, 6, 11, 11, 50, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 15, 40, 58, tzinfo=datetime.timezone.utc), 'time_taken': 72562.0, 'time_delta': '20:09:22', 'additions': 324, 'deletions': 50, 'state': 'closed'}, {'id': 666705868, 'number': 400, 'closed': datetime.datetime(2021, 6, 10, 14, 29, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 10, 9, 34, 3, tzinfo=datetime.timezone.utc), 'time_taken': 17752.0, 'time_delta': '4:55:52', 'additions': 292, 'deletions': 15, 'state': 'closed'}, {'id': 662346316, 'number': 399, 'closed': datetime.datetime(2021, 6, 7, 10, 5, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 5, 8, 43, 16, tzinfo=datetime.timezone.utc), 'time_taken': 177755.0, 'time_delta': '2 days, 1:22:35', 'additions': 49, 'deletions': 0, 'state': 'closed'}]"
