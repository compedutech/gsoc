pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
986369288,Record Dot Hover Types,"Working towards #2732 (reopened since I closed and force-pushed my last PR, which github dislikes)

This PR patches the way HieAST is generated by GHC. For performance reasons, not all nodes in the AST get expanded and checked for types. This caused the nodes corresponding to record-dot-syntax to not be included in the HieAST. This patch adds them back.

## Notes

This is what type info on hover looks like:

![Code_ps0jgEHy0v](https://user-images.githubusercontent.com/8738145/177005014-f0fc0061-c712-47f1-a2be-0fa0918a1883.png)


<a href=""https://gitpod.io/#https://github.com/haskell/haskell-language-server/pull/3016""><img src=""https://gitpod.io/button/open-in-gitpod.svg""/></a>

",True,3016,https://api.github.com/repos/haskell/haskell-language-server/pulls/3016,https://github.com/haskell/haskell-language-server/pull/3016,closed,2188,12,7,5,10,2,0,0,[],2022-07-04 11:44:39+00:00,2022-07-19 15:59:43+00:00,1311304.0,"15 days, 4:15:04","[{'comment_id': 924690957, 'comment_body': 'Ah, too late: should this check be more generous? We expect these tests to work on later versions also, right? ', 'comment_created': datetime.datetime(2022, 7, 19, 16, 0, 28, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 924695794, 'comment_body': ""Oh that's correct. I'll make a PR for that"", 'comment_created': datetime.datetime(2022, 7, 19, 16, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}]","[{'commit_sha': '790421a1e07c6fa059df89357bb667495bd8288a', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0d7c664bd751156e963939780fb6bde8a7818a1', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7b71c0d10e52d367d930adbc43747a0fcf7f0fae', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96e354688217b25083f0b326a14fe71449a7ce7c', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2082248b42eb3fa89b1bb16769f833c7b1d90a2b', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}]",Colten Webb,8738145,,User,,23,,3,3
1019414335,Feat: basic record dot completions,"When a user dots a record type with OverloadedRecordDot enabled, shows all possible record selectors for that type.

Todo:
* write test
* make completion items more complete

Notes
* Requires fresh HieAst to work, which shouldn't be a problem since we are dotting an actively worked on file
* Doesn't support HasField (virtual fields)
* Moves getCompletionPrefix, PosPrefixInfo in from LSP.Language.VFS (and patches them to support records in addition to modules)

<a href=""https://gitpod.io/#https://github.com/haskell/haskell-language-server/pull/3080""><img src=""https://gitpod.io/button/open-in-gitpod.svg""/></a>

",True,3080,https://api.github.com/repos/haskell/haskell-language-server/pulls/3080,https://github.com/haskell/haskell-language-server/pull/3080,closed,195,21,5,10,4,44,0,0,[],2022-08-06 20:35:43+00:00,2022-09-26 15:30:30+00:00,4388087.0,"50 days, 18:54:47","[{'comment_id': 939619282, 'comment_body': ""```suggestion\r\n            let uses_overloaded_record_dot (ms_hspp_opts.msrModSummary -> dflags) = \r\n                  xopt LangExt.OverloadedRecordDot dflags\r\n            ms <- fmap fst <$> useWithStaleFast GetModSummaryWithoutTimestamps npath\r\n            astres <- case ms of \r\n              Just ms' -> if uses_overloaded_record_dot ms' \r\n                then useWithStaleFast GetHieAst npath \r\n                else return Nothing\r\n```"", 'comment_created': datetime.datetime(2022, 8, 7, 7, 12, 12, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 939619507, 'comment_body': '```suggestion\r\n-- moved here from Language.LSP.VFS\r\n```', 'comment_created': datetime.datetime(2022, 8, 7, 7, 14, 37, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 939619597, 'comment_body': 'what is the `dropWhile` for?', 'comment_created': datetime.datetime(2022, 8, 7, 7, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 939619776, 'comment_body': 'Is this from Language.LSP.VFS? What have you changed?', 'comment_created': datetime.datetime(2022, 8, 7, 7, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 940114236, 'comment_body': ""It doesn't really belong there, so moving it here is good (I'd like to delete it from `lsp` afterwards)."", 'comment_created': datetime.datetime(2022, 8, 8, 11, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 940263658, 'comment_body': 'left over from adapting getCompletionsPrefix to working with record dot, removed now', 'comment_created': datetime.datetime(2022, 8, 8, 13, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 968047738, 'comment_body': ""```suggestion\r\n              Just ms' | uses_overloaded_record_dot ms'\r\n                 ->  useWithStaleFast GetHieAst npath\r\n              _ -> return Nothing\r\n```"", 'comment_created': datetime.datetime(2022, 9, 12, 7, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 968051257, 'comment_body': 'Note that `headMaybe` = `Data.Maybe.maybeToList` ', 'comment_created': datetime.datetime(2022, 9, 12, 7, 6, 18, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 968054328, 'comment_body': 'Should we union these two sources of completions when a prefix is present? ', 'comment_created': datetime.datetime(2022, 9, 12, 7, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pepeiborra', 'type': 'User'}, {'comment_id': 971046925, 'comment_body': 'TODO?', 'comment_created': datetime.datetime(2022, 9, 14, 16, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971806953, 'comment_body': 'Needs haddock', 'comment_created': datetime.datetime(2022, 9, 15, 10, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971807381, 'comment_body': 'Just requiring a `Monad` constraint is a bit suspicious: do you need that at all, can you not just return `Maybe PosPrefixInfo`?', 'comment_created': datetime.datetime(2022, 9, 15, 10, 20, 48, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971809202, 'comment_body': ""This is quite weird: you're unconditionally returning a `Just`, but you _have_ a `Maybe` already, but you're swapping out the `Nothing` case with a default value? Quite confusing. Maybe you just want to also drop the `Maybe` from the return type?"", 'comment_created': datetime.datetime(2022, 9, 15, 10, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971809896, 'comment_body': 'what are you trying to do? worth explaining, much of this is not obvious', 'comment_created': datetime.datetime(2022, 9, 15, 10, 23, 5, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971811098, 'comment_body': 'Also this is different from the `lsp` version now, what changed?', 'comment_created': datetime.datetime(2022, 9, 15, 10, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971811943, 'comment_body': 'I see, this was here before. Well, it makes no sense so we might as well improve it.', 'comment_created': datetime.datetime(2022, 9, 15, 10, 25, 24, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971812577, 'comment_body': ""This seems subtle and important: write more! You spent lots of time figuring this out, don't let the knowledge be lost!"", 'comment_created': datetime.datetime(2022, 9, 15, 10, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971813125, 'comment_body': ""Also, it's not clear what this comment relates to. Nothing here ensures that the AST is fresh, so what's going on?"", 'comment_created': datetime.datetime(2022, 9, 15, 10, 26, 39, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971813851, 'comment_body': 'commented out code', 'comment_created': datetime.datetime(2022, 9, 15, 10, 27, 18, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971814166, 'comment_body': 'it should have doc, probably?', 'comment_created': datetime.datetime(2022, 9, 15, 10, 27, 37, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971814464, 'comment_body': 'we might potentially need to import something?', 'comment_created': datetime.datetime(2022, 9, 15, 10, 27, 58, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971815152, 'comment_body': 'I know this was here before, but I find this a bit too point-free and quite obscure. I would be happy if it became a bit less so...', 'comment_created': datetime.datetime(2022, 9, 15, 10, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971815439, 'comment_body': 'Worth an explanation regardless!', 'comment_created': datetime.datetime(2022, 9, 15, 10, 29, 1, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971815637, 'comment_body': 'historical note, probably not necessary', 'comment_created': datetime.datetime(2022, 9, 15, 10, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 971816119, 'comment_body': 'What about some nested completions? e.g. `x.y.z`?', 'comment_created': datetime.datetime(2022, 9, 15, 10, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 972094024, 'comment_body': ""Wow I didn't know you can put guards in case statements like that, thanks"", 'comment_created': datetime.datetime(2022, 9, 15, 14, 53, 26, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 972115130, 'comment_body': ""The thinking here was that if there are record completions, they will be the only valid completions (since we get record completions from `myrecord.var`, and everything else would only work with something like `myrecord .somefn`, with a space, in which case record completions is null). I'll add a comment. Does that make sense though?"", 'comment_created': datetime.datetime(2022, 9, 15, 15, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 972511740, 'comment_body': ""The TODO was in regards to filling out more of the details field with where the type was defined. It turned out that due to HieAST, the fields' definitions weren't easy to get at (since it would give the types of the fields, but not the fields themselves). I added a comment to Logic.hs about this, and removed the TODO."", 'comment_created': datetime.datetime(2022, 9, 16, 0, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 973567988, 'comment_body': 'Maybe worth leaving a todo somewhere since there is something that we might want to improve later?', 'comment_created': datetime.datetime(2022, 9, 17, 10, 9, 46, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 973568039, 'comment_body': 'Or even a known broken test!', 'comment_created': datetime.datetime(2022, 9, 17, 10, 10, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 979341257, 'comment_body': 'Yep, not sure why it was like that', 'comment_created': datetime.datetime(2022, 9, 25, 1, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979341667, 'comment_body': ""I'll document in comments"", 'comment_created': datetime.datetime(2022, 9, 25, 2, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979342057, 'comment_body': 'But the reason for the change was different rope libraries, though it looks like the versions are the same now.', 'comment_created': datetime.datetime(2022, 9, 25, 2, 9, 21, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979342909, 'comment_body': 'Made the comment more detailed, and now in proper English. Basically when doing autocomplete its possible for the HieAST to be ""stale"" meaning its loaded from an hie file rather than generated. But when this happens, it\'s not possible to get the record fields. This only happens when the current file is first loaded, if an hie file was generated before. As soon as the user edits it, it\'s fresh again, so I never ran into trouble from this.', 'comment_created': datetime.datetime(2022, 9, 25, 2, 20, 20, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979343593, 'comment_body': 'I believe that other autocompletions don\'t provide docs atm, e.g. `Logic.hs:344`. Though we do provide them for snippets. I worry putting something like ""record dot completion"" would distract the developer. Did you have something else in mind?', 'comment_created': datetime.datetime(2022, 9, 25, 2, 28, 24, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979344160, 'comment_body': ""This is a todo. Since I get at the fields in a roundabout way I can't trivially adapt the existing `ExtendImport` to this. It requires a way to get the record's module, which I didn't see included in the type information I read. I'll leave a comment about this."", 'comment_created': datetime.datetime(2022, 9, 25, 2, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979346481, 'comment_body': 'Alright, refactored the anyQualCompls parts since those seemed the worst', 'comment_created': datetime.datetime(2022, 9, 25, 3, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979433842, 'comment_body': 'Possibly stupid question, but why guard here? What happens if we just guard getting the HIE AST on whether or not we have record dot?', 'comment_created': datetime.datetime(2022, 9, 25, 17, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 979434002, 'comment_body': 'OOI, what *is* happening in this case? I guess this is basically preventing us from giving completions when people write ` .` which usually corresponds to function composition?', 'comment_created': datetime.datetime(2022, 9, 25, 17, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 979436362, 'comment_body': 'Well, fields have haddock usually, you know\r\n```\r\ndata Foo {\r\n  hello :: Int -- ^ This is the doc for foo\r\n}\r\n```\r\nI would expect to get the field haddock in the completion doc!\r\n\r\nThis might get automatically sorted out for us with https://github.com/haskell/haskell-language-server/pull/3204, not sure.', 'comment_created': datetime.datetime(2022, 9, 25, 17, 40, 16, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}, {'comment_id': 979468778, 'comment_body': ""If I understand you correctly, that's exactly what I'm trying to do here. Maybe there's a simpler way to do this?"", 'comment_created': datetime.datetime(2022, 9, 25, 22, 26, 2, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979469113, 'comment_body': ""That's how I read this too. `getCompletionPrefix` doesn't find a prefix word before the cursor so it returns emptiness."", 'comment_created': datetime.datetime(2022, 9, 25, 22, 29, 19, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979469308, 'comment_body': ""Ah that makes much more sense than what I was thinking. If that pr doesn't sort this out, it looks like it will provide the machinery to make it easier."", 'comment_created': datetime.datetime(2022, 9, 25, 22, 31, 32, tzinfo=datetime.timezone.utc), 'commenter': 'coltenwebb', 'type': 'User'}, {'comment_id': 979698323, 'comment_body': 'No, it was a stupid question: I missed that the `uses_overloaded_record_dot` predicate needs the module summary!', 'comment_created': datetime.datetime(2022, 9, 26, 8, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'michaelpj', 'type': 'User'}]","[{'commit_sha': 'dbc23a9a8cf7e31217482b0ecb99385a29d75c85', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7a70260f40c023b0b5604ceb9efdbfd5eedcec4', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '744bfa8d4e663e3d483a3e1cdfbc5ca76ee5cb8a', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9aa8b48bc66a18e168cec23321a415fea4d6c59', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee93014d9527801d89bbce18cdfaabd768ddbbf1', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2449b8e4ce7a165971b3c7fe1d03c7bf07f368b', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25069b849088499d1c5d30786f56d882b59adf63', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc45ebd6daace212528f7fde6c7378885795beaa', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cccbb9f446266af96efa631ac5e6dc9ef2c1159e', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60776943d04029a61b40d966203b57a01053713e', 'committer_username': 'coltenwebb', 'committer_name': 'Colten Webb', 'committer_email': None, 'commit_date': datetime.datetime(2014, 9, 11, 14, 37, 21, tzinfo=datetime.timezone.utc)}]",Colten Webb,8738145,,User,,23,,3,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
236179694,haskell-language-server,haskell/haskell-language-server,Haskell,354,2634,51,235,3663,494,592,54,"[{'id': 1019414335, 'number': 3080, 'closed': datetime.datetime(2022, 9, 26, 15, 30, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 6, 20, 35, 43, tzinfo=datetime.timezone.utc), 'time_taken': 4388087.0, 'time_delta': '50 days, 18:54:47', 'additions': 195, 'deletions': 21, 'state': 'closed'}, {'id': 1001082003, 'number': 3051, 'closed': datetime.datetime(2022, 7, 20, 11, 3, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 19, 17, 59, 13, tzinfo=datetime.timezone.utc), 'time_taken': 61433.0, 'time_delta': '17:03:53', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 986369288, 'number': 3016, 'closed': datetime.datetime(2022, 7, 19, 15, 59, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 4, 11, 44, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1311304.0, 'time_delta': '15 days, 4:15:04', 'additions': 2188, 'deletions': 12, 'state': 'closed'}, {'id': 985535896, 'number': 3010, 'closed': datetime.datetime(2022, 7, 2, 17, 10, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 2, 14, 35, 35, tzinfo=datetime.timezone.utc), 'time_taken': 9318.0, 'time_delta': '2:35:18', 'additions': 0, 'deletions': 0, 'state': 'closed'}]"
