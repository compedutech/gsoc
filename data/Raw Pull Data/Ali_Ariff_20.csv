pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
378729656,ARM Support,[Rendered](https://github.com/aliariff/gsoc/blob/arm-support/rfc/2020/arm-support/aliariff.md),True,1,https://api.github.com/repos/linkerd/gsoc/pulls/1,https://github.com/linkerd/gsoc/pull/1,closed,273,0,1,9,3,5,0,0,[],2020-02-23 17:23:20+00:00,2020-05-04 18:01:52+00:00,6136712.0,"71 days, 0:38:32","[{'comment_id': 400512464, 'comment_body': ""Last I tried, the `docker manifest` command is still experimental. I don't think there is a way to enable it on GitHub Actions.\r\n\r\n> every image architecture will have their own repositories.\r\n\r\nCan we assign different tags to the images, but store them in the same repository?"", 'comment_created': datetime.datetime(2020, 3, 30, 21, 43, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 400513919, 'comment_body': 'I assume we need a `docker manifest push` command after this.', 'comment_created': datetime.datetime(2020, 3, 30, 21, 46, 13, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 400528031, 'comment_body': 'I just try. It is possible to run experimental features on the Github Action runner.\r\n![image](https://user-images.githubusercontent.com/6806035/77967176-e4812400-72e4-11ea-8738-f7b390299a55.png)\r\nRef: https://github.com/actions/virtual-environments/issues/368\r\n', 'comment_created': datetime.datetime(2020, 3, 30, 22, 17, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 400528978, 'comment_body': 'Different tags and the same repository are also possible. But that repo will look messy. But yeah totally possible. \r\nI create this by following how grafana team created it. Ref: https://hub.docker.com/u/grafana', 'comment_created': datetime.datetime(2020, 3, 30, 22, 19, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 400529192, 'comment_body': 'You are right missing the push part. Will add it.', 'comment_created': datetime.datetime(2020, 3, 30, 22, 20, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}]","[{'commit_sha': 'b366df67783e388ec66de7a3aa27e824ac658a0f', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c86c02c139fb298074bba59f6d95554e99a3494', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f84d66e5ce2443e79de181976974e05ec6e40d04', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fffadedf07502dc8e49655f88f9c5992c01f2168', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '65f38e7816ed983997732c8b5888db8783b6aea2', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b3f53dc080f5b1500a29326d465e8f56b2150fb0', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e1dc11b69def4a7f2095c40234fb39b06da578bd', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24055417bc46fb0126d4f70bfd138862edc5f694', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '671e6f0f0c05e70126e15c69a15f21123f76c35f', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
427925600,Add GitHub Actions for CI Process,"This workflow already tested in my local fork.

https://github.com/aliariff/linkerd2-proxy-init/pull/1/checks

Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>",True,11,https://api.github.com/repos/linkerd/linkerd2-proxy-init/pulls/11,https://github.com/linkerd/linkerd2-proxy-init/pull/11,closed,100,5,5,4,5,7,0,0,[],2020-06-04 15:38:15+00:00,2020-06-12 19:19:06+00:00,704451.0,"8 days, 3:40:51","[{'comment_id': 435709494, 'comment_body': ""Let's chat about using KInD. I attempted to install KInD on an arm server and it required building k8s, as well.\r\n\r\nI recall you saying that the Docker build portion would be fine on arm systems because the Dockerfile will detect the architecture. If `engineerd/setup-kind` will also detect the architecture, then we should be safe to use this"", 'comment_created': datetime.datetime(2020, 6, 5, 6, 12, 45, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 435709888, 'comment_body': ""What do you think about adding a `go_dependencies` job similar to the `linkerd/linkerd2` [repo](https://github.com/linkerd/linkerd2/blob/master/.github/workflows/static_checks.yml#L11)?\r\n\r\nWe'd have to add a script as well, but I think that's okay. The job and the script can be addressed in another PR."", 'comment_created': datetime.datetime(2020, 6, 5, 6, 14, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 435709973, 'comment_body': 'Nice efficiency 😄 ', 'comment_created': datetime.datetime(2020, 6, 5, 6, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 436909374, 'comment_body': ""I don't think this is necessary, because in `linkerd/linkerd2` repo the `go_dependencies` job is making sure the Dockerfile is using the correct builder image.\r\nIn this repo, there is no such case to make sure the builder image."", 'comment_created': datetime.datetime(2020, 6, 8, 18, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 438203508, 'comment_body': 'Please use SHAs instead of tags like we do in the workflows in the linkerd2 repo. This gives us the guarantee that 3rd party code will not change (same thing for the other actions in this PR).', 'comment_created': datetime.datetime(2020, 6, 10, 15, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 438208046, 'comment_body': ""Can you use `golangci-lint` instead like we do in the linkerd2 repo? If I'm not mistaking, it provides a broader range of checks."", 'comment_created': datetime.datetime(2020, 6, 10, 15, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 438217522, 'comment_body': ""Can you add some logic into `run_tests.sh` so that this command isn't repeated there? Maybe by checking the existence of an env var that you set up in the `Run integration tests` job below."", 'comment_created': datetime.datetime(2020, 6, 10, 15, 34, 4, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}]","[{'commit_sha': '6e602a7adc6caabe22a9106bdc67ba8bd63290f7', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e90d80a03e603b63814d5e034396479061dd0de', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ae0ca1d7691de9ad713decc3f56ef8febba8d28', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83b8ece52fa9baf24aa29e2138fb9137b7b022a7', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
431959058,Add release workflow,"@cpretzer 

Tested manually in my local fork:
https://github.com/aliariff/linkerd2-proxy-init/pull/4/checks?check_run_id=800916941
Using the docker hub registry and my user & pass.
The resulting images are in https://hub.docker.com/r/etni35/proxy-init/tags
![image](https://user-images.githubusercontent.com/6806035/85457900-cdc73200-b5a0-11ea-9768-57e1623a4cc5.png)


This version only can be tested properly when we create a new release tag.
",True,12,https://api.github.com/repos/linkerd/linkerd2-proxy-init/pulls/12,https://github.com/linkerd/linkerd2-proxy-init/pull/12,closed,96,8,7,8,0,24,0,0,[],2020-06-09 17:28:04+00:00,2020-06-30 17:06:01+00:00,1813077.0,"20 days, 23:37:57","[{'comment_id': 444492316, 'comment_body': 'Any reasons why we want to reference the commit SHA and not the version tag? Also, the [`v2` tag](https://github.com/actions/checkout/commits/v2) seems to refer a different commit.', 'comment_created': datetime.datetime(2020, 6, 23, 20, 38, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 444514433, 'comment_body': 'Is there a reason to leave these comments in?', 'comment_created': datetime.datetime(2020, 6, 23, 21, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 444640100, 'comment_body': 'TIOLI: consider using `--output ""type=registry""` or just `--push`. See https://github.com/docker/buildx#registry.', 'comment_created': datetime.datetime(2020, 6, 24, 4, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 444644530, 'comment_body': '(@cpretzer @olix0r LMKWYT.)\r\n\r\nI think this only works OOB with Docker Desktop, right? Specifically, it only works with a Buildx builder that uses the `docker-container` driver. On my Ubuntu laptop though, the default builder uses the `docker` driver, which doesn\'t support multi-platform builds. \r\n\r\nAssuming that we want the Makefile to work outside of Docker Desktop and CI too, we should add some instructions like the following to the README:\r\n\r\nOn some environments where the default Buildx builder doesn\'t use the `docker-container` driver, the `make images` target may return the following error:\r\n```\r\n$ make images\r\nmultiple platforms feature is currently not supported for docker driver. Please switch to a different driver (eg. ""docker buildx create --use"")\r\nMakefile:57: recipe for target \'images\' failed\r\nmake: *** [images] Error 1\r\n```\r\n\r\nUse the following commands to create a builder that uses the `docker-container` driver:\r\n```\r\n$ docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\r\n\r\n$ docker buildx create --name=multiarch --driver=docker-container --platform=linux/amd64,linux/arm64,linux/arm/v7 --use\r\nmultiarch\r\n\r\n$ docker buildx inspect multiarch --bootstrap\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 4, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 444645459, 'comment_body': 'This will cause CI to run `docker buildx build` twice, using different `--output` configuration. I think on CI, we should be able to just use `make push`.', 'comment_created': datetime.datetime(2020, 6, 24, 5, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 444648039, 'comment_body': ""AIUI, since we are building multi-platform images (using builders with `docker-container` driver), this doesn't output any images, right? (See https://github.com/docker/buildx/issues/166#issuecomment-544827163.) So is the purpose of this rule simply to validate the image build? Do we need this target? Or shall we just provide a single target that can build and push the multi-platform images, and we **don't** default `REGISTRY` to `gcr.io/linkerd-io`?"", 'comment_created': datetime.datetime(2020, 6, 24, 5, 12, 20, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 444648547, 'comment_body': 'Is `$BUILDPLATFORM` necessary?', 'comment_created': datetime.datetime(2020, 6, 24, 5, 14, 12, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 444657933, 'comment_body': ""@ihcsim we're using the SHAs based on this comment from another PR: https://github.com/linkerd/linkerd2-proxy-init/pull/11#pullrequestreview-428161525"", 'comment_created': datetime.datetime(2020, 6, 24, 5, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 444727085, 'comment_body': 'This is to guarantee that the code will not change, as @alpeb recommends. And the SHA refer to https://github.com/actions/checkout/releases/tag/v2.0.0', 'comment_created': datetime.datetime(2020, 6, 24, 8, 23, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 444728876, 'comment_body': 'Possible, but this one just to make a clear distinction between build without pushing and build with pushing.', 'comment_created': datetime.datetime(2020, 6, 24, 8, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 444730721, 'comment_body': 'Yes, but the second run will be using the cache Overall the whole release workflow finishes in 1 minute.', 'comment_created': datetime.datetime(2020, 6, 24, 8, 29, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 444765740, 'comment_body': 'Yes, because `By default, the target platform of the build request is used.`\r\nWe want to reuse the builder image here.\r\nRef: https://docs.docker.com/engine/reference/builder/#from', 'comment_created': datetime.datetime(2020, 6, 24, 9, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 444768982, 'comment_body': '\r\nyes, this is not output any image, meaning the images will not appear when we call `docker images` but the images will exist in the cache layer.\r\n\r\nYes, validation is the purpose and also clarity between build & push (on CI stages). The push part will just use the previous cache from the build.\r\n', 'comment_created': datetime.datetime(2020, 6, 24, 9, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 444770044, 'comment_body': 'For the default registry, for now, we use `gcr.io/linkerd-io` but it can be easily changed using env variable\r\n`DOCKER_REGISTRY=<registry> make ....`', 'comment_created': datetime.datetime(2020, 6, 24, 9, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 444771343, 'comment_body': 'I agree, instructions in the readme or directly in `make help` about how to build multi-arch images will be helpful.', 'comment_created': datetime.datetime(2020, 6, 24, 9, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 445039746, 'comment_body': 'Can we update the comment to `v2.0.0`? Thanks.', 'comment_created': datetime.datetime(2020, 6, 24, 16, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 445044856, 'comment_body': 'Maybe we can script it as a different make target (say, `make builder`), and mention in the README that if one encounters the above error message, run `make builder`. What do you think of something like:\r\n\r\n```\r\n.PHONY: builder\r\nbuilder:\r\n   docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\r\n   docker buildx create --name=multiarch-builder --driver=docker-container --platform=""${SUPPORTED_ARCHS}"" --use\r\nmultiarch\r\n   docker buildx inspect multiarch-builder --bootstrap\r\n```', 'comment_created': datetime.datetime(2020, 6, 24, 17, 8, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 445047353, 'comment_body': 'Thanks for the clarification. Is it important to have 2 distinct phases in CI, since the build phase is essentially the same as the push phase, minus the actual push task? \r\n\r\nJust wondering if can we do something like:\r\n\r\n```\r\nimages:\r\n\tdocker buildx build \\\r\n\t\t--platform $(SUPPORTED_ARCHS) \\\r\n\t\t--output ""type=image,push=${PUSH_IMAGE}"" \\\r\n# ...\r\n```\r\nsetting `PUSH_IMAGE` to `true` in CI, but `false` by default, and remove the `push` target?', 'comment_created': datetime.datetime(2020, 6, 24, 17, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 445052757, 'comment_body': ""important maybe not really, but just for distinction. \r\n\r\nthat is a good suggestion, I will change it, to make it DRY.\r\nRegarding removing the `push`, we can still use it, so it's just calling `PUSH_IMAGE=true  make images`. So the caller no needs to know which env variable to set."", 'comment_created': datetime.datetime(2020, 6, 24, 17, 22, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 445053204, 'comment_body': 'That is also possible, I will try it out.', 'comment_created': datetime.datetime(2020, 6, 24, 17, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 445080679, 'comment_body': ""@ihcsim \r\nis it necessary to run `docker run --rm --privileged multiarch/qemu-user-static --reset -p yes`?\r\nbecause in this case, we don't use QEMU, we just utilize golang internal cross-compile features."", 'comment_created': datetime.datetime(2020, 6, 24, 18, 12, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 445091951, 'comment_body': 'AIUI, if the Dockerfile has the `RUN` commands, we will need the qemu in order for those commands to be executed during the multi-arch build.', 'comment_created': datetime.datetime(2020, 6, 24, 18, 33, 6, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 445093234, 'comment_body': 'AFAICT, the buildx github action has to do the same thing. See https://github.com/crazy-max/ghaction-docker-buildx/blob/44fd46c7833e095f13bb1d8ace66bd821198bfef/src/main.ts#L24-L38.', 'comment_created': datetime.datetime(2020, 6, 24, 18, 35, 32, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}, {'comment_id': 445103374, 'comment_body': 'Thanks for adding this section. Can we provide more context around why and when a user will need to run `make builder`? How about something like:\r\n\r\nIn some local environments like Ubuntu, where the default Buildx builder uses the `docker` driver, the `make images` command might fail with the following error:\r\n\r\n```\r\n$ make images\r\nmultiple platforms feature is currently not supported for docker driver. Please switch to a different driver (eg. ""docker buildx create --use"")\r\nMakefile:57: recipe for target \'images\' failed\r\nmake: *** [images] Error 1\r\n```\r\n\r\nTo fix this, you can create a new Buildx builder instance by running `make builder`. This command will create a builder that uses the `docker-container` driver that can build multi-platform images. For more information, see the Buildx builder [documentation](https://docs.docker.com/buildx/working-with-buildx/#work-with-builder-instances).', 'comment_created': datetime.datetime(2020, 6, 24, 18, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'ihcsim', 'type': 'User'}]","[{'commit_sha': 'edbd1af24c884125e0a70b5f6e273c10dc0566ed', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '41f3021ff2fe8f7f74296f0ee547dd18be7257ce', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4055e1dd0f7b022c796bbcf1067c7fdab3e3f617', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da3fcd29ab06cd8d81ea3d0cbe1780e364ac1ac8', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7067131681b70080a1b37ce4c194f32a059c18d7', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e6fa289246a0cbb5345f585aa6aa84dae46cd0a', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3edcd68c7d6f54a54a1cd4edfa39b7d77d1ca473', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b7f80411f1f209ac18388aee725f088b028fd2c', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
433923045,Add makefile,,True,15,https://api.github.com/repos/linkerd/linkerd2-proxy-init/pulls/15,https://github.com/linkerd/linkerd2-proxy-init/pull/15,closed,59,15,5,5,4,5,0,0,[],2020-06-12 23:34:43+00:00,2020-06-23 19:39:09+00:00,936266.0,"10 days, 20:04:26","[{'comment_id': 442416555, 'comment_body': 'Awesome! I believe `make kind-load integration-test` is enough, no?', 'comment_created': datetime.datetime(2020, 6, 18, 18, 19, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 442417725, 'comment_body': 'I think you can just say something like ""For other environments, run `make integration-test` after having uploaded the images"" given this might be run in other places like cloud environments.', 'comment_created': datetime.datetime(2020, 6, 18, 18, 21, 15, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 442418695, 'comment_body': ""Loved this technique, I'm gonna steal it :slightly_smiling_face: "", 'comment_created': datetime.datetime(2020, 6, 18, 18, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 442424705, 'comment_body': 'ah yes, you are right', 'comment_created': datetime.datetime(2020, 6, 18, 18, 34, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 442425716, 'comment_body': '😄 \r\nI got it from here https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html', 'comment_created': datetime.datetime(2020, 6, 18, 18, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}]","[{'commit_sha': 'fadeae520bcf741f247be042ccbc20792c52b66f', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ecff36769f6e7592c9aa79b4d0b7d2d21811cef', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73af92b50f22295265a04bef1feb3bd3a540b826', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f83d59131e055dc1a2f5d4b4a51a5510a5d6b03a', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a37415257224585a61f11a2c6e643a23ba9d724d', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
464097790,Enable release workflow,"@cpretzer @alpeb 

Gcloud auth secret already set
",True,22,https://api.github.com/repos/linkerd/linkerd2-proxy-init/pulls/22,https://github.com/linkerd/linkerd2-proxy-init/pull/22,closed,10,10,1,1,0,0,0,0,[],2020-08-06 15:24:05+00:00,2020-08-06 16:42:55+00:00,4730.0,1:18:50,[],"[{'commit_sha': '3aaa4d0f368c1cdfbdec6756eb94e144d69bfc65', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
464171342,Remove latest tag when pushing image,Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>,True,23,https://api.github.com/repos/linkerd/linkerd2-proxy-init/pulls/23,https://github.com/linkerd/linkerd2-proxy-init/pull/23,closed,0,2,1,1,0,0,0,0,[],2020-08-06 17:37:37+00:00,2020-08-06 17:46:35+00:00,538.0,0:08:58,[],"[{'commit_sha': '4b2243871ac3844b324029dfbb88d9f85c91dbbc', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
446500204,Add multi arch release artifacts,"@cpretzer @olix0r 

Tested in local fork: 
- https://github.com/aliariff/linkerd2-proxy/actions/runs/162476791

Resulting tag:
- https://github.com/aliariff/linkerd2-proxy/releases/tag/release%2Ftest-13

Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>",True,593,https://api.github.com/repos/linkerd/linkerd2-proxy/pulls/593,https://github.com/linkerd/linkerd2-proxy/pull/593,closed,58,6,3,1,3,2,0,0,[],2020-07-08 21:41:51+00:00,2020-07-13 23:04:04+00:00,436933.0,"5 days, 1:22:13",[],"[{'commit_sha': '19b901edc0b74f36295d1bf0c6c653d7784d1ac5', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
379158855,Add spacing in CallToAction banner,"The call to action banner in the control plane page is missing some spacing.

The CSS is defined but not yet used. So the solution is to add the class name to the corresponding banner.

After its merged, the banner will have more space.

Before:
![image](https://user-images.githubusercontent.com/6806035/75182572-fea57080-5740-11ea-874b-d99d1982691a.png)

After:
![image](https://user-images.githubusercontent.com/6806035/75182626-111faa00-5741-11ea-8cb2-7625dd0ea6da.png)


Fixes #3690

Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>
",True,4095,https://api.github.com/repos/linkerd/linkerd2/pulls/4095,https://github.com/linkerd/linkerd2/pull/4095,closed,2,7,1,2,2,2,0,1,[],2020-02-24 18:59:12+00:00,2020-02-27 03:53:27+00:00,204855.0,"2 days, 8:54:15","[{'comment_id': 384710501, 'comment_body': 'This is a great fix, thanks! It looks like there are still two un-used `styles` specifications, `root` and `button`. Would you mind removing those from the component as well before we merge this in?', 'comment_created': datetime.datetime(2020, 2, 26, 19, 23, 35, tzinfo=datetime.timezone.utc), 'commenter': 'scottcarol', 'type': 'User'}, {'comment_id': 384723692, 'comment_body': 'Yes sure', 'comment_created': datetime.datetime(2020, 2, 26, 19, 45, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}]","[{'commit_sha': 'dde7aea5a81b153ae332f3f2b94deedb8f96d496', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5399a51421c4042b425bab14d56acc69e9bb8b2', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
446970368,Fetch proxy with specific arch,"@cpretzer @olix0r 

Problem:
The `linkerd2-proxy` starting to release artifacts in multi-architecture (https://github.com/linkerd/linkerd2-proxy/pull/593). The naming of the release artifacts now included the architecture name. The current proxy fetcher in `linkerd2` repo does not follow that naming convention.

Solution:
Adjust the proxy fetcher to retrieve the `amd64` version for now.

Note:
This PR must be merged after https://github.com/linkerd/linkerd2-proxy/pull/593. And a new release tag will be published for the proxy and adjustment in file `.proxy-version` need to be made.

Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>
",True,4739,https://api.github.com/repos/linkerd/linkerd2/pulls/4739,https://github.com/linkerd/linkerd2/pull/4739,closed,3,3,3,3,1,2,0,0,[],2020-07-09 16:33:51+00:00,2020-07-14 00:48:35+00:00,375284.0,"4 days, 8:14:44","[{'comment_id': 453952398, 'comment_body': 'Is this change actually needed? Where does `jq` get invoked?', 'comment_created': datetime.datetime(2020, 7, 13, 21, 46, 10, tzinfo=datetime.timezone.utc), 'commenter': 'olix0r', 'type': 'User'}, {'comment_id': 453968742, 'comment_body': ""It is called when we don't specify which version to retrieve.\r\nRef: https://github.com/linkerd/linkerd2/blob/main/bin/fetch-proxy#L16"", 'comment_created': datetime.datetime(2020, 7, 13, 22, 10, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}]","[{'commit_sha': 'bc0d869164319466dc51c23c1c996851f0083c4a', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a03c3ab14432f142ce8d9b0a3154e1558e8242c', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbf3c041d4a4ba19b8b9a34b9a85e6de9ef7f75e', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
455317449,CI: Remove Base image,"@cpretzer @alpeb 

Followup to #4765 

- Removing the dependency from `base` image. Same reason with #4773 
- Cleanup some leftover/obsolete documentation in `BUILD.md`
",True,4782,https://api.github.com/repos/linkerd/linkerd2/pulls/4782,https://github.com/linkerd/linkerd2/pull/4782,closed,21,98,9,2,3,7,0,0,[],2020-07-22 19:41:50+00:00,2020-07-23 22:00:13+00:00,94703.0,"1 day, 2:18:23","[{'comment_id': 459069816, 'comment_body': 'Can you please remove this comment? No need to explain the details about the stretch-to-buster upgrade, plus the second sentence doesn\'t make sense. It can be replaced with something like  ""We still rely on old iptables-legacy syntax""\r\n(Same thing for `cni-plugin/Dockerfile`)', 'comment_created': datetime.datetime(2020, 7, 22, 20, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 459090452, 'comment_body': 'Do we not need `curl`, `dnsutils`, `iptables`, `nghttp2` here?', 'comment_created': datetime.datetime(2020, 7, 22, 21, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kleimkuhler', 'type': 'User'}, {'comment_id': 459094037, 'comment_body': 'from @alpeb, `cni-plugin` only need `iptables`', 'comment_created': datetime.datetime(2020, 7, 22, 21, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 459095376, 'comment_body': '👍', 'comment_created': datetime.datetime(2020, 7, 22, 21, 30, 51, tzinfo=datetime.timezone.utc), 'commenter': 'kleimkuhler', 'type': 'User'}, {'comment_id': 459099683, 'comment_body': 'Those are only debugging tools that were provided to the Debug container for convenience, but anyways let me give CNI a test to make sure everything is working as expected...', 'comment_created': datetime.datetime(2020, 7, 22, 21, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 459108130, 'comment_body': 'I confirmed CNI is working as expected :+1: ', 'comment_created': datetime.datetime(2020, 7, 22, 21, 59, 28, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 459108819, 'comment_body': '@alpeb Thanks 🙂', 'comment_created': datetime.datetime(2020, 7, 22, 22, 1, 7, tzinfo=datetime.timezone.utc), 'commenter': 'kleimkuhler', 'type': 'User'}]","[{'commit_sha': '58974a069a8606ec840ea5f2293186d0519c1696', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '120d028868fa15579d7e0c0f6b1c620f058a540e', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
456425802,Build ARM docker images,"@cpretzer @alpeb @kleimkuhler 
These changes enable us to build ARM images.

# Changes:
- Add a new env key `DOCKER_MULTIARCH` and `DOCKER_PUSH`. When set, it will build multi-arch images and push them to the registry. See https://github.com/docker/buildx/issues/59 for why it must be pushed to the registry.
- Usage of `crazy-max/ghaction-docker-buildx ` is necessary as it already configured with the ability to perform cross-compilation (using QEMU) so we can just use it, instead of manually set up it.
- Usage of `buildx` now make default global arguments. (See: https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope)

# Follow-up:
- Releasing the CLI binary file in ARM architecture. The docker images resulting from these changes already build in the ARM arch. Still, we need to make another adjustment like how to retrieve those binaries and to name it correctly as part of Github Release artifacts.",True,4794,https://api.github.com/repos/linkerd/linkerd2/pulls/4794,https://github.com/linkerd/linkerd2/pull/4794,closed,96,46,9,10,7,13,0,1,[],2020-07-24 18:21:51+00:00,2020-08-05 18:14:02+00:00,1036331.0,"11 days, 23:52:11","[{'comment_id': 461063968, 'comment_body': 'Do we still need this key since the name of the key changed, is this `restore-key` still used?', 'comment_created': datetime.datetime(2020, 7, 27, 17, 49, 23, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 461070307, 'comment_body': 'Same comment as above about this key. Will it ever be used?', 'comment_created': datetime.datetime(2020, 7, 27, 18, 0, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 461736683, 'comment_body': ""This has implicit the need of pushing when building for more than one platform (as required per docker/buildx#59). Can you make this more explicit? Like using `--push` only if `DOCKER_PUSH` is set, and `--platform` if `DOCKER_MULTIARCH` is set. And before that, failing with an error if the latter is set while the former isn't (with a comment linking to the buildx issue explaining why we need to do this)."", 'comment_created': datetime.datetime(2020, 7, 28, 17, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 461744089, 'comment_body': ""Since we'll be doing this for release tags only, you can drop the `main` tag from here."", 'comment_created': datetime.datetime(2020, 7, 28, 17, 17, 52, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 461752196, 'comment_body': ""This stage will be ran separately for each arch and `go install` will use that arch, so this is fine. What do you think though about using `ARG TARGETARCH` and passing that to `install-deps`, so it's clearer what's going on, like you did in the stages below?"", 'comment_created': datetime.datetime(2020, 7, 28, 17, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 462279598, 'comment_body': 'It is possible, but then it will result in 3 different `go-deps` layers. It will get reused on their arch only, not across the arch. That is my understanding. LMKWYT', 'comment_created': datetime.datetime(2020, 7, 29, 13, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 462548212, 'comment_body': ""Isn't that stage already producing 3 different layers? This is an extract of the output I see currently:\r\n```\r\n=> CACHED [linux/amd64 go-deps 2/6] WORKDIR /linkerd-build                                                                                                                                                                               0.0s\r\n => CACHED [linux/amd64 go-deps 3/6] COPY go.mod go.sum ./                                                                                                                                                                                0.0s\r\n => CACHED [linux/amd64 go-deps 4/6] COPY bin/install-deps bin/                                                                                                                                                                           0.0s\r\n => CACHED [linux/amd64 go-deps 5/6] RUN go mod download                                                                                                                                                                                  0.0s \r\n => CACHED [linux/amd64 go-deps 6/6] RUN ./bin/install-deps                                                                                                                                                                               0.0s \r\n => CACHED [linux/amd64 golang 1/7] WORKDIR /linkerd-build                                                                                                                                                                                0.0s \r\n => CACHED [linux/amd64 golang 2/7] COPY pkg/flags pkg/flags                                                                                                                                                                              0.0s \r\n => CACHED [linux/amd64 golang 3/7] COPY pkg/tls pkg/tls                                                                                                                                                                                  0.0s \r\n => CACHED [linux/amd64 golang 4/7] COPY pkg/version pkg/version                                                                                                                                                                          0.0s \r\n => CACHED [linux/amd64 go-deps 2/6] WORKDIR /linkerd-build                                                                                                                                                                               0.0s \r\n => CACHED [linux/amd64 go-deps 3/6] COPY go.mod go.sum ./                                                                                                                                                                                0.0s\r\n => CACHED [linux/amd64 go-deps 4/6] COPY bin/install-deps bin/                                                                                                                                                                           0.0s \r\n => CACHED [linux/amd64 go-deps 5/6] RUN go mod download                                                                                                                                                                                  0.0s\r\n => CACHED [linux/amd64 go-deps 6/6] RUN ./bin/install-deps                                                                                                                                                                               0.0s\r\n => CACHED [linux/amd64 golang 1/7] WORKDIR /linkerd-build                                                                                                                                                                                0.0s\r\n => CACHED [linux/amd64 golang 2/7] COPY pkg/flags pkg/flags                                                                                                                                                                              0.0s\r\n => CACHED [linux/amd64 golang 3/7] COPY pkg/tls pkg/tls                                                                                                                                                                                  0.0s\r\n => CACHED [linux/amd64 golang 4/7] COPY pkg/version pkg/version                                                                                                                                                                          0.0s\r\n => [linux/amd64 golang 5/7] RUN CGO_ENABLED=0 GOOS=linux GOARCH=arm go build -mod=readonly ./pkg/...                                                                                                                                     5.0s\r\n => [linux/amd64 golang 5/7] RUN CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -mod=readonly ./pkg/...                                                                                                                                   4.9s\r\n => CACHED [linux/amd64 go-deps 2/6] WORKDIR /linkerd-build                                                                                                                                                                               0.0s\r\n => CACHED [linux/amd64 go-deps 3/6] COPY go.mod go.sum ./                                                                                                                                                                                0.0s\r\n => CACHED [linux/amd64 go-deps 4/6] COPY bin/install-deps bin/                                                                                                                                                                           0.0s\r\n => CACHED [linux/amd64 go-deps 5/6] RUN go mod download                                                                                                                                                                                  0.0s\r\n => CACHED [linux/amd64 go-deps 6/6] RUN ./bin/install-deps\r\n```\r\n`go-deps` is running 3 times, with the same base `linux/amd64`, but I think each run is for each different arch. Which is fine since the ensuing `golang` stage requires a `go` cache built for each one of the archs."", 'comment_created': datetime.datetime(2020, 7, 29, 19, 51, 33, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 465883416, 'comment_body': 'This key already removed. Could you refresh again the PR?', 'comment_created': datetime.datetime(2020, 8, 5, 17, 19, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 465892538, 'comment_body': ""disregard this. I wrote this a couple of weeks ago and didn't submit it"", 'comment_created': datetime.datetime(2020, 8, 5, 17, 36, 5, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 465892591, 'comment_body': ""disregard this. I wrote this a couple of weeks ago and didn't submit it"", 'comment_created': datetime.datetime(2020, 8, 5, 17, 36, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 465904038, 'comment_body': ""Is there a specific reason `DOCKER_PUSH` exists if it's always needed when `DOCKER_MULTIARCH` is set?\r\n\r\nFor example, if we only set `DOCKER_MULTIARCH=1` in `release.yml`, then we would just always append ` --push` to `output_params`.\r\n\r\nFrom what I can tell, we don't check for `DOCKER_PUSH` in any other case, so it seems like it's a variable that has to be set for no specific reason."", 'comment_created': datetime.datetime(2020, 8, 5, 17, 56, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kleimkuhler', 'type': 'User'}, {'comment_id': 465910346, 'comment_body': 'the reason is to make it to be more explicit, as @alpeb suggested in his [comment](https://github.com/linkerd/linkerd2/pull/4794#discussion_r461736683)', 'comment_created': datetime.datetime(2020, 8, 5, 18, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 465911607, 'comment_body': ""Ah okay that makes sense. I'm good with being more explicit 👍"", 'comment_created': datetime.datetime(2020, 8, 5, 18, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'kleimkuhler', 'type': 'User'}]","[{'commit_sha': 'aec805083499ca34b4be9c3018300c28c5e43b1a', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ecbff16b85f45d6fcea6b57ba3d827f75038948', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9d0afcf070fd2f298ccc67012f96db64d1b51abe', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea95a6bf549d341d8be7c2f00e31e5eceb5ed0df', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2ec517db35c16b3f47a5b16c026e8dcc5e81628', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18c6f81c8601c0941b65f8adee61d8b658d4c838', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3f4d8c505acbf0b6028827b22d0890ce4654c6c', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dcfcc92d05e4a172ba1832b86877bb648e6804a', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93384760b363c505f21a5a1695b2d1dc0eb03634', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7568f83ec7779769b6d9a8f95f9d85576803f091', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
463574648,Release ARM CLI artifacts,"@cpretzer @alpeb @kleimkuhler 

# Changes
- Only push single docker image arch `amd64` for `cli-bin`. Inside that image, it will consist of multiple architecture binary files. It used the multi-stage build pattern to produce those binaries. [Ref](https://medium.com/@tonistiigi/advanced-multi-stage-build-patterns-6f741b852fae)
- Add the arch name on the binary filename.

# TODO
- [x] Adjust the installer script in https://github.com/linkerd/website

# Note
- Installer script for brew formula does not need a change, because it builds the binary directly instead of download the existing binary. [Brew Formula](https://github.com/Homebrew/homebrew-core/blob/master/Formula/linkerd.rb)

Manual tested in a local fork. https://github.com/aliariff/linkerd2/releases/tag/stable-test",True,4841,https://api.github.com/repos/linkerd/linkerd2/pulls/4841,https://github.com/linkerd/linkerd2/pull/4841,closed,49,17,7,3,2,0,0,1,[],2020-08-05 18:44:54+00:00,2020-08-11 14:26:00+00:00,502866.0,"5 days, 19:41:06",[],"[{'commit_sha': '9cdf4927e2d80d298be2a149f8a47aa3294a1893', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22f8aee99d73c73d78af4e3295c3a4aa3e62977f', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7fc5577d3487860f74e8c71992bb724a8052a41', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
467354864,Fix build-cli-bin,"@kleimkuhler @cpretzer @alpeb 

Fixes #4868

Related to https://github.com/linkerd/linkerd2/pull/4867
",True,4876,https://api.github.com/repos/linkerd/linkerd2/pulls/4876,https://github.com/linkerd/linkerd2/pull/4876,closed,26,0,1,2,1,0,0,0,[],2020-08-13 12:32:07+00:00,2020-08-13 16:21:15+00:00,13748.0,3:49:08,[],"[{'commit_sha': '1004339d74108af2452f6015ecd0f616e43cf874', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a90211ba0918359978d0e4168b0f95f25d9076e6', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
467633613,Remove duplication on arch detection,"@kleimkuhler @alpeb @cpretzer 

# Changes
- Move the os architecture detection to another file, avoid duplication",True,4880,https://api.github.com/repos/linkerd/linkerd2/pulls/4880,https://github.com/linkerd/linkerd2/pull/4880,closed,57,71,3,2,0,5,0,0,[],2020-08-13 21:06:31+00:00,2020-08-14 14:59:53+00:00,64402.0,17:53:22,"[{'comment_id': 470252977, 'comment_body': 'I know I worded this differently before, but maybe ""unsupported"" is better here? We know the architecture, it\'s just not supported.\r\n\r\n```suggestion\r\n          echo ""unsupported architecture: $arch"" >&2\r\n```', 'comment_created': datetime.datetime(2020, 8, 13, 21, 15, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kleimkuhler', 'type': 'User'}, {'comment_id': 470253078, 'comment_body': 'Similar comment about using ""unsupported""', 'comment_created': datetime.datetime(2020, 8, 13, 21, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'kleimkuhler', 'type': 'User'}, {'comment_id': 470253574, 'comment_body': ""Do we need to set this if it's only used in the `Linux` case and gets set right away by `arch=$(unman -m)`?"", 'comment_created': datetime.datetime(2020, 8, 13, 21, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kleimkuhler', 'type': 'User'}, {'comment_id': 470255897, 'comment_body': 'Yes this one is necessary. Because if we remove it, when it is not Linux, then it will throw error `arch: unbound variable` on `if [ -n ""$arch"" ]; then`', 'comment_created': datetime.datetime(2020, 8, 13, 21, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 470258972, 'comment_body': ""Oh okay yea I wasn't sure if `-n` would evaluate to false when it wasn't set _or_ unbound. Thanks!"", 'comment_created': datetime.datetime(2020, 8, 13, 21, 27, 48, tzinfo=datetime.timezone.utc), 'commenter': 'kleimkuhler', 'type': 'User'}]","[{'commit_sha': 'becb1ccd81311ae7b38865c781dfe9baf71ff994', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e580dcbc51dd7d5202a4710a8bb34212e36096b1', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
471167832,Add ARM64 Integration Test,"@cpretzer @alpeb 

# Changes
- Add `arm64_integration_tests` job in the release workflow
- Skip tracing test, because the OpenCensus collector and Jaeger images do not support ARM yet
- Skip `helm-upgrade` and `upgrade-stable` test because the Linkerd stable version does not support ARM yet
- Bump the version of the images that used for testing purposes to version that support ARM

# Note
- Before merging this, it is required to provision an ARM64 machine and also setup Kubernetes on it. Then set a new secret in Github called `ARM64_KUBECONFIG` with the kubeconfig credential from the ARM64 machine.


Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>
",True,4897,https://api.github.com/repos/linkerd/linkerd2/pulls/4897,https://github.com/linkerd/linkerd2/pull/4897,closed,174,120,65,5,0,6,0,1,[],2020-08-20 18:30:56+00:00,2020-08-28 17:38:41+00:00,688065.0,"7 days, 23:07:45","[{'comment_id': 475903956, 'comment_body': 'What do you think of naming this something more descriptive like `RUN_ARM_TEST`', 'comment_created': datetime.datetime(2020, 8, 24, 21, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 478645904, 'comment_body': '`id: install_cli` along with `echo ""::set-output name=tag::$TAG""` is used so that another step can refer to the tag using `steps.install_cli.output.tag`. It\'s not used here, so you can remove that id and this statement.', 'comment_created': datetime.datetime(2020, 8, 27, 19, 27, 53, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 478653675, 'comment_body': ""The VM gets discarded when the jobs finishes, so there's no point on manually cleaning things up."", 'comment_created': datetime.datetime(2020, 8, 27, 19, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 478687778, 'comment_body': 'I think we plan to reuse the same machine, we are not going to provision the machine everytime release happen, or do we?', 'comment_created': datetime.datetime(2020, 8, 27, 20, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 478696195, 'comment_body': 'gotcha, makes sense :+1: ', 'comment_created': datetime.datetime(2020, 8, 27, 21, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'alpeb', 'type': 'User'}, {'comment_id': 478758320, 'comment_body': ""Yep, that's right, because we would have to install k3s every time, which would dramatically increase test times."", 'comment_created': datetime.datetime(2020, 8, 27, 23, 58, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}]","[{'commit_sha': '06934aebb306fa87cf5f46532d0f84a018366cda', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '004e7832fde84bdf78bbe05865660490bcfe4849', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5da4f2978893d282ad3352438f9d13a1bff57b09', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37fa73d5e6615684a56176cbc593b3e24dc1f9f1', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77460bb88bf853d5799da8d968d95026c8ada525', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
463622972,Support ARM CLI,"# Changes
- Add checking the machine arch for an arm machine and download the correct binary file.

Merge before https://github.com/linkerd/linkerd2/pull/4841
",True,785,https://api.github.com/repos/linkerd/website/pulls/785,https://github.com/linkerd/website/pull/785,closed,66,6,2,6,4,0,0,2,[],2020-08-05 20:22:57+00:00,2020-08-07 15:47:39+00:00,156282.0,"1 day, 19:24:42",[],"[{'commit_sha': '49db3b5aabeb9b5b353c70c8e49e2c6abad66940', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3ef236c533547de668b4f4cd144c08a3ebec3c4', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd79935e1edd39e1c4dcca34f1f9c73cf734ddce1', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa02bd5501edd13c7426ea23120544f013e8b95e', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '228d276ddd5d4f9e3d49652a55ffbc9bae3b5b96', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef6437b30c63503834c131add56c7d6dbd7a3536', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
467361534,Remove fallback script for install-edge,"@cpretzer @alpeb 

As the [edge](https://github.com/linkerd/linkerd2/releases/tag/edge-20.8.1) release now already support multi-arch.
These fallback scripts are not necessary anymore, therefore we remove it.
We will do the same for the `install` script when the stable release is published.",True,796,https://api.github.com/repos/linkerd/website/pulls/796,https://github.com/linkerd/website/pull/796,closed,3,16,1,1,0,0,0,0,[],2020-08-13 12:45:13+00:00,2020-08-13 18:15:53+00:00,19840.0,5:30:40,[],"[{'commit_sha': '7a12a2938e3319952e938cf85a0ec3716b8dbd34', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
466764039,Support multiarch,"@cpretzer @alpeb 

Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>",True,260,https://api.github.com/repos/linkerd/linkerd-examples/pulls/260,https://github.com/linkerd/linkerd-examples/pull/260,closed,25,4,2,2,0,1,0,0,[],2020-08-12 13:14:48+00:00,2020-08-12 23:25:50+00:00,36662.0,10:11:02,"[{'comment_id': 469524787, 'comment_body': 'This is looking good @aliariff \r\n\r\nCan you add a note and commands here to create the multiarch builder image? Something like what we have here: https://github.com/linkerd/linkerd2-proxy-init/blob/master/Makefile#L73', 'comment_created': datetime.datetime(2020, 8, 12, 20, 33, 36, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}]","[{'commit_sha': '1585a5118979bb4435dcee5948a8de10870973bb', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54beb600987db15c44858cad3b53a0da1a2d0a59', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
467602050,Support multi-arch,"@cpretzer @alpeb 

# Changes

- Create `Dockerfile-multi-arch` with purpose build multi-arch images using multi-stage builds
- New target in Makefile `make multi-arch` to build & push multi-arch images
- Adjust the README instruction on how to release

# Follow-up
- Bump the version to `v11` after this PR merged and the `v11` tag is published in docker hub registry",True,93,https://api.github.com/repos/BuoyantIO/emojivoto/pulls/93,https://github.com/BuoyantIO/emojivoto/pull/93,closed,94,31,4,6,1,20,0,0,[],2020-08-13 19:54:56+00:00,2020-08-25 21:41:59+00:00,1043223.0,"12 days, 1:47:03","[{'comment_id': 473599466, 'comment_body': 'It looks like we use `build-$svc_name` in line 32. Do we need to have `FROM` statement for each of the services in this file?', 'comment_created': datetime.datetime(2020, 8, 20, 5, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 474192820, 'comment_body': 'yes. this is the real definition of each svc.\r\nthe `FROM build-$svc_name ` is just a placeholder, when it is on runtime, it will be compiled to the real svc name, for example to `emojivoto-web ` then it will use the `FROM golang as build-emojivoto-web `.\r\nKind of pattern matching style', 'comment_created': datetime.datetime(2020, 8, 20, 18, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 474554700, 'comment_body': 'Is there specific functionality in bullseye needed, or could it be a safer choice to use buster?\r\nFurthermore, would a more specific version such as e.g. bullseye-20200803 or buster-20200803 not be a safer bet than bleeding edge?', 'comment_created': datetime.datetime(2020, 8, 21, 9, 6, 29, tzinfo=datetime.timezone.utc), 'commenter': 'joakimr-axis', 'type': 'User'}, {'comment_id': 474555494, 'comment_body': '""arent"" should probably be ""are not"" or ""arent\'t""', 'comment_created': datetime.datetime(2020, 8, 21, 9, 7, 19, tzinfo=datetime.timezone.utc), 'commenter': 'joakimr-axis', 'type': 'User'}, {'comment_id': 474565635, 'comment_body': ""Wouldn't it be better to do\r\n\r\n```\r\nWORKDIR /usr/local/bin\r\nENTRYPOINT $SVC_NAME\r\n\r\n```\r\nor even\r\n\r\n```\r\nWORKDIR /usr/local/bin\r\nCMD $SVC_NAME\r\n```\r\n\r\nHaving a `cd` in the ENTRYPOINT doesn't seem that appealing, IMO."", 'comment_created': datetime.datetime(2020, 8, 21, 9, 19, tzinfo=datetime.timezone.utc), 'commenter': 'joakimr-axis', 'type': 'User'}, {'comment_id': 474566650, 'comment_body': 'You might want to add a line with\r\n\r\n`ARG DEBIAN_FRONTEND=noninteractive`\r\n', 'comment_created': datetime.datetime(2020, 8, 21, 9, 20, 4, tzinfo=datetime.timezone.utc), 'commenter': 'joakimr-axis', 'type': 'User'}, {'comment_id': 474567625, 'comment_body': 'You have buster here and bullseye for other parts. I reckon it might be more coherent to stick to a single Debian release.', 'comment_created': datetime.datetime(2020, 8, 21, 9, 21, 7, tzinfo=datetime.timezone.utc), 'commenter': 'joakimr-axis', 'type': 'User'}, {'comment_id': 474875679, 'comment_body': 'nice suggestion. but this one is more like an exact copy of https://github.com/BuoyantIO/emojivoto/blob/main/Dockerfile-base\r\nwe could definitely change this to buster and have the strict versioning there.\r\nwhat do you think @cpretzer ?', 'comment_created': datetime.datetime(2020, 8, 21, 19, 5, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 474876474, 'comment_body': 'This is also an exact copy of https://github.com/BuoyantIO/emojivoto/blob/main/Dockerfile\r\nBut I agree with you, will change this one.', 'comment_created': datetime.datetime(2020, 8, 21, 19, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 474878014, 'comment_body': 'yeah, this one not really significant because it is just used as a builder image stage.\r\nthe runtime image which using `bullseye` might be something that needs to reconsider.', 'comment_created': datetime.datetime(2020, 8, 21, 19, 10, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 474884154, 'comment_body': 'you mean to set it as ENV variable right?', 'comment_created': datetime.datetime(2020, 8, 21, 19, 18, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 474934454, 'comment_body': 'Oh, sorry @aliariff, I see that now; it was not my intention to put blame on you regarding that. But I do agree with your question to @cpretzer since it might be a good thing (and also in line with how the linkerd2 Dockerfiles are set up).', 'comment_created': datetime.datetime(2020, 8, 21, 20, 20, 23, tzinfo=datetime.timezone.utc), 'commenter': 'joakimr-axis', 'type': 'User'}, {'comment_id': 474935533, 'comment_body': 'Actually, no, I meant ARG for this use in build-time only; were apt to be run interactively in the resulting image afterwards, one would probably not want to have `noninteractive` set in the environment.', 'comment_created': datetime.datetime(2020, 8, 21, 20, 21, 43, tzinfo=datetime.timezone.utc), 'commenter': 'joakimr-axis', 'type': 'User'}, {'comment_id': 474939716, 'comment_body': 'No worries 😄 ', 'comment_created': datetime.datetime(2020, 8, 21, 20, 26, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 474944124, 'comment_body': ""but then if we want to use an `ARG` we need to pass it as `--build-arg` when building it, in which we don't have that currently on the [Makefile](https://github.com/BuoyantIO/emojivoto/pull/93/files#diff-54428ee6e5a953f611b2d75d1baaa0f6R22-R23). And it is not configurable or overrides it when calling `make multi-arch`.\r\nCurrently, I just put it as an ENV var inline\r\n`RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y protobuf-compiler`"", 'comment_created': datetime.datetime(2020, 8, 21, 20, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 474979669, 'comment_body': 'The beauty of it is that you can set a commandline value to the ARG if you want to, but if you do not, it will use the default value (which is what we want). And it will not be present in runtime for the resulting container. You can try that out with a very simple test Docker file such as\r\n\r\n```\r\nFROM alpine\r\nARG foo=something\r\nRUN echo Our arg is $foo\r\n```\r\n\r\nBuild that with no build args and the echo line will be\r\n\r\n_Our arg is something_\r\n\r\nHaving it inline is of course a good solution too, given that the apt-get command is used once. In the line above, the DEBIAN_FRONTEND will only be set for the first apt-get command, would it not?\r\n', 'comment_created': datetime.datetime(2020, 8, 21, 21, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'joakimr-axis', 'type': 'User'}, {'comment_id': 474982854, 'comment_body': ""Yes, but currently we don't see any urgency to make it configurable when building it, it is a builder image and only live while building anyway. and putting is as always silent won't be hurt I think.\r\n\r\n> Having it inline is of course a good solution too, given that the apt-get command is used once. In the line above, the DEBIAN_FRONTEND will only be set for the first apt-get command, would it not?\r\n\r\nYes, it only used once on that line, that's why I think it will be much simpler if we just put it as inline ENV."", 'comment_created': datetime.datetime(2020, 8, 21, 21, 44, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 474999022, 'comment_body': ""> \r\n> Yes, it only used once on that line\r\n\r\nBut you would have to use either\r\n\r\n`RUN DEBIAN_FRONTEND=noninteractive apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y protobuf-compiler\r\n`\r\nor\r\n\r\n`RUN export DEBIAN_FRONTEND=noninteractive && apt-get update && apt-get install -y `\r\n\r\nto make both apt-get calls get the `noninteractive` setting, wouldn't you?"", 'comment_created': datetime.datetime(2020, 8, 21, 22, 41, 7, tzinfo=datetime.timezone.utc), 'commenter': 'joakimr-axis', 'type': 'User'}, {'comment_id': 475090036, 'comment_body': ""actually I don't see any difference whether we put `DEBIAN_FRONTEND=noninteractive` or not. Because basically there is no interaction anyway while installing the `protobuf-compiler` \r\nI think we can just remove `DEBIAN_FRONTEND=noninteractive` entirely\r\n\r\n![image](https://user-images.githubusercontent.com/6806035/90956982-6720a080-e48b-11ea-8a3c-a94e2e0bc763.png)\r\n\r\n![image](https://user-images.githubusercontent.com/6806035/90956986-6be55480-e48b-11ea-85c4-2d8f499824e2.png)\r\n"", 'comment_created': datetime.datetime(2020, 8, 22, 13, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aliariff', 'type': 'User'}, {'comment_id': 475940868, 'comment_body': ""Yeah, it's a good idea to use `buster`."", 'comment_created': datetime.datetime(2020, 8, 24, 23, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}]","[{'commit_sha': '4f138dd7f4cce0dc491c75780c8d954f00c758f0', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67dd8e4089439a28a925fa9e5b4b03e04ffa2dc4', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4deb76ee79b5efd5ec7fc0af317f82ec980b446e', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27effdeb8a5b15ad2e5c6dde1b8ac5221d22c8fd', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f4e75e0c3cf437822e410791c3b8c2ac2c6fafc', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2beb5af8e701fd7000687cbc423ae9933be75071', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
466742360,Support multi-arch,"@cpretzer @alpeb 

Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>",False,17,https://api.github.com/repos/BuoyantIO/bb/pulls/17,https://github.com/BuoyantIO/bb/pull/17,open,34,5,2,3,0,2,0,0,[],2020-08-12 12:34:47+00:00,,0.0,,"[{'comment_id': 469579958, 'comment_body': ""What do you think of moving the `&&` to the same line as `rm -rf`, like we had [here](https://github.com/linkerd/linkerd2/blob/stable-2.7.1/Dockerfile-base#L15)? For me it's more readable, but take it or leave it"", 'comment_created': datetime.datetime(2020, 8, 12, 22, 23, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}, {'comment_id': 469580140, 'comment_body': 'Can you add a note and commands here to create the multiarch builder image? Something like what we have here: https://github.com/linkerd/linkerd2-proxy-init/blob/master/Makefile#L73', 'comment_created': datetime.datetime(2020, 8, 12, 22, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}]","[{'commit_sha': 'b6cbd99bfa26240fbee56acbeaa166517ae91036', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99355b919b16c5947825cf4734868a085e6d8d01', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd231c18850aa90a8fee271881e7cbfa789c75730', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18
466752946,Support multiarch,"@cpretzer @alpeb 

Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>",False,72,https://api.github.com/repos/BuoyantIO/slow_cooker/pulls/72,https://github.com/BuoyantIO/slow_cooker/pull/72,open,23,3,2,2,0,1,0,0,[],2020-08-12 12:55:09+00:00,,0.0,,"[{'comment_id': 469582734, 'comment_body': 'Can you add a note and commands here to create the multiarch builder image? Something like what we have here: https://github.com/linkerd/linkerd2-proxy-init/blob/master/Makefile#L73', 'comment_created': datetime.datetime(2020, 8, 12, 22, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'cpretzer', 'type': 'User'}]","[{'commit_sha': '88473ada77ec387c922026764234c1fafc599604', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cf23ff441b7cf3fcf6f7ed68e4a5483c2ea89d2', 'committer_username': 'aliariff', 'committer_name': 'Ali Ariff', 'committer_email': None, 'commit_date': datetime.datetime(2014, 2, 27, 14, 55, 55, tzinfo=datetime.timezone.utc)}]",Ali Ariff,6806035,,User,,45,,0,18

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
239599589,gsoc,linkerd/gsoc,,6,4,10,5,48,0,2,0,"[{'id': 378729656, 'number': 1, 'closed': datetime.datetime(2020, 5, 4, 18, 1, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 23, 17, 23, 20, tzinfo=datetime.timezone.utc), 'time_taken': 6136712.0, 'time_delta': '71 days, 0:38:32', 'additions': 273, 'deletions': 0, 'state': 'closed'}]"
186470997,linkerd2-proxy-init,linkerd/linkerd2-proxy-init,Go,30,36,15,39,419,17,28,17,"[{'id': 464171342, 'number': 23, 'closed': datetime.datetime(2020, 8, 6, 17, 46, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 17, 37, 37, tzinfo=datetime.timezone.utc), 'time_taken': 538.0, 'time_delta': '0:08:58', 'additions': 0, 'deletions': 2, 'state': 'closed'}, {'id': 464097790, 'number': 22, 'closed': datetime.datetime(2020, 8, 6, 16, 42, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 6, 15, 24, 5, tzinfo=datetime.timezone.utc), 'time_taken': 4730.0, 'time_delta': '1:18:50', 'additions': 10, 'deletions': 10, 'state': 'closed'}, {'id': 452021506, 'number': 20, 'closed': datetime.datetime(2020, 7, 18, 16, 39, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 18, 16, 39, 23, tzinfo=datetime.timezone.utc), 'time_taken': 15.0, 'time_delta': '0:00:15', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 446140234, 'number': 18, 'closed': datetime.datetime(2020, 9, 2, 17, 36, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 10, 15, 48, tzinfo=datetime.timezone.utc), 'time_taken': 4864867.0, 'time_delta': '56 days, 7:21:07', 'additions': 57, 'deletions': 1, 'state': 'closed'}, {'id': 433923045, 'number': 15, 'closed': datetime.datetime(2020, 6, 23, 19, 39, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 23, 34, 43, tzinfo=datetime.timezone.utc), 'time_taken': 936266.0, 'time_delta': '10 days, 20:04:26', 'additions': 59, 'deletions': 15, 'state': 'closed'}, {'id': 433852804, 'number': 14, 'closed': datetime.datetime(2020, 6, 17, 17, 34, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 12, 19, 37, 15, tzinfo=datetime.timezone.utc), 'time_taken': 424640.0, 'time_delta': '4 days, 21:57:20', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 431959058, 'number': 12, 'closed': datetime.datetime(2020, 6, 30, 17, 6, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 9, 17, 28, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1813077.0, 'time_delta': '20 days, 23:37:57', 'additions': 96, 'deletions': 8, 'state': 'closed'}, {'id': 427925600, 'number': 11, 'closed': datetime.datetime(2020, 6, 12, 19, 19, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 4, 15, 38, 15, tzinfo=datetime.timezone.utc), 'time_taken': 704451.0, 'time_delta': '8 days, 3:40:51', 'additions': 100, 'deletions': 5, 'state': 'closed'}]"
140121383,linkerd2-proxy,linkerd/linkerd2-proxy,Rust,265,1965,37,53,2849,12,56,12,"[{'id': 446500204, 'number': 593, 'closed': datetime.datetime(2020, 7, 13, 23, 4, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 8, 21, 41, 51, tzinfo=datetime.timezone.utc), 'time_taken': 436933.0, 'time_delta': '5 days, 1:22:13', 'additions': 58, 'deletions': 6, 'state': 'closed'}]"
113106184,linkerd2,linkerd/linkerd2,Go,1268,10539,194,364,7060,236,188,26,"[{'id': 471167832, 'number': 4897, 'closed': datetime.datetime(2020, 8, 28, 17, 38, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 20, 18, 30, 56, tzinfo=datetime.timezone.utc), 'time_taken': 688065.0, 'time_delta': '7 days, 23:07:45', 'additions': 174, 'deletions': 120, 'state': 'closed'}, {'id': 467633613, 'number': 4880, 'closed': datetime.datetime(2020, 8, 14, 14, 59, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 21, 6, 31, tzinfo=datetime.timezone.utc), 'time_taken': 64402.0, 'time_delta': '17:53:22', 'additions': 57, 'deletions': 71, 'state': 'closed'}, {'id': 467354864, 'number': 4876, 'closed': datetime.datetime(2020, 8, 13, 16, 21, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 12, 32, 7, tzinfo=datetime.timezone.utc), 'time_taken': 13748.0, 'time_delta': '3:49:08', 'additions': 26, 'deletions': 0, 'state': 'closed'}, {'id': 463574648, 'number': 4841, 'closed': datetime.datetime(2020, 8, 11, 14, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 18, 44, 54, tzinfo=datetime.timezone.utc), 'time_taken': 502866.0, 'time_delta': '5 days, 19:41:06', 'additions': 49, 'deletions': 17, 'state': 'closed'}, {'id': 456425802, 'number': 4794, 'closed': datetime.datetime(2020, 8, 5, 18, 14, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 24, 18, 21, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1036331.0, 'time_delta': '11 days, 23:52:11', 'additions': 96, 'deletions': 46, 'state': 'closed'}, {'id': 455317449, 'number': 4782, 'closed': datetime.datetime(2020, 7, 23, 22, 0, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 19, 41, 50, tzinfo=datetime.timezone.utc), 'time_taken': 94703.0, 'time_delta': '1 day, 2:18:23', 'additions': 21, 'deletions': 98, 'state': 'closed'}, {'id': 455297811, 'number': 4781, 'closed': datetime.datetime(2020, 7, 22, 19, 27, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 22, 19, 0, 51, tzinfo=datetime.timezone.utc), 'time_taken': 1617.0, 'time_delta': '0:26:57', 'additions': 23, 'deletions': 98, 'state': 'closed'}, {'id': 446970368, 'number': 4739, 'closed': datetime.datetime(2020, 7, 14, 0, 48, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 9, 16, 33, 51, tzinfo=datetime.timezone.utc), 'time_taken': 375284.0, 'time_delta': '4 days, 8:14:44', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 379158855, 'number': 4095, 'closed': datetime.datetime(2020, 2, 27, 3, 53, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 24, 18, 59, 12, tzinfo=datetime.timezone.utc), 'time_taken': 204855.0, 'time_delta': '2 days, 8:54:15', 'additions': 2, 'deletions': 7, 'state': 'closed'}, {'id': 299667123, 'number': 3115, 'closed': datetime.datetime(2020, 2, 7, 19, 29, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 7, 21, 21, 37, 51, tzinfo=datetime.timezone.utc), 'time_taken': 17358703.0, 'time_delta': '200 days, 21:51:43', 'additions': 118, 'deletions': 120, 'state': 'closed'}]"
145036690,website,linkerd/website,JavaScript,209,42,19,191,1492,144,11,10,"[{'id': 873230467, 'number': 1320, 'closed': datetime.datetime(2022, 3, 7, 19, 15, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 7, 15, 12, 25, tzinfo=datetime.timezone.utc), 'time_taken': 14575.0, 'time_delta': '4:02:55', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 508542549, 'number': 831, 'closed': datetime.datetime(2020, 11, 6, 19, 55, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 10, 22, 20, 31, 47, tzinfo=datetime.timezone.utc), 'time_taken': 1293827.0, 'time_delta': '14 days, 23:23:47', 'additions': 3, 'deletions': 16, 'state': 'closed'}, {'id': 467361534, 'number': 796, 'closed': datetime.datetime(2020, 8, 13, 18, 15, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 12, 45, 13, tzinfo=datetime.timezone.utc), 'time_taken': 19840.0, 'time_delta': '5:30:40', 'additions': 3, 'deletions': 16, 'state': 'closed'}, {'id': 463622972, 'number': 785, 'closed': datetime.datetime(2020, 8, 7, 15, 47, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 5, 20, 22, 57, tzinfo=datetime.timezone.utc), 'time_taken': 156282.0, 'time_delta': '1 day, 19:24:42', 'additions': 66, 'deletions': 6, 'state': 'closed'}]"
54868666,linkerd-examples,linkerd/linkerd-examples,Go,221,429,33,45,353,25,42,3,"[{'id': 466764039, 'number': 260, 'closed': datetime.datetime(2020, 8, 12, 23, 25, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 12, 13, 14, 48, tzinfo=datetime.timezone.utc), 'time_taken': 36662.0, 'time_delta': '10:11:02', 'additions': 25, 'deletions': 4, 'state': 'closed'}]"
112417276,emojivoto,BuoyantIO/emojivoto,Go,154,195,10,28,174,19,24,9,"[{'id': 467602050, 'number': 93, 'closed': datetime.datetime(2020, 8, 25, 21, 41, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 19, 54, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1043223.0, 'time_delta': '12 days, 1:47:03', 'additions': 94, 'deletions': 31, 'state': 'closed'}]"
126229555,bb,BuoyantIO/bb,Go,7,27,11,7,43,1,1,1,"[{'id': 466742360, 'number': 17, 'closed': None, 'created': datetime.datetime(2020, 8, 12, 12, 34, 47, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 34, 'deletions': 5, 'state': 'open'}]"
58234165,slow_cooker,BuoyantIO/slow_cooker,Go,29,323,14,11,115,9,9,3,"[{'id': 466752946, 'number': 72, 'closed': None, 'created': datetime.datetime(2020, 8, 12, 12, 55, 9, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 23, 'deletions': 3, 'state': 'open'}]"
