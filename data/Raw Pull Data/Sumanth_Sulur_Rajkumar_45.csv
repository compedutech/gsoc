pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
998234492,Numbers 188.refactor complex log function,"This PR refactors Complex class using functional interfaces and static methods. 
This allows reuse of the refactored static functions for Operations on List/Matrices of Complex Numbers (NUMBERS-186)

The changes retain binary backward compatibility.

Summary of changes

1) Introduced following interfaces  for Complex Number Operations

 ComplexUnaryOperator - unary operations on complex number represented as double real and imaginary parts
 ComplexConstructor - interface to create a generic complex result from double real and imaginary parts

2) As a first step, refactored log and log10 instance methods of Complex class as static functions in ComplexFunctions
The static functions use the functional interface signatures described above

",False,117,https://api.github.com/repos/apache/commons-numbers/pulls/117,https://github.com/apache/commons-numbers/pull/117,closed,1393,633,11,11,2,93,0,0,[],2022-07-15 21:57:56+00:00,2022-07-20 10:51:16+00:00,392000.0,"4 days, 12:53:20","[{'comment_id': 922645866, 'comment_body': 'This method is an internal method used in atanh. It should not be refactored within this PR and should not be public in ComplexFunctions.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 27, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922646042, 'comment_body': 'Add a TODO note to this method to remove it in future refactoring. IIUC it is only used in one place if all the functions are moved to ComplexFunctions (the remaining call site is in the ofPolar constructor).', 'comment_created': datetime.datetime(2022, 7, 16, 7, 30, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922647141, 'comment_body': 'This javadoc requires improvement. ComplexDouble does not exist. For example:\r\n\r\n```\r\n * Represents a unary operation on a Cartesian form of a complex number \\( a + ib \\)\r\n * where \\( a \\) and \\( b \\) are real numbers represented as two {@code double}\r\n * parts. The operation creates a complex number result; the result is supplied\r\n * to a terminating consumer function which may return an object representation\r\n * of the complex result.\r\n * \r\n * <p>This is a functional interface whose functional method is\r\n * {@link #apply(double, double, ComplexConstructor)}.\r\n * \r\n * @param <R> The type of the complex result\r\n * @since 1.1\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 7, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922647147, 'comment_body': 'Remove trailing line', 'comment_created': datetime.datetime(2022, 7, 16, 7, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922647210, 'comment_body': 'Javadoc style for [numbers] is to avoid using `The` for all arguments and have a trailing period `.` The argument descriptions should be improved. Please try and wrap the javadoc to 100 characters. Look through the rest of Complex for reference.\r\n\r\n```\r\n... Real part \\( a \\) of the complex number \\(a +ib \\).\r\n... Imaginary part \\( b \\) of the complex number \\(a +ib \\).\r\n... Terminating consumer for the complex result, used to construct a result of type {@code R}.\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 7, 42, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922647729, 'comment_body': 'double space after `,  `', 'comment_created': datetime.datetime(2022, 7, 16, 7, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922648056, 'comment_body': 'Message here should reflect the static API :\r\n```\r\n() -> name + ""("" + c + ""): real""\r\n```\r\n\r\nThe assertion should not use the `maxUlps`. The methods should produce the exact same result', 'comment_created': datetime.datetime(2022, 7, 16, 7, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922648079, 'comment_body': 'In the case of many arguments I would wrap the trailing line with an indent of 8 characters.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922648216, 'comment_body': 'Here either compact the trailing arguments or put `maxUlps` on a new line with the same alignment. For only 4 arguments I would do the later.', 'comment_created': datetime.datetime(2022, 7, 16, 7, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922648351, 'comment_body': 'each argument on a new line', 'comment_created': datetime.datetime(2022, 7, 16, 7, 56, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922648365, 'comment_body': 'Each argument on a new line', 'comment_created': datetime.datetime(2022, 7, 16, 7, 56, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922648609, 'comment_body': 'You do not test `c3` is binary equal to `c1`. You do not test it at all.\r\n\r\nI would move the usage of operation2 below the test code for operation1. The first part on operation1 will test the conjugate equality.\r\n\r\nThen operation2 must output the same as `c1` and `c2` (when applied to the conjugate), i.e. `c1 == c3` and `c2 == c4`.\r\n', 'comment_created': datetime.datetime(2022, 7, 16, 7, 59, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922648681, 'comment_body': 'expected on a new line. It should be after operation2.\r\n\r\nFor consistency rename operation to operation1. Do this for all methods that have the two operations.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 0, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922648798, 'comment_body': 'sign on a new line', 'comment_created': datetime.datetime(2022, 7, 16, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922648870, 'comment_body': '`@param` has a leading double space', 'comment_created': datetime.datetime(2022, 7, 16, 8, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649014, 'comment_body': 'Compact the arguments here to a list, wrapped to about 100 chars, with an indent of 8 for new lines.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 3, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649088, 'comment_body': 'As before, where are you testing `c1`? Make it clear that operation2 is separate. It must match operation1 exactly.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 5, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649550, 'comment_body': 'I think this is not required. The test here should be in ComplexTest. That should be updated to test both the operation in Complex and ComplexFunctions using the new dual operation assertions in TestUtils.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 8, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649767, 'comment_body': 'Please apply my recommendations from the previous PR. This method should be name `assertSame`. It should not call `assertEquals` with a delta as that will fail to detect `-0.0` is not equal to `0.0`. The javadoc is correct about binary equality. The implementation is wrong.\r\n', 'comment_created': datetime.datetime(2022, 7, 16, 8, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649851, 'comment_body': 'Remove this useless comment. Remove the comment about conjugate equality as this is not tested.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 11, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649897, 'comment_body': 'the operation on the Complex object\r\nthe operation on the complex real and imaginary parts', 'comment_created': datetime.datetime(2022, 7, 16, 8, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649918, 'comment_body': 'Wrong', 'comment_created': datetime.datetime(2022, 7, 16, 8, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649926, 'comment_body': 'Wrong', 'comment_created': datetime.datetime(2022, 7, 16, 8, 12, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649964, 'comment_body': 'Wrong', 'comment_created': datetime.datetime(2022, 7, 16, 8, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649971, 'comment_body': 'Wrong', 'comment_created': datetime.datetime(2022, 7, 16, 8, 13, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922649993, 'comment_body': 'assertEquals', 'comment_created': datetime.datetime(2022, 7, 16, 8, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922650001, 'comment_body': 'assertEquals', 'comment_created': datetime.datetime(2022, 7, 16, 8, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922650069, 'comment_body': 'The `ComplexFunctions.` is a big assumption. This TestUtils class knows nothing of what operation2 is using. Drop the term from the message.\r\n\r\nThis function should test ComplexNumber is **exactly** the same as Complex. It should not test ComplexNumber with expected:\r\n```Java\r\nAssertions.assertEquals(() -> ... , result1.real(), result2.getReal());\r\nAssertions.assertEquals(() -> ... , result1.imag(), result2.getImaginary());\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 16, 8, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922650216, 'comment_body': 'double space after comma', 'comment_created': datetime.datetime(2022, 7, 16, 8, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922650829, 'comment_body': 'There is no maxUlps. Signs are not checked that they match.\r\n\r\nCurrently this method has no extra checking over Assertions.assertEquals. So remove it unless your intention is to do extra checking using ULPs or signs.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 21, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922650875, 'comment_body': 'Not required', 'comment_created': datetime.datetime(2022, 7, 16, 8, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922650970, 'comment_body': 'Please improve the documentation. Start with the documentation in Complex and modify to change from an OO representation of a complex number to a representation as two parts.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 23, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922650994, 'comment_body': 'Remove extra line', 'comment_created': datetime.datetime(2022, 7, 16, 8, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922651178, 'comment_body': 'Should not be public. This has been refactored too early. It is not needed for this PR.', 'comment_created': datetime.datetime(2022, 7, 16, 8, 25, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922676016, 'comment_body': 'This functional interface requires more details. It should highlight which is the function method. See my example for the ComplexUnaryOperator.\r\n\r\nAll new public files should have `@since 1.1` tags.', 'comment_created': datetime.datetime(2022, 7, 16, 12, 40, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922676110, 'comment_body': 'Remove empty line', 'comment_created': datetime.datetime(2022, 7, 16, 12, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922676277, 'comment_body': 'the object encapsulating the complex result', 'comment_created': datetime.datetime(2022, 7, 16, 12, 42, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922676473, 'comment_body': 'The word ""constructor"" has a very specific meaning in Java. Perhaps we could use ""ComplexFactory"" here instead?', 'comment_created': datetime.datetime(2022, 7, 16, 12, 45, 13, tzinfo=datetime.timezone.utc), 'commenter': 'darkma773r', 'type': 'User'}, {'comment_id': 922676686, 'comment_body': 'This should be called by Complex for consistency. ', 'comment_created': datetime.datetime(2022, 7, 16, 12, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922676796, 'comment_body': 'References to `this complex number` should be updated to `the complex number`', 'comment_created': datetime.datetime(2022, 7, 16, 12, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922676879, 'comment_body': 'Fix the trailing argument indentation', 'comment_created': datetime.datetime(2022, 7, 16, 12, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922677040, 'comment_body': 'This formatting message includes c1 as an argument but the string format does not require it.', 'comment_created': datetime.datetime(2022, 7, 16, 12, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922677228, 'comment_body': 'Comment these for completeness.', 'comment_created': datetime.datetime(2022, 7, 16, 12, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922678314, 'comment_body': 'I agree the term constructor is not ideal. The function is acting as both a Consumer (to receive the complex result) and optionally a Function (to convert (a +ib) to z). In both cases the operation is a terminating operation where the primitive (r, i) pair finally gets used and potentially converted to an object. So there is a lot to cover in a name. Switching to Factory implies that the function will always make something (as does constructor). However some use cases could return `Void`. So I think this also needs to be captured in the name. Perhaps ComplexResult?', 'comment_created': datetime.datetime(2022, 7, 16, 13, 5, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922708535, 'comment_body': 'This method is also used in log which is why I moved it to ComplexFunctions. Should I just make it public in Complex and use it from there in ComplexFunctions or is there something else I can do?', 'comment_created': datetime.datetime(2022, 7, 16, 18, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'sumanth-rajkumar', 'type': 'User'}, {'comment_id': 922712138, 'comment_body': 'I did not see that. Just make it package private and add a TODO note to make it private in the future.', 'comment_created': datetime.datetime(2022, 7, 16, 19, 15, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 922852640, 'comment_body': 'What do you think of using the name pair ""source""/""sink"". I could then picture the following:\r\n```java\r\n// interface for obtaining complex values\r\npublic interface ComplexSource {\r\n    double getReal();\r\n    double getImaginary();\r\n\r\n    default real() { return getReal(); }\r\n    default imag() { return getImaginary(); }\r\n}\r\n\r\n// interface for accepting complex values, optionally returning a result\r\n@FunctionalInterface\r\npublic interface ComplexSink<R> {\r\n    R accept(double real, double imaginary);\r\n}\r\n```\r\nThese interfaces could then be used as follows:\r\n```java\r\n// existing Complex class\r\npublic final class Complex implements ComplexSource {\r\n    // ...\r\n}\r\n\r\n// TBD complex value container class\r\npublic class ComplexBuffer implements ComplexSource, ComplexSink<ComplexBuffer> {\r\n    // indexing methods similar to java.nio.Buffer\r\n    public int position();\r\n    public ComplexBuffer position(int pos);\r\n\r\n    // get the values at the current position\r\n    public double getReal() { ... }\r\n    public double getImaginary() { ... }\r\n\r\n    // set the values at the current position\r\n    ComplexBuffer accept(double real, double imaginary) {\r\n        // ...\r\n        return this;\r\n    }\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 7, 17, 15, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'darkma773r', 'type': 'User'}, {'comment_id': 922998982, 'comment_body': 'Rename to `ComplexSink`.\r\n\r\nFor consistency the use of `a + ib` should be in brackets: `\\( (a + i b) \\)`\r\n\r\nThere are a few place where the brackets are not used in Complex (these should be changed in future); most cases seem to have the enclosing brackets.', 'comment_created': datetime.datetime(2022, 7, 18, 6, 16, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923005686, 'comment_body': 'terminating in lower case. Since we are replacing the name `result` with `sink` the description should avoid the word result. The interface may be used for example as the operation to add numbers to an extendable list:\r\n```Java\r\n// list returns itself\r\nlist.apply(x, y).apply(r, i).\r\n```\r\nI would keep the doc simple (which can be expanded later):\r\n```\r\nRepresents a data sink for a complex number \\( (a + i b) \\); operations return a result of type {@code R}.\r\n```', 'comment_created': datetime.datetime(2022, 7, 18, 6, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923007161, 'comment_body': '`and supplies the complex result to the provided consumer`', 'comment_created': datetime.datetime(2022, 7, 18, 6, 34, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923008341, 'comment_body': '```\r\n@param out Consumer for the complex result\r\n@return the object returned by the provided consumer\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 18, 6, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923011576, 'comment_body': 'These messages on the object are written in OO form (as per the other messages in the class):\r\n```\r\nc + ""."" + name + ""():\r\n\r\ne.g. c = (3 + 4i), name = sin\r\n\r\n(3, 4).sin(): \r\n```\r\n\r\nThe procedural form should reflect that:\r\n```\r\nname + c:\r\n\r\ne.g. c = (3 + 4i), name = sin\r\n\r\nsin(3, 4): \r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 18, 6, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923017341, 'comment_body': 'I would the describe the equality to the expected result (which has further conditions), then state the two operations should be equal.\r\n\r\n```\r\nAssert the result is equal to the expected value.\r\n\r\n...\r\n\r\n<p>Assert the operation on the complex number is <em>exactly</em> equal to the operation on the\r\ncomplex real and imaginary parts.\r\n```', 'comment_created': datetime.datetime(2022, 7, 18, 6, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923019604, 'comment_body': 'Do not create y until you need it. So either test the exact equality first, or test the equals to the expected and then generate y. The later is a fail fast approach so I prefer that.', 'comment_created': datetime.datetime(2022, 7, 18, 6, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923036887, 'comment_body': 'Remove extra line', 'comment_created': datetime.datetime(2022, 7, 18, 7, 24, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923039108, 'comment_body': 'Move this before the `<h2>` section, i.e. describe the conjugate equality test then describe the requirement for exact equality between the two operations.\r\n\r\n`<em>exactly</em>`', 'comment_created': datetime.datetime(2022, 7, 18, 7, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923041260, 'comment_body': 'Again move this to after the description of conjugate equality.', 'comment_created': datetime.datetime(2022, 7, 18, 7, 30, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923047573, 'comment_body': 'I would move the assertions using operation2 after the check for conjugate equality. Currently it is confusing to do the conjugate operations, then do them again and test they are the same, then test the output of the first conjugate operations.', 'comment_created': datetime.datetime(2022, 7, 18, 7, 39, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923048055, 'comment_body': 'Move the statement about the second operation to the end of the javadoc.', 'comment_created': datetime.datetime(2022, 7, 18, 7, 39, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923048479, 'comment_body': 'Again, move the statement about the second operation to the end.', 'comment_created': datetime.datetime(2022, 7, 18, 7, 40, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923049818, 'comment_body': 'Move statement about operation2 to the end.', 'comment_created': datetime.datetime(2022, 7, 18, 7, 42, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923050062, 'comment_body': 'Move the statement about the second operation to the end.', 'comment_created': datetime.datetime(2022, 7, 18, 7, 42, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923051173, 'comment_body': '```\r\n, that is for the argument (a + ib), returns (a - ib).\r\n```', 'comment_created': datetime.datetime(2022, 7, 18, 7, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923066956, 'comment_body': 'There is no test for ComplexFunctions.log.\r\n\r\nIn this case it may be convenient to add a method to TestUtils to assert two operations are the same, then return the result. You can then do further assertions on the result.\r\n\r\n```Java\r\n    static Complex assertSame(Complex c,\r\n                              UnaryOperator<Complex> operation1,\r\n                              ComplexUnaryOperator<ComplexNumber> operation2,\r\n                              String name) {\r\n        final Complex z = operation1.apply(c);\r\n        // Test operation2 produces the exact same result\r\n        operation2.apply(c.real(), c.imag(), (x, y) -> {\r\n            Assertions.assertEquals(z.real(), x, () -> name + "" real"");\r\n            Assertions.assertEquals(z.imag(), y, () -> name + "" imaginary"");\r\n            return null;\r\n        });\r\n        return z;\r\n    }\r\n\r\nComplex lnz = TestUtils.assertSame(z, Complex::log, ComplexFunctions::log, ""log"");\r\nComplex ln10z = TestUtils.assertSame(z, Complex::log10, ComplexFunctions::log10, ""log10"");\r\n// Test lnz ...\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 18, 8, 4, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923077047, 'comment_body': 'The class is a utility class with only static methods so immutability is not relevant. I think just remove this paragraph.', 'comment_created': datetime.datetime(2022, 7, 18, 8, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923082340, 'comment_body': 'Rename `constructor` to `action`. Move the javadoc description from the return tag to this tag. The return tag can be made more generic as you do not know what the object will represent.\r\n```\r\n@param action Consumer for the natural logarithm of the complex number\r\n\r\n@return the object returned by the supplied action\r\n...\r\n\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 18, 8, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923087292, 'comment_body': 'Since the intent is to eventually move all these private functions to ComplexFunctions, then please start the process now. Make any function that is currently also required in Complex package-private and add the TODO note to make private in CompexFunctions in the future.\r\n\r\nIt may be convenient to leave the functions locally as pass through functions:\r\n```java\r\nprivate static double x2y2m1(double x, double y) {\r\n    return ComplexFunctions.x2y2m1(x, y);\r\n}\r\n```\r\nThis will prevent having to update all the call sites in Complex and minimise the diff.\r\n', 'comment_created': datetime.datetime(2022, 7, 18, 8, 28, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923089699, 'comment_body': 'Correct original typo to `difference`\r\n', 'comment_created': datetime.datetime(2022, 7, 18, 8, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923427962, 'comment_body': 'Which paragraph do you mean? Do you mean to just leave the part of changing from OO representation and take out everything else in that paragraph?', 'comment_created': datetime.datetime(2022, 7, 18, 14, 18, 4, tzinfo=datetime.timezone.utc), 'commenter': 'sumanth-rajkumar', 'type': 'User'}, {'comment_id': 923448987, 'comment_body': 'Remove the paragraph starting within `<p>This class is immutable, ...`. It is about 3 lines of the javadoc.', 'comment_created': datetime.datetime(2022, 7, 18, 14, 35, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 923511796, 'comment_body': 'Do you mean for me to move the two assert sentences before h2 or just the second one describing both operations? The first assert sentence was already there originally so I just wanted to make sure', 'comment_created': datetime.datetime(2022, 7, 18, 15, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'sumanth-rajkumar', 'type': 'User'}, {'comment_id': 923517093, 'comment_body': 'Move the new javadoc you added. The method should essentially be documented as before. What you have done is add a second operation as an argument. This should be documented, after the existing javadoc, as tested to exactly match the result of the first operation. I said put it before the <h2> section as that is a natural break in the javadoc. Below that is an explanation of conjugates.', 'comment_created': datetime.datetime(2022, 7, 18, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924732640, 'comment_body': 'This should actually create a ComplexNumber since we wish to test the object created is returned by the function:\r\n```Java\r\nfinal ComplexNumber z2 = operation2.apply(c.real(), c.imag(), ComplexNumber::new);\r\nAssertions.assertEquals(z.real(), z2.real(), () -> ""UnaryOperator "" + name + "" real"");\r\nAssertions.assertEquals(z.imag(), z2.imag(), () -> ""UnaryOperator "" + name + "" imaginary"");\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 16, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924735501, 'comment_body': 'Drop the `the`, use capitalisation and end with a period:\r\n```\r\nOperation on the Complex object.\r\n```\r\nSame with the other tags.', 'comment_created': datetime.datetime(2022, 7, 19, 16, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924736908, 'comment_body': 'Replace with:\r\n```Java\r\nfinal Complex z = TestUtils.assertSame(c, operation1, operation2, name);\r\n```', 'comment_created': datetime.datetime(2022, 7, 19, 16, 46, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924738554, 'comment_body': 'Period at the end of a sentence.', 'comment_created': datetime.datetime(2022, 7, 19, 16, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924741667, 'comment_body': 'Perhaps change to `the return type of the supplied action`', 'comment_created': datetime.datetime(2022, 7, 19, 16, 50, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924743641, 'comment_body': 'Should be private. Or add a TODO to make private.', 'comment_created': datetime.datetime(2022, 7, 19, 16, 51, 57, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924747757, 'comment_body': 'Should be private. Or add a TODO to make private.', 'comment_created': datetime.datetime(2022, 7, 19, 16, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924752902, 'comment_body': 'Redundant when moved to the top', 'comment_created': datetime.datetime(2022, 7, 19, 16, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924753718, 'comment_body': 'Redundant ...', 'comment_created': datetime.datetime(2022, 7, 19, 16, 59, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924760479, 'comment_body': 'Replace with:\r\n```Java\r\nfinal Complex c1 = TestUtils.assertSame(zConj, operation1, operation2, """");\r\nfinal Complex c2 = TestUtils.assertSame(z, operation1, operation2, """").conj();\r\n```\r\n\r\nThen you do not need to generate ComplexNumber cn1 and cn2.\r\n\r\nThis possibly requires a name argument. It is missing from the original tests. I cannot recall why and so can you look into adding it so we know the conjugate equality that failed.', 'comment_created': datetime.datetime(2022, 7, 19, 17, 5, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924762066, 'comment_body': 'New paragraph requires `<p>` tag', 'comment_created': datetime.datetime(2022, 7, 19, 17, 6, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924762285, 'comment_body': 'Missing `<p>`', 'comment_created': datetime.datetime(2022, 7, 19, 17, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924762544, 'comment_body': 'Missing `<p>`', 'comment_created': datetime.datetime(2022, 7, 19, 17, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924767591, 'comment_body': 'Missing `<p>`', 'comment_created': datetime.datetime(2022, 7, 19, 17, 10, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924767843, 'comment_body': 'Missing `<p>`', 'comment_created': datetime.datetime(2022, 7, 19, 17, 10, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924768858, 'comment_body': 'Drop `the`, capitalize, etc', 'comment_created': datetime.datetime(2022, 7, 19, 17, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924769765, 'comment_body': 'Extra line', 'comment_created': datetime.datetime(2022, 7, 19, 17, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924770827, 'comment_body': 'Second sentence is not required. I think it may be left over from when this was a method not a constructor.', 'comment_created': datetime.datetime(2022, 7, 19, 17, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924771337, 'comment_body': '`@return conjugated complex number`', 'comment_created': datetime.datetime(2022, 7, 19, 17, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924772157, 'comment_body': 'Do we need this method? If so then add a message to the assertions for ""real"" and ""imaginary""', 'comment_created': datetime.datetime(2022, 7, 19, 17, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 924772426, 'comment_body': 'Indent 1 more space', 'comment_created': datetime.datetime(2022, 7, 19, 17, 15, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': '8063da5767c767b458c7bcc04ff52b117eef4ccc', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0244743edadb6362be6e5f3614d1170481676c1b', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd92c25c722fea462bfdc843496d82136c8e0cc4', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78222d925ba68329b0866909a076f89598aa03a8', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6c7a17d103683efb94e6ae1a1a82a14672e03a3', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17ab2f4dde4f00d2df318bcf553261e2e542a01a', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9042811198a7655212c8b9a2f4d063888b59dab7', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6ac36cfb63eea5e9fd7d7668681ef8af276bd5d', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7374e4423e530a402bf7c8450f79e4cdf58646c', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9d5cb478fa31fb9c61dcf2a2d8928da9a553690', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '142fa7bbc51a6010f0b7e8ec1648b6d79b182f7d', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}]",,53705316,,User,,16,,0,0
1004341272,Numbers 188.refactor unary functions,"This PR refactors Complex class using functional interfaces and static methods. 
This allows reuse of the refactored static functions for Operations on List/Matrices of Complex Numbers (NUMBERS-186)

The changes retain binary backward compatibility.

Summary of changes

1) Introduced following interfaces for Complex Number Operations

 ComplexUnaryOperator - unary operations on complex number represented as double real and imaginary parts
 ComplexSink - interface that acts as a consumer for the complex result from double real and imaginary parts

2) Refactored all unary operations instance methods of Complex class as static functions in ComplexFunctions
The static functions use the functional interface signatures described above",False,118,https://api.github.com/repos/apache/commons-numbers/pulls/118,https://github.com/apache/commons-numbers/pull/118,closed,2634,1915,8,13,2,62,0,0,[],2022-07-21 15:13:02+00:00,2022-07-25 10:08:49+00:00,327347.0,"3 days, 18:55:47","[{'comment_id': 927461121, 'comment_body': '`""To Double operator mismatch: ""`', 'comment_created': datetime.datetime(2022, 7, 22, 9, 16, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927465798, 'comment_body': 'This line is not required. You are repeating the computation from 2 lines above.\r\n\r\nAlthough this method is used by two other classes I do not hink it generic enough to put in TestUtils. There are similar `assertNorm` and `assertArgument` functions in ComplexTest. I would put them into the Test class that uses them.\r\n\r\nNote that in all these helper assert methods you repeat the computation and test it is exactly the same as the actual that was just computed. The method is very simple and could be put into the Test class commented as:\r\n\r\n```Java\r\n    private static void assertAbs(double expected, Complex input) {\r\n        final double actual = assertSame(input, ""abs"", Complex::abs, ComplexFunctions::abs);\r\n        Assertions.assertEquals(expected, actual);\r\n    }\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 9, 22, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927473193, 'comment_body': 'Missing final. Rename to `result`', 'comment_created': datetime.datetime(2022, 7, 22, 9, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927474769, 'comment_body': 'Undo formatting here\r\n', 'comment_created': datetime.datetime(2022, 7, 22, 9, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927476320, 'comment_body': 'By changing the indentation here it is difficult to understand the minor change to add the sign argument.\r\n\r\nThis class is indenting 8 spaces for trailing arguments on new lines.', 'comment_created': datetime.datetime(2022, 7, 22, 9, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927476967, 'comment_body': 'Indent these at 8 spaces to be consistent with the rest of the class', 'comment_created': datetime.datetime(2022, 7, 22, 9, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927477185, 'comment_body': 'Indent at 8 spaces.', 'comment_created': datetime.datetime(2022, 7, 22, 9, 35, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927485202, 'comment_body': 'Repeating an assertion', 'comment_created': datetime.datetime(2022, 7, 22, 9, 45, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927486292, 'comment_body': 'rename `input` back to `z`. Name `z` as `result` or `norm`.', 'comment_created': datetime.datetime(2022, 7, 22, 9, 46, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927486711, 'comment_body': 'Duplicating the assertion', 'comment_created': datetime.datetime(2022, 7, 22, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927487958, 'comment_body': 'Rename actual to `zConj`', 'comment_created': datetime.datetime(2022, 7, 22, 9, 48, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927488798, 'comment_body': 'Duplicate assertion', 'comment_created': datetime.datetime(2022, 7, 22, 9, 49, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927489487, 'comment_body': 'Rename `act` to `actual` or `result`', 'comment_created': datetime.datetime(2022, 7, 22, 9, 50, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927489942, 'comment_body': 'Rename `input` to `z`', 'comment_created': datetime.datetime(2022, 7, 22, 9, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927491061, 'comment_body': 'Drop the `(Test)` part of the regex', 'comment_created': datetime.datetime(2022, 7, 22, 9, 52, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927500818, 'comment_body': 'This is not a complex. The notation `z` is typically used for complex numbers. I would rename to `r1` and `r2` (r for real, or result)', 'comment_created': datetime.datetime(2022, 7, 22, 10, 3, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927512197, 'comment_body': 'This comment is not relevant any more. However it is missing from ComplexFunctions so you should move it there.', 'comment_created': datetime.datetime(2022, 7, 22, 10, 18, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927513410, 'comment_body': 'This comment is not relevant any more. However it is missing from ComplexFunctions so you should move it there.', 'comment_created': datetime.datetime(2022, 7, 22, 10, 20, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927513557, 'comment_body': 'This comment is not relevant any more. However it is missing from ComplexFunctions so you should move it there.', 'comment_created': datetime.datetime(2022, 7, 22, 10, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927514110, 'comment_body': 'This comment is not relevant any more. However it is missing from ComplexFunctions so you should move it there.', 'comment_created': datetime.datetime(2022, 7, 22, 10, 21, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927515112, 'comment_body': 'This comment is not relevant any more. However it is missing from ComplexFunctions so you should move it there.', 'comment_created': datetime.datetime(2022, 7, 22, 10, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927517697, 'comment_body': 'This was one of the comments I fixed in the feature branch. Be careful what you cut and paste! It is the `Base 10 logarithm of e divided by 2`', 'comment_created': datetime.datetime(2022, 7, 22, 10, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927520535, 'comment_body': 'Here a cut and paste has changed formatting. I am comparing it to the existing Complex class in `master`. I would expect alignment of the real and imaginary parts passed to the apply function:\r\n```Java\r\n          return action.apply(zeroOrInf * Math.cos(imaginary),\r\n                              zeroOrInf * Math.sin(imaginary));\r\n```\r\nPlus remove the trailing empty line.', 'comment_created': datetime.datetime(2022, 7, 22, 10, 30, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927520835, 'comment_body': 'Align real and imaginary, Remove trailing empty line.', 'comment_created': datetime.datetime(2022, 7, 22, 10, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927521550, 'comment_body': 'Align real and imaginary', 'comment_created': datetime.datetime(2022, 7, 22, 10, 31, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927521766, 'comment_body': 'Align real and imaginary', 'comment_created': datetime.datetime(2022, 7, 22, 10, 31, 42, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927521922, 'comment_body': 'Align real and imaginary', 'comment_created': datetime.datetime(2022, 7, 22, 10, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927522028, 'comment_body': 'Align real and imaginary\r\n', 'comment_created': datetime.datetime(2022, 7, 22, 10, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927522110, 'comment_body': 'Align real and imaginary', 'comment_created': datetime.datetime(2022, 7, 22, 10, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927522181, 'comment_body': 'Align real and imaginary', 'comment_created': datetime.datetime(2022, 7, 22, 10, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927522439, 'comment_body': 'Align real and imaginary passed to the apply function', 'comment_created': datetime.datetime(2022, 7, 22, 10, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927522523, 'comment_body': 'Align real and imaginary passed to the apply function', 'comment_created': datetime.datetime(2022, 7, 22, 10, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927522625, 'comment_body': 'Align real and imaginary passed to the apply function', 'comment_created': datetime.datetime(2022, 7, 22, 10, 32, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927522849, 'comment_body': 'Align real and imaginary passed to the apply function', 'comment_created': datetime.datetime(2022, 7, 22, 10, 33, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927523572, 'comment_body': 'Keep the formatting at indented 8 spaces for consistency in the class', 'comment_created': datetime.datetime(2022, 7, 22, 10, 34, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927525179, 'comment_body': 'For consistency, wrap the arguments and use 8 spaces for trailing indentation', 'comment_created': datetime.datetime(2022, 7, 22, 10, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927525693, 'comment_body': 'Rename `input` to `z`', 'comment_created': datetime.datetime(2022, 7, 22, 10, 37, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927947045, 'comment_body': 'When I said indent 8 spaces I meant from the first non-whitespace character on the previous line:\r\n```Java\r\n    private static void assertConjugateEquality(String name,\r\n            UnaryOperator<Complex> operation1,\r\n            ComplexUnaryOperator<ComplexNumber> operation2) {\r\n        // Edge cases. Inf/NaN are specifically handled in the C99 test cases\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 19, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927947566, 'comment_body': 'This is still not the original as it lacks the computation in brackets\r\n```\r\n/** Base 10 logarithm of e divided by 2 (log10(e)/2). */\r\n```', 'comment_created': datetime.datetime(2022, 7, 22, 19, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927948406, 'comment_body': 'The javadoc `@param` order should match the argument order. `operationName` is in the wrong place.', 'comment_created': datetime.datetime(2022, 7, 22, 19, 51, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927950087, 'comment_body': 'operation name is `isNaN`', 'comment_created': datetime.datetime(2022, 7, 22, 19, 54, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927950176, 'comment_body': 'operation name is `isInfinite`', 'comment_created': datetime.datetime(2022, 7, 22, 19, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927953445, 'comment_body': 'Operation names should be used in full here: isNaN, isInfinite, isFinite', 'comment_created': datetime.datetime(2022, 7, 22, 20, 0, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927953858, 'comment_body': 'operation name `isNaN`', 'comment_created': datetime.datetime(2022, 7, 22, 20, 1, 22, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927957561, 'comment_body': 'operation name `isNaN`', 'comment_created': datetime.datetime(2022, 7, 22, 20, 7, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927957918, 'comment_body': 'Operation name `isInfinite`', 'comment_created': datetime.datetime(2022, 7, 22, 20, 8, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927958015, 'comment_body': 'Operation name `isNaN`', 'comment_created': datetime.datetime(2022, 7, 22, 20, 8, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927981703, 'comment_body': 'I do not think we need this assertion. The operation under test is the BiFunction<Complex, Complex, Complex> operation. The predicate is supplied to check the answer. Even though the predicate happens to sometime be `isNaN` or `isInfinite` here we are not testing the predicate matches the predicate on the real and imaginary parts. One of the predicates is `CStandardTest::isZero`. Here we assume the input predicate should function correctly and it should return true.\r\n\r\nIf you follow it through the `expectedName` is the name of the expected result from the `operation`. It is not the name of the predicate operation `condition1`. So TestUtils.assertSame is for example called with expectedName `NaN` when it should really be called with `isNaN`.\r\n\r\nNote that the other use of TestUtils.assertSame for the DoubleBinaryPredicates is in createInfinites and createNaNs. There the usage is OK, it tests all possible combinations of infinity and nan. However this may just be duplicating the `ComplexTest.testNumberType()` test. So I think this assertion can be reverted and the tests left using the previous test method.\r\n', 'comment_created': datetime.datetime(2022, 7, 22, 20, 53, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927988892, 'comment_body': 'Missing a `<p>` tag. The same error is in the original Complex source too.', 'comment_created': datetime.datetime(2022, 7, 22, 21, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927991813, 'comment_body': ""`the complex number`\r\n\r\nDrop apostrophe from `it's`"", 'comment_created': datetime.datetime(2022, 7, 22, 21, 13, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927992773, 'comment_body': 'This has not copied over the javadoc from Complex.\r\n\r\nI just noticed the same is true for ComplexFunctions::abs too (from the last PR). Can you update that accordingly.', 'comment_created': datetime.datetime(2022, 7, 22, 21, 15, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927993320, 'comment_body': 'Copied the wrong javadoc. Please copy asin from Complex here.\r\n\r\nHowever the attribution to Boost (and the rest of this javadoc) should not be lost. The javadoc here is from a static function previously private to Complex. So perhaps create a private one here and call it from the public `asin` function, e.g. named `computeAsin`, so all the previousl documentation on the method origin is maintained.\r\n', 'comment_created': datetime.datetime(2022, 7, 22, 21, 16, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927995476, 'comment_body': 'As per `asin` the javadoc is incorrect for the public API. Copy that from Complex to a public `acos` function and make this method `computeAcos`', 'comment_created': datetime.datetime(2022, 7, 22, 21, 21, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927996445, 'comment_body': 'Wrong javadoc. The origin of this javadoc was from a static helper method in Complex. It may be redundant now that all functions accept a ComplexSink for the output. Previously this type of pattern was only used internally in Complex to allow computation using identities.', 'comment_created': datetime.datetime(2022, 7, 22, 21, 23, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927996825, 'comment_body': 'Update javadoc same as `sinh`', 'comment_created': datetime.datetime(2022, 7, 22, 21, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927997154, 'comment_body': 'Update javadoc same as `sinh`', 'comment_created': datetime.datetime(2022, 7, 22, 21, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927998100, 'comment_body': 'This is another method that should be updated to `private ... computeAtanh`. The public `atanh` should use the javadoc from Complex', 'comment_created': datetime.datetime(2022, 7, 22, 21, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927998816, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2022, 7, 22, 21, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927998871, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2022, 7, 22, 21, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927999316, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2022, 7, 22, 21, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927999375, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2022, 7, 22, 21, 30, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 927999492, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2022, 7, 22, 21, 30, 59, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': 'bdd8732c92fc49754295c718d82cffc05f52983a', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa6cf62c87cc5ef80965d1164bb18b76fecc6ff9', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57eb5bfcd358f49463ac7eaa0fc870000a73ef69', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '412ccebada446e7ce9b75be333cd46325607b46d', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b172b71646dda35cdf12f58a6e15ba4015ec13c', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bf2c637ecb91e9dc976e05e9bddc00d7f256e82', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b107611ba0f58dbce2cad9b692b967f755570d2', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05db4adb9b23d7dd43e019b5c917fe5bb26eb349', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5a4b3cb1108a518cf71cb20ac7ed1dca4d223e81', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23ec5f22f8c50b0bc144506b82d8268b7858a2a6', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abc0ed8ea333483515888fa806f8c20de2351569', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66e57ff799c2f6813be5270133cfc441c93266d6', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ac3327491887a252a7e5fcc35d63305573c0645d', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}]",,53705316,,User,,16,,0,0
1007798955,Numbers 188: refactored binary functions,"This PR refactors Complex class using functional interfaces and static methods. 
This allows reuse of the refactored static functions for Operations on List/Matrices of Complex Numbers (NUMBERS-186)

The changes retain binary backward compatibility.

Summary of changes

1) Introduced following interfaces for Complex Number Operations

 ComplexBinaryOperator - binary operations on complex numbers represented as double real and imaginary parts

2) Refactored all binary operations instance methods of Complex class as static functions in ComplexFunctions
The static functions use the functional interface signatures described above",True,119,https://api.github.com/repos/apache/commons-numbers/pulls/119,https://github.com/apache/commons-numbers/pull/119,closed,595,425,8,8,1,13,0,0,[],2022-07-25 21:34:17+00:00,2022-07-26 19:12:54+00:00,77917.0,21:38:37,"[{'comment_id': 929700156, 'comment_body': 'Not currently required ', 'comment_created': datetime.datetime(2022, 7, 26, 8, 52, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929700456, 'comment_body': '`parts of two complex numbers`\r\n\r\nAdd a blank line before the param tags. You can do the same in the other interface for consistency.\r\n', 'comment_created': datetime.datetime(2022, 7, 26, 8, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929701828, 'comment_body': 'Indentation', 'comment_created': datetime.datetime(2022, 7, 26, 8, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929702179, 'comment_body': 'Indent', 'comment_created': datetime.datetime(2022, 7, 26, 8, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929703121, 'comment_body': 'Wrong javadoc. Copy  from Complex which uses the MathJax formula.\r\n\r\nNote that the use of `<pre>` tags for formulas was only used on internal private methods. This can be rendered by an IDE allowing for example you to read the javadocs when hovering over a method.\r\n\r\nPublic API javadoc should all use MathJax. This is rendered when creating the docs. See:\r\n```\r\nmvn javadoc:javadoc\r\nopen target/site/apidocs/index.html\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 26, 8, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929704669, 'comment_body': 'Wrong javadoc. Copy the from Complex which uses the MathJax formula.\r\n\r\nHowever the note about divide by zero is useful so I would leave that in.', 'comment_created': datetime.datetime(2022, 7, 26, 8, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929711109, 'comment_body': 'These declarations could be done in a static final variable. However we do not need to to use the `andThen` composition:\r\n```Java\r\n        return log(re1, im1, (x, y) -> {\r\n            return multiply(x, y, re2, im2, (a, b) -> {\r\n                return exp(a, b, action);\r\n            });\r\n        });\r\n```\r\nI am undecided which is preferred. However to avoid adding the `andThen` function just to support this composition I would use the explicit lambda code above.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929714693, 'comment_body': 'This method is not used.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929720110, 'comment_body': 'Wikipedia does not agree here: [ULP](https://en.wikipedia.org/wiki/Unit_in_the_last_place)\r\n\r\nCan you change all javadoc back to `units of least precision`', 'comment_created': datetime.datetime(2022, 7, 26, 9, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929733357, 'comment_body': 'It may be very verbose but for consistency we should use `real1/2` and `imaginary1/2` as these are the names used for all the unary functions. This matches what you have put in the javadoc too.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929741146, 'comment_body': 'Consumer for the multiplication result.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929741372, 'comment_body': 'Consumer for the division result.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 929742564, 'comment_body': 'Consumer for the power result.', 'comment_created': datetime.datetime(2022, 7, 26, 9, 32, 47, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': 'fa4c3f50d4615ff7dc29a08fff367170cbd17073', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28527a12575e35e04f6c84d7244bbfd4ccdde72e', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fe19efa443e1ebb4aff5d285a00411f10a3e9a7', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '93708c4182d765e128ddb707eadcbdac4b4a75df', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '29d440fc2d6a30a951e361973fc9c0ebb35a31bf', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55e1d0201bfe5ec72a948458305b7e04a4760f7a', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c104eba86bec5d095ae5421e42c4c2f375a5a6ef', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '541e601997b68465820e56cf667ac748dab8accc', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}]",,53705316,,User,,16,,0,0
1009119237,Numbers 188 refactored complex scalar binary functions,"This PR refactors Complex class using functional interfaces and static methods. 
This allows reuse of the refactored static functions for Operations on List/Matrices of Complex Numbers (NUMBERS-186)

The changes retain binary backward compatibility.

Summary of changes

1) Introduced following interfaces for Complex Number Operations

 ComplexScalarFunction - binary operations on a complex number represented as double real and imaginary parts and a double scalar operand

2) Refactored all complex-scalar binary operations instance methods of Complex class as static functions in ComplexFunctions
The static functions use the functional interface signatures described above",True,120,https://api.github.com/repos/apache/commons-numbers/pulls/120,https://github.com/apache/commons-numbers/pull/120,closed,659,180,7,7,1,26,0,0,[],2022-07-27 02:13:41+00:00,2022-07-28 09:33:25+00:00,112784.0,"1 day, 7:19:44","[{'comment_id': 930741773, 'comment_body': '```Java\r\nfinal Complex iz = TestUtils.assertSame(z, 1, ""multiplyImaginary"", Complex::multiplyImaginary, ComplexFunctions::multiplyImaginary);\r\nAssertions.assertEquals(z.abs(), iz.abs(), ""Expected |z| == |iz|"")\r\n```', 'comment_created': datetime.datetime(2022, 7, 27, 7, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930747072, 'comment_body': 'Rename:\r\n```\r\nactual -> c1\r\nexpected -> c2\r\n```\r\nThese terms are not used \'correctly\' when passed to the assertion which has arguments expected then actual.\r\n \r\nSingle line:\r\n```Java\r\nassertComplex(c1, TestUtils.assertSame(c2, -1, ""multiplyImaginary"", Complex::multiplyImaginary, ComplexFunctions::multiplyImaginary));\r\n```\r\n', 'comment_created': datetime.datetime(2022, 7, 27, 8, 3, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930748847, 'comment_body': '```\r\nRepresents a binary operation on a Cartesian form of a complex number \\( a + ib \\)\r\nand a {@code double} scalar operand, where \\( a \\) ...\r\n```', 'comment_created': datetime.datetime(2022, 7, 27, 8, 5, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930750530, 'comment_body': '`""Scalar operator mismatch""`', 'comment_created': datetime.datetime(2022, 7, 27, 8, 7, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930872578, 'comment_body': '``#add(double, double, double, double, ComplexSink) add(real, imaginary, addend, 0, action)`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930874124, 'comment_body': '`#add(double, double, double, double, ComplexSink) add(real, imaginary, 0, addend, action)`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 6, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930878199, 'comment_body': '`Computes the result of the subtraction of a real number from a complex number.`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930879501, 'comment_body': '`Computes the result of the addition of a complex number and an imaginary number .`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930879728, 'comment_body': '`Computes the result of the addition of a complex number and a real number .`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930880325, 'comment_body': '`Computes the result of the subtraction of an imaginary number from a complex number.`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930881216, 'comment_body': '`Computes the result of the subtraction of a complex number from a real number.`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930883340, 'comment_body': '`Computes the result of the subtraction of a complex number from an imaginary number.`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 16, 50, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930883801, 'comment_body': '`Computes the result of the multiplication of a complex number and a real number.`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 17, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930883990, 'comment_body': '`Computes the result of the multiplication of a complex number and an imaginary number.`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 17, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930884666, 'comment_body': '`Computes the result of the division of a complex number by a real number.`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 18, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930884863, 'comment_body': '`Computes the result of the division of a complex number by an imaginary number.`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 18, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930906229, 'comment_body': 'Note: The `subtractFrom` and `subtractFromImaginary` made sense when they were object methods on Complex. The complex object (here an argument) is always first and the other arguments are passed to the object method.\r\n\r\nWhen viewed as a static API these methods appear out-of-place. Ideally you would want to express:\r\n```\r\nc - (a + i b)\r\ni d - (a + i b)\r\n```\r\nThis makes more sense when the arguments are passed in the order of the formula. However if the method is named `subtract(c, a, b, ...)` then the signature matches `subtract(a, b, c, ...)`. It may be better to change these to:\r\n```\r\nrealSubtract(c, a, b, ...)\r\nimaginarySubtract(d, a, b, ...)\r\n```\r\nThis will require a bit more work in the unit tests as the method will need to be wrapped with a lambda to swap the arguments:\r\n```\r\n// TestUtils\r\n/**\r\n * Computes the result of the subtraction of a complex number from an imaginary number.\r\n * Implements the formula:\r\n * \\[ i d - (a + i b) = -a + i (d - b) \\]\r\n *\r\n * <p>This method is a helper to replicate the method signature of the object-orientated\r\n * API in Complex (i.e. the complex argument is first) using the equivalent static API\r\n * function in ComplexFunctions.\r\n *\r\n * @param real Real part \\( a \\) of the complex number \\( (a +ib) \\).\r\n * @param imaginary Imaginary part \\( b \\) of the complex number \\( (a +ib) \\).\r\n * @param minuend Value the complex number is to be subtracted from.\r\n * @param action Consumer for the subtraction result.\r\n * @param <R> the return type of the supplied action.\r\n * @return the object returned by the supplied action.\r\n */\r\npublic static <R> R subtractFromImaginary(double real, double imaginary, double minuend, ComplexSink<R> action) {\r\n    // Call the equivalent static API function\r\n    return ComplexFunctions.imaginarySubtract(minuend, real, imaginary, action);\r\n}\r\n\r\n// ComplexFunctions updated to ...\r\npublic static <R> R imaginarySubtract(double minuend, double real, double imaginary, ComplexSink<R> action) {\r\n    return action.apply(-real, minuend - imaginary);\r\n}\r\n\r\n// Tests using ComplexFunctions::subtractFromImaginary are simply updated, e.g. in ComplexTest ...\r\n        final Complex z2 = TestUtils.assertSame(x, y, ""subtractFromImaginary"", Complex::subtractFromImaginary, TestUtils::subtractFromImaginary);\r\n\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 27, 10, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930907605, 'comment_body': '`#multiply(double, double, double, double, ComplexSink) multiply(a, b, factor, 0, action)`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 42, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930908147, 'comment_body': '`#multiply(double, double, double, double, ComplexSink) multiply(a, b, 0, factor, action)`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 43, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930909137, 'comment_body': '`#divide(double, double, double, double, ComplexSink) divide(a, b, divisor, 0, action)`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930910472, 'comment_body': '`#divide(double, double, double, double, ComplexSink) divide(a, b, 0, divisor, action)`', 'comment_created': datetime.datetime(2022, 7, 27, 10, 46, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930911191, 'comment_body': 'Correct as above to remove `ofCartesian`\r\n', 'comment_created': datetime.datetime(2022, 7, 27, 10, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930924328, 'comment_body': '`result1` -> `ci`', 'comment_created': datetime.datetime(2022, 7, 27, 11, 2, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930931851, 'comment_body': '`(y, z) -> z.subtract(y), (a, b, c, d, action) -> ComplexFunctions.subtract(c, d, a, b, action), 0b11110000000000001111000000000000111100000000000011110000L);`', 'comment_created': datetime.datetime(2022, 7, 27, 11, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930932034, 'comment_body': '`(y, z) -> z.subtract(y), (a, b, c, d, action) -> ComplexFunctions.subtract(c, d, a, b, action), 0b11111111111111110000000000000000L);`', 'comment_created': datetime.datetime(2022, 7, 27, 11, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 930933496, 'comment_body': 'Duplicating this method is not as maintainable as having only one version of it. I have suggested a call for the `subtractFromReal` and `subtractFromImaginary` tests to use a lambda for ComplexFunctions. You can then have only one instance of this method.\r\n\r\nCan you indent the arguments 8 spaces (from the `private` keyword).', 'comment_created': datetime.datetime(2022, 7, 27, 11, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': '56653d94ef129fc6142501e0f14b0399213a5a6d', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d94e2958cf18a34e85414f46530f3c204478a1c', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '913c8d73b1656eac7d4cec4153a3356ed0dbd54b', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0a8e50bedfcddfd4d333e7463813bb1c203182d', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60d5d45875c648d5306c6ba2aa33a79796497250', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83090d97561847458b73034e3c18efea197126af', 'committer_username': 'aherbert', 'committer_name': 'Alex Herbert', 'committer_email': 'a.herbert@sussex.ac.uk', 'commit_date': datetime.datetime(2011, 6, 30, 12, 32, 8, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d7987941bd2270d48948b9eebf6505b457ab517', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}]",,53705316,,User,,16,,0,0
1039205495,NUMBERS-186: Lists of Complex Numbers,"This PR introduces a new complex arrays module that introduces ComplexList where the complex numbers in the complex module are stored using an interleaved format. This allow operations to be performed on lists of complex numbers. 

Summary of changes

1) ComplexList - representation of multiple complex numbers into a list structure storing real and imaginary parts.
2) ComplexListTest - unit tests that tests all conditions of adding, removing, getting, and setting the list. ",True,121,https://api.github.com/repos/apache/commons-numbers/pulls/121,https://github.com/apache/commons-numbers/pull/121,closed,735,0,9,3,0,41,0,0,[],2022-08-29 06:03:12+00:00,2022-09-02 14:24:18+00:00,375666.0,"4 days, 8:21:06","[{'comment_id': 957764355, 'comment_body': 'Provides a list of complex numbers.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957765010, 'comment_body': 'These are not required as this package has not been released. Only the latest API docs item is required.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 25, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957765824, 'comment_body': 'This section name does not seem relevant', 'comment_created': datetime.datetime(2022, 8, 29, 20, 26, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957769014, 'comment_body': 'This repeats the above test but changes the final add. The assert method with the consumer does not appear to be relevant and can be dropped and replaced with the assert method taking the function.\r\n\r\nI think here would be better tested using smaller functions:\r\n```Java\r\nassertListOperation(list -> list.add(Complex.ofCartesian(42, 13)));\r\nassertListOperation(list -> list.add(1, Complex.ofCartesian(11, 12)));\r\n// etc\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 20, 31, 5, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957769858, 'comment_body': 'Is the intension to add an empty list to an empty list? A comment would be useful.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957770401, 'comment_body': 'Extra whitespace is not required', 'comment_created': datetime.datetime(2022, 8, 29, 20, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957773117, 'comment_body': 'Adding using lots of different methods is confusing. Why not stream a size and add:\r\n```Java\r\n// Empty list throws\r\nAssertions.assertThrows(IndexOutOfBoundsException.class, () -> list.get(0));\r\nint size = 5;\r\nIntStream.range(0, size).mapToObj(i -> Complex.ofCartesian(i, -i)).forEach(list::add);\r\nAssertions.assertThrows(IndexOutOfBoundsException.class, () -> list.get(-1));\r\nAssertions.assertThrows(IndexOutOfBoundsException.class, () -> list.get(size));\r\nAssertions.assertThrows(IndexOutOfBoundsException.class, () -> list.get(size + 1));\r\n\r\n// Repeat for set\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 20, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957774356, 'comment_body': 'Build list using a simpler method', 'comment_created': datetime.datetime(2022, 8, 29, 20, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957777271, 'comment_body': 'Here I would manually create the ComplexList and ArrayList and then just call the assert method with a few operations:\r\n```Java\r\nList<Complex> l1 = new ArrayList<>(size);\r\nList<Complex> l2 = new ComplexList(size);\r\nAssertions.assertEquals(l1, l2);\r\nassertOperation(l -> l.add(Complex.ofCartesian(10, 20), l1, l2);\r\n// etc\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 20, 41, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957785735, 'comment_body': 'These tests are too specific. If the class is changed to alter the method names then the test will fail. The method names are not the critical part of the functionality.\r\n\r\nYou should not have to expose the internal method `ensureCapacity`. You can add the required size to trigger exceptions with a dummy list:\r\n```Java\r\n    private static class SizedList extends ArrayList<Complex> {\r\n        private final int fixedSize;\r\n\r\n        SizedList(int fixedSize) {\r\n            super();\r\n            this.fixedSize = fixedSize;\r\n        }\r\n\r\n        @Override\r\n        public int size() {\r\n            return fixedSize;\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void testCapacityExceptions() {\r\n        // Set-up required sizes\r\n        ComplexList list = new ComplexList();\r\n        List<Complex> l = new SizedList(Integer.MAX_VALUE);\r\n        Assertions.assertThrows(OutOfMemoryError.class, () -> list.add(l));\r\n    }\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2022, 8, 29, 20, 53, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957787428, 'comment_body': ""I don't think the consumer operations are required. If your final function does not return then just call the method with the Function and return e.g. Boolean.TRUE."", 'comment_created': datetime.datetime(2022, 8, 29, 20, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957788953, 'comment_body': 'Is this required? Does JApiCmp break since there is no previous release?\r\n\r\nIf so then add a TODO comment to remove this section after a release.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 57, 14, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957789137, 'comment_body': 'Add a newline at the end of the file', 'comment_created': datetime.datetime(2022, 8, 29, 20, 57, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957789495, 'comment_body': 'I think it more appropriate here to throw an IllegalArgumentException.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 57, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957789818, 'comment_body': 'All your javadoc has a `-` character between the argument and the description. This is not required.', 'comment_created': datetime.datetime(2022, 8, 29, 20, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957794927, 'comment_body': 'The capacity is not `always at least twice as large as the list size` since capacity is referring to the number of elements, not doubles, that may be added before resizing.\r\n\r\nThis intro javadoc should describe the size limitation of the list. Since the data is stored using an interleaved format the maximum number of elements that may be added is approximately 2^30. This is half the maximum capacity of java.util.ArrayList. The memory usage is more efficient than using a List of Complex objects as the underlying numbers are not stored using instances of Complex.\r\n\r\nThe javadoc can be expanded to describe how to manipulate the numbers efficiently using the Complex functional interfaces when this functionality is added to the list.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957796061, 'comment_body': 'Should not be public', 'comment_created': datetime.datetime(2022, 8, 29, 21, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957798057, 'comment_body': 'You should check if this javadoc provides anything useful over the default javadoc in List. If not then remove it. The same applies to all List methods in the interface. You can use the `{@inheritDoc}` tag to pull in the parent javadoc then add to it any further information.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 9, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957800779, 'comment_body': 'Here `minCapacity` can be negative if you add a very large list to this list. However the `minCapacity` will not be larger than the sum of two positive integers (assuming the other list added to this handles up to Integer.MAX_VALUE elements). So we can treat it as unsigned then double it:\r\n```Java\r\nfinal long minArrayCapacity = Integer.toUnsignedLong(minCapacity) << 1;\r\n```\r\n', 'comment_created': datetime.datetime(2022, 8, 29, 21, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957801886, 'comment_body': 'Avoid modulus by checking if the number is odd using a mask: `(newArrayCapacity & 1) != 0`\r\n\r\nBut given that you are just incrementing by 1 if it is odd then do it all in a single branchless operation:\r\n```Java\r\n// Round-odd up to even\r\nnewArrayCapacity += newArrayCapacity & 1;\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 21, 15, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957804837, 'comment_body': 'This could do with a note explaining that minArrayCapacity has already been checked against MAX_ARRAY_SIZE so we just clip the new capacity to the appropriate range: [minArrayCapacity, MAX_ARRAY_SIZE]', 'comment_created': datetime.datetime(2022, 8, 29, 21, 19, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957809581, 'comment_body': 'This should not be incremented unless the list has been structurally modified, i.e. anything that changes the number of elements. So it should be changed in add/remove methods.\r\n\r\nThere are cases where this is called and the list will not change number of elements, e.g. ensureCapacity.\r\n\r\nYou should move the modification of this flag to the appropriate methods.\r\n\r\nThis behaviour could be tested:\r\n\r\n- Create a list\r\n- Get the iterator\r\n- Add an element\r\n- Try and use the iterator.forEach method\r\n\r\nIt should throw a ConcurrentModificationException\r\n', 'comment_created': datetime.datetime(2022, 8, 29, 21, 26, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957810252, 'comment_body': 'You already have `2 * index` so you can reuse `i` here. For consistency perhaps use `size << 1` as well.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 27, 30, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957811757, 'comment_body': 'I would just increment this in the loop:\r\n```Java\r\n        for (final Complex val : c) {\r\n            realAndImgData[i++] = val.getReal();\r\n            realAndImgData[i++] = val.getImaginary();\r\n        }\r\n```', 'comment_created': datetime.datetime(2022, 8, 29, 21, 29, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957812878, 'comment_body': 'The `expand` method is expecting a number of elements, not a number of doubles. So this should not be doubled.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 31, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957813409, 'comment_body': 'Reuse the numNew local variable instead of calling size again. The size method may be dynamically computed by the collection.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957813908, 'comment_body': 'This has no purpose as this part of the array should never be accessed as it is out-of-range.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 33, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 957814331, 'comment_body': 'Remove extra line.', 'comment_created': datetime.datetime(2022, 8, 29, 21, 34, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959788848, 'comment_body': 'I think you still need this section.\r\n\r\nYou can render the site documentation using:\r\n```\r\nmvn site:site -DgenerateReports=false\r\nopen target/site/index.html\r\n```\r\nLooking at the documentation for other modules this seems to be standard boiler plate used in all modules. So you should reinstate it. Sorry for the error.', 'comment_created': datetime.datetime(2022, 8, 31, 16, 25, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959792145, 'comment_body': 'It is not clear what is achieved in the l3, l4 test that has not already been done above.', 'comment_created': datetime.datetime(2022, 8, 31, 16, 28, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959800281, 'comment_body': 'Is this not better served by:\r\n```Java\r\nassertListOperation(list -> list.add(Complex.ofCartesian(1, 2)), l5, l6);\r\n// Expand the list by doubling in size until at the known minArrayCapacity\r\nwhile (l5.size() < 8) {\r\n    assertListOperation(list -> list.addAll(list), l5, l6);\r\n}\r\nassertListOperation(list -> list.addAll(list1), l5, l6);\r\n```', 'comment_created': datetime.datetime(2022, 8, 31, 16, 37, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959856229, 'comment_body': 'We do not need these test dependencies at the moment', 'comment_created': datetime.datetime(2022, 8, 31, 17, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959856758, 'comment_body': 'No need to be protected.', 'comment_created': datetime.datetime(2022, 8, 31, 17, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959856809, 'comment_body': 'No need to be protected.', 'comment_created': datetime.datetime(2022, 8, 31, 17, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959857936, 'comment_body': 'I do not think the javadoc requires the details about the default capacity since this is an internal detail.', 'comment_created': datetime.datetime(2022, 8, 31, 17, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959859223, 'comment_body': 'The default capacity is an internal detail. Just state that the list is constructed to allow additions up to the specified capacity without a memory reallocation.', 'comment_created': datetime.datetime(2022, 8, 31, 17, 45, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959861557, 'comment_body': 'Remove extra line', 'comment_created': datetime.datetime(2022, 8, 31, 17, 47, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959863258, 'comment_body': ""I don't think you need all the inheritDoc here.\r\n\r\nIn fact you do not require it for any param where you are using the inheritDoc tag. If you delete the param tag totally IIUC it should just pull in the parent javadoc for that parameter. So you should be able to delete a lot of param tags that simple use inheritDoc. \r\n\r\nYou can test with:\r\n```\r\nmvn javadoc:javadoc\r\n```\r\nAnd then look at the output javadoc in the target directory. If this is OK then you can delete all the plain inheritDoc param tags. Note the inheritDoc will pull in the parent documentation. Then typically you add more information to it. If you are not adding information then do not bother.\r\n"", 'comment_created': datetime.datetime(2022, 8, 31, 17, 49, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959871510, 'comment_body': 'Note that ArrayList does not perform `index < 0` here. This check is for access. If the index is negative then the IOOBE will be generated with the index value.\r\n\r\nThis is different from rangeCheckForInsert as there is copy operations that must be performed before the index is written to. If the index is negative then these operations may fail with unwanted runtime exception messages.', 'comment_created': datetime.datetime(2022, 8, 31, 17, 59, 40, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959872163, 'comment_body': '`trigger JApiCmp profile`', 'comment_created': datetime.datetime(2022, 8, 31, 18, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 959873365, 'comment_body': 'This should be commented so its purpose is clear. It deliberately reports a fixed size (and is therefore a non-functional list) and is used to trigger capacity exceptions when adding a collection to the ComplexList.', 'comment_created': datetime.datetime(2022, 8, 31, 18, 1, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': '5a0da3b40b5b4cc06fcdbfbd24a8620eb011b477', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '630d2f0584c36f74651646637f5349b0635e6c5a', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '836f877eff88a9acbe397616f1ae0333421325d5', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}]",,53705316,,User,,16,,0,0
1048093651,NUMBERS-186 added additional complex list operations,"This PR introduces additional operations that can be done on ComplexList. 

Summary of changes

ComplexListTest - unit tests for complex additional operations on ComplexList
ComplexConsumer -  interface that acts as a consumer for the complex element's double real and imaginary parts",True,123,https://api.github.com/repos/apache/commons-numbers/pulls/123,https://github.com/apache/commons-numbers/pull/123,closed,243,38,4,5,1,21,0,0,[],2022-09-06 22:55:53+00:00,2022-09-08 15:28:33+00:00,145960.0,"1 day, 16:32:40","[{'comment_id': 964644555, 'comment_body': 'java.util.function.Consumer has the method `accept`', 'comment_created': datetime.datetime(2022, 9, 7, 10, 2, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964646560, 'comment_body': 'No need for this variable, just perform the index doubling inline', 'comment_created': datetime.datetime(2022, 9, 7, 10, 5, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964647476, 'comment_body': '`Index of the complex number.`', 'comment_created': datetime.datetime(2022, 9, 7, 10, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964649406, 'comment_body': 'change `element` to `number`. Element is for a generic list; since this is typed to Complex then all element occurrences should be changed to `complex number`', 'comment_created': datetime.datetime(2022, 9, 7, 10, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964650973, 'comment_body': 'Add an empty line ', 'comment_created': datetime.datetime(2022, 9, 7, 10, 9, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964651625, 'comment_body': 'Again this `index` can be inlined', 'comment_created': datetime.datetime(2022, 9, 7, 10, 10, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964652516, 'comment_body': 'The mod count is increased when the list is structurally modified. Here no modifications are occurring so this can be removed.', 'comment_created': datetime.datetime(2022, 9, 7, 10, 11, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964653374, 'comment_body': 'This javadoc is wrong. Look at the javadoc for `forEach(Consumer<Complex>)` and adapt as appropriate.', 'comment_created': datetime.datetime(2022, 9, 7, 10, 12, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964653807, 'comment_body': '`testForEach...`\r\n\r\nThis test can be parameterized for size. This will eliminate duplication:\r\n```Java\r\n@ParameterizedTest\r\n@ValuesSource(ints = {0, 10})\r\nvoid testForEachComplexConsumer(int size) {\r\n    List<Complex> data1 = generateList(size);\r\n```', 'comment_created': datetime.datetime(2022, 9, 7, 10, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964656884, 'comment_body': 'Please stop creating larger lists using duplication. The list elements should be unique. Create the list using random complex numbers or a sequence.', 'comment_created': datetime.datetime(2022, 9, 7, 10, 15, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964657734, 'comment_body': 'This can be placed in the same loop as above. Add a simple message to the assertion, e.g. ""real"".', 'comment_created': datetime.datetime(2022, 9, 7, 10, 16, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964661051, 'comment_body': 'Test set at all positions:\r\n```Java\r\nfor (int i = 0; i < list.size(); i++) {\r\n    final double value = Math.PI * i;\r\n    list.setReal(i, value);\r\n    Assertions.assertEquals(value, list.get(i).getReal());\r\n}\r\n```\r\nAlso test set/get with invalid index positions (-1, size, size+1).', 'comment_created': datetime.datetime(2022, 9, 7, 10, 20, 33, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964661601, 'comment_body': 'Create a better random list.', 'comment_created': datetime.datetime(2022, 9, 7, 10, 21, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964663066, 'comment_body': 'double[] expected = list.stream().mapToDouble(Complex::getReal).toArray();', 'comment_created': datetime.datetime(2022, 9, 7, 10, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 964663415, 'comment_body': 'Use `Assertions.assertArrayEquals`', 'comment_created': datetime.datetime(2022, 9, 7, 10, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 965359957, 'comment_body': 'This index i should be inlined.', 'comment_created': datetime.datetime(2022, 9, 7, 22, 49, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 965359985, 'comment_body': 'This index i should be inlined.', 'comment_created': datetime.datetime(2022, 9, 7, 22, 49, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 965360670, 'comment_body': 'Since a lot of the tests now use generateList() then addAll to a new ComplexList instance this should be refactored into a method: `private static ComplexList generateComplexList(int)`', 'comment_created': datetime.datetime(2022, 9, 7, 22, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 965784959, 'comment_body': 'There are use cases for `generateList` and `generateComplexList`. The generateList would function as before and return a List implementation from the JDK. This can be assumed to work correctly. The generateComplexList would call generateList and then addAll to a new ComplexList instance. This should be asserted to be equal to the original List. This method can be used for convenience to populate a ComplexList for testing the accessor methods (get/set).\r\n\r\nOne case where you may wish to have a List that is not a ComplexList is in testing addAll. You also require a non ComplexList for any list compared for equality with ComplexList: you cannot have a list equals comparison to itself as there may be the same error in both implementations being compared.', 'comment_created': datetime.datetime(2022, 9, 8, 10, 26, 51, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 965786283, 'comment_body': 'The precomputed value i will be reused so it can be left as before, please revert.', 'comment_created': datetime.datetime(2022, 9, 8, 10, 27, 41, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 965788499, 'comment_body': 'The precomputed value i will be reused so it can be left as before, please revert.\r\n\r\nIn addition the call to setNoRangeCheck can be removed. Since you already have the value i this will avoid calling it again.\r\n', 'comment_created': datetime.datetime(2022, 9, 8, 10, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': 'ed548d6e30e7c71f0479ac22f72de316060e18e9', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e67d4f0401e285493181d898f9a7a27dd1c5e747', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58e89a44ca8816a2c1848f5cad077392e942b149', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4347c4cc7b1a243e86fc11cf76224a46b4777090', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '022147fe40803bb0f1695601026256e1d4c2c334', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}]",,53705316,,User,,16,,0,0
1050609779,Numbers 186.complex list interleaved,"This PR refactors ComplexList to be abstract and gives a interleaved implementation as a private sub-class. This allows for multiple implementations of data storage. 

Summary of changes: 

ComplexList - made abstract with factory methods implemented in interleaved implementation.
ComplexInterleavedList - private sub-class with interleaved double array storage.
ComplexListTest - updates to calling ComplexList using ComplexInterleavedList.",True,124,https://api.github.com/repos/apache/commons-numbers/pulls/124,https://github.com/apache/commons-numbers/pull/124,closed,402,245,2,5,1,13,0,0,[],2022-09-08 17:25:21+00:00,2022-09-09 16:21:35+00:00,82574.0,22:56:14,"[{'comment_id': 966333894, 'comment_body': 'Prevent extension of this class outside the inner classes by adding a private constructor. It may have to be package-private to pass the build checks (e.g. PMD).', 'comment_created': datetime.datetime(2022, 9, 8, 19, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966335387, 'comment_body': 'Some of this javadoc still applies. The list provides efficient storage of complex numbers. It does not accept null complex objects.', 'comment_created': datetime.datetime(2022, 9, 8, 19, 17, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966336360, 'comment_body': 'if ((fromArray.length & 1) != 0)\r\n', 'comment_created': datetime.datetime(2022, 9, 8, 19, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966337845, 'comment_body': '```\r\nint size = 3;\r\n... doubles(size * 2, ...\r\n\r\nfor (... ; i < size; ... \r\n```', 'comment_created': datetime.datetime(2022, 9, 8, 19, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966338870, 'comment_body': 'This loop is setting all elements to null. Just set one of them:\r\n`list2.set(1, null)`', 'comment_created': datetime.datetime(2022, 9, 8, 19, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966339844, 'comment_body': 'Check that list1 has the same size after the NPE is thrown, i.e. it is unchanged.\r\n\r\nYou could create a copy of the list for reference and use assertEquals to compare the before and after.', 'comment_created': datetime.datetime(2022, 9, 8, 19, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966885302, 'comment_body': 'Here the data is not defensively cloned. This is fine but the behaviour should be documented. Any public method should indicate that the argument array is used in-place; any external modifications to the array will be reflected in this List until a structural modification is made to the data storage, for example a resize.', 'comment_created': datetime.datetime(2022, 9, 9, 10, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966886729, 'comment_body': 'This should iterate over `size`, not `size >> 1`', 'comment_created': datetime.datetime(2022, 9, 9, 10, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966887615, 'comment_body': 'You should also check `addAll(int, Collection)`. The implementation, if done incorrectly, could move all elements to make space, then copy the new elements in and throw a NPE. This will leave the list in a broken state.\r\n\r\nIt may be better to check the contents of the list are the same using `Assertions.assertEquals(copy, list1);`', 'comment_created': datetime.datetime(2022, 9, 9, 10, 21, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966892467, 'comment_body': 'Comment empty line: `// Intentionally empty`', 'comment_created': datetime.datetime(2022, 9, 9, 10, 27, 36, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 966894058, 'comment_body': 'Create this copy at the start of the method. When used at the end of the method this will also check the add methods do not result in modifications of the list.', 'comment_created': datetime.datetime(2022, 9, 9, 10, 29, 44, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967196235, 'comment_body': 'copy.addAll(list1) should be **before** all the operations on list1. Otherwise you are not comparing before (the copy) and after (list1).', 'comment_created': datetime.datetime(2022, 9, 9, 15, 17, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967196723, 'comment_body': '`// Intentionally empty`', 'comment_created': datetime.datetime(2022, 9, 9, 15, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': '54c146d6a3529ab6bd1d6b446bbbb45da304d6bf', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb6765584b1028a716c49028712a67395217c25a', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1cc044155468572fa7cd7f9f3498ecba8d7c662', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25f42d6cb0e654723dbbbffbccc0171fdc58c505', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86eb0017bfdb20db1b087e8e4a605293de0bd562', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}]",,53705316,,User,,16,,0,0
1052351428,NUMBERS-186 added complex non-interleaved list implementation,"This PR gives a non-interleaved complex list implementation as a private sub-class in ComplexList. 

Summary of changes:

ComplexInterleavedList - private sub-class with non-interleaved double arrays storage.
ComplexListTest - updates to calling ComplexList using ComplexNonInterleavedList.",False,125,https://api.github.com/repos/apache/commons-numbers/pulls/125,https://github.com/apache/commons-numbers/pull/125,closed,652,151,2,5,2,28,0,0,[],2022-09-10 23:52:28+00:00,2022-09-12 12:35:08+00:00,132160.0,"1 day, 12:42:40","[{'comment_id': 967773414, 'comment_body': 'Code duplication of the entire method for a new list is not maintainable. Since the list must pass the same test then you can do this using a parameterized test:\r\n```Java\r\n    /**\r\n     * Generate a stream of arguments containing empty {@code Complex<List>} implementations.\r\n     *\r\n     * @return the stream of arguments\r\n     */\r\n    static Stream<Arguments> listImplementations() {\r\n        return Stream.of(Arguments.of(ComplexList.interleaved()),\r\n                         Arguments.of(ComplexList.nonInterleaved()));\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource({""listImplementations""})\r\n    void testAddAndAddAllList(List<Complex> l2) {\r\n        List<Complex> l1 = new ArrayList<>();\r\n        assertListOperation(list -> list.add(Complex.ofCartesian(1, 2)), l1, l2);\r\n        assertListOperation(list -> {\r\n            list.add(1, Complex.ofCartesian(10, 20));\r\n            return Boolean.TRUE;\r\n        }, l1, l2);\r\n        assertListOperation(list -> list.add(Complex.ofCartesian(13, 14)), l1, l2);\r\n        assertListOperation(list -> list.add(Complex.ofCartesian(15, 16)), l1, l2);\r\n        assertListOperation(list -> list.add(Complex.ofCartesian(17, 18)), l1, l2);\r\n        assertListOperation(list -> {\r\n            list.addAll(1, list);\r\n            return Boolean.TRUE;\r\n        }, l1, l2);\r\n        assertListOperation(list -> list.add(Complex.ofCartesian(19, 20)), l1, l2);\r\n        assertListOperation(list -> list.add(Complex.ofCartesian(21, 22)), l1, l2);\r\n        assertListOperation(list -> list.add(Complex.ofCartesian(23, 24)), l1, l2);\r\n    }\r\n```\r\nThe test may have to be broken down into smaller tests as the parameter will be an empty list. If you wish to start with a list populated with e.g. 10 random Complex numbers then you can add a second static method to stream arguments with populated lists.\r\n\r\nNote: You can create multiple parameters for the parameterized test if these require:\r\n```Java\r\n    static Stream<Arguments> listImplementationsWithSize() {\r\n        return Stream.of(Arguments.of(ComplexList.interleaved(), 10),\r\n                         Arguments.of(ComplexList.nonInterleaved(), 10));\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource({""listImplementationsWithSize""})\r\n    void testAddAndAddAllList(List<Complex> l2, int size) {\r\n```\r\n', 'comment_created': datetime.datetime(2022, 9, 11, 7, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967773595, 'comment_body': '`assertListOperationInterleaved`\r\n\r\nLooking at the use cases for this method, I think it could be removed if tests are broken down and parameterized.', 'comment_created': datetime.datetime(2022, 9, 11, 7, 15, 48, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967773644, 'comment_body': '`assertListOperationNonInterleaved`\r\n\r\nLooking at the use cases for this method, I think it could be removed if tests are broken down and parameterized.', 'comment_created': datetime.datetime(2022, 9, 11, 7, 16, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967774681, 'comment_body': 'These should not be here. The max capacity of the interleaved list is different from the non-interleaved list. Only the DEFAULT_CAPACITY should be shared.', 'comment_created': datetime.datetime(2022, 9, 11, 7, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967774910, 'comment_body': 'All of these except the MAX_CAPACITY are specified to this list', 'comment_created': datetime.datetime(2022, 9, 11, 7, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967775045, 'comment_body': '2<sup>31</sup>, the same capacity as ArrayList', 'comment_created': datetime.datetime(2022, 9, 11, 7, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967775308, 'comment_body': 'Also throws a NullPointerException ...', 'comment_created': datetime.datetime(2022, 9, 11, 7, 28, 18, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967775398, 'comment_body': 'return Arrays.copyOf(realParts, size);', 'comment_created': datetime.datetime(2022, 9, 11, 7, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967775442, 'comment_body': 'return Arrays.copyOf(imaginaryParts, size);', 'comment_created': datetime.datetime(2022, 9, 11, 7, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967775504, 'comment_body': 'Rounding to even is not required here', 'comment_created': datetime.datetime(2022, 9, 11, 7, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967892010, 'comment_body': 'For consistency I would rename list1 -> list. The reference lists can be `expected`.', 'comment_created': datetime.datetime(2022, 9, 11, 21, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967892456, 'comment_body': 'Indent so that `Arguments` is aligned to the same word in the line above', 'comment_created': datetime.datetime(2022, 9, 11, 21, 46, 9, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967892725, 'comment_body': 'Delete this new line.', 'comment_created': datetime.datetime(2022, 9, 11, 21, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967892797, 'comment_body': 'Add new line here. This separates the grouping of the static fields from the instance fields', 'comment_created': datetime.datetime(2022, 9, 11, 21, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967893174, 'comment_body': 'testFromArrayInterleaved', 'comment_created': datetime.datetime(2022, 9, 11, 21, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967893442, 'comment_body': 'Rename l4 -> l2; l3 -> l1', 'comment_created': datetime.datetime(2022, 9, 11, 21, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967893886, 'comment_body': 'testAddAllEnsureCapacityBranchConditions\r\n\r\nRename l6 -> l2; l5 -> l1', 'comment_created': datetime.datetime(2022, 9, 11, 21, 58, 32, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967893940, 'comment_body': 'Rename l6 -> l2; l5 -> l1', 'comment_created': datetime.datetime(2022, 9, 11, 21, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967894902, 'comment_body': 'Note you should be able to stream a function reference as the argument to the parameterized test: IntToObjFunction<List<Complex>>:\r\n```Java\r\n    void testConstructor(IntFunction<List<Complex>> constructor, int size) {\r\n        List<Complex> list = constructor.apply(size);\r\n```\r\nThis requires:\r\n```Java\r\nArguments.of((IntFunction<List<Complex>>) ComplexList::interleaved, 0),\r\nArguments.of((IntFunction<List<Complex>>) ComplexList::interleaved, 1), ...\r\n```', 'comment_created': datetime.datetime(2022, 9, 11, 22, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967895719, 'comment_body': 'Again this could be parameterized with the list constructor and an int containing the max capacity.\r\n\r\nNote if you use the `@MethodSource` annotation without any arguments then the static method is assumed to be the same name as the test method. So you can have:\r\n```Java\r\n    static Stream<Arguments> testCapacityExceptions() {\r\n        return Stream.of(\r\n            Arguments.of((IntFunction<List<Complex>>) ComplexList::interleaved, MAX_CAPACITY_INTERLEAVED),\r\n            Arguments.of((IntFunction<List<Complex>>) ComplexList::nonInterleaved, MAX_CAPACITY_NON_INTERLEAVED)\r\n        );\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource\r\n    void testCapacityExceptions(IntFunction<List<Complex>> constructor, int maxCapacity) {\r\n        Assertions.assertThrows(IllegalArgumentException.class, () -> constructor.apply(maxCapacity + 1));\r\n\r\n```', 'comment_created': datetime.datetime(2022, 9, 11, 22, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967895801, 'comment_body': 'This should be parameterized', 'comment_created': datetime.datetime(2022, 9, 11, 22, 16, 45, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967895861, 'comment_body': 'This should be parameterized as it just requires an empty list', 'comment_created': datetime.datetime(2022, 9, 11, 22, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967895901, 'comment_body': 'This should be parameterized', 'comment_created': datetime.datetime(2022, 9, 11, 22, 17, 24, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967895967, 'comment_body': 'This should be parameterized with the empty list and a size argument', 'comment_created': datetime.datetime(2022, 9, 11, 22, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967896004, 'comment_body': 'This should be parameterized', 'comment_created': datetime.datetime(2022, 9, 11, 22, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967896032, 'comment_body': 'This should be parameterized with an empty list and a size argument', 'comment_created': datetime.datetime(2022, 9, 11, 22, 18, 34, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967896082, 'comment_body': 'This should be parameterized', 'comment_created': datetime.datetime(2022, 9, 11, 22, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}, {'comment_id': 967896118, 'comment_body': 'This should be parameterized', 'comment_created': datetime.datetime(2022, 9, 11, 22, 19, 23, tzinfo=datetime.timezone.utc), 'commenter': 'aherbert', 'type': 'User'}]","[{'commit_sha': '0398eafb5ff0ad24a5f21761ecb843deff5830ce', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ead8762c8528260c837c65525343a313f588a05a', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74ff1ca1ba443fecc7747f0977a317a49b4b8c1a', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c476d617c776c5b7d06736d39bfc3660a346fd54', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ac9feb0e5a79fb57d07b606c6556e9926df7620', 'committer_username': 'sumanth-rajkumar', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2019, 8, 4, 15, 28, 46, tzinfo=datetime.timezone.utc)}]",,53705316,,User,,16,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
71975377,commons-numbers,apache/commons-numbers,Java,58,69,37,31,1481,8,19,8,"[{'id': 1052351428, 'number': 125, 'closed': datetime.datetime(2022, 9, 12, 12, 35, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 10, 23, 52, 28, tzinfo=datetime.timezone.utc), 'time_taken': 132160.0, 'time_delta': '1 day, 12:42:40', 'additions': 652, 'deletions': 151, 'state': 'closed'}, {'id': 1050609779, 'number': 124, 'closed': datetime.datetime(2022, 9, 9, 16, 21, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 8, 17, 25, 21, tzinfo=datetime.timezone.utc), 'time_taken': 82574.0, 'time_delta': '22:56:14', 'additions': 402, 'deletions': 245, 'state': 'closed'}, {'id': 1048093651, 'number': 123, 'closed': datetime.datetime(2022, 9, 8, 15, 28, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 6, 22, 55, 53, tzinfo=datetime.timezone.utc), 'time_taken': 145960.0, 'time_delta': '1 day, 16:32:40', 'additions': 243, 'deletions': 38, 'state': 'closed'}, {'id': 1045559119, 'number': 122, 'closed': datetime.datetime(2022, 9, 5, 16, 17, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 3, 21, 11, 13, tzinfo=datetime.timezone.utc), 'time_taken': 155172.0, 'time_delta': '1 day, 19:06:12', 'additions': 70, 'deletions': 1, 'state': 'closed'}, {'id': 1039205495, 'number': 121, 'closed': datetime.datetime(2022, 9, 2, 14, 24, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 29, 6, 3, 12, tzinfo=datetime.timezone.utc), 'time_taken': 375666.0, 'time_delta': '4 days, 8:21:06', 'additions': 735, 'deletions': 0, 'state': 'closed'}, {'id': 1009119237, 'number': 120, 'closed': datetime.datetime(2022, 7, 28, 9, 33, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 27, 2, 13, 41, tzinfo=datetime.timezone.utc), 'time_taken': 112784.0, 'time_delta': '1 day, 7:19:44', 'additions': 659, 'deletions': 180, 'state': 'closed'}, {'id': 1007798955, 'number': 119, 'closed': datetime.datetime(2022, 7, 26, 19, 12, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 25, 21, 34, 17, tzinfo=datetime.timezone.utc), 'time_taken': 77917.0, 'time_delta': '21:38:37', 'additions': 595, 'deletions': 425, 'state': 'closed'}, {'id': 1004341272, 'number': 118, 'closed': datetime.datetime(2022, 7, 25, 10, 8, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 21, 15, 13, 2, tzinfo=datetime.timezone.utc), 'time_taken': 327347.0, 'time_delta': '3 days, 18:55:47', 'additions': 2634, 'deletions': 1915, 'state': 'closed'}, {'id': 998234492, 'number': 117, 'closed': datetime.datetime(2022, 7, 20, 10, 51, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 21, 57, 56, tzinfo=datetime.timezone.utc), 'time_taken': 392000.0, 'time_delta': '4 days, 12:53:20', 'additions': 1393, 'deletions': 633, 'state': 'closed'}, {'id': 998225418, 'number': 116, 'closed': datetime.datetime(2022, 7, 15, 21, 49, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 15, 21, 44, 35, tzinfo=datetime.timezone.utc), 'time_taken': 281.0, 'time_delta': '0:04:41', 'additions': 1491, 'deletions': 650, 'state': 'closed'}, {'id': 991804030, 'number': 115, 'closed': datetime.datetime(2022, 7, 8, 15, 42, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 8, 15, 36, 30, tzinfo=datetime.timezone.utc), 'time_taken': 383.0, 'time_delta': '0:06:23', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 979376557, 'number': 113, 'closed': datetime.datetime(2022, 9, 13, 10, 30, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 26, 19, 30, 34, tzinfo=datetime.timezone.utc), 'time_taken': 6793198.0, 'time_delta': '78 days, 14:59:58', 'additions': 5267, 'deletions': 2494, 'state': 'closed'}, {'id': 979376438, 'number': 112, 'closed': datetime.datetime(2022, 6, 26, 19, 30, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 26, 19, 29, 48, tzinfo=datetime.timezone.utc), 'time_taken': 18.0, 'time_delta': '0:00:18', 'additions': 3511, 'deletions': 2318, 'state': 'closed'}, {'id': 978415082, 'number': 111, 'closed': datetime.datetime(2022, 6, 26, 15, 13, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 24, 14, 48, 20, tzinfo=datetime.timezone.utc), 'time_taken': 174305.0, 'time_delta': '2 days, 0:25:05', 'additions': 3309, 'deletions': 2041, 'state': 'closed'}]"
