pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
677998975,Leachim/latent variable model,"Hi @cpfiffer, could you have a quick look and give me feedback on the general outline and ideas. There are still a few little rough edges, e.g. the math is not properly displayed and one of the outputs at the end is huge, but that's the general idea for the first tutorial.

Is the amount of text too little or too much? I wasn't sure about that. And I didn't talk much about model evaluation, maybe it's worth adding a bit on that, but it's a bit difficult when there are so many parameters... ",True,121,https://api.github.com/repos/TuringLang/docs/pulls/121,https://github.com/TuringLang/docs/pull/121,closed,2257,0,3,17,25,78,0,0,[],2021-06-25 15:25:46+00:00,2022-03-03 16:01:46+00:00,21688560.0,"251 days, 0:36:00","[{'comment_id': 659384034, 'comment_body': '```suggestion\r\nYou may have come across it in many forms and names.\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 22, 22, 41, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659384134, 'comment_body': ""```suggestion\r\nFor more details and a mathematical derivation, we recommend Bishop's textbook (Christopher M. Bishop,\xa0Pattern Recognition and Machine Learning, 2006).\r\n```"", 'comment_created': datetime.datetime(2021, 6, 27, 22, 23, 37, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659384228, 'comment_body': ""For this paragraph, I'd add a little more background. People with limited biosciences knowledge (like me) have no idea what you're talking about here."", 'comment_created': datetime.datetime(2021, 6, 27, 22, 24, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659384381, 'comment_body': 'This is also a good place to answer the following three questions:\r\n\r\n1. What am I trying to teach you?\r\n2. How am I going to teach it?\r\n3. What do you need to know about this model or system to understand the tutorial?', 'comment_created': datetime.datetime(2021, 6, 27, 22, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659384547, 'comment_body': 'This stuff is a little wide for my tastes, and will be difficult to read on a markdown cell if it spills out of the horizontal space available. Try to spread this vertically more so it can be read all at once.\r\n\r\nSide note -- I don\'t know what ""non-informative cells"" are at this point, might be worth explaining this a bit.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659384841, 'comment_body': 'You should move this stuff up to the top of the document, so people know what to expect from reading. I would format the intro as\r\n\r\n- pPCA is a thing to do X\r\n- Sometimes we need to do X in biosciences\r\n- Here is a cool use case of X, using pPCA', 'comment_created': datetime.datetime(2021, 6, 27, 22, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659384895, 'comment_body': '```suggestion\r\n```\r\n\r\nRemoving some blank space', 'comment_created': datetime.datetime(2021, 6, 27, 22, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659384989, 'comment_body': ""```suggestion\r\n@model function pPCA(x, ::Type{T} = Float64) where {T}\r\n```\r\n\r\nWe've been shifting a little more to the `@model function .... ` style rather than the older `@model ...() begin =` style."", 'comment_created': datetime.datetime(2021, 6, 27, 22, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659385150, 'comment_body': '```suggestion\r\n  mean ~ MvNormal(D, 1.0)\r\n  mu = w * z .+ mean\r\n```\r\nNo need for the `Vector{T}` bit here, since `~ MvNormal...` will handle the appropriate allocation.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659385183, 'comment_body': '```suggestion\r\n```\r\n\r\nremoving extra newline', 'comment_created': datetime.datetime(2021, 6, 27, 22, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659385247, 'comment_body': '```suggestion\r\nend;\r\n```\r\n\r\nAdding a semicolon here will prevent Weave from spitting out the method signature in the `.md` document.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659385510, 'comment_body': ""I'd move the `n_chains` definitions down to the cell you actually call `sample`, so readers don't have to flick up to check how many chains are being sampled. Also, `Threads.nthreads()` is probably not needed here."", 'comment_created': datetime.datetime(2021, 6, 27, 22, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659385617, 'comment_body': ""Not sure why we're talking about the MLE here -- seems to come out of nowhere."", 'comment_created': datetime.datetime(2021, 6, 27, 22, 37, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659385688, 'comment_body': 'This means ""only posterior distributions"" and not MLEs? I\'m a little confused with this sentence.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659385778, 'comment_body': 'By this you mean the ""true"" PCA points, correct? If so, I feel like this is generally true of estimated quantities, so you could probably omit this.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659385800, 'comment_body': 'Depends, what is the important parameter(s) you want to show?', 'comment_created': datetime.datetime(2021, 6, 27, 22, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659385929, 'comment_body': ""You make a plot here and then don't explain anything about it -- add a line or two saying what you see, and what you think the reader should take away from having seen the graph."", 'comment_created': datetime.datetime(2021, 6, 27, 22, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659386493, 'comment_body': ""Sanity check kind of undersells what you're doing here, which I would think of more as a full reconstruction of the chain-implied posterior. I would say something more like\r\n\r\n\r\n>We can use the posterior samples to infer the input data from our parameter estimates. Researchers might be interested in determining which cells are most likely to have a subset of genes because ... (insert smart words here)"", 'comment_created': datetime.datetime(2021, 6, 27, 22, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659386570, 'comment_body': 'Is this what you expected to see in a graph? What does it tell you about the model, the problem, or the data?', 'comment_created': datetime.datetime(2021, 6, 27, 22, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659386631, 'comment_body': 'I would briefly explain if there are any notable differences between what you expected and what you received, and how the new graph compares to the one with the original data.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 47, 6, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659386684, 'comment_body': 'Why? Add a little more context about what that means for the model -- what does the low dimensional space tell you about cells and genes?', 'comment_created': datetime.datetime(2021, 6, 27, 22, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659386978, 'comment_body': 'I don\'t know what W is by the time I get here. A good convention for using mathematical symbols is to say their meaning right before the symbol ""risk aversion Î³"" or ""factor space F"" or something like that.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 49, 57, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387002, 'comment_body': '```suggestion\r\n```\r\n\r\nextra newline', 'comment_created': datetime.datetime(2021, 6, 27, 22, 50, 10, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387040, 'comment_body': '```suggestion\r\n@model function pPCA_ARD(x, ::Type{T} = Float64) where {T}\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 22, 50, 29, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387143, 'comment_body': 'Might be worth noting above or in the comments why this is commented out, and what uncommenting it would give you.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 51, 13, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387152, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 22, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387228, 'comment_body': '```suggestion\r\nend;\r\n```\r\n\r\nPrevents Weave from writing \r\n\r\n```\r\npPCA_ARD (generic function with 2 methods)\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 22, 52, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387308, 'comment_body': 'Tell me why the plot matters -- what do you see in in the graph that I need to know?', 'comment_created': datetime.datetime(2021, 6, 27, 22, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387373, 'comment_body': 'Should have some words here to say ""blah blah the plot was cool but now let\'s look at the actual means"" or something.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 53, 18, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387477, 'comment_body': 'What does this plot tell me?\r\n\r\nYou should also add a sentence or two here recapping what you learned from this little section.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387665, 'comment_body': 'Can you give a specific example here, as it relates to the Iris data set? Like what is the batch effect? Tell us in advance so we know what to look for.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387770, 'comment_body': '```suggestion\r\nFour features were measured from each sample: the length and the width of the sepals and petals, in centimeters. [RDatasets.jl](https://github.com/JuliaStats/RDatasets.jl) contains the Iris dataset.\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 22, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387845, 'comment_body': 'Might be more informative to use the first five rows:\r\n```suggestion\r\nfirst(dat, 5)\r\n```', 'comment_created': datetime.datetime(2021, 6, 27, 22, 57, 27, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659387950, 'comment_body': 'This is a big code block down below. Tell me beforehand what it does.', 'comment_created': datetime.datetime(2021, 6, 27, 22, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659388035, 'comment_body': 'What\'s the ""problem"" with batch effects? What does identifying them give us?', 'comment_created': datetime.datetime(2021, 6, 27, 22, 59, 12, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659388195, 'comment_body': ""Okay, for this graph, you should note why it's different from the one above -- what did the batch effect do? To me, it looks like the classification problem got a lot harder. Make that explicit!"", 'comment_created': datetime.datetime(2021, 6, 27, 23, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 659388290, 'comment_body': 'Perfect, love it!', 'comment_created': datetime.datetime(2021, 6, 27, 23, 1, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 669565747, 'comment_body': '```suggestion\r\n# Extract parameter estimates for plotting - mean of posterior\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 12, 24, 52, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669568704, 'comment_body': 'Is there a particular reason for this change in iteration order? Julia is column-major and so reading `x[:, d]` will read a contiguous chunk of memory while `x[d, :]` will result in strides of `size(x, 1)`, i.e. iteration over the last dimension is preferable (see https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-column-major for more info).', 'comment_created': datetime.datetime(2021, 7, 14, 12, 28, 44, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669617540, 'comment_body': ""Since we're only using `Matrix{Float64}` in this model, it's better to just add this as  type-parameter, rather than `Float64`, i.e.\r\n\r\n```suggestion\r\n@model function pPCA(x, ::Type{TV} = Matrix{Float64}) where {TV}\r\n```\r\n\r\nThis is because Turing will replace `T` with the corresponding AD-compatible type, e.g. for ReverseDiff.jl `T = TrackedReal`, and similarly for vectors, matrices, etc. Therefore if one were to use `setadbackend(:reversediff)` for this model you'd end up with `Matrix{<:TrackedReal}` rather than `TrackedMatrix{<:Real}`, which can lead to performance degradation for reverse-mode AD systems since it might not be able to leverage array-adjoints but falls back to elementwise tracking. Does this make sense? :confused: \r\n\r\nEDIT: In the later models you sometimes use both `Vector{Float64}` and `Matrix{Float64}`. A way of handling both using a single type-parameter is `::Type{T} = Array{Float64}` and then do `TV{1}(undef, ...)` for `Vector` and `TV{2}(undef, ...)` for `Matrix`. In Julia `Array{T, N}` and `Array{T}{N}` are equivalent (https://docs.julialang.org/en/v1/devdocs/types/#UnionAll-types)"", 'comment_created': datetime.datetime(2021, 7, 14, 13, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669617663, 'comment_body': '```suggestion\r\nHere, you see the simulated data. You can see two groups of cells that differ in the expression of genes. While the difference between the two groups of cells here is fairly obvious from looking at the raw data, in practice and with large enough data sets, it is often impossible to spot the differences from the raw data alone. If you have some patience and compute resources you can increase the size of the dataset, or play around with the noise levels to make the problem increasingly harder.\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 13, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669619738, 'comment_body': 'Also, in this particular case, the easiest solution is probably:\r\n```julia\r\n  w ~ filldist(Normal(), D, D)\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 13, 33, 51, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669620615, 'comment_body': 'Same as below.\r\n\r\n```suggestion\r\n  z ~ filldist(Normal(), D, N)\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 13, 34, 53, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669622116, 'comment_body': ""```suggestion\r\n    x[:,d] ~ MvNormal(mu[:,d], 1.)\r\n```\r\n\r\nIf there is a particular meaning to the dimensions that you want to preserve, I'd recommend instead just transposing one of the matrices in the computation of `mu` to obtain the same result."", 'comment_created': datetime.datetime(2021, 7, 14, 13, 36, 44, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669626129, 'comment_body': ""300 samples isn't a lot :confused: Is it insanely slow or something?\r\n\r\nAlso, is there a reason why `MCMCThreads` are being used when we're only using 1 chain? Or are you planning on using more chains?"", 'comment_created': datetime.datetime(2021, 7, 14, 13, 41, 31, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669627582, 'comment_body': '```suggestion\r\n# Extract parameter estimates for plotting - mean of posterior\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 13, 43, 8, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669628189, 'comment_body': 'Is this the actual reasoning or is it because NUTS takes too long? :sweat_smile: ', 'comment_created': datetime.datetime(2021, 7, 14, 13, 43, 43, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669735608, 'comment_body': 'Same as above\r\n```suggestion\r\n  z ~ filldist(Normal(), D, N)\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 15, 43, 23, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669736043, 'comment_body': 'Same as above\r\n```suggestion\r\n  alpha ~ filldist(Gamma(1., 1.), D)\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 15, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669737704, 'comment_body': 'As mentioned above, better to change the iteration order and then just transpose later\r\n```suggestion\r\n  w = Matrix{T}(undef, D, D)\r\n  for d in 1:D\r\n    w[:, d] ~ MvNormal(zeros(D), 1. ./ sqrt.(alpha))\r\n  end\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 15, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669737916, 'comment_body': '```suggestion\r\n    x[:,d] ~ MvNormal(mu[:, d], 1. / sqrt(tau))\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 15, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669739589, 'comment_body': '```suggestion\r\n  z ~ filldist(Normal(), D, N)\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 15, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669740038, 'comment_body': '```suggestion\r\n  w ~ filldist(Normal(), D, D)\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 15, 48, 2, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669740555, 'comment_body': 'Same as mentioned above: better to change iteration order and transpose.\r\n```suggestion\r\n    x[:,d] ~ MvNormal(mu[:,d], 1.)\r\n```', 'comment_created': datetime.datetime(2021, 7, 14, 15, 48, 35, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669746485, 'comment_body': 'Also, if you wanna make this compatible with Zygote.jl, you could potentially use a `MatrixNormal` https://juliastats.org/Distributions.jl/stable/matrix/#Distributions.MatrixNormal I think.', 'comment_created': datetime.datetime(2021, 7, 14, 15, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 670369131, 'comment_body': ""no, just me being sloppy. I'll try to stick to the convention throughout."", 'comment_created': datetime.datetime(2021, 7, 15, 11, 16, 58, tzinfo=datetime.timezone.utc), 'commenter': 'leachim', 'type': 'User'}, {'comment_id': 670370258, 'comment_body': ""I originally had more than 1 chain, and then I decided it was easier to just have one for the purpose of the tutorial. I'll put in some explanation. The problem is we are running a few chains (one per model), so I don't want any individual one to take too long."", 'comment_created': datetime.datetime(2021, 7, 15, 11, 18, 46, tzinfo=datetime.timezone.utc), 'commenter': 'leachim', 'type': 'User'}, {'comment_id': 670370686, 'comment_body': ':rofl: you caught me ;) ', 'comment_created': datetime.datetime(2021, 7, 15, 11, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'leachim', 'type': 'User'}, {'comment_id': 686862979, 'comment_body': 'Could we have a little more motivation here?', 'comment_created': datetime.datetime(2021, 8, 11, 14, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 686869091, 'comment_body': 'This stuff is a good motivation, and might be a good candidate to generalize and move to the top paragraph.', 'comment_created': datetime.datetime(2021, 8, 11, 14, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 693532434, 'comment_body': '```suggestion\r\nHere, we run the inference with the NUTS sampler. Feel free to try [different samplers](https://turing.ml/stable/docs/library/#samplers).\r\n```', 'comment_created': datetime.datetime(2021, 8, 22, 17, 26, 55, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 693532463, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 22, 17, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 707182793, 'comment_body': '```suggestion\nusing LinearAlgebra\n```\n', 'comment_created': datetime.datetime(2021, 9, 13, 9, 55, 11, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707183743, 'comment_body': 'Also in this tutorial it seems a bit complicated to use two plotting frameworks?', 'comment_created': datetime.datetime(2021, 9, 13, 9, 56, 29, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707184636, 'comment_body': 'The constructor is deprecated.', 'comment_created': datetime.datetime(2021, 9, 13, 9, 57, 41, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707185156, 'comment_body': 'Here as well.', 'comment_created': datetime.datetime(2021, 9, 13, 9, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 712184614, 'comment_body': ""Yes, I am only using statsplots to show one convergence plot of chains, everything else is done with VegaLite. I can remove that plot, but on the other hand, I don't think it's the end of the world having two different frameworks included. "", 'comment_created': datetime.datetime(2021, 9, 20, 13, 48, 23, tzinfo=datetime.timezone.utc), 'commenter': 'leachim', 'type': 'User'}, {'comment_id': 716601265, 'comment_body': '```suggestion\r\nBijectors = ""0.9.8""\r\nDataFrames = ""1""\r\nDistributions = ""0.25""\r\nKernelDensity = ""0.6""\r\nRDatasets = ""0.7""\r\nStatsPlots = ""0.14""\r\nTuring = ""0.18""\r\nVegaLite = ""2.6""\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 11, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716602463, 'comment_body': ""Are you using 2 spaces or 4 spaces for indentation? Here it is 2 and below it is 4. The Julia convention is 4 spaces. 2 would also be okay, but mixing them up doesn't help readability."", 'comment_created': datetime.datetime(2021, 9, 27, 11, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716603092, 'comment_body': 'Thanks for adding the assertions :+1: ', 'comment_created': datetime.datetime(2021, 9, 27, 11, 30, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716603286, 'comment_body': '```suggestion\r\nrename!(df_pca, Symbol.([""z""*string(i) for i in collect(1:n_genes)]))\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 11, 30, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716603548, 'comment_body': '```suggestion\r\n# Extract parameter estimates for plotting - mean of posterior\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 11, 31, 14, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716603881, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 11, 31, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716604107, 'comment_body': '```suggestion\r\nrename!(df_pre, Symbol.([""z""*string(i) for i in collect(1:n_genes)]))\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 11, 32, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716604607, 'comment_body': ""```suggestion\r\ndf_pre[!,:type] = repeat([1, 2], inner=n_cellsÃ·2)\r\n```\r\nYou're using no whitespace around equal symbols in keyword arguments pretty consistently."", 'comment_created': datetime.datetime(2021, 9, 27, 11, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716604890, 'comment_body': '```suggestion\r\nrename!(df_pre, Symbol.([""z""*string(i) for i in collect(1:d)]))\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 11, 33, 31, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716605126, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 9, 27, 11, 33, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 716657138, 'comment_body': 'I have fixed it to 2 whitespaces throughout now.', 'comment_created': datetime.datetime(2021, 9, 27, 12, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'leachim', 'type': 'User'}]","[{'commit_sha': '3f724428f61f4601406a9242fd39ce883b84b8a7', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f34873046a7f1c3f99dfe0acf520a0328d77c554', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '372ebaf7e59279254981f815b93efe0753b80ad5', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5fe983c9399ae1b022d4aee6fbe11ffb06c463d', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f092f7d66a2686d0843d9db2204c7c976eaa09b6', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '27986cbcfd82c4d3fa7f3549545d95a8eb74b2bf', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '537b348862a98aaba6324acede0e64c4ac6e347b', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb24b7c0ae9b06b7e9e8847488df7543c56b4ca8', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35792509bf007def2ee468ec90d7885563414acf', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd06ffc8275e73260d96a67711359092a2da09a0', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '013f476a2c0af0af93e608dcf29783a651353a79', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7717cb977c96c6a1f473ac3765b76fd5f6e92d32', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c60b3a62a1c266ff76e58d4417f3fd0f486bbdcf', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '420c9ecc6737428ce1943bc69b7ba8c8589f2b14', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83d4f7653b559980d6e3929cacf433d75bf8093c', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe0f590e7a916d0020d23d7fb231b76da484d000', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb2a7c3c821cc25c43c8dab6da978c5dad73306e', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}]",Michael,2598597,,User,,7,,3,9
688989961,GPLVM tutorial,"This is some initial code for the GPLVM model. @torfjelde I am trying to get ADVI working for this example, but there is an error popping up to do with logabsdetjac. Do you mind having a look at this, since you seem to have worked on the bijectors package before.

It is working with the NUTS sampler inference, but running the same model with ADVI throws this error.",True,122,https://api.github.com/repos/TuringLang/docs/pulls/122,https://github.com/TuringLang/docs/pull/122,closed,2062,0,3,16,11,27,0,0,[],2021-07-13 13:11:18+00:00,2022-03-03 16:09:19+00:00,20141881.0,"233 days, 2:58:01","[{'comment_id': 669553588, 'comment_body': ""The following will fix it:\r\n```suggestion\r\n  Z_vec ~ filldist(Normal(0., 1.), K * N)\r\n  Z = reshape(Z_vec, K, N)\r\n```\r\n\r\nIt's due to the meanfield approximation constructed not handling higher-dim arrays properly. I have a PR open with a fix for this, but it never got any attention; I'll try to get that PR merged so the above workaround won't be necessary."", 'comment_created': datetime.datetime(2021, 7, 14, 12, 9, 58, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 669748712, 'comment_body': 'Great, thanks for the quick response!', 'comment_created': datetime.datetime(2021, 7, 14, 15, 58, 28, tzinfo=datetime.timezone.utc), 'commenter': 'leachim', 'type': 'User'}, {'comment_id': 671247825, 'comment_body': ""I am running into some sort of race condition/infinity loop now (or it's just taking realllly long). It's affecting both MCMC inference and ADVI. For ADVI I get an error message, whereas MCMC just seems to run forever. This happens when I uncomment these 2 lines, I added a reproducible example in the latest commit:\r\n```\r\n#  using Zygote # Tracker supported? check it?\r\n#  Turing.setadbackend(:zygote)\r\n```\r\nShould I raise an issue for this in Turing?"", 'comment_created': datetime.datetime(2021, 7, 16, 13, 18, 50, tzinfo=datetime.timezone.utc), 'commenter': 'leachim', 'type': 'User'}, {'comment_id': 671350543, 'comment_body': ""I think so -- I've been running into this on another project too, and honestly I'm kind of glad that someone else can replicate this issue outside of my project."", 'comment_created': datetime.datetime(2021, 7, 16, 15, 38, 53, tzinfo=datetime.timezone.utc), 'commenter': 'cpfiffer', 'type': 'User'}, {'comment_id': 671515491, 'comment_body': ""This is probably also what's timing out all the CIs ð \r\n\r\nEDIT: It actually seems like it's the GP in this case though. If you remove the `Y ~ ...` it works. \r\n\r\nAlso, you probably don't want to use `filldist(prior, D)` here; `Y ~ prior` should do the trick (Turing just calls `loglikelihood` under the hood, and so you can verify that this would work by just checking that `loglikelihood(prior, Y)` returns a single float)."", 'comment_created': datetime.datetime(2021, 7, 16, 20, 43, 48, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 671549077, 'comment_body': 'https://github.com/TuringLang/DistributionsAD.jl/issues/180', 'comment_created': datetime.datetime(2021, 7, 16, 22, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'torfjelde', 'type': 'User'}, {'comment_id': 693499620, 'comment_body': 'If you write one sentence per line, then this works much better with the diff. Also, the sentences are currently too long for the GitHub interface and for people who use more advanced editors with delete-sentence and similar shortcuts. For example, Visual Studio Code, Vim or Emacs.', 'comment_created': datetime.datetime(2021, 8, 22, 13, 4, 58, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 693499887, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 8, 22, 13, 7, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 693499935, 'comment_body': '```suggestion\r\n\r\n# normalize data\r\n```', 'comment_created': datetime.datetime(2021, 8, 22, 13, 7, 49, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 693499964, 'comment_body': '```suggestion\r\nWe will start out by demonstrating the basic similarity between pPCA (see the tutorial on this topic)\r\n```', 'comment_created': datetime.datetime(2021, 8, 22, 13, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 693500143, 'comment_body': '```suggestion\r\n  Z ~ filldist(Normal(0.0, 1.0), K, N)\r\n```\r\nMore explicit/clear and also consistent with other uses in the tutorial.', 'comment_created': datetime.datetime(2021, 8, 22, 13, 9, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 693500939, 'comment_body': 'Spacing inconsistent. Here is a space (`Y[:, d]`) and above it is not (`x[:,d]`). There is no good reason to not stick to one style and use it everywhere. I would suggest using a space behind the comma. See also ""Use whitespace to make the code more readable."" at [BlueStyle](https://github.com/invenia/BlueStyle).', 'comment_created': datetime.datetime(2021, 8, 22, 13, 15, 46, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 693501139, 'comment_body': 'Can a simple one liner function be defined for these two? The name of the one-liner could also shed light on what these lines do exactly.\r\n\r\nAlso applies to the 4 or 5 occurrences of this kind of sentence below.', 'comment_created': datetime.datetime(2021, 8, 22, 13, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 693501314, 'comment_body': 'Could you add a small clarification for this block?', 'comment_created': datetime.datetime(2021, 8, 22, 13, 18, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 693501366, 'comment_body': 'end of sentence missing', 'comment_created': datetime.datetime(2021, 8, 22, 13, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 693501456, 'comment_body': '```suggestion\r\nndim = 2\r\n```\r\nAlso next two lines', 'comment_created': datetime.datetime(2021, 8, 22, 13, 19, 54, tzinfo=datetime.timezone.utc), 'commenter': 'rikhuijzer', 'type': 'User'}, {'comment_id': 707148260, 'comment_body': 'Turing already loads (or rather reexports) Distributions:\n\n```suggestion\nusing LinearAlgebra\n```\n', 'comment_created': datetime.datetime(2021, 9, 13, 9, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707150623, 'comment_body': 'This constructor is deprecated:\n\n```suggestion\n    x[:, d] ~ MvNormal(mu[:, d], I)\n```\n', 'comment_created': datetime.datetime(2021, 9, 13, 9, 14, 57, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707152219, 'comment_body': '```suggestion\n  Î± ~ MvLogNormal(MvNormal(zeros(K), I))\n```\n', 'comment_created': datetime.datetime(2021, 9, 13, 9, 17, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707152790, 'comment_body': 'Bit shorter:\n\n```suggestion\n  Z ~ filldist(Normal(), K, N)\n  mu ~ filldist(Normal(), N)\n```\n', 'comment_created': datetime.datetime(2021, 9, 13, 9, 17, 43, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707153125, 'comment_body': '```suggestion\n  Î± ~ MvLogNormal(MvNormal(zeros(K), I))\n```\n', 'comment_created': datetime.datetime(2021, 9, 13, 9, 18, 11, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707153534, 'comment_body': '```suggestion\n  Z ~ filldist(Normal(), K, N)\n  mu ~ filldist(Normal(), N)\n```\n', 'comment_created': datetime.datetime(2021, 9, 13, 9, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707155575, 'comment_body': 'Is there a specific reason for using both StatsPlots and VegaLite? Seems a bit complicated to use two different plotting frameworks in one tutorial.', 'comment_created': datetime.datetime(2021, 9, 13, 9, 21, 6, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707156399, 'comment_body': '```suggestion\n  Î± ~ MvLogNormal(MvNormal(zeros(K), I))\n```\n', 'comment_created': datetime.datetime(2021, 9, 13, 9, 22, 7, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707157863, 'comment_body': '```suggestion\n  Z ~ filldist(Normal(), K, N)\n  mu ~ filldist(Normal(), N)\n```', 'comment_created': datetime.datetime(2021, 9, 13, 9, 24, 6, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707159214, 'comment_body': 'FYI `filldist(Normal(), N)` just returns a `MvNormal`.', 'comment_created': datetime.datetime(2021, 9, 13, 9, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}, {'comment_id': 707159980, 'comment_body': 'Use the function from above?', 'comment_created': datetime.datetime(2021, 9, 13, 9, 26, 40, tzinfo=datetime.timezone.utc), 'commenter': 'devmotion', 'type': 'User'}]","[{'commit_sha': 'd8bce1c808afaf4fd7773fa06aca9608f4cb0adb', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f41cf3a41c606fed47cce31f58b8ca4e123e192a', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8256a94804f2106e4e8ac7857fb2212ff6801c66', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3debcec39974f2de8c1c02f2be794c937e8d5791', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4157c64302732be44830411ce766de90be3f0ac0', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bb2e55e846210f09690dbbab911140b5b122102', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0e11fa3dd9e2c173e8a4d2848763d4054b268500', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71e4d8f0bbe438193a7983a7daf7c52df5e67cec', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a88c5c55f2e878b0b0e7b2627a1b6f8ad492e13e', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9b1a72ef0b52e5c451fb46eac3bf8a2b2f06c55', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dcf2f93bf09638be67c1e1b4c2c862717bfac2a', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7c32c6ccd6ef8263130d5ba14d057ada1ade81a', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52fe1713fcc7380159f016ad9098cb3f268c431c', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a39bc31f80b0edc4ed531141af90032a9af5ffa3', 'committer_username': 'leachim', 'committer_name': 'Michael', 'committer_email': None, 'commit_date': datetime.datetime(2012, 10, 19, 11, 18, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd359c6a7042448967ea86c33367b2a4ecae0af86', 'committer_username': 'yebai', 'committer_name': 'Hong Ge', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 15, 21, 53, 50, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ecfe69bc1119714d1f5eae84057e59720a08d40', 'committer_username': 'yebai', 'committer_name': 'Hong Ge', 'committer_email': None, 'commit_date': datetime.datetime(2013, 1, 15, 21, 53, 50, tzinfo=datetime.timezone.utc)}]",Michael,2598597,,User,,7,,3,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
144602889,docs,TuringLang/docs,Shell,98,226,8,44,517,45,9,5,"[{'id': 688989961, 'number': 122, 'closed': datetime.datetime(2022, 3, 3, 16, 9, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 13, 11, 18, tzinfo=datetime.timezone.utc), 'time_taken': 20141881.0, 'time_delta': '233 days, 2:58:01', 'additions': 2062, 'deletions': 0, 'state': 'closed'}, {'id': 677998975, 'number': 121, 'closed': datetime.datetime(2022, 3, 3, 16, 1, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 25, 15, 25, 46, tzinfo=datetime.timezone.utc), 'time_taken': 21688560.0, 'time_delta': '251 days, 0:36:00', 'additions': 2257, 'deletions': 0, 'state': 'closed'}, {'id': 611417006, 'number': 115, 'closed': datetime.datetime(2021, 4, 9, 14, 37, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 8, 10, 11, 35, tzinfo=datetime.timezone.utc), 'time_taken': 102382.0, 'time_delta': '1 day, 4:26:22', 'additions': 84, 'deletions': 92, 'state': 'closed'}]"
