pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
668885687,Migrate Essentials v0.0.1: Implement Client with openUrl method,"## Summary

1. HttpClient with QUIC, HTTP2, brotli support
2. HttpClient with a customizable user agent string
3. HttpClient close method (without force close)
4. open, openUrl & other associated methods.
5. Response is consumable using `dart:io` style API.
6. Different types of `Exception`s are implemented.

### Notes and Breaking Changes from `dart:io`

1. Custom SecurityContext is no longer handled by the client. Users have to handle it in other ways. (To be documented later)
2. userAgent property is now read-only. Custom userAgent should be passed as a constructor argument.
3. Force close isn't enabled in this PR.


Partial migration from: [unsuitable001/dart_cronet_sample](https://github.com/unsuitable001/dart_cronet_sample)",True,2,https://api.github.com/repos/google/cronet.dart/pulls/2,https://github.com/google/cronet.dart/pull/2,closed,27054,15,65,42,8,183,0,0,[],2021-06-12 14:54:46+00:00,2021-07-02 12:28:11+00:00,1719205.0,"19 days, 21:33:25","[{'comment_id': 650404480, 'comment_body': 'Can you restructure `.gitignore` to only have additions.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650404596, 'comment_body': 'This can be removed', 'comment_created': datetime.datetime(2021, 6, 12, 15, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405174, 'comment_body': 'You can mention the subset of features exposed added here.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405470, 'comment_body': 'Since Markdown does not render more than 2 new lines, you can remove any extra newlines from all `.md` files.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405611, 'comment_body': 'I think we can skip the example of adding a package to `pubspec.yaml`.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405747, 'comment_body': 'What about mobile platforms?', 'comment_created': datetime.datetime(2021, 6, 12, 15, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405887, 'comment_body': 'Maybe also add a section on running tests.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650406131, 'comment_body': 'Make sure the comments follow this -\r\n1. The first letter is capitalized.\r\n2. Sentences end with a full stop.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650406250, 'comment_body': 'Use only 1 whitespace between comment and text.\r\n```yaml\r\n    - lib/third_party/** # May not be fully migrated.\r\n```', 'comment_created': datetime.datetime(2021, 6, 12, 15, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650406386, 'comment_body': 'Why are we excluding `examples/**` and `third_party/**` from linting?', 'comment_created': datetime.datetime(2021, 6, 12, 15, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650406985, 'comment_body': 'End sentences with full stop.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650407376, 'comment_body': ""Break comments at 80 chars.\r\n```dart\r\n/// Gets the [wrapper]'s source code's path, throws an [Exception] if not found.\r\n```\r\n\r\nAlso, follow this for comments -\r\n```dart\r\n/// A description.\r\n///\r\n/// A more detailed explanation, notes, example if neccesary.\r\nvoid func(){...}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 12, 16, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650407991, 'comment_body': ""I'll add that after adding those android specific code."", 'comment_created': datetime.datetime(2021, 6, 12, 16, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650409390, 'comment_body': ""`examples` folder contains flutter examples (which is currently a placeholder). After you are done with this review, I'll add the actual code and remove this line.\r\nAnd, for `third_party` we can't ensure that if it's linted using `package:lints` rule or not. Even though they contains code from `dart:io`."", 'comment_created': datetime.datetime(2021, 6, 12, 16, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650414145, 'comment_body': 'Instead of excluding it entirely, you can consider adding `// ignore_for_file: lint1, lint2...`.\r\nSo that we know which lints can and cannot he handled.', 'comment_created': datetime.datetime(2021, 6, 12, 17, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650415684, 'comment_body': 'That sounds good to me.', 'comment_created': datetime.datetime(2021, 6, 12, 17, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650485392, 'comment_body': ""We can remove this entire thing as well.\r\n```gitignore\r\n# Directory created by dartdoc.\r\n# If you don't generate documentation locally you can remove this line.\r\ndoc/api/\r\n```"", 'comment_created': datetime.datetime(2021, 6, 13, 7, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650485927, 'comment_body': 'You should remove this, it is enough to mention this in the PR.', 'comment_created': datetime.datetime(2021, 6, 13, 7, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650486366, 'comment_body': 'Using the `pub` command directly has been deprecated and will be removed soon. Use `dart pub ...` or `flutter pub ...` instead of `pub ...`.', 'comment_created': datetime.datetime(2021, 6, 13, 7, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650486679, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 6, 13, 7, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650487427, 'comment_body': 'Use `preamble` to add `// ignore_for_file: lint1, lint2, lint3...` at the top of files generated by ffigen.', 'comment_created': datetime.datetime(2021, 6, 13, 8, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650488011, 'comment_body': ""Oops. Typo :) I'll fix it.\n\nBtw, I meant to say - The response is consumable using 2 styles of APIs. If callbacks are registered, and then if someone try to use stream based API, that returned stream will be closed immediately.\n\nAlternate thought: We can resolve the future with error if the above situation occurs.\n\nWhich one should I prefer?"", 'comment_created': datetime.datetime(2021, 6, 13, 8, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650488555, 'comment_body': 'We may need to add the cronet license header here. Since this file has been generated from third party code.\r\n\r\nSee this https://github.com/dart-lang/ffigen/blob/19da55249ba2efacc147982107698dcda04ea3a6/example/libclang-example/pubspec.yaml#L86-L92', 'comment_created': datetime.datetime(2021, 6, 13, 8, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650489486, 'comment_body': 'You should consider wrapping all your tests inside groups. They are printed as prefix for every test inside. You can simply use the name of your test file here without the extension.\r\n\r\nExample test from ffigen - https://github.com/dart-lang/ffigen/blob/master/test/header_parser_tests/functions_test.dart#L17.', 'comment_created': datetime.datetime(2021, 6, 13, 8, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650489905, 'comment_body': ""Having group can be beneficial here, it reduces the test description you would have to write.\r\n```dart\r\ngroup(' HttpException', (){\r\n  test('404, Not Found',()async{\r\n    ...\r\n  })\r\n});\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 6, 13, 8, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650490571, 'comment_body': ""You should consider adding dart docs to internal classes as well, this will be helpful in the future. There have been countless occasions when I didn't remember the purpose of a class in ffigen but even a single-line description made it easier.\r\n\r\nIt is okay to leave the dart doc if it's very trivial. So this is just a suggestion you can use accordingly."", 'comment_created': datetime.datetime(2021, 6, 13, 8, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650490793, 'comment_body': 'What is the need to wrap this class like this?', 'comment_created': datetime.datetime(2021, 6, 13, 8, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650494548, 'comment_body': ""We don't want to expose constructor of this class to the user."", 'comment_created': datetime.datetime(2021, 6, 13, 9, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650494727, 'comment_body': 'Got it. :)', 'comment_created': datetime.datetime(2021, 6, 13, 9, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650510801, 'comment_body': 'Throwing an error sounds good to me.', 'comment_created': datetime.datetime(2021, 6, 13, 11, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650512043, 'comment_body': 'Okay nevermind this.', 'comment_created': datetime.datetime(2021, 6, 13, 11, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650521481, 'comment_body': ""Keeping it as it is, as you've said."", 'comment_created': datetime.datetime(2021, 6, 13, 12, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650545954, 'comment_body': 'Added :)', 'comment_created': datetime.datetime(2021, 6, 13, 16, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 651548869, 'comment_body': 'Do all the tests use this port? Maybe you should run the tests like `dart run test --concurrency=1` (and also mention this in readme) otherwise this port could be in use since package:test runs tests concurrently (4 threads by default).', 'comment_created': datetime.datetime(2021, 6, 15, 8, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 651555063, 'comment_body': ""Instead of using so many different ports, which obviously increase the chances of failure, you should stick to using just 1. This is likely to happen on CI systems like Travis which would run on every single PR.\r\n\r\nYou can also simply set the port as `0`. See https://api.flutter.dev/flutter/dart-io/ServerSocket/bind.html#:~:text=version%206%20only-,If%20port%20has%20the%20value%200,The,-optional%20argument%20backlog\r\nThis way you don't have to bother about tests failing due to used up ports.\r\n\r\nAnd the returned ServerSocket has the actual `port` which was assigned by the system.\r\n"", 'comment_created': datetime.datetime(2021, 6, 15, 8, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 651556358, 'comment_body': ""If you use `0` as the port you probably don't have to worry about concurrency anymore."", 'comment_created': datetime.datetime(2021, 6, 15, 8, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 651594097, 'comment_body': ""Ah.. I wasn't aware about this port `0` thing. I'll update it.\n\nWhat port should I choose for that `wrong port` test? In `http_request_exception_test.dart`"", 'comment_created': datetime.datetime(2021, 6, 15, 9, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 651601691, 'comment_body': ""You can create an HttpServer with port 0, get the real port, and then close the socket.\r\nThis port should now definitely be closed. So you can use this.\r\n\r\n\r\nAlso you shouldn't use raw strings everywhere like this. You can make a `test_utils.dart` file to place constants (like HOST='localhost', PORT=0) and for functions which are used a lot throughout many tests, this improves code readability and changes to everything can be done in one single place."", 'comment_created': datetime.datetime(2021, 6, 15, 9, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 651687492, 'comment_body': ""Okay, I'll do it :)"", 'comment_created': datetime.datetime(2021, 6, 15, 11, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 652009230, 'comment_body': 'Make sure you have the copyright notice header everywhere.\r\n\r\n```\r\n// Copyright (c) 2021, the Dart project authors.  Please see the AUTHORS file\r\n// for details. All rights reserved. Use of this source code is governed by a\r\n// BSD-style license that can be found in the LICENSE file.\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 17, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 652331137, 'comment_body': 'Done :)', 'comment_created': datetime.datetime(2021, 6, 16, 3, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 652453137, 'comment_body': '`dart run cronet` should give an error message saying what the valid platforms are when running it with an invalid platform.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652453852, 'comment_body': 'Trying to run any cronet code without downloading the binaries should give an error message what command to run to download the binaries.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652460846, 'comment_body': ""If `.gitignore` and `.pubignore` are identical, we can omit `.pubignore`.\r\n\r\nIf they're not identical, can we generate the one from the other with a script in `tool/`? Or maybe generate both? That way we make sure it doesn't go out of sync and we accidentally start publishing too many files to pub. (E.g. of something gets added to `.gitignore` but not to `.pubignore`.)"", 'comment_created': datetime.datetime(2021, 6, 16, 8, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652463843, 'comment_body': 'This doesn\'t work for me.\r\n\r\n```\r\ndacoharkes@dacoharkes-l:~/cronet.dart$ dart run cronet linux64\r\nBuilding Wrapper...\r\nUnhandled exception:\r\nProcessException: Permission denied\r\n  Command: /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper/build.sh /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper ""86.0.4240.198""\r\n#0      _ProcessImpl._runAndWait (dart:io-patch/process_patch.dart:476:7)\r\n#1      _runNonInteractiveProcessSync (dart:io-patch/process_patch.dart:619:18)\r\n#2      Process.runSync (dart:io-patch/process_patch.dart:66:12)\r\n#3      buildWrapper (package:cronet/src/prepare_cronet.dart:33:15)\r\n#4      main (file:///usr/local/google/home/dacoharkes/cronet.dart/bin/cronet.dart:10:7)\r\n#5      _delayEntrypointInvocation.<anonymous closure> (dart:isolate-patch/isolate_patch.dart:281:32)\r\n#6      _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:184:12)\r\n\r\n$ /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper/build.sh /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper ""86.0.4240.198""\r\n-bash: /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper/build.sh: Permission denied\r\n```\r\n\r\nThe file is not marked as executable.\r\n\r\n`-rw-r----- 1 dacoharkes primarygroup  459 Jun 16 10:13 build.sh`\r\n\r\n```\r\n$ bash /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper/build.sh /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper ""86.0.4240.198""\r\nIn file included from wrapper.cc:9:\r\n<command-line>: error: too many decimal points in number\r\nwrapper.h:19:36: note: in definition of macro ‘OPENLIB’\r\n   19 |   #define OPENLIB(libname) dlopen((libname), RTLD_NOW)\r\n      |                                    ^~~~~~~\r\nwrapper.cc:18:49: note: in expansion of macro ‘CRONET_VERSION’\r\n   18 |   #define CRONET_LIB_NAME CRONET_LIB_PREFIX ""."" CRONET_VERSION CRONET_LIB_EXTENSION\r\n      |                                                 ^~~~~~~~~~~~~~\r\nwrapper.cc:40:26: note: in expansion of macro ‘CRONET_LIB_NAME’\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                          ^~~~~~~~~~~~~~~\r\n<command-line>: error: expected ‘)’ before numeric constant\r\nwrapper.h:19:36: note: in definition of macro ‘OPENLIB’\r\n   19 |   #define OPENLIB(libname) dlopen((libname), RTLD_NOW)\r\n      |                                    ^~~~~~~\r\nwrapper.cc:18:49: note: in expansion of macro ‘CRONET_VERSION’\r\n   18 |   #define CRONET_LIB_NAME CRONET_LIB_PREFIX ""."" CRONET_VERSION CRONET_LIB_EXTENSION\r\n      |                                                 ^~~~~~~~~~~~~~\r\nwrapper.cc:40:26: note: in expansion of macro ‘CRONET_LIB_NAME’\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                          ^~~~~~~~~~~~~~~\r\nwrapper.h:19:35: note: to match this ‘(’\r\n   19 |   #define OPENLIB(libname) dlopen((libname), RTLD_NOW)\r\n      |                                   ^\r\nwrapper.cc:40:18: note: in expansion of macro ‘OPENLIB’\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                  ^~~~~~~\r\nwrapper.cc:40:42: error: expected ‘)’ before ‘;’ token\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                                          ^\r\nIn file included from wrapper.cc:9:\r\nwrapper.h:19:34: note: to match this ‘(’\r\n   19 |   #define OPENLIB(libname) dlopen((libname), RTLD_NOW)\r\n      |                                  ^\r\nwrapper.cc:40:18: note: in expansion of macro ‘OPENLIB’\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                  ^~~~~~~\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 8, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652468629, 'comment_body': 'Native code can live in `src/` instead of `lib/src/native/`', 'comment_created': datetime.datetime(2021, 6, 16, 8, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652469610, 'comment_body': 'You can write these scripts in Dart instead.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652472834, 'comment_body': 'Native third party code should live in `third_party/`. (Dart third party code in `lib/src/third_party`.)\r\n\r\nSee https://opensource.google/docs/thirdparty/non-google3 .', 'comment_created': datetime.datetime(2021, 6, 16, 8, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652473668, 'comment_body': 'If this is just code for your own testing purposes, consider not committing it.\r\n\r\nIf you want to commit it, include a Dart script that somewhere that builds the code and runs it to see if it works. And make sure this script is executed on the continuous integration.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652475560, 'comment_body': 'This is only needed for your C++ testing code, and not for using the wrapper with `dart:ffi`, consider putting it in an `#ifdef`.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652476849, 'comment_body': 'Code that is never used by dependent libraries and is only used by `dart run cronet` should live inside the `bin/` folder rather than the `lib/` folder.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652478853, 'comment_body': 'Unnecessary newline.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652480481, 'comment_body': 'Can we get a `buildCronetBinaries` as well? (Automating the steps you did locally to build the binary.)\r\n\r\nThat way we can just run `buildCronetBinaries` when we want to make the binaries for a new version.\r\n\r\nAlso, that would enable users to build instead of download if they so prefer.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652482060, 'comment_body': ""Move to `third_party/`. (Actually for this code it does not really matter because we also release this repo under Dart project authors copyright, but it's a good thing to always put third party code in `third_party/`.)"", 'comment_created': datetime.datetime(2021, 6, 16, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 653526522, 'comment_body': ""Let's make this build utility to build the wrapper for that custom version and [print the link to build cronet](https://chromium.googlesource.com/chromium/src/+/refs/heads/main/components/cronet/build_instructions.md) in the console. Should we also take the responsibility for building actual cronet binaries? I guess that may turn out to be a little bit hard to maintain. What's your view?"", 'comment_created': datetime.datetime(2021, 6, 17, 12, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 653527999, 'comment_body': ""I'll remove `.pubignore` from this PR as it's not required."", 'comment_created': datetime.datetime(2021, 6, 17, 12, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 653530170, 'comment_body': 'Try running `./build.sh . \'""86.0.4240.198""\'`. This may work :sweat_smile: But, we\'re dartifying it anyways.', 'comment_created': datetime.datetime(2021, 6, 17, 12, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 653737071, 'comment_body': 'Added. But, the actual exception (along with stacktrace) are rethrown along with the instructions.', 'comment_created': datetime.datetime(2021, 6, 17, 16, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 654420312, 'comment_body': 'Replaced build.sh script with dart implementation.', 'comment_created': datetime.datetime(2021, 6, 18, 13, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 654760919, 'comment_body': 'You can now run the build script as `build_cronet <version>`. Version string is optional. Defaults to: `86.0.4240.198`. Activate the package, before doing `build_cronet,` using `dart pub global activate`', 'comment_created': datetime.datetime(2021, 6, 19, 7, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655183210, 'comment_body': 'An optional parameters -> Either ""an optional parameter"" or ""optional parameters"".', 'comment_created': datetime.datetime(2021, 6, 21, 8, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655184304, 'comment_body': 'Maybe default to empty list rather than having a nullable list.', 'comment_created': datetime.datetime(2021, 6, 21, 8, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655188423, 'comment_body': 'a -> an (pronounced ""age tee tee ..."")', 'comment_created': datetime.datetime(2021, 6, 21, 8, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655192080, 'comment_body': ""Make an enum with HTTP versions:\r\n\r\n* Callsites get an enum value rather than a boolean which is easier to read.\r\n* Future proof the API for if we get more than 2 HTTP versions.\r\n* Disambigutates which version we're using if it's not 2 (is it 1? is it 1.1? is it 3?)"", 'comment_created': datetime.datetime(2021, 6, 21, 8, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655199252, 'comment_body': '""Default - true"" is not a sentence.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#do-format-comments-like-sentences\r\n\r\nI think it would be better to rewrite the numbered lines to paragraphs. Some optional parameters could be combined:\r\n\r\n```dart\r\n  /// Initiates an [HttpClient] with the settings provided in the arguments.\r\n  ///\r\n  /// The settings control whether this client supports [quic], [brotli] and\r\n  /// [http2]. If [quic] is enabled, then [quicHints] can be provided.\r\n  ///\r\n  /// ...\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 21, 9, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655199704, 'comment_body': 'Please either implement the TODOs or remove the documentation from the API until a PR in which you implement this.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655200666, 'comment_body': 'In the paragraph explaining cache modes: ""If [cacheMode] is [CacheMode.inMemory], [maxCache] is required.""\r\n\r\nAnd throw an `ArgumentError` on any invalid combination of arguments.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655206719, 'comment_body': 'Throw an `ArgumentError` if quicHints are provided but quic is false.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655208450, 'comment_body': 'Period at end of sentence.\r\n\r\nFor TODOs: please file issues on the GitHub repo for what still needs to be implemented and use `// TODO(<GitHub issue number>): ...` to refer to the issue.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655210579, 'comment_body': 'Add a period at end of the sentence.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655211146, 'comment_body': 'If [force] is not implemented yet, remove the documentation and method parameter for now.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655213341, 'comment_body': ""Maybe just use a plain English string for the group: 'Cronet initialization'."", 'comment_created': datetime.datetime(2021, 6, 21, 9, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655218521, 'comment_body': ""Maybe move this to a markdown file somewhere.\r\n\r\nHow about `dart_io_comparison.md`? With a link to that file from README.md. And then you can link to the source code files from the markdown file.\r\n\r\nReasoning: The differences between dart:io and package:cronet are important in two situations:\r\n\r\n1. When users want to decide which package to use, they would probably look at the package on pub/GitHub.\r\n2. People involved in `dart:ffi` and `dart:io` decisions to have an overview (and argumentation) of why the APIs are different. They would also probably want the differences in a central place than scattered around the API.\r\n\r\nWhen people are using the API, they are not actually that interested in the differences between Dart IO and this API.\r\n\r\nWhen people are migrating, they'll get a ton of analyzer errors telling them how to migrate already.\r\n\r\nMaybe the comparison markdown could contain a migration instruction as well, but I think we can leave that for now."", 'comment_created': datetime.datetime(2021, 6, 21, 9, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655219859, 'comment_body': 'Nice, using HttpServer to write tests! 👍 ', 'comment_created': datetime.datetime(2021, 6, 21, 9, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655224535, 'comment_body': ""Maybe use `import 'dart:io' as io;` so that we don't accidentally use `io.HttpClient` for any tests instead of testing our Cronet implementation! Just as an extra safety check.\r\n\r\n(Commenting out the Cronet import only makes the registerCallbacks test not compile anymore.)"", 'comment_created': datetime.datetime(2021, 6, 21, 9, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655225745, 'comment_body': ""Nit: `random` -> `some/non-existing/path` (It's not random, and because it's a test it probably should not be random, we don't want random test failures)."", 'comment_created': datetime.datetime(2021, 6, 21, 9, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655249653, 'comment_body': 'Documentation', 'comment_created': datetime.datetime(2021, 6, 21, 10, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655250934, 'comment_body': 'Does Cronet provide a mapping from integers to string error messages?\r\n\r\nWe should probably include the string error message if possible.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655251720, 'comment_body': 'Please clarify that this is used to pass on errors/exceptions from native code.\r\n\r\nMaybe rename to `CronetNativeException`?', 'comment_created': datetime.datetime(2021, 6, 21, 10, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655253289, 'comment_body': ""I think this actually classifies as `Error` rather than `Exception`. It's a programmatic error.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/usage#do-throw-objects-that-implement-error-only-for-programmatic-errors"", 'comment_created': datetime.datetime(2021, 6, 21, 10, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655256719, 'comment_body': '😆  I love it.\r\n\r\nMaybe put the comment on the line above and remove the "":p"".\r\n\r\n```dart\r\n      // Using non-existent url.\r\n      final request = await client.getUrl(Uri.parse(\'http://localghost:$port\'));\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 10, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655258592, 'comment_body': ""Filename: Isn't the callbacks the old API?"", 'comment_created': datetime.datetime(2021, 6, 21, 10, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655261029, 'comment_body': 'Maybe add a sanity check whether that error code exists.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655262831, 'comment_body': '`close` -> `closed.`\r\n\r\nOh, it looks like the comment is out of data, 9999 is not hardcoded anymore in the setup.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655263193, 'comment_body': ""`random` -> `nonExistent` (it's not random)."", 'comment_created': datetime.datetime(2021, 6, 21, 10, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655263993, 'comment_body': 'Maybe I slightly prefer having these constants in every test file where they are used, that makes the tests more standalone.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655270985, 'comment_body': ""Add a comment saying we're using this because of a lack of support for asynchronous callbacks in dart:ffi.\r\n\r\nhttps://github.com/dart-lang/sdk/issues/37022"", 'comment_created': datetime.datetime(2021, 6, 21, 10, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655271261, 'comment_body': 'Missing period at end of sentence.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655272864, 'comment_body': 'Consistency between filename and group? Maybe call it cronet_initialization_test.dart.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655275411, 'comment_body': 'Split up the bindings between `lib/src/wrapper_bindings.dart` and `lib/src/third_party/cronet_bindings.dart`. The cronet bindings with cronet copyright, and the wrapper bindings with the copyright form this repository.\r\n\r\nSee for example https://github.com/google/webcrypto.dart/pull/17/files which has two ffigen.yaml configs and 2 generated bindings files.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655278627, 'comment_body': 'Wrap at 80 chacters.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655279729, 'comment_body': 'Remove in this PR and add it back later when it works.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655281249, 'comment_body': ""With getters/setters, we don't use a verb in Dart for the documentation. We just describe what it is rather than using a verb for 'getting' and 'setting'.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#prefer-starting-variable-getter-or-setter-comments-with-noun-phrases\r\n\r\n(Also, missing period at the end of the sentence.)"", 'comment_created': datetime.datetime(2021, 6, 21, 11, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655282501, 'comment_body': 'This is unused in our code base. Should we remove it?\r\n\r\nIf it serves a purpose, add a test that uses this.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655283092, 'comment_body': 'Add tests for the other public API methods as well. (head/delete/patch)', 'comment_created': datetime.datetime(2021, 6, 21, 11, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655283746, 'comment_body': 'Doc comments start with a single line explanation.\r\n\r\nAnd then one or more paragraphs.\r\n\r\n(Add a newline.)', 'comment_created': datetime.datetime(2021, 6, 21, 11, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655284746, 'comment_body': '> Many Dart developers avoid using part entirely. They find it easier to reason about their code when each library is a single file.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/usage#do-use-strings-in-part-of-directives\r\n\r\nMany developers include me. Would you mind just making these files standalone?', 'comment_created': datetime.datetime(2021, 6, 21, 11, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655287452, 'comment_body': 'remove', 'comment_created': datetime.datetime(2021, 6, 21, 11, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655288002, 'comment_body': 'Remove for now.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655288223, 'comment_body': 'File todos on the GitHub repo and add issue numbers `// TODO(<number>): ...`.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655289077, 'comment_body': 'Typedefs never get called. Maybe:\r\n\r\n`Function signature for callbacks called on redirects.`\r\n\r\nYou can omit the argument description, because they are already in the typedef.\r\n\r\n(Same all the other typedefs.)', 'comment_created': datetime.datetime(2021, 6, 21, 11, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655290183, 'comment_body': 'Move the comment before the field. And change it to a doc-comment so that you can easily see it in the IDE.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655291981, 'comment_body': 'Just remove from this PR for now.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655294010, 'comment_body': 'Just add the doc comment from dart:io as well, that would be more useful for our users using this API.\r\n\r\n(Same for other methods.)', 'comment_created': datetime.datetime(2021, 6, 21, 11, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655297363, 'comment_body': ""If it's copied code, it should be in lib/src/third_party/. Probably lib/src/third_party/ffigen/ to clarify where the code is from. And then this comment line can be removed."", 'comment_created': datetime.datetime(2021, 6, 21, 11, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655559150, 'comment_body': ""Can we control exactly which http version cronet should use? Or, I'll just make it like, if the passed value (enum) is for http2, then, set http2 to true (internally)?"", 'comment_created': datetime.datetime(2021, 6, 21, 17, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655560419, 'comment_body': 'What is the version that Cronet uses if you pass false?', 'comment_created': datetime.datetime(2021, 6, 21, 17, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655563603, 'comment_body': 'I thought, as `dart:io` style api already exists, maybe callback one will be new 😅. Getting rid of it anyways.', 'comment_created': datetime.datetime(2021, 6, 21, 17, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655565524, 'comment_body': 'Unused. Just here for compatibility reasons. Should I remove it?', 'comment_created': datetime.datetime(2021, 6, 21, 17, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655568002, 'comment_body': ""Yes, I'll remove it. Even I don't prefer it :) Is there a way where I can access some variables/functions accross my package without exposing it to the end user?\r\n\r\n(I can't completely remember why I moved to part of. I'll give you specifics as I stumble upon them. But, initially, I avoided it.)"", 'comment_created': datetime.datetime(2021, 6, 21, 17, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655570242, 'comment_body': 'Does `hide` keyword works for hiding constructors and variables also?', 'comment_created': datetime.datetime(2021, 6, 21, 17, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655571713, 'comment_body': 'Yes, or you can list the things you want to export in https://github.com/unsuitable001/cronet.dart/blob/essentials_v0.0.1/lib/cronet.dart', 'comment_created': datetime.datetime(2021, 6, 21, 17, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655587275, 'comment_body': ""Maybe 1.1 (not sure). I think it's like, if `quic` is true, prefer HTTP3, then fallback to http2 and check if it's enabled. And, then maybe HTTP1.1/1.0 (I'm not sure which one exactly.)"", 'comment_created': datetime.datetime(2021, 6, 21, 17, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655589561, 'comment_body': 'You can do some tests to figure it out.', 'comment_created': datetime.datetime(2021, 6, 21, 17, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655592331, 'comment_body': 'Can HttpServer create http2/3 connections also? Or, is there any other url to test against?', 'comment_created': datetime.datetime(2021, 6, 21, 17, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 657100577, 'comment_body': ""Removing these for now as they were for personal notes. I'll open a issue when we start migrating it."", 'comment_created': datetime.datetime(2021, 6, 23, 13, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 657307795, 'comment_body': ""In dart:io, doc comments are copied from `IOSink`. As, we're also implementing a `IOSink`, the doc comments are getting copied by default. Hence, I'm keeping it blank, just like `dart:io HttpClientRequest`."", 'comment_created': datetime.datetime(2021, 6, 23, 17, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 657968729, 'comment_body': 'Removing the callback based api and this error/exception class too.', 'comment_created': datetime.datetime(2021, 6, 24, 13, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 658827516, 'comment_body': ""I tested it and it worked as I speculated above. Just the difference is, `quic` fallback to `http2` even if it's unset (neither true or false). But, if you explicitly disable `http2`, then it fallback to `http/1.1`. So, merging `quic` and `http2` protocol params to a single param named `protocol` and make it an enum."", 'comment_created': datetime.datetime(2021, 6, 25, 14, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659283922, 'comment_body': ""For `HttpException` we are getting the error string from a error pointer provided by cronet to `onFailed` callback. Other than that, cronet just declares enums like -\r\n```\r\nCronet_RESULT_SUCCESS = 0,\r\nCronet_RESULT_ILLEGAL_ARGUMENT = -100,\r\nCronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST = -101,\r\n```\r\nand so on... I can't find any proper function that takes this type of enum and gives us a string. Can we generate the string on our own if we have the int value?"", 'comment_created': datetime.datetime(2021, 6, 27, 8, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659596631, 'comment_body': 'Does ffigen support getting the strings of the enums? Could it?\r\n\r\nIf ffigen cannot we should probably just move them over to Dart code so that we can give a bit more proper error messages to users.', 'comment_created': datetime.datetime(2021, 6, 28, 8, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659598074, 'comment_body': 'Yeah, just remove it for now.\r\n\r\nWe can always add it back in when people start using `package:cronet` and find it missing. (But removing things later from an API is always problematic.)', 'comment_created': datetime.datetime(2021, 6, 28, 8, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659622361, 'comment_body': '> Does ffigen support getting the strings of the enums?\r\n\r\nNope.', 'comment_created': datetime.datetime(2021, 6, 28, 9, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 659646762, 'comment_body': '> If ffigen cannot we should probably just move them over to Dart code so that we can give a bit more proper error messages to users.\n\nOkay.\n', 'comment_created': datetime.datetime(2021, 6, 28, 9, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659648558, 'comment_body': ""This doesn't terminate on first invocation on Linux:\r\n\r\n```\r\n$ rm -rf .dart_tool/cronet/\r\n$ dart run cronet linux64\r\nBuilding Wrapper...\r\n\r\n\r\nCopying wrapper to project's .dart_tool...\r\nDownloading Cronet for linux64\r\nhttps://github.com/unsuitable001/cronet.dart/releases/download/0.0.1/linux64.tar.gz\r\nExtracting Cronet for linux64\r\nDone! Cleaning up...\r\nDone! Cronet support for linux64 is now available!\r\n^C\r\n```"", 'comment_created': datetime.datetime(2021, 6, 28, 9, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659654105, 'comment_body': 'This should not be needed anymore, we have array support in dart:ffi and package:ffigen.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659654910, 'comment_body': ""If the comments are for all the following entries:\r\n\r\n```yaml\r\n    include:\r\n      # For wrapper.\r\n      - 'Cronet_Engine_Shutdown'\r\n      - 'Cronet_Engine_Destroy'\r\n      - 'Cronet_Buffer_Create'\r\n      - 'Cronet_Buffer_InitWithAlloc'\r\n      - 'Cronet_UrlRequestCallback_CreateWith'\r\n      - 'Cronet_UrlRequest_InitWithParams'\r\n      # For executor.\r\n      - 'Cronet_Executor_CreateWith'\r\n      - 'Cronet_Executor_SetClientContext'\r\n      - 'Cronet_Executor_GetClientContext'\r\n      - 'Cronet_Executor_Destroy'\r\n      - 'Cronet_Runnable_Run'\r\n      - 'Cronet_Runnable_Destroy'\r\n```"", 'comment_created': datetime.datetime(2021, 6, 28, 10, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659655804, 'comment_body': 'The LICENSE file `lib/src/third_party/cronet/LICENSE` is missing.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659657757, 'comment_body': 'Nit: put all 3 lint ignores on separate lines and order them alphabetically. (Also the other ffigen.yaml)', 'comment_created': datetime.datetime(2021, 6, 28, 10, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659661444, 'comment_body': 'Add documentation to the enum values. (And capitalize Cronet when used as a name in documentation.)\r\n\r\n```dart\r\n/// Defines the available http protocols supported by Cronet.\r\nenum HttpProtocol {\r\n  /// HTTP/2 with QUIC.\r\n  quic,\r\n\r\n  /// HTTP/2 without QUIC.\r\n  http2,\r\n\r\n  /// HTTP/1.1.\r\n  http\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659664895, 'comment_body': 'Exceptions and Errors mean something different in Dart.\r\n\r\nErrors are programmatic errors that should never be caught. Such as an invalid combination of arguments.\r\n\r\nExceptions should be caught. Such as a request failing because the internet is down.\r\n\r\nDo we have both types here?\r\nIf yes, is it relatively easy to distinguish these two?\r\nIf yes, split this into \r\n\r\n```dart\r\nclass CronetNativeException implements Exception {\r\n  // ...\r\n}\r\n\r\nclass CronetNativeError implements Error {\r\n  // ...\r\n}\r\n```\r\n\r\nand use them appropriately.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659675594, 'comment_body': 'How about making it yes? https://github.com/dart-lang/ffigen/issues/236 😸 ', 'comment_created': datetime.datetime(2021, 6, 28, 10, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659681836, 'comment_body': ""> The 'author' field is no longer used and may be removed. Try removing the field.\r\n\r\nline 7\r\n\r\n(My bad, I seem to have uploaded that!)"", 'comment_created': datetime.datetime(2021, 6, 28, 10, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659682638, 'comment_body': 'Could be a slightly better test by regex matching.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659690955, 'comment_body': ""I think it's cleaner to use the original types here instead of void* and casting both in here and in Dart.\r\n\r\nThen also generate the original types in the generated bindings (yes they don't line up because of https://github.com/dart-lang/ffigen/issues/22)\r\n\r\nAnd then use .cast() in Dart code and let Dart infer the right type arguments.\r\n\r\nThat way we only have a cast in Dart, and that cast will go away when we address https://github.com/dart-lang/ffigen/issues/22."", 'comment_created': datetime.datetime(2021, 6, 28, 11, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659693018, 'comment_body': 'Trailing whitespaces. Here and in many other places.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659698776, 'comment_body': 'Move all the bin files to a single file with a single command line interface.\r\n\r\n`bin/setup.dart`\r\n\r\nvalid arguments:\r\n* (no argument) / `setup`: build/download wrapper/libcronet.so/dll\r\n* `clean`: deletes all built/downloaded things\r\n\r\n`dart run cronet:setup` would be the only valid invocation (similar to webcrypto.dart) ', 'comment_created': datetime.datetime(2021, 6, 28, 11, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659700670, 'comment_body': 'Can we also use cmake here?\r\n\r\nThat way we can unify the wrapper builds for platforms more.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659701305, 'comment_body': ""Hehe, I love the `--build` trick so that we don't have to invoke VS itself 🚀 "", 'comment_created': datetime.datetime(2021, 6, 28, 11, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659706534, 'comment_body': ""Remove this. Doing it in the build is better indeed. :)\r\n\r\nIf you make Linux also cmake, it's only in one place."", 'comment_created': datetime.datetime(2021, 6, 28, 11, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659710437, 'comment_body': ""This would need to go into bin/setup.dart, so that cmake for linux doesn't trip over this."", 'comment_created': datetime.datetime(2021, 6, 28, 11, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659710656, 'comment_body': 'For convenience for IDE support:\r\n`set(CMAKE_EXPORT_COMPILE_COMMANDS ON)`\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 28, 11, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659713797, 'comment_body': ""period at end of sentence.\r\n\r\nWhat does 'not needed' mean?\r\n\r\nIf it's just null pointer you might as well just pass nullptr from Dart. But it looks like you're actually passing an executor. And can't you call Init() from Dart?\r\n\r\n(In general if you can do things in c++ or Dart, it's easier to do everything in Dart.)"", 'comment_created': datetime.datetime(2021, 6, 28, 11, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659714798, 'comment_body': 'Could you construct this in Dart? With the symbol addresses read from the wrapper generated bindings?', 'comment_created': datetime.datetime(2021, 6, 28, 11, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659715469, 'comment_body': '(Then we could aim to only have the async callbacks and the finalizers in the wrapper. Both of those could be addressed by future dart:ffi features, removing the need for wrapper.cc completely in time.)', 'comment_created': datetime.datetime(2021, 6, 28, 11, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659716725, 'comment_body': 'Usually the header file belonging to the cc file comes first.\r\n\r\nAlso, alphabetically sort imports.\r\n\r\n```c++\r\n#include ""wrapper.h""\r\n#include ""../third_party/cronet_impl/sample_executor.h""\r\n#include ""../third_party/dart-sdk/dart_api.h""\r\n#include ""../third_party/dart-sdk/dart_native_api.h""\r\n#include ""../third_party/dart-sdk/dart_tools_api.h""\r\n#include <iostream>\r\n#include <stdarg.h>\r\n#include <unordered_map>\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 11, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659718729, 'comment_body': 'Nice, good setup!\r\n\r\n`callbackArgBuilder` -> `CallbackArgBuilder`\r\n', 'comment_created': datetime.datetime(2021, 6, 28, 11, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659718968, 'comment_body': 'no whitespace between comma and next arg. File not formatted?', 'comment_created': datetime.datetime(2021, 6, 28, 11, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659719230, 'comment_body': '3 empty lines. File not formatted?', 'comment_created': datetime.datetime(2021, 6, 28, 11, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659720612, 'comment_body': '`removeRequest` -> `RemoveRequest` (Capitalize first character for cpp function names.)\r\n\r\nhttps://google.github.io/styleguide/cppguide.html#General_Naming_Rules\r\n\r\n(Yes, that probably messes with the generated bindings and the lints. You can either use renames in ffigen, or just also ignore that lint.)', 'comment_created': datetime.datetime(2021, 6, 28, 11, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659721415, 'comment_body': 'Capitalize first letter.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659721616, 'comment_body': 'Capitalize first letter.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659724521, 'comment_body': 'Prefer full URL, so it can be easily clicked/copy-pasted.', 'comment_created': datetime.datetime(2021, 6, 28, 12, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659727132, 'comment_body': ""`_callbackHandler`\r\n\r\nDon't abbreviate variable names.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/style#do-name-other-identifiers-using-lowercamelcase"", 'comment_created': datetime.datetime(2021, 6, 28, 12, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659728217, 'comment_body': 'try `> organize imports` in VSCode.\r\n\r\nAnd automating it https://code.visualstudio.com/updates/v1_23#_run-code-actions-on-save', 'comment_created': datetime.datetime(2021, 6, 28, 12, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659731652, 'comment_body': '`Function` -> `void Function()`', 'comment_created': datetime.datetime(2021, 6, 28, 12, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659731989, 'comment_body': '`Function` -> `void Function()`', 'comment_created': datetime.datetime(2021, 6, 28, 12, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659741223, 'comment_body': ""Instead of passing Cronet and Wrapper around, why don't we make two final/late global variables. We're only going to realistically load both dynamic libraries once. So from a Dart point of view it would be nicer to just have access to these two loaded dynamic libraries from anywhere instead of saving references to them all over the place."", 'comment_created': datetime.datetime(2021, 6, 28, 12, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659795582, 'comment_body': ""Does Cronet not provide a default executor in it's own library?"", 'comment_created': datetime.datetime(2021, 6, 28, 13, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659797112, 'comment_body': ""Don't commit commented out code."", 'comment_created': datetime.datetime(2021, 6, 28, 13, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659807376, 'comment_body': '`Function` -> `void Function()`', 'comment_created': datetime.datetime(2021, 6, 28, 13, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659809769, 'comment_body': ""Well, you need to build the libcronet.xxxx.so/dll yourself also right? It would be useful to have the steps to do that as a Dart script, so that you don't forget.\r\n\r\nWe can either have that script in tool/update_cronet.dart so that you can update the shared libraries with a simple step, or we can have it available in bin/setup.dart as `dart run cronet:build-cronet` (or something similar)."", 'comment_created': datetime.datetime(2021, 6, 28, 13, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659813274, 'comment_body': ""It terminates. But, after a while. Same on windows. I can't understand why. I'm suspecting an open stream maybe? Can you find any? \r\n\r\nFile: https://github.com/unsuitable001/cronet.dart/blob/essentials_v0.0.1/bin/setup.dart"", 'comment_created': datetime.datetime(2021, 6, 28, 14, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659818706, 'comment_body': ""No. I don't think cronet seperates that.\r\n\r\nI'm thinking of moving to `CronetNativeError` as it is thrown from `Cronet_RESULT` which is mostly consists of (if not all) `errors`."", 'comment_created': datetime.datetime(2021, 6, 28, 14, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659819964, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2021, 6, 28, 14, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659821307, 'comment_body': 'So, we are removing that `build` command?', 'comment_created': datetime.datetime(2021, 6, 28, 14, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659823298, 'comment_body': ""Yes, let's make everything be `cronet:setup` and we can always add arguments to that script (`cronet:setup build`)"", 'comment_created': datetime.datetime(2021, 6, 28, 14, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659823489, 'comment_body': ""Ok. Used gcc because in linux, we're building the wrapper locally every time. Unlike on windows, where we download the wrapper. As, cmake may not be available in distros by default, I used gcc. Should we move to providing wrapper for linux too?"", 'comment_created': datetime.datetime(2021, 6, 28, 14, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659828496, 'comment_body': 'Lets try providing both the wrapper and cronet for now.\r\n\r\nThen we can move the buildscripts for both the wrapper and cronet into tool/ and let bin/setup.dart only do downloading.', 'comment_created': datetime.datetime(2021, 6, 28, 14, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659832229, 'comment_body': 'No, as far as I can figure out. This is the reason why I did https://github.com/google/cronet.dart/pull/2#discussion_r659714798\r\n\r\nI felt much more convenience handling the whole executor part in C/C++ rather than again creating a C function wrapper and passing it to dart. What do you recommend? keeping executor init in C/C++ or, exposing the method to dart?', 'comment_created': datetime.datetime(2021, 6, 28, 14, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659927456, 'comment_body': 'See https://github.com/google/cronet.dart/pull/2#discussion_r659832229', 'comment_created': datetime.datetime(2021, 6, 28, 16, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659927845, 'comment_body': 'See https://github.com/google/cronet.dart/pull/2#discussion_r659832229', 'comment_created': datetime.datetime(2021, 6, 28, 16, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 661123369, 'comment_body': ""Added `cronet:setup build` and, it can be invoked with `tool/build_wrapper.dart`. For cronet, I'll add the build script under tool only."", 'comment_created': datetime.datetime(2021, 6, 30, 4, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 661189455, 'comment_body': '`cronet:setup` currently fetches binaries for all of the supported platforms. Should we add something to setup for only the current/specified platform?', 'comment_created': datetime.datetime(2021, 6, 30, 7, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 661245202, 'comment_body': '2 parts?', 'comment_created': datetime.datetime(2021, 6, 30, 8, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 661257380, 'comment_body': 'You could make a C API for interacting with the sample executor.\r\n\r\n* a C function for creating one (returning some pointer to it)\r\n* a C function for init-ing it (though, that might be combined with creating it)\r\n* a C function for getting the `Cronet_ExecutorPtr` out,\r\n* and then directly calling `Cronet_UrlRequest_InitWithParams` with the Cronet bindings rather than the wrapper.\r\n\r\nThat way you do not have to register the Cronet Cronet_UrlRequest_InitWithParams address in the wrapper.\r\n\r\nOr am I missing something here? 😺 ', 'comment_created': datetime.datetime(2021, 6, 30, 8, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 661260747, 'comment_body': ""Don't comment out code in this copied source file. Instead, use ffigen to filter the method names if you don't want to generate all of them."", 'comment_created': datetime.datetime(2021, 6, 30, 8, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 661265319, 'comment_body': 'You could compile and execute this from `dart run cronet:setup` as a verification step.', 'comment_created': datetime.datetime(2021, 6, 30, 8, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 661266693, 'comment_body': ""Platform.isWindows Platform.isLinux can tell you on which platform we are, we don't need to download the others right?"", 'comment_created': datetime.datetime(2021, 6, 30, 8, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 662230842, 'comment_body': 'Done :)', 'comment_created': datetime.datetime(2021, 7, 1, 12, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 662937170, 'comment_body': 'dart run cronet:setup', 'comment_created': datetime.datetime(2021, 7, 2, 11, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 662950866, 'comment_body': 'Nice! I like how this is set up!', 'comment_created': datetime.datetime(2021, 7, 2, 11, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 662952317, 'comment_body': 'Maybe add a TODO with a reference to the relevant ffigen issue with regard to the casts.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}]","[{'commit_sha': 'd96f23547796eafdf2fd461aaea4022cdd57be8f', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d3bb124861fac191d50054aff96b38ec20a07fc', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ca8a869c2243f18f3901dbc0abb703317b1e42', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2253a3553d25674ad48fd23ec43b3533f4121e4', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30cfbe693152e6de8e34cd540ec53c07f2e7105a', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba712d65f17df5851fb0f2d0cf2b7588c072f22', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a218ac4b23dd528959db29faf8ccde53d4e206da', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd99c7c3acf35fac58aae74e504e22b2d3f98d9a0', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3da375f624b8a6f8a5365988c4358f09e18ca4f', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea156b1074305c59eaf17abe8c7fe158515d8b38', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '382be13141f94c5d4f18f5d20a6237135fe4c74b', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82b296acb68df23c33518aebc1e169d8e25292d5', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a667deb0b290986f69004242dd876fd0f0047a2b', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7df55225a9a9c7321b76519b96c85a124b1d3507', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e7836a676bac28023fcf7c54cf029fc028b427b', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b921cf0a8bdecf88cbcf893b281cc442432f23e', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0303b71ffd0333378afc6b67768caad3eb819210', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d4c6986c326ede0178083bc6e3c2f6f76a9d597', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '088b9fba7ca115f2b4cb832618aabc53056bdd14', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c88867e9c82efcf1541e64d46021eb7a3dfa0993', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ae319fb1cba2776e2b711f6021a78218b0c910', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eba348771f145f708b6d805dea77183d3ed000c', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd2490fbdbf5bbc53846cebdb769418b1f715552', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4cbd245688355929afbeca02e9be1b6a6b03932', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12499c3cc97a092730d3086fb5902adef957e274', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '783a6cebc31932b790d1418c134f6c2aa320abc3', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96636e8d8006d0ec87ac99cfe8123b33ed629286', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3e4d848fd23aa20c71322f91e81c1f5bf895947', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5958aad69455a25ff744302992d632f32f34a8b6', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7533e4b83389fb6e4970b587874f8deeb40e7cb3', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a1e1e79286391b8f17f1f3576646d8972feefd', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d511463a3231831536459126bc8510f74547dcd', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f93cd31900390152ccd3a11adcdb20aa560ccc1', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31de14b9701798ccd11a7228fc80804fa86c7701', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce69578795058e026f354205d6b59f02b9383e9', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0beef32f9790d32516d7b788dfced453ec33362f', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4452dbe068a9b56bb618bd74f6e444b19f39cc51', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dcb37018e97532c0a9c9153ac5bb22241372245', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50d7b32dd13f7e3012d4692ea65a5f4620b6def', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f222aa490249852a0e8a70637ed3c9d50f3c09fd', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de33746f86da711554202f250c40f11915a8602', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec2efb0f610f953c1a5d5375e34394c79c5bde2d', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}]",Soumyadip Mondal,26590510,soumyadip@atlan.com,User,,50,,2,38
683205711,fix: returning values instead of pointers from cronet,"We shouldn't return pointers that we received as a callback parameter from cronet. In a slower system or while doing bunch of requests togather (e.g. benchmarking), we can accidentally dereference those cronet created pointers after cronet frees them.

UTF8 decoding the newLocation URL string which is received as a callback of onRedirect event causes the following error:
```
Unhandled exception:
FormatException: Unexpected extension byte (at offset .....
```
This PR fixes this issue by dereferencing and getting the raw data from cronet created pointers in the wrapper then sending copied data to the dart side via nativeport.

Also patched crash on parallel request if 404 is received.

**NOTE:** Update Binaries.",True,7,https://api.github.com/repos/google/cronet.dart/pulls/7,https://github.com/google/cronet.dart/pull/7,closed,279,89,16,9,2,4,0,0,[],2021-07-04 17:00:10+00:00,2021-07-06 15:32:31+00:00,167541.0,"1 day, 22:32:21","[{'comment_id': 663977835, 'comment_body': ""We need two integers for major and minor revision in this wrapper.\r\n\r\nThat way we can look those up in the Dart code and throw an exception that the wrapper needs to be recompiled/redownloaded if people update the package but don't run the script again. (Instead of crashing with symbol not found.)"", 'comment_created': datetime.datetime(2021, 7, 5, 14, 35, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 664030759, 'comment_body': 'Done. Marked as `1.0`. Bumping major version to 1 as a breaking change is introduced.\r\n\r\nBreaking API: `InitCronetApi`', 'comment_created': datetime.datetime(2021, 7, 5, 16, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 664556621, 'comment_body': ""If we're doing just a comparison, there is no reason to have a major and minor revision. Then we can just have a simple number.\r\n\r\nIn some cases an API gets extra functionality, in those cases you only bump the minor revision. And you can keep using the previous binary if you're never calling the new functionality with `dart:ffi`. But if this wrapper is set up in a way that we're most likely always have to do a major version increase, we might as well just have only major version."", 'comment_created': datetime.datetime(2021, 7, 6, 13, 29, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 664624977, 'comment_body': ""Keeping it for `version` only. Let's plan to move to major.minor format when the wrapper is little more stable."", 'comment_created': datetime.datetime(2021, 7, 6, 14, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}]","[{'commit_sha': '20fd125dfd121ecec0456118f766485aa8a626c5', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b13a9b4a77f614cc52c8f30610cd6433a65aca69', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10d2b26c17a59d87ed6817e67a329ab13dd7c6a5', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cdf592d82cbad21080ec3a3ae63b5bb2c715966', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1df0290877581b6050e9f11cec8ff0a127aa8d68', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1da1a879d1c97cf054e5095981da8cc450c7457c', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '857b8691ca17e5f26eff5743c6308f9a38e7ea15', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f59c28c042be65125e0332e2f21afca354421f73', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bb196c01236cd0716e8e6cb22b06c0531cb2c4d', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}]",Soumyadip Mondal,26590510,soumyadip@atlan.com,User,,50,,2,38
704635104,add HttpClient force close feature,"Add force close (optional) parameter to `HttpClient.close()` method along with tests for it.

Original API reference: https://api.dart.dev/stable/2.13.1/dart-io/HttpClient/close.html",True,22,https://api.github.com/repos/google/cronet.dart/pulls/22,https://github.com/google/cronet.dart/pull/22,closed,56,9,6,1,0,0,0,0,[],2021-08-05 11:49:45+00:00,2021-08-10 08:26:18+00:00,419793.0,"4 days, 20:36:33",[],"[{'commit_sha': '73b6f56b6229480c47cba2e2aa28772273b9b82e', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}]",Soumyadip Mondal,26590510,soumyadip@atlan.com,User,,50,,2,38
712879832,add support for user added headers in http requests,"This PR adds support for `HttpHeaders.set` method only for setting arbitrary http headers.

Closes #25 ",True,26,https://api.github.com/repos/google/cronet.dart/pulls/26,https://github.com/google/cronet.dart/pull/26,closed,121,8,6,4,0,10,0,0,[],2021-08-15 05:43:35+00:00,2021-08-17 15:27:06+00:00,207811.0,"2 days, 9:43:31","[{'comment_id': 689036014, 'comment_body': 'Maybe we should also provide users a way to set multiple headers? What do you think?\r\nI think a very popular use case would be to have a standard set of headers which is used in multiple requests to an API.', 'comment_created': datetime.datetime(2021, 8, 15, 6, 4, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 689036061, 'comment_body': 'A completed // TODO ?', 'comment_created': datetime.datetime(2021, 8, 15, 6, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 689037218, 'comment_body': 'Oops, I forgot to remove it 🙈.', 'comment_created': datetime.datetime(2021, 8, 15, 6, 16, 11, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 689038063, 'comment_body': ""That will be handy indeed :).\n\nWe can plan to introduce 2 new apis in a later pr:\n\n* `headers.setAll` that will take a map of header name and value.\n* An API to set headers to `HttpClient`  that all the initiated `HttpClientRequest` will use by default.\n\nThese 2 APIs aren't part of `dart:io` as of now. But, will be a really nice addition to this package.\n\nEasy way of adding few common headers will be added via #27 to comply with `dart:io` apis."", 'comment_created': datetime.datetime(2021, 8, 15, 6, 25, 43, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 689041108, 'comment_body': 'Cool. 😀', 'comment_created': datetime.datetime(2021, 8, 15, 6, 54, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 690370559, 'comment_body': ""It's fine bumping it to 0.0.5 for new features and using the + for the small fixes."", 'comment_created': datetime.datetime(2021, 8, 17, 13, 28, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 690370970, 'comment_body': 'listened to', 'comment_created': datetime.datetime(2021, 8, 17, 13, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 690372503, 'comment_body': 'Add the rest of the documentation from https://api.dart.dev/stable/2.13.4/dart-io/HttpHeaders-class.html as well.', 'comment_created': datetime.datetime(2021, 8, 17, 13, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 690373452, 'comment_body': ""If the other situation does not occur in our implementation. It doesn't make sense to make a bullet point list.\r\n\r\nMaybe just have:\r\n\r\n```\r\n/// [HttpClientRequest] have immutable headers from the moment the body is\r\n/// written to.\r\n```"", 'comment_created': datetime.datetime(2021, 8, 17, 13, 31, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 690417633, 'comment_body': ""Added some more. Can't add all of it as in this PR, not all of the HttpHeaders apis are implemented."", 'comment_created': datetime.datetime(2021, 8, 17, 14, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}]","[{'commit_sha': '02c582a13f11280280e9a5757f4010e194d103f6', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e2b1bb54b376ac03136e12b5e4fccecdad9f7a9', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99b6ab8eda83ee8c75c10c4c7aa78288a35ccf65', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4e328b69903e12a55f743249e4fecdcfb1ed1ce', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}]",Soumyadip Mondal,26590510,soumyadip@atlan.com,User,,50,,2,38
715202418,add data upload feature to HttpClientRequest,"Adding support for data upload which is especially useful in the context of `POST` and `PUT` requests.

Closes #19",True,28,https://api.github.com/repos/google/cronet.dart/pulls/28,https://github.com/google/cronet.dart/pull/28,closed,640,137,20,5,2,6,0,0,[],2021-08-18 15:31:00+00:00,2021-08-19 13:19:30+00:00,78510.0,21:48:30,"[{'comment_id': 691957775, 'comment_body': ""You can omit type on the left when it's obvious from the right-hand-side.\r\n\r\n`final _dataToUpload = io.BytesBuilder();`"", 'comment_created': datetime.datetime(2021, 8, 19, 9, 46, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 691965458, 'comment_body': ""I presume we can't invoke the following function directly from Dart through FFI+FFIgen because it does callbacks on other threads?\r\n\r\n```c++\r\n// The app creates an instance of Cronet_UploadDataProvider by providing custom\r\n// functions for each method.\r\nCRONET_EXPORT Cronet_UploadDataProviderPtr Cronet_UploadDataProvider_CreateWith(\r\n    Cronet_UploadDataProvider_GetLengthFunc GetLengthFunc,\r\n    Cronet_UploadDataProvider_ReadFunc ReadFunc,\r\n    Cronet_UploadDataProvider_RewindFunc RewindFunc,\r\n    Cronet_UploadDataProvider_CloseFunc CloseFunc);\r\n```\r\n\r\nSo this is the same pattern as our SampleExecutor. We need this because we haven't solved https://github.com/dart-lang/sdk/issues/37022.\r\n\r\nOr is there another reason we need this?"", 'comment_created': datetime.datetime(2021, 8, 19, 9, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 691983445, 'comment_body': ""`const tag = 'binaries-v0.0.4';` needs to be updated as well? Or not because we're always compiling the wrapper for the client?"", 'comment_created': datetime.datetime(2021, 8, 19, 10, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 691989423, 'comment_body': 'Oh right :) missed it again', 'comment_created': datetime.datetime(2021, 8, 19, 10, 31, 49, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 691989936, 'comment_body': ""No. The same reason you mentioned. I'll add a comment stating this."", 'comment_created': datetime.datetime(2021, 8, 19, 10, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 691990354, 'comment_body': 'Yes. Wrapper is always compiled on the client side. No need to update the tag.', 'comment_created': datetime.datetime(2021, 8, 19, 10, 33, 17, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}]","[{'commit_sha': '8280b03702be035b193c19c1f26718e3ee37c2cd', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d9456c60f35264420feca30efeb07c7bce23d6e', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c78e6c3df3f421496225cb9a4fe90e78f0c00cd8', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a232d4d5297b0fe09e095545d7d6def290ad55b6', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '66ab655b30b3e217d9c8c337e4f9ab1d259f21f9', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}]",Soumyadip Mondal,26590510,soumyadip@atlan.com,User,,50,,2,38
697582153,Flutter support,"Add Flutter Support, covering all of the native platforms.

Platforms - 
- [x] Android
- [x] Linux
- [x] Windows

MacOS & iOS will be done separately.

This PR only takes care of 64bit systems. For 32 bit systems, issue #20 should be tracked.

Reference #5 ",True,18,https://api.github.com/repos/google/cronet.dart/pulls/18,https://github.com/google/cronet.dart/pull/18,closed,2587,62,84,22,11,42,0,0,[],2021-07-27 06:44:21+00:00,2021-08-04 13:27:00+00:00,715359.0,"8 days, 6:42:39","[{'comment_id': 678788787, 'comment_body': ""1. You don't have to write `windows: Platform.windows` since this method will automatically detect the platform.\r\n2. Instead of joining path using a `/` you should use the `join` method from `path` package.\r\nYou should do these changes in other places as well.."", 'comment_created': datetime.datetime(2021, 7, 29, 3, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 678789813, 'comment_body': ""You should ideally pass `recursive: true` to `createSync` since this code will break incase the user doesn't have a directory already present (Although that might be unlikely)."", 'comment_created': datetime.datetime(2021, 7, 29, 3, 9, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 678791214, 'comment_body': 'You can consider creating constants for paths like these. Since they are being used at a lot of places. If you do, make sure you give those constants a relevant name.', 'comment_created': datetime.datetime(2021, 7, 29, 3, 14, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 678861045, 'comment_body': ""I think, in that case, shouldn't it just fail? As this folder structure is provided by Flutter as a boilerplate and a must have to get android support. :)"", 'comment_created': datetime.datetime(2021, 7, 29, 6, 26, 57, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 680448199, 'comment_body': 'https://flutter.dev/docs/development/packages-and-plugins/developing-packages#plugin-platforms\r\n\r\nWe should specify the desktop platforms here as well.', 'comment_created': datetime.datetime(2021, 8, 1, 4, 31, 9, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 680478736, 'comment_body': 'Added!', 'comment_created': datetime.datetime(2021, 8, 1, 9, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 680482279, 'comment_body': 'I see you added more changes with this too, did you miss them before? 🙈🙈', 'comment_created': datetime.datetime(2021, 8, 1, 9, 32, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 680483704, 'comment_body': ""Actually, flutter on desktop works without these platform keys 😅 as I'm not adding any platform specific code myself. But, pub.dev may get angry 😶.\n\nBut, as I've added them now, I've to commit few boilerplate code also. Otherwise it will not work. 😬 That's why."", 'comment_created': datetime.datetime(2021, 8, 1, 9, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 680485050, 'comment_body': 'Ah, gotchya 👌', 'comment_created': datetime.datetime(2021, 8, 1, 9, 54, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 680797827, 'comment_body': 'Remember to add -> Add', 'comment_created': datetime.datetime(2021, 8, 2, 9, 0, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 680840493, 'comment_body': 'You may also like to enable -> Optionally, enable', 'comment_created': datetime.datetime(2021, 8, 2, 10, 1, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 680842343, 'comment_body': 'Why are we loading these in Kotlin rather than using `DynamicLibrary.open`?', 'comment_created': datetime.datetime(2021, 8, 2, 10, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 680843565, 'comment_body': 'Replace this boilerplate readme with a description of what the Flutter example is doing.', 'comment_created': datetime.datetime(2021, 8, 2, 10, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 680857930, 'comment_body': 'This step does not work for me:\r\n\r\n```\r\n~/cronet.dart/example/flutter$ flutter run cronet:setup\r\nTarget file ""cronet:setup"" not found.\r\n```\r\n', 'comment_created': datetime.datetime(2021, 8, 2, 10, 28, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 680859678, 'comment_body': '`flutter pub run cronet:setup`', 'comment_created': datetime.datetime(2021, 8, 2, 10, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 680867153, 'comment_body': 'What about x86 Android when using the Android Emulator from Android studio?', 'comment_created': datetime.datetime(2021, 8, 2, 10, 44, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 680894848, 'comment_body': ""If we do not load it using Kotlin first, we get this error -\r\n```\r\nF/chromium(17045): [0418/210141.455792:FATAL:jni_android.cc(96)] Check failed: g_jvm. \r\n```\r\n\r\nThough we're not using Platform Channel from our side in our package itself. Loading the library via Kotlin first then doing `DynamicLibrary.open` on Dart side fixes the issue. (I'm yet to figure out why this is happening though.)"", 'comment_created': datetime.datetime(2021, 8, 2, 11, 32, 31, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 680895018, 'comment_body': 'Reference: https://github.com/unsuitable001/dart_cronet_sample/issues/3', 'comment_created': datetime.datetime(2021, 8, 2, 11, 32, 51, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 680896141, 'comment_body': ""I'll delete the cli example as we're going flutter only for now :). So, I'll delete this readme file also and pub will index the actual code under `Example` tab by it's own. :)"", 'comment_created': datetime.datetime(2021, 8, 2, 11, 34, 39, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 680898362, 'comment_body': 'Why only Flutter? The Dart CLI things just keep working if you have a `dart` on your path correct?', 'comment_created': datetime.datetime(2021, 8, 2, 11, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 680900157, 'comment_body': ""Those binaries are added too, both x86 and x86_64. (I'll try to test on the emulator)."", 'comment_created': datetime.datetime(2021, 8, 2, 11, 41, 24, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 680904117, 'comment_body': 'When I try to do `dart run`, I get -\r\n```\r\nResolving dependencies... \r\nBecause example_dart depends on cronet from path which requires the Flutter\r\n  SDK, version solving failed.\r\n\r\nFlutter users should run `flutter pub get` instead of `pub get`.\r\n```', 'comment_created': datetime.datetime(2021, 8, 2, 11, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 680953509, 'comment_body': 'Oops. It does work.\r\nIf I do - `dart run bin/example_dart.dart` it works.\r\nBut, if I do `dart run`, it gives the error I mentioned above. Keep the CLI example then. :)', 'comment_created': datetime.datetime(2021, 8, 2, 13, 5, 28, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 681169595, 'comment_body': 'Not working on x86 emulator :( Getting HttpException with some negative long random value as error status code. Maybe we should mention this and probably need to do some modifications in the wrapper to support 32 bit systems overall.', 'comment_created': datetime.datetime(2021, 8, 2, 18, 4, 35, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 682440220, 'comment_body': 'Please file an issue to track this.', 'comment_created': datetime.datetime(2021, 8, 4, 9, 17, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 682441743, 'comment_body': 'Issue: https://github.com/google/cronet.dart/issues/20', 'comment_created': datetime.datetime(2021, 8, 4, 9, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 682500546, 'comment_body': 'It sounds similar to this: https://github.com/flutter/flutter/issues/73318\r\n\r\nLets just keep it for now and file an issue to look at it later.', 'comment_created': datetime.datetime(2021, 8, 4, 10, 42, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 682501594, 'comment_body': 'Can you leave comments on what lines of the file were added/modified from the generated file? That way it will be easier to deal with conflicts etc. if the Flutter project needs to be updated in the future.', 'comment_created': datetime.datetime(2021, 8, 4, 10, 44, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 682501623, 'comment_body': 'Can you leave comments on what lines of the file were added/modified from the generated file? That way it will be easier to deal with conflicts etc. if the Flutter project needs to be updated in the future.', 'comment_created': datetime.datetime(2021, 8, 4, 10, 44, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 682516116, 'comment_body': ""Oops. I mentioned this file in the above comment. It isn't modified by me. But, other paths are correct. I did a copy paste mistake with `android/src/main/AndroidManifest.xml`.\r\n\r\nAnyways, I added it to the correct file :)"", 'comment_created': datetime.datetime(2021, 8, 4, 11, 7, 52, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 682516935, 'comment_body': 'Netwrok -> network (also the other file)', 'comment_created': datetime.datetime(2021, 8, 4, 11, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 682518011, 'comment_body': 'This is the another modified file that I mis-""copy pasted"" with another manifest file\'s path.', 'comment_created': datetime.datetime(2021, 8, 4, 11, 10, 53, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 682521344, 'comment_body': 'netwrok -> network (it was the spelling I meant, not the capitalization 🙈 )', 'comment_created': datetime.datetime(2021, 8, 4, 11, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 682521625, 'comment_body': 'Oops :sweat: my bad.', 'comment_created': datetime.datetime(2021, 8, 4, 11, 17, 12, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 682522480, 'comment_body': ""Update the binaries and I'll change the download url and commit both the changes together :see_no_evil:. 1 less task for our CI vm."", 'comment_created': datetime.datetime(2021, 8, 4, 11, 18, 45, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 682533853, 'comment_body': 'What do we need the jars for in the Android binaries?', 'comment_created': datetime.datetime(2021, 8, 4, 11, 36, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 682554624, 'comment_body': ""We need those jar files too :) Again, I need to refer this issue: https://github.com/unsuitable001/dart_cronet_sample/issues/3\r\n\r\nI don't know the exact reason. :)"", 'comment_created': datetime.datetime(2021, 8, 4, 12, 9, 6, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 682556202, 'comment_body': ""I'm re-testing it on my device and I'll paste the exact error log here."", 'comment_created': datetime.datetime(2021, 8, 4, 12, 11, 34, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 682564683, 'comment_body': 'Tried in 3 variation. Logs below.\r\n\r\nAttempt 1: Include jar files but do not load the `.so` files from kotlin.\r\nOutput: Crashing as soon as it\'s getting launch. Only getting \r\n```Error connecting to the service protocol: failed to connect to\r\nhttp://127.0.0.1:34017/YTBP04h-Lu4=/\r\n````\r\n\r\nAttempt 2: Remove jars but load `so` files from kotlin\r\n\r\n```\r\n✓ Built build/app/outputs/flutter-apk/app-debug.apk.\r\nInstalling build/app/outputs/flutter-apk/app.apk...                 8.9s\r\nF/chromium(21501): [0804/174650.092879:FATAL:jni_android.cc(138)] Failed to find class J/N\r\nF/chromium(21501): #00 pc 0x00000000002e09bf /data/app/dev.google.cronet_example-ZSU7uPvW02OfcK8Ob4tYpQ==/lib/arm64/libcronet.86.0.4240.198.so\r\nF/chromium(21501): #01 pc 0x00000000002eb60f /data/app/dev.google.cronet_example-ZSU7uPvW02OfcK8Ob4tYpQ==/lib/arm64/libcronet.86.0.4240.198.so\r\nF/chromium(21501): #02 pc 0x00000000003418af /data/app/dev.google.cronet_example-ZSU7uPvW02OfcK8Ob4tYpQ==/lib/arm64/libcronet.86.0.4240.198.so\r\nF/chromium(21501): #03 pc 0x00000000001e1aa3 /data/app/dev.google.cronet_example-ZSU7uPvW02OfcK8Ob4tYpQ==/lib/arm64/libcronet.86.0.4240.198.so\r\nF/chromium(21501): #04 pc 0x00000000002c1a3f /system/lib64/libart.so\r\nF/chromium(21501): #05 pc 0x000000000000403b /system/lib64/libopenjdkjvm.so\r\nF/chromium(21501): #06 pc 0x0000000000000bcb /system/framework/arm64/boot-core-oj.oat\r\nF/chromium(21501): \r\nError connecting to the service protocol: failed to connect to\r\nhttp://127.0.0.1:37607/pQcwEtK-emc=/\r\n```\r\n\r\nAttempt 3: Remove jars and do not load `.so` files from kotlin\r\n\r\n```\r\n✓ Built build/app/outputs/flutter-apk/app-debug.apk.\r\nInstalling build/app/outputs/flutter-apk/app.apk...                 7.4s\r\nI/OpenGLRenderer(21802): Davey! duration=906ms; Flags=1, IntendedVsync=29271908984223, Vsync=29272625650861, OldestInputEvent=9223372036854775807, NewestInputEvent=0, HandleInputStart=29272634604821, AnimationStart=29272634798155, PerformTraversalsStart=29272634807217, DrawStart=29272653090655, SyncQueued=29272657276280, SyncStart=29272657438155, IssueDrawCommandsStart=29272657732217, SwapBuffers=29272812535446, FrameCompleted=29272815417269, DequeueBufferDuration=11718000, QueueBufferDuration=765000, \r\nF/libc    (21802): Fatal signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x0 in tid 21827 (1.ui), pid 21802 (.cronet_example)\r\n*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***         \r\nBuild fingerprint: \'asus/WW_X00TD/ASUS_X00T_2:9/PKQ1/16.2017.2009.087-20200826:user/release-keys\'\r\nRevision: \'0\'                                                           \r\nABI: \'arm64\'                                                            \r\npid: 21802, tid: 21827, name: 1.ui  >>> dev.google.cronet_example <<<   \r\nsignal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x0               \r\nCause: null pointer dereference                                         \r\n    x0  0000000000000000  x1  00000078b2bfac78  x2  0000000000010002  x3  00000078a7281588\r\n    x4  00000078a7281500  x5  0000007950719f88  x6  00000078a72814f0  x7  0000000000000000\r\n    x8  0f5c9418fa297d4e  x9  0f5c9418fa297d4e  x10 0000000000000001  x11 0000000000000000\r\n    x12 00000078a7281500  x13 00000078a72814f0  x14 0000000000004100  x15 aaaaaaaaaaaaaaab\r\n    x16 00000078a7a6ced0  x17 000000795071b040  x18 0000000000000001  x19 00000078a7a74000\r\n    x20 0000000000000002  x21 00000078b2bfc588  x22 00000078b1108041  x23 00000078b4755b90\r\n    x24 00000078b1108041  x25 00000078b2b1e000  x26 00000078b2bfc588  x27 00000078a7387430\r\n    x28 0000000000000004  x29 00000078b2bfaca0                          \r\n    sp  00000078b2bfac50  lr  00000078a7717ca8  pc  00000078a78773a4    \r\nbacktrace:                                                              \r\n    #00 pc 00000000003413a4  /data/app/dev.google.cronet_example-1jJaFkoD6WqfgexC4ieOzA==/lib/arm64/libcronet.86.0.4240.198.so\r\n    #01 pc 00000000001e1ca4  /data/app/dev.google.cronet_example-1jJaFkoD6WqfgexC4ieOzA==/lib/arm64/libcronet.86.0.4240.198.so\r\n    #02 pc 00000000002baba8  /data/app/dev.google.cronet_example-1jJaFkoD6WqfgexC4ieOzA==/lib/arm64/libcronet.86.0.4240.198.so\r\n    #03 pc 0000000000006694  <anonymous:00000078b1080000>               \r\nSyncing files to device ASUS X00TD...                                  ⣾\r\n\r\nLost connection to device.                                      \r\nSyncing files to device ASUS X00TD...                              702ms\r\nOops; flutter has exited unexpectedly: ""getIsolate: (112) Service has\r\ndisappeared"".\r\n⣻Oops; flutter has exited unexpectedly: ""getIsolate: (112) Service has\r\ndisappeared"".\r\n\r\n```', 'comment_created': datetime.datetime(2021, 8, 4, 12, 23, 53, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 682584427, 'comment_body': ""Ah of course, we're compiling that Kotlin helper code to a jar. Silly me. :)"", 'comment_created': datetime.datetime(2021, 8, 4, 12, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 682585661, 'comment_body': 'https://github.com/google/cronet.dart/releases/tag/binaries-v0.0.4', 'comment_created': datetime.datetime(2021, 8, 4, 12, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 682599801, 'comment_body': '@dcharkes Links are updated!', 'comment_created': datetime.datetime(2021, 8, 4, 13, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}]","[{'commit_sha': 'cf87c48976b4b5521234d3c8a8680fed82d77142', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11e8c1132be38322ab2e2131ac985d9671170c85', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0ea73973b67b4cbe283d781a2f2ea9035d28e9e', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b6a8a2d2397ccd116fca0ce7e68f439847ce1f8', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6094162d3fadeec14d49ea7cb4bfa60160f9d992', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bafdd35963e0c057b71aeefeb4c5a62beafa6253', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd49741df8b65c81ce1b791ed4cfb8d6c7f544f8', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '875cc3a18e3901a2376af9a1b973d680d2b7d442', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a631548420891359409cadac02025ccba70f7987', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0488e0e8f3af68aba52b91397788e0777e4eaf51', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2481e5439ba27c785acc2541b2a66224dfa7fa16', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bdfb8032e4e74910720145c9c8e5ab4cbb198d', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3870e67c32c82f6307e631e4ff6a54e1d10884c0', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fa832729b19d103b5694e478b5df2c804d88c4a', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'edb24bd41c8a563f7b03e01e11873c3f37380023', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59da4ee0bc7c99402b6ba8f782d4fd5826cd55fd', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3adf06fde06ff58affc25ee7f72abce9dd969936', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a4c1d704a28adfd8ba640fc8bd3678b5a98a76c', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3dbaf296d1e369d1b6e25018895d92bbef807aff', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd26ed080603e9c362aa859d822c03f678a62227c', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c58ed618bd4d972701947d7dcf356922c8d89b3', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4cdcc6c3f87e4fc17aea3683caa79c119b64ffc5', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}]",Soumyadip Mondal,26590510,soumyadip@atlan.com,User,,50,,2,38
708346403,add 32 bit architecture support,"Use an array of `uint64` to store the memory addresses of arguments (of cronet callbacks). On 32 bit systems, we must store the memory address on the lower 32 bits of `uint64` and upper 32 bits should be padded by `0`.

Closes #20 ",True,24,https://api.github.com/repos/google/cronet.dart/pulls/24,https://github.com/google/cronet.dart/pull/24,closed,12,3,4,3,1,6,0,0,[],2021-08-11 06:52:21+00:00,2021-08-13 14:20:11+00:00,199670.0,"2 days, 7:27:50","[{'comment_id': 688428196, 'comment_body': 'That should be uintptr_t. intptr_t is signed.\r\n\r\n`buf` is of type `uint64_t*` which means that an assignment (through `buf[i] =`) will always write the full 64 bits.\r\n\r\nWhen assigning a `int32_t` (on 32 bit `intptr_t` equals `int32_t`), it will first be sign-extended to `int64_t` setting the upper 32 bits to 1 if the starting value was negative. And then it will convert `int64_t` to `uint64_t` (keeping the bits) before doing the write. So this will fail for memory addresses that have a 1 as the first byte on 32 bit.\r\n\r\nMore background: If you want to play around see https://godbolt.org/z/Kor3zK7TK and  https://godbolt.org/z/8fx9P9MWh and replace the C types and see what different assembly is generated, especially the arithmetic (right) shift instructions that do the sign extension. If you change the type to uint32_t the arithmetic shifts are replaced by simply writing 0 to the upper bits to zero them out.', 'comment_created': datetime.datetime(2021, 8, 13, 11, 0, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 688443836, 'comment_body': 'This comment is not correct. You are always writing also the upper 32 bits of the value when interacting with it through `uin64_t*`.', 'comment_created': datetime.datetime(2021, 8, 13, 11, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 688493958, 'comment_body': ""Oh! right. I totally missed the sign extension part. So, that's why it was failing. We don't need to do 0 initialise the array at all. C will always `0` extend by itself when doing the casting implicitly in case of 32 bit systems."", 'comment_created': datetime.datetime(2021, 8, 13, 12, 58, 52, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 688525054, 'comment_body': 'Oh yes, C is implicitly casting for us. Totally missed this part too :).', 'comment_created': datetime.datetime(2021, 8, 13, 13, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 688528031, 'comment_body': 're: 32 bit machine\r\nYou can run things in 32 bit mode on 64 bit machines.\r\n\r\nDocument why this is important: because its read in Dart as a 64 bit integer.', 'comment_created': datetime.datetime(2021, 8, 13, 13, 47, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 688540886, 'comment_body': 'Changed. Is the new one good?', 'comment_created': datetime.datetime(2021, 8, 13, 14, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}]","[{'commit_sha': 'b75b7b998e5f4475589bbe70c1b56bfa9d21b631', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f362223539f8a6225fc9f153fa14080ca31d64d', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83fbea76187286783f961f68e58829d9843cdcef', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}]",Soumyadip Mondal,26590510,soumyadip@atlan.com,User,,50,,2,38
668885687,Migrate Essentials v0.0.1: Implement Client with openUrl method,"## Summary

1. HttpClient with QUIC, HTTP2, brotli support
2. HttpClient with a customizable user agent string
3. HttpClient close method (without force close)
4. open, openUrl & other associated methods.
5. Response is consumable using `dart:io` style API.
6. Different types of `Exception`s are implemented.

### Notes and Breaking Changes from `dart:io`

1. Custom SecurityContext is no longer handled by the client. Users have to handle it in other ways. (To be documented later)
2. userAgent property is now read-only. Custom userAgent should be passed as a constructor argument.
3. Force close isn't enabled in this PR.


Partial migration from: [unsuitable001/dart_cronet_sample](https://github.com/unsuitable001/dart_cronet_sample)",True,2,https://api.github.com/repos/google/cronet.dart/pulls/2,https://github.com/google/cronet.dart/pull/2,closed,27054,15,65,42,8,183,0,0,[],2021-06-12 14:54:46+00:00,2021-07-02 12:28:11+00:00,1719205.0,"19 days, 21:33:25","[{'comment_id': 650404480, 'comment_body': 'Can you restructure `.gitignore` to only have additions.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 31, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650404596, 'comment_body': 'This can be removed', 'comment_created': datetime.datetime(2021, 6, 12, 15, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405174, 'comment_body': 'You can mention the subset of features exposed added here.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 39, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405470, 'comment_body': 'Since Markdown does not render more than 2 new lines, you can remove any extra newlines from all `.md` files.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405611, 'comment_body': 'I think we can skip the example of adding a package to `pubspec.yaml`.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405747, 'comment_body': 'What about mobile platforms?', 'comment_created': datetime.datetime(2021, 6, 12, 15, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650405887, 'comment_body': 'Maybe also add a section on running tests.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 46, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650406131, 'comment_body': 'Make sure the comments follow this -\r\n1. The first letter is capitalized.\r\n2. Sentences end with a full stop.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 48, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650406250, 'comment_body': 'Use only 1 whitespace between comment and text.\r\n```yaml\r\n    - lib/third_party/** # May not be fully migrated.\r\n```', 'comment_created': datetime.datetime(2021, 6, 12, 15, 49, 50, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650406386, 'comment_body': 'Why are we excluding `examples/**` and `third_party/**` from linting?', 'comment_created': datetime.datetime(2021, 6, 12, 15, 51, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650406985, 'comment_body': 'End sentences with full stop.', 'comment_created': datetime.datetime(2021, 6, 12, 15, 57, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650407376, 'comment_body': ""Break comments at 80 chars.\r\n```dart\r\n/// Gets the [wrapper]'s source code's path, throws an [Exception] if not found.\r\n```\r\n\r\nAlso, follow this for comments -\r\n```dart\r\n/// A description.\r\n///\r\n/// A more detailed explanation, notes, example if neccesary.\r\nvoid func(){...}\r\n```"", 'comment_created': datetime.datetime(2021, 6, 12, 16, 1, 42, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650407991, 'comment_body': ""I'll add that after adding those android specific code."", 'comment_created': datetime.datetime(2021, 6, 12, 16, 8, 37, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650409390, 'comment_body': ""`examples` folder contains flutter examples (which is currently a placeholder). After you are done with this review, I'll add the actual code and remove this line.\r\nAnd, for `third_party` we can't ensure that if it's linted using `package:lints` rule or not. Even though they contains code from `dart:io`."", 'comment_created': datetime.datetime(2021, 6, 12, 16, 22, 46, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650414145, 'comment_body': 'Instead of excluding it entirely, you can consider adding `// ignore_for_file: lint1, lint2...`.\r\nSo that we know which lints can and cannot he handled.', 'comment_created': datetime.datetime(2021, 6, 12, 17, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650415684, 'comment_body': 'That sounds good to me.', 'comment_created': datetime.datetime(2021, 6, 12, 17, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650485392, 'comment_body': ""We can remove this entire thing as well.\r\n```gitignore\r\n# Directory created by dartdoc.\r\n# If you don't generate documentation locally you can remove this line.\r\ndoc/api/\r\n```"", 'comment_created': datetime.datetime(2021, 6, 13, 7, 48, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650485927, 'comment_body': 'You should remove this, it is enough to mention this in the PR.', 'comment_created': datetime.datetime(2021, 6, 13, 7, 52, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650486366, 'comment_body': 'Using the `pub` command directly has been deprecated and will be removed soon. Use `dart pub ...` or `flutter pub ...` instead of `pub ...`.', 'comment_created': datetime.datetime(2021, 6, 13, 7, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650486679, 'comment_body': '?', 'comment_created': datetime.datetime(2021, 6, 13, 7, 58, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650487427, 'comment_body': 'Use `preamble` to add `// ignore_for_file: lint1, lint2, lint3...` at the top of files generated by ffigen.', 'comment_created': datetime.datetime(2021, 6, 13, 8, 5, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650488011, 'comment_body': ""Oops. Typo :) I'll fix it.\n\nBtw, I meant to say - The response is consumable using 2 styles of APIs. If callbacks are registered, and then if someone try to use stream based API, that returned stream will be closed immediately.\n\nAlternate thought: We can resolve the future with error if the above situation occurs.\n\nWhich one should I prefer?"", 'comment_created': datetime.datetime(2021, 6, 13, 8, 9, 51, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650488555, 'comment_body': 'We may need to add the cronet license header here. Since this file has been generated from third party code.\r\n\r\nSee this https://github.com/dart-lang/ffigen/blob/19da55249ba2efacc147982107698dcda04ea3a6/example/libclang-example/pubspec.yaml#L86-L92', 'comment_created': datetime.datetime(2021, 6, 13, 8, 14, 20, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650489486, 'comment_body': 'You should consider wrapping all your tests inside groups. They are printed as prefix for every test inside. You can simply use the name of your test file here without the extension.\r\n\r\nExample test from ffigen - https://github.com/dart-lang/ffigen/blob/master/test/header_parser_tests/functions_test.dart#L17.', 'comment_created': datetime.datetime(2021, 6, 13, 8, 22, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650489905, 'comment_body': ""Having group can be beneficial here, it reduces the test description you would have to write.\r\n```dart\r\ngroup(' HttpException', (){\r\n  test('404, Not Found',()async{\r\n    ...\r\n  })\r\n});\r\n```\r\n"", 'comment_created': datetime.datetime(2021, 6, 13, 8, 26, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650490571, 'comment_body': ""You should consider adding dart docs to internal classes as well, this will be helpful in the future. There have been countless occasions when I didn't remember the purpose of a class in ffigen but even a single-line description made it easier.\r\n\r\nIt is okay to leave the dart doc if it's very trivial. So this is just a suggestion you can use accordingly."", 'comment_created': datetime.datetime(2021, 6, 13, 8, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650490793, 'comment_body': 'What is the need to wrap this class like this?', 'comment_created': datetime.datetime(2021, 6, 13, 8, 33, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650494548, 'comment_body': ""We don't want to expose constructor of this class to the user."", 'comment_created': datetime.datetime(2021, 6, 13, 9, 3, 3, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650494727, 'comment_body': 'Got it. :)', 'comment_created': datetime.datetime(2021, 6, 13, 9, 4, 20, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650510801, 'comment_body': 'Throwing an error sounds good to me.', 'comment_created': datetime.datetime(2021, 6, 13, 11, 23, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650512043, 'comment_body': 'Okay nevermind this.', 'comment_created': datetime.datetime(2021, 6, 13, 11, 32, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 650521481, 'comment_body': ""Keeping it as it is, as you've said."", 'comment_created': datetime.datetime(2021, 6, 13, 12, 46, 37, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 650545954, 'comment_body': 'Added :)', 'comment_created': datetime.datetime(2021, 6, 13, 16, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 651548869, 'comment_body': 'Do all the tests use this port? Maybe you should run the tests like `dart run test --concurrency=1` (and also mention this in readme) otherwise this port could be in use since package:test runs tests concurrently (4 threads by default).', 'comment_created': datetime.datetime(2021, 6, 15, 8, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 651555063, 'comment_body': ""Instead of using so many different ports, which obviously increase the chances of failure, you should stick to using just 1. This is likely to happen on CI systems like Travis which would run on every single PR.\r\n\r\nYou can also simply set the port as `0`. See https://api.flutter.dev/flutter/dart-io/ServerSocket/bind.html#:~:text=version%206%20only-,If%20port%20has%20the%20value%200,The,-optional%20argument%20backlog\r\nThis way you don't have to bother about tests failing due to used up ports.\r\n\r\nAnd the returned ServerSocket has the actual `port` which was assigned by the system.\r\n"", 'comment_created': datetime.datetime(2021, 6, 15, 8, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 651556358, 'comment_body': ""If you use `0` as the port you probably don't have to worry about concurrency anymore."", 'comment_created': datetime.datetime(2021, 6, 15, 8, 14, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 651594097, 'comment_body': ""Ah.. I wasn't aware about this port `0` thing. I'll update it.\n\nWhat port should I choose for that `wrong port` test? In `http_request_exception_test.dart`"", 'comment_created': datetime.datetime(2021, 6, 15, 9, 1, 28, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 651601691, 'comment_body': ""You can create an HttpServer with port 0, get the real port, and then close the socket.\r\nThis port should now definitely be closed. So you can use this.\r\n\r\n\r\nAlso you shouldn't use raw strings everywhere like this. You can make a `test_utils.dart` file to place constants (like HOST='localhost', PORT=0) and for functions which are used a lot throughout many tests, this improves code readability and changes to everything can be done in one single place."", 'comment_created': datetime.datetime(2021, 6, 15, 9, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 651687492, 'comment_body': ""Okay, I'll do it :)"", 'comment_created': datetime.datetime(2021, 6, 15, 11, 11, 38, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 652009230, 'comment_body': 'Make sure you have the copyright notice header everywhere.\r\n\r\n```\r\n// Copyright (c) 2021, the Dart project authors.  Please see the AUTHORS file\r\n// for details. All rights reserved. Use of this source code is governed by a\r\n// BSD-style license that can be found in the LICENSE file.\r\n```', 'comment_created': datetime.datetime(2021, 6, 15, 17, 32, 44, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 652331137, 'comment_body': 'Done :)', 'comment_created': datetime.datetime(2021, 6, 16, 3, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 652453137, 'comment_body': '`dart run cronet` should give an error message saying what the valid platforms are when running it with an invalid platform.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652453852, 'comment_body': 'Trying to run any cronet code without downloading the binaries should give an error message what command to run to download the binaries.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 10, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652460846, 'comment_body': ""If `.gitignore` and `.pubignore` are identical, we can omit `.pubignore`.\r\n\r\nIf they're not identical, can we generate the one from the other with a script in `tool/`? Or maybe generate both? That way we make sure it doesn't go out of sync and we accidentally start publishing too many files to pub. (E.g. of something gets added to `.gitignore` but not to `.pubignore`.)"", 'comment_created': datetime.datetime(2021, 6, 16, 8, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652463843, 'comment_body': 'This doesn\'t work for me.\r\n\r\n```\r\ndacoharkes@dacoharkes-l:~/cronet.dart$ dart run cronet linux64\r\nBuilding Wrapper...\r\nUnhandled exception:\r\nProcessException: Permission denied\r\n  Command: /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper/build.sh /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper ""86.0.4240.198""\r\n#0      _ProcessImpl._runAndWait (dart:io-patch/process_patch.dart:476:7)\r\n#1      _runNonInteractiveProcessSync (dart:io-patch/process_patch.dart:619:18)\r\n#2      Process.runSync (dart:io-patch/process_patch.dart:66:12)\r\n#3      buildWrapper (package:cronet/src/prepare_cronet.dart:33:15)\r\n#4      main (file:///usr/local/google/home/dacoharkes/cronet.dart/bin/cronet.dart:10:7)\r\n#5      _delayEntrypointInvocation.<anonymous closure> (dart:isolate-patch/isolate_patch.dart:281:32)\r\n#6      _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:184:12)\r\n\r\n$ /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper/build.sh /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper ""86.0.4240.198""\r\n-bash: /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper/build.sh: Permission denied\r\n```\r\n\r\nThe file is not marked as executable.\r\n\r\n`-rw-r----- 1 dacoharkes primarygroup  459 Jun 16 10:13 build.sh`\r\n\r\n```\r\n$ bash /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper/build.sh /usr/local/google/home/dacoharkes/cronet.dart/lib/src/native/wrapper ""86.0.4240.198""\r\nIn file included from wrapper.cc:9:\r\n<command-line>: error: too many decimal points in number\r\nwrapper.h:19:36: note: in definition of macro ‘OPENLIB’\r\n   19 |   #define OPENLIB(libname) dlopen((libname), RTLD_NOW)\r\n      |                                    ^~~~~~~\r\nwrapper.cc:18:49: note: in expansion of macro ‘CRONET_VERSION’\r\n   18 |   #define CRONET_LIB_NAME CRONET_LIB_PREFIX ""."" CRONET_VERSION CRONET_LIB_EXTENSION\r\n      |                                                 ^~~~~~~~~~~~~~\r\nwrapper.cc:40:26: note: in expansion of macro ‘CRONET_LIB_NAME’\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                          ^~~~~~~~~~~~~~~\r\n<command-line>: error: expected ‘)’ before numeric constant\r\nwrapper.h:19:36: note: in definition of macro ‘OPENLIB’\r\n   19 |   #define OPENLIB(libname) dlopen((libname), RTLD_NOW)\r\n      |                                    ^~~~~~~\r\nwrapper.cc:18:49: note: in expansion of macro ‘CRONET_VERSION’\r\n   18 |   #define CRONET_LIB_NAME CRONET_LIB_PREFIX ""."" CRONET_VERSION CRONET_LIB_EXTENSION\r\n      |                                                 ^~~~~~~~~~~~~~\r\nwrapper.cc:40:26: note: in expansion of macro ‘CRONET_LIB_NAME’\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                          ^~~~~~~~~~~~~~~\r\nwrapper.h:19:35: note: to match this ‘(’\r\n   19 |   #define OPENLIB(libname) dlopen((libname), RTLD_NOW)\r\n      |                                   ^\r\nwrapper.cc:40:18: note: in expansion of macro ‘OPENLIB’\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                  ^~~~~~~\r\nwrapper.cc:40:42: error: expected ‘)’ before ‘;’ token\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                                          ^\r\nIn file included from wrapper.cc:9:\r\nwrapper.h:19:34: note: to match this ‘(’\r\n   19 |   #define OPENLIB(libname) dlopen((libname), RTLD_NOW)\r\n      |                                  ^\r\nwrapper.cc:40:18: note: in expansion of macro ‘OPENLIB’\r\n   40 | LIBTYPE handle = OPENLIB(CRONET_LIB_NAME);\r\n      |                  ^~~~~~~\r\n```', 'comment_created': datetime.datetime(2021, 6, 16, 8, 23, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652468629, 'comment_body': 'Native code can live in `src/` instead of `lib/src/native/`', 'comment_created': datetime.datetime(2021, 6, 16, 8, 29, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652469610, 'comment_body': 'You can write these scripts in Dart instead.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652472834, 'comment_body': 'Native third party code should live in `third_party/`. (Dart third party code in `lib/src/third_party`.)\r\n\r\nSee https://opensource.google/docs/thirdparty/non-google3 .', 'comment_created': datetime.datetime(2021, 6, 16, 8, 34, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652473668, 'comment_body': 'If this is just code for your own testing purposes, consider not committing it.\r\n\r\nIf you want to commit it, include a Dart script that somewhere that builds the code and runs it to see if it works. And make sure this script is executed on the continuous integration.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 35, 31, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652475560, 'comment_body': 'This is only needed for your C++ testing code, and not for using the wrapper with `dart:ffi`, consider putting it in an `#ifdef`.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 37, 57, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652476849, 'comment_body': 'Code that is never used by dependent libraries and is only used by `dart run cronet` should live inside the `bin/` folder rather than the `lib/` folder.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652478853, 'comment_body': 'Unnecessary newline.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652480481, 'comment_body': 'Can we get a `buildCronetBinaries` as well? (Automating the steps you did locally to build the binary.)\r\n\r\nThat way we can just run `buildCronetBinaries` when we want to make the binaries for a new version.\r\n\r\nAlso, that would enable users to build instead of download if they so prefer.', 'comment_created': datetime.datetime(2021, 6, 16, 8, 44, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 652482060, 'comment_body': ""Move to `third_party/`. (Actually for this code it does not really matter because we also release this repo under Dart project authors copyright, but it's a good thing to always put third party code in `third_party/`.)"", 'comment_created': datetime.datetime(2021, 6, 16, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 653526522, 'comment_body': ""Let's make this build utility to build the wrapper for that custom version and [print the link to build cronet](https://chromium.googlesource.com/chromium/src/+/refs/heads/main/components/cronet/build_instructions.md) in the console. Should we also take the responsibility for building actual cronet binaries? I guess that may turn out to be a little bit hard to maintain. What's your view?"", 'comment_created': datetime.datetime(2021, 6, 17, 12, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 653527999, 'comment_body': ""I'll remove `.pubignore` from this PR as it's not required."", 'comment_created': datetime.datetime(2021, 6, 17, 12, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 653530170, 'comment_body': 'Try running `./build.sh . \'""86.0.4240.198""\'`. This may work :sweat_smile: But, we\'re dartifying it anyways.', 'comment_created': datetime.datetime(2021, 6, 17, 12, 46, 16, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 653737071, 'comment_body': 'Added. But, the actual exception (along with stacktrace) are rethrown along with the instructions.', 'comment_created': datetime.datetime(2021, 6, 17, 16, 41, 4, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 654420312, 'comment_body': 'Replaced build.sh script with dart implementation.', 'comment_created': datetime.datetime(2021, 6, 18, 13, 16, 28, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 654760919, 'comment_body': 'You can now run the build script as `build_cronet <version>`. Version string is optional. Defaults to: `86.0.4240.198`. Activate the package, before doing `build_cronet,` using `dart pub global activate`', 'comment_created': datetime.datetime(2021, 6, 19, 7, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655183210, 'comment_body': 'An optional parameters -> Either ""an optional parameter"" or ""optional parameters"".', 'comment_created': datetime.datetime(2021, 6, 21, 8, 38, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655184304, 'comment_body': 'Maybe default to empty list rather than having a nullable list.', 'comment_created': datetime.datetime(2021, 6, 21, 8, 39, 46, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655188423, 'comment_body': 'a -> an (pronounced ""age tee tee ..."")', 'comment_created': datetime.datetime(2021, 6, 21, 8, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655192080, 'comment_body': ""Make an enum with HTTP versions:\r\n\r\n* Callsites get an enum value rather than a boolean which is easier to read.\r\n* Future proof the API for if we get more than 2 HTTP versions.\r\n* Disambigutates which version we're using if it's not 2 (is it 1? is it 1.1? is it 3?)"", 'comment_created': datetime.datetime(2021, 6, 21, 8, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655199252, 'comment_body': '""Default - true"" is not a sentence.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#do-format-comments-like-sentences\r\n\r\nI think it would be better to rewrite the numbered lines to paragraphs. Some optional parameters could be combined:\r\n\r\n```dart\r\n  /// Initiates an [HttpClient] with the settings provided in the arguments.\r\n  ///\r\n  /// The settings control whether this client supports [quic], [brotli] and\r\n  /// [http2]. If [quic] is enabled, then [quicHints] can be provided.\r\n  ///\r\n  /// ...\r\n```\r\n', 'comment_created': datetime.datetime(2021, 6, 21, 9, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655199704, 'comment_body': 'Please either implement the TODOs or remove the documentation from the API until a PR in which you implement this.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 0, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655200666, 'comment_body': 'In the paragraph explaining cache modes: ""If [cacheMode] is [CacheMode.inMemory], [maxCache] is required.""\r\n\r\nAnd throw an `ArgumentError` on any invalid combination of arguments.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655206719, 'comment_body': 'Throw an `ArgumentError` if quicHints are provided but quic is false.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655208450, 'comment_body': 'Period at end of sentence.\r\n\r\nFor TODOs: please file issues on the GitHub repo for what still needs to be implemented and use `// TODO(<GitHub issue number>): ...` to refer to the issue.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655210579, 'comment_body': 'Add a period at end of the sentence.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 16, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655211146, 'comment_body': 'If [force] is not implemented yet, remove the documentation and method parameter for now.', 'comment_created': datetime.datetime(2021, 6, 21, 9, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655213341, 'comment_body': ""Maybe just use a plain English string for the group: 'Cronet initialization'."", 'comment_created': datetime.datetime(2021, 6, 21, 9, 20, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655218521, 'comment_body': ""Maybe move this to a markdown file somewhere.\r\n\r\nHow about `dart_io_comparison.md`? With a link to that file from README.md. And then you can link to the source code files from the markdown file.\r\n\r\nReasoning: The differences between dart:io and package:cronet are important in two situations:\r\n\r\n1. When users want to decide which package to use, they would probably look at the package on pub/GitHub.\r\n2. People involved in `dart:ffi` and `dart:io` decisions to have an overview (and argumentation) of why the APIs are different. They would also probably want the differences in a central place than scattered around the API.\r\n\r\nWhen people are using the API, they are not actually that interested in the differences between Dart IO and this API.\r\n\r\nWhen people are migrating, they'll get a ton of analyzer errors telling them how to migrate already.\r\n\r\nMaybe the comparison markdown could contain a migration instruction as well, but I think we can leave that for now."", 'comment_created': datetime.datetime(2021, 6, 21, 9, 27, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655219859, 'comment_body': 'Nice, using HttpServer to write tests! 👍 ', 'comment_created': datetime.datetime(2021, 6, 21, 9, 29, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655224535, 'comment_body': ""Maybe use `import 'dart:io' as io;` so that we don't accidentally use `io.HttpClient` for any tests instead of testing our Cronet implementation! Just as an extra safety check.\r\n\r\n(Commenting out the Cronet import only makes the registerCallbacks test not compile anymore.)"", 'comment_created': datetime.datetime(2021, 6, 21, 9, 36, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655225745, 'comment_body': ""Nit: `random` -> `some/non-existing/path` (It's not random, and because it's a test it probably should not be random, we don't want random test failures)."", 'comment_created': datetime.datetime(2021, 6, 21, 9, 38, 12, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655249653, 'comment_body': 'Documentation', 'comment_created': datetime.datetime(2021, 6, 21, 10, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655250934, 'comment_body': 'Does Cronet provide a mapping from integers to string error messages?\r\n\r\nWe should probably include the string error message if possible.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655251720, 'comment_body': 'Please clarify that this is used to pass on errors/exceptions from native code.\r\n\r\nMaybe rename to `CronetNativeException`?', 'comment_created': datetime.datetime(2021, 6, 21, 10, 15, 51, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655253289, 'comment_body': ""I think this actually classifies as `Error` rather than `Exception`. It's a programmatic error.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/usage#do-throw-objects-that-implement-error-only-for-programmatic-errors"", 'comment_created': datetime.datetime(2021, 6, 21, 10, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655256719, 'comment_body': '😆  I love it.\r\n\r\nMaybe put the comment on the line above and remove the "":p"".\r\n\r\n```dart\r\n      // Using non-existent url.\r\n      final request = await client.getUrl(Uri.parse(\'http://localghost:$port\'));\r\n```', 'comment_created': datetime.datetime(2021, 6, 21, 10, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655258592, 'comment_body': ""Filename: Isn't the callbacks the old API?"", 'comment_created': datetime.datetime(2021, 6, 21, 10, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655261029, 'comment_body': 'Maybe add a sanity check whether that error code exists.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 30, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655262831, 'comment_body': '`close` -> `closed.`\r\n\r\nOh, it looks like the comment is out of data, 9999 is not hardcoded anymore in the setup.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655263193, 'comment_body': ""`random` -> `nonExistent` (it's not random)."", 'comment_created': datetime.datetime(2021, 6, 21, 10, 33, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655263993, 'comment_body': 'Maybe I slightly prefer having these constants in every test file where they are used, that makes the tests more standalone.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 34, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655270985, 'comment_body': ""Add a comment saying we're using this because of a lack of support for asynchronous callbacks in dart:ffi.\r\n\r\nhttps://github.com/dart-lang/sdk/issues/37022"", 'comment_created': datetime.datetime(2021, 6, 21, 10, 46, 48, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655271261, 'comment_body': 'Missing period at end of sentence.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 47, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655272864, 'comment_body': 'Consistency between filename and group? Maybe call it cronet_initialization_test.dart.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 49, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655275411, 'comment_body': 'Split up the bindings between `lib/src/wrapper_bindings.dart` and `lib/src/third_party/cronet_bindings.dart`. The cronet bindings with cronet copyright, and the wrapper bindings with the copyright form this repository.\r\n\r\nSee for example https://github.com/google/webcrypto.dart/pull/17/files which has two ffigen.yaml configs and 2 generated bindings files.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 54, 14, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655278627, 'comment_body': 'Wrap at 80 chacters.', 'comment_created': datetime.datetime(2021, 6, 21, 10, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655279729, 'comment_body': 'Remove in this PR and add it back later when it works.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 1, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655281249, 'comment_body': ""With getters/setters, we don't use a verb in Dart for the documentation. We just describe what it is rather than using a verb for 'getting' and 'setting'.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/documentation#prefer-starting-variable-getter-or-setter-comments-with-noun-phrases\r\n\r\n(Also, missing period at the end of the sentence.)"", 'comment_created': datetime.datetime(2021, 6, 21, 11, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655282501, 'comment_body': 'This is unused in our code base. Should we remove it?\r\n\r\nIf it serves a purpose, add a test that uses this.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655283092, 'comment_body': 'Add tests for the other public API methods as well. (head/delete/patch)', 'comment_created': datetime.datetime(2021, 6, 21, 11, 7, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655283746, 'comment_body': 'Doc comments start with a single line explanation.\r\n\r\nAnd then one or more paragraphs.\r\n\r\n(Add a newline.)', 'comment_created': datetime.datetime(2021, 6, 21, 11, 8, 59, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655284746, 'comment_body': '> Many Dart developers avoid using part entirely. They find it easier to reason about their code when each library is a single file.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/usage#do-use-strings-in-part-of-directives\r\n\r\nMany developers include me. Would you mind just making these files standalone?', 'comment_created': datetime.datetime(2021, 6, 21, 11, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655287452, 'comment_body': 'remove', 'comment_created': datetime.datetime(2021, 6, 21, 11, 15, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655288002, 'comment_body': 'Remove for now.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 16, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655288223, 'comment_body': 'File todos on the GitHub repo and add issue numbers `// TODO(<number>): ...`.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 16, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655289077, 'comment_body': 'Typedefs never get called. Maybe:\r\n\r\n`Function signature for callbacks called on redirects.`\r\n\r\nYou can omit the argument description, because they are already in the typedef.\r\n\r\n(Same all the other typedefs.)', 'comment_created': datetime.datetime(2021, 6, 21, 11, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655290183, 'comment_body': 'Move the comment before the field. And change it to a doc-comment so that you can easily see it in the IDE.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 19, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655291981, 'comment_body': 'Just remove from this PR for now.', 'comment_created': datetime.datetime(2021, 6, 21, 11, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655294010, 'comment_body': 'Just add the doc comment from dart:io as well, that would be more useful for our users using this API.\r\n\r\n(Same for other methods.)', 'comment_created': datetime.datetime(2021, 6, 21, 11, 26, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655297363, 'comment_body': ""If it's copied code, it should be in lib/src/third_party/. Probably lib/src/third_party/ffigen/ to clarify where the code is from. And then this comment line can be removed."", 'comment_created': datetime.datetime(2021, 6, 21, 11, 31, 54, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655559150, 'comment_body': ""Can we control exactly which http version cronet should use? Or, I'll just make it like, if the passed value (enum) is for http2, then, set http2 to true (internally)?"", 'comment_created': datetime.datetime(2021, 6, 21, 17, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655560419, 'comment_body': 'What is the version that Cronet uses if you pass false?', 'comment_created': datetime.datetime(2021, 6, 21, 17, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655563603, 'comment_body': 'I thought, as `dart:io` style api already exists, maybe callback one will be new 😅. Getting rid of it anyways.', 'comment_created': datetime.datetime(2021, 6, 21, 17, 10, 56, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655565524, 'comment_body': 'Unused. Just here for compatibility reasons. Should I remove it?', 'comment_created': datetime.datetime(2021, 6, 21, 17, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655568002, 'comment_body': ""Yes, I'll remove it. Even I don't prefer it :) Is there a way where I can access some variables/functions accross my package without exposing it to the end user?\r\n\r\n(I can't completely remember why I moved to part of. I'll give you specifics as I stumble upon them. But, initially, I avoided it.)"", 'comment_created': datetime.datetime(2021, 6, 21, 17, 17, 53, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655570242, 'comment_body': 'Does `hide` keyword works for hiding constructors and variables also?', 'comment_created': datetime.datetime(2021, 6, 21, 17, 21, 39, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655571713, 'comment_body': 'Yes, or you can list the things you want to export in https://github.com/unsuitable001/cronet.dart/blob/essentials_v0.0.1/lib/cronet.dart', 'comment_created': datetime.datetime(2021, 6, 21, 17, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655587275, 'comment_body': ""Maybe 1.1 (not sure). I think it's like, if `quic` is true, prefer HTTP3, then fallback to http2 and check if it's enabled. And, then maybe HTTP1.1/1.0 (I'm not sure which one exactly.)"", 'comment_created': datetime.datetime(2021, 6, 21, 17, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 655589561, 'comment_body': 'You can do some tests to figure it out.', 'comment_created': datetime.datetime(2021, 6, 21, 17, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 655592331, 'comment_body': 'Can HttpServer create http2/3 connections also? Or, is there any other url to test against?', 'comment_created': datetime.datetime(2021, 6, 21, 17, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 657100577, 'comment_body': ""Removing these for now as they were for personal notes. I'll open a issue when we start migrating it."", 'comment_created': datetime.datetime(2021, 6, 23, 13, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 657307795, 'comment_body': ""In dart:io, doc comments are copied from `IOSink`. As, we're also implementing a `IOSink`, the doc comments are getting copied by default. Hence, I'm keeping it blank, just like `dart:io HttpClientRequest`."", 'comment_created': datetime.datetime(2021, 6, 23, 17, 15, 35, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 657968729, 'comment_body': 'Removing the callback based api and this error/exception class too.', 'comment_created': datetime.datetime(2021, 6, 24, 13, 53, 9, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 658827516, 'comment_body': ""I tested it and it worked as I speculated above. Just the difference is, `quic` fallback to `http2` even if it's unset (neither true or false). But, if you explicitly disable `http2`, then it fallback to `http/1.1`. So, merging `quic` and `http2` protocol params to a single param named `protocol` and make it an enum."", 'comment_created': datetime.datetime(2021, 6, 25, 14, 53, 47, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659283922, 'comment_body': ""For `HttpException` we are getting the error string from a error pointer provided by cronet to `onFailed` callback. Other than that, cronet just declares enums like -\r\n```\r\nCronet_RESULT_SUCCESS = 0,\r\nCronet_RESULT_ILLEGAL_ARGUMENT = -100,\r\nCronet_RESULT_ILLEGAL_ARGUMENT_STORAGE_PATH_MUST_EXIST = -101,\r\n```\r\nand so on... I can't find any proper function that takes this type of enum and gives us a string. Can we generate the string on our own if we have the int value?"", 'comment_created': datetime.datetime(2021, 6, 27, 8, 25, 53, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659596631, 'comment_body': 'Does ffigen support getting the strings of the enums? Could it?\r\n\r\nIf ffigen cannot we should probably just move them over to Dart code so that we can give a bit more proper error messages to users.', 'comment_created': datetime.datetime(2021, 6, 28, 8, 47, 8, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659598074, 'comment_body': 'Yeah, just remove it for now.\r\n\r\nWe can always add it back in when people start using `package:cronet` and find it missing. (But removing things later from an API is always problematic.)', 'comment_created': datetime.datetime(2021, 6, 28, 8, 48, 53, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659622361, 'comment_body': '> Does ffigen support getting the strings of the enums?\r\n\r\nNope.', 'comment_created': datetime.datetime(2021, 6, 28, 9, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 659646762, 'comment_body': '> If ffigen cannot we should probably just move them over to Dart code so that we can give a bit more proper error messages to users.\n\nOkay.\n', 'comment_created': datetime.datetime(2021, 6, 28, 9, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659648558, 'comment_body': ""This doesn't terminate on first invocation on Linux:\r\n\r\n```\r\n$ rm -rf .dart_tool/cronet/\r\n$ dart run cronet linux64\r\nBuilding Wrapper...\r\n\r\n\r\nCopying wrapper to project's .dart_tool...\r\nDownloading Cronet for linux64\r\nhttps://github.com/unsuitable001/cronet.dart/releases/download/0.0.1/linux64.tar.gz\r\nExtracting Cronet for linux64\r\nDone! Cleaning up...\r\nDone! Cronet support for linux64 is now available!\r\n^C\r\n```"", 'comment_created': datetime.datetime(2021, 6, 28, 9, 59, 6, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659654105, 'comment_body': 'This should not be needed anymore, we have array support in dart:ffi and package:ffigen.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659654910, 'comment_body': ""If the comments are for all the following entries:\r\n\r\n```yaml\r\n    include:\r\n      # For wrapper.\r\n      - 'Cronet_Engine_Shutdown'\r\n      - 'Cronet_Engine_Destroy'\r\n      - 'Cronet_Buffer_Create'\r\n      - 'Cronet_Buffer_InitWithAlloc'\r\n      - 'Cronet_UrlRequestCallback_CreateWith'\r\n      - 'Cronet_UrlRequest_InitWithParams'\r\n      # For executor.\r\n      - 'Cronet_Executor_CreateWith'\r\n      - 'Cronet_Executor_SetClientContext'\r\n      - 'Cronet_Executor_GetClientContext'\r\n      - 'Cronet_Executor_Destroy'\r\n      - 'Cronet_Runnable_Run'\r\n      - 'Cronet_Runnable_Destroy'\r\n```"", 'comment_created': datetime.datetime(2021, 6, 28, 10, 8, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659655804, 'comment_body': 'The LICENSE file `lib/src/third_party/cronet/LICENSE` is missing.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659657757, 'comment_body': 'Nit: put all 3 lint ignores on separate lines and order them alphabetically. (Also the other ffigen.yaml)', 'comment_created': datetime.datetime(2021, 6, 28, 10, 13, 3, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659661444, 'comment_body': 'Add documentation to the enum values. (And capitalize Cronet when used as a name in documentation.)\r\n\r\n```dart\r\n/// Defines the available http protocols supported by Cronet.\r\nenum HttpProtocol {\r\n  /// HTTP/2 with QUIC.\r\n  quic,\r\n\r\n  /// HTTP/2 without QUIC.\r\n  http2,\r\n\r\n  /// HTTP/1.1.\r\n  http\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659664895, 'comment_body': 'Exceptions and Errors mean something different in Dart.\r\n\r\nErrors are programmatic errors that should never be caught. Such as an invalid combination of arguments.\r\n\r\nExceptions should be caught. Such as a request failing because the internet is down.\r\n\r\nDo we have both types here?\r\nIf yes, is it relatively easy to distinguish these two?\r\nIf yes, split this into \r\n\r\n```dart\r\nclass CronetNativeException implements Exception {\r\n  // ...\r\n}\r\n\r\nclass CronetNativeError implements Error {\r\n  // ...\r\n}\r\n```\r\n\r\nand use them appropriately.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659675594, 'comment_body': 'How about making it yes? https://github.com/dart-lang/ffigen/issues/236 😸 ', 'comment_created': datetime.datetime(2021, 6, 28, 10, 41, 52, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659681836, 'comment_body': ""> The 'author' field is no longer used and may be removed. Try removing the field.\r\n\r\nline 7\r\n\r\n(My bad, I seem to have uploaded that!)"", 'comment_created': datetime.datetime(2021, 6, 28, 10, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659682638, 'comment_body': 'Could be a slightly better test by regex matching.', 'comment_created': datetime.datetime(2021, 6, 28, 10, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659690955, 'comment_body': ""I think it's cleaner to use the original types here instead of void* and casting both in here and in Dart.\r\n\r\nThen also generate the original types in the generated bindings (yes they don't line up because of https://github.com/dart-lang/ffigen/issues/22)\r\n\r\nAnd then use .cast() in Dart code and let Dart infer the right type arguments.\r\n\r\nThat way we only have a cast in Dart, and that cast will go away when we address https://github.com/dart-lang/ffigen/issues/22."", 'comment_created': datetime.datetime(2021, 6, 28, 11, 7, 10, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659693018, 'comment_body': 'Trailing whitespaces. Here and in many other places.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 10, 36, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659698776, 'comment_body': 'Move all the bin files to a single file with a single command line interface.\r\n\r\n`bin/setup.dart`\r\n\r\nvalid arguments:\r\n* (no argument) / `setup`: build/download wrapper/libcronet.so/dll\r\n* `clean`: deletes all built/downloaded things\r\n\r\n`dart run cronet:setup` would be the only valid invocation (similar to webcrypto.dart) ', 'comment_created': datetime.datetime(2021, 6, 28, 11, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659700670, 'comment_body': 'Can we also use cmake here?\r\n\r\nThat way we can unify the wrapper builds for platforms more.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659701305, 'comment_body': ""Hehe, I love the `--build` trick so that we don't have to invoke VS itself 🚀 "", 'comment_created': datetime.datetime(2021, 6, 28, 11, 24, 39, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659706534, 'comment_body': ""Remove this. Doing it in the build is better indeed. :)\r\n\r\nIf you make Linux also cmake, it's only in one place."", 'comment_created': datetime.datetime(2021, 6, 28, 11, 33, 29, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659710437, 'comment_body': ""This would need to go into bin/setup.dart, so that cmake for linux doesn't trip over this."", 'comment_created': datetime.datetime(2021, 6, 28, 11, 40, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659710656, 'comment_body': 'For convenience for IDE support:\r\n`set(CMAKE_EXPORT_COMPILE_COMMANDS ON)`\r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 28, 11, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659713797, 'comment_body': ""period at end of sentence.\r\n\r\nWhat does 'not needed' mean?\r\n\r\nIf it's just null pointer you might as well just pass nullptr from Dart. But it looks like you're actually passing an executor. And can't you call Init() from Dart?\r\n\r\n(In general if you can do things in c++ or Dart, it's easier to do everything in Dart.)"", 'comment_created': datetime.datetime(2021, 6, 28, 11, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659714798, 'comment_body': 'Could you construct this in Dart? With the symbol addresses read from the wrapper generated bindings?', 'comment_created': datetime.datetime(2021, 6, 28, 11, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659715469, 'comment_body': '(Then we could aim to only have the async callbacks and the finalizers in the wrapper. Both of those could be addressed by future dart:ffi features, removing the need for wrapper.cc completely in time.)', 'comment_created': datetime.datetime(2021, 6, 28, 11, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659716725, 'comment_body': 'Usually the header file belonging to the cc file comes first.\r\n\r\nAlso, alphabetically sort imports.\r\n\r\n```c++\r\n#include ""wrapper.h""\r\n#include ""../third_party/cronet_impl/sample_executor.h""\r\n#include ""../third_party/dart-sdk/dart_api.h""\r\n#include ""../third_party/dart-sdk/dart_native_api.h""\r\n#include ""../third_party/dart-sdk/dart_tools_api.h""\r\n#include <iostream>\r\n#include <stdarg.h>\r\n#include <unordered_map>\r\n```', 'comment_created': datetime.datetime(2021, 6, 28, 11, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659718729, 'comment_body': 'Nice, good setup!\r\n\r\n`callbackArgBuilder` -> `CallbackArgBuilder`\r\n', 'comment_created': datetime.datetime(2021, 6, 28, 11, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659718968, 'comment_body': 'no whitespace between comma and next arg. File not formatted?', 'comment_created': datetime.datetime(2021, 6, 28, 11, 54, 37, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659719230, 'comment_body': '3 empty lines. File not formatted?', 'comment_created': datetime.datetime(2021, 6, 28, 11, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659720612, 'comment_body': '`removeRequest` -> `RemoveRequest` (Capitalize first character for cpp function names.)\r\n\r\nhttps://google.github.io/styleguide/cppguide.html#General_Naming_Rules\r\n\r\n(Yes, that probably messes with the generated bindings and the lints. You can either use renames in ffigen, or just also ignore that lint.)', 'comment_created': datetime.datetime(2021, 6, 28, 11, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659721415, 'comment_body': 'Capitalize first letter.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 58, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659721616, 'comment_body': 'Capitalize first letter.', 'comment_created': datetime.datetime(2021, 6, 28, 11, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659724521, 'comment_body': 'Prefer full URL, so it can be easily clicked/copy-pasted.', 'comment_created': datetime.datetime(2021, 6, 28, 12, 3, 18, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659727132, 'comment_body': ""`_callbackHandler`\r\n\r\nDon't abbreviate variable names.\r\n\r\nhttps://dart.dev/guides/language/effective-dart/style#do-name-other-identifiers-using-lowercamelcase"", 'comment_created': datetime.datetime(2021, 6, 28, 12, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659728217, 'comment_body': 'try `> organize imports` in VSCode.\r\n\r\nAnd automating it https://code.visualstudio.com/updates/v1_23#_run-code-actions-on-save', 'comment_created': datetime.datetime(2021, 6, 28, 12, 9, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659731652, 'comment_body': '`Function` -> `void Function()`', 'comment_created': datetime.datetime(2021, 6, 28, 12, 14, 17, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659731989, 'comment_body': '`Function` -> `void Function()`', 'comment_created': datetime.datetime(2021, 6, 28, 12, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659741223, 'comment_body': ""Instead of passing Cronet and Wrapper around, why don't we make two final/late global variables. We're only going to realistically load both dynamic libraries once. So from a Dart point of view it would be nicer to just have access to these two loaded dynamic libraries from anywhere instead of saving references to them all over the place."", 'comment_created': datetime.datetime(2021, 6, 28, 12, 28, 19, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659795582, 'comment_body': ""Does Cronet not provide a default executor in it's own library?"", 'comment_created': datetime.datetime(2021, 6, 28, 13, 39, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659797112, 'comment_body': ""Don't commit commented out code."", 'comment_created': datetime.datetime(2021, 6, 28, 13, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659807376, 'comment_body': '`Function` -> `void Function()`', 'comment_created': datetime.datetime(2021, 6, 28, 13, 53, 21, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659809769, 'comment_body': ""Well, you need to build the libcronet.xxxx.so/dll yourself also right? It would be useful to have the steps to do that as a Dart script, so that you don't forget.\r\n\r\nWe can either have that script in tool/update_cronet.dart so that you can update the shared libraries with a simple step, or we can have it available in bin/setup.dart as `dart run cronet:build-cronet` (or something similar)."", 'comment_created': datetime.datetime(2021, 6, 28, 13, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659813274, 'comment_body': ""It terminates. But, after a while. Same on windows. I can't understand why. I'm suspecting an open stream maybe? Can you find any? \r\n\r\nFile: https://github.com/unsuitable001/cronet.dart/blob/essentials_v0.0.1/bin/setup.dart"", 'comment_created': datetime.datetime(2021, 6, 28, 14, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659818706, 'comment_body': ""No. I don't think cronet seperates that.\r\n\r\nI'm thinking of moving to `CronetNativeError` as it is thrown from `Cronet_RESULT` which is mostly consists of (if not all) `errors`."", 'comment_created': datetime.datetime(2021, 6, 28, 14, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659819964, 'comment_body': 'Sure.', 'comment_created': datetime.datetime(2021, 6, 28, 14, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659821307, 'comment_body': 'So, we are removing that `build` command?', 'comment_created': datetime.datetime(2021, 6, 28, 14, 9, 26, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659823298, 'comment_body': ""Yes, let's make everything be `cronet:setup` and we can always add arguments to that script (`cronet:setup build`)"", 'comment_created': datetime.datetime(2021, 6, 28, 14, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659823489, 'comment_body': ""Ok. Used gcc because in linux, we're building the wrapper locally every time. Unlike on windows, where we download the wrapper. As, cmake may not be available in distros by default, I used gcc. Should we move to providing wrapper for linux too?"", 'comment_created': datetime.datetime(2021, 6, 28, 14, 11, 55, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659828496, 'comment_body': 'Lets try providing both the wrapper and cronet for now.\r\n\r\nThen we can move the buildscripts for both the wrapper and cronet into tool/ and let bin/setup.dart only do downloading.', 'comment_created': datetime.datetime(2021, 6, 28, 14, 17, 44, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 659832229, 'comment_body': 'No, as far as I can figure out. This is the reason why I did https://github.com/google/cronet.dart/pull/2#discussion_r659714798\r\n\r\nI felt much more convenience handling the whole executor part in C/C++ rather than again creating a C function wrapper and passing it to dart. What do you recommend? keeping executor init in C/C++ or, exposing the method to dart?', 'comment_created': datetime.datetime(2021, 6, 28, 14, 21, 58, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659927456, 'comment_body': 'See https://github.com/google/cronet.dart/pull/2#discussion_r659832229', 'comment_created': datetime.datetime(2021, 6, 28, 16, 13, 51, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 659927845, 'comment_body': 'See https://github.com/google/cronet.dart/pull/2#discussion_r659832229', 'comment_created': datetime.datetime(2021, 6, 28, 16, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 661123369, 'comment_body': ""Added `cronet:setup build` and, it can be invoked with `tool/build_wrapper.dart`. For cronet, I'll add the build script under tool only."", 'comment_created': datetime.datetime(2021, 6, 30, 4, 34, 34, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 661189455, 'comment_body': '`cronet:setup` currently fetches binaries for all of the supported platforms. Should we add something to setup for only the current/specified platform?', 'comment_created': datetime.datetime(2021, 6, 30, 7, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 661245202, 'comment_body': '2 parts?', 'comment_created': datetime.datetime(2021, 6, 30, 8, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 661257380, 'comment_body': 'You could make a C API for interacting with the sample executor.\r\n\r\n* a C function for creating one (returning some pointer to it)\r\n* a C function for init-ing it (though, that might be combined with creating it)\r\n* a C function for getting the `Cronet_ExecutorPtr` out,\r\n* and then directly calling `Cronet_UrlRequest_InitWithParams` with the Cronet bindings rather than the wrapper.\r\n\r\nThat way you do not have to register the Cronet Cronet_UrlRequest_InitWithParams address in the wrapper.\r\n\r\nOr am I missing something here? 😺 ', 'comment_created': datetime.datetime(2021, 6, 30, 8, 45, 40, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 661260747, 'comment_body': ""Don't comment out code in this copied source file. Instead, use ffigen to filter the method names if you don't want to generate all of them."", 'comment_created': datetime.datetime(2021, 6, 30, 8, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 661265319, 'comment_body': 'You could compile and execute this from `dart run cronet:setup` as a verification step.', 'comment_created': datetime.datetime(2021, 6, 30, 8, 56, 2, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 661266693, 'comment_body': ""Platform.isWindows Platform.isLinux can tell you on which platform we are, we don't need to download the others right?"", 'comment_created': datetime.datetime(2021, 6, 30, 8, 57, 55, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 662230842, 'comment_body': 'Done :)', 'comment_created': datetime.datetime(2021, 7, 1, 12, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 662937170, 'comment_body': 'dart run cronet:setup', 'comment_created': datetime.datetime(2021, 7, 2, 11, 16, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 662950866, 'comment_body': 'Nice! I like how this is set up!', 'comment_created': datetime.datetime(2021, 7, 2, 11, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 662952317, 'comment_body': 'Maybe add a TODO with a reference to the relevant ffigen issue with regard to the casts.', 'comment_created': datetime.datetime(2021, 7, 2, 11, 45, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}]","[{'commit_sha': 'd96f23547796eafdf2fd461aaea4022cdd57be8f', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d3bb124861fac191d50054aff96b38ec20a07fc', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ca8a869c2243f18f3901dbc0abb703317b1e42', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2253a3553d25674ad48fd23ec43b3533f4121e4', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30cfbe693152e6de8e34cd540ec53c07f2e7105a', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ba712d65f17df5851fb0f2d0cf2b7588c072f22', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a218ac4b23dd528959db29faf8ccde53d4e206da', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd99c7c3acf35fac58aae74e504e22b2d3f98d9a0', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3da375f624b8a6f8a5365988c4358f09e18ca4f', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea156b1074305c59eaf17abe8c7fe158515d8b38', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '382be13141f94c5d4f18f5d20a6237135fe4c74b', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '82b296acb68df23c33518aebc1e169d8e25292d5', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a667deb0b290986f69004242dd876fd0f0047a2b', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7df55225a9a9c7321b76519b96c85a124b1d3507', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e7836a676bac28023fcf7c54cf029fc028b427b', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b921cf0a8bdecf88cbcf893b281cc442432f23e', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0303b71ffd0333378afc6b67768caad3eb819210', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5d4c6986c326ede0178083bc6e3c2f6f76a9d597', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '088b9fba7ca115f2b4cb832618aabc53056bdd14', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c88867e9c82efcf1541e64d46021eb7a3dfa0993', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6ae319fb1cba2776e2b711f6021a78218b0c910', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5eba348771f145f708b6d805dea77183d3ed000c', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd2490fbdbf5bbc53846cebdb769418b1f715552', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4cbd245688355929afbeca02e9be1b6a6b03932', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12499c3cc97a092730d3086fb5902adef957e274', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '783a6cebc31932b790d1418c134f6c2aa320abc3', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '96636e8d8006d0ec87ac99cfe8123b33ed629286', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3e4d848fd23aa20c71322f91e81c1f5bf895947', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5958aad69455a25ff744302992d632f32f34a8b6', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7533e4b83389fb6e4970b587874f8deeb40e7cb3', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9a1e1e79286391b8f17f1f3576646d8972feefd', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d511463a3231831536459126bc8510f74547dcd', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2f93cd31900390152ccd3a11adcdb20aa560ccc1', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31de14b9701798ccd11a7228fc80804fa86c7701', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ce69578795058e026f354205d6b59f02b9383e9', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0beef32f9790d32516d7b788dfced453ec33362f', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4452dbe068a9b56bb618bd74f6e444b19f39cc51', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1dcb37018e97532c0a9c9153ac5bb22241372245', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c50d7b32dd13f7e3012d4692ea65a5f4620b6def', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f222aa490249852a0e8a70637ed3c9d50f3c09fd', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3de33746f86da711554202f250c40f11915a8602', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec2efb0f610f953c1a5d5375e34394c79c5bde2d', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}]",Soumyadip Mondal,26590510,soumyadip@atlan.com,User,,50,,2,38
690433933,move to package:args for cli arg parsing,"Continuation #8 

- Bumped up the version of every dependency package as much as possible.
- Use `package:args` for CLI argument parsing.
  - - [x] `bin/setup.dart`
  - - [x] `tool/` files. (Tools don't take any CLI arg)
  - - [x] `benchmark/` files.
 - Fixes wrong location issue in `run_all.dart` due to the migration from `benchmarks/` to `benchmark/` (#14 )
 - Fixed wrong cli suggestion in case of un-locateable dylib.
 - Fixes `RangeError (index)` in `benchmark/throughput.dart` in case of 0 result.
 - Added README.md to `example` folder to fetch more pub points.

Closes #12 ",True,15,https://api.github.com/repos/google/cronet.dart/pulls/15,https://github.com/google/cronet.dart/pull/15,closed,163,61,10,6,5,8,0,0,[],2021-07-15 06:26:56+00:00,2021-07-16 11:07:45+00:00,103249.0,"1 day, 4:40:49","[{'comment_id': 670565199, 'comment_body': ""Do the 'exe' files compiled by dart only work on windows?"", 'comment_created': datetime.datetime(2021, 7, 15, 15, 23, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 670591420, 'comment_body': 'No :sweat_smile:. It is named as `.exe` by default regardless of the platform.', 'comment_created': datetime.datetime(2021, 7, 15, 15, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 670608173, 'comment_body': 'Ah, yes. I see it now in the documentation. Dart supports quite a few different compilation formats 😀', 'comment_created': datetime.datetime(2021, 7, 15, 16, 10, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mannprerak2', 'type': 'User'}, {'comment_id': 671060340, 'comment_body': 'Does this work with half a second?', 'comment_created': datetime.datetime(2021, 7, 16, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 671066477, 'comment_body': ""No. `Duration`'s `seconds` param takes `int`."", 'comment_created': datetime.datetime(2021, 7, 16, 8, 31, 13, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 671067353, 'comment_body': ""Maybe we should do milliseconds instead then, or convert a double manually. Because otherwise we can't test shorter durations."", 'comment_created': datetime.datetime(2021, 7, 16, 8, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'dcharkes', 'type': 'User'}, {'comment_id': 671069693, 'comment_body': ""Let's go with milliseconds then 😀"", 'comment_created': datetime.datetime(2021, 7, 16, 8, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}, {'comment_id': 671082218, 'comment_body': 'Got this result under short duration. Cronet is so much faster.\r\n\r\nLatency Test Results\r\n| Mode          | package:cronet | dart:io        |\r\n| :-----------: |:-------------: | :------------: |\r\n| JIT           | 247.333 ms   | 403.000 ms   |\r\n| AOT           | 240.444 ms   | 373.000 ms   |\r\n\r\nThroughput Test Results (Duration: 500 ms)\r\n| Mode          | package:cronet  | dart:io        |\r\n| :-----------: |:--------------: | :-----------:  |\r\n| JIT           | 30 out of 1024  | 0 out of 0  |\r\n| AOT           | 26 out of 1024 | 0 out of 0 |', 'comment_created': datetime.datetime(2021, 7, 16, 8, 55, 1, tzinfo=datetime.timezone.utc), 'commenter': 'unsuitable001', 'type': 'User'}]","[{'commit_sha': 'd6ced85c2044cf21d0365fae986a7a32892b7cc8', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d18d150ef52fd8f7de01733431aeaca8a0eaf7', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5df30b3b59575db4c2104dd74646de375ea4d0e', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94ed9988a80a94bbf3cb007f55b6dc9aa8391eda', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f5765ad4ee2888151d128a8b2a207c007d9a037', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3bb58007a6af91feb0a272baf3e34b4b8dbf61cf', 'committer_username': 'unsuitable001', 'committer_name': 'Soumyadip Mondal', 'committer_email': 'soumyadip@atlan.com', 'commit_date': datetime.datetime(2017, 3, 22, 5, 31, 38, tzinfo=datetime.timezone.utc)}]",Soumyadip Mondal,26590510,soumyadip@atlan.com,User,,50,,2,38

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
374739342,cronet.dart,google/cronet.dart,Dart,19,118,10,4,21,16,1,2,"[{'id': 780872747, 'number': 33, 'closed': datetime.datetime(2021, 11, 15, 17, 22, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 15, 16, 45, 15, tzinfo=datetime.timezone.utc), 'time_taken': 2230.0, 'time_delta': '0:37:10', 'additions': 9, 'deletions': 3, 'state': 'closed'}, {'id': 728340302, 'number': 31, 'closed': None, 'created': datetime.datetime(2021, 9, 7, 6, 13, 19, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1423, 'deletions': 3, 'state': 'open'}, {'id': 716688730, 'number': 29, 'closed': datetime.datetime(2021, 8, 20, 14, 50, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 12, 13, 5, tzinfo=datetime.timezone.utc), 'time_taken': 9434.0, 'time_delta': '2:37:14', 'additions': 31, 'deletions': 30, 'state': 'closed'}, {'id': 715202418, 'number': 28, 'closed': datetime.datetime(2021, 8, 19, 13, 19, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 15, 31, tzinfo=datetime.timezone.utc), 'time_taken': 78510.0, 'time_delta': '21:48:30', 'additions': 640, 'deletions': 137, 'state': 'closed'}, {'id': 712879832, 'number': 26, 'closed': datetime.datetime(2021, 8, 17, 15, 27, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 5, 43, 35, tzinfo=datetime.timezone.utc), 'time_taken': 207811.0, 'time_delta': '2 days, 9:43:31', 'additions': 121, 'deletions': 8, 'state': 'closed'}, {'id': 708346403, 'number': 24, 'closed': datetime.datetime(2021, 8, 13, 14, 20, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 11, 6, 52, 21, tzinfo=datetime.timezone.utc), 'time_taken': 199670.0, 'time_delta': '2 days, 7:27:50', 'additions': 12, 'deletions': 3, 'state': 'closed'}, {'id': 707247673, 'number': 23, 'closed': datetime.datetime(2021, 8, 10, 11, 27, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 10, 10, 59, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1682.0, 'time_delta': '0:28:02', 'additions': 9, 'deletions': 4, 'state': 'closed'}, {'id': 704635104, 'number': 22, 'closed': datetime.datetime(2021, 8, 10, 8, 26, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 11, 49, 45, tzinfo=datetime.timezone.utc), 'time_taken': 419793.0, 'time_delta': '4 days, 20:36:33', 'additions': 56, 'deletions': 9, 'state': 'closed'}, {'id': 703558413, 'number': 21, 'closed': datetime.datetime(2021, 8, 4, 14, 48, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 14, 29, 56, tzinfo=datetime.timezone.utc), 'time_taken': 1093.0, 'time_delta': '0:18:13', 'additions': 7, 'deletions': 3, 'state': 'closed'}, {'id': 697582153, 'number': 18, 'closed': datetime.datetime(2021, 8, 4, 13, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 6, 44, 21, tzinfo=datetime.timezone.utc), 'time_taken': 715359.0, 'time_delta': '8 days, 6:42:39', 'additions': 2587, 'deletions': 62, 'state': 'closed'}, {'id': 691872081, 'number': 17, 'closed': datetime.datetime(2021, 7, 26, 6, 53, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 7, 54, 22, tzinfo=datetime.timezone.utc), 'time_taken': 773959.0, 'time_delta': '8 days, 22:59:19', 'additions': 52, 'deletions': 47, 'state': 'closed'}, {'id': 690433933, 'number': 15, 'closed': datetime.datetime(2021, 7, 16, 11, 7, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 6, 26, 56, tzinfo=datetime.timezone.utc), 'time_taken': 103249.0, 'time_delta': '1 day, 4:40:49', 'additions': 163, 'deletions': 61, 'state': 'closed'}, {'id': 689093218, 'number': 14, 'closed': datetime.datetime(2021, 7, 13, 15, 24, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 14, 24, 51, tzinfo=datetime.timezone.utc), 'time_taken': 3607.0, 'time_delta': '1:00:07', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 684846574, 'number': 8, 'closed': datetime.datetime(2021, 7, 13, 14, 9, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 4, 19, 28, tzinfo=datetime.timezone.utc), 'time_taken': 553822.0, 'time_delta': '6 days, 9:50:22', 'additions': 665, 'deletions': 4, 'state': 'closed'}, {'id': 683205711, 'number': 7, 'closed': datetime.datetime(2021, 7, 6, 15, 32, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 17, 0, 10, tzinfo=datetime.timezone.utc), 'time_taken': 167541.0, 'time_delta': '1 day, 22:32:21', 'additions': 279, 'deletions': 89, 'state': 'closed'}, {'id': 668885687, 'number': 2, 'closed': datetime.datetime(2021, 7, 2, 12, 28, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 12, 14, 54, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1719205.0, 'time_delta': '19 days, 21:33:25', 'additions': 27054, 'deletions': 15, 'state': 'closed'}]"
