pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1291622714,Initial trait definition for `relocatable`,"This is a draft pr to implement the basic traits for P1144 (relocatable).

I defined a meta function (`is_relocatable`) and `pointer_relocate_category` allongside the existing `pointer_copy_category` and `pointer_move_category`. 

A type is `relocatable` if it is not tied to a specific location in memory.  (An example object that is not relocatable is std::mutex)

The aim of this branch is to implement the trivially relocatable trait and the faster data transfer algorithms it allows us to use.

To move forward I ask if this is the right file to the `is_relocatable` definitions.

I believe the `trivially_copyable_pointer` part of this file focuses on if an iterator is suitable for a contiguous `memcpy`, and not in determining if the underlying object is `trivially_copyable`; it uses `std::is_trivially_copyable` for that. At the moment however there is no `std::is_trivially_relocatable` or `std::is_relocatable`, so these have to be implemented first.

At the moment I have placed `hpx::is_relocatable` in this file, should I place it somewhere else?  

Thanks!",True,6212,https://api.github.com/repos/STEllAR-GROUP/hpx/pulls/6212,https://github.com/STEllAR-GROUP/hpx/pull/6212,closed,140,18,5,21,17,15,3,0,"[{'name': 'type: enhancement'}, {'name': 'type: compatibility issue'}, {'name': 'category: algorithms'}]",2023-03-27 16:04:32+00:00,2023-05-05 12:35:49+00:00,3357077.0,"38 days, 20:31:17","[{'comment_id': 1149484853, 'comment_body': 'This is the part I should probably move to another file', 'comment_created': datetime.datetime(2023, 3, 27, 16, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1149608206, 'comment_body': 'Should we make this to not use double negation? That would mean something like:\r\n```suggestion\r\n            bool IsContiguous = iterators_are_contiguous_v<Source, Dest>>\r\n```', 'comment_created': datetime.datetime(2023, 3, 27, 17, 55, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1149609388, 'comment_body': '```suggestion\r\n    template <typename Source, typename Dest, typename Enable = void>\r\n    struct pointer_relocate_category : detail::pointer_relocate_category<Source, Dest>\r\n    {\r\n    };\r\n```', 'comment_created': datetime.datetime(2023, 3, 27, 17, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1149616082, 'comment_body': 'agreed, this happens in multiple places in the file, should I change the pre-exising stuff too?', 'comment_created': datetime.datetime(2023, 3, 27, 18, 2, 38, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1149680098, 'comment_body': ""> agreed, this happens in multiple places in the file, should I change the pre-exising stuff too?\r\n\r\nSure, if it's not too much of a bother."", 'comment_created': datetime.datetime(2023, 3, 27, 19, 2, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1149689942, 'comment_body': 'Not at all, what do you think about the file location of `hpx::is_relocatable`?', 'comment_created': datetime.datetime(2023, 3, 27, 19, 12, 49, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1149722601, 'comment_body': 'This could be a new file in this directory, I think.', 'comment_created': datetime.datetime(2023, 3, 27, 19, 48, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1149728257, 'comment_body': 'Thanks, I will work on that and get back to you', 'comment_created': datetime.datetime(2023, 3, 27, 19, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1150838271, 'comment_body': '```suggestion\r\n#include <type_traits>\r\n```\r\nBoth, `is_destructible` and `is_move_constructible` are defined in `<type_traits>`', 'comment_created': datetime.datetime(2023, 3, 28, 15, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1150840400, 'comment_body': 'Please use your copyright', 'comment_created': datetime.datetime(2023, 3, 28, 15, 55, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1150849888, 'comment_body': 'Fixed!', 'comment_created': datetime.datetime(2023, 3, 28, 16, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1150851510, 'comment_body': 'Changed it', 'comment_created': datetime.datetime(2023, 3, 28, 16, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1151052553, 'comment_body': ""Yu don't need this entry. This is only for compatibility with old locations of headers that have been moved around."", 'comment_created': datetime.datetime(2023, 3, 28, 19, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}]","[{'commit_sha': 'f50e929ea3d1bdd6b82f6bf0985689d0b46328c8', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c86b5b5976bbfdd6e95da4f83e7adb2da557edc1', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f641080419846ff85fb10db1841f8c2c245affe7', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a541cf41833fc39832b2a4ade3801adc6c22dbc', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c7900009e8be9cf841a4a3261de0029c9772af5', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '161251ebb37930ea838b2876cf225bab09dc722d', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '036e6ca05de86d8f2fa82ff58e904fc80701581b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e689fb8ed4126603fff6a854bb4ccfca377a2fc', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '789c64653d10cf68b5b92957d16ff6f024549434', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '948f12d168cbbe47097710dfe9be4d4574010857', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e65c90d3acacbbfadd838413850bfe9092d7074', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9e4159900d947e83f0c8b8d4be0f38788f4fce8', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b534a5a27b02984ce7e2efb965a0053bfa5e7e0c', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e44c601e5e93c2f57de6f86375f745adc7bcf414', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97a89a34de50030a4b05040fd2c79d8a7496a974', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '50946773003477712ff284a619ef78ed0e08e921', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d4287d7435631f3efd8c0050a35daddb512f93b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '128611cdde2706e36fe52e9fb95f50a298c5ba6d', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd5a4a2b761f032295de860920bbdd5b0488f232', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd80d5ce6dfd978ff0850b679feb031b6fb8462a6', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32376589207ba6196f39682adbf190d4dfd1503b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}]",Isidoros,63551950,,User,,22,,19,13
1367995683,hpx::is_trivially_relocatable trait implementation,"This PR deals with the implementation of the `is_trivially_relocatable` trait. It offers the user an interface to declare their custom class as `trivially_relocatable` using the macro:

`HPX_DECLARE_TRIVIALLY_RELOCATABLE(<class name>)`

This assumes that trivially_copyable types are also trivially relocatable, following Folly's convention: https://github.com/facebook/folly/blob/ec297b748575e8ab86333899295715e6e85f909d/folly/Traits.h#L542",True,6264,https://api.github.com/repos/STEllAR-GROUP/hpx/pulls/6264,https://github.com/STEllAR-GROUP/hpx/pull/6264,closed,320,31,9,28,7,37,2,0,"[{'name': 'type: enhancement'}, {'name': 'type: compatibility issue'}]",2023-05-28 13:59:21+00:00,2023-07-10 11:50:14+00:00,3707453.0,"42 days, 21:50:53","[{'comment_id': 1208557775, 'comment_body': 'This was removed as move_constructible implies destructible', 'comment_created': datetime.datetime(2023, 5, 28, 14, 0, 37, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1208562777, 'comment_body': 'Please use the `_t` and `_v` variations of the traits, wherever possible. I.e.\r\n```suggestion\r\n        std::enable_if_t<traits::is_iterator_v<T>>>\r\n```', 'comment_created': datetime.datetime(2023, 5, 28, 14, 22, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1208697316, 'comment_body': '```suggestion\r\n        std::enable_if_t<std::is_trivially_copyable_v<T>>>\r\n```\r\n?', 'comment_created': datetime.datetime(2023, 5, 28, 23, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1209426037, 'comment_body': 'Oops, missed that!', 'comment_created': datetime.datetime(2023, 5, 29, 15, 43, 1, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1209463454, 'comment_body': ""You don't need the `typename` anymore:\r\n```suggestion\r\n        std::enable_if_t<std::is_trivially_copyable_v<T>>>\r\n```\r\n;-)"", 'comment_created': datetime.datetime(2023, 5, 29, 16, 54, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1209479514, 'comment_body': 'I\'d recommend\r\n```\r\nstruct Empty {};\r\nstruct NonEmptyButTrivial { int i; };\r\nstruct NonTrivialButTriviallyCopyable {\r\n    int i;\r\n    explicit NonTrivialButTriviallyCopyable(int);\r\n};\r\nstruct MoveOnlyButTriviallyCopyable {\r\n    int i;\r\n    explicit MoveOnlyButTriviallyCopyable(int);\r\n    MoveOnlyButTriviallyCopyable(MoveOnlyButTriviallyCopyable&&) = default;\r\n    MoveOnlyButTriviallyCopyable& operator=(MoveOnlyButTriviallyCopyable&&) = default;\r\n    ~MoveOnlyButTriviallyCopyable() = default;\r\n};\r\nstruct NonAssignableButTriviallyCopyable {\r\n    int i;\r\n    explicit NonAssignableButTriviallyCopyable(int);\r\n    NonAssignableButTriviallyCopyable(NonAssignableButTriviallyCopyable&&) = default;\r\n    void operator=(NonAssignableButTriviallyCopyable&&) = delete;\r\n    ~NonAssignableButTriviallyCopyable() = default;\r\n};\r\n\r\nstatic_assert(std::hpx::is_trivially_relocatable_v<Empty>);\r\nstatic_assert(std::hpx::is_trivially_relocatable_v<NonEmptyButTrivial>);\r\nstatic_assert(std::hpx::is_trivially_relocatable_v<NonTrivialButTriviallyCopyable>);\r\nstatic_assert(std::hpx::is_trivially_relocatable_v<MoveOnlyButTriviallyCopyable>);\r\nstatic_assert(std::hpx::is_trivially_relocatable_v<NonAssignableButTriviallyCopyable>);\r\n```\r\n(with or without the `""reasons""` for the static asserts). This makes it clearer what criteria are involved, and also follows the Rule of Three/Zero instead of the non-rule of One. :)', 'comment_created': datetime.datetime(2023, 5, 29, 17, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1209481468, 'comment_body': ""Here I recommend\r\n```\r\nstruct NotTriviallyCopyable1 {\r\n    NotTriviallyCopyable1();\r\n    NotTriviallyCopyable1(const NotTriviallyCopyable1&);\r\n    NotTriviallyCopyable1& operator=(const NotTriviallyCopyable1&) = default;\r\n    ~NotTriviallyCopyable1() = default;\r\n};\r\n\r\nstruct NotTriviallyCopyable2 {\r\n    NotTriviallyCopyable2();\r\n    NotTriviallyCopyable2(const NotTriviallyCopyable2&) = default;\r\n    NotTriviallyCopyable2& operator=(const NotTriviallyCopyable2&);\r\n    ~NotTriviallyCopyable2() = default;\r\n};\r\n\r\nstruct NotTriviallyCopyable3 {\r\n    NotTriviallyCopyable3();\r\n    NotTriviallyCopyable3(const NotTriviallyCopyable3&) = default;\r\n    NotTriviallyCopyable3& operator=(const NotTriviallyCopyable3&) = default;\r\n    ~NotTriviallyCopyable3();\r\n};\r\n```\r\nNone of these should be trivially relocatable according to P1144. `NotTriviallyCopyable2` is controversial but correct: If you ever want to optimize `vector::erase` or `swap_ranges`, you can't let trivially relocatable types do anything weird in their assignment operators either."", 'comment_created': datetime.datetime(2023, 5, 29, 17, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1209492681, 'comment_body': 'Here I recommend\r\n```\r\nstruct ExplicitlyTriviallyRelocatable1 {\r\n    ExplicitlyTriviallyRelocatable1();\r\n    ExplicitlyTriviallyRelocatable1(const ExplicitlyTriviallyRelocatable1&);\r\n    ExplicitlyTriviallyRelocatable1& operator=(const ExplicitlyTriviallyRelocatable1&);\r\n    ~ExplicitlyTriviallyRelocatable1();\r\n};\r\nHPX_DECLARE_TRIVIALLY_RELOCATABLE(ExplicitlyTriviallyRelocatable1);\r\n\r\nstruct ExplicitlyTriviallyRelocatable2 {\r\n    ExplicitlyTriviallyRelocatable2();\r\n    ExplicitlyTriviallyRelocatable2(ExplicitlyTriviallyRelocatable2&&);\r\n    ExplicitlyTriviallyRelocatable2& operator=(ExplicitlyTriviallyRelocatable2&&);\r\n    ~ExplicitlyTriviallyRelocatable2();\r\n};\r\nHPX_DECLARE_TRIVIALLY_RELOCATABLE(ExplicitlyTriviallyRelocatable2);\r\n\r\nstruct DerivedFromExplicitlyTriviallyRelocatable : ExplicitlyTriviallyRelocatable1 {\r\n    ~DerivedFromExplicitlyTriviallyRelocatable();\r\n};\r\n\r\nstatic_assert(hpx::is_trivially_relocatable_v<ExplicitlyTriviallyRelocatable1>);\r\nstatic_assert(hpx::is_trivially_relocatable_v<ExplicitlyTriviallyRelocatable2>);\r\nstatic_assert(!hpx::is_trivially_relocatable_v<DerivedFromExplicitlyTriviallyRelocatable>);\r\n```', 'comment_created': datetime.datetime(2023, 5, 29, 18, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1209493385, 'comment_body': 'nit: this comment says ""standard library types"" but you don\'t test any; you test only primitive (core-language) types', 'comment_created': datetime.datetime(2023, 5, 29, 18, 6, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1209493832, 'comment_body': ""I'd also add\r\n```\r\nstruct Polymorphic {\r\n    virtual int f();\r\n};\r\nstatic_assert(!hpx::is_trivially_relocatable_v<Polymorphic>);\r\n```"", 'comment_created': datetime.datetime(2023, 5, 29, 18, 7, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1209495470, 'comment_body': 'Almost certainly you should make this\r\n```\r\ntemplate <class T>\r\nstruct is_relocatable : std::is_move_constructible<T> {};\r\n```\r\nor\r\n```\r\ntemplate <class T>\r\nstruct is_relocatable : std::bool_constant<std::is_move_constructible_v<T>> {};\r\n```\r\nso that `is_relocatable<X>` can be used for tag dispatch.', 'comment_created': datetime.datetime(2023, 5, 29, 18, 11, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1209513322, 'comment_body': 'Thanks :D', 'comment_created': datetime.datetime(2023, 5, 29, 18, 59, 13, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1209515076, 'comment_body': 'makes sense', 'comment_created': datetime.datetime(2023, 5, 29, 19, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1209519643, 'comment_body': 'I see, what could a trivially relocatable type do in the assignment operator to break swap?', 'comment_created': datetime.datetime(2023, 5, 29, 19, 17, 18, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1209535089, 'comment_body': 'Literally anything other than ""assign the value of the right-hand side to the left-hand side."" I\'m actually planning a blog post for this week or next, on all the things that potentially go wrong when we treat `std::pmr::string` as trivially relocatable.\r\n\r\n```\r\nstruct Widget {\r\n    std::pmr::string ps;\r\n};\r\n\r\nstd::vector<Widget> w;\r\nw.push_back(Widget{ std::pmr::string(""hello""), &mr1) });\r\nw.push_back(Widget{ std::pmr::string(""world""), &mr2) });\r\nw.erase(w.begin()); // ideally should destroy w[0] and relocate downward, right?\r\nassert(w[0].ps.get_allocator().resource() == &mr1); // but today this is required to be true\r\n\r\nauto v1 = std::pmr::vector<std::pmr::string>({""hello"", ""hello""}, &mr1);\r\nauto v2 = std::pmr::vector<std::pmr::string>({""world"", ""world""}, &mr2);\r\nstd::swap_ranges(v1.begin(), v1.end(), v2.begin()); // ideally should swap the bytes, right?\r\nassert(v1[0].get_allocator().resource() == &mr1); // but today this is required to be true\r\n```\r\n\r\nThere are several theories of what to do here:\r\n- Don\'t call `std::pmr::string` trivially relocatable at all. (This is the default, implied by the current wording of P1144R8.)\r\n- Call `std::pmr::string` trivially relocatable, and put a precondition on _all_ standard library facilities that says you\'re not allowed to pass them objects from different arenas; if you do, that\'s library UB. (This is my own preferred theory.)\r\n- Call `std::pmr::string` trivially relocatable, and put a precondition on _some_ standard library facilities that says you\'re not allowed to pass them objects from different arenas; if you do, that\'s library UB. For example, let\'s say `vector<Widget>::erase` gets to assume that all the `Widget`s in the vector have the same arena, but `std::swap<Widget&>` does not, and thus simply cannot be optimized for trivially relocatable types. (This is the Bloomberg/P2786R1 theory, as of last week, although it might change in the future.)', 'comment_created': datetime.datetime(2023, 5, 29, 20, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1210645231, 'comment_body': ""That's a nice convention, is there some significance in declaring the assignment operator void vs the class's type in the last example?"", 'comment_created': datetime.datetime(2023, 5, 30, 18, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1210666053, 'comment_body': ""> is there some significance in declaring the assignment operator void vs the class's type\r\n\r\nNo, just laziness on my part. I don't care about that part either way. :)"", 'comment_created': datetime.datetime(2023, 5, 30, 18, 26, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1210840959, 'comment_body': ""From my understanding, the primary difference between 1 and 2 is that 1 is only **copy** assignable/constructible while 2 is only **move** assignable/constructible, with non-trivial functions for everything, making them both not trivially copyable. Does each structure represent a specific edge case scenario that the tests need to cover? I'm asking this to better understand the principles guiding the selection process for future test cases."", 'comment_created': datetime.datetime(2023, 5, 30, 21, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1212477881, 'comment_body': '1 is both copyable and movable; it\'s a classic C++98 ""Rule of Three"" type, which you\'ll probably see a lot of in real code. The fact that when you move it you get a call to the copy constructor (not a separate move constructor) doesn\'t really matter to me. The point is just that it\'s not Rule-of-Zero and it isn\'t move-only.\r\n2 is move-only, exactly isomorphic to `unique_ptr`.\r\n\r\nThe point of `DerivedFromExplicitlyTriviallyRelocatable` is that back when I was first thinking about ""The Best Type Traits C++ Doesn\'t Have,"" I considered the idea of opting into things like trivial relocatability and trivial comparability by using a member typedef:\r\n```\r\nstruct S {\r\n    using is_trivially_relocatable = void;\r\n};\r\n```\r\n(The STL uses this technique for [`is_transparent`](https://stackoverflow.com/questions/20317413/what-are-transparent-comparators).) The downside to this is that then anything _derived_ from `S` _inherits_ that member typedef — i.e., anything derived from a trivially relocatable type ends up being marked as trivially relocatable — which obviously isn\'t going to work.\r\n\r\nNow, neither P1144 nor HPX are actually doing anything at all with member typedefs, so we don\'t expect anything at all to go wrong with `DerivedFromExplicitlyTriviallyRelocatable`. But I figured it couldn\'t hurt to add the test case for it anyway.', 'comment_created': datetime.datetime(2023, 6, 1, 1, 49, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1213725707, 'comment_body': 'I see, both the tests and the rationale behind not using typedefs make sense, thank you :)', 'comment_created': datetime.datetime(2023, 6, 1, 22, 1, 32, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1230014378, 'comment_body': 'last minute thought: adding static_assert(is_relocatable<T>) ; as it is impossible to be trivially_relocatable but not relocatable. ', 'comment_created': datetime.datetime(2023, 6, 14, 18, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1230032452, 'comment_body': 'That\'s what I thought as of P1144R6; but the current revision (P1144R8) adopts the viewpoint that ""trivially relocatable"" is like ""trivially copyable."" It implies, ""I promise that **hypothetically when** you (copy|relocate|compare) this thing, you can do it trivially."" It doesn\'t imply anything about whether it is **actually okay** to (copy|relocate|compare) the thing; that\'s up to the algorithm\'s author to check.\r\n\r\nE.g.\r\n```\r\nstruct A { int i; A(A&&) = delete; A& operator=(A&&) = delete; };\r\nstatic_assert(std::is_trivially_copyable_v<A>);  // C++ today\r\nstatic_assert(std::is_trivially_relocatable_v<A>);  // in P1144R8\r\nA src[10];\r\nA dst[10];\r\nalignas(A) char rawdst[10*sizeof(A)];\r\nstd::copy(src, src+10, dst);  // invalid C++ today\r\nstd::uninitialized_move(src, src+10, (A*)rawdst);  // also invalid C++ today\r\nstd::uninitialized_relocate(src, src+10, (A*)rawdst);  // also invalid in P1144R8\r\n```\r\n\r\n...however, I see that I need to update my libc++ implementation to actually reject the latter. ;)\r\n\r\nAnyway, I don\'t have a strong opinion on which way HPX should define their trait. If you want to make it false for non-relocatable types, that\'s not crazy; it won\'t explode or anything. But I did want to point out _that_ P1144R8 chooses to do it differently, and _why_ P1144R8 chooses to do it differently.', 'comment_created': datetime.datetime(2023, 6, 14, 18, 46, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1230043088, 'comment_body': 'I see, I am struggling to think of a case where using std::relocate on a trivially relocatable but not relocatable type would be correct. I think I must be missing something', 'comment_created': datetime.datetime(2023, 6, 14, 18, 58, 20, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1230107739, 'comment_body': ""> I am struggling to think of a case where using [std::uninitialized_relocate] on a trivially relocatable but not relocatable type would be correct.\r\n\r\nThat's the point: it'd never be correct. And neither would it be correct to use `std::copy` on a trivially copyable but not copy-assignable type. That doesn't mean such a type is _not_ trivially copyable (or _not_ trivially relocatable); it just means that you can't use it with those algorithms because they require copy-assignability resp. relocatability.\r\n\r\nThe  _interface constraint_ on `std::copy` is that the type you pass in needs to be `is_copy_assignable`. Internally, the _optimization into a memcpy_ kicks in when the type happens to be `is_trivially_copyable`.\r\n\r\nThe _interface constraint_ on `std::uninitialized_relocate` is that the type you pass in needs to be `is_relocatable`. Internally, the _optimization into a memcpy_ kicks in when the type happens to be `is_trivially_relocatable`."", 'comment_created': datetime.datetime(2023, 6, 14, 20, 7, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1230161432, 'comment_body': ""Ohhh I see, so it's just a matter of where this check should be performed, R8 suggests it should not throw a compile error when you give a non-relocatable type this trait, but it should when we try to relocate it, right? And this is checked with a static assertion inside the relocation algorithms"", 'comment_created': datetime.datetime(2023, 6, 14, 20, 56, 57, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1231582207, 'comment_body': ""Yes, I believe you've got it now. Here's a concrete example with libc++: https://godbolt.org/z/Yr9MdncoT\r\n```\r\nstruct S {\r\n    const std::unique_ptr<int> m;\r\n};\r\n\r\nstatic_assert(std::is_trivially_relocatable_v<S>);\r\nstatic_assert(!std::is_relocatable_v<S>);\r\n\r\nvoid f(S *p) {\r\n    std::relocate_at(p, p); // ill-formed\r\n}\r\n\r\n__memory/relocate_at.h:91:19: error: static assertion failed [...]\r\n```\r\nIf you _could_ relocate `S`, then you could do so trivially. But in fact you can't relocate `S`."", 'comment_created': datetime.datetime(2023, 6, 15, 22, 5, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1234078301, 'comment_body': '```suggestion\r\n    struct is_relocatable : std::is_move_constructible<T>\r\n```', 'comment_created': datetime.datetime(2023, 6, 19, 13, 36, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1234210303, 'comment_body': 'of course!', 'comment_created': datetime.datetime(2023, 6, 19, 15, 26, 3, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1238695485, 'comment_body': 'Do we have to disable this specialization if `T` was marked as trivially relocatable (by specializing `is_trivially_relocatable<T>`) where `T` is also trivially copyable? \r\n\r\nAlternatively, we could change the macro above to:\r\n```\r\n#define HPX_DECLARE_TRIVIALLY_RELOCATABLE(T)                                   \\\r\n    namespace hpx {                                                            \\\r\n        template <>                                                            \\\r\n        struct is_trivially_relocatable<T,                                     \\\r\n            std::enable_if_t<!std::is_trivially_copyable_v<T>>>                \\\r\n          : std::true_type                                                     \\\r\n        {                                                                      \\\r\n        };                                                                     \\\r\n    }\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 15, 25, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1238717849, 'comment_body': 'Please add a test for a trivially copyable type that is also explicitly marked as trivially relocatable.', 'comment_created': datetime.datetime(2023, 6, 22, 15, 43, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1238733794, 'comment_body': 'Oh that did not cross my mind, will do ', 'comment_created': datetime.datetime(2023, 6, 22, 15, 56, 5, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1238755362, 'comment_body': 'Alternatively, just change the base case to\r\n```\r\n    template <typename T, typename = void>\r\n    struct is_trivially_relocatable : std::is_trivially_copyable<T>\r\n    {\r\n    };\r\n```', 'comment_created': datetime.datetime(2023, 6, 22, 16, 12, 59, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1238794604, 'comment_body': ""Thank you that's very elegant, I will apply this. Would \r\n\r\nstd::enable_if_t<!std::**is_trivially_relocatable_v**<T>>> ...\r\n\r\nwork as a more general solution? It does look kind of suspicious..."", 'comment_created': datetime.datetime(2023, 6, 22, 16, 50, 51, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1239057714, 'comment_body': ""No, you don't want to define `is_trivially_relocatable` in terms of itself. ;)\r\nNotice that P1144 can't help with this part of the HPX design, because P1144 proposes that the core language should just know which types are trivially relocatable — P1144's raison d'etre is specifically to _avoid_ this kind of opt-in macro. (But HPX needs this part _because_ P1144's core-language changes aren't in the language yet.)\r\n\r\n@isidorostsa: You should definitely take a look at what BSL and Folly are doing with their opt-in macros, and try to evaluate what advantages and disadvantages each approach might have. I think what you're doing with just letting the user specialize `hpx::is_trivially_relocatable<T, enable_if_t<...>>` is fine, but I don't think it is isomorphic to either BSL's or Folly's approach, so it would be good to evaluate, justify, and document.\r\n\r\n* [`bslmf::IsBitwiseMoveable`](https://bloomberg.github.io/bde-resources/doxygen/bde_api_prod/bslmf__isbitwisemoveable_8h_source.html)\r\n* [`folly::IsRelocatable`](https://github.com/facebook/folly/blob/5c227af84c1379f6f196932ca6b2fcfc7863c8ca/folly/Traits.h#L535)"", 'comment_created': datetime.datetime(2023, 6, 22, 21, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1251626406, 'comment_body': 'Thanks for this note, having examined `bslmf` and `folly` we decided to avoid using a nested trait, due to it being invasive to existing code to work. We did implement more generic macros to compensate for the lack of template and conditional support by the previous macro.\r\n\r\nnew macros: https://github.com/STEllAR-GROUP/hpx/pull/6264/commits/7139cb18df90897ecf39a1345c30faeb950b9751', 'comment_created': datetime.datetime(2023, 7, 4, 7, 42, 15, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1257518515, 'comment_body': ""| If you could relocate `S`, then you could do so trivially. But in fact you can't relocate `S`.\r\n\r\nJust for a sanity check; arrays of trivially relocatable types `T[]` should be considered trivially relocatable, but not relocatable (as not move constructable)?"", 'comment_created': datetime.datetime(2023, 7, 9, 17, 41, 19, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1257521425, 'comment_body': ""> Just for a sanity check; arrays of trivially relocatable types T[] should be considered trivially relocatable, but not relocatable (as not move constructable)?\r\n\r\nYes, that's exactly right. https://godbolt.org/z/9n4YGTjfd  (P1144R8 has actually removed `std::is_relocatable_v`, but kept `std::relocatable`. My Godbolt implementation keeps both, at least for now, since they're trivial to implement.)"", 'comment_created': datetime.datetime(2023, 7, 9, 18, 6, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}]","[{'commit_sha': '1f88873a58924a76deff3261c2c3bd62026410d6', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a179c522d8b6476589881c352e2eab44b89c57cd', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c435377fa8ad11d08033d7d0a2a397d8fe7f2238', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2c184190481a7d847f304652aabb56b0a0491d', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1db200e08b37ecaf5ad0b1b767e9563c6489d446', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8ff8dc071da014d848cb3eacb164c9cd7c4722a', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0603265f338b787dc633e3cbc6f61b36154ec7f2', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b46dd64dfddf831dac9eb65f06409aa5b91ae0b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f63342b19d65091682c8a2af760757481c514737', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '442972a008bebe556b54e3a143ab8ff51c7871e4', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76dcad2fe949f804ad8c90de7816e855d42c82f1', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4221069967fafb9b24ccf60fa2f90702b6342982', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b3923829d2a58809488ba8376dbf8eabe1be7ef', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '689a1fc556b1fc2ec7b0b0682b5b476a510d8b31', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2acd4fe869232ce211a4db7cc564e092cf9f1b3', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6caee74100f5cde56f8e795efca6b8f2576906e3', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '863e5a61f6f2984d7fafb108fdc488bbb940cabc', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e7bb7abf4886318d5df1e174f0a0724ecd3cc75', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e1d723b5dbe98c201020998a7177fdef0b97515', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89cf296e83517e5d181fbb9ad68e40bc4310266b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '24a18903d104b92b51fd005a8be922b9a1cb8cce', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6d03844406a0ada6d4624eec431eccde2d2df08', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e39def26c4c7fe1b776d1faa1dd79a5207b9a13', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '170b8dff634726a168729e16c983fc1bec732eac', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7d3639bf652774500dd25986dfae0d520ccc0ca', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '347cacbb84dc0137b9c72242f506025c5f8c90b4', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7139cb18df90897ecf39a1345c30faeb950b9751', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b626c45d9b636ec97e81f1a264bd6f084978f46', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}]",Isidoros,63551950,,User,,22,,19,13
1480859304,P1144 Relocation primitives,"This is a starting point for the implementation of the P1144 relocate_at and uninitialized_relocate algorithms for HPX. They will later be used as base primitives for parallelized and hpx-styled versions.
",True,6324,https://api.github.com/repos/STEllAR-GROUP/hpx/pulls/6324,https://github.com/STEllAR-GROUP/hpx/pull/6324,closed,1058,23,14,44,10,26,3,0,"[{'name': 'category: core'}, {'name': 'type: enhancement'}, {'name': 'type: compatibility issue'}]",2023-08-18 17:12:54+00:00,2023-09-05 14:50:55+00:00,1546681.0,"17 days, 21:38:01","[{'comment_id': 1301886318, 'comment_body': ""I still don't see the point of involving `decay_t` here. Nothing about relocation invokes decay, so it's _a priori_ weird to mention decay here. I've suggested (on Slack) to add a test case for `is_relocatable_from<int(&)[], int(&)[4]>`, which I claim should be false — in fact probably _all_ non-object types should give `false`.\r\n\r\nIn the long run, it could be productive to make `is_relocatable_from_v<T, U>` differ from `is_relocatable_v<T> && is_same_v<remove_cv_t<T>, remove_cv_t<U>>`, but I'm failing to picture what's different about it today."", 'comment_created': datetime.datetime(2023, 8, 22, 16, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301889596, 'comment_body': 'Style nit: I recommend `s/size/N/` (capitalize template parameter names) throughout.', 'comment_created': datetime.datetime(2023, 8, 22, 16, 18, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301892337, 'comment_body': 'I suggest that these two should be `false_type`: non-object types like `T&` aren\'t ""trivially relocatable"" in my book. Observe that `is_trivially_copyable_v<int&> == false`, and interestingly `is_trivially_copyable_v<int[]> == true`. We want to match that.', 'comment_created': datetime.datetime(2023, 8, 22, 16, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301896574, 'comment_body': 'Why not simply...? (and ditto on line 95–97)\r\n```\r\nhpx::detail::destroy_guard g(src);\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 16, 23, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301897834, 'comment_body': ""FWIW, I don't think this comment is useful. :)"", 'comment_created': datetime.datetime(2023, 8, 22, 16, 24, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301904112, 'comment_body': 'Again here `decay_t` is a smell. I think this wrongly permits memcpying when `InIter=int(*)[3], FwdIter=int(*)[4]`. Although maybe line 42 already rejects that case.', 'comment_created': datetime.datetime(2023, 8, 22, 16, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301910284, 'comment_body': ""You don't need `first_void`, `last_void` to cast away their constness; they're only read-from.\r\nPersonally I would rewrite these 13 lines as\r\n```\r\nconst char *first_byte = reinterpret_cast<const char *>(std::addressof(*first));\r\nconst char *last_byte = reinterpret_cast<const char *>(std::addressof(*last));\r\nsize_t n_bytes = (last_byte - first_byte);\r\n\r\nstd::memmove(std::addressof(*dst), first_byte, n_bytes);\r\n```"", 'comment_created': datetime.datetime(2023, 8, 22, 16, 32, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301915080, 'comment_body': '`s/that/than/`\r\nThe one that caused the exception was already destroyed, by `relocate_at`. So I might say\r\n```\r\n // destroy all objects other than the one that caused\r\n // the exception (relocate_at destroyed that one)\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 16, 36, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301918125, 'comment_body': 'Could remove `#include <vector>`.', 'comment_created': datetime.datetime(2023, 8, 22, 16, 38, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301920520, 'comment_body': 'Above, I suggest changing the answers for reference types.\r\nI also suggest checking the answers for `void`, `int()`, `int(&)()`, which should all be `false`, to match `std::is_trivially_copyable`.', 'comment_created': datetime.datetime(2023, 8, 22, 16, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301925607, 'comment_body': ""I'm confused by this. You're unconditionally using `destroy_guard` inside `relocate`, and unconditionally using `destroy_at` inside `destroy_guard`... so don't these comments simply indicate that you have a bug in C++17 when `relocate` is used on array types? ...Ah, except that `relocate` _already_ can't be used on arrays, because `is_constructible_v<int[4], int[4]>` is false. So all this ifdef stuff is simply unnecessary. You can replace lines 22–29 with simply\r\n```\r\n    template<typename T>\r\n```"", 'comment_created': datetime.datetime(2023, 8, 22, 16, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301927040, 'comment_body': 'You might sanity-check after this line\r\n```\r\nHPX_TEST(trivially_relocatable_struct::dtor_count == N);\r\n```', 'comment_created': datetime.datetime(2023, 8, 22, 16, 44, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1301937413, 'comment_body': 'oh thanks that slipped through ', 'comment_created': datetime.datetime(2023, 8, 22, 16, 53, 43, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1301938325, 'comment_body': 'Ohhh I had not understood that exceptions are the reason for using destroy guards instead of just move-constructing and destroying directly. Thanks, I will change the comment to reflect that', 'comment_created': datetime.datetime(2023, 8, 22, 16, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1302559166, 'comment_body': 'Thanks, I removed the void parts. The rest I think we will keep explicit\n\n', 'comment_created': datetime.datetime(2023, 8, 23, 6, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1302561866, 'comment_body': 'Looks like I was playing captain obvious there ', 'comment_created': datetime.datetime(2023, 8, 23, 6, 53, 35, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1302574999, 'comment_body': 'The idea was to make `destroy_guard` usable outside relocation too. The checks done here are not to prevent invalid relocation, but invalid use of this facillity. ', 'comment_created': datetime.datetime(2023, 8, 23, 7, 7, 23, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1303085520, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2023, 8, 23, 14, 11, 18, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1303119123, 'comment_body': 'Agreed', 'comment_created': datetime.datetime(2023, 8, 23, 14, 35, 24, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1303127840, 'comment_body': 'Okay. Personally I\'d still say [""You Ain\'t Gonna Need It""](https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it); and if you think you _will_ need a bulletproof reusable `destroy_guard` then I\'d say you should be investing _more_ in it — it should be in its own file instead of `relocate_at.hpp`, and named `hpx::destroy_guard` instead of `hpx::detail::destroy_guard`, and you should make it _work_ for arrays in C++17 instead of giving it different behavior depending on the C++ version. But that all sounds tangential to my interest in this PR, at least.', 'comment_created': datetime.datetime(2023, 8, 23, 14, 40, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1303219669, 'comment_body': ""Yea, I do agree with that. We are almost certainly not going to use this elsewhere. \r\n\r\nI do however have to leave the `HPX_CONCEPT_REQUIRES` etc there for the address sanitizer's warnings. \r\n\r\nThanks for your interest in enforcing best practices, I appreciate it :) "", 'comment_created': datetime.datetime(2023, 8, 23, 15, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1303231913, 'comment_body': ""> I do however have to leave the `HPX_CONCEPT_REQUIRES` etc there for the address sanitizer's warnings.\r\n\r\n*quizzical look* I don't understand why a requires-clause/enable_if/etc would have anything to do with address sanitizer. Or even (assuming you misspoke) what it would have to do with static analysis. This is again a tangent and non-blocking, but I'm curious if you could paste the warning/error that you get by omitting the `HPX_CONCEPT_REQUIRES`?"", 'comment_created': datetime.datetime(2023, 8, 23, 15, 57, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}, {'comment_id': 1303397154, 'comment_body': 'It was a verbal warning to me by a colleague :P . I will see if I can find out more and get back to you!', 'comment_created': datetime.datetime(2023, 8, 23, 18, 30, 54, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1304140733, 'comment_body': 'You are right, I am not sure why I insisted on `decay`. `remove_cv` should do', 'comment_created': datetime.datetime(2023, 8, 24, 10, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1304447890, 'comment_body': ""@Quuxplusone Doesn't it making it safer constraining the types that can be destroyed/guarded from the destroy guard? Def not a strong opinion of mine..."", 'comment_created': datetime.datetime(2023, 8, 24, 14, 42, 38, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1308181279, 'comment_body': '@gonidelis: ""Doesn\'t it make it safer [to be a constrained template]...?"" — Here\'s my opinion: I\'d say no. In fact, I\'d say constraints make the average _function_ template _less_ ""safe"" in general, because if you think about what would happen with a caller like this...\r\n\r\n    template<class T> /* requires (!is_array_v<T>) */\r\n    void callee(T *t) { std::destroy_at(t); }\r\n\r\n    void test(MyThing *t) {\r\n        callee(t);\r\n    }\r\n\r\nWithout the constraint, obviously we call this `callee` and get a hard error immediately if the instantiation doesn\'t pan out (e.g. if `MyThing` happens to be an array type, or void, or whatever). _With_ the constraint, if `MyThing` happens to be an array type, then this `callee` quietly drops out of overload resolution; so either we call some completely different (worse-matching but still viable) overload of `callee`, or we get an error about ""no viable candidate found,"" which is more difficult to debug. _Without_ the constraint, we simply get a hard error directly on the line with the `destroy_at` (or even better, down inside `destroy_at` where we\'d see it trying to do `t->~T()`).\r\n\r\nNow, in the case of a _class_ template like `destroy_guard`, we don\'t have that exact problem, because class templates can\'t be overloaded. Constraining a class template doesn\'t make the failure story any worse, AFAIK. But it doesn\'t make it any _better_, either. When we have two roughly equivalent options, equally usable, we should prefer the simpler one (fewer advanced features, fewer lines of code); in this case that means choosing the unconstrained class template `destroy_guard`.\r\n\r\nAlternative argument: C++20 constraints have exactly one[*] purpose: to mess with overload resolution. If you\'re not intending to mess with overload resolution, you shouldn\'t use constraints. (If you mean `static_assert`, okay; but then you should _say_ `static_assert`, not `requires`.)\r\n\r\n[* — well, actually at least two purposes: constraint syntax can also be used to define partial specializations]', 'comment_created': datetime.datetime(2023, 8, 29, 4, 30, 45, tzinfo=datetime.timezone.utc), 'commenter': 'Quuxplusone', 'type': 'User'}]","[{'commit_sha': '115ac17f08d01b5741b4f5f205fd6695620b06af', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c58ad81bb396e1c28012a79c3a3abfaeb85e42b1', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aba288b30cba0e8a8a26a7db4404701ba63a4f6b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '21d9722b85e74cdd8bb94c73f98c3f9fb6c52e72', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd9dfe227c38ddf0462d45c04162c634170857d03', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b556c0217e484f99fa247dc441e58cfa3103ff95', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dda851928f2b815add2be721e906ad56ce3abb1d', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '04111378ecc815d4403a3d6942671fa60c5b176b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2951d3c3e509d09754ae50f32c1b1b1ff86c88c', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa09ce45ee1304b7611dc440ef9294f0f9ad9244', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2b55ebfbe86e1d1f7281127fca27a3114c303c66', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57d4264f3a079a7b38c85abf8205d892191e6418', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '799fc3dc383f0863899d876a18a7f48b5c904f0c', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b80f7b931febcb30125df5aa04f6545b9db85b8a', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd78947069bfc048950a784b337d9a9a90d9603ac', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d218e526ee7858d2e2a77bcd3715315cb8164b4', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1e142e30ac2a7110c46568ad35db65a1c34969e', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3801e8b5cdfb7ac0d184126da23dc05bb898bd14', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3261583186861b8425142a9af1131d6d80704e92', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3a5d8d2e443688777f9ab8ad93835666637a4296', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf1a01a5a2490159d5a8aea09794119058e3de98', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c0973292c497b7f43ae71cd6532e6a7d9993095', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '168aad6cc5cc5b5d4a39d4a4d106063c7d0fa4bb', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dff12aefb72211605143d5a0adcb938a1e137aa', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd4a3a4a04ae0fa61624ecd5155241ea36efd8ac8', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0449d53ed7e643daa6bc28b521267cd764ad9cc', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b14f6f27e536525d59df5dd2828b85c6b208d45', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b96c29d23f31345c2a7688a311848619ea82d41', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fecec033d7a684935147b9d7ebb21394ebf7183', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c583147b8558346ca69c6b61dda9e2cd2e7af7a', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03344574c408004d6a18aadb2acd683de4922868', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3797e55ffa54afb13e8d7225f6103a509638d7bd', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b940642f97021d758cbddba9e0019960639c12d2', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '639f7fed758a1ebbc0d82d3501e06d40aabc5407', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f73777eb76a8f370f7ac549774bb45639e1b4bb', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e30dc0ef4124124a95596d864ea24c025e236829', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a33c1bd8fc902757c12a2e472cfc7afabeec739e', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '445d7795e66ce5e861552d2ca10f21da8375a05b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '737883441e9ba3d7550ff64b318d2e3e0993ae32', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00aed1c7b89dd0782b080e9e32fb05a781e84fd5', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e781714c99515ef32b2f72128b4a64a1eea96a3', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af1f6f66e4e14f8a67f4c6e743ecc95c71368725', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea53ac9e34cf55042a5ad71f5ccfede3846bade8', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a4c2d7b22bdac1704115cdf314e87270003e011', 'committer_username': 'hkaiser', 'committer_name': 'Hartmut Kaiser', 'committer_email': None, 'commit_date': datetime.datetime(2011, 1, 17, 0, 45, 44, tzinfo=datetime.timezone.utc)}]",Isidoros,63551950,,User,,22,,19,13
1454370980,Relocation algorithms Clean,"This is a reiteration of https://github.com/isidorostsa/hpx_fork/pull/2 which unfortunately got tangled up due to some mishandling of versioning on my end. Feedback from the original PR, specifically Arthur's comments, has been considered and implemented in this iteration.

Also, tests that are expected to fail to compile have been implemented.

### The original pr's description:
This is a starting point for the implementation of the P1144 relocate_at and uninitialized_relocate algorithms for HPX. They will later be used as base primitives for parallelized versions.",False,6314,https://api.github.com/repos/STEllAR-GROUP/hpx/pulls/6314,https://github.com/STEllAR-GROUP/hpx/pull/6314,closed,1948,13,16,60,14,31,3,0,"[{'name': 'type: enhancement'}, {'name': 'type: compatibility issue'}, {'name': 'category: algorithms'}]",2023-07-28 20:04:58+00:00,2023-09-09 17:23:06+00:00,3705488.0,"42 days, 21:18:08","[{'comment_id': 1278059686, 'comment_body': ""We do have `hpx::traits::is_contiguous_iterator[_v]`, not sure if that's usable in this context."", 'comment_created': datetime.datetime(2023, 7, 28, 20, 29, 29, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1278060891, 'comment_body': 'Could you use an enum instead of magic numbers?', 'comment_created': datetime.datetime(2023, 7, 28, 20, 31, 16, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1278063287, 'comment_body': '`noexcept(auto)` is not C++17. Using it would require a feature check, etc.', 'comment_created': datetime.datetime(2023, 7, 28, 20, 35, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1278063890, 'comment_body': '```suggestion\r\n    explicit non_trivially_relocatable_struct(int data)\r\n```\r\nThe same change needs to be applied in other spots as well.', 'comment_created': datetime.datetime(2023, 7, 28, 20, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1278064100, 'comment_body': '```suggestion\r\n    non_trivially_relocatable_struct(non_trivially_relocatable_struct&& other) noexcept\r\n```\r\nThe same change needs to be applied in other spots as well.', 'comment_created': datetime.datetime(2023, 7, 28, 20, 36, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1278068015, 'comment_body': 'We do have `loop_with_cleanup` which could be used here (see: https://github.com/STEllAR-GROUP/hpx/blob/dd17010adf02cdab681d96f10f96626d476459c0/libs/core/algorithms/include/hpx/parallel/util/loop.hpp#L625-L631)', 'comment_created': datetime.datetime(2023, 7, 28, 20, 42, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1278255730, 'comment_body': 'One point of relocation is that it can avoid any exceptions that a move constructor would throw, since it is just a memcpy, so I think we should leave this with exceptions on', 'comment_created': datetime.datetime(2023, 7, 29, 5, 55, 55, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1278308172, 'comment_body': ""Move constructors shouldn't be `explicit` (there is no need)."", 'comment_created': datetime.datetime(2023, 7, 29, 14, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1280039830, 'comment_body': '`template <typename T, HPX_CONCEPT_REQUIRES_(!std::is_array_v<T>)>` to beat the sanitizer?', 'comment_created': datetime.datetime(2023, 8, 1, 2, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1280042591, 'comment_body': ""Where's `HPX_HAVE_P1144_STD_RELOCATE_AT` defined?"", 'comment_created': datetime.datetime(2023, 8, 1, 2, 11, 5, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1280045562, 'comment_body': 'Wrap this line please. Inspect fails on line length limit. Let us know if you can see the following report so we can give you credentials.\r\n\r\nhttps://output.circle-artifacts.com/output/job/73d23aa6-c2cd-4871-8e28-32d8ecb63499/artifacts/0/hpx_inspect_report.html#/\r\n', 'comment_created': datetime.datetime(2023, 8, 1, 2, 18, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1280048005, 'comment_body': 'nitpicking but prefer `++count`', 'comment_created': datetime.datetime(2023, 8, 1, 2, 24, 43, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1280050540, 'comment_body': 'I am guessing from the test name that this is supposed to fail? `HPX_ASSERT( q == hpx::uninitialized_relocate(p, p + 1, q)`. I am little sure about the condition but should be sth along these lines if I understand correct. ', 'comment_created': datetime.datetime(2023, 8, 1, 2, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1280050666, 'comment_body': 'Same with comment below/above.', 'comment_created': datetime.datetime(2023, 8, 1, 2, 31, 19, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1280051446, 'comment_body': 'I just saw, maybe you want sth like what you are doing here:\r\n\r\nhttps://github.com/STEllAR-GROUP/hpx/pull/6314/files#diff-330e54904bc365a9718fcd3df944d8bfd0e25e00191d177a1ed710cdfdeaa71bR241', 'comment_created': datetime.datetime(2023, 8, 1, 2, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1283515109, 'comment_body': '(Just for future reference) \r\n\r\nThis test is supposed to fail at compile time', 'comment_created': datetime.datetime(2023, 8, 3, 17, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1283515307, 'comment_body': 'will do!', 'comment_created': datetime.datetime(2023, 8, 3, 17, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'isidorostsa', 'type': 'User'}, {'comment_id': 1291362522, 'comment_body': 'Would you mind adding some docs as well? @dimitraka can help with the integration into the documentation build etc. ', 'comment_created': datetime.datetime(2023, 8, 11, 13, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1291365468, 'comment_body': 'Will you add those tests back?', 'comment_created': datetime.datetime(2023, 8, 11, 13, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hkaiser', 'type': 'User'}, {'comment_id': 1297348446, 'comment_body': 'Under `libs/core/algorithms/include/hpx/parallel/algorithms/uninitialized_relocate.hpp` the API should accept the same type of `first` and `last` iterator. The `InIter`, `Sent` API is expected to be in the ranges counterpart udner container_algorithms.', 'comment_created': datetime.datetime(2023, 8, 17, 14, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1297350503, 'comment_body': 'you need an empty line at the EOF.', 'comment_created': datetime.datetime(2023, 8, 17, 14, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1297352814, 'comment_body': 'sequential overload takes `ExPolicy`?', 'comment_created': datetime.datetime(2023, 8, 17, 14, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': 'gonidelis', 'type': 'User'}, {'comment_id': 1304108457, 'comment_body': 'I think this should be FwdIter1 (at least the arguments below have FwdIter1 and FwdIter2)', 'comment_created': datetime.datetime(2023, 8, 24, 10, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'dimitraka', 'type': 'User'}, {'comment_id': 1304108776, 'comment_body': 'Accordingly, this should refer to FwdIter2', 'comment_created': datetime.datetime(2023, 8, 24, 10, 12, 25, tzinfo=datetime.timezone.utc), 'commenter': 'dimitraka', 'type': 'User'}]","[{'commit_sha': '2709dd94d20729976e3de07a8ebcb8953239eb3d', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3afc851abe23633ad68a526899a7a8c9d4dea29b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b3a6e871f2511d3cb5bfcbd3e0e786574172c9b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe6e0fb3e9ad87aa6e4c7662c499c3a49d5bbf43', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8ef523a132a446c51455f836166357b1ac426b04', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '13a1279774b24b5547341aa159c84e3ddd92bd4e', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c9edb07d9166c4d23285e63c38d336270f96418', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36b70cbfdfef998914db461838cd5ed797d4c6bd', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '148d7292bb81b20278f50d633cd1817e9d44996d', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cafae0ce1e9ad4a241be71c51b6c573d6e065cfa', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf48827883ad70a53e413e91629813006dc8e787', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2706778ecdf1cf4d2766b570f6796ededa6c396d', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07bd94c7117c85c9ac8603d42611bd9b44a0aaa9', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6f22033f1e27b34b9de3d40de7fc14338f4344b4', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cb44e29d0c0360b727bb71a31f0e67e72b1990bb', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7fb89584c62e132639666d9d7512a8600f6287b7', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3f6059dac6f1a5d97dc822d4bdfd34ace7d0a19c', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4367007501cbf6f0dd1a0d8f48f1b21d3805aafa', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6dcb771a7e2fcece76c4cdf79d6a9cbfe5ddde52', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e532e1c268af133da3fb9b01fa8c8c0660a8f98', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18705b9906bd1f02a045801ee2728731f368046b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22aeff96bc68500a1e697bb3b7ae48427b61ad6c', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '944ccb9454d4aac1a117f21493c68c318a6e294e', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7dbc69e88552bbe7a2c640e9bc412266c2884a75', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba51777b984d61a9ffe1aeb8fd7028d8e958e5c7', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b41893f1b7886d0074c2c49e79232afa13ff10b3', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87f68e10412c7e28e7325e6f85099053890a1d1d', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab55350efc367ef564856f78afc6088bdbf49ada', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '324c3f1c463a19e037550005997452e8f95a994b', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d126a33cbd4b8b4836815a547464562040919ed', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f39463a234ead3179b86f8dd3906b773c6a63c', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40269c03d9479cd8054264716cb8cbc454721980', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '312cf1f613b1f61f6eea13b667430add26623f4f', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b30eb554afd59f52e1532dbadc544045a562e400', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '868598810d5bdba514bbee2484cdf5d798170585', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c1f407dd5526a427fbe6daf9d2576d5c610f889', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b27231a4b0b85a9fb7f079adc96c295005c4117', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db65f320891d94c6744b03fbc0229c88e274b921', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f0cc63863f0474e896e917c3a36ab7189000f48', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1e85ee0136f72baedb7da41257c0209b28c03e', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db8ed7cf31b7d1fc8e3ab963ee9499fa47df0931', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3d51bff429b51232669a66f404a0bafb505a29c', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '00fb2e5b1c028c53f7008165eac1eebe3b752ed4', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3d9176d6aeec3a7641a80bd78303dca9942855', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d3a1784ad90a8b40a3184490f2750c4c8dc10ec', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a60cf8fd5b72ab7268eae64a758b0545c8b7c60', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a2e8a726ab7d78feae384e7209fc45bb294ee47', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99c4dbb83cdfcafe51da6228301a190f187241ca', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36080a33e2588ad12ac4b34870e070e642a3d6fd', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9f9e9a72b9768d78ade92d71efa2827b7f42566', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '32ed3c1f80810b61cded3ce9da7dbcd2ed0ce19c', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2885896b7461eb07430e24929063a4f739d0c85', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '95a70a03fcfd65e37515d5ef851559c70652ca52', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b98351ece72b6f3452c0bc9d33bf40d3db516c7', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '909998cffecd7e12669cfc514201df87b221e528', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bdc115a3b2370a2c510d09c8ab676c56586a086', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e57fe5b974dc1c2c60dcee28e929f38551523db', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '426c52a214f71402e65f8fe98430b4937a457680', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8fd47df07a3a367366dba0dd9b50f4e21af1201c', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd26c2f6402e1ec867b84afe7989549a600629888', 'committer_username': 'isidorostsa', 'committer_name': 'Isidoros', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 12, 15, 37, 36, tzinfo=datetime.timezone.utc)}]",Isidoros,63551950,,User,,22,,19,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
4455628,hpx,STEllAR-GROUP/hpx,C++,429,2493,126,239,29400,136,74,33,"[{'id': 1805166443, 'number': 6468, 'closed': None, 'created': datetime.datetime(2024, 4, 3, 17, 6, 52, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 212, 'deletions': 49, 'state': 'open'}, {'id': 1709988821, 'number': 6431, 'closed': None, 'created': datetime.datetime(2024, 2, 3, 18, 33, 28, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 6154, 'deletions': 1022, 'state': 'open'}, {'id': 1557176147, 'number': 6367, 'closed': datetime.datetime(2023, 10, 16, 14, 35, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 14, 22, 27, 41, tzinfo=datetime.timezone.utc), 'time_taken': 144471.0, 'time_delta': '1 day, 16:07:51', 'additions': 3, 'deletions': 18, 'state': 'closed'}, {'id': 1554638014, 'number': 6364, 'closed': datetime.datetime(2024, 1, 9, 15, 33, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 10, 12, 18, 15, 43, tzinfo=datetime.timezone.utc), 'time_taken': 7679881.0, 'time_delta': '88 days, 21:18:01', 'additions': 2223, 'deletions': 837, 'state': 'closed'}, {'id': 1532391831, 'number': 6357, 'closed': datetime.datetime(2024, 4, 15, 21, 1, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 27, 12, 52, 29, tzinfo=datetime.timezone.utc), 'time_taken': 17395758.0, 'time_delta': '201 days, 8:09:18', 'additions': 172, 'deletions': 3, 'state': 'closed'}, {'id': 1504354623, 'number': 6344, 'closed': datetime.datetime(2023, 9, 25, 18, 3, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 6, 10, 19, 57, tzinfo=datetime.timezone.utc), 'time_taken': 1669405.0, 'time_delta': '19 days, 7:43:25', 'additions': 2060, 'deletions': 365, 'state': 'closed'}, {'id': 1480859304, 'number': 6324, 'closed': datetime.datetime(2023, 9, 5, 14, 50, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 18, 17, 12, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1546681.0, 'time_delta': '17 days, 21:38:01', 'additions': 1058, 'deletions': 23, 'state': 'closed'}, {'id': 1461835368, 'number': 6315, 'closed': datetime.datetime(2023, 8, 10, 18, 57, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 3, 17, 46, 23, tzinfo=datetime.timezone.utc), 'time_taken': 609057.0, 'time_delta': '7 days, 1:10:57', 'additions': 26, 'deletions': 6, 'state': 'closed'}, {'id': 1454370980, 'number': 6314, 'closed': datetime.datetime(2023, 9, 9, 17, 23, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 28, 20, 4, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3705488.0, 'time_delta': '42 days, 21:18:08', 'additions': 1948, 'deletions': 13, 'state': 'closed'}, {'id': 1451449339, 'number': 6313, 'closed': datetime.datetime(2023, 8, 11, 5, 18, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 27, 7, 6, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1289571.0, 'time_delta': '14 days, 22:12:51', 'additions': 89, 'deletions': 0, 'state': 'closed'}, {'id': 1367995683, 'number': 6264, 'closed': datetime.datetime(2023, 7, 10, 11, 50, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 28, 13, 59, 21, tzinfo=datetime.timezone.utc), 'time_taken': 3707453.0, 'time_delta': '42 days, 21:50:53', 'additions': 320, 'deletions': 31, 'state': 'closed'}, {'id': 1291622714, 'number': 6212, 'closed': datetime.datetime(2023, 5, 5, 12, 35, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 27, 16, 4, 32, tzinfo=datetime.timezone.utc), 'time_taken': 3357077.0, 'time_delta': '38 days, 20:31:17', 'additions': 140, 'deletions': 18, 'state': 'closed'}]"
