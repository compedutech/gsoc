pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
685093067,To and create.,"This PR adds:
- DenseTensor class that wraps around a TensorFlow `Tensor`.
- `to` and `create` functions for the dispatcher.",True,8,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/8,https://github.com/qutip/qutip-tensorflow/pull/8,closed,421,2,12,66,4,38,0,0,[],2021-07-07 11:03:59+00:00,2021-07-15 17:24:16+00:00,714017.0,"8 days, 6:20:17","[{'comment_id': 665285674, 'comment_body': 'Should I make to and create accessible from qtf?', 'comment_created': datetime.datetime(2021, 7, 7, 11, 32, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 666066136, 'comment_body': ""I would argue there's no reason to abbreviate `qutip`.  It's short already, and it just hurts readability."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 22, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666066665, 'comment_body': 'the first argument is a list, specifically so you can pass more than one thing in a single call', 'comment_created': datetime.datetime(2021, 7, 8, 10, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666068245, 'comment_body': ""No - there's almost never a reason to re-expose the same object from a different location, particularly not across library boundaries.  The point of a dispatcher plugin is that the data-types should work from the main QuTiP library for basic use-cases, otherwise you'll cause confusion - if a user mutates the `qutip_tensorflow.to` object (e.g. by adding aliases or changing the preferred conversion rules), it would be a huge surprise to discover that `qutip.to` has also changed."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666068645, 'comment_body': 'again, really not sure I see a reason to abbreviate this.  People read code more than they write it.', 'comment_created': datetime.datetime(2021, 7, 8, 10, 26, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666069235, 'comment_body': ""You should protect this name with an underscore or something - you frequently use `data` as a variable, so at several points during the code, it's not at all clear what the identifier `data` refers to."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 27, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666071780, 'comment_body': ""It's not clear to me what inputs you're prepared to accept.  The docstrings says `array_like`, but this check will cause `DenseTensor([[1, 0], [0, 1]])` to raise an exception, despite it being a valid Numpy array-like object.  You might want to rethink the order you do things, so you're not repeating checks or throwing away valid input from which the shape _can_ be inferred.  Remember that the `__init__` method is really meant for _humans_ more than anything else - library code often uses fast alternative constructor methods, because it often already has a lot of knowledge about the data being passed in, and having to write more doesn't matter very much in library code."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666074309, 'comment_body': ""This error handling doesn't look right.  What if `data` is some random object which has a `shape` attribute, but isn't array-like?  Then the error is that invalid data has been passed, but `tf.constant(data)` will still likely throw a TypeError, so you'll see this error."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 34, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666077044, 'comment_body': ""You should also check that mutations of the original don't affect the copy, and vice-versa."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 39, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666078441, 'comment_body': ""You're shadowing a fixture name here, which is unclear - it means the same name refers to quite different things through the code."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 41, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666078661, 'comment_body': 'Are they really allowed to only be _almost_ equal?', 'comment_created': datetime.datetime(2021, 7, 8, 10, 41, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 666079766, 'comment_body': ""Please don't just copy-and-paste code - incorrect documentation can even be worse than no documentation at all."", 'comment_created': datetime.datetime(2021, 7, 8, 10, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 667364483, 'comment_body': 'I changed code logic. I think now this issue would be solved. ', 'comment_created': datetime.datetime(2021, 7, 10, 17, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 667368303, 'comment_body': 'What do you mean by mutations? Could you provide me an example with when this could go wrong?  \r\n\r\nIf by mutations you mean that I should check that an ""in place"" modification of original._tf does no change copy._tf (for example by doing something like: `original._tf[0, 0] += 1`) then, it turns out that for `Tensor` it is not possible to modify it in place. For instance, `original._tf[0, 0] += 1` will return `TypeError`. `Variables` from TensorFlow can but I plan to implement them in another class.\r\n\r\nIn any case, thinking about your comment I realised that this can happen:\r\n```python\r\noriginal = data_tensor_dense\r\nmaybe_copy = DenseTensor(original._tf, copy=False) # This is not what happens with copy() method but could happen!\r\nprint(original is not maybe_copy) # True\r\nprint(np.all(original._tf == maybe_copy._tf)) #True\r\nprint(maybe_copy._tf is not original._tf) # False!!!!!!\r\n```\r\nSo I will add in the tests: `assert copy._tf is not original._tf`. In any case I am not sure if this would matter that much as tensors can not be modified ""in place"". \r\n', 'comment_created': datetime.datetime(2021, 7, 10, 18, 8, 9, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 667369849, 'comment_body': 'Thanks for catching this. I named them `_list_dense` `_numpy_dense`. I would suggest doing the same in QuTiP tests as `numpy_dense` is sometimes used as a fixture and some other times not. ( I actually thought it did not matter because QuTiP tests already did it). I can make a pull request if in QuTiP if you agree.', 'comment_created': datetime.datetime(2021, 7, 10, 18, 22, 23, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 667371027, 'comment_body': 'With `assert np.all(test.to_array()==np.array(_list_dense))` it fails for:\r\n\r\nFAILED tests/core/data/test_tensordense.py::TestClassMethods::test_init_from_list_other_dtype[ket-float64] - assert False\r\nFAILED tests/core/data/test_tensordense.py::TestClassMethods::test_init_from_list_other_dtype[bra-float64] - assert False\r\nFAILED tests/core/data/test_tensordense.py::TestClassMethods::test_init_from_list_other_dtype[square-float64] - assert False\r\nFAILED tests/core/data/test_tensordense.py::TestClassMethods::test_init_from_list_other_dtype[wide-float64] - assert False\r\nFAILED tests/core/data/test_tensordense.py::TestClassMethods::test_init_from_list_other_dtype[tall-float64] - assert False\r\n\r\n\r\nCould this be due to the casting rules? I looks weird as it only fails for float64.', 'comment_created': datetime.datetime(2021, 7, 10, 18, 34, 40, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 667371101, 'comment_body': 'Sorry for this. I will go through all the comments in the test and ensure they are correct.', 'comment_created': datetime.datetime(2021, 7, 10, 18, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 667965747, 'comment_body': 'Remove this\r\n', 'comment_created': datetime.datetime(2021, 7, 12, 14, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 667967863, 'comment_body': 'check what happens if shape input not the same as data input\r\n', 'comment_created': datetime.datetime(2021, 7, 12, 14, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 669663614, 'comment_body': 'Actually, do not remove this as `numpy_dense` creates an array that depends on this fixture. For example, it necessary to test that `DenseTensor` is created properly from a Fortran array. Although, I am not sure how important is this. ', 'comment_created': datetime.datetime(2021, 7, 14, 14, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 669737178, 'comment_body': 'The default was changed.', 'comment_created': datetime.datetime(2021, 7, 14, 15, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 669933178, 'comment_body': 'Is there any situation in which the backing data field of this object can be mutable?  I don\'t know tensorflow so well, but say for numpy\r\n```python\r\n>>> class Data:\r\n...   def __init__(self, data):\r\n...      self.data = np.array(data, copy=False)\r\n...   def __repr__(self):\r\n...     return f""Data({repr(self.data)})""\r\n...\r\n>>> x = np.ones((2,))\r\n>>> y = Data(x)\r\n>>> x\r\narray([1., 1.])\r\n>>> y\r\nData(array([1., 1.]))\r\n>>> x *= 2\r\n>>> x\r\narray([2., 2.])\r\n>>> y\r\nData(array([2., 2.]))\r\n```\r\nso the derived object has changed from under us.\r\n\r\nIf there is such a case, then the default argument to `copy` _must_ be `True`.  If not, then does the `copy` keyword argument serve any purpose?', 'comment_created': datetime.datetime(2021, 7, 14, 20, 32, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 669933743, 'comment_body': 'you need double back-ticks (everywhere) to make this render as inline code, as opposed to in italics.', 'comment_created': datetime.datetime(2021, 7, 14, 20, 33, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 669934189, 'comment_body': '`data` is now guaranteed to be a tensor, so is it ever possible for this to raise an exception?', 'comment_created': datetime.datetime(2021, 7, 14, 20, 34, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 669935373, 'comment_body': 'Similarly, is it ever possible for this _not_ to be the case?', 'comment_created': datetime.datetime(2021, 7, 14, 20, 35, 53, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 669937916, 'comment_body': ""Do you need a separate `core` package within `qutip_tensorflow`?  I wouldn't imagine there'll be too many different levels in it, so this may just be adding needless structure."", 'comment_created': datetime.datetime(2021, 7, 14, 20, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 669939731, 'comment_body': ""this `print` doesn't serve a purpose - pytest eats the stdout stream on success, and would print the parameters to the test on failure."", 'comment_created': datetime.datetime(2021, 7, 14, 20, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 669943193, 'comment_body': ""I'm not sure what exactly the test (and the similar reverse test) is meant for.  The behaviour seems to be a lot more of a test of `qutip.data.to` than anything else - it seems to just be testing that the alias and partial application systems work.  If your intent is to test that the various conversions have truly been added, you probably want to investigate the `direct` attribute of the output of `data.to[to_, from_]`."", 'comment_created': datetime.datetime(2021, 7, 14, 20, 48, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 669945012, 'comment_body': 'If so, you probably also want to check that using the `copy` keyword _does_ return a copy.', 'comment_created': datetime.datetime(2021, 7, 14, 20, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 669947335, 'comment_body': ""Be careful with this casting; `np.random.rand()` returns a float on [0, 1], which will be cast to a integer 0 every time bar ~once every 2^53 times.  So you're basically just testing on the zero matrix every time, which probably isn't what you meant."", 'comment_created': datetime.datetime(2021, 7, 14, 20, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 669970729, 'comment_body': 'I was following the same structure that QuTiP has for consistency. It is no necessary but I though someone working on QuTiP would find it more appealing. ', 'comment_created': datetime.datetime(2021, 7, 14, 21, 35, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 669982186, 'comment_body': 'The above case would work differently for tensorflow if using a `Tensor`:\r\n```python\r\na = random_tensor((1,1)) # random tensor of shape (1,1)\r\nb = TfTensor(a)\r\nb._tf == a # True\r\na *= 2\r\nb._tf == a # False\r\n```\r\nTo my knowledge, there is no operation in a `tf.Tensor` that does not return a different tensor. `tf.Variables`, although not supported yet in qutip-tensorflow, do perform in-place operations with the `assign()` method. \r\n\r\nI can not think of a case where `copy=true` is necessary but it does have a different behaviour. For instance,\r\n```python\r\na = tf.constant([[1+1j]])\r\nb = TfTensor(a, copy=False) \r\na is not b._tf # False\r\nb = TfTensor(a, copy=True)\r\na is not b._tf # True \r\n``` \r\nAlthough I do not know when and why this could be useful (this may be why `tf.constant()` does not have a `copy` argument).', 'comment_created': datetime.datetime(2021, 7, 14, 21, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 669988649, 'comment_body': 'You are right, this was necessary for the previous logic but is not any more. Removing.', 'comment_created': datetime.datetime(2021, 7, 14, 22, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 670664667, 'comment_body': 'I see the problem but given there is such a low chance to occur I think I will let it be for the moment and focus on the next PR.', 'comment_created': datetime.datetime(2021, 7, 15, 17, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 670666454, 'comment_body': 'This is quite a change and I really do not want to delay this any more. I will merge this pull request so that I can open the next. I will also open a new PR making this test more sensible.', 'comment_created': datetime.datetime(2021, 7, 15, 17, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 670668007, 'comment_body': ""If tensors are immutable, then the copy argument is pretty redundant. It's fine to have it for consistency, you may just want to mention that it does very little in the docstring."", 'comment_created': datetime.datetime(2021, 7, 15, 17, 22, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 670668879, 'comment_body': ""I'd say there's no need to try and maintain structural consistency between separate packages. QuTiP's core is just for code organisation anyway - it's not directly exposed to users."", 'comment_created': datetime.datetime(2021, 7, 15, 17, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 670669009, 'comment_body': ""The point is more that the test isn't correct - you're not actually passing it random data, you're just passing a zero matrix. You could basically just fix it by generating random unsigned integers instead of random floats, and then you wouldn't need the unsafe cast either."", 'comment_created': datetime.datetime(2021, 7, 15, 17, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}]","[{'commit_sha': '119d207898b0fcb904c79e5894ff38b013e62e68', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17f11e9066b7c6d81fbc925ba2811f8d25984619', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eafca406e713231b29db31c7b3db23de030836da', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2d07b56134cc3d3591ab33ac04e37fa0da2829eb', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ea7a6ec40ec3eaddf9bcc096b8cb03f16d7855', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '196089012ba88bd99ecd213674d652f286070453', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaa058662d393fbd9bbe0eaa73ba6671ffead806', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '927ce475efb1fb808a79011df67053cf78c4edde', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4dbbda6aee15f3319995ca1a947d9afe5dd919f', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5862604cb51681a037bfd41887e74e63c4b44416', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '955c4f304c06a51bc83de3abd7c18f6fea7fecc2', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f39efa830cdd3c6565c9862d33085d4bed6a3d2b', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19efd38d7ac8a9b994e2b0240614a35cd9551ab0', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbb4da8386024f539ceab2dda43ec26528971e70', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd40cce1289e10510980809b48d3503bdac41121d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ced207030d01ceb40c3cda20e3cb98a5c0043a5', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3a1acf04b51672e2497ef88fbd64a0067ac7069', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fc0ca0d08361372655a58f23b9d081b548b3b057', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1860504cb96c85d5820aa664acb55cd725173b26', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a73938e4fdb36c6f23af65a073507ce2a0e599db', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd2c6113619b6370f50b60d6024133dc0a611d51', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f403893b98f008ef9ce564b8de6f7d44620a4263', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a74ea326f4e8bee410c19ed882e8daabba245581', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40d63f94bfd2d866e88a3e2ffeae4cc01e700189', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2d91e3a4b5fe05a5909c0f37ced75e7a129f926', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cf96f3249a95bc2adce8e99ff80e1a3fd166942', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '454415beb80c1c6b6493f9953018902b88cb11d7', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '097fd2bf81d3c2a4ef0b51cdf62a6e01ed1f6ae8', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0564d3166b675a576e3aa59904503f2078aa425e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22101e0c104c3ba9d0c4f4e0cc97c01ada069fe8', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63f112bc8c54d1d009947785710e142f2cd69c4a', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fd1e4fb77ffb70eda70cd124eb6071328a764a26', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f181ce9b97bd0aa6fec640b2b6c1e9532e49652b', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de97ef4dcd5d25888400c4a38efb9637c664d972', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70e93e3164f1da49ee49fffbe229f177ca9c2256', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77d0276b7fd92bc3aad0d042a201393260967ded', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0627a4ffc95a1d99552f3524f085fa901dea8dd', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9797bf7dcd14f7000fef80023a715ba1e351606', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '84eb07fa33abe36e228fda26d827f226c91eeac5', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ec13cca15f9fdc66d78e2b90975dff790c2e56d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6074ca6c436f49d85d1fe03c04db68ff66575e35', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eab07e38842bc7c6f6dd452c0dd204af93d18f3', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e43d230775c7f907be33d7c4e0dd45313e4a5a03', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20908c96922993d6df9f936f3b1b69a67378ff8d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4cc1ecc9589a4394e11fe6a26e27c4920944973', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a4cbd367821769c7551704ce71861b490a8fdb52', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a24ba0ef8cc7318f8c14ad1db8f7e9163453fa1e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33a610062776ce6cf6950432c779ec67eca429bb', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c2ebb6511b9ddf5f13bb632ef2951ba13478ace', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '614ca0492fee934e86e7f8b9d6f7b41d97001378', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '303b1c02b10760f949fbc964afc67522940f521d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f04b27b9ea656b9a616af70cbfac0ae039e79a25', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37e0a653d6e4d95c55acbd280fd4abf60908ad58', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c56d6d69deb3fe135a9f949821a4a4cf008355de', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81f8b091b8d319143ac32fd75dc869e6dcd265b7', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9abe3ec101f5da2f79e49a4204e2cc9a54d506c1', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bdffdc0604297d2d1a6c5a908c5354a1c3e258c2', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3110f9c15943e76766c529c57f84742bef990189', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42e233b0a150156ed5c10152058c26e189781945', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4529828fe8e18c732f209ce7208a135cd39d2c0e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '51f20bef99d0024c30d82d54d81108380d5299d0', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cb43b236f2a659b5e338ae065f456a88c51ea68', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7876ba8a4fca8ab887f0744f92b2a810b32d5200', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b672e92de1c141a30ce522987ca46e4bf8ab8588', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d8614859a775c763a8dec806c4e8477ad17d0f6', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1707ee1b49e764ffa05d5dffbf7d1ecb9b2f4179', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
691366906,Add sub functions,"`add`, `sub` and `iadd` specializations. Note that there is no dispatcher for `iadd`.

A few other things I also added:
- Added the structure for test_mathematics that will be also used for the rest of the specialisations (this means we need to merge this before any other PR that contains more specialisations).
- New class function to instantiate TfTensor faster.

Performance comparison with qutip.data.Dense and tensorflow:

![add_dense](https://user-images.githubusercontent.com/57414022/125206826-70745080-e289-11eb-8b06-238fff184e2f.png)

No significant difference is observer for large matrices. For small matrices there is some difference in performance that is due to the instantiation of TfTensor.",True,13,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/13,https://github.com/qutip/qutip-tensorflow/pull/13,closed,107,2,5,9,4,2,0,0,[],2021-07-16 10:19:54+00:00,2021-07-20 13:12:32+00:00,355958.0,"4 days, 2:52:38","[{'comment_id': 672374422, 'comment_body': 'It feels to me that ""shape checks"" should be handled by the dispatcher itself as it only involves the shape argument from a Data object and a basic knowledge of what the operation should do (which is known when instantiating the dispatcher). It could be some function that is passed when instantiating the Dispatcher and that is employed before calling to the specialization. This would make somewhat easier to write a specialisation and it will ensure that it always outputs the same error message regardless of who wrote the code.', 'comment_created': datetime.datetime(2021, 7, 19, 14, 55, 37, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 672500817, 'comment_body': ""So I considered this at the time, and the reason I didn't do it immediately is because the core data types would always have to repeat the test anyway; if you access the raw function (say by `qutip.core.data.add_csr`, or whatever), then you'd be able to segfault Python by passing it bad input.  I also had vague thoughts that some data-layer types might want to eschew shape checks (at the time, @Ericgig was thinking about an adaptive Hilbert space type which automatically expanded or something), or we might want symbolic backing types which could represent shapes without integers.  Obviously those don't jive entirely with the definition of `data.Data`, but that's the sort of thing I had in mind."", 'comment_created': datetime.datetime(2021, 7, 19, 17, 40, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}]","[{'commit_sha': '08297fe707d500f9444bb694a3da443de9bb9a85', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '611e3feb7efada63200cd4f883aa4c8d09eadd4b', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60f7e2a219ee7eb398d457404dd92a2e07dd0078', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c6e6dad810eafe06d86399b77e890b09ff710f9', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5afdc49b877f3da1293e01e0f3e663a2508ee9ce', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '643ae1745cec4f7e59ef54e4b59ae147739c532e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d259bf9714f20d64ee17edf3906cdfcf26e7ae0', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '663085aaade42587e5cc5eaff0a60c532d8bb389', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '857c20d6586b61684e751af6f14b9b6924a8bdd0', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
696536885,"Added kron, trace and inner.","Added kron, trace and inner.",True,17,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/17,https://github.com/qutip/qutip-tensorflow/pull/17,closed,157,2,5,5,1,2,0,0,[],2021-07-25 17:26:26+00:00,2021-07-29 08:12:11+00:00,312345.0,"3 days, 14:45:45","[{'comment_id': 676696745, 'comment_body': 'This condition will never be true since it use only `and` and `left.shape` is already known to contain a `1` and `right.shape[1] = 1`.\r\nWhat you want is `(right.shape[0] != left.shape[0] and right.shape[0] != left.shape[1])`.', 'comment_created': datetime.datetime(2021, 7, 26, 15, 10, 49, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 677299826, 'comment_body': 'You are right. Tests were working perfect though so I will take a look at the tests and see if there is anything missing there.', 'comment_created': datetime.datetime(2021, 7, 27, 9, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}]","[{'commit_sha': '899bde0e4d185bdd32491597ec87f6409543dcd0', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd33a58f5884ac1257031a4d9b336f45a8d06570b', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df234f3c5d0c8f4f7903ad3448dd0e68c7f8b190', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c977a97c931c744bdfe110414c4568769787efc', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e145ee5f6e877a5745da0a899f6f943936c582d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
706040964,"Added pow, expm and project specialisations.","This PR add pow, expm and project specialisations.

Note that for pow I used same code logic as in QuTiP.",True,20,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/20,https://github.com/qutip/qutip-tensorflow/pull/20,closed,135,7,5,2,1,0,0,0,[],2021-08-08 13:09:31+00:00,2021-08-09 13:04:07+00:00,86076.0,23:54:36,[],"[{'commit_sha': '4658e0dae82c4d35fd18c0750a840df920fcf996', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a34162d130f7b4bb786420b2b6b3771a9b2fa1b9', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
706433195,Added expect and expect super.,"Added expect and expect super. 

Note: Expect super does not have an efficient implementation but I would leave it like this for the shake of having it work before GSoC finishes.",True,21,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/21,https://github.com/qutip/qutip-tensorflow/pull/21,closed,92,7,3,7,1,12,0,0,[],2021-08-09 11:20:22+00:00,2021-08-18 11:18:17+00:00,777475.0,"8 days, 23:57:55","[{'comment_id': 685224744, 'comment_body': 'Reshaping the operator to 4D and using `tf.einsum(""iijk,jk->"", oper, state)` should be `O(N^3)`.', 'comment_created': datetime.datetime(2021, 8, 9, 14, 6, 48, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 688942963, 'comment_body': 'Indeed. Thanks for the help!! It is now pushed.', 'comment_created': datetime.datetime(2021, 8, 14, 15, 28, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689409488, 'comment_body': ""there's spaces missing in the concatenation of these two (top and bottom) strings.  Also, you don't need the `+` in the top one - string literals, including f-strings, get concatenated within the AST generation."", 'comment_created': datetime.datetime(2021, 8, 16, 10, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689409854, 'comment_body': 'Minor nit, but can you fix your text editor so it correctly puts a newline as the last character of a file?', 'comment_created': datetime.datetime(2021, 8, 16, 10, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689411334, 'comment_body': ""I'm surprised there's no built-in `tf.dot` or `tf.vdot`.  Do you know how many full passes through the tensors this does?  Or are we still just building up the operation graph at this point?"", 'comment_created': datetime.datetime(2021, 8, 16, 10, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689456658, 'comment_body': 'I am manually using black to format the code. I thought it followed PEP 8 conventions (except for the number of characters for each line being 88 instead of 79). Quite shocked it does not do that here?', 'comment_created': datetime.datetime(2021, 8, 16, 11, 32, 35, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689460316, 'comment_body': 'The code is executed eagerly  so it first performs the matmul operation, then the conj operation and then the elementwise_mul operations. Are you worried that the operation may create a lot of unnecessary tensors? If thats the case, so am I, but there does not seem to be native ""reduce"" operation that fits our needs here. The work around could be einsum but I am not 100% sure how this will work or if it will even provide any speed-up. Another option is to use a tf.function to explicitly build a graph for the operation. Lets discuss it on today\'s meeting.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689460549, 'comment_body': 'Black should always put newlines at the ends of files, so something else must be going wrong.  Is black definitely running on everything?  It could also be something strange with your `git` option `autocrlf`, perhaps.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689468241, 'comment_body': ""`einsum('ab,bc,cd->ad', state._tf.conjugate(), op._tf, state._tf)` should be the same thing, with only one temporary structure, but `tensorflow.function` is probably the correct way to go (subject to benchmarks)."", 'comment_created': datetime.datetime(2021, 8, 16, 11, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689475799, 'comment_body': 'I am running black locally for each file individually (i double checked that for the __init__ black removes the last new line). I will look closer to what the problem is. Since I will definitely have a merge conflict I will solve the last line issue there.', 'comment_created': datetime.datetime(2021, 8, 16, 12, 2, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 690252845, 'comment_body': ""So i did a few benchamarks and the results are quite disapointing.\r\nThe code\r\n```python\r\ndef expect(op, state):\r\n    return tf.reduce_sum(tf.math.conj(state) * (op @ state))\r\n\r\n# Random tf.Tensor\r\nherm = qutip.rand_herm(2000).to('tftensor')\r\nherm = herm.data._tf \r\nstate = qutip.rand_ket(2000).to('tftensor')\r\nstate = state.data._tf\r\n\r\n# Setting jit_compile to true is even slower \r\nexpect_jit = tf.function(expect, jit_compile=False)  \r\n# Compile the function once to avoid compilation time in bechmark\r\nexpect_jit(herm, state)\r\n\r\n%%timeit  # 0.9 ms\r\nexpect(herm, state).numpy()\r\n\r\n%%timeit  # 10 ms\r\nexpect_jit(herm, state).numpy()\r\n\r\n%%timeit  # 1.15 ms\r\ntf.einsum('ba,bc,ca', tf.math.conj(state), herm, state).numpy()\r\n``` \r\nThe code was run in colab with a GPU.\r\n\r\nI think it is best to just leave the function as it is for the moment. I may try in the future to squeeze some performance using `tf.function`. I do not know why but im never able to improve the performance of my code using jit. I also tried it with numba in the past and had the same luck as just now."", 'comment_created': datetime.datetime(2021, 8, 17, 10, 47, 28, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 691039544, 'comment_body': ""To get big improvements with Numba, you generally have to change coding style a little - if you're already writing well vectorised Numpy code , Numba won't give you so much. You get more improvements if there's big Python loops and conditionals, which isn't the natural way of writing Numpy code (because it's slow as anything without Numba).\r\n\r\nProbably here the function is sufficiently simple that the overhead of `tf.function` isn't enough to beat the allocation and copying cost. It may even be that the graphed operation doesn't even remove the copy in this case. Good job looking into it."", 'comment_created': datetime.datetime(2021, 8, 18, 8, 54, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}]","[{'commit_sha': '58b46e160f16322e48b02a6373f0619c024aec2b', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f88d28f63d89b4ad4ca30e6f5afe401d1d81a2da', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0052a24669244cc541a74d74fe1d8633ff0e0dcc', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '68893418254307cb5ba4a5f57608f697718b5bde', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1ea9aaf97f55a897066343e531efc55a1bc731b5', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab9dc20eac8ea35d1381af7186a2b9f233322668', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede5007f2727ed8d890b0dd5e1782b10947ce203', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
712813693,Added reshape specialisation.,Reshape specialisations. These have to be merged _after_ PR #1637 in QuTiP gets merged.,True,22,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/22,https://github.com/qutip/qutip-tensorflow/pull/22,closed,111,1,3,5,1,1,0,0,[],2021-08-14 17:23:05+00:00,2021-10-05 17:23:46+00:00,4492841.0,"52 days, 0:00:41",[],"[{'commit_sha': '64c88a61a7d542ac8ad58b0e8d1cdbc9ec602d26', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bc952be0e3027d0384b77bedeba2aca0f68210a', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfbbbb80fdbd9634309515b80ae6cdf7a9d4665b', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '19c8c230d52d2c7dab2d30a73da469c6c27c5785', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d1344c28f67cf1de0750eb61bdbc116b21f41a', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
712971670,Added norm specialisaitons.,This adds all the norm specialisations. It requires PR #1635 in QuTiP to be merged first.,True,24,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/24,https://github.com/qutip/qutip-tensorflow/pull/24,closed,111,4,3,2,1,5,0,0,[],2021-08-15 17:16:03+00:00,2021-10-04 09:38:55+00:00,4292572.0,"49 days, 16:22:52","[{'comment_id': 689430544, 'comment_body': ""A minor comment, but I feel like you may be able to handle this most neatly by having `qutip_tensorflow/__init__.py` do these 3 lines at the very top, and then every internal file just does `import tensorflow`.  Since `tensorflow` will already be imported, I _think_ that the deprecated code inside the module won't be executed, and having it at the top of the main `__init__.py` means it's guaranteed to execute that first."", 'comment_created': datetime.datetime(2021, 8, 16, 10, 48, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689431192, 'comment_body': ""Seems strange to use negative axes here, given that you presumably know there'll be only two anyway.  Is there a difference between doing `axis=[-2, -1]` and `axis=[0, 1]`?"", 'comment_created': datetime.datetime(2021, 8, 16, 10, 50, 1, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689464183, 'comment_body': 'Will try this although I thinks it is better if I do it in another PR together with the rest of files.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 44, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689468676, 'comment_body': 'absolutely, yeah.', 'comment_created': datetime.datetime(2021, 8, 16, 11, 51, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689473392, 'comment_body': ""I think there is not difference for matrices but there will be a difference for matrix batches. The negative axes are suggested in tensorflow's documentation and I thin this is so that the norm for batches of MxN matrices represented as tensors of shape [A1, A2,..., M,N] can be computed with the same code. I would prefer not changing it just so that it is easier in the future to support batched operations if we want to. That being said, supporting batched operations would still require some changes in the rest of the code."", 'comment_created': datetime.datetime(2021, 8, 16, 11, 59, 3, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}]","[{'commit_sha': '41cbd584a43f694f5e49489d5686347582ca76ab', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '30eeeb1f7984d062a7bb6d7f93e5e01598159cff', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
712997776,Example notebook for qutip tensorflow.,"Example notebook for qutip-tensorflow showcasing how to optimize a unitary gate. 

The notebook has been written to work with colab. A badge has been included but I have not been able to test it properly yet. I need to merge the notebook first for that. 

I am not sure how well git diff will work with notebooks. Nevertheless, you can take a look at the notebook in my fork at the branch `example_notebook`.",True,25,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/25,https://github.com/qutip/qutip-tensorflow/pull/25,closed,10902,0,1,5,4,0,0,0,[],2021-08-15 20:34:37+00:00,2021-10-05 17:24:07+00:00,4394970.0,"50 days, 20:49:30",[],"[{'commit_sha': 'e58482e939adf8c98a7bb9dba9e91f6556227f51', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59c48eb1137d3cec42a7602a2a5db3eeaa5c2989', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8a723e59ddad4c61755564405667561f6ee888c', 'committer_username': 'quantshah', 'committer_name': 'Shahnawaz Ahmed', 'committer_email': 'shahnawaz.ahmed95@gmail.com', 'commit_date': datetime.datetime(2014, 3, 16, 18, 53, 3, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28f70efd91ca0a63c16308418319e8d54ae0b529', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63147206209023ee7f1b72029d6322f955d7c166', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
668462392,Pytest benchmark,"# Benchamarks.

This PR contains the code that runs benchmarks on several functions. The functions that are benchmarked at this moment are:
- matmul (x20)
- add (x100)
- expm (x1)
- eigvals (x1)
The 'x20' means that the result represents 'n' operations.

The benchmarks compare the operations for different data types:
- `tensorflow` (GPU if installed, otherwise CPU)
- `numpy`
- `scipy` (some eigenvalues not implemented as was giving me some problems)
- `qt.data.Dense`
- `qt.data.CSR`

We also compare the results for when a dense or sparse input matrix is being used. Both the sparse and dense matrices are random Hermitian matrices. Sparse matrices are _tridiagonal_. The size of the employed matrix is NxN with N in {2,4,8,...,512,1024}.

# How to use it
Install the dependencies using  `pip install .[full]`
To run the benchmarks use `python benchmarks/benchmarks.py`. This will store the data and figures in the folder `.benchmarks/'.

When using `python benchmarks/benchmarks.py --help`:

usage: benchmarks.py [-h] [--save_csv SAVE_CSV] [--save_plots SAVE_PLOTS] [--plot_only]

Run and plot the benchmarks. The script also accepts the same arguments as pytest/pytest-benchmark.

optional arguments:
  -h, --help            show this help message and exit
  --save_csv SAVE_CSV   Path where the latest benchmark resulst will be stored as csv. If empty it will not store
                        results as csv. Default: .benchmarks/latest.csv
  --save_plots SAVE_PLOTS
                        Path where the plots will be saved. If empty, it will not save the plots. Default:
                        .benchmarks/figures
  --plot_only           If included, it will not run the benchmarks but just plot the latest results from .benchmaks/
                        folder.

# Examples (use `-k""expression""` to filter benchmarks"")
-`python benchmarks/benchmarks.py -k""matmul-""`: Runs only the benchmarks for `matmul`.
-`python benchmarks/benchmarks.py -k""eigvals- and -dense-""`: Runs only the benchmarks for `eigvals` with dense random matrix.
-`python benchmarks/benchmarks.py -k""[512- and expm-""`: Runs only the benchmarks for `expm` for a matrix of size 512x512. (The size can only be 2,4,8...,512,1024)
-`python benchmarks/benchmarks.py -k""[2- and (tensorflow or numpy or qt.data.Dense)""`: Runs the benchmarks for every operation with matrices of size 2x2 represented with either tensorflow, numpy or qt.data.Dense.

# Example output:
Hardware: 
- CPU: intel i7-6700
- GPU: gtx-970

![add_dense](https://user-images.githubusercontent.com/57414022/122950537-d18cc080-d37c-11eb-99ab-5a27765432cf.png)
![add_sparse](https://user-images.githubusercontent.com/57414022/122950574-d81b3800-d37c-11eb-8a1d-ddf1a5adb7aa.png)
![expm_dense](https://user-images.githubusercontent.com/57414022/122950591-dd788280-d37c-11eb-8d15-e792f3603536.png)
![matmul_dense](https://user-images.githubusercontent.com/57414022/122950613-e23d3680-d37c-11eb-91d4-77074ebcd505.png)
![matmul_sparse](https://user-images.githubusercontent.com/57414022/122950620-e36e6380-d37c-11eb-8580-11b4e8e9a7f8.png)

",True,4,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/4,https://github.com/qutip/qutip-tensorflow/pull/4,closed,361,1,7,44,6,16,0,0,[],2021-06-11 18:59:38+00:00,2021-07-06 10:03:57+00:00,2127859.0,"24 days, 15:04:19","[{'comment_id': 655345387, 'comment_body': '`dataframe`', 'comment_created': datetime.datetime(2021, 6, 21, 12, 47, 37, tzinfo=datetime.timezone.utc), 'commenter': 'quantshah', 'type': 'User'}, {'comment_id': 655419012, 'comment_body': 'Thank you for spotting that!', 'comment_created': datetime.datetime(2021, 6, 21, 14, 19, 19, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 660879628, 'comment_body': 'Where is the json file expected to be? Later I see it in `""./.benchmarks/""` but here it find the path relative to this file. Since `""./.benchmarks/""` is relative to the called location but __file__ is ""absolute"", the benchmark can only run from a specific location.\r\n\r\nQutip create a directory in the user home where it store run-time compiled code and user settings. You could put them there (~/.qutip/.benchmark). \r\n', 'comment_created': datetime.datetime(2021, 6, 29, 18, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 660880793, 'comment_body': '__matmul__', 'comment_created': datetime.datetime(2021, 6, 29, 18, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 660901821, 'comment_body': 'All input matrices are hermitian, so `eigvalsh` would be faster.', 'comment_created': datetime.datetime(2021, 6, 29, 19, 23, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 660910986, 'comment_body': 'It would be better not to force everything in only one benchmark function. You could split into unary and binary operations. Or have `expm` and `eigen` in their own functions and include the `get_operation` in them.\r\n', 'comment_created': datetime.datetime(2021, 6, 29, 19, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 660986101, 'comment_body': 'What generates the `.asv` files?', 'comment_created': datetime.datetime(2021, 6, 29, 21, 46, 6, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 660986190, 'comment_body': 'What generates the `tags*`?', 'comment_created': datetime.datetime(2021, 6, 29, 21, 46, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 660987406, 'comment_body': 'Could we perhaps add `description=""....""` description of what the command does so that `--help` prints a one sentence of the script\'s function in addition to the parameters?', 'comment_created': datetime.datetime(2021, 6, 29, 21, 48, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 660988895, 'comment_body': '```suggestion\r\n        # UNSERIALIZABLE[<function Qobj.__matmul__ at 0x...)\r\n```\r\nGreat typo! :D', 'comment_created': datetime.datetime(2021, 6, 29, 21, 51, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 661320093, 'comment_body': 'Indeed, I already added one but forgot to push it. Should be included now. Thank you for spotting this!', 'comment_created': datetime.datetime(2021, 6, 30, 10, 11, 16, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 661321298, 'comment_body': 'Should not be there as we are not using asv.', 'comment_created': datetime.datetime(2021, 6, 30, 10, 13, 4, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 661327276, 'comment_body': '`tags` is employed by [ctags](https://github.com/universal-ctags/ctags). I decided to include it here as `.vscode/` and  `/DS_Store` where also in this file although it is something probably employed only by me. Should I remove it?', 'comment_created': datetime.datetime(2021, 6, 30, 10, 22, 13, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 661329664, 'comment_body': ""If we're not using ctags along with our code anywhere, I would leave it out."", 'comment_created': datetime.datetime(2021, 6, 30, 10, 26, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 661332025, 'comment_body': ""`tags*` is a pattern which seems like it could easily have conflicts with stuff which could be useful.  For example, it would match `tags.py` too.  At the absolute _most_ it should be `tags`/`TAGS` for ctags, but a better solution would probably be to configure your `ctags` to use a better filename, or add the file to your personal ignore files.  You can configure your local git with the variable `core.excludesFile` and point it to somewhere that has you specific files in it, or you can do it on a repository-by-repository basis by adding lines to the file `.git/info/exclude`.\r\n\r\nGenerally, the only things which need to be in a repository's `.gitignore` are files to be ignored that are actually generated as part of the build process.  However, it can often be nice to add hidden files that are really common to many editors, and have sensible, nonconflicting names, because it just eases the burden for contributors and maintainers."", 'comment_created': datetime.datetime(2021, 6, 30, 10, 29, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 661367410, 'comment_body': ""It does not seem straightforward to change where the results are stored. `pytest-benchmark` accepts `--benchmark-store` but the input should be an `URI` and I do  not how to specify home directory from there. By default, it stores in `./benchmarks` from wherever it is called. Also, due to how pytest test discovery works, it seems you need to execute pytest from the root the repository anyway(I'm not completely sure about this one)? \r\n\r\nI think for the  moment is better to assume that the user uses the script from the root of its repository. I changed it so that it looks always by default for `./.benchmarks/` to be consistent with the behaviour of `pytest-benchmark`."", 'comment_created': datetime.datetime(2021, 6, 30, 11, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}]","[{'commit_sha': '1696d12cbcdd5bc90b9b687f49a83c924a816449', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '081bb11fed6f4d23d41acae66b985d5f18de152c', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ffebd8f8bb46a0d6f3a815f397d47e11f46b8fc1', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0368049c16e34322fb5a898b2dc29a1694587553', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05d4e025622c1975caabbb591b8ff35555cf830e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '591960324f222f0d7dd1c471203d2347b8f28b52', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f4f9622fe53023c4e6fb26cc64652638aa37cdf', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '97d480996fca3e2eda60b0fd960c1d4940edb41d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6c63e6c1b95a648627a1cc6382f27c3a0181c78', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15749b77a57d96e650b6f5b770625c1aea8f4759', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e06220e05589499813a2d775372d774f77d39f9a', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5aa91a3f31cb9cf32ddd40137f52cda93e4770aa', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c550e6430293101c8264c8be5a7695346effd666', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a9c7e4aecca3c5534bab0faa5bd79ccd2ae83c6', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '42682315678b052fd3229ae463718dd78de1ca52', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5df7f8da37a31dbbc7c80ccb2934e6049a0cc235', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a22bf974c015b3baacc4333311e9b284d7171e04', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '065dd6383af6faf311be45112c021bc0bc8aaabf', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4001fd0f12dd9823d5c50b80a0e58e0a92bdb929', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1c8356f19aacf0f3c7754cc2cf48fa823a78edb', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8dc2b3eaf5a5b9af0f05b82bafb996da3fe1e4a6', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd10e7e826632d862c604cd5f05b0d6e76a0d3331', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4505feb8881f04dc630761f72f2c32b3c5697dbb', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd75e612b2e478dd61b32a69bf59b0d1281acbbb', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de983bcb8cdd18a603da03b57f4a87a512a7bae8', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54540c9866d26889f8a52692ac39d40411e93cda', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85f15f894683ab9468433d5afa75fc69986550cf', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df9d1356bbbfbba072ac481ab85dc821fcee75f4', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34e9cd0717e4bf4cce9637f2009c194145dd2b9e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbe7e60b8a882428b9bb972c168fae6c756a103f', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eb438f01960ebb113904286123e294e2205cad13', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7aee94dafa9b22e0dccc4001e098ae18b5018550', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b0ce2e6f28e039bfe8ed2054e7074321a7ec756', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0567ca0c766c71d3bd708c38e8562ce1e7a35a7', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '993bb6969049f4eaec1d65811635182444de7d79', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57705e43acfa8480ce91b116890ab68376e1c4bc', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a3513c1b64e9acadaf7e080221f80370deca3476', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c85ea78bec3b534d4e2db5c66702f1bc57e4e780', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c545f2a69cbf99c0ec3da5e6826603fc49bef88b', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23dfb8acd357467b9bb906b57d9bc506f20b9882', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17231a3fe338a043f6b10c9cac16be5bc314b400', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd405e21eb54044d710f57e385ea32ddc394a5c3', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b734125b9a9077cb7e11dad549220ab48d31b4f', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08979424a7a70358983342104984fc8b92113f00', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
713332130,Updated README.md,"Readme of the project. It includes the installation procedure, a description of the project and instructions for the benchmarks.",True,26,https://api.github.com/repos/qutip/qutip-tensorflow/pulls/26,https://github.com/qutip/qutip-tensorflow/pull/26,closed,169,8,1,5,2,6,0,0,[],2021-08-16 11:01:54+00:00,2021-08-24 15:24:35+00:00,706961.0,"8 days, 4:22:41","[{'comment_id': 689440151, 'comment_body': '```suggestion\r\npurposes see the example notebook in `qutip_tensorflow/examples`, which can be\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 11, 4, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689440365, 'comment_body': '```suggestion\r\nWhen importing qutip-tensorflow, operations are done using the default detected\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 11, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689440666, 'comment_body': '```suggestion\r\nThe main class implemented in qutip-tensorflow is `TfTensor` that\r\n```', 'comment_created': datetime.datetime(2021, 8, 16, 11, 5, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689575310, 'comment_body': 'Add what is not supported yet.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 14, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689576755, 'comment_body': 'Add how to use the benchmarks.', 'comment_created': datetime.datetime(2021, 8, 16, 14, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 691185683, 'comment_body': '```suggestion\r\n-`python benchmarks/benchmarks.py -k""test_linear_algebra"" --collect-only`:\r\nShows all the available benchmarks. Useful to filter them with the `-k`\r\nargument. \r\n\r\n-`python benchmarks/benchmarks.py -k""matmul""`: Runs only the benchmarks for\r\n`matmul`.\r\n\r\n-`python benchmarks/benchmarks.py -k""add and -dense-""`: Runs only the\r\nbenchmarks for `add` (addition) with dense random matrices. \r\n\r\n-`python benchmarks/benchmarks.py -k""add and -dense- and qutip_dense""`: runs only the\r\nbenchmarks for `add` with dense random matrices and only for the `qutip_dense`\r\ndata type. \r\n\r\n-`python benchmarks/benchmarks.py -k""add and -dense- and qutip_""`: runs only the\r\nbenchmarks for `add` with dense random matrices for all the specialisations in\r\nQuTiP. \r\n\r\n-`python benchmarks/benchmarks.py -k""expm and -512-""`: Runs only the\r\nbenchmarks for `expm` for a matrix of size 512x512 (the size can only be\r\n2,4,8...,512,1024).\r\n\r\n-`python benchmarks/benchmarks.py -k""(tensorflow or numpy or qutip_dense) and\r\n-2-""`: Runs the benchmarks for every operation with hermitian\r\nmatrices of size 2x2 represented with either `tensorflow`, `numpy` or the\r\n`qutip_dense` data type.\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 12, 24, 47, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}]","[{'commit_sha': '7227960306c65fac839219852a177a10b4df2f63', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89a088e3af77c007668f9d618b35d20994260c3a', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '78aae2f464ea557661eaacf4ea4bfd204a7c3c2e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5014e3bbe578fb5ca1cdda7aa549a634b09ee6eb', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b588ddedfc309f1d26d30ade8c436cbcdd3ff035', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
711354058,Expect return real value only when possible.,"**Description**
Changes expect to cast to real only when attribute real exist. This was a problem for qutip-tensorflow as it returned a `tf.Tensor` that does not have the real attribute. 

I did not add any test yet. I thought of adding a test that creates a dummy_specialisation that always returns a dummy class. However, this is was quite involved test. I can include it although I wondered if it was the correct approach to test the code.

Also, note that I am not using an `isinstance(out, number.Number)` deliberately. There are examples of class that do implement the `real` and `imag` attribute, such us numpy arrays. Furthermore, I opened an [issue](https://github.com/tensorflow/tensorflow/issues/51463) in TensorFlow to see if they would like to support the `real` and `imag` attributes. 

**Changelog**
`expect` can now return arbitrary python objects.
",True,1636,https://api.github.com/repos/qutip/qutip/pulls/1636,https://github.com/qutip/qutip/pull/1636,closed,27,1,2,5,4,2,0,0,[],2021-08-12 18:04:59+00:00,2021-10-15 14:43:00+00:00,5517481.0,"63 days, 20:38:01","[{'comment_id': 694137460, 'comment_body': '```suggestion\r\n        return out.real if oper.isherm and (state.isket or state.isherm) and hasattr(out, ""real"") else out\r\n```\r\nI would not use a `try: ... except AttributeError:` around this expression because it accesses many attributes and already contains an `if ... else` that explicitly tests for whether `out.real` is the correct thing to return.', 'comment_created': datetime.datetime(2021, 8, 23, 16, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 726939628, 'comment_body': '```suggestion\r\n        return ""object without .real""\r\n\r\n    monkeypatch.setattr(_data, ""expect"", mocker_expect_return)\r\n\r\n    sz = qutip.sigmaz() # the choice of the matrix does not matter\r\n    assert ""object without .real"" == qutip.expect(sz, sz)\r\n```\r\nIt\'s customary to check for `None` with `x is None` rather than `==` (because `None` is a singleton, the `is` check is very fast and also stricter).\r\n\r\nSince we\'re tweaking this anyway, I also suggested returning something other than `None` since `None` is a very common object and could easily be returned by mistake whereas it\'s hard to imagine `Qobj.expect` returning some strange string accidentally.', 'comment_created': datetime.datetime(2021, 10, 12, 9, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}]","[{'commit_sha': 'bd5a8083e9d2948556781c6b36301db15e3bab9d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6b34502ad1a666dcee9088cf78eca31f2526d978', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c3fe68e8d278965a1f9c56abb99be855213a28e6', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0fb75c01411c21a61df23971602e04e2c1d8478e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e8d9a69d3f107f174be4d2074b7ef8b80eab715', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
695146710,Changed __mul__ behviour to be more flexible and consistent.,"**Description**
I changed __mul__ behaviour following the discussion of issue #1607. However, the implementation details differ slightly from what was discussed there. The current behaviout of `__mul__(self, other)` is:
- If other is a `Qobj`: dispatch to `__matmul__`
- If not try dipatching to mul and return `NotImplemented` if `TypeError` is returned.
- The dispatcher now gets `other` instead of `complex(other)`. This is more flexible and allows specialisations to handle arbitrary scalar like objects (something extremely useful for qutip-tensorflow).
- Infer hermiticity and unitarity when possible trying complex(other)

`__rmul__` now directly dispatches to `__mul__`. Any necessary check (casting to complex included) is done in `__mul__`.

_No_ changes were required to `mul_dense` and `mul_csr` as `add_dense(data, value=np.array(1))` works. It internally tries `complex(np.array(1))` which is guaranteed to work. This is something I was very happy to find as I do not think that specialisations should return `NotImplemented` (although they still can if required).


**Related issues or PRs**
Fixes issue #1611 

**Changelog**

- Qobj `__mul__` now handles consistently right and left multiplications of an arbitrary python object.
-  `__mul__` is now more flexible passing `other` to the dispatcher instead of `complex(other)`.
- `qobj*np.array([1,2])` and `qobj*np.array([1,2])` (or any other numpy array that does not represent an scalar) now raise TypeError. This change is not backwards compatible (!!).

_Edit:  changed changelog and description_",True,1620,https://api.github.com/repos/qutip/qutip/pulls/1620,https://github.com/qutip/qutip/pull/1620,closed,83,9,2,8,15,10,0,0,[],2021-07-22 12:57:06+00:00,2021-08-05 12:48:06+00:00,1209060.0,"13 days, 23:51:00","[{'comment_id': 681845900, 'comment_body': 'You should not have 2 empty lines inside a function.', 'comment_created': datetime.datetime(2021, 8, 3, 15, 1, 41, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 681850070, 'comment_body': 'The not having `__complex__` is not the  cause of the error.', 'comment_created': datetime.datetime(2021, 8, 3, 15, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 681876885, 'comment_body': 'Actually, in this case it is the cause of the Error as mul with dense and csr tries complex(other). However, I agree that this test is misleading as it suggest we do not support classes without complex when we actually do if the dispatcher does. I will remove it. I will keep the one with the array as failing the test is intended behaviour at this moment.', 'comment_created': datetime.datetime(2021, 8, 3, 15, 36, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 681888015, 'comment_body': '@Ericgig, do you agree on keeping ""not_scalar_like_array""? I will wait for your answer to keep the commit history somewhat cleaner.', 'comment_created': datetime.datetime(2021, 8, 3, 15, 49, 25, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 681905298, 'comment_body': ""Yes, keep test for errors, it's just that you cannot test for not setting the properties as the `NoComplexClass` seems to imply."", 'comment_created': datetime.datetime(2021, 8, 3, 16, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 682501291, 'comment_body': '```suggestion\r\n        """"""\r\n        If other is a Qobj, we dispatch to __matmul__. If not, we\r\n        check that other is a valid complex scalar, i.e., we can do\r\n        complex(other). Otherwise, we return NotImplemented.\r\n        """"""\r\n```\r\nJust formatting this to match the numpy multiline docstring format.', 'comment_created': datetime.datetime(2021, 8, 4, 10, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 682515802, 'comment_body': ""```suggestion\r\n            isunitary = (abs(multiplier) == 1) if self._isunitary or None\r\n```\r\nIf `self` is unitary, then `multiplier * self` is unitary iff `abs(multiplier) == 1`.\r\n\r\nUnfortunately we can't do something equally nice for isherm because if `self` is the zero matrix, then `self * anything` remains hermitian.\r\n\r\nThis suggestion is a bit unrelated to this PR though, but maybe it is nice to include it here anyway."", 'comment_created': datetime.datetime(2021, 8, 4, 11, 7, 20, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 682660690, 'comment_body': 'I think the syntax of this statement is wrong. Did you mean ` isunitary = (abs(multiplier) == 1) if self._isunitary else None`?', 'comment_created': datetime.datetime(2021, 8, 4, 14, 17, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 682714225, 'comment_body': 'I did! Apologies -- I rewrote the suggestion a few times while thinking about things.', 'comment_created': datetime.datetime(2021, 8, 4, 15, 15, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 682841327, 'comment_body': 'I included the suggested change.', 'comment_created': datetime.datetime(2021, 8, 4, 18, 0, 22, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}]","[{'commit_sha': 'b11dd1e96e33acb2625dff5b14053e6c974955d2', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd931bbd0e63aa0c4e810b62da6e3ce351220834b', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2ea9e7211545780cb0bf4b2ad6eb80a04d4a2e7', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22cc0f326232f9ff5686823f970ba82b537ca931', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18786d181350971c34ec8515c724f6009644fdd1', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e905d86bf991dd04a23c5897882d0e75cfc12a5', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67410557b2545afa2465693c103fe5fe54b68a86', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eccae25bc8f079be9b91f005ebfc6b83b55a2f09', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
695943153,Pow tests for data layer.,"**Description**
Added tests for pow specialisation. I also changed the raised error to `ValueError` to be consistent with the rest of the specialisations (and in particular with trace that also raises `ValueError` if input matrix is not square). 

The tests do not contemplate the cases where:
- n is not an integer (float): Float is cast to integer so: `pow_csr(matrix, 0.1) == pow_csr(matrix, 0)`. We may want to raise `TypeError` instead.
- n is not positive: `OverflowError` is raised instead of `TypeError`. This is due to how Cython works but we may want to raise TypeError for consistency with the rest of the code.

For instance, raising `TypeError` in these cases is what NumPy does. What should we do?

**Related issues or PRs**
None

**Changelog**
Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.
For example: 
Tests for pow specisalisation.
Pow now raises ValueError instead of TypeError if matrix is not square.
",True,1622,https://api.github.com/repos/qutip/qutip/pulls/1622,https://github.com/qutip/qutip/pull/1622,closed,49,8,2,5,2,5,0,0,[],2021-07-23 13:28:16+00:00,2021-08-03 22:06:48+00:00,981512.0,"11 days, 8:38:32","[{'comment_id': 675634181, 'comment_body': 'Why the `dim` input? In `shapes_square`, if it is use, the `id` will not reflect it. In `shapes_bad_square`, it is not used.', 'comment_created': datetime.datetime(2021, 7, 23, 15, 3, 21, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 680955600, 'comment_body': 'Could we add a docstring for `shapes_square`?', 'comment_created': datetime.datetime(2021, 8, 2, 13, 8, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 680955795, 'comment_body': 'Could we add a docstring for `shapes_bad_square`?', 'comment_created': datetime.datetime(2021, 8, 2, 13, 8, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 680956425, 'comment_body': '- add small docstring square.\r\n- change bad -> not\r\n', 'comment_created': datetime.datetime(2021, 8, 2, 13, 9, 34, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 681873391, 'comment_body': 'We know that the output is a `Data` object. \r\n```suggestion\r\n        assert test.shape == expected.shape\r\n        np.testing.assert_allclose(test.to_array(), expected,\r\n                                   atol=self.tol)\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2021, 8, 3, 15, 32, 39, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}]","[{'commit_sha': 'ca66d101cc7909d41eb07095be10a7a9a2941c03', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2b875b1d79a94eee0a297092afa45dcc1c011f6', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4bf190710bf7092b3e727f0ddbdde64c2411b9e3', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '879a80cc36238bbab800275c6b99c0cdc33e233c', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dba18d695420b4a4602b8970522793f28d23be3d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
700129369,Added expect tests for data layer.,"**Description**
Added tests for expect specialisations. The tests follow the structure in `test_mathematics` which helps developing new data 

**Notes**
I changed the logic in `expect.pyx` to also raise `ValuError` when op is not a square matrix. `expect_csr` was crashing with a segment fault when passing a nonsquare matrix as `op`.  I am not sure why this error was not being caught by the tests for `qutip.expect`. I guess this function does some check to the Qobj given as argument.",True,1626,https://api.github.com/repos/qutip/qutip/pulls/1626,https://github.com/qutip/qutip/pull/1626,closed,81,3,2,4,4,5,0,0,[],2021-07-30 09:02:43+00:00,2021-08-03 22:04:38+00:00,392515.0,"4 days, 13:01:55","[{'comment_id': 680963704, 'comment_body': 'check indentation level', 'comment_created': datetime.datetime(2021, 8, 2, 13, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 680964122, 'comment_body': '- check indentation level\r\n- comment is wrong', 'comment_created': datetime.datetime(2021, 8, 2, 13, 19, 53, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 680964304, 'comment_body': 'Indentation is wrong.', 'comment_created': datetime.datetime(2021, 8, 2, 13, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 680973736, 'comment_body': '```suggestion\r\n    if (op.shape[1] != state.shape[0]  # Matrix multiplication\r\n        or state.shape[0] != state.shape[1]  # State is square \r\n        or op.shape[0] != op.shape[1]  # Op is square\r\n```\r\nFix ordering of checks to match comments and to be consistent with the comments and with the ordering of the ket checks above.', 'comment_created': datetime.datetime(2021, 8, 2, 13, 31, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 680974042, 'comment_body': '```suggestion\r\n    if (op.shape[1] != state.shape[0]  # Matrix multiplication\r\n        or op.shape[0] != op.shape[1]  # Square matrix\r\n       ):\r\n```\r\nFix indenting.', 'comment_created': datetime.datetime(2021, 8, 2, 13, 32, 14, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}]","[{'commit_sha': 'bc7b0058bc2ef67a65a96d5e3533c515cde50934', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e79f94798f212f4b3c4a9265f3fee1079e5dfc77', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '796453bdb9aa00e7f0bd9f3614492b82aad1860d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c94013bab87b099befe19d182fea0b72552b9583', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
703640998,Expm and  project tests.,"**Description**
This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`.

- Expm: 
  - Added tests for its specialisations.
  - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).
  - Incorrect shape now raises ValueError.
 
- UnaryOpMixin: 
  - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). 
  - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does.

- Project:
  -  Changed `TypeError` to `ValueError`.
  - Removed redundant `TestProject`

- Pow:
  - Added the case where `n=0` as it is a special case.


**Changelog**
`project` specialisations now return `ValueError` when matrix has not valid shapes.
Removed redundant `TestProject`.
Added special test case for Pow (n=0).
`UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes)
Added tests for `expm` specialisations.
Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.
`expm` specialisations now raises `ValueError` when matrix is not square.


_Edit: Added ""Removed redundant `TestProject`""_
_Edit2: Added changelog_",True,1630,https://api.github.com/repos/qutip/qutip/pulls/1630,https://github.com/qutip/qutip/pull/1630,closed,43,36,3,6,3,5,0,0,[],2021-08-04 15:33:33+00:00,2021-08-05 13:48:39+00:00,80106.0,22:15:06,"[{'comment_id': 682829602, 'comment_body': ""This is a good catch, thanks.  We could consider optimising this algorithm a little - it involves several allocations, three instantiations of the slow `scipy.sparse.csr_matrix`, and one CSR addition, which aren't super ideal.  I would imagine something like:\r\n```python\r\n        matrix_sci = matrix.as_scipy()\r\n        data = np.ones(matrix.shape[0], dtype=np.complex128)\r\n        data[matrix_sci.indices] += np.expm1(matrix_sci.data)\r\n        return _data.CSR(\r\n            (\r\n                data,\r\n                np.arange(matrix.shape[0], dtype=_data.base.idxint_dtype),\r\n                np.arange(matrix.shape[0] + 1, dtype=_data.base.idxint_dtype),\r\n            ),\r\n            shape=matrix.shape,\r\n            copy=False,\r\n        )\r\n```\r\nwould be more efficient.  We could avoid a couple more allocations if we rewrote this in Cython as well (we wouldn't need to allocate in the `np.expm1` call and we could avoid a couple of internal `CSR.__init__` checks), but that's probably not really necessary.  I would expect the overhead of this method to be reasonably low anyway."", 'comment_created': datetime.datetime(2021, 8, 4, 17, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 683313995, 'comment_body': 'I can go  with this implementation. Thanks for the input!', 'comment_created': datetime.datetime(2021, 8, 5, 10, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 683315234, 'comment_body': ""Please do make sure it's right, and it's probably worth doing a proper benchmark! The one I wrote _looks_ right to me  and it makes rather fewer allocations (plus numpy instantiations are cheaper), so I expect it it's noticeably faster, but I'm not certain."", 'comment_created': datetime.datetime(2021, 8, 5, 10, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 683412564, 'comment_body': '```suggestion\r\n        Test that the operation produces a suitable error if the shape of the\r\n```', 'comment_created': datetime.datetime(2021, 8, 5, 12, 38, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 683506501, 'comment_body': ""I didn't catch this in time, but there's no need to use `scipy.sparse.linalg` here; the matrix is guaranteed to be a Numpy array by the test sutie."", 'comment_created': datetime.datetime(2021, 8, 5, 14, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}]","[{'commit_sha': '3d86ec2bf2c2b7aaf383514f8d5fc57251885f1b', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6e4aff6e12b354301f351ce72bba7deb7a296cb', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bf5537ad85122776042912b5ee51450cd7256cf', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79740708d70ce07a53fdb250c880b5603b0f4d72', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c35557de3b96ace04f7e22f2a6610cd0fc41a633', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3ca08be6091bfadcac09f013fa42318ed39f52cd', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
711083264,Norm tests for specialisations.,"**Changelog**
Added specialisations for norm.
`TraceNorm` now uses `scipy.linalg.norm` with `ord='nuc` by default (sparse=False).
Fixed bug for `eigs_sparse` where if the shape was less than 4 it called with wrong arguments to `eigs_dense`.",True,1635,https://api.github.com/repos/qutip/qutip/pulls/1635,https://github.com/qutip/qutip/pull/1635,closed,95,18,3,18,10,30,0,0,[],2021-08-12 15:03:42+00:00,2021-10-03 21:19:36+00:00,4515354.0,"52 days, 6:15:54","[{'comment_id': 688469779, 'comment_body': ""Can we avoid shortening `scipy`?  I don't really see any benefit to it, and it just makes things harder to read.  Shortening is ok for `numpy` because _everyone_ does that, but imo pretty much anything else should be spelled out in full in library code for readability."", 'comment_created': datetime.datetime(2021, 8, 13, 12, 19, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 688471012, 'comment_body': ""I think this is just `scipy.linalg.norm(matrix, 'nuc')`, but not 100% certain."", 'comment_created': datetime.datetime(2021, 8, 13, 12, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 688471691, 'comment_body': 'Hmmm, not keen on this.  1e-5 is really _not_ a good tolerance - we should really be passing tests better than this, I think.', 'comment_created': datetime.datetime(2021, 8, 13, 12, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 688483435, 'comment_body': 'Neither do I to be honest. It seems to be pointing that something is not good enough? The change in tol is only necessary for a 2 of the tests. These are:\r\n```\r\nFAILED qutip/tests/core/data/test_norm.py::TestTraceNorm::test_mathematically_correct[CSR[ket,filled,sorted]->Number]\r\nFAILED qutip/tests/core/data/test_norm.py::TestTraceNorm::test_mathematically_correct[CSR[ket,filled,unsorted]->Number]\r\n```\r\n\r\nAny idea what could be wrong?', 'comment_created': datetime.datetime(2021, 8, 13, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 688483656, 'comment_body': 'It is. thanks for the tip!', 'comment_created': datetime.datetime(2021, 8, 13, 12, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 688487065, 'comment_body': ""I'm not sure that this should even be defined for ket?  Technically the matrix norm is defined, but it doesn't make sense for a quantum object.  It's like how `l2` and `fro` are actually the same norm, but one's defined only for kets and the other's only for operators."", 'comment_created': datetime.datetime(2021, 8, 13, 12, 48, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 688489719, 'comment_body': ""At any rate, there's almost certainly a shortcut if we desperately wanted to handle it - `vector @ vector.conj().T` is a projector, whose singular values will all be calculable from the L2 norm of `vector` (probably the square of the l2 norm?), so we should be able to shortcut this calculation if we did want to handle it, and that would be way more accurate as well."", 'comment_created': datetime.datetime(2021, 8, 13, 12, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 688490402, 'comment_body': 'I think the norm for kets can be computed faster by just computing the l2 norm of the ket? I will try to implement this.', 'comment_created': datetime.datetime(2021, 8, 13, 12, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 688495294, 'comment_body': 'I just read the comments and I see we agree in that there is a faster shortcut. I actually think that in these two cases (fro and trace) it would be better for the data layer to handle any mathematically correct case and let qobj decide whether it makes sense to compute the norm or not. That being said, maybe we want for the moment raise ValueError for the ket and bra cases with `TraceNorm` just for consistency with how `fro` handles things? We could also change `fro` to handle kets though.', 'comment_created': datetime.datetime(2021, 8, 13, 13, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 688498117, 'comment_body': 'Also, \r\n```\r\nFAILED qutip/tests/core/data/test_norm.py::TestTraceNorm::test_mathematically_correct[CSR[square,sparse]->Number]\r\n```\r\nalso fails every now and then. Not sure what to do with this one apart from changing tol or repeating the test multiple times. ', 'comment_created': datetime.datetime(2021, 8, 13, 13, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 688531234, 'comment_body': ""The Frobenius norm already allows any shape, it's the L2 norm that rejects anything that isn't a vector.  Mathematically, the L2 norm _is_ only defined for vectors, so we should keep it like that.\r\n\r\nFor the trace norm, we need to keep the `trace_csr` function so that there's an option to pass `sparse=True` for huge systems, but for cases where `sparse=False` (the majority of cases), we can probably just change the algorithm to resolve to `scipy.linalg.norm(x, 'nuc')` - it'll be faster and more accurate."", 'comment_created': datetime.datetime(2021, 8, 13, 13, 52, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 688536935, 'comment_body': ""A 20% failure rate is too high.  A 0.2% failure rate would still be too high - we really need to sort the function out so it'll never fail at a tolerance of ~1e-10 when it's allowed to use dense arithmetic."", 'comment_created': datetime.datetime(2021, 8, 13, 13, 59, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 688537022, 'comment_body': ""```suggestion\r\n    if matrix.shape[0] == 1 or matrix.shape[1] == 1:\r\n```\r\nminor nit, but since code formatters don't typically work on cython files, we should make more of an effort to try and keep them easy to read.  Cython's also easier to write less legible code in as well."", 'comment_created': datetime.datetime(2021, 8, 13, 13, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689531414, 'comment_body': 'change this\r\n', 'comment_created': datetime.datetime(2021, 8, 16, 13, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689532053, 'comment_body': 'make this as specialisation\r\n', 'comment_created': datetime.datetime(2021, 8, 16, 13, 21, 21, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 690406581, 'comment_body': ""`trace_dense` signature does not have the `sparse, tol, maxiter` parameters of the trace dispatcher so:\r\n`qt.data.norm.trace(qt.qeye(5).to('dense').data)` fails: \r\n```TypeError: qutip.core.data.norm.trace_dense() takes exactly one argument (4 given)```\r\n\r\nThe dispatcher signature must only contain parameters that all specializations accept.\r\n\r\n "", 'comment_created': datetime.datetime(2021, 8, 17, 14, 6, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 691161721, 'comment_body': 'I did not know that `trace_norm` had to take those arguments necessarily. Sorry for that. What do you thing about adding a check in the `add_specialisaiton` method to check whether the added specialisations accept the expected arguments (?). \r\n\r\nI any case, these arguments dont seem to make sense for dense_norm. \r\nI am not sure what to do here. I can revert the changes and not include the `trace_dense` in this PR. However, it does seem that a trace_dense is useful as you would like to avoid the conversion to CSR when doing the `norm.trace`. Mainly because, by default, you convert back to dense... ', 'comment_created': datetime.datetime(2021, 8, 18, 11, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 691278552, 'comment_body': 'I suggest we remove the `sparse` parameter and `tol` and `maxiter` from the dispatcher.\r\n`_trace_csr` would become the specialization for sparse. For a user to change the `tol`, he would need to call the specialization directly, but since it does not make sense for other data type, it should be fine.', 'comment_created': datetime.datetime(2021, 8, 18, 14, 12, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 691288986, 'comment_body': 'I was worried that this would break backwards compatibility but I also agree that removing those parameters is probably necessary. Should I proceed then?', 'comment_created': datetime.datetime(2021, 8, 18, 14, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 691326164, 'comment_body': ""Backwards compatibility could be fixed in `Qobj.norm`. But I don't believe that these options are that commonly used."", 'comment_created': datetime.datetime(2021, 8, 18, 15, 2, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Ericgig', 'type': 'User'}, {'comment_id': 694891128, 'comment_body': '```suggestion\r\n    """"""Compute the trace norm using only sparse operations. These consist\r\n    of determining the eigenvalues of `matrix @ matrix.adjoint()` and summing their square roots.""""""\r\n```', 'comment_created': datetime.datetime(2021, 8, 24, 14, 12, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 694901696, 'comment_body': 'There is no way to specify `sparse=True` via the data layer, so I propose we just remove it entirely and combine `_trace_csr` with this method.', 'comment_created': datetime.datetime(2021, 8, 24, 14, 23, 30, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 694919420, 'comment_body': ""```suggestion\r\nimport scipy.linalg\r\n```\r\nSuggesting making this change now so we don't have to tidy it up later.\r\n\r\n(Suggestion updated after Jake's comment to make it easier to apply)."", 'comment_created': datetime.datetime(2021, 8, 24, 14, 41, 43, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 694919745, 'comment_body': '```suggestion\r\n        return scipy.linalg.norm(matrix, 1)\r\n```', 'comment_created': datetime.datetime(2021, 8, 24, 14, 42, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 694920062, 'comment_body': ""```suggestion\r\n        return scipy.linalg.norm(matrix, 'fro')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 24, 14, 42, 21, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 694920508, 'comment_body': ""```suggestion\r\n        return scipy.linalg.norm(matrix, 'fro')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 24, 14, 42, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 694921109, 'comment_body': ""```suggestion\r\n        return scipy.linalg.norm(matrix, 'nuc')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 24, 14, 43, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 694921614, 'comment_body': ""```suggestion\r\n        return scipy.linalg.norm(matrix, 'nuc')\r\n```"", 'comment_created': datetime.datetime(2021, 8, 24, 14, 44, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}, {'comment_id': 694947562, 'comment_body': ""scipy's components are separate packages which aren't auto-imported, so it needs to be `import scipy.linalg`"", 'comment_created': datetime.datetime(2021, 8, 24, 15, 11, 23, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 694951425, 'comment_body': 'This works accidentally because `import qutip` does `import scipy.linalg` somewhere.', 'comment_created': datetime.datetime(2021, 8, 24, 15, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hodgestar', 'type': 'User'}]","[{'commit_sha': 'e182d0ad4aa7e53881acc487d05ee03ac9d17c80', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0771df765b9bdc7b67c2c6f6ba366c855242a27a', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4b218cbce55e51b0565080bf21013bf406027062', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ccf2aa285bc84d1948903d49ea1b57424b872a35', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aaa50a8fca29ecae3b56e678fb2b72cfe611506a', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '03a5f89c3c8e6251edd549380c4359c3f9ec3218', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd84478c2ff48f1e1b41fd0b6964a5c58421f9e1', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0097e0c2684faee545116fb760ae5579ef6dc53d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '632648f8cfefd97ca371e6b6bc4dc2695754944e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8bad319a79a2d4109100a329f9051ad14bd10a7', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9dceb883c7761d3a74001b2d8b0b09c8eb91974e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6a88d179e18bb411b5d8a3ba9298dc96b62607c0', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6d68c04a02c4fbeed14e0e07d44ab6021d53c8d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e527d25d749a83c988e7a366135b4313d74c2ffe', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd4adc8b04e9ca6d22371d9348b47d8738f18205', 'committer_username': 'hodgestar', 'committer_name': 'Simon Cross', 'committer_email': None, 'commit_date': datetime.datetime(2009, 12, 10, 12, 58, 25, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7b8539db003106282861617733ad49296a68392', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a90dbd7a53390be38f0ab852ee4dcea168d0c8d', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1aee4b249565763c16e3e5dc566e5b5f68b2d5c8', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9
712605040,Test reshape specialisations.,"**Changelog**
Added tests for reshape specialisations.
Added tests for columns_stack specialisations.
Added tests for columns_unstack specialisations.
Moved tests for split_columns from test_mathematics to test_reshape.
PEP 8 clean test_mathematics.",True,1637,https://api.github.com/repos/qutip/qutip/pulls/1637,https://github.com/qutip/qutip/pull/1637,closed,123,21,2,7,5,17,0,0,[],2021-08-13 20:18:21+00:00,2021-08-23 16:38:46+00:00,850825.0,"9 days, 20:20:25","[{'comment_id': 689419582, 'comment_body': 'Can also just be `return list(matrix.T)`.', 'comment_created': datetime.datetime(2021, 8, 16, 10, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689421280, 'comment_body': ""This comment made sense when it was just one comment on one test (`add`, maybe?) in the original file.  Now that it's pretty common, this is just noise and should be removed."", 'comment_created': datetime.datetime(2021, 8, 16, 10, 34, 5, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689422205, 'comment_body': 'Unnecessary comment - both the code and its intent are very clear already, so this just adds noise.', 'comment_created': datetime.datetime(2021, 8, 16, 10, 35, 38, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689422471, 'comment_body': ""Don't explain what the code does if it's obvious."", 'comment_created': datetime.datetime(2021, 8, 16, 10, 36, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689423958, 'comment_body': ""Most of this is unnecessary noise - the test name describes most of this, and the only necessary bit is just a comment saying\r\n\r\n> `out_type` is included but not used so that `generate_mathematically_correct` can be re-used.\r\n\r\nComments are much more useful if they're short and say only the minimum that's not already clear from the code."", 'comment_created': datetime.datetime(2021, 8, 16, 10, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689426452, 'comment_body': ""Comments like this don't explain anything, so shouldn't be here.  In these cases, if you're unsure, it would really be better to check - as it stands, `to_array` is _not_ guaranteed to return an F-ordered array in general, so this comment is wrong.\r\n\r\nhttps://github.com/qutip/qutip/blob/cefacfc90a41c8627f1c7d4ae9fe1aad73a7f306/qutip/core/data/dense.pyx#L159-L173"", 'comment_created': datetime.datetime(2021, 8, 16, 10, 42, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689427577, 'comment_body': ""Explain _why_ not _what_ in comments.  In this case, presumably (?), it's\r\n\r\n> All matrices should have the same number of elements in total, so we can use the same `(rows, columns)` parametrisation for each input."", 'comment_created': datetime.datetime(2021, 8, 16, 10, 44, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689427634, 'comment_body': 'delete', 'comment_created': datetime.datetime(2021, 8, 16, 10, 44, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689428074, 'comment_body': 'same comment as before', 'comment_created': datetime.datetime(2021, 8, 16, 10, 44, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689428138, 'comment_body': 'delete', 'comment_created': datetime.datetime(2021, 8, 16, 10, 45, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689428451, 'comment_body': 'Why parametrise over two parameters when you could just parametrise over `new_shape`?', 'comment_created': datetime.datetime(2021, 8, 16, 10, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689480795, 'comment_body': 'This seems to change the shape of each individual element in the list to be (2,) instead of (2,1). ', 'comment_created': datetime.datetime(2021, 8, 16, 12, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689482646, 'comment_body': ""oh yeah, of course.  I guess it would have to be `[column[:, np.newaxis] for column in matrix.T]`, but then I'm not sure it's much better than what you've got already."", 'comment_created': datetime.datetime(2021, 8, 16, 12, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689485488, 'comment_body': 'So that the parameters match the required parameters for the reshape specialisation.', 'comment_created': datetime.datetime(2021, 8, 16, 12, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689489193, 'comment_body': 'I actually think your suggestion is easier to read.', 'comment_created': datetime.datetime(2021, 8, 16, 12, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'AGaliciaMartinez', 'type': 'User'}, {'comment_id': 689490080, 'comment_body': 'Yeah, fair enough. It looks a little odd to me to parametrise over them rather than a single linked variable ""shape"", but that\'s ok.', 'comment_created': datetime.datetime(2021, 8, 16, 12, 25, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}, {'comment_id': 689490698, 'comment_body': 'Up to you.  Yours is certainly fine to read as well - my original suggestion was only because I thought it was basically a trivial iterator, forgetting the extra shape dimension.', 'comment_created': datetime.datetime(2021, 8, 16, 12, 26, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jakelishman', 'type': 'User'}]","[{'commit_sha': '09aeff3212097bbfc113230781971175615c210f', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b561d5e101f94facdb5b66f9f247d6b17c9224e', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e722176505be232f1b29338ba2060baab2adeb16', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f29eb1955aea0de542742a131af0816b7512a827', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f032c5d134ca9465549a451ddbd0d175920682a8', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f2353fe8623e95fc857e94394a008d23afd4821', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'caad200e58762d2d01d7de734fb58a04311f2048', 'committer_username': 'AGaliciaMartinez', 'committer_name': 'Asier Galicia', 'committer_email': None, 'commit_date': datetime.datetime(2019, 11, 5, 18, 54, 56, tzinfo=datetime.timezone.utc)}]",Asier Galicia,57414022,,User,,14,,13,9

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
371159031,qutip-tensorflow,qutip/qutip-tensorflow,Python,9,15,10,3,235,9,1,1,"[{'id': 1806246794, 'number': 41, 'closed': None, 'created': datetime.datetime(2024, 4, 4, 6, 52, 2, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 5, 'deletions': 0, 'state': 'open'}, {'id': 1805935975, 'number': 40, 'closed': datetime.datetime(2024, 4, 4, 6, 55, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 4, 2, 13, 41, tzinfo=datetime.timezone.utc), 'time_taken': 16913.0, 'time_delta': '4:41:53', 'additions': 14796, 'deletions': 10323, 'state': 'closed'}, {'id': 1285480924, 'number': 39, 'closed': datetime.datetime(2023, 3, 22, 22, 46, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 22, 9, 4, 35, tzinfo=datetime.timezone.utc), 'time_taken': 49303.0, 'time_delta': '13:41:43', 'additions': 2, 'deletions': 3, 'state': 'closed'}, {'id': 861379664, 'number': 36, 'closed': datetime.datetime(2022, 2, 24, 10, 43, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 23, 12, 54, 30, tzinfo=datetime.timezone.utc), 'time_taken': 78539.0, 'time_delta': '21:48:59', 'additions': 28, 'deletions': 4, 'state': 'closed'}, {'id': 776643907, 'number': 34, 'closed': datetime.datetime(2021, 12, 7, 15, 34, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 9, 15, 13, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2420464.0, 'time_delta': '28 days, 0:21:04', 'additions': 520, 'deletions': 217, 'state': 'closed'}, {'id': 766369529, 'number': 33, 'closed': datetime.datetime(2021, 10, 28, 9, 52, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 26, 11, 38, 42, tzinfo=datetime.timezone.utc), 'time_taken': 166419.0, 'time_delta': '1 day, 22:13:39', 'additions': 34, 'deletions': 10, 'state': 'closed'}, {'id': 756055634, 'number': 32, 'closed': datetime.datetime(2021, 10, 12, 11, 11, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 12, 10, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1820.0, 'time_delta': '0:30:20', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 713332130, 'number': 26, 'closed': datetime.datetime(2021, 8, 24, 15, 24, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 16, 11, 1, 54, tzinfo=datetime.timezone.utc), 'time_taken': 706961.0, 'time_delta': '8 days, 4:22:41', 'additions': 169, 'deletions': 8, 'state': 'closed'}, {'id': 712997776, 'number': 25, 'closed': datetime.datetime(2021, 10, 5, 17, 24, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 20, 34, 37, tzinfo=datetime.timezone.utc), 'time_taken': 4394970.0, 'time_delta': '50 days, 20:49:30', 'additions': 10902, 'deletions': 0, 'state': 'closed'}, {'id': 712971670, 'number': 24, 'closed': datetime.datetime(2021, 10, 4, 9, 38, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 17, 16, 3, tzinfo=datetime.timezone.utc), 'time_taken': 4292572.0, 'time_delta': '49 days, 16:22:52', 'additions': 111, 'deletions': 4, 'state': 'closed'}, {'id': 712971085, 'number': 23, 'closed': datetime.datetime(2021, 8, 15, 17, 21, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 15, 17, 12, 21, tzinfo=datetime.timezone.utc), 'time_taken': 571.0, 'time_delta': '0:09:31', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 712813693, 'number': 22, 'closed': datetime.datetime(2021, 10, 5, 17, 23, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 14, 17, 23, 5, tzinfo=datetime.timezone.utc), 'time_taken': 4492841.0, 'time_delta': '52 days, 0:00:41', 'additions': 111, 'deletions': 1, 'state': 'closed'}, {'id': 706433195, 'number': 21, 'closed': datetime.datetime(2021, 8, 18, 11, 18, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 9, 11, 20, 22, tzinfo=datetime.timezone.utc), 'time_taken': 777475.0, 'time_delta': '8 days, 23:57:55', 'additions': 92, 'deletions': 7, 'state': 'closed'}, {'id': 706040964, 'number': 20, 'closed': datetime.datetime(2021, 8, 9, 13, 4, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 8, 13, 9, 31, tzinfo=datetime.timezone.utc), 'time_taken': 86076.0, 'time_delta': '23:54:36', 'additions': 135, 'deletions': 7, 'state': 'closed'}, {'id': 701329124, 'number': 19, 'closed': datetime.datetime(2021, 10, 12, 11, 11, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 10, 14, 8, tzinfo=datetime.timezone.utc), 'time_taken': 6137845.0, 'time_delta': '71 days, 0:57:25', 'additions': 65, 'deletions': 0, 'state': 'closed'}, {'id': 696536885, 'number': 17, 'closed': datetime.datetime(2021, 7, 29, 8, 12, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 17, 26, 26, tzinfo=datetime.timezone.utc), 'time_taken': 312345.0, 'time_delta': '3 days, 14:45:45', 'additions': 157, 'deletions': 2, 'state': 'closed'}, {'id': 695891860, 'number': 16, 'closed': datetime.datetime(2021, 8, 3, 13, 45, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 12, 5, 15, tzinfo=datetime.timezone.utc), 'time_taken': 956392.0, 'time_delta': '11 days, 1:39:52', 'additions': 63, 'deletions': 1, 'state': 'closed'}, {'id': 694489460, 'number': 15, 'closed': datetime.datetime(2021, 7, 27, 7, 59, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 21, 15, 37, 14, tzinfo=datetime.timezone.utc), 'time_taken': 490912.0, 'time_delta': '5 days, 16:21:52', 'additions': 7, 'deletions': 5, 'state': 'closed'}, {'id': 693480761, 'number': 14, 'closed': datetime.datetime(2021, 7, 27, 7, 59, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 20, 13, 45, 37, tzinfo=datetime.timezone.utc), 'time_taken': 584037.0, 'time_delta': '6 days, 18:13:57', 'additions': 113, 'deletions': 0, 'state': 'closed'}, {'id': 691366906, 'number': 13, 'closed': datetime.datetime(2021, 7, 20, 13, 12, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 16, 10, 19, 54, tzinfo=datetime.timezone.utc), 'time_taken': 355958.0, 'time_delta': '4 days, 2:52:38', 'additions': 107, 'deletions': 2, 'state': 'closed'}, {'id': 687819508, 'number': 12, 'closed': datetime.datetime(2021, 7, 19, 14, 13, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 12, 12, 57, 31, tzinfo=datetime.timezone.utc), 'time_taken': 609360.0, 'time_delta': '7 days, 1:16:00', 'additions': 1184, 'deletions': 5, 'state': 'closed'}, {'id': 687396692, 'number': 11, 'closed': datetime.datetime(2021, 7, 19, 14, 13, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 21, 20, 20, tzinfo=datetime.timezone.utc), 'time_taken': 665603.0, 'time_delta': '7 days, 16:53:23', 'additions': 1119, 'deletions': 5, 'state': 'closed'}, {'id': 687396675, 'number': 10, 'closed': datetime.datetime(2021, 7, 19, 14, 13, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 21, 20, 8, tzinfo=datetime.timezone.utc), 'time_taken': 665627.0, 'time_delta': '7 days, 16:53:47', 'additions': 1158, 'deletions': 5, 'state': 'closed'}, {'id': 687379862, 'number': 9, 'closed': datetime.datetime(2021, 7, 16, 11, 11, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 11, 18, 49, 50, tzinfo=datetime.timezone.utc), 'time_taken': 404526.0, 'time_delta': '4 days, 16:22:06', 'additions': 1051, 'deletions': 5, 'state': 'closed'}, {'id': 685093067, 'number': 8, 'closed': datetime.datetime(2021, 7, 15, 17, 24, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 7, 11, 3, 59, tzinfo=datetime.timezone.utc), 'time_taken': 714017.0, 'time_delta': '8 days, 6:20:17', 'additions': 421, 'deletions': 2, 'state': 'closed'}, {'id': 678953779, 'number': 6, 'closed': datetime.datetime(2021, 7, 11, 12, 17, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 28, 11, 17, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1126820.0, 'time_delta': '13 days, 1:00:20', 'additions': 347, 'deletions': 2, 'state': 'closed'}, {'id': 668462392, 'number': 4, 'closed': datetime.datetime(2021, 7, 6, 10, 3, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 11, 18, 59, 38, tzinfo=datetime.timezone.utc), 'time_taken': 2127859.0, 'time_delta': '24 days, 15:04:19', 'additions': 361, 'deletions': 1, 'state': 'closed'}]"
6136261,qutip,qutip/qutip,Python,631,1666,77,168,11096,139,19,20,"[{'id': 1944725673, 'number': 2478, 'closed': datetime.datetime(2024, 6, 28, 17, 46, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 28, 17, 13, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1940.0, 'time_delta': '0:32:20', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1473469477, 'number': 2214, 'closed': datetime.datetime(2023, 8, 15, 15, 45, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 13, 19, 11, 34, tzinfo=datetime.timezone.utc), 'time_taken': 160415.0, 'time_delta': '1 day, 20:33:35', 'additions': 12, 'deletions': 2, 'state': 'closed'}, {'id': 1235802028, 'number': 2082, 'closed': datetime.datetime(2023, 2, 10, 9, 11, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 9, 21, 56, 19, tzinfo=datetime.timezone.utc), 'time_taken': 40504.0, 'time_delta': '11:15:04', 'additions': 14, 'deletions': 2, 'state': 'closed'}, {'id': 1220758106, 'number': 2064, 'closed': datetime.datetime(2023, 2, 1, 21, 26, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 29, 20, 23, 5, tzinfo=datetime.timezone.utc), 'time_taken': 263004.0, 'time_delta': '3 days, 1:03:24', 'additions': 63, 'deletions': 0, 'state': 'closed'}, {'id': 1149350342, 'number': 2032, 'closed': datetime.datetime(2022, 12, 6, 19, 6, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 6, 16, 27, 41, tzinfo=datetime.timezone.utc), 'time_taken': 9526.0, 'time_delta': '2:38:46', 'additions': 9, 'deletions': 2, 'state': 'closed'}, {'id': 1059566981, 'number': 1995, 'closed': datetime.datetime(2022, 9, 25, 18, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 18, 15, 20, 50, tzinfo=datetime.timezone.utc), 'time_taken': 616450.0, 'time_delta': '7 days, 3:14:10', 'additions': 28, 'deletions': 1, 'state': 'closed'}, {'id': 1059558179, 'number': 1994, 'closed': datetime.datetime(2022, 10, 4, 21, 3, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 9, 18, 14, 39, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1405422.0, 'time_delta': '16 days, 6:23:42', 'additions': 53, 'deletions': 3, 'state': 'closed'}, {'id': 965603789, 'number': 1932, 'closed': datetime.datetime(2022, 6, 13, 12, 3, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 13, 11, 23, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2411.0, 'time_delta': '0:40:11', 'additions': 8, 'deletions': 14, 'state': 'closed'}, {'id': 956228839, 'number': 1918, 'closed': datetime.datetime(2022, 6, 13, 12, 1, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 2, 18, 38, 15, tzinfo=datetime.timezone.utc), 'time_taken': 926592.0, 'time_delta': '10 days, 17:23:12', 'additions': 12, 'deletions': 2, 'state': 'closed'}, {'id': 956193069, 'number': 1917, 'closed': datetime.datetime(2022, 6, 10, 12, 58, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 2, 17, 54, 19, tzinfo=datetime.timezone.utc), 'time_taken': 673464.0, 'time_delta': '7 days, 19:04:24', 'additions': 89, 'deletions': 31, 'state': 'closed'}, {'id': 952179811, 'number': 1911, 'closed': datetime.datetime(2022, 5, 31, 17, 27, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 31, 16, 22, 41, tzinfo=datetime.timezone.utc), 'time_taken': 3914.0, 'time_delta': '1:05:14', 'additions': 20, 'deletions': 20, 'state': 'closed'}, {'id': 951188993, 'number': 1909, 'closed': datetime.datetime(2022, 5, 31, 15, 55, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 30, 16, 58, 4, tzinfo=datetime.timezone.utc), 'time_taken': 82632.0, 'time_delta': '22:57:12', 'additions': 140, 'deletions': 97, 'state': 'closed'}, {'id': 918229219, 'number': 1878, 'closed': datetime.datetime(2022, 4, 26, 13, 4, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 25, 14, 23, 37, tzinfo=datetime.timezone.utc), 'time_taken': 81650.0, 'time_delta': '22:40:50', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 854728341, 'number': 1805, 'closed': datetime.datetime(2022, 2, 21, 6, 29, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 16, 18, 54, 48, tzinfo=datetime.timezone.utc), 'time_taken': 387263.0, 'time_delta': '4 days, 11:34:23', 'additions': 25, 'deletions': 4, 'state': 'closed'}, {'id': 816604594, 'number': 1756, 'closed': datetime.datetime(2022, 1, 7, 20, 19, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 7, 19, 16, 54, tzinfo=datetime.timezone.utc), 'time_taken': 3738.0, 'time_delta': '1:02:18', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 808344306, 'number': 1746, 'closed': datetime.datetime(2022, 1, 3, 9, 52, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 22, 12, 11, 58, tzinfo=datetime.timezone.utc), 'time_taken': 1028437.0, 'time_delta': '11 days, 21:40:37', 'additions': 176, 'deletions': 43, 'state': 'closed'}, {'id': 808340283, 'number': 1745, 'closed': datetime.datetime(2021, 12, 22, 12, 6, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 22, 12, 6, 14, tzinfo=datetime.timezone.utc), 'time_taken': 20.0, 'time_delta': '0:00:20', 'additions': 1880, 'deletions': 532, 'state': 'closed'}, {'id': 808337376, 'number': 1744, 'closed': datetime.datetime(2021, 12, 22, 12, 5, 3, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 22, 12, 1, 59, tzinfo=datetime.timezone.utc), 'time_taken': 184.0, 'time_delta': '0:03:04', 'additions': 29318, 'deletions': 27966, 'state': 'closed'}, {'id': 786956000, 'number': 1723, 'closed': datetime.datetime(2022, 8, 5, 13, 21, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 23, 13, 6, 13, tzinfo=datetime.timezone.utc), 'time_taken': 22032913.0, 'time_delta': '255 days, 0:15:13', 'additions': 19, 'deletions': 0, 'state': 'closed'}, {'id': 783842579, 'number': 1715, 'closed': datetime.datetime(2021, 11, 19, 21, 55, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 18, 15, 13, 7, tzinfo=datetime.timezone.utc), 'time_taken': 110567.0, 'time_delta': '1 day, 6:42:47', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 776701459, 'number': 1709, 'closed': datetime.datetime(2021, 11, 19, 21, 58, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 11, 9, 16, 11, 34, tzinfo=datetime.timezone.utc), 'time_taken': 884830.0, 'time_delta': '10 days, 5:47:10', 'additions': 41, 'deletions': 27, 'state': 'closed'}, {'id': 762181346, 'number': 1692, 'closed': datetime.datetime(2021, 10, 20, 15, 24, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 20, 9, 55, 34, tzinfo=datetime.timezone.utc), 'time_taken': 19717.0, 'time_delta': '5:28:37', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 757239649, 'number': 1688, 'closed': datetime.datetime(2021, 10, 13, 11, 44, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 13, 10, 10, 42, tzinfo=datetime.timezone.utc), 'time_taken': 5630.0, 'time_delta': '1:33:50', 'additions': 16, 'deletions': 4, 'state': 'closed'}, {'id': 712605040, 'number': 1637, 'closed': datetime.datetime(2021, 8, 23, 16, 38, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 20, 18, 21, tzinfo=datetime.timezone.utc), 'time_taken': 850825.0, 'time_delta': '9 days, 20:20:25', 'additions': 123, 'deletions': 21, 'state': 'closed'}, {'id': 711354058, 'number': 1636, 'closed': datetime.datetime(2021, 10, 15, 14, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 18, 4, 59, tzinfo=datetime.timezone.utc), 'time_taken': 5517481.0, 'time_delta': '63 days, 20:38:01', 'additions': 27, 'deletions': 1, 'state': 'closed'}, {'id': 711083264, 'number': 1635, 'closed': datetime.datetime(2021, 10, 3, 21, 19, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 12, 15, 3, 42, tzinfo=datetime.timezone.utc), 'time_taken': 4515354.0, 'time_delta': '52 days, 6:15:54', 'additions': 95, 'deletions': 18, 'state': 'closed'}, {'id': 703695929, 'number': 1631, 'closed': datetime.datetime(2021, 8, 4, 17, 10, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 16, 26, 57, tzinfo=datetime.timezone.utc), 'time_taken': 2640.0, 'time_delta': '0:44:00', 'additions': 74, 'deletions': 0, 'state': 'closed'}, {'id': 703640998, 'number': 1630, 'closed': datetime.datetime(2021, 8, 5, 13, 48, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 4, 15, 33, 33, tzinfo=datetime.timezone.utc), 'time_taken': 80106.0, 'time_delta': '22:15:06', 'additions': 43, 'deletions': 36, 'state': 'closed'}, {'id': 701347116, 'number': 1627, 'closed': datetime.datetime(2021, 8, 2, 11, 24, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 10, 38, 18, tzinfo=datetime.timezone.utc), 'time_taken': 2775.0, 'time_delta': '0:46:15', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 700129369, 'number': 1626, 'closed': datetime.datetime(2021, 8, 3, 22, 4, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 9, 2, 43, tzinfo=datetime.timezone.utc), 'time_taken': 392515.0, 'time_delta': '4 days, 13:01:55', 'additions': 81, 'deletions': 3, 'state': 'closed'}, {'id': 699418844, 'number': 1625, 'closed': datetime.datetime(2021, 8, 3, 9, 39, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 29, 10, 46, 11, tzinfo=datetime.timezone.utc), 'time_taken': 427979.0, 'time_delta': '4 days, 22:52:59', 'additions': 3, 'deletions': 2, 'state': 'closed'}, {'id': 695943153, 'number': 1622, 'closed': datetime.datetime(2021, 8, 3, 22, 6, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 23, 13, 28, 16, tzinfo=datetime.timezone.utc), 'time_taken': 981512.0, 'time_delta': '11 days, 8:38:32', 'additions': 49, 'deletions': 8, 'state': 'closed'}, {'id': 695146710, 'number': 1620, 'closed': datetime.datetime(2021, 8, 5, 12, 48, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 22, 12, 57, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1209060.0, 'time_delta': '13 days, 23:51:00', 'additions': 83, 'deletions': 9, 'state': 'closed'}, {'id': 690823217, 'number': 1612, 'closed': datetime.datetime(2021, 7, 19, 13, 14, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 15, 22, 48, tzinfo=datetime.timezone.utc), 'time_taken': 337921.0, 'time_delta': '3 days, 21:52:01', 'additions': 38, 'deletions': 1, 'state': 'closed'}, {'id': 690580942, 'number': 1611, 'closed': datetime.datetime(2021, 8, 4, 11, 33, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 10, 10, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1732983.0, 'time_delta': '20 days, 1:23:03', 'additions': 47, 'deletions': 4, 'state': 'closed'}, {'id': 674068554, 'number': 1582, 'closed': datetime.datetime(2021, 6, 21, 11, 53, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 20, 17, 12, 1, tzinfo=datetime.timezone.utc), 'time_taken': 67297.0, 'time_delta': '18:41:37', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 612960674, 'number': 1494, 'closed': datetime.datetime(2021, 4, 13, 13, 8, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 10, 20, 40, 15, tzinfo=datetime.timezone.utc), 'time_taken': 232076.0, 'time_delta': '2 days, 16:27:56', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 602886398, 'number': 1478, 'closed': datetime.datetime(2021, 4, 9, 0, 7, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 29, 16, 2, 3, tzinfo=datetime.timezone.utc), 'time_taken': 893115.0, 'time_delta': '10 days, 8:05:15', 'additions': 119, 'deletions': 10, 'state': 'closed'}]"
