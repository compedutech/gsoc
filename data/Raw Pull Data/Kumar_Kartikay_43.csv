pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
429742469,GSoC 2020: Create and display initial tree model,"Adds tree hierarchy virtual functions `treeParent()`, `treeChild(int idx)`, and `treeChildCount()` to descendants of ScoreElement. Also adds a ScoreItemModel (based on QAbstractItemModel) and an iterator to ScoreElement class to iterate over the child elements.

[Edit:]

Latest Blog for this PR: https://musescore.org/en/user/1743616/blog/2020/06/22/gsoc-2020-tree-model-week-3-finished-my-first-pr

![image](https://user-images.githubusercontent.com/5488078/85503904-6d6bdb00-b608-11ea-8f89-bfaaa46e9989.png)
",True,6174,https://api.github.com/repos/musescore/MuseScore/pulls/6174,https://github.com/musescore/MuseScore/pull/6174,closed,1708,67,48,4,9,65,0,0,[],2020-06-07 05:22:39+00:00,2020-06-29 17:18:04+00:00,1943725.0,"22 days, 11:55:25","[{'comment_id': 440155311, 'comment_body': ""There is a risk that `treeChildCount()` could be evaluated on every loop iteration, so it is better to do:\r\n\r\n```c++\r\nint n = treeChildCount();\r\nfor (int i = 0; i < n; i++) {\r\n```\r\n\r\nI suppose the compiler might be clever enough to know that `treeChildIdx()` and `treeChildCount()` are both `const` functions and only calculate it the first time, but it's not certain.\r\n\r\nAnyway, couldn't you use the iterator syntax here?"", 'comment_created': datetime.datetime(2020, 6, 15, 12, 56, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440156465, 'comment_body': 'Variables should be declared on separate lines.', 'comment_created': datetime.datetime(2020, 6, 15, 12, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440159647, 'comment_body': 'Presumably the changes in `libmscore/element.cpp` are no longer needed.', 'comment_created': datetime.datetime(2020, 6, 15, 13, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440191242, 'comment_body': ""We don't use camelCase or `.hpp` extension for file names. Is a new file needed anyway or can it go in another file like `debugger.h`?"", 'comment_created': datetime.datetime(2020, 6, 15, 13, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440192964, 'comment_body': 'You can remove this comment from all files or replace with `// Score Tree functions`.', 'comment_created': datetime.datetime(2020, 6, 15, 13, 54, 58, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440208798, 'comment_body': 'Yep, we can now replace with the iterator syntax.', 'comment_created': datetime.datetime(2020, 6, 15, 14, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 440209199, 'comment_body': ""yep I'll revert this one."", 'comment_created': datetime.datetime(2020, 6, 15, 14, 17, 54, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 440796578, 'comment_body': 'This file still has the wrong comment. The others appear to be OK.', 'comment_created': datetime.datetime(2020, 6, 16, 12, 2, 26, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440834980, 'comment_body': 'Nothing from `scoreview.h` is used anymore so you can remove this include.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 8, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440836246, 'comment_body': 'Should `<QAbstractItemModel>` be included here or added to [all.h](https://github.com/musescore/MuseScore/blob/4013ef92430373be44c9bc1156f81b58aaf7ba38/all.h#L120)? (CC. @anatoly-os)', 'comment_created': datetime.datetime(2020, 6, 16, 13, 10, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440836877, 'comment_body': '`ScoreView` forward declaration not needed anymore.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440837939, 'comment_body': 'Why not inherit from QDockWidget and avoid the need for a `_dock` member?\r\n\r\nAlso, best rename this class `ScoreTreeWidget` to avoid confusion since the class itself is not a tree view; it is a widget that contains a tree view. If you inherit from `QTreeView` then you could call your class `ScoreTreeView`.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 12, 35, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440841203, 'comment_body': 'Why include (and setup) your dock widget in `scoreview.cpp` rather than `musescore.cpp`? The dock widget is not part of the ScoreView anymore; it is a separate widget like the Inspector, Palettes, or Mixer.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 17, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440844898, 'comment_body': 'All Qt-derived objects should accept a parent object in their constructor. i.e.:\r\n\r\n```\r\nScoreTreeView(QObject* parent=nullptr) : QObject(parent) {}\r\n```\r\n\r\nFor widgets (like QDockWidget), you can assume the parent is also a widget (but not necessarily the same kind):\r\n\r\n```\r\nScoreTreeView(QWidget* parent=nullptr) : QDockWidget(parent) {}\r\n```\r\n\r\nNotice the parent can be any QWidget, not necessarily a QDockWidget.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440848549, 'comment_body': 'Should give your object a parent here.\r\n\r\n```\r\n_scoreTreeView = new ScoreTreeView(this);\r\n```', 'comment_created': datetime.datetime(2020, 6, 16, 13, 27, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440849272, 'comment_body': 'If you give your widget a parent then [Qt will delete it for you](https://doc.qt.io/qt-5/objecttrees.html#overview) and this line would not be necessary.', 'comment_created': datetime.datetime(2020, 6, 16, 13, 28, 45, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 440891999, 'comment_body': 'Please add an extra slash `/` to this line (i.e. `///`) to expose this comment to Doxygen. It should be:\r\n\r\n```c++\r\n//---------------------------------------------------------\r\n//   ScoreItemModel::index\r\n/// Return index to child at given row & column of parent index.\r\n//---------------------------------------------------------\r\n```\r\n\r\nPlease do the same for the other doc-style comments in the file.', 'comment_created': datetime.datetime(2020, 6, 16, 14, 24, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441097315, 'comment_body': 'I moved ScoreTreeView to `musescore.cpp` and added the action ""Show Tree Debugger"" to the debug menu so that it\'s shown only in debug builds. Also renamed it and made it inherit from QDockWidget.', 'comment_created': datetime.datetime(2020, 6, 16, 19, 40, 4, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 441481989, 'comment_body': 'Please change to `__SCORETREEWIDGET_H__` to match the filename.', 'comment_created': datetime.datetime(2020, 6, 17, 11, 41, 54, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441482060, 'comment_body': 'Please change to `__SCORETREEWIDGET_H__` to match the filename.', 'comment_created': datetime.datetime(2020, 6, 17, 11, 42, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441504609, 'comment_body': ""It is specifically the tree view that is clicked on rather than the widget as a whole, so the `clicked` slot should be added to a new class ScoreTreeView that inherits from QTreeView. We might decide to use the tree view outside of this widget, such as in the score comparison tool, and we will want to keep the selection behaviour.\r\n\r\nYou can declare the new class in this same file and define the `clicked` function where it is now in `scoretreewidget.cpp`. However, the function should not be called `clicked` because:\r\n\r\n1. It conflicts with an [existing member](https://doc.qt.io/qt-5/qabstractitemview.html#clicked) of QTreeView.\r\n2. The code in the function refers to what happens after a click, rather than the click itself.\r\n3. We might want to trigger the same code in circumstances other than a click (e.g. selection via keyboard).\r\n\r\n\r\nSo a better name would be `selectElementAtIndex()`, and you would connect it to [`currentChanged()`](https://doc.qt.io/qt-5/qabstractitemview.html#currentChanged) rather than `clicked()` so that it works with keyboard control as well as the mouse.\r\n\r\nUnfortunately, it turns out that `currentChanged()` is a slot so you I don't think you can connect to anything to it. However, it is also virtual function, so you should just override it with your selection code. Make sure to call the super function too."", 'comment_created': datetime.datetime(2020, 6, 17, 12, 25, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441751592, 'comment_body': 'Opening brace `{` should be on the next line.', 'comment_created': datetime.datetime(2020, 6, 17, 18, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441762781, 'comment_body': 'Please add a newline at the end of the file. Also ensure all new files are UTF-8 with Unix-style line endings (LF).', 'comment_created': datetime.datetime(2020, 6, 17, 18, 54, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441776076, 'comment_body': ""Qt classes are included in [`all.h`](https://github.com/musescore/MuseScore/blob/master/all.h) so that they can be [precompiled](https://stackoverflow.com/a/903239). There's no need to include them here, and doing so removes some of the advantages of using precompiled headers in the first place.\r\n\r\nIf you need a Qt class that is not mentioned in `all.h` then feel free to add it to `all.h`. After editing `all.h` you may find that the build fails (probably due to bugs in our CMakeLists.txt files). If that happens, simply run the build again and see if it works now. If not, delete the build directory and try doing a clean build."", 'comment_created': datetime.datetime(2020, 6, 17, 19, 14, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441783720, 'comment_body': ""You probably don't need `_score` anymore since you can just get it from the tree view."", 'comment_created': datetime.datetime(2020, 6, 17, 19, 29, 50, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441785835, 'comment_body': 'You never use `_score` so you might as well get rid of it.', 'comment_created': datetime.datetime(2020, 6, 17, 19, 33, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441794536, 'comment_body': 'You can avoid doing the cast in release builds:\r\n\r\n```c++\r\nQ_ASSERT(model); // ensure there is a model\r\nQ_ASSERT(dynamic_cast<ScoreItemModel*>(model)); // ensure model is correct type\r\nQTreeView::setModel(model);\r\n```', 'comment_created': datetime.datetime(2020, 6, 17, 19, 50, 23, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441825695, 'comment_body': ""I think it's better to declare this as a separate `static` function ouside of `selectElementAtIndex()`. Put static funtions at the top of the file so that you can use them elsewhere if needed.\r\n\r\n```c++\r\n//---------------------------------------------------------\r\n//   selectElementAndChildren\r\n//---------------------------------------------------------\r\n\r\nstatic void selectElementAndChildren(Element* el)\r\n{\r\n    el->score()->selection().add(el);\r\n    for (ScoreElement* child : (*el)) {\r\n        if (child) {\r\n            selectElementAndChildren(toElement(child));\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNotice the use of [`toElement()`](https://github.com/musescore/MuseScore/blob/2245bd16c6cec557f0ee229856689a60bfb1f598/libmscore/scoreElement.h#L558-L562) instead of an explicit cast."", 'comment_created': datetime.datetime(2020, 6, 17, 20, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441829468, 'comment_body': ""MuseScore provides [`ScoreElement::isElement()`](https://github.com/musescore/MuseScore/blob/2245bd16c6cec557f0ee229856689a60bfb1f598/libmscore/scoreElement.h#L360) to check type and [`toElement()`](https://github.com/musescore/MuseScore/blob/2245bd16c6cec557f0ee229856689a60bfb1f598/libmscore/scoreElement.h#L558-L562) to do the conversion.\r\n\r\nIt's also best to return quickly if you can.\r\n\r\n```C++\r\nif (!s || !s->isElement()) {\r\n    return;\r\n    }\r\n\r\nElement* el = toElement(s);\r\n```\r\n\r\nYou shouldn't use the name `root` for anything except the root item in the model (i.e. the score)."", 'comment_created': datetime.datetime(2020, 6, 17, 20, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441834373, 'comment_body': 'By the way, why is it necessary to select children? Why is it not enough to just select the element itself?', 'comment_created': datetime.datetime(2020, 6, 17, 21, 6, 21, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441836211, 'comment_body': ""You should never use C-style casts. In this case `static_cast` is appropriate, or you could do `treeItemModel()->scoreElementFromIndex(index)` (but that's probably overkill)."", 'comment_created': datetime.datetime(2020, 6, 17, 21, 10, 4, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 441839848, 'comment_body': ""I'd just call this function `score()` to avoid confusion where it is used."", 'comment_created': datetime.datetime(2020, 6, 17, 21, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442144670, 'comment_body': ""It's necessary to select children because we can select only the leaf nodes otherwise. Segments, Measures, Chords aren't getting selected if I do it directly."", 'comment_created': datetime.datetime(2020, 6, 18, 11, 1, 56, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 442167259, 'comment_body': ""I'm not sure it is worth including `musescore.h` (which is a big file that changes often) just for the sake of this one line. I would probably put this line in `musescore.cpp` where you create the `ScoreTreeWidget` for the first time.\r\n\r\nAlternatively, you could change `parent` type from QWidget to QMainWindow and then do:\r\n\r\n```\r\nparent->addDockWidget(Qt::RightDockWidgetArea, this);\r\n```\r\nThat would enable you to do the setup in this file without including `musescore.h`."", 'comment_created': datetime.datetime(2020, 6, 18, 11, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442167533, 'comment_body': 'These could all be included in the `.cpp` file. You will need to forward declare `ScoreTreeView` in this file since you declare a pointer of that type (`_treeView`).', 'comment_created': datetime.datetime(2020, 6, 18, 11, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442177077, 'comment_body': ""You don't need to forward declare these since you have included `score.h`. You should include `scoreElement.h` since you have a function that returns a pointer of that type."", 'comment_created': datetime.datetime(2020, 6, 18, 12, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442184051, 'comment_body': 'Thanks for putting these in alphabetical order. I wish more people did this.', 'comment_created': datetime.datetime(2020, 6, 18, 12, 21, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442190381, 'comment_body': 'We need a doc-style comment here to explain that this function selects elements in the score (and therefore in the ScoreView) rather than elements in the tree view.', 'comment_created': datetime.datetime(2020, 6, 18, 12, 32, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442196906, 'comment_body': ""We need a comment here to say [why it is necessary](https://github.com/musescore/MuseScore/pull/6174#discussion_r442144670) to select children of the element rather than just the element itself.\r\n\r\nAnother way around the leaf node problem would be to do a range selection.\r\n\r\n```c++\r\nif (el->treeChildCount() == 0) {\r\n    // select el\r\n} else {\r\n    // select range that includes el\r\n}\r\n```\r\n\r\nBut let's not do that now. It may not be totally reliable anyway."", 'comment_created': datetime.datetime(2020, 6, 18, 12, 43, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442547894, 'comment_body': 'Double return? I guess this is a mistake.', 'comment_created': datetime.datetime(2020, 6, 18, 23, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442553706, 'comment_body': 'Add this line to enable the tree debugger to be hidden after it has been shown:\r\n\r\n```c++\r\na->setCheckable(true);\r\n```\r\n\r\nThat will turn the menu item into a checkbox like ""Show corrupted measures"".\r\n\r\n![image](https://user-images.githubusercontent.com/11011881/85081400-cb8d5e00-b1c3-11ea-80d6-1a6d2551f314.png)\r\n', 'comment_created': datetime.datetime(2020, 6, 18, 23, 29, 9, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442557953, 'comment_body': 'Change to:\r\n\r\n```c++\r\n    } else if (cmd == ""show-tree-debugger"") {\r\n        if (a->isChecked()) {\r\n            if (!scoreTreeWidget){\r\n                scoreTreeWidget = new ScoreTreeWidget(mscore);\r\n            }\r\n            scoreTreeWidget->setScore(cs);\r\n            scoreTreeWidget->show();\r\n        } else {\r\n            scoreTreeWidget->hide();\r\n        }\r\n    }\r\n```\r\n\r\nNotice the call to `scoreTreeWidget->setScore(cs)`.', 'comment_created': datetime.datetime(2020, 6, 18, 23, 43, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442564915, 'comment_body': 'Remove this. It should not be necessary to set the score after every command. Doing it in `setCurrentScoreView()` should be enough.', 'comment_created': datetime.datetime(2020, 6, 19, 0, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442566846, 'comment_body': 'Change to:\r\n\r\n```\r\nif (scoreTreeWidget && scoreTreeWidget->isVisible()) {\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 0, 16, 52, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442567421, 'comment_body': 'Comment is not necessary as we can work out what is happening from the code.', 'comment_created': datetime.datetime(2020, 6, 19, 0, 19, 13, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442575083, 'comment_body': 'It is safe and appropriate to just call this function `model()`. Callers that are aware of ScoreTreeView will get this function, while callers that treat this class as a QTreeView and try to call `model()` will be get `QTreeView::model()` instead.\r\n\r\n```c++\r\nQTreeView tv1 = ScoreTreeView(this);\r\nauto model1 = tv1.model(); //  model1 has type QAbstractItemModel*\r\n\r\nScoreTreeView tv2 = ScoreTreeView(this);\r\nauto model2 = tv2.model(); //  model2 has type ScoreItemModel*\r\n\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 0, 51, 7, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442581185, 'comment_body': 'This should liven things up a bit!\r\n\r\n```c++\r\n    case Qt::DisplayRole:\r\n        if (scoreElement->isElement()) {\r\n            return toElement(scoreElement)->accessibleInfo();\r\n        }\r\n        // fallthrough\r\n    case Qt::ToolTipRole:\r\n    ...\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 1, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 442799302, 'comment_body': 'Actually I put this here to reload the ScoreItemModel in the Tree view every time a re-layout happens. Otherwise it just crashes when we try to add a second voice or staff, for example. Is there any other place I could put these lines perhaps? Or some other way to reload the model?', 'comment_created': datetime.datetime(2020, 6, 19, 11, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 442875196, 'comment_body': ""I see. In that case this [StackOverflow answer](https://stackoverflow.com/a/21487724) might help, or it might just create more trouble than it's worth. For now just leave a comment to say why you did this and we'll come back to it later, probably in another PR."", 'comment_created': datetime.datetime(2020, 6, 19, 14, 32, 46, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 443017693, 'comment_body': '```c++\r\nif (scoreTreeWidget && scoreTreeWidget->isVisible()) {\r\n```', 'comment_created': datetime.datetime(2020, 6, 19, 19, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 443021765, 'comment_body': 'Must check for `nullptr` before creating a new model otherwise it leads to a crash when there are no scores open:\r\n\r\n```c++\r\nif (s) {\r\n    _treeView->setModel(new ScoreItemModel(s, _treeView));\r\n}\r\n```\r\n\r\nKeep the code to delete the existing model as this will clear the tree view, which is good if there are no scores open.', 'comment_created': datetime.datetime(2020, 6, 19, 20, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 443121608, 'comment_body': 'Not necessary `virtual`', 'comment_created': datetime.datetime(2020, 6, 20, 10, 50, 53, tzinfo=datetime.timezone.utc), 'commenter': 'igorkorsukov', 'type': 'User'}, {'comment_id': 443121922, 'comment_body': 'Maybe for `Score` parent is the `MasterScore`, and the `MasterScore` should be the root?', 'comment_created': datetime.datetime(2020, 6, 20, 10, 56, 47, tzinfo=datetime.timezone.utc), 'commenter': 'igorkorsukov', 'type': 'User'}, {'comment_id': 443145203, 'comment_body': 'There is still some confusion about what Score and MasterScore actually mean, so my vote is to leave it how it is for now and then wait to see if it causes problems.', 'comment_created': datetime.datetime(2020, 6, 20, 17, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 443182192, 'comment_body': 'fixed', 'comment_created': datetime.datetime(2020, 6, 21, 5, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 443188880, 'comment_body': 'It seems like for now `Score` and `MasterScore` actually point to the same object.', 'comment_created': datetime.datetime(2020, 6, 21, 7, 0, 10, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 444160157, 'comment_body': 'Function opening brace `{` should be on next line. Please always run changed files through `uncrustify`.', 'comment_created': datetime.datetime(2020, 6, 23, 11, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 444163283, 'comment_body': 'Since you use `toElement()` twice, I think it is worth storing in a pointer. It also makes the line shorter.\r\n\r\n```c++\r\nElement* el = toElement(element);\r\nreturn QString(el->name()) + "" ("" + el->accessibleInfo() + "")"";\r\n```\r\n\r\nHowever, in most cases the `accessibleInfo` starts with the `name`, so you might find this is enough:\r\n\r\n```c++\r\nreturn toElement(element)->accessibleInfo();\r\n```\r\n\r\nBut I\'ll let you decide whether ""most cases"" is good enough. I suppose it might be valuable to know the actual `name` in cases where it is different.', 'comment_created': datetime.datetime(2020, 6, 23, 11, 49, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 444170344, 'comment_body': 'My preference is to exit early if you can and save yourself an indentation level later on.\r\n\r\n```c++\r\nif (!child) {\r\n    continue;\r\n}\r\n\r\n// back to previous indentation level\r\n```\r\n\r\nBut this is a matter of personal taste so do what you think it best.', 'comment_created': datetime.datetime(2020, 6, 23, 12, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 444173160, 'comment_body': 'Unnecessary space after `MasterScore`. It should be:\r\n```c++\r\nMasterScore* score;\r\n```', 'comment_created': datetime.datetime(2020, 6, 23, 12, 8, 34, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 444199705, 'comment_body': ""Including `cmake.inc` causes the crash on AppVeyor due to the line [`include(FindStaticLibrary)`](https://github.com/musescore/MuseScore/blob/84d97c6ace691286c84db3a8a2d845563a4019ee/mtest/cmake.inc#L32), which loads [`build/FindStaticLibrary.cmake`](https://github.com/musescore/MuseScore/blob/master/build/FindStaticLibrary.cmake). That file creates a target called `zlibstat`. You cannot create two targets with the same name in the same directory, hence it fails the second time.\r\n\r\nWays to avoid:\r\n\r\n#### 1. One-time `if` statement.\r\n\r\nDo something like this in `cmake.inc`:\r\n\r\n```cmake\r\nif (NOT ALREADY_BEEN_HERE)\r\n    set(ALREADY_BEEN_HERE TRUE)\r\n    include(FindStaticLibrary)\r\nendif()\r\n```\r\n\r\n#### 2. Use CMake's [`include_guard(DIRECTORY)`](https://cmake.org/cmake/help/latest/command/include_guard.html) statement\r\n\r\nEdit: this won't work here because nothing after the include_guard will run twice, and `zlibstat` and `${TARGET}` are both mentioned in [`target_link_libraries`](https://github.com/musescore/MuseScore/blob/84d97c6ace691286c84db3a8a2d845563a4019ee/mtest/cmake.inc#L33-L41). That doesn't rule out the next option though.\r\n\r\n#### 3. Move line to [`mtest/CMakeLists.txt`](https://github.com/musescore/MuseScore/blob/master/mtest/CMakeLists.txt)\r\n\r\n`mtest/CMakeLists.txt` is run once in total, not once per test, so the issue would not arise. (But it might not work in that file. @AntonioBL might have a reason for putting it in `cmake.inc`.)\r\n\r\n#### 4. Move to new file and include it only once\r\n\r\nYou could just put the code that runs once per directory in a new file `inc_dir.cmake` that is only mentioned once in each directory's CMakeList.txt rather than once per test. (If you do this then please rename `cmake.inc` to `inc.cmake` so that we get proper syntax highlighting.)\r\n\r\n#### 5. Create a custom function for code that executes multiple times\r\n\r\n__cmake.inc__\r\n\r\n```cmake\r\n\r\n# code that runs once per directory\r\nif (MSVC)\r\n    include(FindStaticLibrary)\r\nendif(MSVC)\r\n# etc.\r\n\r\nfunction(setup_test TARGET)\r\n    # code that runs once per test\r\n    add_executable(\r\n      ${TARGET}\r\n      ${ui_headers}\r\n      ${mocs}\r\n      ${TARGET}.cpp\r\n      )\r\n    # etc.\r\nendfunction(setup_test)\r\n```\r\n\r\n__all_elements/CmakeLists.txt__\r\n\r\n```cmake\r\n\r\ninclude(${PROJECT_SOURCE_DIR}/mtest/cmake.inc)\r\n\r\nsetup_test(tst_layout_elements)\r\nsetup_test(tst_tree_model)\r\n```\r\n\r\n---\r\n\r\nOnce the above is fixed, there is likely to be another error further down at the line [`DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/styles`](https://github.com/musescore/MuseScore/blob/84d97c6ace691286c84db3a8a2d845563a4019ee/mtest/cmake.inc#L140), because the files mentioned in the lines above will have already been installed at that location first time around. This can be fixed in the same way as before, with methods 1 to 5."", 'comment_created': datetime.datetime(2020, 6, 23, 12, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 444222672, 'comment_body': ""Solution 3 is easy and most elegant, but it is not guaranteed to work.\r\n\r\nSolutions 1 and 2 are a bit hacky, but require least effort and are guaranteed to work.\r\n\r\nSolutions 4 and 5 require modifying the `CMakeList.txt` file in all test directories, which is quite a bit of effort. However, they are more elegant than 1 and 2 so it's a pity it wasn't done this way from the beginning. Don't bother with it now though."", 'comment_created': datetime.datetime(2020, 6, 23, 13, 27, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 444271761, 'comment_body': 'I put that line there because it was setting zlibstat as target link library in the next instruction; it worked because single CmakeList.txt files were defining one single test target. But I think that that line can be moved to `mtest/CMakeLists.txt` without problems.', 'comment_created': datetime.datetime(2020, 6, 23, 14, 33, 18, tzinfo=datetime.timezone.utc), 'commenter': 'AntonioBL', 'type': 'User'}, {'comment_id': 444287712, 'comment_body': '@AntonioBL, make sense. What about the `install` at the bottom of the file? The [`DESTINATION` is `${CMAKE_CURRENT_BINARY_DIR}/styles`](https://github.com/musescore/MuseScore/blob/84d97c6ace691286c84db3a8a2d845563a4019ee/mtest/cmake.inc#L140), where `CMAKE_CURRENT_BINARY_DIR` is the current test directory (inside the project build directory). Can the install be moved to `mtest/CMakeLists.txt` (where `CMAKE_CURRENT_BINARY_DIR` is the `mtest` directory) or are those files really needed in each test directory?', 'comment_created': datetime.datetime(2020, 6, 23, 14, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 444804050, 'comment_body': 'In this case I put on purpose the destination dir as each single test dir since the test executables were searching for that directory relative to their own path, rather than relative to the parent application mtest.', 'comment_created': datetime.datetime(2020, 6, 24, 10, 40, 6, tzinfo=datetime.timezone.utc), 'commenter': 'AntonioBL', 'type': 'User'}]","[{'commit_sha': 'a87cc9e6ccb7f313cefa00a40de542efcfa2bb53', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'acf4a3cde282ad47ce22b3301b3b5af18571abe7', 'committer_username': 'shoogle', 'committer_name': 'Peter Jonas', 'committer_email': None, 'commit_date': datetime.datetime(2015, 2, 15, 1, 45, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28bfe82037e081e09141020055753de61ea81293', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5147683fecfe82e7da4c84c6a1bb2cb6815d1d5', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}]",Kumar Kartikay,5488078,krkartikay@gmail.com,User,,59,,136,118
441492939,GSoC 2020: scanElements refactoring based on tree model [vtests],"This PR refactors the scanElements function to scan the elements using the score tree to traverse the elements instead of handling each element case by case.

This builds up on the tree model that I created in my previous PR, #6174 .

Latest GSoC blog link: https://musescore.org/en/user/1743616/blog/2020/07/20/gsoc-2020-tree-model-week-7-finished-scanelements-refactoring",True,6274,https://api.github.com/repos/musescore/MuseScore/pulls/6274,https://github.com/musescore/MuseScore/pull/6274,closed,431,408,52,6,3,66,0,0,[],2020-06-29 15:31:27+00:00,2020-08-11 12:18:20+00:00,3703613.0,"42 days, 20:46:53","[{'comment_id': 452923617, 'comment_body': 'What about this?\r\n```c++\r\nif (el == nullptr || el->isMeasure()) {\r\n\r\n```\r\n\r\nAlso, can you name a situation where a Measure is child of a Measure?', 'comment_created': datetime.datetime(2020, 7, 10, 15, 43, 20, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453022511, 'comment_body': 'You don\'t need an `else` after a `return` or `continue`. However, in this case the whole thing would be better as:\r\n\r\n```c++\r\nif (all || (measure()->visible(staffIdx()) && score()->staff(staffIdx())->show())) {\r\n    func(data, this);\r\n}\r\n```\r\n\r\nMy ""try to exit early"" guideline doesn\'t apply if your function only does one thing. Same applies to loops, etc.', 'comment_created': datetime.datetime(2020, 7, 10, 18, 55, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453027772, 'comment_body': ""To avoid calculating `treeChildCount()` unnecessarily:\r\n\r\n```c++\r\nif (all && treeChildCount() > 0) {\r\n```\r\n\r\nIdeally you wouldn't call `treeChildCount()` at all though."", 'comment_created': datetime.datetime(2020, 7, 10, 19, 3, 42, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453032858, 'comment_body': ""I'm not a big fan of calling `treeChildCount()` here and then immediately calling it again in `Element::scanElements()`."", 'comment_created': datetime.datetime(2020, 7, 10, 19, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453061721, 'comment_body': 'Whitespace and indentation fixes should go in a separate commit (and ideally a separate PR).', 'comment_created': datetime.datetime(2020, 7, 10, 20, 26, 5, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453063330, 'comment_body': 'No need to keep a list here since it will just go out of date. Better to say something generic like ""override this if you need to apply to apply to this element as well as its children"".\r\n\r\nBut why have the `treeChildCount()` check anyway? What problems occur if you just apply the function to all elements regardless of whether they are leaf nodes?', 'comment_created': datetime.datetime(2020, 7, 10, 20, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453064145, 'comment_body': 'Since you only do one thing in the loop:\r\n\r\n```c++\r\nif (el) {\r\n    el->scanElements(data, func, all);\r\n}\r\n```\r\n\r\nBTW, when does `treeChild(n)` ever return `nullptr`?', 'comment_created': datetime.datetime(2020, 7, 10, 20, 32, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453072947, 'comment_body': 'This is necessary code in the current model so cannot be removed. A better comment would be ""TODO change model so that this is not necessary"".', 'comment_created': datetime.datetime(2020, 7, 10, 20, 55, 39, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453618325, 'comment_body': 'Maybe put this in `Stem::scanElements`?', 'comment_created': datetime.datetime(2020, 7, 13, 12, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453631486, 'comment_body': '```c++\r\nSysStaff* _sysStaff { nullptr };\r\n```\r\nNote: `_layoutPos` in the line above is an `int` not a pointer so there is no inconsistency.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 0, 43, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453638448, 'comment_body': ""Move comment to next line to avoid using so many columns. You can put it on the same line as the `continue` since it will still be under 80 chars. (We allow [up to 120 chars](https://github.com/musescore/MuseScore/blob/41aedce5e42ccb67102988798ffab5cc9eff1658/tools/codestyle/uncrustify_musescore.cfg#L1285) but there's no reason to exceed 80 where it is easily avoidable.)"", 'comment_created': datetime.datetime(2020, 7, 13, 13, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453641749, 'comment_body': 'Please put the space back.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 17, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453663982, 'comment_body': 'Maybe have the number do this check rather than the tuplet?', 'comment_created': datetime.datetime(2020, 7, 13, 13, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453664247, 'comment_body': 'Unnecessary space.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 50, 41, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453664676, 'comment_body': 'Unnecessary space.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 51, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453670259, 'comment_body': 'For the sake of those following, a multi-measure rest (MMRest) is a Measure that can contain other Measures.', 'comment_created': datetime.datetime(2020, 7, 13, 13, 59, 2, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453819882, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2020, 7, 13, 17, 41, 58, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 453850989, 'comment_body': '`treeChild(n)` can return a nullptr in some classes where the children are taken from some vector which can have nullptrs. For example in the `Segment` class, if there is a note in only one voice then the children would be `ChordRest, nullptr, nullptr, nullptr`.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 35, 2, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 453853464, 'comment_body': ""Yep, I've added MMRests to the score tree model and an MMRest measure contains all the measures it replaced within it."", 'comment_created': datetime.datetime(2020, 7, 13, 18, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 453856389, 'comment_body': 'Yep, these were accidentally added because of the uncrustify hook.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 453862584, 'comment_body': '`_number` is of type `Text*` so, in general, Text should be scanned if it is visible, not just when `all` is true. That is why I cannot move this check to Text class.', 'comment_created': datetime.datetime(2020, 7, 13, 18, 55, 12, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 453867944, 'comment_body': ""So it's a choice between sometimes returning `nullptr`, or always checking the entire vector to find all the nullptrs? If Segment is the only one like this then I'd say it is worth filtering out the nullpts. If there are others like it then it is not worth it."", 'comment_created': datetime.datetime(2020, 7, 13, 19, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453873005, 'comment_body': ""I'm just checking this one, it may not be necessary. (see https://github.com/musescore/MuseScore/pull/6318/files#diff-32e6dbba79e3bb125b29f1ec59ab3719L2264-R2268)"", 'comment_created': datetime.datetime(2020, 7, 13, 19, 14, 3, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 453876364, 'comment_body': ""Makes sense. In that case you should probably do it like this:\r\n\r\n```c++\r\nfor (child : this) {\r\n    if (child == _number && !all) {\r\n        continue; // don't scan number unless all is true\r\n    }\r\n    child->scanElements(data, func, all);\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 7, 13, 19, 20, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453878092, 'comment_body': 'I expect it will be necessary because you might have a tie that goes over a page, and you want to do layout for only the 2nd page. You might need to run MuseScore to check this case rather than rely on a test.', 'comment_created': datetime.datetime(2020, 7, 13, 19, 23, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 453882832, 'comment_body': ""Well if the tie segments are children of the system then I suppose this might not be needed after all. Perhaps it's not even necessary to scan the forward tie..."", 'comment_created': datetime.datetime(2020, 7, 13, 19, 31, 25, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 454147394, 'comment_body': ""> I expect it will be necessary because you might have a tie that goes over a page, and you want to do layout for only the 2nd page. You might need to run MuseScore to check this case rather than rely on a test.\r\n\r\nI checked it, you were right. It doesn't show ties on the 2nd page without this line."", 'comment_created': datetime.datetime(2020, 7, 14, 7, 6, 6, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 454318602, 'comment_body': 'That suggests something else is wrong then.  That tie segment on the second page belongs to a system as well, why isn’t it laid out as part of that?', 'comment_created': datetime.datetime(2020, 7, 14, 12, 27, 27, tzinfo=datetime.timezone.utc), 'commenter': 'MarcSabatella', 'type': 'User'}, {'comment_id': 454324716, 'comment_body': 'For the record, the line is already gone for 3.5, and this problem doesn’t occur there with or without the line.  But other problems do occur with it, because it does cause the tie to get scanned twice.', 'comment_created': datetime.datetime(2020, 7, 14, 12, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'MarcSabatella', 'type': 'User'}, {'comment_id': 454353330, 'comment_body': ""> That suggests something else is wrong then.\r\n\r\nYes, and I just found out what else is wrong, haha..\r\n\r\nIn the current tree model, I have made spanner segments children of the spanner. That means that the tie contains the tie segments. ScoreView is using Page::scanElements to draw each page, so a tie on a note on Page 1 is not getting drawn on page 2. Scanning `tieBack` along with `tieFor` makes the tie get drawn on Page 2. But then I looked at the other spanners: slurs, for example, don't get drawn on Page 2, and get drawn on the same page instead. Even with this line there is a bug, the tie gets drawn on both page 1 and page 2 (I mean both segments of the tie are getting drawn on both pages).\r\n\r\nSo maybe I should scan the spanner segments in systems in the old way (by overriding `System::scanElements`)? Or should I change the tree model to make the system contain the spanner segments?"", 'comment_created': datetime.datetime(2020, 7, 14, 13, 24, 57, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 454353900, 'comment_body': 'okay, did it that way.', 'comment_created': datetime.datetime(2020, 7, 14, 13, 25, 48, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 454408957, 'comment_body': ""I think a ton of things will break if you change the basic assumption that spanner segments are children of the system, it's fundamental to the whole reason spanners are broken up into segments to begin with.  Maybe there's a way, with a lots more code, to re-implement the spanner functionality to change this, but I would strongly advise against trying."", 'comment_created': datetime.datetime(2020, 7, 14, 14, 42, 20, tzinfo=datetime.timezone.utc), 'commenter': 'MarcSabatella', 'type': 'User'}, {'comment_id': 454641817, 'comment_body': 'This should be:\r\n\r\n```c++\r\nreturn parent()->toMeasure();\r\n```\r\n\r\nYou should never use C-style casts in C++ code. See https://stackoverflow.com/a/1609185.', 'comment_created': datetime.datetime(2020, 7, 14, 20, 59, 56, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 454699047, 'comment_body': ""It's code like this that makes me think MStaff should be a proper element and part of the tree model. Then this could be simply:\r\n\r\n```c++\r\nif (all || mstaff()->isVisible()) {\r\n    func(data, this);\r\n}\r\n```\r\n\r\nAnyway, keep it as it is for now. We can add this to our list of things to consider later."", 'comment_created': datetime.datetime(2020, 7, 14, 23, 17, 55, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 454703053, 'comment_body': '> This conversation was marked as resolved by **Kartikay26**\r\n\r\nBest not mark things as resolved until after you push a commit that fixes it, or after you post a reply if you think the feedback was wrong.', 'comment_created': datetime.datetime(2020, 7, 14, 23, 30, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 454745688, 'comment_body': ""Please explain why all this is necessary now when it wasn't before. What has changed?\r\n\r\nAssuming it is necessary, this is a neater way to do it:\r\n\r\n```c++\r\nstatic bool isVisibleCR(Element* e)\r\n{\r\n    if (!e || !e->isChordRest()) {\r\n        return true; // assume visible\r\n    }\r\n    ChordRest* cr = toChordRest(e);\r\n    return cr->measure()->visible(cr->staffIdx());\r\n}\r\n\r\nvoid Spanner::scanElements(void* data, void (* func)(void*, Element*), bool all)\r\n{\r\n    for (ScoreElement* el : *this) {\r\n        if (el->isSpannerSegment()\r\n            && !all\r\n            && !isVolta()\r\n            && !score()->staff(staffIdx())->show()\r\n            && !isVisibleCR(startElement())\r\n            && !isVisibleCR(endElement())) {\r\n            continue; // don't scan hidden spanner segment\r\n        }\r\n    }\r\n    el->scanElements(data, func, all);\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 7, 15, 2, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 454747288, 'comment_body': 'This comment applies to the function as a whole (rather than just part of it) so it would be better to put it before the function as a doc-style comment:\r\n\r\n```c++\r\n//---------------------------------------------------------\r\n//   scanElements\r\n/// Recursively apply scanElements to all children.\r\n/// See also Element::scanElements.\r\n//---------------------------------------------------------\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 2, 8, 44, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 454752089, 'comment_body': '\r\n\r\nThis comment applies to the function as a whole (rather than just part of it) so it would be better to put it before the function as a doc-style comment:\r\n\r\n```\r\n//---------------------------------------------------------\r\n//   scanElements\r\n/// If leaf node, apply `func` on this element (after checking if it is visible).\r\n/// Otherwise, recurse over all children (see ScoreElement::scanElements).\r\n/// Note: This function is overridden in some classes to skip certain children,\r\n/// or to apply `func` even to non-leaf nodes.\r\n//---------------------------------------------------------\r\n```', 'comment_created': datetime.datetime(2020, 7, 15, 2, 26, 6, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 454769616, 'comment_body': '`toMeasure(parent())`', 'comment_created': datetime.datetime(2020, 7, 15, 3, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IsaacWeiss', 'type': 'User'}, {'comment_id': 454777581, 'comment_body': ""Interesting. I didn't know that spanner segments were owned by the system, but it does make sense.\r\n\r\n@Kartikay26 \r\n> So maybe I should scan the spanner segments in systems in the old way (by overriding System::scanElements)? Or should I change the tree model to make the system contain the spanner segments?\r\n\r\nEither is acceptable for now. We will want to look at this in more detail later because it will have consequences for how you write files to MSCX, and for my grand plan to store more than one layout in a file.\r\n\r\n@MarcSabatella, to be clear, the `parent()` of the segments is still `System` (I think). We are talking about the new function `treeParent()`, which in most cases returns `parent()`, but not always."", 'comment_created': datetime.datetime(2020, 7, 15, 4, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 454947777, 'comment_body': ""Oops, I thought I had fixed it. Maybe the old version came back because of some merge conflict while rebasing. Anyways the test works without this line so I'll just remove it."", 'comment_created': datetime.datetime(2020, 7, 15, 10, 21, 10, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 454952126, 'comment_body': 'This was actually taken from https://github.com/musescore/MuseScore/blob/master/libmscore/system.cpp#L1196-L1224. According to the comment ""// hide spanner if both chords are hidden"" it seems it should be necessary, but I\'ll just check it.', 'comment_created': datetime.datetime(2020, 7, 15, 10, 29, 22, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 454958002, 'comment_body': 'I found this check here: https://github.com/musescore/MuseScore/blob/master/libmscore/chordrest.cpp#L126-L128.\r\nIn the old scanElements the check was there only for beams, but not for stems https://github.com/musescore/MuseScore/blob/master/libmscore/chord.cpp#L1230-L1232\r\nProbably this condition is checked somewhere else for stems, not in scanElements.\r\n[Stemless measures work correctly even without putting this in Stem::scanElements]', 'comment_created': datetime.datetime(2020, 7, 15, 10, 40, 19, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 455007031, 'comment_body': ""I applying the function to all nodes, surprisingly it seemed to work with no obvious bugs. But I couldn't select measures as I could earlier, by clicking on the staff, the system got selected instead. There might be other subtle bugs like this, but I could only find one right now."", 'comment_created': datetime.datetime(2020, 7, 15, 12, 17, 58, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 455054880, 'comment_body': ""What about other children of ChordRest, like Lyrics? They shouldn't be skipped just because stems are hidden, surely?"", 'comment_created': datetime.datetime(2020, 7, 15, 13, 34, 1, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 455058293, 'comment_body': 'Oops! My mistake.', 'comment_created': datetime.datetime(2020, 7, 15, 13, 38, 51, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 455550212, 'comment_body': ""It looks like it's only segments that contain `nullptr` but probably due to some bug in the code that adds spanners to the tree some other elements are containing `nullptr`s too."", 'comment_created': datetime.datetime(2020, 7, 16, 6, 55, 31, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 455686460, 'comment_body': 'Filtered out all the nullptrs.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 455692374, 'comment_body': 'Made the system scan the spanner segments for now, and removed this line.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 39, 17, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 455696384, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 47, 3, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 455697143, 'comment_body': ""Now I've moved this back to the system class and I've avoided changing the existing lines. "", 'comment_created': datetime.datetime(2020, 7, 16, 10, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 455697435, 'comment_body': 'yep, done.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 455697515, 'comment_body': 'done.', 'comment_created': datetime.datetime(2020, 7, 16, 10, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 455969556, 'comment_body': 'Missing `override`.', 'comment_created': datetime.datetime(2020, 7, 16, 17, 57, 12, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 455977256, 'comment_body': '```c++\r\nif (all || (measure()->visible(staffIdx()) && score()->staff(staffIdx())->show())) {\r\n    func(data, this);\r\n}\r\n```', 'comment_created': datetime.datetime(2020, 7, 16, 18, 9, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 455993253, 'comment_body': ""Don't need `else` after `continue`."", 'comment_created': datetime.datetime(2020, 7, 16, 18, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 456015665, 'comment_body': 'I know that the code below here is not yours, but it could still use the nicer syntax I suggested [here](https://github.com/musescore/MuseScore/pull/6274#discussion_r454745688). (Though I actually think it would be better to put it in `SpannerSegment::scanElements`.)', 'comment_created': datetime.datetime(2020, 7, 16, 19, 18, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 456038227, 'comment_body': ""I actually think it would be better in `SpannerSegment::scanElements`. Where possible, each class should handle its own special cases rather than relying on parents to know about them. (So far tuplet number seems to be the only case where it's not possible and it has to be done by the parent.) This is probably the most elegant way to do it:\r\n\r\n```c++\r\nstatic bool isVisibleCR(Element* e)\r\n{\r\n    if (!e || !e->isChordRest()) {\r\n        return true; // assume visible\r\n    }\r\n    ChordRest* cr = toChordRest(e);\r\n    return cr->measure()->visible(cr->staffIdx());\r\n}\r\n\r\nbool Spanner::eitherEndVisible()\r\n{\r\n    if (isVolta()) {\r\n        return true;\r\n    }\r\n    if (!score()->staff(staffIdx())->show()) {\r\n        return false;\r\n    }\r\n    return isVisibleCR(startElement()) || isVisibleCR(endElement());\r\n}\r\n\r\nvoid SpannerSegment::scanElements(void* data, void (* func)(void*, Element*), bool all)\r\n{\r\n    if(all || spanner()->eitherEndVisible()) {\r\n        func(data, this);\r\n    }\r\n}\r\n```"", 'comment_created': datetime.datetime(2020, 7, 16, 19, 49, 59, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 456145213, 'comment_body': ""Interesting! Normally systems cannot be selected. The same goes for pages, but they have special handling [here](https://github.com/musescore/MuseScore/blob/6d5f118c13d36d21400c625234e7f9e76c25497a/libmscore/mscoreview.cpp#L47-L48). Perhaps if you handle systems in a similar way then the bug will disappear?\r\n\r\nNote that the bug has nothing to do with drawing. [Element::draw](https://github.com/musescore/MuseScore/blob/944fe1b40a7eab329a2e6eec2cbdd53a79fb16e3/libmscore/element.h#L319) is a virtual function that does nothing by default, and it is not overridden by [System](https://github.com/musescore/MuseScore/blob/944fe1b40a7eab329a2e6eec2cbdd53a79fb16e3/libmscore/system.h#L79). The bug actually occurs [here](https://github.com/musescore/MuseScore/blob/9fb78e4ca7ed1327544debd3808260facd19e568/libmscore/page.cpp#L274), where `scanElements` is used to build a [BSP Tree](https://github.com/musescore/MuseScore/blob/c9f8a138529c15bf9d096e53a4a2af14af32ae11/libmscore/bsp.h#L32) of elements that will be searched to find the element at the given position. System is added to that tree when it wasn't previously.\r\n\r\nIf bugs occur with other classes then we should aim to fix them in the same way as the drawing case: Rather than skipping elements, `scanElements` should visit every element, but the effect of calling `func` on certain elements should be no-op."", 'comment_created': datetime.datetime(2020, 7, 17, 0, 6, 40, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 456145890, 'comment_body': 'Ok good! That should help avoid bugs in QAbstractItemModel.', 'comment_created': datetime.datetime(2020, 7, 17, 0, 9, 3, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 456148400, 'comment_body': 'This should probably be a test fail now that `treeChild(n)` never returns `nullptr`.', 'comment_created': datetime.datetime(2020, 7, 17, 0, 17, 38, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 456255354, 'comment_body': ""I didn't get it? This line will only skip scanning the beam in a stemless measure."", 'comment_created': datetime.datetime(2020, 7, 17, 6, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 456393486, 'comment_body': 'Okay, moved to spanner.cpp using these functions.', 'comment_created': datetime.datetime(2020, 7, 17, 11, 50, 56, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 456403844, 'comment_body': 'Yep, changed the syntax and moved to `SpannerSegment`.', 'comment_created': datetime.datetime(2020, 7, 17, 12, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}, {'comment_id': 456458048, 'comment_body': 'Ah yes. I thought this was ChordRest::scanElements, not Beam::scanElements. I think I was confused by the link (which point to Chord::scanElements and ChordRest::scanElements) and the fact that you create a ChordRest in the first line.', 'comment_created': datetime.datetime(2020, 7, 17, 13, 55, 30, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 457391231, 'comment_body': 'Changed to `ScoreElements::scanElements()` instead.', 'comment_created': datetime.datetime(2020, 7, 20, 13, 37, 48, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}]","[{'commit_sha': '348a91950fa2d3e02381219207c895c9cbd3b465', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b370d8806bc4a5e6541abf910df7b6255eeaf14b', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99325c912d6839efb9ce0f5e4c0372463be0cc8d', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd350bcada0f45066b1fe3b1fa93ca95fab5b0d4c', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1e56f0b0bf03343756b22f203527285af305c0b', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0ecbba225ff90031696bf9a0b655123fc3c2c5a', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}]",Kumar Kartikay,5488078,krkartikay@gmail.com,User,,59,,136,118
460407690,[WIP] GSoC 2020: TreeWrite refactor,"Create treewrite.cpp which reimplements write() using the score tree.

This is a work in progress.

Here's a link to diffs between the original and new files produced by treewrite.cpp:  [layout_elements.mscx](https://gist.github.com/Kartikay26/e0eaff9b12011ae81f089e6b56a15133)

I am currently working on reducing these diffs and adding the remaining elements.
You can find the latest GSoC progress blog post here: https://musescore.org/en/user/1743616/blog/2020/08/11/gsoc-2020-tree-model-week-10",False,6405,https://api.github.com/repos/musescore/MuseScore/pulls/6405,https://github.com/musescore/MuseScore/pull/6405,closed,1077,435,19,8,2,4,1,0,[{'name': 'archived'}],2020-07-31 18:57:33+00:00,2020-12-29 22:36:37+00:00,13059544.0,"151 days, 3:39:04","[{'comment_id': 463973985, 'comment_body': 'Should it be `||` rather than `&&`?', 'comment_created': datetime.datetime(2020, 8, 1, 15, 43, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 463975573, 'comment_body': 'Could just be `else if (staffIdx == 0)`.', 'comment_created': datetime.datetime(2020, 8, 1, 16, 1, 49, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 464493120, 'comment_body': 'What happens if Voice 3 has notes but Voice 2 was empty? The current format inserts empty`<voice/>` tags for empty voices up to the last non-empty voice.\r\n\r\nYou could keep an `insertEmptyVoices` counter and insert that many voices before starting a non-empty voice.\r\n\r\n```c++\r\nfor (; insertEmptyVoices > 0; --insertEmptyVoices) {\r\n    xml.tagE(""voice"");\r\n}\r\n```\r\n\r\nThere should probably be a test for this somewhere. There should be one measure with voice 2 empty, one with voice 3 empty, and one with voice 2 and 3 empty. I don\'t think voice 1 can be empty, but if it can then that should be tested too.', 'comment_created': datetime.datetime(2020, 8, 3, 15, 36, 14, tzinfo=datetime.timezone.utc), 'commenter': 'shoogle', 'type': 'User'}, {'comment_id': 464504319, 'comment_body': ""Oh right, I didn't realise that the current format also has tags for empty voices up to the non empty one. I'll correct this."", 'comment_created': datetime.datetime(2020, 8, 3, 15, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'krkartikay', 'type': 'User'}]","[{'commit_sha': 'a0c987afee61fe8e0adfc58a5269d0bb0e6cd6cf', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b398d3c50f284e8faf8f5194caf76d7d303237b8', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cfb5dd594243cfcd4d7822586524749adb657b56', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd55d0863a008a39b486783daf1f5b271bdaf5dc8', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db7155e43e5e75b7b4801405cc705e87ad4ea537', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe612323c8aed0f0c9ad3149ea6fc47b1c88e76e', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7bad222dfc0268f134a87f277f31e6c318419625', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0296b987db06abe3f278eb454dd0457591fda56', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}]",Kumar Kartikay,5488078,krkartikay@gmail.com,User,,59,,136,118
468931725,[MU4] GSoC 2020: Change ScoreView to QAbstractItemView (Also adds tooltips),"Resolves: Currently none, but in the future may help with https://musescore.org/en/node/12074, https://musescore.org/en/node/270143, https://musescore.org/en/node/301495, etc.

This PR makes ScoreView a QAbstractItemView instead of a QWidget, and the corresponding QAbstractItemModel is the ScoreItemModel (based on the score tree, introduced in PR #6174).

Right now, the only observable effect of this PR is that tooltips are shown automatically for each element when you hover your mouse on them.

![tooltips-image](https://user-images.githubusercontent.com/5488078/90418706-1dbf0280-e0d3-11ea-8f87-3ad038fd6e03.png)

By implementing various virtual functions of QAbstractItemView, this could help with better accessibility, keyboard navigation, etc.",False,6464,https://api.github.com/repos/musescore/MuseScore/pulls/6464,https://github.com/musescore/MuseScore/pull/6464,closed,174,19,8,2,4,0,0,0,[],2020-08-17 16:21:12+00:00,2022-12-20 09:53:06+00:00,73848714.0,"854 days, 17:31:54",[],"[{'commit_sha': 'e9525989a5c42a3f3605407c3e2b962aa686c5b2', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}, {'commit_sha': '75ddd32afe3d2bdef3fcb029114ad52ee8f0edff', 'committer_username': 'krkartikay', 'committer_name': 'Kumar Kartikay', 'committer_email': 'krkartikay@gmail.com', 'commit_date': datetime.datetime(2013, 9, 18, 16, 16, 51, tzinfo=datetime.timezone.utc)}]",Kumar Kartikay,5488078,krkartikay@gmail.com,User,,59,,136,118

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
4454793,MuseScore,musescore/MuseScore,C++,2581,11977,240,427,37256,2734,111,132,"[{'id': 468931725, 'number': 6464, 'closed': datetime.datetime(2022, 12, 20, 9, 53, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 17, 16, 21, 12, tzinfo=datetime.timezone.utc), 'time_taken': 73848714.0, 'time_delta': '854 days, 17:31:54', 'additions': 174, 'deletions': 19, 'state': 'closed'}, {'id': 460407690, 'number': 6405, 'closed': datetime.datetime(2020, 12, 29, 22, 36, 37, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 31, 18, 57, 33, tzinfo=datetime.timezone.utc), 'time_taken': 13059544.0, 'time_delta': '151 days, 3:39:04', 'additions': 1077, 'deletions': 435, 'state': 'closed'}, {'id': 441492939, 'number': 6274, 'closed': datetime.datetime(2020, 8, 11, 12, 18, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 29, 15, 31, 27, tzinfo=datetime.timezone.utc), 'time_taken': 3703613.0, 'time_delta': '42 days, 20:46:53', 'additions': 431, 'deletions': 408, 'state': 'closed'}, {'id': 429742469, 'number': 6174, 'closed': datetime.datetime(2020, 6, 29, 17, 18, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 6, 7, 5, 22, 39, tzinfo=datetime.timezone.utc), 'time_taken': 1943725.0, 'time_delta': '22 days, 11:55:25', 'additions': 1708, 'deletions': 67, 'state': 'closed'}, {'id': 390861862, 'number': 5835, 'closed': datetime.datetime(2020, 4, 28, 12, 2, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 19, 8, 21, 21, tzinfo=datetime.timezone.utc), 'time_taken': 3469249.0, 'time_delta': '40 days, 3:40:49', 'additions': 2, 'deletions': 0, 'state': 'closed'}, {'id': 384696483, 'number': 5786, 'closed': datetime.datetime(2020, 3, 10, 10, 6, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 6, 8, 33, 6, tzinfo=datetime.timezone.utc), 'time_taken': 351232.0, 'time_delta': '4 days, 1:33:52', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 380286412, 'number': 5760, 'closed': datetime.datetime(2020, 5, 2, 22, 51, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 26, 14, 2, 36, tzinfo=datetime.timezone.utc), 'time_taken': 5734142.0, 'time_delta': '66 days, 8:49:02', 'additions': 296, 'deletions': 109, 'state': 'closed'}, {'id': 375732053, 'number': 5719, 'closed': datetime.datetime(2020, 4, 25, 10, 17, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 2, 15, 16, 14, 51, tzinfo=datetime.timezone.utc), 'time_taken': 6026553.0, 'time_delta': '69 days, 18:02:33', 'additions': 9, 'deletions': 1, 'state': 'closed'}, {'id': 356682394, 'number': 5550, 'closed': datetime.datetime(2019, 12, 27, 9, 22, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2019, 12, 24, 17, 58, 9, tzinfo=datetime.timezone.utc), 'time_taken': 228259.0, 'time_delta': '2 days, 15:24:19', 'additions': 10, 'deletions': 0, 'state': 'closed'}]"
