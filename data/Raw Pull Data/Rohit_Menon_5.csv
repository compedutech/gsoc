pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
685657481,Making ENV Ractor-safe,"It is important that the ENV object be accessible in Ractors. To make it Ractor-safe, its methods that get/set its values are now synchronized with this modification. This is done by placing a mutex around each of these methods. With this, the ENV object is now Ractor-safe and shareable. Additionally, tests are added to ensure that its behavior is correct in Ractors. ",False,4636,https://api.github.com/repos/ruby/ruby/pulls/4636,https://github.com/ruby/ruby/pull/4636,closed,1017,71,3,12,5,6,0,0,[],2021-07-08 03:37:54+00:00,2021-12-14 08:34:23+00:00,13755389.0,"159 days, 4:56:29","[{'comment_id': 673626278, 'comment_body': '```suggestion\r\nstatic rb_nativethread_lock_t env_lock;\r\n\r\nstatic const char*\r\n```', 'comment_created': datetime.datetime(2021, 7, 21, 3, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'nobu', 'type': 'User'}, {'comment_id': 673644753, 'comment_body': 'Copied entries may no longer be valid once other threads change any envs.', 'comment_created': datetime.datetime(2021, 7, 21, 4, 4, 57, tzinfo=datetime.timezone.utc), 'commenter': 'nobu', 'type': 'User'}, {'comment_id': 673644994, 'comment_body': ""More accurately, this function doesn't copy the env contents."", 'comment_created': datetime.datetime(2021, 7, 21, 4, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'nobu', 'type': 'User'}, {'comment_id': 674266820, 'comment_body': 'Thank you for your time in reviewing this!\r\n\r\nI agree that the function is not creating a deep copy of the environment contents. However, in my tests, simply copying the pointer to the original environment was enough. know that inconsistencies in the data are possible, but I believe that ENV already has inconsistent behavior when used in simultaneous threads. Is there a case I missed that causes an error in the program?\r\n\r\nThanks again!\r\n', 'comment_created': datetime.datetime(2021, 7, 21, 19, 27, 33, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 674431712, 'comment_body': ""Therefore `ENV` isn't ractor-safe.\r\nBefore the ractor, GVL prevented it from the inconsistencies."", 'comment_created': datetime.datetime(2021, 7, 22, 0, 39, 2, tzinfo=datetime.timezone.utc), 'commenter': 'nobu', 'type': 'User'}, {'comment_id': 675273042, 'comment_body': 'Thank you. I will think about it some more.', 'comment_created': datetime.datetime(2021, 7, 23, 2, 32, 22, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}]","[{'commit_sha': '2376ddc4415002bad8086b11f703d0e1e64c48ca', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08f7459781c772ecf9d25bd2455888824acf7507', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b42133131ff052d9fde701a2b2d50d53de372770', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e10420eec49fd5f03d17fc337b94189717d7adcb', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4657431faab57657a8ce6a4b0d83fed2dc8506c', 'committer_username': 'nobu', 'committer_name': 'Nobuyoshi Nakada', 'committer_email': None, 'commit_date': datetime.datetime(2008, 7, 10, 19, 6, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '576444d38dd6afaf82b2d3f1d65fbf2035fa86f0', 'committer_username': 'nobu', 'committer_name': 'Nobuyoshi Nakada', 'committer_email': None, 'commit_date': datetime.datetime(2008, 7, 10, 19, 6, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6829f5204ed7f09fda3e296b73cc0d3b63270d2', 'committer_username': 'nobu', 'committer_name': 'Nobuyoshi Nakada', 'committer_email': None, 'commit_date': datetime.datetime(2008, 7, 10, 19, 6, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b5b7a87051a6b5b69c2c3ed3d7e7d8938edb1bbd', 'committer_username': 'nobu', 'committer_name': 'Nobuyoshi Nakada', 'committer_email': None, 'commit_date': datetime.datetime(2008, 7, 10, 19, 6, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74e0466fdfbc1de6000afe4d7f4dfeb438134e8e', 'committer_username': 'nobu', 'committer_name': 'Nobuyoshi Nakada', 'committer_email': None, 'commit_date': datetime.datetime(2008, 7, 10, 19, 6, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c9be9044232350628b60af1004eeeca3d680daa1', 'committer_username': 'nobu', 'committer_name': 'Nobuyoshi Nakada', 'committer_email': None, 'commit_date': datetime.datetime(2008, 7, 10, 19, 6, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5dd04379c2d165059de4429cd882640d5519b0c7', 'committer_username': 'nobu', 'committer_name': 'Nobuyoshi Nakada', 'committer_email': None, 'commit_date': datetime.datetime(2008, 7, 10, 19, 6, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dbb964a3f16bb92cf649142c789adfee11f39935', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715451638,Improve Ractor-compliance,"By freezing constants and avoiding class variables, URI can improve its ability to be used in Ractors.",False,29,https://api.github.com/repos/ruby/uri/pulls/29,https://github.com/ruby/uri/pull/29,open,19,19,4,1,0,0,0,0,[],2021-08-18 22:14:38+00:00,,0.0,,[],"[{'commit_sha': '5a9afbf00a92524daf77af9d0e263fc7c403422b', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
717037617,Improve Ractor-compliance,"In order to be Ractor-compliant, tmpdir must avoid relying on class variables. In non-main Ractors, where @@systmpdir cannot be accessed, a default value can be used instead.

Additionally, instance of the class Random cannot be made shareable, so RANDOM can be an instance of Object instead. This means that the “next” method would use Kernel#rand instead of Random#rand, but the method should still work. 
",False,9,https://api.github.com/repos/ruby/tmpdir/pulls/9,https://github.com/ruby/tmpdir/pull/9,open,12,2,1,1,0,0,0,0,[],2021-08-20 22:57:04+00:00,,0.0,,[],"[{'commit_sha': '9ab98cda446e9d204f45a84024a6dc3c0486c5c5', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715368495,Freeze VERSION for Ractor-compliance,"By being frozen, the version number can be checked within Ractors.",True,4,https://api.github.com/repos/ruby/timeout/pulls/4,https://github.com/ruby/timeout/pull/4,closed,1,1,1,1,0,0,0,0,[],2021-08-18 19:44:58+00:00,2021-09-27 10:36:17+00:00,3423079.0,"39 days, 14:51:19",[],"[{'commit_sha': 'ac7b010c41513e161c67903a70c1aa761173c368', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715369986,Freeze VERSION for Ractor-compliance,"By being frozen, the version number can be checked within Ractors.",True,11,https://api.github.com/repos/ruby/benchmark/pulls/11,https://github.com/ruby/benchmark/pull/11,closed,1,0,1,1,0,0,0,0,[],2021-08-18 19:47:24+00:00,2021-12-09 03:18:18+00:00,9703854.0,"112 days, 7:30:54",[],"[{'commit_sha': '89b889b1090efe03c4520d19280882a9ab58bd70', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715384193,Improve Ractor-compliance,"By using Ractor-local storage instead of class variables, WeakRef can be used within Ractors.",False,2,https://api.github.com/repos/ruby/weakref/pulls/2,https://github.com/ruby/weakref/pull/2,open,15,3,1,1,0,0,0,0,[],2021-08-18 20:10:28+00:00,,0.0,,[],"[{'commit_sha': '74341b55036436014518c3d9a04ec7aa89960ae9', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715385760,Improve Ractor-compliance,"By freezing constants, ipaddr can improve its ability to be used in Ractors.",False,30,https://api.github.com/repos/ruby/ipaddr/pulls/30,https://github.com/ruby/ipaddr/pull/30,closed,5,11,2,5,5,0,0,0,[],2021-08-18 20:12:57+00:00,2022-09-08 05:09:48+00:00,33296211.0,"385 days, 8:56:51",[],"[{'commit_sha': '0ac38c4dbbceefc6c2eb8d0cd5652840b37c93f7', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8be511b6d940b9334c2dc28c4885e73fc20982b0', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '844febf5b8410dbcfc179a864726dae5c03074f4', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18604e585270540d7a05ae5239c394e062c8a9bb', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '25052de3b2b9ac738b247006055d3224d900fe39', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715388639,Improve Ractor-compliance,"This change lets Delegate avoid using shared data, and it makes sure that methods are defined using shareable Procs. In this way, Delegate's ability to be used within Ractors is increased.",False,4,https://api.github.com/repos/ruby/delegate/pulls/4,https://github.com/ruby/delegate/pull/4,open,42,15,1,1,0,4,0,0,[],2021-08-18 20:17:34+00:00,,0.0,,"[{'comment_id': 1042064020, 'comment_body': 'Would it be enough to `Ractor.make_shareable(KERNEL_RESPOND_TO)` here?', 'comment_created': datetime.datetime(2022, 12, 7, 10, 58, 54, tzinfo=datetime.timezone.utc), 'commenter': 'eregon', 'type': 'User'}, {'comment_id': 1045300532, 'comment_body': ""I think that unbound methods can't be made shareable right now. When I use `make_shareable` on `KERNEL_RESPOND_TO`, I get an error. So I think a workaround is needed for now. "", 'comment_created': datetime.datetime(2022, 12, 11, 21, 38, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 1045823607, 'comment_body': ""Ah indeed:\r\n```\r\nirb(main):001:0> KERNEL_RESPOND_TO = ::Kernel.instance_method(:respond_to?)\r\n=> #<UnboundMethod: Kernel#respond_to?(*)>\r\nirb(main):002:0> Ractor.make_shareable KERNEL_RESPOND_TO\r\n<internal:ractor>:816:in `make_shareable': can not make shareable object for #<UnboundMethod: Kernel#respond_to?(*)> (Ractor::Error)\r\n        from (irb):2:in `<main>'                                              \r\n        from /home/eregon/.rubies/ruby-3.1.2/lib/ruby/gems/3.1.0/gems/irb-1.4.1/exe/irb:11:in `<top (required)>'\r\n        from /home/eregon/.rubies/ruby-3.1.2/bin/irb:25:in `load'             \r\n        from /home/eregon/.rubies/ruby-3.1.2/bin/irb:25:in `<main>'     \r\n```\r\nI think it's worth reporting to https://bugs.ruby-lang.org/, could you do that?"", 'comment_created': datetime.datetime(2022, 12, 12, 13, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'eregon', 'type': 'User'}, {'comment_id': 1045824528, 'comment_body': 'cc @ko1 ', 'comment_created': datetime.datetime(2022, 12, 12, 13, 25, 14, tzinfo=datetime.timezone.utc), 'commenter': 'eregon', 'type': 'User'}]","[{'commit_sha': 'da4be8f678d9528cf8de71ce4001fbb70436768d', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715390259,Improve Ractor-compliance,"By freezing constants and using a shareable Proc with define_method, pstore becomes more Ractor-compliant.",False,2,https://api.github.com/repos/ruby/pstore/pulls/2,https://github.com/ruby/pstore/pull/2,open,7,1,1,2,0,0,0,0,[],2021-08-18 20:20:14+00:00,,0.0,,[],"[{'commit_sha': 'fa564a69650f635d0c4d89f8edc9cd363617e633', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a20f317bf496bf490b9a10820d8b0fdbb31819d2', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715391840,Allow properties to be accessed even when the object is moved to another Ractor,"By having the methods defined using shareable Procs, objects that are moved into another Ractor can still use these methods.",True,29,https://api.github.com/repos/ruby/ostruct/pulls/29,https://github.com/ruby/ostruct/pull/29,closed,20,2,2,3,3,1,0,0,[],2021-08-18 20:22:45+00:00,2021-08-20 12:12:28+00:00,143383.0,"1 day, 15:49:43","[{'comment_id': 723572961, 'comment_body': 'I was thinking this would have the side effect of freezing the OpenStruct instance and `@table` but actually it does not, which is a CRuby bug: https://bugs.ruby-lang.org/issues/18243\r\nA Ractor should never be able to mutate objects of another Ractor directly of course.', 'comment_created': datetime.datetime(2021, 10, 6, 18, 30, 36, tzinfo=datetime.timezone.utc), 'commenter': 'eregon', 'type': 'User'}]","[{'commit_sha': 'fb8c5ac27f36cabadbd6b06d24a2c72fdbd4f071', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a52067b3782b8f966a22c454587703cbb0447d8b', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad6e99520c7fea0a37d06957ccc82a4c79c54649', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715393688,Improve Ractor-compliance,"By freezing VERSION and FORWARDABLE_VERSION, these constants can be accessed from Ractors.",True,21,https://api.github.com/repos/ruby/forwardable/pulls/21,https://github.com/ruby/forwardable/pull/21,closed,2,0,1,1,0,0,0,0,[],2021-08-18 20:25:49+00:00,2022-09-08 05:25:36+00:00,33296387.0,"385 days, 8:59:47",[],"[{'commit_sha': 'c91f41f4fa935de57f9bb87927a47a64ebe54a83', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715447683,Create RactorLocalSingleton,"Classes that include Singleton cannot be used within Ractors, since the instance can only exist within the main Ractor. By creating RactorLocalSingleton, classes have the option of instead having one instance per Ractor.",False,4,https://api.github.com/repos/ruby/singleton/pulls/4,https://github.com/ruby/singleton/pull/4,open,87,20,1,5,11,4,0,0,[],2021-08-18 22:07:20+00:00,,0.0,,"[{'comment_id': 709016772, 'comment_body': 'Is this intentional? I think `VERSION = ""0.1.1"".freeze` is the correct change.', 'comment_created': datetime.datetime(2021, 9, 15, 9, 36, 56, tzinfo=datetime.timezone.utc), 'commenter': 'hsbt', 'type': 'User'}, {'comment_id': 709025138, 'comment_body': ""Why aren't we just using `frozen_string_literal: true`?"", 'comment_created': datetime.datetime(2021, 9, 15, 9, 47, 57, tzinfo=datetime.timezone.utc), 'commenter': 'ioquatix', 'type': 'User'}, {'comment_id': 710682563, 'comment_body': ""Thank you both! I meant to clean that up. I've changed it, and it should be fixed now!"", 'comment_created': datetime.datetime(2021, 9, 17, 2, 49, 53, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 710727670, 'comment_body': '👍 ', 'comment_created': datetime.datetime(2021, 9, 17, 4, 1, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hsbt', 'type': 'User'}]","[{'commit_sha': '51b8cf6d4750bb65c33955d7705c82cccc3a592b', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9cb82800ee6042779a984fefdaa7d00f2d09f0b4', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59e3345a54e61cc3ad82358c97fda4d0147570f0', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3abd1dea9111419850b88740098657752273c034', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '396035460a920ccc35827022d14a7ab1584102df', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
717040852,Improve Ractor-compliance,"In order to become Ractor-compliant, CSV should avoid relying on class variables and global variables.

Additionally, since Converters and HeaderConverters are not accessible from Ractors, defining get_converters and get_header_converters (which access Ractor-local versions) can allow for an alternative within Ractors.",True,218,https://api.github.com/repos/ruby/csv/pulls/218,https://github.com/ruby/csv/pull/218,closed,94,6,5,14,6,31,0,0,[],2021-08-20 23:07:30+00:00,2021-10-11 02:21:42+00:00,4418052.0,"51 days, 3:14:12","[{'comment_id': 693276149, 'comment_body': ""We can't accept this because this breaks backward compatibility."", 'comment_created': datetime.datetime(2021, 8, 21, 0, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 693276169, 'comment_body': ""We can't accept this because this breaks backward compatibility."", 'comment_created': datetime.datetime(2021, 8, 21, 0, 36, 10, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 693276298, 'comment_body': 'Ractor users should not use `CSV.instance`.\r\nThey should create your own CSV instance.', 'comment_created': datetime.datetime(2021, 8, 21, 0, 36, 52, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 693276841, 'comment_body': ""Why do we need to avoid using `$INPUT_RECORD_SEPARATOR`?\r\nIt's sharable in Ractors because it's a frozen string."", 'comment_created': datetime.datetime(2021, 8, 21, 0, 40, 56, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 693277814, 'comment_body': 'Can we use constant instead of class variable to avoid multiple `StringScanner.new.scan` check?', 'comment_created': datetime.datetime(2021, 8, 21, 0, 48, 30, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 693278365, 'comment_body': ""Ah, this keeps backward compatibility.\r\nBut Ractor users can't use converters added by users."", 'comment_created': datetime.datetime(2021, 8, 21, 0, 51, 41, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 693292331, 'comment_body': 'I believe this change basically makes CSV.instance find a Ractor-local instance. Could you explain more about why this might be a problem? Thanks!', 'comment_created': datetime.datetime(2021, 8, 21, 2, 50, 44, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 693292776, 'comment_body': ""I agree that it is a frozen string, but according to the specifications $INPUT_RECORD_SEPARATOR can't be used outside the main Ractor. Unless it's outdated, I think that this was mentioned here (as $/):   https://bugs.ruby-lang.org/issues/17268. I hope I've understood correctly!"", 'comment_created': datetime.datetime(2021, 8, 21, 2, 55, 29, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 693292964, 'comment_body': 'Yes, I see what you mean. I can make that change soon. Thanks!', 'comment_created': datetime.datetime(2021, 8, 21, 2, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 693293627, 'comment_body': ""I agree that if a user defines a converter in the main Ractor, then the converter can't automatically be used from non-main-Ractors. This change would allow users to define converters within one Ractor and use them just within the same Ractor. This can be done by getting the Ractor-local converters hash with get_converters, and then adding to it.\r\n\r\nWithout the change, converters are completely inaccessible from Ractors, so I think having Ractor-local versions is a step forward. Since it does not currently seem possible to have shared hashes among Ractors, I am not sure how the ideal situation could be achieved."", 'comment_created': datetime.datetime(2021, 8, 21, 3, 4, 11, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 694288125, 'comment_body': 'Yes. `CSV.instance` can work in Ractor with this change.\r\nIt\'s just API design decision that we don\'t recommend (support) to use `CSV.instance` in Ractor.\r\nWe can just add ""This API isn\'t Ractor-safe"" to document here.', 'comment_created': datetime.datetime(2021, 8, 23, 20, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 694289417, 'comment_body': ""We don't want to add `core_assertions` again.\r\nI'll consider how to solve this. Please wait for a while."", 'comment_created': datetime.datetime(2021, 8, 23, 20, 34, 35, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 694289831, 'comment_body': '@ko1 Should we avoid using `$/` in Ractor?', 'comment_created': datetime.datetime(2021, 8, 23, 20, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 694343254, 'comment_body': 'Okay, I understand!', 'comment_created': datetime.datetime(2021, 8, 23, 22, 11, 17, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 694343474, 'comment_body': 'Sure, thanks!', 'comment_created': datetime.datetime(2021, 8, 23, 22, 11, 39, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 694393103, 'comment_body': 'Ah, https://bugs.ruby-lang.org/issues/18129 ?', 'comment_created': datetime.datetime(2021, 8, 24, 0, 20, 45, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 694396066, 'comment_body': '`$/` is deprecated since Ruby 3.0: https://bugs.ruby-lang.org/issues/14240\r\nWe may be able to replace `$INPUT_RECORD_SEPARATOR` by \'""\\n""\' with Ruby 3.0 or later.', 'comment_created': datetime.datetime(2021, 8, 24, 0, 29, 54, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 706546199, 'comment_body': 'Could you use this change for tests that use Ractor?\r\n\r\n```diff\r\ndiff --git a/csv.gemspec b/csv.gemspec\r\nindex 6948e9a..15ffc49 100644\r\n--- a/csv.gemspec\r\n+++ b/csv.gemspec\r\n@@ -60,5 +60,5 @@ Gem::Specification.new do |spec|\r\n   spec.add_development_dependency ""bundler""\r\n   spec.add_development_dependency ""rake""\r\n   spec.add_development_dependency ""benchmark_driver""\r\n-  spec.add_development_dependency ""test-unit"", "">= 3.4.3""\r\n+  spec.add_development_dependency ""test-unit"", "">= 3.4.6""\r\n end\r\ndiff --git a/test/csv/interface/test_read.rb b/test/csv/interface/test_read.rb\r\nindex 62ddae2..4ec40ec 100644\r\n--- a/test/csv/interface/test_read.rb\r\n+++ b/test/csv/interface/test_read.rb\r\n@@ -32,6 +32,24 @@ class TestCSVInterfaceRead < Test::Unit::TestCase\r\n     assert_equal(@rows, rows)\r\n   end\r\n \r\n+  if respond_to?(:ractor)\r\n+    ractor\r\n+    def test_foreach_in_ractor\r\n+      ractor = Ractor.new(@input.path) do |path|\r\n+        rows = []\r\n+        CSV.foreach(path, col_sep: ""\\\\t"", row_sep: ""\\\\r\\\\n"").each do |row|\r\n+          rows << row\r\n+        end\r\n+        Ractor.yield rows\r\n+      end\r\n+      rows = [\r\n+        [""1"", ""2"", ""3""],\r\n+        [""4"", ""5""],\r\n+      ]\r\n+      assert_equal(rows, ractor.take)\r\n+    end\r\n+  end\r\n+\r\n   def test_foreach_mode\r\n     rows = []\r\n     CSV.foreach(@input.path, ""r"", col_sep: ""\\t"", row_sep: ""\\r\\n"").each do |row|\r\n```', 'comment_created': datetime.datetime(2021, 9, 11, 2, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 706628412, 'comment_body': 'Okay, I have tried using this change instead of assert_ractor. It seems to work, but please let me know if I should change it in any way. Thanks!', 'comment_created': datetime.datetime(2021, 9, 11, 15, 49, 51, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}, {'comment_id': 706916898, 'comment_body': 'Done on master.', 'comment_created': datetime.datetime(2021, 9, 12, 21, 44, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 708897485, 'comment_body': ""I decided API for `Converters` and `HeaderConverters`:\r\n\r\n* If a Ractor user doesn't use any built-in converters, the user can use `CSV`. (committed)\r\n* If a Ractor user wants to use any built-in converters in non-main-Ractors, the user must call `Ractor.make_sharable(CSV::Converters)` and `Ractor.make_sharedable(CSV::HeaderConverters)` after the user adds additional converters and before non-main-Ractors are created.\r\n  * This should be documented. (Could you work on it in this pull request?)\r\n"", 'comment_created': datetime.datetime(2021, 9, 15, 7, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 708897665, 'comment_body': 'Could you document it in this pull request?', 'comment_created': datetime.datetime(2021, 9, 15, 7, 4, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 708898156, 'comment_body': 'Could you rebase on master?\r\nYou need to resolve conflict. Sorry.', 'comment_created': datetime.datetime(2021, 9, 15, 7, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 708898401, 'comment_body': '```suggestion\r\n  if respond_to?(:ractor)\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 7, 5, 46, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 708898715, 'comment_body': '```suggestion\r\n  if respond_to?(:ractor)\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 7, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 708898950, 'comment_body': '```suggestion\r\n  if respond_to?(:ractor)\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 7, 6, 33, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 708899055, 'comment_body': '```suggestion\r\n  if respond_to?(:ractor)\r\n```', 'comment_created': datetime.datetime(2021, 9, 15, 7, 6, 43, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 725738602, 'comment_body': ""I think that  we don't need this care.\r\nWe can just document that this method needs `Ractor.make_sharable(CSV::Converters)`."", 'comment_created': datetime.datetime(2021, 10, 11, 1, 35, 28, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 725738681, 'comment_body': ""It seems that this is caused by rebase mistake. I'll try it again."", 'comment_created': datetime.datetime(2021, 10, 11, 1, 36, 3, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 725738761, 'comment_body': ""I'll apply this style fix."", 'comment_created': datetime.datetime(2021, 10, 11, 1, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'kou', 'type': 'User'}, {'comment_id': 725752592, 'comment_body': 'Yes, some kind of glitch happened as I was submitting the rebase. I tried to fix it, but I guess I missed a few parts. Sorry for the inconvenience, and thanks for fixing it!', 'comment_created': datetime.datetime(2021, 10, 11, 2, 35, 48, tzinfo=datetime.timezone.utc), 'commenter': 'rm155', 'type': 'User'}]","[{'commit_sha': '7cbc03792adbb23730b31f04ab4a70ebcb6162da', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2c1d122dce41a7d377e18cf650f9b2522d36e9a', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f4a2baf5f1249a5b5cfee267b51125dabae9807', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e82e639d1af613a447a93bc3158fab83dd16a71', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '116a17928a3b9ddd4229744ee371b5004caa49e4', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e51a44e1bd107515de64b4a9737b59670dd3751', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3ba84ae28018b7ac1d913b111b85ce6f4787aa8', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3deda10dd026865cf5611f70791775c5c4f8b6da', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b66272e2bdac455085bea978be665adb50576fe6', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '062a86a5473ea768e184ad88c0136ceca397122f', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '648b81e3b08221324342f8383792c8f1638483b8', 'committer_username': 'kou', 'committer_name': 'Sutou Kouhei', 'committer_email': 'kou@clear-code.com', 'commit_date': datetime.datetime(2008, 10, 2, 23, 17, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '446dabbd7358bace8850dec7edd4efb61dc06141', 'committer_username': 'kou', 'committer_name': 'Sutou Kouhei', 'committer_email': 'kou@clear-code.com', 'commit_date': datetime.datetime(2008, 10, 2, 23, 17, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1cb1bbaeaa4ca254692cdaee90b7a3ea2d4e043', 'committer_username': 'kou', 'committer_name': 'Sutou Kouhei', 'committer_email': 'kou@clear-code.com', 'commit_date': datetime.datetime(2008, 10, 2, 23, 17, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17a71dcfbd8ea0c26f8d732685cd5d2928a2513e', 'committer_username': 'kou', 'committer_name': 'Sutou Kouhei', 'committer_email': 'kou@clear-code.com', 'commit_date': datetime.datetime(2008, 10, 2, 23, 17, 52, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715395091,Make VERSION shareable,"By making VERSION shareable, it can be accessed within Ractors.",True,7,https://api.github.com/repos/ruby/mutex_m/pulls/7,https://github.com/ruby/mutex_m/pull/7,closed,1,0,1,1,0,0,0,0,[],2021-08-18 20:28:14+00:00,2021-10-18 11:24:44+00:00,5237790.0,"60 days, 14:56:30",[],"[{'commit_sha': 'a839e29d04bdb8a3f6dfc2bd3f66dcf5658a5e93', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
715395932,Improve Ractor-compliance,"By freezing constants and moving from class variables to Ractor-local storage, error-highlight can improve its ability to be used within Ractors.",False,11,https://api.github.com/repos/ruby/error_highlight/pulls/11,https://github.com/ruby/error_highlight/pull/11,closed,3,3,2,1,2,0,0,0,[],2021-08-18 20:29:36+00:00,2021-10-27 02:35:11+00:00,5983535.0,"69 days, 6:05:35",[],"[{'commit_sha': 'd2ce67320d83cf45f45858f25126bb5a0120696b', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3
717252956,Improve Ractor-compliance,"The did_you_mean library has some areas that are incompatible in Ractors. These can be fixed by freezing constants and avoiding class variables, and also making some of the hashes Ractor-local.",False,163,https://api.github.com/repos/ruby/did_you_mean/pulls/163,https://github.com/ruby/did_you_mean/pull/163,closed,100,23,7,2,1,0,0,0,[],2021-08-22 05:34:50+00:00,2022-01-21 10:05:38+00:00,13149048.0,"152 days, 4:30:48",[],"[{'commit_sha': 'a7edfd7955d83d4585b214116f050d7c571429ab', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2ef711a365ec40cb7dcdbac95b0e74207aa5613f', 'committer_username': 'rm155', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 6, 25, 3, 59, 22, tzinfo=datetime.timezone.utc)}]",,86454369,,User,,19,,0,3

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
538746,ruby,ruby/ruby,Ruby,5302,21847,1099,924,86877,431,27,431,"[{'id': 685657481, 'number': 4636, 'closed': datetime.datetime(2021, 12, 14, 8, 34, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 8, 3, 37, 54, tzinfo=datetime.timezone.utc), 'time_taken': 13755389.0, 'time_delta': '159 days, 4:56:29', 'additions': 1017, 'deletions': 71, 'state': 'closed'}]"
200769931,uri,ruby/uri,Ruby,41,78,29,57,438,15,6,4,"[{'id': 715451638, 'number': 29, 'closed': None, 'created': datetime.datetime(2021, 8, 18, 22, 14, 38, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 19, 'deletions': 19, 'state': 'open'}]"
239687169,tmpdir,ruby/tmpdir,Ruby,11,5,29,19,134,4,1,3,"[{'id': 717037617, 'number': 9, 'closed': None, 'created': datetime.datetime(2021, 8, 20, 22, 57, 4, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 12, 'deletions': 2, 'state': 'open'}]"
200772043,timeout,ruby/timeout,Ruby,20,141,32,29,168,4,1,0,"[{'id': 715368495, 'number': 4, 'closed': datetime.datetime(2021, 9, 27, 10, 36, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 19, 44, 58, tzinfo=datetime.timezone.utc), 'time_taken': 3423079.0, 'time_delta': '39 days, 14:51:19', 'additions': 1, 'deletions': 1, 'state': 'closed'}]"
200768946,benchmark,ruby/benchmark,Ruby,19,152,32,21,96,6,1,4,"[{'id': 715369986, 'number': 11, 'closed': datetime.datetime(2021, 12, 9, 3, 18, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 19, 47, 24, tzinfo=datetime.timezone.utc), 'time_taken': 9703854.0, 'time_delta': '112 days, 7:30:54', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
200771176,weakref,ruby/weakref,Ruby,7,13,30,17,90,2,1,1,"[{'id': 715384193, 'number': 2, 'closed': None, 'created': datetime.datetime(2021, 8, 18, 20, 10, 28, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 15, 'deletions': 3, 'state': 'open'}]"
97675076,ipaddr,ruby/ipaddr,Ruby,35,66,31,37,174,12,2,5,"[{'id': 715385760, 'number': 30, 'closed': datetime.datetime(2022, 9, 8, 5, 9, 48, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 20, 12, 57, tzinfo=datetime.timezone.utc), 'time_taken': 33296211.0, 'time_delta': '385 days, 8:56:51', 'additions': 5, 'deletions': 11, 'state': 'closed'}]"
200772247,delegate,ruby/delegate,Ruby,13,18,28,29,180,4,1,3,"[{'id': 715388639, 'number': 4, 'closed': None, 'created': datetime.datetime(2021, 8, 18, 20, 17, 34, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 42, 'deletions': 15, 'state': 'open'}]"
200769818,pstore,ruby/pstore,Ruby,9,71,31,23,118,1,1,1,"[{'id': 715390259, 'number': 2, 'closed': None, 'created': datetime.datetime(2021, 8, 18, 20, 20, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 7, 'deletions': 1, 'state': 'open'}]"
104867446,ostruct,ruby/ostruct,Ruby,27,109,31,34,188,12,1,6,"[{'id': 715391840, 'number': 29, 'closed': datetime.datetime(2021, 8, 20, 12, 12, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 20, 22, 45, tzinfo=datetime.timezone.utc), 'time_taken': 143383.0, 'time_delta': '1 day, 15:49:43', 'additions': 20, 'deletions': 2, 'state': 'closed'}]"
138372513,forwardable,ruby/forwardable,Ruby,17,41,28,25,141,2,1,0,"[{'id': 715393688, 'number': 21, 'closed': datetime.datetime(2022, 9, 8, 5, 25, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 20, 25, 49, tzinfo=datetime.timezone.utc), 'time_taken': 33296387.0, 'time_delta': '385 days, 8:59:47', 'additions': 2, 'deletions': 0, 'state': 'closed'}]"
200772159,singleton,ruby/singleton,Ruby,7,26,30,12,77,1,1,1,"[{'id': 715447683, 'number': 4, 'closed': None, 'created': datetime.datetime(2021, 8, 18, 22, 7, 20, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 87, 'deletions': 20, 'state': 'open'}]"
88256918,csv,ruby/csv,Ruby,113,176,47,85,745,10,2,1,"[{'id': 717040852, 'number': 218, 'closed': datetime.datetime(2021, 10, 11, 2, 21, 42, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 20, 23, 7, 30, tzinfo=datetime.timezone.utc), 'time_taken': 4418052.0, 'time_delta': '51 days, 3:14:12', 'additions': 94, 'deletions': 6, 'state': 'closed'}]"
138372421,mutex_m,ruby/mutex_m,Ruby,11,16,29,22,81,0,1,0,"[{'id': 715395091, 'number': 7, 'closed': datetime.datetime(2021, 10, 18, 11, 24, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 20, 28, 14, tzinfo=datetime.timezone.utc), 'time_taken': 5237790.0, 'time_delta': '60 days, 14:56:30', 'additions': 1, 'deletions': 0, 'state': 'closed'}]"
381297545,error_highlight,ruby/error_highlight,Ruby,23,149,31,10,67,7,1,0,"[{'id': 715395932, 'number': 11, 'closed': datetime.datetime(2021, 10, 27, 2, 35, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 20, 29, 36, tzinfo=datetime.timezone.utc), 'time_taken': 5983535.0, 'time_delta': '69 days, 6:05:35', 'additions': 3, 'deletions': 3, 'state': 'closed'}]"
16449263,did_you_mean,ruby/did_you_mean,Ruby,114,1870,55,37,796,6,9,1,"[{'id': 717252956, 'number': 163, 'closed': datetime.datetime(2022, 1, 21, 10, 5, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 22, 5, 34, 50, tzinfo=datetime.timezone.utc), 'time_taken': 13149048.0, 'time_delta': '152 days, 4:30:48', 'additions': 100, 'deletions': 23, 'state': 'closed'}]"
