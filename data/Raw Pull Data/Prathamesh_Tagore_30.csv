pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
655930985,Add remaining pieces of documentation in convolve.hpp,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

This pull request intends to add remaining pieces of documentation related to 1D convolution and correlation in convolve.hpp

<!-- What does this pull request do? -->

### References

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [ ] Ensure all CI builds pass
- [x] Review and approve
",True,611,https://api.github.com/repos/boostorg/gil/pulls/611,https://github.com/boostorg/gil/pull/611,closed,61,35,1,4,0,0,2,0,"[{'name': 'cat/documentation'}, {'name': 'google-summer-of-code'}]",2021-05-28 06:52:55+00:00,2021-05-30 18:21:46+00:00,214131.0,"2 days, 11:28:51",[],"[{'commit_sha': 'f4369d1d4ce21acac93ae8ab57c3877c874fabfc', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe1621e8824d19897e1a717e5bc92046b957d45a', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e36e31f9174ab3cac1059d1da20cf055c2634347', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd59b131daed507b94245497f703594dc5150e695', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
657423422,Add tests for checking boundary options in 1D convolution,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

This pull request intends to add unit tests for verifying boundary manipulation in `1D convolution`. Since these are tests(used for proving `correctness` of implementation), I have favoured readability/simplicity over performance(for example : All tests written inside `convolve.cpp` do not require a separate image to be created after row convolution. However, doing so greatly simplifies its structure and saves the reader from unnecessary trouble of understanding a complex manipulation). 

Flag `boundary_option::extend_padded` convolves the image assuming a padding around it. This leads to some unknown values of boundary pixels. For testing rest of the pixels(whose values can be predicted), I have deliberately made unknown values in `original_output_image` and `expected_image` equal. I have highlighted this with comments in the code.

<!-- What does this pull request do? -->


<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [ ] Ensure all CI builds pass
- [ ] Review and approve
",False,612,https://api.github.com/repos/boostorg/gil/pulls/612,https://github.com/boostorg/gil/pull/612,open,574,1,4,1,3,13,4,0,"[{'name': 'status/need-feedback'}, {'name': 'status/work-in-progress'}, {'name': 'test'}, {'name': 'google-summer-of-code'}]",2021-05-29 07:58:18+00:00,,0.0,,"[{'comment_id': 642101224, 'comment_body': 'I believe it would be better to give this kernel a name. `shift_by_two` perhaps?', 'comment_created': datetime.datetime(2021, 5, 30, 16, 48, 4, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 642101828, 'comment_body': 'Giving the 2 a name would be great. I get it that it is the offset of 1 from the center of the kernel, right? Perhaps you could name it like `kernel_shift_offset` or something like that.', 'comment_created': datetime.datetime(2021, 5, 30, 16, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 642107976, 'comment_body': 'I believe it would be better to copy into `std::vector` and then use `std:::rotate` and write back to  actually tell what is the operation we are performing. Perhaps @lpranam and @mloskot will tip the scale in either direction.', 'comment_created': datetime.datetime(2021, 5, 30, 17, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 642115514, 'comment_body': 'The test uses 1x3 kernel, am I missing some context on why this is named 1x9?', 'comment_created': datetime.datetime(2021, 5, 30, 19, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 642115682, 'comment_body': 'It seems like the test has quite a bit in common with the previous one (extend zero). Perhaps there are ways to neatly refactor them and modify only the last bit? My comment about copying into vector will not apply then.', 'comment_created': datetime.datetime(2021, 5, 30, 19, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 642116412, 'comment_body': ""Shouldn't `img_out` be just `img`? I guess it got copypasted everywhere."", 'comment_created': datetime.datetime(2021, 5, 30, 19, 13, 42, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 642117933, 'comment_body': '[Focus on the interface. (...) Use algorithms instead of loops](https://www.youtube.com/watch?v=W2tWOdzgXHA) a golden advice from [Sean Parent](https://www.meetingcpp.com/blog/items/interview-with-sean-parent.html)', 'comment_created': datetime.datetime(2021, 5, 30, 19, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 642200090, 'comment_body': 'You are right, I was using 1x9 kernel in an earlier version.', 'comment_created': datetime.datetime(2021, 5, 31, 4, 19, 38, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 642202971, 'comment_body': 'Yes you are right, we can change `img_out` to `img` there. I simply chose not to because [code](https://github.com/boostorg/gil/blob/7dd61209a81695600d773f481bb8b22b0f74a30a/test/extension/numeric/convolve.cpp#L102) committed to this file earlier was using it in that manner. However, I have no objections in changing it if we are fine with that change in existing style. Shall I change it then?', 'comment_created': datetime.datetime(2021, 5, 31, 4, 31, 6, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 643189894, 'comment_body': 'I have refactored the code now, please have a look at it and tell me if I need to change anything.', 'comment_created': datetime.datetime(2021, 6, 1, 15, 2, 8, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 643273361, 'comment_body': 'Yes, it is more natural that way and will not confuse anyone. ', 'comment_created': datetime.datetime(2021, 6, 1, 16, 34, 17, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 643273828, 'comment_body': 'A bit overengineered, but perhaps we can use it later to write more tests.', 'comment_created': datetime.datetime(2021, 6, 1, 16, 34, 37, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 643407702, 'comment_body': ""@mloskot, I have refactored the code as per @simmplecoder 's [suggestion](https://github.com/boostorg/gil/pull/612#discussion_r642115682). Can you please have a look at it and state whether this comment is resolvable."", 'comment_created': datetime.datetime(2021, 6, 1, 19, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}]","[{'commit_sha': '368155c9757283cc58af53f728d5bc58500878de', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
660616130,Add reflection option for boundary handling in 1D correlation ,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

<!-- What does this pull request do? -->

### References
Depends on #612 
resolves #608
<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [ ] Ensure all CI builds pass
- [ ] Review and approve
",False,613,https://api.github.com/repos/boostorg/gil/pulls/613,https://github.com/boostorg/gil/pull/613,open,248,5,6,1,2,2,4,0,"[{'name': 'ext/numeric'}, {'name': 'status/need-feedback'}, {'name': 'status/work-in-progress'}, {'name': 'google-summer-of-code'}]",2021-06-03 06:33:52+00:00,,0.0,,"[{'comment_id': 645953630, 'comment_body': 'Good to add comments here about what this function does, else we are gonna have confusion in future the way we did with boundary options. ', 'comment_created': datetime.datetime(2021, 6, 5, 7, 2, 6, tzinfo=datetime.timezone.utc), 'commenter': 'lpranam', 'type': 'User'}, {'comment_id': 645958987, 'comment_body': 'I have added comments, please take a look at them and state whether this comment is resolvable.', 'comment_created': datetime.datetime(2021, 6, 5, 8, 0, 34, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}]","[{'commit_sha': '1a2a9083fed8370c8dbab14313c3888ef1893713', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
704832837,Improved 2D convolution and correlation,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description
Fixes #609 
Fixes #610 
Depends on #623 
<!-- What does this pull request do? -->

### References

<!-- Any links related to this PR: issues, other PRs, mailing list threads, StackOverflow questions, etc. -->

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [ ] Ensure all CI builds pass
- [ ] Review and approve
",False,624,https://api.github.com/repos/boostorg/gil/pulls/624,https://github.com/boostorg/gil/pull/624,open,1171,196,16,15,6,3,4,0,"[{'name': 'cat/enhancement'}, {'name': 'status/need-feedback'}, {'name': 'status/work-in-progress'}, {'name': 'google-summer-of-code'}]",2021-08-05 16:00:46+00:00,,0.0,,[],"[{'commit_sha': 'f4369d1d4ce21acac93ae8ab57c3877c874fabfc', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe1621e8824d19897e1a717e5bc92046b957d45a', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bd017613e28727f5987569881f5bcc9cd76871df', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06fd700426b2494edaef067692afc56d994528ca', 'committer_username': 'simmplecoder', 'committer_name': 'Olzhas Zhumabek', 'committer_email': 'anonymous.from.applecity@gmail.com', 'commit_date': datetime.datetime(2015, 7, 23, 18, 20, 31, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed6391bed8e32a9b7578bd402503d4879bfbafe5', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7513d3175a2eedbcdd234278c96611d215774f5c', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8c3752c4c6f41805eaab6e19cbfd27991425d26', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae37373ee566eec382fe03655355e3b1435c9d16', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86dc50510eecee9dab581c4c2d1933895ae55510', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '723499dfaad468884dc2bf841eb83e1e3af5c9ec', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9bff47a7dd92dda26f36e9000c23871da26c86bd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0d0312ed4e02871099668c0316be81ea22c9a2e8', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2dd56a3f0e68fbc0de5b791e4883e27c41fe3dd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22cca55621c5f4b1e6ba55a6783820b74a2b6f2f', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c2c614d4a565e508fde283af9c2cda7cf699532a', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
598532943,Add rasterizer support for ellipse,"<!-- Pull Requests MUST come from topic branch based on develop, and NEVER on `master) --->

### Description

This pull request adds rasterization functionality for drawing ellipse using midpoint algorithm. 

I would like to ponder upon following points once this basic functionality is approved(possibly merged) : 
 - Add support for drawing a rotated ellipse 
 - Vary thickness of curves drawn using rasterization
 - Draw arcs(circular or elliptical) instead of drawing complete curves 

I would like this pull request to be considered as solution for my [competency test](https://github.com/boostorg/wiki/wiki/Google-Summer-of-Code:-2021#boostgil-generic-image-library).
### References

- An Efficient Ellipse-Drawing Algorithm, September 1984, pp. 24-35, vol. 4, by [Jerry Van Aken](https://www.computer.org/csdl/search/default?type=author&givenName=Jerry&surname=Van%20Aken), https://doi.ieeecomputersociety.org/10.1109/MCG.1984.275994



### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass
- [x] Review and approve",True,585,https://api.github.com/repos/boostorg/gil/pulls/585,https://github.com/boostorg/gil/pull/585,closed,324,1,7,34,8,9,2,0,"[{'name': 'cat/feature'}, {'name': 'core'}]",2021-03-23 04:23:19+00:00,2021-03-28 19:00:12+00:00,484613.0,"5 days, 14:36:53","[{'comment_id': 599379103, 'comment_body': 'Please, consider trailing return and eastconst too\r\n\r\n```\r\nauto obtain_trajectory(std::array<unsigned int, 2> const semi_axes)\r\n    -> std::vector<std::array<std::ptrdiff_t, 2>>\r\n```', 'comment_created': datetime.datetime(2021, 3, 23, 8, 57, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 599381972, 'comment_body': 'Does this citation mean your algorithm is based on this paper?', 'comment_created': datetime.datetime(2021, 3, 23, 9, 1, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 599383301, 'comment_body': ""I believe these three are not modified anywhere, so why not 'document' that declaring them as constants\r\n```cpp\r\nlong long int const t1 = ...;\r\nlong long int const t4 = ...;\r\nlong long int const t7 = ...;\r\n```"", 'comment_created': datetime.datetime(2021, 3, 23, 9, 3, 24, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 599383656, 'comment_body': '4 space indentation of the arguments, eastconst would be nice too.', 'comment_created': datetime.datetime(2021, 3, 23, 9, 3, 53, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 599383895, 'comment_body': 'Nitpick: `0;i` is missing space', 'comment_created': datetime.datetime(2021, 3, 23, 9, 4, 12, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 599384200, 'comment_body': 'newline  missing', 'comment_created': datetime.datetime(2021, 3, 23, 9, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 599384388, 'comment_body': 'Nitpick: `if(` is missing space, here and in more places and in `for(` too', 'comment_created': datetime.datetime(2021, 3, 23, 9, 4, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 599384912, 'comment_body': ""Please, don't run with the arguments to the right.\r\nHumans usually read from left to right, so we prefer to align to left, e.g. \r\n\r\n```cpp\r\nvoid test_rasterizer_follows_equation(\r\n    std::vector<std::array<std::ptrdiff_t, 2>> trajectory_points, \r\n    int a, int b)\r\n```"", 'comment_created': datetime.datetime(2021, 3, 23, 9, 5, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 599524377, 'comment_body': 'Yes, algorithm for obtaining trajectory points used inside ```obtain_trajectory()``` is based on the mentioned paper.', 'comment_created': datetime.datetime(2021, 3, 23, 12, 31, 41, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}]","[{'commit_sha': '2b550c2f63ebe553b61457488d0bb0bc0a324850', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48436fc82ab3d6ffbd2ce13d343640edc54ad02b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14900be7116e0002090569a637d4d52928bc0cea', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d92b28451757a05a5043cdac1e9e96b13b3740', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac3102cec60370f6e7ce590bacf0d1a591f3010', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e779a915112664890f7e1107369d62c8f6a4d48', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3897e7115a6973a1e4211b52d9114da4f0430a4', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'defef606738f67f6198450523533055f403823d7', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22dee6191babc2b206e0aafacc115fb69f9dd90c', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595bc54ec07a2d1311a1ff1abb90ed5e8f18bf6a', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07aa74b7b6a04682876acdb70142fe1abd7afc52', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec6a1359234cfb9dc004bd3e55a827216577ad74', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76886fdc95a3c6b3e7068cab99ab3d77c2d6bf68', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7497ed895224da9b4c0c177db82b0f31af8ed673', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8852996fb884d94bdc2ae7391fcc252142d4d0fa', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4045ff1415c55c51da5eb20d3445c0476fd2eb4', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8769f91d1d9b62f4e53cef1640e9076486f8a737', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b10bfe08ad6985e378025887cf0010a0856e8bd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c7cb87e1d6c17d9182ce3d623294b2ada0c8fb', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc10edcce05318dc7d105cbfc7fbc4bc71f34579', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd393ab4e95c9fc78b4f398a09ebd9094f8ad57e6', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e48d48c9c1505a22d78b19cab42cfd91bff97f5', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a27083d111dee48147b79d69e03cc5d97d06564', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67bf920c39de73a34b6a09814ccec354bf14464b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985ea1ea7dd85c7fe5b575644067a2effbb565cc', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c5405c191f9d0537789552f85a1ee11c42fdfbf', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f365ee2a8bacba18afc3d100ff90dd194637f0d6', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fe337182b842efde2083d80dbcaabf81d9abef8', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8b1951f7aab217321785293f7371fb9560565cd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab4c593b03a0ae3cd6033c794740b0fd930e2106', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81fdb4b29e405232da62cf8cb0d85340663e2b3f', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45605016830e432c1470688e8b73620da87cb36e', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6390f6220ca0e21bad451d72a09ea425eaec9641', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b698949bd5d8314dcff1dc15dfe32b80fd487765', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
559505188,Added all standard morphological transformations,"### Description

This pull request adds all standard morphological transformations in Boost Gil library.

Summary of applied morphological concepts:
1. Dilation: Gives the maximum overlapped value with respect to the structuring element to the pixel overlapping with the center element of structuring element.We can vary the number of times dilation happens by varying the 
argument 'iterations' in the dilate function.
2. Erosion: Give the minimum overlapped value with respect to the structuring element to the pixel overlapping with the center element of structuring element.We can vary the number of times erosion happens by varying the 
argument 'iterations' in the erode function.
3. Opening: Opening is just another name of erosion followed by dilation.
   It is useful in removing noise.
4. Closing: Closing is reverse of Opening, Dilation followed by Erosion.
   It is useful in closing small holes inside the foreground objects, or small black points on the object.
5. Morphological Gradient: It is the difference between dilation and erosion of an image.
  The result will look like the outline of the object.
6. Top Hat: It is the difference between input image and Opening of the image.
7. Black Hat: It is the difference between the closing of the input image and input image.
  Functions have been made for applying above morphological transformations.

### References

https://homepages.inf.ed.ac.uk/rbf/HIPR2/dilate.htm
https://homepages.inf.ed.ac.uk/rbf/HIPR2/erode.htm
https://docs.opencv.org/master/d9/d61/tutorial_py_morphological_ops.html

### Tasklist

- [x] Add test case(s)
- [x] Ensure all CI builds pass - RIP Travis CI, ignored and replaced with GitHub Actions
- [x] Review and approve
",True,541,https://api.github.com/repos/boostorg/gil/pulls/541,https://github.com/boostorg/gil/pull/541,closed,580,1,8,28,19,84,2,0,"[{'name': 'cat/feature'}, {'name': 'core'}]",2021-01-21 19:52:20+00:00,2021-02-13 16:01:22+00:00,1973342.0,"22 days, 20:09:02","[{'comment_id': 563318153, 'comment_body': ""Shouldn't `identifier` be type of `morphological_operations` instead of `int`? "", 'comment_created': datetime.datetime(2021, 1, 24, 16, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563318265, 'comment_body': ""Shouldn't these be `std::ptrdiff_t` as well?"", 'comment_created': datetime.datetime(2021, 1, 24, 16, 45, 6, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563320481, 'comment_body': 'Great catch, but unfortunately will not work for our quirky types like what you get when `SrcView == gil::gray32f_view_t` and the like. I would just set to the first element and mention in every function that uses this to not pass empty views, or bad things will happen.', 'comment_created': datetime.datetime(2021, 1, 24, 17, 3, 1, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563320675, 'comment_body': 'I believe you forgot to multiply by kernel value at that point.\r\n\r\nI believe you should create a function pointer before entering those loops, so that only one element is searched for (e.g. either min or max, but not both). The easiest option I see is to accept a functor that choose the right element by changing the declaration to this:\r\n\r\n```\r\ntemplate <typename SrcView, typename DstView, typename Kernel, typename SelectionFunctor>\r\nvoid morph_impl(SrcView const& src_view, DstView const& dst_view, Kernel const& kernel, SelectionFunctor selector)\r\n```\r\n\r\nThen the four lines will be reduced to this:\r\n\r\n```\r\n    target_element = selector(target_element, src_view(col_boundary, row_boundary));\r\n```\r\n\r\nThen just `switch` inside `morph` to pass correct functor. Remember, you have to pass `&std::max<channel_type>` or `&std::min<channel_type>`, otherwise you cannot take a pointer to template function, you have to explicitly tell which version you need.', 'comment_created': datetime.datetime(2021, 1, 24, 17, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563320785, 'comment_body': ""If you'll read my review further you won't need to change this part like that."", 'comment_created': datetime.datetime(2021, 1, 24, 17, 5, 52, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563320933, 'comment_body': 'Do we need this?', 'comment_created': datetime.datetime(2021, 1, 24, 17, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563321212, 'comment_body': ""Shouldn't this be:\r\n\r\n```\r\nnth_channel_view(view(dst_vuew), i),\r\n```\r\n\r\n?"", 'comment_created': datetime.datetime(2021, 1, 24, 17, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563321479, 'comment_body': 'I see it now. You need compatible pixel and channel types. Lets just mention in the docs that we require those to be compatible and leave it at that. Let the user deal with that, if there are some common practices, we will just implement them later when they get established. In the worst case, they can write their own adaptor on top of a view.', 'comment_created': datetime.datetime(2021, 1, 24, 17, 11, 28, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563322051, 'comment_body': 'increment on `bool` is deprecated in C++17. Please just set to `true. Multiple same options will be just ignored.', 'comment_created': datetime.datetime(2021, 1, 24, 17, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563324361, 'comment_body': ""I doubt it will work like this, leaving aside  that not every view will have `gray8_pixel_t` as pixel type. Can't nail down counterexample, but it will look like this:\r\n```\r\ninput = [\r\n    [max_value, std_value, std_value, std_value],\r\n    [std_value] * 4,\r\n    [std_value] * 4\r\n]\r\n\r\nkernel = [1] * 3 * 3\r\n```\r\n\r\nPlease test dilation with the input above. `std_value` is something lower than `max_value`. I expect first 3x3 segment to be `max_value` and final column to be `std_value`."", 'comment_created': datetime.datetime(2021, 1, 24, 17, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563324765, 'comment_body': 'you can omit semicolon on previous line and `std::cout` here, so it will continue streaming.', 'comment_created': datetime.datetime(2021, 1, 24, 17, 37, 59, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 563339412, 'comment_body': '@meshtag Nitpick: The `const` is unnecessary for the `identifier`, besides \r\n\r\nPrefer [east const](http://slashslash.info/eastconst/) over west const, i.e. `T const identifier` etc.', 'comment_created': datetime.datetime(2021, 1, 24, 19, 40, 2, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563339540, 'comment_body': '@meshtag Please, use `//<space>Content` for non-Doxygen comments and `///<space>Content` for Doxygen comments', 'comment_created': datetime.datetime(2021, 1, 24, 19, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563339690, 'comment_body': ""I'd suggest to `throw std::invalid_argument` instead of `std::cout`"", 'comment_created': datetime.datetime(2021, 1, 24, 19, 42, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 563472244, 'comment_body': 'yeah,they should be', 'comment_created': datetime.datetime(2021, 1, 25, 5, 34, 36, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 563476838, 'comment_body': 'Okay,i will mention about not passing empty views in docs and in comments of example program(gil/example/morphology.cpp)', 'comment_created': datetime.datetime(2021, 1, 25, 5, 52, 43, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 563495103, 'comment_body': 'I tested this as ....\r\n```\r\ninput = [{ 255, 100, 100, 100},\r\n            { 100, 100, 100, 100},\r\n            { 100, 100, 100, 100}]\r\n\r\nkernel = [{1,1,1},\r\n               {1,1,1},\r\n               {1,1,1}]\r\n\r\nexpected_output_for_dilation = [ { 255, 255, 100, 100},\r\n                                                    { 255, 255, 100, 100},\r\n                                                    { 100, 100, 100, 100}]\r\n```\r\nThis gave me no errors,can u please point out what exactly is breaking', 'comment_created': datetime.datetime(2021, 1, 25, 6, 54, 10, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 563496051, 'comment_body': 'I am trying to find a solution for the first problem', 'comment_created': datetime.datetime(2021, 1, 25, 6, 56, 45, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 563677095, 'comment_body': 'Yeah my bad, I forgot to multiply.\r\nRegarding the second point,can we solve it with simple if else conditions like\r\n```\r\n product = src_view(col_boundary, row_boundary) * kernel.at(flip_ker_row, flip_ker_col);\r\n                        if(identifier == 1)\r\n                        {\r\n                            if(product > max_overlapped_element)\r\n                                max_overlapped_element = src_view(col_boundary, row_boundary);\r\n                        }\r\n                        else if(identifier == 0)\r\n                        {\r\n                            if(product < min_overlapped_element)\r\n                                min_overlapped_element = src_view(col_boundary, row_boundary);\r\n                        }\r\n```\r\nor is there any other specific reason for using functors, I am fine with either approaches\r\n', 'comment_created': datetime.datetime(2021, 1, 25, 12, 13, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 563680469, 'comment_body': 'Yes I think we need this,dilate function has\r\n```\r\nfor(int i=0;i<iterations;++i)\r\n        morph(dst_view,dst_view,ker_mat,1);\r\n```\r\nso I am passing dst_view as input view as well as output view in morph ,if I do not create a dummy/intermediate image to pass in morph_impl,modified values of dst_view will be used to modify new values in dst_view,this will not output the result of typical dilation.Moreover,if i choose to pass a separate image view than dst_view in dilate,then i would have to create new image views for each and every iteration which seems like a bad idea from the point of view of space complexity. I understand that all images will not be of the type gray8_image_t and I am thinking of a way to solve it.Feel free to share what you think of it.', 'comment_created': datetime.datetime(2021, 1, 25, 12, 18, 22, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 563979762, 'comment_body': 'My earlier comment was an attempt to clarify this.Please do have a look at it.', 'comment_created': datetime.datetime(2021, 1, 25, 19, 17, 17, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 563981652, 'comment_body': '@simmplecoder ,shall i use this ``` copy_pixels(src_view,dst_view);```  to solve the first problem?', 'comment_created': datetime.datetime(2021, 1, 25, 19, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 564034377, 'comment_body': ""@meshtag To me, one of reasons to prefer functor or named lambda is readability:\r\n- here we search max, there we search min, and I don't have to look further to find the branching, and decode it in my brain when happens what\r\n- `if(identifier == 1)` is just a terribly obscure: wtf is the `identifier`, wtf is the magic `1` - how on earth the magic `identifier == 1` corresponds to searching for min/max?!\r\n\r\nBy he way, you create an enum earlier, why you are refusing to use it and preferring the magic numbers?\r\nPlease, write code for humans first, then for machines!"", 'comment_created': datetime.datetime(2021, 1, 25, 20, 51, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 564035801, 'comment_body': ""@meshtag\r\n> I am passing dst_view as input view as well as output view in morph\r\n\r\nI read this and it immediately smells to me, sorry.\r\nFirst, we use `dst_` as convention for output-only, a result destination.\r\nSecond, how `T const& v` can be an output?\r\nOr I don't understand what is happening.\r\n\r\n"", 'comment_created': datetime.datetime(2021, 1, 25, 20, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 564036648, 'comment_body': '@simmplecoder \r\n> You need compatible pixel and channel types. Lets just mention in the docs that we require those to be compatible\r\n\r\nCertainly, a comment/doc is a good idea.\r\nA `static_assert` **as a comment/doc** is even better, I think :-)', 'comment_created': datetime.datetime(2021, 1, 25, 20, 55, 5, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 564187821, 'comment_body': '@mloskot ,got the point', 'comment_created': datetime.datetime(2021, 1, 26, 3, 11, 9, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 564203314, 'comment_body': '@mloskot \r\n1.Regarding the first point,okay I will be more careful about the terminologies/conventions used from now on.Thanks for pointing that out.\r\n2.Regarding the second point,documentation states that gil views are similar to iterators(pointers),so when I am writing ```T const& v ``` where v is a gil view,it should mean that I am using something similar to a constant pointer and not a pointer with constant value,this allows me to fill dst_view .I am not sure if that answers your question,can you please elaborate?please correct me if I am wrong.', 'comment_created': datetime.datetime(2021, 1, 26, 4, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 564373940, 'comment_body': ""@meshtag The message I was trying to carry through in the chatty way was that if we write code [Sean Parent's 1st goal](https://www.youtube.com/watch?v=W2tWOdzgXHA) in mind for [better code](https://www.youtube.com/results?search_query=sean+parent+better+code), making intentions more explicit and well named, the life would be easier :-)"", 'comment_created': datetime.datetime(2021, 1, 26, 9, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 564380469, 'comment_body': ""The 1. is simply about striving for naming things as clearly as possible.\r\n\r\nYes, you are correct about the 2. and the [docs states it quite clearly indeed](https://www.boost.org/doc/libs/1_75_0/libs/gil/doc/html/tutorial/gradient.html): \r\n\r\n> ```\r\n> void x_gradient(gray8c_view_t const& src, gray8s_view_t const& dst)\r\n> ```\r\n> ...\r\n>  Whether a view is mutable or read-only (immutable) is a property of the view type.\r\n\r\nI'm sorry, I must be thinking of something else last night.\r\n\r\nWell, I can also see this may be confusing to those new to GIL and those used to understanding `T const&` as read-only stuff. Since,\r\n\r\n> A GIL image view, is a shallow, lightweight view of a rectangular grid of pixels.\r\n\r\nwe could do just:\r\n\r\n```cpp\r\nvoid x_gradient(gray8c_view_t input, gray8s_view_t output)\r\n```\r\n\r\nSomething to think about for future readability and code quality refactoring in GIL :-)"", 'comment_created': datetime.datetime(2021, 1, 26, 9, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 564498325, 'comment_body': 'Okay, thanks @mloskot ,I will try to name my variables and functions in a more expressive sense from now on.', 'comment_created': datetime.datetime(2021, 1, 26, 13, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 564530540, 'comment_body': '@mloskot \r\n```gray8s_view_t``` specify what we can do to the image pixels,but I am not sure if it specifies whether we can change the entity to which the view(pointer/iterator like entity)points,what if after passing the view,someone tries to modify it (possibly by operator overloading) like this ```dst_view += 1```(the way we do it with a normal pointer) inside the function,will our compiler shout at them to stop it because modifying to what the view is pointing inside a function would certainly create problems, I would look into the matter more closely once I finish working on this pull request.The above problem is certainly solved if we pass the view in the current manner ```DstView const& dst_view``` since it would create something like a constant pointer,I need to do a lot of testing before I arrive on a conclusion.', 'comment_created': datetime.datetime(2021, 1, 26, 14, 0, 11, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 564635260, 'comment_body': '> the view(pointer/iterator like entity)\r\n\r\nInitially, it is not a major error to think of view as pointer or iterator, but at this stage I\'d suggest to make the clear distinction.\r\nThere used to be a great article by Maciej Sobczak archived online ""STL Sequences & the View Concept"", C/C++ Users Journal, April 2004 Vol. 22, No. 4 but it seems no longer online. It explained the concept of a view very well. You may look at the docs of https://www.zib.de/weiser/vtl/ to grasp the idea.\r\n\r\nEssentially, a view is a container adaptor that allows us to \'see\' a container in certain way - think of an eyewear.\r\nSo, it is not really equivalent of a pointer or iterator, but view interacts with pointers or iterators.\r\nIn GIL, view provides access to iterators and locators (another GIL concept) over the underlying sequence of pixels.\r\n\r\n> what if after passing the view,someone tries to modify it \r\n\r\nLet\'s try https://godbolt.org/z/vbdne5\r\n\r\n```cpp\r\n#include <boost/gil.hpp>\r\nnamespace gil = boost::gil;\r\n\r\nint main()\r\n{\r\n    gil::gray8_view_t rw;\r\n    auto rw_pixel = rw(1, 1);\r\n    rw(1, 1) = 128;\r\n\r\n    gil::gray8c_view_t ro;\r\n    auto ro_pixel = ro(1, 1);\r\n    ro(1, 1) = 128; // and?\r\n}\r\n```\r\n\r\nBy the way, from `04:00` minute the [GIL Video Lecture](https://www.youtube.com/watch?v=sR8Wjg0pceE&t=241) explains what is the `c` in `gray8c_view_t`, what is `s` in `gray8s_view_t`, etc.\r\n\r\n> what if after passing the view,someone tries to modify it (possibly by operator overloading) like this `dst_view += 1` (the way we do it with a normal pointer) inside the function\r\n\r\nBecause the `image_view` is **not** an iterator or pointer, there is nothing in it to modify like that, and there is no such `operator+=`. That is what makes the view lightweight too. The `image_view` class has only two members `dimensions` and `pixels` and there is no way you can modify it apart from assigning one view to another what will completely reset the two resulting in a completely new view.\r\n\r\n', 'comment_created': datetime.datetime(2021, 1, 26, 16, 9, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 564772784, 'comment_body': '@simmplecoder ,\r\nI am having trouble figuring out what exactly you wanted me to do here \r\n``` Remember, you have to pass &std::max<channel_type> or &std::min<channel_type>```\r\ncan u please elaborate ,I understand we cannot have a pointer to a template and I am trying to figure out a way to make our function pointer generic w.r.t all gil views.', 'comment_created': datetime.datetime(2021, 1, 26, 19, 25, 3, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 564775233, 'comment_body': 'Okay I think I get the difference between iterators and views now.Thanks a lot @mloskot  for helping me improve my understanding of this concept .', 'comment_created': datetime.datetime(2021, 1, 26, 19, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 565509170, 'comment_body': '@simmplecoder ,\r\nIn my recent commit , I have handled this part as \r\n```\r\nif(identifier == boost::gil::morphological_operations::dilation)\r\n                            {\r\n                                if(src_view(col_boundary, row_boundary) > target_element)\r\n                                    target_element = src_view(col_boundary, row_boundary);\r\n                            }\r\n                            else if(identifier == boost::gil::morphological_operations::erosion)\r\n                            {\r\n                                if(src_view(col_boundary, row_boundary) < target_element)\r\n                                    target_element = src_view(col_boundary, row_boundary);\r\n                            }\r\n```\r\nsince I was not sure regarding the implementation of functor you suggested.Please check this part and tell me if I need to improve it further.', 'comment_created': datetime.datetime(2021, 1, 27, 17, 46, 3, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 565511278, 'comment_body': '@simmplecoder , I have included this example in test file, please take a look at it and tell me if I need to change anything.', 'comment_created': datetime.datetime(2021, 1, 27, 17, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 566426935, 'comment_body': 'Space missing before `<`', 'comment_created': datetime.datetime(2021, 1, 28, 21, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566427314, 'comment_body': 'This is just an example, why not just?\r\n```\r\n#include <boost/gil.hpp>\r\n```', 'comment_created': datetime.datetime(2021, 1, 28, 21, 44, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566427448, 'comment_body': 'Space missing `>o`', 'comment_created': datetime.datetime(2021, 1, 28, 21, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566427907, 'comment_body': 'Whitespaces missing', 'comment_created': datetime.datetime(2021, 1, 28, 21, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566428457, 'comment_body': '- We do C++11, so `(std::vector<std::vector<int> >` should read `(std::vector<std::vector<int>>`\r\n- Attach `&` to the type, not the variable.', 'comment_created': datetime.datetime(2021, 1, 28, 21, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566429080, 'comment_body': 'We do C+11, so please prefer `using` declaration over `typedef` for aliases.', 'comment_created': datetime.datetime(2021, 1, 28, 21, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566429265, 'comment_body': 'What is this for?', 'comment_created': datetime.datetime(2021, 1, 28, 21, 47, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566429477, 'comment_body': 'Please, remove this line', 'comment_created': datetime.datetime(2021, 1, 28, 21, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566429843, 'comment_body': ""Please, don't indent content of namespaces - we don't need empty column space on the left :)"", 'comment_created': datetime.datetime(2021, 1, 28, 21, 48, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566430082, 'comment_body': 'If `target_element` is used inside the nested look, then narrow its scope to the loop', 'comment_created': datetime.datetime(2021, 1, 28, 21, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566431000, 'comment_body': 'space after comma', 'comment_created': datetime.datetime(2021, 1, 28, 21, 50, 46, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566431158, 'comment_body': '`boost::gil::` needed?', 'comment_created': datetime.datetime(2021, 1, 28, 21, 51, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566431341, 'comment_body': 'Move the `morphological_operations` back to the left', 'comment_created': datetime.datetime(2021, 1, 28, 21, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566574219, 'comment_body': 'When I tried doing that, my compiler started shouting at me about some identifiers being undefined, the program worked perfectly fine though . I will see if I can suppress those messages and then make required changes', 'comment_created': datetime.datetime(2021, 1, 29, 4, 36, 34, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 566575677, 'comment_body': '```target_element``` is used for comparing all values of image view pixels which are overlapped with the structuring element in one single operation . Therefore, it must remain same during all such comparisons between overlapped values, this stops me from narrowing its scope .', 'comment_created': datetime.datetime(2021, 1, 29, 4, 42, 30, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 566575948, 'comment_body': 'Will change it to ```morphological_operations::dilation```', 'comment_created': datetime.datetime(2021, 1, 29, 4, 43, 46, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 566576545, 'comment_body': 'In an earlier version of this file, I was using ```gray8_image_t``` , I changed that but forgot to remove the namespace part,apologies .', 'comment_created': datetime.datetime(2021, 1, 29, 4, 46, 1, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 566660613, 'comment_body': 'Every public header has to be added to `boost/gil.hpp`, so please add yours too.\r\n', 'comment_created': datetime.datetime(2021, 1, 29, 8, 42, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566661400, 'comment_body': 'Right, I missed that.', 'comment_created': datetime.datetime(2021, 1, 29, 8, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 566665645, 'comment_body': '@meshtag One more thing, please rename `morphological_operations` to singular form i.e. `morphological_operation`', 'comment_created': datetime.datetime(2021, 1, 29, 8, 50, 54, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 567624347, 'comment_body': 'Perhaps you could skip zero element right at the start of the current loop, with something like:\r\n\r\n```\r\nif (kernel.at(flip_ker_row, flip_ker_col) == 0) {\r\n    continue;\r\n}\r\n```', 'comment_created': datetime.datetime(2021, 2, 1, 8, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 567625412, 'comment_body': 'Is this used outside `detail` namespace? If not, please move inside that namespace.', 'comment_created': datetime.datetime(2021, 2, 1, 8, 5, 26, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 567628529, 'comment_body': '@meshtag, I will send you a patch regarding the function switch depending on the erosion/dilation mode. You can resolve this thread for now, good job.', 'comment_created': datetime.datetime(2021, 2, 1, 8, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 567633060, 'comment_body': '@meshtag, please implement the check @mloskot suggested. I believe the right way is to use `gil_function_requires<PixelsCompatibleConcept<SrcPixelType, DstPixelType>>()`. ', 'comment_created': datetime.datetime(2021, 2, 1, 8, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 567633242, 'comment_body': 'Looks good, you can resolve this thread (if it is resolvable).', 'comment_created': datetime.datetime(2021, 2, 1, 8, 20, 31, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 567996857, 'comment_body': 'Intermediate image is only one channel, but `i` might take values higher than 0. Please try to test it with multi-channel image.', 'comment_created': datetime.datetime(2021, 2, 1, 17, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 567997672, 'comment_body': 'Not all views will be gray image views, you can try `gil::image<typename DstView::value_type>`. Same thing with hats.', 'comment_created': datetime.datetime(2021, 2, 1, 17, 16, 3, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 567998963, 'comment_body': 'When mentioning this improvement I meant placing it on line 53 from current commit.', 'comment_created': datetime.datetime(2021, 2, 1, 17, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 568340454, 'comment_body': 'Okay,I will change it', 'comment_created': datetime.datetime(2021, 2, 2, 5, 56, 4, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 568438581, 'comment_body': 'Yes you were right, it was creating problems with multi-channelled images, I changed the declaration of intermediate_img as \r\n```\r\ngil::image<typename DstView::value_type> intermediate_img(src_view.dimensions());\r\n```\r\nNow,it is working fine even with multi-channelled images.Thanks for pointing that out.', 'comment_created': datetime.datetime(2021, 2, 2, 9, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 571673178, 'comment_body': 'Can we use std::max here? Lets try this:\r\n\r\n```\r\nusing std::max;\r\ntarget_element[0] = max(target_element[0], src_view(col_boundary, row_boundary)[0]);\r\n```', 'comment_created': datetime.datetime(2021, 2, 7, 19, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 571673214, 'comment_body': 'Same as for the other branch', 'comment_created': datetime.datetime(2021, 2, 7, 19, 15, 34, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 571673311, 'comment_body': 'Leftover?', 'comment_created': datetime.datetime(2021, 2, 7, 19, 15, 55, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 571673443, 'comment_body': 'Could you please move this inside `gil`?', 'comment_created': datetime.datetime(2021, 2, 7, 19, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 571778924, 'comment_body': 'I can use std::max, but then I will have to typecast first and then compare, like this\r\n```\r\ntarget_element = std::max((int)src_view(col_boundary, row_boundary), (int)target_element);\r\n```\r\nI am not sure what you meant by using an indexing operator in \r\n```\r\ntarget_element[0] = max(target_element[0], src_view(col_boundary, row_boundary)[0]);\r\n```\r\nAs per my understanding, neither target_element nor src_view(col_boundary, row_boundary) is an array, please correct me if I am wrong. ', 'comment_created': datetime.datetime(2021, 2, 8, 4, 49, 11, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 571779549, 'comment_body': 'I thought that it would be good to express what I had in my mind while naming ```IntOpView``` to the reviewers, it was not leftover. ', 'comment_created': datetime.datetime(2021, 2, 8, 4, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 571802585, 'comment_body': '@simmplecoder ,I have formatted my files with your version of ```.clang-format``` . Please review those changes and tell me which version would you like me to use for the above point. I have simply commented my earlier approach, I will replace that with the final version in my next commit .', 'comment_created': datetime.datetime(2021, 2, 8, 6, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 571803737, 'comment_body': 'Also, I will handle the merge conflict in my next commit . ', 'comment_created': datetime.datetime(2021, 2, 8, 6, 20, 37, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 572158322, 'comment_body': ""It doesn't have to be array. Homogenous pixels (where all channels are of the same type) have overloaded `operator[]` so you can access channels by index. Casting everything to `int` is wrong (examples: `gil::gray32f_image_t`, `gil::gray32_image_t`)."", 'comment_created': datetime.datetime(2021, 2, 8, 15, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 572163384, 'comment_body': ""Not sure I'm following. Perhaps it would be better to add it in the documentation of the functions then? You could also name it like `InterimOpView` which is a bit more obvious. Something along the lines of:\r\n\r\n```\r\n\\param int_op_view - view for writing output and performing intermediate operations\r\n\\tparam IntOpView type of output image, models gil::MutableImageViewConcept\r\n\r\n```"", 'comment_created': datetime.datetime(2021, 2, 8, 16, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'simmplecoder', 'type': 'User'}, {'comment_id': 572267233, 'comment_body': 'For now, I have provided parameter definitions in the same way as you suggested. Do tell me if I need to tweak parameter name too . ', 'comment_created': datetime.datetime(2021, 2, 8, 18, 19, 58, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 572879240, 'comment_body': ""Also, I'd suggest to use `(std::max)(a, b)` in case the `std::max(a, b)` fails with the annoying compilation errors from MSVC"", 'comment_created': datetime.datetime(2021, 2, 9, 13, 23, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 573097249, 'comment_body': 'Okay I will do that. I found a good reference on this [here](https://stackoverflow.com/questions/1632145/use-of-min-and-max-functions-in-c/2125302#2125302) . Thanks @mloskot for this great find :)', 'comment_created': datetime.datetime(2021, 2, 9, 17, 47, 39, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 573200120, 'comment_body': '@mloskot , I found [this](https://dustri.org/b/min-and-max-macro-considered-harmful.html) blog and hence I would like to confirm this, which version would be more safe/suitable for our cause \r\n```\r\ntemplate<typename T>\r\ninline T MAX(T a, T b) { return((a) > (b) ? a : b); }\r\n```\r\nor \r\n```\r\n#define MAX(a,b) ((a) > (b) ? a : b)\r\n```', 'comment_created': datetime.datetime(2021, 2, 9, 20, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 573261650, 'comment_body': '@meshtag  TBH, none of the two `MAX`-es above. Any reason why it can not be just the *existing* C++ *function* `std::max`?', 'comment_created': datetime.datetime(2021, 2, 9, 21, 40, 39, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 573463802, 'comment_body': ""@mloskot , no specific reason in particular. Perhaps I misinterpreted your earlier comment. I thought you wanted me to disable ADL(Argument dependent lookup) here by using ```(std::max)(a, b)```. Since that doesn't seems to be the case now, I will keep it as it is."", 'comment_created': datetime.datetime(2021, 2, 10, 5, 44, 52, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 573838440, 'comment_body': '@meshtag Yes, I suggested that in order to avoid the potential of clashing with the `max` *macro* when compiling using the MSVC, but I did not suggest introducing new `MAX` macro or function, just to stick `(std::max)(...)` instead of `std::max(...)`.', 'comment_created': datetime.datetime(2021, 2, 10, 15, 43, 19, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 573980135, 'comment_body': 'okay, pushed the code with changes.', 'comment_created': datetime.datetime(2021, 2, 10, 18, 41, 3, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}]","[{'commit_sha': '2b550c2f63ebe553b61457488d0bb0bc0a324850', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48436fc82ab3d6ffbd2ce13d343640edc54ad02b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14900be7116e0002090569a637d4d52928bc0cea', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d92b28451757a05a5043cdac1e9e96b13b3740', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac3102cec60370f6e7ce590bacf0d1a591f3010', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e779a915112664890f7e1107369d62c8f6a4d48', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3897e7115a6973a1e4211b52d9114da4f0430a4', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'defef606738f67f6198450523533055f403823d7', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '22dee6191babc2b206e0aafacc115fb69f9dd90c', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595bc54ec07a2d1311a1ff1abb90ed5e8f18bf6a', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '07aa74b7b6a04682876acdb70142fe1abd7afc52', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec6a1359234cfb9dc004bd3e55a827216577ad74', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76886fdc95a3c6b3e7068cab99ab3d77c2d6bf68', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7497ed895224da9b4c0c177db82b0f31af8ed673', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8852996fb884d94bdc2ae7391fcc252142d4d0fa', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b4045ff1415c55c51da5eb20d3445c0476fd2eb4', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8769f91d1d9b62f4e53cef1640e9076486f8a737', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9b10bfe08ad6985e378025887cf0010a0856e8bd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69c7cb87e1d6c17d9182ce3d623294b2ada0c8fb', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc10edcce05318dc7d105cbfc7fbc4bc71f34579', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd393ab4e95c9fc78b4f398a09ebd9094f8ad57e6', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e48d48c9c1505a22d78b19cab42cfd91bff97f5', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a27083d111dee48147b79d69e03cc5d97d06564', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67bf920c39de73a34b6a09814ccec354bf14464b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '985ea1ea7dd85c7fe5b575644067a2effbb565cc', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c5405c191f9d0537789552f85a1ee11c42fdfbf', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f365ee2a8bacba18afc3d100ff90dd194637f0d6', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fe337182b842efde2083d80dbcaabf81d9abef8', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
576593573,Add higher order kernel support for Sobel operator,"### Description

This pull request intends to automate the process of kernel generation for higher order Sobel derivatives. Generated kernels were cross checked with opencv, test cases have been provided for comparing the obtained kernels with opencv kernels upto 6th order sobel derivative (13x13 dimensional). I used the following piece of code for obtaining opencv kernels.
```
import numpy as np
import cv2

# In variable name ""sobelnx"", n denotes dimensions of the nxn kernel which is to be obtained while ""x"" signifies that the 
# derivative was calculated in horizontal direction. Similar terminology is used for derivative kernels with respect to the vertical
# direction. 

sobel5x = cv2.getDerivKernels(0, 1, 5)
sobel7x = cv2.getDerivKernels(0, 1, 7)
sobel9x = cv2.getDerivKernels(0, 1, 9)
sobel11x = cv2.getDerivKernels(0, 1, 11)
sobel13x = cv2.getDerivKernels(0, 1, 13)

sobel5y = cv2.getDerivKernels(1, 0, 5)
sobel7y = cv2.getDerivKernels(1, 0, 7)
sobel9y = cv2.getDerivKernels(1, 0, 9)
sobel11y = cv2.getDerivKernels(1, 0, 11)
sobel13y = cv2.getDerivKernels(1, 0, 13)

print(np.outer(sobel5x[0], sobel5x[1]))
print(np.outer(sobel7x[0], sobel7x[1]))
print(np.outer(sobel9x[0], sobel9x[1]))
print(np.outer(sobel11x[0], sobel11x[1]))
print(np.outer(sobel13x[0], sobel13x[1]))

print(np.outer(sobel5y[0], sobel5y[1]))
print(np.outer(sobel7y[0], sobel7y[1]))
print(np.outer(sobel9y[0], sobel9y[1]))
print(np.outer(sobel11y[0], sobel11y[1]))
print(np.outer(sobel13y[0], sobel13y[1]))
```
I have kept the upper limit for dimensions of generated kernel as 31x31 (15th order sobel derivative), I think this limit can be further extended depending upon the execution time taken by other processes of the algorithm apart from kernel generation. 

### References

https://stackoverflow.com/a/10032882/14958679

### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass
- [ ] Review and approve
",False,562,https://api.github.com/repos/boostorg/gil/pulls/562,https://github.com/boostorg/gil/pull/562,open,447,34,3,26,15,37,0,0,[],2021-02-19 17:04:46+00:00,,0.0,,"[{'comment_id': 579391634, 'comment_body': 'Please, [bundle the C++ standard headers together](https://github.com/boostorg/gil/wiki/Include-Directives-Order)', 'comment_created': datetime.datetime(2021, 2, 19, 18, 31, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 579391820, 'comment_body': ""I'd prefer `sobel_dx` and `sobel_dy` here"", 'comment_created': datetime.datetime(2021, 2, 19, 18, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 579392170, 'comment_body': 'What does `2` stand for in `sobel2`?', 'comment_created': datetime.datetime(2021, 2, 19, 18, 31, 58, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 579392800, 'comment_body': 'It should read `Sobel kernels` after Irwin Sobel', 'comment_created': datetime.datetime(2021, 2, 19, 18, 33, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 579393133, 'comment_body': 'This is too much blank fields to the left ', 'comment_created': datetime.datetime(2021, 2, 19, 18, 33, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 579393581, 'comment_body': 'Nitpick: To me, personally,  this nicely aligns\r\n\r\n```cpp\r\nauto kernel_convolve_impl(T1 kernel1, T2 kernel2) -> std::vector<std::vector<float>>\r\n```', 'comment_created': datetime.datetime(2021, 2, 19, 18, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 579395353, 'comment_body': 'Missing `{` and `}` for the outer loop.', 'comment_created': datetime.datetime(2021, 2, 19, 18, 37, 22, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 579395726, 'comment_body': ""I'm not sure the `reference` wording is clear here. Why not just `padding`?"", 'comment_created': datetime.datetime(2021, 2, 19, 18, 37, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 579395936, 'comment_body': '`s/ker/kernel/`', 'comment_created': datetime.datetime(2021, 2, 19, 18, 38, 15, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 579397436, 'comment_body': 'Why not just replace this `runtime_error` with the `length_error` above?', 'comment_created': datetime.datetime(2021, 2, 19, 18, 40, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 584115203, 'comment_body': 'Here ```padding``` refers to the strip of zeros created around ```kernel1``` which is required for our intended convolution. The variable ```padding_reference``` is meant to be used as a reference for finding the location of blocks from where padding starts inside ```dummy_kernel```. Shall I change the name of that variable from ```padding_reference``` to ```padding```?', 'comment_created': datetime.datetime(2021, 2, 27, 12, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 584116207, 'comment_body': '```2``` in ```dy_sobel2``` indicates that the order of Sobel derivative in y-direction is 2, similar terminology is used for ```dx_sobel2```. I have added comments for clarifying this to future readers, is this resolvable now?', 'comment_created': datetime.datetime(2021, 2, 27, 12, 36, 4, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 584117325, 'comment_body': 'I am not sure if I understood this correctly, shall I rename ```flip_ker_row``` to ```flip_kernel_row```?', 'comment_created': datetime.datetime(2021, 2, 27, 12, 45, 27, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 584120593, 'comment_body': 'Yes, please - full words are preferred ', 'comment_created': datetime.datetime(2021, 2, 27, 13, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 584178546, 'comment_body': '> from where padding starts \r\n\r\nWhat about `padding_origin` then?', 'comment_created': datetime.datetime(2021, 2, 27, 19, 29, 17, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 584178714, 'comment_body': 'Good', 'comment_created': datetime.datetime(2021, 2, 27, 19, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 586736535, 'comment_body': 'Please, put these into separate lines with `;`', 'comment_created': datetime.datetime(2021, 3, 3, 19, 58, 10, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 586737034, 'comment_body': '` = 0.0f;` for hygiene and to make sensitive analysers happy :)', 'comment_created': datetime.datetime(2021, 3, 3, 19, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 586737840, 'comment_body': ""It's a free function, in a header, in `detail` namespace, what is the `static` for?"", 'comment_created': datetime.datetime(2021, 3, 3, 20, 0, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 586738513, 'comment_body': '`>s` space missing', 'comment_created': datetime.datetime(2021, 3, 3, 20, 1, 8, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 586738880, 'comment_body': ""- `std::` missing for `log2`\r\n- `static_cast` is preferred to C-style cast\r\n- make the variable `const` unless it's modified\r\n\r\n"", 'comment_created': datetime.datetime(2021, 3, 3, 20, 1, 47, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 586739348, 'comment_body': 'missing `std::` for `pow`', 'comment_created': datetime.datetime(2021, 3, 3, 20, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 587202222, 'comment_body': 'I have implemented this change. Just for educational purposes, are we making this change to make the code more adept into c++11 or is it somehow related to performance?', 'comment_created': datetime.datetime(2021, 3, 4, 7, 0, 33, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 587206942, 'comment_body': ""I was not using ```static``` initially which caused all builds to fail. After an exhaustive search inside raw logs, I came across the following line ,  \r\n```\r\n2021-03-04T04:26:54.6586533Z sample_image.cpp:(.text+0x0): multiple definition of `boost::gil::detail::kernel_vector_fill(std::vector<std::vector<float, std::allocator<float> >, std::allocator<std::vector<float, std::allocator<float> > > >&, boost::gil::detail::kernel_type)'\r\n```\r\nThis lead me to believe that the compiler was considering different definitions of ```kernel_vector_fill``` whenever it was parsing through it. For tackling this, the immediate solution which came to my mind was using ```static```. I wonder if that was the best way to solve it. \r\n[Here](https://github.com/meshtag/gil/runs/2027943906) is a link to those ```build results``` for your reference.\r\nNote : I didn't encounter this problem on my system. I used ```cmake``` on  ```Ubuntu 20.04 OS```for build.\r\n"", 'comment_created': datetime.datetime(2021, 3, 4, 7, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 596974328, 'comment_body': '@mloskot, is this resolvable?', 'comment_created': datetime.datetime(2021, 3, 18, 15, 22, 56, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 597120865, 'comment_body': 'Well, this code is in public headers, so we need to keep it clean ~C++11~ C+14', 'comment_created': datetime.datetime(2021, 3, 18, 18, 3, 45, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 597134452, 'comment_body': '`static_cast<std::ptrdiff_t>(convolved_kernel.size())`', 'comment_created': datetime.datetime(2021, 3, 18, 18, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 597134888, 'comment_body': '`convolved_kernel_size` should rather be `std::ptrdiff_t`', 'comment_created': datetime.datetime(2021, 3, 18, 18, 23, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 597140666, 'comment_body': 'You should be `inline` instead, I think.', 'comment_created': datetime.datetime(2021, 3, 18, 18, 32, 3, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 597427648, 'comment_body': 'I googled this a bit and I think I now understand your reason. I am attaching this [link](https://stackoverflow.com/questions/10492847/c-namespace-functions/10493005#10493005) here just in case if someone questions why I made it inline despite the function being large in size and its execution time is not lesser than its call time.', 'comment_created': datetime.datetime(2021, 3, 19, 6, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 597429751, 'comment_body': 'Apparently, @simmplecoder is attempting a patch based on the current commit as mentioned [here](https://cpplang.slack.com/archives/CSVT0STV2/p1615702000071100?thread_ts=1615616569.056600&cid=CSVT0STV2).\r\nI will apply these changes in a separate commit once I get to know about the current status of his work. For this reason, I am not resolving your comments now, will do it once I apply suggested changes. ', 'comment_created': datetime.datetime(2021, 3, 19, 6, 14, 32, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 597834196, 'comment_body': 'Yes, I think this sums it up well:\r\n[""Only short functions should be inlined"" is a rule of thumb, but there are so many exceptions and so many other more important reasons why you should or should not inline a function so as to make the rule of thumb almost useless.](https://stackoverflow.com/questions/3973218/header-only-libraries-and-multiple-definition-errors#comment4250148_3973236)\r\n\r\nSo, we agree about making it `inline`?', 'comment_created': datetime.datetime(2021, 3, 19, 16, 55, 6, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 597835277, 'comment_body': 'Right, then this can make it in before his work is completed, but then we will have to remember to review these places.', 'comment_created': datetime.datetime(2021, 3, 19, 16, 56, 31, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 597910762, 'comment_body': 'No objections from my side.', 'comment_created': datetime.datetime(2021, 3, 19, 18, 58, 25, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 597913058, 'comment_body': ""Or is it a better idea to wait for the patch to be created and then apply these changes after applying the patch, meanwhile keeping these comments as unresolved(just so that I don't forget them)."", 'comment_created': datetime.datetime(2021, 3, 19, 19, 2, 41, tzinfo=datetime.timezone.utc), 'commenter': 'meshtag', 'type': 'User'}, {'comment_id': 597918407, 'comment_body': 'Please update the PR then ', 'comment_created': datetime.datetime(2021, 3, 19, 19, 13, 1, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 597918819, 'comment_body': 'Do as you prefer ', 'comment_created': datetime.datetime(2021, 3, 19, 19, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}]","[{'commit_sha': '2b550c2f63ebe553b61457488d0bb0bc0a324850', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48436fc82ab3d6ffbd2ce13d343640edc54ad02b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14900be7116e0002090569a637d4d52928bc0cea', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d92b28451757a05a5043cdac1e9e96b13b3740', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac3102cec60370f6e7ce590bacf0d1a591f3010', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e779a915112664890f7e1107369d62c8f6a4d48', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa5d7cdd1c887c03461601c54c7636544a3833f', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73580e1b2a084326ab40c4c5e898c3a45857fefd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'afb6569435bbe3c8a6f580488d502faa5bf1429a', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ad646ed850dc4907bd82e6e13dcb53f79742cab', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce1c25e736c1ac9a99997175d8763fb90be7825b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a76034220456fa9b7f80b54de183a1772784f73', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37d65f4a01ea298e1222383f663b8d6cf98abf43', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b1a1d491a09db3a4c8d97646027e03e1d064c9d', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94829734b8206cc6f9a5121b3e36a20c88ed8886', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0a1a58ce64b7ba853f66aace174ff96681334e51', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9335e17ba9a7c8367005e735008d23cc01845cef', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1c60bafc203e061fde3d3085666ede9c705f1da2', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3c19e11978fd1a64b9b8247ab249ab02949b18d9', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7eb7088399592d9447e3fd4bee461f6d42b0b762', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5f40cd6d33d996251ec1daba284f0e08d8ea0c9c', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7c8f33285306a421ed7c3755fc354d3bc9307ff2', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '790f9bce5bedbb85c3420e6a4df4810dba2ab611', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f027c8a543b4b313417347158b535aa53e5864a5', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb0d9ddb50883b4fbf3158fe65d0a876e25fa727', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '155de1cc00679fb2a9f793667626b6a023482dde', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
594481525,Port TuttleOFX extension : pattern,"
### Description

This pull request intends to port ```pattern``` extension from [TuttleOFX](https://github.com/tuttleofx/TuttleOFX/tree/develop/libraries/boostHack/boost/gil/extension/toolbox) to Gil as mentioned in #449 .

I have tried not to change anything significant in actual extension code. However, I have reformatted test cases completely in order to align them with current practices followed by Gil.


### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass
- [ ] Review and approve
",False,581,https://api.github.com/repos/boostorg/gil/pulls/581,https://github.com/boostorg/gil/pull/581,open,298,0,5,18,1,5,2,0,"[{'name': 'cat/feature'}, {'name': 'ext/toolbox'}]",2021-03-17 07:41:52+00:00,,0.0,,"[{'comment_id': 610870437, 'comment_body': 'These header guards need to be changed, see https://github.com/boostorg/gil/blob/develop/CONTRIBUTING.md#guidelines', 'comment_created': datetime.datetime(2021, 4, 9, 19, 49, 33, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 610872648, 'comment_body': 'Could you rename template parameters to upper case, `View` ?', 'comment_created': datetime.datetime(2021, 4, 9, 19, 54, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 610872797, 'comment_body': 'I doubt this `using` import is necessary', 'comment_created': datetime.datetime(2021, 4, 9, 19, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 610873165, 'comment_body': 'Some original code review: if not modified, make it const `std::size_t const h`', 'comment_created': datetime.datetime(2021, 4, 9, 19, 55, 26, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 610873419, 'comment_body': 'Could you sort it alphabetically?', 'comment_created': datetime.datetime(2021, 4, 9, 19, 55, 56, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}]","[{'commit_sha': '2b550c2f63ebe553b61457488d0bb0bc0a324850', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48436fc82ab3d6ffbd2ce13d343640edc54ad02b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14900be7116e0002090569a637d4d52928bc0cea', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d92b28451757a05a5043cdac1e9e96b13b3740', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac3102cec60370f6e7ce590bacf0d1a591f3010', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e779a915112664890f7e1107369d62c8f6a4d48', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa5d7cdd1c887c03461601c54c7636544a3833f', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73580e1b2a084326ab40c4c5e898c3a45857fefd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcfce0b66c50b1a00c1d109b5113d21c638fe4e6', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7a3e8859dbb99da4083bd914dd1e2482772eea5', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c06300d08d126589a55ef4c0a0855891cc7aff6', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '368ada59f2a438eccec7cbbf0bf8d2fe410a479f', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e14ce8140a890ef8874f19363cf17de886078740', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f7ef520074e22003b119fd7cbfc9bc4690595605', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17fdd4eca530083a709209489e6fd1ab0a33e57d', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '216f956d226fdf8b1075011bba14efc3154f500c', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae8d9bbb6d997e0d77032ee153f956c1ff7a9cd9', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1284963043095ab3593f3faa1ed388a993a67bf7', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
594493555,Port TuttleOFX extension : shrink,"
### Description

This pull request intends to port ```shrink``` extension from [TuttleOFX repository](https://github.com/tuttleofx/TuttleOFX/tree/develop/libraries/boostHack/boost/gil/extension/toolbox) to Gil as mentioned in #449 .

I have tried not to change anything significant in actual extension code. However, I have reformatted test cases completely in order to align them with current practices followed by Gil.


### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass
- [ ] Review and approve
",False,582,https://api.github.com/repos/boostorg/gil/pulls/582,https://github.com/boostorg/gil/pull/582,open,88,0,5,14,2,4,2,0,"[{'name': 'cat/feature'}, {'name': 'ext/toolbox'}]",2021-03-17 08:01:50+00:00,,0.0,,"[{'comment_id': 610873923, 'comment_body': 'These header guards need to be changed, see https://github.com/boostorg/gil/blob/develop/CONTRIBUTING.md#guidelines', 'comment_created': datetime.datetime(2021, 4, 9, 19, 57, 7, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 610874018, 'comment_body': 'Could you rename template parameters to upper case, `View` ?', 'comment_created': datetime.datetime(2021, 4, 9, 19, 57, 18, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 610874136, 'comment_body': 'Some original code review: if not modified, make it const', 'comment_created': datetime.datetime(2021, 4, 9, 19, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}, {'comment_id': 610874245, 'comment_body': 'Could you sort it alphabetically?', 'comment_created': datetime.datetime(2021, 4, 9, 19, 57, 43, tzinfo=datetime.timezone.utc), 'commenter': 'mloskot', 'type': 'User'}]","[{'commit_sha': '2b550c2f63ebe553b61457488d0bb0bc0a324850', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48436fc82ab3d6ffbd2ce13d343640edc54ad02b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14900be7116e0002090569a637d4d52928bc0cea', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d92b28451757a05a5043cdac1e9e96b13b3740', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac3102cec60370f6e7ce590bacf0d1a591f3010', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e779a915112664890f7e1107369d62c8f6a4d48', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa5d7cdd1c887c03461601c54c7636544a3833f', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73580e1b2a084326ab40c4c5e898c3a45857fefd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcfce0b66c50b1a00c1d109b5113d21c638fe4e6', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '093510abb42bb7f7fb3f10ea5069720e18b54dba', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b115fe91a0a64df725aa7e6cbbdce3658c96f2b4', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a2ab525532fb9ffe2aade9c367abcccaf2f40086', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c11e6477ec54316edd9a5f3971be28e3c6dafb0', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06ea1ff7fa7d001ecace0631ef67c46ecaa27980', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
594494846,Port TuttleOFX extension : aligned,"### Description

This pull request intends to port ```aligned``` extension from [TuttleOFX repository](https://github.com/tuttleofx/TuttleOFX/tree/develop/libraries/boostHack/boost/gil/extension/toolbox) to Gil as mentioned in #449 .

I have tried not to change anything significant in actual extension code. However, I have reformatted test cases completely in order to align them with current practices followed by Gil.


### Tasklist

<!-- Add YOUR OWN TASK(s), especially if your PR is a work in progress -->

- [x] Add test case(s)
- [x] Ensure all CI builds pass
- [ ] Review and approve
",False,583,https://api.github.com/repos/boostorg/gil/pulls/583,https://github.com/boostorg/gil/pull/583,open,367,0,5,17,3,0,2,0,"[{'name': 'cat/feature'}, {'name': 'ext/toolbox'}]",2021-03-17 08:04:04+00:00,,0.0,,[],"[{'commit_sha': '2b550c2f63ebe553b61457488d0bb0bc0a324850', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48436fc82ab3d6ffbd2ce13d343640edc54ad02b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14900be7116e0002090569a637d4d52928bc0cea', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d92b28451757a05a5043cdac1e9e96b13b3740', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac3102cec60370f6e7ce590bacf0d1a591f3010', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e779a915112664890f7e1107369d62c8f6a4d48', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa5d7cdd1c887c03461601c54c7636544a3833f', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73580e1b2a084326ab40c4c5e898c3a45857fefd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcfce0b66c50b1a00c1d109b5113d21c638fe4e6', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf7d3ca3cd475e4b4300faeb1c9ff3f6473596cd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '74d5b2274814bf277d517ec4373f3748740a3198', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '820a53571de5dd54ed02d30d9c18c0dbac215c53', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b80efc59a78236098064c0e9c30b09ef514b8c90', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e050ad20ce7d3718681b9c99bc616c79c3e890ef', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b87aafd0ae871e6189a8a6dac5f4dc3a2dbfd52e', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5501b548c269d219568feb8114e3ee371f250199', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd5ff1620a263886251b586370664d27a3a622bea', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89
566777578,Fix sphinx installation link in docs readme,"### Description

We have a section related to installation of documentation tools such as sphinx and doxygen in gil/doc/Readme.md. The link assosciated with sphinx doesn't work . I beleive a simple copy paste of the link to sphinx's official page in the readme should solve this issue .

- [x] Ensure all CI builds pass
- [x] Review and approve
",True,560,https://api.github.com/repos/boostorg/gil/pulls/560,https://github.com/boostorg/gil/pull/560,closed,1,1,1,9,0,0,1,0,[{'name': 'cat/documentation'}],2021-02-03 12:02:22+00:00,2021-02-05 11:27:11+00:00,170689.0,"1 day, 23:24:49",[],"[{'commit_sha': '2b550c2f63ebe553b61457488d0bb0bc0a324850', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48436fc82ab3d6ffbd2ce13d343640edc54ad02b', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14900be7116e0002090569a637d4d52928bc0cea', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53d92b28451757a05a5043cdac1e9e96b13b3740', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ac3102cec60370f6e7ce590bacf0d1a591f3010', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e779a915112664890f7e1107369d62c8f6a4d48', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3aa5d7cdd1c887c03461601c54c7636544a3833f', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73580e1b2a084326ab40c4c5e898c3a45857fefd', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3a43e5d23e709988b81104e0a343416988fe0ad', 'committer_username': 'meshtag', 'committer_name': 'Prathamesh Tagore', 'committer_email': None, 'commit_date': datetime.datetime(2020, 4, 2, 3, 15, 52, tzinfo=datetime.timezone.utc)}]",Prathamesh Tagore,63031630,,User,,34,,42,89

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
7590006,gil,boostorg/gil,C++,165,177,18,68,1144,103,6,30,"[{'id': 704832837, 'number': 624, 'closed': None, 'created': datetime.datetime(2021, 8, 5, 16, 0, 46, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1171, 'deletions': 196, 'state': 'open'}, {'id': 660616130, 'number': 613, 'closed': None, 'created': datetime.datetime(2021, 6, 3, 6, 33, 52, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 248, 'deletions': 5, 'state': 'open'}, {'id': 657423422, 'number': 612, 'closed': None, 'created': datetime.datetime(2021, 5, 29, 7, 58, 18, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 574, 'deletions': 1, 'state': 'open'}, {'id': 655930985, 'number': 611, 'closed': datetime.datetime(2021, 5, 30, 18, 21, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 28, 6, 52, 55, tzinfo=datetime.timezone.utc), 'time_taken': 214131.0, 'time_delta': '2 days, 11:28:51', 'additions': 61, 'deletions': 35, 'state': 'closed'}, {'id': 626207909, 'number': 600, 'closed': None, 'created': datetime.datetime(2021, 4, 29, 15, 24, 3, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1157, 'deletions': 58, 'state': 'open'}, {'id': 598532943, 'number': 585, 'closed': datetime.datetime(2021, 3, 28, 19, 0, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 23, 4, 23, 19, tzinfo=datetime.timezone.utc), 'time_taken': 484613.0, 'time_delta': '5 days, 14:36:53', 'additions': 324, 'deletions': 1, 'state': 'closed'}, {'id': 594494846, 'number': 583, 'closed': None, 'created': datetime.datetime(2021, 3, 17, 8, 4, 4, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 367, 'deletions': 0, 'state': 'open'}, {'id': 594493555, 'number': 582, 'closed': None, 'created': datetime.datetime(2021, 3, 17, 8, 1, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 88, 'deletions': 0, 'state': 'open'}, {'id': 594481525, 'number': 581, 'closed': None, 'created': datetime.datetime(2021, 3, 17, 7, 41, 52, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 298, 'deletions': 0, 'state': 'open'}, {'id': 593768633, 'number': 580, 'closed': datetime.datetime(2021, 3, 17, 4, 30, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 16, 10, 24, 45, tzinfo=datetime.timezone.utc), 'time_taken': 65119.0, 'time_delta': '18:05:19', 'additions': 1023, 'deletions': 122, 'state': 'closed'}, {'id': 576593573, 'number': 562, 'closed': None, 'created': datetime.datetime(2021, 2, 19, 17, 4, 46, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 447, 'deletions': 34, 'state': 'open'}, {'id': 566777578, 'number': 560, 'closed': datetime.datetime(2021, 2, 5, 11, 27, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 3, 12, 2, 22, tzinfo=datetime.timezone.utc), 'time_taken': 170689.0, 'time_delta': '1 day, 23:24:49', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 564017281, 'number': 554, 'closed': datetime.datetime(2021, 1, 29, 21, 8, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 29, 14, 21, 47, tzinfo=datetime.timezone.utc), 'time_taken': 24374.0, 'time_delta': '6:46:14', 'additions': 28, 'deletions': 0, 'state': 'closed'}, {'id': 559505188, 'number': 541, 'closed': datetime.datetime(2021, 2, 13, 16, 1, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 21, 19, 52, 20, tzinfo=datetime.timezone.utc), 'time_taken': 1973342.0, 'time_delta': '22 days, 20:09:02', 'additions': 580, 'deletions': 1, 'state': 'closed'}, {'id': 553589097, 'number': 539, 'closed': datetime.datetime(2021, 2, 2, 8, 49, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 12, 16, 28, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1786850.0, 'time_delta': '20 days, 16:20:50', 'additions': 96, 'deletions': 0, 'state': 'closed'}, {'id': 553411171, 'number': 538, 'closed': datetime.datetime(2021, 1, 21, 19, 45, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 12, 12, 6, 38, tzinfo=datetime.timezone.utc), 'time_taken': 805156.0, 'time_delta': '9 days, 7:39:16', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 552055584, 'number': 535, 'closed': datetime.datetime(2021, 1, 12, 11, 49, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 9, 4, 58, 34, tzinfo=datetime.timezone.utc), 'time_taken': 283875.0, 'time_delta': '3 days, 6:51:15', 'additions': 175, 'deletions': 0, 'state': 'closed'}, {'id': 551280106, 'number': 534, 'closed': datetime.datetime(2021, 1, 9, 4, 51, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 1, 7, 20, 16, 55, tzinfo=datetime.timezone.utc), 'time_taken': 117261.0, 'time_delta': '1 day, 8:34:21', 'additions': 141800, 'deletions': 1, 'state': 'closed'}]"
