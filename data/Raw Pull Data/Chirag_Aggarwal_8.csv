pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1358033449,Integration Tests for Borg,"### Related Issue
Fixes #1711

### Motivation and Context
https://github.com/borgbase/vorta/wiki/Google-Summer-of-Code-2023-Ideas#test-on-live-borg-binary


### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [x] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have added tests to cover my changes.
- [x] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->
",True,1716,https://api.github.com/repos/borgbase/vorta/pulls/1716,https://github.com/borgbase/vorta/pull/1716,closed,1253,124,63,75,49,39,0,0,[],2023-05-20 19:55:07+00:00,2023-08-05 13:49:46+00:00,6630879.0,"76 days, 17:54:39","[{'comment_id': 1208691920, 'comment_body': 'Creating this file type seems to require root-level permission on Linux. Should I skip this?', 'comment_created': datetime.datetime(2023, 5, 28, 23, 23, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1209010399, 'comment_body': ""In that case yes. We wouldn't want to run tests with root permissions."", 'comment_created': datetime.datetime(2023, 5, 29, 7, 30, 14, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1209019823, 'comment_body': ""That's a funny diff produced by git/github."", 'comment_created': datetime.datetime(2023, 5, 29, 7, 40, 53, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1213602357, 'comment_body': ""Hah, that's weird!"", 'comment_created': datetime.datetime(2023, 6, 1, 19, 39, 54, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1223879706, 'comment_body': ""You can move common fixtures into `tests/conftest.py` afaik.\r\nI saw other projects do this. However I couldn't find the documentation stating this feature."", 'comment_created': datetime.datetime(2023, 6, 9, 6, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1223886064, 'comment_body': ""Doesn't it say `Refreshing archives done` before the prune already?"", 'comment_created': datetime.datetime(2023, 6, 9, 6, 15, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1223890891, 'comment_body': 'Please also add nox to the dev requirements file and adjust the Makefile so that one can run the unit and integration tests seperately through make.', 'comment_created': datetime.datetime(2023, 6, 9, 6, 22, 55, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1223901612, 'comment_body': 'You are right. Added a check to first check for prune initialiazation.', 'comment_created': datetime.datetime(2023, 6, 9, 6, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1223924067, 'comment_body': 'Done. Can you take a look?', 'comment_created': datetime.datetime(2023, 6, 9, 7, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1223929420, 'comment_body': 'Done.\r\nRetained `rootdir` fixture in seperate `conffile.py` over modifying unit tests to include `/unit` in json file path. Let me know if that also need to be moved.', 'comment_created': datetime.datetime(2023, 6, 9, 7, 10, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1223931384, 'comment_body': 'Should we pass coverage by default for these? What do you think?', 'comment_created': datetime.datetime(2023, 6, 9, 7, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1223933715, 'comment_body': ':+1: ', 'comment_created': datetime.datetime(2023, 6, 9, 7, 15, 30, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1223944278, 'comment_body': ""I didn't add them since integration might not reach full coverage but now that I think again, it might be useful to know the stats."", 'comment_created': datetime.datetime(2023, 6, 9, 7, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1223976470, 'comment_body': 'Module level docstrings have to go before the imports afaik.', 'comment_created': datetime.datetime(2023, 6, 9, 7, 59, 1, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1229636563, 'comment_body': 'Old versions of Borg  (1.1.18) do not support fifo among some other file types causing this test to fail. See https://github.com/borgbackup/borg/issues/2324\r\n\r\nShould I specify this condition explicitly? Perhaps subtracting unsupported file type from length assertion and skipping them in L353 if version is old? ', 'comment_created': datetime.datetime(2023, 6, 14, 13, 37, 47, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1229927458, 'comment_body': 'Yes, that makes sense.', 'comment_created': datetime.datetime(2023, 6, 14, 17, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1233228366, 'comment_body': ""Since this composite action is used to setup different workflows like `test` or `lint` please bring back configurability. Installing all python versions introduces a lot of overhead slowing down workflow runtime which isn't needed for linting the project."", 'comment_created': datetime.datetime(2023, 6, 18, 8, 31, 34, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1240877618, 'comment_body': 'After moving back to matrix for python version, this is restored again,', 'comment_created': datetime.datetime(2023, 6, 24, 16, 12, 56, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1240905449, 'comment_body': '`make test` runs unit test for all borgbackup version which is unnecessary. Should I add a condition to run `make test` only for borgbackup version 1.1.18 and `make test-integration` for the rest, if that makes sense?', 'comment_created': datetime.datetime(2023, 6, 24, 17, 25, 10, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1240932465, 'comment_body': ""Can you put the unit tests in a separate run which doesn't install borg at all (or do we need a borg installation for the unit tests to work)?"", 'comment_created': datetime.datetime(2023, 6, 24, 20, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1240942155, 'comment_body': ""@real-yfprojects We do need some installation of borg so Vorta doesn't complain at startup and maybe during other functions."", 'comment_created': datetime.datetime(2023, 6, 24, 20, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1241214502, 'comment_body': 'I would still prefer a separate run for the unittests so that it shows up separately in the PR checks list.', 'comment_created': datetime.datetime(2023, 6, 25, 14, 58, 43, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1241237671, 'comment_body': ""I've added a seperate job for unit tests instead of trying to accomodate in main job to reduce complexity. I tried to use include to create combination which includes unit tests for just one version but that didn't work properly."", 'comment_created': datetime.datetime(2023, 6, 25, 16, 55, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1243361265, 'comment_body': '\n```suggestion\n    if (borgbackup == ""1.1.18"" or sys.platform == \'darwin\'):\n        # reason for this exceptional treatment\n        session.install(f""borgbackup=={borgbackup}"")\n```', 'comment_created': datetime.datetime(2023, 6, 27, 8, 43, 3, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1243362735, 'comment_body': ""Why do you do not install fuse for `1.1.18`? While versions prior 1.2.0 didn't support *pyfuse3* they supported *llfuse*."", 'comment_created': datetime.datetime(2023, 6, 27, 8, 44, 11, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1243367834, 'comment_body': 'Why not use `runner.os` directly?', 'comment_created': datetime.datetime(2023, 6, 27, 8, 47, 4, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1243376615, 'comment_body': 'Since this action is used by lint also, what about adding a `nox` input?', 'comment_created': datetime.datetime(2023, 6, 27, 8, 51, 34, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1243537620, 'comment_body': ""Why don't you use `sys.version_info`?"", 'comment_created': datetime.datetime(2023, 6, 27, 10, 47, 29, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1244148789, 'comment_body': ""I didn't know this returns version info as integer. Used it now."", 'comment_created': datetime.datetime(2023, 6, 27, 18, 1, 43, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1244171608, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2023, 6, 27, 18, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1244172227, 'comment_body': 'I thought actions do not have access to `runner`. Used it in new commit.', 'comment_created': datetime.datetime(2023, 6, 27, 18, 20, 13, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1244219747, 'comment_body': 'Added in latest commit.', 'comment_created': datetime.datetime(2023, 6, 27, 19, 3, 14, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1248882828, 'comment_body': 'Did you forget to remove that?', 'comment_created': datetime.datetime(2023, 7, 1, 15, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1248883852, 'comment_body': 'Did you do that already?', 'comment_created': datetime.datetime(2023, 7, 1, 15, 56, 19, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1252395409, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2023, 7, 4, 22, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1252395636, 'comment_body': ""I tried the docs and github issues but couldn't find a explanation."", 'comment_created': datetime.datetime(2023, 7, 4, 22, 54, 20, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1267738313, 'comment_body': ""diff_results.py L#221\r\n```\r\nfile_type = FileType.FILE\r\n```\r\n\r\nSo it assigns the default file type of FILE and borg version 1.2.4 doesn't seem to return a type hence this."", 'comment_created': datetime.datetime(2023, 7, 19, 8, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1267787890, 'comment_body': 'So is this a bug we should open an issue for?', 'comment_created': datetime.datetime(2023, 7, 19, 9, 8, 19, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1267802837, 'comment_body': ""Sorry I just assumed it's intended behavior. I'll check some more and compare the actual result of borg w/ parse function and get back on this."", 'comment_created': datetime.datetime(2023, 7, 19, 9, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}]","[{'commit_sha': '23ccbde4ff176ce9cb32f1b6524793b3f256c3a2', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '70a9db9da53adb5a98748e84ad17dc8da8d5bf87', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2a46274f6d15328bf7e9dd522521f5077421ec68', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cd2658bc753638879cb73f6c0794818f76ebcac', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '077f993d561828b0709ce43c78d1f7f8073c420f', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5b3b6c6b44f03524c58f4b1a96b0aa0f06290e0b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e243f683f924e684a3578738cfe741195e790359', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14cab4a40b988026a4db4c6b5bf12aad16b36ad0', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '05ecaf2e8ece437d9f9e710099722944c84c49a6', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ca561304ee0c49b5d11d6dce0178b1ab6f0da8f', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6418e8604d1ab0ef260186fa6f53064001060b5', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a68cb65ade0fad231e885e837be906a3b01acaec', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e456f1009a2f37fd1a5c515b6477d9a027747c5b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c769e8a2c592eb2bc39c45b2de9ea3d7723fb8e', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '854ee602eb4de483e1ae5cf76f6c4ebeedcf5370', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '72215dc3b634a5ea11ef3319eaa30a3b3246f306', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce942138b3be9720ee4bc89afb0ddee7872c777f', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9067939d2ca6642287601885075efade9ca01e7b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd19b83435aff0f033e1045953f015553598fdb72', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bb7c2f6c0bbdf4a8c331dd90aea6583e5ee6a09a', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9c3da3d7374b8e1c457d5212dc8b88d8ff72f8b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f8d1a308642aea1d7d2437a74a9d5d415dfa98b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '56827da8c9bb081f942421f37998d607ee61275a', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4a462e706ab77dc6a3f8a18b5b6b73875333e1', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd12dd086d11802876df51d03bf9ca7c2a6fed9e5', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '725b6b024b6703acb9f1a2598e4f22a0cedb9698', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a0c1c9e41f27da76d4a66a9e4d1c16157c53f9c', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce33f9ec2ce5c7e50973c5414282a44ffc4a307d', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4a6c778d7db8fa5db22885d4c52b27ff08a08609', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'db5d6bbf14e64b7e6ddcdf917c0f5c81151e9462', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ecdec47fc2645e1e922fac8411fc708225e3fbd', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'da05507a7227192711f36f79f3e710ae316832c1', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1c71901b88e4e4f59284b9629c1469e7f49456b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '914a35abd1aa9f3ce15a19edeb316581324232a6', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79d247e35487f39722306ed086389a2b467c6cdf', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9a19d90ab740c4865bc698bb2a84f04b585a3e37', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec8710442f699bf6df264d802cb19a7d8d78e6a7', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '282c119788bfd1cf037946f0c854814d794f5960', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1bc222a23c502310d5d1e3eff820ea61bb1aae48', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83695fd9649db460721dc483d7acb2756bb616bc', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ede422c5446d96edc29028f7e7fb497f14480795', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86da9e9154751b3cd7b4b0b838259601ca19ec56', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b95d245f2aca08265113b7568570fefb02d672a6', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '101c70982ddb562224f6c90cba3eb5c9930497bd', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e1c70c62ca0e4879d1478850da4f6440c80c40b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23ce04c21b1f594c3f5d3fc72ae535e324dde59e', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd7736213b520b3ce144b9036e8945569e621c34', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1db9d4b084acc5665819059b8b7dfdef12cba6b2', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf0dfaab15c00853ca5b83f882950f52359dfd44', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '770ecbff72b51b2a469d7823688aa8d1bb09dc48', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '71f1ef6600bad44aa97e3e06f0d9647c1a606750', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd023716861982761cfb7d78eb98d52ac8c75bca', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e484f1a1bddbf58faa89dcffabe18c43ec09960', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba61d9e9535131caab6789c931640bd70c3ad71a', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94bdc97c0150a0243444a8065e83b3fe91f53592', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26772e5ccb2434d9b39449338fa1670143b9635b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c514351a0101d43e2dc6b90d6a6f9a50b43d2d2', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b33e378a723f2e6fa4565e9066c114c3609c148', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48afd4b9eb7c0c514114c4e28ae30a8765ec3a97', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f1302f4bf0128dd26a0b7eb6585eede7a71ceaf1', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c0ca6163383f2e1ee135da7bb33e2be27f67c433', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '211dec16794bc13bbfd8fe4c328d6b64d05b3920', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4152103d05f50f5e7f202266341b3d6689ea5293', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55c8a8457bdb2b3cea3a59d41c1062a97fbd2cc4', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '99a3c111db3bc26b836a8ffe27bbb0acb8aff5cf', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f64d7d31d1c34130bd3b2f33809a3f4e9b7058a1', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c8757f21abd2d42d8889469cf127c88d327936aa', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0cdb4f8ed2b400d0fe59c014fe2ca3c97197d1e0', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14ce5d43bb24eb6a4502beecf87bbbb29d225aba', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '956eebd6da7e64e339abe8d077259a6babeca73d', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cc3bc7509b824602105d77cd2c0599dbd92c99b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '37f91ea96d981db13d97723f60788499ede71f19', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff0f32ad64faecf792dd54fc0cafe297663c804b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b2f272f63886fa70c2b6816d0a95ed28c4697c3', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0532cd9d7171eeccf29e95eb9cb40ac9fdd3a692', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}]",,15169678,i@chirag.sh,User,,45,,5,19
1428653137,Diff and Extract View Filtering Options,"<!--- Provide a general summary of your changes in the Title above -->

### Description
WIP. Adds filtering option(s) to Vorta diff and extract view.

- [x] Add a Search button to avoid resource issue with large tree
- [x] Add syntax search
- [x] View specific search options
- [ ] Tests

### Related Issue
Fixes #1674


### Screenshots (if appropriate):

![image](https://github.com/borgbase/vorta/assets/15169678/f78c45f3-9518-40f8-8ff5-6cb65d1c18b5)


### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [ ] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->

***

### Follow ups

- [ ] Document search syntax in Vorta docs
- [ ] Link documentation somewhere near the search bar
- [ ] Implement helper widget for inserting the search syntax
- [ ] Show error message when search syntax is violated",False,1749,https://api.github.com/repos/borgbase/vorta/pulls/1749,https://github.com/borgbase/vorta/pull/1749,open,825,216,15,39,67,55,0,0,[],2023-07-11 03:51:22+00:00,,0.0,,"[{'comment_id': 1261355656, 'comment_body': 'Have you read the notice that `beginResetModel` might be more efficient?', 'comment_created': datetime.datetime(2023, 7, 12, 15, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1261357514, 'comment_body': 'Does overriding this existing method provide a benefit? Otherwise I would choose a more fitting name since we will filte with an elaborate syntax eventually.', 'comment_created': datetime.datetime(2023, 7, 12, 15, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1261365294, 'comment_body': '```suggestion\n        if not self.searchPattern:\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 15, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1261374771, 'comment_body': ""I had not, thank you I'll check it."", 'comment_created': datetime.datetime(2023, 7, 12, 15, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1261395879, 'comment_body': ""Where's this notice? I used https://doc.qt.io/qt-6/qsortfilterproxymodel.html#invalidateRowsFilter to refer available methods."", 'comment_created': datetime.datetime(2023, 7, 12, 15, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1261424591, 'comment_body': 'Last paragraph of https://doc.qt.io/qt-6/qsortfilterproxymodel.html#filtering', 'comment_created': datetime.datetime(2023, 7, 12, 16, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1263518975, 'comment_body': ""I'm not sure if it will be actually more efficient. It does mention it will require model to be repopulated and I want to invoke search through a button so it won't actually be called a lot of times (depends on the users though).\r\nLet's leave this review open for now and once all filters have been added, I'll try running some basic tests to see which one performs better."", 'comment_created': datetime.datetime(2023, 7, 14, 9, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1270487825, 'comment_body': 'Done in last commit.', 'comment_created': datetime.datetime(2023, 7, 21, 9, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1270488117, 'comment_body': ""I couldn't figure how to effeciently use `beginResetModel` but from the explanations I've looked at, it reset the full model and that means everything needs to be populated again including the filters.\r\n\r\nWhereas `invalidateRowsFilter` would only reset rows filters which will need to be filtered again anyway with `beginResetModel`. But I couldn't test it.\r\n\r\nI called `beginResetModel()` on search string function but I am not sure where to call `endResetModel` to test this."", 'comment_created': datetime.datetime(2023, 7, 21, 9, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1278204056, 'comment_body': ""I think resetting model will also loose the checkbox state in extract view. So if someone needs to extract files from multiple searches, it wouldn't work."", 'comment_created': datetime.datetime(2023, 7, 29, 1, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1278342491, 'comment_body': 'Ok, that rules out resetting the model.', 'comment_created': datetime.datetime(2023, 7, 29, 17, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299893206, 'comment_body': 'There is still a TODO.', 'comment_created': datetime.datetime(2023, 8, 21, 9, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299894704, 'comment_body': 'Very nice but the class and some methods are missing docstrings.', 'comment_created': datetime.datetime(2023, 8, 21, 9, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299895622, 'comment_body': 'This has to be readded afaik.', 'comment_created': datetime.datetime(2023, 8, 21, 10, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299896433, 'comment_body': 'A short docstring describing what the test ensures would be nice.', 'comment_created': datetime.datetime(2023, 8, 21, 10, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299900433, 'comment_body': ""Let's make those either static methods or utility functions."", 'comment_created': datetime.datetime(2023, 8, 21, 10, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299902418, 'comment_body': ""Let's make that a utility function."", 'comment_created': datetime.datetime(2023, 8, 21, 10, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299928569, 'comment_body': 'Why is the signal emitted before the pattern is parsed?', 'comment_created': datetime.datetime(2023, 8, 21, 10, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299961264, 'comment_body': 'This leads to the same issue as in a previous PR: The tooltip also gets the border.', 'comment_created': datetime.datetime(2023, 8, 21, 11, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1300615124, 'comment_body': ""This was implemented. I'll remove the comment it in next PR."", 'comment_created': datetime.datetime(2023, 8, 21, 20, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1300654279, 'comment_body': 'Since these are very use specific, moving these to static methods\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 21, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1300696856, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2023, 8, 21, 22, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1300706351, 'comment_body': 'Added', 'comment_created': datetime.datetime(2023, 8, 21, 22, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1302820874, 'comment_body': 'Can you add type hints and a docstring?', 'comment_created': datetime.datetime(2023, 8, 23, 10, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302824098, 'comment_body': 'In such cases I like to use class methods since they allow using potentially overridden implementations of `parse_size`.', 'comment_created': datetime.datetime(2023, 8, 23, 10, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302825244, 'comment_body': '\n```suggestion\n        Parse the search string into a list of tokens.\n\n        May raise `SystemExit`.\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302827229, 'comment_body': ""I think you don't need to have `DiffTreeSortProxyModel` and `DiffTreeSortFilterProxyModel`. You can merge the methods into one class. Or am I overlooking an advantage?"", 'comment_created': datetime.datetime(2023, 8, 23, 10, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302828136, 'comment_body': ""We don't need this here, since super already implements the check."", 'comment_created': datetime.datetime(2023, 8, 23, 10, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302829267, 'comment_body': '\n```suggestion\n            type=self.valid_date_range,\n```\n\nThis is more pythonic I think + allows overiding', 'comment_created': datetime.datetime(2023, 8, 23, 10, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302831099, 'comment_body': 'I guess, those should be mutually exclusive which is possible with argparse.\nhttps://docs.python.org/3.9/library/argparse.html?#mutual-exclusion\n\nAnd you can specify a the attribute to store the value in using `dest`. This allows storing the value for both arguments in the same attribute slightly simplifying code below.', 'comment_created': datetime.datetime(2023, 8, 23, 10, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302834600, 'comment_body': '\n```suggestion\n    def parse_size(size: str):\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302834759, 'comment_body': '\n```suggestion\n    def valid_size(value: str):\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302835061, 'comment_body': '\n```suggestion\n    def parse_date(value: str):\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302835296, 'comment_body': '\n```suggestion\n    def valid_date_range(value: str):\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1304953434, 'comment_body': 'Makes sense! ', 'comment_created': datetime.datetime(2023, 8, 24, 23, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1304954286, 'comment_body': ""I added this because if super returns True (if search is empty) it will still go through child class's custom checks (balance in this case). What do you think?"", 'comment_created': datetime.datetime(2023, 8, 24, 23, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1304956888, 'comment_body': ""@real-yfprojects I couldn't find where `DiffTreeSortProxyModel` is defined. I only see `DiffTreeSortFilterProxyModel`"", 'comment_created': datetime.datetime(2023, 8, 24, 23, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1304959776, 'comment_body': 'Added mutual exclusion. I am not sure about the second suggestion. Do you mean to use `store_const` and then passing const value so it can be compared like\r\n\r\n```\r\nif args.health == ""healthy"":\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 23, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1307270306, 'comment_body': 'In diff_result.py', 'comment_created': datetime.datetime(2023, 8, 28, 10, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1307270701, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2023, 8, 28, 10, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1307272300, 'comment_body': 'No, you can use `store_true` and `store _false` while the absence of a health filter will be encoded in the default value `None`', 'comment_created': datetime.datetime(2023, 8, 28, 10, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1320123705, 'comment_body': ""@real-yfprojects I still can't find any mention. Can you check the PR changes once again?"", 'comment_created': datetime.datetime(2023, 9, 8, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1322683079, 'comment_body': 'https://github.com/borgbase/vorta/blob/7ebc36ee733934a38f7ab6405f3287d12f3908ee/src/vorta/views/diff_result.py#L396', 'comment_created': datetime.datetime(2023, 9, 12, 8, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1336291535, 'comment_body': ""I'm getting circular import issue for `ChangeType` class import in `treemodel.py` from `diff_result.py`. Should I move it inside treemodel and import in the latter one?"", 'comment_created': datetime.datetime(2023, 9, 25, 19, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1342001411, 'comment_body': ""If you only keep https://github.com/borgbase/vorta/blob/7ebc36ee733934a38f7ab6405f3287d12f3908ee/src/vorta/views/diff_result.py#L396\r\nand add the code from https://github.com/borgbase/vorta/blob/8950eb2c94f8abb1a3b14b1413ebd78e40263b01/src/vorta/views/partials/treemodel.py#L1160 to it. You shouldn't get any circular imports."", 'comment_created': datetime.datetime(2023, 9, 30, 19, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1375322311, 'comment_body': 'Please check the implementation in next commit.', 'comment_created': datetime.datetime(2023, 10, 28, 21, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1403718355, 'comment_body': 'Is this still missing and why do we want to disable that elide mode?', 'comment_created': datetime.datetime(2023, 11, 23, 20, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403720451, 'comment_body': '```suggestion\n        if self.searchPattern.healthy is not None\n            return item.data.health == self.searchPattern.healthy\n```\n\nThis is an optional simplification if I am not mistaken.', 'comment_created': datetime.datetime(2023, 11, 23, 21, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403722272, 'comment_body': 'Is this still open?', 'comment_created': datetime.datetime(2023, 11, 23, 21, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403723300, 'comment_body': 'Is this still open?', 'comment_created': datetime.datetime(2023, 11, 23, 21, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403724252, 'comment_body': '\n```suggestion\nclass ExtractSortFilterProxyModel(FileTreeSortFilterProxyModel):\n```', 'comment_created': datetime.datetime(2023, 11, 23, 21, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403724362, 'comment_body': '\n```suggestion\nclass DiffSortFilterProxyModel(FileTreeSortFilterProxyModel):\n```', 'comment_created': datetime.datetime(2023, 11, 23, 21, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403724418, 'comment_body': 'This should be moved to `DiffSortProxyModel`.', 'comment_created': datetime.datetime(2023, 11, 23, 21, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403724576, 'comment_body': 'This should be moved to `DiffSortProxyModel` too.', 'comment_created': datetime.datetime(2023, 11, 23, 21, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1484395431, 'comment_body': ""I can't recall correctly but I think I was worried it won't be able to search elided text but it seems to be working fine, only visible text is modified.\r\n![image](https://github.com/borgbase/vorta/assets/15169678/681783d9-26d7-458c-87e9-c6510a83afd4)\r\n"", 'comment_created': datetime.datetime(2024, 2, 9, 14, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}]","[{'commit_sha': '84c5b748ac6f36ba9200114dc4409ce5475375c1', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384b41e1ce18f02f14dd53af3a8466858b1f3ce5', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f3383f7b57db2314b12bbd8181f855e2778a25', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1da2ecd90d1c2c6e6fa90e3369a78771f4830442', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69649b0011967ceaa8a8f395eca0c248fc39b818', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b947858cc86e8faaa1f8fe037c5192f8582f5cd2', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f14a1c6867ccd3e6724dedd59e833fbf1a8fd60d', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15b2fd466db33e6d6e5aa0af7c7157e0981bb499', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '370a4fbd9f6b02dd787f0562e33f2410c3d1f049', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4247e828174fc5605e0030345f6650adb1e34d56', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1cbdfc461c920f479449d4b5169d9e294595443', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67e884fe6954ca6839fe3c59a8388776780b35ee', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba80f2ebd8a6afb3b09ba506e8927e1f70136885', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f965fb45083fbe04d58866a31886d161d91daec0', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e8bd75e5695b619c44fddc603823420d1ac6a18', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b91ada96ea67ee9d0628b61925369863ac4cd941', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db3d24ed30e0cd7d2372ed834cff75edd734bcf', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '547d3b494d6cec536a42864afc32d31fef97cea0', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57309cc64bf24cb5cf39640ea30cecc889b1af4e', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b0f0b6b5f7078c922b38a20f34194cccc268532', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a56af3ab8279beeb0abd70f076f31651c1ede6fd', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd45d6afec3e8b3b7d9829bf4ecbf70d7d0300419', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43c2d913e1d4a30c4f11ecbc95a3ea76ee618970', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0706d878216e1246a9f4acd0bc98ae70fe368599', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd77419a17d63b02210876c432ffd0a8d6fdb44c', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1fdbf4df71f0ac3f348471f4ab4d683081c6461', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ebc36ee733934a38f7ab6405f3287d12f3908ee', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2912f52ff17785cdc38b17231cff4728f799418', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8950eb2c94f8abb1a3b14b1413ebd78e40263b01', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06560d21fe1abe1e8af234d06723724c433bb2ea', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e43cca510937c609d7560119e624684283bee4f', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f288952397e58134d12a022a24ad5bb7779d5f0f', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f46c4a334fda1be2bb913eec7f8597e4e2c4cf5', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c28bde6d76163ce849b42820f88169fe5c26377', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63e231e24c7811b99ef20d7f284f02ade9ce5b0e', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53fef0b4512a74dcec1c2f9ae9f87f3448d39596', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6a0707547869248cfbe7536bb4235a7f8adc24f', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab394673c8277483417a0a36abdb5be1a51d756d', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e53546affa901320c5eeb83d53314827ae34e15c', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}]",,15169678,i@chirag.sh,User,,45,,5,19
1404916452,Remove antiquated msmtp and ntfy images,"Following the discussion on #130 and #144, I've made the necessary changes to discontinue the msmtp and ntfy flavors of the Docker image in this pull request.

I've also moved the base flavor to top level of the repo.",True,240,https://api.github.com/repos/borgmatic-collective/docker-borgmatic/pulls/240,https://github.com/borgmatic-collective/docker-borgmatic/pull/240,closed,315,692,36,17,22,2,0,0,[],2023-06-23 11:23:41+00:00,2023-07-08 22:56:10+00:00,1337549.0,"15 days, 11:32:29","[{'comment_id': 1257210837, 'comment_body': 'The reason this is `CMD` and not `ENTRYPOINT` is so people can `docker run -it --rm b3vis/docker-borgmatic bash` and get a shell if needed', 'comment_created': datetime.datetime(2023, 7, 8, 10, 8, 12, tzinfo=datetime.timezone.utc), 'commenter': 'grantbevis', 'type': 'User'}, {'comment_id': 1257212164, 'comment_body': 'I see this is to support the binary use case - resolving', 'comment_created': datetime.datetime(2023, 7, 8, 10, 12, 29, tzinfo=datetime.timezone.utc), 'commenter': 'grantbevis', 'type': 'User'}]","[{'commit_sha': '88f368daf68d1964a96628d128856f2ec982e379', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7e8c584787a3467f6650ba714e63d21bea326e3e', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6733eb7217a94bbd64e884308fa8d9719e77e813', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f4748fcb4a77770bc23e82c48ccb171579a9b583', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12d750e8bdefa1301a4c52c046ef350af3c9095b', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f9daeeb6e0c1e970ccd23e777d3b6a810e60ef7', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '179908ab74ccbb9e4de077917b029af479c185a3', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a677dfbbd9799b62a6f001a1e19783eecad8a916', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9c88ca7ff6f2cbfa1b11c81790900ab94af26c34', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '33e0f2dc03cbfc9225f97fdbed031aec6f39d2d9', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f97cd3527240ab3d06544a3f5e0ec492919026b2', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd81ebb0cecf3282c3c66880ff4e4afa4f9dba06a', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ccde15eafcec6dc667a0b1f29bf7c53331ca1f5', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485de948b7c553c446c380e1573a6da5fa659cce', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '60aecb45a067990bd47877d29f8e060f4530b0e3', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6841236317be151f0977041c8869a70b35e2b63f', 'committer_username': 'grantbevis', 'committer_name': 'Grant Bevis', 'committer_email': None, 'commit_date': datetime.datetime(2016, 7, 1, 17, 7, 36, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7208102374640f5465371e213161fab798de52ce', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}]",,15169678,i@chirag.sh,User,,45,,5,19
1428653137,Diff and Extract View Filtering Options,"<!--- Provide a general summary of your changes in the Title above -->

### Description
WIP. Adds filtering option(s) to Vorta diff and extract view.

- [x] Add a Search button to avoid resource issue with large tree
- [x] Add syntax search
- [x] View specific search options
- [ ] Tests

### Related Issue
Fixes #1674


### Screenshots (if appropriate):

![image](https://github.com/borgbase/vorta/assets/15169678/f78c45f3-9518-40f8-8ff5-6cb65d1c18b5)


### Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

### Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have read the [CONTRIBUTING](https://vorta.borgbase.com/contributing/) guide.
- [x] My code follows the code style of this project.
- [ ] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [ ] All new and existing tests passed.


*I provide my contribution under the terms of the [license](./../../LICENSE.txt) of this repository and I affirm the [Developer Certificate of Origin][dco].*

[dco]: https://developercertificate.org/

<!--
This template is sourced from the awesome https://github.com/TalAter/open-source-templates
-->

***

### Follow ups

- [ ] Document search syntax in Vorta docs
- [ ] Link documentation somewhere near the search bar
- [ ] Implement helper widget for inserting the search syntax
- [ ] Show error message when search syntax is violated",False,1749,https://api.github.com/repos/borgbase/vorta/pulls/1749,https://github.com/borgbase/vorta/pull/1749,open,825,216,15,39,67,55,0,0,[],2023-07-11 03:51:22+00:00,,0.0,,"[{'comment_id': 1261355656, 'comment_body': 'Have you read the notice that `beginResetModel` might be more efficient?', 'comment_created': datetime.datetime(2023, 7, 12, 15, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1261357514, 'comment_body': 'Does overriding this existing method provide a benefit? Otherwise I would choose a more fitting name since we will filte with an elaborate syntax eventually.', 'comment_created': datetime.datetime(2023, 7, 12, 15, 30, 34, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1261365294, 'comment_body': '```suggestion\n        if not self.searchPattern:\n```\n', 'comment_created': datetime.datetime(2023, 7, 12, 15, 36, 43, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1261374771, 'comment_body': ""I had not, thank you I'll check it."", 'comment_created': datetime.datetime(2023, 7, 12, 15, 44, 19, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1261395879, 'comment_body': ""Where's this notice? I used https://doc.qt.io/qt-6/qsortfilterproxymodel.html#invalidateRowsFilter to refer available methods."", 'comment_created': datetime.datetime(2023, 7, 12, 15, 58, 40, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1261424591, 'comment_body': 'Last paragraph of https://doc.qt.io/qt-6/qsortfilterproxymodel.html#filtering', 'comment_created': datetime.datetime(2023, 7, 12, 16, 20, 16, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1263518975, 'comment_body': ""I'm not sure if it will be actually more efficient. It does mention it will require model to be repopulated and I want to invoke search through a button so it won't actually be called a lot of times (depends on the users though).\r\nLet's leave this review open for now and once all filters have been added, I'll try running some basic tests to see which one performs better."", 'comment_created': datetime.datetime(2023, 7, 14, 9, 32, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1270487825, 'comment_body': 'Done in last commit.', 'comment_created': datetime.datetime(2023, 7, 21, 9, 52, 15, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1270488117, 'comment_body': ""I couldn't figure how to effeciently use `beginResetModel` but from the explanations I've looked at, it reset the full model and that means everything needs to be populated again including the filters.\r\n\r\nWhereas `invalidateRowsFilter` would only reset rows filters which will need to be filtered again anyway with `beginResetModel`. But I couldn't test it.\r\n\r\nI called `beginResetModel()` on search string function but I am not sure where to call `endResetModel` to test this."", 'comment_created': datetime.datetime(2023, 7, 21, 9, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1278204056, 'comment_body': ""I think resetting model will also loose the checkbox state in extract view. So if someone needs to extract files from multiple searches, it wouldn't work."", 'comment_created': datetime.datetime(2023, 7, 29, 1, 4, 46, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1278342491, 'comment_body': 'Ok, that rules out resetting the model.', 'comment_created': datetime.datetime(2023, 7, 29, 17, 3, 38, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299893206, 'comment_body': 'There is still a TODO.', 'comment_created': datetime.datetime(2023, 8, 21, 9, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299894704, 'comment_body': 'Very nice but the class and some methods are missing docstrings.', 'comment_created': datetime.datetime(2023, 8, 21, 9, 59, 18, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299895622, 'comment_body': 'This has to be readded afaik.', 'comment_created': datetime.datetime(2023, 8, 21, 10, 0, 9, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299896433, 'comment_body': 'A short docstring describing what the test ensures would be nice.', 'comment_created': datetime.datetime(2023, 8, 21, 10, 0, 56, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299900433, 'comment_body': ""Let's make those either static methods or utility functions."", 'comment_created': datetime.datetime(2023, 8, 21, 10, 4, 37, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299902418, 'comment_body': ""Let's make that a utility function."", 'comment_created': datetime.datetime(2023, 8, 21, 10, 6, 26, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299928569, 'comment_body': 'Why is the signal emitted before the pattern is parsed?', 'comment_created': datetime.datetime(2023, 8, 21, 10, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1299961264, 'comment_body': 'This leads to the same issue as in a previous PR: The tooltip also gets the border.', 'comment_created': datetime.datetime(2023, 8, 21, 11, 4, 42, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1300615124, 'comment_body': ""This was implemented. I'll remove the comment it in next PR."", 'comment_created': datetime.datetime(2023, 8, 21, 20, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1300654279, 'comment_body': 'Since these are very use specific, moving these to static methods\r\n', 'comment_created': datetime.datetime(2023, 8, 21, 21, 15, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1300696856, 'comment_body': 'Added.', 'comment_created': datetime.datetime(2023, 8, 21, 22, 6, 31, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1300706351, 'comment_body': 'Added', 'comment_created': datetime.datetime(2023, 8, 21, 22, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1302820874, 'comment_body': 'Can you add type hints and a docstring?', 'comment_created': datetime.datetime(2023, 8, 23, 10, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302824098, 'comment_body': 'In such cases I like to use class methods since they allow using potentially overridden implementations of `parse_size`.', 'comment_created': datetime.datetime(2023, 8, 23, 10, 35, 14, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302825244, 'comment_body': '\n```suggestion\n        Parse the search string into a list of tokens.\n\n        May raise `SystemExit`.\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302827229, 'comment_body': ""I think you don't need to have `DiffTreeSortProxyModel` and `DiffTreeSortFilterProxyModel`. You can merge the methods into one class. Or am I overlooking an advantage?"", 'comment_created': datetime.datetime(2023, 8, 23, 10, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302828136, 'comment_body': ""We don't need this here, since super already implements the check."", 'comment_created': datetime.datetime(2023, 8, 23, 10, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302829267, 'comment_body': '\n```suggestion\n            type=self.valid_date_range,\n```\n\nThis is more pythonic I think + allows overiding', 'comment_created': datetime.datetime(2023, 8, 23, 10, 40, 21, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302831099, 'comment_body': 'I guess, those should be mutually exclusive which is possible with argparse.\nhttps://docs.python.org/3.9/library/argparse.html?#mutual-exclusion\n\nAnd you can specify a the attribute to store the value in using `dest`. This allows storing the value for both arguments in the same attribute slightly simplifying code below.', 'comment_created': datetime.datetime(2023, 8, 23, 10, 42, 10, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302834600, 'comment_body': '\n```suggestion\n    def parse_size(size: str):\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302834759, 'comment_body': '\n```suggestion\n    def valid_size(value: str):\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 45, 44, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302835061, 'comment_body': '\n```suggestion\n    def parse_date(value: str):\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1302835296, 'comment_body': '\n```suggestion\n    def valid_date_range(value: str):\n```', 'comment_created': datetime.datetime(2023, 8, 23, 10, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1304953434, 'comment_body': 'Makes sense! ', 'comment_created': datetime.datetime(2023, 8, 24, 23, 5, 6, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1304954286, 'comment_body': ""I added this because if super returns True (if search is empty) it will still go through child class's custom checks (balance in this case). What do you think?"", 'comment_created': datetime.datetime(2023, 8, 24, 23, 7, 7, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1304956888, 'comment_body': ""@real-yfprojects I couldn't find where `DiffTreeSortProxyModel` is defined. I only see `DiffTreeSortFilterProxyModel`"", 'comment_created': datetime.datetime(2023, 8, 24, 23, 12, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1304959776, 'comment_body': 'Added mutual exclusion. I am not sure about the second suggestion. Do you mean to use `store_const` and then passing const value so it can be compared like\r\n\r\n```\r\nif args.health == ""healthy"":\r\n```', 'comment_created': datetime.datetime(2023, 8, 24, 23, 19, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1307270306, 'comment_body': 'In diff_result.py', 'comment_created': datetime.datetime(2023, 8, 28, 10, 49, 55, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1307270701, 'comment_body': 'Makes sense.', 'comment_created': datetime.datetime(2023, 8, 28, 10, 50, 19, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1307272300, 'comment_body': 'No, you can use `store_true` and `store _false` while the absence of a health filter will be encoded in the default value `None`', 'comment_created': datetime.datetime(2023, 8, 28, 10, 52, 11, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1320123705, 'comment_body': ""@real-yfprojects I still can't find any mention. Can you check the PR changes once again?"", 'comment_created': datetime.datetime(2023, 9, 8, 16, 55, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1322683079, 'comment_body': 'https://github.com/borgbase/vorta/blob/7ebc36ee733934a38f7ab6405f3287d12f3908ee/src/vorta/views/diff_result.py#L396', 'comment_created': datetime.datetime(2023, 9, 12, 8, 50, 36, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1336291535, 'comment_body': ""I'm getting circular import issue for `ChangeType` class import in `treemodel.py` from `diff_result.py`. Should I move it inside treemodel and import in the latter one?"", 'comment_created': datetime.datetime(2023, 9, 25, 19, 12, 24, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1342001411, 'comment_body': ""If you only keep https://github.com/borgbase/vorta/blob/7ebc36ee733934a38f7ab6405f3287d12f3908ee/src/vorta/views/diff_result.py#L396\r\nand add the code from https://github.com/borgbase/vorta/blob/8950eb2c94f8abb1a3b14b1413ebd78e40263b01/src/vorta/views/partials/treemodel.py#L1160 to it. You shouldn't get any circular imports."", 'comment_created': datetime.datetime(2023, 9, 30, 19, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1375322311, 'comment_body': 'Please check the implementation in next commit.', 'comment_created': datetime.datetime(2023, 10, 28, 21, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}, {'comment_id': 1403718355, 'comment_body': 'Is this still missing and why do we want to disable that elide mode?', 'comment_created': datetime.datetime(2023, 11, 23, 20, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403720451, 'comment_body': '```suggestion\n        if self.searchPattern.healthy is not None\n            return item.data.health == self.searchPattern.healthy\n```\n\nThis is an optional simplification if I am not mistaken.', 'comment_created': datetime.datetime(2023, 11, 23, 21, 2, 17, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403722272, 'comment_body': 'Is this still open?', 'comment_created': datetime.datetime(2023, 11, 23, 21, 5, 35, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403723300, 'comment_body': 'Is this still open?', 'comment_created': datetime.datetime(2023, 11, 23, 21, 8, 7, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403724252, 'comment_body': '\n```suggestion\nclass ExtractSortFilterProxyModel(FileTreeSortFilterProxyModel):\n```', 'comment_created': datetime.datetime(2023, 11, 23, 21, 10, 50, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403724362, 'comment_body': '\n```suggestion\nclass DiffSortFilterProxyModel(FileTreeSortFilterProxyModel):\n```', 'comment_created': datetime.datetime(2023, 11, 23, 21, 11, 1, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403724418, 'comment_body': 'This should be moved to `DiffSortProxyModel`.', 'comment_created': datetime.datetime(2023, 11, 23, 21, 11, 10, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1403724576, 'comment_body': 'This should be moved to `DiffSortProxyModel` too.', 'comment_created': datetime.datetime(2023, 11, 23, 21, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'real-yfprojects', 'type': 'User'}, {'comment_id': 1484395431, 'comment_body': ""I can't recall correctly but I think I was worried it won't be able to search elided text but it seems to be working fine, only visible text is modified.\r\n![image](https://github.com/borgbase/vorta/assets/15169678/681783d9-26d7-458c-87e9-c6510a83afd4)\r\n"", 'comment_created': datetime.datetime(2024, 2, 9, 14, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'jetchirag', 'type': 'User'}]","[{'commit_sha': '84c5b748ac6f36ba9200114dc4409ce5475375c1', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '384b41e1ce18f02f14dd53af3a8466858b1f3ce5', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '45f3383f7b57db2314b12bbd8181f855e2778a25', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1da2ecd90d1c2c6e6fa90e3369a78771f4830442', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '69649b0011967ceaa8a8f395eca0c248fc39b818', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b947858cc86e8faaa1f8fe037c5192f8582f5cd2', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f14a1c6867ccd3e6724dedd59e833fbf1a8fd60d', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15b2fd466db33e6d6e5aa0af7c7157e0981bb499', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '370a4fbd9f6b02dd787f0562e33f2410c3d1f049', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4247e828174fc5605e0030345f6650adb1e34d56', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1cbdfc461c920f479449d4b5169d9e294595443', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67e884fe6954ca6839fe3c59a8388776780b35ee', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ba80f2ebd8a6afb3b09ba506e8927e1f70136885', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f965fb45083fbe04d58866a31886d161d91daec0', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1e8bd75e5695b619c44fddc603823420d1ac6a18', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b91ada96ea67ee9d0628b61925369863ac4cd941', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2db3d24ed30e0cd7d2372ed834cff75edd734bcf', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '547d3b494d6cec536a42864afc32d31fef97cea0', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '57309cc64bf24cb5cf39640ea30cecc889b1af4e', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1b0f0b6b5f7078c922b38a20f34194cccc268532', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a56af3ab8279beeb0abd70f076f31651c1ede6fd', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd45d6afec3e8b3b7d9829bf4ecbf70d7d0300419', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '43c2d913e1d4a30c4f11ecbc95a3ea76ee618970', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0706d878216e1246a9f4acd0bc98ae70fe368599', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd77419a17d63b02210876c432ffd0a8d6fdb44c', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1fdbf4df71f0ac3f348471f4ab4d683081c6461', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7ebc36ee733934a38f7ab6405f3287d12f3908ee', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2912f52ff17785cdc38b17231cff4728f799418', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8950eb2c94f8abb1a3b14b1413ebd78e40263b01', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '06560d21fe1abe1e8af234d06723724c433bb2ea', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e43cca510937c609d7560119e624684283bee4f', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f288952397e58134d12a022a24ad5bb7779d5f0f', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f46c4a334fda1be2bb913eec7f8597e4e2c4cf5', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c28bde6d76163ce849b42820f88169fe5c26377', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '63e231e24c7811b99ef20d7f284f02ade9ce5b0e', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': '53fef0b4512a74dcec1c2f9ae9f87f3448d39596', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6a0707547869248cfbe7536bb4235a7f8adc24f', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ab394673c8277483417a0a36abdb5be1a51d756d', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e53546affa901320c5eeb83d53314827ae34e15c', 'committer_username': 'jetchirag', 'committer_name': None, 'committer_email': 'i@chirag.sh', 'commit_date': datetime.datetime(2015, 10, 17, 10, 23, 57, tzinfo=datetime.timezone.utc)}]",,15169678,i@chirag.sh,User,,45,,5,19

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
154956532,vorta,borgbase/vorta,Python,130,1964,18,75,835,182,5,29,"[{'id': 1478158651, 'number': 1777, 'closed': datetime.datetime(2023, 8, 17, 16, 49, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 16, 22, 51, 39, tzinfo=datetime.timezone.utc), 'time_taken': 64658.0, 'time_delta': '17:57:38', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1428653137, 'number': 1749, 'closed': None, 'created': datetime.datetime(2023, 7, 11, 3, 51, 22, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 825, 'deletions': 216, 'state': 'open'}, {'id': 1358033449, 'number': 1716, 'closed': datetime.datetime(2023, 8, 5, 13, 49, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 5, 20, 19, 55, 7, tzinfo=datetime.timezone.utc), 'time_taken': 6630879.0, 'time_delta': '76 days, 17:54:39', 'additions': 1253, 'deletions': 124, 'state': 'closed'}, {'id': 1291962389, 'number': 1670, 'closed': datetime.datetime(2023, 3, 30, 17, 40, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 27, 20, 32, 29, tzinfo=datetime.timezone.utc), 'time_taken': 248882.0, 'time_delta': '2 days, 21:08:02', 'additions': 4, 'deletions': 0, 'state': 'closed'}, {'id': 1281385375, 'number': 1662, 'closed': datetime.datetime(2023, 7, 28, 7, 39, 11, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 18, 23, 7, 26, tzinfo=datetime.timezone.utc), 'time_taken': 11349105.0, 'time_delta': '131 days, 8:31:45', 'additions': 476, 'deletions': 230, 'state': 'closed'}, {'id': 1280089898, 'number': 1659, 'closed': None, 'created': datetime.datetime(2023, 3, 17, 11, 48, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 275, 'deletions': 0, 'state': 'open'}, {'id': 1275028584, 'number': 1651, 'closed': datetime.datetime(2023, 3, 14, 15, 8, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 14, 13, 16, 46, tzinfo=datetime.timezone.utc), 'time_taken': 6702.0, 'time_delta': '1:51:42', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1273368495, 'number': 1649, 'closed': datetime.datetime(2023, 4, 4, 12, 18, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 13, 14, 13, 17, tzinfo=datetime.timezone.utc), 'time_taken': 1893934.0, 'time_delta': '21 days, 22:05:34', 'additions': 29, 'deletions': 2, 'state': 'closed'}]"
100482658,docker-borgmatic,borgmatic-collective/docker-borgmatic,Dockerfile,92,333,7,47,527,19,6,1,"[{'id': 1404916452, 'number': 240, 'closed': datetime.datetime(2023, 7, 8, 22, 56, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 23, 11, 23, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1337549.0, 'time_delta': '15 days, 11:32:29', 'additions': 315, 'deletions': 692, 'state': 'closed'}]"
