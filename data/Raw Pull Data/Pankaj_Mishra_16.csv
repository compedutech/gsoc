pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
464548542,Equilibrium spectra calculation using GPU [GSoC],"<!-- This comments are hidden when you submit the pull request,
so you do not need to remove them! -->

<!-- Please be sure to check out our contributing guidelines,
https://github.com/radis/blob/develop/CONTRIBUTING.md . -->

### Description
<!-- Provide a general description of what your pull request does. -->
This PR introduces support for GPU powered equilibrium spectra calculation on RADIS.
In order to use GPU for calculating the spectra, set the new parameter in `calc_spectrum` method: `mode` as `gpu`, and provide path to one of the files of the CDSD databank saved in a npy format to the `databank` parameter.
Example:
```
s_gpu = calc_spectrum(2200, 2400,         # cm-1
                  name = 'a$_1$',
                  molecule='CO2',
                  isotope='1,2,3',
                  databank='/home/pankaj/radis-lab/data-2000-2400/v0.npy',
                  pressure=0.1,  
                  Tgas=1000,           # K
                  mole_fraction=1.0,
                  path_length=1,      # cm
                  wstep = 0.001,
                  mode='gpu'   # calculates spectra on GPU
                  )
```

NOTE: For this implementation, the GPU code only supports `.npy` format, all files located in the same directory, and only specific filenames (`filename`: `quantity`): 
```
""v0"": ""wave""
""da"": ""Pshft""
""log_2gs"":  ""log_2gs""
""na"": ""Tdpair""
""log_2vMm"": ""log_2vMm""
""S0"": ""int""
""El"": ""El""
``` 
TODO: 
- [x] documentation
- [x] tests

Will fix #46 


                               --- Information specific to Google Summer of Code ----

This pull request was submitted as a part of the Google Summer of Code project that I worked on with RADIS to accelerate synthetic spectra calculation using CUDA. 

Prior to this PR, the majority of work was done in another repository ( [CyPyRADIS](https://github.com/pkj-m/CyPyRADIS) ) which served as the playground to develop and test the CUDA kernels. The host code was written in Cython to allow compilation prior to use. After the Cython-Python version of RADIS was tested completely, I started working on this PR. This PR's primary task is to integrate the CUDA kernels that were written in CyPyRADIS with the current version of RADIS. Aside from that, this PR will also introduce new documentation and examples page to allow new users to get started with the GPU version of RADIS as quickly as possible. 

Finally, aside from the documentation included in this PR, a new ipy notebook was also created to provide users with interactive examples and demonstrate the performance boost that the GPU implementation provides over the current CPU RADIS. The notebook is hosted on [radis-benchmark](https://github.com/radis/radis-benchmark).",True,117,https://api.github.com/repos/radis/radis/pulls/117,https://github.com/radis/radis/pull/117,closed,2107,41,12,38,7,16,5,0,"[{'name': 'performance'}, {'name': 'interface'}, {'name': 'physics'}, {'name': 'gsoc2020'}, {'name': 'databases'}]",2020-08-07 11:19:12+00:00,2020-08-31 14:46:44+00:00,2086052.0,"24 days, 3:27:32","[{'comment_id': 468553353, 'comment_body': '```suggestion\r\n```\r\n\r\nyou shouldnt be changing this in the source code, but in your script only ', 'comment_created': datetime.datetime(2020, 8, 11, 12, 49, 1, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 469900487, 'comment_body': ""@pkj-m don't forget this one btw"", 'comment_created': datetime.datetime(2020, 8, 13, 12, 3, 43, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 471353878, 'comment_body': '```suggestion\r\n              :py:class:`~radis.lbl.factory.SpectrumFactory` to split the line database\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 9, 26, 9, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 471354081, 'comment_body': '```suggestion\r\n    mode: ``""cpu""``, ``""gpu""``\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 9, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 471354977, 'comment_body': 'Add a direct label (even if the page changes)\r\n```suggestion\r\n\u200b   .. [2] RADIS GPU support: :ref:\'GPU Calculations on RADIS <label_gpu_calculations>\'\r\n```\r\n\r\nIn `gpu.rst` add : \r\n\r\n```\r\n.. _label_gpu_calculations: \r\n\r\n# how to make it work + pointers to Issues, GSoC project if needed, etc. \r\n```\r\n\r\nAlso make sure `gpu.rst` is imported in `lbl.rst` (for instance under : ""Advanced"" or ""Performance"") \r\n\r\n```\r\n\r\n.. include:: rst.rst\r\n```', 'comment_created': datetime.datetime(2020, 8, 17, 9, 28, 17, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 471358327, 'comment_body': 'I think we could implement such a syntax (with a dictionary) rather than the current one which uses hardcoded file names. Start a dedicated Issue as a place for discussion where we make sure everything is Tested / Documented ?  ', 'comment_created': datetime.datetime(2020, 8, 17, 9, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 471368614, 'comment_body': ""Awesome, that's exactly what I asked in the channel a few minutes back.\r\n\r\nCan you explain the purpose of the issue? Wouldn't the discussion regarding the documentation and testing be held better on the PR conversation page?"", 'comment_created': datetime.datetime(2020, 8, 17, 9, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'pkj-m', 'type': 'User'}, {'comment_id': 471377046, 'comment_body': ""I generally think that 1 PR / Issue should focus on One feature only. \r\nHere we're both dealing with the GPU implementation/Validation itself, and the new .npy loading format. They're interdependant and may be implemented in the same PR, but having at least 2 separate Issues will make the discussions easier (similarly: 2 slack channels [#databases](https://radis-radiation.slack.com/archives/C018C2MH5AB) and [#gpu](https://radis-radiation.slack.com/archives/C018X7XGMBP)) "", 'comment_created': datetime.datetime(2020, 8, 17, 10, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 473215150, 'comment_body': 'Created issue #126 for further discussion ', 'comment_created': datetime.datetime(2020, 8, 19, 17, 48, 24, tzinfo=datetime.timezone.utc), 'commenter': 'pkj-m', 'type': 'User'}, {'comment_id': 473239743, 'comment_body': 'you can probably get rid of them entirely \r\n```suggestion\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 18, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 473239873, 'comment_body': '```suggestion\r\n```\r\nidem', 'comment_created': datetime.datetime(2020, 8, 19, 18, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 473242487, 'comment_body': 'Typo here:\r\n\r\n```suggestion\r\nNote that the data\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 18, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 473243871, 'comment_body': ""Hey @erwanp I think there's some misunderstanding here. I was under the assumption that the `npy2df` function would be called only when the data being loaded is in `npy` format. Since the test example used the cdsd data directly, it must have been loaded using the `cdsd2df` method. \r\n\r\nIf you're asking for the general case where the user wishes to load `npy` data, I am still using the code I had written. Your npy2df file is still there but it was unlinked when I undid your commit. Since the test example wasn't using npy data anyway, I decided to not focus on it for now."", 'comment_created': datetime.datetime(2020, 8, 19, 18, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pkj-m', 'type': 'User'}, {'comment_id': 473243945, 'comment_body': '```suggestion\r\n        """""" Returns log_2gs if it already exists in the dataframe, otherwise computes it using gamma_air """"""\r\n        df = self.df0\r\n        # TODO: deal with the case of gamma_self [so we don\'t forget] \r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 18, 41, 1, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 473244850, 'comment_body': 'Tip : this allows you to still get the proper Traceback (new raised error will inherit from the previous)\r\n```suggestion\r\n        except KeyError as err:\r\n            raise KeyError(\r\n                ""Cannot find air-broadened half-width or log_2gs in the database... please check the database""\r\n            ) from err\r\n```', 'comment_created': datetime.datetime(2020, 8, 19, 18, 42, 40, tzinfo=datetime.timezone.utc), 'commenter': 'erwanp', 'type': 'User'}, {'comment_id': 473245429, 'comment_body': ""Also you could skip this bit for the time being. This example was an (incomplete) part of the other branch that I merged with the gpu branch. I was working on that branch since the current one had failed because of the `npy2df` commit. I'll finish the example soon so you can come back to this once that's done."", 'comment_created': datetime.datetime(2020, 8, 19, 18, 43, 51, tzinfo=datetime.timezone.utc), 'commenter': 'pkj-m', 'type': 'User'}]","[{'commit_sha': 'f0e24d4cf996d54d3c7cd4fa6a4691e777d61495', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b09c0892b11b219c0ea05801f6d1883d9994382a', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f8448327e92ef856cba9c95dda3220c327f63fdc', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e588907ec5e18478d43e401ac5b7d8a36e2b56f', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73858e9cb1465490e3326689285238ef47f167e7', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67ef4798483e92424fff9bda1784979d1587610c', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d6a2699d6c572b3dc6b14358d273a2191383db2', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c383e8ad6ed9b59834209d2e095bacb556a5c458', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46a851b76a9e3c753a699bdc7f0bd474d103e56a', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '40ff043509852a4bc70e07e447bfe2f27bfbe42a', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59500e3bd023c65f6370da6448786f2c5519462f', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f6fb33285411ca850ce7cef7b4042af0c3d9f70d', 'committer_username': 'erwanp', 'committer_name': 'Erwan Pannier', 'committer_email': 'erwan.pannier@gmail.com', 'commit_date': datetime.datetime(2015, 11, 30, 19, 58, 47, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5c2e313d51b15b18e8664d660472fd9411b647d2', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '148fb9267628cdd03f95e06ee55821cfe34e58b8', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '67504c7ab2e1fd3e64958ecbe8aceb8de3a9e4b6', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2bfdaced0a4afbc8555425575e95a9ad6c36d4fd', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e6ba71677f288315654cdb95fa4d0b0e28ef12f2', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f5e4703bf9cb5c4f59964bcf90463c731100732', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a44796b1cfad00a307815a74e926c0218d39478a', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4e285549f33263316ece9e71f5e2cd093b0a37d', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6696c4814bf3626a442a7960bd402a273dcd6de3', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b1a1c7ebcd321130182e5c7aac401ac6b0ebe0a7', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cbc37b7ddd9c292567d3050a1a371915b8e73cf4', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bde2a9014c7cb7f7caae6e4c3bc4019561b10c1f', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cd78d316a56ef32d2749c242ac45773dce34d4f0', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fb394f1688f875e6ec3bed20819e4e5b26250f7c', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e9eb9c9eab4beaaf7e1204aee83d42cd3b1e486f', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '893e826c762eaa9f7323f52d505141c9f8b61c7e', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6758fd362ac723acfcbbda1d01695372790f04be', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6fc708aa48a85d3622d1e594f19e9080f7fdea91', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bec378d68787fb941d922ea4de40eb11913ce196', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a0e1f85a3f4f237a768d5103dc075b5a18a95b74', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a6dababaa733e5c776223e3e7316b07eff9592d3', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee4fd41f70367c5076e319734611db4dd6c0a733', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '735600b5a9fa97ccc924a9a0deef020a0a0dcd4c', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52a2be67af0d3b3b65d838b0c1800f0a7a171e44', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b01c5149fa88e85154bf201314715a8fe8e4fe1e', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}, {'commit_sha': '149411ec763d3c943c39940050686768763aa4c7', 'committer_username': 'pkj-m', 'committer_name': 'Pankaj Mishra', 'committer_email': None, 'commit_date': datetime.datetime(2016, 3, 1, 19, 49, 24, tzinfo=datetime.timezone.utc)}]",Pankaj Mishra,17577971,,User,,40,,2,22

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
118933991,radis,radis/radis,Python,121,210,11,47,3450,76,11,8,"[{'id': 467270471, 'number': 123, 'closed': datetime.datetime(2020, 8, 13, 11, 41, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 13, 9, 39, 4, tzinfo=datetime.timezone.utc), 'time_taken': 7351.0, 'time_delta': '2:02:31', 'additions': 54, 'deletions': 9, 'state': 'closed'}, {'id': 464548542, 'number': 117, 'closed': datetime.datetime(2020, 8, 31, 14, 46, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 7, 11, 19, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2086052.0, 'time_delta': '24 days, 3:27:32', 'additions': 2107, 'deletions': 41, 'state': 'closed'}, {'id': 404702313, 'number': 106, 'closed': datetime.datetime(2020, 4, 24, 7, 10, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 16, 20, 30, 55, tzinfo=datetime.timezone.utc), 'time_taken': 643194.0, 'time_delta': '7 days, 10:39:54', 'additions': 215, 'deletions': 260, 'state': 'closed'}, {'id': 403143634, 'number': 98, 'closed': datetime.datetime(2020, 4, 14, 13, 10, 31, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 14, 12, 5, 26, tzinfo=datetime.timezone.utc), 'time_taken': 3905.0, 'time_delta': '1:05:05', 'additions': 74, 'deletions': 115, 'state': 'closed'}, {'id': 402387511, 'number': 96, 'closed': datetime.datetime(2020, 5, 2, 15, 39, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 12, 19, 31, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1714037.0, 'time_delta': '19 days, 20:07:17', 'additions': 377, 'deletions': 54, 'state': 'closed'}, {'id': 402322471, 'number': 95, 'closed': datetime.datetime(2020, 4, 14, 9, 15, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 4, 12, 11, 6, 3, tzinfo=datetime.timezone.utc), 'time_taken': 166182.0, 'time_delta': '1 day, 22:09:42', 'additions': 91, 'deletions': 7, 'state': 'closed'}]"
