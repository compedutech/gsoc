pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
879967087,Ensure color codes are valid at runtime if running in 16-color mode.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
In ``/zulip-terminal/zulipterminal/config/themes.py`` code is added in ``generate_theme`` function to check if valid color codes are used in color files for specific themes. For eg. (``colors_gruvbox.py`` for ``gruvbox_dark.py`` theme)

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Fixes #1158 

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",True,1167,https://api.github.com/repos/zulip/zulip-terminal/pulls/1167,https://github.com/zulip/zulip-terminal/pull/1167,closed,135,21,3,3,1,12,3,0,"[{'name': 'size: XL'}, {'name': 'PR ready to be merged'}, {'name': 'area: colors/styles/themes'}]",2022-03-15 09:52:17+00:00,2022-03-21 00:44:00+00:00,485503.0,"5 days, 14:51:43","[{'comment_id': 829591462, 'comment_body': ""I believe this data is identical to that in a test file? If so, I'd suggest moving that data to here and importing it from the test. That could be a prep (preparatory) refactor commit."", 'comment_created': datetime.datetime(2022, 3, 17, 23, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829592695, 'comment_body': 'This would be clearer as an f-string.', 'comment_created': datetime.datetime(2022, 3, 17, 23, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829593298, 'comment_body': 'This will only give one failure, even if more than one color is invalid; to avoid a contributor/user needing to run multiple times after each theme update, we should let them know of each bad color in the theme each time we check.\r\n\r\nIt would also be useful to know which color name is wrong, eg. `BLACK` relates to `black`.', 'comment_created': datetime.datetime(2022, 3, 17, 23, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829593519, 'comment_body': 'This line should be unnecessary.', 'comment_created': datetime.datetime(2022, 3, 17, 23, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829598845, 'comment_body': 'This is not critical, but I think we could improve this name, perhaps `InvalidThemeColorCode`?', 'comment_created': datetime.datetime(2022, 3, 17, 23, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829601645, 'comment_body': ""It is useful to use an existing theme as a basis for a test, but I'm not sure we benefit from testing against all the existing themes.\r\n\r\nInstead, I'd suggest exploring different `Color` sets, eg. ensuring that a range of names work, as well as what output one gets if multiple colors in `Color` are invalid."", 'comment_created': datetime.datetime(2022, 3, 18, 0, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829602149, 'comment_body': 'This is a good basic test, but it would be useful to also confirm what text is in the exception (particularly for different cases).', 'comment_created': datetime.datetime(2022, 3, 18, 0, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830337875, 'comment_body': ""This is an improvement, though note that we now *always* raise, even with valid colors! It seems like you've written your tests to match the code."", 'comment_created': datetime.datetime(2022, 3, 18, 20, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830338728, 'comment_body': ""Please do migrate this over in a first commit, and ensure everything works (eg. using `make check`) at that point. This will make the second commit smaller and easier to read - and won't have the duplication you have currently."", 'comment_created': datetime.datetime(2022, 3, 18, 20, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830339117, 'comment_body': 'You can join the errors with this instead.', 'comment_created': datetime.datetime(2022, 3, 18, 20, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830339375, 'comment_body': 'Please use meaningful names.', 'comment_created': datetime.datetime(2022, 3, 18, 20, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830339660, 'comment_body': 'This is just `color_code`?', 'comment_created': datetime.datetime(2022, 3, 18, 20, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '1ef48cb0714bb993f0daf7e80db6442d7e8d9f01', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca5bfbe48010139946e3c4b467eb60ffe1d37d5c', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ab15bd6e8b04c37b29582255e8f2174ad111cf5', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
888382001,model: Improve reporting upon moving/splitting topic.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR improves reporting upon moving a message by editing it's topic.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Partial fix for #1172 

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->

https://user-images.githubusercontent.com/53873549/159926734-3f04ffb8-c35f-4836-8d76-ae7401e6fca6.mp4

",True,1178,https://api.github.com/repos/zulip/zulip-terminal/pulls/1178,https://github.com/zulip/zulip-terminal/pull/1178,closed,64,27,3,3,4,23,5,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'size: L'}, {'name': 'area: message rendering'}, {'name': 'PR ready to be merged'}]",2022-03-24 13:31:35+00:00,2022-04-10 00:04:02+00:00,1420347.0,"16 days, 10:32:27","[{'comment_id': 835822413, 'comment_body': ""I'm not sure if we have a standard way to do this using `report_success`, but this may be clearer if we can provide a highlight style to group the stream+topic in each case.\r\n\r\nThis may require changes to existing code, so that could be a follow-up."", 'comment_created': datetime.datetime(2022, 3, 26, 23, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 835822820, 'comment_body': 'This is all the edited messages we know about, so this may work the first time, with no known edited messages, but I expect likely will grow each time and so report the wrong result.\r\n\r\nTry testing this manually, and then you can add a test case for this and check it fails, before fixing.', 'comment_created': datetime.datetime(2022, 3, 26, 23, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 835823134, 'comment_body': ""Let's simplify using a well-named variable for the common code here."", 'comment_created': datetime.datetime(2022, 3, 26, 23, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 838409182, 'comment_body': 'After fixing the format for reporting message upon moving topics, we can look into highlighting as well.', 'comment_created': datetime.datetime(2022, 3, 30, 10, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 838412155, 'comment_body': 'I got your point. Therefore, I have used a different method -\r\n1. Getting all stream messages\r\n2. Filtering messages based on topic where message is edited by user.\r\n3. Compare message_id of edited message and topic messages to get recent_edited_messages.', 'comment_created': datetime.datetime(2022, 3, 30, 11, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 838412932, 'comment_body': 'get_message = self.index[""messages\'] for common code.', 'comment_created': datetime.datetime(2022, 3, 30, 11, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 841021204, 'comment_body': ""This is identical except for the apostrophe placement? If so, it'll be simpler to integrate the difference into the variable, and avoid the need for a conditional here."", 'comment_created': datetime.datetime(2022, 4, 2, 6, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841021313, 'comment_body': ""It's better to put the explicit text into the test cases above, than have conditional code here - particularly if it is exactly the same as the code in the application."", 'comment_created': datetime.datetime(2022, 4, 2, 6, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841021503, 'comment_body': ""By just using a string we can assert on an 'expected string' provided in each parametrize 'case', avoiding the need for extra conditionals here."", 'comment_created': datetime.datetime(2022, 4, 2, 6, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841021620, 'comment_body': 'Given the longer test here now, it would be useful to also add inline test ids.', 'comment_created': datetime.datetime(2022, 4, 2, 6, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841287516, 'comment_body': ""Regarding test ids, I was referring to using `pytest.param`, which we've been importing as `case`. This makes description of each parametrized element easier."", 'comment_created': datetime.datetime(2022, 4, 3, 22, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841287887, 'comment_body': 'Minor: At this commit we can simplify further to include the message_id.', 'comment_created': datetime.datetime(2022, 4, 3, 22, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841288256, 'comment_body': 'You can insert this text directly as eg. something called the `expected_success_text` or similar, as an additional parametrize entry. That allows something like the following to replace all of the `if propagate_mode == ...` conditionals. Ideally we keep test bodies as small and simple as possible.\r\n```python\r\nreport_success.assert_called_once_with(expected_success_text)', 'comment_created': datetime.datetime(2022, 4, 3, 22, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841290248, 'comment_body': 'See my followup comment in the next review.', 'comment_created': datetime.datetime(2022, 4, 3, 23, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841290463, 'comment_body': 'This was what I referred to by simplifying the code in the next review.', 'comment_created': datetime.datetime(2022, 4, 3, 23, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 842117099, 'comment_body': 'Since this is the same in every parametrize (case), we can either set it directly in the test function body, or even leave it as a test function parameter but set it to have a default value (eventually we will want to support moving across streams).\r\n\r\nIn the code and tests, it may clarify things if you clarify if this is `old_` or `new_`.', 'comment_created': datetime.datetime(2022, 4, 4, 20, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 842122669, 'comment_body': 'This string is unimportant when `footer_updated` is `False`, right? This could be `""""` and the test likely still passes with the same code. To avoid confusion with that when reading the test, we could set the string to some meaningful value that implies it\'s not doing anything, or add a comment. However, a reader may still expect that to be a string that\'s actually used. A cleaner way is then to combine these parameters into one, using eg. `None` for the no-output case.', 'comment_created': datetime.datetime(2022, 4, 4, 20, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 844203425, 'comment_body': 'OK, so you have the `case` around each set of test parameters; for the ids see other tests which use a named parameter to `case` (ie. `pytest.param`), ie. `id=some_description`).\r\n\r\nYou might try running this test as it is with `-v` and using `-k` to filter this test only, then see what happens when you add an id. What you see there is useful, in addition to it looking a little like a comment for that test parametrization.', 'comment_created': datetime.datetime(2022, 4, 6, 17, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 844203831, 'comment_body': ""I hope you can see how much cleaner this is :+1:\r\nThe simpler test logic is, the fewer bugs can be in the tests themselves - other than also making them easier to read.\r\nYou didn't write this original test, but even so imagine that you looked for this test first, and changed it to specify new behavior first, then updated the code to make it pass (see TDD - test driven development - if you've not come across it). We're wanting to make a specification for the behavior, not write test code that parallels the behavior."", 'comment_created': datetime.datetime(2022, 4, 6, 17, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 844217057, 'comment_body': ""I'd like to see more discussion and explanation of this logic when we do implement this, and we should more broadly apply it to the other `report_*` methods too. This appears to work for now, but here I'd prefer to go for simpler optional pass-through of a duration to this method for now, which we can iterate on later - ie. an additional named parameter with a default value."", 'comment_created': datetime.datetime(2022, 4, 6, 17, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 846693646, 'comment_body': ""We're discussing this in the stream now :+1:"", 'comment_created': datetime.datetime(2022, 4, 10, 0, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'c475d188e2b58541d9239aa497e72bf5915935c5', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4565282e08fc49006a77d52f032dcb8a43dcedd', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '719623427ead90d9573c0b30d74b14a786bb0846', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
906366004,model: Highlight stream name in reporting of moving/splitting topics.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR highlights stream names in reporting of moving/splitting topic in footer text.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Partially fixes #1172 
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/.E2.9C.94.20Improve.20reporting.20on.20moving.2Fsplitting.20topics.20.23T1172.20.23T1178

New CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Highlight.20text.20of.20reporting.20on.20moving.2Fsplitting.20topics

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->

![Screenshot (66)](https://user-images.githubusercontent.com/53873549/162869575-5580f8a8-f45a-4147-9a20-d0dcbd8d0238.png)",True,1196,https://api.github.com/repos/zulip/zulip-terminal/pulls/1196,https://github.com/zulip/zulip-terminal/pull/1196,closed,127,46,11,4,10,7,4,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'area: message editing'}]",2022-04-11 19:00:37+00:00,2022-04-21 20:56:47+00:00,870970.0,"10 days, 1:56:10","[{'comment_id': 850103323, 'comment_body': 'There is no need to change this from an f-string.', 'comment_created': datetime.datetime(2022, 4, 14, 5, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 850114399, 'comment_body': 'We can greatly simplify the formatted text here to `(style_string, text)`, which makes this much easier to code - and test.\r\n\r\nThe same applies to the topic text.', 'comment_created': datetime.datetime(2022, 4, 14, 6, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 850376135, 'comment_body': '@neiljp If f-string is not converted to list of strings, the ``urwid.Text`` is not highlighted and is displayed as ``(style_string, text)`` ', 'comment_created': datetime.datetime(2022, 4, 14, 12, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 851401111, 'comment_body': ""You can see the result of this in the tests, but you've not simplified all the way in the code itself."", 'comment_created': datetime.datetime(2022, 4, 15, 17, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851401793, 'comment_body': 'I was only referring to these 3 lines.', 'comment_created': datetime.datetime(2022, 4, 15, 17, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 855534617, 'comment_body': 'This is already a list.', 'comment_created': datetime.datetime(2022, 4, 21, 19, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 855544946, 'comment_body': 'This is a blacken.', 'comment_created': datetime.datetime(2022, 4, 21, 19, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'be4fdec066ecffa64b2ce3cabbf22fe883b6efd3', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf429d1908e5d765b27f100cd8e8e1e96a5cd7f1', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81080b8b50e59bc7f46bfa5145521351264f595f', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5ba6b8d4edb58ab5aafe44efacadf5dab53259', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
905262944,Support 'Narrow to current compose box recipient'.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR adds support to 'Narrow to current compose box recipient' after sending a message outside current narrow.
Shortcut - ``ctrl``+``.``
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Fixes #1182 
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Support.20'Narrow.20to.20current.20compose.20box.20recipient'

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
Currently I have used shortcut - `.` instead of ``ctrl``+``.`` as ``ctrl``+``.`` doesn't seem to work in my local development environment (WSL2 Windows 10) 

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",True,1194,https://api.github.com/repos/zulip/zulip-terminal/pulls/1194,https://github.com/zulip/zulip-terminal/pull/1194,closed,38,2,5,1,3,18,3,0,"[{'name': 'area: hotkeys'}, {'name': 'size: M'}, {'name': 'PR ready to be merged'}]",2022-04-10 16:26:28+00:00,2022-04-17 02:27:12+00:00,554444.0,"6 days, 10:00:44","[{'comment_id': 846818175, 'comment_body': 'Good use of the script? :)', 'comment_created': datetime.datetime(2022, 4, 10, 17, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 846819236, 'comment_body': ""\r\n\r\nWe should programmatically fetch the key and substitute it in here.\r\n\r\nI'm not sure about the use of the arrow here.\r\n"", 'comment_created': datetime.datetime(2022, 4, 10, 17, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 846868894, 'comment_body': 'We should handle PMs here too, which I think you mentioned on the stream?', 'comment_created': datetime.datetime(2022, 4, 10, 23, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 846963789, 'comment_body': 'Definitely, you just have to change the key in ``keys.py`` and run the script to update ``hotkeys.md`` instead of changing manually. Really helpful.', 'comment_created': datetime.datetime(2022, 4, 11, 5, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 846964372, 'comment_body': 'You had mentioned an UI element being proposed in #design > button to go to conversation. Should that arrow like symbol appear in compose box when messaging outside current narrow?', 'comment_created': datetime.datetime(2022, 4, 11, 5, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 846965005, 'comment_body': 'So, if we change the shortcut for narrowing to current message recipient, the key in the message should also change. Right? ', 'comment_created': datetime.datetime(2022, 4, 11, 5, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 848618120, 'comment_body': ""If I'm mid compose and want to see the topic, this causes the composition to be lost; we want to switch to it, but not cancel the composition."", 'comment_created': datetime.datetime(2022, 4, 12, 16, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 848619148, 'comment_body': 'This just returns a string; what is it doing here?', 'comment_created': datetime.datetime(2022, 4, 12, 16, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 848620302, 'comment_body': 'This would be a good use of `primary_key_for_command`, though there would likely be space here to use a list of all the keys instead, as we use in other UI locations.', 'comment_created': datetime.datetime(2022, 4, 12, 16, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 848646770, 'comment_body': ""I think we may want 'conversation' instead of 'message recipient'. Is that in the original topic too? (re server)"", 'comment_created': datetime.datetime(2022, 4, 12, 16, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 850124109, 'comment_body': 'This is really during compose.', 'comment_created': datetime.datetime(2022, 4, 14, 6, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 850124529, 'comment_body': ""As per discussion in the stream, let's skip the icon for now; I think it'd be a representation of the key somehow if we did, a little like we have `[P]`."", 'comment_created': datetime.datetime(2022, 4, 14, 6, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851468807, 'comment_body': ""Note that other help_text doesn't end with a `.`\r\n\r\nWe may want to lint for this somewhere."", 'comment_created': datetime.datetime(2022, 4, 15, 19, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851470868, 'comment_body': 'This is unnecessary.', 'comment_created': datetime.datetime(2022, 4, 15, 19, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851485357, 'comment_body': ""If we keep this message this long, I'd welcome this being displayed a little longer (eg. the 6 we used in the other PR).\r\n\r\nHowever, my remaining query here is whether we want to customize this logic/message a little further:\r\n- in all-messages narrow, we never see this, but may still want to go to the conversation\r\n- in stream (or all-PM) narrows which hold the message, we may also still want to go to the conversation\r\n- if a message is outside the narrow, we always want to show this\r\n\r\nTo address these combinations we may want to split this messaging change out into a followup commit and/or PR, since the functionality itself will be present and consistent with the help menu and documentation already in the rest of this commit. This is an extra hint, and it'd be good to handle it well."", 'comment_created': datetime.datetime(2022, 4, 15, 20, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851496299, 'comment_body': 'These branches would be more readable using `compose_box_status`.', 'comment_created': datetime.datetime(2022, 4, 15, 20, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851783171, 'comment_body': 'The arrow issue is now at #1203.', 'comment_created': datetime.datetime(2022, 4, 17, 17, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851783233, 'comment_body': 'Again, this is now #1203 ', 'comment_created': datetime.datetime(2022, 4, 17, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '1ad6e3a011e7f812f834dc6d05ea050e0fd30dba', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
911385594,Display 'Message sent outside current narrow' when narrowing from all_messages and all_PMs.,"Follow up PR #1194

<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR displays ``Message sent outside current narrow`` even if narrowing from ``all_messages`` or ``all_PMs``

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/.E2.9C.94.20Support.20'Narrow.20to.20current.20compose.20box.20recipient'.20.23T1194

Cases for showing success message - https://github.com/zulip/zulip-terminal/pull/1194#discussion_r851485357

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",False,1204,https://api.github.com/repos/zulip/zulip-terminal/pulls/1204,https://github.com/zulip/zulip-terminal/pull/1204,open,50,9,4,2,5,6,3,0,"[{'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'PR awaiting update'}]",2022-04-17 04:21:30+00:00,,0.0,,"[{'comment_id': 851707008, 'comment_body': ""This appears a valid one-off tidy-up, but if it's not related to the bulk of the code then it's good to note it in the commit text body. More tidies => maybe it belongs in it's own commit."", 'comment_created': datetime.datetime(2022, 4, 17, 5, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873243325, 'comment_body': 'Minor perhaps, but this handles private cases too.', 'comment_created': datetime.datetime(2022, 5, 15, 23, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873243472, 'comment_body': 'This styling (and below) is extracted from the other location. It would be better to use a common functionality.', 'comment_created': datetime.datetime(2022, 5, 15, 23, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873243931, 'comment_body': ""We don't want to use a busy loop for this, if we do take this approach. This sends the zulip-term CPU usage to 100%+.\r\n\r\nAn urwid on-change signal may be better, though note that while potentially helpful, `alt .` will not (or shouldn't) do anything if the recipients aren't valid, so we can avoid showing the notice in that case."", 'comment_created': datetime.datetime(2022, 5, 15, 23, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873245345, 'comment_body': ""This is the correct condition for the narrowing hint, but please see https://github.com/zulip/zulip-terminal/pull/1204#issuecomment-1100809732\r\n\r\nThere are two separate conditions; one handles the 'outside of narrow' part of the message (doesn't need updating), another separate one handles the showing of the second (hint) part."", 'comment_created': datetime.datetime(2022, 5, 15, 23, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873248289, 'comment_body': ""We may need to update either the test or the ids, to represent what we're expecting here.\r\n\r\nAt the very least, this change is now inconsistent: True => notified :)\r\n\r\nHowever, there are different aspects being notified here, so a boolean doesn't fully encapsulate the results any more."", 'comment_created': datetime.datetime(2022, 5, 15, 23, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '455f2d79bd0b71b118d150b11a5eeaa833860a44', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af52470e7d84c429867cf04b0737b601fd849557', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
915671282,Display names of reacting users when few users have reacted.,"Fixes #1212

<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR displays reacting usernames besides reacting emoji in messages.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Feature.20discussion.20-.20Show.20usernames.20adding.20emoji.20to.20message

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
In Zulip web app -
![image](https://user-images.githubusercontent.com/53873549/164528377-e7dd3e7f-17f8-4764-818a-cb7c879eaa9c.png)

In ZT -
![image](https://user-images.githubusercontent.com/53873549/164529020-6f6a07e6-b50e-4b06-b619-c2984322825c.png)
",True,1213,https://api.github.com/repos/zulip/zulip-terminal/pulls/1213,https://github.com/zulip/zulip-terminal/pull/1213,closed,233,56,2,2,4,22,4,1,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'area: message rendering'}, {'name': 'PR ready to be merged'}]",2022-04-21 18:33:14+00:00,2022-05-05 00:58:02+00:00,1146288.0,"13 days, 6:24:48","[{'comment_id': 856865277, 'comment_body': ""Try using `str.join()` here instead. It'll be much simpler to read and also avoid magic numbers like `39`"", 'comment_created': datetime.datetime(2022, 4, 23, 8, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 856866119, 'comment_body': ""Whats the need of sorting based on id's here? Does that mean users who have a smaller id are preferred? From [this](https://chat.zulip.org/#narrow/stream/277-discussions/topic/Next.20discussion.20topic/near/1319047) message, it looks like your ordering and webapps ordering differ."", 'comment_created': datetime.datetime(2022, 4, 23, 8, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 856866505, 'comment_body': ""I'm not sure why the reactions were sorted here in the first place. From [this](https://chat.zulip.org/#narrow/stream/1-announce/topic/server.20releases/near/1355228) message, the ordering of reactions seem to differ from the webapp.\r\n\r\nAlso what's the reason for converting the set into a list?"", 'comment_created': datetime.datetime(2022, 4, 23, 8, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 856936924, 'comment_body': '- Every time ``reacting user_ids`` are fetched, I noticed that ordering was even if there was no change in ``reacting users`` for a reaction. Therefore, I sorted the ``ids``.\r\n- Next, in ``test_reaction_views`` because of random ordering, tests were failing.', 'comment_created': datetime.datetime(2022, 4, 23, 16, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 856937000, 'comment_body': 'To rearrange ``You`` reaction ``user_name`` to the end of users reacted.', 'comment_created': datetime.datetime(2022, 4, 23, 16, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 857068027, 'comment_body': '@Rohitth007 See e3b5192fa9e736 for some reasoning. This may be less necessary now that eg. dicts are more ordered by default.', 'comment_created': datetime.datetime(2022, 4, 24, 5, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 857068990, 'comment_body': 'The original code could be improved here since `count` is actually more like `user_ids`, and now maybe `users`.\r\n\r\nI do think that a `list` may be usable from the start, like Rohitth says.', 'comment_created': datetime.datetime(2022, 4, 24, 5, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 857069531, 'comment_body': 'This might be simplified by combining into the earlier sort, based on how tuples are sorted?\r\n\r\n', 'comment_created': datetime.datetime(2022, 4, 24, 5, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 857124222, 'comment_body': ""I think now with the updated PR, the tests are also not a problem. So maybe it's better to display the reactions in the order in which they were reacted instead of alphabetically?"", 'comment_created': datetime.datetime(2022, 4, 24, 13, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 860511652, 'comment_body': 'These should be separate test-case parameters, not part of the message data itself.\r\n\r\nIn cases like these, it can be clean to have a refactor which adjusts the test structure, before introducing the extra test cases.', 'comment_created': datetime.datetime(2022, 4, 28, 5, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 860513791, 'comment_body': ""This is what made me concerned about the test, as here we're changing the message we're testing with. That doesn't cause any issues here as it doesn't overwrite anything we expect to be there (and the Message is badly defined type-wise right now), but effectively we're generating a message with extra fields which the code could 'cheat' with, to pass the test ;)"", 'comment_created': datetime.datetime(2022, 4, 28, 6, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 860514152, 'comment_body': 'Is this a left-over parenthesis? Black reformats code, but please check the code for readability afterwards :)', 'comment_created': datetime.datetime(2022, 4, 28, 6, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 860535261, 'comment_body': 'Do we actually need the `len(ids) > 3` condition here?\r\n\r\nAlso lets define variables for hardcoded constants. Eg: `MAX_USERNAMES_PER_REACTIONS = 3` or something similar.', 'comment_created': datetime.datetime(2022, 4, 28, 6, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 860537998, 'comment_body': 'Do we need this, now that the tests also pass and given that ordering is also preserved? This would then show emojis in the order in which they were reacted. This can be a separate commit.', 'comment_created': datetime.datetime(2022, 4, 28, 6, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 860540490, 'comment_body': ""Let's maybe do the `set` to `list` change in a refactor commit before everything else, so that the diffs look cleaner?"", 'comment_created': datetime.datetime(2022, 4, 28, 6, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 861202318, 'comment_body': ""Minor: Generally it's good to use an 'expected_' prefix for intended outcomes.\r\n\r\nYou might also consider changing the 'result' to 'text' for consistency with 'attributes'."", 'comment_created': datetime.datetime(2022, 4, 28, 18, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861207350, 'comment_body': 'Please clarify this.', 'comment_created': datetime.datetime(2022, 4, 28, 18, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861223006, 'comment_body': ""`reactions` does hold the raw data we're looking for here, but we know this from the start, so can avoid a lot of unnecessary processing and extra conditionals, including here. That is, long => old behavior, short => new behavior, and we know long vs short at the top.\r\n\r\nIf retaining some of the old logic to push forward with emoji-specific counts I was less bothered with tidying in this way, but if we just depend on this one condition I think we can tidy most of this into two branches."", 'comment_created': datetime.datetime(2022, 4, 28, 18, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861225899, 'comment_body': ""While I wouldn't say that it's necessary to use upper case, you haven't addressed Rohitth's point and extracted the number into a variable for clarity (though you may need to adjust the name slightly now)."", 'comment_created': datetime.datetime(2022, 4, 28, 19, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861228785, 'comment_body': ""That I need to scroll around to check that this matches the original expected values (must further down) emphasizes the point I made in the previous review that you didn't respond to: add a small refactor commit before this which moves these values from the body of the test to use parameters."", 'comment_created': datetime.datetime(2022, 4, 28, 19, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861242164, 'comment_body': 'This has turned into a very small commit, but we can always squash it later, and generally small is good for reviews too. However, let me address the ordering :)\r\n\r\nI know Rohitth said ""before everything else"", but note that the original \'story\' of commits was to adjust the spacing and then add the user names. Putting this first feels strange to a reviewer as this seems unrelated to the next commit (spacing), and maybe part of a new \'feature\' change, ie. adjusting the ordering?\r\n\r\nIf there are purely refactoring commits these generally come before the related feature. This is currently a pure refactor since it doesn\'t change the behavior, but it seems unrelated to the following commit. This is easy to reorder in this case since the changes don\'t intersect or depend on each other (you can move the commits around using an interactive rebase).\r\n\r\nThe ordering change is arguably a new (visible) feature, so you might consider this part of that block of commits.\r\n\r\nOther than making it easier to review, this also helps with merging earlier commits (or groups of commits) from a PR first, if PRs become unexpectedly large, or if earlier commits are mergeable and later ones need further work.', 'comment_created': datetime.datetime(2022, 4, 28, 19, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861468882, 'comment_body': 'Note that you can simplify the above by bringing the `append` statements out of the conditionals using `reaction_style` for `""reaction""` and`""reaction-mine""`.\r\n\r\nThis can be added when the feature itself was introduced in the previous commit but I\'d wait for @neiljp to confirm if this was what he imagined the tidying to be.\r\n\r\nAlso do you think the post-processing step of `spaced_reaction_texts` should also be integrated into this, so that we avoid too many for loops on the whole?', 'comment_created': datetime.datetime(2022, 4, 29, 5, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}]","[{'commit_sha': '1280c5e2ae92b55ec64c085f30b3d0ad6b512e4c', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7722addfe11476a2d57a0e294be4ad0db91f9ac8', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
899334583,ui/boxes: Improve stream sorting for stream typeahead in compose box.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR improves stream sorting for stream typeahead in compose box stream results in footer in the following order -

1) current stream (if matching)
2) pinned and unmuted
3) unpinned and unmuted
4) pinned and muted
5) unpinned and muted

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Improve.20stream.20sorting.20for.20stream.20typeahead.20in.20compose.20box.2E

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [ ] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->
Passing all lint tests.

``test_generic_autocomplete_streams`` test to be updated in ``test_boxes.py``
<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
Stream sorting for stream typeahead before -
![image](https://user-images.githubusercontent.com/53873549/162564960-639f268c-b160-426d-8ab6-e4309806a59a.png)

Stream sorting for stream typeahead after -
![image](https://user-images.githubusercontent.com/53873549/162964508-31b452df-8ffd-4d3d-b4e7-a847d8f92f6c.png)",True,1186,https://api.github.com/repos/zulip/zulip-terminal/pulls/1186,https://github.com/zulip/zulip-terminal/pull/1186,closed,145,6,2,4,5,57,2,0,"[{'name': 'size: XL'}, {'name': 'area: autocomplete'}]",2022-04-04 18:14:08+00:00,2022-08-04 00:59:56+00:00,10478748.0,"121 days, 6:45:48","[{'comment_id': 867253763, 'comment_body': ""You can express this as a comprehension, possibly in one line. \r\n\r\nWe could also consider caching the name in our data-structures in model, and update it if the stream name changes (we don't handle those events right now, I think)"", 'comment_created': datetime.datetime(2022, 5, 6, 22, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867261252, 'comment_body': ""This is confusing; you're looping through the initial matched data and calling them `muted_stream`s already?"", 'comment_created': datetime.datetime(2022, 5, 6, 23, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867263046, 'comment_body': ""You keep referring to `matched_data[1]` in the new code. It would be clearer if you unpacked the original match result into name(s) - possibly explicitly discarding one part if you're not using it - and then reconstruct the tuple here like you are doing, but with that name."", 'comment_created': datetime.datetime(2022, 5, 6, 23, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867263219, 'comment_body': ""What's happening here? You didn't mention test_generic_autocomplete_stream_and_topic in the stream."", 'comment_created': datetime.datetime(2022, 5, 6, 23, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867297533, 'comment_body': 'There is a stream_dict fixture that should be suitable for this.', 'comment_created': datetime.datetime(2022, 5, 7, 3, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867297796, 'comment_body': ""You didn't mention test_generic_autocomplete_set_footer in the stream either, but this is (partially) commented?\r\n\r\nDid you miss adding the web public stream?"", 'comment_created': datetime.datetime(2022, 5, 7, 3, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867298092, 'comment_body': ""I'm maybe missing something, but you're not using this parameter?"", 'comment_created': datetime.datetime(2022, 5, 7, 3, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868230223, 'comment_body': 'I have added web public stream as well in latest commit.', 'comment_created': datetime.datetime(2022, 5, 9, 17, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 868604385, 'comment_body': ""This is clearer, but you're completely reconstructing matched_stream_typeaheads at the end anyhow, though assigning to the same name.\r\n\r\nWhat I meant by explicitly discarding the unused data here is assigning to `_`. That also makes it clearer that the name/variable is only used at the end and isn't incidentally used between this point and there."", 'comment_created': datetime.datetime(2022, 5, 9, 23, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868607016, 'comment_body': ""While naming things can be clearer, I'd be inclined to insert muted_stream_ids inline into the comprehension since it is not used elsewhere.\r\n(we should likely wrap the model data in an accessor function at some point, or name it better anyhow)"", 'comment_created': datetime.datetime(2022, 5, 9, 23, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868613466, 'comment_body': ""It can be convenient to reuse names, but this doesn't document the code as accurately - these are the matching muted stream names, rather than all of them, right?\r\n\r\nTo make this clearer you could of course simply rename this, but I suspect you can combine this with the previous comprehension? You're losing the previous data after this point anyhow."", 'comment_created': datetime.datetime(2022, 5, 9, 23, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868651044, 'comment_body': ""This is a different approach to before - iterating through muted stream list, rather than matching list. For naming, my point stands though - name the loop variable to match what you're looping through, which is now eg muted_stream :)\r\n\r\nWhile you're not changing the length of the list, I'm wary that here (and before) you're modifying the order of the list while cycling through it.\r\n\r\nYou've introduced the pinned_streams variable - is this necessary? Was this sorted previously, or only with the previous loop style?"", 'comment_created': datetime.datetime(2022, 5, 10, 0, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868699236, 'comment_body': 'Why are these existing values changing, with no mutes?', 'comment_created': datetime.datetime(2022, 5, 10, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868700197, 'comment_body': 'I was referring to this commented out code, not the other test cases, which I think you added and were referring to just now?', 'comment_created': datetime.datetime(2022, 5, 10, 1, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868704275, 'comment_body': 'To avoid this adding lots of empty data and having lines spill-over, as well as improving the self-documenting of the test cases, I\'m wondering if this would be clearer as a dict which might be:\r\n```\r\n{}  # no pins or mutes\r\n{""pinned"": [...]}  # equivalent to to_pin=[...]\r\n{""muted"": {...}}  # equivalent to to_mute={...}\r\n```\r\n\r\nIf so, this logic could be a quick refactor commit before this with data and logic adjusted for just to_pin there, and then extended in this commit.', 'comment_created': datetime.datetime(2022, 5, 10, 1, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868753628, 'comment_body': '- When I was writing more test cases, I found that ``muted_stream_ids`` are received in ascending order and not the order of ``left_streams_bar`` (pinned_muted_id, unpinned_muted_id). \r\n- Therefore had to arrange ``muted_stream_names`` with same order as ``matched_streams`` and then remove ``pinned_muted_streams``, add to start of ``muted_stream_names``.\r\n-  At last, extend it to ``matched_streams`` after removing common streams.', 'comment_created': datetime.datetime(2022, 5, 10, 2, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 869692470, 'comment_body': 'Perhaps something like the following? This will be fine in the first commit, even though we\'re only handling pinning there.\r\n```suggestion\r\n        ""text, state, required_typeahead, stream_categories"",\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2022, 5, 10, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869693067, 'comment_body': ""The idea is that you'd be able to replace this with\r\n```suggestion\r\n                {},\r\n```\r\n...so the block would likely be able to stay very compact.\r\n\r\nYou already do this with muting :)"", 'comment_created': datetime.datetime(2022, 5, 10, 21, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869695988, 'comment_body': 'This is what I had in mind, but with a simple conditional eg. maybe something like this:\r\n```suggestion\r\n        streams_to_pin = [\r\n            {""name"": stream_name} for stream_name in pinned_or_muted_streams[""pinned""]\r\n        ] if ""pinned"" in pinned_or_muted_streams else []\r\n```\r\nThis allows the simpler data for the test cases I indicate above.\r\n(this doesn\'t take into account the possible name change)', 'comment_created': datetime.datetime(2022, 5, 10, 21, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869699982, 'comment_body': 'Right - this is the same logic as I suggest above, though since you don\'t need the more complex comprehension then a simpler approach may work:\r\n```suggestion\r\n        write_box.model.muted_streams = pinned_or_muted_streams.get(""muted"", set())\r\n```\r\n(note that `{}` is always a dict, not a set, though I suppose this is working since the name is equivalent to `.keys()`)', 'comment_created': datetime.datetime(2022, 5, 10, 21, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869703904, 'comment_body': 'This looks good - do you understand the error message you were getting now?', 'comment_created': datetime.datetime(2022, 5, 10, 21, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869711297, 'comment_body': ""You didn't answer why this had to change before. Looking again, this is since we're now prioritizing stream id 1?\r\n\r\nWe should likely leave these test cases as they are, eg. when there is no active stream (for some definition of that)."", 'comment_created': datetime.datetime(2022, 5, 10, 21, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869712355, 'comment_body': 'This fails for private messages, and actually causes a crash. There is an outstanding question of what should be the stream to use here - narrow? compose? recent? neither?', 'comment_created': datetime.datetime(2022, 5, 10, 22, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869805085, 'comment_body': 'Try removing the comma after these last entries, and black should shrink these back to the original layout :)', 'comment_created': datetime.datetime(2022, 5, 11, 1, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869805219, 'comment_body': ""This isn't reflected in the commit title :)"", 'comment_created': datetime.datetime(2022, 5, 11, 1, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869805582, 'comment_body': 'Maybe try removing this `,` too?', 'comment_created': datetime.datetime(2022, 5, 11, 1, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873084208, 'comment_body': 'This is an extra test case, which is a separate type of change so belongs in a different commit. There may be other cases we could add too; I think I only added a few when I added this feature.', 'comment_created': datetime.datetime(2022, 5, 14, 23, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873085060, 'comment_body': 'This is another web public addition - again, not bad, just not in the scope of this refactor.\r\n\r\nAlso, the pinned streams are different to the previous case, which I assume is not intended.', 'comment_created': datetime.datetime(2022, 5, 14, 23, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873085218, 'comment_body': ""Worth leaving in? Though arguably it becomes ` or muted, or...` as we add more possibilities. So maybe 'no streams in categories' or similar?"", 'comment_created': datetime.datetime(2022, 5, 14, 23, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873087129, 'comment_body': ""There's a gap here I wasn't expecting - these are out of order?\r\n\r\nOthers further down are too."", 'comment_created': datetime.datetime(2022, 5, 14, 23, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873087791, 'comment_body': 'Your tests being out of order makes this harder to verify manually, but this results in muted streams being out of order - reversed?\r\n\r\nCan you just drop this block?', 'comment_created': datetime.datetime(2022, 5, 15, 0, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873092492, 'comment_body': 'You seem to have added these comments? Without them the test cases fit on one line still?', 'comment_created': datetime.datetime(2022, 5, 15, 1, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873092579, 'comment_body': 'I think it may be clearer if we remove these comments in a separate commit (maybe when adding the web public cases?).\r\n\r\nHowever, see my general review point too.', 'comment_created': datetime.datetime(2022, 5, 15, 1, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895213349, 'comment_body': ""You've not addressed this."", 'comment_created': datetime.datetime(2022, 6, 12, 17, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895213427, 'comment_body': ""You've not addressed this yet either."", 'comment_created': datetime.datetime(2022, 6, 12, 17, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895213616, 'comment_body': ""Adding web public streams after the next refactor will likely make this mistake less likely, though it would be fine and simpler to add it first (so the later commits don't need adjusting, since this commit would just be split)."", 'comment_created': datetime.datetime(2022, 6, 12, 17, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895215391, 'comment_body': 'I think the state should have been `int`, not `Optional[int]`?', 'comment_created': datetime.datetime(2022, 6, 12, 18, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895215500, 'comment_body': ""If you're using both values in a dict, it's clearer to unpack both via `.items()`.\r\n\r\nThat said, having seen a failure here, outputting the error more clearly here may be useful. For example, it would be good to see which state is failing. In addition, you might run every input state and then do an assert comparing all the outputs with what's expected, which would allow visual comparison between them if there's a failure."", 'comment_created': datetime.datetime(2022, 6, 12, 18, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895243807, 'comment_body': 'These tests all fail in `tools/check-branch`.', 'comment_created': datetime.datetime(2022, 6, 12, 22, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 896667390, 'comment_body': ""I haven't followed this PR a lot but I feel that all of this code should belong inside `match_stream`. Is there any reason for not doing so? We can send in the model variables as arguments into the function and process everything there."", 'comment_created': datetime.datetime(2022, 6, 14, 10, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 896670573, 'comment_body': '@neiljp On a design level, I wanted to ask why, in the model, we treat `muted_streams` different from `(un)pinned_streams`, i.e., different data types.', 'comment_created': datetime.datetime(2022, 6, 14, 10, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 896734018, 'comment_body': ""@Rohitth007  ``match_stream`` is used for stream sorting at many places in ZT such as ``update_streams`` in ``views.py`` but as discussed in  [zulip terminal > Improve stream typeahead sorting in compose box](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Improve.20stream.20typeahead.20sorting.20in.20compose.20box.20.23T1186), we didn't want to change stream sorting in ``leftbar stream search``"", 'comment_created': datetime.datetime(2022, 6, 14, 12, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 896735619, 'comment_body': 'And about data type of ``muted_streams``, I agree with using ``stream_names`` instead of ``stream_ids`` like we have implemented for ``(un)pinned_streams``', 'comment_created': datetime.datetime(2022, 6, 14, 12, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 896917934, 'comment_body': '3 tests started failing in ``test_helper.py`` after I rebased my current branch with ``upstream/main``. Test cases are as follows -\r\n* ``test_download_media``\r\n* ``test_open_media[0-error0]``\r\n* ``test_open_media[1-error1]``', 'comment_created': datetime.datetime(2022, 6, 14, 14, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 897069083, 'comment_body': ""Oh I see, but a boolean like `prioritize_unmuted` might help? Since `match_stream` also does some sorting apart from matching, it's better to place all sorting code together.\r\n* If False, it'll return pinned matches then unpinned matches.\r\n* If True, it'll return pinned unmuted matches, unpinned unmuted matches, pinned muted matches then unpinned muted matches."", 'comment_created': datetime.datetime(2022, 6, 14, 16, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 901039336, 'comment_body': ""This line has dropped 'Stream 1'?"", 'comment_created': datetime.datetime(2022, 6, 19, 2, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905653500, 'comment_body': ""Minor: Adding behavior, even if just in the tests, isn't really a refactor."", 'comment_created': datetime.datetime(2022, 6, 24, 1, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905658997, 'comment_body': ""In the commit introducing stream_categories, note that while details can be useful, in the commit text it's more useful to write what you can't easily include in the commit (code) itself, such as why the change is useful/important.\r\n\r\nSome of that why might be noting how it might be extended, but until the extra parameters are added, it's not important to refer to them by name - otherwise you couple this commit text to how it *will* be implemented, and either this commit text needs updating later (though it might be merged first!), or else the later code 'must' be named appropriately later (which one cannot always guarantee). Basically, it can be useful to describe what else it might be applied to, or perhaps an example, but otherwise focus the commit text on *this* commit.\r\n\r\nI may have given an impression that something wasn't in the commit text which led to this; I believe I was referring to how the commit text didn't describe what this commit was doing (re switching to stream_categories)."", 'comment_created': datetime.datetime(2022, 6, 24, 2, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905667103, 'comment_body': ""I haven't seen these failures locally after rebasing, only the new tests you added here. Do you still get the errors you saw? (Was that locally or CI, ie. GitHub actions?)\r\n\r\nTo clarify, it seems that it's one test from each group, perhaps, or at least not an entire case that's failing. While the assert-in-a-loop does detect the error, as I mentioned previously it may be more useful to show the failing pairs all together, which might be straightforward if you eg. build a dict and compare it to that expected?\r\n\r\nThese new tests apply to the new code, so this should go with the previous commit that changed/added the functionality."", 'comment_created': datetime.datetime(2022, 6, 24, 2, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905671272, 'comment_body': ""In this commit where you add the test cases, you're not connecting the muted elements to the muted_streams data."", 'comment_created': datetime.datetime(2022, 6, 24, 2, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905675907, 'comment_body': ""@Rohitth007 I agree there are multiple ways of writing the code, and we may even update the stream order later - or add options - but for now I'm happy for this to be focused on the functionality and ensuring this behaves as expected by using the new tests (and test structure). Once we have tests, we can refactor more safely. I think @srdeotarse already rewrote the code, and we still may need to adjust the algorithm."", 'comment_created': datetime.datetime(2022, 6, 24, 2, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905679074, 'comment_body': 'Re muted_streams vs (un)pinned_streams, these are data-structures used for different purposes right now. The former is simply to know if a stream is muted, while the latter is designed for the UI (historically).\r\n\r\nRegarding the tests, I would favor having names in the test cases to make them more readable, independently of the data in the model. That is eg. `{""pinned"": {""Stream 1""}, ""muted"": {""Secret Stream""}}` is more readable than the latter being an int.', 'comment_created': datetime.datetime(2022, 6, 24, 3, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905827938, 'comment_body': ""The reason for having it inside `match_stream` is it would simplify the logic by a lot. Here we are throwing away the matched typeaheads, resorting an already sorted list given by `match_streams`  and then recreating new matched typeaheads. If this is done inside `match_stream` then it would barely take 5-6 lines and it wouldn't affect any of the tests.\r\n\r\nAnother reason is we would barely have to do any work to extend this feature to the stream panel."", 'comment_created': datetime.datetime(2022, 6, 24, 8, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 922807450, 'comment_body': 'I have connected muted elements to muted_streams data in 5th commit of adding some muted test cases, right after we have added stream sorting based on muted streams.', 'comment_created': datetime.datetime(2022, 7, 17, 10, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 933937797, 'comment_body': ""Yes, it's there now, but it had disappeared in the previous iteration it seemed."", 'comment_created': datetime.datetime(2022, 7, 31, 7, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 934050288, 'comment_body': 'This change appears to be in the wrong place.', 'comment_created': datetime.datetime(2022, 7, 31, 22, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 936188260, 'comment_body': ""@Rohitth007 I just had a final look at this, and given the functionality I'm going to go with the current style for now. To reiterate my thoughts on the implementation here:\r\n- while generally I'm in favor of synchronizing the behavior of the stream filter and autocomplete, as per eg. the current_stream behavior we may want to have differences - including as here\r\n- If we're adding functionality, we want to add/update the tests for this behavior somewhere, and I think we benefit from defining autocomplete expectations, particularly since that could always differ based on current_stream now, and this is the only behavior changed right now\r\n- if we later change the implementation to something like you propose, these new tests should still pass for autocomplete"", 'comment_created': datetime.datetime(2022, 8, 3, 2, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'f2a066996621fa19b02baf2c70772740bd5d4b1a', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf98899dc2cb1e29996ac10cea33cbad24bae243', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '812a473fbb83fda6a2443bd85210a25ee1ea0e7f', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8e5538b2e83c85af9d9e017ae52ca248b2f4945', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
913128563,hotkeys: Add linting for hotkeys.,"Fixes #1209

<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->
Adds GitHub Actions and changes to ``lint-all`` for linting ``generate_hotkeys.py``

**What does this PR do?**  <!-- Overall description goes here -->

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",True,1210,https://api.github.com/repos/zulip/zulip-terminal/pulls/1210,https://github.com/zulip/zulip-terminal/pull/1210,closed,153,16,3,11,6,89,3,0,"[{'name': 'area: hotkeys'}, {'name': 'size: XL'}, {'name': 'area: infrastructure'}]",2022-04-19 13:29:24+00:00,2022-08-21 02:39:16+00:00,10674592.0,"123 days, 13:09:52","[{'comment_id': 866528868, 'comment_body': 'I suppose duplicate checking need not be done for each `help_text` inside the for loop?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 866529927, 'comment_body': 'Continuing the previous comment, if `for key in keys_list` can be pulled out of the for loop then I suppose the above can also be combined into the for loop below?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 866530545, 'comment_body': 'Any reason for keeping the above comments?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 867437429, 'comment_body': 'I meant to say, if we can move duplicate checking to the end, then we can do everything in 1 for loop itself.', 'comment_created': datetime.datetime(2022, 5, 8, 5, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 867437706, 'comment_body': ""Here, do you mean to `extend` instead of `append`? \r\nAs appending would not check if, `q` for example is also in `['ctrl a', 'q']`"", 'comment_created': datetime.datetime(2022, 5, 8, 5, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 867439454, 'comment_body': 'I will change it to extend', 'comment_created': datetime.datetime(2022, 5, 8, 5, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 867452443, 'comment_body': 'Note that you have to change the rest of the `key_list` logic as well.', 'comment_created': datetime.datetime(2022, 5, 8, 8, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 869790450, 'comment_body': ""What's the motivation for this refactoring?"", 'comment_created': datetime.datetime(2022, 5, 11, 1, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869792052, 'comment_body': 'If this is just for checking duplicates, please name it more specifically than this.', 'comment_created': datetime.datetime(2022, 5, 11, 1, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869792210, 'comment_body': 'This may be simpler with a comprehension?', 'comment_created': datetime.datetime(2022, 5, 11, 1, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869792335, 'comment_body': 'Exit with what value?', 'comment_created': datetime.datetime(2022, 5, 11, 1, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 870108499, 'comment_body': 'GitHub Actions cannot import from ``zulipterminal.config.keys`` thus the refactoring of imports.', 'comment_created': datetime.datetime(2022, 5, 11, 9, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 871440690, 'comment_body': 'You can even bring it out of the for loop to do it just the once.', 'comment_created': datetime.datetime(2022, 5, 12, 14, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 871442614, 'comment_body': ""Not sure I like the new name. Can't think of a better one right now though."", 'comment_created': datetime.datetime(2022, 5, 12, 14, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 871456950, 'comment_body': 'Sure, I will bring that comprehension out of the for loop.', 'comment_created': datetime.datetime(2022, 5, 12, 14, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 873096697, 'comment_body': ""This kind of explanation belongs in the commit text, and possibly a comment in the file.\r\n\r\nUnless I missed it, you didn't discuss what error you may have had and why you took this approach.\r\n\r\nIt's good you separated this out into another commit, since it's clearer it's a refactor."", 'comment_created': datetime.datetime(2022, 5, 15, 1, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889497728, 'comment_body': 'What is the reasoning here for using the second `dict` inside the main `dict`?\r\nLater `categories[action]` is anyway converted into a list of tuples using `items()`.\r\nSo why not just store it as a list of tuples in the first place?\r\n\r\nAnother point here is, you are looping through the large ~70 `KEY_BINDINGS` for every category (6). Instead why not try using a `defaultdict(list)` and run through `KEY_BINDINGS` only once?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498107, 'comment_body': ""Here why do we want to generate the `ORIGINAL_OUTPUT_FILE`, i.e., not exit, even though it's not in sync?"", 'comment_created': datetime.datetime(2022, 6, 4, 7, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498291, 'comment_body': 'I believe this can be pulled out of the inner for loop?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498692, 'comment_body': ""I'm not aware of the style here. Is it basically everything except numbers and full stop?\r\n(as the above doesn't have all special characters?)"", 'comment_created': datetime.datetime(2022, 6, 4, 7, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498860, 'comment_body': 'You can also use `re.compile` once before the for loop to speed up the regex matching.', 'comment_created': datetime.datetime(2022, 6, 4, 7, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498970, 'comment_body': 'We might want to add ""detected."" at the end of this print statement?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889499615, 'comment_body': 'This help text is a bit hard to read and understand. Maybe something like `""Lint hotkeys.md for key description style and key duplication""`?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889499914, 'comment_body': 'Does `""--lint-only""` sound better here than `""--check-only""`?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889647104, 'comment_body': ""`isort` uses `--check-only`, which is where I heard it before I expect. I'm not sure what `zulint` uses in the main project, if there's a similar flag."", 'comment_created': datetime.datetime(2022, 6, 5, 4, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889651284, 'comment_body': ""This isn't a refactor here, as you're changing the behavior.\r\n\r\nAlso, this is now never going to update the original file automatically, which it did before?\r\n\r\nMy original thought was to perhaps extract the generation code under this line into a function that would write to the appropriate file object, which you could do in a refactor commit first. However, while it is more explicit doing a direct file comparison, we might instead compare the contents of the existing file with the string that the generation function would write - so the extracted function would instead just generate a string?"", 'comment_created': datetime.datetime(2022, 6, 5, 5, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889737090, 'comment_body': 'Best to use a named argument here for clarity.', 'comment_created': datetime.datetime(2022, 6, 5, 21, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889739792, 'comment_body': ""This symbol indicates there's a missing newline at the end of the file."", 'comment_created': datetime.datetime(2022, 6, 5, 21, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 892043013, 'comment_body': 'Why the change here?', 'comment_created': datetime.datetime(2022, 6, 8, 8, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 892050303, 'comment_body': ""Let's try an see if we can simplify the diffs here.\r\nWhy not first create the functions in their original place in one commit. Then change the ordering on those functions in another commit. We can squash them later while merging, if needed.\r\n\r\nAlso, I don't think we need this and the below comment now that they are pretty obvious?"", 'comment_created': datetime.datetime(2022, 6, 8, 8, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 892060181, 'comment_body': 'Here as well, we can keep the original style of:\r\n```python\r\nhotkeys_file_string += (\r\n    f""## {HELP_CATEGORIES[action]}\\n""\r\n    ""|Command|Key Combination|\\n""\r\n    ""| :--- | :---: |\\n""\r\n)\r\n```\r\nwhich I\'m hoping would improve the diffs, if `categories = read_help_categories()` was inserted inside `with open` in the previous commit.', 'comment_created': datetime.datetime(2022, 6, 8, 8, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 892267728, 'comment_body': ""According to your suggestion of using a defaultdict(list) for categories, and loping through 70 ``KEY_BINDINGS`` at once, order of categories in defaultdict is according to order of keys in ``config/keys`` which don't follow the order of ``HELP_CATEGORIES``. Therefore, I have used the ``HELP_CATEGORIES`` ordering."", 'comment_created': datetime.datetime(2022, 6, 8, 11, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 892268995, 'comment_body': 'Sure, I will remove the comments and split the ordering of functions into 2 commits.', 'comment_created': datetime.datetime(2022, 6, 8, 11, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 892446546, 'comment_body': 'Here, the `various_key_combinations` is printed with the `kbd` tags. I think it would be more readable if it is written without the tags.', 'comment_created': datetime.datetime(2022, 6, 8, 14, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 893477453, 'comment_body': 'Aah, I see. Makes sense.', 'comment_created': datetime.datetime(2022, 6, 9, 13, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 893483797, 'comment_body': 'The question above was to see if a regex like `""^[^\\d.]*$""` would be more suitable.\r\nI\'d wait for @neiljp to clarify the description style here.', 'comment_created': datetime.datetime(2022, 6, 9, 13, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 893598273, 'comment_body': 'For the ``help_text`` description style, text string except ``.`` and some ``special characters`` are working for now. But, exactly what ``special_characters`` should be allowed that needs some discussion. ', 'comment_created': datetime.datetime(2022, 6, 9, 14, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 894778735, 'comment_body': 'Earlier also listing ``categories`` into dict was outside ``with open``. So I think diff is clearer if ``categories = read_help_categories`` is outside ``with open``', 'comment_created': datetime.datetime(2022, 6, 10, 18, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 894984569, 'comment_body': ""Here don't move `OUTPUT_FILE` and `SCRIPT_NAME` to the top of the functions, then look at the diffs.\r\nYou can also move the creation of `various_key_combination()` into another commit. That will make the diffs even more easier to read."", 'comment_created': datetime.datetime(2022, 6, 11, 6, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894984878, 'comment_body': ""Here, I meant all such multi-line `write()`'s. You missed atleast one at the top.\r\nRe categories, I meant change the position in the previous commit. Try with and without this and see the difference."", 'comment_created': datetime.datetime(2022, 6, 11, 6, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908117600, 'comment_body': 'Use the same multiline format as before here as well', 'comment_created': datetime.datetime(2022, 6, 28, 7, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908120300, 'comment_body': 'This can go into a different commit as `get_hotkeys_file_string` is a refactor while `compare_hotkeys_file` is a new feature.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908125929, 'comment_body': ""Maybe it's better to add this function in one commit then add `--check-only` and main changes in another commit."", 'comment_created': datetime.datetime(2022, 6, 28, 7, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908128349, 'comment_body': 'Maybe bring this up on the stream then.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908131104, 'comment_body': 'Did you mean `hotkeys.md` here?', 'comment_created': datetime.datetime(2022, 6, 28, 7, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908138667, 'comment_body': 'Here as well.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 910606184, 'comment_body': 'Using `hotkeys.md` instead of `Hot Keys` makes sense in both this and the below print statements as well.', 'comment_created': datetime.datetime(2022, 6, 30, 4, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918568435, 'comment_body': 'This will give a different behaviour. Here, I meant either create the `lint_hotkeys_file()` function in 1 commit and argparse and check-only related changes in another or do it the other way round. This is because there is a lot happening in this commit.', 'comment_created': datetime.datetime(2022, 7, 12, 5, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918571355, 'comment_body': ""After resolving errors you are supposed to run linting again to check if there are no more errors. (We want to avoid juggling between 2 commands.)\r\nOnce this says `no linting errors`, we are anyway comparing the 2 files where it will say `the files are not in sync` if that's the case."", 'comment_created': datetime.datetime(2022, 7, 12, 5, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918571929, 'comment_body': 'Here if the files are not in sync then print `Run generate_hotkeys....` and exit with exit_flag = 1', 'comment_created': datetime.datetime(2022, 7, 12, 5, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918578054, 'comment_body': ""Re this commit text, you shouldn't be to refer to the previous git history because once it's merged it's like it never existed so it wouldn't make sense unless it's for the reviewer. You should mostly talk about what this commit is doing."", 'comment_created': datetime.datetime(2022, 7, 12, 6, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918579789, 'comment_body': 'Here you can do both replaces one after the other, like so.\r\n`str.replace().replace()`', 'comment_created': datetime.datetime(2022, 7, 12, 6, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 919136336, 'comment_body': 'I should add ``Run generate_hotkeys....`` in ``compare_hotkeys_file`` function if files are not in sync, as we need to instruct running the command every time hot keys are not in sync.', 'comment_created': datetime.datetime(2022, 7, 12, 15, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 920765936, 'comment_body': 'But then when you run `./tootls/generate_hotkeys` it will show `Run ./tootls/generate_hotkeys`.', 'comment_created': datetime.datetime(2022, 7, 14, 5, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 920767414, 'comment_body': 'I think you undid whatever you did here? ', 'comment_created': datetime.datetime(2022, 7, 14, 5, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 920769725, 'comment_body': 'Maybe just say, ""Rerun this command after resolving errors in config/keys.py"".\r\n\r\nAlso the thing is we are effectively linting the markdown file but we are doing it my linting keys.py. So it might confuse the user as to what they should edit if says ""to lint hotkeys.md""', 'comment_created': datetime.datetime(2022, 7, 14, 5, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 921804273, 'comment_body': 'Oh black took effect. Why not just use `key_combinations_list` in the print statement instead of undoing whatever was done in the `various_key_combinations()` function.  (What does `"" / "".join(key_combinations_list)` look like?)', 'comment_created': datetime.datetime(2022, 7, 15, 4, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 921804521, 'comment_body': ""Also I don't like that fact that `various_key_combinations` is both a variable name and a function name."", 'comment_created': datetime.datetime(2022, 7, 15, 4, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 922688348, 'comment_body': 'I have used ``"" / "".join(key_combinations_list)`` in my recent commit, it shows key combinations like ``ctrl _`` instead of earlier ``ctrl + _`` and also for two key combinations it shows something like ``up / ctrl p``.', 'comment_created': datetime.datetime(2022, 7, 16, 14, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 922830429, 'comment_body': 'I think it makes sense to show it this way as we are anyway asking them to edit config/keys.py (`ctlr _`) and not the markdown file (`ctrl + _`). The other one might be confusing if we show markdown and expect them to edit python.', 'comment_created': datetime.datetime(2022, 7, 17, 13, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924126666, 'comment_body': ""I don't think you have updated this, i.e., removing this from the `compare` function and adding it here."", 'comment_created': datetime.datetime(2022, 7, 19, 6, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924130315, 'comment_body': 'you could probably squash this with the linting commit.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924132714, 'comment_body': 'You can probably split this commit into 2 since a lot is happening here. One for checking description style and the other for checking key combination duplication.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 931053869, 'comment_body': 'This probably belongs in the next commit?', 'comment_created': datetime.datetime(2022, 7, 27, 13, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 931061074, 'comment_body': 'Lets just say `No hotkey linting errors`? As it maybe confusing if there are `no errors in hotkeys.md` but you are still asking me to `update hotkeys.md`', 'comment_created': datetime.datetime(2022, 7, 27, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 948637419, 'comment_body': ""If this was anything other than docstring, it would have been reformatted by black, but this is one thing black won't do for us, so we need to wrap it (and others) sensibly ourselves."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948638994, 'comment_body': ""The commit title isn't accurate - yes, you're refactoring into functions, but you're *also* refactoring it to generate the text first and write it at the end.\r\n\r\nI would suggest putting that second refactor (into string-then-write form) first in a commit before this, then have this commit but with the extraction of the function for the writing of the file at the same time (which you have in the last refactor commit right now)."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948640161, 'comment_body': ""I'm not really convinced about the benefit of breaking out this small function. We can leave it in for now and drop the commit later if that's the case."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948643540, 'comment_body': 'The return value is not used here. Is that intentional?', 'comment_created': datetime.datetime(2022, 8, 18, 4, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948648269, 'comment_body': ""I would expect a little more detail as to what it does (and also by default).\r\n\r\nThe linting is only with the 'check only' option after all."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948648732, 'comment_body': ""Unless you plan on calling `main` as `main()`, then I'm not sure why you have a default argument here."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948692861, 'comment_body': ""If a function returns a bool then it's often useful to name it in a way that reads well in a conditional context. While you've not used it above - though maybe you could avoid writing the file if they're the same? - we'd currently have:\r\n```python3\r\nif compare_hotkeys_file(some_string):\r\n    ...\r\n```\r\nCompare that to something like: (if I understand the code)\r\n```python3\r\nif current_file_matches_string(some_string):\r\n    ...\r\n```\r\nFunctionally they're the same, but the latter is likely clearer for someone trying to understand the code (including yourself, eg. some years later!).\r\n\r\nOther bool-returning functions might start with `is_` or `has_` for similar reasons, ie. they're yes/no questions."", 'comment_created': datetime.datetime(2022, 8, 18, 6, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948709316, 'comment_body': 'check_duplicate_keys appears unused in this commit.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948711548, 'comment_body': 'This is inaccurate with split commits.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948720697, 'comment_body': ""> Maybe it's better to add this function in one commit then add --check-only and main changes in another commit.\r\n\r\nIn the main app I would definitely agree - it would be difficult to split commits otherwise since there are layers of functions calling each other which could make a commit very large. In that case it can be clearer to define new functions (and their tests to check behavior), then incrementally connect them together. The alternative is to make an initial valid working feature and then improve it, which I think we could do here.\r\n\r\nWhen there are tests then it builds confidence in the code, so having functionality built up over multiple commits is less concerning; here we're mainly relying upon manual testing, so I'd favor the --check-only be right after this commit, and that would also make it easier to squash them back together before merging if we wished."", 'comment_created': datetime.datetime(2022, 8, 18, 6, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948722013, 'comment_body': 'It would be better to break this string into multiple strings which the interpreter will put together automatically (no need for `+`) - ie. avoid a very long string.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948724032, 'comment_body': 'It would be good to have hotkeys.md in a variable, to avoid the duplication.', 'comment_created': datetime.datetime(2022, 8, 18, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948726350, 'comment_body': 'This should be `sys.exit`.', 'comment_created': datetime.datetime(2022, 8, 18, 7, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949408260, 'comment_body': '``description="" Generate or update hotkeys.md file based on changes in config/keys.py by default. To lint hotkeys add \'--check-only\' option.""``\r\nHow about this description? @neiljp ', 'comment_created': datetime.datetime(2022, 8, 18, 17, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 949459386, 'comment_body': ""The first sentence is all that's necessary - I think this is only shown in the help text, and in that case the option will be listed below. So if the option is well-described, we don't need to include it here.\r\n\r\nThe 'by default' could be in parentheses, perhaps? As I mentioned elsewhere, it would be cleaner to use string substitution for the file names which are used throughout, and likely refer to the variables in docstrings instead.\r\n(alternatively, some of those functions could take in file parameters, but let's leave that change for this PR)"", 'comment_created': datetime.datetime(2022, 8, 18, 18, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949496442, 'comment_body': ""Thanks for pointing this out @Rohitth007, though I think this was in the original version from early 2021?\r\n\r\nIt's a good refactor to have, though being outside of the main application I'm not convinced the optimization is required :) However, it's good this filtering pattern, as this might be more warranted where we partition a larger data-structure there, eg. users based on presence."", 'comment_created': datetime.datetime(2022, 8, 18, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949509547, 'comment_body': 'Having tested this today (via adjusting the regex), the ""should..."" part runs into the end of the key output - so maybe actually output it on the next line with a slight indent?', 'comment_created': datetime.datetime(2022, 8, 18, 19, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949516193, 'comment_body': ""I just looked at this today separately after following earlier discussions in the PR and stream. I think this matches the original intent to some extent, ie. avoiding a `.` at the end of the description, though in addition also excluding digits, which I don't think was discussed?\r\n\r\nThat said, I think I prefer the original regex you had, since it should ensure some degree of consistency with what we have now - though possibly we want ` ` in place of `\\s` to avoid newlines, tabs, etc\r\n\r\nIn any case, this seems like something we may want to change in future, so having it as a constant at the top seems useful, much like we have for KEYS_TO_EXCLUDE right now."", 'comment_created': datetime.datetime(2022, 8, 18, 19, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949517691, 'comment_body': 'I added a separate comment for this just now; the original aim was eg. detect `.`, but something like the original regex above would benefit consistency.', 'comment_created': datetime.datetime(2022, 8, 18, 19, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949518703, 'comment_body': 'This still seems to be the case?', 'comment_created': datetime.datetime(2022, 8, 18, 19, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949825914, 'comment_body': 'I have extracted writing of ``hotkeys_file_string`` variable to ``hotkeys.md`` file in a new function ``write_hotkeys_file`` if thats what you meant? @neiljp ', 'comment_created': datetime.datetime(2022, 8, 19, 5, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 949848327, 'comment_body': 'I have used return value for ``compare_hotkeys_file`` to output different statement based on return value.', 'comment_created': datetime.datetime(2022, 8, 19, 6, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 949848885, 'comment_body': '@neiljp It is intentional as I have used return value [here](https://github.com/zulip/zulip-terminal/pull/1210/files#r949848327) for linting. ', 'comment_created': datetime.datetime(2022, 8, 19, 6, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}]","[{'commit_sha': '63058a08b3489f65ee42170a2b7f5aaf55bdc7c3', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311085ea6a55215dfabae91d9177d1822c329c2e', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f7af71755450d9ab37a89c9e35ff9e7cbbe8051', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cffe0e7d0c53858a57fcc409144cfe6e52f54ff', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '314e4d932b479921ebbb90ddfdbaab4d73ebcb3e', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1d54bb3ba6ec3c6178859008aa6a727146fd08c', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a34dbb99a80cb260693b18be73fb5411162ca873', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce7fcd95c9ac78d0d93c5860ce11da0b49b1160b', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce8233c1cebaa718388522ee7b92dcf5727b89d', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63bfc596678436b776778d2214070d04b28d405', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94314119f98a092b6d75cf8b366375498342439a', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5

972157015,Add support for (un)resolving topics in ZT.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR adds support for (un)resolving topics in ZT via ``TopicInfoView`` popup menu when topic is highlighted in ``left_stream_bar`` and ``i`` key is pressed to toggle ``topic settings``.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
[WIP] #1075
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [ ] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [ ] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->
First commit adds ``TOPIC_DESC`` shortcut to ``keys.py``
Second commit adds above shorcut to ``TopicButton`` in ``buttons.py``
Third commit still figuring out a way to update topic name with ``RESOLVED_TOPIC_PREFIX`` in ``model.py``
Fourth commit  adds ``TopicInfoView`` to ``views.py``
Last commit adds ``show_topic_info`` function to ``core.py`` 

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
How to update the topic name by adding or removing ``RESOLVED_TOPIC_PREFIX`` when ``Topic Resolved`` checkbox is toggled?

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
![image](https://user-images.githubusercontent.com/53873549/174599874-a80a13e1-aa31-42df-a1fa-782a6570073b.png)
",False,1235,https://api.github.com/repos/zulip/zulip-terminal/pulls/1235,https://github.com/zulip/zulip-terminal/pull/1235,open,234,33,15,7,5,113,5,0,"[{'name': 'area: UI'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}, {'name': 'PR completion candidate'}]",2022-06-20 12:18:30+00:00,,0.0,,"[{'comment_id': 901802217, 'comment_body': ""This location is OK as a starting point, but it's not specifically a stream in a stream list, so we may want to update the help in some way."", 'comment_created': datetime.datetime(2022, 6, 20, 15, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901803382, 'comment_body': ""This function (method) doesn't exist yet, so we shouldn't introduce it in a commit until it does."", 'comment_created': datetime.datetime(2022, 6, 20, 15, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901880006, 'comment_body': 'We discussed an alternative on the stream :+1:', 'comment_created': datetime.datetime(2022, 6, 20, 17, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901886560, 'comment_body': ""A resolve/unresolve affects the entire topic name each time, and send the notification bot message, so I'm wondering if we'll want to have it quite so subtle as a checkbox. For example, I might hit space multiple times on the box and each time it'll send a toggle and update the topic?\r\n\r\nPart of this is how the UI is named, perhaps. That is, it looks like a state, 'Topic Resolved', but it's an action in the checkbox?\r\n\r\nFor the stream info popup this is less impactful since this only affects personal state (muted, pinned, notifications).\r\n\r\nAnother option might be to update on leaving the popup, like with reactions, which we could make consistent with how the stream info would behave, perhaps.\r\n\r\nWe can discuss in the stream."", 'comment_created': datetime.datetime(2022, 6, 20, 17, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901899531, 'comment_body': 'This is what we have in other places, but we should really migrate to an accessor for this from the model.', 'comment_created': datetime.datetime(2022, 6, 20, 17, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901909742, 'comment_body': ""It seems strange to have the model function called `toggle_...` which you then pass a different parameter to depending upon the topic name, and which is the *new* name - other than relying on the called function to do the toggling. That is, I'd expect a toggle function to be passed in fixed parameters. In other words, a toggle is a 'move to the other position', not a 'move to *this* position'.\r\n\r\nFor at least some similar cases we have logic in the model function instead. Take a look at the muting and pinning logic, for example."", 'comment_created': datetime.datetime(2022, 6, 20, 18, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901911355, 'comment_body': 'Similarly to the help, we may want to update the label here, or add a new one if want a new area - though we risk running out of styles :)', 'comment_created': datetime.datetime(2022, 6, 20, 18, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 908473278, 'comment_body': 'How about ``topic_list``?', 'comment_created': datetime.datetime(2022, 6, 28, 13, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 922941019, 'comment_body': ""I'm not sure we can assume that this response will have messages present in all cases, as you currently do, ie. if there is an error."", 'comment_created': datetime.datetime(2022, 7, 18, 2, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924084885, 'comment_body': ""Is this necessary? This doesn't appear in the zulip python library function which is a little like this?\r\n\r\nNote the different possible server/user editing settings, which we can determine, may allow various levels of this, depending on user role (eg user/admin/etc) - it's not just if the user has posted. If this is common to the other editing code then we may want to extract a function for checking for editing permissions of a given stream/topic first?"", 'comment_created': datetime.datetime(2022, 7, 19, 5, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924104963, 'comment_body': 'This works, but the conditional may be slightly clearer if we reduce the duplication - only the new topic is different in each branch.', 'comment_created': datetime.datetime(2022, 7, 19, 6, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924111533, 'comment_body': ""This means the state can't be toggled while still in the popup?\r\n\r\nIf so, we might want to consider something more like how the emoji popup is handled (but just one button), where it adds a marker. That said, this is just like a checkbox.\r\n\r\nI know someone mentioned having a button (@Rohitth007 ?), but I'm guessing the style here is not quite as expected?"", 'comment_created': datetime.datetime(2022, 7, 19, 6, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924130498, 'comment_body': 'Looking at similar popups/sections, we have one in the message-actions section (MSG_INFO in msg_actions), one in stream list actions section (STREAM_DESC in stream_list), but also user information in general (USER_INFO in general).\r\n\r\nBased on that, it seems like it might be worth tidying the existing STREAM_DESC into an _INFO (so we can use a similar suffix in this commit). Until we restructure the help sections, to be consistent for now, we could either add the new hotkey to general (less tidy) or move it to a new topic_list section (and also move the existing user one into one two).\r\n\r\nThe latter option would possibly also allow adding an entry for ENTER in the user list for replying to a user, which we could possibly do in other cases too in some way, though we might want to hold off on that until we have more of a plan for that without adding too many options.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924168922, 'comment_body': 'Probably exiting out of the popup (after executing current functionality) as soon as you press the button would help with this.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924698401, 'comment_body': 'So, like if we press the button, the popup will exit and the topic will be (un)resolved.\r\nBut, we will be also adding different settings to the topic popup in the future. So if a user wants to (un)resolve topic and change any other setting, user again has to toggle the popup?', 'comment_created': datetime.datetime(2022, 7, 19, 16, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 925172099, 'comment_body': ""Since we'll place 1 time use features here like `Mute Topic`, `Mark topic as read`, `Copy Topic Link`, `Resolve Topic`, it make sense to close it when you activate the button."", 'comment_created': datetime.datetime(2022, 7, 20, 4, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 925189262, 'comment_body': ""Agreed, I think removing this might make it possible to edit topic names even if you haven't sent any messages there.\r\nRe, for topic edit permissions, I think we should do that before calling the toggle function. We should ideally not show them the button in the first place depending of the permission."", 'comment_created': datetime.datetime(2022, 7, 20, 5, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 926196243, 'comment_body': ""We can revisit this, but a button like Rohitth indicates may be simplest for now.\r\n\r\nNote that for the stream info, we have a check-box which updates, but as I think I mentioned before, that's a user setting so isn't as big an issues if eg. updated repeatedly via a check-box."", 'comment_created': datetime.datetime(2022, 7, 21, 2, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 926197322, 'comment_body': ""True, if we can't resolve the topic, it would be confusing to bring it up. That said, in future we may want the topic info popup to be visible even if actions aren't possible, so we could take an approach a little like with the visual notifications checkbox in the stream popup when external notifications are not configured - that checkbox gets grayed out and we show red text to indicate why."", 'comment_created': datetime.datetime(2022, 7, 21, 2, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 939485448, 'comment_body': 'Can `model.update_stream_message()` be used here? unless you don\'t want to display `""You changed all messages\' topic from #stream>topic to #stream>✔ topic .""`', 'comment_created': datetime.datetime(2022, 8, 6, 5, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939485840, 'comment_body': 'If you instead want to show `""#stream>topic has been resolved""` then do include `display_error_if_present(response)` and report_success(""#stream>topic has been resolved"") here.', 'comment_created': datetime.datetime(2022, 8, 6, 5, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939486477, 'comment_body': 'Didn\'t know topics had a time limit. Then why do we show `""Only topic editing allowed. Time limit for editing the message body has been exceeded.""` when `realm_message_content_edit_limit_seconds` is crossed?', 'comment_created': datetime.datetime(2022, 8, 6, 5, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939486631, 'comment_body': 'Who can resolve such a topic then, only admins? I assume it would be a future feature for ZT then? Probably comment it?', 'comment_created': datetime.datetime(2022, 8, 6, 5, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939487554, 'comment_body': ""Can `model.get_messages()` be used here? We may have to force users to narrow to a topic to resolve it so that `self.narrow` is not a problem.\r\n\r\nIf that is not ideal, would it be more readable if this whole request (along with error handling which you haven't done) was extracted into a function like`get_latest_message_in_topic`?"", 'comment_created': datetime.datetime(2022, 8, 6, 5, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939487956, 'comment_body': 'Probably better to move the hotkey changes here since `i` is not usable until this point.', 'comment_created': datetime.datetime(2022, 8, 6, 5, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 951650580, 'comment_body': 'What if the get_messages request fails? Does response still contain ""messages""?', 'comment_created': datetime.datetime(2022, 8, 22, 16, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 951658196, 'comment_body': 'To improve readability, given the function and last two parameters are the same in each branch, consider putting the minimal difference in the conditional difference, eg. setting a variable, and placing the common part outside of the conditional.', 'comment_created': datetime.datetime(2022, 8, 22, 16, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 951661549, 'comment_body': ""This combined indicates the function will return the response of the get-messages if the time limit has been exceeded - though you remove the final return in another commit, before you've used this function, which suggests this shouldn't be here in the first place.\r\n\r\nIn any case I'd suggest moving this final 'else' to the top, so you can handle all the error cases first, then know that an edit should be possible and do so. Note this relates to how you can group them all together and extract them into the can_ function, as I note in another comment."", 'comment_created': datetime.datetime(2022, 8, 22, 16, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 951677414, 'comment_body': ""You introduce `can_user_edit_topic` in this commit, but it's only handling a feature which I think is new (check the zulip API changelog). That it's looking to extend the base functionality to handle a new feature is great! The reason I've highlighted this section is since all the error outputs due to permissions in toggle_topic_resolved_status are also relevant to this, so I'd suggest adding can_user_edit_topic in the first related commit, then extending it here when you add the functionality only available in updated servers."", 'comment_created': datetime.datetime(2022, 8, 22, 17, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956603468, 'comment_body': 'result[""messages""] contains empty list if get_messages request fails. Therefore, the condition to check it before (un)resolving topics.', 'comment_created': datetime.datetime(2022, 8, 27, 17, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 957719391, 'comment_body': 'Given the name of this method, and also how its used, would it make sense to return only the one message, or None?', 'comment_created': datetime.datetime(2022, 8, 29, 19, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957723198, 'comment_body': 'While simple, it would be useful to have a simple test to define what this method does. The method and test could go into a commit before you use it.', 'comment_created': datetime.datetime(2022, 8, 29, 19, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957732269, 'comment_body': ""While you have a test for this later, it's preferable to introduce tests in the same commit as the code - then the code and tests are right there to read together.\r\n\r\nIf developing this function in two stages still, I'd suggest moving this function into an earlier commit combined with a simplified version of the current test you have now in a later commit, with fewer test cases (and maybe less code in it), then when you add the extra features later you can update the test with the extra cases.\r\n\r\nHowever, for simplicity, it would be fine to have the full function (this + extras) in one commit on it's own with tests, given we need to handle the current new server state."", 'comment_created': datetime.datetime(2022, 8, 29, 19, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957889418, 'comment_body': ""If we're using get_user_info, can we just use role instead? So mock the return_value to be different role ids? That should simplify your test setup too."", 'comment_created': datetime.datetime(2022, 8, 30, 0, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957892819, 'comment_body': ""Minor: It's useful to separate the 'arrange' from the 'act' and the 'assert' by blank lines, so here either side of the call to the function itself, to make it stand out."", 'comment_created': datetime.datetime(2022, 8, 30, 0, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957897467, 'comment_body': ""Editing is allowed... but it says it's disabled?"", 'comment_created': datetime.datetime(2022, 8, 30, 0, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957898484, 'comment_body': 'Why this check on role?', 'comment_created': datetime.datetime(2022, 8, 30, 0, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957898976, 'comment_body': 'It would be easier to read if you extracted this .get which is used in each part into a variable at the start.', 'comment_created': datetime.datetime(2022, 8, 30, 0, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957901179, 'comment_body': ""It's confusing to have the parameters named slightly differently; skip the realm_, but let's make the names match otherwise :) ie. edit_topic_policy, not topic_edit_policy"", 'comment_created': datetime.datetime(2022, 8, 30, 0, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957903884, 'comment_body': ""I don't understand this case. There's no user data, so get_user_info fails?\r\n\r\nIf you want to test this part then the approach of setting the return value of get_user_info to None here may be clearer?"", 'comment_created': datetime.datetime(2022, 8, 30, 0, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957905058, 'comment_body': 'Minor: It would be clearer to keep the server settings grouped together, ie. move the user role one step down?', 'comment_created': datetime.datetime(2022, 8, 30, 0, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957907982, 'comment_body': ""Doesn't one of these completely replace the other? Maybe have the test parameters be Optional[bool] and set these parameters based on being None or not."", 'comment_created': datetime.datetime(2022, 8, 30, 0, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957910218, 'comment_body': ""Having read the tests, I'm not sure if the code is working quite right, so let's get it functional according to tests first. However, since the first two if/elif branches here return, you could turn them into standalone if's, then move this line down closer to where its used. That may apply if you adjust the logic too."", 'comment_created': datetime.datetime(2022, 8, 30, 0, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957911561, 'comment_body': ""Note that as per the API changelog, this parameter was new in feature level 11, so we need a backup value for this.\r\n\r\nIn an ideal world we could put all of the error conditions in one function, but let's keep them here for now."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957912131, 'comment_body': ""We haven't added support for 'community' topic editing in the regular edit feature, so we give a notice there which represents the feature we support."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957913323, 'comment_body': 'This is outside your changes, but I noticed that the code splits this function from the private equivalent, and it would be good to keep them together.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961316309, 'comment_body': ""Because mypy test is failing as we can't compare role(None) and int."", 'comment_created': datetime.datetime(2022, 9, 2, 6, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 961320967, 'comment_body': ""Ah, so this seems to be due to the way in which that dict is constructed in get_user_info - approximately, then updated. I think we should be able to reorder that and make the dict element not be Optional. Do you want to try that as a refactor? It'd be a reasonable other PR or early commit that we could merge first. I could do that if you want to focus on this."", 'comment_created': datetime.datetime(2022, 9, 2, 6, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961855914, 'comment_body': 'I think we could use `Message` in here somewhere?', 'comment_created': datetime.datetime(2022, 9, 2, 16, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961861594, 'comment_body': 'To clarify some other earlier points:\r\n- I suggested the `None` values as a way to support either of the other two parameters, ie. None meaning not present, or else there being a value meaning one of the expected range of values.\r\n- You might consider an assert on what seem to be two mutually exclusive server values; not here to test the code, but to ensure the test cases themselves make sense - that one is None and the other is not, or vice versa\r\n- I think realm_allow_message_editing is always present in the data? (from zulip v2 anyway?)\r\n- You adjusted the name of edit_topic_policy to match the initial_data key, but I meant the initial_data parameters you set in general (ie. the other two parameters too)', 'comment_created': datetime.datetime(2022, 9, 2, 16, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961869523, 'comment_body': ""> Editing is allowed... but it says it's disabled?\r\n\r\nAs before, I'm an admin, I can edit everything, but can't edit the topic?\r\n\r\nAlso, edit_topic_policy didn't exist until a later feature level, which is why I suggested the `None` values."", 'comment_created': datetime.datetime(2022, 9, 2, 17, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961870689, 'comment_body': 'It would be good to add some cases to cover regular users, for the different realm settings.', 'comment_created': datetime.datetime(2022, 9, 2, 17, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962110593, 'comment_body': ""The way you have this right now still has the internal data set up and actually relying upon (and ~ integration testing) `get_user_info` as part of this test. In the last review I suggested mocking that return value instead, much like you've done for the client.get_messages test."", 'comment_created': datetime.datetime(2022, 9, 3, 6, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962111813, 'comment_body': 'args can be inline in the function call here.', 'comment_created': datetime.datetime(2022, 9, 3, 6, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962112021, 'comment_body': ""You don't have a backup value here yet. See how this worked in the changelog:\r\nhttps://zulip.com/api/changelog"", 'comment_created': datetime.datetime(2022, 9, 3, 6, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962112385, 'comment_body': 'Could we add a test for this? Note that you can mock the methods as before to simplify the test cases.', 'comment_created': datetime.datetime(2022, 9, 3, 6, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962112971, 'comment_body': ""We need a different anchor value here to be backwards compatible with 2.1.x (https://zulip.com/api/get-messages), though a comment that we can use a string instead at a later stage would be useful.\r\n\r\nHowever, given it's a simple change, I think we should switch to fetching the first message in the narrow instead of the last, since I think that should avoid some of the strange behavior I mentioned in the last review summary. I think it's also mentioned in a server issue/PR.\r\n\r\nReading this again, I think this should also work with num_before being 0?\r\n"", 'comment_created': datetime.datetime(2022, 9, 3, 6, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962113171, 'comment_body': 'Can we also check the length is 1 and then just return that message?', 'comment_created': datetime.datetime(2022, 9, 3, 6, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962154745, 'comment_body': 'But if we fetch the oldest message then time_limit for editing topic will exceed the set threshold.', 'comment_created': datetime.datetime(2022, 9, 3, 13, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 962168059, 'comment_body': ""I didn't understand this point @neiljp "", 'comment_created': datetime.datetime(2022, 9, 3, 15, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 962175627, 'comment_body': ""Hmm, yes this is confusing. Let's leave it at last for now."", 'comment_created': datetime.datetime(2022, 9, 3, 16, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962175812, 'comment_body': ""I meant for the return type. The exact format would depend on if you adjust the data that's returned though."", 'comment_created': datetime.datetime(2022, 9, 3, 16, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962340180, 'comment_body': 'Debug.', 'comment_created': datetime.datetime(2022, 9, 4, 16, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962344655, 'comment_body': 'How does edit_topic_policy relate to ZFL8 and Zulip3.0? You have a different ZFL in the code.\r\n**discussed in the stream today too**', 'comment_created': datetime.datetime(2022, 9, 4, 17, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962345518, 'comment_body': ""> > Editing is allowed... but it says it's disabled?\r\n> \r\n> As before, I'm an admin, I can edit everything, but can't edit the topic?\r\n\r\nThe test code has changed, but you've not addressed this point, and it's more clearly not working now.\r\n\r\nIn this particular test case, my point from the last review applies: why can admins and owners not edit the topic?\r\n\r\n**update: we discussed the above in the stream today and you said you'd look into it**\r\n\r\nI'd also suggest adding another case for where both realm settings are True, ie. when can the community edit topics, not just admins/owners?"", 'comment_created': datetime.datetime(2022, 9, 4, 17, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962346161, 'comment_body': 'This role None check should not be necessary after my PR from yesterday.', 'comment_created': datetime.datetime(2022, 9, 4, 17, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962348282, 'comment_body': 'I like that you\'ve increased the coverage of cases by doing this, and it does have the benefit of keeping individual test cases that error (ie. role+server combinations).\r\n\r\nHowever, I have a few concerns:\r\n- It\'s not as clear which response (ie. ~role) here connects to the int keys in the dict in the other parametrize\r\n  - this is balanced by not typing the roles out in the second parametrize, but we could use None/role-id (eg. 300) inline instead and build the dict in the test body, if it\'s not None; then this parameterize would just iterate over the roles, or the test body would\r\n  - or if keeping this design, maybe use descriptive strings for the cross-referencing (""_admin"", ""_moderator"", ...) instead of the current 0-5; space-padded if you want alignment ;)\r\n- It\'s confusing that we have `case()` in the second parametrize, but also `case` as a name in this first parametrize, as well as `response` and `expected_response`\r\n- Strictly we don\'t have all these roles in every server version, so we\'re overtesting; to avoid getting stuck in the details there, we could change the existing test ids to start with \'PreZulip<someversion>\' instead, ie. describe that this applies to a range of earlier versions which may have various possible user roles (and we handle them all).\r\n\r\nOne alternative which doesn\'t keep the test cases so separated, would be to drop this parametrize block and inline the roles into the dicts lower down, and do something similar to the autocomplete PR tests you updated (eg. iterate over roles in test body & compare the results).\r\n\r\nHowever, I\'d be happy with keeping the loop in this first parametrize as now, or in the test body, as long as:\r\n- the dict keys in cases are more descriptive than the 0-5 (inline role id/None, or a lookup string, as above)\r\n- if you keep both parametrize, avoid `case` and `response` due to the naming confusion and to improve the names generally :)\r\n- adjust the ids for early servers', 'comment_created': datetime.datetime(2022, 9, 4, 17, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962349118, 'comment_body': ""While I'm not fully convinced about the other parametrize block (as per another comment), I much prefer this layout for the server-settings + role->response :+1:\r\n\r\nThis is better than my suggestion of having all 3 server-settings but having one be None to indicate they weren't present."", 'comment_created': datetime.datetime(2022, 9, 4, 18, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962349789, 'comment_body': 'There also appears to be a case for edit_topic_policy=5 for everyone, which suggests we may need to handle guests differently?', 'comment_created': datetime.datetime(2022, 9, 4, 18, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962357219, 'comment_body': ""This tests the error messages, but based on the return value of actual code. This also doesn't test the return value explicitly. The expected_response values effectively encode both the return value and any error message I think? so we can test both.\r\n\r\nFor an example of why this matters, note that I could change the code to always return True and never report errors, and this test code would keep working! It would appear to be an internal refactor but change the behavior completely!"", 'comment_created': datetime.datetime(2022, 9, 4, 19, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962358609, 'comment_body': 'Minor: this function call no longer returns a raw server response, so we should rename this variable appropriately.', 'comment_created': datetime.datetime(2022, 9, 4, 19, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962358962, 'comment_body': ""It's good to see this in here now, though note:\r\n- you're testing for feature level None (before introduction of feature levels) or 11+, so not levels 1-10? You could correct that condition, or test for whether the value exists in initial_data.\r\n- is the default value in the 'else' or the value in the comment correct? We want the value before this parameter was added.\r\n- your test doesn't cover these two different branches; if it did you might have found these issues yourself :)"", 'comment_created': datetime.datetime(2022, 9, 4, 19, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962359451, 'comment_body': 'This conditional branch is also not tested.', 'comment_created': datetime.datetime(2022, 9, 4, 19, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962359696, 'comment_body': 'This only handles the resolving case branch in the code.', 'comment_created': datetime.datetime(2022, 9, 4, 19, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962360251, 'comment_body': ""If we're just calling update_stream_message, we don't need to set a return value if you're not depending on it in the code/test."", 'comment_created': datetime.datetime(2022, 9, 4, 19, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962360548, 'comment_body': ""This code currently does nothing in itself if the user_response is not True, so when you add other test cases, this doesn't need to be in them - or here. It needs to be set somewhere to work, of course, and if I later read the cases and wondered why it was always true, I might expect a comment to explain."", 'comment_created': datetime.datetime(2022, 9, 4, 19, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962360837, 'comment_body': ""To a caller of this message, and someone reading this test, we just pass in a stream_id and subject/topic. So it's clearer in a test like this if you start with variables/parameters for those, and then set or build the mocks from those where they're necessary."", 'comment_created': datetime.datetime(2022, 9, 4, 19, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962367286, 'comment_body': ""To clarify from the previous comments:\r\n- fetching the 'newest' is fine for now (ie. not first message) :+1:\r\n- you didn't comment on `0` vs `1`, though confusingly `0` doesn't work for num_before to give the right length of `messages`, so this is fine as `1` :+1:\r\n- we need to change 'newest' *string* to a compatible version for 2.1, as per my original comment in this comment thread"", 'comment_created': datetime.datetime(2022, 9, 4, 20, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962367713, 'comment_body': 'Now that the code is in separate commits, it should be straightforward to edit/update each commit and move the new code up, to be between update_stream_message and generate_all_emoji_data, to keep the send_* and update_* functions grouped together.', 'comment_created': datetime.datetime(2022, 9, 4, 20, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962367873, 'comment_body': 'Minor: this commit can go just before we start to use TOPIC_EDIT_POLICY.', 'comment_created': datetime.datetime(2022, 9, 4, 20, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962370609, 'comment_body': 'While it can feel useful to test in this way, I don\'t think we should include this assert:\r\n- it\'s really just a copy of the code\r\n- it means we can\'t refactor the implementation without also changing the test code!\r\n  - different anchor values may work (eg. 2.1 version vs recent - see other comment)\r\n  - maybe we won\'t use stream_dict (see another comment)\r\n  - perhaps we\'ll use caching? we might not always contact the server if we have an id\r\n- we write more and test more than we need to\r\n- needing to change the tests due to code changes has a maintenance overhead (later, or now!)\r\n\r\nIt\'s true that without this assert we can\'t confirm that we\'re contacting the server ""correctly"", but that\'s a separate test where we would connect to a real server, and ensure it does what we want. Or potentially have test code that mimics that.\r\n\r\nNote that in some situations, particularly if the code is not in a great state, then the only way to test can be like this. We also do this in the UI right now, since it can be difficult to test otherwise - we don\'t have obvious return values, and most things happen via side effects.', 'comment_created': datetime.datetime(2022, 9, 4, 21, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962370885, 'comment_body': 'Can we just use the stream_id here?', 'comment_created': datetime.datetime(2022, 9, 4, 21, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962371144, 'comment_body': ""We should test for the first part of this condition. I know you related that to a failure with the server, but I think this also applies if there are no messages in the narrow? That shouldn't easily happen here with the UI, but in principle we could have the popup open and then the messages get moved on the server before we choose to resolve."", 'comment_created': datetime.datetime(2022, 9, 4, 21, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962376941, 'comment_body': 'If this is accidentally not present in the cases, this will test with `None`, which is not a valid value for this.', 'comment_created': datetime.datetime(2022, 9, 4, 22, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962378711, 'comment_body': 'Note that this is not always in seconds, but can also be None (null).', 'comment_created': datetime.datetime(2022, 9, 4, 22, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 964221831, 'comment_body': ""Didn't we conclude that no-one could edit if the main setting was disabled?"", 'comment_created': datetime.datetime(2022, 9, 6, 22, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 964222644, 'comment_body': '> The expected_response values effectively encode both the return value and any error message I think?\r\n\r\nWhat you have for the dict values now does work fine, and is more explicit than what I had meant :+1: My point from an earlier comment was regarding the correlation between the error strings and return values, which might allow the test (dict) values to be simplified, at the expense of checking their values in the test function to extract the two meaning from that one value.', 'comment_created': datetime.datetime(2022, 9, 6, 22, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965062196, 'comment_body': ""My concern in the stream was whether it would be useful to let the caller know about the difference between these cases:\r\n- success, but too many messages (unexpectedly too many, what do we do? our function is not using the API correctly?)\r\n- success, but no messages (there are no messages in the narrow, ie. the topic is empty)\r\n- failure, so no data available (connection or other issue)\r\n\r\nHowever, these fuller test case define the current behavior of the function, and it appears 'safe' with the current later use of this function, so this is fine for now :+1:"", 'comment_created': datetime.datetime(2022, 9, 7, 16, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965075298, 'comment_body': ""1. Minor: The name in the data is `edit_topic_policy`, so it would be clearer if this was *slightly* renamed to match\r\n\r\n2. Doing another check here, the register() response doesn't seem to quite correspond to these?\r\n```\r\nThe policy for which users can edit topics of any message.\r\n    1 = members only\r\n    2 = admins only\r\n    3 = full members only\r\n    4 = moderators only\r\n    5 = everyone\r\n```\r\nAre 1 and 5 (that you just added) switched in your list and code?"", 'comment_created': datetime.datetime(2022, 9, 7, 16, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965080812, 'comment_body': 'This reads a lot better now :+1:', 'comment_created': datetime.datetime(2022, 9, 7, 16, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965090840, 'comment_body': 'Duplicate ID?', 'comment_created': datetime.datetime(2022, 9, 7, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965095551, 'comment_body': 'The edit topic policy value and the response appears consistent with the server documentation here (though not the test id?), so based on my other comment regarding TOPIC_EDIT_POLICY not matching documentation, does the code use it correctly?', 'comment_created': datetime.datetime(2022, 9, 7, 17, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965097537, 'comment_body': ""The first part of these strings don't all match the edit topic policy meanings?"", 'comment_created': datetime.datetime(2022, 9, 7, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971064014, 'comment_body': ""You changed the name of this function from an earlier version, and it'd be good to understand why.\r\n\r\nThe name now reads as if setting a specific resolve status, rather than toggling it. However, the code is definitely toggling still (and the function isn't setting one specific state, or receiving a 'new state' parameter) so the name doesn't seem as accurate."", 'comment_created': datetime.datetime(2022, 9, 14, 16, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971065772, 'comment_body': ""You've not addressed this point that the API can return null/None."", 'comment_created': datetime.datetime(2022, 9, 14, 16, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971068803, 'comment_body': 'We should be consistent, so using the constant here as we do above (or in neither case).', 'comment_created': datetime.datetime(2022, 9, 14, 16, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971081191, 'comment_body': 'These two lines are confusing, though not for the specific content in this test case.\r\n\r\nRather, since there is no return value from the function being tested. Instead you use the return_value string to refer to either the successful new topic name, or the error string, depending on the bool value. I understand it\'s the ""result"" of the function, so kind of a \'return value\' used for different purposes, and while the test will work, the naming is misleading.\r\n\r\nSo here instead of these parameters, you could have eg. expected_new_topic_name and expected_footer_error, and have both be the string expected in each case.\r\n\r\nFrom another test you may remember we sometimes use either None or an empty string to indicate a sort of \'not applicable\' in a given test case.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971086125, 'comment_body': ""This fixed value doesn't test when the server sets different values, if the value is missing (older servers), or if it's None (newer servers)."", 'comment_created': datetime.datetime(2022, 9, 14, 17, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971088068, 'comment_body': 'Adding test ids here may help, as we add more cases to handle community editing times/server-versions.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971088654, 'comment_body': ""I don't think this is fully tested yet, particularly since the range condition looks unchanged."", 'comment_created': datetime.datetime(2022, 9, 14, 17, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971090064, 'comment_body': 'See earlier comment in thread. I termed this rename minor, but naming is actually important in helping readers understand what is happening.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971098185, 'comment_body': 'Type should be inline.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971102705, 'comment_body': 'We could add minimal tests for this, such as the expected title (since it varies) and the expected action of the button.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971103771, 'comment_body': 'Misaligned.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971110879, 'comment_body': 'Unused. The variable further down is different, and this is not necessary.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971117778, 'comment_body': ""For misc numbers like this (and the +1 above), it's good to explain why in a comment."", 'comment_created': datetime.datetime(2022, 9, 14, 17, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971128389, 'comment_body': 'Does this need to be an attribute? I suppose it could help with a test.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1167341621, 'comment_body': 'Why is this test case being removed?\r\n\r\nGenerally I think the changes in this revised first commit are otherwise minor enough that we can drop them? The rest appear to be:\r\n- reformatting (strings)\r\n- errors prefixing with space\r\n- comment removed\r\n\r\nIn any case, if we do include parts in some way, since this would be a modification of the previous function, the commit title would need adjusting.', 'comment_created': datetime.datetime(2023, 4, 15, 0, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170263027, 'comment_body': ""This dict appears identical in each case, except for the time, so let's build it in the function to keep it simpler? You could test for the `None` return value case, but that may be simpler in a separate test."", 'comment_created': datetime.datetime(2023, 4, 18, 16, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170265510, 'comment_body': ""Is the timestamp within this time difference? The test case doesn't make it clear that's why we expect it to resolve."", 'comment_created': datetime.datetime(2023, 4, 18, 16, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170280012, 'comment_body': 'See https://github.com/zulip/zulip-terminal/pull/1235#discussion_r962358962\r\n\r\nFor server 2.1, this will set edit_time_limit to None.\r\nFor server 3.0 (or ZFL 11 at least), this will set edit_time_limit to the value in the server (None or the value).\r\nFor servers between those (eg. ZFL 10), this will set edit_limit to the default, ie. 86400 - this is an edge case\r\n\r\nMy impression is that the expected server behavior was\r\n- `old` 86400 <-- 2.1\r\n- `<11` 86400 <-- edge case\r\n- `>=11` 86400 or None (per server value) <-- 3.0+\r\n\r\nThis appears to generate\r\n- `old` None\r\n- `<11` 86400\r\n- `>=11` 86400 or None (per server value)\r\n\r\nIs this going to fail for 2.1? If so, could you update the test to fail first?', 'comment_created': datetime.datetime(2023, 4, 18, 16, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170301144, 'comment_body': 'See https://github.com/zulip/zulip-terminal/pull/1235#discussion_r962360251\r\n\r\nThis does not need a return value.', 'comment_created': datetime.datetime(2023, 4, 18, 16, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170306160, 'comment_body': 'This value is always `None`? Have we lost some test cases?', 'comment_created': datetime.datetime(2023, 4, 18, 16, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '2b30a1df2b21fe38ebb83b912c4e6327ee849be7', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0433e3070dbc2ed78b98b969c9f52a062d08d9f8', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595260d084ca6d1660c5cf609ba5a4674ca7e9ae', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ebc5f2dde2c3a9253b7c27c62d4290fd629e65', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2c0da2f7c67150088a56eb54d49b7dddc6498a', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8e2a849c4532b3154e4232568b26706c4fb9ec5', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8504cfc86ec73d4f9b94e76b06edd3349e62365d', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5

1031781101,[WIP] User list section/filters,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This WIP PR migrates earlier struture of ``RightColumnView`` in ``views.py`` to structure similar to ``LeftColumnView`` with toggling between ``StreamsView`` and ``TopicsView``.
This PR mainly intends to add new ``RecipientsView`` that displays recipients of the current narrow(``All_messages``, ``PMs``, ``Streams``, ``Topics`` etc) in the right column.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
This fixes #575
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/User.20list.20sections.2Ffilters.20.23T575
**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [ ] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [ ] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->
**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
This WIP PR only includes transition from earlier structure of ``RightColumnView`` to new structure based on ``LeftColumnView`` structure. It includes modifications to ``UserView``
**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->
This PR is motivated by PR #459
**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",False,1248,https://api.github.com/repos/zulip/zulip-terminal/pulls/1248,https://github.com/zulip/zulip-terminal/pull/1248,open,201,129,6,7,2,11,4,0,"[{'name': 'area: UI'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}]",2022-08-20 13:01:12+00:00,,0.0,,"[{'comment_id': 956322665, 'comment_body': 'This function looks quite different, with quite significant other changes, other than just for the move?', 'comment_created': datetime.datetime(2022, 8, 26, 18, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956338955, 'comment_body': ""This is a material change, not a refactor.\r\n\r\nWe don't appear to currently modify the log so we may not strictly need it, but it does not need removing here."", 'comment_created': datetime.datetime(2022, 8, 26, 18, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956420975, 'comment_body': ""This was just going to be a comment on this change, but it turned into a review of the refactoring as one comment.\r\n\r\nI think you've adapted this change fairly straight from a commit in #459 ?\r\nThe difference appears to be you've tried to keep users_view in RightColumnView, which I only just noticed, but shows up significantly in the move commit. It's fine to take this approach and may even make it clearer what's happening, once we simplify the refactoring.\r\n\r\nOne issue that jumps out at me is how here you rely upon the variable that is now a new member variable, but only used between these two functions - which I think was in the original commit, but that doesn't necessarily make it ideal :)\r\n\r\nThis commit functionally works, but you later move the build function to UsersView, without this function. That's part of the movement of code, but you drop the later conditional entirely at that point with no explanation. It also leaves the member variable being set, but then it doesn't get used. There's no guarantee that we break a feature by doing all of that, but it's the kind of thing I'd expect to see in a separate commit to remove it cleanly with reasons, if it was intentional.\r\n\r\nMore generally, if we want an end goal of a users_view in RightColumnView having very little code in other than setting up UsersView, and generally moving/changing as little code as possible in the moving-code refactor step(s) (like the next one) to make it clear that code has been moved and not subtly changed, then this commit needs to change and likely become multiple commits to prepare for the move. If I look at the diff of the next commit and what changes other than moving, this includes:\r\n- users_view (staying in RightColumnView) needs pre-adjusting to have\r\n  - no parameters\r\n  - no build_user_view (it moves away)\r\n- to continue to handle the conditional in this function\r\n  - consider what the original check does, depends on, and where it could go instead\r\n- UsersView.__init__\r\n  - change from controller to view (this was a previous separate #459 commit)\r\n  - users_btn_list default value? a required named value is clearer using `,*,name` and you could rename it at the same time if that made it clearer\r\n- UsersView parent class change?\r\n  - I'm not sure if this is too connected with the code move to separate, but it might be a small thing to split out? I'd need to try that to confirm\r\n- build_user_view\r\n  - depending how you restructure this given the above, you may be able to move it separately to the rest? (first?)\r\n  - I'd suggest an underscore prefix since it's used internally, and perhaps a more appropriate name like button_list_from_users?\r\n\r\nGenerally the diff will also be clearer to read if adjacent code that's moved doesn't get split, which is noticeable with the diff colorMoved option."", 'comment_created': datetime.datetime(2022, 8, 26, 20, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956483717, 'comment_body': 'I think we have similar names to the new one in the view, but we already have view.users_view too. This is duplicative and confusing to readers of the code, or this commit.\r\n\r\nApparently currently view.users_view is actually a RightColumnView, and seemingly ends up being a duplicate of right_panel. So another good refactor before this move commit, would be to remove view.users_view and adapt for its removal.', 'comment_created': datetime.datetime(2022, 8, 26, 22, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956484427, 'comment_body': ""Are you using self.user_v anywhere else?\r\n\r\nI'd suggest at least combining the last two lines."", 'comment_created': datetime.datetime(2022, 8, 26, 22, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956484738, 'comment_body': 'Should user_w be set every time the UsersView is updated?', 'comment_created': datetime.datetime(2022, 8, 26, 22, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956486295, 'comment_body': 'This was the kind of change I was referring to with the users_view vs users_w change, which could go into a separate commit to this, before the move commit(s).', 'comment_created': datetime.datetime(2022, 8, 26, 22, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956486851, 'comment_body': ""Either make this the current narrow, or one passed in; it's confusing to say current and then pass one in. The model tracks this already."", 'comment_created': datetime.datetime(2022, 8, 26, 22, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956499238, 'comment_body': ""This seems to be a nested loop over get_all_users data - which has the right data for output - with a nested loop over the limited subscriber ids to filter them out?\r\n\r\nIt would be clearer to read, and faster, if you used membership testing for the last part.\r\n\r\nI'm guessing this filtering part will be common to all narrows, and we might even want it external to this function?"", 'comment_created': datetime.datetime(2022, 8, 26, 23, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956501857, 'comment_body': ""What does `self.user_v` represent? I asked why you had it earlier, and you didn't need to have it be a member then I think. You could add it here and give it a more meaningful name.\r\n\r\nI'm confused over your use of it in update_recipients_view and show_user_view, though you don't seem to be using the former."", 'comment_created': datetime.datetime(2022, 8, 26, 23, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956503124, 'comment_body': 'This seems kinda OK here, though it feels like it should go higher up, eg. RightColumnView?', 'comment_created': datetime.datetime(2022, 8, 26, 23, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'ed3af14595eebd6e6a3d114248e2c2cf4dfea463', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd26d935c3da1cb4ffa30798a94d43800e47bbe6f', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c2849f4bbcf0e2f7ddf38f65187bf9d6dc3b0b', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f8fc481c93de3a3bbd35ade99748d202fe55a14', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0afbba1db554c9fc2cc4b294e7e0ee585f0950da', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a973e33f4da1538c7e92fddf91559f12b8d84ed1', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa953b873894a6123eb377f974076d314748ef36', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
899334583,ui/boxes: Improve stream sorting for stream typeahead in compose box.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR improves stream sorting for stream typeahead in compose box stream results in footer in the following order -

1) current stream (if matching)
2) pinned and unmuted
3) unpinned and unmuted
4) pinned and muted
5) unpinned and muted

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Improve.20stream.20sorting.20for.20stream.20typeahead.20in.20compose.20box.2E

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [ ] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->
Passing all lint tests.

``test_generic_autocomplete_streams`` test to be updated in ``test_boxes.py``
<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
Stream sorting for stream typeahead before -
![image](https://user-images.githubusercontent.com/53873549/162564960-639f268c-b160-426d-8ab6-e4309806a59a.png)

Stream sorting for stream typeahead after -
![image](https://user-images.githubusercontent.com/53873549/162964508-31b452df-8ffd-4d3d-b4e7-a847d8f92f6c.png)",True,1186,https://api.github.com/repos/zulip/zulip-terminal/pulls/1186,https://github.com/zulip/zulip-terminal/pull/1186,closed,145,6,2,4,5,57,2,0,"[{'name': 'size: XL'}, {'name': 'area: autocomplete'}]",2022-04-04 18:14:08+00:00,2022-08-04 00:59:56+00:00,10478748.0,"121 days, 6:45:48","[{'comment_id': 867253763, 'comment_body': ""You can express this as a comprehension, possibly in one line. \r\n\r\nWe could also consider caching the name in our data-structures in model, and update it if the stream name changes (we don't handle those events right now, I think)"", 'comment_created': datetime.datetime(2022, 5, 6, 22, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867261252, 'comment_body': ""This is confusing; you're looping through the initial matched data and calling them `muted_stream`s already?"", 'comment_created': datetime.datetime(2022, 5, 6, 23, 12, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867263046, 'comment_body': ""You keep referring to `matched_data[1]` in the new code. It would be clearer if you unpacked the original match result into name(s) - possibly explicitly discarding one part if you're not using it - and then reconstruct the tuple here like you are doing, but with that name."", 'comment_created': datetime.datetime(2022, 5, 6, 23, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867263219, 'comment_body': ""What's happening here? You didn't mention test_generic_autocomplete_stream_and_topic in the stream."", 'comment_created': datetime.datetime(2022, 5, 6, 23, 20, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867297533, 'comment_body': 'There is a stream_dict fixture that should be suitable for this.', 'comment_created': datetime.datetime(2022, 5, 7, 3, 40, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867297796, 'comment_body': ""You didn't mention test_generic_autocomplete_set_footer in the stream either, but this is (partially) commented?\r\n\r\nDid you miss adding the web public stream?"", 'comment_created': datetime.datetime(2022, 5, 7, 3, 43, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 867298092, 'comment_body': ""I'm maybe missing something, but you're not using this parameter?"", 'comment_created': datetime.datetime(2022, 5, 7, 3, 46, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868230223, 'comment_body': 'I have added web public stream as well in latest commit.', 'comment_created': datetime.datetime(2022, 5, 9, 17, 6, 20, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 868604385, 'comment_body': ""This is clearer, but you're completely reconstructing matched_stream_typeaheads at the end anyhow, though assigning to the same name.\r\n\r\nWhat I meant by explicitly discarding the unused data here is assigning to `_`. That also makes it clearer that the name/variable is only used at the end and isn't incidentally used between this point and there."", 'comment_created': datetime.datetime(2022, 5, 9, 23, 48, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868607016, 'comment_body': ""While naming things can be clearer, I'd be inclined to insert muted_stream_ids inline into the comprehension since it is not used elsewhere.\r\n(we should likely wrap the model data in an accessor function at some point, or name it better anyhow)"", 'comment_created': datetime.datetime(2022, 5, 9, 23, 52, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868613466, 'comment_body': ""It can be convenient to reuse names, but this doesn't document the code as accurately - these are the matching muted stream names, rather than all of them, right?\r\n\r\nTo make this clearer you could of course simply rename this, but I suspect you can combine this with the previous comprehension? You're losing the previous data after this point anyhow."", 'comment_created': datetime.datetime(2022, 5, 9, 23, 57, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868651044, 'comment_body': ""This is a different approach to before - iterating through muted stream list, rather than matching list. For naming, my point stands though - name the loop variable to match what you're looping through, which is now eg muted_stream :)\r\n\r\nWhile you're not changing the length of the list, I'm wary that here (and before) you're modifying the order of the list while cycling through it.\r\n\r\nYou've introduced the pinned_streams variable - is this necessary? Was this sorted previously, or only with the previous loop style?"", 'comment_created': datetime.datetime(2022, 5, 10, 0, 27, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868699236, 'comment_body': 'Why are these existing values changing, with no mutes?', 'comment_created': datetime.datetime(2022, 5, 10, 1, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868700197, 'comment_body': 'I was referring to this commented out code, not the other test cases, which I think you added and were referring to just now?', 'comment_created': datetime.datetime(2022, 5, 10, 1, 12, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868704275, 'comment_body': 'To avoid this adding lots of empty data and having lines spill-over, as well as improving the self-documenting of the test cases, I\'m wondering if this would be clearer as a dict which might be:\r\n```\r\n{}  # no pins or mutes\r\n{""pinned"": [...]}  # equivalent to to_pin=[...]\r\n{""muted"": {...}}  # equivalent to to_mute={...}\r\n```\r\n\r\nIf so, this logic could be a quick refactor commit before this with data and logic adjusted for just to_pin there, and then extended in this commit.', 'comment_created': datetime.datetime(2022, 5, 10, 1, 17, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 868753628, 'comment_body': '- When I was writing more test cases, I found that ``muted_stream_ids`` are received in ascending order and not the order of ``left_streams_bar`` (pinned_muted_id, unpinned_muted_id). \r\n- Therefore had to arrange ``muted_stream_names`` with same order as ``matched_streams`` and then remove ``pinned_muted_streams``, add to start of ``muted_stream_names``.\r\n-  At last, extend it to ``matched_streams`` after removing common streams.', 'comment_created': datetime.datetime(2022, 5, 10, 2, 22, 18, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 869692470, 'comment_body': 'Perhaps something like the following? This will be fine in the first commit, even though we\'re only handling pinning there.\r\n```suggestion\r\n        ""text, state, required_typeahead, stream_categories"",\r\n```\r\n\r\n', 'comment_created': datetime.datetime(2022, 5, 10, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869693067, 'comment_body': ""The idea is that you'd be able to replace this with\r\n```suggestion\r\n                {},\r\n```\r\n...so the block would likely be able to stay very compact.\r\n\r\nYou already do this with muting :)"", 'comment_created': datetime.datetime(2022, 5, 10, 21, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869695988, 'comment_body': 'This is what I had in mind, but with a simple conditional eg. maybe something like this:\r\n```suggestion\r\n        streams_to_pin = [\r\n            {""name"": stream_name} for stream_name in pinned_or_muted_streams[""pinned""]\r\n        ] if ""pinned"" in pinned_or_muted_streams else []\r\n```\r\nThis allows the simpler data for the test cases I indicate above.\r\n(this doesn\'t take into account the possible name change)', 'comment_created': datetime.datetime(2022, 5, 10, 21, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869699982, 'comment_body': 'Right - this is the same logic as I suggest above, though since you don\'t need the more complex comprehension then a simpler approach may work:\r\n```suggestion\r\n        write_box.model.muted_streams = pinned_or_muted_streams.get(""muted"", set())\r\n```\r\n(note that `{}` is always a dict, not a set, though I suppose this is working since the name is equivalent to `.keys()`)', 'comment_created': datetime.datetime(2022, 5, 10, 21, 38, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869703904, 'comment_body': 'This looks good - do you understand the error message you were getting now?', 'comment_created': datetime.datetime(2022, 5, 10, 21, 45, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869711297, 'comment_body': ""You didn't answer why this had to change before. Looking again, this is since we're now prioritizing stream id 1?\r\n\r\nWe should likely leave these test cases as they are, eg. when there is no active stream (for some definition of that)."", 'comment_created': datetime.datetime(2022, 5, 10, 21, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869712355, 'comment_body': 'This fails for private messages, and actually causes a crash. There is an outstanding question of what should be the stream to use here - narrow? compose? recent? neither?', 'comment_created': datetime.datetime(2022, 5, 10, 22, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869805085, 'comment_body': 'Try removing the comma after these last entries, and black should shrink these back to the original layout :)', 'comment_created': datetime.datetime(2022, 5, 11, 1, 57, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869805219, 'comment_body': ""This isn't reflected in the commit title :)"", 'comment_created': datetime.datetime(2022, 5, 11, 1, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869805582, 'comment_body': 'Maybe try removing this `,` too?', 'comment_created': datetime.datetime(2022, 5, 11, 1, 58, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873084208, 'comment_body': 'This is an extra test case, which is a separate type of change so belongs in a different commit. There may be other cases we could add too; I think I only added a few when I added this feature.', 'comment_created': datetime.datetime(2022, 5, 14, 23, 13, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873085060, 'comment_body': 'This is another web public addition - again, not bad, just not in the scope of this refactor.\r\n\r\nAlso, the pinned streams are different to the previous case, which I assume is not intended.', 'comment_created': datetime.datetime(2022, 5, 14, 23, 26, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873085218, 'comment_body': ""Worth leaving in? Though arguably it becomes ` or muted, or...` as we add more possibilities. So maybe 'no streams in categories' or similar?"", 'comment_created': datetime.datetime(2022, 5, 14, 23, 29, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873087129, 'comment_body': ""There's a gap here I wasn't expecting - these are out of order?\r\n\r\nOthers further down are too."", 'comment_created': datetime.datetime(2022, 5, 14, 23, 55, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873087791, 'comment_body': 'Your tests being out of order makes this harder to verify manually, but this results in muted streams being out of order - reversed?\r\n\r\nCan you just drop this block?', 'comment_created': datetime.datetime(2022, 5, 15, 0, 6, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873092492, 'comment_body': 'You seem to have added these comments? Without them the test cases fit on one line still?', 'comment_created': datetime.datetime(2022, 5, 15, 1, 17, 41, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873092579, 'comment_body': 'I think it may be clearer if we remove these comments in a separate commit (maybe when adding the web public cases?).\r\n\r\nHowever, see my general review point too.', 'comment_created': datetime.datetime(2022, 5, 15, 1, 18, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895213349, 'comment_body': ""You've not addressed this."", 'comment_created': datetime.datetime(2022, 6, 12, 17, 54, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895213427, 'comment_body': ""You've not addressed this yet either."", 'comment_created': datetime.datetime(2022, 6, 12, 17, 55, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895213616, 'comment_body': ""Adding web public streams after the next refactor will likely make this mistake less likely, though it would be fine and simpler to add it first (so the later commits don't need adjusting, since this commit would just be split)."", 'comment_created': datetime.datetime(2022, 6, 12, 17, 56, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895215391, 'comment_body': 'I think the state should have been `int`, not `Optional[int]`?', 'comment_created': datetime.datetime(2022, 6, 12, 18, 13, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895215500, 'comment_body': ""If you're using both values in a dict, it's clearer to unpack both via `.items()`.\r\n\r\nThat said, having seen a failure here, outputting the error more clearly here may be useful. For example, it would be good to see which state is failing. In addition, you might run every input state and then do an assert comparing all the outputs with what's expected, which would allow visual comparison between them if there's a failure."", 'comment_created': datetime.datetime(2022, 6, 12, 18, 14, 31, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 895243807, 'comment_body': 'These tests all fail in `tools/check-branch`.', 'comment_created': datetime.datetime(2022, 6, 12, 22, 50, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 896667390, 'comment_body': ""I haven't followed this PR a lot but I feel that all of this code should belong inside `match_stream`. Is there any reason for not doing so? We can send in the model variables as arguments into the function and process everything there."", 'comment_created': datetime.datetime(2022, 6, 14, 10, 48, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 896670573, 'comment_body': '@neiljp On a design level, I wanted to ask why, in the model, we treat `muted_streams` different from `(un)pinned_streams`, i.e., different data types.', 'comment_created': datetime.datetime(2022, 6, 14, 10, 52, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 896734018, 'comment_body': ""@Rohitth007  ``match_stream`` is used for stream sorting at many places in ZT such as ``update_streams`` in ``views.py`` but as discussed in  [zulip terminal > Improve stream typeahead sorting in compose box](https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Improve.20stream.20typeahead.20sorting.20in.20compose.20box.20.23T1186), we didn't want to change stream sorting in ``leftbar stream search``"", 'comment_created': datetime.datetime(2022, 6, 14, 12, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 896735619, 'comment_body': 'And about data type of ``muted_streams``, I agree with using ``stream_names`` instead of ``stream_ids`` like we have implemented for ``(un)pinned_streams``', 'comment_created': datetime.datetime(2022, 6, 14, 12, 9, 30, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 896917934, 'comment_body': '3 tests started failing in ``test_helper.py`` after I rebased my current branch with ``upstream/main``. Test cases are as follows -\r\n* ``test_download_media``\r\n* ``test_open_media[0-error0]``\r\n* ``test_open_media[1-error1]``', 'comment_created': datetime.datetime(2022, 6, 14, 14, 43, 55, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 897069083, 'comment_body': ""Oh I see, but a boolean like `prioritize_unmuted` might help? Since `match_stream` also does some sorting apart from matching, it's better to place all sorting code together.\r\n* If False, it'll return pinned matches then unpinned matches.\r\n* If True, it'll return pinned unmuted matches, unpinned unmuted matches, pinned muted matches then unpinned muted matches."", 'comment_created': datetime.datetime(2022, 6, 14, 16, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 901039336, 'comment_body': ""This line has dropped 'Stream 1'?"", 'comment_created': datetime.datetime(2022, 6, 19, 2, 55, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905653500, 'comment_body': ""Minor: Adding behavior, even if just in the tests, isn't really a refactor."", 'comment_created': datetime.datetime(2022, 6, 24, 1, 48, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905658997, 'comment_body': ""In the commit introducing stream_categories, note that while details can be useful, in the commit text it's more useful to write what you can't easily include in the commit (code) itself, such as why the change is useful/important.\r\n\r\nSome of that why might be noting how it might be extended, but until the extra parameters are added, it's not important to refer to them by name - otherwise you couple this commit text to how it *will* be implemented, and either this commit text needs updating later (though it might be merged first!), or else the later code 'must' be named appropriately later (which one cannot always guarantee). Basically, it can be useful to describe what else it might be applied to, or perhaps an example, but otherwise focus the commit text on *this* commit.\r\n\r\nI may have given an impression that something wasn't in the commit text which led to this; I believe I was referring to how the commit text didn't describe what this commit was doing (re switching to stream_categories)."", 'comment_created': datetime.datetime(2022, 6, 24, 2, 4, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905667103, 'comment_body': ""I haven't seen these failures locally after rebasing, only the new tests you added here. Do you still get the errors you saw? (Was that locally or CI, ie. GitHub actions?)\r\n\r\nTo clarify, it seems that it's one test from each group, perhaps, or at least not an entire case that's failing. While the assert-in-a-loop does detect the error, as I mentioned previously it may be more useful to show the failing pairs all together, which might be straightforward if you eg. build a dict and compare it to that expected?\r\n\r\nThese new tests apply to the new code, so this should go with the previous commit that changed/added the functionality."", 'comment_created': datetime.datetime(2022, 6, 24, 2, 27, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905671272, 'comment_body': ""In this commit where you add the test cases, you're not connecting the muted elements to the muted_streams data."", 'comment_created': datetime.datetime(2022, 6, 24, 2, 39, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905675907, 'comment_body': ""@Rohitth007 I agree there are multiple ways of writing the code, and we may even update the stream order later - or add options - but for now I'm happy for this to be focused on the functionality and ensuring this behaves as expected by using the new tests (and test structure). Once we have tests, we can refactor more safely. I think @srdeotarse already rewrote the code, and we still may need to adjust the algorithm."", 'comment_created': datetime.datetime(2022, 6, 24, 2, 51, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905679074, 'comment_body': 'Re muted_streams vs (un)pinned_streams, these are data-structures used for different purposes right now. The former is simply to know if a stream is muted, while the latter is designed for the UI (historically).\r\n\r\nRegarding the tests, I would favor having names in the test cases to make them more readable, independently of the data in the model. That is eg. `{""pinned"": {""Stream 1""}, ""muted"": {""Secret Stream""}}` is more readable than the latter being an int.', 'comment_created': datetime.datetime(2022, 6, 24, 3, 1, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 905827938, 'comment_body': ""The reason for having it inside `match_stream` is it would simplify the logic by a lot. Here we are throwing away the matched typeaheads, resorting an already sorted list given by `match_streams`  and then recreating new matched typeaheads. If this is done inside `match_stream` then it would barely take 5-6 lines and it wouldn't affect any of the tests.\r\n\r\nAnother reason is we would barely have to do any work to extend this feature to the stream panel."", 'comment_created': datetime.datetime(2022, 6, 24, 8, 11, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 922807450, 'comment_body': 'I have connected muted elements to muted_streams data in 5th commit of adding some muted test cases, right after we have added stream sorting based on muted streams.', 'comment_created': datetime.datetime(2022, 7, 17, 10, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 933937797, 'comment_body': ""Yes, it's there now, but it had disappeared in the previous iteration it seemed."", 'comment_created': datetime.datetime(2022, 7, 31, 7, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 934050288, 'comment_body': 'This change appears to be in the wrong place.', 'comment_created': datetime.datetime(2022, 7, 31, 22, 51, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 936188260, 'comment_body': ""@Rohitth007 I just had a final look at this, and given the functionality I'm going to go with the current style for now. To reiterate my thoughts on the implementation here:\r\n- while generally I'm in favor of synchronizing the behavior of the stream filter and autocomplete, as per eg. the current_stream behavior we may want to have differences - including as here\r\n- If we're adding functionality, we want to add/update the tests for this behavior somewhere, and I think we benefit from defining autocomplete expectations, particularly since that could always differ based on current_stream now, and this is the only behavior changed right now\r\n- if we later change the implementation to something like you propose, these new tests should still pass for autocomplete"", 'comment_created': datetime.datetime(2022, 8, 3, 2, 49, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'f2a066996621fa19b02baf2c70772740bd5d4b1a', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf98899dc2cb1e29996ac10cea33cbad24bae243', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '812a473fbb83fda6a2443bd85210a25ee1ea0e7f', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd8e5538b2e83c85af9d9e017ae52ca248b2f4945', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
913128563,hotkeys: Add linting for hotkeys.,"Fixes #1209

<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->
Adds GitHub Actions and changes to ``lint-all`` for linting ``generate_hotkeys.py``

**What does this PR do?**  <!-- Overall description goes here -->

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",True,1210,https://api.github.com/repos/zulip/zulip-terminal/pulls/1210,https://github.com/zulip/zulip-terminal/pull/1210,closed,153,16,3,11,6,89,3,0,"[{'name': 'area: hotkeys'}, {'name': 'size: XL'}, {'name': 'area: infrastructure'}]",2022-04-19 13:29:24+00:00,2022-08-21 02:39:16+00:00,10674592.0,"123 days, 13:09:52","[{'comment_id': 866528868, 'comment_body': 'I suppose duplicate checking need not be done for each `help_text` inside the for loop?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 37, 15, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 866529927, 'comment_body': 'Continuing the previous comment, if `for key in keys_list` can be pulled out of the for loop then I suppose the above can also be combined into the for loop below?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 866530545, 'comment_body': 'Any reason for keeping the above comments?', 'comment_created': datetime.datetime(2022, 5, 6, 6, 40, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 867437429, 'comment_body': 'I meant to say, if we can move duplicate checking to the end, then we can do everything in 1 for loop itself.', 'comment_created': datetime.datetime(2022, 5, 8, 5, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 867437706, 'comment_body': ""Here, do you mean to `extend` instead of `append`? \r\nAs appending would not check if, `q` for example is also in `['ctrl a', 'q']`"", 'comment_created': datetime.datetime(2022, 5, 8, 5, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 867439454, 'comment_body': 'I will change it to extend', 'comment_created': datetime.datetime(2022, 5, 8, 5, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 867452443, 'comment_body': 'Note that you have to change the rest of the `key_list` logic as well.', 'comment_created': datetime.datetime(2022, 5, 8, 8, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 869790450, 'comment_body': ""What's the motivation for this refactoring?"", 'comment_created': datetime.datetime(2022, 5, 11, 1, 16, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869792052, 'comment_body': 'If this is just for checking duplicates, please name it more specifically than this.', 'comment_created': datetime.datetime(2022, 5, 11, 1, 21, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869792210, 'comment_body': 'This may be simpler with a comprehension?', 'comment_created': datetime.datetime(2022, 5, 11, 1, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 869792335, 'comment_body': 'Exit with what value?', 'comment_created': datetime.datetime(2022, 5, 11, 1, 22, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 870108499, 'comment_body': 'GitHub Actions cannot import from ``zulipterminal.config.keys`` thus the refactoring of imports.', 'comment_created': datetime.datetime(2022, 5, 11, 9, 56, 37, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 871440690, 'comment_body': 'You can even bring it out of the for loop to do it just the once.', 'comment_created': datetime.datetime(2022, 5, 12, 14, 18, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 871442614, 'comment_body': ""Not sure I like the new name. Can't think of a better one right now though."", 'comment_created': datetime.datetime(2022, 5, 12, 14, 20, 24, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 871456950, 'comment_body': 'Sure, I will bring that comprehension out of the for loop.', 'comment_created': datetime.datetime(2022, 5, 12, 14, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 873096697, 'comment_body': ""This kind of explanation belongs in the commit text, and possibly a comment in the file.\r\n\r\nUnless I missed it, you didn't discuss what error you may have had and why you took this approach.\r\n\r\nIt's good you separated this out into another commit, since it's clearer it's a refactor."", 'comment_created': datetime.datetime(2022, 5, 15, 1, 49, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889497728, 'comment_body': 'What is the reasoning here for using the second `dict` inside the main `dict`?\r\nLater `categories[action]` is anyway converted into a list of tuples using `items()`.\r\nSo why not just store it as a list of tuples in the first place?\r\n\r\nAnother point here is, you are looping through the large ~70 `KEY_BINDINGS` for every category (6). Instead why not try using a `defaultdict(list)` and run through `KEY_BINDINGS` only once?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498107, 'comment_body': ""Here why do we want to generate the `ORIGINAL_OUTPUT_FILE`, i.e., not exit, even though it's not in sync?"", 'comment_created': datetime.datetime(2022, 6, 4, 7, 22, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498291, 'comment_body': 'I believe this can be pulled out of the inner for loop?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 24, 28, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498692, 'comment_body': ""I'm not aware of the style here. Is it basically everything except numbers and full stop?\r\n(as the above doesn't have all special characters?)"", 'comment_created': datetime.datetime(2022, 6, 4, 7, 28, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498860, 'comment_body': 'You can also use `re.compile` once before the for loop to speed up the regex matching.', 'comment_created': datetime.datetime(2022, 6, 4, 7, 30, 57, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889498970, 'comment_body': 'We might want to add ""detected."" at the end of this print statement?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889499615, 'comment_body': 'This help text is a bit hard to read and understand. Maybe something like `""Lint hotkeys.md for key description style and key duplication""`?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 39, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889499914, 'comment_body': 'Does `""--lint-only""` sound better here than `""--check-only""`?', 'comment_created': datetime.datetime(2022, 6, 4, 7, 43, 10, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 889647104, 'comment_body': ""`isort` uses `--check-only`, which is where I heard it before I expect. I'm not sure what `zulint` uses in the main project, if there's a similar flag."", 'comment_created': datetime.datetime(2022, 6, 5, 4, 30, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889651284, 'comment_body': ""This isn't a refactor here, as you're changing the behavior.\r\n\r\nAlso, this is now never going to update the original file automatically, which it did before?\r\n\r\nMy original thought was to perhaps extract the generation code under this line into a function that would write to the appropriate file object, which you could do in a refactor commit first. However, while it is more explicit doing a direct file comparison, we might instead compare the contents of the existing file with the string that the generation function would write - so the extracted function would instead just generate a string?"", 'comment_created': datetime.datetime(2022, 6, 5, 5, 30, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889737090, 'comment_body': 'Best to use a named argument here for clarity.', 'comment_created': datetime.datetime(2022, 6, 5, 21, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 889739792, 'comment_body': ""This symbol indicates there's a missing newline at the end of the file."", 'comment_created': datetime.datetime(2022, 6, 5, 21, 36, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 892043013, 'comment_body': 'Why the change here?', 'comment_created': datetime.datetime(2022, 6, 8, 8, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 892050303, 'comment_body': ""Let's try an see if we can simplify the diffs here.\r\nWhy not first create the functions in their original place in one commit. Then change the ordering on those functions in another commit. We can squash them later while merging, if needed.\r\n\r\nAlso, I don't think we need this and the below comment now that they are pretty obvious?"", 'comment_created': datetime.datetime(2022, 6, 8, 8, 7, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 892060181, 'comment_body': 'Here as well, we can keep the original style of:\r\n```python\r\nhotkeys_file_string += (\r\n    f""## {HELP_CATEGORIES[action]}\\n""\r\n    ""|Command|Key Combination|\\n""\r\n    ""| :--- | :---: |\\n""\r\n)\r\n```\r\nwhich I\'m hoping would improve the diffs, if `categories = read_help_categories()` was inserted inside `with open` in the previous commit.', 'comment_created': datetime.datetime(2022, 6, 8, 8, 17, 32, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 892267728, 'comment_body': ""According to your suggestion of using a defaultdict(list) for categories, and loping through 70 ``KEY_BINDINGS`` at once, order of categories in defaultdict is according to order of keys in ``config/keys`` which don't follow the order of ``HELP_CATEGORIES``. Therefore, I have used the ``HELP_CATEGORIES`` ordering."", 'comment_created': datetime.datetime(2022, 6, 8, 11, 56, 53, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 892268995, 'comment_body': 'Sure, I will remove the comments and split the ordering of functions into 2 commits.', 'comment_created': datetime.datetime(2022, 6, 8, 11, 58, 21, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 892446546, 'comment_body': 'Here, the `various_key_combinations` is printed with the `kbd` tags. I think it would be more readable if it is written without the tags.', 'comment_created': datetime.datetime(2022, 6, 8, 14, 20, 32, tzinfo=datetime.timezone.utc), 'commenter': 'mounilKshah', 'type': 'User'}, {'comment_id': 893477453, 'comment_body': 'Aah, I see. Makes sense.', 'comment_created': datetime.datetime(2022, 6, 9, 13, 4, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 893483797, 'comment_body': 'The question above was to see if a regex like `""^[^\\d.]*$""` would be more suitable.\r\nI\'d wait for @neiljp to clarify the description style here.', 'comment_created': datetime.datetime(2022, 6, 9, 13, 10, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 893598273, 'comment_body': 'For the ``help_text`` description style, text string except ``.`` and some ``special characters`` are working for now. But, exactly what ``special_characters`` should be allowed that needs some discussion. ', 'comment_created': datetime.datetime(2022, 6, 9, 14, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 894778735, 'comment_body': 'Earlier also listing ``categories`` into dict was outside ``with open``. So I think diff is clearer if ``categories = read_help_categories`` is outside ``with open``', 'comment_created': datetime.datetime(2022, 6, 10, 18, 0, 32, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 894984569, 'comment_body': ""Here don't move `OUTPUT_FILE` and `SCRIPT_NAME` to the top of the functions, then look at the diffs.\r\nYou can also move the creation of `various_key_combination()` into another commit. That will make the diffs even more easier to read."", 'comment_created': datetime.datetime(2022, 6, 11, 6, 26, 17, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 894984878, 'comment_body': ""Here, I meant all such multi-line `write()`'s. You missed atleast one at the top.\r\nRe categories, I meant change the position in the previous commit. Try with and without this and see the difference."", 'comment_created': datetime.datetime(2022, 6, 11, 6, 30, 18, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908117600, 'comment_body': 'Use the same multiline format as before here as well', 'comment_created': datetime.datetime(2022, 6, 28, 7, 11, 46, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908120300, 'comment_body': 'This can go into a different commit as `get_hotkeys_file_string` is a refactor while `compare_hotkeys_file` is a new feature.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 14, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908125929, 'comment_body': ""Maybe it's better to add this function in one commit then add `--check-only` and main changes in another commit."", 'comment_created': datetime.datetime(2022, 6, 28, 7, 20, 53, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908128349, 'comment_body': 'Maybe bring this up on the stream then.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 23, 29, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908131104, 'comment_body': 'Did you mean `hotkeys.md` here?', 'comment_created': datetime.datetime(2022, 6, 28, 7, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 908138667, 'comment_body': 'Here as well.', 'comment_created': datetime.datetime(2022, 6, 28, 7, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 910606184, 'comment_body': 'Using `hotkeys.md` instead of `Hot Keys` makes sense in both this and the below print statements as well.', 'comment_created': datetime.datetime(2022, 6, 30, 4, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918568435, 'comment_body': 'This will give a different behaviour. Here, I meant either create the `lint_hotkeys_file()` function in 1 commit and argparse and check-only related changes in another or do it the other way round. This is because there is a lot happening in this commit.', 'comment_created': datetime.datetime(2022, 7, 12, 5, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918571355, 'comment_body': ""After resolving errors you are supposed to run linting again to check if there are no more errors. (We want to avoid juggling between 2 commands.)\r\nOnce this says `no linting errors`, we are anyway comparing the 2 files where it will say `the files are not in sync` if that's the case."", 'comment_created': datetime.datetime(2022, 7, 12, 5, 49, 38, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918571929, 'comment_body': 'Here if the files are not in sync then print `Run generate_hotkeys....` and exit with exit_flag = 1', 'comment_created': datetime.datetime(2022, 7, 12, 5, 50, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918578054, 'comment_body': ""Re this commit text, you shouldn't be to refer to the previous git history because once it's merged it's like it never existed so it wouldn't make sense unless it's for the reviewer. You should mostly talk about what this commit is doing."", 'comment_created': datetime.datetime(2022, 7, 12, 6, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 918579789, 'comment_body': 'Here you can do both replaces one after the other, like so.\r\n`str.replace().replace()`', 'comment_created': datetime.datetime(2022, 7, 12, 6, 6, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 919136336, 'comment_body': 'I should add ``Run generate_hotkeys....`` in ``compare_hotkeys_file`` function if files are not in sync, as we need to instruct running the command every time hot keys are not in sync.', 'comment_created': datetime.datetime(2022, 7, 12, 15, 51, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 920765936, 'comment_body': 'But then when you run `./tootls/generate_hotkeys` it will show `Run ./tootls/generate_hotkeys`.', 'comment_created': datetime.datetime(2022, 7, 14, 5, 32, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 920767414, 'comment_body': 'I think you undid whatever you did here? ', 'comment_created': datetime.datetime(2022, 7, 14, 5, 36, 2, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 920769725, 'comment_body': 'Maybe just say, ""Rerun this command after resolving errors in config/keys.py"".\r\n\r\nAlso the thing is we are effectively linting the markdown file but we are doing it my linting keys.py. So it might confuse the user as to what they should edit if says ""to lint hotkeys.md""', 'comment_created': datetime.datetime(2022, 7, 14, 5, 40, 54, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 921804273, 'comment_body': 'Oh black took effect. Why not just use `key_combinations_list` in the print statement instead of undoing whatever was done in the `various_key_combinations()` function.  (What does `"" / "".join(key_combinations_list)` look like?)', 'comment_created': datetime.datetime(2022, 7, 15, 4, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 921804521, 'comment_body': ""Also I don't like that fact that `various_key_combinations` is both a variable name and a function name."", 'comment_created': datetime.datetime(2022, 7, 15, 4, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 922688348, 'comment_body': 'I have used ``"" / "".join(key_combinations_list)`` in my recent commit, it shows key combinations like ``ctrl _`` instead of earlier ``ctrl + _`` and also for two key combinations it shows something like ``up / ctrl p``.', 'comment_created': datetime.datetime(2022, 7, 16, 14, 52, 44, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 922830429, 'comment_body': 'I think it makes sense to show it this way as we are anyway asking them to edit config/keys.py (`ctlr _`) and not the markdown file (`ctrl + _`). The other one might be confusing if we show markdown and expect them to edit python.', 'comment_created': datetime.datetime(2022, 7, 17, 13, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924126666, 'comment_body': ""I don't think you have updated this, i.e., removing this from the `compare` function and adding it here."", 'comment_created': datetime.datetime(2022, 7, 19, 6, 55, 27, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924130315, 'comment_body': 'you could probably squash this with the linting commit.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924132714, 'comment_body': 'You can probably split this commit into 2 since a lot is happening here. One for checking description style and the other for checking key combination duplication.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 3, 36, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 931053869, 'comment_body': 'This probably belongs in the next commit?', 'comment_created': datetime.datetime(2022, 7, 27, 13, 19, 43, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 931061074, 'comment_body': 'Lets just say `No hotkey linting errors`? As it maybe confusing if there are `no errors in hotkeys.md` but you are still asking me to `update hotkeys.md`', 'comment_created': datetime.datetime(2022, 7, 27, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 948637419, 'comment_body': ""If this was anything other than docstring, it would have been reformatted by black, but this is one thing black won't do for us, so we need to wrap it (and others) sensibly ourselves."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 26, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948638994, 'comment_body': ""The commit title isn't accurate - yes, you're refactoring into functions, but you're *also* refactoring it to generate the text first and write it at the end.\r\n\r\nI would suggest putting that second refactor (into string-then-write form) first in a commit before this, then have this commit but with the extraction of the function for the writing of the file at the same time (which you have in the last refactor commit right now)."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 30, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948640161, 'comment_body': ""I'm not really convinced about the benefit of breaking out this small function. We can leave it in for now and drop the commit later if that's the case."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 33, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948643540, 'comment_body': 'The return value is not used here. Is that intentional?', 'comment_created': datetime.datetime(2022, 8, 18, 4, 42, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948648269, 'comment_body': ""I would expect a little more detail as to what it does (and also by default).\r\n\r\nThe linting is only with the 'check only' option after all."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 54, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948648732, 'comment_body': ""Unless you plan on calling `main` as `main()`, then I'm not sure why you have a default argument here."", 'comment_created': datetime.datetime(2022, 8, 18, 4, 55, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948692861, 'comment_body': ""If a function returns a bool then it's often useful to name it in a way that reads well in a conditional context. While you've not used it above - though maybe you could avoid writing the file if they're the same? - we'd currently have:\r\n```python3\r\nif compare_hotkeys_file(some_string):\r\n    ...\r\n```\r\nCompare that to something like: (if I understand the code)\r\n```python3\r\nif current_file_matches_string(some_string):\r\n    ...\r\n```\r\nFunctionally they're the same, but the latter is likely clearer for someone trying to understand the code (including yourself, eg. some years later!).\r\n\r\nOther bool-returning functions might start with `is_` or `has_` for similar reasons, ie. they're yes/no questions."", 'comment_created': datetime.datetime(2022, 8, 18, 6, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948709316, 'comment_body': 'check_duplicate_keys appears unused in this commit.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 41, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948711548, 'comment_body': 'This is inaccurate with split commits.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 44, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948720697, 'comment_body': ""> Maybe it's better to add this function in one commit then add --check-only and main changes in another commit.\r\n\r\nIn the main app I would definitely agree - it would be difficult to split commits otherwise since there are layers of functions calling each other which could make a commit very large. In that case it can be clearer to define new functions (and their tests to check behavior), then incrementally connect them together. The alternative is to make an initial valid working feature and then improve it, which I think we could do here.\r\n\r\nWhen there are tests then it builds confidence in the code, so having functionality built up over multiple commits is less concerning; here we're mainly relying upon manual testing, so I'd favor the --check-only be right after this commit, and that would also make it easier to squash them back together before merging if we wished."", 'comment_created': datetime.datetime(2022, 8, 18, 6, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948722013, 'comment_body': 'It would be better to break this string into multiple strings which the interpreter will put together automatically (no need for `+`) - ie. avoid a very long string.', 'comment_created': datetime.datetime(2022, 8, 18, 6, 58, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948724032, 'comment_body': 'It would be good to have hotkeys.md in a variable, to avoid the duplication.', 'comment_created': datetime.datetime(2022, 8, 18, 7, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 948726350, 'comment_body': 'This should be `sys.exit`.', 'comment_created': datetime.datetime(2022, 8, 18, 7, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949408260, 'comment_body': '``description="" Generate or update hotkeys.md file based on changes in config/keys.py by default. To lint hotkeys add \'--check-only\' option.""``\r\nHow about this description? @neiljp ', 'comment_created': datetime.datetime(2022, 8, 18, 17, 21, 14, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 949459386, 'comment_body': ""The first sentence is all that's necessary - I think this is only shown in the help text, and in that case the option will be listed below. So if the option is well-described, we don't need to include it here.\r\n\r\nThe 'by default' could be in parentheses, perhaps? As I mentioned elsewhere, it would be cleaner to use string substitution for the file names which are used throughout, and likely refer to the variables in docstrings instead.\r\n(alternatively, some of those functions could take in file parameters, but let's leave that change for this PR)"", 'comment_created': datetime.datetime(2022, 8, 18, 18, 23, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949496442, 'comment_body': ""Thanks for pointing this out @Rohitth007, though I think this was in the original version from early 2021?\r\n\r\nIt's a good refactor to have, though being outside of the main application I'm not convinced the optimization is required :) However, it's good this filtering pattern, as this might be more warranted where we partition a larger data-structure there, eg. users based on presence."", 'comment_created': datetime.datetime(2022, 8, 18, 18, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949509547, 'comment_body': 'Having tested this today (via adjusting the regex), the ""should..."" part runs into the end of the key output - so maybe actually output it on the next line with a slight indent?', 'comment_created': datetime.datetime(2022, 8, 18, 19, 13, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949516193, 'comment_body': ""I just looked at this today separately after following earlier discussions in the PR and stream. I think this matches the original intent to some extent, ie. avoiding a `.` at the end of the description, though in addition also excluding digits, which I don't think was discussed?\r\n\r\nThat said, I think I prefer the original regex you had, since it should ensure some degree of consistency with what we have now - though possibly we want ` ` in place of `\\s` to avoid newlines, tabs, etc\r\n\r\nIn any case, this seems like something we may want to change in future, so having it as a constant at the top seems useful, much like we have for KEYS_TO_EXCLUDE right now."", 'comment_created': datetime.datetime(2022, 8, 18, 19, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949517691, 'comment_body': 'I added a separate comment for this just now; the original aim was eg. detect `.`, but something like the original regex above would benefit consistency.', 'comment_created': datetime.datetime(2022, 8, 18, 19, 24, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949518703, 'comment_body': 'This still seems to be the case?', 'comment_created': datetime.datetime(2022, 8, 18, 19, 26, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 949825914, 'comment_body': 'I have extracted writing of ``hotkeys_file_string`` variable to ``hotkeys.md`` file in a new function ``write_hotkeys_file`` if thats what you meant? @neiljp ', 'comment_created': datetime.datetime(2022, 8, 19, 5, 57, 52, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 949848327, 'comment_body': 'I have used return value for ``compare_hotkeys_file`` to output different statement based on return value.', 'comment_created': datetime.datetime(2022, 8, 19, 6, 37, 28, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 949848885, 'comment_body': '@neiljp It is intentional as I have used return value [here](https://github.com/zulip/zulip-terminal/pull/1210/files#r949848327) for linting. ', 'comment_created': datetime.datetime(2022, 8, 19, 6, 38, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}]","[{'commit_sha': '63058a08b3489f65ee42170a2b7f5aaf55bdc7c3', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '311085ea6a55215dfabae91d9177d1822c329c2e', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8f7af71755450d9ab37a89c9e35ff9e7cbbe8051', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5cffe0e7d0c53858a57fcc409144cfe6e52f54ff', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '314e4d932b479921ebbb90ddfdbaab4d73ebcb3e', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a1d54bb3ba6ec3c6178859008aa6a727146fd08c', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a34dbb99a80cb260693b18be73fb5411162ca873', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce7fcd95c9ac78d0d93c5860ce11da0b49b1160b', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9ce8233c1cebaa718388522ee7b92dcf5727b89d', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c63bfc596678436b776778d2214070d04b28d405', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94314119f98a092b6d75cf8b366375498342439a', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
972157015,Add support for (un)resolving topics in ZT.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR adds support for (un)resolving topics in ZT via ``TopicInfoView`` popup menu when topic is highlighted in ``left_stream_bar`` and ``i`` key is pressed to toggle ``topic settings``.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
[WIP] #1075
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [ ] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [ ] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->
First commit adds ``TOPIC_DESC`` shortcut to ``keys.py``
Second commit adds above shorcut to ``TopicButton`` in ``buttons.py``
Third commit still figuring out a way to update topic name with ``RESOLVED_TOPIC_PREFIX`` in ``model.py``
Fourth commit  adds ``TopicInfoView`` to ``views.py``
Last commit adds ``show_topic_info`` function to ``core.py`` 

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
How to update the topic name by adding or removing ``RESOLVED_TOPIC_PREFIX`` when ``Topic Resolved`` checkbox is toggled?

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
![image](https://user-images.githubusercontent.com/53873549/174599874-a80a13e1-aa31-42df-a1fa-782a6570073b.png)
",False,1235,https://api.github.com/repos/zulip/zulip-terminal/pulls/1235,https://github.com/zulip/zulip-terminal/pull/1235,open,234,33,15,7,5,113,5,0,"[{'name': 'area: UI'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}, {'name': 'PR completion candidate'}]",2022-06-20 12:18:30+00:00,,0.0,,"[{'comment_id': 901802217, 'comment_body': ""This location is OK as a starting point, but it's not specifically a stream in a stream list, so we may want to update the help in some way."", 'comment_created': datetime.datetime(2022, 6, 20, 15, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901803382, 'comment_body': ""This function (method) doesn't exist yet, so we shouldn't introduce it in a commit until it does."", 'comment_created': datetime.datetime(2022, 6, 20, 15, 38, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901880006, 'comment_body': 'We discussed an alternative on the stream :+1:', 'comment_created': datetime.datetime(2022, 6, 20, 17, 24, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901886560, 'comment_body': ""A resolve/unresolve affects the entire topic name each time, and send the notification bot message, so I'm wondering if we'll want to have it quite so subtle as a checkbox. For example, I might hit space multiple times on the box and each time it'll send a toggle and update the topic?\r\n\r\nPart of this is how the UI is named, perhaps. That is, it looks like a state, 'Topic Resolved', but it's an action in the checkbox?\r\n\r\nFor the stream info popup this is less impactful since this only affects personal state (muted, pinned, notifications).\r\n\r\nAnother option might be to update on leaving the popup, like with reactions, which we could make consistent with how the stream info would behave, perhaps.\r\n\r\nWe can discuss in the stream."", 'comment_created': datetime.datetime(2022, 6, 20, 17, 37, 10, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901899531, 'comment_body': 'This is what we have in other places, but we should really migrate to an accessor for this from the model.', 'comment_created': datetime.datetime(2022, 6, 20, 17, 56, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901909742, 'comment_body': ""It seems strange to have the model function called `toggle_...` which you then pass a different parameter to depending upon the topic name, and which is the *new* name - other than relying on the called function to do the toggling. That is, I'd expect a toggle function to be passed in fixed parameters. In other words, a toggle is a 'move to the other position', not a 'move to *this* position'.\r\n\r\nFor at least some similar cases we have logic in the model function instead. Take a look at the muting and pinning logic, for example."", 'comment_created': datetime.datetime(2022, 6, 20, 18, 4, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 901911355, 'comment_body': 'Similarly to the help, we may want to update the label here, or add a new one if want a new area - though we risk running out of styles :)', 'comment_created': datetime.datetime(2022, 6, 20, 18, 5, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 908473278, 'comment_body': 'How about ``topic_list``?', 'comment_created': datetime.datetime(2022, 6, 28, 13, 21, 51, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 922941019, 'comment_body': ""I'm not sure we can assume that this response will have messages present in all cases, as you currently do, ie. if there is an error."", 'comment_created': datetime.datetime(2022, 7, 18, 2, 44, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924084885, 'comment_body': ""Is this necessary? This doesn't appear in the zulip python library function which is a little like this?\r\n\r\nNote the different possible server/user editing settings, which we can determine, may allow various levels of this, depending on user role (eg user/admin/etc) - it's not just if the user has posted. If this is common to the other editing code then we may want to extract a function for checking for editing permissions of a given stream/topic first?"", 'comment_created': datetime.datetime(2022, 7, 19, 5, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924104963, 'comment_body': 'This works, but the conditional may be slightly clearer if we reduce the duplication - only the new topic is different in each branch.', 'comment_created': datetime.datetime(2022, 7, 19, 6, 24, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924111533, 'comment_body': ""This means the state can't be toggled while still in the popup?\r\n\r\nIf so, we might want to consider something more like how the emoji popup is handled (but just one button), where it adds a marker. That said, this is just like a checkbox.\r\n\r\nI know someone mentioned having a button (@Rohitth007 ?), but I'm guessing the style here is not quite as expected?"", 'comment_created': datetime.datetime(2022, 7, 19, 6, 34, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924130498, 'comment_body': 'Looking at similar popups/sections, we have one in the message-actions section (MSG_INFO in msg_actions), one in stream list actions section (STREAM_DESC in stream_list), but also user information in general (USER_INFO in general).\r\n\r\nBased on that, it seems like it might be worth tidying the existing STREAM_DESC into an _INFO (so we can use a similar suffix in this commit). Until we restructure the help sections, to be consistent for now, we could either add the new hotkey to general (less tidy) or move it to a new topic_list section (and also move the existing user one into one two).\r\n\r\nThe latter option would possibly also allow adding an entry for ENTER in the user list for replying to a user, which we could possibly do in other cases too in some way, though we might want to hold off on that until we have more of a plan for that without adding too many options.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 0, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 924168922, 'comment_body': 'Probably exiting out of the popup (after executing current functionality) as soon as you press the button would help with this.', 'comment_created': datetime.datetime(2022, 7, 19, 7, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 924698401, 'comment_body': 'So, like if we press the button, the popup will exit and the topic will be (un)resolved.\r\nBut, we will be also adding different settings to the topic popup in the future. So if a user wants to (un)resolve topic and change any other setting, user again has to toggle the popup?', 'comment_created': datetime.datetime(2022, 7, 19, 16, 7, 55, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 925172099, 'comment_body': ""Since we'll place 1 time use features here like `Mute Topic`, `Mark topic as read`, `Copy Topic Link`, `Resolve Topic`, it make sense to close it when you activate the button."", 'comment_created': datetime.datetime(2022, 7, 20, 4, 53, 11, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 925189262, 'comment_body': ""Agreed, I think removing this might make it possible to edit topic names even if you haven't sent any messages there.\r\nRe, for topic edit permissions, I think we should do that before calling the toggle function. We should ideally not show them the button in the first place depending of the permission."", 'comment_created': datetime.datetime(2022, 7, 20, 5, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 926196243, 'comment_body': ""We can revisit this, but a button like Rohitth indicates may be simplest for now.\r\n\r\nNote that for the stream info, we have a check-box which updates, but as I think I mentioned before, that's a user setting so isn't as big an issues if eg. updated repeatedly via a check-box."", 'comment_created': datetime.datetime(2022, 7, 21, 2, 25, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 926197322, 'comment_body': ""True, if we can't resolve the topic, it would be confusing to bring it up. That said, in future we may want the topic info popup to be visible even if actions aren't possible, so we could take an approach a little like with the visual notifications checkbox in the stream popup when external notifications are not configured - that checkbox gets grayed out and we show red text to indicate why."", 'comment_created': datetime.datetime(2022, 7, 21, 2, 28, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 939485448, 'comment_body': 'Can `model.update_stream_message()` be used here? unless you don\'t want to display `""You changed all messages\' topic from #stream>topic to #stream>✔ topic .""`', 'comment_created': datetime.datetime(2022, 8, 6, 5, 17, 14, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939485840, 'comment_body': 'If you instead want to show `""#stream>topic has been resolved""` then do include `display_error_if_present(response)` and report_success(""#stream>topic has been resolved"") here.', 'comment_created': datetime.datetime(2022, 8, 6, 5, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939486477, 'comment_body': 'Didn\'t know topics had a time limit. Then why do we show `""Only topic editing allowed. Time limit for editing the message body has been exceeded.""` when `realm_message_content_edit_limit_seconds` is crossed?', 'comment_created': datetime.datetime(2022, 8, 6, 5, 30, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939486631, 'comment_body': 'Who can resolve such a topic then, only admins? I assume it would be a future feature for ZT then? Probably comment it?', 'comment_created': datetime.datetime(2022, 8, 6, 5, 31, 55, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939487554, 'comment_body': ""Can `model.get_messages()` be used here? We may have to force users to narrow to a topic to resolve it so that `self.narrow` is not a problem.\r\n\r\nIf that is not ideal, would it be more readable if this whole request (along with error handling which you haven't done) was extracted into a function like`get_latest_message_in_topic`?"", 'comment_created': datetime.datetime(2022, 8, 6, 5, 43, 52, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 939487956, 'comment_body': 'Probably better to move the hotkey changes here since `i` is not usable until this point.', 'comment_created': datetime.datetime(2022, 8, 6, 5, 49, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 951650580, 'comment_body': 'What if the get_messages request fails? Does response still contain ""messages""?', 'comment_created': datetime.datetime(2022, 8, 22, 16, 35, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 951658196, 'comment_body': 'To improve readability, given the function and last two parameters are the same in each branch, consider putting the minimal difference in the conditional difference, eg. setting a variable, and placing the common part outside of the conditional.', 'comment_created': datetime.datetime(2022, 8, 22, 16, 43, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 951661549, 'comment_body': ""This combined indicates the function will return the response of the get-messages if the time limit has been exceeded - though you remove the final return in another commit, before you've used this function, which suggests this shouldn't be here in the first place.\r\n\r\nIn any case I'd suggest moving this final 'else' to the top, so you can handle all the error cases first, then know that an edit should be possible and do so. Note this relates to how you can group them all together and extract them into the can_ function, as I note in another comment."", 'comment_created': datetime.datetime(2022, 8, 22, 16, 46, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 951677414, 'comment_body': ""You introduce `can_user_edit_topic` in this commit, but it's only handling a feature which I think is new (check the zulip API changelog). That it's looking to extend the base functionality to handle a new feature is great! The reason I've highlighted this section is since all the error outputs due to permissions in toggle_topic_resolved_status are also relevant to this, so I'd suggest adding can_user_edit_topic in the first related commit, then extending it here when you add the functionality only available in updated servers."", 'comment_created': datetime.datetime(2022, 8, 22, 17, 0, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956603468, 'comment_body': 'result[""messages""] contains empty list if get_messages request fails. Therefore, the condition to check it before (un)resolving topics.', 'comment_created': datetime.datetime(2022, 8, 27, 17, 5, 45, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 957719391, 'comment_body': 'Given the name of this method, and also how its used, would it make sense to return only the one message, or None?', 'comment_created': datetime.datetime(2022, 8, 29, 19, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957723198, 'comment_body': 'While simple, it would be useful to have a simple test to define what this method does. The method and test could go into a commit before you use it.', 'comment_created': datetime.datetime(2022, 8, 29, 19, 33, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957732269, 'comment_body': ""While you have a test for this later, it's preferable to introduce tests in the same commit as the code - then the code and tests are right there to read together.\r\n\r\nIf developing this function in two stages still, I'd suggest moving this function into an earlier commit combined with a simplified version of the current test you have now in a later commit, with fewer test cases (and maybe less code in it), then when you add the extra features later you can update the test with the extra cases.\r\n\r\nHowever, for simplicity, it would be fine to have the full function (this + extras) in one commit on it's own with tests, given we need to handle the current new server state."", 'comment_created': datetime.datetime(2022, 8, 29, 19, 45, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957889418, 'comment_body': ""If we're using get_user_info, can we just use role instead? So mock the return_value to be different role ids? That should simplify your test setup too."", 'comment_created': datetime.datetime(2022, 8, 30, 0, 3, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957892819, 'comment_body': ""Minor: It's useful to separate the 'arrange' from the 'act' and the 'assert' by blank lines, so here either side of the call to the function itself, to make it stand out."", 'comment_created': datetime.datetime(2022, 8, 30, 0, 9, 56, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957897467, 'comment_body': ""Editing is allowed... but it says it's disabled?"", 'comment_created': datetime.datetime(2022, 8, 30, 0, 22, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957898484, 'comment_body': 'Why this check on role?', 'comment_created': datetime.datetime(2022, 8, 30, 0, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957898976, 'comment_body': 'It would be easier to read if you extracted this .get which is used in each part into a variable at the start.', 'comment_created': datetime.datetime(2022, 8, 30, 0, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957901179, 'comment_body': ""It's confusing to have the parameters named slightly differently; skip the realm_, but let's make the names match otherwise :) ie. edit_topic_policy, not topic_edit_policy"", 'comment_created': datetime.datetime(2022, 8, 30, 0, 33, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957903884, 'comment_body': ""I don't understand this case. There's no user data, so get_user_info fails?\r\n\r\nIf you want to test this part then the approach of setting the return value of get_user_info to None here may be clearer?"", 'comment_created': datetime.datetime(2022, 8, 30, 0, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957905058, 'comment_body': 'Minor: It would be clearer to keep the server settings grouped together, ie. move the user role one step down?', 'comment_created': datetime.datetime(2022, 8, 30, 0, 44, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957907982, 'comment_body': ""Doesn't one of these completely replace the other? Maybe have the test parameters be Optional[bool] and set these parameters based on being None or not."", 'comment_created': datetime.datetime(2022, 8, 30, 0, 52, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957910218, 'comment_body': ""Having read the tests, I'm not sure if the code is working quite right, so let's get it functional according to tests first. However, since the first two if/elif branches here return, you could turn them into standalone if's, then move this line down closer to where its used. That may apply if you adjust the logic too."", 'comment_created': datetime.datetime(2022, 8, 30, 0, 58, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957911561, 'comment_body': ""Note that as per the API changelog, this parameter was new in feature level 11, so we need a backup value for this.\r\n\r\nIn an ideal world we could put all of the error conditions in one function, but let's keep them here for now."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957912131, 'comment_body': ""We haven't added support for 'community' topic editing in the regular edit feature, so we give a notice there which represents the feature we support."", 'comment_created': datetime.datetime(2022, 8, 30, 1, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 957913323, 'comment_body': 'This is outside your changes, but I noticed that the code splits this function from the private equivalent, and it would be good to keep them together.', 'comment_created': datetime.datetime(2022, 8, 30, 1, 7, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961316309, 'comment_body': ""Because mypy test is failing as we can't compare role(None) and int."", 'comment_created': datetime.datetime(2022, 9, 2, 6, 4, 45, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 961320967, 'comment_body': ""Ah, so this seems to be due to the way in which that dict is constructed in get_user_info - approximately, then updated. I think we should be able to reorder that and make the dict element not be Optional. Do you want to try that as a refactor? It'd be a reasonable other PR or early commit that we could merge first. I could do that if you want to focus on this."", 'comment_created': datetime.datetime(2022, 9, 2, 6, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961855914, 'comment_body': 'I think we could use `Message` in here somewhere?', 'comment_created': datetime.datetime(2022, 9, 2, 16, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961861594, 'comment_body': 'To clarify some other earlier points:\r\n- I suggested the `None` values as a way to support either of the other two parameters, ie. None meaning not present, or else there being a value meaning one of the expected range of values.\r\n- You might consider an assert on what seem to be two mutually exclusive server values; not here to test the code, but to ensure the test cases themselves make sense - that one is None and the other is not, or vice versa\r\n- I think realm_allow_message_editing is always present in the data? (from zulip v2 anyway?)\r\n- You adjusted the name of edit_topic_policy to match the initial_data key, but I meant the initial_data parameters you set in general (ie. the other two parameters too)', 'comment_created': datetime.datetime(2022, 9, 2, 16, 54, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961869523, 'comment_body': ""> Editing is allowed... but it says it's disabled?\r\n\r\nAs before, I'm an admin, I can edit everything, but can't edit the topic?\r\n\r\nAlso, edit_topic_policy didn't exist until a later feature level, which is why I suggested the `None` values."", 'comment_created': datetime.datetime(2022, 9, 2, 17, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 961870689, 'comment_body': 'It would be good to add some cases to cover regular users, for the different realm settings.', 'comment_created': datetime.datetime(2022, 9, 2, 17, 8, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962110593, 'comment_body': ""The way you have this right now still has the internal data set up and actually relying upon (and ~ integration testing) `get_user_info` as part of this test. In the last review I suggested mocking that return value instead, much like you've done for the client.get_messages test."", 'comment_created': datetime.datetime(2022, 9, 3, 6, 12, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962111813, 'comment_body': 'args can be inline in the function call here.', 'comment_created': datetime.datetime(2022, 9, 3, 6, 24, 7, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962112021, 'comment_body': ""You don't have a backup value here yet. See how this worked in the changelog:\r\nhttps://zulip.com/api/changelog"", 'comment_created': datetime.datetime(2022, 9, 3, 6, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962112385, 'comment_body': 'Could we add a test for this? Note that you can mock the methods as before to simplify the test cases.', 'comment_created': datetime.datetime(2022, 9, 3, 6, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962112971, 'comment_body': ""We need a different anchor value here to be backwards compatible with 2.1.x (https://zulip.com/api/get-messages), though a comment that we can use a string instead at a later stage would be useful.\r\n\r\nHowever, given it's a simple change, I think we should switch to fetching the first message in the narrow instead of the last, since I think that should avoid some of the strange behavior I mentioned in the last review summary. I think it's also mentioned in a server issue/PR.\r\n\r\nReading this again, I think this should also work with num_before being 0?\r\n"", 'comment_created': datetime.datetime(2022, 9, 3, 6, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962113171, 'comment_body': 'Can we also check the length is 1 and then just return that message?', 'comment_created': datetime.datetime(2022, 9, 3, 6, 39, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962154745, 'comment_body': 'But if we fetch the oldest message then time_limit for editing topic will exceed the set threshold.', 'comment_created': datetime.datetime(2022, 9, 3, 13, 32, 57, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 962168059, 'comment_body': ""I didn't understand this point @neiljp "", 'comment_created': datetime.datetime(2022, 9, 3, 15, 19, 26, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 962175627, 'comment_body': ""Hmm, yes this is confusing. Let's leave it at last for now."", 'comment_created': datetime.datetime(2022, 9, 3, 16, 13, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962175812, 'comment_body': ""I meant for the return type. The exact format would depend on if you adjust the data that's returned though."", 'comment_created': datetime.datetime(2022, 9, 3, 16, 14, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962340180, 'comment_body': 'Debug.', 'comment_created': datetime.datetime(2022, 9, 4, 16, 34, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962344655, 'comment_body': 'How does edit_topic_policy relate to ZFL8 and Zulip3.0? You have a different ZFL in the code.\r\n**discussed in the stream today too**', 'comment_created': datetime.datetime(2022, 9, 4, 17, 16, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962345518, 'comment_body': ""> > Editing is allowed... but it says it's disabled?\r\n> \r\n> As before, I'm an admin, I can edit everything, but can't edit the topic?\r\n\r\nThe test code has changed, but you've not addressed this point, and it's more clearly not working now.\r\n\r\nIn this particular test case, my point from the last review applies: why can admins and owners not edit the topic?\r\n\r\n**update: we discussed the above in the stream today and you said you'd look into it**\r\n\r\nI'd also suggest adding another case for where both realm settings are True, ie. when can the community edit topics, not just admins/owners?"", 'comment_created': datetime.datetime(2022, 9, 4, 17, 26, 18, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962346161, 'comment_body': 'This role None check should not be necessary after my PR from yesterday.', 'comment_created': datetime.datetime(2022, 9, 4, 17, 33, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962348282, 'comment_body': 'I like that you\'ve increased the coverage of cases by doing this, and it does have the benefit of keeping individual test cases that error (ie. role+server combinations).\r\n\r\nHowever, I have a few concerns:\r\n- It\'s not as clear which response (ie. ~role) here connects to the int keys in the dict in the other parametrize\r\n  - this is balanced by not typing the roles out in the second parametrize, but we could use None/role-id (eg. 300) inline instead and build the dict in the test body, if it\'s not None; then this parameterize would just iterate over the roles, or the test body would\r\n  - or if keeping this design, maybe use descriptive strings for the cross-referencing (""_admin"", ""_moderator"", ...) instead of the current 0-5; space-padded if you want alignment ;)\r\n- It\'s confusing that we have `case()` in the second parametrize, but also `case` as a name in this first parametrize, as well as `response` and `expected_response`\r\n- Strictly we don\'t have all these roles in every server version, so we\'re overtesting; to avoid getting stuck in the details there, we could change the existing test ids to start with \'PreZulip<someversion>\' instead, ie. describe that this applies to a range of earlier versions which may have various possible user roles (and we handle them all).\r\n\r\nOne alternative which doesn\'t keep the test cases so separated, would be to drop this parametrize block and inline the roles into the dicts lower down, and do something similar to the autocomplete PR tests you updated (eg. iterate over roles in test body & compare the results).\r\n\r\nHowever, I\'d be happy with keeping the loop in this first parametrize as now, or in the test body, as long as:\r\n- the dict keys in cases are more descriptive than the 0-5 (inline role id/None, or a lookup string, as above)\r\n- if you keep both parametrize, avoid `case` and `response` due to the naming confusion and to improve the names generally :)\r\n- adjust the ids for early servers', 'comment_created': datetime.datetime(2022, 9, 4, 17, 53, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962349118, 'comment_body': ""While I'm not fully convinced about the other parametrize block (as per another comment), I much prefer this layout for the server-settings + role->response :+1:\r\n\r\nThis is better than my suggestion of having all 3 server-settings but having one be None to indicate they weren't present."", 'comment_created': datetime.datetime(2022, 9, 4, 18, 1, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962349789, 'comment_body': 'There also appears to be a case for edit_topic_policy=5 for everyone, which suggests we may need to handle guests differently?', 'comment_created': datetime.datetime(2022, 9, 4, 18, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962357219, 'comment_body': ""This tests the error messages, but based on the return value of actual code. This also doesn't test the return value explicitly. The expected_response values effectively encode both the return value and any error message I think? so we can test both.\r\n\r\nFor an example of why this matters, note that I could change the code to always return True and never report errors, and this test code would keep working! It would appear to be an internal refactor but change the behavior completely!"", 'comment_created': datetime.datetime(2022, 9, 4, 19, 13, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962358609, 'comment_body': 'Minor: this function call no longer returns a raw server response, so we should rename this variable appropriately.', 'comment_created': datetime.datetime(2022, 9, 4, 19, 26, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962358962, 'comment_body': ""It's good to see this in here now, though note:\r\n- you're testing for feature level None (before introduction of feature levels) or 11+, so not levels 1-10? You could correct that condition, or test for whether the value exists in initial_data.\r\n- is the default value in the 'else' or the value in the comment correct? We want the value before this parameter was added.\r\n- your test doesn't cover these two different branches; if it did you might have found these issues yourself :)"", 'comment_created': datetime.datetime(2022, 9, 4, 19, 30, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962359451, 'comment_body': 'This conditional branch is also not tested.', 'comment_created': datetime.datetime(2022, 9, 4, 19, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962359696, 'comment_body': 'This only handles the resolving case branch in the code.', 'comment_created': datetime.datetime(2022, 9, 4, 19, 36, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962360251, 'comment_body': ""If we're just calling update_stream_message, we don't need to set a return value if you're not depending on it in the code/test."", 'comment_created': datetime.datetime(2022, 9, 4, 19, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962360548, 'comment_body': ""This code currently does nothing in itself if the user_response is not True, so when you add other test cases, this doesn't need to be in them - or here. It needs to be set somewhere to work, of course, and if I later read the cases and wondered why it was always true, I might expect a comment to explain."", 'comment_created': datetime.datetime(2022, 9, 4, 19, 44, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962360837, 'comment_body': ""To a caller of this message, and someone reading this test, we just pass in a stream_id and subject/topic. So it's clearer in a test like this if you start with variables/parameters for those, and then set or build the mocks from those where they're necessary."", 'comment_created': datetime.datetime(2022, 9, 4, 19, 47, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962367286, 'comment_body': ""To clarify from the previous comments:\r\n- fetching the 'newest' is fine for now (ie. not first message) :+1:\r\n- you didn't comment on `0` vs `1`, though confusingly `0` doesn't work for num_before to give the right length of `messages`, so this is fine as `1` :+1:\r\n- we need to change 'newest' *string* to a compatible version for 2.1, as per my original comment in this comment thread"", 'comment_created': datetime.datetime(2022, 9, 4, 20, 45, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962367713, 'comment_body': 'Now that the code is in separate commits, it should be straightforward to edit/update each commit and move the new code up, to be between update_stream_message and generate_all_emoji_data, to keep the send_* and update_* functions grouped together.', 'comment_created': datetime.datetime(2022, 9, 4, 20, 49, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962367873, 'comment_body': 'Minor: this commit can go just before we start to use TOPIC_EDIT_POLICY.', 'comment_created': datetime.datetime(2022, 9, 4, 20, 51, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962370609, 'comment_body': 'While it can feel useful to test in this way, I don\'t think we should include this assert:\r\n- it\'s really just a copy of the code\r\n- it means we can\'t refactor the implementation without also changing the test code!\r\n  - different anchor values may work (eg. 2.1 version vs recent - see other comment)\r\n  - maybe we won\'t use stream_dict (see another comment)\r\n  - perhaps we\'ll use caching? we might not always contact the server if we have an id\r\n- we write more and test more than we need to\r\n- needing to change the tests due to code changes has a maintenance overhead (later, or now!)\r\n\r\nIt\'s true that without this assert we can\'t confirm that we\'re contacting the server ""correctly"", but that\'s a separate test where we would connect to a real server, and ensure it does what we want. Or potentially have test code that mimics that.\r\n\r\nNote that in some situations, particularly if the code is not in a great state, then the only way to test can be like this. We also do this in the UI right now, since it can be difficult to test otherwise - we don\'t have obvious return values, and most things happen via side effects.', 'comment_created': datetime.datetime(2022, 9, 4, 21, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962370885, 'comment_body': 'Can we just use the stream_id here?', 'comment_created': datetime.datetime(2022, 9, 4, 21, 20, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962371144, 'comment_body': ""We should test for the first part of this condition. I know you related that to a failure with the server, but I think this also applies if there are no messages in the narrow? That shouldn't easily happen here with the UI, but in principle we could have the popup open and then the messages get moved on the server before we choose to resolve."", 'comment_created': datetime.datetime(2022, 9, 4, 21, 23, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962376941, 'comment_body': 'If this is accidentally not present in the cases, this will test with `None`, which is not a valid value for this.', 'comment_created': datetime.datetime(2022, 9, 4, 22, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 962378711, 'comment_body': 'Note that this is not always in seconds, but can also be None (null).', 'comment_created': datetime.datetime(2022, 9, 4, 22, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 964221831, 'comment_body': ""Didn't we conclude that no-one could edit if the main setting was disabled?"", 'comment_created': datetime.datetime(2022, 9, 6, 22, 18, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 964222644, 'comment_body': '> The expected_response values effectively encode both the return value and any error message I think?\r\n\r\nWhat you have for the dict values now does work fine, and is more explicit than what I had meant :+1: My point from an earlier comment was regarding the correlation between the error strings and return values, which might allow the test (dict) values to be simplified, at the expense of checking their values in the test function to extract the two meaning from that one value.', 'comment_created': datetime.datetime(2022, 9, 6, 22, 19, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965062196, 'comment_body': ""My concern in the stream was whether it would be useful to let the caller know about the difference between these cases:\r\n- success, but too many messages (unexpectedly too many, what do we do? our function is not using the API correctly?)\r\n- success, but no messages (there are no messages in the narrow, ie. the topic is empty)\r\n- failure, so no data available (connection or other issue)\r\n\r\nHowever, these fuller test case define the current behavior of the function, and it appears 'safe' with the current later use of this function, so this is fine for now :+1:"", 'comment_created': datetime.datetime(2022, 9, 7, 16, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965075298, 'comment_body': ""1. Minor: The name in the data is `edit_topic_policy`, so it would be clearer if this was *slightly* renamed to match\r\n\r\n2. Doing another check here, the register() response doesn't seem to quite correspond to these?\r\n```\r\nThe policy for which users can edit topics of any message.\r\n    1 = members only\r\n    2 = admins only\r\n    3 = full members only\r\n    4 = moderators only\r\n    5 = everyone\r\n```\r\nAre 1 and 5 (that you just added) switched in your list and code?"", 'comment_created': datetime.datetime(2022, 9, 7, 16, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965080812, 'comment_body': 'This reads a lot better now :+1:', 'comment_created': datetime.datetime(2022, 9, 7, 16, 55, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965090840, 'comment_body': 'Duplicate ID?', 'comment_created': datetime.datetime(2022, 9, 7, 17, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965095551, 'comment_body': 'The edit topic policy value and the response appears consistent with the server documentation here (though not the test id?), so based on my other comment regarding TOPIC_EDIT_POLICY not matching documentation, does the code use it correctly?', 'comment_created': datetime.datetime(2022, 9, 7, 17, 14, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 965097537, 'comment_body': ""The first part of these strings don't all match the edit topic policy meanings?"", 'comment_created': datetime.datetime(2022, 9, 7, 17, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971064014, 'comment_body': ""You changed the name of this function from an earlier version, and it'd be good to understand why.\r\n\r\nThe name now reads as if setting a specific resolve status, rather than toggling it. However, the code is definitely toggling still (and the function isn't setting one specific state, or receiving a 'new state' parameter) so the name doesn't seem as accurate."", 'comment_created': datetime.datetime(2022, 9, 14, 16, 43, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971065772, 'comment_body': ""You've not addressed this point that the API can return null/None."", 'comment_created': datetime.datetime(2022, 9, 14, 16, 44, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971068803, 'comment_body': 'We should be consistent, so using the constant here as we do above (or in neither case).', 'comment_created': datetime.datetime(2022, 9, 14, 16, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971081191, 'comment_body': 'These two lines are confusing, though not for the specific content in this test case.\r\n\r\nRather, since there is no return value from the function being tested. Instead you use the return_value string to refer to either the successful new topic name, or the error string, depending on the bool value. I understand it\'s the ""result"" of the function, so kind of a \'return value\' used for different purposes, and while the test will work, the naming is misleading.\r\n\r\nSo here instead of these parameters, you could have eg. expected_new_topic_name and expected_footer_error, and have both be the string expected in each case.\r\n\r\nFrom another test you may remember we sometimes use either None or an empty string to indicate a sort of \'not applicable\' in a given test case.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 1, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971086125, 'comment_body': ""This fixed value doesn't test when the server sets different values, if the value is missing (older servers), or if it's None (newer servers)."", 'comment_created': datetime.datetime(2022, 9, 14, 17, 6, 28, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971088068, 'comment_body': 'Adding test ids here may help, as we add more cases to handle community editing times/server-versions.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971088654, 'comment_body': ""I don't think this is fully tested yet, particularly since the range condition looks unchanged."", 'comment_created': datetime.datetime(2022, 9, 14, 17, 9, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971090064, 'comment_body': 'See earlier comment in thread. I termed this rename minor, but naming is actually important in helping readers understand what is happening.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971098185, 'comment_body': 'Type should be inline.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971102705, 'comment_body': 'We could add minimal tests for this, such as the expected title (since it varies) and the expected action of the button.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 23, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971103771, 'comment_body': 'Misaligned.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 25, 11, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971110879, 'comment_body': 'Unused. The variable further down is different, and this is not necessary.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971117778, 'comment_body': ""For misc numbers like this (and the +1 above), it's good to explain why in a comment."", 'comment_created': datetime.datetime(2022, 9, 14, 17, 40, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 971128389, 'comment_body': 'Does this need to be an attribute? I suppose it could help with a test.', 'comment_created': datetime.datetime(2022, 9, 14, 17, 50, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1167341621, 'comment_body': 'Why is this test case being removed?\r\n\r\nGenerally I think the changes in this revised first commit are otherwise minor enough that we can drop them? The rest appear to be:\r\n- reformatting (strings)\r\n- errors prefixing with space\r\n- comment removed\r\n\r\nIn any case, if we do include parts in some way, since this would be a modification of the previous function, the commit title would need adjusting.', 'comment_created': datetime.datetime(2023, 4, 15, 0, 13, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170263027, 'comment_body': ""This dict appears identical in each case, except for the time, so let's build it in the function to keep it simpler? You could test for the `None` return value case, but that may be simpler in a separate test."", 'comment_created': datetime.datetime(2023, 4, 18, 16, 2, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170265510, 'comment_body': ""Is the timestamp within this time difference? The test case doesn't make it clear that's why we expect it to resolve."", 'comment_created': datetime.datetime(2023, 4, 18, 16, 4, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170280012, 'comment_body': 'See https://github.com/zulip/zulip-terminal/pull/1235#discussion_r962358962\r\n\r\nFor server 2.1, this will set edit_time_limit to None.\r\nFor server 3.0 (or ZFL 11 at least), this will set edit_time_limit to the value in the server (None or the value).\r\nFor servers between those (eg. ZFL 10), this will set edit_limit to the default, ie. 86400 - this is an edge case\r\n\r\nMy impression is that the expected server behavior was\r\n- `old` 86400 <-- 2.1\r\n- `<11` 86400 <-- edge case\r\n- `>=11` 86400 or None (per server value) <-- 3.0+\r\n\r\nThis appears to generate\r\n- `old` None\r\n- `<11` 86400\r\n- `>=11` 86400 or None (per server value)\r\n\r\nIs this going to fail for 2.1? If so, could you update the test to fail first?', 'comment_created': datetime.datetime(2023, 4, 18, 16, 16, 15, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170301144, 'comment_body': 'See https://github.com/zulip/zulip-terminal/pull/1235#discussion_r962360251\r\n\r\nThis does not need a return value.', 'comment_created': datetime.datetime(2023, 4, 18, 16, 33, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 1170306160, 'comment_body': 'This value is always `None`? Have we lost some test cases?', 'comment_created': datetime.datetime(2023, 4, 18, 16, 38, 50, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '2b30a1df2b21fe38ebb83b912c4e6327ee849be7', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0433e3070dbc2ed78b98b969c9f52a062d08d9f8', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '595260d084ca6d1660c5cf609ba5a4674ca7e9ae', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd3ebc5f2dde2c3a9253b7c27c62d4290fd629e65', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9f2c0da2f7c67150088a56eb54d49b7dddc6498a', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8e2a849c4532b3154e4232568b26706c4fb9ec5', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8504cfc86ec73d4f9b94e76b06edd3349e62365d', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
1031781101,[WIP] User list section/filters,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This WIP PR migrates earlier struture of ``RightColumnView`` in ``views.py`` to structure similar to ``LeftColumnView`` with toggling between ``StreamsView`` and ``TopicsView``.
This PR mainly intends to add new ``RecipientsView`` that displays recipients of the current narrow(``All_messages``, ``PMs``, ``Streams``, ``Topics`` etc) in the right column.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
This fixes #575
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/User.20list.20sections.2Ffilters.20.23T575
**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [ ] Manually
- [ ] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [ ] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->
**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
This WIP PR only includes transition from earlier structure of ``RightColumnView`` to new structure based on ``LeftColumnView`` structure. It includes modifications to ``UserView``
**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->
This PR is motivated by PR #459
**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",False,1248,https://api.github.com/repos/zulip/zulip-terminal/pulls/1248,https://github.com/zulip/zulip-terminal/pull/1248,open,201,129,6,7,2,11,4,0,"[{'name': 'area: UI'}, {'name': 'has conflicts'}, {'name': 'size: XL'}, {'name': 'PR awaiting update'}]",2022-08-20 13:01:12+00:00,,0.0,,"[{'comment_id': 956322665, 'comment_body': 'This function looks quite different, with quite significant other changes, other than just for the move?', 'comment_created': datetime.datetime(2022, 8, 26, 18, 33, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956338955, 'comment_body': ""This is a material change, not a refactor.\r\n\r\nWe don't appear to currently modify the log so we may not strictly need it, but it does not need removing here."", 'comment_created': datetime.datetime(2022, 8, 26, 18, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956420975, 'comment_body': ""This was just going to be a comment on this change, but it turned into a review of the refactoring as one comment.\r\n\r\nI think you've adapted this change fairly straight from a commit in #459 ?\r\nThe difference appears to be you've tried to keep users_view in RightColumnView, which I only just noticed, but shows up significantly in the move commit. It's fine to take this approach and may even make it clearer what's happening, once we simplify the refactoring.\r\n\r\nOne issue that jumps out at me is how here you rely upon the variable that is now a new member variable, but only used between these two functions - which I think was in the original commit, but that doesn't necessarily make it ideal :)\r\n\r\nThis commit functionally works, but you later move the build function to UsersView, without this function. That's part of the movement of code, but you drop the later conditional entirely at that point with no explanation. It also leaves the member variable being set, but then it doesn't get used. There's no guarantee that we break a feature by doing all of that, but it's the kind of thing I'd expect to see in a separate commit to remove it cleanly with reasons, if it was intentional.\r\n\r\nMore generally, if we want an end goal of a users_view in RightColumnView having very little code in other than setting up UsersView, and generally moving/changing as little code as possible in the moving-code refactor step(s) (like the next one) to make it clear that code has been moved and not subtly changed, then this commit needs to change and likely become multiple commits to prepare for the move. If I look at the diff of the next commit and what changes other than moving, this includes:\r\n- users_view (staying in RightColumnView) needs pre-adjusting to have\r\n  - no parameters\r\n  - no build_user_view (it moves away)\r\n- to continue to handle the conditional in this function\r\n  - consider what the original check does, depends on, and where it could go instead\r\n- UsersView.__init__\r\n  - change from controller to view (this was a previous separate #459 commit)\r\n  - users_btn_list default value? a required named value is clearer using `,*,name` and you could rename it at the same time if that made it clearer\r\n- UsersView parent class change?\r\n  - I'm not sure if this is too connected with the code move to separate, but it might be a small thing to split out? I'd need to try that to confirm\r\n- build_user_view\r\n  - depending how you restructure this given the above, you may be able to move it separately to the rest? (first?)\r\n  - I'd suggest an underscore prefix since it's used internally, and perhaps a more appropriate name like button_list_from_users?\r\n\r\nGenerally the diff will also be clearer to read if adjacent code that's moved doesn't get split, which is noticeable with the diff colorMoved option."", 'comment_created': datetime.datetime(2022, 8, 26, 20, 18, 40, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956483717, 'comment_body': 'I think we have similar names to the new one in the view, but we already have view.users_view too. This is duplicative and confusing to readers of the code, or this commit.\r\n\r\nApparently currently view.users_view is actually a RightColumnView, and seemingly ends up being a duplicate of right_panel. So another good refactor before this move commit, would be to remove view.users_view and adapt for its removal.', 'comment_created': datetime.datetime(2022, 8, 26, 22, 38, 38, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956484427, 'comment_body': ""Are you using self.user_v anywhere else?\r\n\r\nI'd suggest at least combining the last two lines."", 'comment_created': datetime.datetime(2022, 8, 26, 22, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956484738, 'comment_body': 'Should user_w be set every time the UsersView is updated?', 'comment_created': datetime.datetime(2022, 8, 26, 22, 42, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956486295, 'comment_body': 'This was the kind of change I was referring to with the users_view vs users_w change, which could go into a separate commit to this, before the move commit(s).', 'comment_created': datetime.datetime(2022, 8, 26, 22, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956486851, 'comment_body': ""Either make this the current narrow, or one passed in; it's confusing to say current and then pass one in. The model tracks this already."", 'comment_created': datetime.datetime(2022, 8, 26, 22, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956499238, 'comment_body': ""This seems to be a nested loop over get_all_users data - which has the right data for output - with a nested loop over the limited subscriber ids to filter them out?\r\n\r\nIt would be clearer to read, and faster, if you used membership testing for the last part.\r\n\r\nI'm guessing this filtering part will be common to all narrows, and we might even want it external to this function?"", 'comment_created': datetime.datetime(2022, 8, 26, 23, 38, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956501857, 'comment_body': ""What does `self.user_v` represent? I asked why you had it earlier, and you didn't need to have it be a member then I think. You could add it here and give it a more meaningful name.\r\n\r\nI'm confused over your use of it in update_recipients_view and show_user_view, though you don't seem to be using the former."", 'comment_created': datetime.datetime(2022, 8, 26, 23, 50, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 956503124, 'comment_body': 'This seems kinda OK here, though it feels like it should go higher up, eg. RightColumnView?', 'comment_created': datetime.datetime(2022, 8, 26, 23, 56, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'ed3af14595eebd6e6a3d114248e2c2cf4dfea463', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd26d935c3da1cb4ffa30798a94d43800e47bbe6f', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '47c2849f4bbcf0e2f7ddf38f65187bf9d6dc3b0b', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f8fc481c93de3a3bbd35ade99748d202fe55a14', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0afbba1db554c9fc2cc4b294e7e0ee585f0950da', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a973e33f4da1538c7e92fddf91559f12b8d84ed1', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa953b873894a6123eb377f974076d314748ef36', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
879967087,Ensure color codes are valid at runtime if running in 16-color mode.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
In ``/zulip-terminal/zulipterminal/config/themes.py`` code is added in ``generate_theme`` function to check if valid color codes are used in color files for specific themes. For eg. (``colors_gruvbox.py`` for ``gruvbox_dark.py`` theme)

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Fixes #1158 

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",True,1167,https://api.github.com/repos/zulip/zulip-terminal/pulls/1167,https://github.com/zulip/zulip-terminal/pull/1167,closed,135,21,3,3,1,12,3,0,"[{'name': 'size: XL'}, {'name': 'PR ready to be merged'}, {'name': 'area: colors/styles/themes'}]",2022-03-15 09:52:17+00:00,2022-03-21 00:44:00+00:00,485503.0,"5 days, 14:51:43","[{'comment_id': 829591462, 'comment_body': ""I believe this data is identical to that in a test file? If so, I'd suggest moving that data to here and importing it from the test. That could be a prep (preparatory) refactor commit."", 'comment_created': datetime.datetime(2022, 3, 17, 23, 38, 46, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829592695, 'comment_body': 'This would be clearer as an f-string.', 'comment_created': datetime.datetime(2022, 3, 17, 23, 41, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829593298, 'comment_body': 'This will only give one failure, even if more than one color is invalid; to avoid a contributor/user needing to run multiple times after each theme update, we should let them know of each bad color in the theme each time we check.\r\n\r\nIt would also be useful to know which color name is wrong, eg. `BLACK` relates to `black`.', 'comment_created': datetime.datetime(2022, 3, 17, 23, 43, 42, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829593519, 'comment_body': 'This line should be unnecessary.', 'comment_created': datetime.datetime(2022, 3, 17, 23, 44, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829598845, 'comment_body': 'This is not critical, but I think we could improve this name, perhaps `InvalidThemeColorCode`?', 'comment_created': datetime.datetime(2022, 3, 17, 23, 58, 57, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829601645, 'comment_body': ""It is useful to use an existing theme as a basis for a test, but I'm not sure we benefit from testing against all the existing themes.\r\n\r\nInstead, I'd suggest exploring different `Color` sets, eg. ensuring that a range of names work, as well as what output one gets if multiple colors in `Color` are invalid."", 'comment_created': datetime.datetime(2022, 3, 18, 0, 6, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 829602149, 'comment_body': 'This is a good basic test, but it would be useful to also confirm what text is in the exception (particularly for different cases).', 'comment_created': datetime.datetime(2022, 3, 18, 0, 8, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830337875, 'comment_body': ""This is an improvement, though note that we now *always* raise, even with valid colors! It seems like you've written your tests to match the code."", 'comment_created': datetime.datetime(2022, 3, 18, 20, 42, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830338728, 'comment_body': ""Please do migrate this over in a first commit, and ensure everything works (eg. using `make check`) at that point. This will make the second commit smaller and easier to read - and won't have the duplication you have currently."", 'comment_created': datetime.datetime(2022, 3, 18, 20, 44, 8, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830339117, 'comment_body': 'You can join the errors with this instead.', 'comment_created': datetime.datetime(2022, 3, 18, 20, 44, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830339375, 'comment_body': 'Please use meaningful names.', 'comment_created': datetime.datetime(2022, 3, 18, 20, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 830339660, 'comment_body': 'This is just `color_code`?', 'comment_created': datetime.datetime(2022, 3, 18, 20, 45, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '1ef48cb0714bb993f0daf7e80db6442d7e8d9f01', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca5bfbe48010139946e3c4b467eb60ffe1d37d5c', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5ab15bd6e8b04c37b29582255e8f2174ad111cf5', 'committer_username': 'neiljp', 'committer_name': 'Neil Pilgrim', 'committer_email': None, 'commit_date': datetime.datetime(2014, 11, 5, 10, 28, 12, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
888382001,model: Improve reporting upon moving/splitting topic.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR improves reporting upon moving a message by editing it's topic.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Partial fix for #1172 

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [x] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->

https://user-images.githubusercontent.com/53873549/159926734-3f04ffb8-c35f-4836-8d76-ae7401e6fca6.mp4

",True,1178,https://api.github.com/repos/zulip/zulip-terminal/pulls/1178,https://github.com/zulip/zulip-terminal/pull/1178,closed,64,27,3,3,4,23,5,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'size: L'}, {'name': 'area: message rendering'}, {'name': 'PR ready to be merged'}]",2022-03-24 13:31:35+00:00,2022-04-10 00:04:02+00:00,1420347.0,"16 days, 10:32:27","[{'comment_id': 835822413, 'comment_body': ""I'm not sure if we have a standard way to do this using `report_success`, but this may be clearer if we can provide a highlight style to group the stream+topic in each case.\r\n\r\nThis may require changes to existing code, so that could be a follow-up."", 'comment_created': datetime.datetime(2022, 3, 26, 23, 8, 3, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 835822820, 'comment_body': 'This is all the edited messages we know about, so this may work the first time, with no known edited messages, but I expect likely will grow each time and so report the wrong result.\r\n\r\nTry testing this manually, and then you can add a test case for this and check it fails, before fixing.', 'comment_created': datetime.datetime(2022, 3, 26, 23, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 835823134, 'comment_body': ""Let's simplify using a well-named variable for the common code here."", 'comment_created': datetime.datetime(2022, 3, 26, 23, 18, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 838409182, 'comment_body': 'After fixing the format for reporting message upon moving topics, we can look into highlighting as well.', 'comment_created': datetime.datetime(2022, 3, 30, 10, 59, 29, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 838412155, 'comment_body': 'I got your point. Therefore, I have used a different method -\r\n1. Getting all stream messages\r\n2. Filtering messages based on topic where message is edited by user.\r\n3. Compare message_id of edited message and topic messages to get recent_edited_messages.', 'comment_created': datetime.datetime(2022, 3, 30, 11, 3, 17, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 838412932, 'comment_body': 'get_message = self.index[""messages\'] for common code.', 'comment_created': datetime.datetime(2022, 3, 30, 11, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 841021204, 'comment_body': ""This is identical except for the apostrophe placement? If so, it'll be simpler to integrate the difference into the variable, and avoid the need for a conditional here."", 'comment_created': datetime.datetime(2022, 4, 2, 6, 20, 54, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841021313, 'comment_body': ""It's better to put the explicit text into the test cases above, than have conditional code here - particularly if it is exactly the same as the code in the application."", 'comment_created': datetime.datetime(2022, 4, 2, 6, 22, 29, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841021503, 'comment_body': ""By just using a string we can assert on an 'expected string' provided in each parametrize 'case', avoiding the need for extra conditionals here."", 'comment_created': datetime.datetime(2022, 4, 2, 6, 24, 24, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841021620, 'comment_body': 'Given the longer test here now, it would be useful to also add inline test ids.', 'comment_created': datetime.datetime(2022, 4, 2, 6, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841287516, 'comment_body': ""Regarding test ids, I was referring to using `pytest.param`, which we've been importing as `case`. This makes description of each parametrized element easier."", 'comment_created': datetime.datetime(2022, 4, 3, 22, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841287887, 'comment_body': 'Minor: At this commit we can simplify further to include the message_id.', 'comment_created': datetime.datetime(2022, 4, 3, 22, 46, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841288256, 'comment_body': 'You can insert this text directly as eg. something called the `expected_success_text` or similar, as an additional parametrize entry. That allows something like the following to replace all of the `if propagate_mode == ...` conditionals. Ideally we keep test bodies as small and simple as possible.\r\n```python\r\nreport_success.assert_called_once_with(expected_success_text)', 'comment_created': datetime.datetime(2022, 4, 3, 22, 50, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841290248, 'comment_body': 'See my followup comment in the next review.', 'comment_created': datetime.datetime(2022, 4, 3, 23, 0, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 841290463, 'comment_body': 'This was what I referred to by simplifying the code in the next review.', 'comment_created': datetime.datetime(2022, 4, 3, 23, 2, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 842117099, 'comment_body': 'Since this is the same in every parametrize (case), we can either set it directly in the test function body, or even leave it as a test function parameter but set it to have a default value (eventually we will want to support moving across streams).\r\n\r\nIn the code and tests, it may clarify things if you clarify if this is `old_` or `new_`.', 'comment_created': datetime.datetime(2022, 4, 4, 20, 33, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 842122669, 'comment_body': 'This string is unimportant when `footer_updated` is `False`, right? This could be `""""` and the test likely still passes with the same code. To avoid confusion with that when reading the test, we could set the string to some meaningful value that implies it\'s not doing anything, or add a comment. However, a reader may still expect that to be a string that\'s actually used. A cleaner way is then to combine these parameters into one, using eg. `None` for the no-output case.', 'comment_created': datetime.datetime(2022, 4, 4, 20, 41, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 844203425, 'comment_body': 'OK, so you have the `case` around each set of test parameters; for the ids see other tests which use a named parameter to `case` (ie. `pytest.param`), ie. `id=some_description`).\r\n\r\nYou might try running this test as it is with `-v` and using `-k` to filter this test only, then see what happens when you add an id. What you see there is useful, in addition to it looking a little like a comment for that test parametrization.', 'comment_created': datetime.datetime(2022, 4, 6, 17, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 844203831, 'comment_body': ""I hope you can see how much cleaner this is :+1:\r\nThe simpler test logic is, the fewer bugs can be in the tests themselves - other than also making them easier to read.\r\nYou didn't write this original test, but even so imagine that you looked for this test first, and changed it to specify new behavior first, then updated the code to make it pass (see TDD - test driven development - if you've not come across it). We're wanting to make a specification for the behavior, not write test code that parallels the behavior."", 'comment_created': datetime.datetime(2022, 4, 6, 17, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 844217057, 'comment_body': ""I'd like to see more discussion and explanation of this logic when we do implement this, and we should more broadly apply it to the other `report_*` methods too. This appears to work for now, but here I'd prefer to go for simpler optional pass-through of a duration to this method for now, which we can iterate on later - ie. an additional named parameter with a default value."", 'comment_created': datetime.datetime(2022, 4, 6, 17, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 846693646, 'comment_body': ""We're discussing this in the stream now :+1:"", 'comment_created': datetime.datetime(2022, 4, 10, 0, 5, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'c475d188e2b58541d9239aa497e72bf5915935c5', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4565282e08fc49006a77d52f032dcb8a43dcedd', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '719623427ead90d9573c0b30d74b14a786bb0846', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
906366004,model: Highlight stream name in reporting of moving/splitting topics.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR highlights stream names in reporting of moving/splitting topic in footer text.
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Partially fixes #1172 
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/.E2.9C.94.20Improve.20reporting.20on.20moving.2Fsplitting.20topics.20.23T1172.20.23T1178

New CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Highlight.20text.20of.20reporting.20on.20moving.2Fsplitting.20topics

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->

![Screenshot (66)](https://user-images.githubusercontent.com/53873549/162869575-5580f8a8-f45a-4147-9a20-d0dcbd8d0238.png)",True,1196,https://api.github.com/repos/zulip/zulip-terminal/pulls/1196,https://github.com/zulip/zulip-terminal/pull/1196,closed,127,46,11,4,10,7,4,0,"[{'name': 'enhancement'}, {'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'area: message editing'}]",2022-04-11 19:00:37+00:00,2022-04-21 20:56:47+00:00,870970.0,"10 days, 1:56:10","[{'comment_id': 850103323, 'comment_body': 'There is no need to change this from an f-string.', 'comment_created': datetime.datetime(2022, 4, 14, 5, 49, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 850114399, 'comment_body': 'We can greatly simplify the formatted text here to `(style_string, text)`, which makes this much easier to code - and test.\r\n\r\nThe same applies to the topic text.', 'comment_created': datetime.datetime(2022, 4, 14, 6, 13, 45, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 850376135, 'comment_body': '@neiljp If f-string is not converted to list of strings, the ``urwid.Text`` is not highlighted and is displayed as ``(style_string, text)`` ', 'comment_created': datetime.datetime(2022, 4, 14, 12, 5, 43, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 851401111, 'comment_body': ""You can see the result of this in the tests, but you've not simplified all the way in the code itself."", 'comment_created': datetime.datetime(2022, 4, 15, 17, 39, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851401793, 'comment_body': 'I was only referring to these 3 lines.', 'comment_created': datetime.datetime(2022, 4, 15, 17, 40, 20, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 855534617, 'comment_body': 'This is already a list.', 'comment_created': datetime.datetime(2022, 4, 21, 19, 38, 47, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 855544946, 'comment_body': 'This is a blacken.', 'comment_created': datetime.datetime(2022, 4, 21, 19, 55, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': 'be4fdec066ecffa64b2ce3cabbf22fe883b6efd3', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf429d1908e5d765b27f100cd8e8e1e96a5cd7f1', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '81080b8b50e59bc7f46bfa5145521351264f595f', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dc5ba6b8d4edb58ab5aafe44efacadf5dab53259', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
905262944,Support 'Narrow to current compose box recipient'.,"<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR adds support to 'Narrow to current compose box recipient' after sending a message outside current narrow.
Shortcut - ``ctrl``+``.``
<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->
Fixes #1182 
<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Support.20'Narrow.20to.20current.20compose.20box.20recipient'

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->
Currently I have used shortcut - `.` instead of ``ctrl``+``.`` as ``ctrl``+``.`` doesn't seem to work in my local development environment (WSL2 Windows 10) 

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",True,1194,https://api.github.com/repos/zulip/zulip-terminal/pulls/1194,https://github.com/zulip/zulip-terminal/pull/1194,closed,38,2,5,1,3,18,3,0,"[{'name': 'area: hotkeys'}, {'name': 'size: M'}, {'name': 'PR ready to be merged'}]",2022-04-10 16:26:28+00:00,2022-04-17 02:27:12+00:00,554444.0,"6 days, 10:00:44","[{'comment_id': 846818175, 'comment_body': 'Good use of the script? :)', 'comment_created': datetime.datetime(2022, 4, 10, 17, 34, 51, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 846819236, 'comment_body': ""\r\n\r\nWe should programmatically fetch the key and substitute it in here.\r\n\r\nI'm not sure about the use of the arrow here.\r\n"", 'comment_created': datetime.datetime(2022, 4, 10, 17, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 846868894, 'comment_body': 'We should handle PMs here too, which I think you mentioned on the stream?', 'comment_created': datetime.datetime(2022, 4, 10, 23, 54, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 846963789, 'comment_body': 'Definitely, you just have to change the key in ``keys.py`` and run the script to update ``hotkeys.md`` instead of changing manually. Really helpful.', 'comment_created': datetime.datetime(2022, 4, 11, 5, 45, 43, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 846964372, 'comment_body': 'You had mentioned an UI element being proposed in #design > button to go to conversation. Should that arrow like symbol appear in compose box when messaging outside current narrow?', 'comment_created': datetime.datetime(2022, 4, 11, 5, 47, 9, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 846965005, 'comment_body': 'So, if we change the shortcut for narrowing to current message recipient, the key in the message should also change. Right? ', 'comment_created': datetime.datetime(2022, 4, 11, 5, 48, 33, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 848618120, 'comment_body': ""If I'm mid compose and want to see the topic, this causes the composition to be lost; we want to switch to it, but not cancel the composition."", 'comment_created': datetime.datetime(2022, 4, 12, 16, 8, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 848619148, 'comment_body': 'This just returns a string; what is it doing here?', 'comment_created': datetime.datetime(2022, 4, 12, 16, 9, 13, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 848620302, 'comment_body': 'This would be a good use of `primary_key_for_command`, though there would likely be space here to use a list of all the keys instead, as we use in other UI locations.', 'comment_created': datetime.datetime(2022, 4, 12, 16, 10, 23, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 848646770, 'comment_body': ""I think we may want 'conversation' instead of 'message recipient'. Is that in the original topic too? (re server)"", 'comment_created': datetime.datetime(2022, 4, 12, 16, 39, 21, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 850124109, 'comment_body': 'This is really during compose.', 'comment_created': datetime.datetime(2022, 4, 14, 6, 32, 12, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 850124529, 'comment_body': ""As per discussion in the stream, let's skip the icon for now; I think it'd be a representation of the key somehow if we did, a little like we have `[P]`."", 'comment_created': datetime.datetime(2022, 4, 14, 6, 32, 59, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851468807, 'comment_body': ""Note that other help_text doesn't end with a `.`\r\n\r\nWe may want to lint for this somewhere."", 'comment_created': datetime.datetime(2022, 4, 15, 19, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851470868, 'comment_body': 'This is unnecessary.', 'comment_created': datetime.datetime(2022, 4, 15, 19, 54, 9, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851485357, 'comment_body': ""If we keep this message this long, I'd welcome this being displayed a little longer (eg. the 6 we used in the other PR).\r\n\r\nHowever, my remaining query here is whether we want to customize this logic/message a little further:\r\n- in all-messages narrow, we never see this, but may still want to go to the conversation\r\n- in stream (or all-PM) narrows which hold the message, we may also still want to go to the conversation\r\n- if a message is outside the narrow, we always want to show this\r\n\r\nTo address these combinations we may want to split this messaging change out into a followup commit and/or PR, since the functionality itself will be present and consistent with the help menu and documentation already in the rest of this commit. This is an extra hint, and it'd be good to handle it well."", 'comment_created': datetime.datetime(2022, 4, 15, 20, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851496299, 'comment_body': 'These branches would be more readable using `compose_box_status`.', 'comment_created': datetime.datetime(2022, 4, 15, 20, 13, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851783171, 'comment_body': 'The arrow issue is now at #1203.', 'comment_created': datetime.datetime(2022, 4, 17, 17, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 851783233, 'comment_body': 'Again, this is now #1203 ', 'comment_created': datetime.datetime(2022, 4, 17, 17, 26, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '1ad6e3a011e7f812f834dc6d05ea050e0fd30dba', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
915671282,Display names of reacting users when few users have reacted.,"Fixes #1212

<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR displays reacting usernames besides reacting emoji in messages.

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/Feature.20discussion.20-.20Show.20usernames.20adding.20emoji.20to.20message

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
In Zulip web app -
![image](https://user-images.githubusercontent.com/53873549/164528377-e7dd3e7f-17f8-4764-818a-cb7c879eaa9c.png)

In ZT -
![image](https://user-images.githubusercontent.com/53873549/164529020-6f6a07e6-b50e-4b06-b619-c2984322825c.png)
",True,1213,https://api.github.com/repos/zulip/zulip-terminal/pulls/1213,https://github.com/zulip/zulip-terminal/pull/1213,closed,233,56,2,2,4,22,4,1,"[{'name': 'area: UI'}, {'name': 'size: XL'}, {'name': 'area: message rendering'}, {'name': 'PR ready to be merged'}]",2022-04-21 18:33:14+00:00,2022-05-05 00:58:02+00:00,1146288.0,"13 days, 6:24:48","[{'comment_id': 856865277, 'comment_body': ""Try using `str.join()` here instead. It'll be much simpler to read and also avoid magic numbers like `39`"", 'comment_created': datetime.datetime(2022, 4, 23, 8, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 856866119, 'comment_body': ""Whats the need of sorting based on id's here? Does that mean users who have a smaller id are preferred? From [this](https://chat.zulip.org/#narrow/stream/277-discussions/topic/Next.20discussion.20topic/near/1319047) message, it looks like your ordering and webapps ordering differ."", 'comment_created': datetime.datetime(2022, 4, 23, 8, 12, 26, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 856866505, 'comment_body': ""I'm not sure why the reactions were sorted here in the first place. From [this](https://chat.zulip.org/#narrow/stream/1-announce/topic/server.20releases/near/1355228) message, the ordering of reactions seem to differ from the webapp.\r\n\r\nAlso what's the reason for converting the set into a list?"", 'comment_created': datetime.datetime(2022, 4, 23, 8, 17, 50, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 856936924, 'comment_body': '- Every time ``reacting user_ids`` are fetched, I noticed that ordering was even if there was no change in ``reacting users`` for a reaction. Therefore, I sorted the ``ids``.\r\n- Next, in ``test_reaction_views`` because of random ordering, tests were failing.', 'comment_created': datetime.datetime(2022, 4, 23, 16, 15, 2, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 856937000, 'comment_body': 'To rearrange ``You`` reaction ``user_name`` to the end of users reacted.', 'comment_created': datetime.datetime(2022, 4, 23, 16, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'srdeotarse', 'type': 'User'}, {'comment_id': 857068027, 'comment_body': '@Rohitth007 See e3b5192fa9e736 for some reasoning. This may be less necessary now that eg. dicts are more ordered by default.', 'comment_created': datetime.datetime(2022, 4, 24, 5, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 857068990, 'comment_body': 'The original code could be improved here since `count` is actually more like `user_ids`, and now maybe `users`.\r\n\r\nI do think that a `list` may be usable from the start, like Rohitth says.', 'comment_created': datetime.datetime(2022, 4, 24, 5, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 857069531, 'comment_body': 'This might be simplified by combining into the earlier sort, based on how tuples are sorted?\r\n\r\n', 'comment_created': datetime.datetime(2022, 4, 24, 5, 44, 44, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 857124222, 'comment_body': ""I think now with the updated PR, the tests are also not a problem. So maybe it's better to display the reactions in the order in which they were reacted instead of alphabetically?"", 'comment_created': datetime.datetime(2022, 4, 24, 13, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 860511652, 'comment_body': 'These should be separate test-case parameters, not part of the message data itself.\r\n\r\nIn cases like these, it can be clean to have a refactor which adjusts the test structure, before introducing the extra test cases.', 'comment_created': datetime.datetime(2022, 4, 28, 5, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 860513791, 'comment_body': ""This is what made me concerned about the test, as here we're changing the message we're testing with. That doesn't cause any issues here as it doesn't overwrite anything we expect to be there (and the Message is badly defined type-wise right now), but effectively we're generating a message with extra fields which the code could 'cheat' with, to pass the test ;)"", 'comment_created': datetime.datetime(2022, 4, 28, 6, 1, 19, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 860514152, 'comment_body': 'Is this a left-over parenthesis? Black reformats code, but please check the code for readability afterwards :)', 'comment_created': datetime.datetime(2022, 4, 28, 6, 2, 5, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 860535261, 'comment_body': 'Do we actually need the `len(ids) > 3` condition here?\r\n\r\nAlso lets define variables for hardcoded constants. Eg: `MAX_USERNAMES_PER_REACTIONS = 3` or something similar.', 'comment_created': datetime.datetime(2022, 4, 28, 6, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 860537998, 'comment_body': 'Do we need this, now that the tests also pass and given that ordering is also preserved? This would then show emojis in the order in which they were reacted. This can be a separate commit.', 'comment_created': datetime.datetime(2022, 4, 28, 6, 44, 4, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 860540490, 'comment_body': ""Let's maybe do the `set` to `list` change in a refactor commit before everything else, so that the diffs look cleaner?"", 'comment_created': datetime.datetime(2022, 4, 28, 6, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}, {'comment_id': 861202318, 'comment_body': ""Minor: Generally it's good to use an 'expected_' prefix for intended outcomes.\r\n\r\nYou might also consider changing the 'result' to 'text' for consistency with 'attributes'."", 'comment_created': datetime.datetime(2022, 4, 28, 18, 30, 58, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861207350, 'comment_body': 'Please clarify this.', 'comment_created': datetime.datetime(2022, 4, 28, 18, 37, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861223006, 'comment_body': ""`reactions` does hold the raw data we're looking for here, but we know this from the start, so can avoid a lot of unnecessary processing and extra conditionals, including here. That is, long => old behavior, short => new behavior, and we know long vs short at the top.\r\n\r\nIf retaining some of the old logic to push forward with emoji-specific counts I was less bothered with tidying in this way, but if we just depend on this one condition I think we can tidy most of this into two branches."", 'comment_created': datetime.datetime(2022, 4, 28, 18, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861225899, 'comment_body': ""While I wouldn't say that it's necessary to use upper case, you haven't addressed Rohitth's point and extracted the number into a variable for clarity (though you may need to adjust the name slightly now)."", 'comment_created': datetime.datetime(2022, 4, 28, 19, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861228785, 'comment_body': ""That I need to scroll around to check that this matches the original expected values (must further down) emphasizes the point I made in the previous review that you didn't respond to: add a small refactor commit before this which moves these values from the body of the test to use parameters."", 'comment_created': datetime.datetime(2022, 4, 28, 19, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861242164, 'comment_body': 'This has turned into a very small commit, but we can always squash it later, and generally small is good for reviews too. However, let me address the ordering :)\r\n\r\nI know Rohitth said ""before everything else"", but note that the original \'story\' of commits was to adjust the spacing and then add the user names. Putting this first feels strange to a reviewer as this seems unrelated to the next commit (spacing), and maybe part of a new \'feature\' change, ie. adjusting the ordering?\r\n\r\nIf there are purely refactoring commits these generally come before the related feature. This is currently a pure refactor since it doesn\'t change the behavior, but it seems unrelated to the following commit. This is easy to reorder in this case since the changes don\'t intersect or depend on each other (you can move the commits around using an interactive rebase).\r\n\r\nThe ordering change is arguably a new (visible) feature, so you might consider this part of that block of commits.\r\n\r\nOther than making it easier to review, this also helps with merging earlier commits (or groups of commits) from a PR first, if PRs become unexpectedly large, or if earlier commits are mergeable and later ones need further work.', 'comment_created': datetime.datetime(2022, 4, 28, 19, 25, 6, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 861468882, 'comment_body': 'Note that you can simplify the above by bringing the `append` statements out of the conditionals using `reaction_style` for `""reaction""` and`""reaction-mine""`.\r\n\r\nThis can be added when the feature itself was introduced in the previous commit but I\'d wait for @neiljp to confirm if this was what he imagined the tidying to be.\r\n\r\nAlso do you think the post-processing step of `spaced_reaction_texts` should also be integrated into this, so that we avoid too many for loops on the whole?', 'comment_created': datetime.datetime(2022, 4, 29, 5, 29, 13, tzinfo=datetime.timezone.utc), 'commenter': 'Rohitth007', 'type': 'User'}]","[{'commit_sha': '1280c5e2ae92b55ec64c085f30b3d0ad6b512e4c', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7722addfe11476a2d57a0e294be4ad0db91f9ac8', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5
911385594,Display 'Message sent outside current narrow' when narrowing from all_messages and all_PMs.,"Follow up PR #1194

<!-- Please see https://github.com/zulip/zulip-terminal#contributor-guidelines ! -->

**What does this PR do?**  <!-- Overall description goes here -->
This PR displays ``Message sent outside current narrow`` even if narrowing from ``all_messages`` or ``all_PMs``

<!-- If fixing a filed bug or new feature, add 'Fixes #<issue>' or 'Partial fix for #<issue>' -->

<!-- Add a link to a discussion on chat.zulip.org, if relevant -->

**Tested?** <!-- Fine to leave some of these unchecked if this is a draft/work-in-progress -->
- [x] Manually
- [x] Existing tests (adapted, if necessary)
- [ ] New tests added (for any new behavior)
- [x] Passed linting & tests (each commit)
<!-- Code must pass CI (GitHub Actions) before merging - look for the green tick! -->

<!-- See https://github.com/zulip/zulip-terminal#commit-style -->
**Commit flow** <!-- if more than one commit; add/delete/fill-in as appropriate -->
<!-- For example:
- first commit doing some thing
- maybe multiple commits doing similar things
-->

**Notes & Questions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- For example:
- this doesn't include feature X (yet?)
- unsure about Y
- should this do Z?
-->

**Interactions** <!-- if any; add/delete/fill-in as appropriate -->
<!-- eg.
- Waiting on #<PR>
- Blocks #<PR>
-->
CZO - https://chat.zulip.org/#narrow/stream/206-zulip-terminal/topic/.E2.9C.94.20Support.20'Narrow.20to.20current.20compose.20box.20recipient'.20.23T1194

Cases for showing success message - https://github.com/zulip/zulip-terminal/pull/1194#discussion_r851485357

**Visual changes** <!-- if any; add/delete/fill-in with screenshot/diagram as appropriate -->
",False,1204,https://api.github.com/repos/zulip/zulip-terminal/pulls/1204,https://github.com/zulip/zulip-terminal/pull/1204,open,50,9,4,2,5,6,3,0,"[{'name': 'size: L'}, {'name': 'has conflicts'}, {'name': 'PR awaiting update'}]",2022-04-17 04:21:30+00:00,,0.0,,"[{'comment_id': 851707008, 'comment_body': ""This appears a valid one-off tidy-up, but if it's not related to the bulk of the code then it's good to note it in the commit text body. More tidies => maybe it belongs in it's own commit."", 'comment_created': datetime.datetime(2022, 4, 17, 5, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873243325, 'comment_body': 'Minor perhaps, but this handles private cases too.', 'comment_created': datetime.datetime(2022, 5, 15, 23, 14, 16, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873243472, 'comment_body': 'This styling (and below) is extracted from the other location. It would be better to use a common functionality.', 'comment_created': datetime.datetime(2022, 5, 15, 23, 15, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873243931, 'comment_body': ""We don't want to use a busy loop for this, if we do take this approach. This sends the zulip-term CPU usage to 100%+.\r\n\r\nAn urwid on-change signal may be better, though note that while potentially helpful, `alt .` will not (or shouldn't) do anything if the recipients aren't valid, so we can avoid showing the notice in that case."", 'comment_created': datetime.datetime(2022, 5, 15, 23, 17, 39, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873245345, 'comment_body': ""This is the correct condition for the narrowing hint, but please see https://github.com/zulip/zulip-terminal/pull/1204#issuecomment-1100809732\r\n\r\nThere are two separate conditions; one handles the 'outside of narrow' part of the message (doesn't need updating), another separate one handles the showing of the second (hint) part."", 'comment_created': datetime.datetime(2022, 5, 15, 23, 28, 37, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}, {'comment_id': 873248289, 'comment_body': ""We may need to update either the test or the ids, to represent what we're expecting here.\r\n\r\nAt the very least, this change is now inconsistent: True => notified :)\r\n\r\nHowever, there are different aspects being notified here, so a boolean doesn't fully encapsulate the results any more."", 'comment_created': datetime.datetime(2022, 5, 15, 23, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'neiljp', 'type': 'User'}]","[{'commit_sha': '455f2d79bd0b71b118d150b11a5eeaa833860a44', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af52470e7d84c429867cf04b0737b601fd849557', 'committer_username': 'srdeotarse', 'committer_name': 'Shivam Deotarse', 'committer_email': 'srdeotarse@outlook.com', 'commit_date': datetime.datetime(2019, 8, 7, 16, 56, 14, tzinfo=datetime.timezone.utc)}]",Shivam Deotarse,53873549,srdeotarse@outlook.com,User,,19,,8,5

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
122704772,zulip-terminal,zulip/zulip-terminal,Python,243,611,18,81,2276,423,3,165,"[{'id': 1293507976, 'number': 1362, 'closed': datetime.datetime(2024, 7, 16, 23, 54, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 28, 19, 12, 13, tzinfo=datetime.timezone.utc), 'time_taken': 41143336.0, 'time_delta': '476 days, 4:42:16', 'additions': 28, 'deletions': 0, 'state': 'closed'}, {'id': 1031781101, 'number': 1248, 'closed': None, 'created': datetime.datetime(2022, 8, 20, 13, 1, 12, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 201, 'deletions': 129, 'state': 'open'}, {'id': 972157015, 'number': 1235, 'closed': None, 'created': datetime.datetime(2022, 6, 20, 12, 18, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 234, 'deletions': 33, 'state': 'open'}, {'id': 915671282, 'number': 1213, 'closed': datetime.datetime(2022, 5, 5, 0, 58, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 21, 18, 33, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1146288.0, 'time_delta': '13 days, 6:24:48', 'additions': 233, 'deletions': 56, 'state': 'closed'}, {'id': 913128563, 'number': 1210, 'closed': datetime.datetime(2022, 8, 21, 2, 39, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 19, 13, 29, 24, tzinfo=datetime.timezone.utc), 'time_taken': 10674592.0, 'time_delta': '123 days, 13:09:52', 'additions': 153, 'deletions': 16, 'state': 'closed'}, {'id': 911385594, 'number': 1204, 'closed': None, 'created': datetime.datetime(2022, 4, 17, 4, 21, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 50, 'deletions': 9, 'state': 'open'}, {'id': 906366004, 'number': 1196, 'closed': datetime.datetime(2022, 4, 21, 20, 56, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 11, 19, 0, 37, tzinfo=datetime.timezone.utc), 'time_taken': 870970.0, 'time_delta': '10 days, 1:56:10', 'additions': 127, 'deletions': 46, 'state': 'closed'}, {'id': 905262944, 'number': 1194, 'closed': datetime.datetime(2022, 4, 17, 2, 27, 12, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 10, 16, 26, 28, tzinfo=datetime.timezone.utc), 'time_taken': 554444.0, 'time_delta': '6 days, 10:00:44', 'additions': 38, 'deletions': 2, 'state': 'closed'}, {'id': 899334583, 'number': 1186, 'closed': datetime.datetime(2022, 8, 4, 0, 59, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 4, 18, 14, 8, tzinfo=datetime.timezone.utc), 'time_taken': 10478748.0, 'time_delta': '121 days, 6:45:48', 'additions': 145, 'deletions': 6, 'state': 'closed'}, {'id': 888382001, 'number': 1178, 'closed': datetime.datetime(2022, 4, 10, 0, 4, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 24, 13, 31, 35, tzinfo=datetime.timezone.utc), 'time_taken': 1420347.0, 'time_delta': '16 days, 10:32:27', 'additions': 64, 'deletions': 27, 'state': 'closed'}, {'id': 879967087, 'number': 1167, 'closed': datetime.datetime(2022, 3, 21, 0, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 15, 9, 52, 17, tzinfo=datetime.timezone.utc), 'time_taken': 485503.0, 'time_delta': '5 days, 14:51:43', 'additions': 135, 'deletions': 21, 'state': 'closed'}]"
