pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
677024753,Added logging functionality (spdlog),"As discussed in issue #189, spdlog is integrated into prmon. spdlog (version 1.8.5) is added as a submodule. All previous logging statements are replaced with the new logger.

Further, command line switches will be added to handle the logging level of monitors.",True,190,https://api.github.com/repos/HSF/prmon/pulls/190,https://github.com/HSF/prmon/pull/190,closed,267,101,26,1,3,8,0,0,[],2021-06-24 11:22:26+00:00,2021-07-07 17:30:06+00:00,1145260.0,"13 days, 6:07:40","[{'comment_id': 664543200, 'comment_body': ""We probably don't need this empty line."", 'comment_created': datetime.datetime(2021, 7, 6, 13, 13, 26, tzinfo=datetime.timezone.utc), 'commenter': 'amete', 'type': 'User'}, {'comment_id': 664543417, 'comment_body': ""We probably don't need this empty line."", 'comment_created': datetime.datetime(2021, 7, 6, 13, 13, 44, tzinfo=datetime.timezone.utc), 'commenter': 'amete', 'type': 'User'}, {'comment_id': 664546796, 'comment_body': 'Missing newline at the end of the line.', 'comment_created': datetime.datetime(2021, 7, 6, 13, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'amete', 'type': 'User'}, {'comment_id': 664549005, 'comment_body': ""We don't really need to include this header in the source files since it's already in the header, no?"", 'comment_created': datetime.datetime(2021, 7, 6, 13, 20, 49, tzinfo=datetime.timezone.utc), 'commenter': 'amete', 'type': 'User'}, {'comment_id': 664551925, 'comment_body': 'I think we can define this in the source file instead (applies to other cases too) and un-define it after using. Also, we can perhaps call it something more explanatory, e.g. `MONITOR_NAME`. ', 'comment_created': datetime.datetime(2021, 7, 6, 13, 24, 22, tzinfo=datetime.timezone.utc), 'commenter': 'amete', 'type': 'User'}, {'comment_id': 664552810, 'comment_body': 'Missing newline at the end of the line.', 'comment_created': datetime.datetime(2021, 7, 6, 13, 25, 25, tzinfo=datetime.timezone.utc), 'commenter': 'amete', 'type': 'User'}, {'comment_id': 665161490, 'comment_body': ""If it's going to be private maybe should it be something like `THIS_MONITOR_NAME_` (or were you thinking of calling it, e.g., `COUNTMON_NAME_` (different in each monitor).\r\n\r\nI agree that undefining it at the end is smart - stops it from leaking out."", 'comment_created': datetime.datetime(2021, 7, 7, 8, 33, 46, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 665165482, 'comment_body': ""Very trivial point, but can you change `which` to `that` (it's a defining clause)"", 'comment_created': datetime.datetime(2021, 7, 7, 8, 38, 56, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}]","[{'commit_sha': '1da1807fe444d551e4874829775935a96f14c23d', 'committer_username': 'quantum-shift', 'committer_name': 'Anubhab Das', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 15, 7, 12, 23, tzinfo=datetime.timezone.utc)}]",Anubhab Das,61076821,,User,,5,,0,0
691916948,Added command line switches to control logging level of monitors,"Command line switches `--level LEV` and `--level MON:LEV` have been added. These can be used to set the minimum global logging level as well as minimum logging level for individual monitors.

The README has been updated to include cloning instructions (`--recurse-submodules`) as prmon now includes spdlog submodule. The new command line options have also been updated in the README.

Closes #189, closes #106.",True,193,https://api.github.com/repos/HSF/prmon/pulls/193,https://github.com/HSF/prmon/pull/193,closed,110,7,4,1,1,9,0,0,[],2021-07-17 11:17:43+00:00,2021-07-28 08:05:40+00:00,938877.0,"10 days, 20:47:57","[{'comment_id': 673750828, 'comment_body': 'Why not make this the native type, i.e., `size_type`?', 'comment_created': datetime.datetime(2021, 7, 21, 8, 3, 51, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 673751258, 'comment_body': 'Again, here use the native type, `size_type`', 'comment_created': datetime.datetime(2021, 7, 21, 8, 4, 32, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 673753344, 'comment_body': ""Can you give the valid values for the logging levels here please - I tried to use `DEBUG` and it didn't work ðŸ¤” "", 'comment_created': datetime.datetime(2021, 7, 21, 8, 7, 38, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 673755101, 'comment_body': 'The code indentation looks a bit broken here - remember to run the `clang_format` target', 'comment_created': datetime.datetime(2021, 7, 21, 8, 10, 12, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 673755556, 'comment_body': 'Better give the valid logging levels here in the docs', 'comment_created': datetime.datetime(2021, 7, 21, 8, 10, 52, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 673771250, 'comment_body': 'I think this might be case sensitive, `-l cpumon:debug` seems to work but not `-l cpumon:DEBUG`.', 'comment_created': datetime.datetime(2021, 7, 21, 8, 31, 31, tzinfo=datetime.timezone.utc), 'commenter': 'amete', 'type': 'User'}, {'comment_id': 673786134, 'comment_body': 'You are right, @amete. Do you think it is better to make it case insensitive?', 'comment_created': datetime.datetime(2021, 7, 21, 8, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'quantum-shift', 'type': 'User'}, {'comment_id': 673790807, 'comment_body': 'Yes, I think that would make life easier on the user side, would you agree @graeme-a-stewart?', 'comment_created': datetime.datetime(2021, 7, 21, 8, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'amete', 'type': 'User'}, {'comment_id': 673792532, 'comment_body': 'Yes, converting the string to the right case internally would help', 'comment_created': datetime.datetime(2021, 7, 21, 9, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}]","[{'commit_sha': 'ff58c1ee29b1624416b5dcb3fd7b199d0b956222', 'committer_username': 'quantum-shift', 'committer_name': 'Anubhab Das', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 15, 7, 12, 23, tzinfo=datetime.timezone.utc)}]",Anubhab Das,61076821,,User,,5,,0,0
714920873,Integrate GoogleTest framework for unit tests,"`package/tests/CMakeLists.txt` is updated to pull the GoogleTest framework. The minimum cmake version required to pull and run dependent tests is `3.14.0`.

On adding new targets dependent on gtest, please use `gtest_discover_tests(target_name)` to add the tests contained in the target.

A cmake option `BUILD_GTESTS` is added to toggle pulling and building gtest. It is turned off by default.

`build-test.sh` was updated to run CI with `-DBUILD_GTESTS=ON`",True,197,https://api.github.com/repos/HSF/prmon/pulls/197,https://github.com/HSF/prmon/pull/197,closed,25,1,4,2,3,1,0,0,[],2021-08-18 09:49:41+00:00,2021-08-18 12:02:18+00:00,7957.0,2:12:37,"[{'comment_id': 691095039, 'comment_body': ""Could you rename this variable to `BUILD_GTESTS` as it's really more general than the specific tests we have for values?"", 'comment_created': datetime.datetime(2021, 8, 18, 10, 6, 57, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}]","[{'commit_sha': 'e2df92d0f8f02c040db5a1b6f7d19bf540cb6484', 'committer_username': 'quantum-shift', 'committer_name': 'Anubhab Das', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 15, 7, 12, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce47c7261dca5db13cce6450f95fa78f4219bd2f', 'committer_username': 'quantum-shift', 'committer_name': 'Anubhab Das', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 15, 7, 12, 23, tzinfo=datetime.timezone.utc)}]",Anubhab Das,61076821,,User,,5,,0,0
698004516,Precooked tests for monitors,"Monitors have been adapted to optionally read from precooked sources. Monotonicity tests have been added for cpumon, iomon, netmon and memmon. A value test has been added for nvidiamon.

### Changes:

- The update_stats() methods of the abstract Imonitor base class and all of its derived classes have been modified to accept an optional argument read_path that points to the directory the monitor should read from.
- Auxiliary methods have been added to netmon and nvidiamon classes for reading from precooked sources to preserve the structure of the update_stats() method of these classes since both these classes use separate functions to procure the data.

### Source files added:
- scripts/precook_tests.py: This generates the scripts/precooked_tests directory that contains the precooked test data.
- tests/test_values.cpp: This is a test harness containing the new tests. GoogleTest framework is used for the tests. Presently, it contains monotonicity and value tests for cpumon, iomon, netmon, memmon and nvidiamon.",True,195,https://api.github.com/repos/HSF/prmon/pulls/195,https://github.com/HSF/prmon/pull/195,closed,639,31,46,1,8,20,0,0,[],2021-07-27 16:21:24+00:00,2021-08-25 15:01:29+00:00,2500805.0,"28 days, 22:40:05","[{'comment_id': 680332679, 'comment_body': 'I would call this `createTestMonotonic` - Monotonous has quite a different connotation! ', 'comment_created': datetime.datetime(2021, 7, 31, 9, 0, 45, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680333006, 'comment_body': ""It's a bit odd to use `write` instead of the much more standard `print()` function. Unless I am missing something can you change to `print()`?"", 'comment_created': datetime.datetime(2021, 7, 31, 9, 3, 44, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680333058, 'comment_body': 'Much better would be:\r\n\r\n```py\r\n""0 "" * 11\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 9, 4, 19, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680333137, 'comment_body': '```py\r\n""0 "" * 11\r\n```', 'comment_created': datetime.datetime(2021, 7, 31, 9, 5, 17, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680333844, 'comment_body': 'L22-30 are all the same code! Try something like:\r\n\r\n```py\r\n"" "".join([str(random.randint(1, 10)) for i in range(4)])\r\n```\r\n\r\nfor a much more concise way to write this', 'comment_created': datetime.datetime(2021, 7, 31, 9, 11, 43, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680334516, 'comment_body': '```py\r\nf""{fixed_value} "" * 4 \r\n```\r\n\r\nOne for @amete too - I think in this script we can use f-strings as it is not run by librarians or end users of `prmon`', 'comment_created': datetime.datetime(2021, 7, 31, 9, 18, 18, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680335141, 'comment_body': 'Again, too much repetition, try:\r\n\r\n```py\r\nfor field in ""rchar:"", ""wchar:"", ... \r\n    print(f""{field} {random.randint(0, char_lim)}, file=f)\r\n```\r\n\r\nYou can also get rid of the whole `if rand` outer switch with something like:\r\n```py\r\nfor field in ""rchar:"", ""wchar:"", ... \r\n    print(f""{field} {random.randint(0, char_lim) if rand else fixed_value}"", file=f)\r\n```\r\n', 'comment_created': datetime.datetime(2021, 7, 31, 9, 25, 16, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680335160, 'comment_body': 'See above comments on `make_io`', 'comment_created': datetime.datetime(2021, 7, 31, 9, 25, 44, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680335731, 'comment_body': ""Don't commit commented code"", 'comment_created': datetime.datetime(2021, 7, 31, 9, 31, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680335749, 'comment_body': ""Don't commit commented code"", 'comment_created': datetime.datetime(2021, 7, 31, 9, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680337349, 'comment_body': ""Here it would be much better to use `std::getline`, which should read entire lines at a time, up to the newline.\r\n\r\nThe reason that the more complex method was used in `prmon::cmd_pipe_output` is that when reading from a *pipe* the process that is being read from can produce output sporadically, causing `getline` to return partial lines. Here the read is from a file, so it's going to work just fine with `getline`."", 'comment_created': datetime.datetime(2021, 7, 31, 9, 46, 22, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 680337403, 'comment_body': 'Remove this commented block!', 'comment_created': datetime.datetime(2021, 7, 31, 9, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 694097780, 'comment_body': 'It would be clearer to define the fields as only the text string (e.g., `rchar`), then put the `"": ""` into the `print` statement', 'comment_created': datetime.datetime(2021, 8, 23, 15, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 694098570, 'comment_body': 'See above:\r\n```\r\nf""{field}: {random.randint(0, char_lim) if rand else fixed_value}""\r\n```\r\nis clearer', 'comment_created': datetime.datetime(2021, 8, 23, 15, 52, 59, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 694098954, 'comment_body': 'See above:\r\n```\r\nf""{field}: {random.randint(0, char_lim) if rand else fixed_value}""\r\n```\r\nis clearer', 'comment_created': datetime.datetime(2021, 8, 23, 15, 53, 27, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 694099127, 'comment_body': 'ditto for comment above', 'comment_created': datetime.datetime(2021, 8, 23, 15, 53, 39, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 694106113, 'comment_body': 'Best practice is to name the main entry point function `main()`', 'comment_created': datetime.datetime(2021, 8, 23, 16, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 694108419, 'comment_body': 'It would be nice if this could be configured on the command line - use the `argparse` module to do that (tons of examples around too, e.g., \r\n\r\nhttps://github.com/HSF/prmon/blob/d1f512fd3e17182bbd9b4c45e1e57e0ea4d6dea5/package/scripts/prmon_plot.py#L134-L140', 'comment_created': datetime.datetime(2021, 8, 23, 16, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}, {'comment_id': 694272487, 'comment_body': 'Do you mean the number of iterations or the name of the directory created?', 'comment_created': datetime.datetime(2021, 8, 23, 20, 6, 24, tzinfo=datetime.timezone.utc), 'commenter': 'quantum-shift', 'type': 'User'}, {'comment_id': 694675022, 'comment_body': 'Why not both! Once you add `argparse` customisation becomes very easy and both could be useful for any future set of pre-cooked values.', 'comment_created': datetime.datetime(2021, 8, 24, 9, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'graeme-a-stewart', 'type': 'User'}]","[{'commit_sha': '1979b54c10c1dae81d67c1bac4291d763852d394', 'committer_username': 'quantum-shift', 'committer_name': 'Anubhab Das', 'committer_email': None, 'commit_date': datetime.datetime(2020, 2, 15, 7, 12, 23, tzinfo=datetime.timezone.utc)}]",Anubhab Das,61076821,,User,,5,,0,0

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
123905523,prmon,HSF/prmon,C++,20,45,15,9,141,3,10,0,"[{'id': 740881518, 'number': 205, 'closed': datetime.datetime(2021, 10, 7, 8, 10, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 22, 21, 29, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1248073.0, 'time_delta': '14 days, 10:41:13', 'additions': 298, 'deletions': 10, 'state': 'closed'}, {'id': 721376100, 'number': 200, 'closed': datetime.datetime(2021, 8, 27, 14, 50, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 27, 14, 20, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1760.0, 'time_delta': '0:29:20', 'additions': 27, 'deletions': 4, 'state': 'closed'}, {'id': 719729482, 'number': 198, 'closed': datetime.datetime(2021, 8, 25, 15, 44, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 25, 15, 21, 30, tzinfo=datetime.timezone.utc), 'time_taken': 1376.0, 'time_delta': '0:22:56', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 714920873, 'number': 197, 'closed': datetime.datetime(2021, 8, 18, 12, 2, 18, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 9, 49, 41, tzinfo=datetime.timezone.utc), 'time_taken': 7957.0, 'time_delta': '2:12:37', 'additions': 25, 'deletions': 1, 'state': 'closed'}, {'id': 698004516, 'number': 195, 'closed': datetime.datetime(2021, 8, 25, 15, 1, 29, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 27, 16, 21, 24, tzinfo=datetime.timezone.utc), 'time_taken': 2500805.0, 'time_delta': '28 days, 22:40:05', 'additions': 639, 'deletions': 31, 'state': 'closed'}, {'id': 692743054, 'number': 194, 'closed': datetime.datetime(2021, 7, 21, 7, 17, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 16, 12, 27, tzinfo=datetime.timezone.utc), 'time_taken': 140699.0, 'time_delta': '1 day, 15:04:59', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 691916948, 'number': 193, 'closed': datetime.datetime(2021, 7, 28, 8, 5, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 17, 11, 17, 43, tzinfo=datetime.timezone.utc), 'time_taken': 938877.0, 'time_delta': '10 days, 20:47:57', 'additions': 110, 'deletions': 7, 'state': 'closed'}, {'id': 677024753, 'number': 190, 'closed': datetime.datetime(2021, 7, 7, 17, 30, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 24, 11, 22, 26, tzinfo=datetime.timezone.utc), 'time_taken': 1145260.0, 'time_delta': '13 days, 6:07:40', 'additions': 267, 'deletions': 101, 'state': 'closed'}]"
