pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
675962751,Modify clad diff fns signature to have separate arg for derived fn,"This solution is suggested by @vgvassilev

This PR modifies the signature of clad differentiation functions to have separate arguments for original and derived functions. For example, updated signature of `clad::gradient` is:
```cpp
gradient(F f, ArgSpec args = """", DerivedFnType derivedFn = static_cast<DerivedFnType>(nullptr),
               const char* code = """");
```

Benefits of using the updated signature:
- No need to use `reinterpret_cast` in clad differentiation functions for deducing the correct return type, since the original and derived functions are not sharing the same argument now.
- No need to re-instantiate/deduce template specialization again in `DiffPlanner::updateCall`, since there's a different argument for derived function now already with the correct type.
- Fix long-standing issue #139. 

Closes #139",True,252,https://api.github.com/repos/vgvassilev/clad/pulls/252,https://github.com/vgvassilev/clad/pull/252,closed,44,62,2,1,5,0,0,0,[],2021-06-23 05:29:05+00:00,2021-06-23 11:16:52+00:00,20867.0,5:47:47,[],"[{'commit_sha': 'c35ff02798889c3bf7acf5b386f15e85705d0a56', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
672685897,Preserve original member function qualifiers in the derived function.,"When differentiating member functions using `clad::gradient`, member function qualifiers (`const`, `volatile`, `noexcept`, `&`, `&&`) were not preserved. For example, differentiating,

```c++
double const_volatile_mem_fn(double i, double j) const volatile;
```

will create the gradient function with the following prototype.

```c++
void const_volatile_mem_fn_grad(double i, double j, double *_result); // const volatile qualifiers lost
```

This PR fixes this behaviour, and the gradient function will now have all the qualifiers of the original function.

Benefits of preserving member function qualifiers
- Increased consistency in the library, since differentiation using `clad::differentiate` preserve original qualifiers.
- Increased usability of derived functions in cases where constness is involved. For example, const member functions can be called on both `const` and non-const objects, so users will also expect the same behaviour from derived functions of those const member functions, but if the `const` qualifier is not preserved, then the derived function can only be called on non-const objects, thus restricting its usage. 

Closes #210 
",True,249,https://api.github.com/repos/vgvassilev/clad/pulls/249,https://github.com/vgvassilev/clad/pull/249,closed,105,99,3,2,1,2,0,0,[],2021-06-17 14:22:35+00:00,2021-06-22 20:10:47+00:00,452892.0,"5 days, 5:48:12","[{'comment_id': 656271912, 'comment_body': 'Can you preserve the indentation, even if wrong, to outline the real changes to this file?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656541122, 'comment_body': 'Done, now the previous indentation is preserved.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': '3aa50c417d454cf554a781731bab91526cd57bfc', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '031649224e3bf2df8c61737bfd2b2cc2293f1002', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
673873196,Modify clad::hessian to support differentiating member functions.,"Progress Checklist:
- [x] Modify `clad::hessian` to support differentiating member functions for clang>=9
- [x] Fix compatibility issues to support earlier clang versions
- [x] Add basic tests",True,250,https://api.github.com/repos/vgvassilev/clad/pulls/250,https://github.com/vgvassilev/clad/pull/250,closed,127,10,5,1,1,24,0,0,[],2021-06-19 12:28:08+00:00,2021-06-29 17:26:32+00:00,881904.0,"10 days, 4:58:24","[{'comment_id': 656261801, 'comment_body': 'How about something like `BuildCallExprToFunction`? The word `relevant` does not have any meaning here.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656262095, 'comment_body': 'Maybe run clang-format on this PR.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656262811, 'comment_body': '```suggestion\r\n          new (m_Context) CXXThisExpr(noLoc, derMethod->getThisType(), /*IsImplicit=*/ true);\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 14, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656263644, 'comment_body': 'We should add the parameter name as a comment. That way we improve documentation and allow clang-tidy to diagnose if parameters were inverted.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656264337, 'comment_body': 'That hyphenation is really bad for reading. Is that what our clang-format config suggests?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656269242, 'comment_body': ""Hardcoding these values looks worrying. Can't we use `Sema::BuildMemberReferenceExpr` instead?"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656511984, 'comment_body': 'Okay, I will add argument names while calling clang functions. \r\n\r\nI have one doubt related to compatibility issues here,\r\nWe can create `this` expression easily using `Sema::BuildCXXThisExpr` for clang >= 9.\r\nFor clang 8, we can create `this` expression, using `CXXThis` constructor and `m_Sema.CheckCXXThisCapture`.\r\nFor clang <= 7, creating `this` is much more complicated, since `CXXMethodDecl::getThisType()` is missing along with some other useful methods which can help to create qualified `this` type. \r\n\r\nWhile being in a situation like this, should we aim to use code that works for all clang versions or should we create a macro in the `compatibility.h` file, such that it creates `this` expression with the most readable code for any given clang version? \r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 22, 19, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656513887, 'comment_body': 'Yes, this is what our clang-format configuration suggests. I will try to improve our clang-config configuration for nicely formatting this code. ', 'comment_created': datetime.datetime(2021, 6, 22, 19, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656517403, 'comment_body': 'Yes, agreed. I only used those values because they seemed reasonable, and I did not know about any option other than hard-coding them. \r\nI will look into `Sema::BuilldMemberReferenceExpr`.', 'comment_created': datetime.datetime(2021, 6, 22, 19, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656518084, 'comment_body': 'Okay, I will make the necessary changes. ', 'comment_created': datetime.datetime(2021, 6, 22, 19, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656518622, 'comment_body': 'clang-format suggests this exact same code. I will try to improve clang-format configuration to improve formatting for cases like these. ', 'comment_created': datetime.datetime(2021, 6, 22, 19, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656520277, 'comment_body': ""I would prefer the latter option. I think that's the take of @alexander-penev, too but let's ask him."", 'comment_created': datetime.datetime(2021, 6, 22, 19, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656521402, 'comment_body': ""I wanted to convey that this function can build calls to free functions as well as member functions depending on the passed function. Yes, `relevant` don't do a very good job for this purpose. `BuildCallExprToFunction` can be a bit misleading since in clang sema `sema::BuildCallExpr` only builds call to free functions. I will try to come up with a good name for this function. "", 'comment_created': datetime.datetime(2021, 6, 22, 19, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 659164203, 'comment_body': '@parth-07  could you please put this function in a separate PR(so that it can be merged early) and in `VisitorBase`. I require this functionality in `ReverseModeVisitor` and it would be great if I could use your function.', 'comment_created': datetime.datetime(2021, 6, 26, 12, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 659180267, 'comment_body': 'As of now, I only have to complete this function to complete the PR (the PR consists mostly of this function only), if the PR requires any additional tasks then I will create a separate PR for this function. I will try to complete this function as soon as possible :)', 'comment_created': datetime.datetime(2021, 6, 26, 15, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660101075, 'comment_body': 'The current `ContinuationIndentWidth` value for clang-format configuration is 4 , setting it to 2, slightly improves the formatting in this case. \r\nBut the method name still gets formatted on the next line, I am unable to find any configuration option which will format the method name on the same line as `m_Sema` in this case. Should I change `ContinuationIndentWidth` to 2 ? ', 'comment_created': datetime.datetime(2021, 6, 28, 20, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660106883, 'comment_body': 'Yes, `Sema::BuildMemberReference` works perfectly, I have modified the code to use it instead of `MemberExpr::create`', 'comment_created': datetime.datetime(2021, 6, 28, 20, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660120754, 'comment_body': 'I am unable to come up with a good function name for this, I have decided on the suggested name `BuildCallExprToFunction`, it also goes well with other similar functions in `VisitorBase`. Please tell me if I should modify this function name. ', 'comment_created': datetime.datetime(2021, 6, 28, 21, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660667138, 'comment_body': '```suggestion\r\n      SemaRef.BuildCXXThisExpr(noLoc, thisType, /*IsImplicit=*/ true));\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 14, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 660667328, 'comment_body': '```suggestion\r\n      CXXThisExpr(noLoc, thisType, /*IsImplicit=*/ true);\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 14, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 660667884, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 14, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 660758208, 'comment_body': 'I ran clang-format on some parts of the code, I will run it on all the added code now. \r\nYes, I will update all uses of the kind `/*Base*/` to `/*Base=*/`', 'comment_created': datetime.datetime(2021, 6, 29, 15, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660769546, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 29, 16, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660769745, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 29, 16, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': '2e3b4e5541744eece92077ebd99ad721cc96588f', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
658482211,Add support for building doxygen documentation using cmake,"CMake options and variables added:
- `CLAD_INCLUDE_DOCS`: Generate targets of all the _enabled_ documentation tools
- `CLAD_ENABLE_DOXYGEN`: Enables the generation of browsable HTML documentation using doxygen. Defaults to OFF.

To build documentation,
1) Run CMake with `-DCLAD_ENABLE_DOXYGEN=ON` and `-DCLAD_INCLUDE_DOCS=ON` flags
2) Run `make doxygen-clad` in the build directory.

This PR also adds configuration files needed to easily host clad documentation on [readthedocs.org](https://readthedocs.org/).
I have temporarily hosted clad documentation [here](https://trying-read-the-docs.readthedocs.io/en/latest/index.html).",True,235,https://api.github.com/repos/vgvassilev/clad/pulls/235,https://github.com/vgvassilev/clad/pull/235,closed,169,48,6,3,3,4,0,0,[],2021-05-31 19:16:29+00:00,2021-06-09 10:35:06+00:00,746317.0,"8 days, 15:18:37","[{'comment_id': 646023374, 'comment_body': ""Would it make sense to use the latest supported version? As of today it's llvm-12."", 'comment_created': datetime.datetime(2021, 6, 5, 18, 48, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 646098963, 'comment_body': 'Yes, I will modify `llvm` packages to the latest versions available in ubuntu 18.04 (readthedocs runner uses ubuntu 18.04). But since we are just using these packages for configuring with CMake, and not actually building clad (we are just building docs), updated llvm packages should not make much difference. ', 'comment_created': datetime.datetime(2021, 6, 6, 8, 48, 57, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 646100872, 'comment_body': 'Thanks!', 'comment_created': datetime.datetime(2021, 6, 6, 9, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 647993322, 'comment_body': 'As per the package list [here](https://packages.ubuntu.com/bionic/allpackages), `llvm-10` and `clang-10` are the latest versions available, I have updated the configuration file to use them.', 'comment_created': datetime.datetime(2021, 6, 9, 6, 8, 49, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': '6da5878dc5eaf249fe9502b31f9cdc88ebd396a7', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa24a953f32e426b52edbfe6d34eeefafb5212ed', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4c8482b656bcd281f9ea0a2647a6b1b4f36ebfe2', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
665100487,Add support for differentiating functors in forward mode,"This PR aims to add support for differentiating functors in the forward differentiation mode.

- [x] Implicitly differentiate `operator()` member function when functor is passed
- [x] Implicitly pass functor while executing derived function using `CladFunction`
- [x] Add tests
- [x] Add user-friendly errors using `Sema` diagnostics when an object of class without overloaded `operator()` or multiple overloads of call operator is passed to be differentiated.
- [x] Add demo

By differentiating functors, I mean, differentiating the `operator()` member function when a functor is passed, and implicitly executing the derived function using the passed functor.

Functors can be passed to `clad::differentiate` both by reference and as pointers. For example:
```c++
Experiment E; // a functor
auto d_fn = clad::differentiate(&E, ""i"");
auto d_fnRef = clad::differentiate(E, ""i"");
...
...
std::cout<<d_fn.execute(1,  3)<<""\n""; // no need to pass object while executing derived function.
```
## Implemented solution

The solution is implemented in 2 steps:
- Differentiate `operator()` member function whenever functor (class type object) is passed to be differentiated.
- Execute derived function through the functor object.

**1st Step Implementation:**

DiffPlanner `getArgFunction` is responsible for obtaining function to be differentiated from the call expression of clad differentiation functions.

It currently behaves as follows:
- Return `DeclRefExpr` node of the 1st argument (which is, the function to be differentiated), and update the `RelevantAncestor` parameter to the nearest ancestor of 1st argument which is of type `ImplicitCastExpr` or `UnaryOperator`.

`getArgFunction` has been modified such that, whenever a class type object is to be differentiated, it provides all the data for the `operator()` member function of the class type. By all the data, I am referring to `DeclRefExpr` of the `operator()` method, the correct nearest ancestor for the `operator()` method.

But since the `operator()` method hasn't actually passed, these nodes (`DeclRefExpr` and ancestors of the `operator()` method) does not actually exist, and needs to be created inside `getArgFunction`. This effectively converts calls to differentiate class type object to calls to differentiate a member function for the rest of the clad.

**2nd Step Implementation:**

`CladFunction` has been modified to save an object through which derived member functions should be called when the user does not explicitly pass an object while calling `CladFunction::execute`

This behaviour is summarised in the following code snippet:

```c++
SomeClass A, B;
auto d_memFn = clad::differentiate(&SomeClass::SomeMemberFn, ""i"");
d_memFn.setObject(&A); // set A as default object for executing derived fn
d_memFn.execute(1, 3); // calls A.derivedFn(1, 3);
d_memFn.execute(B, 1, 3); // calls B.derivedFn(1, 3);
``` 
When a functor object is passed to be differentiated, it is saved in the corresponding `CladFunction` object so that it can be automatically taken by the `CladFunction::execute` method to call the derived member function.

**Modifications to `clad::differentiate`**

`clad::differentiate` is modified to have 2 overloads, one for differentiating functions (and methods), and the other for differentiating functors.
2 separate overloads are required because function (and method) pointers need to be passed by value whereas objects need to be passed by reference (because we need to determine `constness` property (among others) of passed functor object)
",True,240,https://api.github.com/repos/vgvassilev/clad/pulls/240,https://github.com/vgvassilev/clad/pull/240,closed,780,49,7,20,1,52,0,0,[],2021-06-08 17:11:32+00:00,2021-07-08 14:43:00+00:00,2583088.0,"29 days, 21:31:28","[{'comment_id': 661157444, 'comment_body': ""@ioanaif, could you confirm that's the way to go here?"", 'comment_created': datetime.datetime(2021, 6, 30, 6, 9, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661157829, 'comment_body': '```suggestion\r\n        : CladFunction(f, code, &functor) {};\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 6, 10, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661160312, 'comment_body': 'What about references to pointers?', 'comment_created': datetime.datetime(2021, 6, 30, 6, 15, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661161936, 'comment_body': 'Why we have `ForwMode` in the name? Why this trait is specific to forward mode? Can you add an explanation in a comment?', 'comment_created': datetime.datetime(2021, 6, 30, 6, 19, 28, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661162193, 'comment_body': '```suggestion\r\n  /// Find and return an overloaded call operator.\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 6, 20, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661162417, 'comment_body': '```suggestion\r\n  /// \\returns `CladFunction` object to access the corresponding derived function.\r\n```', 'comment_created': datetime.datetime(2021, 6, 30, 6, 20, 27, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661163230, 'comment_body': ""Could you add a comment explaining why we are guaranteed to have 1 overloaded call operator. Eg. why it can't be 0."", 'comment_created': datetime.datetime(2021, 6, 30, 6, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661163730, 'comment_body': 'Why that is not on the previous line?', 'comment_created': datetime.datetime(2021, 6, 30, 6, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661164203, 'comment_body': 'No need of doxygen style comments in the function bodies.', 'comment_created': datetime.datetime(2021, 6, 30, 6, 24, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661165000, 'comment_body': 'Can you add a case of a class which does not have an overloaded call operator and two call operators?', 'comment_created': datetime.datetime(2021, 6, 30, 6, 25, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661168710, 'comment_body': 'Hi! Yes, it is. ', 'comment_created': datetime.datetime(2021, 6, 30, 6, 33, 10, tzinfo=datetime.timezone.utc), 'commenter': 'ioanaif', 'type': 'User'}, {'comment_id': 661180607, 'comment_body': 'This type trait will define member typedef as `T` for types `T*`, `T&` and `T*&` so references to pointers are covered. ', 'comment_created': datetime.datetime(2021, 6, 30, 6, 54, 34, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 661185639, 'comment_body': 'It is because the rules for computing the signature of derived functions are different in forward and reverse mode, I will add an explanation for this in the comments. \r\n', 'comment_created': datetime.datetime(2021, 6, 30, 7, 2, 59, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 661187134, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2021, 6, 30, 7, 5, 41, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 661187985, 'comment_body': 'This is what clang-format suggested, I will modify it and look into clang-format configurations for this. ', 'comment_created': datetime.datetime(2021, 6, 30, 7, 7, 11, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 661221307, 'comment_body': 'The clang-format suggests removing space between constructor signature and constructor initializer list. I am adding the space, and I will also check regarding configuration in clang-format to add space before the constructor initializer list. ', 'comment_created': datetime.datetime(2021, 6, 30, 7, 56, 33, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 661263506, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 30, 8, 53, 41, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 661268199, 'comment_body': ""The current solution does not support multiple call operators, that's why class types with only a single call operator are present in tests."", 'comment_created': datetime.datetime(2021, 6, 30, 8, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 661268547, 'comment_body': 'Done.', 'comment_created': datetime.datetime(2021, 6, 30, 9, 0, 17, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 661341481, 'comment_body': 'But it should be able to complain if there is no call operator. Do we have a test for this?', 'comment_created': datetime.datetime(2021, 6, 30, 10, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 661377996, 'comment_body': 'No, I will add a test for this. ', 'comment_created': datetime.datetime(2021, 6, 30, 11, 35, 45, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662682917, 'comment_body': 'tests added for class with no call operator defined and class with multiple call operators defined.', 'comment_created': datetime.datetime(2021, 7, 2, 1, 42, 19, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662754964, 'comment_body': ""We don't need the parameter names for each parameter but just for things like constants, `nullptr` which are hard to guess because they are not passed in a variable-like style."", 'comment_created': datetime.datetime(2021, 7, 2, 5, 55, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662755315, 'comment_body': 'Maybe explain why we need those `static_cast`s here.', 'comment_created': datetime.datetime(2021, 7, 2, 5, 56, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662756077, 'comment_body': '```suggestion\r\n                ""\'%0\' has no defined operator()"";\r\n```', 'comment_created': datetime.datetime(2021, 7, 2, 5, 58, 14, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662756926, 'comment_body': '```suggestion\r\n                ""\'%0\' has multiple definitions of operator(). ""\r\n                ""Multiple definitions of call operators are not supported."";\r\n```\r\n\r\nWe should probably issue a note for each definition -- see how it is done in clang on ambiguous overload calls.', 'comment_created': datetime.datetime(2021, 7, 2, 6, 0, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662758005, 'comment_body': 'We should have used an early exit after we issue the diagnostic and turn this into an assert.', 'comment_created': datetime.datetime(2021, 7, 2, 6, 3, 11, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662761400, 'comment_body': 'Is that what clang uses to lookup a call operator?', 'comment_created': datetime.datetime(2021, 7, 2, 6, 11, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662761780, 'comment_body': 'Does the documentation still describe what this function does?', 'comment_created': datetime.datetime(2021, 7, 2, 6, 12, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662762770, 'comment_body': ""Why can't we use the `RD`'s location and drop the need for `m_Root`?"", 'comment_created': datetime.datetime(2021, 7, 2, 6, 15, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662848474, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2021, 7, 2, 8, 46, 51, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662848970, 'comment_body': 'It is for doing perfect forwarding, I will add a comment explaining this. ', 'comment_created': datetime.datetime(2021, 7, 2, 8, 47, 32, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662849504, 'comment_body': 'Okay. ', 'comment_created': datetime.datetime(2021, 7, 2, 8, 48, 18, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662850106, 'comment_body': ""I am not sure, what's the ideal way of checking how clang lookup up an operator?"", 'comment_created': datetime.datetime(2021, 7, 2, 8, 49, 9, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662852168, 'comment_body': ""RD's location is the location of the type definition, we need the error squiggle on object argument in the call to `clad::differentiate`"", 'comment_created': datetime.datetime(2021, 7, 2, 8, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662852408, 'comment_body': 'No, it needs to be updated. I will update this.', 'comment_created': datetime.datetime(2021, 7, 2, 8, 52, 39, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662864483, 'comment_body': ""Then why don't we pass only that source location."", 'comment_created': datetime.datetime(2021, 7, 2, 9, 10, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662866297, 'comment_body': 'The usual approach: you can create a two line example, run clang on it and break at `DeclContext::lookup` to see the call stack.', 'comment_created': datetime.datetime(2021, 7, 2, 9, 13, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 662871349, 'comment_body': 'Okay, I will see how it is done in clang on ambiguous overload calls, and try to add it here. ', 'comment_created': datetime.datetime(2021, 7, 2, 9, 21, 31, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662876839, 'comment_body': 'Okay :), I will check how clang handles this. ', 'comment_created': datetime.datetime(2021, 7, 2, 9, 30, 22, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 662877730, 'comment_body': 'Yes, that seems better, I will modify the code to just pass that source location', 'comment_created': datetime.datetime(2021, 7, 2, 9, 31, 38, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 663352861, 'comment_body': 'done.', 'comment_created': datetime.datetime(2021, 7, 3, 11, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 663353128, 'comment_body': 'Done, now clad issues a note for each candidate function.', 'comment_created': datetime.datetime(2021, 7, 3, 11, 15, 45, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 663371006, 'comment_body': 'clang uses `Sema::LookupQualifiedName` which internally uses `DeclContext::lookup` for call operator lookup. Should we use `Sema::LookupQualifiedName` instead of `DeclContext::lookup` ? ', 'comment_created': datetime.datetime(2021, 7, 3, 14, 26, 25, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 664033764, 'comment_body': 'We should re-use the diagnostics from Sema which checks for visibility.', 'comment_created': datetime.datetime(2021, 7, 5, 16, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 664034645, 'comment_body': '`removed` or `replaced`?', 'comment_created': datetime.datetime(2021, 7, 5, 16, 13, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 664035181, 'comment_body': 'Can we demonstrate the usage of `setObject` and `clearObject` as well?', 'comment_created': datetime.datetime(2021, 7, 5, 16, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 664035556, 'comment_body': ""Yes, I'd prefer so."", 'comment_created': datetime.datetime(2021, 7, 5, 16, 15, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 664050730, 'comment_body': 'The default value should be removed from `Cladfunction` once all clad differentiation functions support functors since the functor type will then be computed in the corresponding clad differentiation function. ', 'comment_created': datetime.datetime(2021, 7, 5, 16, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 664054351, 'comment_body': 'Yes, I will modify the demo to include the demonstration of `setObject` and `clearObject`. ', 'comment_created': datetime.datetime(2021, 7, 5, 17, 1, 26, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 664506074, 'comment_body': 'Done', 'comment_created': datetime.datetime(2021, 7, 6, 12, 24, 9, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 664506865, 'comment_body': 'Done, now we are using the `Sema::LookupQualifiedName` function to lookup call operators.', 'comment_created': datetime.datetime(2021, 7, 6, 12, 25, 18, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': 'ae6100ccd357b3381900ec9ac42c532403fa2003', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bcac6642b086768044fd0e98189aa180d365e0cc', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed105420103e1188aa956f776d15fe6b0bb0c598', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54f04dfcd8db65c745cafbba088bcc0158cb45f7', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '79d33b416956c14de63400046dc82e82684ce45a', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e7f78ae050d662738080147256f327f011c6fad1', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '94d5e64ba6d873161d388e8a8414ba6fa4564670', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e0e641f613845c78cce672b3639baf9e661a0f3', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4ecb7b2132b824335a0eb43a4b3d0038769acdf1', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '790bf87a9b0d7029c83310fc8e5bbde110d50a69', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e4a275e6f7c4637864cf803b6c0cc047d1170eb', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b7795a5a01a2aaffffe21741c28d96581a10e2c1', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a65f6f9b2f24b6955fbe2f8f8e1458e2c5744017', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '508c97e2a72dfdb7dd02e8dd32f23fa036077d3e', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bfc09e2c65c062ffd809ef99cc87b5238a0a83be', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4dde5ffe013fc019eedb749d41c0eae4f6a8b227', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c69e2af3971623d55fb0138d44eb35b948e2b067', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'df57cf6b43d1e373fe443daca5535bde00c0c9ee', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5bc328bf905c88831123ae17dc786b2503d770f', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef9299b465b873507738c5caa433c5eb0bbbb047', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
665767219,Remove dependency of how the fn is passed to clad diff functions,"Currently clad update calls like these:
```c++
auto d_fn_1 = clad::differentiate(freeFn, ...);
auto d_fn_2 = clad::differentiate(&freeFn, ...);
auto d_memFn = clad::differentiate(&SomeClass::SomeMethod, ...);
```
to
```c++
auto d_fn_1 = clad::differentiate(derivedFn, ...);
auto d_fn_2 = clad::differentiate(&derivedFn, ...);
auto d_memFn = clad::differentiate(&SomeClass::SomeMethodDerivedFn, ...);
```

While updating arguments, `&` is only added to the derived fn argument, if `&` was originally present. To achieve this behaviour clad have to find the relevant parent of fn argument `DeclRefExpr`, then act differently depending on if the relevant parent found was `UnaryOperator` or some cast. 

We can instead always add `&` with the derived fn argument. 
This way we will not need to keep track of whether the most recent parent was `ImplicitCastExpr` or `UnaryOperator`, we will not need to differentiate the 2 cases. And this will have no other change in AST other than `ImplicitCastExpr` changed to `UnaryOperator` in fn arguments of clad differentiation calls, since as per clad implementation, function types are always decomposed to function pointer types while passing them to clad differentiation functions. 
",True,243,https://api.github.com/repos/vgvassilev/clad/pulls/243,https://github.com/vgvassilev/clad/pull/243,closed,12,68,1,1,7,0,0,0,[],2021-06-09 10:17:16+00:00,2021-07-12 20:47:17+00:00,2889001.0,"33 days, 10:30:01",[],"[{'commit_sha': '3915188cee845f5aa5052c7cf2d8fb7391acb347', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
672685897,Preserve original member function qualifiers in the derived function.,"When differentiating member functions using `clad::gradient`, member function qualifiers (`const`, `volatile`, `noexcept`, `&`, `&&`) were not preserved. For example, differentiating,

```c++
double const_volatile_mem_fn(double i, double j) const volatile;
```

will create the gradient function with the following prototype.

```c++
void const_volatile_mem_fn_grad(double i, double j, double *_result); // const volatile qualifiers lost
```

This PR fixes this behaviour, and the gradient function will now have all the qualifiers of the original function.

Benefits of preserving member function qualifiers
- Increased consistency in the library, since differentiation using `clad::differentiate` preserve original qualifiers.
- Increased usability of derived functions in cases where constness is involved. For example, const member functions can be called on both `const` and non-const objects, so users will also expect the same behaviour from derived functions of those const member functions, but if the `const` qualifier is not preserved, then the derived function can only be called on non-const objects, thus restricting its usage. 

Closes #210 
",True,249,https://api.github.com/repos/vgvassilev/clad/pulls/249,https://github.com/vgvassilev/clad/pull/249,closed,105,99,3,2,1,2,0,0,[],2021-06-17 14:22:35+00:00,2021-06-22 20:10:47+00:00,452892.0,"5 days, 5:48:12","[{'comment_id': 656271912, 'comment_body': 'Can you preserve the indentation, even if wrong, to outline the real changes to this file?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 22, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656541122, 'comment_body': 'Done, now the previous indentation is preserved.', 'comment_created': datetime.datetime(2021, 6, 22, 20, 4, 9, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': '3aa50c417d454cf554a781731bab91526cd57bfc', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '031649224e3bf2df8c61737bfd2b2cc2293f1002', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
673873196,Modify clad::hessian to support differentiating member functions.,"Progress Checklist:
- [x] Modify `clad::hessian` to support differentiating member functions for clang>=9
- [x] Fix compatibility issues to support earlier clang versions
- [x] Add basic tests",True,250,https://api.github.com/repos/vgvassilev/clad/pulls/250,https://github.com/vgvassilev/clad/pull/250,closed,127,10,5,1,1,24,0,0,[],2021-06-19 12:28:08+00:00,2021-06-29 17:26:32+00:00,881904.0,"10 days, 4:58:24","[{'comment_id': 656261801, 'comment_body': 'How about something like `BuildCallExprToFunction`? The word `relevant` does not have any meaning here.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 11, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656262095, 'comment_body': 'Maybe run clang-format on this PR.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 11, 56, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656262811, 'comment_body': '```suggestion\r\n          new (m_Context) CXXThisExpr(noLoc, derMethod->getThisType(), /*IsImplicit=*/ true);\r\n```', 'comment_created': datetime.datetime(2021, 6, 22, 14, 12, 41, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656263644, 'comment_body': 'We should add the parameter name as a comment. That way we improve documentation and allow clang-tidy to diagnose if parameters were inverted.', 'comment_created': datetime.datetime(2021, 6, 22, 14, 13, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656264337, 'comment_body': 'That hyphenation is really bad for reading. Is that what our clang-format config suggests?', 'comment_created': datetime.datetime(2021, 6, 22, 14, 14, 19, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656269242, 'comment_body': ""Hardcoding these values looks worrying. Can't we use `Sema::BuildMemberReferenceExpr` instead?"", 'comment_created': datetime.datetime(2021, 6, 22, 14, 19, 40, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656511984, 'comment_body': 'Okay, I will add argument names while calling clang functions. \r\n\r\nI have one doubt related to compatibility issues here,\r\nWe can create `this` expression easily using `Sema::BuildCXXThisExpr` for clang >= 9.\r\nFor clang 8, we can create `this` expression, using `CXXThis` constructor and `m_Sema.CheckCXXThisCapture`.\r\nFor clang <= 7, creating `this` is much more complicated, since `CXXMethodDecl::getThisType()` is missing along with some other useful methods which can help to create qualified `this` type. \r\n\r\nWhile being in a situation like this, should we aim to use code that works for all clang versions or should we create a macro in the `compatibility.h` file, such that it creates `this` expression with the most readable code for any given clang version? \r\n\r\n', 'comment_created': datetime.datetime(2021, 6, 22, 19, 17, 28, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656513887, 'comment_body': 'Yes, this is what our clang-format configuration suggests. I will try to improve our clang-config configuration for nicely formatting this code. ', 'comment_created': datetime.datetime(2021, 6, 22, 19, 20, 36, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656517403, 'comment_body': 'Yes, agreed. I only used those values because they seemed reasonable, and I did not know about any option other than hard-coding them. \r\nI will look into `Sema::BuilldMemberReferenceExpr`.', 'comment_created': datetime.datetime(2021, 6, 22, 19, 26, 8, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656518084, 'comment_body': 'Okay, I will make the necessary changes. ', 'comment_created': datetime.datetime(2021, 6, 22, 19, 27, 4, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656518622, 'comment_body': 'clang-format suggests this exact same code. I will try to improve clang-format configuration to improve formatting for cases like these. ', 'comment_created': datetime.datetime(2021, 6, 22, 19, 27, 54, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 656520277, 'comment_body': ""I would prefer the latter option. I think that's the take of @alexander-penev, too but let's ask him."", 'comment_created': datetime.datetime(2021, 6, 22, 19, 30, 32, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 656521402, 'comment_body': ""I wanted to convey that this function can build calls to free functions as well as member functions depending on the passed function. Yes, `relevant` don't do a very good job for this purpose. `BuildCallExprToFunction` can be a bit misleading since in clang sema `sema::BuildCallExpr` only builds call to free functions. I will try to come up with a good name for this function. "", 'comment_created': datetime.datetime(2021, 6, 22, 19, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 659164203, 'comment_body': '@parth-07  could you please put this function in a separate PR(so that it can be merged early) and in `VisitorBase`. I require this functionality in `ReverseModeVisitor` and it would be great if I could use your function.', 'comment_created': datetime.datetime(2021, 6, 26, 12, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 659180267, 'comment_body': 'As of now, I only have to complete this function to complete the PR (the PR consists mostly of this function only), if the PR requires any additional tasks then I will create a separate PR for this function. I will try to complete this function as soon as possible :)', 'comment_created': datetime.datetime(2021, 6, 26, 15, 25, 41, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660101075, 'comment_body': 'The current `ContinuationIndentWidth` value for clang-format configuration is 4 , setting it to 2, slightly improves the formatting in this case. \r\nBut the method name still gets formatted on the next line, I am unable to find any configuration option which will format the method name on the same line as `m_Sema` in this case. Should I change `ContinuationIndentWidth` to 2 ? ', 'comment_created': datetime.datetime(2021, 6, 28, 20, 39, 4, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660106883, 'comment_body': 'Yes, `Sema::BuildMemberReference` works perfectly, I have modified the code to use it instead of `MemberExpr::create`', 'comment_created': datetime.datetime(2021, 6, 28, 20, 49, 10, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660120754, 'comment_body': 'I am unable to come up with a good function name for this, I have decided on the suggested name `BuildCallExprToFunction`, it also goes well with other similar functions in `VisitorBase`. Please tell me if I should modify this function name. ', 'comment_created': datetime.datetime(2021, 6, 28, 21, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660667138, 'comment_body': '```suggestion\r\n      SemaRef.BuildCXXThisExpr(noLoc, thisType, /*IsImplicit=*/ true));\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 14, 20, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 660667328, 'comment_body': '```suggestion\r\n      CXXThisExpr(noLoc, thisType, /*IsImplicit=*/ true);\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 14, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 660667884, 'comment_body': '```suggestion\r\n```', 'comment_created': datetime.datetime(2021, 6, 29, 14, 21, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 660758208, 'comment_body': 'I ran clang-format on some parts of the code, I will run it on all the added code now. \r\nYes, I will update all uses of the kind `/*Base*/` to `/*Base=*/`', 'comment_created': datetime.datetime(2021, 6, 29, 15, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660769546, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 29, 16, 13, 13, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 660769745, 'comment_body': 'done', 'comment_created': datetime.datetime(2021, 6, 29, 16, 13, 30, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': '2e3b4e5541744eece92077ebd99ad721cc96588f', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
675962751,Modify clad diff fns signature to have separate arg for derived fn,"This solution is suggested by @vgvassilev

This PR modifies the signature of clad differentiation functions to have separate arguments for original and derived functions. For example, updated signature of `clad::gradient` is:
```cpp
gradient(F f, ArgSpec args = """", DerivedFnType derivedFn = static_cast<DerivedFnType>(nullptr),
               const char* code = """");
```

Benefits of using the updated signature:
- No need to use `reinterpret_cast` in clad differentiation functions for deducing the correct return type, since the original and derived functions are not sharing the same argument now.
- No need to re-instantiate/deduce template specialization again in `DiffPlanner::updateCall`, since there's a different argument for derived function now already with the correct type.
- Fix long-standing issue #139. 

Closes #139",True,252,https://api.github.com/repos/vgvassilev/clad/pulls/252,https://github.com/vgvassilev/clad/pull/252,closed,44,62,2,1,5,0,0,0,[],2021-06-23 05:29:05+00:00,2021-06-23 11:16:52+00:00,20867.0,5:47:47,[],"[{'commit_sha': 'c35ff02798889c3bf7acf5b386f15e85705d0a56', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
683146955,Add support for reference variables in reverse mode,"Progress checklist:
- [x] Add support for reference variables in reverse mode
- [x] Add tests

### Solution:
```c++
double &a = b;
```
Generally, derived variables are initialised with 0, but in the case of reference variables, they should be initialised with the derived variable of the variable they are referencing to. Thus, the updated definition of `_d_a` will be, 
```c++
double& _d_a = _d_b;
```
And since, reference variables are referencing an already declared and derived variable, their definition does not need to be derived.

Closes #253 
",True,254,https://api.github.com/repos/vgvassilev/clad/pulls/254,https://github.com/vgvassilev/clad/pull/254,closed,257,21,3,1,1,9,0,0,[],2021-07-04 10:00:08+00:00,2021-07-10 19:56:19+00:00,554171.0,"6 days, 9:56:11","[{'comment_id': 666203629, 'comment_body': 'Could you try to reword this sentence. Maybe do not use `reference` to describe a reference variable?', 'comment_created': datetime.datetime(2021, 7, 8, 13, 40, 55, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 666204046, 'comment_body': 'Likewise.', 'comment_created': datetime.datetime(2021, 7, 8, 13, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 666254620, 'comment_body': 'Can you move this to a local variable `!VD->getType()->isReferenceType()` as we use it twice? Is that condition meant to be in the `else` part of the `VD->getType()->isReferenceType()`?', 'comment_created': datetime.datetime(2021, 7, 8, 14, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 666923462, 'comment_body': 'Okay. ', 'comment_created': datetime.datetime(2021, 7, 9, 12, 48, 29, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 666950882, 'comment_body': 'This body of this condition uses `VDDerived` which is created after the if block of `VD->getType()->isReferenceType`. But yes, it handles cases for non-reference types, similar to the `else` part of the first if block (just above the `VDDerived` definition).\r\n\r\nCurrently, \r\n```c++\r\ninitDiff = VD->getInit() ? Visit(VD->getInit(), BuildDeclRef(VDDerived))\r\n                               : StmtDiff{};\r\n```\r\n\r\nis also being called for variables that are referencing a struct member (for example, `double& u = this->x`) (hence, the extra `|| !initDiff.getExpr_dx()` part) , since, for cases like these, the variable has not already been differentiated. But I just realized this extra condition can be safely removed, since, no differentiation is performed when the value (here, `VD->getInit()`) is a struct variable. I will modify the if condition here. ', 'comment_created': datetime.datetime(2021, 7, 9, 13, 30, 52, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 667370823, 'comment_body': '```suggestion\r\n    // If VD is a reference to a local variable, then the initial value is set to\r\n```', 'comment_created': datetime.datetime(2021, 7, 10, 18, 32, 43, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 667370880, 'comment_body': '```suggestion\r\n    // member etc), then no derived variable is available, thus `VDDerived` does\r\n```', 'comment_created': datetime.datetime(2021, 7, 10, 18, 33, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 667371508, 'comment_body': '```suggestion\r\n    // not need to reference any variable, consequentially the `VDDerivedType`\r\n    // is the corresponding non-reference type and the initial value is set to 0.\r\n```', 'comment_created': datetime.datetime(2021, 7, 10, 18, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 667371752, 'comment_body': '```suggestion\r\n    // Otherwise, for non-reference types, the initial value is set to 0.\r\n```', 'comment_created': datetime.datetime(2021, 7, 10, 18, 39, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': 'df8998ac460fe0a8d0c3c3c8fc2a4cbc84472e1d', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
686799321,Add support for computing gradient of functors using clad::gradient,"This PR adds support for directly computing the gradient of functors using `clad::gradient`.

Sample use:
```c++
struct Experiment {
  double operator()(double i, double j) {
    return i*j;
  }
};

Experiment E;
auto d_fn = clad::gradient(E);
double res[2] = {};
d_fn.execute(1, 3, res);
```",True,256,https://api.github.com/repos/vgvassilev/clad/pulls/256,https://github.com/vgvassilev/clad/pull/256,closed,397,53,4,1,1,2,0,0,[],2021-07-09 13:41:03+00:00,2021-07-10 19:55:38+00:00,108875.0,"1 day, 6:14:35","[{'comment_id': 667370393, 'comment_body': '```suggestion\r\n  /// The specialization is needed because objects have to be passed\r\n```', 'comment_created': datetime.datetime(2021, 7, 10, 18, 28, 35, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 667370454, 'comment_body': '```suggestion\r\n  /// Check whether class `C` defines a call operator. Provides the member\r\n```', 'comment_created': datetime.datetime(2021, 7, 10, 18, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': '67f48498512ebbe53c51e939e79aa9ebe4d6ef48', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
688820245,Add support for differentiating functors using clad::hessian,"Progress checklist:
- [x] Add support for computing hessian matrix of functors using `clad::hessian`
- [x] Add tests",True,259,https://api.github.com/repos/vgvassilev/clad/pulls/259,https://github.com/vgvassilev/clad/pull/259,closed,244,9,4,1,3,0,0,0,[],2021-07-13 10:46:49+00:00,2021-08-04 09:40:27+00:00,1896818.0,"21 days, 22:53:38",[],"[{'commit_sha': '4b70af41a0606f2f895de06615e056cf108f7d51', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
688852753,Add support for differentiating functors using clad::jacobian,"Progress checklist:
- [x] Add support for computing jacobian of functor using `clad::jacobian`.
- [x] Add tests",True,260,https://api.github.com/repos/vgvassilev/clad/pulls/260,https://github.com/vgvassilev/clad/pull/260,closed,601,11,4,1,1,0,0,0,[],2021-07-13 11:15:08+00:00,2021-08-05 19:29:57+00:00,2016889.0,"23 days, 8:14:49",[],"[{'commit_sha': 'f17058613019d77c20066f2828cbf80122eede08', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
690927662,Fix building of nested name specifiers in getArg function,"This PR modifies code in getArg function to build correct and complete nested name specifiers for the call operator.
It also fixes the failing asserts in clang debug build on running tests for differentiating functors. Credit goes to @grimmmyshini and @sudo-panda for bringing this error to attention. 

The root cause of the failing assert was lambda types not having any associated identifiers. This was causing issues while creating correct nested name specifiers for the call operator.",True,262,https://api.github.com/repos/vgvassilev/clad/pulls/262,https://github.com/vgvassilev/clad/pull/262,closed,84,21,2,1,3,15,0,0,[],2021-07-15 17:56:12+00:00,2021-07-30 19:20:10+00:00,1301038.0,"15 days, 1:23:58","[{'comment_id': 671322473, 'comment_body': ""Can't we sink this chunk of code in `BuildNNS`?"", 'comment_created': datetime.datetime(2021, 7, 16, 14, 58, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 671354683, 'comment_body': 'We can, but then in `BuildNNS` function we will need to check at each recursion if the declaration context passed is of lambda type or not. \r\nOr we can make 2 functions, `BuildNNS` and `BuildNNS_impl`. Then we can perform check just once in `BuildNNS` and do the current work of `BuildNNS` in `BuildNNS_impl`.  Should I go with this approach ? ', 'comment_created': datetime.datetime(2021, 7, 16, 15, 44, 54, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 672828903, 'comment_body': '@vgvassilev Now lambda types do not have to be handled differently, thus `BuildNNS` handles both lambda and non-lambda record declarations now. ', 'comment_created': datetime.datetime(2021, 7, 20, 6, 1, 37, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 672844031, 'comment_body': '```suggestion\r\n          } else if (isa<FunctionDecl>(DRE->getDecl()))\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 6, 34, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 672844242, 'comment_body': 'Stray space.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 35, 9, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 672844344, 'comment_body': '```suggestion\r\n        /// argument `DC`.\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 6, 35, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 672844864, 'comment_body': 'What does `!` mean here for doxygen?', 'comment_created': datetime.datetime(2021, 7, 20, 6, 36, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 672845245, 'comment_body': 'Please move `RD->getTypeForDecl()->getCanonicalTypeInternal()` into a local QualType variable.', 'comment_created': datetime.datetime(2021, 7, 20, 6, 37, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 672865046, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2021, 7, 20, 7, 12, 6, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 672865610, 'comment_body': 'I thought `!` stands for attention in Doxygen, I was wrong. Doxgen have `\\attention` command for this purpose. ', 'comment_created': datetime.datetime(2021, 7, 20, 7, 13, 2, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 672869412, 'comment_body': ""Similarly, there's also a `\\note` command which I think suits better in this case. Thus, I have replace `!` with `\\note` here. "", 'comment_created': datetime.datetime(2021, 7, 20, 7, 18, 59, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 678371394, 'comment_body': '```suggestion\r\n         assert(DC && ""Must provide a non null DeclContext"");\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 14, 43, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678372792, 'comment_body': 'I think here we `getTrivialTypeSourceInfo` should be better.', 'comment_created': datetime.datetime(2021, 7, 28, 14, 45, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678372988, 'comment_body': 'Please move the ASTContext into a temporary variable.', 'comment_created': datetime.datetime(2021, 7, 28, 14, 45, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 680147300, 'comment_body': '```suggestion\r\n          } else if (isa<TranslationUnitDecl>(DC)) {\r\n```', 'comment_created': datetime.datetime(2021, 7, 30, 18, 36, 8, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': 'e44b374e3dcf38218fbefaa0e66cf92844901f77', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
691059565,Modify code to use effective fn name to create derived fn identifiers ,"This PR modifies derived function and corresponding return variable name to valid identifiers when differentiating overloaded call operator in reverse mode. Credit goes to @grimmmyshini and @sudo-panda for bringing this error to attention. 

Extending the original function creates invalid identifiers for the derived function and the return variable name when the original function is an overloaded operator, due to parentheses in the original function name.

Effective name is the function name itself for ordinary functions and a unique name for each operator kind for overloaded operators.

Current derived function name:
```c++
void operator()_grad(...);
```

Modified derived function name:
```c++
void operator_call_grad(...);
```

Current return variable name:
```
operator()_return;
```

Modified return variable name:
```
operator_call_return;
```",True,263,https://api.github.com/repos/vgvassilev/clad/pulls/263,https://github.com/vgvassilev/clad/pull/263,closed,59,24,8,1,1,23,0,0,[],2021-07-15 21:56:06+00:00,2021-07-30 18:35:14+00:00,1283948.0,"14 days, 20:39:08","[{'comment_id': 671323124, 'comment_body': 'Did you run clang-format on this?', 'comment_created': datetime.datetime(2021, 7, 16, 14, 59, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 671324513, 'comment_body': 'Can we avoid using a data member for getting the function name? We should try to reduce the shared data members to minimum as that shares state which is hard to debug.', 'comment_created': datetime.datetime(2021, 7, 16, 15, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 671351765, 'comment_body': 'Then we will need to compute the value of the effective original function name 2 times, once in `ReverseModeVisitor::Derive` and once in `ReverseModeVisitor::VisitReturnStmt`. Should I compute it 2 times rather than using a shared data member in this case?', 'comment_created': datetime.datetime(2021, 7, 16, 15, 40, 41, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 671352143, 'comment_body': 'Yes I did.', 'comment_created': datetime.datetime(2021, 7, 16, 15, 41, 16, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 671379399, 'comment_body': 'Yes, assuming that you extract out the relevant code into a file static utility function.', 'comment_created': datetime.datetime(2021, 7, 16, 16, 23, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 671381108, 'comment_body': 'What should be the proper format for this code?  ', 'comment_created': datetime.datetime(2021, 7, 16, 16, 25, 58, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 671384366, 'comment_body': ""I'd expect it to be:\r\n\r\n```cpp\r\ndefault:\r\n  m_EffectiveOriginalFnName = m_Function->getNameAsString();\r\n  break;\r\n```\r\n\r\nBut that would disappear if you address the other comment..."", 'comment_created': datetime.datetime(2021, 7, 16, 16, 31, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 671386959, 'comment_body': 'Instead of a file static function, can I make it a class private function? \r\nThis way, we will not need to pass function to compute the effective name. ', 'comment_created': datetime.datetime(2021, 7, 16, 16, 35, 25, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 671388387, 'comment_body': 'Oh okay. ', 'comment_created': datetime.datetime(2021, 7, 16, 16, 37, 53, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 671477115, 'comment_body': 'It should be generic so passing a function as a parameter should be fine.', 'comment_created': datetime.datetime(2021, 7, 16, 19, 20, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 672542607, 'comment_body': 'I have created `getEffectiveFnName` as a static function in the `VisitorBase` class since this function can also be used in `HessianModeVisitor` class. Please tell if some other place would be better for this function definition. ', 'comment_created': datetime.datetime(2021, 7, 19, 18, 43, 35, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 672846302, 'comment_body': '```suggestion\r\n    static std::string getNameAsString(const clang::FunctionDecl* FD, const std::string& suffix) {\r\n```', 'comment_created': datetime.datetime(2021, 7, 20, 6, 39, 15, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 672870948, 'comment_body': 'Can you please tell what should be the purpose of `suffix` parameter here? ', 'comment_created': datetime.datetime(2021, 7, 20, 7, 21, 38, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 673027000, 'comment_body': 'So that you can sink the ""_return"" and ""_hessian"" from the call sites.', 'comment_created': datetime.datetime(2021, 7, 20, 11, 10, 51, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 673027582, 'comment_body': ""You don't need a 'break' after the return."", 'comment_created': datetime.datetime(2021, 7, 20, 11, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 673180963, 'comment_body': 'oh, yes. I will remove the break statements from here. ', 'comment_created': datetime.datetime(2021, 7, 20, 14, 33, 42, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 678384213, 'comment_body': 'We can always have some file with utility functions. Eg. `CladASTUtils` or something like that..', 'comment_created': datetime.datetime(2021, 7, 28, 14, 56, 52, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678845346, 'comment_body': 'We should move that duplicated code into a separate file -- lib/Differentiator/CladUtils.{h,cpp}', 'comment_created': datetime.datetime(2021, 7, 29, 5, 52, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678965051, 'comment_body': 'Okay. ', 'comment_created': datetime.datetime(2021, 7, 29, 9, 3, 54, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 678997343, 'comment_body': '```suggestion\r\n  }\r\n```', 'comment_created': datetime.datetime(2021, 7, 29, 9, 44, 34, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678998048, 'comment_body': 'Maybe add some doxygen documentation?', 'comment_created': datetime.datetime(2021, 7, 29, 9, 45, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 679000567, 'comment_body': 'I have added the doxygen documentation in the corresponding header file. \r\nShould I add the doxygen documentation in the implementation file instead of the header file? ', 'comment_created': datetime.datetime(2021, 7, 29, 9, 48, 32, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 679006319, 'comment_body': 'ah, totally overlooked. sorry..', 'comment_created': datetime.datetime(2021, 7, 29, 9, 55, 44, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': '83f5abc4d09d8ab0279796b68c596307b254cd9f', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
692652180,Create derived variables for parameters which are not independent,"This PR modifies reverse mode differentiation by creating a derived variable for all parameters. And thus produces correct derived function for cases like these:
```c++
double fn(double i, double j) {
  j = i;
  return j;
}

int main() {
  auto d_fn = clad::gradient(fn, ""i"");
  double res[2] = {};
  d_fn.execute(3, 5, res);
  std::cout<<res[0]<<""\n"";  // gives 0; expected: 1
}
```

Derived function produced:
```c++
void fn_grad_0(double i, double j, double *_result) {
    double _d_j = 0;
    j = i;
    double fn_return = j;
    goto _label0;
  _label0:
    _d_j += 1;
    {
        double _r_d0 = _d_j;
        _result[0UL] += _r_d0;
        _d_j -= _r_d0;
    }
}
```

Closes #265",True,266,https://api.github.com/repos/vgvassilev/clad/pulls/266,https://github.com/vgvassilev/clad/pull/266,closed,146,1,6,1,2,4,0,0,[],2021-07-19 14:20:37+00:00,2021-07-30 20:15:38+00:00,971701.0,"11 days, 5:55:01","[{'comment_id': 673751984, 'comment_body': '```suggestion\r\n      if (isArrayOrPointerType(VDDerivedType))\r\n```', 'comment_created': datetime.datetime(2021, 7, 21, 8, 5, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678357315, 'comment_body': 'Why not just `params`? Can you spell out the actual type rather than `auto`?', 'comment_created': datetime.datetime(2021, 7, 28, 14, 29, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678384237, 'comment_body': 'Because `params` have both the original function parameters and output parameters created to store differentiation results. We only want to create derived variables for original function parameters.\r\n\r\nYes, we can use `VarDecl` instead of auto, should I modify the code to use specific type instead ?', 'comment_created': datetime.datetime(2021, 7, 28, 14, 56, 54, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 678434815, 'comment_body': 'I have modified code to use `ParmVarDecl*` instead of `auto`', 'comment_created': datetime.datetime(2021, 7, 28, 15, 50, 16, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': '7e0f7d5eb85f46de66b5c97f3d286cca5531aa83', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
696541296,Add support for differentiating switch statement in forward mode,"Progress checklist:
- [x] Add support for differentiating switch statements in forward mode
- [x] Add tests",True,269,https://api.github.com/repos/vgvassilev/clad/pulls/269,https://github.com/vgvassilev/clad/pull/269,closed,698,2,8,1,1,38,0,0,[],2021-07-25 18:01:26+00:00,2021-08-05 18:16:26+00:00,951300.0,"11 days, 0:15:00","[{'comment_id': 678374348, 'comment_body': '```suggestion\r\nstatic inline StmtResult \r\nSema_ActOnStartOfSwitchStmt(Sema& SemaRef, Stmt* initStmt, Sema::ConditionResult Cond) {\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 14, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678375706, 'comment_body': 'Did `ConstantExpr` appear after clang7? Maybe worth a comment.', 'comment_created': datetime.datetime(2021, 7, 28, 14, 48, 10, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678376496, 'comment_body': '```suggestion\r\n    for (Stmt* stmt : CS->body()) {\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 14, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678377161, 'comment_body': '```suggestion\r\n        if (SwitchCase* nestedRes = getContainedSwitchCaseStmt(nestedCS))\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 14, 49, 42, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678377529, 'comment_body': '```suggestion\r\n      assert(0 && ""Unsupported switch case statement"");\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 14, 50, 3, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678378259, 'comment_body': '```suggestion\r\n      for (Stmt* stmt : CS->body()) {\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 14, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678378840, 'comment_body': '```suggestion\r\n          // the same and no switch case label is contained in the compound\r\n```', 'comment_created': datetime.datetime(2021, 7, 28, 14, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678380049, 'comment_body': 'Why not directly using `DEFINE_CREATE_EXPR`?', 'comment_created': datetime.datetime(2021, 7, 28, 14, 52, 36, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678380971, 'comment_body': 'Did you make sure that results are expected/correct mathematically speaking?', 'comment_created': datetime.datetime(2021, 7, 28, 14, 53, 30, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 678435878, 'comment_body': 'Yes, `ConstantExpr` appeared after clang 7. I will add a comment for this. ', 'comment_created': datetime.datetime(2021, 7, 28, 15, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 678587584, 'comment_body': 'Yes, I have verified that the results are correct. ', 'comment_created': datetime.datetime(2021, 7, 28, 19, 20, 14, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 678596315, 'comment_body': 'I did not try using `DEFINE_CREATE_EXPR`. I have modified the code to use `DEFINE_CREATE_EXPR`.', 'comment_created': datetime.datetime(2021, 7, 28, 19, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 680515045, 'comment_body': '```suggestion\r\n    // Scope and block for the corresponding compound statement of the\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 13, 54, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 680515464, 'comment_body': '```suggestion\r\n  /// returns first switch case label contained in the compound statement `CS`\r\n```', 'comment_created': datetime.datetime(2021, 8, 1, 13, 57, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 680515785, 'comment_body': 'Can you also add tests for nested switch statements (eg switch-stmt in a case clause) and a fall-through switch case clauses (eg a `case:` without a `break`)?', 'comment_created': datetime.datetime(2021, 8, 1, 14, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 680516202, 'comment_body': ""Isn't it clearer the newActiveSC to be returned as a result of that function, rather than modifying it in-place?"", 'comment_created': datetime.datetime(2021, 8, 1, 14, 3, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 680516532, 'comment_body': ""Can you clarify the comment. Why can't `DeriveSwitchStmtBodyHelper` take care of this?"", 'comment_created': datetime.datetime(2021, 8, 1, 14, 6, 22, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 680517379, 'comment_body': 'I have added a test for nested switch statements, please check `fn4` in `test/FirstDerivative/Switch.C`. \r\nI have added a test for fall-through switch case clauses as well, please check `fn3` in `test/FirstDerivative/Switch.C`', 'comment_created': datetime.datetime(2021, 8, 1, 14, 12, 42, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 680518537, 'comment_body': '`DeriveSwitchStmtBodyHelper` take one statement at a time, thus, the active switch case (`activeSC`) will only change when a case label is passed to `DeriveSwitchStmtBodyHelper`. \r\nAnd since, active switch case statement needs to be passed to `DeriveSwitchStmtBodyHelper`, I preferred passing by reference, should I modify the function to return the updated value of active switch case instead? ', 'comment_created': datetime.datetime(2021, 8, 1, 14, 21, 55, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 680519441, 'comment_body': 'Ah, nice!', 'comment_created': datetime.datetime(2021, 8, 1, 14, 29, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 680519843, 'comment_body': ""Yes, I will include more details for this. \r\nIt's due to how the `DeriveSwitchStmtBodyHelper` function determines when the corresponding scope and block of a case label should be popped. For all switch case labels other than the last switch case label, scope and block are popped when the next switch label has been found (scope and block of 2nd switch case label are popped when 3rd switch case label have been found, and so on). But for the last switch case label, scope and block should be popped when all statements of the switch statement body have been processed. `DeriveSwitchStmtBodyHelper` have no way of knowing when all statements of switch statement body have been visited and processed. Thus, last switch case label scope and block have to be popped outside the function."", 'comment_created': datetime.datetime(2021, 8, 1, 14, 31, 44, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 680524408, 'comment_body': ""I'd prefer to see if the implementation would change significantly if we return the value. That makes the code much less subtle to the casual reader."", 'comment_created': datetime.datetime(2021, 8, 1, 15, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 680524544, 'comment_body': 'Ok, then please clarify that in the comment and we should be good.', 'comment_created': datetime.datetime(2021, 8, 1, 15, 8, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 681037792, 'comment_body': 'Done, I have modified `DeriveSwitchStmtBodyHelper` to return the updated active switch case label instead. Please review the modified implementation.', 'comment_created': datetime.datetime(2021, 8, 2, 14, 50, 38, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 681038260, 'comment_body': 'Done. ', 'comment_created': datetime.datetime(2021, 8, 2, 14, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 681046225, 'comment_body': '@vgvassilev Please tell if cloning the switch case label is the right way to go here, or should we create switch case labels instead, this will avoid unnecessary cloning of substatement of the switch case labels.', 'comment_created': datetime.datetime(2021, 8, 2, 15, 0, 48, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 681497164, 'comment_body': ""Yeah, if we don't need to clone the substatements probably we should just call `::Create` and add a relevant comment."", 'comment_created': datetime.datetime(2021, 8, 3, 7, 14, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 681502507, 'comment_body': 'Looks better to me. Thanks!', 'comment_created': datetime.datetime(2021, 8, 3, 7, 23, 1, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 681550948, 'comment_body': 'Okay. ', 'comment_created': datetime.datetime(2021, 8, 3, 8, 32, 1, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 681594988, 'comment_body': 'Done, now we are creating switch case labels instead of cloning them. ', 'comment_created': datetime.datetime(2021, 8, 3, 9, 29, 43, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 682458262, 'comment_body': 'Why `typename` here?', 'comment_created': datetime.datetime(2021, 8, 4, 9, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 682460046, 'comment_body': ""We don't need the inline here, too."", 'comment_created': datetime.datetime(2021, 8, 4, 9, 44, 46, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 682526753, 'comment_body': ""We do not need typename here, I have removed it, sorry for the mistake\r\nWon't making this function inline be good for performance since the function contains very few lines?"", 'comment_created': datetime.datetime(2021, 8, 4, 11, 25, 39, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 682583156, 'comment_body': 'No, the compiler is allowed to ignore the `inline` keyword. It is used more to signal weak linkage (when a symbol is being defined in a header file) to avoid odr violations.', 'comment_created': datetime.datetime(2021, 8, 4, 12, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 682584873, 'comment_body': 'Can you run clang format on this?', 'comment_created': datetime.datetime(2021, 8, 4, 12, 51, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 682585617, 'comment_body': 'Please use local variables for these.', 'comment_created': datetime.datetime(2021, 8, 4, 12, 52, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 682721395, 'comment_body': 'Oh, okay, thank you so much for the detailed explanation. ', 'comment_created': datetime.datetime(2021, 8, 4, 15, 23, 48, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 682733436, 'comment_body': 'Done, now line 99 has been refactored properly. ', 'comment_created': datetime.datetime(2021, 8, 4, 15, 37, 37, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': '3a8fbeaf2cdc7ad0c54f382fb041f77ce8cdaad8', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
700190554,Add support for differentiating while loops in forward mode,"This PR adds support for differentiating `while` and `do-while` loops in forward differentiation mode.

Progress checklist:
- [x] Add support for differentiating `while` and `do-while` loops in forward mode
- [x] Add tests",True,272,https://api.github.com/repos/vgvassilev/clad/pulls/272,https://github.com/vgvassilev/clad/pull/272,closed,282,3,4,1,1,4,0,0,[],2021-07-30 10:37:25+00:00,2021-07-30 18:04:16+00:00,26811.0,7:26:51,"[{'comment_id': 679946918, 'comment_body': '```suggestion\r\n  static CompoundStmt* PrependAndCreateCompoundStmt(ASTContext& C,\r\n```\r\n\r\nMaybe captures better the intent?', 'comment_created': datetime.datetime(2021, 7, 30, 13, 58, 37, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 679948616, 'comment_body': '```suggestion\r\n    Stmt* S =\r\n        m_Sema\r\n            .ActOnDoStmt(/*DoLoc=*/noLoc, bodyResult, /*WhileLoc=*/noLoc,\r\n                         /*CondLParen=*/noLoc, clonedCond, /*CondRParen=*/noLoc)\r\n            .get();\r\n```\r\nWe do not need the concrete type of the statement for the return result of the function.', 'comment_created': datetime.datetime(2021, 7, 30, 14, 0, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 679958855, 'comment_body': 'Okay', 'comment_created': datetime.datetime(2021, 7, 30, 14, 14, 24, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 679959698, 'comment_body': 'Yes, the suggested name captures the intent in a much better way. ', 'comment_created': datetime.datetime(2021, 7, 30, 14, 15, 25, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': 'd8a9254d9b777c09c3a97a654665fa30ec685361', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
701490014,Modify doxygen configuration,"Summary of changes:
- Added `PROJECT_BRIEF`
- Changed `JAVDOC_AUTOBRIEF` and `QT_AUTOBRIEF` to `YES`
- Changed `PAPER_TYPE` to `a4`
- Changed `MACRO_EXPANSION` to `YES`
- Changed `DOT_FONTNAME` to `Helvetica`
- Changed `DOT_TRANSPARENT` and `DOT_MULTI_TARGETS` to 'YES'
- Updated `doxygen.footer` to have correct values for latest revision and clad link.
- Added missing default configurations",True,276,https://api.github.com/repos/vgvassilev/clad/pulls/276,https://github.com/vgvassilev/clad/pull/276,closed,413,23,3,1,1,0,0,0,[],2021-08-02 13:55:42+00:00,2021-08-03 07:30:10+00:00,63268.0,17:34:28,[],"[{'commit_sha': '51d5db252cdb3a0a374ac39821324f34b5d7f846', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
704665224,Reset derived variables of loops local variables to 0 at each iteration.,"This PR resets derived variables of variables defined inside loops to 0 before each iteration of the loop. This is required to correctly evaluate derivatives. 

**Implemented solution:**

While differentiating a variable we can check if the variable is defined inside a loop using the `isInsideLoop` member variable, if it is, then the implemented solution adds an additional statement to assign 0 to the corresponding derived variable.

Closes #277 ",True,278,https://api.github.com/repos/vgvassilev/clad/pulls/278,https://github.com/vgvassilev/clad/pull/278,closed,101,7,2,1,1,4,0,0,[],2021-08-05 12:32:57+00:00,2021-08-05 19:00:41+00:00,23264.0,6:27:44,"[{'comment_id': 683662718, 'comment_body': 'The `f_const` test can use the `TEST_2` macro too. ', 'comment_created': datetime.datetime(2021, 8, 5, 17, 43, 25, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 683663837, 'comment_body': '\r\n[L#386](https://github.com/vgvassilev/clad/blob/3ddc99809c004fb661edf9a3f2502c106506ec30/test/Gradient/Loops.C#L386) should be\r\n```\r\nvoid f_const_grad(const double, const double clad::array_ref<double>, clad::array_ref<double>)\r\n```\r\nIt should have been changed by me but I must have missed it. Could you please change it?', 'comment_created': datetime.datetime(2021, 8, 5, 17, 44, 57, tzinfo=datetime.timezone.utc), 'commenter': 'sudo-panda', 'type': 'User'}, {'comment_id': 683683795, 'comment_body': 'Yes sure. ', 'comment_created': datetime.datetime(2021, 8, 5, 18, 14, 26, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 683691956, 'comment_body': 'Yes, thanks for the observation. ', 'comment_created': datetime.datetime(2021, 8, 5, 18, 26, 34, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': 'b7c1a7ebe9e31930de19d3f13887f356109ca616', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
706083277,Add tests and demo for differentiating template functors,"Progress checklist:
- [x] Add tests
- [x] Add demo",True,282,https://api.github.com/repos/vgvassilev/clad/pulls/282,https://github.com/vgvassilev/clad/pull/282,closed,679,10,6,1,1,0,0,0,[],2021-08-08 18:01:52+00:00,2021-08-13 20:40:45+00:00,441533.0,"5 days, 2:38:53",[],"[{'commit_sha': 'b8465bf15553387633b6aa0d49d50a31bcc77fec', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
706107464,Add support for differentiating while and do-while stmts in reverse mode.,"Progress checklist:
- [x] Add support for differentiating while statement
- [x] Add support for differentiating do-while statement
- [x] Add tests

This PR also fixes #303 by creating derived statements for the condition variable and resetting it to 0 at end of each iteration of the reverse pass `for` loop.",True,283,https://api.github.com/repos/vgvassilev/clad/pulls/283,https://github.com/vgvassilev/clad/pull/283,closed,803,129,3,1,7,20,0,0,[],2021-08-08 21:13:21+00:00,2021-10-09 09:55:17+00:00,5316116.0,"61 days, 12:41:56","[{'comment_id': 695698541, 'comment_body': '```suggestion\r\n      clang::Expr *m_Ref=nullptr;\r\n      clang::Expr *m_Pop=nullptr;\r\n      clang::Expr *m_Push=nullptr;\r\n```', 'comment_created': datetime.datetime(2021, 8, 25, 12, 23, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 695700517, 'comment_body': 'Can you extract the common code in a separate file static function?', 'comment_created': datetime.datetime(2021, 8, 25, 12, 26, 26, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 695927419, 'comment_body': 'This code is heavily using member variables and member functions. Can I extract the common code in a member function? ', 'comment_created': datetime.datetime(2021, 8, 25, 16, 39, 43, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 695935980, 'comment_body': 'Yeah. ', 'comment_created': datetime.datetime(2021, 8, 25, 16, 51, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 697637695, 'comment_body': 'Done, I have refactored this code.', 'comment_created': datetime.datetime(2021, 8, 27, 18, 22, 49, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 697640219, 'comment_body': '@grimmmyshini Please confirm if I have added the code for error estimation correctly here. This code is differentiating loop body for `for`, `while` and `do-while` loop statements.', 'comment_created': datetime.datetime(2021, 8, 27, 18, 27, 16, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 698615582, 'comment_body': '```suggestion\r\n      /// is used as the counter; otherwise, returns nullptr.\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 16, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 698617286, 'comment_body': 'Is that what clang-format suggests here?', 'comment_created': datetime.datetime(2021, 8, 30, 16, 8, 54, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 698618051, 'comment_body': ""Is that the fix for issue #303? If so it's likely worth to be put in a separate commit."", 'comment_created': datetime.datetime(2021, 8, 30, 16, 9, 57, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 698619360, 'comment_body': 'Add the name of the default parameter.', 'comment_created': datetime.datetime(2021, 8, 30, 16, 11, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 698620242, 'comment_body': '```suggestion\r\n    if (condVarDecl)\r\n      condVarRes = DifferentiateSingleStmt(WS->getConditionVariableDeclStmt());\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 16, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 698621177, 'comment_body': 'ping.', 'comment_created': datetime.datetime(2021, 8, 30, 16, 14, 23, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 698621677, 'comment_body': '```suggestion\r\n    // `for` loops have counter decrement expression in the\r\n```', 'comment_created': datetime.datetime(2021, 8, 30, 16, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 699786552, 'comment_body': 'Yes. \r\nWhat should be the ideal formatting of this line as per you? I can try to modify clang-format configuration file to improve the formatting. ', 'comment_created': datetime.datetime(2021, 9, 1, 1, 54, 39, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 699788026, 'comment_body': ""There are 2 cases to consider here. Suggested comment can change the intended meaning.\r\nThe loop counter variable is clad tape (we were already inside a loop when the loop counter is created), or it's an ordinary variable.\r\nThe first part of the comment refers to the first case - if the loop counter variable is a clad tape, then `getRef` will return a reference to the top element of the clad tape. And otherwise, if the loop counter is an ordinary variable, then `getRef` will return a reference to the variable. "", 'comment_created': datetime.datetime(2021, 9, 1, 1, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 699792949, 'comment_body': 'No, fix for issue #303 is done with refactoring of `VisitForStmt` to use `DifferentiateLoopBody`. \r\n\r\nThis change here is unrelated to the fix. `condVarClone` should be used only with the forward pass of the for loop, currently, we are using it in both the forward and reverse pass, and it is causing inconsistencies in the AST of the reverse pass `for` statement but no error has been noticed due to this so far.\r\n\r\nInconsistency is due to the same condition variable (point to the same `VarDecl` node) being declared twice, once in the forward pass and once in the reverse pass. And also, the reverse pass does not use the condition variable.', 'comment_created': datetime.datetime(2021, 9, 1, 2, 14, 56, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 699794863, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2021, 9, 1, 2, 20, 38, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 709065277, 'comment_body': '@parth-07 yep looks good to me as of yet. Once you get this in and I address another issue, I will add more tests.', 'comment_created': datetime.datetime(2021, 9, 15, 10, 45, 28, tzinfo=datetime.timezone.utc), 'commenter': 'grimmmyshini', 'type': 'User'}, {'comment_id': 721641645, 'comment_body': '```suggestion\r\n    ASTContext& C = m_RMV.m_Context;\r\n```\r\nThis is the usual notion in the codebase, it will save also additional space.', 'comment_created': datetime.datetime(2021, 10, 4, 19, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 721979976, 'comment_body': 'Done. I have modified the `context` variable to `C`. ', 'comment_created': datetime.datetime(2021, 10, 5, 7, 52, 16, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': '11b112296d72fd65d89ee7ff9f30743473ede807', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
711891354,Update code to fix clad build warnings,This PR updates code to fix clad build warnings so that we can use `-Werror` for building clad. ,True,288,https://api.github.com/repos/vgvassilev/clad/pulls/288,https://github.com/vgvassilev/clad/pull/288,closed,3,19,3,1,1,0,0,0,[],2021-08-13 01:15:02+00:00,2021-08-13 05:58:10+00:00,16988.0,4:43:08,[],"[{'commit_sha': '6b9503b80293504f6dfe1a65cbb62414add83498', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
711946102,Add support for diff mem variables while diff functors in forw mode,"This PR adds support for differentiating member variables while differentiating functors in the forward mode.

- [x] Add feature
- [x] Add tests

Given a class/struct with an overloaded call operator.

```c++
struct Experiment {
double x, y;
Experiment(double p_x, double p_y) : x(p_x), y(p_y) {};
double operator() {
  return x*x + 3*y;
}
```

Now to differentiate an object of the class with respect to the member variable `x`, we can do:
```c++ 
Experiment E(3, 5);
// both ways are equivalent
auto d_E_x = clad::differentiate(E, ""x"");
auto d_E_0 = clad::differentiate(E, 0);
```

Member variables can only be specified as an independent variable if:
- a call operator is being differentiated
- the call operator does not take any parameters

If we are differentiating a functor object, then derived variables will always be created for member variables (they will not be treated as constants), but they can only be specified as independent parameter if call operator contain no parameters. 


",True,289,https://api.github.com/repos/vgvassilev/clad/pulls/289,https://github.com/vgvassilev/clad/pull/289,closed,568,88,17,1,2,11,0,0,[],2021-08-13 02:06:28+00:00,2021-08-27 15:50:33+00:00,1259045.0,"14 days, 13:44:05","[{'comment_id': 690544131, 'comment_body': '```suggestion\r\n        request.Functor = cast<CXXMethodDecl>(request.Function)\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 16, 42, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690545838, 'comment_body': '```suggestion\r\n    // If we are differentiating a call operator, that has no parameters,\r\n    // then the specified independent argument is a member variable of the\r\n    // class defining the call operator. \r\n    // Thus, we need to find index of the member variable instead.\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 16, 44, 39, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690550242, 'comment_body': '```suggestion\r\n      if (m_Variables.find(memberDecl) != std::end(m_Variables)) {\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 16, 50, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690551472, 'comment_body': ""We don't need so many braces here."", 'comment_created': datetime.datetime(2021, 8, 17, 16, 51, 48, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690552082, 'comment_body': '```suggestion\r\n               ""Invalid member variable index \'%0\' of \'%1\' member variable(s)"",\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 16, 52, 33, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690552631, 'comment_body': '```suggestion\r\n              ""Invalid argument index \'%0\' of \'%1\' argument(s)"",\r\n```', 'comment_created': datetime.datetime(2021, 8, 17, 16, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690589391, 'comment_body': 'Okay.', 'comment_created': datetime.datetime(2021, 8, 17, 17, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 690918602, 'comment_body': '```suggestion\r\n               ""Invalid member variable index \'%0\' of \'%1\' member variable(s)"",\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 5, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690918721, 'comment_body': '```suggestion\r\n              ""Invalid argument index \'%0\' of \'%1\' argument(s)"",\r\n```', 'comment_created': datetime.datetime(2021, 8, 18, 5, 45, 20, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 695705207, 'comment_body': 'Did you run clang-format on this PR?', 'comment_created': datetime.datetime(2021, 8, 25, 12, 32, 38, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 695920181, 'comment_body': 'The formatting of the code was not correct. I have ran clang-format now and fixed the formatting.', 'comment_created': datetime.datetime(2021, 8, 25, 16, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}]","[{'commit_sha': '7b338ea672a66b8a148b56dda03498c4db33fc7a', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
712661036,Add support for automatic testing of reverse mode using forward mode,"Progress checklist:
- [x] Add feature
- [ ] Modify tests

This PR adds support for automatic testing of reverse mode differentiation using forward mode differentiation. 
If additional testing is enabled then if the forward mode and reverse mode differentiation give inconsistent results then the program will fail with assert message containing information regarding the result of which function with respect to which parameter gave inconsistent results.

To enable reverse mode testing, run clad with the `-fenable-reverse-mode-testing` flag. 

For example, consider the code in `fn.cpp` file

```c++
double fn(double i, double j) {
  return i + 2*j;
}

int main() {
  auto d_fn = clad::gradient(fn);
}
```

Generated gradient function when clad is run with `-fenable-reverse-mode-testing`: 

```c++
void fn_grad(double i, double j, clad::array_ref<double> _d_i, clad::array_ref<double> _d_j) {
    double _t0;
    _t0 = j;
    double fn_return = i + 2 * _t0;
    goto _label0;
  _label0:
    {
        * _d_i += 1;
        double _r0 = 1 * _t0;
        double _r1 = 2 * 1;
        * _d_j += _r1;
    }
    if (!(* _d_i == fn_darg0(i, j)))
        __assert_fail(""Inconsistent differentiation result with respect to the parameter 'i' in forward and reverse differentiation mode"", ""fn.cpp"", 0, ""fn_grad"");
    if (!(* _d_j == fn_darg1(i, j)))
        __assert_fail(""Inconsistent differentiation result with respect to the parameter 'j' in forward and reverse differentiation mode"", ""fn.cpp"", 0, ""fn_grad"");
}
```

Current limitations of automatic testing of reverse-mode differentiation using forward mode differentiation:
- We cannot do automatic testing of array parameters, because we do not know the size of the array parameters at compile time.
  We need their size at compile time to generate forward mode derivatives for all the valid indexes of the array parameters. 
  Currently array parameters are silently skipped during testing.
  For example, consider this code,

  ```c++
  double arr[3];
  double res[3] = {};
  clad::array_ref<double> res_ref(res, 3);
  auto d_someFn = clad::gradient(someFn, ""arr"");
  d_someFn.execute(arr, res_ref);
  ```

  To automatically test derivatives with respect to `arr` parameter indexes, we will need to generate forward mode derivatives for 
  all the valid indexes (0 to 2) of `arr`.
  Therefore, we will need to compute `fn_darg0_0`, `fn_darg0_1` and `fn_darg0_2` at compile-time:

  But the size of the `arr` is only known at run-time when a user calls `CladFunction::execute`. Therefore we cannot create 
  forward mode derivatives of array parameters, and thus cannot do testing of array parameters. 

- Currently, reverse mode supports multi-arg function differentiation, but the forward mode does not. So we cannot automatically test functions that contain multi-arg function calls. This limitation will be lifted once we add support of multi-arg function call differentiation in the forward mode.",False,290,https://api.github.com/repos/vgvassilev/clad/pulls/290,https://github.com/vgvassilev/clad/pull/290,open,407,76,13,3,2,5,0,0,[],2021-08-13 22:43:50+00:00,,0.0,,"[{'comment_id': 689863941, 'comment_body': ""Wouldn't it be easier to synthesize a less complex expressions and move the check in the function itself? Eg this code can become a single line: `clad::VerifyEqual(...)`."", 'comment_created': datetime.datetime(2021, 8, 16, 21, 13, 47, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 689871774, 'comment_body': ""Yes, but if we want to include the assert message function and file names in assertions, then we will also need to pass them in the call to `clad::VerifyEqual`. Wouldn't it be unintuitive to pass these details to a function for verifying results?"", 'comment_created': datetime.datetime(2021, 8, 16, 21, 27, 46, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 690541404, 'comment_body': 'I would not consider that not intuitive.', 'comment_created': datetime.datetime(2021, 8, 17, 16, 39, 7, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}, {'comment_id': 690650550, 'comment_body': 'Okay, then I will create and use `clad::VerifyEqual(...)` to do the verification and give assert if verification fails. ', 'comment_created': datetime.datetime(2021, 8, 17, 19, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'parth-07', 'type': 'User'}, {'comment_id': 690958003, 'comment_body': 'I think we should move that code as a separate callback class in the same way as we have done for the error estimation handler. Eg, we should create a multiplexing `errorEstHandler` (which is a misnomer for ReverseModeCallbacks) and implement the relevant code there. Then in case the option is specified we will just construct the callback and attach it. We will need the multiplexer when we have an error estimation model handler and the automatic testing. You can take inspiration from `MultiplexExternalSemaSource`. \r\n\r\ncc: @grimmmyshini ', 'comment_created': datetime.datetime(2021, 8, 18, 7, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'vgvassilev', 'type': 'User'}]","[{'commit_sha': '46ef93d974ab313ff5e6bc47579d5c87a29a9369', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a597ea14ddaa1d60f93f662d6f787039ec35f9a', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad869f8fcb21d248d70ab456578dd19645976fc5', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42
715393649,Modify BuildCallToMemFn to do perfect forwarding of `*this` object,"This PR updates the` BuildCallToMemFn` function to do perfect forwarding of `*this` object depending on the value of `useRefQualifiedThisObj` parameter.

This PR also fixes #292 , and now for member functions, gradient overloaded is created as follows:
```c++
void SomeMemFn_grad_0(double i, double j, clad::array_ref<double> _d_i, clad::array_ref<double> _d_0) {
  static_cast<SomeClass>(*this).memFn_grad_0(i, j, _d_i);
}

",True,296,https://api.github.com/repos/vgvassilev/clad/pulls/296,https://github.com/vgvassilev/clad/pull/296,closed,115,13,5,1,2,0,0,0,[],2021-08-18 20:25:45+00:00,2021-08-25 16:48:58+00:00,591793.0,"6 days, 20:23:13",[],"[{'commit_sha': '03020ba7748ab814a42d70a31f80abf05bb26956', 'committer_username': 'parth-07', 'committer_name': 'Parth', 'committer_email': 'partharora99160808@gmail.com', 'commit_date': datetime.datetime(2018, 6, 30, 19, 29, 38, tzinfo=datetime.timezone.utc)}]",Parth,40723498,partharora99160808@gmail.com,User,,25,,47,42

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
17050358,clad,vgvassilev/clad,C++,116,276,18,49,1177,160,10,28,"[{'id': 2021632591, 'number': 1040, 'closed': datetime.datetime(2024, 8, 15, 18, 50, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 8, 15, 18, 47, 18, tzinfo=datetime.timezone.utc), 'time_taken': 208.0, 'time_delta': '0:03:28', 'additions': 591, 'deletions': 29, 'state': 'closed'}, {'id': 1915090516, 'number': 935, 'closed': datetime.datetime(2024, 6, 27, 19, 40, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 6, 11, 19, 5, 41, tzinfo=datetime.timezone.utc), 'time_taken': 1384476.0, 'time_delta': '16 days, 0:34:36', 'additions': 62, 'deletions': 0, 'state': 'closed'}, {'id': 1888838256, 'number': 909, 'closed': datetime.datetime(2024, 7, 2, 19, 24, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 5, 26, 9, 59, 4, tzinfo=datetime.timezone.utc), 'time_taken': 3230715.0, 'time_delta': '37 days, 9:25:15', 'additions': 330, 'deletions': 14, 'state': 'closed'}, {'id': 1844283560, 'number': 875, 'closed': datetime.datetime(2024, 5, 29, 20, 13, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 4, 28, 8, 14, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2721568.0, 'time_delta': '31 days, 11:59:28', 'additions': 317, 'deletions': 239, 'state': 'closed'}, {'id': 1120059818, 'number': 508, 'closed': datetime.datetime(2022, 11, 20, 5, 29, 9, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 12, 19, 0, 27, tzinfo=datetime.timezone.utc), 'time_taken': 642522.0, 'time_delta': '7 days, 10:28:42', 'additions': 105, 'deletions': 34, 'state': 'closed'}, {'id': 964714421, 'number': 461, 'closed': datetime.datetime(2022, 6, 11, 19, 52, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 11, 9, 4, 25, tzinfo=datetime.timezone.utc), 'time_taken': 38910.0, 'time_delta': '10:48:30', 'additions': 202, 'deletions': 19, 'state': 'closed'}, {'id': 958207182, 'number': 456, 'closed': datetime.datetime(2022, 6, 5, 9, 11, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 4, 14, 44, 48, tzinfo=datetime.timezone.utc), 'time_taken': 66397.0, 'time_delta': '18:26:37', 'additions': 42, 'deletions': 3, 'state': 'closed'}, {'id': 945193027, 'number': 453, 'closed': datetime.datetime(2022, 6, 5, 18, 11, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 24, 5, 59, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1080768.0, 'time_delta': '12 days, 12:12:48', 'additions': 5, 'deletions': 26, 'state': 'closed'}, {'id': 941554123, 'number': 452, 'closed': datetime.datetime(2022, 5, 19, 13, 50, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 19, 13, 32, 46, tzinfo=datetime.timezone.utc), 'time_taken': 1053.0, 'time_delta': '0:17:33', 'additions': 11, 'deletions': 0, 'state': 'closed'}, {'id': 939165526, 'number': 451, 'closed': datetime.datetime(2022, 5, 19, 18, 35, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 17, 18, 53, 51, tzinfo=datetime.timezone.utc), 'time_taken': 171690.0, 'time_delta': '1 day, 23:41:30', 'additions': 237, 'deletions': 52, 'state': 'closed'}, {'id': 938554657, 'number': 450, 'closed': None, 'created': datetime.datetime(2022, 5, 17, 9, 26, 14, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 254, 'deletions': 213, 'state': 'open'}, {'id': 936755695, 'number': 449, 'closed': datetime.datetime(2022, 5, 19, 17, 9, 23, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 15, 13, 58, 38, tzinfo=datetime.timezone.utc), 'time_taken': 357045.0, 'time_delta': '4 days, 3:10:45', 'additions': 46, 'deletions': 56, 'state': 'closed'}, {'id': 934897667, 'number': 446, 'closed': datetime.datetime(2022, 5, 13, 13, 17, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 12, 14, 17, 24, tzinfo=datetime.timezone.utc), 'time_taken': 82802.0, 'time_delta': '23:00:02', 'additions': 186, 'deletions': 0, 'state': 'closed'}, {'id': 929460101, 'number': 445, 'closed': datetime.datetime(2022, 5, 20, 9, 10, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 6, 8, 28, 54, tzinfo=datetime.timezone.utc), 'time_taken': 1212123.0, 'time_delta': '14 days, 0:42:03', 'additions': 400, 'deletions': 81, 'state': 'closed'}, {'id': 924903783, 'number': 443, 'closed': datetime.datetime(2022, 5, 3, 18, 37, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 5, 1, 11, 53, 31, tzinfo=datetime.timezone.utc), 'time_taken': 197017.0, 'time_delta': '2 days, 6:43:37', 'additions': 95, 'deletions': 18, 'state': 'closed'}, {'id': 924721987, 'number': 436, 'closed': datetime.datetime(2022, 5, 12, 20, 6, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 30, 20, 26, 4, tzinfo=datetime.timezone.utc), 'time_taken': 1035615.0, 'time_delta': '11 days, 23:40:15', 'additions': 189, 'deletions': 33, 'state': 'closed'}, {'id': 920050428, 'number': 435, 'closed': datetime.datetime(2022, 4, 29, 7, 26, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 27, 1, 48, 22, tzinfo=datetime.timezone.utc), 'time_taken': 193071.0, 'time_delta': '2 days, 5:37:51', 'additions': 96, 'deletions': 8, 'state': 'closed'}, {'id': 905261040, 'number': 425, 'closed': datetime.datetime(2023, 11, 12, 17, 20, 8, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 10, 16, 17, 18, tzinfo=datetime.timezone.utc), 'time_taken': 50202170.0, 'time_delta': '581 days, 1:02:50', 'additions': 745, 'deletions': 126, 'state': 'closed'}, {'id': 896814493, 'number': 423, 'closed': datetime.datetime(2022, 4, 17, 8, 14, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 1, 1, 45, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1405772.0, 'time_delta': '16 days, 6:29:32', 'additions': 186, 'deletions': 2, 'state': 'closed'}, {'id': 893615540, 'number': 421, 'closed': datetime.datetime(2022, 3, 30, 5, 47, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 29, 22, 30, 45, tzinfo=datetime.timezone.utc), 'time_taken': 26185.0, 'time_delta': '7:16:25', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 892599706, 'number': 420, 'closed': datetime.datetime(2022, 3, 30, 6, 26, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 29, 5, 57, 44, tzinfo=datetime.timezone.utc), 'time_taken': 88106.0, 'time_delta': '1 day, 0:28:26', 'additions': 496, 'deletions': 534, 'state': 'closed'}, {'id': 889990300, 'number': 417, 'closed': datetime.datetime(2022, 4, 23, 16, 35, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 25, 23, 49, 27, tzinfo=datetime.timezone.utc), 'time_taken': 2479568.0, 'time_delta': '28 days, 16:46:08', 'additions': 1098, 'deletions': 49, 'state': 'closed'}, {'id': 887613699, 'number': 412, 'closed': datetime.datetime(2022, 3, 25, 21, 37, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 23, 19, 33, 12, tzinfo=datetime.timezone.utc), 'time_taken': 180244.0, 'time_delta': '2 days, 2:04:04', 'additions': 662, 'deletions': 114, 'state': 'closed'}, {'id': 886576294, 'number': 406, 'closed': datetime.datetime(2022, 5, 19, 17, 19, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 22, 22, 38, 58, tzinfo=datetime.timezone.utc), 'time_taken': 4992040.0, 'time_delta': '57 days, 18:40:40', 'additions': 476, 'deletions': 21, 'state': 'closed'}, {'id': 886237397, 'number': 405, 'closed': datetime.datetime(2022, 3, 22, 17, 13, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 22, 16, 19, 32, tzinfo=datetime.timezone.utc), 'time_taken': 3228.0, 'time_delta': '0:53:48', 'additions': 235, 'deletions': 743, 'state': 'closed'}, {'id': 883945910, 'number': 401, 'closed': datetime.datetime(2022, 3, 19, 11, 46, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 19, 9, 36, 16, tzinfo=datetime.timezone.utc), 'time_taken': 7800.0, 'time_delta': '2:10:00', 'additions': 204, 'deletions': 196, 'state': 'closed'}, {'id': 880208811, 'number': 400, 'closed': datetime.datetime(2022, 3, 19, 6, 18, 1, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 15, 13, 51, 59, tzinfo=datetime.timezone.utc), 'time_taken': 318362.0, 'time_delta': '3 days, 16:26:02', 'additions': 40, 'deletions': 83, 'state': 'closed'}, {'id': 878492087, 'number': 397, 'closed': datetime.datetime(2022, 3, 23, 18, 39, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 13, 22, 54, 21, tzinfo=datetime.timezone.utc), 'time_taken': 848733.0, 'time_delta': '9 days, 19:45:33', 'additions': 902, 'deletions': 264, 'state': 'closed'}, {'id': 872534628, 'number': 392, 'closed': datetime.datetime(2022, 3, 12, 17, 36, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 6, 20, 43, 39, tzinfo=datetime.timezone.utc), 'time_taken': 507200.0, 'time_delta': '5 days, 20:53:20', 'additions': 902, 'deletions': 225, 'state': 'closed'}, {'id': 869721420, 'number': 391, 'closed': datetime.datetime(2022, 3, 2, 16, 28, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 16, 7, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1243.0, 'time_delta': '0:20:43', 'additions': 42, 'deletions': 3, 'state': 'closed'}, {'id': 869718054, 'number': 390, 'closed': datetime.datetime(2022, 3, 2, 16, 4, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 2, 16, 4, 10, tzinfo=datetime.timezone.utc), 'time_taken': 28.0, 'time_delta': '0:00:28', 'additions': 572, 'deletions': 64, 'state': 'closed'}, {'id': 866537738, 'number': 389, 'closed': datetime.datetime(2022, 3, 3, 17, 9, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 28, 8, 33, 45, tzinfo=datetime.timezone.utc), 'time_taken': 290164.0, 'time_delta': '3 days, 8:36:04', 'additions': 411, 'deletions': 47, 'state': 'closed'}, {'id': 860940850, 'number': 383, 'closed': datetime.datetime(2022, 3, 1, 15, 59, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 23, 0, 32, 22, tzinfo=datetime.timezone.utc), 'time_taken': 574042.0, 'time_delta': '6 days, 15:27:22', 'additions': 1232, 'deletions': 408, 'state': 'closed'}, {'id': 840980427, 'number': 374, 'closed': datetime.datetime(2022, 2, 7, 21, 6, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 6, 2, 26, 58, tzinfo=datetime.timezone.utc), 'time_taken': 153574.0, 'time_delta': '1 day, 18:39:34', 'additions': 932, 'deletions': 428, 'state': 'closed'}, {'id': 837754976, 'number': 369, 'closed': datetime.datetime(2022, 2, 1, 23, 48, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 2, 1, 23, 1, 20, tzinfo=datetime.timezone.utc), 'time_taken': 2828.0, 'time_delta': '0:47:08', 'additions': 22, 'deletions': 74, 'state': 'closed'}, {'id': 822986941, 'number': 351, 'closed': datetime.datetime(2023, 11, 12, 17, 21, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 14, 18, 32, 36, tzinfo=datetime.timezone.utc), 'time_taken': 57624554.0, 'time_delta': '666 days, 22:49:14', 'additions': 2845, 'deletions': 93, 'state': 'closed'}, {'id': 818137251, 'number': 348, 'closed': datetime.datetime(2022, 1, 13, 22, 4, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 10, 23, 43, 37, tzinfo=datetime.timezone.utc), 'time_taken': 253276.0, 'time_delta': '2 days, 22:21:16', 'additions': 16, 'deletions': 17, 'state': 'closed'}, {'id': 816860735, 'number': 345, 'closed': datetime.datetime(2022, 1, 30, 18, 42, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 8, 13, 26, 2, tzinfo=datetime.timezone.utc), 'time_taken': 1919779.0, 'time_delta': '22 days, 5:16:19', 'additions': 375, 'deletions': 67, 'state': 'closed'}, {'id': 812429585, 'number': 343, 'closed': datetime.datetime(2022, 1, 16, 13, 22, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 31, 18, 17, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1364688.0, 'time_delta': '15 days, 19:04:48', 'additions': 497, 'deletions': 326, 'state': 'closed'}, {'id': 795159766, 'number': 339, 'closed': datetime.datetime(2024, 2, 12, 21, 23, 54, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 12, 4, 20, 20, 24, tzinfo=datetime.timezone.utc), 'time_taken': 69123810.0, 'time_delta': '800 days, 1:03:30', 'additions': 1100, 'deletions': 28, 'state': 'closed'}, {'id': 764935147, 'number': 320, 'closed': datetime.datetime(2021, 11, 19, 15, 19, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 24, 19, 38, 12, tzinfo=datetime.timezone.utc), 'time_taken': 2230863.0, 'time_delta': '25 days, 19:41:03', 'additions': 875, 'deletions': 20, 'state': 'closed'}, {'id': 763310403, 'number': 318, 'closed': datetime.datetime(2021, 10, 21, 18, 17, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 21, 14, 0, 17, tzinfo=datetime.timezone.utc), 'time_taken': 15417.0, 'time_delta': '4:16:57', 'additions': 131, 'deletions': 29, 'state': 'closed'}, {'id': 759638618, 'number': 312, 'closed': datetime.datetime(2021, 10, 16, 12, 52, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 16, 10, 55, 28, tzinfo=datetime.timezone.utc), 'time_taken': 6998.0, 'time_delta': '1:56:38', 'additions': 46, 'deletions': 30, 'state': 'closed'}, {'id': 758307135, 'number': 311, 'closed': datetime.datetime(2022, 6, 2, 18, 4, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 10, 14, 12, 37, 8, tzinfo=datetime.timezone.utc), 'time_taken': 19978052.0, 'time_delta': '231 days, 5:27:32', 'additions': 110, 'deletions': 70, 'state': 'closed'}, {'id': 736891331, 'number': 307, 'closed': datetime.datetime(2021, 10, 15, 18, 41, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 18, 11, 27, 54, tzinfo=datetime.timezone.utc), 'time_taken': 2358826.0, 'time_delta': '27 days, 7:13:46', 'additions': 1133, 'deletions': 27, 'state': 'closed'}, {'id': 728447744, 'number': 304, 'closed': datetime.datetime(2022, 2, 12, 10, 25, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 9, 7, 9, 0, 50, tzinfo=datetime.timezone.utc), 'time_taken': 13656284.0, 'time_delta': '158 days, 1:24:44', 'additions': 1597, 'deletions': 910, 'state': 'closed'}, {'id': 715393649, 'number': 296, 'closed': datetime.datetime(2021, 8, 25, 16, 48, 58, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 18, 20, 25, 45, tzinfo=datetime.timezone.utc), 'time_taken': 591793.0, 'time_delta': '6 days, 20:23:13', 'additions': 115, 'deletions': 13, 'state': 'closed'}, {'id': 712661036, 'number': 290, 'closed': None, 'created': datetime.datetime(2021, 8, 13, 22, 43, 50, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 407, 'deletions': 76, 'state': 'open'}, {'id': 711946102, 'number': 289, 'closed': datetime.datetime(2021, 8, 27, 15, 50, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 2, 6, 28, tzinfo=datetime.timezone.utc), 'time_taken': 1259045.0, 'time_delta': '14 days, 13:44:05', 'additions': 568, 'deletions': 88, 'state': 'closed'}, {'id': 711891354, 'number': 288, 'closed': datetime.datetime(2021, 8, 13, 5, 58, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 13, 1, 15, 2, tzinfo=datetime.timezone.utc), 'time_taken': 16988.0, 'time_delta': '4:43:08', 'additions': 3, 'deletions': 19, 'state': 'closed'}, {'id': 706107464, 'number': 283, 'closed': datetime.datetime(2021, 10, 9, 9, 55, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 8, 21, 13, 21, tzinfo=datetime.timezone.utc), 'time_taken': 5316116.0, 'time_delta': '61 days, 12:41:56', 'additions': 803, 'deletions': 129, 'state': 'closed'}, {'id': 706083277, 'number': 282, 'closed': datetime.datetime(2021, 8, 13, 20, 40, 45, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 8, 18, 1, 52, tzinfo=datetime.timezone.utc), 'time_taken': 441533.0, 'time_delta': '5 days, 2:38:53', 'additions': 679, 'deletions': 10, 'state': 'closed'}, {'id': 704665224, 'number': 278, 'closed': datetime.datetime(2021, 8, 5, 19, 0, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 5, 12, 32, 57, tzinfo=datetime.timezone.utc), 'time_taken': 23264.0, 'time_delta': '6:27:44', 'additions': 101, 'deletions': 7, 'state': 'closed'}, {'id': 701490014, 'number': 276, 'closed': datetime.datetime(2021, 8, 3, 7, 30, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 8, 2, 13, 55, 42, tzinfo=datetime.timezone.utc), 'time_taken': 63268.0, 'time_delta': '17:34:28', 'additions': 413, 'deletions': 23, 'state': 'closed'}, {'id': 700190554, 'number': 272, 'closed': datetime.datetime(2021, 7, 30, 18, 4, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 30, 10, 37, 25, tzinfo=datetime.timezone.utc), 'time_taken': 26811.0, 'time_delta': '7:26:51', 'additions': 282, 'deletions': 3, 'state': 'closed'}, {'id': 696541296, 'number': 269, 'closed': datetime.datetime(2021, 8, 5, 18, 16, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 25, 18, 1, 26, tzinfo=datetime.timezone.utc), 'time_taken': 951300.0, 'time_delta': '11 days, 0:15:00', 'additions': 698, 'deletions': 2, 'state': 'closed'}, {'id': 692652180, 'number': 266, 'closed': datetime.datetime(2021, 7, 30, 20, 15, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 19, 14, 20, 37, tzinfo=datetime.timezone.utc), 'time_taken': 971701.0, 'time_delta': '11 days, 5:55:01', 'additions': 146, 'deletions': 1, 'state': 'closed'}, {'id': 691059565, 'number': 263, 'closed': datetime.datetime(2021, 7, 30, 18, 35, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 21, 56, 6, tzinfo=datetime.timezone.utc), 'time_taken': 1283948.0, 'time_delta': '14 days, 20:39:08', 'additions': 59, 'deletions': 24, 'state': 'closed'}, {'id': 690927662, 'number': 262, 'closed': datetime.datetime(2021, 7, 30, 19, 20, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 15, 17, 56, 12, tzinfo=datetime.timezone.utc), 'time_taken': 1301038.0, 'time_delta': '15 days, 1:23:58', 'additions': 84, 'deletions': 21, 'state': 'closed'}, {'id': 688852753, 'number': 260, 'closed': datetime.datetime(2021, 8, 5, 19, 29, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 11, 15, 8, tzinfo=datetime.timezone.utc), 'time_taken': 2016889.0, 'time_delta': '23 days, 8:14:49', 'additions': 601, 'deletions': 11, 'state': 'closed'}, {'id': 688820245, 'number': 259, 'closed': datetime.datetime(2021, 8, 4, 9, 40, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 13, 10, 46, 49, tzinfo=datetime.timezone.utc), 'time_taken': 1896818.0, 'time_delta': '21 days, 22:53:38', 'additions': 244, 'deletions': 9, 'state': 'closed'}, {'id': 686799321, 'number': 256, 'closed': datetime.datetime(2021, 7, 10, 19, 55, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 9, 13, 41, 3, tzinfo=datetime.timezone.utc), 'time_taken': 108875.0, 'time_delta': '1 day, 6:14:35', 'additions': 397, 'deletions': 53, 'state': 'closed'}, {'id': 683146955, 'number': 254, 'closed': datetime.datetime(2021, 7, 10, 19, 56, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 7, 4, 10, 0, 8, tzinfo=datetime.timezone.utc), 'time_taken': 554171.0, 'time_delta': '6 days, 9:56:11', 'additions': 257, 'deletions': 21, 'state': 'closed'}, {'id': 675962751, 'number': 252, 'closed': datetime.datetime(2021, 6, 23, 11, 16, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 23, 5, 29, 5, tzinfo=datetime.timezone.utc), 'time_taken': 20867.0, 'time_delta': '5:47:47', 'additions': 44, 'deletions': 62, 'state': 'closed'}, {'id': 673873196, 'number': 250, 'closed': datetime.datetime(2021, 6, 29, 17, 26, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 19, 12, 28, 8, tzinfo=datetime.timezone.utc), 'time_taken': 881904.0, 'time_delta': '10 days, 4:58:24', 'additions': 127, 'deletions': 10, 'state': 'closed'}, {'id': 672685897, 'number': 249, 'closed': datetime.datetime(2021, 6, 22, 20, 10, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 17, 14, 22, 35, tzinfo=datetime.timezone.utc), 'time_taken': 452892.0, 'time_delta': '5 days, 5:48:12', 'additions': 105, 'deletions': 99, 'state': 'closed'}, {'id': 665767219, 'number': 243, 'closed': datetime.datetime(2021, 7, 12, 20, 47, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 9, 10, 17, 16, tzinfo=datetime.timezone.utc), 'time_taken': 2889001.0, 'time_delta': '33 days, 10:30:01', 'additions': 12, 'deletions': 68, 'state': 'closed'}, {'id': 665100487, 'number': 240, 'closed': datetime.datetime(2021, 7, 8, 14, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 6, 8, 17, 11, 32, tzinfo=datetime.timezone.utc), 'time_taken': 2583088.0, 'time_delta': '29 days, 21:31:28', 'additions': 780, 'deletions': 49, 'state': 'closed'}, {'id': 658482211, 'number': 235, 'closed': datetime.datetime(2021, 6, 9, 10, 35, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 31, 19, 16, 29, tzinfo=datetime.timezone.utc), 'time_taken': 746317.0, 'time_delta': '8 days, 15:18:37', 'additions': 169, 'deletions': 48, 'state': 'closed'}, {'id': 652129557, 'number': 231, 'closed': datetime.datetime(2021, 6, 23, 11, 21, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 5, 25, 10, 3, 9, tzinfo=datetime.timezone.utc), 'time_taken': 2510281.0, 'time_delta': '29 days, 1:18:01', 'additions': 153, 'deletions': 42, 'state': 'closed'}, {'id': 615555161, 'number': 223, 'closed': datetime.datetime(2021, 8, 19, 1, 45, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 4, 14, 21, 22, 7, tzinfo=datetime.timezone.utc), 'time_taken': 10902211.0, 'time_delta': '126 days, 4:23:31', 'additions': 2, 'deletions': 1, 'state': 'closed'}, {'id': 592456464, 'number': 212, 'closed': datetime.datetime(2021, 5, 25, 13, 57, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 3, 14, 1, 42, 21, tzinfo=datetime.timezone.utc), 'time_taken': 6264879.0, 'time_delta': '72 days, 12:14:39', 'additions': 533, 'deletions': 27, 'state': 'closed'}, {'id': 581367631, 'number': 200, 'closed': datetime.datetime(2021, 3, 7, 5, 17, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2021, 2, 27, 17, 1, 4, tzinfo=datetime.timezone.utc), 'time_taken': 648956.0, 'time_delta': '7 days, 12:15:56', 'additions': 1893, 'deletions': 73, 'state': 'closed'}]"
