pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
1401621350,"[GSoC'23] Add pseudo-remainder, pseudo-division, pseudo-quotient and pseudo-exact quotient methods using sparse representation","<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Reference PR 
https://github.com/sympy/sympy/pull/25226

Related Issues:
#23131 
#20874 

Benchmarks for the `gcd` methods:
https://github.com/sympy/sympy_benchmarks/pull/89
#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25278,https://api.github.com/repos/sympy/sympy/pulls/25278,https://github.com/sympy/sympy/pull/25278,closed,397,16,2,21,23,73,2,0,"[{'name': 'polys'}, {'name': 'Performance'}]",2023-06-21 12:39:29+00:00,2023-07-14 21:11:24+00:00,2017915.0,"23 days, 8:31:55","[{'comment_id': 1236973148, 'comment_body': 'This should just be called `prem`.', 'comment_created': datetime.datetime(2023, 6, 21, 13, 7, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1236973919, 'comment_body': 'Since this is a method on sparse polynomials we don\'t need to say ""using the sparse representation"".', 'comment_created': datetime.datetime(2023, 6, 21, 13, 8, 22, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1236974882, 'comment_body': 'This still does not match the format in the style guide:\r\nhttps://docs.sympy.org/latest/contributing/docstring.html#parameters-section', 'comment_created': datetime.datetime(2023, 6, 21, 13, 9, 9, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1236976061, 'comment_body': ""We don't need a description of all steps of the algorithm. Instead this should explain what is actually computed and returned."", 'comment_created': datetime.datetime(2023, 6, 21, 13, 10, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1236980652, 'comment_body': 'I am not sure about this `as_polynomial` method. At least if it is needed at all it should be a private method but I am not convinced it is needed. I suggest removing it for now.', 'comment_created': datetime.datetime(2023, 6, 21, 13, 13, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1236988945, 'comment_body': 'But it is called in `coeff_wrt` function\r\nHere it is \r\nhttps://github.com/sympy/sympy/pull/25278/files#diff-ed6115a0a60023231fb8575bfc92d46f79f38b7fd075ab15ed43098239823eecR2573', 'comment_created': datetime.datetime(2023, 6, 21, 13, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1237006076, 'comment_body': ""This is the only place `as_polynomial` is used but I think it would be more efficient here to collect only the terms that have the expected degree in `sym` rather than processing all terms like `as_polynomial` does:\r\n```python\r\nIn [57]: R = QQ[x,y,z]\r\n\r\nIn [58]: p = R.from_sympy(x*z + z + y)\r\n\r\nIn [59]: p.listterms()\r\nOut[59]: [((0, 1, 0), mpq(1,1)), ((0, 0, 1), mpq(1,1)), ((1, 0, 1), mpq(1,1))]\r\n\r\nIn [60]: terms = [(m, c) for m, c in p.iterterms() if m[2] == 1]\r\n\r\nIn [61]: terms\r\nOut[61]: [((0, 0, 1), mpq(1,1)), ((1, 0, 1), mpq(1,1))]\r\n\r\nIn [62]: monoms, coeffs = zip(*terms)\r\n\r\nIn [63]: monoms\r\nOut[63]: ((0, 0, 1), (1, 0, 1))\r\n\r\nIn [64]: coeffs\r\nOut[64]: (mpq(1,1), mpq(1,1))\r\n\r\nIn [66]: monoms = [m[:2] + (0,) + m[3:] for m in monoms]\r\n\r\nIn [67]: monoms\r\nOut[67]: [(0, 0, 0), (1, 0, 0)]\r\n\r\nIn [70]: p.ring.from_dict(dict(zip(monoms, coeffs)))\r\nOut[70]: x + 1\r\n```\r\nSo that's:\r\n```python\r\nterms = [(m, c) for m, c in p.iterterms() if m[i] == dg]\r\nmonoms, coeffs = zip(*terms)\r\nmonoms = [m[:i] + (0,) + m[i + 1:] for m in monoms]\r\np.ring.from_dict(dict(zip(monoms, coeffs)))\r\n```"", 'comment_created': datetime.datetime(2023, 6, 21, 13, 29, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1238841700, 'comment_body': 'This should be called with an instance of the class right ? This is leading to flake8 errors.', 'comment_created': datetime.datetime(2023, 6, 22, 17, 36, 45, tzinfo=datetime.timezone.utc), 'commenter': 'faze-geek', 'type': 'User'}, {'comment_id': 1238842794, 'comment_body': 'Here also, It would be called with an instance of the class.', 'comment_created': datetime.datetime(2023, 6, 22, 17, 37, 58, tzinfo=datetime.timezone.utc), 'commenter': 'faze-geek', 'type': 'User'}, {'comment_id': 1238844158, 'comment_body': 'https://github.com/sympy/sympy/blob/998a04f12053059be26a44d5b7011eda1def7929/sympy/polys/rings.py#L2659-L2660\r\n\r\nInvestigate the repeat of function name here. It is causing a flake8 error.', 'comment_created': datetime.datetime(2023, 6, 22, 17, 39, 29, tzinfo=datetime.timezone.utc), 'commenter': 'faze-geek', 'type': 'User'}, {'comment_id': 1242028006, 'comment_body': 'Probably the parameter should be called `x` rather than `sym`. At least the docstring should be consistent with the parameter name.', 'comment_created': datetime.datetime(2023, 6, 26, 11, 15, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242030762, 'comment_body': 'Why is this called `prem2`? The existing `prem` method should be changed.', 'comment_created': datetime.datetime(2023, 6, 26, 11, 16, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242032759, 'comment_body': 'This example does not really demonstrate the purpose of the `coeff_wrt` method because it only gathers a single coefficient.', 'comment_created': datetime.datetime(2023, 6, 26, 11, 17, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242033663, 'comment_body': 'I think it should be possible to pass `sym` as the generator like with the `degree` method.', 'comment_created': datetime.datetime(2023, 6, 26, 11, 17, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242034851, 'comment_body': 'The `x` parameter could be made optional like `x=None` and then by default it would return the `prem` as computed by the existing method (wrt the first generator).', 'comment_created': datetime.datetime(2023, 6, 26, 11, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242035583, 'comment_body': 'The `x` parameter here cannot be a Symbol so this is inaccurate.', 'comment_created': datetime.datetime(2023, 6, 26, 11, 19, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242039580, 'comment_body': 'Then I also remove this one?\r\nhttps://github.com/sympy/sympy/blob/eaa65dae74f43a84ae708fe0b91db215ea37d2f6/sympy/polys/rings.py#L2540-L2542', 'comment_created': datetime.datetime(2023, 6, 26, 11, 22, 17, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1242044260, 'comment_body': 'Yes. It should be checked that the output of `f.prem(g)` is still the same as it was previously though. If there are no tests for the `prem` method then tests should be added.', 'comment_created': datetime.datetime(2023, 6, 26, 11, 24, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242123019, 'comment_body': 'Should I make `sym` optional?', 'comment_created': datetime.datetime(2023, 6, 26, 12, 33, 43, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1242138187, 'comment_body': 'Saying the ""degree is negative"" is just a confusing way of saying that `g` is zero. It would be better just to say that directly.\r\n\r\nWhat does ""an unexpected condition"" mean? We should not list that as something that is raised unless the user can provide inputs that are expected to lead to that exception.', 'comment_created': datetime.datetime(2023, 6, 26, 12, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242139228, 'comment_body': 'There should be a definition somewhere of what the pseudo remainder is.', 'comment_created': datetime.datetime(2023, 6, 26, 12, 47, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242140696, 'comment_body': 'I think that ""sparse coefficient"" is a confusing term. Some other wording should be used to describe what is returned.', 'comment_created': datetime.datetime(2023, 6, 26, 12, 48, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242143400, 'comment_body': 'No. If it was optional then it would presumably default to doing something that some other method already does like `LC`.', 'comment_created': datetime.datetime(2023, 6, 26, 12, 51, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1242290968, 'comment_body': 'Should I use `PolynomialDivisionFailed`instead of `ValueError`?', 'comment_created': datetime.datetime(2023, 6, 26, 14, 27, 25, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1242295013, 'comment_body': 'When would the exception be raised?', 'comment_created': datetime.datetime(2023, 6, 26, 14, 30, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243397976, 'comment_body': 'With the latest changes this does not need to be an int.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243400708, 'comment_body': 'Rather than using `x=2` I would just make two examples like:\r\n```\r\n        Find the coefficient of `z^2` as a polynomial in `x` and `y`:\r\n\r\n        >>> p.coeff_wrt(z, 2)\r\n        10*x + 10\r\n        >>> p.coeff_wrt(2, 2)  # Using the generator index\r\n        10*x + 10\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 9, 9, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243403854, 'comment_body': 'We don\'t need to say ""If the degree of `g` is negative or g is the zero polynomial"" because these two things are equivalent. Only the zero polynomial has a negative degree. This should just say ""if g is the zero polynomial"".\r\n\r\nI don\'t think that `ValueError` should be mentioned here. The impression I have is that it represents a condition that should never happen. I think the check is just there to pick up on a possible bug.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 12, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243405194, 'comment_body': 'The docstring text should be wrapped to an 80 column limit.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 13, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243407721, 'comment_body': 'We can give a simpler definition of the psuedo remainder like the one in the description section here:\r\nhttps://www.maplesoft.com/support/help/maple/view.aspx?path=prem\r\n\r\nIs that equivalent to what this method computes?', 'comment_created': datetime.datetime(2023, 6, 27, 9, 15, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243413353, 'comment_body': 'This was marked as resolved but it does not seem to be resolved to me. The test here does not really demonstrate what this method does or what its purpose is because the same output would be obtained from the `coeff` method:\r\n```python\r\nIn [26]:     _, x, y, z = ring(""x, y, z"", ZZ)\r\n    ...:     p1 = 4*x**3 + 5*y**2 + 6*z + 7\r\n\r\nIn [27]: p1.coeff(y**2)\r\nOut[27]: mpz(5)\r\n```\r\nIt is fine to have this test but there also need to more tests that clearly show what this method does. If someone changes the `coeff_wrt` method in future then the tests should show if it is working correctly.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 19, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243414628, 'comment_body': 'This test function name is not really appropriate. PolyElement is always sparse. What is tested here is `coeff_wrt` and `prem`. Perhaps make separate test functions for each.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 20, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243415539, 'comment_body': 'This should clarify that the `x` parameter is optional and explain what its default value represents.', 'comment_created': datetime.datetime(2023, 6, 27, 9, 21, 26, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243506114, 'comment_body': 'it should `generator or generator index` ?', 'comment_created': datetime.datetime(2023, 6, 27, 10, 21, 28, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1243516796, 'comment_body': '> it should `generator or generator index` ?\r\n\r\nYes, I guess so.', 'comment_created': datetime.datetime(2023, 6, 27, 10, 30, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243529403, 'comment_body': 'Yes, it is equivalent to the `prem` method in this PR.', 'comment_created': datetime.datetime(2023, 6, 27, 10, 39, 33, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1243603631, 'comment_body': 'The parameter is called `dg` but the docstring refers to `deg`. These should be made consistent. I suggest using `deg` as the parameter name.', 'comment_created': datetime.datetime(2023, 6, 27, 11, 47, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243604500, 'comment_body': 'Also there is no parameter `f`.', 'comment_created': datetime.datetime(2023, 6, 27, 11, 48, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243604918, 'comment_body': ""There is no parameter `p`. It is `self` but we don't need to list `self` in the parameters of a method."", 'comment_created': datetime.datetime(2023, 6, 27, 11, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243606643, 'comment_body': 'The return value is not of type `sympy.Expr`. It is a `PolyElement`:\r\n```\r\nPolyElement\r\n    The coefficient of ``x**deg`` as a polynomial in the same ring.\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 11, 50, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243607288, 'comment_body': 'Remove the `dg = 2`.', 'comment_created': datetime.datetime(2023, 6, 27, 11, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243607703, 'comment_body': 'Or otherwise use it in both examples.', 'comment_created': datetime.datetime(2023, 6, 27, 11, 51, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243610368, 'comment_body': 'It would be good to include an example using `coeff` here to show the difference e.g.:\r\n```python\r\n>>> p.coeff(z**2)\r\n10\r\n```\r\nAlso it would be good to have a see also section referring to `coeff` and possibly other related methods.', 'comment_created': datetime.datetime(2023, 6, 27, 11, 53, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243615528, 'comment_body': 'This is unclear and ambiguous.\r\n\r\nThere are references to `f` but there is no parameter `f`.\r\n\r\nThe definition should also refer to the parameter `x`.\r\n\r\nIt is confusing to refer to the polynomials `q0`, ... which are not at all defined.\r\n\r\nAlso degree here means degree wrt `x` so that should be stated explicitly.', 'comment_created': datetime.datetime(2023, 6, 27, 11, 58, 7, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243618893, 'comment_body': ""I'm unresolving this because it is not resolved:\r\n\r\nThe parameter is not a Symbol:\r\n```\r\nIn [4]: import sympy\r\n\r\nIn [5]: x1 = sympy.Symbol('x')\r\n\r\nIn [6]: R, x2 = sympy.ring('x', ZZ)\r\n\r\nIn [7]: x1 == x2\r\nOut[7]: False\r\n\r\nIn [8]: type(x1)\r\nOut[8]: sympy.core.symbol.Symbol\r\n\r\nIn [9]: type(x2)\r\nOut[9]: sympy.polys.rings.PolyElement\r\n```\r\nThe parameter is either an `int` or a generator given as a `PolyElement` but not a `Symbol`. I would refer to it as a generator here and then use the doctest examples to show precisely what types it can be.\r\n\r\nIf the parameter is not provided then the default is that the first generator is chosen. That should be stated explicitly and also demonstrated in the doctest examples."", 'comment_created': datetime.datetime(2023, 6, 27, 12, 1, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243619352, 'comment_body': 'There is no parameter `f`.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 1, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243620219, 'comment_body': 'There should be examples demonstrating the use of the `x` parameter.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 2, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243622771, 'comment_body': 'Should these not just return zero?', 'comment_created': datetime.datetime(2023, 6, 27, 12, 4, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243627522, 'comment_body': 'There should be only one blank line between methods in a class.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 7, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243646778, 'comment_body': 'No, Currently this gives an error \r\n```python\r\nTraceback (most recent call last):\r\n  File ""<stdin>"", line 1, in <module>\r\n  File ""C:\\Users\\DELL\\OneDrive\\Desktop\\gsoc_pr2\\sympy\\polys\\rings.py"", line 2574, in coeff_wrt\r\n    terms = [(m, c) for m, c in p.iterterms() if m[i] == deg]\r\n    ^^^^^^^^^^^^^^\r\nValueError: not enough values to unpack (expected 2, got 0)\r\n```\r\n', 'comment_created': datetime.datetime(2023, 6, 27, 12, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1243660809, 'comment_body': 'Then it should be fixed to return zero.', 'comment_created': datetime.datetime(2023, 6, 27, 12, 33, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243728004, 'comment_body': '``` python\r\n    The pseudo-remainder `r` of polynomial `self` with respect to `g` is a polynomial\r\n    such that there exist polynomials `q0`, `q1`, ..., `q(n-1)` satisfying the equation:\r\n    \r\n        self = q0 * g + r\r\n        \r\n    where the degree of polynomial `r` (with respect to the variable `x`) is strictly\r\n    lower than the degree of polynomial `g` (with respect to the variable `x`).\r\n```\r\nIs it clear ?', 'comment_created': datetime.datetime(2023, 6, 27, 13, 19, 33, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1243812224, 'comment_body': ""> Is it clear ?\r\n\r\nNo, because you haven't said anything about what the polynomials `q0` etc are. This definition does not mean anything mathematically.\r\n\r\nThe definition in the Maple docs is much clearer:\r\nhttps://www.maplesoft.com/support/help/maple/view.aspx?path=prem\r\n\r\nHere is a longer explanation although we should use something shorter than this:\r\n\r\nGiven two univariate polynomials `f` and `g` with coefficients in a field we can define Euclidean polynomial division uniquely. The Euclidean division of `f` by `g` is a pair of polynomials `q` and `r` (the quotient and remainder respectively) such that\r\n$$f = gq + r$$\r\nwhere `r` satisfies a degree bound: $\\mathrm{deg}(r) < \\mathrm{deg}(g)$.\r\n\r\nIn general Euclidean division of polynomials requires arbitrary exact division in the coefficient ring so for Euclidean division to be always well defined we require the coefficients to belong to a field (rather than a general ring). In particular we will in general need to be able to divide by the leading coefficient of `g`, $\\mathrm{LC}(g)$ or otherwise the Euclidean division might not exist for all polynomials `f` and `g`.\r\n\r\nGiven two univariate polynomials `f` and `g` with coefficients in a domain (rather than a field) we can always define polynomial pseudo-division uniquely. The pseudo division of `f` by `g` is a pair of polynomials `q` and `r` such that\r\n$$mf = gq + r$$\r\nwhere $\\mathrm{deg}(r) < \\mathrm{deg}(g)$ and `m` is a power of the leading coefficient of `g`: $m = \\mathrm{LC}(g)^{\\mathrm{deg}(f) - \\mathrm{deg}(g) + 1}$. Premultiplying `f` by `m` ensures that any divisions of the coefficients needed will be exact even though the coefficients do not belong to a field.\r\n\r\nThe `prem` method here treats multivariate polynomials in a ring like `R[x,y,z]` as univariate polynomials with coefficients that are polynomials e.g. like an element of the ring `R[x,y][z]`. Then we can say that the pseudo quotient and pseudo remainder with respect to `z` when dividing `f` by `g` are polynomials `q` and `r` such that\r\n$$mf = gq + r$$\r\nwith $\\mathrm{deg}(r, z) < \\mathrm{deg}(g, z)$ and $m = \\mathrm{LC}(g, z)^{\\mathrm{deg}(f, z) - \\mathrm{deg}(g, z) + 1}$. The `prem` method returns the pseudoremainder `r`. The `pquo` method returns the pseudoquotient `q` and `pdiv` returns the tuple `(q, r)`."", 'comment_created': datetime.datetime(2023, 6, 27, 14, 7, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1243820197, 'comment_body': 'This should return the zero polynomial as a PolyElement not the `int` zero: `p.ring.zero`.', 'comment_created': datetime.datetime(2023, 6, 27, 14, 12, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1244120243, 'comment_body': 'Why does this call index twice? When would index return None?', 'comment_created': datetime.datetime(2023, 6, 27, 17, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1244133606, 'comment_body': 'There should be See Also for `pquo`, `pdiv` and `pexquo`', 'comment_created': datetime.datetime(2023, 6, 27, 17, 50, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1244138573, 'comment_body': 'It should be like this?\r\n``` python       \r\n f = self\r\n        if x is None:\r\n            x = f.ring.index(x)\r\n        x = f.ring.index(x) \r\n        df = f.degree(x)\r\n        dg = g.degree(x)\r\n```\r\nshould I change the variable name `x` here , I think it is confusing.\r\n\r\n        x = f.ring.index(x) \r\n        df = f.degree(x)\r\n        dg = g.degree(x)\r\n```', 'comment_created': datetime.datetime(2023, 6, 27, 17, 54, 19, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1244371878, 'comment_body': 'Again I am unresolving this. If this parameter is optional then there needs to be an explicit explanation here of what happens when an argument is not supplied.', 'comment_created': datetime.datetime(2023, 6, 27, 21, 18, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1244375965, 'comment_body': ""I didn't really mean for all of this to be included in the docstring. This information belongs somewhere. Perhaps it should be in the `pdiv` docstring and then the other methods should refer to that docstring.\r\n\r\nIdeally we would have a shorter explanation though."", 'comment_created': datetime.datetime(2023, 6, 27, 21, 22, 40, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1246998046, 'comment_body': 'You are referring here to `a` and `b` but there is no `a` and `b` anywhere else.', 'comment_created': datetime.datetime(2023, 6, 29, 18, 59, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1246999517, 'comment_body': ""Also this looks like it is more or less copied from the Maple docs. We need to be careful about plagiarism and copyright so don't copy from there.\r\nhttps://www.maplesoft.com/support/help/maple/view.aspx?path=prem"", 'comment_created': datetime.datetime(2023, 6, 29, 19, 1, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1247180502, 'comment_body': ""> Also this looks like it is more or less copied from the Maple docs. We need to be careful about plagiarism and copyright so don't copy from there. https://www.maplesoft.com/support/help/maple/view.aspx?path=prem\r\n\r\nSorry, my apologies I will remember and careful about these from the next time."", 'comment_created': datetime.datetime(2023, 6, 29, 21, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1260179372, 'comment_body': 'It contains a single test for all the methods.\r\nShould I add more tests for different methods like I did for `prem`.', 'comment_created': datetime.datetime(2023, 7, 11, 19, 24, 2, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1260227885, 'comment_body': 'Yes', 'comment_created': datetime.datetime(2023, 7, 11, 20, 9, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260962376, 'comment_body': 'Single backticks in sphinx lead to LaTeX rendering. I expect that\r\n```\r\n`LC(g, x) ^ (deg(f, x) - deg(g, x) + 1)`\r\n```\r\nwill render badly. Instead use double backticks for code rendering and dollars for LaTeX but make sure that what you write is something that should either render with LaTeX or be read as code e.g.:\r\n```\r\n$\\mathrm{LC}(g, x)^{\\mathrm{deg}(f, x) - \\mathrm{deg}(g, x) + 1}$\r\n   or\r\n``LC(g, x) ** (degree(f, x) - degree(g, x) + 1)``\r\n```\r\nIn some cases it is better to use code rendering and in others it is better to use LaTeX rendering but if you let sphinx apply LaTeX rendering for something that is supposed to be code it will come out weird.\r\n\r\nProbably here `LC(g, x)^(defg...` will result in having a superscript bracket which is not what you want.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260964995, 'comment_body': 'Also the paragraph formatting above is off. Paragraphs should be separated by a blank line. If this last sentence is part of the same paragraph then it should be linear wrapped (remove the newline after full stop).', 'comment_created': datetime.datetime(2023, 7, 12, 10, 27, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260965689, 'comment_body': 'The text below should be wrapped as well. Your code editor should have some function for wrapping selected text at a consistent width like 80 characters.', 'comment_created': datetime.datetime(2023, 7, 12, 10, 27, 45, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260967331, 'comment_body': 'It is redundant to call index here when `pdiv` will do it again anyway. Same in pexquo', 'comment_created': datetime.datetime(2023, 7, 12, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260977222, 'comment_body': 'The sphinx job failed. You should try building the docs yourself and also check what they look like and how they render:\r\nhttps://docs.sympy.org/latest/contributing/build-docs.html', 'comment_created': datetime.datetime(2023, 7, 12, 10, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1263038643, 'comment_body': ""Long lines should be wrapped. Even in full screen I can't see this whole line."", 'comment_created': datetime.datetime(2023, 7, 13, 20, 45, 31, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1263452247, 'comment_body': 'This should not say ""exact"". The `pexquo` method should say exact instead.', 'comment_created': datetime.datetime(2023, 7, 14, 8, 24, 51, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1263458389, 'comment_body': ""I don't think that we need to duplicate this definition here given that it is already in `pdiv`. We can just say\r\n```\r\n        Pseudo-remainder of the polynomial ``self`` with respect to ``g``.\r\n\r\n        The pseudo-quotient ``q`` and pseudo-remainder ``r`` with respect to\r\n        ``z`` when dividing ``f`` by ``g`` satisfy ``mf = gq + r``,\r\n        where ``deg(r,z) < deg(g,z)`` and\r\n        ``m = LC(g,z)**(deg(f,z) - deg(g,z)+1)``.\r\n\r\n        See :meth:`pdiv` for explanation of pseudo-division.\r\n```\r\nProbably\r\n```\r\n``mf = gq + r``\r\n```\r\nshould be changed to\r\n```\r\n``m*f = g*q + r``\r\n```\r\nor\r\n```\r\n``m f = g q + r``\r\n```\r\nor otherwise it should be changed to LaTeX.  When not in LaTeX format it is not clear that `mf` is a product of `m` and `f` rather than a single variable name.\r\n\r\nIn the examples section it would be good to show an example that contrasts `pquo` with `quo` to show the difference. There should be a see also for `quo`."", 'comment_created': datetime.datetime(2023, 7, 14, 8, 31, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1263462544, 'comment_body': 'Here you can spell out what these are:\r\n```\r\nprem\r\n    Computes only the pseudo-remainder more efficiently than `f.pdiv(g)[1]`.\r\npquo\r\n    Returns only the pseudo-quotient.\r\npexquo\r\n    Returns only an exact pseudo-quotient having no remainder.\r\n```', 'comment_created': datetime.datetime(2023, 7, 14, 8, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '5cf979d93f5d42364529466039416d7226831352', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '998a04f12053059be26a44d5b7011eda1def7929', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '143d346102c766f6c10286fc9c0a0d13e9b23b1d', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55dd89cb8efce3c93fcb2aeab85b1d65389a311c', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20296265302ed607833acb0d4715cb33de72a57b', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2845ab4ad10e5bbe41f0633a58cd5427ebbd597b', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd83c3a4f55828e22cc3a46edf9a7010e0a5e39fa', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f864b1678346402b9e10193442ca347dd692b26a', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '775b7f34a15dd3f6267db78fef3ed243b6ca78f8', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '903fff2c0cfa70dd2febd19094f9f28c5e8deda7', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '139aa4ff33b23959c8e025f59104d7f84ef0eca9', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35109eead7413de48b9ebc7db83c715bbe30f838', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98ae545742d6ed1515a0fc0e68145a184eac9798', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd03b3d2d3c8810319b840964878bee0f3b5ac139', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e5b8b8f9c60ee5299809a90b31695b82c1dbc213', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ae617cbb5ffc9d64679efaa14c99016e2ef4a74c', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2b49eab8fc8efbfee092510f365e4f7e52e4a81', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '446c889ac86a5272bfb2737454dfe49a967f18b0', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '15aa0153240e058dbb16fcabd973115c640e7c9b', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6e20e542c279bd7451b06d014c5338ce4941a6c8', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e611e0549604cd3e3efb7082beb7b35a7669b507', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}]",Abhishek Patidar,95904102,1e9abhi1e10@gmail.com,User,,40,,3,13
1412089957,Add benchmarks for pseudo remainder method,"This PR adds the benchmarks for the pseudo-remainder method.
Related Issue:
#88

See [sympy/sympy#25278](https://github.com/sympy/sympy/pull/25278)",True,89,https://api.github.com/repos/sympy/sympy_benchmarks/pulls/89,https://github.com/sympy/sympy_benchmarks/pull/89,closed,153,4,1,19,31,27,0,0,[],2023-06-28 17:48:33+00:00,2023-07-14 08:10:20+00:00,1347707.0,"15 days, 14:21:47","[{'comment_id': 1245619283, 'comment_body': 'We should time separately for each value of v. This also includes the time to construct the polynomials which it should not.\r\n\r\nThe benchmarks should be more like this one:\r\nhttps://github.com/sympy/sympy_benchmarks/blob/3680cc194e5af27663c7e46215bf89789766291e/benchmarks/integrate.py#L46-L66', 'comment_created': datetime.datetime(2023, 6, 28, 18, 44, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1251811868, 'comment_body': '@oscarbenjamin Is it a good way to add benchmarks?', 'comment_created': datetime.datetime(2023, 7, 4, 10, 4, 41, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1252374120, 'comment_body': 'The `generate_poly_case1` method should not be called inside the `time_` method because its time will be included in what is measured by asv. The setup method should be used to prepare the inputs to `prem` and then the `time_` method should do nothing more than the operation that is being timed (`prem`).', 'comment_created': datetime.datetime(2023, 7, 4, 21, 38, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1252876428, 'comment_body': 'It is important not to put anything in the `time_` method except for the actual thing that we want to time which in this case is the call to `fp.prem`. Anything else will affect the timings recorded by asv. That is why there is a separate `setup` method so that we can setup the objects needed but not include the time for setup in the measured timings.\r\n\r\nThe `time_prem_case4` method is good because it only times the actual call to `prem`.\r\n\r\nThe `time_Polyprem_case4` method is not because it first calls `Poly` and then calls `prem`. The creation of the two `Poly` objects should happen in the `setup` method and not in the `time_` method.', 'comment_created': datetime.datetime(2023, 7, 5, 10, 8, 2, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1252885763, 'comment_body': 'Why not just\r\n```\r\nself.y = symbols(""x, y, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10"")\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 10, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1252892104, 'comment_body': 'I would make this a function separate from the class like:\r\n```python\r\n    def generate_poly_case1(n):\r\n        """"""Linearly dense quartic inputs with quadratic GCDs.""""""\r\n        x, *y = syms = symbols(f\'x, y{n}\')\r\n        D = (1 + x + sum(y)) ** 2\r\n        f = D * (-2 + x - sum(y)) ** 2\r\n        g = D * (2 + x + sum(y)) ** 2\r\n        return f, g, D, syms\r\n```', 'comment_created': datetime.datetime(2023, 7, 5, 10, 21, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1252892901, 'comment_body': 'The indentation is off.', 'comment_created': datetime.datetime(2023, 7, 5, 10, 22, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1255613716, 'comment_body': 'The variables like `y1, y2, ...` are not needed:\r\n```\r\nx, *y = symbols(""x, y:10"")\r\nR = ZZ[x, *y]\r\n```\r\nThese should not be global variables though so move them into the `generate_` methods.\r\n\r\nProbably the best thing here is to do like the PyDy examples and have a superclass that can generate examples and subclasses that time specific methods with specific parameter values.', 'comment_created': datetime.datetime(2023, 7, 7, 10, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1255946299, 'comment_body': '```\r\nx, *y = symbols(""x, y:10"")\r\nR = ZZ[x, *y]\r\n```\r\nThis syntax is only valid in Python 3.11 not in 3.10. For running benchmarks I need python 3.10.\r\n\r\n\r\n```python\r\n\r\nPython 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)] on win32\r\nType ""help"", ""copyright"", ""credits"" or ""license"" for more information.\r\n>>> from sympy import *     \r\n>>> x, *y = symbols(""x, y:10"")\r\n>>> R = ZZ[x, *y]\r\n  File ""<stdin>"", line 1\r\n    R = ZZ[x, *y]\r\n              ^\r\nSyntaxError: invalid syntax\r\n\r\n``` \r\nCan I use it like this? \r\n``` python\r\n>>> R1 = [x] + y\r\n>>> R = ZZ[R1]\r\n>>> R\r\nZZ[x,y0,y1,y2,y3,y4,y5,y6,y7,y8,y9]\r\n```\r\n', 'comment_created': datetime.datetime(2023, 7, 7, 14, 50, 6, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1256230038, 'comment_body': 'I think that it would be better to make separate classes for each of these cases like:\r\n```python\r\nclass LinearDenseQuadraticGCD:\r\n    def generate(self, n):\r\n        ...\r\n\r\nclass SparseGCDHighDegree:\r\n    def generate(self, n):\r\n        ...\r\n```\r\nThen you could avoid the repetitive code that lists all the cases and the timing output would be a bit more meaningful than just ""case1"", ""case2"" etc.:\r\n```\r\n[ 41.24%] ··· ...TimePolyPremFast.time_PolyElement_prem_case1                 ok\r\n[ 41.24%] ··· ======== =============\r\n               param1               \r\n              -------- -------------\r\n                 1      11.7±0.08ms \r\n                 5       94.5±0.9ms \r\n                 8        178±2ms   \r\n                 10       186±1ms   \r\n              ======== =============\r\n\r\n[ 41.40%] ··· ...TimePolyPremFast.time_PolyElement_prem_case2                 ok\r\n[ 41.40%] ··· ======== ============\r\n               param1              \r\n              -------- ------------\r\n                 1      5.73±0.2ms \r\n                 5      36.2±0.7ms \r\n                 8       83.6±2ms  \r\n                 10      101±2ms   \r\n              ======== ============\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 18, 0, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1256265253, 'comment_body': '\r\nShould I include the `time_` function for the respective cases in the same class or in different\r\nlike this ?\r\n\r\n> ```python\r\n> class LinearDenseQuadraticGCD:\r\n>     def generate(self, n):\r\n>\r\n>     def time_(self, n):\r\n\r\n\r\n', 'comment_created': datetime.datetime(2023, 7, 7, 18, 21, 20, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1256290646, 'comment_body': 'There are different ways to do it. The most important thing is how useful the asv output is. The things that we would want are to see how different methods perform relative to each other and how each method performs as n scales up.\r\n\r\nAnother way is to have pairs of parameters like\r\n```\r\nparams = [(1, 1), (1, 2), (1, 5), (2, 1), (2, 2), ...]\r\n```', 'comment_created': datetime.datetime(2023, 7, 7, 18, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1256442089, 'comment_body': 'This sort of repetitive code is the kind of thing that we should try to avoid.', 'comment_created': datetime.datetime(2023, 7, 7, 20, 35, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1257272777, 'comment_body': ""The point is to have different subclasses of e.g. `LinearDenseQuadraticGCD` then each subclass would just use\r\n```python\r\n    (self.f, self.g, self.fp, self.gp, self.fpe, self.gpe) = self.generate()\r\n```\r\nIt could be something like this:\r\n```python\r\nclass _PolyGCDExample:\r\n    def setup(self, n):\r\n        (self.f, self.g, self.fp, self.gp, self.fpe, self.gpe) = self.generate()\r\n\r\nclass _LinearDenseQuadraticGCD:\r\n    def generate(self, n):\r\n        ...\r\n        return f, g, ...\r\n\r\nclass _TimePREM(_PolyGCDExample):\r\n\r\n    def time_prem(self):\r\n        self.values['prem'] = prem(self.f, self.g)\r\n\r\n    def time_prem_PolyElement:\r\n        self.values['prem_PolyElement'] = ...\r\n\r\n    def teardown(self, n):\r\n        # here there should be code to check that the answers in self.values are correct.\r\n\r\nclass TimePREMLinearDenseQuadraticGCD(_LinearDenseQuadraticGCD, _TimePREM):\r\n    params = [1, 3, 5, 8]\r\n```\r\nAlternatively it could be like:\r\n```python\r\ndef generate_linear_dense(n):\r\n    ...\r\n\r\ndef generate_polys(case, n):\r\n    if case == 'linear_dense':\r\n        return generate_linear_dense(n)\r\n    elif case ...\r\n\r\nclass TimePREM:\r\n    params = [('linear_dense', 1), ('linear_dense', 2), ...]\r\n\r\n    def setup(self, case, n):\r\n        self.f, ... = generate_polys(case, n)\r\n\r\n    def time_prem(self, case, n):\r\n        ...\r\n\r\n    def time_prem_PolyElement(...)\r\n```\r\nThere are lots of ways to do this that don't involve the kind of repetitive code I have highlighted here.\r\n\r\nWe need a structure that makes it easy to add new benchmarks for different functions and different cases without large amounts of repetitive code.\r\n\r\nAlso different ways of structuring this lead to different output from asv which may be easier or harder to understand. Using multiple parameters leads to output like this:\r\n```\r\n[ 44.11%] ··· solve.TimeMatrixOperations.time_rref                            ok\r\n[ 44.11%] ··· ======== =========== ============ ============\r\n              --                       param2               \r\n              -------- -------------------------------------\r\n               param1       0           2            5      \r\n              ======== =========== ============ ============\r\n                 3      211±0.2μs   27.3±0.1ms   51.4±0.1ms \r\n                 4      413±0.7μs   68.4±0.2ms   78.6±0.3ms \r\n              ======== =========== ============ ============\r\n```\r\nIf the parameters are not just numbers then that makes it easier to understand. I'm not sure f it is possible to tell `asv` to use something other than just `param1` or `param2` as the parameter names. String parameter values will show in the output though:\r\n```\r\n[ 44.75%] ··· solve.TimeMatrixSolve.time_solve_sym                            ok\r\n[ 44.75%] ··· ======== =========\r\n               param1           \r\n              -------- ---------\r\n                 GE     681±2ms \r\n                 LU     766±8μs \r\n                ADJ     202±3ms \r\n              ======== =========\r\n```\r\nHere we probably want the benchmarks to show how different methods compare for the same class of polynomials. Maybe we want something more like this:\r\n```python\r\nclass _LinearDenseQuadraticGCD:\r\n    def generate(self, n):\r\n        ...\r\n        return f, g, ...\r\n\r\nclass _TimePREM:\r\n\r\n    params = [('prem', 1), ('prem', 2), ..., ('prem_PolyElement', 1), ...]\r\n\r\n    def setup(self, method, n):\r\n        f, g = self.generate(n)\r\n        if method == 'prem':\r\n            self.func = lambda: prem(f, g)\r\n        elif ...\r\n\r\n    def time(self, method, n):\r\n        self.func()\r\n\r\nclass TimePREMLinearDense(_TimePREM, _LinearDenseQuadraticGCD):\r\n    params = [('prem', 1), ('prem', 2), ..., ('prem_PolyElement', 1), ...]\r\n```\r\nThen for each class of polynomials we will see a table showing how each method scales with `n`."", 'comment_created': datetime.datetime(2023, 7, 8, 13, 52, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1257529270, 'comment_body': 'Is it the right way to implement the `teardown` function?', 'comment_created': datetime.datetime(2023, 7, 9, 19, 14, 53, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1258171019, 'comment_body': 'Okay, this looks a lot better.', 'comment_created': datetime.datetime(2023, 7, 10, 12, 24, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1258179438, 'comment_body': 'No because this is comparing the computed value with itself.\r\n\r\nWe either need to have the correct answer stored or we need to check some invariant of the answer. For prem one invariant is:\r\n```python\r\nIn [24]: f = x**2 + y**2 - 1\r\n\r\nIn [25]: g = x + 3*y\r\n\r\nIn [26]: p = prem(f, g, x)\r\n\r\nIn [27]: rem(f*LC(g, x)**degree(g, x), g, x) == p\r\nOut[27]: True\r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 12, 29, 24, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1258926687, 'comment_body': 'I think it should be `rem(f*LC(g, x)**(degree(f, x) - degree(g, x) + 1), g, x)` \r\nhttps://www.maplesoft.com/support/help/Maple/view.aspx?path=prem\r\n\r\nFor the failed cases there might be a problem with `LC` \r\n\r\n ```python\r\n>>> x, y, z = symbols(""x y z"")\r\n>>> R = ZZ[x, y, z]\r\n>>> gpe = 2*x*y + 2*x*z\r\n>>> gp  = R.from_sympy(gpe)\r\n>>> gp.LC\r\n2\r\n``` \r\n```python\r\n>>> x, y, z = symbols(\'x y z\')\r\n>>> gpe = 2*x*y + 2*x*z\r\n>>> LC(gpe,  x)\r\n2*y + 2*z\r\n```\r\n\r\nThe function which can give the desired result is `coeff_wrt(f, x, deg)` which is implemented in https://github.com/sympy/sympy/pull/25278/files\r\n', 'comment_created': datetime.datetime(2023, 7, 10, 21, 20, 39, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1258974099, 'comment_body': '> For the failed cases there might be a problem with `LC`\r\n\r\nYou can convert from one form to another and back if needed e.g.:\r\n```python\r\nIn [540]: R(gp.as_expr().as_poly(x).LC())\r\nOut[540]: 2*y + 2*z\r\n```', 'comment_created': datetime.datetime(2023, 7, 10, 22, 30, 53, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1259950148, 'comment_body': 'Long lines should be wrapped. I have to full screen the browser to be able to see this whole line (and I don\'t usually look at code in full screen). Try to stick to 80 characters. I would write this more like:\r\n```python\r\nclass _TimePREM:\r\n    """"""Benchmarks for `prem` method in polynomials.""""""\r\n\r\n    def setup(self, method, n):\r\n        (f, g, fp, gp, fpe, gpe, x, y, R) = self.generate(n)\r\n\r\n        self.values = {}\r\n        self.f = f\r\n        self.g = g\r\n        self.fp = fp\r\n        self.gp = gp\r\n        self.fpe = fpe\r\n        self.gpe = gpe\r\n        self.x = x\r\n        self.y = y\r\n        self.R = R\r\n\r\n        # Expected result of prem wrt x\r\n        prem_f_g_x = rem(f*LC(g, x)**(degree(f, x) - degree(g, x) + 1), g, x)\r\n        self.ref = prem_f_g_x\r\n        self.ref_1  = R(prem_f_g_x.as_expr())\r\n```\r\nOn the other hand though this is a confusing arrangement you have made because there are two superclasses both assigning to the same attributes. Probably it should be the `generate` method of the other class that assigns all of these attributes to `self` and then this method would just look like:\r\n```python\r\nclass _TimePREM:\r\n    """"""Benchmarks for `prem` method in polynomials.""""""\r\n\r\n    def setup(self, method, n):\r\n\r\n        self.setup_polys(n)\r\n\r\n        # prem_f_g_x == prem(f, g, x)\r\n        f, g, x, R = self.f, self.g, self.x, self.R\r\n        prem_f_g_x = rem(f*LC(g, x)**(degree(f, x) - degree(g, x) + 1), g, x)\r\n\r\n        self.ref_expr = prem_f_g_x\r\n        self.ref_ring  = R(prem_f_g_x.as_expr())\r\n```\r\nRight now the `generate` method is a bit odd because it stores attributes on self and also returns the same values. Generally it is better to decide whether a method is supposed to mutate self or return values.', 'comment_created': datetime.datetime(2023, 7, 11, 16, 0, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260110323, 'comment_body': 'The generate method in one class is assigning things like `self.x` which are also assigned in the `setup_polys` method of the other class. You need to decide whether the generate method is assigning attributes or returning values and there should only be one place where each attribute is assigned.\r\n\r\nRemove the `setup_polys` method from this class and just assign all of these attributes in the `generate` method of the other class. In the example code I showed when I referred to `setup_polys` I meant that the `generate` method could be renamed as `setup_polys` not that there should be redundant `setup_polys` method in this class.', 'comment_created': datetime.datetime(2023, 7, 11, 18, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260164071, 'comment_body': 'Something like ?\r\n```python\r\nclass _SparseNonMonicQuadratic:\r\n    def setup_polys(self, n):\r\n        self.x, *self.y = symbols(""x, y1:9"")\r\n        self.R1 = [self.x] + list(self.y)\r\n        self.R = ZZ[self.R1]\r\n        x, y, R = self.x, self.y, self.R\r\n        D = -1 + x * prod(y[:n])\r\n        f = D * (3 + x * prod(y[:n]))\r\n        g = D * (-3 + x * prod(y[:n]))\r\n        fp, gp = Poly(f, x, *y[:n]), Poly(g, x, *y[:n])\r\n        fpe, gpe = R.from_sympy(f), R.from_sympy(g)\r\n        return f, g, fp, gp, fpe, gpe, x, y, R\r\n\r\n\r\nclass _TimePREM:\r\n    """"""Benchmarks for `prem` method in polynomials.""""""\r\n\r\n    def setup(self, method, n):\r\n\r\n        (f, g, fp, gp, fpe, gpe, x, y, R) = self.setup_polys(n)\r\n\r\n        self.values = {}\r\n\r\n        prem_f_g_x = rem(f * LC(g, x) ** (degree(f, x) - degree(g, x) + 1), g, x)\r\n\r\n        self.ref_expr = prem_f_g_x\r\n        self.ref_ring = R(prem_f_g_x.as_expr())\r\n\r\n        if method == \'prem\':\r\n            self.func = lambda: prem(f, g, x)\r\n\r\n        elif method == \'poly\':\r\n            self.func = lambda: fp.prem(gp)\r\n\r\n        elif method == \'sparse\':\r\n            self.func = lambda: fpe.prem(gpe)\r\n```', 'comment_created': datetime.datetime(2023, 7, 11, 19, 7, 21, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1260170569, 'comment_body': ""if I changed the order like this `time_(self, n, method)` and \r\n`params = [(1, 3 , 5, 8), ('prem', 'poly', 'sparse')]`\r\n then the asv result will looks like this \r\n \r\n ```\r\n[100.00%] ··· polys.TimePREMSparseNonMonicQuadratic.time_prem_methods                                                                                                                                      ok\r\n[100.00%] ··· ======== ============ ============= ============\r\n              --                        param2\r\n              -------- ---------------------------------------\r\n               param1      prem          poly        sparse\r\n              ======== ============ ============= ============\r\n                 1      850±500μs      48.4±2μs    2.67±0.3ms\r\n                 3      581±100μs    1.46±0.03ms   4.73±0.3ms\r\n                 5       536±20μs     4.09±0.2ms   6.89±0.3ms\r\n                 8      1.11±0.6ms    8.14±0.5ms   7.97±0.4ms\r\n              ======== ============ ============= ============\r\n```\r\nI think the above result would not have any problem with the terminal width.\r\nIt looks good for you?"", 'comment_created': datetime.datetime(2023, 7, 11, 19, 14, 14, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1260230725, 'comment_body': ""Yes, that's good. The only thing that would make it better is to set the `param_names` so instead of `param1/2` it could be `degree`  and `implementation` or something like that."", 'comment_created': datetime.datetime(2023, 7, 11, 20, 11, 49, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260323071, 'comment_body': ""The setup method will be called once for each value of `method`. The teardown method will be called also once for each value. Here the teardown method checks *all* values but it should just check the one that was just tested.\r\n\r\nIt would be better if the setup method just stored the expected result for the given format like:\r\n```\r\n        if method == 'prem':\r\n            self.func = lambda: prem(f, g, x)\r\n            self.expected = prem_f_g_x\r\n```\r\nThen the teardown method can just do:\r\n```\r\nassert self.result == self.expected\r\n```\r\nAlso it should not be necessary to use simplify here."", 'comment_created': datetime.datetime(2023, 7, 11, 21, 56, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260327816, 'comment_body': 'This function is still mixed up. It is assigning `self.x` but also returning `x`. What is the design here?\r\n\r\nWhen you write a function you need to decide whether the function is supposed to have side effects (like modifying attributes of self) or whether it is supposed to return something. Most functions should just return something and should not have any side effects.\r\n\r\nSometimes (and this is one of those cases) it might be good to have a function that has side effects. In that situation though we should be clear that the intention of the function is to have side effects and so it should typically not return anything.\r\n\r\nThe assignment to `self.x` above does nothing useful because outside of this function nothing else ever accesses the attribute: it is assigned here and then only accessed here.', 'comment_created': datetime.datetime(2023, 7, 11, 22, 2, 14, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1260979545, 'comment_body': 'Think carefully about what the purpose of this `if/elif` chain is...', 'comment_created': datetime.datetime(2023, 7, 12, 10, 39, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '755f3461ea60d05facef396da7af1145ec4f72b5', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a67669ca714617d6f9aac030a66e6b19b908dbe', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35d18892ac9d0108a79e342a2907a35adf315e28', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf04423c74430fc3fbb1f80d20a79902584417f7', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'eeca2d1896b7dc80dfe7c817595852e4f2fb1d33', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4318b630db0a0439743446ce8c041d948b7d1240', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20374bd75d74dc80748451f7491c1623259a0605', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bc8650c8472a7ff7065c187a337dedde50753ba3', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e8afca17e827a9d873d10a6d5bf354d3b558ae4', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b59c2317fe86fe09bf62dde747e7dfe1314d633f', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '35fc74828c116d2fd3bed5c9780f1ba00d031127', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '87549c2a00bb98158c9d77bcd80ac0511484ebe9', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b708f12cf43f5db53772240d9e18f7511c91698', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2c1b1d240209d496681e4a683afe3e6e83858845', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fe779d1eb479866b2627cba9867f12b3c66be16', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6c6e11632520a4d194313c3b1b9afe27b91e8e1c', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9fb370f866249a820c0b18d83d12772c353da10b', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '745843dc19a235810e1da17dbf5afc16a6295750', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'efac051b9f9e610464551f2f3a7a1aef6d05d7bf', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}]",Abhishek Patidar,95904102,1e9abhi1e10@gmail.com,User,,40,,3,13
1436072244,[GSoC'23]  Add subresultants PRS method using sparse representation,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Related PR: 
https://github.com/sympy/sympy/pull/25278

Related Issues:
#23131 
#20874 


#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",True,25371,https://api.github.com/repos/sympy/sympy/pulls/25371,https://github.com/sympy/sympy/pull/25371,closed,114,6,2,3,19,1,2,0,"[{'name': 'polys'}, {'name': 'Performance'}]",2023-07-15 21:06:42+00:00,2023-07-25 19:33:10+00:00,858388.0,"9 days, 22:26:28","[{'comment_id': 1269584690, 'comment_body': 'Do the tests cover all of the braches of the code? If not can you add tests covering all branches?\r\n\r\nIf you install pytest-cov then you can measure coverage like:\r\n```\r\n$ pytest --cov=sympy.polys.rings sympy/polys/tests/test_rings.py --cov-report=html\r\n```\r\nThen you  can open the `htmlcov/index.html` file in a browser to see a web view of the code that is covered.', 'comment_created': datetime.datetime(2023, 7, 20, 14, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '8e03d1d62045397017d70fd0f2329a89f9965cf2', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '59d89ad1b11a4637f5d81a0ad9c54c65dc290e52', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6cb564e0be0308916cd984c4115e42c39fdebfc4', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}]",Abhishek Patidar,95904102,1e9abhi1e10@gmail.com,User,,40,,3,13
1436325488,Add benchmarks for subresultants PRS method,"This PR adds the benchmarks for the subresultants PRS method.
Related Issue:
https://github.com/sympy/sympy_benchmarks/issues/88

See https://github.com/sympy/sympy/pull/25371",True,94,https://api.github.com/repos/sympy/sympy_benchmarks/pulls/94,https://github.com/sympy/sympy_benchmarks/pull/94,closed,150,14,1,7,16,6,0,0,[],2023-07-16 17:02:54+00:00,2023-07-20 11:35:40+00:00,325966.0,"3 days, 18:32:46","[{'comment_id': 1264720289, 'comment_body': 'I think this is the wrong equation', 'comment_created': datetime.datetime(2023, 7, 16, 17, 43, 58, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1264742098, 'comment_body': '@oscarbenjamin  Is there any formula that exists to check the correct result?', 'comment_created': datetime.datetime(2023, 7, 16, 20, 20, 15, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1265135637, 'comment_body': ""I don't know if there is a formula. Checking against `subresultants` is fine though."", 'comment_created': datetime.datetime(2023, 7, 17, 10, 4, 4, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1268361362, 'comment_body': 'I have mentioned this a few times now:\r\n\r\nLines of code should not be this long. It is especially pointless to make the line too long by adding a long comment at the end of the line: the comment can go anywhere so put it on a different line.\r\n```python\r\n          # for those methods whose output is only a polynomial\r\n          expected = examples.to_poly(expected) \r\n```\r\n\r\nYou might think that this looks reasonable if you have your editor in fullscreen mode but most people do not do that. Usually I like to view code side by side with other things (e.g. a browser or a document or something) so I do not fullscreen the code window.', 'comment_created': datetime.datetime(2023, 7, 19, 16, 57, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1268465145, 'comment_body': 'I apologize for the same mistake again.\r\nI think in that there is no need to wrap the line for the comment. But I should for sure take care of this next time', 'comment_created': datetime.datetime(2023, 7, 19, 18, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1268566228, 'comment_body': 'The formatting here is weird. Usually a comment should line up with the line below. Also I would not break a line in a list comprehension. Either allow the line to be a little longer than usual or shorten the code somehow:\r\n```python\r\n            if isinstance(expected, list):\r\n                # some methods output a list of polynomials\r\n                expected = [examples.to_poly(p) for p in expected]\r\n            else:\r\n                # others output only a single polynomial.\r\n                expected = examples.to_poly(expected)\r\n```', 'comment_created': datetime.datetime(2023, 7, 19, 19, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '361b8888802b0c9dbbaa3d2f2e38106fa01a5b71', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b9b3ba192f790178496126052cbe0329f7b2b122', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4ad8f9b096f820f22344e57551ab2265235464f', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7f262973111c78ca4621b095ea3b69e05c51285a', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '487e98188a35b2da95c44d636652f451b0884c54', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aded1b1bcaddcefebfb711a1fff0b70824e64705', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef0a82436c3b8c7e45c24560ad0ff5c3cc2e9ef7', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}]",Abhishek Patidar,95904102,1e9abhi1e10@gmail.com,User,,40,,3,13
1453964617,[GSoC'23] Add gcd using subresultants PRS algorithm,"<!-- Your title above should be a short description of what
was changed. Do not include the issue number in the title. -->

#### References to other Issues or PRs
<!-- If this pull request fixes an issue, write ""Fixes #NNNN"" in that exact
format, e.g. ""Fixes #1234"" (see
https://tinyurl.com/auto-closing for more information). Also, please
write a comment on that issue linking back to this pull request once it is
open. -->
Related PR: 
#25278
#25371 

Related Issues:
#23131 
#20874 


#### Brief description of what is fixed or changed


#### Other comments


#### Release Notes

<!-- Write the release notes for this release below between the BEGIN and END
statements. The basic format is a bulleted list with the name of the subpackage
and the release note for this PR. For example:

* solvers
  * Added a new solver for logarithmic equations.

* functions
  * Fixed a bug with log of integers. Formerly, `log(-x)` incorrectly gave `-log(x)`.

* physics.units
  * Corrected a semantical error in the conversion between volt and statvolt which
    reported the volt as being larger than the statvolt.

or if no release note(s) should be included use:

NO ENTRY

See https://github.com/sympy/sympy/wiki/Writing-Release-Notes for more
information on how to write release notes. The bot will check your release
notes automatically to see if they are formatted correctly. -->

<!-- BEGIN RELEASE NOTES -->
NO ENTRY
<!-- END RELEASE NOTES -->
",False,25442,https://api.github.com/repos/sympy/sympy/pulls/25442,https://github.com/sympy/sympy/pull/25442,open,729,22,6,56,41,119,2,0,"[{'name': 'polys'}, {'name': 'Merge conflict'}]",2023-07-28 14:58:43+00:00,,0.0,,"[{'comment_id': 1278526171, 'comment_body': 'Is it possible to costruct the tuple directly without a list? ', 'comment_created': datetime.datetime(2023, 7, 30, 7, 51, 22, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 1278547252, 'comment_body': 'There is no tuple comprehension that can construct a tuple directly. It is possible to construct a tuple from a generator rather than using a list though. That can be slower though:\r\n```python\r\nIn [1]: A = (1,2,3,4,5)\r\n\r\nIn [2]: B = (4,5,6,7,7)\r\n\r\nIn [3]: %timeit tuple(min(a, b) for a, b in zip(A, B))\r\n2.5 µs ± 47.1 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\r\n\r\nIn [4]: %timeit tuple([min(a, b) for a, b in zip(A, B)])\r\n2.1 µs ± 30.4 ns per loop (mean ± std. dev. of 7 runs, 100,000 loops each)\r\n```\r\nThe reason that constructing a list is faster is because it is done in a single function call e.g. the code\r\n```python\r\nstuff = tuple([f(x) for x in things])\r\n```\r\ntranslates to (the interpreter literally does this translation):\r\n```python\r\ndef _comp():\r\n    _stuff = []\r\n    for x in things:\r\n        _stuff.append(f(x))\r\n\r\nstuff = tuple(_comp())\r\n```\r\nThis has a single function call that does the whole loop and then the list is converted (very efficiently) to a tuple. On the other hand this\r\n```python\r\nstuff = tuple(f(x) for x in things)\r\n```\r\ntranslates to\r\n```python\r\ndef _comp():\r\n    for x in things:\r\n        yield f(x)\r\n\r\n_gen = _comp()\r\n\r\nstuff = tuple(_gen)\r\n```\r\nNow the tuple constructor has to loop over the generator. For each item the generator function frame has to be resumed in order to execute the code until the next yield. What this means in effect is that we have the overhead of a function call for each element in the list rather than a single function call for the whole list.\r\n\r\nGenerator expressions are more efficient than list comprehensions if there is any possibility to break out of the loop with an early return e.g. `any(f(x) for x in stuff)` might only loop over the first item in stuff when stuff might be a large list of items whereas `any([f(x) for x in stuff])` would always loop over the whole list.', 'comment_created': datetime.datetime(2023, 7, 30, 10, 45, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1278547688, 'comment_body': 'The ring already has a `zero_monom` attribute.', 'comment_created': datetime.datetime(2023, 7, 30, 10, 47, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1278547912, 'comment_body': 'This will loop over potentially a large number of monomials but in common cases the loop could terminate much more quickly. If we discover that the gcd is already reduced to the zero monom after e.g. two monomials then we can skip the rest.', 'comment_created': datetime.datetime(2023, 7, 30, 10, 49, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1278549142, 'comment_body': 'Interesting, thanks for the information. ', 'comment_created': datetime.datetime(2023, 7, 30, 10, 56, 50, tzinfo=datetime.timezone.utc), 'commenter': 'jksuom', 'type': 'User'}, {'comment_id': 1278549182, 'comment_body': 'Here `exquo` is relatively slow for the given operation especially if we know that the coefficient is always one.\r\n\r\nAlso this seems to be creeping away from the idea of this module being purely for monomials. I suggest instead defining a function here that just operates on dicts rather than polynomials. (Sparse polynomials are dicts of course.). Alternatively this should go in `rings.py`.\r\n\r\nActually I think that `ring.monomial_ldiv` should be the fastest function for doing this.', 'comment_created': datetime.datetime(2023, 7, 30, 10, 57, 16, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1278549313, 'comment_body': 'A sparse polynomial method does not need to have ""sparse"" in the method name.\r\n\r\nI think usually this is what would be referred to as a ""main variable"" in textbooks etc.', 'comment_created': datetime.datetime(2023, 7, 30, 10, 58, 16, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1278550398, 'comment_body': 'The code here is probably the most efficient for the case where there is a nontrivial gcd but I suspect that another (more?) common case is where there is no nontrivial gcd. It might be better to loop over the first few monomials first to see if we can quickly exit but then use the approach above if it looks like we need to loop over all monomials. That could be fastest for what are likely the two common cases: many monomials and no gcd that is revealed quickly or many monomials that do have a gcd and we need to loop over all of them.', 'comment_created': datetime.datetime(2023, 7, 30, 11, 7, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1283233027, 'comment_body': ""There seems to be some confusion here about whether this is a method or a function. If `p` is supposed to be a list of polynomials then this won't work as a method. Probably it should just be a function defined after the class statement."", 'comment_created': datetime.datetime(2023, 8, 3, 13, 47, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1283238782, 'comment_body': 'I think that this should probably be a function rather than a method.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 51, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1283243767, 'comment_body': 'It might be better to have a separate functions for computing gcd of two monomials vs any number of monomials. Maybe it could be called `monomial_ngcd` or something.\r\n\r\nThat way we can keep the function for the gcd of two monomials as fast as possible.', 'comment_created': datetime.datetime(2023, 8, 3, 13, 55, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1283245910, 'comment_body': ""Again there seems to be confusion here about whether this is a method or a function. In the docstring you are calling a method on a list but you can't add this method to the list type."", 'comment_created': datetime.datetime(2023, 8, 3, 13, 56, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1284763103, 'comment_body': 'Is this function supposed to take `*args` or a single set argument?\r\n\r\nIt does not make sense to have a `*args` signature if anything other than a single argument would lead to error.', 'comment_created': datetime.datetime(2023, 8, 4, 19, 14, 54, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1284764870, 'comment_body': 'The code above has already looped over all monomials. There is no point in attempting to shortcut the loop here if the full loop already happened above.', 'comment_created': datetime.datetime(2023, 8, 4, 19, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1284770207, 'comment_body': 'A good test here before anything else is:\r\n```python\r\nif any(zero_monom in poly for poly in p):\r\n   return p, None\r\n```\r\nEach poly is a dict so looking up `zero_monom` is `O(1)` so this would be `O(len(p))` regardless of how many terms each polynomial has. Chances are in many large cases that some polynomial will have the zero monomial meaning that everything else in this function can be skipped.\r\n\r\nAlso I think that `p` is not a great name especially since this represents multiple polynomials rather than a single polynomial. It is probably better to call the argument `polynomials` like:\r\n```python\r\nif any(zero_monom in poly for poly in polynomials):\r\n   return p, None\r\n```', 'comment_created': datetime.datetime(2023, 8, 4, 19, 21, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1284774841, 'comment_body': ""There already is a function that does this:\r\nhttps://github.com/sympy/sympy/blob/feeccac64b70b9df6c5401c55b98a35f6e07ed8c/sympy/polys/densetools.py#L571-L610\r\nI'm not sure exactly why `QQ` is special-cased there. I guess there is some sort of definition for what gcd in QQ is supposed to be.\r\n\r\nThere is also a method on `PolyElement` although perhaps it could be improved to be more like `dup_content` (it does not shortcut):\r\nhttps://github.com/sympy/sympy/blob/feeccac64b70b9df6c5401c55b98a35f6e07ed8c/sympy/polys/rings.py#L1956-L1965"", 'comment_created': datetime.datetime(2023, 8, 4, 19, 26, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1284776669, 'comment_body': 'Here `main_variable` only returns a single generator even when the poly has multiple. Maybe I misunderstood but just checking that all polys have the same main variable is not the same as checking that they all have the same symbols.\r\n\r\nPlease add some tests that explore different cases.', 'comment_created': datetime.datetime(2023, 8, 4, 19, 28, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1284781994, 'comment_body': 'Maybe it would be better to call this `ngcd_prs`. It is basically just the `gcd_prs` function but for `n` polys instead of `2` polys. Although you would want to use this instead of `gcd_prs` even just for 2 polys.\r\n\r\nPerhaps this should be called `gcd_prs` and the other function should be called `_gcd_prs` as the base case that actually just implements the subresultant PRS algorithm.', 'comment_created': datetime.datetime(2023, 8, 4, 19, 33, 16, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1285067707, 'comment_body': '@oscarbenjamin  While using `monomial_ldiv` we should convert `pi` and `d` in tuple form we can do this by using `degree_list`\r\nbut then the output is in the form of a tuple like \r\nfrom the below code: `([(1, 2), (1, 0)],x)`\r\nexpected output: `([x - y**2, x], x)`\r\n\r\n```python\r\n\r\n\r\ndef monomial_extract(polynomials)\r\n\r\n    ring = polynomials[0].ring\r\n    zero_monom = ring.zero_monom\r\n\r\n    monomials = chain(*polynomials)\r\n    monom_gcd = tuple(map(min, zip(*monomials)))\r\n\r\n    # If the zero monomial is present, we can immediately return\r\n    if any(zero_monom in poly for poly in polynomials):\r\n       return polynomials, None\r\n\r\n    # d = ring({monom_gcd: ring.domain.one})\r\n    # p = [pi.exquo(d) for pi in polynomials]\r\n    # return p, d\r\n\r\n     d = ring({monom_gcd: ring.domain.one})\r\n    _d = degree_list(d.as_expr())\r\n    p_result = []\r\n    for pi in polynomials:\r\n        pi = degree_list(pi.as_expr())\r\n        if len(_d) > len(pi):\r\n            # Add zeros to pi if sizes are different\r\n            pi += (0,) * (len(_d) - len(pi)) \r\n        else:\r\n            _d += (0,) * abs((len(_d) - len(pi)))\r\n        p_result.append(ring.monomial_ldiv(pi, _d))\r\n\r\n    return polynomials, d\r\n```\r\n', 'comment_created': datetime.datetime(2023, 8, 5, 14, 35, 11, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1285099217, 'comment_body': 'It will return the smallest index among all generators.\r\nfor example:\r\n```\r\n>>> p = x*y**2 - y**3 + 4*y\r\n>>> main_variable(p)\r\n0\r\n```', 'comment_created': datetime.datetime(2023, 8, 5, 18, 13, 24, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1289219268, 'comment_body': 'While using monomial_ldiv we should convert pi and d in tuple form we can do this by using degree_list\r\nbut then the output is in the form of a tuple like\r\nfrom the below code: ([(1, 2), (1, 0)],x)\r\nexpected output: ([x - y**2, x], x)\r\n\r\n```\r\n     d = ring({monom_gcd: ring.domain.one})\r\n    _d = degree_list(d.as_expr())\r\n    p_result = []\r\n    for pi in polynomials:\r\n        pi = degree_list(pi.as_expr())\r\n        if len(_d) > len(pi):\r\n            # Add zeros to pi if sizes are different\r\n            pi += (0,) * (len(_d) - len(pi)) \r\n        else:\r\n            _d += (0,) * abs((len(_d) - len(pi)))\r\n        p_result.append(ring.monomial_ldiv(pi, _d))\r\n\r\n    return polynomials, d\r\n```', 'comment_created': datetime.datetime(2023, 8, 9, 21, 30, 11, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1289225600, 'comment_body': 'I updated it to handle both cases consistently: either a single set argument or multiple set arguments', 'comment_created': datetime.datetime(2023, 8, 9, 21, 37, 16, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1289227041, 'comment_body': 'There is an error that the` list has no attribute content`\r\nWhere should I add this method to the list type?', 'comment_created': datetime.datetime(2023, 8, 9, 21, 38, 59, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1294807989, 'comment_body': 'The purpose of the `canonical_unit` method is that it generalises the idea of normalising a minus sign to normalising quadrants in the case of `ZZ_I` and `QQ_I` i.e.:\r\n```python\r\nIn [5]: zzi = [ZZ_I(1,1),ZZ_I(1,-1),ZZ_I(-1,1),ZZ_I(1,1)]\r\n\r\nIn [6]: [ZZ_I.canonical_unit(z) for z in zzi]\r\nOut[6]: [ZZ_I(1, 0), ZZ_I(0, 1), ZZ_I(0, -1), ZZ_I(1, 0)]\r\n\r\nIn [7]: [ZZ_I.canonical_unit(z)*z for z in zzi]\r\nOut[7]: [ZZ_I(1, 1), ZZ_I(1, 1), ZZ_I(1, 1), ZZ_I(1, 1)]\r\n```\r\nJust using a minus sign here is not sufficient.', 'comment_created': datetime.datetime(2023, 8, 15, 15, 52, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1295764973, 'comment_body': 'This is still not right: you are assuming that it is just a question of a minus sign. The whole point of the `canonical_unit` function is that it might return something like `I` or `-I` and not just `1` or `-1`.', 'comment_created': datetime.datetime(2023, 8, 16, 11, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1295775677, 'comment_body': 'What does the `if` do here? Does `canonical_unit` ever return `0` or `None` or something?\r\n\r\n', 'comment_created': datetime.datetime(2023, 8, 16, 11, 49, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1295853901, 'comment_body': 'Yes, `canonical_unit` will not return `False` or `0`\r\nI removed it ', 'comment_created': datetime.datetime(2023, 8, 16, 12, 56, 10, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1296534433, 'comment_body': ""I don't quite understand what it means that this function takes `*args` but here you pass a single argument as a set."", 'comment_created': datetime.datetime(2023, 8, 16, 23, 34, 48, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1297956329, 'comment_body': 'It allows to handle a single argument containing a set of tuples or multiple separate tuples.\r\nIf I use `args` then it leads to limiting the function to only accepting a single argument.\r\nShould I add doctest for multiple arguments as well?\r\n', 'comment_created': datetime.datetime(2023, 8, 18, 3, 46, 54, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1298325618, 'comment_body': 'It is better just to choose whether it should be a single argument or multiple arguments. The function does not need to allow both possibilities.\r\n\r\nI think that it is generally better just to take a single iterable argument rather than `*args`.', 'comment_created': datetime.datetime(2023, 8, 18, 11, 7, 25, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1300061024, 'comment_body': 'The optimisations discussed previously for the zero monom case could be applied here. I expect that a very common case will be a large number of monomials whose gcd is just 1 and such that the gcd of the first few monomials would be revealed to be 1. We could probably detect that without needing to loop very far through the long list of monomials.\r\n\r\nAnother common case would be a large number of monomials that *does* have a nontrivial gcd. Using `map(min, zip(*monomials))` micro-optimises for this second case at the expense of a more important optimisation for the first case but I think that the first case is likely to be very common.\r\n\r\nIn the first instance I would write this as a plain loop like:\r\n```python\r\n# This code needs to be adapted for the inputs the function currently takes\r\nfor monom in monomials:\r\n    gcd = monomial_gcd(gcd, monom)\r\n    if gcd == zero_monom:\r\n        # trivial gcd: exit early\r\n        return gcd\r\n\r\n# A nontrivial gcd was found:\r\nreturn gcd\r\n```\r\nTimings should be done to see if the `map,min,zip` approach offers any improvement over this but the loop with early exit would be much faster in the common case of many (effectively) random monomials.', 'comment_created': datetime.datetime(2023, 8, 21, 12, 44, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1300062405, 'comment_body': ""What is the purpose of the `domain` argument here?\r\n\r\nI don't like that argument being there on a public method because it should not be valid to pass any value other than `f.ring.domain`."", 'comment_created': datetime.datetime(2023, 8, 21, 12, 45, 38, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1300063726, 'comment_body': 'There is no benefit in using a set here so I would just use a list.', 'comment_created': datetime.datetime(2023, 8, 21, 12, 46, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1300066253, 'comment_body': ""The check for `any(zero_monom in poly ...)` should be done *before* computing `monom_gcd` by looping over all monomials of all polynomials. If any polynomial has the `zero_monom` then there is no need to loop over any of the other monomials.\r\n\r\nAlso don't use `zero_monoms` (plural) when it should be `zero_monom` singular."", 'comment_created': datetime.datetime(2023, 8, 21, 12, 48, 58, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1300069029, 'comment_body': 'The name of this function is a bit confusing. I would expect a function called `gcd_coeffs` to compute the gcd of the coefficients of a polynomial (or of all polynomials in this case) but that is not what this function does.\r\n\r\nPerhaps make this private (leading underscore in the name) and call it something like:\r\n```python\r\ndef _gcd_preprocess_polys(polynomials):\r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 12, 51, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1300070262, 'comment_body': 'This example does not in any way help to understand the purpose of this function. We need to have a situation where there are some symbols in common and some that are only in one and not the other and so on.\r\n\r\nThe comment above about the list being ""possibly longer"" should also be demonstrated here.', 'comment_created': datetime.datetime(2023, 8, 21, 12, 52, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1300071067, 'comment_body': 'This is a very confusing choice of variable name because coefficients and polynomials are not the same thing.', 'comment_created': datetime.datetime(2023, 8, 21, 12, 53, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1300073862, 'comment_body': 'This was marked as resolved when it should not have been.\r\n\r\nAgain saying `syms = pi.main_variable` is confusing. You are assigning a singular object ""variable"" to a plural name ""syms"".\r\n\r\nAlso the logic here is not correct: the intersection of the set of main variables is not the same as the intersection of the set of *all* variables present.', 'comment_created': datetime.datetime(2023, 8, 21, 12, 55, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1300463390, 'comment_body': 'Is this logic correct?\r\ncomparing the `main_variable` of each polynomial with the current value of common\r\n``` python\r\nfor pi in polynomials:\r\n    main_sym = pi.main_variable()\r\n\r\n    if allsame and main_sym != common:\r\n        allsame = False\r\n    common &= main_sym \r\n```', 'comment_created': datetime.datetime(2023, 8, 21, 17, 54, 17, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1300467830, 'comment_body': 'I updated  the `content` due to the above line,\r\nShould I remove the domain from it?', 'comment_created': datetime.datetime(2023, 8, 21, 17, 59, 11, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1302912364, 'comment_body': 'Should we keep the usage of `Poly` here?', 'comment_created': datetime.datetime(2023, 8, 23, 12, 1, 54, tzinfo=datetime.timezone.utc), 'commenter': 'sylee957', 'type': 'User'}, {'comment_id': 1303043018, 'comment_body': 'We can keep it, if there is any method available to transform a list of polynomial coefficients into the corresponding polynomial forms.\r\n', 'comment_created': datetime.datetime(2023, 8, 23, 13, 42, 18, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1306574231, 'comment_body': '@oscarbenjamin  Is there a more optimal approach to transforming a list of coefficients into polynomial form?', 'comment_created': datetime.datetime(2023, 8, 26, 22, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1307115464, 'comment_body': 'It would be better to show an example here where the gcd is nontrivial.', 'comment_created': datetime.datetime(2023, 8, 28, 8, 32, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307117321, 'comment_body': 'We might have the `zero_monom` as not the first tuple so a quick check here could be:\r\n```\r\nif zero_monom in monomials:\r\n    return zero_monom\r\n```', 'comment_created': datetime.datetime(2023, 8, 28, 8, 34, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307117671, 'comment_body': 'Is this faster than just calling `monomial_gcd`?', 'comment_created': datetime.datetime(2023, 8, 28, 8, 34, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307118978, 'comment_body': 'I am not sure yet that we would want to keep this change at the point when this PR is merged but it is good to keep it there for now so that the prs method can be tested while the PR is in development.', 'comment_created': datetime.datetime(2023, 8, 28, 8, 35, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307180783, 'comment_body': 'This explanation is not very precise.\r\n\r\nI would probably write this as something like:\r\n```\r\nGet the coefficients of a polynomial with respect to the specified ``syms``.\r\n\r\nFor example, given a polynomial in ``p`` in ``K[x,y,z,t]``, ``p.coeff_split({y, t})`` converts ``p``\r\nto an element of ``K[x, z][y, t]`` and returns the coefficients as elements of ``K[x, z]``.\r\n```', 'comment_created': datetime.datetime(2023, 8, 28, 9, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307183331, 'comment_body': 'Can we make it possible to pass the symbols using the generators returned by ``ring`` e.g. like ``f.coeff_split({z})`` rather than ``f.coeff_split({2})``. Other PolyElement methods do that and it makes a demonstration like this easier to understand. For speed indices should be used by methods like ``_gcd_prs`` but if someone wanted to use this method directly it would be nice to use the objects returned by ``ring``.', 'comment_created': datetime.datetime(2023, 8, 28, 9, 29, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307185755, 'comment_body': 'Probably more efficient to use `collections.defaultdict(dict)` here.', 'comment_created': datetime.datetime(2023, 8, 28, 9, 31, 35, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307186525, 'comment_body': 'This method is somewhat related to `drop_to_ground` so a See Also could be added for that as well.', 'comment_created': datetime.datetime(2023, 8, 28, 9, 32, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307188264, 'comment_body': 'This method should be called `free_variables` or perhaps just `variables`: the name should indicate that it returns plural rather than singular.\r\n\r\nWith all of these methods it is worth checking what SageMath does because of there is a method there that does the same thing then it would be good to use the same name and ensure that the method here is consistent with that.', 'comment_created': datetime.datetime(2023, 8, 28, 9, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307193349, 'comment_body': 'This is another example where we can have an early return: if any monomial includes the generator with index `0` then we do not need to loop over the rest. It is very likely that either the first or the second monomial (if the first is the zero monomial) would involve the first generator so this is worth doing.\r\n\r\nI would make this something like:\r\n```\r\nfor monomial in self.itermonomials():\r\n    leading_sym = ...\r\n    if leading_sym == 0:\r\n        return leading_sym\r\nreturn leading_sym\r\n```', 'comment_created': datetime.datetime(2023, 8, 28, 9, 39, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307203606, 'comment_body': 'I think it would be better to return `R.one` here rather than `None`.\r\n\r\nThen the invariant can be demonstrated for the second example like:\r\n```\r\n    >>> f = x**2*y\r\n    >>> g = x**2*y + x*y\r\n    >>> monomial_extract([f, g])\r\n    ([x, x + 1], x*y)\r\n    >>> [fp, gp], gcdm = monomial_extract([f, g])\r\n    >>> [fp*gcdm, gp*gcdm] == [f, g]\r\n    True\r\n```', 'comment_created': datetime.datetime(2023, 8, 28, 9, 47, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307207228, 'comment_body': 'This description is misleading because this is not returning the polynomial gcd of the polynomials. Rather it returns the gcd of all terms in all polynomials.', 'comment_created': datetime.datetime(2023, 8, 28, 9, 50, 28, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307208362, 'comment_body': 'As always it is better if doc examples are not completely trivial. We should give an example in which the gcd is not 1 but is also also not equal to the actual polynomial gcd. then the doc example here can demonstrate the difference between `gcd_terms([p1, p2])` and `p1.gcd(p2)`.', 'comment_created': datetime.datetime(2023, 8, 28, 9, 51, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307210677, 'comment_body': 'It would be better if `monomial_ngcd` could work with a `set` so that it can do a quick exit if `zero_monom in monomials` (using `O(1)` membership testing with `set` and no `O(N)` conversion from set to list or list to set).', 'comment_created': datetime.datetime(2023, 8, 28, 9, 53, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1307213737, 'comment_body': 'There are a lot of expensive conversions going on here (domain elements to `Poly` to `Expr` to `PolyElement`). If the goal is just to get the gcd of a list of domain elements then it would be better to use the `dup_content` function which takes a list of domain elements directly. (It is possible that `dup_content` could be better optimised.)', 'comment_created': datetime.datetime(2023, 8, 28, 9, 56, 42, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1308863803, 'comment_body': 'This code is giving the wrong output with that \r\n```\r\n        for monomial in self.itermonoms():\r\n            leading_sym = monomial[0]\r\n            if leading_sym == 1:\r\n                return {0}\r\n        exponents = list(map(sum, zip(*self)))\r\n        return {n for n, e in enumerate(exponents) if e}\r\n```\r\n\r\nfor the input \r\n```\r\n>>> p = x - y \r\n>>> print(free_variables(p))\r\n{0} # should be {0, 1}', 'comment_created': datetime.datetime(2023, 8, 29, 13, 55, 49, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1312773740, 'comment_body': 'Is there any method that can replace `exquo` to avoid `ExactQuotientFailed`', 'comment_created': datetime.datetime(2023, 9, 1, 9, 2, 16, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1312925026, 'comment_body': 'If `gcd_prs` is correct then it should guarantee that `exquo` would succeed because it is supposed to return a divisor. Can you give an example that leads to ExactQuotientFailed?', 'comment_created': datetime.datetime(2023, 9, 1, 11, 44, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1313255289, 'comment_body': 'This test should use `coeff_lst = [ZZ(6), ZZ(8), ZZ(4)]`', 'comment_created': datetime.datetime(2023, 9, 1, 16, 30, 9, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1313256264, 'comment_body': 'That is why the python-flint CI job fails.', 'comment_created': datetime.datetime(2023, 9, 1, 16, 30, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1313862318, 'comment_body': ""We need to investigate what causes the test failures rather than marking them as XFAIL. In this case the output still seems to be correct but just in a different form:\r\n```python\r\nIn [6]: i = integrate(1/(1 + x + y + z), (x, 0, 1), (y, 0, 1), (z, 0, 1))\r\n\r\nIn [7]: i\r\nOut[7]: \r\n  27⋅log(3)                      \r\n- ───────── + 6⋅log(2) + 8⋅log(4)\r\n      2                          \r\n\r\nIn [8]: i2 = -12*log(3) - 3*log(6)/2 + 3*log(8)/2 + 5*log(2) + 7*log(4)\r\n\r\nIn [9]: i2\r\nOut[9]: \r\n             3⋅log(6)   3⋅log(8)                      \r\n-12⋅log(3) - ──────── + ──────── + 5⋅log(2) + 7⋅log(4)\r\n                2          2                          \r\n\r\nIn [10]: N(i)\r\nOut[10]: 0.417972075299316\r\n\r\nIn [11]: N(i2)\r\nOut[11]: 0.417972075299316\r\n```\r\nI don't understand why the form has changed at all though because it implies that somewhere a different gcd was computed but the gcd should be the same regardless of which algorithm is used to compute it."", 'comment_created': datetime.datetime(2023, 9, 2, 15, 8, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1314066014, 'comment_body': 'The test occasionally yields values significantly greater or lesser than the desired result, as indicated by the condition: `assert abs(result - ref) < req`.\r\n', 'comment_created': datetime.datetime(2023, 9, 3, 2, 1, 59, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1314075392, 'comment_body': 'Actually, this test is failing in fresh clone too.\r\nhttps://github.com/sympy/sympy/blob/00277a0b347833a5f8872094c0109867aaa732ee/sympy/codegen/tests/test_algorithms.py#L136', 'comment_created': datetime.datetime(2023, 9, 3, 2, 45, 58, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1314636358, 'comment_body': 'If `c` is set to `None` then `r*c` will fail.', 'comment_created': datetime.datetime(2023, 9, 4, 8, 53, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315112403, 'comment_body': ""It is failing, but don't know the reason behind it.\r\nThat's why I add the tolerance."", 'comment_created': datetime.datetime(2023, 9, 4, 16, 38, 7, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1315133550, 'comment_body': ""Hi, what message do you get? I've dealt with precision errors with `math.isclose()` or `numpy.allclose()` for some of my previous prs."", 'comment_created': datetime.datetime(2023, 9, 4, 17, 26, 35, tzinfo=datetime.timezone.utc), 'commenter': 'faze-geek', 'type': 'User'}, {'comment_id': 1315134233, 'comment_body': 'This one https://github.com/sympy/sympy/pull/25442#issuecomment-1703977937', 'comment_created': datetime.datetime(2023, 9, 4, 17, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1315139032, 'comment_body': ""Going through the comment maybe the pitfall is the difference between `python` float and `SymPy` float. Some examples\r\n```\r\n6.2  # Python float. Notice the floating point accuracy problems.\r\n6.2000000000000002\r\nS(6.2)  # SymPy Float has no such problems because of arbitrary precision.\r\n6.20000000000000\r\n```\r\nor\r\n```\r\n>>> x = Symbol('x')\r\n>>> x**(S(1)/2) == x**(0.5)\r\nFalse\r\n```\r\n\r\nStill I'll go through the code and try to reproduce the failing test. Then get back to this !"", 'comment_created': datetime.datetime(2023, 9, 4, 17, 41, 18, tzinfo=datetime.timezone.utc), 'commenter': 'faze-geek', 'type': 'User'}, {'comment_id': 1315145461, 'comment_body': 'Here you are changing the call to `dmp_inner_gcd` and replacing it with a call to the new code. Any differences or test failures anywhere else result from this change. I suggest adding some code here like:\r\n```python\r\nif new_result != old_result:\r\n    raise RuntimeError(f""gcd is different for\\n\\nf:\\n{f}:\\n\\ng:\\n{g} \\n\\n Old result = ..."")\r\n```\r\nThen any case where the new code does not match the old code can be investigated. I don\'t think that the change from dense to sparse should change the actual computed gcd so I think that any difference is a bug in the new code.', 'comment_created': datetime.datetime(2023, 9, 4, 18, 1, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1315638474, 'comment_body': 'It would be better to make a separate method `_gcd_prs` so this just looks like:\r\n```python\r\n        # TODO: implement better algorithm selection\r\n        if ring.domain.is_QQ:\r\n            return f._gcd_QQ(g)\r\n        elif ring.domain.is_ZZ:\r\n            return f._gcd_ZZ(g)\r\n        else:\r\n            return f._gcd_prs(g)\r\n```', 'comment_created': datetime.datetime(2023, 9, 5, 9, 31, 18, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1318450743, 'comment_body': ""This portion of the code is not correct that's why it causes errors."", 'comment_created': datetime.datetime(2023, 9, 7, 11, 10, 34, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1318451669, 'comment_body': 'Is it the correct way?', 'comment_created': datetime.datetime(2023, 9, 7, 11, 11, 33, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1318455482, 'comment_body': 'This should be using `canonical_unit`.', 'comment_created': datetime.datetime(2023, 9, 7, 11, 15, 43, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1318455680, 'comment_body': 'Unless that is handled somewhere else.', 'comment_created': datetime.datetime(2023, 9, 7, 11, 15, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1318457470, 'comment_body': ""It shouldn't be using any of the dense `dmp_*` functions."", 'comment_created': datetime.datetime(2023, 9, 7, 11, 17, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1318459575, 'comment_body': ""We don't literally need to copy this function from the dense implementation. What is needed is that the algorithmic steps that happen in the dense implementation should also happen in the sparse implementation so the way that RR is handled should be the same etc. If that was done correctly then there would be no test failures and no need to change any tests."", 'comment_created': datetime.datetime(2023, 9, 7, 11, 19, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320042613, 'comment_body': 'Please check the implementation of this function, it is not working as expected', 'comment_created': datetime.datetime(2023, 9, 8, 15, 51, 52, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1320058070, 'comment_body': 'The line ` f = domain.convert_from(f, exact)` supposes that `f` is an element of `exact` that should be converted to `domain`. This is wrong in two ways:\r\n\r\nFirstly `exact` and `domain` are the wrong way around: we are trying to go from `domain` to `exact` not from `exact` to `domain`.\r\n\r\nSecondly `f` is a polynomial and `exact` and `domain` refer to the domain of the polynomial like `QQ` and `RR` but `f` is not an element of either domain but rather an element of a polynomial ring over that domain like `RR[x,y]` or something.\r\n\r\nThe code should be something like:\r\n```python\r\nIn [1]: old_ring = RR[x,y].ring\r\n\r\nIn [2]: old_ring\r\nOut[2]: Polynomial ring in x, y over RR with lex order\r\n\r\nIn [3]: p = old_ring(x + 2.0*y)\r\n\r\nIn [4]: p\r\nOut[4]: x + 2.0*y\r\n\r\nIn [5]: p.ring\r\nOut[5]: Polynomial ring in x, y over RR with lex order\r\n\r\nIn [6]: old_domain = old_ring.domain\r\n\r\nIn [7]: old_domain\r\nOut[7]: RR\r\n\r\nIn [8]: new_domain = old_domain.get_exact()\r\n\r\nIn [9]: new_domain\r\nOut[9]: QQ\r\n\r\nIn [13]: new_ring = new_domain[old_ring.symbols].ring\r\n\r\nIn [14]: new_ring\r\nOut[14]: Polynomial ring in x, y over QQ with lex order\r\n\r\nIn [15]: p\r\nOut[15]: x + 2.0*y\r\n\r\nIn [16]: p.set_ring(new_ring)\r\nOut[16]: x + 2*y\r\n```', 'comment_created': datetime.datetime(2023, 9, 8, 16, 6, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320249384, 'comment_body': ""We don't need to call `get_exact` twice. Can you give an example when `DomainError` is raised?"", 'comment_created': datetime.datetime(2023, 9, 8, 19, 18, 10, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320249614, 'comment_body': 'The idea at the end of the calculation would be to convert back to `old_ring`.', 'comment_created': datetime.datetime(2023, 9, 8, 19, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320523093, 'comment_body': 'I think this logic is not correct, some tests are failing due to incorrect implementation.', 'comment_created': datetime.datetime(2023, 9, 9, 9, 15, 36, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1320599246, 'comment_body': 'How about\r\n```\r\nzero_monom = (0,) * len(monomials[0])\r\n```\r\nWhy are `next` and `iter` being used here?\r\n\r\nThis loop will include the first item that was already extracted as `gcd`.', 'comment_created': datetime.datetime(2023, 9, 9, 16, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320599470, 'comment_body': 'This should be a method like `f._gcd_something(g)`.', 'comment_created': datetime.datetime(2023, 9, 9, 16, 11, 21, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320599703, 'comment_body': 'QQ and ZZ are already handled in `PolyElement._gcd` before this function is called. Catching `HeuristicGCDFailed` should be handled there rather than here.', 'comment_created': datetime.datetime(2023, 9, 9, 16, 12, 39, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320599886, 'comment_body': 'A nontrivial example would demonstrate better what this does.', 'comment_created': datetime.datetime(2023, 9, 9, 16, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320600706, 'comment_body': 'This method is called `gcd_prs` so it should be implementing the PRS algorithm but it does all of this other stuff. These things should be handled somewhere else because they are also applicable when heugcd or any other algorithms is being used.', 'comment_created': datetime.datetime(2023, 9, 9, 16, 15, 32, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320600877, 'comment_body': 'Maybe call this `primitive_wrt`. It should be a `PolyElement` method rather than a function.', 'comment_created': datetime.datetime(2023, 9, 9, 16, 16, 36, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320601521, 'comment_body': 'This is really just `ngcd` or `gcdn`. There is no reason to call this `coeffs` because nothing about it is specific to polynomials or coefficients.\r\n\r\nProbably this would be best as a `Domain` method.', 'comment_created': datetime.datetime(2023, 9, 9, 16, 19, 29, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320602047, 'comment_body': 'This explanation of ""symbolic"" and ""non-symbolic"" makes no sense: all parts have symbols.', 'comment_created': datetime.datetime(2023, 9, 9, 16, 22, 27, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320602152, 'comment_body': 'This should not be called `_gcd_I` because it is not specific to `I` even if that is the most common case that arises in the tests.', 'comment_created': datetime.datetime(2023, 9, 9, 16, 23, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320740421, 'comment_body': 'I think the `HeuristicGCDFailed` error has already been addressed within the `heugcd` function, so I have removed it.', 'comment_created': datetime.datetime(2023, 9, 10, 10, 17, 30, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1320740663, 'comment_body': '```python\r\n\r\n    polynomials, monom_gcd = monomial_extract(polynomials)\r\n\r\n    polynomials, common_symbols = _gcd_preprocess_polys(polynomials)\r\n\r\n    gcd = polynomials[0]\r\n    for pi in polynomials[1:]:\r\n        if domain.is_ZZ:\r\n            gcd = gcd._gcd_ZZ(pi)[0]\r\n        elif domain.is_QQ:\r\n            gcd = gcd._gcd_QQ(pi)[0]\r\n        else:\r\n            gcd = gcd_prs(gcd, pi)\r\n\r\n        if gcd == domain.one:\r\n            break\r\n\r\n    if monom_gcd is not None:\r\n        gcd = gcd * monom_gcd\r\n\r\n    return gcd\r\n```\r\n\r\nWe have the option to proceed with this approach, but it would involve modifying the `_gcd` function. Should I proceed with making those changes?', 'comment_created': datetime.datetime(2023, 9, 10, 10, 19, 11, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1320751413, 'comment_body': 'I think that for now the best thing would be to defer some of these changes to a future PR because I am concerned that this PR is otherwise not going to get merged in time.\r\n\r\nFor this PR we just need to add the sparse PRS algorithm and get it merged. As long as that speeds up the PRS case then we can merge it. Other changes need more detailed benchmarking to see if any change actually helps.', 'comment_created': datetime.datetime(2023, 9, 10, 11, 26, 1, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320751847, 'comment_body': ""I've said this many times:\r\n\r\nDoctest examples that show only trivial results do not help the reader to understand what the method does."", 'comment_created': datetime.datetime(2023, 9, 10, 11, 29, 8, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320752079, 'comment_body': 'The example needs to have more than one generator and neither of the content and primitive parts should be trivial. Also the example should be contrasted with the behaviour the `.primitive()` method to show how it differs.', 'comment_created': datetime.datetime(2023, 9, 10, 11, 30, 38, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320752648, 'comment_body': 'This explanation does not capture what the function does and actually is just incorrect.\r\n\r\nWhat this method does is to treat a polynomial over several variables as if it were a polynomial over a subset of the variables whose coefficients are polynomials over the remaining variables e.g. we treat a polynomial in `K[x,y,z,t]` as if it were a polynomial in `K[x,t][y,z]`.', 'comment_created': datetime.datetime(2023, 9, 10, 11, 33, 57, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320752694, 'comment_body': 'It would be better to use `collections.defaultdict`.', 'comment_created': datetime.datetime(2023, 9, 10, 11, 34, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320752781, 'comment_body': 'Long lines should be wrapped.', 'comment_created': datetime.datetime(2023, 9, 10, 11, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320753118, 'comment_body': 'Is there any significant benefit in having this method at all rather than just having `coeff_split`? This could just be a private method, like `_coeff_split_syms` and then it does not need a big docstring.', 'comment_created': datetime.datetime(2023, 9, 10, 11, 36, 59, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320753639, 'comment_body': 'I think that using ""symbolic"" here is confusing. This should just be\r\n```\r\nReturn the leading generator index of the generators present in the polynomial.\r\n```', 'comment_created': datetime.datetime(2023, 9, 10, 11, 39, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320754075, 'comment_body': ""Why isn't this using `monomial_ngcd`?"", 'comment_created': datetime.datetime(2023, 9, 10, 11, 42, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320754157, 'comment_body': 'Showing only trivial doctest examples does not help the reader to understand what the method does.', 'comment_created': datetime.datetime(2023, 9, 10, 11, 43, 38, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320754914, 'comment_body': 'None of the actual code/logic for computing the gcd or cofactors should be in this function because we will ultimately not want to have this function that duplicates the calculation with both the dense and sparse algorithms.', 'comment_created': datetime.datetime(2023, 9, 10, 11, 47, 41, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1320780478, 'comment_body': 'I am currently working on a task, and I cannot locate an example where the primitive part is not one at the moment.', 'comment_created': datetime.datetime(2023, 9, 10, 14, 29, 7, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1320969618, 'comment_body': 'The order of this doctest has been altered in a random manner. Can I employ the use of `or`, and what is the rationale behind this change?', 'comment_created': datetime.datetime(2023, 9, 11, 4, 1, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1321343438, 'comment_body': 'Set ordering is non-deterministic. You could use `ordered` for the doctest.', 'comment_created': datetime.datetime(2023, 9, 11, 10, 37, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326264122, 'comment_body': ""This is not valid because if there are no monomials then we don't know how long the tuple should be."", 'comment_created': datetime.datetime(2023, 9, 14, 16, 53, 33, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326264888, 'comment_body': 'Why does this need to be converted to a list? Can a list not be passed in to begin with?', 'comment_created': datetime.datetime(2023, 9, 14, 16, 53, 55, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326269154, 'comment_body': 'Why is this logic here? This function is called `_gcd_prs` so it should be the PRS algorithm but here for ZZ and QQ the heugcd method will be used.', 'comment_created': datetime.datetime(2023, 9, 14, 16, 56, 15, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326270936, 'comment_body': ""The point of defaultdict is you don't need to test with `in` or `get`."", 'comment_created': datetime.datetime(2023, 9, 14, 16, 57, 13, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326277467, 'comment_body': 'An example that does not involve all 3 symbols would be better.', 'comment_created': datetime.datetime(2023, 9, 14, 17, 0, 12, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326279581, 'comment_body': 'We can have an early return here as soon as we have seen all of the symbols.', 'comment_created': datetime.datetime(2023, 9, 14, 17, 2, 3, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326279832, 'comment_body': 'We can have an early return here as soon as we have seen the 0 symbol.', 'comment_created': datetime.datetime(2023, 9, 14, 17, 2, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326280541, 'comment_body': 'This can be kept for now but will need to be removed before merge.', 'comment_created': datetime.datetime(2023, 9, 14, 17, 3, 5, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326281488, 'comment_body': 'The canonical_unit method should not be used if the domain is a field.', 'comment_created': datetime.datetime(2023, 9, 14, 17, 4, 6, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1326282678, 'comment_body': 'This would be easier to understand if the generator could be passed in rather than an integer.', 'comment_created': datetime.datetime(2023, 9, 14, 17, 5, 23, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}]","[{'commit_sha': '5832fe7338e776c86dd5b35ab7d1c7b988583f7d', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e829306766f9d54bbf99dc8f9550ee79a824833', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '710acaa555073438cf641c816bab9f3d595ca64d', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7791877fe4e40946eee493b501e2f03594999f1a', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e362641aa7e6cde3d714d3b3c3b71b4c1862404c', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2292d04a39c38326eae988110fbdc2313221cc31', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6385d50955b4d5ec174af6dd8f62bb74ab981b56', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b6cf6bbef191e9c36b8274a4ad5893979f5b0054', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c6c37ea6920b2977d080bb36c73d0be29979d23e', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'abbe3c9b8be325165a3896dd67944a879373849e', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b927c6c03f096556031795f5e1a05d683366df38', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ea85bf7b7a58aeec8db779b216361407ead0849b', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6456da93e4006db6da300e7c536f6e7719028789', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91f6a912e93be7a9e19a62875f544ff8ed3b1e64', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bce76a9c20f4faaa3a028be72d69c03f9e27a2a8', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '062694d19788afa205dfb2dbe39203bd4735fc0c', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1fb882ca14c91243d667f55d5f94318630dac20f', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e56116296583fdabcdefd09c83bf3eb5946db2f6', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '83253bc7f94450a954a722700a238807a9c90f57', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd77396537bc26c17d582a52c3d2328d7a47dbced', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e69b55e3ea053632264b4e89738b225456df41f0', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7caa72e451caad3e18663c29874fe38d0951b6f6', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd6b185b95dd823bab206ebb216af7aa3925e3421', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cf153298332b694f069d79fdfa431d3aa911fddd', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '786783c0419043cbedb4f81fb33da53b6f926585', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a9b466446e6cc8ee3df6ed76f7c965affdec74b', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'be45bfbf687d8835cf90d0ef1d9e716a6ab766e1', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5202e6f20e7d8eb08cd22283738cb7baaae564ed', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ef258822627c826bfbc0fbb5155ee0fdd4952f7b', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '383cb75410fe8656a1e41f78836bd0c56bf8a486', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'af2a26f7c12371e075564ac9e7e742dfdff51d7a', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd2900727cb395f9088a5ec7bfe941e0b6619ce50', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4e4adbab51bebde9fdd62c83a05056ebc7a366a2', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11927128d3d97621065fd9f441ade84f7ebf4ce7', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b8d799879e6a8fa628b5d3f2eb84517b0cfca994', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4866eac77bec6a8afd0956fc318d14a4830d30a7', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4d1838dbba1ba566b1141bd1d10f29edbaf79faf', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3e5d1b3fcd2d5ac49f335d2af230b3b66fbbc2d1', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ec58b4ef7e770255419a16c89889d0f9a24a200', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '23d68c9df97df213c36db004910d82c683f4266e', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f415e1b5e51566ad318dacec65d81afd648dde42', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0c5a4aa4b1962c43faf31229ed28a20a912ea5af', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '76d0c784c7beccb78897836b3f716794e65be351', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bbcfbb836f4b66b944bbde42afeb89c3938a741b', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fe74431d02adf1dd557abcbe656a156bf7d3f981', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dd8d63dccf8a5c9a2304ffaf1b6d0301257691e4', 'committer_username': 'oscarbenjamin', 'committer_name': 'Oscar Benjamin', 'committer_email': None, 'commit_date': datetime.datetime(2011, 10, 29, 15, 58, 12, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85b4f9957e0b49bd24f9d721225a431322cfa3d7', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfba625583f7853d4d3301735f7d61769cf08f76', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '98642865ca80e1f24585cc47b0dda6d199434b6a', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9746ddae6f85f9dd362c255fa69653dc201d6759', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0df46f16c30e048d26e98e804226c75b0801dbf2', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '31449059db205927591d5ca6acc0a0a13ba703d3', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ec424629bb9cccdb3ddb0b3d44a7f534a474ddfc', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ea4f8d4671cce71c0d325e6dc8b9b79b19f0f0e', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '61a6a414095c9a351a4b99a507309ba430ac2d72', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bba0e856921274c914e3f898170ddc9ed9c44e30', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}]",Abhishek Patidar,95904102,1e9abhi1e10@gmail.com,User,,40,,3,13
1470156078,Add benchmarks for gcd methods,"This PR adds the benchmarks for the subresultants PRS method.
Related Issue:
https://github.com/sympy/sympy_benchmarks/issues/88

See https://github.com/sympy/sympy/pull/25442",True,95,https://api.github.com/repos/sympy/sympy_benchmarks/pulls/95,https://github.com/sympy/sympy_benchmarks/pull/95,closed,43,1,1,2,3,0,0,0,[],2023-08-10 11:18:42+00:00,2023-08-11 12:08:19+00:00,89377.0,"1 day, 0:49:37",[],"[{'commit_sha': '5ef96d873b966bdcf506d9421f472c1b671edff1', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '36c6cf58f553ea5dd306b629273c8f9871e1eceb', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}]",Abhishek Patidar,95904102,1e9abhi1e10@gmail.com,User,,40,,3,13
1490458944,Add benchmarks for GCD when input is Gaussian Integer,"This PR adds the benchmarks for the subresultants PRS method.
Related Issue:
https://github.com/sympy/sympy_benchmarks/issues/88

See https://github.com/sympy/sympy/pull/25442",True,97,https://api.github.com/repos/sympy/sympy_benchmarks/pulls/97,https://github.com/sympy/sympy_benchmarks/pull/97,closed,28,8,1,7,5,12,0,0,[],2023-08-26 02:14:43+00:00,2023-09-14 16:16:50+00:00,1692127.0,"19 days, 14:02:07","[{'comment_id': 1320755721, 'comment_body': 'This should also time the sparse implementation because that is what is going to be changed.', 'comment_created': datetime.datetime(2023, 9, 10, 11, 53, 19, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1321232467, 'comment_body': 'I added the sparse method but it is failing. Should I make the separate class and other functions for `Gaussian` inputs\r\n', 'comment_created': datetime.datetime(2023, 9, 11, 9, 10, 29, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1321346578, 'comment_body': 'The code should be fixed so that it works. The `to_ring` method assumes that the domain is always `QQ` which will fail for Gaussian integers.', 'comment_created': datetime.datetime(2023, 9, 11, 10, 40, 52, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1321881845, 'comment_body': 'Bare except should never be used.\r\n\r\nAnyway this is fixing the problem in the wrong place.', 'comment_created': datetime.datetime(2023, 9, 11, 17, 50, 50, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1321883181, 'comment_body': 'What needs to be changed is the faulty assumption that the domain is `QQ` here:\r\nhttps://github.com/sympy/sympy_benchmarks/blob/e4f235f2d890d99024f90e96a3ab83af9bb51760/benchmarks/polys.py#L33\r\nThe domain should not be hard-coded as `QQ`.', 'comment_created': datetime.datetime(2023, 9, 11, 17, 52, 17, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1322874842, 'comment_body': 'It should not be necessary to check the domain here like this.', 'comment_created': datetime.datetime(2023, 9, 12, 11, 5, 20, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1322875322, 'comment_body': 'These conversions should not be here.', 'comment_created': datetime.datetime(2023, 9, 12, 11, 5, 47, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1322931756, 'comment_body': ""If we didn't check the domain then how can we exclude the statement `func = self.get_func_poly(*examples.as_ring)` \r\n"", 'comment_created': datetime.datetime(2023, 9, 12, 11, 59, 57, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1325067762, 'comment_body': 'This class just duplicates `_TimeGCD` so it is unnecessary.', 'comment_created': datetime.datetime(2023, 9, 13, 20, 53, 34, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1325344362, 'comment_body': 'Removed it. ', 'comment_created': datetime.datetime(2023, 9, 14, 4, 37, 44, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}, {'comment_id': 1325973170, 'comment_body': 'Why has the example been changed?', 'comment_created': datetime.datetime(2023, 9, 14, 13, 41, 46, tzinfo=datetime.timezone.utc), 'commenter': 'oscarbenjamin', 'type': 'User'}, {'comment_id': 1325984300, 'comment_body': 'In the revised example, I identified duplicate terms, and when I simplified the expression, it resulted in a shorter and more concise form', 'comment_created': datetime.datetime(2023, 9, 14, 13, 49, 22, tzinfo=datetime.timezone.utc), 'commenter': '1e9abhi1e10', 'type': 'User'}]","[{'commit_sha': 'c27a9cf984a357f7a1e32dacf06a7282937faea5', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c70e881fd9727d693059d9a77007bf500dbe3715', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e4f235f2d890d99024f90e96a3ab83af9bb51760', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '34db70bcb3b22a7f1e53baba3d8231d23533c3c7', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e73ef2186600a557dece2c1dd6627b02e97af34', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e664a88f614741a216077dc82b470edc8c99e0b', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6aac3803151a3b667224a52d2be93a60030dc91c', 'committer_username': '1e9abhi1e10', 'committer_name': 'Abhishek Patidar', 'committer_email': '1e9abhi1e10@gmail.com', 'commit_date': datetime.datetime(2021, 12, 10, 7, 4, 49, tzinfo=datetime.timezone.utc)}]",Abhishek Patidar,95904102,1e9abhi1e10@gmail.com,User,,40,,3,13

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
640534,sympy,sympy/sympy,Python,4363,12693,293,1320,58659,5120,14,717,"[{'id': 1508865060, 'number': 25665, 'closed': datetime.datetime(2023, 9, 9, 16, 23, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 9, 9, 15, 13, 13, tzinfo=datetime.timezone.utc), 'time_taken': 4220.0, 'time_delta': '1:10:20', 'additions': 5, 'deletions': 3, 'state': 'closed'}, {'id': 1453964617, 'number': 25442, 'closed': None, 'created': datetime.datetime(2023, 7, 28, 14, 58, 43, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 729, 'deletions': 22, 'state': 'open'}, {'id': 1436072244, 'number': 25371, 'closed': datetime.datetime(2023, 7, 25, 19, 33, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 15, 21, 6, 42, tzinfo=datetime.timezone.utc), 'time_taken': 858388.0, 'time_delta': '9 days, 22:26:28', 'additions': 114, 'deletions': 6, 'state': 'closed'}, {'id': 1412252069, 'number': 25300, 'closed': datetime.datetime(2023, 6, 28, 20, 2, 38, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 19, 20, 42, tzinfo=datetime.timezone.utc), 'time_taken': 2516.0, 'time_delta': '0:41:56', 'additions': 194, 'deletions': 8, 'state': 'closed'}, {'id': 1404032292, 'number': 25280, 'closed': datetime.datetime(2023, 7, 15, 4, 59, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 22, 19, 12, 34, tzinfo=datetime.timezone.utc), 'time_taken': 1936035.0, 'time_delta': '22 days, 9:47:15', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1401621350, 'number': 25278, 'closed': datetime.datetime(2023, 7, 14, 21, 11, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 21, 12, 39, 29, tzinfo=datetime.timezone.utc), 'time_taken': 2017915.0, 'time_delta': '23 days, 8:31:55', 'additions': 397, 'deletions': 16, 'state': 'closed'}, {'id': 1386676777, 'number': 25226, 'closed': None, 'created': datetime.datetime(2023, 6, 9, 20, 0, 46, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 604, 'deletions': 3, 'state': 'open'}, {'id': 1304995078, 'number': 25037, 'closed': datetime.datetime(2024, 2, 2, 12, 4, 32, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 6, 16, 19, 37, tzinfo=datetime.timezone.utc), 'time_taken': 26077495.0, 'time_delta': '301 days, 19:44:55', 'additions': 13, 'deletions': 5, 'state': 'closed'}, {'id': 1265087069, 'number': 24867, 'closed': datetime.datetime(2023, 3, 8, 8, 57, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 3, 6, 19, 53, 26, tzinfo=datetime.timezone.utc), 'time_taken': 133460.0, 'time_delta': '1 day, 13:04:20', 'additions': 14, 'deletions': 4, 'state': 'closed'}, {'id': 1254547114, 'number': 24810, 'closed': None, 'created': datetime.datetime(2023, 2, 26, 17, 8, 46, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 25, 'deletions': 4, 'state': 'open'}, {'id': 1254530331, 'number': 24809, 'closed': datetime.datetime(2023, 2, 26, 16, 45, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 26, 16, 2, 52, tzinfo=datetime.timezone.utc), 'time_taken': 2571.0, 'time_delta': '0:42:51', 'additions': 0, 'deletions': 0, 'state': 'closed'}, {'id': 1254457285, 'number': 24800, 'closed': datetime.datetime(2023, 3, 2, 7, 45, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 26, 11, 11, 23, tzinfo=datetime.timezone.utc), 'time_taken': 333241.0, 'time_delta': '3 days, 20:34:01', 'additions': 3, 'deletions': 0, 'state': 'closed'}, {'id': 1252098701, 'number': 24771, 'closed': None, 'created': datetime.datetime(2023, 2, 23, 18, 13, 31, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 664, 'deletions': 664, 'state': 'open'}, {'id': 1251674232, 'number': 24768, 'closed': datetime.datetime(2023, 11, 27, 10, 31, 26, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 23, 13, 11, 50, tzinfo=datetime.timezone.utc), 'time_taken': 23923176.0, 'time_delta': '276 days, 21:19:36', 'additions': 52, 'deletions': 0, 'state': 'closed'}, {'id': 1249505299, 'number': 24760, 'closed': None, 'created': datetime.datetime(2023, 2, 22, 3, 6, 29, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 147, 'deletions': 126, 'state': 'open'}, {'id': 1248999828, 'number': 24756, 'closed': datetime.datetime(2023, 2, 21, 18, 1, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 21, 16, 45, 33, tzinfo=datetime.timezone.utc), 'time_taken': 4578.0, 'time_delta': '1:16:18', 'additions': 5, 'deletions': 0, 'state': 'closed'}, {'id': 1247785024, 'number': 24750, 'closed': datetime.datetime(2023, 2, 23, 3, 18, 14, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 20, 20, 29, 22, tzinfo=datetime.timezone.utc), 'time_taken': 197332.0, 'time_delta': '2 days, 6:48:52', 'additions': 24, 'deletions': 0, 'state': 'closed'}, {'id': 1240042907, 'number': 24716, 'closed': datetime.datetime(2023, 4, 8, 23, 55, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 14, 6, 0, tzinfo=datetime.timezone.utc), 'time_taken': 4643752.0, 'time_delta': '53 days, 17:55:52', 'additions': 12, 'deletions': 3, 'state': 'closed'}, {'id': 1239446032, 'number': 24714, 'closed': datetime.datetime(2023, 2, 13, 20, 48, 28, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 13, 18, 36, 14, tzinfo=datetime.timezone.utc), 'time_taken': 7934.0, 'time_delta': '2:12:14', 'additions': 11, 'deletions': 1, 'state': 'closed'}, {'id': 1238674103, 'number': 24710, 'closed': None, 'created': datetime.datetime(2023, 2, 13, 9, 42, 12, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 8, 'deletions': 1, 'state': 'open'}, {'id': 1233472763, 'number': 24688, 'closed': datetime.datetime(2023, 2, 8, 14, 29, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 8, 12, 27, 12, tzinfo=datetime.timezone.utc), 'time_taken': 7335.0, 'time_delta': '2:02:15', 'additions': 8, 'deletions': 0, 'state': 'closed'}, {'id': 1233172619, 'number': 24683, 'closed': datetime.datetime(2023, 2, 8, 9, 54, 43, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 8, 8, 24, 59, tzinfo=datetime.timezone.utc), 'time_taken': 5384.0, 'time_delta': '1:29:44', 'additions': 14, 'deletions': 0, 'state': 'closed'}, {'id': 1230073385, 'number': 24666, 'closed': datetime.datetime(2023, 2, 7, 14, 21, 2, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 6, 8, 51, 3, tzinfo=datetime.timezone.utc), 'time_taken': 106199.0, 'time_delta': '1 day, 5:29:59', 'additions': 38, 'deletions': 0, 'state': 'closed'}, {'id': 1229567730, 'number': 24661, 'closed': datetime.datetime(2023, 2, 5, 21, 58, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 5, 19, 15, 22, tzinfo=datetime.timezone.utc), 'time_taken': 9809.0, 'time_delta': '2:43:29', 'additions': 35, 'deletions': 1, 'state': 'closed'}, {'id': 1229558817, 'number': 24660, 'closed': datetime.datetime(2023, 2, 7, 14, 21, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 5, 18, 41, 35, tzinfo=datetime.timezone.utc), 'time_taken': 157220.0, 'time_delta': '1 day, 19:40:20', 'additions': 6, 'deletions': 0, 'state': 'closed'}, {'id': 1228534452, 'number': 24654, 'closed': datetime.datetime(2023, 2, 4, 8, 23, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 3, 18, 43, 53, tzinfo=datetime.timezone.utc), 'time_taken': 49206.0, 'time_delta': '13:40:06', 'additions': 7, 'deletions': 1, 'state': 'closed'}, {'id': 1221056416, 'number': 24630, 'closed': datetime.datetime(2023, 1, 30, 8, 35, 25, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 30, 5, 44, 17, tzinfo=datetime.timezone.utc), 'time_taken': 10268.0, 'time_delta': '2:51:08', 'additions': 20, 'deletions': 11, 'state': 'closed'}, {'id': 1220234037, 'number': 24621, 'closed': None, 'created': datetime.datetime(2023, 1, 28, 10, 4, 36, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 46, 'deletions': 26, 'state': 'open'}, {'id': 1218140684, 'number': 24602, 'closed': datetime.datetime(2023, 1, 26, 17, 51, 51, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 26, 16, 42, 3, tzinfo=datetime.timezone.utc), 'time_taken': 4188.0, 'time_delta': '1:09:48', 'additions': 7, 'deletions': 0, 'state': 'closed'}, {'id': 1212698277, 'number': 24573, 'closed': datetime.datetime(2023, 2, 4, 8, 37, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 22, 18, 54, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1086158.0, 'time_delta': '12 days, 13:42:38', 'additions': 23, 'deletions': 0, 'state': 'closed'}, {'id': 1212343185, 'number': 24562, 'closed': datetime.datetime(2023, 1, 21, 16, 13, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 21, 12, 6, 36, tzinfo=datetime.timezone.utc), 'time_taken': 14843.0, 'time_delta': '4:07:23', 'additions': 12, 'deletions': 3, 'state': 'closed'}, {'id': 1199125582, 'number': 24532, 'closed': None, 'created': datetime.datetime(2023, 1, 16, 14, 50, 26, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 9, 'deletions': 7, 'state': 'open'}, {'id': 1196243705, 'number': 24512, 'closed': None, 'created': datetime.datetime(2023, 1, 13, 6, 16, 27, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 56, 'deletions': 56, 'state': 'open'}, {'id': 1195323629, 'number': 24503, 'closed': datetime.datetime(2023, 1, 12, 16, 22, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 12, 13, 34, 59, tzinfo=datetime.timezone.utc), 'time_taken': 10036.0, 'time_delta': '2:47:16', 'additions': 5, 'deletions': 5, 'state': 'closed'}, {'id': 1192117597, 'number': 24488, 'closed': datetime.datetime(2023, 1, 10, 18, 39, 52, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 10, 10, 7, 24, tzinfo=datetime.timezone.utc), 'time_taken': 30748.0, 'time_delta': '8:32:28', 'additions': 9, 'deletions': 8, 'state': 'closed'}, {'id': 1184292172, 'number': 24467, 'closed': datetime.datetime(2023, 1, 4, 5, 4, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 4, 4, 44, 52, tzinfo=datetime.timezone.utc), 'time_taken': 1163.0, 'time_delta': '0:19:23', 'additions': 8, 'deletions': 8, 'state': 'closed'}, {'id': 1182872369, 'number': 24463, 'closed': datetime.datetime(2023, 1, 10, 19, 43, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 1, 2, 20, 16, 57, tzinfo=datetime.timezone.utc), 'time_taken': 689185.0, 'time_delta': '7 days, 23:26:25', 'additions': 22, 'deletions': 8, 'state': 'closed'}, {'id': 1181551472, 'number': 24457, 'closed': datetime.datetime(2023, 1, 19, 10, 0, 4, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 31, 23, 57, 7, tzinfo=datetime.timezone.utc), 'time_taken': 1591377.0, 'time_delta': '18 days, 10:02:57', 'additions': 6, 'deletions': 1, 'state': 'closed'}, {'id': 1181369869, 'number': 24450, 'closed': None, 'created': datetime.datetime(2022, 12, 31, 5, 13, 30, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 1, 'deletions': 1, 'state': 'open'}, {'id': 1180181251, 'number': 24435, 'closed': datetime.datetime(2022, 12, 29, 17, 22, 36, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 29, 11, 42, 38, tzinfo=datetime.timezone.utc), 'time_taken': 20398.0, 'time_delta': '5:39:58', 'additions': 3, 'deletions': 3, 'state': 'closed'}, {'id': 1177216922, 'number': 24425, 'closed': datetime.datetime(2023, 1, 30, 8, 36, 34, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 25, 8, 59, 34, tzinfo=datetime.timezone.utc), 'time_taken': 3109020.0, 'time_delta': '35 days, 23:37:00', 'additions': 27, 'deletions': 17, 'state': 'closed'}, {'id': 1174240867, 'number': 24414, 'closed': datetime.datetime(2022, 12, 22, 11, 22, 21, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 21, 21, 18, 10, tzinfo=datetime.timezone.utc), 'time_taken': 50651.0, 'time_delta': '14:04:11', 'additions': 9, 'deletions': 4, 'state': 'closed'}, {'id': 1169313562, 'number': 24401, 'closed': datetime.datetime(2022, 12, 20, 22, 35, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 17, 7, 56, 33, tzinfo=datetime.timezone.utc), 'time_taken': 311951.0, 'time_delta': '3 days, 14:39:11', 'additions': 13, 'deletions': 1, 'state': 'closed'}, {'id': 1168343759, 'number': 24399, 'closed': None, 'created': datetime.datetime(2022, 12, 16, 13, 2, 11, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 5, 'deletions': 2, 'state': 'open'}, {'id': 1159140930, 'number': 24370, 'closed': datetime.datetime(2022, 12, 12, 17, 14, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 12, 11, 14, 10, 23, tzinfo=datetime.timezone.utc), 'time_taken': 97439.0, 'time_delta': '1 day, 3:03:59', 'additions': 5, 'deletions': 1, 'state': 'closed'}, {'id': 1138757903, 'number': 24325, 'closed': datetime.datetime(2022, 12, 17, 9, 23, 55, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 29, 10, 29, 14, tzinfo=datetime.timezone.utc), 'time_taken': 1551281.0, 'time_delta': '17 days, 22:54:41', 'additions': 19, 'deletions': 12, 'state': 'closed'}, {'id': 1131312116, 'number': 24297, 'closed': datetime.datetime(2023, 2, 5, 22, 0, 49, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 22, 7, 59, 18, tzinfo=datetime.timezone.utc), 'time_taken': 6530491.0, 'time_delta': '75 days, 14:01:31', 'additions': 40, 'deletions': 5, 'state': 'closed'}, {'id': 1131172231, 'number': 24295, 'closed': datetime.datetime(2022, 11, 22, 7, 52, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 11, 22, 6, 17, 53, tzinfo=datetime.timezone.utc), 'time_taken': 5674.0, 'time_delta': '1:34:34', 'additions': 6, 'deletions': 0, 'state': 'closed'}]"
39307685,sympy_benchmarks,sympy/sympy_benchmarks,Python,32,14,24,18,249,20,4,7,"[{'id': 1490458944, 'number': 97, 'closed': datetime.datetime(2023, 9, 14, 16, 16, 50, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 26, 2, 14, 43, tzinfo=datetime.timezone.utc), 'time_taken': 1692127.0, 'time_delta': '19 days, 14:02:07', 'additions': 28, 'deletions': 8, 'state': 'closed'}, {'id': 1470156078, 'number': 95, 'closed': datetime.datetime(2023, 8, 11, 12, 8, 19, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 8, 10, 11, 18, 42, tzinfo=datetime.timezone.utc), 'time_taken': 89377.0, 'time_delta': '1 day, 0:49:37', 'additions': 43, 'deletions': 1, 'state': 'closed'}, {'id': 1436325488, 'number': 94, 'closed': datetime.datetime(2023, 7, 20, 11, 35, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 16, 17, 2, 54, tzinfo=datetime.timezone.utc), 'time_taken': 325966.0, 'time_delta': '3 days, 18:32:46', 'additions': 150, 'deletions': 14, 'state': 'closed'}, {'id': 1434896404, 'number': 93, 'closed': datetime.datetime(2023, 7, 14, 18, 22, 56, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 14, 14, 42, 22, tzinfo=datetime.timezone.utc), 'time_taken': 13234.0, 'time_delta': '3:40:34', 'additions': 41, 'deletions': 5, 'state': 'closed'}, {'id': 1421633732, 'number': 91, 'closed': datetime.datetime(2023, 7, 6, 19, 6, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 7, 5, 19, 29, 22, tzinfo=datetime.timezone.utc), 'time_taken': 85013.0, 'time_delta': '23:36:53', 'additions': 27, 'deletions': 3, 'state': 'closed'}, {'id': 1412262280, 'number': 90, 'closed': datetime.datetime(2023, 6, 28, 19, 50, 40, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 19, 27, 42, tzinfo=datetime.timezone.utc), 'time_taken': 1378.0, 'time_delta': '0:22:58', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 1412089957, 'number': 89, 'closed': datetime.datetime(2023, 7, 14, 8, 10, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 6, 28, 17, 48, 33, tzinfo=datetime.timezone.utc), 'time_taken': 1347707.0, 'time_delta': '15 days, 14:21:47', 'additions': 153, 'deletions': 4, 'state': 'closed'}]"
