pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
966978622,Refactoring the way data is returned in panedr,"Addressing #25 

I have changed the way data than panedr returns the energy data that it reads from EDR files. 

### Old behaviour
`edr_to_df()` opens the file, parses its binary contents, populates lists with the energy data, and assembles and returns a Pandas DataFrame. 

### New behaviour
The parsing of the EDR file is now done by a new `read_edr()` function. 
`read_edr()` returns the lists that were previously generated by `edr_to_df()` as an intermediate step.
The data can now be returned as a dictionary of NumPy arrays with `edr_to_dict()`. Alternatively, returning the data as a Pandas DataFrame is possible via `edr_to_df()`. Both of these functions call `read_edr()`.

The old behaviour is maintained, users can still call `edr_to_df()` and obtain the results they expect.

### To Do
- [x] Write tests for new functions
- [ ] Write detailed documentation for new functions / panedr in general (#30)
- [ ] Include more type hinting (#31)


",True,33,https://api.github.com/repos/MDAnalysis/panedr/pulls/33,https://github.com/MDAnalysis/panedr/pull/33,closed,50,8,4,14,5,25,0,0,[],2022-06-14 14:02:48+00:00,2022-06-29 11:57:47+00:00,1288499.0,"14 days, 21:54:59","[{'comment_id': 899839540, 'comment_body': 'Why the change from `verbose`?', 'comment_created': datetime.datetime(2022, 6, 17, 7, 25, 34, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 899842329, 'comment_body': 'Is pandas now an optional dependency in requirements.txt etc? If so I would guard this with a `try: except` similar to \r\n\r\n```python\r\n        try:\r\n            import pandas\r\n        except ImportError:\r\n            raise ImportError(""""""ERROR --- pandas was not found!\r\n                pandas is required to use the `.edr_to_df()` functionality.\r\n                try installing it using pip eg:\r\n                    pip install pandas """""")\r\n\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 7, 29, 18, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 899843745, 'comment_body': 'Is this an optional dependency? I think its probably safe to make `numpy` compulsory for panedr.  If we do make it compulsory you can import this at the top of the file otherwise use a guard like the one for pandas mentioned in my other comment. \r\n\r\nThoughts @jbarnoud? ', 'comment_created': datetime.datetime(2022, 6, 17, 7, 31, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 899845244, 'comment_body': 'This only really tests that it returns the same as `edr_to_df` so perhaps a more descriptive name like `edr_to_dict_matches_edr_to_df`. I know its a bit verbose but clarity is always good. ', 'comment_created': datetime.datetime(2022, 6, 17, 7, 33, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 900796456, 'comment_body': 'I think it is reasonable to make numpy a compulsory dependency. The current users have to install it already because of pandas anyway; the new users will likely use it as well.', 'comment_created': datetime.datetime(2022, 6, 18, 10, 15, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 900797025, 'comment_body': ""I don't see a reason not to add `read_edr` here as well."", 'comment_created': datetime.datetime(2022, 6, 18, 10, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 900798980, 'comment_body': 'Make sure that the ""Time"" key is in. I expect it to be, but I do not remember exactly how I treated it.', 'comment_created': datetime.datetime(2022, 6, 18, 10, 20, 17, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 901138220, 'comment_body': 'I felt weird about `verbose=verbose`, but yeah, I guess there is not really a reason not to put this :sweat_smile:', 'comment_created': datetime.datetime(2022, 6, 19, 17, 46, 2, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 901138596, 'comment_body': ""Good point. I'll make a note to add a test for raising this error as well. "", 'comment_created': datetime.datetime(2022, 6, 19, 17, 49, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 901139866, 'comment_body': ""I saw `read_edr` as merely providing data for the two user-exposed functions `edr_to_df` and `edr_to_dict`, so that the user should never need to call `read_edr` itself directly. I am not sure if the return values of this function are of use to a user, but yeah, that's not really a reason to add it here. "", 'comment_created': datetime.datetime(2022, 6, 19, 18, 2, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 901140072, 'comment_body': '""Time"" is part of `all_names` and `all_energies` as returned by `read_edr`. This is done specifically by \r\n\r\n```python\r\nall_names = [u\'Time\'] + [nm.name for nm in edr_file.nms]\r\n[...]\r\nall_energies.append([frame.t] + [ener.e for ener in frame.ener])\r\n```\r\n', 'comment_created': datetime.datetime(2022, 6, 19, 18, 4, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 901143525, 'comment_body': ""I wasn't sure what the best way to make pandas optional is. I have now done this by removing pandas from requirements.txt and adding a section under [extras] in setup.cfg. panedr can now be installed with pandas by running \r\n\r\n`pip install -e .[pandas]`\r\n\r\nPlease let me know if this is not the best way to do these things. "", 'comment_created': datetime.datetime(2022, 6, 19, 18, 41, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 901146553, 'comment_body': 'I would rather do things a little bit differently. The way you do it here will break the user experience for the standalone case. A user who do not use mdanalysis will install panedr and won\'t have pandas to use the main function out of the box.\r\n\r\nInstead, I would create 2 packages: the default one that depends on pandas and a ""lite"" one for downstream integrators who want to minimise dependencies.\r\n\r\nI don\'t know how to do that, though... ', 'comment_created': datetime.datetime(2022, 6, 19, 19, 11, 52, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 907280148, 'comment_body': 'There should be a test for that, which means a pipeline that does not install pandas and a test that runs the function and asserts the exception is raised.', 'comment_created': datetime.datetime(2022, 6, 27, 11, 30, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 907281125, 'comment_body': '@IAlibay is bumping the version to 1.20.0 for MDAnalysis in https://github.com/MDAnalysis/mdanalysis/pull/3737', 'comment_created': datetime.datetime(2022, 6, 27, 11, 31, 21, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 907287484, 'comment_body': ""Doesn't impact things here so it wouldn't think it matters. If you want to raise numpy to 1.20 you'll have to drop py3.6."", 'comment_created': datetime.datetime(2022, 6, 27, 11, 39, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 907299738, 'comment_body': '@BFedder you should be able to just use monkeypatch here to do this: https://github.com/MDAnalysis/mdanalysis/blob/3e249fe7173e68bb61d4ad7a2dfd316014760410/testsuite/MDAnalysisTests/utils/test_datafiles.py#L28-L38', 'comment_created': datetime.datetime(2022, 6, 27, 11, 53, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 907379911, 'comment_body': ""What should we prioritise here? Staying in-step with MDAnalysis' dependencies or keeping Py3.6? "", 'comment_created': datetime.datetime(2022, 6, 27, 13, 18, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 907425105, 'comment_body': 'I have added this test now', 'comment_created': datetime.datetime(2022, 6, 27, 14, 0, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 907548158, 'comment_body': ""It doesn't impact MDAnalysis if panedr supports a wider range of python & numpy versions, so IMHO it's fine to just leave it as-is."", 'comment_created': datetime.datetime(2022, 6, 27, 16, 2, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 907572149, 'comment_body': 'Wrong condition here ', 'comment_created': datetime.datetime(2022, 6, 27, 16, 25, 2, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 907597514, 'comment_body': 'Ooops... Thanks', 'comment_created': datetime.datetime(2022, 6, 27, 16, 54, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 909436000, 'comment_body': '```suggestion\r\n```\r\nThis is done now right?', 'comment_created': datetime.datetime(2022, 6, 29, 9, 54, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 909507641, 'comment_body': 'I can merge once you clarify this @BFedder ', 'comment_created': datetime.datetime(2022, 6, 29, 11, 18, 31, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 909531828, 'comment_body': 'Yes indeed, this test is now present. I removed the TODO', 'comment_created': datetime.datetime(2022, 6, 29, 11, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}]","[{'commit_sha': 'c484bef511c072ad0cc4da826b87e48d8a0645f3', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '48085f322d13ee6dc90f10a00da932f4ef34b7ab', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e70070697e0d024efb233c2a08b821f7af4cccfe', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '18e68c95ca8beb9f7729b76721cd6618227a67d9', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '967807eb4166791edacfb0506df4817c6875ac0b', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd69ae9e033e2172e2da93fe7d6bd807609a54ed5', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09b8e9e6aa77fa6d867f80970b49a89722e9e865', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3b708d1c794ca52b470420fe9e35f06e3b3d490a', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '20d5e399b649ecef1896ee9268e518b2066ea561', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '52857ad1e96a8661e76546d41e7e68375a445da9', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ce812c5ba10cca4b42523ff3aa9a0c10ecd5f429', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '692ccad0b61ba0eac82df38eccc7fb69eca06afd', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6ef2f84151cd7be7004786c2f5c929c83932a833', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '26592117a0e45af1a1521432b1b87ce676e6bd09', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}]",,80363742,,User,,6,,1,2
979369898,First attempt: panedr and panedrlite,"This is the first attempt at creating an empty panedr package that relies on a ""panedrlite"" package, so will very likely still need quite a bit of work put into it. 

That being said, the way this is organised now allows for panedrlite to be pip-installed. With panedrlite installed, the empy panedr can be installed as well. In the process, pandas is automatically installed. The functions are loaded into the panedr namespace, so can be called as they are now (i.e. `panedr.edr_to_df()`)

I'm hoping that once panedrlite is on PyPI, panedr can be installed without prior installation of panedrlite. 
",True,42,https://api.github.com/repos/MDAnalysis/panedr/pulls/42,https://github.com/MDAnalysis/panedr/pull/42,closed,183,42,12,26,12,24,0,0,[],2022-06-26 18:50:43+00:00,2022-07-06 12:06:05+00:00,839722.0,"9 days, 17:15:22","[{'comment_id': 907265977, 'comment_body': 'You can revert this back to panedrlite/panedrlite', 'comment_created': datetime.datetime(2022, 6, 27, 11, 12, 23, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 907277579, 'comment_body': 'we should add an extra step to check imports and make sure stuff works.\r\n\r\nSomething like this would do the trick (not tested the working-directory line so 🤞🏽 )\r\n\r\n```\r\n- name: test imports\r\n  # Exit the git repo in order for pbr to stop auto-picking up version info from the local git data\r\n  working-directory: ../\r\n  run: |\r\n    python -Ic ""from panedrlite import edr_to_dict""\r\n    python -lc ""from panedr import edr_to_df""\r\n```', 'comment_created': datetime.datetime(2022, 6, 27, 11, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 907284585, 'comment_body': ""I see you updated this to fix the import issue that was happening. However the fact that CI wasn't picking up on the import error is pretty bad, we'll need to add some import tests (see the comment I made in the action yaml file)."", 'comment_created': datetime.datetime(2022, 6, 27, 11, 35, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 907285482, 'comment_body': 'Does this PR supersede #33 or is it meant to follow it? (i.e. which should get merged first)', 'comment_created': datetime.datetime(2022, 6, 27, 11, 36, 40, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 907289038, 'comment_body': ""Can you fix these imports to be py3+ only now? The py2 code paths aren't necessary anymore."", 'comment_created': datetime.datetime(2022, 6, 27, 11, 40, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 907391846, 'comment_body': '> `python -lc ""from panedr import edr_to_df""`\r\n\r\nSo presumably I will need to uncomment line 60 (`python -m pip install -v ./panedr`), right? ', 'comment_created': datetime.datetime(2022, 6, 27, 13, 29, 27, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 907398579, 'comment_body': ""Oh, I didn't mean to create this branch here from my branch for #33... Too new to using git still. #33 should probably be merged first, or at least the changes approved. Alternatively, I could replace this version of panedr.py with the one from the master branch (as I originally intended)"", 'comment_created': datetime.datetime(2022, 6, 27, 13, 35, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 907402971, 'comment_body': 'I have done this now, I guess we will only see on merge if the import test works?', 'comment_created': datetime.datetime(2022, 6, 27, 13, 40, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 907403472, 'comment_body': 'Done', 'comment_created': datetime.datetime(2022, 6, 27, 13, 40, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 910504411, 'comment_body': 'Personal opinion but I prefer type hints to be in full at the call site where possible. \r\n\r\nI get that here they are too long and complicated to be readable and am happy with your choice but just where possible. \r\n', 'comment_created': datetime.datetime(2022, 6, 30, 0, 15, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 910504657, 'comment_body': '```suggestion\r\ndef edr_to_df(path: str, verbose: bool = False) -> pd.DataFrame:\r\n```', 'comment_created': datetime.datetime(2022, 6, 30, 0, 16, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 911393733, 'comment_body': ""This is a bit complicated because pandas is an optional dependency. If pandas is not installed, the module can't be imported if the type hint is present. I could put the function definition into a try-except statement, but then I would lose the custom ImportError message. What's the best thing to do here?"", 'comment_created': datetime.datetime(2022, 6, 30, 19, 49, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 911413255, 'comment_body': ""My 2 cents - sometimes you just have to take the loss. Type hints are just that, over-engineering a solution for an optional import for a method that's ~ 3 lines of code probably isn't worth it."", 'comment_created': datetime.datetime(2022, 6, 30, 20, 18, 16, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 911956741, 'comment_body': 'that being said, one of these solutions might work: https://stackoverflow.com/questions/61384752/how-to-type-hint-with-an-optional-import', 'comment_created': datetime.datetime(2022, 7, 1, 13, 19, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 912517868, 'comment_body': 'I took one of the suggestions from there and it seems to work :) \r\n', 'comment_created': datetime.datetime(2022, 7, 3, 17, 53, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 912787087, 'comment_body': 'Spoke to soon - I didn\'t fully think this through, the solution I tried yesterday won\'t work I\'m afraid. I think we\'ll have to hold back on annotating the return type of `edr_to_df` for now, but the function name and doc string are pretty self-explanatory, and mypy wasn\'t working with that anyway yet \r\n\r\nmypy error message: ""error: Skipping analyzing ""pandas"": module is installed, but missing library stubs or py.typed marker\r\npanedrlite/panedrlite/panedr.py:59: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports""', 'comment_created': datetime.datetime(2022, 7, 4, 9, 2, 45, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 912864172, 'comment_body': ""I would say don't worry about it. We lived without typed code for Python 0-3.whatever so I'm sure well be fine without it.  Sorry for leading you down the garden path. "", 'comment_created': datetime.datetime(2022, 7, 4, 10, 28, 28, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 913291149, 'comment_body': ""I would write the user facing docs with emphasis on *panedr* (as before) and not mention both together. This might be confusing. Anyone who isn't a developer will most likely just install panedr.\r\n\r\nThen add a separate section on *panedrlite*  for developers."", 'comment_created': datetime.datetime(2022, 7, 4, 23, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 913291362, 'comment_body': ""We will also need a conda package for panedrlite — presumably that's what @IAlibay has taken on?"", 'comment_created': datetime.datetime(2022, 7, 4, 23, 13, 58, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 913291545, 'comment_body': 'Could we make this an explicit import instead of `*`?', 'comment_created': datetime.datetime(2022, 7, 4, 23, 15, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 913291814, 'comment_body': 'Could we make this an explicit import instead of `*`?', 'comment_created': datetime.datetime(2022, 7, 4, 23, 16, 48, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 913492548, 'comment_body': ""Yeah we'll deal with that once we set up deployment."", 'comment_created': datetime.datetime(2022, 7, 5, 7, 50, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 913933801, 'comment_body': 'I have now changed these to explicit imports. However, a `__all__` is defined in panedr.py, so this currently does the same thing twice, in two different locations. This might make things confusing for future developers, so I think only one of the two should happen. Should I remove the `__all__` line from panedr.py?', 'comment_created': datetime.datetime(2022, 7, 5, 15, 32, 13, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 913934063, 'comment_body': 'Documentation is changed now', 'comment_created': datetime.datetime(2022, 7, 5, 15, 32, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}]","[{'commit_sha': 'f0cfe69dd45d53b4a0b3e3f6f413b79dddbd0be1', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '839ae56b3db5529de95e1166a9870881174ba659', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1d61a8d39ed568732b31d4846bd367f6bba52bc3', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a937b424aef3e8e88ba08e9ff932bb3b004b128d', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c02e1f75d00e0e8f1d9e3319a701f7c122317e04', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0bca63a1c9861627be8c1dafcfe54eb04c275c6', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a9a988770d94ef8dc58f6ca422e089cd71edaf53', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0af101878aeb62b217f954ac82e78bfb5dd86c63', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '233927c0b04e7ce602fd70da68724570d18f1119', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1cbb32798a85630d85d6676f9a6cc907a0700b65', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '10a572748d6b4bc432c726b7990d96c1a9223fb0', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7a5806c5cb83e2dfce51d10d0c970c65580131a5', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'bf89e03b772296eb3bb8e8ba4d479348c571e7cd', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '963297197a3c072c47268708a16235002d0df46e', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55d5731384ed07c09792233c261d5d019235e46a', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '85ac62ddfb6920eeab7f68374d016fdd0996bf8f', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '58fe71cb98b4b6245867691762952deefc38bc0d', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8c14842f3c49ac237a641060fee2c0a1b77381a9', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8cc19142d2e1919893c47e20314a68637614e462', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f405d9b2ef95ee7af0ec18a79e539c5e01c3fbc', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c4c94539c2bb24757e49aa7b0a9ac08ffd225fd0', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f9302bec020ce870ecac3360fabf96bc0a39e828', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ff328c342922f9ae682610ef7f0bc5d13a0f3d21', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b61cf65a913bbd503f2920ffa560938ee0750b0d', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '86d17ef492df07ce88756a70a2381904d70e71b5', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a04eaf0392afb23754e9cd61b76086ea8b108e7e', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}]",,80363742,,User,,6,,1,2
997195063,Create the pyedr and panedr packages,"Fixes #48 

## Changes
  - Creates new package pyedr and moves pandas specific code bits to panedr.
  - Also moves tests to be packaged so datafiles can be accessed from one package to the other.
  - Adds pyedr specific tests
  - Adds deploy yaml action
  - Fix readme file",True,50,https://api.github.com/repos/MDAnalysis/panedr/pulls/50,https://github.com/MDAnalysis/panedr/pull/50,closed,518,224,32,13,2,0,0,0,[],2022-07-14 23:13:10+00:00,2022-07-15 11:04:14+00:00,42664.0,11:51:04,[],"[{'commit_sha': '828d1bb2165f81de5d418b22d9286ddc965e9fc6', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '12b931f8c15e29f98f25649698a0de1d0103cbf8', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '608c56232534aad665c5527afbb95ef0da52c7e1', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9e09608f2e0517d95bc5a406ab6fb226c357642e', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fae714f0ca4080ba80d928dbef66c30f8c6afd38', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5fea5add2b56be25760b1bfe7cc30dee388eede7', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '28fe108a79710fb4259ff5a94bd6c0d5cc7d6054', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2e1a30e3f95ad6979871a9d3c07695aedd6c714e', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '17f35f075da3f01fdca8631148ebd26e2a211f21', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd7544c983f891194cd0701a3b575599a18372c12', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11ecd1fd75a4e85a97552fdf293333d120452085', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92b22515862115f0373270c850e6aedf818060b3', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}, {'commit_sha': '91ef910fe5e246f400e2fc0b2aa1d0a4fcc7859d', 'committer_username': 'IAlibay', 'committer_name': 'Irfan Alibay', 'committer_email': None, 'commit_date': datetime.datetime(2015, 5, 15, 12, 11, 1, tzinfo=datetime.timezone.utc)}]",Irfan Alibay,12460125,,User,,52,,20,114
965523018,Add GitHub actions workflow for CI,"Regarding #27 

I have adapted the .yaml file at https://github.com/MDAnalysis/GridDataFormats/blob/master/.github/workflows/gh-ci.yaml for use with panedr. 

Changes made in adaptation:
* link to panedr repository
* py3.6, py3.7 also tested on ubuntu-latest as per #28 
* changed dependencies: numpy, scipy, mrcfile not needed, added pandas instead
* changed links to panedr and tests for pytest (hopefully correctly)",True,32,https://api.github.com/repos/MDAnalysis/panedr/pulls/32,https://github.com/MDAnalysis/panedr/pull/32,closed,70,26,2,4,2,13,0,1,[],2022-06-13 10:03:48+00:00,2022-06-20 16:29:15+00:00,627927.0,"7 days, 6:25:27","[{'comment_id': 899843448, 'comment_body': 'Use v3 ', 'comment_created': datetime.datetime(2022, 6, 17, 7, 30, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 899846610, 'comment_body': 'use v3', 'comment_created': datetime.datetime(2022, 6, 17, 7, 34, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 899848510, 'comment_body': 'I forgot we set up griddataformats to check this way. You might want to set these up to be 3.10, doesn\'t matter much but then you\'re testing ""latest on each OS""', 'comment_created': datetime.datetime(2022, 6, 17, 7, 37, 26, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 899851171, 'comment_body': ""Add pytest-xdist here and call pytest with the -n 2 argument? Free parallelism isn't a bad thing"", 'comment_created': datetime.datetime(2022, 6, 17, 7, 40, 51, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 899852410, 'comment_body': ""```suggestion\n        python -m pip install -v .\n```\nIt's usually good practice to call pip using python -m to make sure we find the right pip. In practice it doesn't matter much but given it's GSoC I feel like I shouldn't be cutting corners.\n"", 'comment_created': datetime.datetime(2022, 6, 17, 7, 42, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 900534874, 'comment_body': '```suggestion\r\n            python-version: ""3.10""\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 22, 38, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 900534904, 'comment_body': '```suggestion\r\n            python-version: ""3.10""\r\n```', 'comment_created': datetime.datetime(2022, 6, 17, 22, 38, 10, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 900535512, 'comment_body': 'You could also do lowest and highest on windows and mac os. I *think* it would be\r\n```\r\n            python-version: [""3.6"", ""3.10""]\r\n```\r\nHowever, I\'d be more than happy to just get CI going with highest and then tweak.', 'comment_created': datetime.datetime(2022, 6, 17, 22, 40, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 900535897, 'comment_body': 'See above, use parallelism.', 'comment_created': datetime.datetime(2022, 6, 17, 22, 41, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 900536366, 'comment_body': 'I think you need to run `./tests` instead of `.tests`.', 'comment_created': datetime.datetime(2022, 6, 17, 22, 43, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 901137550, 'comment_body': ""I changed this to 3.10 for now, once CI is working I'll add 3.6 as well"", 'comment_created': datetime.datetime(2022, 6, 19, 17, 38, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 901841673, 'comment_body': ""technically speaking, these are package _and_ testing deps — not sure if it's worthwhile to split them"", 'comment_created': datetime.datetime(2022, 6, 20, 16, 26, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 901842816, 'comment_body': 'always best to keep things within the same call, even where there are so few, it makes dependency resolution a lot easier', 'comment_created': datetime.datetime(2022, 6, 20, 16, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}]","[{'commit_sha': 'b0932e7a23f504c2114ce841c021a6e583bdb1f8', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'de457753906aa0859962b6074cbd25ee456552a3', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '784030b62057c4e6ad086264ba83254422f3727a', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a34d8276097b7000b5fd27211a3a8101fe0e9ac8', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}]",,80363742,,User,,6,,1,2
964016582,fixed setup.cfg for installing from source,"Addressing Issue #26 

setup.cfg had a problem in the following line:

> requires-python = '>=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*'

When trying to install from source with `pip install -e .` the following error was raised:

> error in setup command: 'python_requires' must be a string containing valid version specifiers; Invalid specifier: ''>=2.7'

This was because of the quotation marks around the version specifications. I have removed them in this PR, and `pip install -e .` now works properly. 

I have also changed a few hypens to underscores because dash-separation will not be supported in future versions of setuptools.  

I have not changed the python versions required/supported yet, is py38+ okay? Also, I am not sure if anything else needs to be changed/modernised because I am not too familiar with how all of this works.",True,28,https://api.github.com/repos/MDAnalysis/panedr/pulls/28,https://github.com/MDAnalysis/panedr/pull/28,closed,6,10,2,4,6,2,0,1,[],2022-06-10 11:24:55+00:00,2022-06-17 22:46:41+00:00,645706.0,"7 days, 11:21:46","[{'comment_id': 894993705, 'comment_body': '```suggestion\r\npython_requires = >=3.8\r\n```\r\n\r\nUnless @jbarnoud disagrees, we should just make our lives easier here and start with NEP29 (purely on the basis that it makes packaging so much easier). We could be a bit more lax and make this 3.7+ but support is rapidly being dropped.', 'comment_created': datetime.datetime(2022, 6, 11, 8, 8, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 895501010, 'comment_body': '```suggestion\r\nhome_page = https://github.com/MDAnalysis/panedr\r\n```', 'comment_created': datetime.datetime(2022, 6, 13, 9, 13, 48, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}]","[{'commit_sha': '97b45021a8c9f29bcaa9ac69c940c570a0adfede', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e592169d251a5ee51d69147869d8646cf315dd42', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '7caaf84e36cd35ec7d8110bec2e32875a25acc07', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '62aaec8e95c8b8d7ee4f63c071aad313a77597ec', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}]",,80363742,,User,,6,,1,2
972451401,Update README.rst,Added badges for CI and codecov (#35).,True,36,https://api.github.com/repos/MDAnalysis/panedr/pulls/36,https://github.com/MDAnalysis/panedr/pull/36,closed,8,3,1,1,1,0,0,0,[],2022-06-20 16:53:09+00:00,2022-06-21 00:28:27+00:00,27318.0,7:35:18,[],"[{'commit_sha': '35599b257e27bc49aff134ab06a24baf3bd303a6', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}]",,80363742,,User,,6,,1,2
979364613,Update classifiers in setup.cfg,Fixes #40 ,True,41,https://api.github.com/repos/MDAnalysis/panedr/pulls/41,https://github.com/MDAnalysis/panedr/pull/41,closed,4,4,1,1,1,0,0,0,[],2022-06-26 18:18:03+00:00,2022-06-27 11:08:53+00:00,60650.0,16:50:50,[],"[{'commit_sha': 'ab955cea221e376223578b11dfa4431025d41951', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}]",,80363742,,User,,6,,1,2
1037906363,Make pyedr also return a dictionary of units,"Following the discussion on units on [PR 3749](https://github.com/MDAnalysis/mdanalysis/pull/3749), I have changed pyedr here so it returns a dictionary of the units it reads from the EDR file as well. ",True,56,https://api.github.com/repos/MDAnalysis/panedr/pulls/56,https://github.com/MDAnalysis/panedr/pull/56,closed,97,40,12,10,11,7,0,0,[],2022-08-26 12:28:52+00:00,2022-08-31 21:20:59+00:00,463927.0,"5 days, 8:52:07","[{'comment_id': 958768135, 'comment_body': 'Do you have to read **the whole file** just to get the units? That seems excessive. \r\n\r\nIf the units are just\r\n```python\r\n    unit_dict = {\'Time\': ""ps""}\r\n    for nm in edr_file.nms:\r\n        unit_dict[nm.name] = nm.unit\r\n```\r\nthen why not write a function to just get the units and then call this function as part of `read_edr()`?\r\n\r\nOr cache... if you cache then I\'d not use the `get_*` method name but just make `unit_dict` a managed attribute.', 'comment_created': datetime.datetime(2022, 8, 30, 17, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 958768758, 'comment_body': 'The parentheses are useless here, `return` is a statement not a function\r\n```suggestion\r\n    return unit_dict\r\n```', 'comment_created': datetime.datetime(2022, 8, 30, 17, 47, 47, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 959484531, 'comment_body': ""I'll let it go here because the likelihood is that no one was using these downstream, but arbitrarily renaming file object names like this is a breaking change, please avoid doing this."", 'comment_created': datetime.datetime(2022, 8, 31, 11, 44, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 959495970, 'comment_body': ""I'm not sure I understand what's going on with this PR, didn't you say that you wanted to not return a tuple here, and therefore added `get_unit_dictionary`, but this is still happening?"", 'comment_created': datetime.datetime(2022, 8, 31, 11, 57, 51, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 959501238, 'comment_body': 'I really need to stop changing code without changing the documentation to match it..... thanks! ', 'comment_created': datetime.datetime(2022, 8, 31, 12, 4, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 959513479, 'comment_body': 'This is not in the return signature?', 'comment_created': datetime.datetime(2022, 8, 31, 12, 18, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 959521245, 'comment_body': ""The class name doesn't really match what this is doing, but I don't think it's worth being pedantic about it."", 'comment_created': datetime.datetime(2022, 8, 31, 12, 26, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}]","[{'commit_sha': 'dcd7cfd16b0f7f6ea731249cca3f478d3d881c11', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8876a55f545d808de33cc9b210c68330c347ffb4', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '14f3c4b0306be7b87d3b6c7975e9eed94004b883', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8a9bfa9ac99d88b9440254c25211203313352b38', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fa82cf709cf6fc2d361d11c9f1586bea035d8526', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '780a93edb0a5b0b974f77792b111482e69b4ead1', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6bd1e6efff2ff171677bf14f64f400832611ccec', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c81aefb67bb156cb0acdea1781acefb7f9b4b6bd', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd0784365d29f26a065bcfde933f08b62309f908c', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8e5f566d37ecce7c6175b75e2a74aa8ebadd7a0a', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}]",,80363742,,User,,6,,1,2
992210106,AuxReader for EDR Files,"Fixes #3629


With ~~panedrlite now closer to~~ pyedr now being a thing, and the actual code itself less likely to still change, I have now finally started work on the EDR auxiliary reader that I want to implement as part of my GSoC project. 
Currently, this is just a skeleton, but it already allows EDR data to be read and assigned to AuxStep instances. 

To Do:
 - [x] Finish implementation, allow similar features as XVGReader
 - [x] Write tests
 - [x] Improve documentation (currently barely there)
 - [x] Write self-contained example in documentation
 - [x] Change the add_auxiliary method to accommodate EDR data


PR Checklist
------------
 - [x] Tests?
 - [x] Docs?
 - [x] CHANGELOG updated?
 - [x] Issue raised/referenced?
",True,3749,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/3749,https://github.com/MDAnalysis/mdanalysis/pull/3749,closed,1426,53,22,63,31,228,5,1,"[{'name': 'Component-Readers'}, {'name': 'Component-Aux'}, {'name': 'Continuous Integration'}, {'name': 'GSoC'}, {'name': 'new-feature'}]",2022-07-09 11:20:41+00:00,2022-09-19 23:14:22+00:00,6263621.0,"72 days, 11:53:41","[{'comment_id': 918270756, 'comment_body': 'Would you be able to link to the XDR protocol somewhere?', 'comment_created': datetime.datetime(2022, 7, 11, 19, 15, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 918271190, 'comment_body': '```suggestion\r\nEDR binary files and returns them human-readable form, either as a Pandas\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 19, 16, 25, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 918272501, 'comment_body': '```suggestion\r\nas auxiliary data into :class:`~MDAnalysis.core.universe.Universe. Standalone usage is also possible, where the\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 19, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 918272867, 'comment_body': 'This is perhaps a down the track thing, but it would be good to give a self contained example here. ', 'comment_created': datetime.datetime(2022, 7, 11, 19, 18, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 918275812, 'comment_body': '```suggestion\r\n    Default reader for .edr files. All data from the file will be read and\r\n\r\n\r\n```', 'comment_created': datetime.datetime(2022, 7, 11, 19, 23, 12, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 918278422, 'comment_body': 'Probably better to use a `try/except` here but up to you. ', 'comment_created': datetime.datetime(2022, 7, 11, 19, 26, 49, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 918278616, 'comment_body': 'likewise here with the `try/except`', 'comment_created': datetime.datetime(2022, 7, 11, 19, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 918279345, 'comment_body': 'I would just use\r\n\r\n```python\r\nraise ValueError(f""\'{key} not a valid index for data with..."")\r\n```\r\nbut again up to you, happy either way.', 'comment_created': datetime.datetime(2022, 7, 11, 19, 28, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 925956127, 'comment_body': ""Yeah good call, I've added this as a to-do here"", 'comment_created': datetime.datetime(2022, 7, 20, 18, 54, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 925957125, 'comment_body': 'This check should not be necessary for the EDRReader after all, as pyedr will always have a ""Time"" entry in the return dictionary', 'comment_created': datetime.datetime(2022, 7, 20, 18, 55, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 927173831, 'comment_body': ""Are we making pyedr an optional dependency? I'm somewhat ok either way, if we could drop the 14MB test files in the next release it's small enough that it could be core if we wanted to. Thoughts @MDAnalysis/coredevs ?"", 'comment_created': datetime.datetime(2022, 7, 21, 23, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 927174271, 'comment_body': 'This also needs adding to the azure pipelines file: https://github.com/MDAnalysis/mdanalysis/blob/2c32ed11c1e6b800397f147e4242f7325900b669/azure-pipelines.yml#L84-L98', 'comment_created': datetime.datetime(2022, 7, 21, 23, 28, 4, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 927174897, 'comment_body': 'probably should go ahead and add type hints here as you go along', 'comment_created': datetime.datetime(2022, 7, 21, 23, 29, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 927175878, 'comment_body': '@BFedder Generally test-driven development is the easiest way to get stuff done, so I would suggest that your next step be to concentrate on getting the tests done. Then you can add missing features / documentation / etc...', 'comment_created': datetime.datetime(2022, 7, 21, 23, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 927176391, 'comment_body': 'In any case, pyedr needs to go into the `setup.py` either as an extra_requires (if not a core dependency), or just as an install_requires otherwise', 'comment_created': datetime.datetime(2022, 7, 21, 23, 33, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 927177466, 'comment_body': ""If we can decrease the size to <1 MB then it's just more convenient to have it as a core dependency — it's light weight and we maintain it."", 'comment_created': datetime.datetime(2022, 7, 21, 23, 36, 53, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 928589178, 'comment_body': 'use `isinstance()`', 'comment_created': datetime.datetime(2022, 7, 25, 8, 13, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 928589904, 'comment_body': 'make panedr the link (avoid bare html links, they look pretty ugly in generated html docs)', 'comment_created': datetime.datetime(2022, 7, 25, 8, 13, 56, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 928590244, 'comment_body': 'make *XDR protocol* the link', 'comment_created': datetime.datetime(2022, 7, 25, 8, 14, 18, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 928590882, 'comment_body': 'Important: link to the specifications for the EDR format. There has to be a link here that leads to some of the GROMACS pages.', 'comment_created': datetime.datetime(2022, 7, 25, 8, 15, 3, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 928591376, 'comment_body': '```reST\r\n:class:`EDRReader`\r\n```\r\nuse markup!', 'comment_created': datetime.datetime(2022, 7, 25, 8, 15, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 928592141, 'comment_body': 'mark up AuxStep', 'comment_created': datetime.datetime(2022, 7, 25, 8, 16, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 928594304, 'comment_body': 'maybe start using pathlib.Path instead of os?', 'comment_created': datetime.datetime(2022, 7, 25, 8, 19, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 928595007, 'comment_body': 'If you only need os.path stuff then only import os.path (which seems to be customary)', 'comment_created': datetime.datetime(2022, 7, 25, 8, 19, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 937949501, 'comment_body': '```suggestion\r\n        of a str or a list of any of :attr:`EDRReader.terms`. `Time` is\r\n```', 'comment_created': datetime.datetime(2022, 8, 4, 15, 40, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 937969309, 'comment_body': '```suggestion\r\n    time_selector : str, optional\r\n```\r\nFrom the `__init__` signature?', 'comment_created': datetime.datetime(2022, 8, 4, 15, 54, 16, tzinfo=datetime.timezone.utc), 'commenter': 'RMeli', 'type': 'User'}, {'comment_id': 937975633, 'comment_body': 'Oh, yes... Need to change the docstring here in general still, thanks! ', 'comment_created': datetime.datetime(2022, 8, 4, 15, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938037964, 'comment_body': 'Not to be too pedantic but entries in the changelog should be newest first ;)', 'comment_created': datetime.datetime(2022, 8, 4, 16, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938040874, 'comment_body': ""The backticks here aren't working properly, see: https://mdanalysis--3749.org.readthedocs.build/en/3749/documentation_pages/auxiliary/EDR.html#edr-auxiliary-reader-mdanalysis-auxiliary-edr\r\n\r\nI can't remember what our style guide here is, do we make args italicized or do we use double backticks?"", 'comment_created': datetime.datetime(2022, 8, 4, 16, 56, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938044459, 'comment_body': 'This is a little bit confusing, why not make `auxname` optional and make `auxterm` the thing that should always match the EDR terms?', 'comment_created': datetime.datetime(2022, 8, 4, 17, 0, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938045815, 'comment_body': 'Use an actual note directive here instead of doing it this way. https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#paragraph-level-markup', 'comment_created': datetime.datetime(2022, 8, 4, 17, 2, 28, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938047765, 'comment_body': '`""*""` isn\'t super Pythonic in my opinion, can we not make the default `None` that just loads everything? That seems like the type of behaviour I would expect.', 'comment_created': datetime.datetime(2022, 8, 4, 17, 4, 50, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938048461, 'comment_body': 'pedantic: are the three empty lines necessary here?', 'comment_created': datetime.datetime(2022, 8, 4, 17, 5, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938048882, 'comment_body': '```suggestion\r\nThe :class:`EDRReader` can also provide the data independently of trajectories. This is\r\n```', 'comment_created': datetime.datetime(2022, 8, 4, 17, 5, 55, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938051436, 'comment_body': 'TBD - `return_data` vs `get_data` vs `get_dict`? \r\n\r\n`return` seems like a loaded word in Python, but that might just be me.', 'comment_created': datetime.datetime(2022, 8, 4, 17, 8, 10, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938053567, 'comment_body': 'These probably need to be re-arranged to match import ordering guidelines https://peps.python.org/pep-0008/#imports\r\n\r\nAlso see https://github.com/MDAnalysis/mdanalysis/issues/3656 as maybe a suggestion to use isort on new files?', 'comment_created': datetime.datetime(2022, 8, 4, 17, 10, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938053842, 'comment_body': '```suggestion\r\n    """""":class:`AuxStep` class for the .edr file format.\r\n```\r\n?', 'comment_created': datetime.datetime(2022, 8, 4, 17, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938055215, 'comment_body': ""I'm all for small methods, but is there an advantage to having `_select_data` separate here, especially if it's not a staticmethod?"", 'comment_created': datetime.datetime(2022, 8, 4, 17, 12, 43, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938058222, 'comment_body': ""Might be missing it, this doesn't seem to be building in the docs?"", 'comment_created': datetime.datetime(2022, 8, 4, 17, 16, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938059065, 'comment_body': ""As you know I've barely been able to say words today, a .edr file or an .edr file?"", 'comment_created': datetime.datetime(2022, 8, 4, 17, 17, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938059718, 'comment_body': 'Also, here and everywhere else, should we just be using `EDR_` instead?', 'comment_created': datetime.datetime(2022, 8, 4, 17, 18, 6, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938062604, 'comment_body': 'I wonder at what point this stops being true, EDR files can get quite large right? We might want to keep an eye on memory usage in the future.', 'comment_created': datetime.datetime(2022, 8, 4, 17, 21, 37, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938065852, 'comment_body': ""General thought here - the whole serialization thing doesn't work for AUX yet right? Or do we need tests to check that things pickle fine?"", 'comment_created': datetime.datetime(2022, 8, 4, 17, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938067360, 'comment_body': '`_auxdata` and `auxdata` are two very similar variables. For the sake of future devs, can we name them different things?', 'comment_created': datetime.datetime(2022, 8, 4, 17, 27, 13, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938071021, 'comment_body': '```suggestion\r\n        self.terms = list(self.auxdata.keys())\r\n```\r\nI think this will give you the same thing and resolve ~ 200 ns faster on my laptop?', 'comment_created': datetime.datetime(2022, 8, 4, 17, 31, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938074509, 'comment_body': 'As mentioned above, I would just make the `None` case the one that users should use here.', 'comment_created': datetime.datetime(2022, 8, 4, 17, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938082023, 'comment_body': 'Seems to me like you could be able to squash this done a little bit.\r\n\r\n1. Create the dictionary by adding the ""Time"" key.\r\n2. list_variable = [data_selector] if isinstance(data_selector, str) else data_selector\r\n3. for var in list_variable -> add dict entry\r\n\r\nThe feasibility of this somewhat depends on my next comment.', 'comment_created': datetime.datetime(2022, 8, 4, 17, 44, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938082891, 'comment_body': 'Should we be doing this level of type checking? Would we not be ok just returning the KeyError here? Maybe we can just do a try/except around the data_dict keying and catch the KeyError instead?', 'comment_created': datetime.datetime(2022, 8, 4, 17, 45, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938095758, 'comment_body': ""I'm going to split my review here, so I'll leave this question, mostly for myself, with the hope that I'll find out the answer when I read the next half  :) \r\n\r\nWhat is the scope for moving this back into base?"", 'comment_created': datetime.datetime(2022, 8, 4, 17, 55, 13, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 938786433, 'comment_body': 'Oh, yeah, it says so right there - whoops!', 'comment_created': datetime.datetime(2022, 8, 5, 12, 57, 49, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938805167, 'comment_body': 'I agree that this isn\'t ideal, I\'m not very happy with this solution... The problem here is that add_auxiliary() is also used to add data from XVGReader instances, which do not have the equivalent of `auxterm`, and where `auxname` is freely assignable. I did it this way for now so using XVGReader works the same as before. But yeah, it is a confusing mess as it is now, so it needs to be changed one way or another. One solution would be reader-specific `add_auxiliary` methods, but I think that would also complicate usage of the system and make it less agnostic to file formats. \r\nI believe some compromise needs to be made here - We could make both `auxname` and `auxterm` initially ""optional"", for example, and then when the method has determined what kind of AuxReader it is dealing with, raise exceptions if for example an `auxterm` isn\'t provided or does not match any terms in the file? But I guess then users would need to call it as `add_auxiliary(auxterm=something)` explicitly. ', 'comment_created': datetime.datetime(2022, 8, 5, 13, 19, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938812974, 'comment_body': 'Happy to change this from `""*""`, but first we need to decide on how to handle `auxname` and `auxname`. I think that if the user only provides an instance of an EDRReader it seems logical all data would be added, so having defaults of `None` would make sense. Depending on how we handle the above issue, we might then need a check to make sure both `auxname` and `auxterm` are unspecified', 'comment_created': datetime.datetime(2022, 8, 5, 13, 28, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938813139, 'comment_body': 'They are not, changed now', 'comment_created': datetime.datetime(2022, 8, 5, 13, 28, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938819264, 'comment_body': ""I have no strong preference for `return` over `get` here, so I'd be fine calling this `get_data` instead if that's preferable"", 'comment_created': datetime.datetime(2022, 8, 5, 13, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938826044, 'comment_body': ""I have now reordered the imports here according to the hierarchy\r\nStandard library imports.\r\nRelated third party imports.\r\nLocal application/library specific imports.\r\n\r\nisort looks helpful, I'll give it a look - thanks!"", 'comment_created': datetime.datetime(2022, 8, 5, 13, 39, 36, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938836857, 'comment_body': ""Both `_select_time` and `_select_data` need to be defined for `AuxReaders` so the base class works. I could just have `_select_time` return the value from the dictionary itself without calling `_select_data`, but then I'd also need to duplicate the try-except which I find less clean"", 'comment_created': datetime.datetime(2022, 8, 5, 13, 50, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938839047, 'comment_body': 'Ah I missed that, thanks', 'comment_created': datetime.datetime(2022, 8, 5, 13, 53, 16, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938839253, 'comment_body': 'I would say ""from a .edr file"", but ""from an EDR file"", but that\'s because I say ""dot edr"" in my mind', 'comment_created': datetime.datetime(2022, 8, 5, 13, 53, 29, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938842058, 'comment_body': ""Personally, I'm not sure the entry in the GROMACS manual is interesting or helpful enough to keep linking to it every time the format is mentioned"", 'comment_created': datetime.datetime(2022, 8, 5, 13, 56, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938843678, 'comment_body': 'Not excessively large I think, but on systems with less memory and while multiple instances of EDRReader are open it might become problematic? How would we monitor that?', 'comment_created': datetime.datetime(2022, 8, 5, 13, 58, 5, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938846013, 'comment_body': ""I'm not sure I understand the question, I have mostly used pickle to store the results of long calculations thus far. Could you  please explain exactly what serialization is in this context, or point me to an explanation?"", 'comment_created': datetime.datetime(2022, 8, 5, 14, 0, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938899369, 'comment_body': 'Yes we should, `auxdata` is now `data_dict`. ', 'comment_created': datetime.datetime(2022, 8, 5, 14, 54, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938903304, 'comment_body': ""Oh that's much better, thank you!"", 'comment_created': datetime.datetime(2022, 8, 5, 14, 58, 23, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938909879, 'comment_body': ""This seems sensible - I'll come back to it next week and see about changing the code accordingly"", 'comment_created': datetime.datetime(2022, 8, 5, 15, 4, 22, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 938912877, 'comment_body': ""Moving it back into base should not be too difficult, `calc_representative` could be changed to first check the AuxReader format and then call different methods depending on the data format. But that would somewhat go against what a base class should do I feel. I'll think about it some more, but I might be in favour of going the other way and requiring that `calc_representative` be defined on the level of individual readers instead. "", 'comment_created': datetime.datetime(2022, 8, 5, 15, 7, 54, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 939652683, 'comment_body': 'Not just energy data present in the EDR file. Perhaps be clear that multiple terms available. ', 'comment_created': datetime.datetime(2022, 8, 7, 11, 36, 27, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939653202, 'comment_body': 'This should emit a warning when an `auxterm` with a space is found. ', 'comment_created': datetime.datetime(2022, 8, 7, 11, 40, 9, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939653445, 'comment_body': 'It might have made more sense to provide a dict, of `auxname:auxterm` but I see that this is done as an API match?', 'comment_created': datetime.datetime(2022, 8, 7, 11, 41, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939653638, 'comment_body': 'Note to change with whatever change we make for ""*"" above. ', 'comment_created': datetime.datetime(2022, 8, 7, 11, 43, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939653848, 'comment_body': 'an edr file for mine sorry to be a PITA', 'comment_created': datetime.datetime(2022, 8, 7, 11, 44, 58, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939654102, 'comment_body': 'You could just emit a warning if the total size gets over a GB or something using the `.nbytes` array attribute on fetch. ', 'comment_created': datetime.datetime(2022, 8, 7, 11, 46, 41, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939654575, 'comment_body': 'Query units? I know both GMX and MDA use a `ps` base but do we enforce units with some thing like `convert_units_to _native` like in coords? Perhaps more of a future discussion. ', 'comment_created': datetime.datetime(2022, 8, 7, 11, 49, 35, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939655183, 'comment_body': 'What this means isn\'t super clear without any context. What do you mean by ""different type""?', 'comment_created': datetime.datetime(2022, 8, 7, 11, 54, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939655489, 'comment_body': ""I assume this is set to -1 in baseclass.  IMO it should probably be `None` but if it can't be avoided thats ok."", 'comment_created': datetime.datetime(2022, 8, 7, 11, 56, 3, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939655800, 'comment_body': 'The more general and uniform the method for selecting ""representative frames"" (side note confusing name) is the better.  IE the less variation between readers the better, hence naively I would probably be in favour of a shift back into base. ', 'comment_created': datetime.datetime(2022, 8, 7, 11, 58, 8, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939656001, 'comment_body': 'Use a proper `numpy.dtype` subclass here for clarity ie `float32` or `float64` IMHO. ', 'comment_created': datetime.datetime(2022, 8, 7, 11, 59, 51, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939656264, 'comment_body': 'For types that have `Union[X,Y,None]` you should probably use `Optional[X,Y]` instead, see https://docs.python.org/3/library/typing.html#typing.Optional', 'comment_created': datetime.datetime(2022, 8, 7, 12, 1, 36, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939656449, 'comment_body': ""Can we not have `_get_auxreader_for` give back a more intelligible error message than `NoneType' object has no attribute 'upper`?"", 'comment_created': datetime.datetime(2022, 8, 7, 12, 3, 4, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939659027, 'comment_body': 'This is too complicated with all the isinstance checks, we need a more modular way to handle more readers. Possibly each reader could provide an attatchment method as a callback, then you would just have to do something like \r\n\r\n```\r\nauxreader.attatch(self , ...)\r\n\r\n```\r\n\r\nThis would require a consistent interface though. ', 'comment_created': datetime.datetime(2022, 8, 7, 12, 21, 52, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939659260, 'comment_body': 'Again if we provide a consistent interface between the two current readers then you should just be able to have one _add_aux method. There are probably complications I am missing, but seems a cleaner way than providing a different attatchment point for each format. The `.attatch ` idea suggested above would fix this but open to discussion. ', 'comment_created': datetime.datetime(2022, 8, 7, 12, 23, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 939659376, 'comment_body': 'Again prefer ducktyping where possible over isinstance for generality. ', 'comment_created': datetime.datetime(2022, 8, 7, 12, 24, 45, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 945823186, 'comment_body': 'Since many reader instances can be associated with a trajectory at the same time, this would probably need to be multi-level: The AuxReaders could get a new method to determine the total size of their arrays, and on the level of coordinates/base, a new attribute like `aux_size` could be created that is automatically updated when a new auxreader instance is associated with the trajectory, and then warn when it becomes large. Does this sound sensible?', 'comment_created': datetime.datetime(2022, 8, 15, 14, 44, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 945841562, 'comment_body': 'I could go either way here - Of course other units of time would have to be converted to make associating with the correct trajectory timesteps possible, but because we cannot really predict what sorts of units the other data in other AuxReaders might have, it might be better to warn and/or fail cleanly so users think about their units carefully and change them themselves were appropriate?', 'comment_created': datetime.datetime(2022, 8, 15, 14, 59, 39, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 945901051, 'comment_body': 'I was able to change this in the base class with no negative repercussions that I could see', 'comment_created': datetime.datetime(2022, 8, 15, 15, 58, 18, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 946042997, 'comment_body': '```suggestion\r\n```\r\nOne empty line between sub-sections', 'comment_created': datetime.datetime(2022, 8, 15, 19, 6, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 946043129, 'comment_body': '```suggestion\r\n```\r\nas above', 'comment_created': datetime.datetime(2022, 8, 15, 19, 6, 51, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 946051460, 'comment_body': 'Rather than an attribute you constantly change, it may make more sense to make this just a method? You can make it an `@property` if you want to expose it ""attribute-like""?', 'comment_created': datetime.datetime(2022, 8, 15, 19, 18, 15, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 946052324, 'comment_body': 'See: https://github.com/MDAnalysis/mdanalysis/issues/2887', 'comment_created': datetime.datetime(2022, 8, 15, 19, 19, 37, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 946052848, 'comment_body': 'Please document the class attributes, otherwise it gets hard to follow.', 'comment_created': datetime.datetime(2022, 8, 15, 19, 20, 26, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 946055745, 'comment_body': '@fiona-naughton was this discussed with the XVG reader?\r\n\r\nI would definitely advocate for converting unit ""coords-style"" or make it very clear (and say it loudly) that the units are not converted and are in the native units as read from file.\r\n\r\nOtherwise we\'re going to get folks comparing Angstroms to nanometers and get confused real quick.', 'comment_created': datetime.datetime(2022, 8, 15, 19, 24, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 946056349, 'comment_body': 'Is there any way to use implicit continuation here?', 'comment_created': datetime.datetime(2022, 8, 15, 19, 25, 36, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 946067204, 'comment_body': 'also `data_selector` is a bit clunky imho (you nearly expect a method to be passed). Are we baked into having this name for the argument or could we have `data_keys` or some ""key"" variant (which better represents the fact that these are keys to `data_dict`)?', 'comment_created': datetime.datetime(2022, 8, 15, 19, 41, 22, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 946067510, 'comment_body': 'If this is a public facing method, it needs parameters, returns and raises docstring bits.', 'comment_created': datetime.datetime(2022, 8, 15, 19, 41, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 946068800, 'comment_body': '```suggestion\r\n        def _get_data_term(term, datadict):\r\n            try:\r\n                return datadict[term]\r\n            except KeyError:\r\n                raise KeyError(f""data selector {term} is invalid. Check the ""\r\n                                       ""EDRReader\'s `terms` attribute.)\r\n\r\n        data_dict = {""Time"": self.data_dict[""Time""]}\r\n        \r\n        if isinstance(data_selector, list):\r\n            for term in data_selector:\r\n                data_dict[term] = _get_data_term(term, self.data_dict)\r\n        else:\r\n            term = data_selector\r\n            data_dict[term] = _get_data_term(term, self.data_dict)\r\n\r\n        return data_dict\r\n```', 'comment_created': datetime.datetime(2022, 8, 15, 19, 43, 49, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 950877091, 'comment_body': 'I\'m still not sure what I would need to do here, but I tested the following and it works: \r\n\r\n```python\r\naux = mda.auxiliary.EDR.EDRReader(""some_aux_data"")\r\nwith open(""some_file.p"", ""wb"") as f:\r\n    pickle.dump(aux, f)\r\n\r\nwith open(""some_file.p, ""rb"") as f:\r\n    aux2 = pickle.load(aux, f)\r\n```', 'comment_created': datetime.datetime(2022, 8, 21, 17, 27, 7, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 950880327, 'comment_body': '`data_selector` is named here to match the rest of `auxiliary`. Both `data_selector` and `time_selector` are introduced in the base class and documented like this: \r\n```python\r\n    @property\r\n    def data_selector(self):\r\n        """"""Key(s) to select auxiliary data values of interest from the full set\r\n        of data read for each step (as stored in ``auxstep``).\r\n\r\n        Type differs between auxiliary formats, depending how the data for each\r\n        step is read in and stored - e.g. data from .xvg files is read in as\r\n        a list and `data_selector` must be a list of valid indicies. If data\r\n        selection is not enabled by the reader, ``data_selector`` will default\r\n        to ``None``.\r\n\r\n        See each individual auxiliary reader.\r\n        """"""\r\n```\r\n\r\nCalling it keys makes sense for EDRReaders as we are dealing with dictionaries, but it is less appropriate for the XVGReader and the future NumPy reader. So I would prefer not to change the name across all of auxiliary, but it could be done for EDR. Should I prioritise matching base API here, or giving the clearer name?', 'comment_created': datetime.datetime(2022, 8, 21, 17, 57, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 950888361, 'comment_body': 'This is now implemented in such a way that a memory footprint check is run when a new instance of an AuxReader is added', 'comment_created': datetime.datetime(2022, 8, 21, 19, 14, 10, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 950918056, 'comment_body': 'Its at times like this that Python needs `virtual` and `override` like in C++, but I like the design. :)', 'comment_created': datetime.datetime(2022, 8, 21, 23, 48, 59, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 950918141, 'comment_body': 'Return a warning including the amount of memory used and the limit. ', 'comment_created': datetime.datetime(2022, 8, 21, 23, 49, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 951441609, 'comment_body': 'The warning message now reports both', 'comment_created': datetime.datetime(2022, 8, 22, 13, 28, 32, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 952040895, 'comment_body': 'This needs a version no (>= 0.6.0) AFAIK?', 'comment_created': datetime.datetime(2022, 8, 23, 0, 45, 1, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952041031, 'comment_body': 'Same here query versioning?', 'comment_created': datetime.datetime(2022, 8, 23, 0, 45, 24, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952041560, 'comment_body': 'Query if we stuck with auxname=""*""?', 'comment_created': datetime.datetime(2022, 8, 23, 0, 46, 42, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952041761, 'comment_body': 'Avoid cosmetic changes that are not for your PR. ', 'comment_created': datetime.datetime(2022, 8, 23, 0, 47, 11, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952042161, 'comment_body': 'Thanks for adding the example below. ', 'comment_created': datetime.datetime(2022, 8, 23, 0, 48, 13, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952043098, 'comment_body': ""As we have a bunch of tests now I'll resolve this. "", 'comment_created': datetime.datetime(2022, 8, 23, 0, 50, 48, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952043453, 'comment_body': ""Not sure about PosixPath as a type here? Can't it just be a string? "", 'comment_created': datetime.datetime(2022, 8, 23, 0, 52, 2, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952043673, 'comment_body': 'Awesome work @BFedder, I will resolve. ', 'comment_created': datetime.datetime(2022, 8, 23, 0, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952046094, 'comment_body': 'Can we add some tests of the style \r\n\r\n```python\r\nimport pickle\r\n\r\ndef test_EDReader_pickleable():\r\n    aux = mda.auxiliary.EDR.EDRReader(""some_aux_data"")\r\n    new_aux = pickle.load(pickle.dump(aux))\r\n    assert(aux.X == new_aux.X)\r\n   etc etc\r\n```\r\n\r\nYou might want to do this with `assert_auxstep_equal`\r\nBut I would be okay with asserts also. ', 'comment_created': datetime.datetime(2022, 8, 23, 0, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952048490, 'comment_body': 'I think for the formats where the units are known eg. GROMACS ones  and other well defined simulation engines, we should enforce convert_units as in `coords`.\r\n\r\nThis is done by adding a `units` class attribute and then enforcing the conversion with a base class method `convert_X_to_native. ` See [here](https://github.com/MDAnalysis/mdanalysis/blob/develop/package/MDAnalysis/coordinates/base.py#L356) for an example. \r\n', 'comment_created': datetime.datetime(2022, 8, 23, 1, 6, 23, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952049551, 'comment_body': 'Scientific notation consistent with 1e+9 as above?', 'comment_created': datetime.datetime(2022, 8, 23, 1, 9, 37, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 952051441, 'comment_body': ""You can (probably) test this by using `delattr`\r\n\r\n```python\r\ndef test_memoryusage_notimpl():\r\n   .... create reader \r\n    delattr(XDRReader, '_memory_usage')\r\n   ...\r\n```\r\n\r\nWhich should leave the base class implementation which will raise `NotImplemented`"", 'comment_created': datetime.datetime(2022, 8, 23, 1, 14, 50, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 953627898, 'comment_body': ""I have added the version number here and below now, but since 0.6.0 is the first ever version of pyedr it shouldn't matter much, right? "", 'comment_created': datetime.datetime(2022, 8, 24, 10, 31, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 953628041, 'comment_body': 'See above', 'comment_created': datetime.datetime(2022, 8, 24, 10, 31, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 953631250, 'comment_body': 'Version numbers are not needed here for the defaults', 'comment_created': datetime.datetime(2022, 8, 24, 10, 34, 2, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 953632101, 'comment_body': ""it actually is better if we don't have it imho"", 'comment_created': datetime.datetime(2022, 8, 24, 10, 35, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 953632714, 'comment_body': 'This is outdated, thanks! Changed now', 'comment_created': datetime.datetime(2022, 8, 24, 10, 35, 52, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 953641684, 'comment_body': ""A string linking to the file is turned into a PosixPath by pathlib's `Path.resolve()`, so _auxdata will not be of type string. This is changed from the XVGReader, where `os.path.abspath` was used instead of pathlib which does return a string"", 'comment_created': datetime.datetime(2022, 8, 24, 10, 47, 1, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 953672660, 'comment_body': 'There is an inconvenience associated with this: While some units may be easily guessed from the dictionary keys (`Time` in an EDR file would be in ps, for example, and energies in kJ/mol), this is less obvious for some of the more ""exotic"" possible entries in aux files like `#Surf*SurfTen`, `Lamb-Protein`, or `Pres. DC`\r\n\r\nIn the EDR file I\'ve created for testing purposes, the following units appear:\r\n  - kJ/mol\r\n  - K\r\n  - bar\r\n  - unitless\r\n  - nm\r\n  - nm ^ 3\r\n  - kg / m^3 \r\n  - bar * nm\r\n  - nm / ps\r\n \r\nUnfortunately, this unit information is no longer present at the level of the EDRReader. It is read from the file in pyedr, but not actually part of the return value. So we would need some way to reliably guess that the unit for ""`Surf*SurfTen` is bar * nm, so we could then convert bar into the equivalent MDA base unit of, I guess, some factor times kJ/(mol·Å) / Å^2? \r\nWe can\'t only change the easier units like time or velocities, because the data would then no longer be consistent, and the only reliable way I can think of to obtain the units is to read them from the file - guessing seems inappropriate here. \r\n\r\nSo the two options I believe we have are not to change any units, or to rewrite pyedr and EDRReader so unit information is retained and then available for conversion. Between these options, I would favour the former (and warn very loudly that no units are changed by us). \r\n\r\nWhat do you think? Am I maybe missing a third option? ', 'comment_created': datetime.datetime(2022, 8, 24, 11, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 953675869, 'comment_body': 'I disagree, units are extremely important, not being able to expose to folks what their units are is just dangerous.\n\nMy view is that we should expose the units in pyedr even if that means making `pint` a requirement for pyedr.', 'comment_created': datetime.datetime(2022, 8, 24, 11, 28, 42, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 953775690, 'comment_body': ""So when should and shouldn't version numbers be specified?"", 'comment_created': datetime.datetime(2022, 8, 24, 13, 4, 30, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 953781929, 'comment_body': ""If there is a minimum or maximum pin that would affect the version being picked up. There isn't here - adding version numbers is unnecessary complexity."", 'comment_created': datetime.datetime(2022, 8, 24, 13, 10, 19, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 953826384, 'comment_body': 'This was a bit problematic, trying to delete _memory_usage just led to AttributeErrors... I have now written a minimal test class without the implementation though and that works', 'comment_created': datetime.datetime(2022, 8, 24, 13, 47, 35, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 955512887, 'comment_body': 'perfect!', 'comment_created': datetime.datetime(2022, 8, 26, 0, 2, 40, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 955518740, 'comment_body': 'I also disagree, inconsistent units is just too confusing. \r\n\r\nI would be happy with a `units` class attribute hardcode for now if we want to push ahead  with merging this PR ASAP, but I do think we need to do the conversion. EDR files always come from GROMACS which always uses the same [units](https://manual.gromacs.org/documentation/2019/reference-manual/definitions.html) so I think the hardcode is safe enough. We could then push `pint` integration down the track. What do you think @IAlibay?\r\n\r\n Nevertheless this brings up an important point. I will raise an issue for Aux units for further general discussion.  ', 'comment_created': datetime.datetime(2022, 8, 26, 0, 16, 46, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 955522320, 'comment_body': ""For right now, I'd hard-code known units. That's consistent with the trajectory I/O.\r\n\r\nCan we have a dict of `auxterm => unit` associated with the EDRReader? (Where `auxterm` is whatever the user ultimately uses to access the data and not what it's called in the EDR file.)\r\n\r\nIf we were to go to a more integrated unit representation then we would change it."", 'comment_created': datetime.datetime(2022, 8, 26, 0, 26, 52, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 955526770, 'comment_body': 'We can move long term discussion to  #3792 :)', 'comment_created': datetime.datetime(2022, 8, 26, 0, 39, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 955647516, 'comment_body': 'Just a word of caution here. I have seen cases where gromacs was used with exotic units. If all your input files are consistent gromacs does not care if your simulation uses reduced units or something. Then it might be non-sensical to convert the units in mdanalysis.\r\n\r\nIt is a rare use case, though. At least I think it is. But it would be good to have a way to have the raw values from the file somehow; even if it implies using the correct unspoken incantation. ', 'comment_created': datetime.datetime(2022, 8, 26, 4, 51, 59, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 955662215, 'comment_body': ""I don't think #3792 is the right place to have this discussion for EDR files. The dealing of interpreting the right units from an EDR file is a pyedr problem not an MDAnalysis one. I honestly don't think we should have a dictionary with just a list of arbitrary fields and their expected units in MDA. If you want that, this should be in pyedr.\n\nConversion to MDA internals then happen on our end if necessary."", 'comment_created': datetime.datetime(2022, 8, 26, 5, 28, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 955765648, 'comment_body': 'I’m fine with having pyedr having to deal with units. In principle, we can decide to just pass everything through as is and the user needs to know the units. (The same applies to XVG anyway and will apply to numpy and CSV). The time, however, is important and we somehow need to en able to get it in the MDA unit of ps. ', 'comment_created': datetime.datetime(2022, 8, 26, 7, 55, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 955771672, 'comment_body': 'At the very least, pyedr could expose the units. It is the one supposed to know them. Converting, though, should probably be done in mdanalysis since it is the one knowing about the targets.\r\n\r\nI am all about using a unit framework, but then we need to use it throughout the library, not just aux. ', 'comment_created': datetime.datetime(2022, 8, 26, 8, 2, 9, tzinfo=datetime.timezone.utc), 'commenter': 'jbarnoud', 'type': 'User'}, {'comment_id': 955932935, 'comment_body': ""Yeah what I'm trying to say is pretty much on the same line of thought as @jbarnoud - we shouldn't be guessing the units here, pyedr should be exposing them, that will be significantly cleaner and faster to implement / update / maintain.\n\nWe then convert them as we do coordinate readers here in the MDA library.\n\nIf we make pint a core requirement of pyedr then we can just use it here for conversion, that being said I'd also live with just a conversion table as per coordinate readers for now."", 'comment_created': datetime.datetime(2022, 8, 26, 11, 9, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 955952473, 'comment_body': 'Hard-coding the units would not be straightforward, because what is written to EDR files depends on the input simulation parameters. Between the cat.edr test file for pyedr and my minimal test file for the EDRReader, for instance, there are 40-ish terms that appear in one but not the other. \r\n\r\nSo I agree that for unit handling, pyedr needs to pass the units on. These could be returned as a second dictionary of entry name -> unit for now and saved at the level of the individual EDRReader. ', 'comment_created': datetime.datetime(2022, 8, 26, 11, 35, 34, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 956033532, 'comment_body': '@hmacdope @IAlibay @orbeckst @jbarnoud I have now opened a [PR](https://github.com/MDAnalysis/panedr/pull/56) that makes pyedr also return the units as read from the EDR file. If we get that merged and released, I can then change the EDRReader to be aware of the units as well. ', 'comment_created': datetime.datetime(2022, 8, 26, 13, 17, 25, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 962380765, 'comment_body': 'To match the `trajectory` API I would have this by triggered by an `__init__` kwarg which is set to true by default, but it is possible to opt out of unit conversion. \r\n\r\n```python\r\ndef __init__(convert_units=True)\r\nself.convert_units = convert_units\r\nif self.convert_units:\r\n    self._convert_units()\r\n....\r\n```\r\nyou get the idea.\r\n', 'comment_created': datetime.datetime(2022, 9, 4, 22, 59, 47, tzinfo=datetime.timezone.utc), 'commenter': 'hmacdope', 'type': 'User'}, {'comment_id': 962384426, 'comment_body': 'We use backticks for args of a function or method.', 'comment_created': datetime.datetime(2022, 9, 4, 23, 29, 51, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962385568, 'comment_body': 'added in 2.4.0', 'comment_created': datetime.datetime(2022, 9, 4, 23, 38, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962385713, 'comment_body': 'formatting is broken — too much italics\r\n\r\n![image](https://user-images.githubusercontent.com/237980/188337944-f39c0fb8-4cb3-4934-8198-188cdb09325d.png)\r\n', 'comment_created': datetime.datetime(2022, 9, 4, 23, 39, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962386486, 'comment_body': 'This section is confusing for a user — a user should not need to know about base.add_auxiliary. It\'s also not clear what `data_dict` is, it doesn\'t even show up in the example below.\r\n\r\nCan you rewrite the docs, starting here, with the user in mind first? If you need to, split it in a section for ""How to used EDR files with trajectories"" (or something obvious) and a ""Developer information"" section.\r\n\r\nIn your blog posts you did a really good job writing for different audiences. Use what you already have... ', 'comment_created': datetime.datetime(2022, 9, 4, 23, 45, 41, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962386738, 'comment_body': ""examples are good! \r\n\r\nI am less of a fan to have explanations in comments — for a start, the code does not get indexed for search. It's much better for readability (also, accessibility) to intersperse text with code."", 'comment_created': datetime.datetime(2022, 9, 4, 23, 47, 22, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962386809, 'comment_body': ""`*` isn't a thing anymore, is it? Needs to be fixed."", 'comment_created': datetime.datetime(2022, 9, 4, 23, 48, 1, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962386878, 'comment_body': 'You have long docs (good!) — use subsections, e.g., ""Using EDRReader in standalone mode"" or similar.', 'comment_created': datetime.datetime(2022, 9, 4, 23, 48, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962386991, 'comment_body': 'Section ""Classes"" to have a heading to jump to.', 'comment_created': datetime.datetime(2022, 9, 4, 23, 49, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962387169, 'comment_body': ""I'd omit `~` so that it's clear that you're looking at the base.AuxStep"", 'comment_created': datetime.datetime(2022, 9, 4, 23, 50, 14, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962387293, 'comment_body': 'Include AuxStep — currently not displayed in docs.', 'comment_created': datetime.datetime(2022, 9, 4, 23, 51, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962387534, 'comment_body': ""Link to EDR file in GROMACS docs. Repeat information about what an EDR file is. If people look at the docs from a development env/IDE or notebook/ipython then they haven't seen the online docs."", 'comment_created': datetime.datetime(2022, 9, 4, 23, 53, 15, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962387677, 'comment_body': 'Should be meth — currently a broken link', 'comment_created': datetime.datetime(2022, 9, 4, 23, 54, 24, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962387700, 'comment_body': ""Don't use the `~`"", 'comment_created': datetime.datetime(2022, 9, 4, 23, 54, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962387731, 'comment_body': ""Don't ~"", 'comment_created': datetime.datetime(2022, 9, 4, 23, 54, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962388285, 'comment_body': 'Instead of ""data point"", use the exact term that you\'re using in the discussion of Aux-things. ... auxterm, auxname, ... whatever. Be precise whenever you can!', 'comment_created': datetime.datetime(2022, 9, 4, 23, 58, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962388789, 'comment_body': 'This dict should actually live in `units.py` to unambiguously define the base units. Could be called `units.MDANALYSIS_BASE_UNITS`.', 'comment_created': datetime.datetime(2022, 9, 5, 0, 2, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962389395, 'comment_body': 'Wrong formatting for `Returns`, needs at least a type', 'comment_created': datetime.datetime(2022, 9, 5, 0, 6, 46, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962389471, 'comment_body': 'document `None`', 'comment_created': datetime.datetime(2022, 9, 5, 0, 7, 28, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962389921, 'comment_body': 'Document in the higher-level methods and at the class level how units are treated.\r\n\r\nMake sure to state which quantities are converted and which are not — this might deserve a warning box. If you create `units.MDANALYSIS_BASE_UNITS` then you can link to it in the docs to simply say, anything in this dict is converted. ', 'comment_created': datetime.datetime(2022, 9, 5, 0, 10, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962390261, 'comment_body': 'weird formatting/indentation, please make it fit the rest of the code', 'comment_created': datetime.datetime(2022, 9, 5, 0, 12, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962390402, 'comment_body': 'Make it a standard doc string (following our doc string standards https://userguide.mdanalysis.org/stable/contributing_code.html#guidelines-for-writing-docstrings', 'comment_created': datetime.datetime(2022, 9, 5, 0, 13, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962390892, 'comment_body': 'Shorter\r\n```python\r\nmemory_limit = kwargs.get(""memory_limit"", 1e+09)\r\n```\r\n... or maybe I misunderstand what the purpose is?', 'comment_created': datetime.datetime(2022, 9, 5, 0, 16, 37, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962392022, 'comment_body': ""Would a ResourceWarning https://docs.python.org/3/library/exceptions.html#ResourceWarning be appropriate? It's ignored by the default settings of the warnings filter, so this _might_ mean that it doesn't show up for most users."", 'comment_created': datetime.datetime(2022, 9, 5, 0, 24, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962393065, 'comment_body': 'Move to after the simple example with pull force. First explain the simple case to the user, then the complicated one. A short example for getting something out of the energy reader would be good.', 'comment_created': datetime.datetime(2022, 9, 5, 0, 31, 1, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962393420, 'comment_body': ""AttributeError does not make sense when there's input missing. Should be `ValueError`.\r\n\r\nSee https://docs.python.org/3/library/exceptions.html#ValueError and discussion at https://docs.python.org/3/library/exceptions.html#TypeError"", 'comment_created': datetime.datetime(2022, 9, 5, 0, 33, 11, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 962393574, 'comment_body': 'add a comma to reduce diff noise when we add the next', 'comment_created': datetime.datetime(2022, 9, 5, 0, 34, 8, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 963847503, 'comment_body': ""For me, the EDRStep is displayed in the docs, and it links properly to AuxStep in its `see also` section, so I'm not sure what exactly to add here - could you clarify please?"", 'comment_created': datetime.datetime(2022, 9, 6, 15, 24, 15, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 963908257, 'comment_body': 'This is great, thanks!', 'comment_created': datetime.datetime(2022, 9, 6, 16, 9, 50, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 963927048, 'comment_body': ""I've gotten the ResourceWarning to work, but if it's ignored by default that might defeat the purpose. I personally would like to get the warning if an entire gigabyte of my memory is just EDR data. \r\nThat being said, the test that checks if the warning is raised still passes, so I'm assuming it works as intended?"", 'comment_created': datetime.datetime(2022, 9, 6, 16, 22, 44, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 963976760, 'comment_body': 'SOrry, got confused between EDRStep and AUXStep', 'comment_created': datetime.datetime(2022, 9, 6, 17, 11, 3, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 963978066, 'comment_body': 'I would probably make it a reST link instead of a bare link. It will still be obvious in the Python help but look nicer in the online version.', 'comment_created': datetime.datetime(2022, 9, 6, 17, 12, 38, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 963979140, 'comment_body': 'document addition of `units.MDANALYSIS_BASE_UNITS`', 'comment_created': datetime.datetime(2022, 9, 6, 17, 13, 49, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 963980167, 'comment_body': 'markup\r\n```suggestion\r\n            If ``None``, returns all data found in :attr:`.data_dict`.\r\n```\r\n', 'comment_created': datetime.datetime(2022, 9, 6, 17, 15, 4, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 963981103, 'comment_body': 'not sure if we document `None` return values ... can probably stay ', 'comment_created': datetime.datetime(2022, 9, 6, 17, 16, 16, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 963983039, 'comment_body': 'Very nice.\r\n\r\nCould you please also add to the caption of the base unit table https://github.com/MDAnalysis/mdanalysis/pull/3749/files#diff-7fde25a4fd35872588976243972caeaebea3711006ad4283815eb3f68be1fd2eR39 a reference to \r\n```reST\r\n.. Table:: Base units in MDAnalysis as encoded in :data:`MDANALYSIS_BASE_UNITS`.\r\n```', 'comment_created': datetime.datetime(2022, 9, 6, 17, 18, 30, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 963984276, 'comment_body': 'Move up to the top of the list as it is important.', 'comment_created': datetime.datetime(2022, 9, 6, 17, 20, 3, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 963990494, 'comment_body': ""Have you tried it out yourself? I can go either way, choose what makes most sense to you.\r\n\r\nI like specific warning classes so I was looking for something that already existed. We don't have anything in [`MDAnalysis.exceptions`](https://github.com/MDAnalysis/mdanalysis/blob/develop/package/MDAnalysis/exceptions.py) but I am also not too keen to introduce more custom warnings/exceptions."", 'comment_created': datetime.datetime(2022, 9, 6, 17, 27, 29, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 964141015, 'comment_body': 'The ResourceWarning does not show for me in normal use, so I have now reverted to UserWarning here', 'comment_created': datetime.datetime(2022, 9, 6, 20, 31, 59, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 964220874, 'comment_body': ""I am closing this thread as resolved, now that we have units coming from pyedr. Please reopen if there's still something that needs addressing."", 'comment_created': datetime.datetime(2022, 9, 6, 22, 16, 12, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 966974280, 'comment_body': ""We are not at this point making pyedr a core dependency - going by the fact that we aren't touching setup.py etc... (I would like to get more coredev oks on this anyways)\r\n\r\nAs a result, I would ask that this be moved to the pip optional dependencies section."", 'comment_created': datetime.datetime(2022, 9, 9, 11, 39, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966974507, 'comment_body': 'As above, optional dep please.', 'comment_created': datetime.datetime(2022, 9, 9, 11, 39, 58, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966975016, 'comment_body': ""It's not common practice to have optional deps in azure pipeline runners, I'd remove it for now."", 'comment_created': datetime.datetime(2022, 9, 9, 11, 40, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966975820, 'comment_body': ""Don't remove this."", 'comment_created': datetime.datetime(2022, 9, 9, 11, 41, 39, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966977944, 'comment_body': '```suggestion\r\nfrom .core import auxreader\r\n\r\n```\r\n2 lines between imports and class def', 'comment_created': datetime.datetime(2022, 9, 9, 11, 44, 20, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966979195, 'comment_body': 'This is a pseudo behaviour change, please document in a versionchanged', 'comment_created': datetime.datetime(2022, 9, 9, 11, 45, 56, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966979674, 'comment_body': 'Update docstring to reflect this, add versionchanged.', 'comment_created': datetime.datetime(2022, 9, 9, 11, 46, 34, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966981004, 'comment_body': ""Update docstring to reflect this, add versionchanged.\r\n\r\nAlso isn't this a breaking change? What happens if someone passes -1 now?"", 'comment_created': datetime.datetime(2022, 9, 9, 11, 48, 5, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966986749, 'comment_body': ""As above, you can't just make the old -1 behaviour go away in 2.4.0. You'll have to set -1 to be the same as None or you'll have to accept -1 here."", 'comment_created': datetime.datetime(2022, 9, 9, 11, 52, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966986894, 'comment_body': 'As above', 'comment_created': datetime.datetime(2022, 9, 9, 11, 52, 40, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966987065, 'comment_body': 'Unecessary line deletion?', 'comment_created': datetime.datetime(2022, 9, 9, 11, 52, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966988651, 'comment_body': ""This feels like it should be calling a class method of the child class rather than implementing this kind of thing here. Otherwise you run the risk of just adding to this forever (it's when when you have 2 readers with different average behaviour, it's a nightmare when you have 20).\r\n\r\nI'll let it go for now, but I would ask that an issue be raised if there is scope for doing this."", 'comment_created': datetime.datetime(2022, 9, 9, 11, 55, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966995935, 'comment_body': ""This is essentially the same thing as flushing the units for coverage, it's not wrong, but it's also not really doing much. One way this could be improved could be to do a conversion check, say 1 nm == 10 * 1 * length?"", 'comment_created': datetime.datetime(2022, 9, 9, 12, 4, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 966996489, 'comment_body': 'This isn\'t rendering properly on RTD for me. See the side panel here.\r\n\r\n<img width=""674"" alt=""image"" src=""https://user-images.githubusercontent.com/12460125/189346153-8970d70f-a744-4d75-8230-2b7baae94d21.png"">\r\n', 'comment_created': datetime.datetime(2022, 9, 9, 12, 5, 33, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967008871, 'comment_body': 'use assert_allclose for float comparisons', 'comment_created': datetime.datetime(2022, 9, 9, 12, 21, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967009761, 'comment_body': 'assert_allclose is the new way we do things, please replace all instances of assert_almost_equal being added here with assert_allclose', 'comment_created': datetime.datetime(2022, 9, 9, 12, 22, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967010908, 'comment_body': 'Rather than three separate checks for raises, it would be better if you just parametrized this method to loop over the match & get_data inputs.', 'comment_created': datetime.datetime(2022, 9, 9, 12, 23, 24, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967013896, 'comment_body': ""String match on a float seems like it might be a bit of a flaky test. I'd be happy with just matching through to `warning!`"", 'comment_created': datetime.datetime(2022, 9, 9, 12, 27, 11, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967021087, 'comment_body': ""Please don't add specific dates for releases in the docs. We never know what might happen and I prefer knowing exactly where our public facing schedule is (which right now is a work-in progress blog post)."", 'comment_created': datetime.datetime(2022, 9, 9, 12, 34, 44, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967025383, 'comment_body': 'Please elaborate based on the memory warning stuff', 'comment_created': datetime.datetime(2022, 9, 9, 12, 40, 3, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967031338, 'comment_body': 'If this is going to change, use f-strings', 'comment_created': datetime.datetime(2022, 9, 9, 12, 47, 7, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967032259, 'comment_body': '```suggestion\r\n```\r\nOne line between class methods?', 'comment_created': datetime.datetime(2022, 9, 9, 12, 48, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967067193, 'comment_body': 'If we go ahead with pyedr as a core dep, please pin to >=0.7.0 everywhere.', 'comment_created': datetime.datetime(2022, 9, 9, 13, 22, 54, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 967255536, 'comment_body': ""I haven't checked locally (@BFedder please check) but RTD does not always render as nicely as our own. It also tends to generally look different on RTD."", 'comment_created': datetime.datetime(2022, 9, 9, 16, 23, 55, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 967255870, 'comment_body': 'See also PR #3775 ', 'comment_created': datetime.datetime(2022, 9, 9, 16, 24, 20, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 967298747, 'comment_body': 'update CHANGELOG?', 'comment_created': datetime.datetime(2022, 9, 9, 17, 16, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 967305502, 'comment_body': ""To add: If you want to change behavior, you have to figure out if it's a breaking change (then it goes in the next major) or not breaking (then it can go in current minor + 2 or sometimes + 1). In either case, you add a deprecation note to the docs and a deprecation warning to the code. It's tedious but being very clear with users is important when you work on code with a sizable user base."", 'comment_created': datetime.datetime(2022, 9, 9, 17, 20, 9, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 967313458, 'comment_body': ""I suggested this test. Primarily I want to know when the dict is changed (either units added or altered).\r\n\r\nIf the actual entries are correct here in the references then we don't need to test them for correctness. \r\n\r\nThe only thing I might suggest is to make `ref` a fixture and add a comment to make extra clear that this is a copy of the dict that we expect."", 'comment_created': datetime.datetime(2022, 9, 9, 17, 23, 44, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 967316880, 'comment_body': 'Or use regular expressions for something vaguely float-like. Btw, the `.` is already matched as ""any character"".\r\n\r\nMaybe `r""warning! Auxiliary data takes up 3[0-9.]*e-06 GB of ""` will roughly capture the message and will fail if the size changes dramatically', 'comment_created': datetime.datetime(2022, 9, 9, 17, 28, 26, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 968140063, 'comment_body': 'I missed changing the docstring of cutoff from -1 to None, that\'s done now. \r\n\r\nThis isn\'t really a breaking change, though, negative numbers do not make sense for the cutoff which is why -1 was chosen originally to indicate ""no cutoff set"". I have now included a check to turn negative numbers to None, though. ', 'comment_created': datetime.datetime(2022, 9, 12, 8, 40, 11, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 968146646, 'comment_body': 'So with the check I do above, -1 is now treated the same as None. The change to None does not change any behaviour, though. -1 was previously used because negative numbers would never appear as cutoffs. If a user does not want to use a cutoff, they would just not pass anything, rather than manually passing -1. So nothing is changed, if you do not want a cutoff you do not pass a cutoff value. The change to None was only necessary to accommodate the different internal data structure of the EDRReader. So while I agree that it is important to be very clear with users, I think this change can be in 2.4.0 because the code behaves the same for the user as it did before. ', 'comment_created': datetime.datetime(2022, 9, 12, 8, 46, 55, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 968151244, 'comment_body': 'This was previously implemented on the level of the EDRReader, but in a discussion we then agreed to move it back into the base class, which required this check here. ', 'comment_created': datetime.datetime(2022, 9, 12, 8, 51, 21, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 968153561, 'comment_body': 'It renders properly locally for me, with the copyright notice at the bottom of the page, not partially occluded on the right', 'comment_created': datetime.datetime(2022, 9, 12, 8, 53, 37, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 968181772, 'comment_body': 'I have changed the regular expression as suggested, thanks! The reason I match through to the warning limit here is to also test if changing the warning limit actually works as expected. ', 'comment_created': datetime.datetime(2022, 9, 12, 9, 21, 3, tzinfo=datetime.timezone.utc), 'commenter': 'BFedder', 'type': 'User'}, {'comment_id': 969741625, 'comment_body': ""> So nothing is changed\r\n\r\nI just want to correct this view (since this is GSoC), changing defaults does count as a breaking change. You can't make the assumption that no one was passing `-1` manually, some folks do pass the default values explicitly (indeed in some ways it's a good approach to avoiding unintended upstream changes in default values - such as the one being done here). Thus, if we change the default value, we _have_ to ensure that `-1` still has the same behaviour (at least for 2.4.0, and then we warn that it'll no longer work in the future).\r\n\r\nedit: this remains true even if `time_step` would never be negative - you can't tell who was subclassing what where (it's something you have to always be careful about public facing classes)."", 'comment_created': datetime.datetime(2022, 9, 13, 14, 58, 48, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 969743820, 'comment_body': 'We need an entry here about the `-1` to `None` change.', 'comment_created': datetime.datetime(2022, 9, 13, 15, 0, 38, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 969766652, 'comment_body': ""this isn't dependent on the time_step (I'm reading through things quickly so maybe I'm missing something?) - the `-1` case needs to be supported for 2.4.0 if that's the case. In which case you need to also raise a DeprecationWarning about support for `-1` and also add a `.. deprecated` docstring entry (and a deprecated entry in the changelog)."", 'comment_created': datetime.datetime(2022, 9, 13, 15, 18, 17, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 969768855, 'comment_body': ""🤔 I can't remember the original conversation, however I also can't see this being sustainable, thoughts @orbeckst - I'd personally like to see an issue raise about implementing this as an expected classmethod."", 'comment_created': datetime.datetime(2022, 9, 13, 15, 20, 8, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 969772188, 'comment_body': 'If this comment needs to be here, could it possibly be docstring instead?', 'comment_created': datetime.datetime(2022, 9, 13, 15, 22, 51, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 969773470, 'comment_body': 'why call the full signature here when you import `assert_allclose` specifically?', 'comment_created': datetime.datetime(2022, 9, 13, 15, 23, 56, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 969788451, 'comment_body': ""I'm happy to let this go for now, but we should keep an eye out once merged if it doesn't mess things up on docs.mdanalysis.org"", 'comment_created': datetime.datetime(2022, 9, 13, 15, 36, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 969887724, 'comment_body': 'I think this should work now because `self.cutoff` is set to `None` *if* it was passed as -1.', 'comment_created': datetime.datetime(2022, 9, 13, 17, 11, 40, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 969890358, 'comment_body': 'Note that this is not quite the old behavior: we now use any negative number as `None`. Previously only -1 would be seen as default. Arguably, that was a bug and we would have gotten weird behavior for -2. \r\n\r\nTherefore, I support the change as is.\r\n\r\nI think you can add a CHANGELOG entry for fixes that you removed undefined behavior for negative numbers <-1 for cutoff.', 'comment_created': datetime.datetime(2022, 9, 13, 17, 14, 42, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 969891689, 'comment_body': ""That's supported now because on init, the cutoff kwarg gets turned into `None` and `self.cutoff` is guaranteed to be `None` or ≥ 0."", 'comment_created': datetime.datetime(2022, 9, 13, 17, 16, 17, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 969897898, 'comment_body': ""Using a [`defaultdict`](https://docs.python.org/3.8/library/collections.html#collections.defaultdict) avoids the if/else. Or initialize a dict with all the terms and zeros. But avoid branches insides loops if you can.\r\n\r\n(It might not be a big performance penalty here but I think it's always good to strive for cleaner code.)"", 'comment_created': datetime.datetime(2022, 9, 13, 17, 23, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 969902446, 'comment_body': 'I honestly don\'t remember the conversation, sorry.\r\n\r\nI agree with @IAlibay that it does sound like something that\'s better bundled with the data itself, i.e., *""a method is a function that knows how to operate on the data* so having a `XXXReader._average_data_over_steps()` method would make for cleaner code.\r\n\r\nIf the only two use cases are either flat numpy arrays or dicts of arrays then it makes sense to keep them here (or as private methods of `base.AUXReader` and re-use the code. \r\n\r\nBut if we want to be flexible and keep the actual reader implementations open then just requiring the method is good. We can always provide the flat array method as the method in the base class (so that there are no changes for XVGReader) and start adding it to the individual readers.\r\n\r\nI would accept the PR with the current version but would want to see an issue that outlines the required discussion and possible solutions.', 'comment_created': datetime.datetime(2022, 9, 13, 17, 28, 21, tzinfo=datetime.timezone.utc), 'commenter': 'orbeckst', 'type': 'User'}, {'comment_id': 969957735, 'comment_body': 'Ah yes sorry my bad, I completely missed the line 309 change.', 'comment_created': datetime.datetime(2022, 9, 13, 18, 25, 27, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 969964900, 'comment_body': ""Yeah that's my bad, I didn't notice the line 309 change. As @orbeckst mentioned elsewhere, I'm happy with this being a note in the changelog entry."", 'comment_created': datetime.datetime(2022, 9, 13, 18, 34, 19, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 973798513, 'comment_body': '```suggestion\r\n  * AuxReaders now have a memory_limit parameter to control when memory usage\r\n```', 'comment_created': datetime.datetime(2022, 9, 18, 23, 49, 13, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 973798665, 'comment_body': 'I\'m kinda lost in the comment sea, I\'d have thought it\'d be fine to only have one of these in ""changes"", but if someone requested it here too then that\'s fine. Although maybe newest entry first ;)', 'comment_created': datetime.datetime(2022, 9, 18, 23, 50, 31, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 973799164, 'comment_body': ""Comment not review thing - The fact that we have a special case for XVG kinda breaks the idea that this should be auxreader independent (I know we've discussed this before). We should keep an eye on this when we add new readers, if this ever expands we'll need to revisit it."", 'comment_created': datetime.datetime(2022, 9, 18, 23, 54, 47, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 973799317, 'comment_body': ""Issue raised so I'm resolving this."", 'comment_created': datetime.datetime(2022, 9, 18, 23, 55, 52, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 973799776, 'comment_body': ""```suggestion\r\n    default: 'pyedr>=0.7.0'\r\n```\r\n?"", 'comment_created': datetime.datetime(2022, 9, 18, 23, 59, 32, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}, {'comment_id': 973799879, 'comment_body': ""```suggestion\r\n      - pyedr>=0.7.0\r\n```\r\nI'm not sure I can find what this relates to, but we probably want to set this to >=0.7.0 too?"", 'comment_created': datetime.datetime(2022, 9, 19, 0, 0, 26, tzinfo=datetime.timezone.utc), 'commenter': 'IAlibay', 'type': 'User'}]","[{'commit_sha': 'f24d296f0c637618d17a880243aeb52614adce42', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '09062252dcf8920d488ad1bb131b0bb42833d3bc', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7c1a8144d0cc11e2eb4ac6aa467accb7bd1ecf0', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '485b5d8cb7caf023143723f95e225b3390da3335', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '104827170792b71b33f17004e8f35ac0beb717a5', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0b49bad438d645732cbe24085817b780be2fcfb3', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e0767b4314a27fe94a8d45c33e13e858fdcefa7a', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0f7b1af32738eb882f4c0ae2b90c2e1a2759a205', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4f944b3f721bcf8234b43107da7d2640a6775f52', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca1a014ef8788e33f45a1ceb57520d652c0f48d8', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '54022bf84c5f6e9fa7b6ee1e049935927245c8bb', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a7f27b1c0fd51d219bf999828496a91838f1b53a', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ca39385b472ba7ecf9b2e99cc3ddac1800db7590', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '6159f2dddd30f1b228d34e3e70ffbc0313d387e6', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f228aa7852d458d75659de223cfe430bd75b4b6b', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '73143f653dd207162b466c14e37af4a820fbbde4', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3be01c64f2c0351f30592983a8404cb0dce4cca8', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '46584abed38c9ade54a605f9bbc2a1fab31fe337', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0733647527f232f3176204222b6bd63a98a1a735', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '77d8fa15065b79bb549e150efd7279e6d2461a40', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3105f0e31b6140e51b8b34a396f4f199e6cec918', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b2f30e3deaa5b4973a1aeb85dd6b3802aecded55', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f48c74cc1dff4aaaf495f63d28846c5c08a0d162', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1f921eabba0eb67dc5e982cd321448217dff99f1', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9152604831c74380f78959d9583588a4a84a3f9a', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f59e6fa37f8444acaca0e39cc4790bb656011a7f', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'b29747cdff5802cbf84fc8c911e637a3ffc8a640', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '3916bdf6ac1241af297d5d4fcdf5785be8290417', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0092d346ef13ee935c980e3717fd5aaf4d0f1b0d', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '92356002fe058e89a9f5a000dd4db94511433adc', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '08907c3d8f891a21374f2bb655c41c16525d7389', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e78ab9e65a2b4f57bf00d3a0bbe242b23941ea1a', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0119ee133f2eafd118df95a0a4acb78bd2148f8b', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c23397005ead5090490a1835746d970ae3e637f7', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cccc1fdac29b2df62b8b9424667389e11f8003cb', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'aa226ca20b1bc89d4ba559d226de334cc4790420', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd77517b02d4b4ca7fc99dcb336990f6216ffe140', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'fed3b06334b7381b7005af6dbd01722ca387d6b2', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ed2099324bb8b951006f99a22527473e20fc470c', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'cea6a97a7e4a5c9c6bff6d4253112ad79a7397a9', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '366077086a5ce023c1247fe1354fd725b489f4b6', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '1a0f4e3ccd6f4af5a3cb645bbaf1ee289197e207', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '117d1385b9133087fcc74ae0c82202d70cc59428', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c7bde960dcfc2de9bc4a44a66739dbc206f280be', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '55a794a094582e1fe2d4ac5af395455241108dfe', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '5e7a779139013108f7953d291fce6818fda9a686', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'dfaba25946faa702716b596ee87b6b9a16e0242f', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd1892f637a086cd32c230136ba6b018c392a512d', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'c5a3a7c35758e7d3bd88657e38e00fc3393a6bef', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '2cc83900bb2665c49635b3d59921a4c5522c111d', 'committer_username': 'orbeckst', 'committer_name': 'Oliver Beckstein', 'committer_email': 'orbeckst@gmail.com', 'commit_date': datetime.datetime(2010, 4, 6, 14, 6, 58, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88c4651c5406dd56a0be0fba471431603043a7a3', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8b718509065f390187e1eb9d7169509f2cb5462a', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd599e9754b1e4e0e7b2ae6fcf1aff46dac65a0a7', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e8f5998b15f36dd5946aba41fcdb59dcd3e1062f', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '336cc80c5edf241fff0c07c55e959468b03aa110', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'a62066ef843ee19bb1e5eb7903ecad8a4d97b909', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '0ad007924c142901ab97e4ba5b5ef73dd6e7dfc7', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '064ab374c31e035ba6a53b94c2d129f9822666f2', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e2564987e3f1ce094648a9cf499d64c2d09d07a6', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '8d9e077902e2b8b9dc3a9442432d62276f81860d', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '11c39243f8e49d98e4cc52a73b680dc5190c83e9', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'e3a2bb8476bf6ebc2d536ae2dc791903b42d486f', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}, {'commit_sha': '828b2dc2f0ce1876f43068b8fd91a3eb1031fad4', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}]",,80363742,,User,,6,,1,2
1065792624,[WIP] NumPy AuxReader,"Fixes #3750

This is very much a work in progress, so far only the very barest of skeletons is present.


PR Checklist
------------
 - [ ] Tests?
 - [ ] Docs?
 - [ ] CHANGELOG updated?
 - [ ] Issue raised/referenced?
",False,3853,https://api.github.com/repos/MDAnalysis/mdanalysis/pulls/3853,https://github.com/MDAnalysis/mdanalysis/pull/3853,open,615,0,4,1,1,0,2,1,"[{'name': 'enhancement'}, {'name': 'Component-Aux'}]",2022-09-23 22:08:28+00:00,,0.0,,[],"[{'commit_sha': 'abc90c52c8b73ac0380e7f28f0cf4877a2a24d4c', 'committer_username': 'BFedder', 'committer_name': None, 'committer_email': None, 'commit_date': datetime.datetime(2021, 3, 9, 22, 15, 44, tzinfo=datetime.timezone.utc)}]",,80363742,,User,,6,,1,2

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
49365749,panedr,MDAnalysis/panedr,Python,7,30,8,8,154,2,7,0,"[{'id': 1037906363, 'number': 56, 'closed': datetime.datetime(2022, 8, 31, 21, 20, 59, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 26, 12, 28, 52, tzinfo=datetime.timezone.utc), 'time_taken': 463927.0, 'time_delta': '5 days, 8:52:07', 'additions': 97, 'deletions': 40, 'state': 'closed'}, {'id': 1014909887, 'number': 55, 'closed': datetime.datetime(2022, 11, 6, 21, 56, 24, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 8, 2, 10, 10, 22, tzinfo=datetime.timezone.utc), 'time_taken': 8336762.0, 'time_delta': '96 days, 11:46:02', 'additions': 100, 'deletions': 14291, 'state': 'closed'}, {'id': 979369898, 'number': 42, 'closed': datetime.datetime(2022, 7, 6, 12, 6, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 26, 18, 50, 43, tzinfo=datetime.timezone.utc), 'time_taken': 839722.0, 'time_delta': '9 days, 17:15:22', 'additions': 183, 'deletions': 42, 'state': 'closed'}, {'id': 979364613, 'number': 41, 'closed': datetime.datetime(2022, 6, 27, 11, 8, 53, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 26, 18, 18, 3, tzinfo=datetime.timezone.utc), 'time_taken': 60650.0, 'time_delta': '16:50:50', 'additions': 4, 'deletions': 4, 'state': 'closed'}, {'id': 972451401, 'number': 36, 'closed': datetime.datetime(2022, 6, 21, 0, 28, 27, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 20, 16, 53, 9, tzinfo=datetime.timezone.utc), 'time_taken': 27318.0, 'time_delta': '7:35:18', 'additions': 8, 'deletions': 3, 'state': 'closed'}, {'id': 966978622, 'number': 33, 'closed': datetime.datetime(2022, 6, 29, 11, 57, 47, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 14, 14, 2, 48, tzinfo=datetime.timezone.utc), 'time_taken': 1288499.0, 'time_delta': '14 days, 21:54:59', 'additions': 50, 'deletions': 8, 'state': 'closed'}, {'id': 965523018, 'number': 32, 'closed': datetime.datetime(2022, 6, 20, 16, 29, 15, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 13, 10, 3, 48, tzinfo=datetime.timezone.utc), 'time_taken': 627927.0, 'time_delta': '7 days, 6:25:27', 'additions': 70, 'deletions': 26, 'state': 'closed'}, {'id': 964016582, 'number': 28, 'closed': datetime.datetime(2022, 6, 17, 22, 46, 41, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 10, 11, 24, 55, tzinfo=datetime.timezone.utc), 'time_taken': 645706.0, 'time_delta': '7 days, 11:21:46', 'additions': 6, 'deletions': 10, 'state': 'closed'}]"
33389183,mdanalysis,MDAnalysis/mdanalysis,Python,643,1275,42,234,7064,480,57,47,"[{'id': 1747557878, 'number': 4472, 'closed': datetime.datetime(2024, 3, 10, 17, 7, 7, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2024, 2, 28, 11, 55, 36, tzinfo=datetime.timezone.utc), 'time_taken': 969091.0, 'time_delta': '11 days, 5:11:31', 'additions': 5, 'deletions': 2, 'state': 'closed'}, {'id': 1246099427, 'number': 4030, 'closed': datetime.datetime(2023, 2, 20, 22, 51, 30, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 2, 18, 18, 26, 47, tzinfo=datetime.timezone.utc), 'time_taken': 188683.0, 'time_delta': '2 days, 4:24:43', 'additions': 19, 'deletions': 3, 'state': 'closed'}, {'id': 1101850748, 'number': 3887, 'closed': datetime.datetime(2023, 2, 13, 22, 52, 46, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 10, 27, 15, 10, 26, tzinfo=datetime.timezone.utc), 'time_taken': 9445340.0, 'time_delta': '109 days, 7:42:20', 'additions': 45, 'deletions': 11, 'state': 'closed'}, {'id': 1065792624, 'number': 3853, 'closed': None, 'created': datetime.datetime(2022, 9, 23, 22, 8, 28, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 615, 'deletions': 0, 'state': 'open'}, {'id': 992210106, 'number': 3749, 'closed': datetime.datetime(2022, 9, 19, 23, 14, 22, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 7, 9, 11, 20, 41, tzinfo=datetime.timezone.utc), 'time_taken': 6263621.0, 'time_delta': '72 days, 11:53:41', 'additions': 1426, 'deletions': 53, 'state': 'closed'}, {'id': 964185633, 'number': 3716, 'closed': datetime.datetime(2022, 6, 10, 15, 52, 5, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 6, 10, 14, 5, 36, tzinfo=datetime.timezone.utc), 'time_taken': 6389.0, 'time_delta': '1:46:29', 'additions': 25, 'deletions': 24, 'state': 'closed'}, {'id': 905249808, 'number': 3617, 'closed': datetime.datetime(2022, 5, 4, 7, 28, 39, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 10, 15, 26, 14, tzinfo=datetime.timezone.utc), 'time_taken': 2044945.0, 'time_delta': '23 days, 16:02:25', 'additions': 251, 'deletions': 65, 'state': 'closed'}, {'id': 888431813, 'number': 3572, 'closed': datetime.datetime(2022, 4, 8, 21, 43, 10, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 24, 14, 14, 32, tzinfo=datetime.timezone.utc), 'time_taken': 1322918.0, 'time_delta': '15 days, 7:28:38', 'additions': 111, 'deletions': 22, 'state': 'closed'}, {'id': 881718921, 'number': 3564, 'closed': datetime.datetime(2022, 3, 17, 11, 50, 13, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 3, 16, 19, 21, 11, tzinfo=datetime.timezone.utc), 'time_taken': 59342.0, 'time_delta': '16:29:02', 'additions': 20, 'deletions': 9, 'state': 'closed'}]"
