pr_id,pr_title,pr_body,is_merged,pr_number,pr_url,pr_html_url,pr_state,additions,deletions,pr_changed_files,pr_commits_count,pr_comments_count,pr_review_comments_count,pr_labels_count,pr_assignees_count,pr_labels,pr_created_at,pr_closed_at,time_taken,time_delta,pr_review_comments,pr_commits,contributor,contributor_id,contributor_email,contributor_type,contributions,contributor_public_repos,contributor_private_repos,contributor_followings,contributor_followers
445386352,RetroPlayer: Savestate manager,"## Description
This PR adds a savestate manager for the RetroPlayer. When the user selects a game instead of prompting him/her to select the game client the savestate manager will prompt him/her to select a savestate. If the user wants to create a new savestate or there are no savestates for the selected game then the game client prompt will be displayed. From the dialog the user can rename a savestate or delete . This PR also adds an in-game savestate manager to quickly change between savestates without exiting the game (this dialog shows only savestates created from the loaded game client). This PR includes the auto captioning feature for savestates using RetroAchievements rich presence evaluation from https://github.com/garbear/xbmc/pull/121. To get the necessary data from the RetroAchievements API the user must login to their account from the game settings. For the auto captioning feature this https://github.com/kodi-game/game.libretro/pull/67 PR must be merged. You can find test builds [here](https://github.com/garbear/xbmc/releases/tag/retroplayer-19alpha2-20200914)

## Motivation and Context
Now RetroPlayer saves only one savestate for each game and it saves it next to the rom, this changes store the savestates in a special folder and give the ability to save multiple savestate for one game

## How Has This Been Tested?
<!--- Please describe in detail how you tested your change -->
<!--- Include details of your testing environment, and the tests you ran to -->
<!--- see how your change affects other areas of the code, etc -->

## Screenshots (if appropriate):
Savestate manager
![image](https://user-images.githubusercontent.com/34605386/91975243-c3a37b80-ed27-11ea-82c9-3b8b065eeef0.png)

Context menu
![image](https://user-images.githubusercontent.com/34605386/87928569-b2f7b880-ca8d-11ea-9d32-80e0f981ebac.png)

In game savestate manager
![image](https://user-images.githubusercontent.com/34605386/91975356-f3eb1a00-ed27-11ea-815a-a44bbe9c8453.png)


## Types of change
<!--- What type of change does your code introduce? Put an `x` in all the boxes that apply like this: [X] -->
- [ ] **Bug fix** (non-breaking change which fixes an issue)
- [ ] **Clean up** (non-breaking change which removes non-working, unmaintained functionality)
- [ ] **Improvement** (non-breaking change which improves existing functionality)
- [X] **New feature** (non-breaking change which adds functionality)
- [ ] **Breaking change** (fix or feature that will cause existing functionality to change)
- [ ] **Cosmetic change** (non-breaking change that doesn't touch code)
- [ ] **None of the above** (please explain below)

## Checklist:
<!--- Go over all the following points, and put an `X` in all the boxes that apply like this: [X] -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [X] My code follows the **[Code Guidelines](https://github.com/xbmc/xbmc/blob/master/docs/CODE_GUIDELINES.md)** of this project 
- [X] My change requires a change to the documentation, either Doxygen or wiki
- [ ] I have updated the documentation accordingly
- [X] I have read the **[Contributing](https://github.com/xbmc/xbmc/blob/master/docs/CONTRIBUTING.md)** document
- [ ] I have added tests to cover my change
- [ ] All new and existing tests passed
",True,120,https://api.github.com/repos/garbear/xbmc/pulls/120,https://github.com/garbear/xbmc/pull/120,closed,2535,289,70,7,12,57,0,0,[],2020-07-07 12:40:13+00:00,2022-01-25 04:12:16+00:00,48958323.0,"566 days, 15:32:03","[{'comment_id': 456956282, 'comment_body': 'Can you make this a new ID, and change the one for `Saved` to empty? Transifix does better with adding new strings than changing existing ones.', 'comment_created': datetime.datetime(2020, 7, 19, 21, 13, 12, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 456956657, 'comment_body': ""Generally we pass strings by const reference (`const std::string&`) to save a copy (though sometimes it's elided by the compiler).\r\n\r\nYou'll notice above that `GetPlayingGame()` is an exception to this and returns a `std::string` instead of a `const std::string&`. That's because it's an override of a virtual function, and virtual functions shouldn't restrict how implementers manage memory. Recall that if we return `const std::string&`, the memory it references has to be valid the life of the object."", 'comment_created': datetime.datetime(2020, 7, 19, 21, 16, 53, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 456956825, 'comment_body': 'Same here, `const std::string&`', 'comment_created': datetime.datetime(2020, 7, 19, 21, 18, 9, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 456957087, 'comment_body': 'Use a path joining function instead of string concatenation. Besides the performance impact of concatting (instead you would use `stringstreams`), the `/` is not the universal path separator because windows uses `\\`', 'comment_created': datetime.datetime(2020, 7, 19, 21, 20, 44, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 456957644, 'comment_body': 'Stylistic comment, we usually omit curly braces for a single line', 'comment_created': datetime.datetime(2020, 7, 19, 21, 27, 10, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457001182, 'comment_body': 'I just tested `xbmc/games/dialogs/GUIDialogSelectSavestate.cpp` and think that `New` would be better as `New game` (ok for the other dialog though)\r\n![New game](https://user-images.githubusercontent.com/531482/87894984-20a5d500-c9f9-11ea-9ac4-92571eff7ac2.png)\r\n', 'comment_created': datetime.datetime(2020, 7, 20, 2, 51, 10, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457724662, 'comment_body': 'nit\r\n```suggestion\r\n   * \\param savestatePath Output. The path to the savestate selected. Empty if new savestate was selected\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 22, 21, 32, tzinfo=datetime.timezone.utc), 'commenter': 'VelocityRa', 'type': 'User'}, {'comment_id': 457725380, 'comment_body': '```suggestion\r\n  if (m_renderBuffers.size() == 0)\r\n```\r\n`size_t` is unsigned', 'comment_created': datetime.datetime(2020, 7, 20, 22, 23, 26, tzinfo=datetime.timezone.utc), 'commenter': 'VelocityRa', 'type': 'User'}, {'comment_id': 457725701, 'comment_body': 'nit: remove empty line', 'comment_created': datetime.datetime(2020, 7, 20, 22, 24, 21, tzinfo=datetime.timezone.utc), 'commenter': 'VelocityRa', 'type': 'User'}, {'comment_id': 457726147, 'comment_body': 'nit\r\n```suggestion\r\n  // If there are no savestates, or the user wants to create a new savestate\r\n```', 'comment_created': datetime.datetime(2020, 7, 20, 22, 25, 29, tzinfo=datetime.timezone.utc), 'commenter': 'VelocityRa', 'type': 'User'}, {'comment_id': 457761447, 'comment_body': 'Another path concatenation', 'comment_created': datetime.datetime(2020, 7, 21, 0, 14, 6, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457763362, 'comment_body': ""Unused variable. You could set the speed back after hardware reset, or does hardware reset force speed to zero? maybe it shouldn't do that?"", 'comment_created': datetime.datetime(2020, 7, 21, 0, 20, 40, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457767969, 'comment_body': 'When multiple sentences are found in a single comment block, you might want to use sentence separators (aka periods)', 'comment_created': datetime.datetime(2020, 7, 21, 0, 37, 5, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457769550, 'comment_body': ""Here you use `$VAR[InfoWallThumbVar]`.\r\n\r\nThe variable [resolves](https://github.com/garbear/xbmc/blob/retroplayer-18.7/addons/skin.estuary/xml/Variables.xml#L70) to:\r\n\r\n* `$INFO[Listitem.Art(poster)]` if there is fanart\r\n* `$INFO[ListItem.Icon]` if there is not\r\n\r\nbecause we don't expect to use fanart for icons, let's set this value to `$INFO[ListItem.Icon]` directly.\r\n"", 'comment_created': datetime.datetime(2020, 7, 21, 0, 42, 51, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457773057, 'comment_body': ""`CSavestateDatabase::GetSavestatesNav()` is not idempotent; if called multiple times, `m_items` will change each time. On initialization, we want `m_items` to equal the savestates only, not include the savestates from the last call. We have two options:\r\n\r\n1. Clear `m_items` directly before this\r\n2. Clear `m_items` in a deinitialization function\r\n\r\nIf we take step 2, then CDialogInGameSaves won't have an invalid state when not initialized. Therefore, immediately after this function, I expect to see a deinitialization function with the line `m_items.Clear()`."", 'comment_created': datetime.datetime(2020, 7, 21, 0, 55, 47, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457774782, 'comment_body': 'As you know, the `using` keyword imports all known symbols from the namespace into the global namespace. For huge projects like Kodi, if we were to do this for every component, it would lead to explosive growth of global namespace population. Therefore, try to avoid importing unrelated namespaces outside of the ones this class is declared within.', 'comment_created': datetime.datetime(2020, 7, 21, 1, 2, 27, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457775283, 'comment_body': 'Also, can you add `#include ""filesystem/IFileTypes.h""` to this file? It\'s needed for `XFILE::READ_TRUNCATED`, which doesn\'t seem to be introduced by your PR, but additional lines added don\'t hurt a PR that is mostly lines added.', 'comment_created': datetime.datetime(2020, 7, 21, 1, 4, 28, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457790873, 'comment_body': ""(assumes apocalyptic tone) capturing system time is EVIL!!! I work in embedded, where system time can be wildly inaccurate with no internet. My company even takes the hit and includes an RTC on *all* of our devices to make system time less unwieldy.\r\n\r\nTo reflect this viewpoint, it's best to capture system time exactly once, and use that result everywhere. The `save` should include the time it was captured it, so let's use that instead of taking a new reading of the system clock."", 'comment_created': datetime.datetime(2020, 7, 21, 1, 59, 19, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 457899680, 'comment_body': 'I clear m_items on exit here https://github.com/garbear/xbmc/blob/0989016af62b738e594788557af2cf76cc5838fe/xbmc/games/dialogs/osd/DialogInGameSaves.cpp#L98-L101', 'comment_created': datetime.datetime(2020, 7, 21, 7, 41, 56, tzinfo=datetime.timezone.utc), 'commenter': 'NikosSiak', 'type': 'User'}, {'comment_id': 457917999, 'comment_body': 'same thing here https://github.com/NikosSiak/xbmc/blob/savestate-manager/addons/skin.estuary/xml/Includes_DialogSelect.xml#L242 ', 'comment_created': datetime.datetime(2020, 7, 21, 8, 14, 38, tzinfo=datetime.timezone.utc), 'commenter': 'NikosSiak', 'type': 'User'}, {'comment_id': 468178990, 'comment_body': 'I hit this logic path when I click ""New"". Shouldn\'t this be `CreateSavestate()`?', 'comment_created': datetime.datetime(2020, 8, 10, 20, 52, 20, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 468183024, 'comment_body': 'RetroPlayer.cpp is starting to fill up with GUI logic. Perfect time to refactor GUI code into a new file RetroPlayerGUI.cpp', 'comment_created': datetime.datetime(2020, 8, 10, 21, 0, 19, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 468188622, 'comment_body': 'In the future, we might want to know more about the loaded savestate beyond the path. The code would scale better if we make the savestate a `std::shared_ptr` and store the entire thing, and replace `m_loadedSavestatePath` with `m_loadedSavestate->Path()`.', 'comment_created': datetime.datetime(2020, 8, 10, 21, 12, 14, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 468197952, 'comment_body': 'The class `IPlayback` exposes a lot of internal functionality. For example, an external client could call `Initialize()` multiple times and wreak havoc. Instead of exposing the entire interface, how about just exposing the `CreateSavestate()` and `LoadSavestate()` functions?', 'comment_created': datetime.datetime(2020, 8, 10, 21, 32, 2, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 468251625, 'comment_body': ""Ah I see, the savestate doesn't save its own path, this has to be stored outside the savestate. Disregard comment."", 'comment_created': datetime.datetime(2020, 8, 11, 0, 5, 14, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 468730186, 'comment_body': 'Unused variable', 'comment_created': datetime.datetime(2020, 8, 11, 17, 1, 24, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 469116323, 'comment_body': '`ResetLoadedSave()` resets the loaded game path to `""""` so when RetroPlayer calls `CreateSavestate()` it will save to a new path', 'comment_created': datetime.datetime(2020, 8, 12, 9, 7, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NikosSiak', 'type': 'User'}, {'comment_id': 469466234, 'comment_body': 'I see. The ""New"" logic is a bit unintuitive for me but we\'ll see what testers think. One of these two commands is calling a hardware reset, which we probably don\'t want (I don\'t expect creating a new savestate to blow out the current state)', 'comment_created': datetime.datetime(2020, 8, 12, 18, 43, 33, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 469475327, 'comment_body': ""The current state is saved when you enter the in-game manager [here](https://github.com/garbear/xbmc/blob/b668f5352125b81ffff4e80535c99462434ff2af/xbmc/games/dialogs/osd/DialogInGameSaves.cpp#L54-L56) and then the hardware reset is what is called when you reset the game from the osd, I don't know how else to restart the game"", 'comment_created': datetime.datetime(2020, 8, 12, 18, 59, 52, tzinfo=datetime.timezone.utc), 'commenter': 'NikosSiak', 'type': 'User'}, {'comment_id': 474073951, 'comment_body': 'extraneous newline', 'comment_created': datetime.datetime(2020, 8, 20, 15, 32, 24, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 474077131, 'comment_body': '`char hash[33] = { };` to guard against unterminated string in external `RCGenerateHashFromFile()`', 'comment_created': datetime.datetime(2020, 8, 20, 15, 35, 23, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 474078027, 'comment_body': 'Should this take a size argument for the target string to guard against a buffer overflow?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 36, 13, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 474078605, 'comment_body': 'magic number? where does 50 come from? should it be declared next to `URL_SIZE`?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 36, 47, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 474081828, 'comment_body': 'Another magic number that should probably be defined at the top of the file.', 'comment_created': datetime.datetime(2020, 8, 20, 15, 39, 51, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 474083916, 'comment_body': 'Can you make this var static and move the definition to the cpp file?', 'comment_created': datetime.datetime(2020, 8, 20, 15, 42, 48, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 474531439, 'comment_body': 'no need, rcheevos takes a buffer of 33 characters for the hash https://github.com/RetroAchievements/rcheevos/blob/develop/src/rhash/hash.c#L1323', 'comment_created': datetime.datetime(2020, 8, 21, 8, 41, 30, tzinfo=datetime.timezone.utc), 'commenter': 'NikosSiak', 'type': 'User'}, {'comment_id': 479712704, 'comment_body': ""About 1/3 of login attempts for me fail due to a buffer overflow. `Parse()` takes a null-terminated char array, but there's no guarantee the `response.get()` is null-terminated.\r\n\r\nHere's how we can guarantee a null-terminated string. Construct a std::string using the std::string(char* data, size_t size) constructor:\r\n\r\n```c++\r\nstd::string strResponse(response.get(), response.size());\r\n```\r\n\r\nNow, `strResponse.c_str()` will be null-terminated. Note that this requires re-allocating the file, so it will have negative performance impact for large files.\r\n\r\nCan you hunt down the other possible buffer overflows using XUTILS::auto_buffer?"", 'comment_created': datetime.datetime(2020, 8, 30, 2, 37, 11, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 479800105, 'comment_body': 'Unused variable', 'comment_created': datetime.datetime(2020, 8, 30, 18, 18, 28, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 479800570, 'comment_body': ""it's an output parameter"", 'comment_created': datetime.datetime(2020, 8, 30, 18, 23, 27, tzinfo=datetime.timezone.utc), 'commenter': 'NikosSiak', 'type': 'User'}, {'comment_id': 480314561, 'comment_body': 'I recommend renaming this variable `nowUtc`', 'comment_created': datetime.datetime(2020, 8, 31, 18, 36, 55, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 480315051, 'comment_body': 'No math spread through code, use a CDateTime function that gives you what you want', 'comment_created': datetime.datetime(2020, 8, 31, 18, 37, 43, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 483268320, 'comment_body': ""```suggestion\r\n    createdUTC.SetFromW3CDateTime(m_savestate->created()->c_str(), false);\r\n```\r\n\r\nUsing `UTC` in the variable name indicates to the reader that the time is UTC.\r\n\r\nEven though the second parameter is false by default, being explicit indicates to the reader that the default value is intentional. Lots of times I've removed the default from parameters and some uses left me scratching my head what the original author meant."", 'comment_created': datetime.datetime(2020, 9, 3, 21, 39, 8, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 748902939, 'comment_body': 'Can you alphabetize to reduce git conflicts in the future?', 'comment_created': datetime.datetime(2021, 11, 14, 20, 15, 53, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 752568341, 'comment_body': 'How about:\r\n\r\n```\r\nmsgid ""Your account is not verified. Please check your email to complete your sign up.""\r\n```', 'comment_created': datetime.datetime(2021, 11, 18, 19, 39, 19, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 752587108, 'comment_body': 'ID is an abbreviation, can you capitalize throughout?', 'comment_created': datetime.datetime(2021, 11, 18, 20, 6, 14, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 752587508, 'comment_body': ""Can you be a bit more descriptive about what an rhash is and how it's derived? I think this information would be helpful."", 'comment_created': datetime.datetime(2021, 11, 18, 20, 6, 54, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 752587853, 'comment_body': 'same with URL', 'comment_created': datetime.datetime(2021, 11, 18, 20, 7, 26, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 752588101, 'comment_body': 'capitalization: RetroAchievements', 'comment_created': datetime.datetime(2021, 11, 18, 20, 7, 53, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 753509837, 'comment_body': 'Looks like a rebase error. This line should be removed', 'comment_created': datetime.datetime(2021, 11, 19, 20, 22, 53, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 753510245, 'comment_body': 'Looks like a couple strings still need descriptions', 'comment_created': datetime.datetime(2021, 11, 19, 20, 23, 34, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 753510527, 'comment_body': 'Should this control be removed?', 'comment_created': datetime.datetime(2021, 11, 19, 20, 24, 10, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 753511852, 'comment_body': 'Can you document these functions?', 'comment_created': datetime.datetime(2021, 11, 19, 20, 26, 38, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 753785035, 'comment_body': 'There is another `TODO` image control a few lines below. I am not sure how these got here but I removed them and nothing changed.', 'comment_created': datetime.datetime(2021, 11, 21, 11, 23, 28, tzinfo=datetime.timezone.utc), 'commenter': 'NikosSiak', 'type': 'User'}, {'comment_id': 790173038, 'comment_body': 'Constants should go in an anonymous namespace, so that the symbols are private to this file and don\'t clash with other global symbols of the same name:\r\n\r\n```c++\r\nnamespace\r\n{\r\nconstexpr auto SUCCESS = ""Success"";\r\nconstexpr auto GAME_ID = ""GameID"";\r\nconstexpr auto PATCH_DATA = ""PatchData"";\r\nconstexpr auto RICH_PRESENCE = ""RichPresencePatch"";\r\n\r\nconstexpr int RESPORNSE_SIZE = 64;\r\n}\r\n```', 'comment_created': datetime.datetime(2022, 1, 22, 18, 43, 6, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 790173270, 'comment_body': ""Remove the {} on these two lines:\r\n\r\n```c++\r\n  std::string m_romHash;\r\n  std::string m_richPresenceScript;\r\n```\r\n\r\nBecause std::string has a constructor, you don't need an explicit initializer like you do with the types on the next three lines."", 'comment_created': datetime.datetime(2022, 1, 22, 18, 45, 23, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 790173406, 'comment_body': 'Can you make this `unsigned int`? I like the explicit int to differentiate it from unsigned long, etc', 'comment_created': datetime.datetime(2022, 1, 22, 18, 46, 40, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 790173445, 'comment_body': 'Can you move the definition (the big long list) to the cpp file?', 'comment_created': datetime.datetime(2022, 1, 22, 18, 47, 18, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}]","[{'commit_sha': '16fa0c40edb99bcdf0ba2b705b9ba441b2a2291d', 'committer_username': 'NikosSiak', 'committer_name': 'Nick Siakas', 'committer_email': 'nikos.siakas@gmail.com', 'commit_date': datetime.datetime(2017, 12, 16, 16, 57, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '89bcf9f5a4cacd76d4d3bf27bb7337fc26f65459', 'committer_username': 'garbear', 'committer_name': 'Garrett Brown', 'committer_email': None, 'commit_date': datetime.datetime(2010, 12, 21, 5, 5, 23, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f992360434cca255e7e928eb2906bd5d1505cb81', 'committer_username': 'NikosSiak', 'committer_name': 'Nick Siakas', 'committer_email': 'nikos.siakas@gmail.com', 'commit_date': datetime.datetime(2017, 12, 16, 16, 57, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ad39fd19c3002c606d5ad61f6a2a654313c09f8b', 'committer_username': 'NikosSiak', 'committer_name': 'Nick Siakas', 'committer_email': 'nikos.siakas@gmail.com', 'commit_date': datetime.datetime(2017, 12, 16, 16, 57, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '4925726d8e29ae6b5fe11e4e91393caefbb5044f', 'committer_username': 'NikosSiak', 'committer_name': 'Nick Siakas', 'committer_email': 'nikos.siakas@gmail.com', 'commit_date': datetime.datetime(2017, 12, 16, 16, 57, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'ee87c386c1c395c946ba0dade4e76b1f38d02144', 'committer_username': 'NikosSiak', 'committer_name': 'Nick Siakas', 'committer_email': 'nikos.siakas@gmail.com', 'commit_date': datetime.datetime(2017, 12, 16, 16, 57, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'f2f5d61a5067a08e08cac67517304f38375aa038', 'committer_username': 'garbear', 'committer_name': 'Garrett Brown', 'committer_email': None, 'commit_date': datetime.datetime(2010, 12, 21, 5, 5, 23, tzinfo=datetime.timezone.utc)}]",Nick Siakas,34605386,nikos.siakas@gmail.com,User,,25,,21,28
468322823,Rcheevos,"## Description
This PR adds support for rcheevos to RetroPlayer. This PR is used by https://github.com/garbear/xbmc/pull/120 and depends on it to be build",True,67,https://api.github.com/repos/kodi-game/game.libretro/pulls/67,https://github.com/kodi-game/game.libretro/pull/67,closed,909,6,19,4,5,3,0,0,[],2020-08-15 14:24:53+00:00,2022-01-25 04:12:35+00:00,45582462.0,"527 days, 13:47:42","[{'comment_id': 506787825, 'comment_body': ""@NikosSiak I accidentally left two `reinterpret_cast<>`s from https://github.com/kodi-game/game.libretro/pull/58 that should have also been converted to `static_cast<>`. Can you change?\r\n\r\nThe reason for the change is because it's safe to convert `void*` to any other pointer type, but libretro uses a declared-but-undefined struct that the compiler doesn't deduce to `void*`, so we need to break out the big guns (`reinterpret_cast<>`) to brute-force the compiler into accepting the conversion. We pay for the type-safety of libretro with a less-safe cast in https://github.com/kodi-game/game.libretro/pull/58, which is OK. Here, rcheevos uses `void*` instead of a struct, so we can use the safer `static_cast<>`."", 'comment_created': datetime.datetime(2020, 10, 17, 3, 25, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 790195256, 'comment_body': 'I believe the spelling is ""reduce""', 'comment_created': datetime.datetime(2022, 1, 22, 23, 26, 15, tzinfo=datetime.timezone.utc), 'commenter': 'garbear', 'type': 'User'}, {'comment_id': 790256906, 'comment_body': 'yeah you are right, fixed!', 'comment_created': datetime.datetime(2022, 1, 23, 10, 32, 33, tzinfo=datetime.timezone.utc), 'commenter': 'NikosSiak', 'type': 'User'}]","[{'commit_sha': 'efddc151d985d528d8b2c39d1e713035cdcd8ceb', 'committer_username': 'NikosSiak', 'committer_name': 'Nick Siakas', 'committer_email': 'nikos.siakas@gmail.com', 'commit_date': datetime.datetime(2017, 12, 16, 16, 57, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '9687061c363b7af4207811d0b6fad76193e6758e', 'committer_username': 'NikosSiak', 'committer_name': 'Nick Siakas', 'committer_email': 'nikos.siakas@gmail.com', 'commit_date': datetime.datetime(2017, 12, 16, 16, 57, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': '88536bc8ed9efa89f408373584556a2c51ed4766', 'committer_username': 'NikosSiak', 'committer_name': 'Nick Siakas', 'committer_email': 'nikos.siakas@gmail.com', 'commit_date': datetime.datetime(2017, 12, 16, 16, 57, 59, tzinfo=datetime.timezone.utc)}, {'commit_sha': 'd54d5a6aad4ff69a98e20040c994d677277b3b56', 'committer_username': 'garbear', 'committer_name': 'Garrett Brown', 'committer_email': None, 'commit_date': datetime.datetime(2010, 12, 21, 5, 5, 23, tzinfo=datetime.timezone.utc)}]",Nick Siakas,34605386,nikos.siakas@gmail.com,User,,25,,21,28

Project_ID,Name,Full_name,Language,Forks,Stars,Watchers,contributors,commits,issues,branches,PRs_count,contributor pullrequests
1593140,xbmc,garbear/xbmc,C++,53,133,28,1174,65888,26,192,6,"[{'id': 1299041654, 'number': 134, 'closed': datetime.datetime(2023, 4, 2, 9, 19, 33, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2023, 4, 2, 9, 19, 11, tzinfo=datetime.timezone.utc), 'time_taken': 22.0, 'time_delta': '0:00:22', 'additions': 19195, 'deletions': 1726, 'state': 'closed'}, {'id': 496995202, 'number': 123, 'closed': None, 'created': datetime.datetime(2020, 10, 2, 15, 56, 15, tzinfo=datetime.timezone.utc), 'time_taken': 0.0, 'time_delta': '', 'additions': 524447, 'deletions': 1901, 'state': 'open'}, {'id': 468321914, 'number': 121, 'closed': datetime.datetime(2020, 8, 18, 10, 47, 20, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 14, 15, 57, tzinfo=datetime.timezone.utc), 'time_taken': 246683.0, 'time_delta': '2 days, 20:31:23', 'additions': 2641, 'deletions': 224, 'state': 'closed'}, {'id': 445386352, 'number': 120, 'closed': datetime.datetime(2022, 1, 25, 4, 12, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 7, 7, 12, 40, 13, tzinfo=datetime.timezone.utc), 'time_taken': 48958323.0, 'time_delta': '566 days, 15:32:03', 'additions': 2535, 'deletions': 289, 'state': 'closed'}, {'id': 388425051, 'number': 115, 'closed': datetime.datetime(2020, 7, 25, 7, 6, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 3, 14, 20, 16, 42, tzinfo=datetime.timezone.utc), 'time_taken': 11443758.0, 'time_delta': '132 days, 10:49:18', 'additions': 9, 'deletions': 4, 'state': 'closed'}]"
31511696,game.libretro,kodi-game/game.libretro,C++,26,37,12,20,447,7,12,2,"[{'id': 904917500, 'number': 87, 'closed': datetime.datetime(2022, 4, 10, 11, 32, 16, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 4, 9, 13, 48, 38, tzinfo=datetime.timezone.utc), 'time_taken': 78218.0, 'time_delta': '21:43:38', 'additions': 1, 'deletions': 1, 'state': 'closed'}, {'id': 833784385, 'number': 84, 'closed': datetime.datetime(2022, 3, 26, 16, 32, 44, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2022, 1, 27, 18, 48, 55, tzinfo=datetime.timezone.utc), 'time_taken': 5003029.0, 'time_delta': '57 days, 21:43:49', 'additions': 988, 'deletions': 3909, 'state': 'closed'}, {'id': 468322823, 'number': 67, 'closed': datetime.datetime(2022, 1, 25, 4, 12, 35, tzinfo=datetime.timezone.utc), 'created': datetime.datetime(2020, 8, 15, 14, 24, 53, tzinfo=datetime.timezone.utc), 'time_taken': 45582462.0, 'time_delta': '527 days, 13:47:42', 'additions': 909, 'deletions': 6, 'state': 'closed'}]"
